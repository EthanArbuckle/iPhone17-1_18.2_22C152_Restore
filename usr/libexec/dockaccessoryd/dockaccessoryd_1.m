void sub_100120ED0(void *a1, uint64_t a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  void *v34;
  void *v35;
  id v36;
  char v37;
  char *v38;
  char v39;
  id v40;
  void *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  BOOL v49;
  uint8_t *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  unsigned int *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  BOOL v74;
  uint64_t v75;
  uint8_t *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  BOOL v101;
  uint64_t v102;
  uint8_t *v103;
  char *v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  int v108;
  void (**v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  id v112;
  unint64_t v113;
  id v114;
  NSObject *v115;
  os_log_type_t v116;
  int v117;
  BOOL v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  NSObject *v140;
  os_log_type_t v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  void (**v148)(char *, uint64_t, uint64_t);
  char *v149;
  char *v150;
  void *v151;
  char *v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  os_unfair_lock_s *v161;
  void *v162;
  os_unfair_lock_s *v163;
  id v164;
  char *v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  void *v171;
  void v172[3];
  uint64_t v173;
  int v174;
  NSObject *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  char *v180;
  id v181;
  uint64_t v182;
  void (**v183)(char *, uint64_t);
  void (**v184)(char *, uint64_t, uint64_t);
  char *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196[4];

  v187 = a2;
  v188 = a5;
  v191 = a4;
  v192 = a3;
  v186 = sub_1000992E8(&qword_1002AA0B0);
  v183 = *(void (***)(char *, uint64_t))(v186 - 8);
  __chkstk_darwin(v186);
  v185 = (char *)v172 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Errors();
  v194 = *(void *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v193 = (char *)v172 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (unint64_t)v172 - v12;
  v14 = type metadata accessor for Logger();
  v189 = *(void *)(v14 - 8);
  v190 = v14;
  v15 = __chkstk_darwin(v14);
  v184 = (void (**)(char *, uint64_t, uint64_t))((char *)v172 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v172 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)v172 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)v172 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)v172 - v27;
  v29 = __chkstk_darwin(v26);
  v31 = (char *)v172 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)v172 - v32;
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    v55 = v190;
    v56 = sub_100096F64(v190, (uint64_t)qword_1002A9E40);
    v57 = v189;
    (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v33, v56, v55);
    v58 = Logger.logObject.getter();
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Client doesn't have camera TCC, rejecting XPC message", v60, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v55);
    *(void *)v13 = 0xD000000000000012;
    *(void *)(v13 + 8) = 0x8000000100237160;
    v61 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_24;
  }
  if (!a1 || !v192 || !v191 || !v188)
  {
    *(void *)v13 = 0xD000000000000016;
    *(void *)(v13 + 8) = 0x8000000100237180;
    v61 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_24:
    v51 = v194;
    (*(void (**)(unint64_t, void, uint64_t))(v194 + 104))(v13, *v61, v9);
    v62 = v193;
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v193, v13, v9);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v63, v62, v9);
    v54 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a6 + 16))(a6, 0, v54);
    goto LABEL_25;
  }
  v181 = (id)v9;
  v182 = a6;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_1001891D0(a1);
  v35 = v34;
  if (!v34
    || (type metadata accessor for SensorController(),
        v36 = v35,
        v37 = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(),
        v36,
        (v37 & 1) == 0)
    || (v38 = (char *)v36,
        v39 = dispatch thunk of DockCoreAccessory.hasSystemSensors(name:sensors:)(),
        v38,
        (v39 & 1) == 0))
  {
    *(void *)v13 = 0xD000000000000011;
    *(void *)(v13 + 8) = 0x80000001002374D0;
    v64 = v194;
    v65 = (uint64_t)v181;
    (*(void (**)(unint64_t, void, id))(v194 + 104))(v13, enum case for Errors.NotFound(_:), v181);
    v66 = v193;
    (*(void (**)(char *, unint64_t, uint64_t))(v64 + 16))(v193, v13, v65);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v67, v66, v65);
    v68 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v182 + 16))(v182, 0, v68);

    (*(void (**)(unint64_t, uint64_t))(v64 + 8))(v13, v65);
    goto LABEL_28;
  }
  v40 = [self currentConnection];
  if (!v40)
  {
    if (qword_1002A7B60 != -1) {
      goto LABEL_94;
    }
    goto LABEL_30;
  }
  v180 = v38;
  v41 = v40;
  if (sub_10019B714([v40 processIdentifier], 0x6F736E6553746573, 0xEF73657461745372))
  {
    v42 = v182;
    v43 = v180;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    v44 = v190;
    v45 = sub_100096F64(v190, (uint64_t)qword_1002A9E40);
    v46 = v189;
    (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v28, v45, v44);
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.default.getter();
    v49 = os_log_type_enabled(v47, v48);
    v9 = (uint64_t)v181;
    if (v49)
    {
      v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Rate limit exceeded for setSensorStates", v50, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v190);
    *(void *)v13 = 0xD000000000000025;
    *(void *)(v13 + 8) = 0x80000001002374F0;
    v51 = v194;
    (*(void (**)(unint64_t, void, uint64_t))(v194 + 104))(v13, enum case for Errors.rateLimitXPC(_:), v9);
    v52 = v193;
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v193, v13, v9);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v53, v52, v9);
    v54 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v42 + 16))(v42, 0, v54);

    goto LABEL_25;
  }
  v179 = v41;
  v177 = sub_10019AE8C(v41);
  if (!v79)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    v96 = v190;
    v97 = sub_100096F64(v190, (uint64_t)qword_1002A9E40);
    v98 = v189;
    (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v25, v97, v96);
    v99 = Logger.logObject.getter();
    v100 = static os_log_type_t.error.getter();
    v101 = os_log_type_enabled(v99, v100);
    v9 = (uint64_t)v181;
    v102 = v182;
    if (v101)
    {
      v103 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v103 = 0;
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "Failed fetching App ID from connection", v103, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v98 + 8))(v25, v96);
    *(void *)v13 = 0xD000000000000026;
    *(void *)(v13 + 8) = 0x8000000100235640;
    v51 = v194;
    (*(void (**)(unint64_t, void, uint64_t))(v194 + 104))(v13, enum case for Errors.NotFound(_:), v9);
    v104 = v193;
    (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v193, v13, v9);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v105, v104, v9);
    v106 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v102 + 16))(v102, 0, v106);

    goto LABEL_26;
  }
  v80 = v79;
  v81 = sub_1001968A8();
  v178 = v81;
  if (v81)
  {
    v82 = v81;
    v83 = *(void *)(v81 + 24);
    v84 = *(void *)(v81 + 32);
    swift_bridgeObjectRetain();
    v176 = v80;
    LOBYTE(v83) = sub_100114B58(v177, v80, v83, v84, v179);
    swift_bridgeObjectRelease();
    v31 = (char *)&unk_1002B1000;
    if (v83)
    {
      if (qword_1002A7B60 != -1) {
        swift_once();
      }
      v85 = v190;
      v86 = sub_100096F64(v190, (uint64_t)qword_1002A9E40);
      (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v22, v86, v85);
      v87 = v176;
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      v88 = Logger.logObject.getter();
      v89 = static os_log_type_t.default.getter();
      v175 = v88;
      v174 = v89;
      if (os_log_type_enabled(v88, v89))
      {
        v90 = swift_slowAlloc();
        v173 = swift_slowAlloc();
        v196[0] = v173;
        *(_DWORD *)v90 = 136315394;
        swift_bridgeObjectRetain();
        v195 = sub_1000993AC(v177, v87, v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v90 + 12) = 2080;
        v172[1] = v90 + 14;
        v91 = (uint8_t *)v90;
        v92 = *(void *)(v178 + 24);
        v93 = *(void *)(v178 + 32);
        swift_bridgeObjectRetain();
        v94 = sub_1000993AC(v92, v93, v196);
        v172[2] = v91;
        v195 = v94;
        v31 = (unsigned char *)&unk_1002B1000;
        v82 = v178;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        v95 = v175;
        _os_log_impl((void *)&_mh_execute_header, v175, (os_log_type_t)v174, "Foreground app %s force-removing animator for %s", v91, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v189 + 8))(v22, v190);
      sub_1001969C4();
    }
    v108 = *(_DWORD *)(v82 + 16);
    if (v108 != [v179 processIdentifier])
    {
      v136 = v189;
      if (qword_1002A7B60 != -1) {
        swift_once();
      }
      v137 = v190;
      v138 = sub_100096F64(v190, (uint64_t)qword_1002A9E40);
      (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v19, v138, v137);
      v139 = v176;
      swift_bridgeObjectRetain();
      swift_retain();
      v140 = Logger.logObject.getter();
      v141 = static os_log_type_t.default.getter();
      v142 = os_log_type_enabled(v140, v141);
      v143 = (uint64_t)v181;
      if (v142)
      {
        v144 = swift_slowAlloc();
        v192 = swift_slowAlloc();
        v196[0] = v192;
        *(_DWORD *)v144 = 136315394;
        v145 = *(void *)(v178 + 24);
        v146 = *(void *)(v178 + 32);
        swift_bridgeObjectRetain();
        v195 = sub_1000993AC(v145, v146, v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v144 + 12) = 2080;
        swift_bridgeObjectRetain();
        v195 = sub_1000993AC(v177, v139, v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v140, v141, "animator owned by %s, rejecting request from %s", (uint8_t *)v144, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v189 + 8))(v19, v190);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release();
        (*(void (**)(char *, uint64_t))(v136 + 8))(v19, v137);
      }
      v166 = v182;
      v167 = v180;
      *(void *)v13 = 0xD000000000000021;
      *(void *)(v13 + 8) = 0x8000000100237110;
      v168 = v194;
      (*(void (**)(unint64_t, void, uint64_t))(v194 + 104))(v13, enum case for Errors.UnexpectedError(_:), v143);
      v169 = v193;
      (*(void (**)(char *, unint64_t, uint64_t))(v168 + 16))(v193, v13, v143);
      sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v168 + 32))(v170, v169, v143);
      v171 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void, void *))(v166 + 16))(v166, 0, v171);

      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v168 + 8))(v13, v143);
      goto LABEL_28;
    }
    swift_bridgeObjectRelease();
    v107 = v189;
  }
  else
  {
    swift_bridgeObjectRelease();
    v107 = v189;
    v31 = (unsigned char *)&unk_1002B1000;
  }
  sub_100199524(1);
  sub_100197C84(v35);
  v13 = v188;
  v109 = v184;
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  v110 = v190;
  v111 = sub_100096F64(v190, (uint64_t)qword_1002A9E40);
  (*(void (**)(void, uint64_t, uint64_t))(v107 + 16))(v109, v111, v110);
  swift_bridgeObjectRetain_n();
  v112 = a1;
  v113 = v192;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v114 = v112;
  v115 = Logger.logObject.getter();
  v116 = static os_log_type_t.default.getter();
  v117 = v116;
  v118 = os_log_type_enabled(v115, v116);
  v181 = v114;
  if (v118)
  {
    v119 = swift_slowAlloc();
    LODWORD(v193) = v117;
    v120 = v119;
    v194 = swift_slowAlloc();
    v196[0] = v194;
    *(_DWORD *)v120 = 136315906;
    v121 = DockCoreInfo.name.getter();
    v195 = sub_1000993AC(v121, v122, v196);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v120 + 12) = 2080;
    swift_bridgeObjectRetain();
    v195 = sub_1000993AC(v187, v113, v196);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v120 + 22) = 2080;
    swift_bridgeObjectRetain();
    v123 = Array.description.getter();
    v125 = v124;
    swift_bridgeObjectRelease();
    v195 = sub_1000993AC(v123, v125, v196);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v120 + 32) = 2080;
    type metadata accessor for SensorData();
    swift_bridgeObjectRetain();
    v126 = Array.description.getter();
    v31 = v127;
    swift_bridgeObjectRelease();
    v195 = sub_1000993AC(v126, (unint64_t)v31, v196);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v115, (os_log_type_t)v193, "Processing request for setSensorStates(%s, %s, %s, %s", (uint8_t *)v120, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))(v189 + 8))(v184, v190);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(void (**)(char *, uint64_t, uint64_t), uint64_t))(v107 + 8))(v109, v110);
  }
  v128 = v180;
  v129 = dispatch thunk of DockCoreAccessory.getSystemSensors(name:sensors:)();
  v180 = v128;

  if (v129 >> 62)
  {
    swift_bridgeObjectRetain();
    v130 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v130 = *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v131 = &unk_1002B1000;
  v189 = v13 & 0xFFFFFFFFFFFFFF8;
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v132 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v132 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v133 = v130 == v132;
  v134 = v189;
  if (!v133) {
    goto LABEL_90;
  }
  if (v129 >> 62)
  {
    swift_bridgeObjectRetain();
    v135 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v135 = *(void *)((v129 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v135)
  {
LABEL_90:
    swift_bridgeObjectRelease();
    sub_100120120((uint64_t)v181, v187, v192, v191, v13);
    (*(void (**)(uint64_t, uint64_t, void))(v182 + 16))(v182, 1, 0);

    swift_release();
    return;
  }
  if (v135 < 1)
  {
    __break(1u);
    return;
  }
  v147 = 0;
  v193 = (char *)(v13 & 0xC000000000000001);
  v194 = v129 & 0xC000000000000001;
  v148 = (void (**)(char *, uint64_t, uint64_t))(v183 + 2);
  ++v183;
  v184 = v148;
  v190 = v135;
  while (1)
  {
    v150 = v194
         ? (char *)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : (char *)*(id *)(v129 + 8 * v147 + 32);
    v38 = v150;
    type metadata accessor for SensorTracker();
    if (swift_dynamicCastClass()) {
      break;
    }
LABEL_73:
    ++v147;

    if (v135 == v147) {
      goto LABEL_90;
    }
  }
  if (v193)
  {
    v165 = v38;
    v153 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_81;
  }
  if (v147 < *(void *)(v134 + 16))
  {
    v151 = *(void **)(v13 + 8 * v147 + 32);
    v152 = v38;
    v153 = v151;
LABEL_81:
    v31 = v153;
    type metadata accessor for SensorTrackerState();
    if (swift_dynamicCastClass())
    {
      dispatch thunk of SensorTracker.setState(state:)();
      v154 = v131[197] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
      swift_beginAccess();
      v155 = v185;
      v156 = v186;
      (*v184)(v185, v154, v186);
      DKThreadSafe.wrappedValue.getter();
      (*v183)(v155, v156);
      if (v195)
      {
        v149 = v31;
        v31 = v38;
      }
      else
      {
        v157 = v131[197];
        v158 = dispatch thunk of SensorTrackerState.state.getter();
        v159 = v157 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingState;
        *(void *)v159 = v158;
        *(unsigned char *)(v159 + 8) = 0;
        v160 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
        v161 = *(os_unfair_lock_s **)(v157 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
        swift_retain();
        os_unfair_lock_lock(v161 + 4);
        swift_release();
        v162 = *(void **)(v157 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
        v163 = *(os_unfair_lock_s **)(v157 + v160);
        v164 = v162;
        swift_retain();
        os_unfair_lock_unlock(v163 + 4);
        swift_release();
        if (v162)
        {
          v149 = (char *)v164;
          sub_10018B0C0(v158, v162);

          v38 = v149;
        }
        else
        {
          v149 = v38;
        }
        v13 = v188;
        v131 = (void *)&unk_1002B1000;
      }
      v134 = v189;
    }
    else
    {
      v149 = v38;
    }

    v38 = v31;
    v135 = v190;
    goto LABEL_73;
  }
  __break(1u);
LABEL_94:
  swift_once();
LABEL_30:
  v69 = v190;
  v70 = sub_100096F64(v190, (uint64_t)qword_1002A9E40);
  v71 = v189;
  (*(void (**)(char *, uint64_t, uint64_t))(v189 + 16))(v31, v70, v69);
  v72 = Logger.logObject.getter();
  v73 = static os_log_type_t.error.getter();
  v74 = os_log_type_enabled(v72, v73);
  v9 = (uint64_t)v181;
  v75 = v182;
  if (v74)
  {
    v76 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v76 = 0;
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Failed fetching current NSXPCConnection, cannot construct client", v76, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v71 + 8))(v31, v69);
  *(void *)v13 = 0xD000000000000017;
  *(void *)(v13 + 8) = 0x8000000100235620;
  v51 = v194;
  (*(void (**)(unint64_t, void, uint64_t))(v194 + 104))(v13, enum case for Errors.XPCNil(_:), v9);
  v77 = v193;
  (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v193, v13, v9);
  sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
  swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v78, v77, v9);
  v54 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, void *))(v75 + 16))(v75, 0, v54);

LABEL_25:
LABEL_26:
  (*(void (**)(unint64_t, uint64_t))(v51 + 8))(v13, v9);
LABEL_28:
  swift_errorRelease();
}

uint64_t sub_100122978(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a1 != a4 || a2 != a5)
  {
    uint64_t v8 = 0;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      return v8;
    }
  }
  uint64_t v9 = a6[2];
  if (!v9) {
    return 1;
  }
  uint64_t v10 = a3[2];
  if (!v10) {
    return 0;
  }
  v11 = a6 + 4;
  uint64_t v13 = a6[4];
  uint64_t v12 = a6[5];
  uint64_t v14 = a3[4];
  uint64_t v15 = a3[5];
  swift_bridgeObjectRetain();
  v26 = a3 + 9;
  for (uint64_t i = 1; ; ++i)
  {
    swift_bridgeObjectRetain();
    if ((v14 != v13 || v15 != v12) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v10 == 1) {
        goto LABEL_30;
      }
      if (a3[6] != v13 || a3[7] != v12)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
      }
    }
LABEL_14:
    swift_bridgeObjectRelease();
    if (i == v9)
    {
      uint64_t v8 = 1;
LABEL_31:
      swift_bridgeObjectRelease();
      return v8;
    }
    v18 = &v11[2 * i];
    uint64_t v13 = *v18;
    uint64_t v12 = v18[1];
  }
  if (v10 == 2)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
    goto LABEL_31;
  }
  v23 = v11;
  v24 = a3;
  v25 = a6;
  v19 = v26;
  uint64_t v20 = 2;
  while (1)
  {
    uint64_t v21 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    BOOL v22 = *(v19 - 1) == v13 && *v19 == v12;
    if (v22 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      a3 = v24;
      a6 = v25;
      v11 = v23;
      goto LABEL_14;
    }
    v19 += 2;
    ++v20;
    if (v21 == v10) {
      goto LABEL_30;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100122B4C(int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v79 = a5;
  uint64_t v80 = a4;
  uint64_t v78 = a3;
  id v86 = a2;
  int v82 = a1;
  uint64_t v6 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v6 - 8);
  v77 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void (***)(char *, uint64_t))(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v74 - v13;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v84 = *(void *)(v15 - 8);
  uint64_t v85 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  v83 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v19 = (char *)&v74 - v18;
  v81 = v5;
  uint64_t v20 = &unk_1002B1000;
  if (*((unsigned char *)v5 + OBJC_IVAR____TtC14dockaccessoryd14dockaccessoryd_debugAllowed) == 1)
  {
    DockCoreInfo.type.getter();
    uint64_t v21 = DockCoreAccessoryType.rawValue.getter();
    if (v21 == DockCoreAccessoryType.rawValue.getter())
    {
      v76 = (char *)v9;
      if (qword_1002A7C00 != -1) {
        swift_once();
      }
      uint64_t v22 = qword_1002B1628;
      uint64_t v23 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      v24 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain();
      os_unfair_lock_lock(v24 + 4);
      swift_release();
      v25 = *(void **)(v22 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
      v26 = *(os_unfair_lock_s **)(v22 + v23);
      id v27 = v25;
      swift_retain();
      os_unfair_lock_unlock(v26 + 4);
      uint64_t v20 = (void *)&unk_1002B1000;
      swift_release();
      uint64_t v9 = (void (**)(char *, uint64_t))v76;
      if (v25)
      {
        v28 = (void *)dispatch thunk of DockCoreAccessory.info.getter();

        type metadata accessor for DockCoreInfo();
        id v29 = v86;
        id v30 = v28;
        char v31 = static NSObject.== infix(_:_:)();

        uint64_t v20 = (void *)&unk_1002B1000;
        if (v31)
        {
          if (qword_1002A7B60 != -1) {
            swift_once();
          }
          uint64_t v32 = v85;
          uint64_t v33 = sub_100096F64(v85, (uint64_t)qword_1002A9E40);
          (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v19, v33, v32);
          v34 = Logger.logObject.getter();
          os_log_type_t v35 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v34, v35))
          {
            v36 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v36 = 0;
            _os_log_impl((void *)&_mh_execute_header, v34, v35, "getActuatorFeedback: noop for mock device", v36, 2u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v84 + 8))(v19, v85);
          return 1;
        }
      }
    }
  }
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  v38 = *(char **)(v20[197] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v39 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v40 = *(void **)&v38[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  v41 = v38;
  id v42 = v40;
  OS_dispatch_semaphore.wait()();

  v43 = &v41[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v44 = *(void *)v43;
  uint64_t v45 = *(void *)(*(void *)v43 + 16);
  if (v45)
  {
    uint64_t v75 = v39;
    v76 = v41;
    uint64_t v46 = v44 + 32;
    v47 = v9 + 1;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v46, (uint64_t)v87);
      id v48 = *(id *)(*sub_1000A5DA4(v87, v87[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v48) = static UUID.== infix(_:_:)();
      v49 = *v47;
      (*v47)(v12, v8);
      v49(v14, v8);
      if (v48) {
        break;
      }
      sub_100099BCC((uint64_t)v87);
      v46 += 40;
      if (!--v45)
      {
        swift_bridgeObjectRelease();
        v41 = v76;
        uint64_t v39 = v75;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    id v72 = *(id *)&v38[v75];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v87, (uint64_t)&v88);
    sub_100099BCC((uint64_t)v87);

    if (!*((void *)&v89 + 1)) {
      goto LABEL_27;
    }
  }
  else
  {
LABEL_19:
    id v50 = *(id *)&v38[v39];
    OS_dispatch_semaphore.signal()();

    uint64_t v90 = 0;
    long long v88 = 0u;
    long long v89 = 0u;

    if (!*((void *)&v89 + 1))
    {
LABEL_27:
      sub_1000A61E4((uint64_t)&v88, (uint64_t *)&unk_1002AAA30);
      return 0;
    }
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v51 = v87[0];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v52 = v85;
  uint64_t v53 = sub_100096F64(v85, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v83, v53, v52);
  v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v56 = 67109120;
    LODWORD(v88) = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "pid %d Registering for device feedback", v56, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v85);
  uint64_t v57 = type metadata accessor for TaskPriority();
  uint64_t v37 = 1;
  uint64_t v58 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v77, 1, 1, v57);
  v59 = (void *)swift_allocObject();
  v59[2] = 0;
  v59[3] = 0;
  v59[4] = v51;
  swift_retain();
  sub_1001BC1A8(v58, (uint64_t)&unk_1002AA098, (uint64_t)v59);
  swift_release();
  uint64_t v60 = swift_allocObject();
  uint64_t v61 = v79;
  *(void *)(v60 + 16) = v86;
  *(void *)(v60 + 24) = v61;
  uint64_t v63 = v80;
  v62 = v81;
  *(void *)(v60 + 32) = v78;
  *(void *)(v60 + 40) = v63;
  *(_DWORD *)(v60 + 48) = v82;
  *(void *)(v60 + 56) = v62;
  v64 = *(os_unfair_lock_s **)(v51 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
  uint64_t v65 = __chkstk_darwin(v60);
  *(&v74 - 4) = v51;
  *((_DWORD *)&v74 - 6) = v66;
  *(&v74 - 2) = (uint64_t)sub_100135578;
  *(&v74 - 1) = v65;
  __chkstk_darwin(v65);
  *(&v74 - 2) = (uint64_t)sub_1001355AC;
  *(&v74 - 1) = v67;
  id v69 = v68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v70 = v62;
  swift_retain();
  os_unfair_lock_lock(v64 + 4);
  sub_100135C58(v71);
  os_unfair_lock_unlock(v64 + 4);
  swift_release();
  swift_release();
  swift_release();
  return v37;
}

void sub_100123444(void *a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v110 = a5;
  uint64_t v111 = a6;
  uint64_t v114 = a2;
  id v115 = a4;
  uint64_t v10 = type metadata accessor for Errors();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  v117 = (char *)v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (void *)((char *)v96 - v14);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v116 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  v112 = (char *)v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  v113 = (char *)v96 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)v96 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  v26 = (char *)v96 - v25;
  __chkstk_darwin(v24);
  v28 = (char *)v96 - v27;
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v51 = sub_100096F64(v16, (uint64_t)qword_1002A9E40);
    uint64_t v52 = v116;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v28, v51, v16);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      os_log_type_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Client doesn't have camera TCC, rejecting XPC message", v55, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v52 + 8))(v28, v16);
    *uint64_t v15 = 0xD000000000000012;
    v15[1] = 0x8000000100237160;
    v56 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_21;
  }
  if (!a1 || !a3 || !v115)
  {
    *uint64_t v15 = 0xD000000000000016;
    v15[1] = 0x8000000100237180;
    v56 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_21:
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v15, *v56, v10);
    uint64_t v57 = v117;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v117, v15, v10);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v58, v57, v10);
    v59 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a7 + 16))(a7, 0, v59);
LABEL_22:

LABEL_23:
    (*(void (**)(void *, uint64_t))(v11 + 8))(v15, v10);
    swift_errorRelease();
    return;
  }
  id v29 = [self currentConnection];
  if (!v29)
  {
    uint64_t v62 = a7;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v63 = sub_100096F64(v16, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v26, v63, v16);
    v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      int v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed fetching current NSXPCConnection, cannot construct client", v66, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v116 + 8))(v26, v16);
    *uint64_t v15 = 0xD000000000000017;
    v15[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v15, enum case for Errors.XPCNil(_:), v10);
    uint64_t v67 = v117;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v117, v15, v10);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v68, v67, v10);
    v59 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v62 + 16))(v62, 0, v59);
    goto LABEL_22;
  }
  uint64_t v108 = a7;
  id v109 = v29;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_1001891D0(a1);
  char v31 = v30;
  if (!v30
    || (type metadata accessor for ActuationController(),
        id v32 = v31,
        char v33 = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(),
        v32,
        (v33 & 1) == 0)
    || (id v34 = v32,
        char v35 = dispatch thunk of DockCoreAccessory.hasSystemActuators(name:actuators:)(),
        v34,
        (v35 & 1) == 0))
  {
    *uint64_t v15 = 0xD00000000000001ALL;
    v15[1] = 0x80000001002374B0;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v15, enum case for Errors.NotFound(_:), v10);
    uint64_t v60 = v117;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v117, v15, v10);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v61, v60, v10);
    v59 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v108 + 16))(v108, 0, v59);

    goto LABEL_22;
  }
  id v105 = v34;
  int v107 = [v109 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v36 = sub_100096F64(v16, (uint64_t)qword_1002A9E40);
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v116 + 16);
  uint64_t v102 = v36;
  v103 = v37;
  uint64_t v104 = v116 + 16;
  ((void (*)(char *))v37)(v23);
  id v38 = a1;
  swift_bridgeObjectRetain_n();
  uint64_t v39 = (uint64_t)v115;
  swift_bridgeObjectRetain_n();
  id v106 = v38;
  v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  LODWORD(v101) = v41;
  BOOL v42 = os_log_type_enabled(v40, v41);
  unint64_t v100 = a3;
  if (v42)
  {
    uint64_t v43 = swift_slowAlloc();
    os_log_t v97 = v40;
    uint64_t v44 = v43;
    v99 = (void *)swift_slowAlloc();
    uint64_t v98 = swift_slowAlloc();
    v119[0] = v98;
    *(_DWORD *)uint64_t v44 = 67109890;
    LODWORD(v118) = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 8) = 2112;
    v96[2] = v44 + 10;
    v96[1] = v44 + 18;
    uint64_t v118 = (uint64_t)v106;
    id v45 = v106;
    v96[3] = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v99 = a1;

    *(_WORD *)(v44 + 18) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v118 = sub_1000993AC(v114, a3, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v44 + 28) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v46 = Array.description.getter();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    uint64_t v118 = sub_1000993AC(v46, v48, v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v49 = (uint64_t)v115;
    swift_bridgeObjectRelease();
    os_log_t v50 = v97;
    _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v101, "Client %d registering for feedback for %@ %s %s", (uint8_t *)v44, 0x26u);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v101 = *(void (**)(char *, uint64_t))(v116 + 8);
    v101(v23, v16);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    id v69 = v106;

    v101 = *(void (**)(char *, uint64_t))(v116 + 8);
    v101(v23, v16);
    uint64_t v49 = v39;
  }
  id v70 = (char *)v105;
  id v71 = v109;
  id v72 = v109;
  v73 = v71;
  uint64_t v74 = v70;
  char v75 = sub_1001A2BC8(v107, v73);

  id v115 = v72;
  if ((v75 & 1) == 0)
  {
    v103(v113, v102, v16);
    uint64_t v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v85, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v87 = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "Failed adding client to client list", v87, 2u);
      swift_slowDealloc();
    }

    v101(v113, v16);
    *uint64_t v15 = 0xD00000000000001CLL;
    v15[1] = 0x80000001002372F0;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v15, enum case for Errors.UnexpectedError(_:), v10);
    long long v88 = v117;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v117, v15, v10);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v89, v88, v10);
    uint64_t v90 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v108 + 16))(v108, 0, v90);

    goto LABEL_40;
  }
  int v76 = v107;
  id v77 = v106;
  v113 = v74;
  uint64_t v78 = v114;
  uint64_t v79 = v100;
  sub_100190DC0(v107, (uint64_t)v106, v114, v100, v49, v110);
  uint64_t v80 = v113;
  v81 = v77;
  int v82 = v80;
  char v83 = sub_100122B4C(v76, v81, v78, v79, v49);

  uint64_t v84 = v108;
  if ((v83 & 1) == 0)
  {
    v103(v112, v102, v16);
    v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v91, v92))
    {
      v93 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v93 = 0;
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "Failed starting feedback from accessory", v93, 2u);
      uint64_t v84 = v108;
      swift_slowDealloc();
    }

    v101(v112, v16);
    *uint64_t v15 = 0xD000000000000027;
    v15[1] = 0x8000000100237460;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v15, enum case for Errors.UnexpectedError(_:), v10);
    v94 = v117;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v117, v15, v10);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v95, v94, v10);
    uint64_t v90 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v84 + 16))(v84, 0, v90);

LABEL_40:
    goto LABEL_23;
  }
  (*(void (**)(uint64_t, uint64_t, void))(v108 + 16))(v108, 1, 0);
}

void sub_10012440C(void *a1, void (*a2)(char *, uint64_t), unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v132 = a4;
  v137 = a2;
  uint64_t v8 = type metadata accessor for Errors();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  v139 = (char *)v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (void *)((char *)v114 - v12);
  v134 = (void *)type metadata accessor for UUID();
  uint64_t v131 = *(v134 - 1);
  uint64_t v14 = __chkstk_darwin(v134);
  v136 = (char *)v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v135 = (char *)v114 - v16;
  uint64_t v17 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v17 - 8);
  v128 = (char *)v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v138 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19);
  v130 = (char *)v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  v129 = (char *)v114 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  v133 = (char *)v114 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v28 = (char *)v114 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  char v31 = (char *)v114 - v30;
  __chkstk_darwin(v29);
  char v33 = (char *)v114 - v32;
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v54 = sub_100096F64(v19, (uint64_t)qword_1002A9E40);
    uint64_t v55 = v138;
    (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v33, v54, v19);
    v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Client doesn't have camera TCC, rejecting XPC message", v58, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v55 + 8))(v33, v19);
    *uint64_t v13 = 0xD000000000000012;
    v13[1] = 0x8000000100237160;
    v59 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_26;
  }
  if (!a1 || !a3)
  {
    *uint64_t v13 = 0xD000000000000016;
    v13[1] = 0x8000000100237180;
    v59 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_26:
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v13, *v59, v8);
    uint64_t v68 = v139;
    (*(void (**)(char *, void *, uint64_t))(v9 + 16))(v139, v13, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v69, v68, v8);
    uint64_t v62 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a5 + 16))(a5, 0, v62);
    goto LABEL_27;
  }
  id v34 = [self currentConnection];
  if (!v34)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v63 = sub_100096F64(v19, (uint64_t)qword_1002A9E40);
    uint64_t v64 = v138;
    (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v31, v63, v19);
    os_log_type_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed fetching current NSXPCConnection, cannot construct client", v67, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v64 + 8))(v31, v19);
    *uint64_t v13 = 0xD000000000000017;
    v13[1] = 0x8000000100235620;
    v59 = (unsigned int *)&enum case for Errors.XPCNil(_:);
    goto LABEL_26;
  }
  id v127 = v34;
  uint64_t v125 = v19;
  uint64_t v126 = a5;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_1001891D0(a1);
  uint64_t v36 = v35;
  if (!v35
    || (type metadata accessor for ActuationController(),
        id v37 = v36,
        char v38 = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(),
        v37,
        (v38 & 1) == 0)
    || (id v39 = v37,
        char v40 = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(),
        v39,
        (v40 & 1) == 0))
  {
    *uint64_t v13 = 0xD000000000000010;
    v13[1] = 0x8000000100237490;
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v13, enum case for Errors.NotFound(_:), v8);
    uint64_t v60 = v139;
    (*(void (**)(char *, void *, uint64_t))(v9 + 16))(v139, v13, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v61, v60, v8);
    uint64_t v62 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v126 + 16))(v126, 0, v62);

LABEL_27:
    (*(void (**)(void *, uint64_t))(v9 + 8))(v13, v8);
    swift_errorRelease();
    return;
  }
  unsigned int v41 = [v127 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v42 = v125;
  uint64_t v43 = sub_100096F64(v125, (uint64_t)qword_1002A9E40);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 16);
  uint64_t v119 = v43;
  uint64_t v121 = v138 + 16;
  v120 = v44;
  ((void (*)(char *))v44)(v28);
  id v45 = a1;
  swift_bridgeObjectRetain_n();
  id v123 = v45;
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.default.getter();
  int v118 = v47;
  BOOL v48 = os_log_type_enabled(v46, v47);
  unsigned int v124 = v41;
  if (v48)
  {
    uint64_t v49 = swift_slowAlloc();
    os_log_t v116 = v46;
    uint64_t v50 = v49;
    id v115 = (void *)swift_slowAlloc();
    uint64_t v117 = swift_slowAlloc();
    *(void *)&long long v141 = v117;
    *(_DWORD *)uint64_t v50 = 67109634;
    LODWORD(v140[0]) = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v50 + 8) = 2112;
    id v122 = v39;
    v114[1] = v50 + 10;
    v140[0] = v123;
    id v51 = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v115 = a1;

    *(_WORD *)(v50 + 18) = 2080;
    swift_bridgeObjectRetain();
    v140[0] = sub_1000993AC((uint64_t)v137, a3, (uint64_t *)&v141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v39 = v122;
    swift_bridgeObjectRelease_n();
    os_log_t v52 = v116;
    _os_log_impl((void *)&_mh_execute_header, v116, (os_log_type_t)v118, "Client %d de-registering for feedback for %@ %s", (uint8_t *)v50, 0x1Cu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v137 = *(void (**)(char *, uint64_t))(v138 + 8);
    v137(v28, v125);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    id v70 = v123;

    v137 = *(void (**)(char *, uint64_t))(v138 + 8);
    v137(v28, v42);
  }
  uint64_t v53 = v134;
  id v71 = (char *)v127;
  sub_1001A2DFC(v124);
  char v73 = v72;

  if ((v73 & 1) == 0)
  {
    v120(v133, v119, v125);
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      int v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v82 = 0;
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Failed removing client from client list", v82, 2u);
      swift_slowDealloc();
    }

    v137(v133, v125);
    *uint64_t v13 = 0xD000000000000020;
    v13[1] = 0x80000001002371A0;
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v13, enum case for Errors.UnexpectedError(_:), v8);
    char v83 = v139;
    (*(void (**)(char *, void *, uint64_t))(v9 + 16))(v139, v13, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v84, v83, v8);
    uint64_t v62 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v126 + 16))(v126, 0, v62);

    goto LABEL_27;
  }
  uint64_t v74 = qword_1002B1628;
  sub_100191778(v124);
  if ((*(unsigned char *)(v132 + OBJC_IVAR____TtC14dockaccessoryd14dockaccessoryd_debugAllowed) & 1) != 0
    && (DockCoreInfo.type.getter(),
        uint64_t v75 = DockCoreAccessoryType.rawValue.getter(),
        v75 == DockCoreAccessoryType.rawValue.getter()))
  {
    int v76 = v129;
    v120(v129, v119, v125);
    id v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "stopActuatorFeedback: noop for mock device", v79, 2u);
      swift_slowDealloc();
    }

    v137(v76, v125);
    (*(void (**)(uint64_t, uint64_t, void))(v126 + 16))(v126, 1, 0);
  }
  else
  {
    v139 = v71;
    id v122 = v39;
    uint64_t v85 = *(char **)(v74 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    uint64_t v86 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    v87 = *(void **)&v85[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    long long v88 = v85;
    id v89 = v87;
    OS_dispatch_semaphore.wait()();

    uint64_t v90 = &v88[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v91 = *(void *)v90;
    uint64_t v92 = *(void *)(*(void *)v90 + 16);
    if (v92)
    {
      uint64_t v132 = v86;
      v133 = v85;
      v134 = v88;
      uint64_t v93 = v91 + 32;
      v94 = (void (**)(char *, void *))(v131 + 8);
      swift_bridgeObjectRetain();
      v96 = v135;
      uint64_t v95 = v136;
      while (1)
      {
        sub_1000A5D40(v93, (uint64_t)v140);
        id v97 = *(id *)(*sub_1000A5DA4(v140, v140[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v97) = static UUID.== infix(_:_:)();
        uint64_t v98 = *v94;
        (*v94)(v95, v53);
        v98(v96, v53);
        if (v97) {
          break;
        }
        sub_100099BCC((uint64_t)v140);
        v93 += 40;
        if (!--v92)
        {
          swift_bridgeObjectRelease();
          uint64_t v85 = v133;
          long long v88 = (char *)v134;
          uint64_t v86 = v132;
          goto LABEL_43;
        }
      }
      swift_bridgeObjectRelease();
      id v100 = *(id *)&v133[v132];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v140, (uint64_t)&v141);
      sub_100099BCC((uint64_t)v140);
    }
    else
    {
LABEL_43:
      id v99 = *(id *)&v85[v86];
      OS_dispatch_semaphore.signal()();

      uint64_t v143 = 0;
      long long v141 = 0u;
      long long v142 = 0u;
    }
    uint64_t v101 = v126;
    id v39 = v122;
    if (*((void *)&v142 + 1))
    {
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      if (swift_dynamicCast())
      {
        uint64_t v102 = v140[0];
        v120(v130, v119, v125);
        v103 = Logger.logObject.getter();
        os_log_type_t v104 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v103, v104))
        {
          id v105 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v105 = 0;
          _os_log_impl((void *)&_mh_execute_header, v103, v104, "Deregistering for device feedback", v105, 2u);
          swift_slowDealloc();
        }

        uint64_t v106 = ((uint64_t (*)(char *, uint64_t))v137)(v130, v125);
        int v107 = *(os_unfair_lock_s **)(v102 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
        uint64_t v108 = __chkstk_darwin(v106);
        v114[-2] = v102;
        LODWORD(v114[-1]) = v124;
        __chkstk_darwin(v108);
        v114[-2] = sub_100135C9C;
        v114[-1] = v109;
        swift_retain();
        os_unfair_lock_lock(v107 + 4);
        sub_100135C58(v110);
        os_unfair_lock_unlock(v107 + 4);
        swift_release();
        uint64_t v111 = type metadata accessor for TaskPriority();
        uint64_t v112 = (uint64_t)v128;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v111 - 8) + 56))(v128, 1, 1, v111);
        v113 = (void *)swift_allocObject();
        v113[2] = 0;
        v113[3] = 0;
        v113[4] = v102;
        swift_retain();
        sub_1001BC1D4(v112, (uint64_t)&unk_1002AA0A8, (uint64_t)v113);
        swift_release();
        swift_release();
      }
    }
    else
    {
      sub_1000A61E4((uint64_t)&v141, (uint64_t *)&unk_1002AAA30);
    }
    (*(void (**)(uint64_t, uint64_t, void))(v101 + 16))(v101, 1, 0);
  }
}

void sub_100125730(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v73 = a4;
  uint64_t v70 = a2;
  uint64_t v6 = type metadata accessor for Errors();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  id v71 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v58 - v10);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v72 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v58 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)v58 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)v58 - v22;
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v35 = sub_100096F64(v12, (uint64_t)qword_1002A9E40);
    uint64_t v36 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v23, v35, v12);
    id v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Client doesn't have camera TCC, rejecting XPC message", v39, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v36 + 8))(v23, v12);
    void *v11 = 0xD000000000000012;
    v11[1] = 0x8000000100237160;
    char v40 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_20;
  }
  if (!a1 || !a3)
  {
    void *v11 = 0xD000000000000016;
    v11[1] = 0x8000000100237180;
    char v40 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_20:
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v11, *v40, v6);
    uint64_t v46 = v71;
    (*(void (**)(char *, void *, uint64_t))(v7 + 16))(v71, v11, v6);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v47, v46, v6);
    BOOL v48 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v73 + 16))(v73, 0, v48);
LABEL_21:

    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v6);
    swift_errorRelease();
    return;
  }
  id v24 = [self currentConnection];
  if (!v24)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v41 = sub_100096F64(v12, (uint64_t)qword_1002A9E40);
    uint64_t v42 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v18, v41, v12);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      id v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed fetching current NSXPCConnection, cannot construct client", v45, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v12);
    void *v11 = 0xD000000000000017;
    v11[1] = 0x8000000100235620;
    char v40 = (unsigned int *)&enum case for Errors.XPCNil(_:);
    goto LABEL_20;
  }
  id v69 = v24;
  unsigned int v25 = [v24 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_100096F64(v12, (uint64_t)qword_1002A9E40);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
  uint64_t v65 = v26;
  uint64_t v66 = v72 + 16;
  uint64_t v64 = v27;
  ((void (*)(char *))v27)(v21);
  swift_bridgeObjectRetain_n();
  id v67 = a1;
  v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  int v63 = v29;
  BOOL v30 = os_log_type_enabled(v28, v29);
  unsigned int v68 = v25;
  if (v30)
  {
    uint64_t v31 = swift_slowAlloc();
    os_log_t v60 = v28;
    uint64_t v32 = v31;
    uint64_t v62 = (void *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    uint64_t v75 = v61;
    *(_DWORD *)uint64_t v32 = 67109634;
    LODWORD(v74) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v32 + 8) = 2112;
    v58[0] = v32 + 18;
    v58[1] = v32 + 10;
    uint64_t v74 = (uint64_t)v67;
    v59 = v15;
    id v33 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v62 = a1;

    *(_WORD *)(v32 + 18) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v74 = sub_1000993AC(v70, a3, &v75);
    uint64_t v15 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v34 = v60;
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v63, "Client %d de-registering for trajectory progress feedback for %@ %s", (uint8_t *)v32, 0x1Cu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    id v49 = v67;
  }
  uint64_t v50 = *(void (**)(char *, uint64_t))(v72 + 8);
  v50(v21, v12);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v51 = v69;
  char v52 = sub_1001A3978(v68);

  if ((v52 & 1) == 0)
  {
    v64(v15, v65, v12);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed removing client from client list", v55, 2u);
      swift_slowDealloc();
    }

    v50(v15, v12);
    void *v11 = 0xD000000000000020;
    v11[1] = 0x80000001002371A0;
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v11, enum case for Errors.UnexpectedError(_:), v6);
    v56 = v71;
    (*(void (**)(char *, void *, uint64_t))(v7 + 16))(v71, v11, v6);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v57, v56, v6);
    BOOL v48 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v73 + 16))(v73, 0, v48);

    goto LABEL_21;
  }
  (*(void (**)(uint64_t, uint64_t, void))(v73 + 16))(v73, 1, 0);
}

void sub_100126128(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v98 = a6;
  uint64_t v93 = a5;
  uint64_t v94 = a2;
  uint64_t v95 = a4;
  uint64_t v8 = type metadata accessor for Errors();
  uint64_t v97 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  v96 = (char *)v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v83 - v11);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v92 = (char *)v83 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)v83 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  unsigned int v25 = (char *)v83 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)v83 - v26;
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v48 = sub_100096F64(v13, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v27, v48, v13);
    id v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      id v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Client doesn't have camera TCC, rejecting XPC message", v51, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v27, v13);
    *uint64_t v12 = 0xD000000000000012;
    v12[1] = 0x8000000100237160;
    char v52 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_26;
  }
  if (!a3 || !v95 || !a1)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v53 = sub_100096F64(v13, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v53, v13);
    os_log_type_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Client did not provide a system, actuators, or accessory info", v56, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    *uint64_t v12 = 0xD000000000000016;
    v12[1] = 0x8000000100237180;
    char v52 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_26:
    uint64_t v57 = v97;
    (*(void (**)(void *, void, uint64_t))(v97 + 104))(v12, *v52, v8);
    uint64_t v58 = v96;
    (*(void (**)(char *, void *, uint64_t))(v57 + 16))(v96, v12, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v59, v58, v8);
    os_log_t v60 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v98 + 16))(v98, 0, v60);
LABEL_27:

LABEL_28:
    (*(void (**)(void *, uint64_t))(v57 + 8))(v12, v8);
LABEL_29:
    swift_errorRelease();
    return;
  }
  uint64_t v91 = (void *)a3;
  v28 = self;
  id v29 = a1;
  id v30 = [v28 currentConnection];
  if (!v30)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    int v63 = v29;
    uint64_t v64 = sub_100096F64(v13, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v25, v64, v13);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      id v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed fetching current NSXPCConnection, cannot construct client", v67, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v25, v13);
    *uint64_t v12 = 0xD000000000000017;
    v12[1] = 0x8000000100235620;
    uint64_t v57 = v97;
    (*(void (**)(void *, void, uint64_t))(v97 + 104))(v12, enum case for Errors.XPCNil(_:), v8);
    unsigned int v68 = v96;
    (*(void (**)(char *, void *, uint64_t))(v57 + 16))(v96, v12, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v69, v68, v8);
    uint64_t v70 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v98 + 16))(v98, 0, v70);

    goto LABEL_28;
  }
  id v89 = v30;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v90 = v29;
  sub_1001891D0(v29);
  uint64_t v32 = v31;
  id v33 = v91;
  uint64_t v34 = v94;
  if (!v31
    || (type metadata accessor for ActuationController(),
        id v35 = v32,
        char v36 = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(),
        v35,
        (v36 & 1) == 0)
    || (id v37 = v35,
        char v38 = dispatch thunk of DockCoreAccessory.hasSystemActuators(name:actuators:)(),
        v37,
        (v38 & 1) == 0))
  {
    *uint64_t v12 = 0xD000000000000019;
    v12[1] = 0x8000000100237440;
    uint64_t v57 = v97;
    (*(void (**)(void *, void, uint64_t))(v97 + 104))(v12, enum case for Errors.NotFound(_:), v8);
    uint64_t v61 = v96;
    (*(void (**)(char *, void *, uint64_t))(v57 + 16))(v96, v12, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v62, v61, v8);
    os_log_t v60 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v98 + 16))(v98, 0, v60);

    goto LABEL_27;
  }
  id v88 = v37;
  id v39 = v90;
  char v40 = sub_1001A3BC8((uint64_t)v90, v34, v33);
  if (!v40)
  {
    v87 = 0;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v41 = sub_100096F64(v13, (uint64_t)qword_1002A9E40);
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v85 = v41;
    uint64_t v86 = v14 + 16;
    uint64_t v84 = v42;
    ((void (*)(char *))v42)(v22);
    uint64_t v43 = v89;
    os_log_type_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = v43;
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 67109120;
      v83[1] = v47 + 4;
      unsigned int v99 = [v46 processIdentifier];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Trying to start feedback from accessory for %d", v47, 8u);
      uint64_t v43 = v46;
      uint64_t v34 = v94;
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v44 = v43;
    }

    id v71 = *(void (**)(char *, uint64_t))(v14 + 8);
    v71(v22, v13);
    int v72 = [v43 processIdentifier];
    id v73 = v88;
    id v39 = v90;
    LOBYTE(v72) = sub_100122B4C(v72, v90, v34, (uint64_t)v91, (uint64_t)v95);

    char v40 = v87;
    if ((v72 & 1) == 0)
    {
      uint64_t v75 = v92;
      v84(v92, v85, v13);
      int v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        os_log_type_t v78 = (uint8_t *)swift_slowAlloc();
        uint64_t v95 = v43;
        *(_WORD *)os_log_type_t v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Failed starting feedback from accessory", v78, 2u);
        uint64_t v43 = v95;
        swift_slowDealloc();
      }

      v71(v75, v13);
      *uint64_t v12 = 0xD000000000000027;
      v12[1] = 0x8000000100237460;
      uint64_t v79 = v97;
      (*(void (**)(void *, void, uint64_t))(v97 + 104))(v12, enum case for Errors.UnexpectedError(_:), v8);
      uint64_t v80 = v96;
      (*(void (**)(char *, void *, uint64_t))(v79 + 16))(v96, v12, v8);
      sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v79 + 32))(v81, v80, v8);
      int v82 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void, void *))(v98 + 16))(v98, 0, v82);

      (*(void (**)(void *, uint64_t))(v79 + 8))(v12, v8);
      goto LABEL_29;
    }
  }
  uint64_t v74 = v40;
  (*(void (**)(uint64_t, void *, void))(v98 + 16))(v98, v40, 0);
}

void sub_100126E2C(int a1, uint64_t a2)
{
  uint64_t v75 = a2;
  int v73 = a1;
  uint64_t v2 = type metadata accessor for Errors();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v74 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v70 - v6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v70 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v70 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v70 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v70 - v22;
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v39 = sub_100096F64(v8, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v23, v39, v8);
    char v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Client doesn't have camera TCC, rejecting XPC message", v42, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v23, v8);
    *(void *)uint64_t v7 = 0xD000000000000012;
    *((void *)v7 + 1) = 0x8000000100237160;
    uint64_t v43 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_24;
  }
  id v24 = [self currentConnection];
  if (!v24)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v44 = sub_100096F64(v8, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v21, v44, v8);
    os_log_type_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed fetching current NSXPCConnection, cannot construct client", v47, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v21, v8);
    *(void *)uint64_t v7 = 0xD000000000000017;
    *((void *)v7 + 1) = 0x8000000100235620;
    uint64_t v43 = (unsigned int *)&enum case for Errors.XPCNil(_:);
LABEL_24:
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v7, *v43, v2);
    uint64_t v48 = v74;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v74, v7, v2);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v49, v48, v2);
    char v38 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v75 + 16))(v75, 0, v38);
LABEL_25:

LABEL_26:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
    swift_errorRelease();
    return;
  }
  unsigned int v25 = v24;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v72 = v25;
  uint64_t v26 = sub_10019AE8C(v25);
  if (!v27)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v50 = sub_100096F64(v8, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, v50, v8);
    id v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    BOOL v53 = os_log_type_enabled(v51, v52);
    id v54 = v72;
    if (v53)
    {
      os_log_type_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed fetching App ID from connection", v55, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    *(void *)uint64_t v7 = 0xD000000000000026;
    *((void *)v7 + 1) = 0x8000000100235640;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v7, enum case for Errors.NotFound(_:), v2);
    v56 = v74;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v74, v7, v2);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v57, v56, v2);
    uint64_t v58 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v75 + 16))(v75, 0, v58);

    goto LABEL_26;
  }
  uint64_t v28 = v26;
  id v29 = v27;
  if (v26 == 0xD000000000000018 && v27 == (void (*)(char *, uint64_t))0x8000000100237420
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v30 = sub_100096F64(v8, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, v30, v8);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    id v34 = v72;
    if (v33)
    {
      id v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Invalid client, can't disable tracking from self", v35, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    strcpy(v7, "invalid client");
    v7[15] = -18;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v7, enum case for Errors.InvalidParameter(_:), v2);
    char v36 = v74;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v74, v7, v2);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v37, v36, v2);
    char v38 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v75 + 16))(v75, 0, v38);

    goto LABEL_25;
  }
  uint64_t v59 = v28;
  if (v73) {
    uint64_t v60 = 20047;
  }
  else {
    uint64_t v60 = 4605519;
  }
  if (v73) {
    unint64_t v61 = 0xE200000000000000;
  }
  else {
    unint64_t v61 = 0xE300000000000000;
  }
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v62 = sub_100096F64(v8, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v62, v8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  int v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.default.getter();
  int v65 = v64;
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v66 = swift_slowAlloc();
    uint64_t v70 = v60;
    uint64_t v67 = v66;
    uint64_t v74 = (char *)swift_slowAlloc();
    os_log_type_t v77 = v74;
    *(_DWORD *)uint64_t v67 = 136315394;
    int v71 = v65;
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_1000993AC(v59, (unint64_t)v29, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v67 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_1000993AC(v70, v61, (uint64_t *)&v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v71, "Client %s requested set system tracking %s", (uint8_t *)v67, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  id v68 = v72;
  int v69 = [v72 processIdentifier];
  sub_1001946EC(v59, v29, v73 & 1, v69);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, void))(v75 + 16))(v75, 1, 0);
}

void sub_100127A60(uint8_t *a1, uint64_t a2)
{
  unint64_t v61 = a1;
  uint64_t v3 = type metadata accessor for Errors();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v62 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint8_t **)((char *)&v56 - v7);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v56 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v56 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v56 - v20;
  if ((sub_1001151B4() & 1) == 0)
  {
    uint64_t v29 = a2;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v30 = sub_100096F64(v9, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v21, v30, v9);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      BOOL v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Client doesn't have camera TCC, rejecting XPC message", v33, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v9);
    *uint64_t v8 = 0xD000000000000012;
    v8[1] = 0x8000000100237160;
    id v34 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_18;
  }
  id v22 = [self currentConnection];
  if (!v22)
  {
    uint64_t v29 = a2;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v35 = sub_100096F64(v9, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v19, v35, v9);
    char v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      char v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed fetching current NSXPCConnection, cannot construct client", v38, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v9);
    *uint64_t v8 = 0xD000000000000017;
    v8[1] = 0x8000000100235620;
    id v34 = (unsigned int *)&enum case for Errors.XPCNil(_:);
LABEL_18:
    (*(void (**)(void *, void, uint64_t))(v4 + 104))(v8, *v34, v3);
    uint64_t v39 = v62;
    (*(void (**)(char *, void *, uint64_t))(v4 + 16))(v62, v8, v3);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v40, v39, v3);
    os_log_type_t v41 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v29 + 16))(v29, 0, v41);
    goto LABEL_19;
  }
  uint64_t v23 = v22;
  uint64_t v60 = a2;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_1002B1628;
  id v59 = v23;
  uint64_t v25 = sub_10019AE8C(v23);
  if (!v26)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v42 = sub_100096F64(v9, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, v42, v9);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      os_log_type_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed fetching App ID from connection", v45, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
    *uint64_t v8 = 0xD000000000000026;
    v8[1] = 0x8000000100235640;
    (*(void (**)(void *, void, uint64_t))(v4 + 104))(v8, enum case for Errors.NotFound(_:), v3);
    os_log_type_t v46 = v62;
    (*(void (**)(char *, void *, uint64_t))(v4 + 16))(v62, v8, v3);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v47, v46, v3);
    uint64_t v48 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v60 + 16))(v60, 0, v48);

    goto LABEL_20;
  }
  uint64_t v27 = v25;
  unint64_t v28 = v26;
  uint64_t v65 = 0;
  swift_bridgeObjectRetain();
  sub_1001A3DD8(v27, v28, v24, v27, v28, (uint64_t)v61, (uint64_t)&v65);
  swift_bridgeObjectRelease();
  if (v65)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, void))(v60 + 16))(v60, 1, 0);

    return;
  }
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v49 = sub_100096F64(v9, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v49, v9);
  swift_bridgeObjectRetain();
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v50, v51))
  {
    unint64_t v61 = (uint8_t *)swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    uint64_t v64 = v58;
    os_log_t v57 = v50;
    os_log_type_t v52 = v61;
    *(_DWORD *)unint64_t v61 = 136315138;
    v56 = v52 + 4;
    swift_bridgeObjectRetain();
    uint64_t v63 = sub_1000993AC(v27, v28, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v53 = v57;
    _os_log_impl((void *)&_mh_execute_header, v57, v51, "No clients registered for config changes on %s", v61, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  *uint64_t v8 = 0xD000000000000014;
  v8[1] = 0x80000001002373E0;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v8, enum case for Errors.UnexpectedError(_:), v3);
  id v54 = v62;
  (*(void (**)(char *, void *, uint64_t))(v4 + 16))(v62, v8, v3);
  sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
  swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v55, v54, v3);
  os_log_type_t v41 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, void *))(v60 + 16))(v60, 0, v41);

LABEL_19:
LABEL_20:
  (*(void (**)(void *, uint64_t))(v4 + 8))(v8, v3);
  swift_errorRelease();
}

uint64_t sub_1001284D4(void *a1, void *a2, const void *a3)
{
  id v103 = a1;
  id v104 = a2;
  uint64_t v4 = type metadata accessor for Errors();
  uint64_t v108 = *(void *)(v4 - 8);
  uint64_t v109 = (uint64_t (*)(char, uint64_t))v4;
  uint64_t v5 = __chkstk_darwin(v4);
  id v105 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v106 = (uint64_t *)((char *)&v90 - v7);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v101 = *(void *)(v8 - 8);
  uint64_t v102 = v8;
  __chkstk_darwin(v8);
  unsigned int v99 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for DispatchQoS();
  uint64_t v98 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v97 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for DispatchTime();
  uint64_t v95 = *(void *)(v96 - 8);
  uint64_t v11 = __chkstk_darwin(v96);
  uint64_t v13 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v94 = (char *)&v90 - v14;
  uint64_t v15 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v93 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  id v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v90 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  unint64_t v28 = (char *)&v90 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v90 - v29;
  uint64_t v110 = swift_allocObject();
  *(void *)(v110 + 16) = a3;
  uint64_t v107 = (uint64_t)a3;
  _Block_copy(a3);
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v60 = sub_100096F64(v18, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v30, v60, v18);
    unint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Client doesn't have camera TCC, rejecting XPC message", v63, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v30, v18);
    uint64_t v64 = v106;
    *uint64_t v106 = 0xD000000000000012;
    v64[1] = 0x8000000100237160;
    uint64_t v65 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_18;
  }
  id v31 = [self currentConnection];
  if (!v31)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v66 = sub_100096F64(v18, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v28, v66, v18);
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      int v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Failed fetching current NSXPCConnection, cannot construct client", v69, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v18);
    uint64_t v64 = v106;
    *uint64_t v106 = 0xD000000000000017;
    v64[1] = 0x8000000100235620;
    uint64_t v65 = (unsigned int *)&enum case for Errors.XPCNil(_:);
LABEL_18:
    uint64_t v71 = v108;
    uint64_t v70 = v109;
    (*(void (**)(void *, void, uint64_t (*)(char, uint64_t)))(v108 + 104))(v64, *v65, v109);
    id v72 = v105;
    (*(void (**)(char *, void *, uint64_t (*)(char, uint64_t)))(v71 + 16))(v105, v64, v70);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t (*)(char, uint64_t)))(v71 + 32))(v73, v72, v70);
    uint64_t v74 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v107 + 16))(v107, 0, v74);
LABEL_19:

LABEL_20:
    (*(void (**)(void *, uint64_t (*)(char, uint64_t)))(v71 + 8))(v64, v70);
    swift_errorRelease();
    return swift_release();
  }
  os_log_type_t v32 = v31;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v33 = qword_1002B1628;
  uint64_t v34 = sub_10019AE8C(v32);
  if (!v35)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v76 = sub_100096F64(v18, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v25, v76, v18);
    os_log_type_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Failed fetching App ID from connection", v79, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
    uint64_t v64 = v106;
    *uint64_t v106 = 0xD000000000000026;
    v64[1] = 0x8000000100235640;
    uint64_t v71 = v108;
    uint64_t v70 = v109;
    (*(void (**)(void *, void, uint64_t (*)(char, uint64_t)))(v108 + 104))(v64, enum case for Errors.NotFound(_:), v109);
    uint64_t v80 = v105;
    (*(void (**)(char *, void *, uint64_t (*)(char, uint64_t)))(v71 + 16))(v105, v64, v70);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t (*)(char, uint64_t)))(v71 + 32))(v81, v80, v70);
    int v82 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v107 + 16))(v107, 0, v82);

    goto LABEL_20;
  }
  unint64_t v36 = v35;
  uint64_t v91 = v13;
  id v92 = v32;
  uint64_t v113 = 0;
  os_log_type_t v37 = (void *)v34;
  swift_bridgeObjectRetain();
  id v38 = v103;
  id v39 = v104;
  id v104 = v37;
  sub_1001A3DF0((uint64_t)v37, v36, v33, (uint64_t)v37, v36, v38, v39, &v113);
  swift_bridgeObjectRelease();

  if (!v113)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v83 = sub_100096F64(v18, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v83, v18);
    swift_bridgeObjectRetain();
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v86 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v112 = (void *)sub_1000993AC((uint64_t)v104, v36, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "No clients registered for config changes on %s", v86, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    id v87 = v92;
    uint64_t v64 = v106;
    *uint64_t v106 = 0xD000000000000014;
    v64[1] = 0x80000001002373E0;
    uint64_t v71 = v108;
    uint64_t v70 = v109;
    (*(void (**)(void *, void, uint64_t (*)(char, uint64_t)))(v108 + 104))(v64, enum case for Errors.UnexpectedError(_:), v109);
    id v88 = v105;
    (*(void (**)(char *, void *, uint64_t (*)(char, uint64_t)))(v71 + 16))(v105, v64, v70);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t (*)(char, uint64_t)))(v71 + 32))(v89, v88, v70);
    uint64_t v74 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v107 + 16))(v107, 0, v74);

    goto LABEL_19;
  }
  uint64_t v40 = qword_1002B1628;
  uint64_t v41 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v42 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v42 + 4);
  swift_release();
  uint64_t v43 = v36;
  uint64_t v44 = swift_allocObject();
  uint64_t v109 = sub_100135C04;
  uint64_t v45 = v110;
  *(void *)(v44 + 16) = sub_100135C04;
  *(void *)(v44 + 24) = v45;
  os_log_type_t v46 = (void **)(v40 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v112 = *v46;
  *os_log_type_t v46 = (void *)0x8000000000000000;
  id v48 = v104;
  sub_1001F49F4((uint64_t)sub_100135CB4, v44, (uint64_t)v104, v43, isUniquelyReferenced_nonNull_native);
  *os_log_type_t v46 = v112;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v49 = *(os_unfair_lock_s **)(v40 + v41);
  swift_retain();
  os_unfair_lock_unlock(v49 + 4);
  swift_release();
  sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  uint64_t v50 = v93;
  (*(void (**)(char *, void, uint64_t))(v93 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v15);
  uint64_t v107 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v17, v15);
  os_log_type_t v51 = v91;
  static DispatchTime.now()();
  os_log_type_t v52 = v94;
  + infix(_:_:)();
  uint64_t v108 = *(void *)(v95 + 8);
  uint64_t v53 = v96;
  ((void (*)(char *, uint64_t))v108)(v51, v96);
  id v54 = (void *)swift_allocObject();
  v54[2] = v48;
  v54[3] = v43;
  v54[4] = v109;
  v54[5] = v45;
  aBlock[4] = (uint64_t)sub_100135C00;
  aBlock[5] = (uint64_t)v54;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001468DC;
  aBlock[3] = (uint64_t)&unk_1002779A8;
  uint64_t v55 = _Block_copy(aBlock);
  swift_retain();
  v56 = v97;
  static DispatchQoS.unspecified.getter();
  uint64_t v112 = _swiftEmptyArrayStorage;
  sub_100135BB4((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  os_log_t v57 = v99;
  uint64_t v58 = v102;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v59 = (void *)v107;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

  _Block_release(v55);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v57, v58);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v56, v100);
  ((void (*)(char *, uint64_t))v108)(v52, v53);
  swift_release();
  return swift_release();
}

uint64_t sub_100129530(uint64_t a1, void (**a2)(const void *, void, void *))
{
  uint64_t v105 = a1;
  uint64_t v3 = type metadata accessor for Errors();
  uint64_t v109 = *(void *)(v3 - 8);
  uint64_t v110 = (uint64_t (*)(char, uint64_t))v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v106 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v107 = (uint64_t *)((char *)&v91 - v6);
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v103 = *(void *)(v7 - 8);
  uint64_t v104 = v7;
  __chkstk_darwin(v7);
  uint64_t v101 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for DispatchQoS();
  uint64_t v100 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  unsigned int v99 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v98 = type metadata accessor for DispatchTime();
  uint64_t v97 = *(void *)(v98 - 8);
  uint64_t v10 = __chkstk_darwin(v98);
  uint64_t v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v96 = (char *)&v91 - v13;
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v95 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v91 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v91 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v91 - v28;
  uint64_t v111 = swift_allocObject();
  *(void *)(v111 + 16) = a2;
  uint64_t v108 = a2;
  _Block_copy(a2);
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v61 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v29, v61, v17);
    os_log_type_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Client doesn't have camera TCC, rejecting XPC message", v64, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v29, v17);
    uint64_t v65 = v107;
    *uint64_t v107 = 0xD000000000000012;
    v65[1] = 0x8000000100237160;
    uint64_t v66 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_18;
  }
  id v30 = [self currentConnection];
  if (!v30)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v67 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v27, v67, v17);
    os_log_type_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Failed fetching current NSXPCConnection, cannot construct client", v70, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
    uint64_t v65 = v107;
    *uint64_t v107 = 0xD000000000000017;
    v65[1] = 0x8000000100235620;
    uint64_t v66 = (unsigned int *)&enum case for Errors.XPCNil(_:);
LABEL_18:
    uint64_t v72 = v109;
    uint64_t v71 = v110;
    (*(void (**)(void *, void, uint64_t (*)(char, uint64_t)))(v109 + 104))(v65, *v66, v110);
    uint64_t v73 = v106;
    (*(void (**)(char *, void *, uint64_t (*)(char, uint64_t)))(v72 + 16))(v106, v65, v71);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t (*)(char, uint64_t)))(v72 + 32))(v74, v73, v71);
    uint64_t v75 = (void *)_convertErrorToNSError(_:)();
    v108[2](v108, 0, v75);
LABEL_19:

LABEL_20:
    (*(void (**)(void *, uint64_t (*)(char, uint64_t)))(v72 + 8))(v65, v71);
    swift_errorRelease();
    return swift_release();
  }
  id v31 = v30;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v32 = qword_1002B1628;
  uint64_t v33 = sub_10019AE8C(v31);
  if (!v34)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    os_log_type_t v77 = v31;
    uint64_t v78 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v24, v78, v17);
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Failed fetching App ID from connection", v81, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
    uint64_t v65 = v107;
    *uint64_t v107 = 0xD000000000000026;
    v65[1] = 0x8000000100235640;
    uint64_t v72 = v109;
    uint64_t v71 = v110;
    (*(void (**)(void *, void, uint64_t (*)(char, uint64_t)))(v109 + 104))(v65, enum case for Errors.NotFound(_:), v110);
    int v82 = v106;
    (*(void (**)(char *, void *, uint64_t (*)(char, uint64_t)))(v72 + 16))(v106, v65, v71);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t (*)(char, uint64_t)))(v72 + 32))(v83, v82, v71);
    uint64_t v84 = (void *)_convertErrorToNSError(_:)();
    v108[2](v108, 0, v84);

    goto LABEL_20;
  }
  id v92 = v12;
  uint64_t v114 = 0;
  unint64_t v35 = v34;
  uint64_t v36 = v33;
  swift_bridgeObjectRetain();
  uint64_t v37 = v105;
  swift_bridgeObjectRetain();
  uint64_t v38 = v36;
  uint64_t v93 = v36;
  uint64_t v39 = v36;
  unint64_t v40 = v35;
  sub_1001A401C(v38, v35, v32, v39, v35, v37, (uint64_t)&v114);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v94 = v31;
  if (!v114)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v85 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v85, v17);
    swift_bridgeObjectRetain();
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      id v88 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)id v88 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v113 = (void *)sub_1000993AC(v93, v35, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "No clients registered for config changes on %s", v88, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    uint64_t v65 = v107;
    *uint64_t v107 = 0xD000000000000014;
    v65[1] = 0x80000001002373E0;
    uint64_t v72 = v109;
    uint64_t v71 = v110;
    (*(void (**)(void *, void, uint64_t (*)(char, uint64_t)))(v109 + 104))(v65, enum case for Errors.UnexpectedError(_:), v110);
    uint64_t v89 = v106;
    (*(void (**)(char *, void *, uint64_t (*)(char, uint64_t)))(v72 + 16))(v106, v65, v71);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t (*)(char, uint64_t)))(v72 + 32))(v90, v89, v71);
    uint64_t v75 = (void *)_convertErrorToNSError(_:)();
    v108[2](v108, 0, v75);

    goto LABEL_19;
  }
  uint64_t v41 = qword_1002B1628;
  uint64_t v42 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v43 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v43 + 4);
  swift_release();
  uint64_t v44 = swift_allocObject();
  uint64_t v110 = sub_100135C04;
  uint64_t v45 = v111;
  *(void *)(v44 + 16) = sub_100135C04;
  *(void *)(v44 + 24) = v45;
  os_log_type_t v46 = (void **)(v41 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v113 = *v46;
  *os_log_type_t v46 = (void *)0x8000000000000000;
  uint64_t v48 = v93;
  sub_1001F49F4((uint64_t)sub_100135CB4, v44, v93, v35, isUniquelyReferenced_nonNull_native);
  *os_log_type_t v46 = v113;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v49 = *(os_unfair_lock_s **)(v41 + v42);
  swift_retain();
  os_unfair_lock_unlock(v49 + 4);
  swift_release();
  sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  uint64_t v50 = v95;
  (*(void (**)(char *, void, uint64_t))(v95 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v14);
  os_log_type_t v51 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v16, v14);
  os_log_type_t v52 = v92;
  static DispatchTime.now()();
  uint64_t v53 = v96;
  + infix(_:_:)();
  uint64_t v109 = *(void *)(v97 + 8);
  uint64_t v54 = v98;
  ((void (*)(char *, uint64_t))v109)(v52, v98);
  uint64_t v55 = (void *)swift_allocObject();
  v55[2] = v48;
  v55[3] = v40;
  uint64_t v56 = v111;
  v55[4] = v110;
  v55[5] = v56;
  aBlock[4] = (uint64_t)sub_1001353D8;
  aBlock[5] = (uint64_t)v55;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001468DC;
  aBlock[3] = (uint64_t)&unk_100277908;
  os_log_t v57 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v58 = v99;
  static DispatchQoS.unspecified.getter();
  uint64_t v113 = _swiftEmptyArrayStorage;
  sub_100135BB4((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  id v59 = v101;
  uint64_t v60 = v104;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

  _Block_release(v57);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v59, v60);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v58, v102);
  ((void (*)(char *, uint64_t))v109)(v53, v54);
  swift_release();
  return swift_release();
}

uint64_t sub_10012A580(void (**a1)(const void *, void, void *), double a2, double a3, double a4, double a5)
{
  uint64_t v10 = type metadata accessor for Errors();
  uint64_t v110 = *(void *)(v10 - 8);
  uint64_t v111 = (uint64_t (*)(char, uint64_t))v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v107 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v108 = (uint64_t *)((char *)&v94 - v13);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v105 = *(void *)(v14 - 8);
  uint64_t v106 = v14;
  __chkstk_darwin(v14);
  uint64_t v103 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for DispatchQoS();
  uint64_t v102 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v101 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for DispatchTime();
  uint64_t v99 = *(void *)(v100 - 8);
  uint64_t v17 = __chkstk_darwin(v100);
  uint64_t v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v98 = (char *)&v94 - v20;
  uint64_t v21 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v97 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v94 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v26);
  id v31 = (char *)&v94 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  unint64_t v34 = (char *)&v94 - v33;
  __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v94 - v35;
  uint64_t v112 = swift_allocObject();
  *(void *)(v112 + 16) = a1;
  uint64_t v109 = a1;
  _Block_copy(a1);
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v64 = sub_100096F64(v24, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v36, v64, v24);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Client doesn't have camera TCC, rejecting XPC message", v67, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v36, v24);
    os_log_type_t v68 = v108;
    *uint64_t v108 = 0xD000000000000012;
    v68[1] = 0x8000000100237160;
    os_log_type_t v69 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_18;
  }
  id v37 = [self currentConnection];
  if (!v37)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v70 = sub_100096F64(v24, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v34, v70, v24);
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Failed fetching current NSXPCConnection, cannot construct client", v73, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v34, v24);
    os_log_type_t v68 = v108;
    *uint64_t v108 = 0xD000000000000017;
    v68[1] = 0x8000000100235620;
    os_log_type_t v69 = (unsigned int *)&enum case for Errors.XPCNil(_:);
LABEL_18:
    uint64_t v75 = v110;
    uint64_t v74 = v111;
    (*(void (**)(void *, void, uint64_t (*)(char, uint64_t)))(v110 + 104))(v68, *v69, v111);
    uint64_t v76 = v107;
    (*(void (**)(char *, void *, uint64_t (*)(char, uint64_t)))(v75 + 16))(v107, v68, v74);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t (*)(char, uint64_t)))(v75 + 32))(v77, v76, v74);
    uint64_t v78 = (void *)_convertErrorToNSError(_:)();
    v109[2](v109, 0, v78);
LABEL_19:

LABEL_20:
    (*(void (**)(void *, uint64_t (*)(char, uint64_t)))(v75 + 8))(v68, v74);
    swift_errorRelease();
    return swift_release();
  }
  uint64_t v38 = v37;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v39 = qword_1002B1628;
  uint64_t v40 = sub_10019AE8C(v38);
  if (!v41)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    os_log_type_t v80 = v38;
    uint64_t v81 = sub_100096F64(v24, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v31, v81, v24);
    int v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Failed fetching App ID from connection", v84, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v31, v24);
    os_log_type_t v68 = v108;
    *uint64_t v108 = 0xD000000000000026;
    v68[1] = 0x8000000100235640;
    uint64_t v75 = v110;
    uint64_t v74 = v111;
    (*(void (**)(void *, void, uint64_t (*)(char, uint64_t)))(v110 + 104))(v68, enum case for Errors.NotFound(_:), v111);
    uint64_t v85 = v107;
    (*(void (**)(char *, void *, uint64_t (*)(char, uint64_t)))(v75 + 16))(v107, v68, v74);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t (*)(char, uint64_t)))(v75 + 32))(v86, v85, v74);
    os_log_type_t v87 = (void *)_convertErrorToNSError(_:)();
    v109[2](v109, 0, v87);

    goto LABEL_20;
  }
  unint64_t v42 = v41;
  uint64_t v115 = 0;
  uint64_t v43 = v40;
  swift_bridgeObjectRetain();
  sub_1001A4264(v43, v42, v39, v43, v42, &v115, a2, a3, a4, a5);
  swift_bridgeObjectRelease();
  id v96 = v38;
  uint64_t v95 = v43;
  if (!v115)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v88 = sub_100096F64(v24, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v88, v24);
    swift_bridgeObjectRetain();
    uint64_t v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v90))
    {
      uint64_t v91 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v91 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v114 = (void *)sub_1000993AC(v95, v42, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v89, v90, "No clients registered for config changes on %s", v91, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v24);
    os_log_type_t v68 = v108;
    *uint64_t v108 = 0xD000000000000021;
    v68[1] = 0x8000000100237390;
    uint64_t v75 = v110;
    uint64_t v74 = v111;
    (*(void (**)(void *, void, uint64_t (*)(char, uint64_t)))(v110 + 104))(v68, enum case for Errors.InvalidParameter(_:), v111);
    id v92 = v107;
    (*(void (**)(char *, void *, uint64_t (*)(char, uint64_t)))(v75 + 16))(v107, v68, v74);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t (*)(char, uint64_t)))(v75 + 32))(v93, v92, v74);
    uint64_t v78 = (void *)_convertErrorToNSError(_:)();
    v109[2](v109, 0, v78);

    goto LABEL_19;
  }
  uint64_t v44 = qword_1002B1628;
  uint64_t v45 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  os_log_type_t v46 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v46 + 4);
  swift_release();
  uint64_t v47 = swift_allocObject();
  uint64_t v111 = sub_1001352F8;
  uint64_t v48 = v112;
  *(void *)(v47 + 16) = sub_1001352F8;
  *(void *)(v47 + 24) = v48;
  uint64_t v49 = (void **)(v44 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v114 = *v49;
  *uint64_t v49 = (void *)0x8000000000000000;
  uint64_t v51 = v95;
  sub_1001F49F4((uint64_t)sub_10013534C, v47, v95, v42, isUniquelyReferenced_nonNull_native);
  *uint64_t v49 = v114;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  os_log_type_t v52 = *(os_unfair_lock_s **)(v44 + v45);
  swift_retain();
  os_unfair_lock_unlock(v52 + 4);
  swift_release();
  sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  uint64_t v53 = v97;
  (*(void (**)(char *, void, uint64_t))(v97 + 104))(v23, enum case for DispatchQoS.QoSClass.default(_:), v21);
  uint64_t v54 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v23, v21);
  static DispatchTime.now()();
  uint64_t v55 = v98;
  + infix(_:_:)();
  uint64_t v110 = *(void *)(v99 + 8);
  uint64_t v56 = v19;
  uint64_t v57 = v100;
  ((void (*)(char *, uint64_t))v110)(v56, v100);
  uint64_t v58 = (void *)swift_allocObject();
  void v58[2] = v51;
  v58[3] = v42;
  uint64_t v59 = v112;
  v58[4] = v111;
  v58[5] = v59;
  aBlock[4] = (uint64_t)sub_100135380;
  aBlock[5] = (uint64_t)v58;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001468DC;
  aBlock[3] = (uint64_t)&unk_100277868;
  uint64_t v60 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v61 = v101;
  static DispatchQoS.unspecified.getter();
  uint64_t v114 = _swiftEmptyArrayStorage;
  sub_100135BB4((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  os_log_type_t v62 = v103;
  uint64_t v63 = v106;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();

  _Block_release(v60);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v62, v63);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v61, v104);
  ((void (*)(char *, uint64_t))v110)(v55, v57);
  swift_release();
  return swift_release();
}

uint64_t sub_10012B5E8(void *a1, uint64_t a2)
{
  uint64_t v149 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v143 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v130 - v7;
  long long v142 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ComponentType();
  uint64_t v141 = *((void *)v142 - 1);
  __chkstk_darwin(v142);
  v144 = (char *)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Errors();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (uint64_t *)((char *)&v130 - v15);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v147 = v17;
  uint64_t v148 = v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v146 = (char *)&v130 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  v139 = (char *)&v130 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v145 = (char *)&v130 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v140 = (char *)&v130 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v130 - v28;
  __chkstk_darwin(v27);
  id v31 = (char *)&v130 - v30;
  if ((sub_1001151B4() & 1) == 0)
  {
    uint64_t v47 = v14;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v48 = v147;
    uint64_t v49 = sub_100096F64(v147, (uint64_t)qword_1002A9E40);
    uint64_t v50 = v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v31, v49, v48);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    BOOL v53 = os_log_type_enabled(v51, v52);
    uint64_t v54 = v149;
    if (v53)
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Client doesn't have camera TCC, rejecting XPC message", v55, 2u);
      uint64_t v50 = v148;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v48);
    *uint64_t v16 = 0xD000000000000012;
    v16[1] = 0x8000000100237160;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v16, enum case for Errors.CameraTCCMissing(_:), v10);
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v47, v16, v10);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v56, v47, v10);
    uint64_t v57 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v54 + 16))(v54, v57);
    goto LABEL_18;
  }
  if (!a1)
  {
    *uint64_t v16 = 0xD000000000000014;
    v16[1] = 0x80000001002372D0;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v16, enum case for Errors.NilParams(_:), v10);
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v14, v16, v10);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v58, v14, v10);
    uint64_t v57 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v149 + 16))(v149, v57);
LABEL_18:

    (*(void (**)(void *, uint64_t))(v11 + 8))(v16, v10);
    return swift_errorRelease();
  }
  uint64_t v138 = v14;
  uint64_t v32 = self;
  id v150 = a1;
  id v33 = [v32 currentConnection];
  if (!v33)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v60 = v147;
    uint64_t v61 = sub_100096F64(v147, (uint64_t)qword_1002A9E40);
    uint64_t v62 = v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v148 + 16))(v29, v61, v60);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    BOOL v65 = os_log_type_enabled(v63, v64);
    uint64_t v66 = v149;
    if (v65)
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Failed fetching current NSXPCConnection, cannot construct client", v67, 2u);
      uint64_t v62 = v148;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v62 + 8))(v29, v60);
    *uint64_t v16 = 0xD000000000000017;
    v16[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v16, enum case for Errors.XPCNil(_:), v10);
    os_log_type_t v68 = v138;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v138, v16, v10);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v69, v68, v10);
    uint64_t v57 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v66 + 16))(v66, v57);

    goto LABEL_18;
  }
  uint64_t v132 = a1;
  id v136 = v33;
  v133 = v16;
  uint64_t v137 = v10;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  unint64_t v34 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v134 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  uint64_t v35 = *(void **)&v34[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v36 = v34;
  id v37 = v35;
  OS_dispatch_semaphore.wait()();

  v135 = v36;
  uint64_t v38 = &v36[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v39 = *(void *)v38;
  uint64_t v40 = *(void *)(*(void *)v38 + 16);
  uint64_t v41 = v149;
  if (v40)
  {
    uint64_t v131 = v11;
    uint64_t v42 = v39 + 32;
    uint64_t v43 = (void (**)(char *, uint64_t))(v143 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v42, (uint64_t)v152);
      id v44 = *(id *)(*sub_1000A5DA4(v152, v152[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v44) = static UUID.== infix(_:_:)();
      uint64_t v45 = *v43;
      (*v43)(v6, v3);
      v45(v8, v3);
      if (v44) {
        break;
      }
      sub_100099BCC((uint64_t)v152);
      v42 += 40;
      if (!--v40)
      {
        swift_bridgeObjectRelease();
        uint64_t v11 = v131;
        uint64_t v41 = v149;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    id v70 = *(id *)&v34[v134];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v152, (uint64_t)&v153);
    sub_100099BCC((uint64_t)v152);

    uint64_t v11 = v131;
    uint64_t v41 = v149;
  }
  else
  {
LABEL_11:
    id v46 = *(id *)&v34[v134];
    OS_dispatch_semaphore.signal()();

    uint64_t v155 = 0;
    long long v153 = 0u;
    long long v154 = 0u;
  }
  uint64_t v71 = v137;
  uint64_t v73 = v147;
  uint64_t v72 = v148;
  uint64_t v75 = (uint64_t)v144;
  uint64_t v74 = v145;
  if (!*((void *)&v154 + 1))
  {
    sub_1000A61E4((uint64_t)&v153, (uint64_t *)&unk_1002AAA30);
    goto LABEL_36;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_36:
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v99 = sub_100096F64(v73, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v146, v99, v73);
    uint64_t v100 = v150;
    uint64_t v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v101, v102))
    {
      uint64_t v103 = (uint8_t *)swift_slowAlloc();
      uint64_t v104 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v103 = 138412290;
      *(void *)&long long v153 = v100;
      uint64_t v105 = v100;
      uint64_t v73 = v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v104 = v132;

      uint64_t v71 = v137;
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "No matching record, can't lookup %@", v103, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      uint64_t v72 = v148;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v101 = v100;
    }

    (*(void (**)(char *, uint64_t))(v72 + 8))(v146, v73);
    uint64_t v106 = v133;
    void *v133 = 0xD000000000000015;
    v106[1] = 0x8000000100237310;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v106, enum case for Errors.AccessoryNotReachable(_:), v71);
    uint64_t v107 = v138;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v138, v106, v71);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v108, v107, v71);
    uint64_t v109 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v149 + 16))(v149, v109);

    (*(void (**)(void *, uint64_t))(v11 + 8))(v106, v71);
    return swift_errorRelease();
  }
  uint64_t v76 = v152[0];
  (*(void (**)(uint64_t, void, void *))(v141 + 104))(v75, enum case for ComponentType.Battery(_:), v142);
  uint64_t v77 = v76 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap;
  swift_beginAccess();
  uint64_t v78 = *(void *)v77;
  if (!*(void *)(*(void *)v77 + 16))
  {
LABEL_43:
    (*(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v141 + 8))(v75, v142);
LABEL_44:
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v110 = sub_100096F64(v73, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v140, v110, v73);
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v111, v112))
    {
      uint64_t v113 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v113 = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "Accessory doesn't have a battery service", v113, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v72 + 8))(v140, v73);
    uint64_t v114 = v133;
    void *v133 = 0xD000000000000012;
    v114[1] = 0x8000000100237350;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v114, enum case for Errors.NotFound(_:), v71);
    uint64_t v115 = v138;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v138, v114, v71);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v116, v115, v71);
    uint64_t v117 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v41 + 16))(v41, v117);

    swift_release();
    (*(void (**)(void *, uint64_t))(v11 + 8))(v114, v71);
    return swift_errorRelease();
  }
  swift_bridgeObjectRetain();
  unint64_t v79 = sub_10016DF28(v75);
  if ((v80 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  uint64_t v81 = *(void *)(*(void *)(v78 + 56) + 8 * v79);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v141 + 8))(v75, v142);
  if (!*(void *)(v81 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  uint64_t v131 = v11;
  LODWORD(v146) = [v136 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  v144 = (char *)v76;
  uint64_t v82 = sub_100096F64(v73, (uint64_t)qword_1002A9E40);
  os_log_type_t v83 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
  uint64_t v143 = v82;
  long long v142 = v83;
  ((void (*)(char *))v83)(v74);
  id v84 = v150;
  swift_bridgeObjectRetain();
  uint64_t v85 = Logger.logObject.getter();
  os_log_type_t v86 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v87 = swift_slowAlloc();
    id v150 = v84;
    uint64_t v88 = v87;
    uint64_t v89 = (void *)swift_slowAlloc();
    uint64_t v141 = swift_slowAlloc();
    v152[0] = v141;
    *(_DWORD *)uint64_t v88 = 67109634;
    LODWORD(v151) = v146;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v88 + 8) = 2112;
    uint64_t v151 = (uint64_t)v150;
    id v90 = v150;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v89 = v132;

    *(_WORD *)(v88 + 18) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v91 = Array.description.getter();
    unint64_t v93 = v92;
    swift_bridgeObjectRelease();
    uint64_t v94 = v91;
    uint64_t v41 = v149;
    uint64_t v151 = sub_1000993AC(v94, v93, v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_type_t v95 = v86;
    int v96 = (int)v146;
    _os_log_impl((void *)&_mh_execute_header, v85, v95, "Client %d registering for battery events for %@, serviceUUID %s", (uint8_t *)v88, 0x1Cu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    uint64_t v71 = v137;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    id v84 = v150;
    swift_slowDealloc();

    uint64_t v97 = *(void (**)(char *, uint64_t))(v148 + 8);
    v97(v145, v147);
    uint64_t v98 = v131;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v97 = *(void (**)(char *, uint64_t))(v72 + 8);
    v97(v74, v147);
    uint64_t v98 = v131;
    int v96 = (int)v146;
  }
  id v118 = v136;
  id v119 = v136;
  char v120 = sub_10018FD68(v96, v118, v84);

  if ((v120 & 1) == 0)
  {
    uint64_t v121 = v84;
    uint64_t v122 = v41;
    v142(v139, v143, v147);
    id v123 = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v123, v124))
    {
      uint64_t v125 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v125 = 0;
      _os_log_impl((void *)&_mh_execute_header, v123, v124, "Failed adding client to client list", v125, 2u);
      swift_slowDealloc();
    }

    v97(v139, v147);
    uint64_t v126 = v133;
    void *v133 = 0xD00000000000001CLL;
    v126[1] = 0x80000001002372F0;
    (*(void (**)(void *, void, uint64_t))(v98 + 104))(v126, enum case for Errors.UnexpectedError(_:), v71);
    id v127 = v138;
    (*(void (**)(char *, void *, uint64_t))(v98 + 16))(v138, v126, v71);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v128, v127, v71);
    v129 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v122 + 16))(v122, v129);

    swift_release();
    (*(void (**)(void *, uint64_t))(v98 + 8))(v126, v71);
    return swift_errorRelease();
  }
  (*(void (**)(uint64_t, void))(v41 + 16))(v41, 0);

  return swift_release();
}

uint64_t sub_10012CC38(void *a1, void *a2, void (**a3)(const void *, Class, void *))
{
  uint64_t v89 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v90 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v83 - v9;
  uint64_t v11 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v11 - 8);
  uint64_t v88 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Errors();
  uint64_t v94 = *(void *)(v13 - 8);
  uint64_t v95 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v91 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v92 = (uint64_t *)((char *)&v83 - v16);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v83 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v83 - v25;
  uint64_t v96 = swift_allocObject();
  *(void *)(v96 + 16) = a3;
  unint64_t v93 = a3;
  _Block_copy(a3);
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v57 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v26, v57, v17);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Client doesn't have camera TCC, rejecting XPC message", v60, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v26, v17);
    uint64_t v61 = v92;
    *unint64_t v92 = 0xD000000000000012;
    v61[1] = 0x8000000100237160;
    uint64_t v62 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_24;
  }
  if (!a1)
  {
    uint64_t v61 = v92;
    *unint64_t v92 = 0xD000000000000016;
    v61[1] = 0x8000000100237180;
    uint64_t v62 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_24:
    uint64_t v64 = v94;
    uint64_t v63 = v95;
    (*(void (**)(void *, void, uint64_t))(v94 + 104))(v61, *v62, v95);
    BOOL v65 = v91;
    (*(void (**)(char *, void *, uint64_t))(v64 + 16))(v91, v61, v63);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v66, v65, v63);
    uint64_t v67 = (void *)_convertErrorToNSError(_:)();
    type metadata accessor for AccessoryBatteryState();
    v68.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v93[2](v93, v68.super.isa, v67);

LABEL_25:
    (*(void (**)(void *, uint64_t))(v64 + 8))(v61, v63);
    swift_errorRelease();
    return swift_release();
  }
  uint64_t v27 = self;
  id v28 = a1;
  id v29 = [v27 currentConnection];
  if (!v29)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    id v70 = v28;
    uint64_t v71 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v71, v17);
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Failed fetching current NSXPCConnection, cannot construct client", v74, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    uint64_t v61 = v92;
    *unint64_t v92 = 0xD000000000000017;
    v61[1] = 0x8000000100235620;
    uint64_t v64 = v94;
    uint64_t v63 = v95;
    (*(void (**)(void *, void, uint64_t))(v94 + 104))(v61, enum case for Errors.XPCNil(_:), v95);
    uint64_t v75 = v91;
    (*(void (**)(char *, void *, uint64_t))(v64 + 16))(v91, v61, v63);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v76, v75, v63);
    uint64_t v77 = (void *)_convertErrorToNSError(_:)();
    type metadata accessor for AccessoryBatteryState();
    v68.super.isa = Array._bridgeToObjectiveC()().super.isa;
    v93[2](v93, v68.super.isa, v77);

    goto LABEL_25;
  }
  id v87 = v29;
  unsigned int v30 = [v29 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v24, v31, v17);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    unsigned int v35 = v30;
    uint64_t v36 = v34;
    *(_DWORD *)unint64_t v34 = 67109120;
    LODWORD(v98) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Client %d requesting current battery data", v36, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v37 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v38 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  uint64_t v39 = *(void **)&v37[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v40 = v37;
  id v41 = v39;
  OS_dispatch_semaphore.wait()();

  uint64_t v42 = &v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v43 = *(void *)v42;
  uint64_t v44 = *(void *)(*(void *)v42 + 16);
  if (v44)
  {
    uint64_t v84 = v38;
    uint64_t v85 = v37;
    os_log_type_t v86 = v40;
    uint64_t v45 = v43 + 32;
    id v46 = (void (**)(char *, uint64_t))(v90 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v45, (uint64_t)v97);
      id v47 = *(id *)(*sub_1000A5DA4(v97, v97[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v47) = static UUID.== infix(_:_:)();
      uint64_t v48 = *v46;
      (*v46)(v8, v5);
      v48(v10, v5);
      if (v47) {
        break;
      }
      sub_100099BCC((uint64_t)v97);
      v45 += 40;
      if (!--v44)
      {
        swift_bridgeObjectRelease();
        uint64_t v40 = v86;
        id v37 = v85;
        uint64_t v38 = v84;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    id v78 = *(id *)&v85[v84];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v97, (uint64_t)&v98);
    sub_100099BCC((uint64_t)v97);

    if (!*((void *)&v99 + 1)) {
      goto LABEL_33;
    }
  }
  else
  {
LABEL_15:
    id v49 = *(id *)&v37[v38];
    OS_dispatch_semaphore.signal()();

    uint64_t v100 = 0;
    long long v98 = 0u;
    long long v99 = 0u;

    if (!*((void *)&v99 + 1))
    {
LABEL_33:
      unint64_t v79 = v28;
      sub_1000A61E4((uint64_t)&v98, (uint64_t *)&unk_1002AAA30);
LABEL_35:
      uint64_t v61 = v92;
      *unint64_t v92 = 0xD000000000000011;
      v61[1] = 0x8000000100237330;
      uint64_t v64 = v94;
      uint64_t v63 = v95;
      (*(void (**)(void *, void, uint64_t))(v94 + 104))(v61, enum case for Errors.NotFound(_:), v95);
      char v80 = v91;
      (*(void (**)(char *, void *, uint64_t))(v64 + 16))(v91, v61, v63);
      sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v64 + 32))(v81, v80, v63);
      uint64_t v82 = (void *)_convertErrorToNSError(_:)();
      type metadata accessor for AccessoryBatteryState();
      v68.super.isa = Array._bridgeToObjectiveC()().super.isa;
      v93[2](v93, v68.super.isa, v82);

      goto LABEL_25;
    }
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {
    unint64_t v79 = v28;
    goto LABEL_35;
  }
  uint64_t v50 = v97[0];
  uint64_t v51 = type metadata accessor for TaskPriority();
  uint64_t v52 = (uint64_t)v88;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v88, 1, 1, v51);
  BOOL v53 = (void *)swift_allocObject();
  v53[2] = 0;
  v53[3] = 0;
  uint64_t v54 = v89;
  v53[4] = v89;
  v53[5] = v50;
  uint64_t v55 = v96;
  v53[6] = sub_1001351C8;
  v53[7] = v55;
  id v56 = v54;
  swift_retain();
  sub_1001BC1A8(v52, (uint64_t)&unk_1002AA068, (uint64_t)v53);
  swift_release();

  return swift_release();
}

uint64_t sub_10012D928(uint64_t a1)
{
  v1[8] = a1;
  uint64_t v2 = type metadata accessor for Logger();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for ComponentType();
  v1[12] = v3;
  v1[13] = *(void *)(v3 - 8);
  v1[14] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10012DA44, 0, 0);
}

uint64_t sub_10012DA44()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[8];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1001EAFB8((uint64_t)_swiftEmptyArrayStorage);
  (*(void (**)(uint64_t, void, uint64_t))(v1 + 104))(v2, enum case for ComponentType.Battery(_:), v3);
  uint64_t v6 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*(void *)(v7 + 16))
  {
    uint64_t v8 = v0[14];
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_10016DF28(v8);
    if (v10)
    {
      uint64_t v11 = v0[13];
      uint64_t v12 = v0[14];
      uint64_t v13 = v0[12];
      uint64_t v14 = *(void *)(*(void *)(v7 + 56) + 8 * v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15)
      {
        uint64_t v16 = (void **)(v14 + 48);
        do
        {
          uint64_t v18 = *(v16 - 2);
          uint64_t v17 = (uint64_t)*(v16 - 1);
          uint64_t v19 = *v16;
          uint64_t v20 = qword_1002A7BE0;
          swift_bridgeObjectRetain_n();
          id v21 = v19;
          if (v20 != -1) {
            swift_once();
          }
          uint64_t v22 = v0[8];
          uint64_t v23 = qword_1002B15B0;
          swift_bridgeObjectRetain();
          swift_retain();
          sub_1001B4A00(v23, v21, v22, v5, v18, v17);
          swift_bridgeObjectRelease_n();
          swift_release();

          v16 += 3;
          --v15;
        }
        while (v15);
      }
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v37 = *(void *)(v5 + 16);
      swift_bridgeObjectRetain();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v38 = (uint64_t (*)(uint64_t))v0[1];
      return v38(v37);
    }
    swift_bridgeObjectRelease();
  }
  (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v25 = v0[10];
  uint64_t v24 = v0[11];
  uint64_t v26 = v0[9];
  uint64_t v27 = sub_100096F64(v26, (uint64_t)qword_1002A9E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v27, v26);
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v28, v29))
  {
    unsigned int v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned int v30 = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Accessory does not have a battery service, cannot read", v30, 2u);
    swift_slowDealloc();
  }
  uint64_t v32 = v0[10];
  uint64_t v31 = v0[11];
  uint64_t v33 = v0[9];

  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  sub_1000B8650();
  swift_allocError();
  unsigned char *v34 = 1;
  swift_willThrow();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  unsigned int v35 = (uint64_t (*)(void))v0[1];
  return v35();
}

uint64_t sub_10012DE5C(void *a1, uint64_t a2)
{
  uint64_t v147 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v141 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v128 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v128 - v7;
  v140 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for ComponentType();
  uint64_t v139 = *((void *)v140 - 1);
  __chkstk_darwin(v140);
  long long v142 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Errors();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (uint64_t *)((char *)&v128 - v15);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v145 = v17;
  uint64_t v146 = v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v144 = (char *)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v137 = (char *)&v128 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v143 = (char *)&v128 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v138 = (char *)&v128 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  os_log_type_t v29 = (char *)&v128 - v28;
  __chkstk_darwin(v27);
  uint64_t v31 = (char *)&v128 - v30;
  if ((sub_1001151B4() & 1) == 0)
  {
    id v47 = v14;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v48 = v145;
    uint64_t v49 = sub_100096F64(v145, (uint64_t)qword_1002A9E40);
    uint64_t v50 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v31, v49, v48);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    BOOL v53 = os_log_type_enabled(v51, v52);
    uint64_t v54 = v147;
    if (v53)
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Client doesn't have camera TCC, rejecting XPC message", v55, 2u);
      uint64_t v50 = v146;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v48);
    *uint64_t v16 = 0xD000000000000012;
    v16[1] = 0x8000000100237160;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v16, enum case for Errors.CameraTCCMissing(_:), v10);
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v47, v16, v10);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v56, v47, v10);
    uint64_t v57 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v54 + 16))(v54, v57);
    goto LABEL_18;
  }
  if (!a1)
  {
    *uint64_t v16 = 0xD000000000000016;
    v16[1] = 0x8000000100237180;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v16, enum case for Errors.NilParams(_:), v10);
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v14, v16, v10);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v58, v14, v10);
    uint64_t v57 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v147 + 16))(v147, v57);
LABEL_18:

    (*(void (**)(void *, uint64_t))(v11 + 8))(v16, v10);
    return swift_errorRelease();
  }
  id v136 = v14;
  uint64_t v32 = self;
  id v148 = a1;
  id v33 = [v32 currentConnection];
  if (!v33)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v60 = v145;
    uint64_t v61 = sub_100096F64(v145, (uint64_t)qword_1002A9E40);
    uint64_t v62 = v146;
    (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v29, v61, v60);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    BOOL v65 = os_log_type_enabled(v63, v64);
    uint64_t v66 = v147;
    if (v65)
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Failed fetching current NSXPCConnection, cannot construct client", v67, 2u);
      uint64_t v62 = v146;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v62 + 8))(v29, v60);
    *uint64_t v16 = 0xD000000000000017;
    v16[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v16, enum case for Errors.XPCNil(_:), v10);
    NSArray v68 = v136;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v136, v16, v10);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v69, v68, v10);
    uint64_t v57 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v66 + 16))(v66, v57);

    goto LABEL_18;
  }
  uint64_t v130 = a1;
  id v134 = v33;
  uint64_t v131 = v16;
  uint64_t v135 = v10;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  unint64_t v34 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v132 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  unsigned int v35 = *(void **)&v34[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v36 = v34;
  id v37 = v35;
  OS_dispatch_semaphore.wait()();

  v133 = v36;
  uint64_t v38 = &v36[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v39 = *(void *)v38;
  uint64_t v40 = *(void *)(*(void *)v38 + 16);
  uint64_t v41 = v147;
  if (v40)
  {
    uint64_t v129 = v11;
    uint64_t v42 = v39 + 32;
    uint64_t v43 = (void (**)(char *, uint64_t))(v141 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v42, (uint64_t)v150);
      id v44 = *(id *)(*sub_1000A5DA4(v150, v150[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v44) = static UUID.== infix(_:_:)();
      uint64_t v45 = *v43;
      (*v43)(v6, v3);
      v45(v8, v3);
      if (v44) {
        break;
      }
      sub_100099BCC((uint64_t)v150);
      v42 += 40;
      if (!--v40)
      {
        swift_bridgeObjectRelease();
        uint64_t v11 = v129;
        uint64_t v41 = v147;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    id v70 = *(id *)&v34[v132];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v150, (uint64_t)&v151);
    sub_100099BCC((uint64_t)v150);

    uint64_t v11 = v129;
    uint64_t v41 = v147;
  }
  else
  {
LABEL_11:
    id v46 = *(id *)&v34[v132];
    OS_dispatch_semaphore.signal()();

    uint64_t v153 = 0;
    long long v151 = 0u;
    long long v152 = 0u;
  }
  uint64_t v71 = v135;
  uint64_t v73 = v145;
  uint64_t v72 = v146;
  uint64_t v75 = (uint64_t)v142;
  uint64_t v74 = v143;
  if (!*((void *)&v152 + 1))
  {
    sub_1000A61E4((uint64_t)&v151, (uint64_t *)&unk_1002AAA30);
    goto LABEL_36;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_36:
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v98 = sub_100096F64(v73, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v144, v98, v73);
    long long v99 = v148;
    uint64_t v100 = Logger.logObject.getter();
    os_log_type_t v101 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v100, v101))
    {
      os_log_type_t v102 = (uint8_t *)swift_slowAlloc();
      uint64_t v103 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v102 = 138412290;
      *(void *)&long long v151 = v99;
      uint64_t v104 = v99;
      uint64_t v73 = v145;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v103 = v130;

      uint64_t v71 = v135;
      _os_log_impl((void *)&_mh_execute_header, v100, v101, "No matching record, can't lookup %@", v102, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      uint64_t v72 = v146;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v100 = v99;
    }

    (*(void (**)(char *, uint64_t))(v72 + 8))(v144, v73);
    uint64_t v105 = v131;
    *uint64_t v131 = 0xD000000000000015;
    v105[1] = 0x8000000100237310;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v105, enum case for Errors.AccessoryNotReachable(_:), v71);
    uint64_t v106 = v136;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v136, v105, v71);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v107, v106, v71);
    uint64_t v108 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v147 + 16))(v147, v108);

    (*(void (**)(void *, uint64_t))(v11 + 8))(v105, v71);
    return swift_errorRelease();
  }
  uint64_t v76 = v150[0];
  (*(void (**)(uint64_t, void, void *))(v139 + 104))(v75, enum case for ComponentType.Battery(_:), v140);
  uint64_t v77 = v76 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap;
  swift_beginAccess();
  uint64_t v78 = *(void *)v77;
  if (!*(void *)(*(void *)v77 + 16))
  {
LABEL_43:
    (*(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v139 + 8))(v75, v140);
LABEL_44:
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v109 = sub_100096F64(v73, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v138, v109, v73);
    uint64_t v110 = Logger.logObject.getter();
    os_log_type_t v111 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v110, v111))
    {
      os_log_type_t v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v112 = 0;
      _os_log_impl((void *)&_mh_execute_header, v110, v111, "Accessory doesn't have a battery service", v112, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v72 + 8))(v138, v73);
    uint64_t v113 = v131;
    *uint64_t v131 = 0xD000000000000012;
    v113[1] = 0x8000000100237350;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v113, enum case for Errors.NotFound(_:), v71);
    uint64_t v114 = v136;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v136, v113, v71);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v115, v114, v71);
    uint64_t v116 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v41 + 16))(v41, v116);

    swift_release();
    (*(void (**)(void *, uint64_t))(v11 + 8))(v113, v71);
    return swift_errorRelease();
  }
  swift_bridgeObjectRetain();
  unint64_t v79 = sub_10016DF28(v75);
  if ((v80 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  uint64_t v81 = *(void *)(*(void *)(v78 + 56) + 8 * v79);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void (*)(char *, uint64_t, uint64_t)))(v139 + 8))(v75, v140);
  if (!*(void *)(v81 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  uint64_t v129 = v11;
  int v82 = [v134 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  v144 = (char *)v76;
  uint64_t v83 = sub_100096F64(v73, (uint64_t)qword_1002A9E40);
  uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 16);
  uint64_t v141 = v83;
  v140 = v84;
  ((void (*)(char *))v84)(v74);
  id v85 = v148;
  swift_bridgeObjectRetain();
  os_log_type_t v86 = Logger.logObject.getter();
  os_log_type_t v87 = static os_log_type_t.default.getter();
  BOOL v88 = os_log_type_enabled(v86, v87);
  id v148 = v85;
  if (v88)
  {
    uint64_t v89 = swift_slowAlloc();
    LODWORD(v142) = v82;
    uint64_t v90 = v89;
    uint64_t v91 = (void *)swift_slowAlloc();
    uint64_t v139 = swift_slowAlloc();
    v150[0] = v139;
    *(_DWORD *)uint64_t v90 = 67109634;
    LODWORD(v149) = v142;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v90 + 8) = 2112;
    uint64_t v149 = (uint64_t)v85;
    id v92 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v91 = v130;

    *(_WORD *)(v90 + 18) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v93 = Array.description.getter();
    unint64_t v95 = v94;
    swift_bridgeObjectRelease();
    uint64_t v96 = v93;
    uint64_t v41 = v147;
    uint64_t v149 = sub_1000993AC(v96, v95, v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "Client %d de-registering for battery data for %@, UUID %s", (uint8_t *)v90, 0x1Cu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    uint64_t v71 = v135;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    int v82 = (int)v142;
    swift_slowDealloc();

    uint64_t v97 = *(void (**)(char *, uint64_t))(v146 + 8);
    v97(v143, v145);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v97 = *(void (**)(char *, uint64_t))(v72 + 8);
    v97(v74, v145);
  }
  uint64_t v117 = v129;
  id v118 = v134;
  char v119 = sub_1001A44B8(v82);

  if ((v119 & 1) == 0)
  {
    uint64_t v120 = v41;
    v140(v137, v141, v145);
    uint64_t v121 = Logger.logObject.getter();
    os_log_type_t v122 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v121, v122))
    {
      id v123 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v123 = 0;
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "Failed removing client from client list", v123, 2u);
      swift_slowDealloc();
    }

    v97(v137, v145);
    os_log_type_t v124 = v131;
    *uint64_t v131 = 0xD000000000000020;
    v124[1] = 0x80000001002371A0;
    (*(void (**)(void *, void, uint64_t))(v117 + 104))(v124, enum case for Errors.UnexpectedError(_:), v71);
    uint64_t v125 = v136;
    (*(void (**)(char *, void *, uint64_t))(v117 + 16))(v136, v124, v71);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v117 + 32))(v126, v125, v71);
    id v127 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v120 + 16))(v120, v127);

    swift_release();
    (*(void (**)(void *, uint64_t))(v117 + 8))(v124, v71);
    return swift_errorRelease();
  }
  (*(void (**)(uint64_t, void))(v41 + 16))(v41, 0);

  return swift_release();
}

void sub_10012F48C(void *a1, uint64_t a2)
{
  uint64_t v113 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v109 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v100 - v7;
  uint64_t v9 = type metadata accessor for Errors();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char **)((char *)&v100 - v14);
  uint64_t v112 = type metadata accessor for Logger();
  uint64_t v115 = *(void *)(v112 - 8);
  uint64_t v16 = __chkstk_darwin(v112);
  os_log_type_t v111 = (char *)&v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v108 = (char *)&v100 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v110 = (char *)&v100 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v100 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v100 - v25;
  if ((sub_1001151B4() & 1) == 0)
  {
    uint64_t v42 = v13;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v43 = v112;
    uint64_t v44 = sub_100096F64(v112, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v26, v44, v43);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v48 = v113;
    if (v47)
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Client doesn't have camera TCC, rejecting XPC message", v49, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v115 + 8))(v26, v43);
    *uint64_t v15 = 0xD000000000000012;
    v15[1] = 0x8000000100237160;
    (*(void (**)(void *, void, uint64_t))(v10 + 104))(v15, enum case for Errors.CameraTCCMissing(_:), v9);
    (*(void (**)(char *, void *, uint64_t))(v10 + 16))(v42, v15, v9);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v50, v42, v9);
    uint64_t v51 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v48 + 16))(v48, v51);
    goto LABEL_18;
  }
  if (!a1)
  {
    *uint64_t v15 = 0xD000000000000014;
    v15[1] = 0x80000001002372D0;
    (*(void (**)(void *, void, uint64_t))(v10 + 104))(v15, enum case for Errors.NilParams(_:), v9);
    (*(void (**)(char *, void *, uint64_t))(v10 + 16))(v13, v15, v9);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v52, v13, v9);
    uint64_t v51 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v113 + 16))(v113, v51);
LABEL_18:

    (*(void (**)(void *, uint64_t))(v10 + 8))(v15, v9);
LABEL_19:
    swift_errorRelease();
    return;
  }
  uint64_t v107 = v13;
  uint64_t v27 = self;
  uint64_t v106 = a1;
  uint64_t v114 = a1;
  id v28 = [v27 currentConnection];
  if (!v28)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v53 = v112;
    uint64_t v54 = sub_100096F64(v112, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v24, v54, v53);
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Failed fetching current NSXPCConnection, cannot construct client", v57, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v115 + 8))(v24, v53);
    *uint64_t v15 = 0xD000000000000017;
    v15[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v10 + 104))(v15, enum case for Errors.XPCNil(_:), v9);
    uint64_t v58 = v107;
    (*(void (**)(char *, void *, uint64_t))(v10 + 16))(v107, v15, v9);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v59, v58, v9);
    uint64_t v51 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v113 + 16))(v113, v51);

    goto LABEL_18;
  }
  id v29 = v28;
  uint64_t v102 = v10;
  uint64_t v104 = v9;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v30 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v105 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  uint64_t v31 = *(void **)&v30[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v32 = v30;
  id v33 = v31;
  OS_dispatch_semaphore.wait()();

  unint64_t v34 = &v32[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v35 = *(void *)v34;
  uint64_t v36 = *(void *)(*(void *)v34 + 16);
  id v103 = v29;
  if (v36)
  {
    uint64_t v100 = v30;
    os_log_type_t v101 = v32;
    uint64_t v37 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v109 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v37, (uint64_t)v116);
      id v39 = *(id *)(*sub_1000A5DA4(v116, v116[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v39) = static UUID.== infix(_:_:)();
      uint64_t v40 = *v38;
      (*v38)(v6, v3);
      v40(v8, v3);
      if (v39) {
        break;
      }
      sub_100099BCC((uint64_t)v116);
      v37 += 40;
      if (!--v36)
      {
        swift_bridgeObjectRelease();
        id v29 = v103;
        uint64_t v32 = v101;
        uint64_t v30 = v100;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    id v60 = *(id *)&v100[v105];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v116, (uint64_t)&v117);
    sub_100099BCC((uint64_t)v116);

    id v29 = v103;
  }
  else
  {
LABEL_11:
    id v41 = *(id *)&v30[v105];
    OS_dispatch_semaphore.signal()();

    uint64_t v119 = 0;
    long long v117 = 0u;
    long long v118 = 0u;
  }
  uint64_t v61 = v112;
  if (!*((void *)&v118 + 1))
  {
    sub_1000A61E4((uint64_t)&v117, (uint64_t *)&unk_1002AAA30);
    goto LABEL_33;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_33:
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v75 = sub_100096F64(v61, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v111, v75, v61);
    uint64_t v76 = v114;
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      unint64_t v79 = (uint8_t *)swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      uint64_t v114 = v76;
      uint64_t v81 = (void *)v80;
      *(_DWORD *)unint64_t v79 = 138412290;
      *(void *)&long long v117 = v114;
      int v82 = v114;
      uint64_t v61 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v81 = v106;

      _os_log_impl((void *)&_mh_execute_header, v77, v78, "No matching record, can't lookup %@", v79, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      uint64_t v76 = v114;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v77 = v76;
    }
    uint64_t v83 = v104;
    uint64_t v84 = v113;
    id v85 = v107;

    (*(void (**)(char *, uint64_t))(v115 + 8))(v111, v61);
    *uint64_t v15 = 0xD000000000000015;
    v15[1] = 0x8000000100237310;
    uint64_t v86 = v102;
    (*(void (**)(void *, void, uint64_t))(v102 + 104))(v15, enum case for Errors.AccessoryNotReachable(_:), v83);
    (*(void (**)(char *, void *, uint64_t))(v86 + 16))(v85, v15, v83);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v87, v85, v83);
    BOOL v88 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v84 + 16))(v84, v88);

    (*(void (**)(void *, uint64_t))(v86 + 8))(v15, v83);
    goto LABEL_19;
  }
  swift_release();
  unsigned int v62 = [v29 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v63 = sub_100096F64(v61, (uint64_t)qword_1002A9E40);
  os_log_type_t v64 = *(char **)(v115 + 16);
  uint64_t v105 = v63;
  uint64_t v109 = v115 + 16;
  os_log_type_t v101 = v64;
  ((void (*)(char *))v64)(v110);
  BOOL v65 = v114;
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.default.getter();
  BOOL v68 = os_log_type_enabled(v66, v67);
  LODWORD(v111) = v62;
  if (v68)
  {
    uint64_t v69 = swift_slowAlloc();
    id v70 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v69 = 67109378;
    LODWORD(v117) = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v69 + 8) = 2112;
    *(void *)&long long v117 = v65;
    uint64_t v71 = v65;
    uint64_t v72 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v70 = v106;

    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Client %d registering for tracking states for %@", (uint8_t *)v69, 0x12u);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    uint64_t v61 = v112;
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v73 = v104;
    uint64_t v74 = v113;
  }
  else
  {

    uint64_t v66 = v65;
    uint64_t v73 = v104;
    uint64_t v74 = v113;
    uint64_t v71 = v65;
  }
  uint64_t v89 = v107;

  uint64_t v90 = *(void (**)(char *, uint64_t))(v115 + 8);
  v115 += 8;
  v90(v110, v61);
  id v91 = v103;
  id v92 = v103;
  char v93 = sub_100190B64((int)v111, v91, v71);

  if ((v93 & 1) == 0)
  {
    ((void (*)(char *, uint64_t, uint64_t))v101)(v108, v105, v61);
    unint64_t v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v96 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v96 = 0;
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "Failed adding client to client list", v96, 2u);
      uint64_t v89 = v107;
      swift_slowDealloc();
    }

    v90(v108, v61);
    *uint64_t v15 = 0xD00000000000001CLL;
    v15[1] = 0x80000001002372F0;
    uint64_t v97 = v102;
    (*(void (**)(void *, void, uint64_t))(v102 + 104))(v15, enum case for Errors.UnexpectedError(_:), v73);
    (*(void (**)(char *, void *, uint64_t))(v97 + 16))(v89, v15, v73);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v97 + 32))(v98, v89, v73);
    long long v99 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v74 + 16))(v74, v99);

    (*(void (**)(void *, uint64_t))(v97 + 8))(v15, v73);
    goto LABEL_19;
  }
  (*(void (**)(uint64_t, void))(v74 + 16))(v74, 0);
}

uint64_t sub_1001305EC(void *a1, uint64_t a2)
{
  uint64_t v86 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v82 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v78 - v7;
  uint64_t v9 = type metadata accessor for Errors();
  uint64_t v84 = *(void *)(v9 - 8);
  uint64_t v85 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v83 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char **)((char *)&v78 - v12);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v78 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v78 - v22;
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v55 = sub_100096F64(v14, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v23, v55, v14);
    os_log_type_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Client doesn't have camera TCC, rejecting XPC message", v58, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
    *uint64_t v13 = 0xD000000000000012;
    v13[1] = 0x8000000100237160;
    uint64_t v59 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_26;
  }
  if (!a1)
  {
    *uint64_t v13 = 0xD000000000000016;
    v13[1] = 0x8000000100237180;
    uint64_t v59 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_26:
    uint64_t v61 = v84;
    uint64_t v60 = v85;
    (*(void (**)(void *, void, uint64_t))(v84 + 104))(v13, *v59, v85);
    unsigned int v62 = v83;
    (*(void (**)(char *, void *, uint64_t))(v61 + 16))(v83, v13, v60);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v63, v62, v60);
    os_log_type_t v64 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v86 + 16))(v86, 0, v64);

LABEL_36:
    (*(void (**)(void *, uint64_t))(v61 + 8))(v13, v60);
    return swift_errorRelease();
  }
  uint64_t v24 = self;
  id v87 = a1;
  id v25 = [v24 currentConnection];
  if (!v25)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v65 = sub_100096F64(v14, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v65, v14);
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      BOOL v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed fetching current NSXPCConnection, cannot construct client", v68, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    *uint64_t v13 = 0xD000000000000017;
    v13[1] = 0x8000000100235620;
    uint64_t v61 = v84;
    uint64_t v60 = v85;
    (*(void (**)(void *, void, uint64_t))(v84 + 104))(v13, enum case for Errors.XPCNil(_:), v85);
    uint64_t v69 = v83;
    (*(void (**)(char *, void *, uint64_t))(v61 + 16))(v83, v13, v60);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v70, v69, v60);
    uint64_t v71 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v86 + 16))(v86, 0, v71);

    id v72 = v87;
    goto LABEL_35;
  }
  id v81 = v25;
  unsigned int v26 = [v25 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_100096F64(v14, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v21, v27, v14);
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    unsigned int v31 = v26;
    uint64_t v32 = v30;
    *(_DWORD *)uint64_t v30 = 67109120;
    LODWORD(v89) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Client %d requesting current tracking state data", v32, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v33 = &unk_1002B1000;
  unint64_t v34 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v80 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  uint64_t v35 = *(void **)&v34[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v36 = v34;
  id v37 = v35;
  OS_dispatch_semaphore.wait()();

  uint64_t v38 = &v36[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v39 = *(void *)v38;
  uint64_t v40 = *(void *)(v39 + 16);
  if (v40)
  {
    os_log_type_t v78 = v34;
    unint64_t v79 = v36;
    uint64_t v41 = v39 + 32;
    uint64_t v42 = (void (**)(char *, uint64_t))(v82 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v41, (uint64_t)v88);
      id v43 = *(id *)(*sub_1000A5DA4(v88, v88[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v43) = static UUID.== infix(_:_:)();
      uint64_t v44 = *v42;
      (*v42)(v6, v3);
      v44(v8, v3);
      if (v43) {
        break;
      }
      sub_100099BCC((uint64_t)v88);
      v41 += 40;
      if (!--v40)
      {
        swift_bridgeObjectRelease();
        id v33 = &unk_1002B1000;
        uint64_t v36 = v79;
        unint64_t v34 = v78;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    id v73 = *(id *)&v78[v80];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v88, (uint64_t)&v89);
    sub_100099BCC((uint64_t)v88);

    id v33 = (void *)&unk_1002B1000;
    if (!*((void *)&v90 + 1)) {
      goto LABEL_33;
    }
  }
  else
  {
LABEL_15:
    id v45 = *(id *)&v34[v80];
    OS_dispatch_semaphore.signal()();

    uint64_t v91 = 0;
    long long v89 = 0u;
    long long v90 = 0u;

    if (!*((void *)&v90 + 1))
    {
LABEL_33:
      sub_1000A61E4((uint64_t)&v89, (uint64_t *)&unk_1002AAA30);
      goto LABEL_34;
    }
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_34:
    *uint64_t v13 = 0xD000000000000011;
    v13[1] = 0x8000000100237330;
    uint64_t v61 = v84;
    uint64_t v60 = v85;
    (*(void (**)(void *, void, uint64_t))(v84 + 104))(v13, enum case for Errors.NotFound(_:), v85);
    uint64_t v74 = v83;
    (*(void (**)(char *, void *, uint64_t))(v61 + 16))(v83, v13, v60);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v75, v74, v60);
    uint64_t v76 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v86 + 16))(v86, 0, v76);

    id v72 = v81;
LABEL_35:

    goto LABEL_36;
  }
  swift_release();
  uint64_t v46 = v33[197];
  uint64_t v47 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v48 = *(os_unfair_lock_s **)(v46 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v48 + 4);
  swift_release();
  uint64_t v49 = *(void *)(v46 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummary);
  uint64_t v50 = *(os_unfair_lock_s **)(v46 + v47);
  swift_retain();
  swift_retain();
  os_unfair_lock_unlock(v50 + 4);
  swift_release();
  if (v49
    && (swift_retain(),
        uint64_t v51 = dispatch thunk of TrackingSummaryInternal.encode()(),
        unint64_t v53 = v52,
        swift_release(),
        v53 >> 60 != 15))
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    Class isa = 0;
    uint64_t v51 = 0;
    unint64_t v53 = 0xF000000000000000;
  }
  (*(void (**)(uint64_t, Class, void))(v86 + 16))(v86, isa, 0);

  swift_release();
  return sub_1000A9990(v51, v53);
}

void sub_1001311F4(void *a1, uint64_t a2)
{
  uint64_t v108 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v104 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v95 - v7;
  uint64_t v9 = type metadata accessor for Errors();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (void **)((char *)&v95 - v14);
  uint64_t v107 = type metadata accessor for Logger();
  uint64_t v110 = *(void *)(v107 - 8);
  uint64_t v16 = __chkstk_darwin(v107);
  uint64_t v106 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  id v103 = (char *)&v95 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v105 = (char *)&v95 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v95 - v23;
  __chkstk_darwin(v22);
  unsigned int v26 = (char *)&v95 - v25;
  if ((sub_1001151B4() & 1) == 0)
  {
    uint64_t v42 = v13;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v43 = v107;
    uint64_t v44 = sub_100096F64(v107, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v26, v44, v43);
    id v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v48 = v108;
    if (v47)
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Client doesn't have camera TCC, rejecting XPC message", v49, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v110 + 8))(v26, v43);
    *uint64_t v15 = 0xD000000000000012;
    v15[1] = 0x8000000100237160;
    (*(void (**)(void *, void, uint64_t))(v10 + 104))(v15, enum case for Errors.CameraTCCMissing(_:), v9);
    (*(void (**)(char *, void *, uint64_t))(v10 + 16))(v42, v15, v9);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v50, v42, v9);
    uint64_t v51 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v48 + 16))(v48, v51);
    goto LABEL_18;
  }
  if (!a1)
  {
    *uint64_t v15 = 0xD000000000000016;
    v15[1] = 0x8000000100237180;
    (*(void (**)(void *, void, uint64_t))(v10 + 104))(v15, enum case for Errors.NilParams(_:), v9);
    (*(void (**)(char *, void *, uint64_t))(v10 + 16))(v13, v15, v9);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v52, v13, v9);
    uint64_t v51 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v108 + 16))(v108, v51);
LABEL_18:

    (*(void (**)(void *, uint64_t))(v10 + 8))(v15, v9);
LABEL_19:
    swift_errorRelease();
    return;
  }
  uint64_t v102 = v13;
  uint64_t v27 = self;
  os_log_type_t v101 = a1;
  uint64_t v109 = a1;
  id v28 = [v27 currentConnection];
  if (!v28)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v53 = v107;
    uint64_t v54 = sub_100096F64(v107, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v24, v54, v53);
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      os_log_type_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Failed fetching current NSXPCConnection, cannot construct client", v57, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v110 + 8))(v24, v53);
    *uint64_t v15 = 0xD000000000000017;
    v15[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v10 + 104))(v15, enum case for Errors.XPCNil(_:), v9);
    uint64_t v58 = v102;
    (*(void (**)(char *, void *, uint64_t))(v10 + 16))(v102, v15, v9);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v59, v58, v9);
    uint64_t v51 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v108 + 16))(v108, v51);

    goto LABEL_18;
  }
  id v29 = v28;
  uint64_t v97 = v10;
  uint64_t v99 = v9;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v30 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v100 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  unsigned int v31 = *(void **)((char *)v30 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  uint64_t v32 = v30;
  id v33 = v31;
  OS_dispatch_semaphore.wait()();

  unint64_t v34 = &v32[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v35 = *(void *)v34;
  uint64_t v36 = *(void *)(*(void *)v34 + 16);
  id v98 = v29;
  if (v36)
  {
    os_log_type_t v95 = v30;
    uint64_t v96 = v32;
    uint64_t v37 = v35 + 32;
    uint64_t v38 = (void (**)(char *, uint64_t))(v104 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v37, (uint64_t)v111);
      id v39 = *(id *)(*sub_1000A5DA4(v111, v111[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v39) = static UUID.== infix(_:_:)();
      uint64_t v40 = *v38;
      (*v38)(v6, v3);
      v40(v8, v3);
      if (v39) {
        break;
      }
      sub_100099BCC((uint64_t)v111);
      v37 += 40;
      if (!--v36)
      {
        swift_bridgeObjectRelease();
        id v29 = v98;
        uint64_t v32 = v96;
        uint64_t v30 = v95;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    id v60 = *(id *)&v100[(void)v95];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v111, (uint64_t)&v112);
    sub_100099BCC((uint64_t)v111);

    id v29 = v98;
  }
  else
  {
LABEL_11:
    id v41 = *(id *)&v100[(void)v30];
    OS_dispatch_semaphore.signal()();

    uint64_t v114 = 0;
    long long v112 = 0u;
    long long v113 = 0u;
  }
  uint64_t v61 = v107;
  if (!*((void *)&v113 + 1))
  {
    sub_1000A61E4((uint64_t)&v112, (uint64_t *)&unk_1002AAA30);
    goto LABEL_33;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_33:
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v72 = sub_100096F64(v61, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v106, v72, v61);
    id v73 = v109;
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      uint64_t v109 = v73;
      os_log_type_t v78 = (void *)v77;
      *(_DWORD *)uint64_t v76 = 138412290;
      *(void *)&long long v112 = v109;
      unint64_t v79 = v109;
      uint64_t v61 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v78 = v101;

      _os_log_impl((void *)&_mh_execute_header, v74, v75, "No matching record, can't lookup %@", v76, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      id v73 = v109;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v74 = v73;
    }
    uint64_t v80 = v99;
    uint64_t v81 = v108;
    uint64_t v82 = v102;

    (*(void (**)(char *, uint64_t))(v110 + 8))(v106, v61);
    *uint64_t v15 = 0xD000000000000015;
    v15[1] = 0x8000000100237310;
    uint64_t v83 = v97;
    (*(void (**)(void *, void, uint64_t))(v97 + 104))(v15, enum case for Errors.AccessoryNotReachable(_:), v80);
    (*(void (**)(char *, void *, uint64_t))(v83 + 16))(v82, v15, v80);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v83 + 32))(v84, v82, v80);
    uint64_t v85 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v81 + 16))(v81, v85);

    goto LABEL_39;
  }
  swift_release();
  int v62 = [v29 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v63 = sub_100096F64(v61, (uint64_t)qword_1002A9E40);
  os_log_type_t v64 = *(char **)(v110 + 16);
  uint64_t v104 = v63;
  uint64_t v106 = (char *)(v110 + 16);
  uint64_t v100 = v64;
  ((void (*)(char *))v64)(v105);
  uint64_t v65 = v109;
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.default.getter();
  BOOL v68 = os_log_type_enabled(v66, v67);
  uint64_t v109 = v65;
  if (v68)
  {
    uint64_t v69 = swift_slowAlloc();
    uint64_t v70 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v69 = 67109378;
    LODWORD(v112) = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v69 + 8) = 2112;
    *(void *)&long long v112 = v65;
    uint64_t v71 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v70 = v101;

    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Client %d de-registering for tracking state data for %@", (uint8_t *)v69, 0x12u);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    uint64_t v61 = v107;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v66 = v65;
  }
  uint64_t v80 = v99;
  uint64_t v86 = v108;
  id v87 = v102;

  BOOL v88 = *(void (**)(char *, uint64_t))(v110 + 8);
  v88(v105, v61);
  id v89 = v98;
  char v90 = sub_1001A4740(v62);

  if ((v90 & 1) == 0)
  {
    ((void (*)(char *, uint64_t, uint64_t))v100)(v103, v104, v61);
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v91, v92))
    {
      char v93 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v93 = 0;
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "Failed removing client from client list", v93, 2u);
      id v87 = v102;
      swift_slowDealloc();
    }

    v88(v103, v61);
    *uint64_t v15 = 0xD000000000000020;
    v15[1] = 0x80000001002371A0;
    uint64_t v83 = v97;
    (*(void (**)(void *, void, uint64_t))(v97 + 104))(v15, enum case for Errors.UnexpectedError(_:), v80);
    (*(void (**)(char *, void *, uint64_t))(v83 + 16))(v87, v15, v80);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v83 + 32))(v94, v87, v80);
    uint64_t v85 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v86 + 16))(v86, v85);

LABEL_39:
    (*(void (**)(void *, uint64_t))(v83 + 8))(v15, v80);
    goto LABEL_19;
  }
  (*(void (**)(uint64_t, void))(v86 + 16))(v86, 0);
}

uint64_t sub_100132328(void *a1, void *a2, void (**a3)(const void *, void, void *))
{
  uint64_t v97 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v98 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v91 - v9;
  uint64_t v11 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v11 - 8);
  uint64_t v96 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Errors();
  uint64_t v103 = *(void *)(v13 - 8);
  uint64_t v104 = v13;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v99 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  os_log_type_t v101 = (uint64_t *)((char *)&v91 - v16);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v91 - v23;
  __chkstk_darwin(v22);
  unsigned int v26 = (char *)&v91 - v25;
  uint64_t v100 = swift_allocObject();
  *(void *)(v100 + 16) = a3;
  uint64_t v102 = a3;
  _Block_copy(a3);
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v50 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v26, v50, v17);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Client doesn't have camera TCC, rejecting XPC message", v53, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v26, v17);
    uint64_t v54 = v101;
    *os_log_type_t v101 = 0xD000000000000012;
    v54[1] = 0x8000000100237160;
    uint64_t v55 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_22;
  }
  if (!a1)
  {
    uint64_t v54 = v101;
    *os_log_type_t v101 = 0xD000000000000016;
    v54[1] = 0x8000000100237180;
    uint64_t v55 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_22:
    uint64_t v57 = v103;
    uint64_t v56 = v104;
    (*(void (**)(void *, void, uint64_t))(v103 + 104))(v54, *v55, v104);
    uint64_t v58 = v99;
    (*(void (**)(char *, void *, uint64_t))(v57 + 16))(v99, v54, v56);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v59, v58, v56);
    id v60 = (void *)_convertErrorToNSError(_:)();
    v102[2](v102, 0, v60);

LABEL_23:
    (*(void (**)(void *, uint64_t))(v57 + 8))(v54, v56);
    swift_errorRelease();
    return swift_release();
  }
  uint64_t v27 = self;
  id v28 = a1;
  id v29 = [v27 currentConnection];
  if (!v29)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    int v62 = v28;
    uint64_t v63 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v63, v17);
    os_log_type_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed fetching current NSXPCConnection, cannot construct client", v66, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    uint64_t v54 = v101;
    *os_log_type_t v101 = 0xD000000000000017;
    v54[1] = 0x8000000100235620;
    uint64_t v57 = v103;
    uint64_t v56 = v104;
    (*(void (**)(void *, void, uint64_t))(v103 + 104))(v54, enum case for Errors.XPCNil(_:), v104);
    os_log_type_t v67 = v99;
    (*(void (**)(char *, void *, uint64_t))(v57 + 16))(v99, v54, v56);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v68, v67, v56);
    uint64_t v69 = (void *)_convertErrorToNSError(_:)();
    v102[2](v102, 0, v69);

    goto LABEL_23;
  }
  id v95 = v29;
  unsigned int v30 = [v29 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v31 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v24, v31, v17);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    unint64_t v34 = (uint8_t *)swift_slowAlloc();
    unsigned int v35 = v30;
    uint64_t v36 = v34;
    *(_DWORD *)unint64_t v34 = 67109120;
    LODWORD(v106) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Client %d requesting current system event data", v36, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v37 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v38 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v39 = *(void **)&v37[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v40 = v37;
  id v41 = v39;
  OS_dispatch_semaphore.wait()();

  uint64_t v42 = &v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v43 = *(void *)v42;
  uint64_t v44 = *(void *)(*(void *)v42 + 16);
  if (v44)
  {
    uint64_t v92 = v38;
    char v93 = v37;
    uint64_t v94 = v40;
    uint64_t v45 = v43 + 32;
    os_log_type_t v46 = (void (**)(char *, uint64_t))(v98 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v45, (uint64_t)v105);
      id v47 = *(id *)(*sub_1000A5DA4(v105, v105[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v47) = static UUID.== infix(_:_:)();
      uint64_t v48 = *v46;
      (*v46)(v8, v5);
      v48(v10, v5);
      if (v47) {
        break;
      }
      sub_100099BCC((uint64_t)v105);
      v45 += 40;
      if (!--v44)
      {
        swift_bridgeObjectRelease();
        uint64_t v40 = v94;
        uint64_t v37 = v93;
        uint64_t v38 = v92;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    id v70 = *(id *)&v93[v92];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v105, (uint64_t)&v106);
    sub_100099BCC((uint64_t)v105);
  }
  else
  {
LABEL_15:
    id v49 = *(id *)&v37[v38];
    OS_dispatch_semaphore.signal()();

    uint64_t v108 = 0;
    long long v106 = 0u;
    long long v107 = 0u;
  }
  uint64_t v71 = v100;
  if (*((void *)&v107 + 1))
  {
    sub_1000992E8(&qword_1002A82E0);
    type metadata accessor for DaemonAccessory();
    if (swift_dynamicCast())
    {
      uint64_t v72 = v105[0];
      uint64_t v73 = type metadata accessor for TaskPriority();
      uint64_t v74 = (uint64_t)v96;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v96, 1, 1, v73);
      os_log_type_t v75 = (void *)swift_allocObject();
      v75[2] = 0;
      v75[3] = 0;
      uint64_t v76 = v97;
      v75[4] = v97;
      v75[5] = v72;
      v75[6] = sub_1000A67E4;
      v75[7] = v71;
      id v77 = v76;
      swift_retain();
      sub_1001BC3A0(v74, (uint64_t)&unk_1002AA040, (uint64_t)v75);
      swift_release();
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&v106, (uint64_t *)&unk_1002AAA30);
  }
  *(void *)&long long v106 = 0;
  *((void *)&v106 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  *(void *)&long long v106 = 0xD000000000000020;
  *((void *)&v106 + 1) = 0x80000001002371F0;
  id v78 = [v28 description];
  uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v81 = v80;

  v82._countAndFlagsBits = v79;
  v82._object = v81;
  String.append(_:)(v82);
  swift_bridgeObjectRelease();
  uint64_t v83 = *((void *)&v106 + 1);
  uint64_t v84 = v28;
  uint64_t v85 = v101;
  *os_log_type_t v101 = v106;
  v85[1] = v83;
  uint64_t v87 = v103;
  uint64_t v86 = v104;
  (*(void (**)(void *, void, uint64_t))(v103 + 104))(v85, enum case for Errors.NotFound(_:), v104);
  BOOL v88 = v99;
  (*(void (**)(char *, void *, uint64_t))(v87 + 16))(v99, v85, v86);
  sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
  swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v87 + 32))(v89, v88, v86);
  char v90 = (void *)_convertErrorToNSError(_:)();
  v102[2](v102, 0, v90);

  (*(void (**)(void *, uint64_t))(v87 + 8))(v85, v86);
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_100133024(uint64_t a1)
{
  v1[4] = a1;
  uint64_t v2 = type metadata accessor for Logger();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001330E4, 0, 0);
}

uint64_t sub_1001330E4()
{
  uint64_t v1 = *(void **)(v0[4] + 32);
  v0[8] = v1;
  if (v1)
  {
    self;
    uint64_t v2 = swift_dynamicCastObjCClass();
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      uint64_t v4 = v1;
      id v5 = [v3 primaryAccessory];
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v31 = v4;
        uint64_t v7 = self;
        sub_1000992E8((uint64_t *)&unk_1002A9F50);
        uint64_t v8 = swift_allocObject();
        *(_OWORD *)(v8 + 16) = xmmword_100240BE0;
        *(void *)(v8 + 56) = &type metadata for UInt32;
        *(void *)(v8 + 64) = &protocol witness table for UInt32;
        *(_DWORD *)(v8 + 32) = 266;
        String.init(format:_:)();
        NSString v9 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v10 = [v7 UUIDWithString:v9];

        NSString v11 = [v10 UUIDString];
        if (!v11)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v11 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_100240BE0;
        *(void *)(v12 + 56) = &type metadata for UInt32;
        *(void *)(v12 + 64) = &protocol witness table for UInt32;
        *(_DWORD *)(v12 + 32) = 256;
        String.init(format:_:)();
        NSString v13 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v14 = [v7 UUIDWithString:v13];

        NSString v15 = [v14 UUIDString];
        if (!v15)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v15 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        id v16 = [v6 characteristicOfType:v11 serviceType:v15];
        v0[9] = v16;

        uint64_t v4 = v31;
        if (v16)
        {
          uint64_t v17 = v0[4];
          uint64_t v18 = (void *)swift_task_alloc();
          v0[10] = v18;
          v18[2] = v3;
          v18[3] = v16;
          v18[4] = v17;
          uint64_t v19 = (void *)swift_task_alloc();
          v0[11] = v19;
          uint64_t v20 = sub_1000992E8(&qword_1002AA050);
          void *v19 = v0;
          v19[1] = sub_1001335A4;
          return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000017, 0x8000000100237240, sub_10013506C, v18, v20);
        }
      }
      if (qword_1002A7B60 != -1) {
        swift_once();
      }
      uint64_t v21 = v0[6];
      uint64_t v22 = v0[7];
      uint64_t v23 = v0[5];
      uint64_t v24 = sub_100096F64(v23, (uint64_t)qword_1002A9E40);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v22, v24, v23);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Accessory does not contain a System Events characteristic!", v27, 2u);
        swift_slowDealloc();
        id v28 = v25;
      }
      else
      {
        id v28 = v4;
        uint64_t v4 = v25;
      }

      (*(void (**)(void, void))(v0[6] + 8))(v0[7], v0[5]);
    }
  }
  swift_task_dealloc();
  id v29 = (uint64_t (*)(void, unint64_t))v0[1];
  return v29(0, 0xF000000000000000);
}

uint64_t sub_1001335A4()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10013373C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1001336C0;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_1001336C0()
{
  uint64_t v1 = *(void **)(v0 + 64);

  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v4(v3, v2);
}

uint64_t sub_10013373C()
{
  uint64_t v1 = *(void **)(v0 + 64);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1001337C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t (*a6)(void, void *), const char *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v77 = a8;
  id v78 = a6;
  os_log_type_t v75 = a7;
  uint64_t v76 = a5;
  uint64_t v82 = a2;
  uint64_t v12 = type metadata accessor for Errors();
  uint64_t v81 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v80 = (char *)v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v16 = (void *)((char *)v66 - v15);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v79 = (char *)v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)v66 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  os_log_type_t v26 = (char *)v66 - v25;
  __chkstk_darwin(v24);
  id v28 = (char *)v66 - v27;
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v43 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v28, v43, v17);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      os_log_type_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Client doesn't have camera TCC, rejecting XPC message", v46, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v28, v17);
    *id v16 = 0xD000000000000012;
    v16[1] = 0x8000000100237160;
    id v47 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_14;
  }
  if (!a1)
  {
    *id v16 = a3;
    v16[1] = a4;
    id v47 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_14:
    uint64_t v48 = v81;
    (*(void (**)(void *, void, uint64_t))(v81 + 104))(v16, *v47, v12);
    id v49 = v80;
    (*(void (**)(char *, void *, uint64_t))(v48 + 16))(v80, v16, v12);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v50, v49, v12);
    uint64_t v51 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v82 + 16))(v82, v51);
LABEL_15:

    (*(void (**)(void *, uint64_t))(v48 + 8))(v16, v12);
    swift_errorRelease();
    return;
  }
  id v29 = self;
  id v30 = a1;
  id v31 = [v29 currentConnection];
  if (!v31)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v52 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v23, v52, v17);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed fetching current NSXPCConnection, cannot construct client", v55, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v17);
    *id v16 = 0xD000000000000017;
    v16[1] = 0x8000000100235620;
    uint64_t v48 = v81;
    (*(void (**)(void *, void, uint64_t))(v81 + 104))(v16, enum case for Errors.XPCNil(_:), v12);
    uint64_t v56 = v80;
    (*(void (**)(char *, void *, uint64_t))(v48 + 16))(v80, v16, v12);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v57, v56, v12);
    uint64_t v51 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v82 + 16))(v82, v51);

    goto LABEL_15;
  }
  uint64_t v32 = v31;
  unsigned int v33 = [v31 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v34 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
  unsigned int v35 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v71 = v34;
  uint64_t v72 = v18 + 16;
  id v70 = v35;
  ((void (*)(char *))v35)(v26);
  uint64_t v36 = v30;
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  int v69 = v38;
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v74 = v36;
  unsigned int v73 = v33;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v68 = v32;
    uint64_t v41 = v40;
    os_log_type_t v67 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 67109378;
    unsigned int v84 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + 8) = 2112;
    v66[1] = v41 + 18;
    v66[2] = v41 + 10;
    uint64_t v83 = v36;
    uint64_t v42 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v67 = a1;

    uint64_t v36 = v74;
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v69, v76, (uint8_t *)v41, 0x12u);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v32 = v68;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v37 = v36;
  }

  uint64_t v58 = *(void (**)(char *, uint64_t))(v18 + 8);
  v58(v26, v17);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v59 = v32;
  char v60 = v78(v73, v32);

  if ((v60 & 1) == 0)
  {
    v70(v79, v71, v17);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, v75, v63, 2u);
      swift_slowDealloc();
    }

    v58(v79, v17);
    *id v16 = v77;
    v16[1] = a9;
    uint64_t v48 = v81;
    (*(void (**)(void *, void, uint64_t))(v81 + 104))(v16, enum case for Errors.UnexpectedError(_:), v12);
    os_log_type_t v64 = v80;
    (*(void (**)(char *, void *, uint64_t))(v48 + 16))(v80, v16, v12);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v65, v64, v12);
    uint64_t v51 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v82 + 16))(v82, v51);

    goto LABEL_15;
  }
  (*(void (**)(uint64_t, void))(v82 + 16))(v82, 0);
}

uint64_t sub_1001341C0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v66 = [a1 processIdentifier];
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [a1 valueForEntitlement:v8];

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long aBlock = 0u;
    long long v70 = 0u;
  }
  sub_1000A5BE8((uint64_t)&aBlock, (uint64_t)v74);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1002B1628;
  uint64_t v67 = sub_10019AE8C(a1);
  uint64_t v12 = v11;
  uint64_t v65 = v7;
  if (v11)
  {
    uint64_t v13 = v4;
    uint64_t v14 = v5;
    uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    id v16 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v16 + 4);
    swift_release();
    uint64_t v17 = (void *)(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps);
    swift_beginAccess();
    id v18 = a1;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v73[0] = *v17;
    *uint64_t v17 = 0x8000000000000000;
    sub_1001F5BD8((uint64_t)v18, v67, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v17 = v73[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v20 = *(os_unfair_lock_s **)(v10 + v15);
    uint64_t v5 = v14;
    uint64_t v4 = v13;
    uint64_t v7 = v65;
    swift_retain();
    os_unfair_lock_unlock(v20 + 4);
    swift_release();
  }
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  os_log_type_t v64 = a1;
  uint64_t v21 = sub_100096F64(v4, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v21, v4);
  sub_1000B9BD4((uint64_t)v74, (uint64_t)&aBlock, &qword_1002AA5F0);
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v63 = v2;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 67109634;
    LODWORD(v73[0]) = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 8) = 2080;
    sub_1000B9BD4((uint64_t)&aBlock, (uint64_t)v73, &qword_1002AA5F0);
    sub_1000992E8(&qword_1002AA5F0);
    uint64_t v26 = String.init<A>(describing:)();
    v73[0] = sub_1000993AC(v26, v27, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A61E4((uint64_t)&aBlock, &qword_1002AA5F0);
    *(_WORD *)(v25 + 18) = 2080;
    v73[0] = v67;
    v73[1] = v12;
    swift_bridgeObjectRetain();
    sub_1000992E8((uint64_t *)&unk_1002A82C0);
    uint64_t v28 = String.init<A>(describing:)();
    v73[0] = sub_1000993AC(v28, v29, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "new connection from pid %d, appID entitlement %s, appID %s", (uint8_t *)v25, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v65, v4);
  }
  else
  {
    sub_1000A61E4((uint64_t)&aBlock, &qword_1002AA5F0);

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v65 = (char *)self;
  id v62 = [v65 interfaceWithProtocol:&OBJC_PROTOCOL____TtP11DockKitCore18DockDaemonProtocol_];
  uint64_t v30 = swift_allocObject();
  id v31 = v64;
  swift_unknownObjectWeakInit();
  sub_1000B9BD4((uint64_t)v74, (uint64_t)v73, &qword_1002AA5F0);
  uint64_t v32 = swift_allocObject();
  unsigned int v33 = v66;
  *(_DWORD *)(v32 + 16) = v66;
  sub_1000A5BE8((uint64_t)v73, v32 + 24);
  uint64_t v34 = v67;
  *(void *)(v32 + 56) = v30;
  *(void *)(v32 + 64) = v34;
  *(void *)(v32 + 72) = v12;
  uint64_t v71 = sub_100134DA4;
  uint64_t v72 = v32;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v70 = sub_1001468DC;
  *((void *)&v70 + 1) = &unk_1002775C0;
  unsigned int v35 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [v31 setInvalidationHandler:v35];
  _Block_release(v35);
  sub_1000B9BD4((uint64_t)v74, (uint64_t)v73, &qword_1002AA5F0);
  uint64_t v36 = swift_allocObject();
  *(_DWORD *)(v36 + 16) = v33;
  sub_1000A5BE8((uint64_t)v73, v36 + 24);
  *(void *)(v36 + 56) = v30;
  *(void *)(v36 + 64) = v34;
  *(void *)(v36 + 72) = v12;
  uint64_t v71 = sub_100134E10;
  uint64_t v72 = v36;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v70 = sub_1001468DC;
  *((void *)&v70 + 1) = &unk_100277610;
  uint64_t v37 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [v31 setInterruptionHandler:v37];
  _Block_release(v37);
  sub_100099C7C(0, (unint64_t *)&unk_1002A9F70);
  sub_1000992E8(&qword_1002A97F8);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_100241E60;
  uint64_t v39 = type metadata accessor for SensorButtonState();
  *(void *)(v38 + 56) = sub_1000992E8(&qword_1002A9F80);
  *(void *)(v38 + 32) = v39;
  uint64_t v40 = type metadata accessor for SensorLEDState();
  *(void *)(v38 + 88) = sub_1000992E8(&qword_1002A9F88);
  *(void *)(v38 + 64) = v40;
  uint64_t v41 = type metadata accessor for DockCoreInfo();
  *(void *)(v38 + 120) = sub_1000992E8(&qword_1002A9F90);
  *(void *)(v38 + 96) = v41;
  uint64_t v42 = sub_100099C7C(0, &qword_1002A9F98);
  *(void *)(v38 + 152) = sub_1000992E8((uint64_t *)&unk_1002A9FA0);
  *(void *)(v38 + 128) = v42;
  uint64_t v43 = sub_100099C7C(0, &qword_1002A8380);
  *(void *)(v38 + 184) = sub_1000992E8(&qword_1002A9FB0);
  *(void *)(v38 + 160) = v43;
  uint64_t v44 = sub_100099C7C(0, &qword_1002A9FB8);
  *(void *)(v38 + 216) = sub_1000992E8(&qword_1002A9FC0);
  *(void *)(v38 + 192) = v44;
  uint64_t v45 = sub_100099C7C(0, (unint64_t *)&qword_1002A9FC8);
  *(void *)(v38 + 248) = sub_1000992E8(&qword_1002A9FD0);
  *(void *)(v38 + 224) = v45;
  uint64_t v46 = sub_100099C7C(0, &qword_1002A9FD8);
  *(void *)(v38 + 280) = sub_1000992E8(&qword_1002A9FE0);
  *(void *)(v38 + 256) = v46;
  uint64_t v47 = sub_100099C7C(0, &qword_1002A9FE8);
  *(void *)(v38 + 312) = sub_1000992E8(&qword_1002A9FF0);
  *(void *)(v38 + 288) = v47;
  uint64_t v48 = sub_100099C7C(0, &qword_1002A9FF8);
  *(void *)(v38 + 344) = sub_1000992E8((uint64_t *)&unk_1002AA000);
  *(void *)(v38 + 320) = v48;
  uint64_t v49 = sub_100099C7C(0, (unint64_t *)&qword_1002A97C8);
  *(void *)(v38 + 376) = sub_1000992E8(&qword_1002AA010);
  *(void *)(v38 + 352) = v49;
  uint64_t v50 = type metadata accessor for SensorTrackerState();
  *(void *)(v38 + 408) = sub_1000992E8(&qword_1002AA018);
  *(void *)(v38 + 384) = v50;
  uint64_t v51 = type metadata accessor for CameraSessionInformation();
  *(void *)(v38 + 440) = sub_1000992E8(&qword_1002AA020);
  *(void *)(v38 + 416) = v51;
  uint64_t v52 = NSSet.init(objects:)();
  *(void *)&long long aBlock = 0;
  uint64_t result = static Set._forceBridgeFromObjectiveC(_:result:)();
  if ((void)aBlock)
  {

    Class isa = Set._bridgeToObjectiveC()().super.isa;
    id v55 = v62;
    [v62 setClasses:isa forSelector:"setSensorStatesWithInfo:system:sensors:states:completion:" argumentIndex:0 ofReply:0];

    Class v56 = Set._bridgeToObjectiveC()().super.isa;
    [v55 setClasses:v56 forSelector:"setSensorStatesWithInfo:system:sensors:states:completion:" argumentIndex:1 ofReply:0];

    Class v57 = Set._bridgeToObjectiveC()().super.isa;
    [v55 setClasses:v57 forSelector:"setSensorStatesWithInfo:system:sensors:states:completion:" argumentIndex:2 ofReply:0];

    Class v58 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v55 setClasses:v58 forSelector:"setSensorStatesWithInfo:system:sensors:states:completion:" argumentIndex:3 ofReply:0];

    [v31 setExportedInterface:v55];
    id v59 = [objc_allocWithZone((Class)type metadata accessor for dockaccessoryd()) init];
    v59[OBJC_IVAR____TtC14dockaccessoryd14dockaccessoryd_debugAllowed] = *(unsigned char *)(v63
                                                                                  + OBJC_IVAR____TtC14dockaccessoryd15ServiceDelegate_debugAllowed);
    [v31 setExportedObject:v59];
    id v60 = [v65 interfaceWithProtocol:&OBJC_PROTOCOL____TtP11DockKitCore18DockClientProtocol_];
    [v31 setRemoteObjectInterface:v60];
    [v31 resume];

    sub_1000A61E4((uint64_t)v74, &qword_1002AA5F0);
    swift_release();
    return 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100134D68()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100134DA4()
{
  return sub_100134E28((uint64_t (*)(void, uint64_t, void, void, void))sub_1001129D0);
}

uint64_t sub_100134DC0()
{
  if (*(void *)(v0 + 48)) {
    sub_100099BCC(v0 + 24);
  }
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100134E10()
{
  return sub_100134E28((uint64_t (*)(void, uint64_t, void, void, void))sub_100113064);
}

uint64_t sub_100134E28(uint64_t (*a1)(void, uint64_t, void, void, void))
{
  return a1(*(unsigned int *)(v1 + 16), v1 + 24, *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t sub_100134E44()
{
  return sub_1001AF980(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

uint64_t sub_100134E64(uint64_t a1)
{
  return sub_1001B0584(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100134E80()
{
  return _swift_deallocObject(v0, 20, 7);
}

unint64_t sub_100134E90()
{
  return sub_10010D824(*(_DWORD *)(v0 + 16), 0);
}

uint64_t sub_100134EB4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000A69C4;
  v3[2] = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10010D4C0;
  return sub_1001A80AC();
}

uint64_t sub_100134F98(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1000A5ED8;
  return sub_1001114B8(a1, v4, v5, v6, v7, v9, v8);
}

void sub_10013506C(uint64_t a1)
{
  sub_100111ABC(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100135078()
{
  uint64_t v1 = sub_1000992E8(&qword_1002AA058);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10013510C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_1000992E8(&qword_1002AA058) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100111E60(a1, a2, v6);
}

uint64_t sub_100135190()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001351C8(uint64_t a1, uint64_t a2)
{
  sub_100111264(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1001351D4()
{
  swift_unknownObjectRelease();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100135224(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1000A69C4;
  return sub_10011095C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1001352F8(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(v2 + 16) + 16))(*(void *)(v2 + 16), a1 & 1, a2);
}

uint64_t sub_100135314()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013534C(unsigned __int8 *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_100135380()
{
  return sub_100110010(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void, void *))(v0 + 32), *(void *)(v0 + 40), (uint64_t (*)(uint64_t, uint64_t))sub_100193CD8, "ROI not completed after 1 sec, expiring", 0xD000000000000015, 0x80000001002373C0);
}

uint64_t sub_1001353D8()
{
  return sub_100110010(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void, void *))(v0 + 32), *(void *)(v0 + 40), (uint64_t (*)(uint64_t, uint64_t))sub_100193B84, "subject selection not completed after 1 sec, expiring", 0xD00000000000001BLL, 0x8000000100237400);
}

uint64_t sub_100135430()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100135474(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000A69C4;
  return sub_10010E21C(a1, v4, v5, v6);
}

uint64_t sub_100135528()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100135578(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10010E574(a1, a2, a3, *(void **)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void **)(v3 + 40), *(_DWORD *)(v3 + 48), *(void *)(v3 + 56));
}

uint64_t sub_1001355AC()
{
  return sub_1001AF878(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1001355D4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100135614(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000A69C4;
  v3[2] = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10010DF88;
  return sub_1001A80AC();
}

void sub_1001356F4(uint64_t a1, void *a2, uint64_t a3)
{
  sub_1001085F8(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1001356FC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10013574C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1000A69C4;
  return sub_10010B664(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100135820()
{
  uint64_t v1 = type metadata accessor for TrajectoryCommand();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

uint64_t sub_100135940(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for TrajectoryCommand() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v4;
  uint64_t v10 = *(void *)((char *)v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *(void *)((char *)v1 + v5);
  uint64_t v12 = *(void *)((char *)v1 + v5 + 8);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_1000A5ED8;
  return sub_10010A2F4(a1, v6, v7, v8, v9, v11, v12, v10);
}

uint64_t sub_100135AB0(uint64_t a1)
{
  return sub_1001AE69C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100135ABC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100135AFC(void *a1)
{
  return sub_10010AB4C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100135B08()
{
  return sub_1001AFBA0(v0[2], v0[3], v0[4]);
}

uint64_t sub_100135B28()
{
  return _swift_deallocObject(v0, 20, 7);
}

unint64_t sub_100135B38()
{
  return sub_10010D824(*(_DWORD *)(v0 + 16), 1);
}

uint64_t sub_100135B5C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100135BA4(uint64_t a1)
{
  sub_100109410(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(const char **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100135BB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100135C58(uint64_t a1)
{
  return sub_100134E64(a1);
}

uint64_t sub_100135C9C()
{
  return sub_100134E44();
}

uint64_t sub_100135CB8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002AA110);
  sub_100096F64(v0, (uint64_t)qword_1002AA110);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100135D38()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DBTable()
{
  return self;
}

uint64_t sub_100135D94()
{
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v2 = (sqlite3_stmt *(*)())Strong;
  if (!Strong) {
    goto LABEL_3;
  }
  uint64_t v3 = *(id *)(Strong + 16);
  swift_release();
  uint64_t v4 = swift_allocObject();
  uint64_t v2 = sub_100138084;
  *(void *)(v4 + 16) = sub_100138084;
  *(void *)(v4 + 24) = v0;
  v7[4] = sub_1001380A4;
  v7[5] = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_1001E1D18;
  v7[3] = &unk_100277C00;
  unint64_t v5 = _Block_copy(v7);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v5);

  _Block_release(v5);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    swift_weakDestroy();
    sub_1000BF118((uint64_t)v2);
    return swift_deallocClassInstance();
  }
  return result;
}

uint64_t type metadata accessor for DBStatement()
{
  return self;
}

unint64_t sub_100135F48(int a1)
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0x200000000;
  }
  if (!*(void *)(v1 + 16))
  {
    swift_release();
    return 0x200000001;
  }
  if (*(unsigned char *)(Strong + 24) != 1)
  {
    swift_release();
    return 0x200000000;
  }
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  if (v5 == a1) {
    return *(void *)(v1 + 16);
  }
  else {
    return v5 | (unint64_t)&_mh_execute_header;
  }
}

uint64_t sub_10013602C(uint64_t a1, void *a2)
{
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  *(unsigned char *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  *(void *)(v2 + 56) = _swiftEmptyArrayStorage;
  unint64_t v13 = sub_1000B8610();
  uint64_t v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)0xD000000000000019;
  unint64_t v16 = 0x8000000100237EC0;
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x65756575712ELL;
  v11._object = (void *)0xE600000000000000;
  String.append(_:)(v11);
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = _swiftEmptyArrayStorage;
  sub_1000CC1E4();
  sub_1000992E8(&qword_1002A9000);
  sub_1000CC23C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v14);
  *(void *)(v2 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v2;
}

uint64_t sub_1001362A4()
{
  sub_1001376E0();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Database()
{
  return self;
}

uint64_t sub_100136314()
{
  type metadata accessor for Database();
  swift_allocObject();
  uint64_t result = sub_10013602C(0x726F737365636361, (void *)0xEB00000000736569);
  qword_1002B14D0 = result;
  return result;
}

uint64_t sub_10013636C()
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(186);
  v6._object = (void *)0x8000000100237DA0;
  v6._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x7265687069726550;
  v7._object = (void *)0xEB00000000736C61;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xD00000000000009DLL;
  v8._object = (void *)0x8000000100237DC0;
  String.append(_:)(v8);
  sub_100137DC0(v16, v17, 0);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v1)
  {
    type metadata accessor for DBTable();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = 0x7265687069726550;
    *(void *)(v10 + 24) = 0xEB00000000736C61;
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v0 + 56) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 56) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    if (qword_1002A7B68 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_100096F64(v2, (uint64_t)qword_1002AA110);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v11, v2);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v15 = v3;
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v18 = sub_1000993AC(0x7265687069726550, 0xEB00000000736C61, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Successfully created table: %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v5, v2);
    }
    else
    {

      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
  }
  return result;
}

uint64_t sub_100136708()
{
  uint64_t v2 = v0;
  unint64_t v27 = &off_1002748C8;
  type metadata accessor for DBStatement();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = 0;
  swift_weakInit();
  swift_weakAssign();
  swift_retain();
  uint64_t v4 = sub_1001379D0(0xD000000000000050, 0x8000000100237E60);
  swift_release();
  *(void *)(inited + 16) = v4;
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
LABEL_12:
    uint64_t v18 = 0;
    unint64_t v19 = 0x200000000;
    goto LABEL_19;
  }
  if (*(void *)(inited + 16))
  {
    if (*(unsigned char *)(Strong + 24) == 1)
    {
      OS_dispatch_queue.sync<A>(execute:)();
      swift_release();
      unsigned int v6 = aBlock;
      if (aBlock != 100)
      {
        uint64_t v18 = 0;
LABEL_18:
        unint64_t v19 = v6 | (unint64_t)&_mh_execute_header;
        goto LABEL_19;
      }
      uint64_t v7 = *(void *)(inited + 16);
      Swift::String v8 = *(NSObject **)(v2 + 16);
      uint64_t v9 = (void *)swift_allocObject();
      v9[2] = v7;
      v9[3] = v2;
      v9[4] = &v27;
      swift_retain();
      sub_1000BF118(0);
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = sub_100138114;
      *(void *)(v10 + 24) = v9;
      uint64_t v25 = sub_1001385D4;
      uint64_t v26 = v10;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v22 = 1107296256;
      os_log_type_t v23 = sub_1001E1D18;
      BOOL v24 = &unk_100277CC8;
      uint64_t v11 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      dispatch_sync(v8, v11);
      _Block_release(v11);
      LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v8 & 1) == 0)
      {
        while (1)
        {
          uint64_t v12 = swift_weakLoadStrong();
          if (!v12)
          {
            uint64_t v18 = sub_100138114;
            unint64_t v19 = 0x200000000;
            goto LABEL_19;
          }
          if (!*(void *)(inited + 16))
          {
            uint64_t v18 = sub_100138114;
            goto LABEL_14;
          }
          if ((*(unsigned char *)(v12 + 24) & 1) == 0)
          {
            uint64_t v18 = sub_100138114;
            goto LABEL_16;
          }
          OS_dispatch_queue.sync<A>(execute:)();
          swift_release();
          unsigned int v6 = aBlock;
          if (aBlock != 100) {
            break;
          }
          uint64_t v13 = *(void *)(inited + 16);
          uint64_t v14 = *(NSObject **)(v2 + 16);
          uint64_t v15 = (void *)swift_allocObject();
          v15[2] = v13;
          v15[3] = v2;
          v15[4] = &v27;
          swift_retain();
          sub_1000BF118((uint64_t)sub_100138114);
          uint64_t v16 = swift_allocObject();
          *(void *)(v16 + 16) = sub_100138114;
          *(void *)(v16 + 24) = v15;
          uint64_t v25 = sub_1001385D4;
          uint64_t v26 = v16;
          long long aBlock = _NSConcreteStackBlock;
          uint64_t v22 = 1107296256;
          os_log_type_t v23 = sub_1001E1D18;
          BOOL v24 = &unk_100277CC8;
          unint64_t v17 = _Block_copy(&aBlock);
          swift_retain();
          swift_release();
          dispatch_sync(v14, v17);
          _Block_release(v17);
          LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if (v14) {
            goto LABEL_11;
          }
        }
        uint64_t v18 = sub_100138114;
        goto LABEL_18;
      }
LABEL_11:
      __break(1u);
      goto LABEL_12;
    }
    uint64_t v18 = 0;
LABEL_16:
    swift_release();
    unint64_t v19 = 0x200000000;
  }
  else
  {
    uint64_t v18 = 0;
LABEL_14:
    swift_release();
    unint64_t v19 = 0x200000001;
  }
LABEL_19:
  LODWORD(aBlock) = v19;
  BYTE4(aBlock) = BYTE4(v19);
  sub_100137F94();
  swift_willThrowTypedImpl();
  if (v27[2] && (sub_10013636C(), v1))
  {
    swift_setDeallocating();
    sub_100135D94();
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  return sub_1000BF118((uint64_t)v18);
}

uint64_t sub_100136C04(sqlite3_stmt *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)sqlite3_column_text(a1, 0);
  if (result)
  {
    uint64_t v11 = String.init(cString:)();
    unint64_t v13 = v12;
    if (qword_1002A7B68 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_100096F64(v6, (uint64_t)qword_1002AA110);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v14, v6);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v22 = a2;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v24 = v11;
      uint64_t v18 = (uint8_t *)v17;
      v26[0] = swift_slowAlloc();
      uint64_t v23 = a3;
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v25 = sub_1000993AC(v24, v13, v26);
      a2 = v22;
      a3 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Found existing table: %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v11 = v24;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    type metadata accessor for DBTable();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v11;
    *(void *)(v19 + 24) = v13;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_100138130(a3, v11, v13);
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v21 = *(void *)(*(void *)a3 + 16);
    if (v21 < v20)
    {
      __break(1u);
    }
    else
    {
      sub_1001A499C(v20, v21);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100136F60()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v36 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  __chkstk_darwin(v2);
  uint64_t v38 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7B90 != -1) {
    swift_once();
  }
  sub_100151CA4((uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100099DB0((uint64_t)v10);
    sub_1000B8650();
    swift_allocError();
    *uint64_t v15 = 1;
    return swift_willThrow();
  }
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v35 = v11;
  v17(v14, v10, v11);
  uint64_t v18 = v0[6];
  long long aBlock = (void **)v0[5];
  uint64_t v40 = v18;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 6448174;
  v19._object = (void *)0xE300000000000000;
  String.append(_:)(v19);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v4);
  sub_1000E9828();
  URL.append<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v20 = swift_bridgeObjectRelease();
  int64_t v21 = v0[2];
  __chkstk_darwin(v20);
  *(&v35 - 2) = (uint64_t)v14;
  *(&v35 - 1) = (uint64_t)v1;
  OS_dispatch_queue.sync<A>(execute:)();
  int v22 = (int)aBlock;
  if (aBlock)
  {
    sub_100137F94();
    swift_allocError();
    *(_DWORD *)uint64_t v23 = v22;
    *(unsigned char *)(v23 + 4) = 0;
    swift_willThrow();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = sub_100138300;
    *(void *)(v24 + 24) = v1;
    uint64_t v43 = sub_1001385D4;
    uint64_t v44 = v24;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v40 = 1107296256;
    uint64_t v41 = sub_1001E1D18;
    uint64_t v42 = &unk_100277D18;
    uint64_t v25 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v21, v25);
    _Block_release(v25);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v35);
    }
    __break(1u);
    goto LABEL_13;
  }
  *((unsigned char *)v1 + 24) = 1;
  if (qword_1002A7B68 != -1) {
LABEL_13:
  }
    swift_once();
  uint64_t v27 = v37;
  uint64_t v28 = sub_100096F64(v37, (uint64_t)qword_1002AA110);
  uint64_t v29 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v38, v28, v27);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v33 = v35;
  if (v32)
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Database successfully opened.", v34, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v33);
}

uint64_t sub_10013756C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  URL.path(percentEncoded:)(1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v10 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(a2) = sqlite3_open_v2((const char *)(v10 + 32), (sqlite3 **)(a2 + 32), 6, 0);
  swift_endAccess();
  uint64_t result = swift_release();
  *a3 = a2;
  return result;
}

uint64_t sub_1001376E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(NSObject **)(v1 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1001380C4;
  *(void *)(v7 + 24) = v1;
  aBlock[4] = sub_1001385D4;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E1D18;
  aBlock[3] = &unk_100277C50;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v8);
  _Block_release(v8);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v6)
  {
    __break(1u);
  }
  else
  {
    *(unsigned char *)(v1 + 24) = 0;
    if (qword_1002A7B68 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v9 = sub_100096F64(v2, (uint64_t)qword_1002AA110);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v9, v2);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Database closed.", v12, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return swift_release();
}

sqlite3 *sub_100137980(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 32);
  swift_beginAccess();
  uint64_t result = *(sqlite3 **)(a1 + 32);
  if (result)
  {
    uint64_t result = (sqlite3 *)sqlite3_close_v2(result);
    *uint64_t v2 = 0;
  }
  return result;
}

uint64_t sub_1001379D0(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = 0;
  if (*(unsigned char *)(v3 + 24) == 1)
  {
    uint64_t v21 = 0;
    if (qword_1002A7B68 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_100096F64(v6, (uint64_t)qword_1002AA110);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v18 = a1;
      uint64_t v15 = (uint8_t *)v14;
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      v17[1] = v15 + 4;
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_1000993AC(v18, a2, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_arrayDestroy();
      swift_slowDealloc();
      a1 = v18;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    __chkstk_darwin(v16);
    v17[-4] = v3;
    v17[-3] = a1;
    v17[-2] = a2;
    v17[-1] = &v21;
    OS_dispatch_queue.sync<A>(execute:)();
    if (v20) {
      return 0;
    }
    else {
      return v21;
    }
  }
  return result;
}

uint64_t sub_100137CEC@<X0>(uint64_t a1@<X0>, sqlite3_stmt **a2@<X3>, _DWORD *a3@<X8>)
{
  swift_beginAccess();
  uint64_t v6 = *(sqlite3 **)(a1 + 32);
  uint64_t v7 = String.utf8CString.getter();
  LODWORD(a2) = sqlite3_prepare(v6, (const char *)(v7 + 32), -1, a2, 0);
  uint64_t result = swift_release();
  *a3 = a2;
  return result;
}

uint64_t sub_100137D8C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_100137DC0(uint64_t a1, unint64_t a2, char a3)
{
  char v7 = *(unsigned char *)(v3 + 24);
  if ((v7 & 1) == 0)
  {
    if ((a3 & 1) == 0)
    {
      sub_100137F94();
      swift_allocError();
      *(_DWORD *)uint64_t v13 = 0;
      *(unsigned char *)(v13 + 4) = 2;
      return swift_willThrow();
    }
    uint64_t result = sub_100136F60();
    if (v4) {
      return result;
    }
  }
  type metadata accessor for DBStatement();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = 0;
  swift_weakInit();
  swift_weakAssign();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v9 = sub_1001379D0(a1, a2);
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(inited + 16) = v9;
  if (!v9)
  {
    sub_100137F94();
    swift_allocError();
    *(_DWORD *)uint64_t v14 = 1;
    *(unsigned char *)(v14 + 4) = 2;
    swift_willThrow();
LABEL_13:
    swift_setDeallocating();
    return sub_100135D94();
  }
  unint64_t v10 = sub_100135F48(101);
  if (v11)
  {
    int v15 = v10;
    unint64_t v16 = HIDWORD(v10);
    sub_100137F94();
    swift_willThrowTypedImpl();
    swift_allocError();
    *(_DWORD *)uint64_t v17 = v15;
    *(unsigned char *)(v17 + 4) = v16;
    goto LABEL_13;
  }
  if ((v7 & 1) == 0) {
    sub_1001376E0();
  }
  return swift_release();
}

unint64_t sub_100137F94()
{
  unint64_t result = qword_1002AB320;
  if (!qword_1002AB320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AB320);
  }
  return result;
}

uint64_t sub_100137FE8@<X0>(_DWORD *a1@<X8>)
{
  return sub_100137CEC(*(void *)(v1 + 16), *(sqlite3_stmt ***)(v1 + 40), a1);
}

sqlite3 *sub_100138008(uint64_t a1)
{
  swift_beginAccess();
  unint64_t result = *(sqlite3 **)(a1 + 32);
  if (result) {
    return (sqlite3 *)sqlite3_close_v2(result);
  }
  return result;
}

uint64_t sub_100138050@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = sqlite3_step(*(sqlite3_stmt **)(v1 + 16));
  *a1 = result;
  return result;
}

sqlite3_stmt *sub_100138084()
{
  uint64_t result = *(sqlite3_stmt **)(v0 + 16);
  if (result) {
    return (sqlite3_stmt *)sqlite3_finalize(result);
  }
  return result;
}

uint64_t sub_100138094()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001380A4()
{
  return sub_1001E1CF0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1001380AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001380BC()
{
  return swift_release();
}

sqlite3 *sub_1001380C4()
{
  return sub_100137980(v0);
}

uint64_t sub_1001380CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001380DC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100138114()
{
  return sub_100136C04(*(sqlite3_stmt **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100138120()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100138130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    uint64_t result = v3[v7 + 4];
    if (result == a2 && v3[v7 + 5] == a3) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      break;
    }
    ++v8;
    v7 += 2;
    if (v4 == v8) {
      return v4;
    }
  }
  unint64_t v11 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v11 == v4) {
      return v8;
    }
    while (1)
    {
      unint64_t v13 = v3[2];
      if (v11 >= v13) {
        break;
      }
      uint64_t v14 = &v3[v7];
      uint64_t result = v3[v7 + 6];
      if (result != a2 || v3[v7 + 7] != a3)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          if (v11 != v8)
          {
            if (v8 >= v13) {
              goto LABEL_31;
            }
            unint64_t v16 = &v3[2 * v8 + 4];
            uint64_t v17 = v16[1];
            uint64_t v22 = *v16;
            uint64_t v18 = v14[6];
            uint64_t v19 = v14[7];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v3 = sub_1001138B8(v3);
            }
            uint64_t v20 = &v3[2 * v8];
            v20[4] = v18;
            v20[5] = v19;
            uint64_t result = swift_bridgeObjectRelease();
            if (v11 >= v3[2]) {
              goto LABEL_32;
            }
            uint64_t v21 = &v3[v7];
            v21[6] = v22;
            v21[7] = v17;
            uint64_t result = swift_bridgeObjectRelease();
            *(void *)a1 = v3;
          }
          if (__OFADD__(v8++, 1)) {
            goto LABEL_30;
          }
        }
      }
      ++v11;
      v7 += 2;
      if (v11 == v3[2]) {
        return v8;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001382E4@<X0>(_DWORD *a1@<X8>)
{
  return sub_10013756C(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

sqlite3 *sub_100138300()
{
  return sub_100138008(v0);
}

uint64_t sub_100138308()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100138318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_100138320()
{
  swift_release();

  return swift_weakDestroy();
}

void *sub_100138364(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

uint64_t type metadata accessor for DBReader()
{
  return sub_1001385A4();
}

uint64_t initializeBufferWithCopyOfBuffer for DBError(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DBError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DBError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100138458(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 4) <= 1u) {
    return *(unsigned __int8 *)(a1 + 4);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100138470(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DBError()
{
  return &type metadata for DBError;
}

void *sub_100138498(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_weakCopyInit();
  return a1;
}

void *sub_1001384E4(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  swift_weakCopyAssign();
  return a1;
}

void *sub_10013853C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  swift_weakTakeAssign();
  return a1;
}

uint64_t type metadata accessor for DBWriter()
{
  return sub_1001385A4();
}

uint64_t sub_1001385A4()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1001385F4@<X0>(_DWORD *a1@<X8>)
{
  return sub_100138050(a1);
}

void sub_100138610(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v50 - v6;
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons;
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons);
  uint64_t v52 = v10;
  if (v9) {
    id v11 = [v9 value];
  }
  else {
    id v11 = 0;
  }
  id v12 = [a1 stagingNotReadyReasons];
  if (!v12)
  {
    if (!v9) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  unint64_t v13 = v12;
  id v14 = [v12 value];

  if (v9) {
    BOOL v15 = v11 == v14;
  }
  else {
    BOOL v15 = 0;
  }
  if (!v15)
  {
LABEL_12:
    id v16 = [a1 stagingNotReadyReasons];
    uint64_t v17 = *(void **)(v2 + v8);
    *(void *)(v2 + v8) = v16;

    uint64_t v18 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_logger, v4);
    id v19 = a1;
    uint64_t v20 = Logger.logObject.getter();
    uint64_t v21 = v4;
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v22))
    {
      uint64_t v51 = v21;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      uint64_t v55 = v50;
      *(_DWORD *)uint64_t v23 = 136315138;
      id v24 = [v19 stagingNotReadyReasons:v50];
      if (v24)
      {
        uint64_t v25 = v24;
        id v26 = [v24 description];

        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;
      }
      else
      {
        uint64_t v27 = 7104878;
        unint64_t v29 = 0xE300000000000000;
      }
      uint64_t v54 = sub_1000993AC(v27, v29, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "Firmware update readiness updated stagingNotReadyReasons: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v4 = v51;
      (*(void (**)(char *, uint64_t))(v53 + 8))(v7, v51);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v21);
      uint64_t v4 = v21;
    }
  }
LABEL_18:
  uint64_t v30 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons;
  uint64_t v31 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons);
  if (v31) {
    id v32 = [*(id *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons) value];
  }
  else {
    id v32 = 0;
  }
  uint64_t v33 = v53;
  id v34 = [a1 updateNotReadyReasons];
  if (v34)
  {
    uint64_t v35 = v34;
    id v36 = [v34 value];

    if (v31 && v32 == v36) {
      return;
    }
  }
  else if (!v31)
  {
    return;
  }
  id v37 = [a1 updateNotReadyReasons];
  uint64_t v38 = *(void **)(v2 + v30);
  *(void *)(v2 + v30) = v37;

  uint64_t v39 = v52;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v52, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_logger, v4);
  id v40 = a1;
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136315138;
    id v44 = [v40 updateNotReadyReasons];
    if (v44)
    {
      uint64_t v45 = v44;
      id v46 = [v44 description];

      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v49 = v48;
    }
    else
    {
      uint64_t v47 = 7104878;
      unint64_t v49 = 0xE300000000000000;
    }
    uint64_t v54 = sub_1000993AC(v47, v49, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Firmware update readiness updated updateNotReadyReasons: %s", v43, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v52, v4);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v39, v4);
  }
}

void sub_100138BB8(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v60 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v61 = (char *)&v50 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v50 - v9;
  id v11 = [a1 state];
  if (v11)
  {
    id v12 = v11;
    uint64_t v54 = v1;
    unint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v58 = v62 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_logger;
    uint64_t v59 = v4 + 16;
    Class v57 = v13;
    ((void (*)(char *))v13)(v10);
    id v14 = v12;
    BOOL v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v55 = v3;
    if (v17)
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = (void *)swift_slowAlloc();
      uint64_t v56 = v4;
      uint64_t v52 = v18;
      *(_DWORD *)uint64_t v18 = 138412290;
      uint64_t v50 = v18 + 4;
      os_log_type_t v64 = v14;
      id v19 = v14;
      uint64_t v4 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v51 = v12;

      uint64_t v3 = v55;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Firmware update status updated state: %@", v52, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      BOOL v15 = v14;
    }

    id v24 = *(char **)(v4 + 8);
    uint64_t v22 = v4 + 8;
    uint64_t v23 = v24;
    ((void (*)(char *, uint64_t))v24)(v10, v3);
    id v25 = [a1 updateDuration];
    uint64_t v53 = v14;
    if (v25)
    {
      id v26 = v25;
      v57(v61, v58, v3);
      uint64_t v27 = v26;
      unint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v56 = v22;
        uint64_t v31 = (uint8_t *)v30;
        *(_DWORD *)uint64_t v30 = 134217984;
        uint64_t v52 = (uint8_t *)(v30 + 4);
        id v32 = a1;
        id v33 = [v27 value];
        id v34 = v23;
        uint64_t v35 = [v33 unsignedLongLongValue];

        a1 = v32;
        os_log_type_t v64 = v35;
        uint64_t v23 = v34;
        id v14 = v53;
        uint64_t v3 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Firmware update status updated duration: %llu", v31, 0xCu);
        uint64_t v22 = v56;
        swift_slowDealloc();
      }
      else
      {

        unint64_t v28 = v27;
      }

      ((void (*)(char *, uint64_t))v23)(v61, v3);
      id v36 = [v27 value];
      id v37 = [v36 unsignedLongLongValue];

      uint64_t v38 = v62 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateDuration;
      *(void *)uint64_t v38 = v37;
      *(unsigned char *)(v38 + 8) = 0;
    }
    id v39 = [a1 stagedFirmwareVersion];
    if (v39)
    {
      id v40 = v39;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v43 = v42;

      id v44 = v60;
      v57(v60, v58, v3);
      swift_bridgeObjectRetain_n();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v56 = v22;
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        uint64_t v61 = v23;
        os_log_type_t v64 = v48;
        *(_DWORD *)uint64_t v47 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v63 = sub_1000993AC(v41, v43, (uint64_t *)&v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Firmware update status updated version: %s", v47, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        ((void (*)(char *, uint64_t))v61)(v60, v55);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        ((void (*)(char *, uint64_t))v23)(v44, v3);
      }
      unint64_t v49 = (uint64_t *)(v62 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagedFirmwareVersion);
      *unint64_t v49 = v41;
      v49[1] = v43;

      swift_bridgeObjectRelease();
    }
    else
    {
    }
  }
  else
  {
    uint64_t v20 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    *uint64_t v21 = 0xD000000000000028;
    v21[1] = 0x8000000100237FA0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v21, enum case for Errors.NotFound(_:), v20);
    swift_willThrow();
  }
}

id sub_10013927C()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateDuration];
  *(void *)uint64_t v1 = 0;
  v1[8] = 1;
  uint64_t v2 = &v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateState];
  *(void *)uint64_t v2 = 0;
  v2[8] = 1;
  uint64_t v3 = &v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagedFirmwareVersion];
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons] = 0;
  *(void *)&v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons] = 0;
  Logger.init(subsystem:category:)();
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for AccessoryFirmwareUpdateProfile();
  return [super init];
}

id sub_100139370()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryFirmwareUpdateProfile();
  return [super dealloc];
}

uint64_t sub_10013944C()
{
  return type metadata accessor for AccessoryFirmwareUpdateProfile();
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateProfile()
{
  uint64_t result = qword_1002AA568;
  if (!qword_1002AA568) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001394A0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100139554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_1001B0B44(v10, v9, a2, a3);
  if (!a1 || v11 < 0 || v11 >= a1)
  {
    uint64_t v12 = sub_1001B0AC8(v10, a1, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = a2 >> 32;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v13 = BYTE6(a3);
        break;
    }
    if (v13 < v12)
    {
LABEL_16:
      __break(1u);
      JUMPOUT(0x1001396D4);
    }
  }
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_1000A6240(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_100139704(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v12 = (a1 >> 32) - (int)a1;
      if (a1 >> 32 < (int)a1)
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      sub_1000A618C(a1, a2);
      size_t v13 = __DataStorage._bytes.getter();
      if (!v13) {
        goto LABEL_11;
      }
      uint64_t v14 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a1, v14)) {
LABEL_56:
      }
        __break(1u);
      v13 += (int)a1 - v14;
LABEL_11:
      uint64_t v15 = __DataStorage._length.getter();
      if (v15 >= v12) {
        uint64_t v16 = (a1 >> 32) - (int)a1;
      }
      else {
        uint64_t v16 = v15;
      }
      unint64_t v17 = v13 + v16;
      if (v13) {
        unint64_t v18 = v17;
      }
      else {
        unint64_t v18 = 0;
      }
      size_t v19 = sub_100139F30(v13, v18);
      uint64_t v57 = 0;
      unint64_t v58 = 0xE000000000000000;
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        sub_100139FE4();
        swift_bridgeObjectRetain();
        uint64_t v21 = 0;
        do
        {
          LOBYTE(v55) = *(unsigned char *)(v19 + v21 + 32);
          uint64_t v23 = String.init<A>(_:radix:uppercase:)();
          id v25 = v24;
          if (String.count.getter() == 1)
          {
            uint64_t v55 = 48;
            unint64_t v56 = 0xE100000000000000;
            v26._countAndFlagsBits = v23;
            v26._object = v25;
            String.append(_:)(v26);
            swift_bridgeObjectRelease();
            uint64_t v23 = 48;
            id v25 = (void *)0xE100000000000000;
          }
          ++v21;
          v22._countAndFlagsBits = v23;
          v22._object = v25;
          String.append(_:)(v22);
          swift_bridgeObjectRelease();
        }
        while (v20 != v21);
        swift_release_n();
        sub_1000A6240(a1, a2);
        return v57;
      }
      else
      {
        swift_release();
        sub_1000A6240(a1, a2);
        return 0;
      }
    case 2uLL:
      uint64_t v27 = *(void *)(a1 + 16);
      uint64_t v28 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      size_t v29 = __DataStorage._bytes.getter();
      if (!v29) {
        goto LABEL_25;
      }
      uint64_t v30 = __DataStorage._offset.getter();
      if (__OFSUB__(v27, v30)) {
        goto LABEL_55;
      }
      v29 += v27 - v30;
LABEL_25:
      BOOL v31 = __OFSUB__(v28, v27);
      uint64_t v32 = v28 - v27;
      if (v31) {
        goto LABEL_54;
      }
      uint64_t v33 = __DataStorage._length.getter();
      if (v33 >= v32) {
        uint64_t v34 = v32;
      }
      else {
        uint64_t v34 = v33;
      }
      unint64_t v35 = v29 + v34;
      if (v29) {
        unint64_t v36 = v35;
      }
      else {
        unint64_t v36 = 0;
      }
      size_t v37 = sub_100139F30(v29, v36);
      uint64_t v57 = 0;
      unint64_t v58 = 0xE000000000000000;
      uint64_t v38 = *(void *)(v37 + 16);
      if (!v38)
      {
        swift_release();
        swift_release();
LABEL_50:
        swift_release();
        return 0;
      }
      sub_100139FE4();
      swift_bridgeObjectRetain();
      uint64_t v39 = 0;
      do
      {
        LOBYTE(v55) = *(unsigned char *)(v37 + v39 + 32);
        uint64_t v41 = String.init<A>(_:radix:uppercase:)();
        unint64_t v43 = v42;
        if (String.count.getter() == 1)
        {
          uint64_t v55 = 48;
          unint64_t v56 = 0xE100000000000000;
          v44._countAndFlagsBits = v41;
          v44._object = v43;
          String.append(_:)(v44);
          swift_bridgeObjectRelease();
          uint64_t v41 = 48;
          unint64_t v43 = (void *)0xE100000000000000;
        }
        ++v39;
        v40._countAndFlagsBits = v41;
        v40._object = v43;
        String.append(_:)(v40);
        swift_bridgeObjectRelease();
      }
      while (v38 != v39);
      swift_release();
      swift_release();
LABEL_46:
      swift_release_n();
      return v57;
    case 3uLL:
      memset(v54, 0, 14);
      size_t v45 = sub_100139F30((size_t)v54, (unint64_t)v54);
      uint64_t v57 = 0;
      unint64_t v58 = 0xE000000000000000;
      uint64_t v46 = *(void *)(v45 + 16);
      if (!v46) {
        goto LABEL_50;
      }
      sub_100139FE4();
      swift_bridgeObjectRetain();
      uint64_t v47 = 0;
      do
      {
        LOBYTE(v55) = *(unsigned char *)(v45 + v47 + 32);
        uint64_t v49 = String.init<A>(_:radix:uppercase:)();
        uint64_t v51 = v50;
        if (String.count.getter() == 1)
        {
          uint64_t v55 = 48;
          unint64_t v56 = 0xE100000000000000;
          v52._countAndFlagsBits = v49;
          v52._object = v51;
          String.append(_:)(v52);
          swift_bridgeObjectRelease();
          uint64_t v49 = v55;
          uint64_t v51 = (void *)v56;
        }
        ++v47;
        v48._countAndFlagsBits = v49;
        v48._object = v51;
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
      }
      while (v46 != v47);
      goto LABEL_46;
    default:
      v54[0] = a1;
      LOWORD(v54[1]) = a2;
      BYTE2(v54[1]) = BYTE2(a2);
      BYTE3(v54[1]) = BYTE3(a2);
      BYTE4(v54[1]) = BYTE4(a2);
      BYTE5(v54[1]) = BYTE5(a2);
      size_t v4 = sub_100139F30((size_t)v54, (unint64_t)v54 + BYTE6(a2));
      uint64_t v57 = 0;
      unint64_t v58 = 0xE000000000000000;
      uint64_t v5 = *(void *)(v4 + 16);
      if (!v5) {
        goto LABEL_50;
      }
      sub_100139FE4();
      swift_bridgeObjectRetain();
      uint64_t v6 = 0;
      do
      {
        LOBYTE(v55) = *(unsigned char *)(v4 + v6 + 32);
        uint64_t v8 = String.init<A>(_:radix:uppercase:)();
        uint64_t v10 = v9;
        if (String.count.getter() == 1)
        {
          uint64_t v55 = 48;
          unint64_t v56 = 0xE100000000000000;
          v11._countAndFlagsBits = v8;
          v11._object = v10;
          String.append(_:)(v11);
          swift_bridgeObjectRelease();
          uint64_t v8 = v55;
          uint64_t v10 = (void *)v56;
        }
        ++v6;
        v7._countAndFlagsBits = v8;
        v7._object = v10;
        String.append(_:)(v7);
        swift_bridgeObjectRelease();
      }
      while (v5 != v6);
      goto LABEL_46;
  }
}

uint64_t sub_100139C88(int a1)
{
  sub_1000992E8(&qword_1002A7F40);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100242050;
  *(unsigned char *)(v2 + 32) = HIBYTE(a1);
  *(unsigned char *)(v2 + 33) = BYTE2(a1);
  *(unsigned char *)(v2 + 34) = BYTE1(a1);
  *(unsigned char *)(v2 + 35) = a1;
  uint64_t v3 = sub_1001038B0(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100139D10(uint64_t a1, unint64_t a2)
{
  if ((String.count.getter() & 1) == 0)
  {
    long long v28 = xmmword_100240D00;
    uint64_t v4 = String.count.getter();
    if (v4 < 1) {
      return 0;
    }
    uint64_t v5 = v4;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = __OFADD__(v6, 2) ? 0x7FFFFFFFFFFFFFFFLL : v6 + 2;
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_10013A038(v6, a1, a2);
      uint64_t v10 = v9;
      swift_bridgeObjectRelease();
      uint64_t v11 = Substring.index(_:offsetBy:limitedBy:)();
      unint64_t v13 = (v12 & 1) != 0 ? v10 : v11;
      if (v13 >> 14 < v8 >> 14) {
        break;
      }
      uint64_t v14 = Substring.subscript.getter();
      unint64_t v16 = v15;
      unint64_t v18 = v17;
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      if (!((v14 ^ v16) >> 14)) {
        goto LABEL_25;
      }
      if ((v20 & 0x1000000000000000) != 0)
      {
        LOWORD(v18) = sub_10017CF28(v14, v16, v18, v20, 16);
        swift_bridgeObjectRelease();
        if ((v18 & 0x100) != 0) {
          goto LABEL_26;
        }
      }
      else
      {
        if ((v20 & 0x2000000000000000) != 0)
        {
          v25[0] = v18;
          v25[1] = v20 & 0xFFFFFFFFFFFFFFLL;
          uint64_t v21 = v25;
        }
        else if ((v18 & 0x1000000000000000) != 0)
        {
          uint64_t v21 = (void *)((v20 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          uint64_t v21 = (void *)_StringObject.sharedUTF8.getter();
        }
        unsigned int v22 = sub_10013A0E8((uint64_t)v21, v14, v16, v18, v20, 16);
        LOBYTE(v18) = v22;
        char v27 = BYTE1(v22) & 1;
        int v23 = (v22 >> 8) & 1;
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_26;
        }
      }
      char v26 = v18;
      Data._Representation.append(contentsOf:)();
      unint64_t v6 = v7;
      if (v7 >= v5) {
        return v28;
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRelease();
LABEL_26:
    sub_1000A6240(v28, *((unint64_t *)&v28 + 1));
  }
  return 0;
}

size_t sub_100139F30(size_t result, unint64_t a2)
{
  if (!result) {
    return (size_t)&_swiftEmptyArrayStorage;
  }
  uint64_t v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return (size_t)&_swiftEmptyArrayStorage;
  }
  if (v4 < 1)
  {
    uint64_t v5 = &_swiftEmptyArrayStorage;
    if (!a2) {
      goto LABEL_13;
    }
  }
  else
  {
    sub_1000992E8(&qword_1002A7F40);
    uint64_t v5 = (void *)swift_allocObject();
    uint64_t result = j__malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

unint64_t sub_100139FE4()
{
  unint64_t result = qword_1002AA578;
  if (!qword_1002AA578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AA578);
  }
  return result;
}

unint64_t sub_10013A038(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if ((a3 & 0x2000000000000000) != 0) {
    uint64_t v3 = HIBYTE(a3) & 0xF;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = 7;
  if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0) {
    uint64_t v4 = 11;
  }
  unint64_t v5 = v4 | (v3 << 16);
  unint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v6) {
    unint64_t result = v5;
  }
  if (4 * v3 < result >> 14) {
    goto LABEL_14;
  }

  return String.subscript.getter();
}

uint64_t sub_10013A0E8(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = sub_1001EC41C(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_1001EC41C(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = sub_1001EC41C(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  unint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    unint64_t v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v32 = a6 + 55;
        }
        else
        {
          unsigned __int8 v31 = 97;
          unsigned __int8 v32 = 65;
        }
        if (a6 <= 10) {
          unsigned __int8 v33 = a6 + 48;
        }
        else {
          unsigned __int8 v33 = 58;
        }
        if (v19)
        {
          LOBYTE(v24) = 0;
          uint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v33)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                unsigned __int8 v29 = 0;
                int v30 = 1;
                if (v36 < 0x61 || v36 >= v31) {
                  return v29 | (v30 << 8);
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            if (((v24 * (unsigned __int16)a6) & 0xFF00) != 0) {
              goto LABEL_96;
            }
            unsigned int v24 = (v24 * a6) + (v36 + v37);
            if ((v24 >> 8)) {
              goto LABEL_96;
            }
            ++v34;
            --v35;
          }
          while (v35);
LABEL_72:
          int v30 = 0;
          unsigned __int8 v29 = v24;
          return v29 | (v30 << 8);
        }
        goto LABEL_95;
      }
LABEL_96:
      unsigned __int8 v29 = 0;
      int v30 = 1;
      return v29 | (v30 << 8);
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v38 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = a6 + 55;
      }
      else
      {
        unsigned __int8 v38 = 97;
        unsigned __int8 v39 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v40 = a6 + 48;
      }
      else {
        unsigned __int8 v40 = 58;
      }
      if (v19)
      {
        LOBYTE(v41) = 0;
        do
        {
          unsigned int v42 = *v19;
          if (v42 < 0x30 || v42 >= v40)
          {
            if (v42 < 0x41 || v42 >= v39)
            {
              unsigned __int8 v29 = 0;
              int v30 = 1;
              if (v42 < 0x61 || v42 >= v38) {
                return v29 | (v30 << 8);
              }
              char v43 = -87;
            }
            else
            {
              char v43 = -55;
            }
          }
          else
          {
            char v43 = -48;
          }
          if (((v41 * (unsigned __int16)a6) & 0xFF00) != 0) {
            goto LABEL_96;
          }
          unsigned int v41 = (v41 * a6) + (v42 + v43);
          if ((v41 >> 8)) {
            goto LABEL_96;
          }
          ++v19;
          --result;
        }
        while (result);
        int v30 = 0;
        unsigned __int8 v29 = v41;
        return v29 | (v30 << 8);
      }
      goto LABEL_95;
    }
    goto LABEL_96;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v22 = a6 + 55;
      }
      else
      {
        unsigned __int8 v21 = 97;
        unsigned __int8 v22 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v23 = a6 + 48;
      }
      else {
        unsigned __int8 v23 = 58;
      }
      if (v19)
      {
        LOBYTE(v24) = 0;
        id v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              unsigned __int8 v29 = 0;
              int v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | (v30 << 8);
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          if (((v24 * (unsigned __int16)a6) & 0xFF00) != 0) {
            goto LABEL_96;
          }
          unsigned int v24 = (v24 * a6) - (v27 + v28);
          if ((v24 & 0xFFFFFF00) != 0) {
            goto LABEL_96;
          }
          ++v25;
          if (!--v26) {
            goto LABEL_72;
          }
        }
      }
LABEL_95:
      unsigned __int8 v29 = 0;
      int v30 = 0;
      return v29 | (v30 << 8);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

unsigned char *storeEnumTagSinglePayload for DockdError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10013A60CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DockdError()
{
  return &type metadata for DockdError;
}

unint64_t sub_10013A648()
{
  unint64_t result = qword_1002AA580;
  if (!qword_1002AA580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AA580);
  }
  return result;
}

BOOL sub_10013A69C()
{
  unint64_t v1 = v0[1];
  unint64_t v26 = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    sub_10013E6F0((uint64_t)&v26);
    if (v10) {
      return 0;
    }
  }
  else if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  unint64_t v2 = v0[2];
  unint64_t v25 = v2;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    sub_10013E6F0((uint64_t)&v25);
    if (v14) {
      return 0;
    }
  }
  else if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  unint64_t v3 = v0[3];
  unint64_t v24 = v3;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    sub_10013E6F0((uint64_t)&v24);
    if (v15) {
      return 0;
    }
  }
  else if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  unint64_t v4 = v0[4];
  unint64_t v23 = v4;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    sub_10013E6F0((uint64_t)&v23);
    if (v16) {
      return 0;
    }
  }
  else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  unint64_t v5 = v0[5];
  unint64_t v22 = v5;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    sub_10013E6F0((uint64_t)&v22);
    if (v17) {
      return 0;
    }
  }
  else if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  unint64_t v6 = v0[6];
  unint64_t v21 = v6;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    sub_10013E6F0((uint64_t)&v21);
    if (v18) {
      return 0;
    }
  }
  else if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  unint64_t v7 = v0[7];
  unint64_t v20 = v7;
  if (!(v7 >> 62))
  {
    if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_15;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  sub_10013E6F0((uint64_t)&v20);
  if (v19) {
    return 0;
  }
LABEL_15:
  uint64_t v8 = v0[8];
  if ((v8 & 0xC000000000000001) != 0) {
    uint64_t v9 = __CocoaDictionary.count.getter();
  }
  else {
    uint64_t v9 = *(void *)(v8 + 16);
  }
  if (v9) {
    return 0;
  }
  uint64_t v12 = v0[9];
  if ((v12 & 0xC000000000000001) != 0) {
    uint64_t v13 = __CocoaDictionary.count.getter();
  }
  else {
    uint64_t v13 = *(void *)(v12 + 16);
  }
  return v13 == 0;
}

void sub_10013A914()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self UUIDWithString:v0];

  qword_1002AA590 = (uint64_t)v1;
}

uint64_t sub_10013A984()
{
  id v1 = [v0 data];
  uint64_t v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v4 = v3;

  LOBYTE(v1) = Data.subscript.getter();
  sub_1000A6240(v2, v4);
  id v5 = [v0 data];
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  LOBYTE(v5) = Data.subscript.getter();
  sub_1000A6240(v6, v8);
  id v9 = [v0 data];
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  LOBYTE(v9) = Data.subscript.getter();
  sub_1000A6240(v10, v12);
  id v13 = [v0 data];
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  LODWORD(v13) = Data.subscript.getter();
  sub_1000A6240(v14, v16);
  return v1 | (unsigned __int16)(v5 << 8) | (v9 << 16) | (v13 << 24);
}

uint64_t (*sub_10013AAEC())()
{
  return j__swift_endAccess;
}

unint64_t sub_10013AB4C()
{
  sub_1000992E8(&qword_1002AA5E8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100242120;
  id v1 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100240BE0;
  *(void *)(v2 + 56) = &type metadata for UInt32;
  *(void *)(v2 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v2 + 32) = 62;
  String.init(format:_:)();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v1 UUIDWithString:v3];

  *(void *)(inited + 32) = v4;
  *(void *)(inited + 40) = 0xD000000000000015;
  *(void *)(inited + 48) = 0x8000000100238400;
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100240BE0;
  *(void *)(v5 + 56) = &type metadata for UInt32;
  *(void *)(v5 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v5 + 32) = 67;
  String.init(format:_:)();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v1 UUIDWithString:v6];

  *(void *)(inited + 56) = v7;
  strcpy((char *)(inited + 64), "LED Component");
  *(_WORD *)(inited + 78) = -4864;
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100240BE0;
  *(void *)(v8 + 56) = &type metadata for UInt32;
  *(void *)(v8 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v8 + 32) = 73;
  String.init(format:_:)();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v1 UUIDWithString:v9];

  *(void *)(inited + 80) = v10;
  *(void *)(inited + 88) = 0xD000000000000010;
  *(void *)(inited + 96) = 0x8000000100238420;
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100240BE0;
  *(void *)(v11 + 56) = &type metadata for UInt32;
  *(void *)(v11 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v11 + 32) = 16;
  String.init(format:_:)();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v1 UUIDWithString:v12];

  *(void *)(inited + 104) = v13;
  *(void *)(inited + 112) = 0x676E6972696150;
  *(void *)(inited + 120) = 0xE700000000000000;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_100240BE0;
  *(void *)(v14 + 56) = &type metadata for UInt32;
  *(void *)(v14 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v14 + 32) = 150;
  String.init(format:_:)();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [v1 UUIDWithString:v15];

  *(void *)(inited + 128) = v16;
  *(void *)(inited + 136) = 0x79726574746142;
  *(void *)(inited + 144) = 0xE700000000000000;
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_100240BE0;
  *(void *)(v17 + 56) = &type metadata for UInt32;
  *(void *)(v17 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v17 + 32) = 162;
  String.init(format:_:)();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v19 = [v1 UUIDWithString:v18];

  *(void *)(inited + 152) = v19;
  *(void *)(inited + 160) = 0xD000000000000014;
  *(void *)(inited + 168) = 0x8000000100238440;
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_100240BE0;
  *(void *)(v20 + 56) = &type metadata for UInt32;
  *(void *)(v20 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v20 + 32) = 256;
  String.init(format:_:)();
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v22 = [v1 UUIDWithString:v21];

  *(void *)(inited + 176) = v22;
  strcpy((char *)(inited + 184), "Corsair System");
  *(unsigned char *)(inited + 199) = -18;
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_100240BE0;
  *(void *)(v23 + 56) = &type metadata for UInt32;
  *(void *)(v23 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v23 + 32) = 512;
  String.init(format:_:)();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v25 = [v1 UUIDWithString:v24];

  *(void *)(inited + 200) = v25;
  *(void *)(inited + 208) = 0xD000000000000016;
  *(void *)(inited + 216) = 0x8000000100238460;
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_100240BE0;
  *(void *)(v26 + 56) = &type metadata for UInt32;
  *(void *)(v26 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v26 + 32) = 768;
  String.init(format:_:)();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v28 = [v1 UUIDWithString:v27];

  *(void *)(inited + 224) = v28;
  strcpy((char *)(inited + 232), "Corsair Sensor");
  *(unsigned char *)(inited + 247) = -18;
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_100240BE0;
  *(void *)(v29 + 56) = &type metadata for UInt32;
  *(void *)(v29 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v29 + 32) = 297;
  String.init(format:_:)();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v31 = [v1 UUIDWithString:v30];

  *(void *)(inited + 248) = v31;
  *(void *)(inited + 256) = 0xD000000000000020;
  *(void *)(inited + 264) = 0x8000000100238480;
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_100240BE0;
  *(void *)(v32 + 56) = &type metadata for UInt32;
  *(void *)(v32 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v32 + 32) = 566;
  String.init(format:_:)();
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v34 = [v1 UUIDWithString:v33];

  *(void *)(inited + 272) = v34;
  *(void *)(inited + 280) = 0x657261776D726946;
  *(void *)(inited + 288) = 0xEF65746164705520;
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_100240BE0;
  *(void *)(v35 + 56) = &type metadata for UInt32;
  *(void *)(v35 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v35 + 32) = 567;
  String.init(format:_:)();
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v37 = [v1 UUIDWithString:v36];

  *(void *)(inited + 296) = v37;
  *(void *)(inited + 304) = 0x74736F6E67616944;
  *(void *)(inited + 312) = 0xEB00000000736369;
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_100240BE0;
  *(void *)(v38 + 56) = &type metadata for UInt32;
  *(void *)(v38 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v38 + 32) = 569;
  String.init(format:_:)();
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v40 = [v1 UUIDWithString:v39];

  *(void *)(inited + 320) = v40;
  *(void *)(inited + 328) = 0xD00000000000001DLL;
  *(void *)(inited + 336) = 0x80000001002384B0;
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_100240BE0;
  *(void *)(v41 + 56) = &type metadata for UInt32;
  *(void *)(v41 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v41 + 32) = 624;
  String.init(format:_:)();
  NSString v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v43 = [v1 UUIDWithString:v42];

  *(void *)(inited + 344) = v43;
  *(void *)(inited + 352) = 0x7363697274654DLL;
  *(void *)(inited + 360) = 0xE700000000000000;
  unint64_t result = sub_1001EA82C(inited);
  qword_1002B14E0 = result;
  return result;
}

unint64_t sub_10013B3C8()
{
  sub_1000992E8(&qword_1002AA5E8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100242130;
  NSString v1 = String._bridgeToObjectiveC()();
  uint64_t v2 = self;
  id v3 = [v2 UUIDWithString:v1];

  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = 0xD000000000000013;
  *(void *)(v0 + 48) = 0x80000001002380B0;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v2 UUIDWithString:v4];

  *(void *)(v0 + 56) = v5;
  *(void *)(v0 + 64) = 0x73726556204B4441;
  *(void *)(v0 + 72) = 0xEB000000006E6F69;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100240BE0;
  *(void *)(v6 + 56) = &type metadata for UInt32;
  *(void *)(v6 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v6 + 32) = 32;
  String.init(format:_:)();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v8 = [v2 UUIDWithString:v7];

  *(void *)(v0 + 80) = v8;
  strcpy((char *)(v0 + 88), "Manufacturer");
  *(unsigned char *)(v0 + 101) = 0;
  *(_WORD *)(v0 + 102) = -5120;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_100240BE0;
  *(void *)(v9 + 56) = &type metadata for UInt32;
  *(void *)(v9 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v9 + 32) = 33;
  String.init(format:_:)();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v2 UUIDWithString:v10];

  *(void *)(v0 + 104) = v11;
  *(void *)(v0 + 112) = 0x6C65646F4DLL;
  *(void *)(v0 + 120) = 0xE500000000000000;
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100240BE0;
  *(void *)(v12 + 56) = &type metadata for UInt32;
  *(void *)(v12 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v12 + 32) = 35;
  String.init(format:_:)();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v2 UUIDWithString:v13];

  *(void *)(v0 + 128) = v14;
  *(void *)(v0 + 136) = 1701667150;
  *(void *)(v0 + 144) = 0xE400000000000000;
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100240BE0;
  *(void *)(v15 + 56) = &type metadata for UInt32;
  *(void *)(v15 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v15 + 32) = 37;
  String.init(format:_:)();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v17 = [v2 UUIDWithString:v16];

  *(void *)(v0 + 152) = v17;
  *(void *)(v0 + 160) = 28239;
  *(void *)(v0 + 168) = 0xE200000000000000;
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_100240BE0;
  *(void *)(v18 + 56) = &type metadata for UInt32;
  *(void *)(v18 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v18 + 32) = 48;
  String.init(format:_:)();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v20 = [v2 UUIDWithString:v19];

  *(void *)(v0 + 176) = v20;
  strcpy((char *)(v0 + 184), "Serial Number");
  *(_WORD *)(v0 + 198) = -4864;
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_100240BE0;
  *(void *)(v21 + 56) = &type metadata for UInt32;
  *(void *)(v21 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v21 + 32) = 55;
  String.init(format:_:)();
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v23 = [v2 UUIDWithString:v22];

  *(void *)(v0 + 200) = v23;
  *(void *)(v0 + 208) = 0x6E6F6973726556;
  *(void *)(v0 + 216) = 0xE700000000000000;
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100240BE0;
  *(void *)(v24 + 56) = &type metadata for UInt32;
  *(void *)(v24 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v24 + 32) = 17;
  String.init(format:_:)();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v26 = [v2 UUIDWithString:v25];

  *(void *)(v0 + 224) = v26;
  *(void *)(v0 + 232) = 0x7465532072696150;
  *(void *)(v0 + 240) = 0xEA00000000007075;
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_100240BE0;
  *(void *)(v27 + 56) = &type metadata for UInt32;
  *(void *)(v27 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v27 + 32) = 18;
  String.init(format:_:)();
  NSString v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v29 = [v2 UUIDWithString:v28];

  *(void *)(v0 + 248) = v29;
  *(void *)(v0 + 256) = 0x7265562072696150;
  *(void *)(v0 + 264) = 0xEB00000000796669;
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_100240BE0;
  *(void *)(v30 + 56) = &type metadata for UInt32;
  *(void *)(v30 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v30 + 32) = 19;
  String.init(format:_:)();
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v32 = [v2 UUIDWithString:v31];

  *(void *)(v0 + 272) = v32;
  *(void *)(v0 + 280) = 0xD000000000000010;
  *(void *)(v0 + 288) = 0x8000000100238100;
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_100240BE0;
  *(void *)(v33 + 56) = &type metadata for UInt32;
  *(void *)(v33 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v33 + 32) = 20;
  String.init(format:_:)();
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v35 = [v2 UUIDWithString:v34];

  *(void *)(v0 + 296) = v35;
  *(void *)(v0 + 304) = 0xD000000000000010;
  *(void *)(v0 + 312) = 0x8000000100238120;
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_100240BE0;
  *(void *)(v36 + 56) = &type metadata for UInt32;
  *(void *)(v36 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v36 + 32) = 21;
  String.init(format:_:)();
  NSString v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v38 = [v2 UUIDWithString:v37];

  *(void *)(v0 + 320) = v38;
  *(void *)(v0 + 328) = 0xD000000000000014;
  *(void *)(v0 + 336) = 0x8000000100238140;
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_100240BE0;
  *(void *)(v39 + 56) = &type metadata for UInt32;
  *(void *)(v39 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v39 + 32) = 82;
  String.init(format:_:)();
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v41 = [v2 UUIDWithString:v40];

  *(void *)(v0 + 344) = v41;
  *(void *)(v0 + 352) = 0xD000000000000011;
  *(void *)(v0 + 360) = 0x8000000100238160;
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_100240BE0;
  *(void *)(v42 + 56) = &type metadata for UInt32;
  *(void *)(v42 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v42 + 32) = 83;
  String.init(format:_:)();
  NSString v43 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v44 = [v2 UUIDWithString:v43];

  *(void *)(v0 + 368) = v44;
  *(void *)(v0 + 376) = 0xD000000000000011;
  *(void *)(v0 + 384) = 0x8000000100238180;
  uint64_t v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_100240BE0;
  *(void *)(v45 + 56) = &type metadata for UInt32;
  *(void *)(v45 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v45 + 32) = 104;
  String.init(format:_:)();
  NSString v46 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v47 = [v2 UUIDWithString:v46];

  *(void *)(v0 + 392) = v47;
  strcpy((char *)(v0 + 400), "Battery Level");
  *(_WORD *)(v0 + 414) = -4864;
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_100240BE0;
  *(void *)(v48 + 56) = &type metadata for UInt32;
  *(void *)(v48 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v48 + 32) = 121;
  String.init(format:_:)();
  NSString v49 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v50 = [v2 UUIDWithString:v49];

  *(void *)(v0 + 416) = v50;
  *(void *)(v0 + 424) = 0xD000000000000012;
  *(void *)(v0 + 432) = 0x80000001002381A0;
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_100240BE0;
  *(void *)(v51 + 56) = &type metadata for UInt32;
  *(void *)(v51 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v51 + 32) = 143;
  String.init(format:_:)();
  NSString v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v53 = [v2 UUIDWithString:v52];

  *(void *)(v0 + 440) = v53;
  strcpy((char *)(v0 + 448), "Charging State");
  *(unsigned char *)(v0 + 463) = -18;
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_100240BE0;
  *(void *)(v54 + 56) = &type metadata for UInt32;
  *(void *)(v54 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v54 + 32) = 165;
  String.init(format:_:)();
  NSString v55 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v56 = [v2 UUIDWithString:v55];

  *(void *)(v0 + 464) = v56;
  *(void *)(v0 + 472) = 0xD000000000000011;
  *(void *)(v0 + 480) = 0x80000001002381C0;
  uint64_t v57 = swift_allocObject();
  *(_OWORD *)(v57 + 16) = xmmword_100240BE0;
  *(void *)(v57 + 56) = &type metadata for UInt32;
  *(void *)(v57 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v57 + 32) = 304;
  String.init(format:_:)();
  NSString v58 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v59 = [v2 UUIDWithString:v58];

  *(void *)(v0 + 488) = v59;
  *(void *)(v0 + 496) = 0xD00000000000002DLL;
  *(void *)(v0 + 504) = 0x80000001002381E0;
  uint64_t v60 = swift_allocObject();
  *(_OWORD *)(v60 + 16) = xmmword_100240BE0;
  *(void *)(v60 + 56) = &type metadata for UInt32;
  *(void *)(v60 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v60 + 32) = 305;
  String.init(format:_:)();
  NSString v61 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v62 = [v2 UUIDWithString:v61];

  *(void *)(v0 + 512) = v62;
  *(void *)(v0 + 520) = 0xD00000000000001BLL;
  *(void *)(v0 + 528) = 0x8000000100238210;
  uint64_t v63 = swift_allocObject();
  *(_OWORD *)(v63 + 16) = xmmword_100240BE0;
  *(void *)(v63 + 56) = &type metadata for UInt32;
  *(void *)(v63 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v63 + 32) = 625;
  String.init(format:_:)();
  NSString v64 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v65 = [v2 UUIDWithString:v64];

  *(void *)(v0 + 536) = v65;
  *(void *)(v0 + 544) = 0xD000000000000011;
  *(void *)(v0 + 552) = 0x8000000100238230;
  uint64_t v66 = swift_allocObject();
  *(_OWORD *)(v66 + 16) = xmmword_100240BE0;
  *(void *)(v66 + 56) = &type metadata for UInt32;
  *(void *)(v66 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v66 + 32) = 626;
  String.init(format:_:)();
  NSString v67 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v68 = [v2 UUIDWithString:v67];

  *(void *)(v0 + 560) = v68;
  *(void *)(v0 + 568) = 0xD000000000000019;
  *(void *)(v0 + 576) = 0x8000000100238250;
  uint64_t v69 = swift_allocObject();
  *(_OWORD *)(v69 + 16) = xmmword_100240BE0;
  *(void *)(v69 + 56) = &type metadata for UInt32;
  *(void *)(v69 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v69 + 32) = 312;
  String.init(format:_:)();
  NSString v70 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v71 = [v2 UUIDWithString:v70];

  *(void *)(v0 + 584) = v71;
  *(void *)(v0 + 592) = 0xD000000000000019;
  *(void *)(v0 + 600) = 0x8000000100238270;
  uint64_t v72 = swift_allocObject();
  *(_OWORD *)(v72 + 16) = xmmword_100240BE0;
  *(void *)(v72 + 56) = &type metadata for UInt32;
  *(void *)(v72 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v72 + 32) = 313;
  String.init(format:_:)();
  NSString v73 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v74 = [v2 UUIDWithString:v73];

  *(void *)(v0 + 608) = v74;
  *(void *)(v0 + 616) = 0xD000000000000023;
  *(void *)(v0 + 624) = 0x8000000100238290;
  uint64_t v75 = swift_allocObject();
  *(_OWORD *)(v75 + 16) = xmmword_100240BE0;
  *(void *)(v75 + 56) = &type metadata for UInt32;
  *(void *)(v75 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v75 + 32) = 544;
  String.init(format:_:)();
  NSString v76 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v77 = [v2 UUIDWithString:v76];

  *(void *)(v0 + 632) = v77;
  strcpy((char *)(v0 + 640), "Product Data");
  *(unsigned char *)(v0 + 653) = 0;
  *(_WORD *)(v0 + 654) = -5120;
  uint64_t v78 = swift_allocObject();
  *(_OWORD *)(v78 + 16) = xmmword_100240BE0;
  *(void *)(v78 + 56) = &type metadata for UInt32;
  *(void *)(v78 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v78 + 32) = 564;
  String.init(format:_:)();
  NSString v79 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v80 = [v2 UUIDWithString:v79];

  *(void *)(v0 + 656) = v80;
  *(void *)(v0 + 664) = 0xD000000000000019;
  *(void *)(v0 + 672) = 0x80000001002382C0;
  uint64_t v81 = swift_allocObject();
  *(_OWORD *)(v81 + 16) = xmmword_100240BE0;
  *(void *)(v81 + 56) = &type metadata for UInt32;
  *(void *)(v81 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v81 + 32) = 565;
  String.init(format:_:)();
  NSString v82 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v83 = [v2 UUIDWithString:v82];

  *(void *)(v0 + 680) = v83;
  *(void *)(v0 + 688) = 0xD000000000000016;
  *(void *)(v0 + 696) = 0x80000001002382E0;
  uint64_t v84 = swift_allocObject();
  *(_OWORD *)(v84 + 16) = xmmword_100240BE0;
  *(void *)(v84 + 56) = &type metadata for UInt32;
  *(void *)(v84 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v84 + 32) = 572;
  String.init(format:_:)();
  NSString v85 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v86 = [v2 UUIDWithString:v85];

  *(void *)(v0 + 704) = v86;
  *(void *)(v0 + 712) = 0xD000000000000022;
  *(void *)(v0 + 720) = 0x8000000100238300;
  uint64_t v87 = swift_allocObject();
  *(_OWORD *)(v87 + 16) = xmmword_100240BE0;
  *(void *)(v87 + 56) = &type metadata for UInt32;
  *(void *)(v87 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v87 + 32) = 586;
  String.init(format:_:)();
  NSString v88 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v89 = [v2 UUIDWithString:v88];

  *(void *)(v0 + 728) = v89;
  *(void *)(v0 + 736) = 0xD000000000000028;
  *(void *)(v0 + 744) = 0x8000000100238330;
  uint64_t v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_100240BE0;
  *(void *)(v90 + 56) = &type metadata for UInt32;
  *(void *)(v90 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v90 + 32) = 568;
  String.init(format:_:)();
  NSString v91 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v92 = [v2 UUIDWithString:v91];

  *(void *)(v0 + 752) = v92;
  *(void *)(v0 + 760) = 0xD00000000000001ELL;
  *(void *)(v0 + 768) = 0x8000000100238360;
  uint64_t v93 = swift_allocObject();
  *(_OWORD *)(v93 + 16) = xmmword_100240BE0;
  *(void *)(v93 + 56) = &type metadata for UInt32;
  *(void *)(v93 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v93 + 32) = 588;
  String.init(format:_:)();
  NSString v94 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v95 = [v2 UUIDWithString:v94];

  *(void *)(v0 + 776) = v95;
  *(void *)(v0 + 784) = 0xD00000000000001BLL;
  *(void *)(v0 + 792) = 0x8000000100238380;
  uint64_t v96 = swift_allocObject();
  *(_OWORD *)(v96 + 16) = xmmword_100240BE0;
  *(void *)(v96 + 56) = &type metadata for UInt32;
  *(void *)(v96 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v96 + 32) = 589;
  String.init(format:_:)();
  NSString v97 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v98 = [v2 UUIDWithString:v97];

  *(void *)(v0 + 800) = v98;
  *(void *)(v0 + 808) = 0xD00000000000001ALL;
  *(void *)(v0 + 816) = 0x80000001002383A0;
  uint64_t v99 = swift_allocObject();
  *(_OWORD *)(v99 + 16) = xmmword_100240BE0;
  *(void *)(v99 + 56) = &type metadata for UInt32;
  *(void *)(v99 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v99 + 32) = 257;
  String.init(format:_:)();
  NSString v100 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v101 = [v2 UUIDWithString:v100];

  *(void *)(v0 + 824) = v101;
  *(void *)(v0 + 832) = 0x746F6F626552;
  *(void *)(v0 + 840) = 0xE600000000000000;
  uint64_t v102 = swift_allocObject();
  *(_OWORD *)(v102 + 16) = xmmword_100240BE0;
  *(void *)(v102 + 56) = &type metadata for UInt32;
  *(void *)(v102 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v102 + 32) = 258;
  String.init(format:_:)();
  NSString v103 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v104 = [v2 UUIDWithString:v103];

  *(void *)(v0 + 848) = v104;
  *(void *)(v0 + 856) = 1953259848;
  *(void *)(v0 + 864) = 0xE400000000000000;
  uint64_t v105 = swift_allocObject();
  *(_OWORD *)(v105 + 16) = xmmword_100240BE0;
  *(void *)(v105 + 56) = &type metadata for UInt32;
  *(void *)(v105 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v105 + 32) = 259;
  String.init(format:_:)();
  NSString v106 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v107 = [v2 UUIDWithString:v106];

  *(void *)(v0 + 872) = v107;
  strcpy((char *)(v0 + 880), "Return to Home");
  *(unsigned char *)(v0 + 895) = -18;
  uint64_t v108 = swift_allocObject();
  *(_OWORD *)(v108 + 16) = xmmword_100240BE0;
  *(void *)(v108 + 56) = &type metadata for UInt32;
  *(void *)(v108 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v108 + 32) = 260;
  String.init(format:_:)();
  NSString v109 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v110 = [v2 UUIDWithString:v109];

  *(void *)(v0 + 896) = v110;
  *(void *)(v0 + 904) = 0x797469636F6C6556;
  *(void *)(v0 + 912) = 0xE800000000000000;
  uint64_t v111 = swift_allocObject();
  *(_OWORD *)(v111 + 16) = xmmword_100240BE0;
  *(void *)(v111 + 56) = &type metadata for UInt32;
  *(void *)(v111 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v111 + 32) = 261;
  String.init(format:_:)();
  NSString v112 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v113 = [v2 UUIDWithString:v112];

  *(void *)(v0 + 920) = v113;
  *(void *)(v0 + 928) = 0x6E6F697469736F50;
  *(void *)(v0 + 936) = 0xE800000000000000;
  uint64_t v114 = swift_allocObject();
  *(_OWORD *)(v114 + 16) = xmmword_100240BE0;
  *(void *)(v114 + 56) = &type metadata for UInt32;
  *(void *)(v114 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v114 + 32) = 262;
  String.init(format:_:)();
  NSString v115 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v116 = [v2 UUIDWithString:v115];

  *(void *)(v0 + 944) = v116;
  *(void *)(v0 + 952) = 0xD000000000000015;
  *(void *)(v0 + 960) = 0x80000001002383C0;
  uint64_t v117 = swift_allocObject();
  *(_OWORD *)(v117 + 16) = xmmword_100240BE0;
  *(void *)(v117 + 56) = &type metadata for UInt32;
  *(void *)(v117 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v117 + 32) = 263;
  String.init(format:_:)();
  NSString v118 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v119 = [v2 UUIDWithString:v118];

  *(void *)(v0 + 968) = v119;
  *(void *)(v0 + 976) = 0x7373657250;
  *(void *)(v0 + 984) = 0xE500000000000000;
  uint64_t v120 = swift_allocObject();
  *(_OWORD *)(v120 + 16) = xmmword_100240BE0;
  *(void *)(v120 + 56) = &type metadata for UInt32;
  *(void *)(v120 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v120 + 32) = 801;
  String.init(format:_:)();
  NSString v121 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v122 = [v2 UUIDWithString:v121];

  *(void *)(v0 + 992) = v122;
  *(void *)(v0 + 1000) = 0x5420726F736E6553;
  *(void *)(v0 + 1008) = 0xEB00000000657079;
  uint64_t v123 = swift_allocObject();
  *(_OWORD *)(v123 + 16) = xmmword_100240BE0;
  *(void *)(v123 + 56) = &type metadata for UInt32;
  *(void *)(v123 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v123 + 32) = 802;
  String.init(format:_:)();
  NSString v124 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v125 = [v2 UUIDWithString:v124];

  *(void *)(v0 + 1016) = v125;
  *(void *)(v0 + 1024) = 0x4420726F736E6553;
  *(void *)(v0 + 1032) = 0xEB00000000617461;
  uint64_t v126 = swift_allocObject();
  *(_OWORD *)(v126 + 16) = xmmword_100240BE0;
  *(void *)(v126 + 56) = &type metadata for UInt32;
  *(void *)(v126 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v126 + 32) = 264;
  String.init(format:_:)();
  NSString v127 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v128 = [v2 UUIDWithString:v127];

  *(void *)(v0 + 1040) = v128;
  strcpy((char *)(v0 + 1048), "Motion Status");
  *(_WORD *)(v0 + 1062) = -4864;
  uint64_t v129 = swift_allocObject();
  *(_OWORD *)(v129 + 16) = xmmword_100240BE0;
  *(void *)(v129 + 56) = &type metadata for UInt32;
  *(void *)(v129 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v129 + 32) = 265;
  String.init(format:_:)();
  NSString v130 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v131 = [v2 UUIDWithString:v130];

  *(void *)(v0 + 1064) = v131;
  *(void *)(v0 + 1072) = 0xD00000000000001CLL;
  *(void *)(v0 + 1080) = 0x80000001002383E0;
  uint64_t v132 = swift_allocObject();
  *(_OWORD *)(v132 + 16) = xmmword_100240BE0;
  *(void *)(v132 + 56) = &type metadata for UInt32;
  *(void *)(v132 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v132 + 32) = 272;
  String.init(format:_:)();
  NSString v133 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v134 = [v2 UUIDWithString:v133];

  *(void *)(v0 + 1088) = v134;
  *(void *)(v0 + 1096) = 0x46206E6F69746F4DLL;
  *(void *)(v0 + 1104) = 0xEF6B636162646565;
  uint64_t v135 = swift_allocObject();
  *(_OWORD *)(v135 + 16) = xmmword_100240BE0;
  *(void *)(v135 + 56) = &type metadata for UInt32;
  *(void *)(v135 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v135 + 32) = 266;
  String.init(format:_:)();
  NSString v136 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v137 = [v2 UUIDWithString:v136];

  *(void *)(v0 + 1112) = v137;
  strcpy((char *)(v0 + 1120), "System Event");
  *(unsigned char *)(v0 + 1133) = 0;
  *(_WORD *)(v0 + 1134) = -5120;
  unint64_t result = sub_1001EA82C(v0);
  qword_1002B14E8 = result;
  return result;
}

void sub_10013CDA8(uint64_t a1, uint64_t a2)
{
  if (*(void *)&v2[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    if (a1)
    {
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = a1;
      *(void *)(v5 + 24) = a2;
      uint64_t v6 = (char **)&v2[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_connectOnActions];
      swift_beginAccess();
      NSString v7 = *v6;
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v6 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        NSString v7 = sub_1001023A4(0, *((void *)v7 + 2) + 1, 1, v7);
        *uint64_t v6 = v7;
      }
      unint64_t v10 = *((void *)v7 + 2);
      unint64_t v9 = *((void *)v7 + 3);
      if (v10 >= v9 >> 1)
      {
        NSString v7 = sub_1001023A4((char *)(v9 > 1), v10 + 1, 1, v7);
        *uint64_t v6 = v7;
      }
      *((void *)v7 + 2) = v10 + 1;
      id v11 = &v7[16 * v10];
      *((void *)v11 + 4) = &unk_1002AA610;
      *((void *)v11 + 5) = v5;
      swift_endAccess();
    }
    if (qword_1002A7C20 != -1) {
      swift_once();
    }
    uint64_t v12 = (void *)qword_1002B17A0;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = v2;
    v12;
    id v14 = v2;
    sub_1001DA690((uint64_t)sub_1000EA51C, v13);
    swift_release();
  }
  else
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      NSString v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "CB peripheral is nil", v16, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10013CFF4(uint64_t a1, uint64_t *a2, uint64_t *a3, int *a4)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a3;
  unint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  NSString v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v7;
  *NSString v7 = v4;
  v7[1] = sub_1000A69C4;
  return v9(v5, v6);
}

uint64_t sub_10013D0D8(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  sub_1000992E8(&qword_1002AA600);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  if (qword_1002A7B78 != -1) {
    swift_once();
  }
  uint64_t v6 = (void *)qword_1002AA590;
  *(void *)(inited + 32) = qword_1002AA590;
  long long v11 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(inited + 40) = v11;
  id v7 = v6;
  sub_10013E578((uint64_t)&v11);
  unint64_t v8 = sub_1001EAB38(inited);
  v10[3] = sub_1000992E8(&qword_1002AA5F8);
  v10[0] = v8;
  swift_beginAccess();
  sub_1001E0CF0((uint64_t)v10, v2, v4);
  return swift_endAccess();
}

uint64_t sub_10013D1F8()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v3 = v2;
  uint64_t v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_advData);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v6 = sub_10016DB60(v1, v3);
    if (v7)
    {
      sub_100099C1C(*(void *)(v5 + 56) + 32 * v6, (uint64_t)&v15);
    }
    else
    {
      long long v15 = 0u;
      long long v16 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v16 + 1))
  {
    sub_1000D0428((uint64_t)&v15);
    return 0;
  }
  sub_1000992E8(&qword_1002AA5F8);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  if (qword_1002A7B78 == -1)
  {
    if (!*(void *)(v14 + 16))
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_once();
    if (!*(void *)(v14 + 16)) {
      goto LABEL_15;
    }
  }
  id v8 = (id)qword_1002AA590;
  unint64_t v9 = sub_10016DED8((uint64_t)v8);
  if ((v10 & 1) == 0)
  {

    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(v14 + 56) + 16 * v9;
  uint64_t v12 = *(void *)v11;
  sub_1000A618C(*(void *)v11, *(void *)(v11 + 8));

  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_10013D3A0()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral);
  if (v1 && (id v2 = [v1 name]) != 0)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_deviceName);
    unint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_deviceName + 8);
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (!v6)
    {
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;
      char v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_advData);
      swift_beginAccess();
      uint64_t v11 = *v10;
      if (*(void *)(v11 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v12 = sub_10016DB60(v7, v9);
        if (v13)
        {
          sub_100099C1C(*(void *)(v11 + 56) + 32 * v12, (uint64_t)&v16);
        }
        else
        {
          long long v16 = 0u;
          long long v17 = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        long long v16 = 0u;
        long long v17 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v17 + 1))
      {
        if (swift_dynamicCast()) {
          return v15;
        }
      }
      else
      {
        sub_1000D0428((uint64_t)&v16);
      }
      return 0x6E776F6E6B6E55;
    }
    swift_bridgeObjectRetain();
  }
  return v4;
}

id sub_10013D560()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BTDevice();
  return [super dealloc];
}

uint64_t sub_10013D6F8()
{
  return type metadata accessor for BTDevice();
}

uint64_t type metadata accessor for BTDevice()
{
  uint64_t result = qword_1002AA5C8;
  if (!qword_1002AA5C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10013D74C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BTDeviceDiscoveryMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10013D928);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BTDeviceDiscoveryMode()
{
  return &type metadata for BTDeviceDiscoveryMode;
}

uint64_t destroy for BTDeviceDiscovery()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for BTDeviceDiscovery(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for BTDeviceDiscovery(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

__n128 initializeWithTake for BTDeviceDiscovery(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for BTDeviceDiscovery(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for BTDeviceDiscovery(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BTDeviceDiscovery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BTDeviceDiscovery()
{
  return &type metadata for BTDeviceDiscovery;
}

unint64_t sub_10013DD2C()
{
  unint64_t result = qword_1002AA5D8;
  if (!qword_1002AA5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AA5D8);
  }
  return result;
}

uint64_t sub_10013DD80()
{
  return sub_10013E534(&qword_1002AA5E0);
}

uint64_t sub_10013DDB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_id;
  uint64_t v4 = type metadata accessor for UUID();
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

id sub_10013DE2C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v9 = v4;
  Logger.init(subsystem:category:)();
  char v10 = &v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext];
  *(_OWORD *)char v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  v10[80] = 0;
  *(void *)&v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_connectOnActions] = &_swiftEmptyArrayStorage;
  v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryMode] = 0;
  uint64_t v11 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral;
  *(void *)&v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral] = 0;
  uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_advData;
  *(void *)&v9[v12] = sub_1001E9E0C((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)&v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate] = 0;
  *(void *)&v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_hapPeripheral] = 0;
  UUID.init()();
  char v13 = &v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_deviceName];
  *char v13 = a1;
  v13[1] = a2;
  uint64_t v14 = *(void **)&v9[v11];
  *(void *)&v9[v11] = a3;
  id v15 = a3;

  *(void *)&v9[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_rssi] = a4;
  id v16 = a4;

  v18.receiver = v9;
  v18.super_class = (Class)type metadata accessor for BTDevice();
  return [super init];
}

id sub_10013DF98()
{
  unint64_t v1 = v0;
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  uint64_t v4 = (void *)&unk_1002B1000;
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = 0x6E776F6E6B6E55;
    uint64_t v6 = swift_slowAlloc();
    v36[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    type metadata accessor for UUID();
    sub_10013E534(&qword_1002AA860);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = sub_1000993AC(v7, v8, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    uint64_t v9 = *(void **)&v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
    if (v9 && (id v10 = [v9 name]) != 0)
    {
      uint64_t v11 = v10;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;
    }
    else
    {
      unint64_t v13 = 0xE700000000000000;
    }
    uint64_t v37 = sub_1000993AC(v5, v13, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s connected to %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v4 = &unk_1002B1000;
  }
  else
  {
  }
  uint64_t v14 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate;
  id v15 = *(void **)&v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate];
  if (v15) {
    [v15 didConnect];
  }
  uint64_t v16 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryMode;
  if (!v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryMode])
  {
    id result = *(id *)&v1[v14];
    if (!result) {
      return result;
    }
    id v32 = &selRef_didFinishDiscovery_;
    return [result *v32:0:v33:v34:v35:v36[0]];
  }
  long long v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    NSString v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Discovering services!", v19, 2u);
    swift_slowDealloc();
  }

  uint64_t v20 = v1[v16];
  unint64_t v21 = sub_1001EB0E0((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v22 = sub_1001EB100((uint64_t)_swiftEmptyArrayStorage);
  id v23 = &v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext];
  swift_beginAccess();
  uint64_t v24 = *(void *)v23;
  uint64_t v25 = *((void *)v23 + 1);
  uint64_t v26 = *((void *)v23 + 8);
  uint64_t v27 = *((void *)v23 + 9);
  char v28 = v23[80];
  *(void *)id v23 = v20;
  *((void *)v23 + 1) = _swiftEmptyArrayStorage;
  *((void *)v23 + 2) = _swiftEmptyArrayStorage;
  *((void *)v23 + 3) = _swiftEmptyArrayStorage;
  *((void *)v23 + 4) = _swiftEmptyArrayStorage;
  *((void *)v23 + 5) = _swiftEmptyArrayStorage;
  *((void *)v23 + 6) = _swiftEmptyArrayStorage;
  *((void *)v23 + 7) = _swiftEmptyArrayStorage;
  *((void *)v23 + 8) = v21;
  *((void *)v23 + 9) = v22;
  v23[80] = 0;
  LOBYTE(v35) = v28;
  uint64_t v33 = v26;
  uint64_t v34 = v27;
  sub_1000F8FDC(v24, v25);
  uint64_t v30 = sub_10013AAEC();
  if (*(void *)(v29 + 8)) {
    *(unsigned char *)(v29 + 80) = 1;
  }
  ((void (*)(uint64_t *, void))v30)(v36, 0);
  id result = *(id *)&v1[v4[162]];
  if (result)
  {
    id v32 = &selRef_discoverServices_;
    return [result *v32:0:v33:v34:v35:v36[0]];
  }
  return result;
}

id sub_10013E374()
{
  unint64_t v1 = v0;
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v9 = v5;
    type metadata accessor for UUID();
    sub_10013E534(&qword_1002AA860);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_1000993AC(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s disconnected", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id result = *(id *)&v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate];
  if (result) {
    return [result didDisconnect];
  }
  return result;
}

uint64_t sub_10013E534(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10013E578(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013E5A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013E5E8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10013E620(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v8 = *(int **)(v3 + 16);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_1000A5ED8;
  id v10 = (uint64_t (*)(uint64_t, uint64_t *, uint64_t *, int *))((char *)&dword_1002AA608 + dword_1002AA608);
  return v10(a1, a2, a3, v8);
}

uint64_t sub_10013E6F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013E71C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v20 = *(void *)(v4 - 8);
  uint64_t v21 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_1000A618C(a1, a2);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)();
  Swift::UInt8_optional v7 = Data.Iterator.next()();
  if ((*(_WORD *)&v7 & 0x100) == 0)
  {
    Swift::UInt8 value = v7.value;
    long long v22 = xmmword_100240BE0;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = String.count.getter();
      swift_bridgeObjectRelease();
      if (v9 <= 0) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = 58;
      }
      if (v9 <= 0) {
        uint64_t v11 = (void *)0xE000000000000000;
      }
      else {
        uint64_t v11 = (void *)0xE100000000000000;
      }
      sub_1000992E8((uint64_t *)&unk_1002A9F50);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = v22;
      *(void *)(v12 + 56) = &type metadata for UInt8;
      *(void *)(v12 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v12 + 32) = value;
      uint64_t v13 = String.init(format:_:)();
      id v15 = v14;
      v23._uint64_t countAndFlagsBits = v10;
      v23._object = v11;
      swift_bridgeObjectRetain();
      v16._uint64_t countAndFlagsBits = v13;
      v16._object = v15;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      Swift::UInt8_optional v17 = Data.Iterator.next()();
      Swift::UInt8 value = v17.value;
    }
    while ((*(_WORD *)&v17 & 0x100) == 0);
  }
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v21);
  uint64_t countAndFlagsBits = String.uppercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t sub_10013E988@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v5 = type metadata accessor for Data.Iterator();
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::UInt8_optional v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_1000A618C(a1, a2);
      sub_1000A618C(a1, a2);
      sub_1000A618C(a1, a2);
      break;
    default:
      break;
  }
  uint64_t v27 = v10;
  unint64_t v11 = 0xD000000000000018;
  Data.Iterator.init(_:at:)();
  uint64_t v25 = a1;
  unint64_t v26 = a2;
  sub_1000A6240(a1, a2);
  sub_10013ECE8();
  dispatch thunk of IteratorProtocol.next()();
  unint64_t v12 = 0x8000000100236980;
  if ((v33 & 1) == 0)
  {
    long long v29 = xmmword_100240BE0;
    do
    {
      char v13 = v32;
      sub_1000992E8((uint64_t *)&unk_1002A9F50);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = v29;
      *(void *)(v14 + 56) = &type metadata for UInt8;
      *(void *)(v14 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v14 + 32) = v13;
      uint64_t v15 = String.init(format:_:)();
      Swift::UInt8_optional v17 = v16;
      unint64_t v30 = v11;
      unint64_t v31 = v12;
      swift_bridgeObjectRetain();
      v18._uint64_t countAndFlagsBits = v15;
      v18._object = v17;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v11 = v30;
      unint64_t v12 = v31;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v33 != 1);
  }
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  sub_1000A6240(v25, v26);
  uint64_t v19 = (uint64_t)v27;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v28, v19, v20);
  }
  UUID.init()();
  return sub_10013ED40(v19);
}

unint64_t sub_10013ECE8()
{
  unint64_t result = qword_1002A8560;
  if (!qword_1002A8560)
  {
    type metadata accessor for Data.Iterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8560);
  }
  return result;
}

uint64_t sub_10013ED40(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002AAA20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10013EDA0(uint64_t a1)
{
  sub_1000992E8(&qword_1002A7F40);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1002413B0;
  UUID.uuid.getter();
  *(unsigned char *)(v2 + 32) = v3;
  UUID.uuid.getter();
  *(unsigned char *)(v2 + 33) = v4;
  UUID.uuid.getter();
  *(unsigned char *)(v2 + 34) = v5;
  UUID.uuid.getter();
  *(unsigned char *)(v2 + 35) = v6;
  UUID.uuid.getter();
  *(unsigned char *)(v2 + 36) = v7;
  UUID.uuid.getter();
  *(unsigned char *)(v2 + 37) = v8;
  uint64_t v9 = sub_1001038B0(v2);
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  return v9;
}

uint64_t sub_10013EE90(uint64_t a1, unint64_t a2)
{
  long long v27 = xmmword_100240D00;
  uint64_t v23 = 58;
  uint64_t v24 = 0xE100000000000000;
  long long v22 = &v23;
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_10017C910(0x7FFFFFFFFFFFFFFFLL, 1, sub_10013F1BC, (uint64_t)v21, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  char v6 = (unint64_t *)(v4 + 56);
  do
  {
    unint64_t v8 = *(v6 - 3);
    unint64_t v7 = *(v6 - 2);
    unint64_t v10 = *(v6 - 1);
    unint64_t v9 = *v6;
    swift_bridgeObjectRetain();
    if (Substring.distance(from:to:)() != 2 || !((v7 ^ v8) >> 14))
    {
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    if ((v9 & 0x1000000000000000) != 0)
    {
      LOWORD(v10) = sub_10017CF28(v8, v7, v10, v9, 16);
      swift_bridgeObjectRelease();
      if ((v10 & 0x100) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      if ((v9 & 0x2000000000000000) != 0)
      {
        uint64_t v23 = v10;
        uint64_t v24 = v9 & 0xFFFFFFFFFFFFFFLL;
        unint64_t v11 = &v23;
      }
      else if ((v10 & 0x1000000000000000) != 0)
      {
        unint64_t v11 = (uint64_t *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        unint64_t v11 = (uint64_t *)_StringObject.sharedUTF8.getter();
      }
      unsigned int v12 = sub_10013A0E8((uint64_t)v11, v8, v7, v10, v9, 16);
      LOBYTE(v10) = v12;
      int v13 = (v12 >> 8) & 1;
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
LABEL_13:
        uint64_t v14 = sub_1000992E8(&qword_1002AA620);
        uint64_t v25 = v14;
        unint64_t v26 = sub_10013F1DC();
        LOBYTE(v23) = v10;
        sub_1000A5DA4(&v23, v14);
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_100099BCC((uint64_t)&v23);
      }
    }
LABEL_4:
    v6 += 4;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  uint64_t v15 = 0;
  switch(*((void *)&v27 + 1) >> 62)
  {
    case 1:
      LODWORD(v16) = DWORD1(v27) - v27;
      if (__OFSUB__(DWORD1(v27), v27))
      {
        __break(1u);
LABEL_29:
        __break(1u);
      }
      uint64_t v16 = (int)v16;
LABEL_23:
      if (v16 == 6) {
        return v27;
      }
      sub_1000A6240(v27, *((unint64_t *)&v27 + 1));
      break;
    case 2:
      uint64_t v18 = *(void *)(v27 + 16);
      uint64_t v17 = *(void *)(v27 + 24);
      BOOL v19 = __OFSUB__(v17, v18);
      uint64_t v16 = v17 - v18;
      if (!v19) {
        goto LABEL_23;
      }
      goto LABEL_29;
    case 3:
      return v15;
    default:
      uint64_t v16 = BYTE14(v27);
      goto LABEL_23;
  }
  return 0;
}

uint64_t sub_10013F1BC(void *a1)
{
  return sub_10017DA98(a1, *(void **)(v1 + 16)) & 1;
}

unint64_t sub_10013F1DC()
{
  unint64_t result = qword_1002AA628;
  if (!qword_1002AA628)
  {
    sub_100099D14(&qword_1002AA620);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AA628);
  }
  return result;
}

uint64_t sub_10013F238(uint64_t result, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v2) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x10013F2B4);
      }
      uint64_t v2 = (int)v2;
LABEL_6:
      if (v2 != 6)
      {
LABEL_7:
        sub_1000A6240(result, a2);
        return 0;
      }
      return result;
    case 2uLL:
      uint64_t v4 = *(void *)(result + 16);
      uint64_t v3 = *(void *)(result + 24);
      BOOL v5 = __OFSUB__(v3, v4);
      uint64_t v2 = v3 - v4;
      if (!v5) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v2 = BYTE6(a2);
      goto LABEL_6;
  }
}

ValueMetadata *type metadata accessor for MACAddress()
{
  return &type metadata for MACAddress;
}

void sub_10013F2D4()
{
  uint64_t v1 = v0;
  sub_100146064();
  uint64_t v2 = swift_allocError();
  *uint64_t v3 = 0;
  uint64_t v4 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager;
  if (!*(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager)) {
    goto LABEL_8;
  }
  BOOL v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(*v5 + 16);
  if (!v7)
  {
LABEL_7:
    uint64_t *v5 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
LABEL_8:
    swift_errorRelease();
    unsigned int v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Bluetooth powered off, attempting to clear state.", v14, 2u);
      swift_slowDealloc();
    }

    swift_retain();
    sub_1001060E8();
    swift_release();
    *(unsigned char *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) = 0;
    uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
    uint64_t v16 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
    swift_retain();
    os_unfair_lock_lock(v16 + 4);
    swift_release();
    uint64_t v17 = (void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices);
    swift_beginAccess();
    *uint64_t v17 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    uint64_t v18 = *(os_unfair_lock_s **)(v1 + v15);
    swift_retain();
    os_unfair_lock_unlock(v18 + 4);
    swift_release();
    uint64_t v19 = *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device);
    if (v19)
    {
      uint64_t v20 = *(void **)(v19 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral);
      if (v20)
      {
        uint64_t v21 = swift_allocError();
        *long long v22 = 0;
        id v23 = v20;
        sub_10013F5BC(v23, v21);
        swift_errorRelease();
      }
    }
    *(unsigned char *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_enableOnPowerOn) = 1;
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = v6 + 40;
  while (1)
  {
    unint64_t v9 = *(void **)(v0 + v4);
    if (!v9) {
      break;
    }
    unint64_t v10 = *(void (**)(void *, uint64_t *))(v8 - 8);
    v25[0] = *(void *)(v0 + v4);
    uint64_t v24 = v2;
    swift_retain();
    id v11 = v9;
    v10(v25, &v24);
    swift_release();

    v8 += 16;
    if (!--v7)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  __break(1u);
}

BOOL sub_10013F5BC(void *a1, uint64_t a2)
{
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v28 = v4;
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      long long v27 = a1;
      id v11 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)id v11 = 136315138;
      swift_getErrorValue();
      uint64_t v12 = Error.localizedDescription.getter();
      v39[0] = sub_1000993AC(v12, v13, (uint64_t *)&aBlock);
      a1 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Reporting accessory disconnect due to error: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v4 = v28;
  }
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v14 = (char *)*(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  sub_1000D0DDC(a1, (uint64_t)&aBlock);
  uint64_t v15 = v35;
  if (v35)
  {
    sub_1000A6298(&aBlock, (uint64_t)v39);
    uint64_t v16 = *(void **)&v14[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
    sub_1000A5D40((uint64_t)v39, (uint64_t)v38);
    uint64_t v17 = v8;
    uint64_t v18 = a1;
    uint64_t v19 = (void *)swift_allocObject();
    v19[2] = v14;
    sub_1000A6298(v38, (uint64_t)(v19 + 3));
    v19[8] = v18;
    v19[9] = a2;
    uint64_t v36 = sub_100145C64;
    uint64_t v37 = v19;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v34 = sub_1001468DC;
    uint64_t v35 = &unk_100278190;
    uint64_t v20 = _Block_copy(&aBlock);
    swift_errorRetain();
    uint64_t v21 = v14;
    id v22 = v16;
    id v23 = v18;
    static DispatchQoS.unspecified.getter();
    char v32 = _swiftEmptyArrayStorage;
    sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000992E8((uint64_t *)&unk_1002A7F60);
    sub_100099CB8();
    uint64_t v24 = v31;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v24);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v30);
    sub_100099BCC((uint64_t)v39);
    swift_release();
  }
  else
  {

    sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AAA30);
  }
  return v15 != 0;
}

void sub_10013FAD4()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager;
  if (!*(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager))
  {
LABEL_8:
    uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_enableOnPowerOn;
    if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_enableOnPowerOn))
    {
      if (qword_1002A7C00 != -1) {
        swift_once();
      }
      uint64_t v11 = qword_1002B1628;
      uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      unint64_t v13 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain();
      os_unfair_lock_lock(v13 + 4);
      swift_release();
      uint64_t v14 = (unint64_t *)(v11 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
      swift_beginAccess();
      unint64_t v15 = *v14;
      uint64_t v16 = *(os_unfair_lock_s **)(v11 + v12);
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_unlock(v16 + 4);
      swift_release();
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v17)
      {
        if (*(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan))
        {
          swift_retain();
          sub_1000F11F4(1);
          swift_release();
        }
        *(unsigned char *)(v1 + v10) = 0;
      }
    }
    return;
  }
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 16);
  if (!v5)
  {
LABEL_7:
    *uint64_t v3 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = v4 + 40;
  while (1)
  {
    uint64_t v7 = *(void **)(v0 + v2);
    if (!v7) {
      break;
    }
    uint64_t v8 = *(void (**)(void *, uint64_t *))(v6 - 8);
    v19[0] = *(void *)(v0 + v2);
    uint64_t v18 = 0;
    swift_retain();
    id v9 = v7;
    v8(v19, &v18);
    swift_release();

    v6 += 16;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  __break(1u);
}

uint64_t sub_10013FD14(void *a1)
{
  uint64_t v2 = v1;
  switch((unint64_t)[a1 state])
  {
    case 0uLL:
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v4, v5)) {
        goto LABEL_19;
      }
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      uint64_t v7 = "Central state unknown, treat as power-off";
      break;
    case 1uLL:
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v4, v5)) {
        goto LABEL_19;
      }
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      uint64_t v7 = "Central resetting! Treat as power-off";
      break;
    case 2uLL:
      sub_100146064();
      uint64_t v14 = swift_allocError();
      *unint64_t v15 = 1;
      uint64_t v16 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager;
      if (*(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager))
      {
        uint64_t v17 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions);
        swift_beginAccess();
        uint64_t v18 = *v17;
        uint64_t v19 = *(void *)(*v17 + 16);
        if (v19)
        {
          swift_bridgeObjectRetain();
          uint64_t v20 = v18 + 40;
          do
          {
            uint64_t v21 = *(void **)(v2 + v16);
            if (!v21)
            {
              __break(1u);
              JUMPOUT(0x100140248);
            }
            id v22 = *(void (**)(uint64_t *, void *))(v20 - 8);
            v33[0] = *(void *)(v2 + v16);
            v30[0] = v14;
            swift_retain();
            id v23 = v21;
            v22(v33, v30);
            swift_release();

            v20 += 16;
            --v19;
          }
          while (v19);
          swift_bridgeObjectRelease();
        }
        *uint64_t v17 = (uint64_t)_swiftEmptyArrayStorage;
        swift_bridgeObjectRelease();
      }
      swift_errorRelease();
      goto LABEL_26;
    case 3uLL:
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v4, v5)) {
        goto LABEL_19;
      }
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      uint64_t v7 = "Central state unauthorized, treat as power-off";
      break;
    case 4uLL:
      goto LABEL_20;
    case 5uLL:
      [a1 setDelegate:v1];
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Central powered on", v26, 2u);
        swift_slowDealloc();
      }

      sub_10013FAD4();
      goto LABEL_26;
    default:
      id v8 = a1;
      id v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        v33[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136315138;
        [v8 state];
        type metadata accessor for CBManagerState(0);
        uint64_t v12 = String.init<A>(describing:)();
        v30[0] = sub_1000993AC(v12, v13, v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Not handling central manager state: %s", v11, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      goto LABEL_26;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
  swift_slowDealloc();
LABEL_19:

LABEL_20:
  sub_10013F2D4();
LABEL_26:
  sub_1000B9BD4(v2 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate, (uint64_t)v33, (uint64_t *)&unk_1002AA690);
  if (!v33[3]) {
    return sub_1000A61E4((uint64_t)v33, (uint64_t *)&unk_1002AA690);
  }
  sub_1000A5D40((uint64_t)v33, (uint64_t)v30);
  sub_1000A61E4((uint64_t)v33, (uint64_t *)&unk_1002AA690);
  uint64_t v27 = v31;
  uint64_t v28 = v32;
  sub_1000A5DA4(v30, v31);
  (*(void (**)(id, uint64_t, uint64_t))(v28 + 8))([a1 state], v27, v28);
  return sub_100099BCC((uint64_t)v30);
}

void sub_100140380(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v56 = a1;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSString v58 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  os_log_t v59 = *(os_log_t *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v57 = (char *)v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) == 2)
  {
    uint64_t v54 = v8;
    uint64_t v55 = v6;
    id v15 = a2;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(void *)&long long aBlock = v51;
      uint64_t v52 = v5;
      id v50 = v18;
      *(_DWORD *)uint64_t v18 = 136315138;
      v49[1] = v18 + 4;
      id v19 = [v15 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v20 = UUID.uuidString.getter();
      uint64_t v53 = v3;
      unint64_t v22 = v21;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      v67[0] = sub_1000993AC(v20, v22, (uint64_t *)&aBlock);
      uint64_t v5 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v3 = v53;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Peripheral %s connected", v50, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v26 = v15;
    swift_retain();
    sub_1001060E8();
    swift_release();
    *(unsigned char *)(v3 + v14) = 3;
    if (*(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan))
    {
      swift_retain();
      sub_1000F11F4(2);
      swift_release();
    }
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v27 = (char *)*(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    sub_1000D0DDC(v15, (uint64_t)&aBlock);
    if (v64)
    {
      sub_1000A6298(&aBlock, (uint64_t)v67);
      uint64_t v28 = *(void **)&v27[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
      sub_1000A5D40((uint64_t)v67, (uint64_t)v61);
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v27;
      sub_1000A6298(v61, v29 + 24);
      *(void *)(v29 + 64) = v15;
      id v65 = sub_100145F74;
      uint64_t v66 = v29;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v63 = sub_1001468DC;
      NSString v64 = &unk_100278370;
      uint64_t v30 = _Block_copy(&aBlock);
      id v31 = v26;
      uint64_t v32 = v27;
      id v33 = v28;
      uint64_t v34 = v57;
      static DispatchQoS.unspecified.getter();
      uint64_t v60 = _swiftEmptyArrayStorage;
      sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000992E8((uint64_t *)&unk_1002A7F60);
      sub_100099CB8();
      uint64_t v35 = v58;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v30);

      (*(void (**)(char *, uint64_t))(v55 + 8))(v35, v5);
      ((void (*)(char *, uint64_t))v59[1].isa)(v34, v54);
      sub_100099BCC((uint64_t)v67);
      swift_release();
    }
    else
    {
      sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AAA30);
      sub_1000EAB90();
      uint64_t v36 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device);
      if (v36)
      {
        sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
        id v37 = v36;
        uint64_t v38 = v5;
        uint64_t v53 = static OS_dispatch_queue.main.getter();
        uint64_t v39 = swift_allocObject();
        NSString v40 = v56;
        *(void *)(v39 + 16) = v37;
        *(void *)(v39 + 24) = v40;
        id v65 = sub_100145F08;
        uint64_t v66 = v39;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        uint64_t v63 = sub_1001468DC;
        NSString v64 = &unk_100278320;
        id v41 = _Block_copy(&aBlock);
        id v42 = v37;
        id v43 = v40;
        swift_release();
        id v44 = v57;
        static DispatchQoS.unspecified.getter();
        *(void *)&long long aBlock = _swiftEmptyArrayStorage;
        sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_1000992E8((uint64_t *)&unk_1002A7F60);
        sub_100099CB8();
        uint64_t v45 = v58;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        NSString v46 = (void *)v53;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v41);

        (*(void (**)(char *, uint64_t))(v55 + 8))(v45, v38);
        ((void (*)(char *, uint64_t))v59[1].isa)(v44, v54);
      }
    }
    sub_1000B9BD4(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate, (uint64_t)&aBlock, (uint64_t *)&unk_1002AA690);
    if (v64)
    {
      sub_1000A5D40((uint64_t)&aBlock, (uint64_t)v67);
      sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AA690);
      uint64_t v47 = v68;
      uint64_t v48 = v69;
      sub_1000A5DA4(v67, v68);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 24))(v26, 0, v47, v48);

      sub_100099BCC((uint64_t)v67);
    }
    else
    {

      sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AA690);
    }
  }
  else
  {
    os_log_t v59 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v23, "connection callback while in non-connecting state", v24, 2u);
      swift_slowDealloc();
    }
    os_log_t v25 = v59;
  }
}

uint64_t sub_100140D50(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (char *)result;
    uint64_t v7 = *sub_1000A5DA4(a2, a2[3]);
    return sub_100142958(v7, a3, a4, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100140E44(char *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = sub_1000A5DA4(a2, a2[3]);
  sub_100144734(*v7, (uint64_t)a4, a1);
  uint64_t v8 = *(void **)(*sub_1000A5DA4(a2, a2[3]) + 32);
  if (v8)
  {
    self;
    uint64_t v9 = swift_dynamicCastObjCClass();
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      id v11 = v8;
      if (a4) {
        a4 = (void *)_convertErrorToNSError(_:)();
      }
      v13[4] = MotionFeedback.init(positions:velocities:);
      v13[5] = 0;
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 1107296256;
      v13[2] = sub_100140F78;
      v13[3] = &unk_1002781B8;
      uint64_t v12 = _Block_copy(v13);
      [v10 handleDisconnectionWithError:a4 completionHandler:v12];
      _Block_release(v12);
    }
  }
}

uint64_t sub_100140F78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_100140FCC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v44 = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v49 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v47 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for DispatchQoS();
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v45 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = a2;
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v50 = v7;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    aBlock[0] = v42;
    id v41 = v18;
    *(_DWORD *)uint64_t v18 = 136315138;
    id v19 = [v14 identifier:v18 + 4];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v20 = UUID.uuidString.getter();
    uint64_t v43 = a3;
    unint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v55[0] = sub_1000993AC(v20, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a3 = v43;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Peripheral %s disconnected", v41, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  swift_retain();
  sub_1001060E8();
  swift_release();
  v4[OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode] = 0;
  if (*(void *)&v4[OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan])
  {
    swift_retain();
    sub_1000F11F4(3);
    swift_release();
  }
  os_log_type_t v23 = sub_1001DB130();
  id v24 = v14;
  uint64_t v25 = sub_100145A38((uint64_t)v23, v24);
  swift_bridgeObjectRelease();

  uint64_t v26 = v4;
  sub_100143468(v25, (uint64_t)v26);
  swift_release();

  if (!sub_10013F5BC(v24, a3))
  {
    uint64_t v27 = *(void **)&v26[OBJC_IVAR____TtC14dockaccessoryd6BTLink_device];
    if (v27)
    {
      *(void *)&v26[OBJC_IVAR____TtC14dockaccessoryd6BTLink_device] = 0;
      sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
      uint64_t v43 = static OS_dispatch_queue.main.getter();
      uint64_t v28 = (void *)swift_allocObject();
      uint64_t v29 = v44;
      v28[2] = v27;
      v28[3] = v29;
      v28[4] = a3;
      uint64_t v53 = sub_100145C24;
      uint64_t v54 = v28;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1001468DC;
      uint64_t v52 = &unk_100278140;
      uint64_t v30 = _Block_copy(aBlock);
      id v31 = v27;
      id v32 = v29;
      swift_errorRetain();
      swift_release();
      id v33 = v45;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000992E8((uint64_t *)&unk_1002A7F60);
      sub_100099CB8();
      uint64_t v34 = v47;
      uint64_t v35 = v50;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v36 = (void *)v43;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v30);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v34, v35);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v33, v48);
    }
  }
  sub_1000B9BD4((uint64_t)&v26[OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate], (uint64_t)aBlock, (uint64_t *)&unk_1002AA690);
  if (!v52) {
    return sub_1000A61E4((uint64_t)aBlock, (uint64_t *)&unk_1002AA690);
  }
  sub_1000A5D40((uint64_t)aBlock, (uint64_t)v55);
  sub_1000A61E4((uint64_t)aBlock, (uint64_t *)&unk_1002AA690);
  uint64_t v37 = v56;
  uint64_t v38 = v57;
  sub_1000A5DA4(v55, v56);
  (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v38 + 32))(v24, a3, v37, v38);
  return sub_100099BCC((uint64_t)v55);
}

uint64_t sub_100141658(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)v27 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v13 = (void *)((char *)v27 - v12);
  uint64_t v14 = __chkstk_darwin(v11);
  os_log_type_t v16 = (void *)((char *)v27 - v15);
  uint64_t v31 = a2;
  uint64_t v17 = *(int *)(v14 + 48);
  uint64_t v18 = a1[1];
  *os_log_type_t v16 = *a1;
  v16[1] = v18;
  sub_1000E9F88((uint64_t)a1 + v17, (uint64_t)v27 + v17 - v15);
  sub_1000B9BD4((uint64_t)v16, (uint64_t)v13, (uint64_t *)&unk_1002AA6B0);
  uint64_t v30 = v10;
  sub_100145DB0((uint64_t)v16, (uint64_t)v10);
  swift_bridgeObjectRetain();
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v33 = v29;
    *(_DWORD *)unint64_t v21 = 136315138;
    v27[1] = v21 + 4;
    uint64_t v28 = v21;
    uint64_t v22 = *(int *)(v4 + 48);
    uint64_t v23 = (uint64_t)v7 + v22;
    uint64_t v24 = *v13;
    unint64_t v25 = v13[1];
    *uint64_t v7 = *v13;
    v7[1] = v25;
    sub_1000E9F88((uint64_t)v13 + v22, (uint64_t)v7 + v22);
    swift_bridgeObjectRetain();
    sub_1000E9FEC(v23);
    uint64_t v32 = sub_1000993AC(v24, v25, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A61E4((uint64_t)v30, (uint64_t *)&unk_1002AA6B0);
    sub_1000A61E4((uint64_t)v13, (uint64_t *)&unk_1002AA6B0);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Removing discovered device after disconnect: %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_1000A61E4((uint64_t)v30, (uint64_t *)&unk_1002AA6B0);
    sub_1000A61E4((uint64_t)v13, (uint64_t *)&unk_1002AA6B0);
  }
  return sub_1001DB00C(*a1, a1[1]);
}

id sub_1001419B8(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v147 = a3;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  *(void *)&long long v146 = (char *)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  v144 = (char *)&v130 - v14;
  __chkstk_darwin(v13);
  os_log_type_t v16 = (char *)&v130 - v15;
  uint64_t v152 = type metadata accessor for DaemonAccessory();
  uint64_t v153 = &off_100279790;
  v151[0] = a1;
  uint64_t v17 = *(void **)(*sub_1000A5DA4(v151, v152) + 32);
  if (!v17)
  {
    swift_retain();
    return (id)sub_100099BCC((uint64_t)v151);
  }
  id v145 = a2;
  self;
  id v18 = (id)swift_dynamicCastObjCClass();
  swift_retain();
  if (!v18) {
    return (id)sub_100099BCC((uint64_t)v151);
  }
  uint64_t v138 = v12;
  id v141 = v17;
  id v19 = [v18 identifier];
  uint64_t v142 = v5;
  uint64_t v143 = v6;
  if (v19)
  {
    os_log_type_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v23 = 0;
  }
  BOOL v24 = v21;
  unint64_t v25 = v147;
  BOOL v26 = sub_1000E1660(v24, v23);
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
  unint64_t v135 = v25 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger;
  uint64_t v136 = v9 + 16;
  id v134 = v27;
  ((void (*)(char *))v27)(v16);
  uint64_t v28 = Logger.logObject.getter();
  uint64_t v29 = v9;
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v28, v30);
  uint64_t v139 = v8;
  uint64_t v137 = v9;
  LODWORD(v140) = v26;
  if (v31)
  {
    BOOL v32 = v26;
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    id v133 = v18;
    *(_DWORD *)uint64_t v33 = 136315138;
    v150[0] = v34;
    if (v32) {
      uint64_t v35 = 0x646572696150;
    }
    else {
      uint64_t v35 = 0x6465726961706E55;
    }
    if (v32) {
      unint64_t v36 = 0xE600000000000000;
    }
    else {
      unint64_t v36 = 0xE800000000000000;
    }
    uint64_t v149 = sub_1000993AC(v35, v36, v150);
    id v18 = v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v30, "Connected to %s accessory.", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v37 = *(void (**)(char *, uint64_t))(v29 + 8);
    uint64_t v38 = v139;
    v37(v16, v139);
  }
  else
  {

    uint64_t v37 = *(void (**)(char *, uint64_t))(v9 + 8);
    v37(v16, v8);
    uint64_t v38 = v8;
  }
  uint64_t v39 = v141;
  uint64_t v40 = *(void *)(*sub_1000A5DA4(v151, v152) + 16);
  uint64_t v41 = v142;
  uint64_t v42 = v143;
  if (v40)
  {
    uint64_t v43 = *(void **)(v40 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_hapPeripheral);
    if (v43) {
      [v43 connectedToCBPeripheral:v145 error:0];
    }
  }
  id v44 = v39;
  uint64_t v45 = v146;
  static Date.now.getter();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v49 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  uint64_t v47 = v42 + 8;
  uint64_t v48 = v49;
  v49(v45, v41);
  [v18 setConnectionStartTime:isa];

  [v18 handleConnectionWithPeripheral:v145 withError:0];
  if ((v140 & 1) != 0 && [v18 connectReason] != 7)
  {
    id v145 = v44;
    sub_1000992E8((uint64_t *)&unk_1002AA6C0);
    uint64_t v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = xmmword_100242050;
    uint64_t v72 = self;
    sub_1000992E8((uint64_t *)&unk_1002A9F50);
    uint64_t v73 = swift_allocObject();
    long long v146 = xmmword_100240BE0;
    *(_OWORD *)(v73 + 16) = xmmword_100240BE0;
    *(void *)(v73 + 56) = &type metadata for UInt32;
    *(void *)(v73 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v73 + 32) = 304;
    String.init(format:_:)();
    NSString v74 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v133 = v18;
    id v75 = [v72 UUIDWithString:v74];

    id v76 = [v75 UUIDString];
    uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v79 = v78;

    *(void *)(v71 + 32) = v77;
    *(void *)(v71 + 40) = v79;
    uint64_t v80 = swift_allocObject();
    *(_OWORD *)(v80 + 16) = v146;
    *(void *)(v80 + 56) = &type metadata for UInt32;
    *(void *)(v80 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v80 + 32) = 82;
    String.init(format:_:)();
    NSString v81 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v82 = [v72 UUIDWithString:v81];

    id v83 = [v82 UUIDString];
    uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v86 = v85;

    *(void *)(v71 + 48) = v84;
    *(void *)(v71 + 56) = v86;
    uint64_t v87 = swift_allocObject();
    *(_OWORD *)(v87 + 16) = v146;
    *(void *)(v87 + 56) = &type metadata for UInt32;
    *(void *)(v87 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v87 + 32) = 544;
    String.init(format:_:)();
    NSString v88 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v89 = [v72 UUIDWithString:v88];

    id v90 = [v89 UUIDString];
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v93 = v92;

    *(void *)(v71 + 64) = v91;
    *(void *)(v71 + 72) = v93;
    uint64_t v94 = swift_allocObject();
    *(_OWORD *)(v94 + 16) = v146;
    *(void *)(v94 + 56) = &type metadata for UInt32;
    *(void *)(v94 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v94 + 32) = 264;
    String.init(format:_:)();
    NSString v95 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v96 = [v72 UUIDWithString:v95];

    uint64_t v38 = v139;
    id v97 = [v96 UUIDString];

    uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v100 = v99;

    *(void *)(v71 + 80) = v98;
    *(void *)(v71 + 88) = v100;
    Class v101 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v133 discoverAccessoriesAndReadCharacteristicTypes:v101];

    unint64_t v54 = v147;
    uint64_t v102 = v138;
LABEL_62:
    uint64_t v126 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_haptics;
    if (*(void *)(v54 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_haptics))
    {
      v134(v102, v135, v38);
      NSString v127 = Logger.logObject.getter();
      os_log_type_t v128 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v127, v128))
      {
        uint64_t v129 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v129 = 0;
        _os_log_impl((void *)&_mh_execute_header, v127, v128, "done with haptics", v129, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v137 + 8))(v102, v38);
      *(void *)(v54 + v126) = 0;

      swift_release();
    }
    else
    {
    }
    return (id)sub_100099BCC((uint64_t)v151);
  }
  sub_1000A5D40((uint64_t)v151, (uint64_t)v150);
  sub_1000992E8(&qword_1002A82E0);
  if (!swift_dynamicCast())
  {

    return (id)sub_100099BCC((uint64_t)v151);
  }
  id v131 = v48;
  uint64_t v132 = v37;
  uint64_t v143 = v47;
  uint64_t v50 = (void *)v149;
  uint64_t v51 = *(void *)(v149 + 16);
  if (v51)
  {
    uint64_t v52 = (void *)(v51 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_connectOnActions);
    swift_beginAccess();
    *uint64_t v52 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
  id v133 = v50;
  id v145 = v44;
  id result = [v18 identifier];
  unint64_t v54 = v147;
  if (result)
  {
    uint64_t v55 = result;
    uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v58 = v57;

    os_log_t v59 = (unint64_t *)(v54 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
    swift_beginAccess();
    unint64_t v60 = *v59;
    unint64_t v148 = v60;
    if (v60 >> 62) {
      goto LABEL_48;
    }
    unint64_t v61 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    for (; v61; unint64_t v61 = _CocoaArrayWrapper.endIndex.getter())
    {
      unint64_t v54 = v60 & 0xC000000000000001;
      id v141 = (id)(v60 & 0xFFFFFFFFFFFFFF8);
      unint64_t v140 = v60 + 32;
      while (!__OFSUB__(v61--, 1))
      {
        if (v54)
        {
          uint64_t v63 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v61 & 0x8000000000000000) != 0) {
            goto LABEL_46;
          }
          if (v61 >= *((void *)v141 + 2)) {
            goto LABEL_47;
          }
          uint64_t v63 = *(void *)(v140 + 8 * v61);
          swift_retain();
        }
        uint64_t v65 = *(void *)(v63 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
        unint64_t v64 = *(void *)(v63 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
        sub_1000A618C(v65, v64);
        uint64_t v66 = sub_10013E71C(v65, v64);
        uint64_t v68 = v67;
        sub_1000A6240(v65, v64);
        if (v66 == v56 && v68 == v58)
        {
          swift_release();
          swift_bridgeObjectRelease();
          char v70 = 0;
          unint64_t v54 = v147;
          goto LABEL_44;
        }
        uint64_t v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_release();
        swift_bridgeObjectRelease();
        if ((v38 & 1) != 0 || !v61)
        {
          unint64_t v54 = v147;
          char v70 = v38 ^ 1;
LABEL_44:
          uint64_t v38 = v139;
          goto LABEL_50;
        }
      }
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    char v70 = 1;
LABEL_50:
    uint64_t v103 = swift_bridgeObjectRelease();
    __chkstk_darwin(v103);
    *(&v130 - 2) = (uint64_t)&v148;
    id v104 = sub_1001620A8((void *(*)(uint64_t *__return_ptr, uint64_t *))sub_100145FC8, (uint64_t)(&v130 - 4), v61, v70 & 1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v104)
    {
      uint64_t v105 = (void *)*((void *)v133 + 4);
      uint64_t v102 = v138;
      if (v105)
      {
        NSString v106 = *(void **)(v54 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server);
        self;
        uint64_t v107 = swift_dynamicCastObjCClass();
        if (v107)
        {
          uint64_t v108 = (void *)v107;
          id v109 = objc_allocWithZone((Class)HAPAccessoryPairingRequest);
          id v110 = v106;
          id v111 = v105;
          id v112 = [v109 init];
          [v112 setRequiresUserConsent:1];
          [v112 setPairingIdentity:0];
          uint64_t v113 = v146;
          static Date.now.getter();
          Date.timeIntervalSince1970.getter();
          uint64_t v115 = v114;
          v131(v113, v142);
          *(void *)&v110[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_pairingInterval] = v115;
          [v108 startPairingWithRequest:v112];

          uint64_t v102 = v138;
        }
      }
    }
    else
    {
      id v116 = v144;
      v134(v144, v135, v38);
      uint64_t v117 = Logger.logObject.getter();
      os_log_type_t v118 = static os_log_type_t.error.getter();
      BOOL v119 = os_log_type_enabled(v117, v118);
      uint64_t v102 = v138;
      if (v119)
      {
        uint64_t v120 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v120 = 0;
        _os_log_impl((void *)&_mh_execute_header, v117, v118, "Ignoring connection for pair request without valid token", v120, 2u);
        swift_slowDealloc();
      }

      v132(v116, v38);
      *((unsigned char *)v133 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer) = 1;
      if (qword_1002A7C20 != -1) {
        swift_once();
      }
      NSString v121 = (void *)qword_1002B17A0;
      id v122 = *(void **)(*sub_1000A5DA4(v151, v152) + 16);
      uint64_t v123 = swift_allocObject();
      *(void *)(v123 + 16) = v121;
      *(void *)(v123 + 24) = v122;
      id v124 = v122;
      id v125 = v121;
      sub_1001DA690((uint64_t)sub_1000E7540, v123);

      swift_release();
    }
    if (qword_1002A7C20 != -1) {
      swift_once();
    }
    sub_1000EAB90();
    swift_release();
    goto LABEL_62;
  }
  __break(1u);
  return result;
}

uint64_t sub_100142958(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  id v82 = a4;
  uint64_t v83 = a3;
  uint64_t v75 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v72 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v71 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for DKBTConnectMetric();
  uint64_t v73 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v78 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000992E8(&qword_1002AA6A0);
  __chkstk_darwin(v12 - 8);
  id v76 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for Date();
  uint64_t v81 = *(void *)(v80 - 8);
  uint64_t v14 = __chkstk_darwin(v80);
  os_log_type_t v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v77 = (char *)&v64 - v17;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for DaemonAccessory();
  id v89 = &off_100279790;
  uint64_t v87 = a1;
  uint64_t v22 = *(void **)(*sub_1000A5DA4(&v87, v88) + 32);
  if (!v22)
  {
    swift_retain();
    return sub_100099BCC((uint64_t)&v87);
  }
  self;
  uint64_t v23 = (void *)swift_dynamicCastObjCClass();
  swift_retain();
  if (!v23) {
    return sub_100099BCC((uint64_t)&v87);
  }
  uint64_t v67 = v9;
  id v70 = v22;
  id v79 = v23;
  id v24 = [v23 identifier];
  uint64_t v66 = v8;
  if (v24)
  {
    unint64_t v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v28 = 0;
  }
  BOOL v29 = v26;
  os_log_type_t v30 = v82;
  BOOL v69 = sub_1000E1660(v29, v28);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, &v30[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v18);
  uint64_t v31 = v83;
  swift_errorRetain();
  swift_errorRetain();
  BOOL v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v68 = v6;
  if (v34)
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    uint64_t v65 = v5;
    *(_DWORD *)uint64_t v35 = 136315138;
    unint64_t v64 = v35 + 4;
    swift_getErrorValue();
    uint64_t v36 = Error.localizedDescription.getter();
    *(void *)&long long v86 = sub_1000993AC(v36, v37, aBlock);
    uint64_t v5 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to connect to peripheral: %s", v35, 0xCu);
    swift_arrayDestroy();
    uint64_t v31 = v83;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v38 = v80;
  uint64_t v39 = v81;
  uint64_t v40 = (void *)_convertErrorToNSError(_:)();
  [v79 handleConnectionWithPeripheral:v75 withError:v40];

  uint64_t v41 = *(void **)(*sub_1000A5DA4(&v87, v88) + 16);
  uint64_t v42 = v78;
  uint64_t v43 = v82;
  id v44 = v77;
  uint64_t v45 = v76;
  if (v41)
  {
    id v46 = v41;
    sub_1000F70A4(v31);
  }
  id v47 = [v79 connectionStartTime];
  if (v47)
  {
    uint64_t v48 = v47;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
    v49(v45, v16, v38);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v45, 0, 1, v38);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48))(v45, 1, v38);
    if (result != 1)
    {
      v49(v44, v45, v38);
      static Date.now.getter();
      Date.timeIntervalSince1970.getter();
      uint64_t v53 = *(void (**)(char *, uint64_t))(v39 + 8);
      uint64_t v52 = v39 + 8;
      uint64_t v51 = v53;
      v53(v16, v38);
      Date.timeIntervalSince1970.getter();
      swift_getErrorValue();
      Error.localizedDescription.getter();
      [v79 connectReason];
      DKBTConnectMetric.init(duration:error:reason:)();
      DKBTConnectMetric.send()();
      uint64_t v54 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
      uint64_t v55 = *(os_unfair_lock_s **)&v43[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock];
      swift_retain();
      os_unfair_lock_lock(v55 + 4);
      swift_release();
      *(void *)&v43[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing] = 0;
      swift_release();
      uint64_t v56 = *(os_unfair_lock_s **)&v43[v54];
      swift_retain();
      os_unfair_lock_unlock(v56 + 4);
      swift_release();
      if (v69)
      {
        uint64_t v57 = *(void **)&v43[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
        sub_1000A5D40((uint64_t)&v87, (uint64_t)&v86);
        uint64_t v58 = swift_allocObject();
        *(void *)(v58 + 16) = v43;
        sub_1000A6298(&v86, v58 + 24);
        aBlock[4] = (uint64_t)sub_100145EBC;
        aBlock[5] = v58;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1001468DC;
        uint64_t aBlock[3] = (uint64_t)&unk_1002782D0;
        os_log_t v59 = _Block_copy(aBlock);
        id v60 = v57;
        unint64_t v61 = v43;
        uint64_t v81 = v52;
        id v62 = v71;
        static DispatchQoS.unspecified.getter();
        uint64_t v84 = _swiftEmptyArrayStorage;
        sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_1000992E8((uint64_t *)&unk_1002A7F60);
        sub_100099CB8();
        uint64_t v63 = v66;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v59);

        (*(void (**)(char *, uint64_t))(v68 + 8))(v63, v5);
        (*(void (**)(char *, uint64_t))(v72 + 8))(v62, v67);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v42, v74);
        v51(v44, v80);
        swift_release();
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v73 + 8))(v42, v74);
        v51(v44, v38);
      }
      return sub_100099BCC((uint64_t)&v87);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v45, 1, 1, v38);
  }
  __break(1u);
  return result;
}

uint64_t sub_100143468(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v27 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v4 = __chkstk_darwin(v27);
  uint64_t v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v25 - v7);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v25 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v26 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v29 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (v12)
  {
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v16 = v15 | (v14 << 6);
LABEL_5:
    uint64_t v17 = *(void *)(v29 + 56);
    uint64_t v18 = (uint64_t *)(*(void *)(v29 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = type metadata accessor for BTDiscoveredDevice();
    sub_1000E9F88(v17 + *(void *)(*(void *)(v21 - 8) + 72) * v16, (uint64_t)v8 + *(int *)(v27 + 48));
    *uint64_t v8 = v19;
    v8[1] = v20;
    sub_100145DB0((uint64_t)v8, (uint64_t)v6);
    swift_bridgeObjectRetain();
    sub_100141658(v6, v28);
    uint64_t result = sub_1000A61E4((uint64_t)v6, (uint64_t *)&unk_1002AA6B0);
    if (v2) {
      return swift_release();
    }
  }
  if (__OFADD__(v14++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v14 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v14);
  if (v23)
  {
LABEL_19:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v16 = __clz(__rbit64(v23)) + (v14 << 6);
    goto LABEL_5;
  }
  int64_t v24 = v14 + 1;
  if (v14 + 1 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v14 + 2;
  if (v14 + 2 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v14 + 3;
  if (v14 + 3 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v14 + 4;
  if (v14 + 4 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
LABEL_18:
    int64_t v14 = v24;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v14 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v14 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1001436F4(void *a1, uint64_t a2)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(a2 + 16) || (unint64_t v6 = sub_10016DB60(v4, v5), (v7 & 1) == 0))
  {
    long long v13 = 0u;
    long long v14 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  sub_100099C1C(*(void *)(a2 + 56) + 32 * v6, (uint64_t)&v13);
  swift_bridgeObjectRelease();
  if (!*((void *)&v14 + 1))
  {
LABEL_7:
    sub_1000A61E4((uint64_t)&v13, &qword_1002AA5F0);
    goto LABEL_8;
  }
  if (swift_dynamicCast()) {
    return v12;
  }
LABEL_8:
  id v9 = [a1 name];
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v9;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

uint64_t sub_100143804(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v64 = *(void *)(v12 - 8);
  uint64_t v65 = v12;
  __chkstk_darwin(v12);
  long long v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1001436F4(a1, a2);
  uint64_t v17 = v16;
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v18 = v15;
  uint64_t v61 = v9;
  id v19 = objc_allocWithZone((Class)type metadata accessor for BTDevice());
  id v20 = a3;
  id v21 = a1;
  uint64_t v22 = a1;
  id v23 = v21;
  id v62 = v22;
  int64_t v24 = (char *)sub_10013DE2C(v18, v17, v22, v20);

  uint64_t v25 = (uint64_t *)&v24[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_advData];
  swift_beginAccess();
  uint64_t *v25 = a2;
  uint64_t v63 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v26 = v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_filter;
  swift_beginAccess();
  sub_1000B9BD4(v26, (uint64_t)&aBlock, (uint64_t *)&unk_1002AA6D0);
  uint64_t v27 = *((void *)&v67 + 1);
  sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AA6D0);
  if (v27)
  {
    uint64_t result = sub_1000B9BD4(v26, (uint64_t)&aBlock, (uint64_t *)&unk_1002AA6D0);
    uint64_t v29 = *((void *)&v67 + 1);
    if (!*((void *)&v67 + 1))
    {
      __break(1u);
      goto LABEL_20;
    }
    os_log_type_t v30 = (uint64_t (**)(char *, uint64_t, uint64_t (*)()))v68;
    sub_1000A5DA4(&aBlock, *((uint64_t *)&v67 + 1));
    LOBYTE(v30) = v30[2](v24, v29, (uint64_t (*)())v30);
    sub_100099BCC((uint64_t)&aBlock);
    if (v30)
    {
      uint64_t v31 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match);
      uint64_t v32 = *(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match);
      if (v32)
      {
        uint64_t v33 = v31[1];
        sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
        swift_retain();
        uint64_t v59 = static OS_dispatch_queue.main.getter();
        BOOL v34 = (void *)swift_allocObject();
        v34[2] = v32;
        v34[3] = v33;
        uint64_t v58 = v33;
        v34[4] = v24;
        uint64_t v68 = sub_100145FEC;
        BOOL v69 = v34;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v67 = sub_1001468DC;
        *((void *)&v67 + 1) = &unk_100278438;
        uint64_t v35 = _Block_copy(&aBlock);
        id v60 = v31;
        uint64_t v36 = v24;
        unint64_t v37 = v35;
        sub_1000CC298(v32);
        uint64_t v38 = v36;
        swift_release();
        static DispatchQoS.unspecified.getter();
        *(void *)&long long aBlock = _swiftEmptyArrayStorage;
        sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_1000992E8((uint64_t *)&unk_1002A7F60);
        sub_100099CB8();
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v39 = (void *)v59;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        uint64_t v40 = v37;
        int64_t v24 = v36;
        uint64_t v31 = v60;
        _Block_release(v40);

        sub_1000BF118(v32);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v11, v8);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v14, v65);
      }
      uint64_t result = sub_1000B9BD4(v26, (uint64_t)&aBlock, (uint64_t *)&unk_1002AA6D0);
      uint64_t v41 = *((void *)&v67 + 1);
      if (*((void *)&v67 + 1))
      {
        uint64_t v42 = (uint64_t (**)(uint64_t, uint64_t (*)()))v68;
        uint64_t v43 = sub_1000A5DA4(&aBlock, *((uint64_t *)&v67 + 1));
        uint64_t v44 = *(void *)(v41 - 8);
        __chkstk_darwin(v43);
        id v46 = (char *)&v58 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v44 + 16))(v46);
        LOBYTE(v42) = v42[1](v41, (uint64_t (*)())v42);
        (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v41);
        sub_100099BCC((uint64_t)&aBlock);
        if ((v42 & 1) == 0)
        {
          uint64_t v47 = *v31;
          *uint64_t v31 = 0;
          v31[1] = 0;
          sub_1000BF118(v47);
          uint64_t v68 = 0;
          long long aBlock = 0u;
          long long v67 = 0u;
          swift_beginAccess();
          sub_1000EAFD4((uint64_t)&aBlock, v26);
          swift_endAccess();
        }
        goto LABEL_13;
      }
LABEL_20:
      __break(1u);
      return result;
    }
  }
  uint64_t v48 = *(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match);
  if (!v48)
  {
LABEL_13:

    goto LABEL_14;
  }
  uint64_t v49 = *(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match + 8);
  sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  swift_retain();
  uint64_t v50 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v51 = (void *)swift_allocObject();
  v51[2] = v48;
  v51[3] = v49;
  v51[4] = v24;
  uint64_t v68 = sub_100145FEC;
  BOOL v69 = v51;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v67 = sub_1001468DC;
  *((void *)&v67 + 1) = &unk_1002783E8;
  uint64_t v52 = _Block_copy(&aBlock);
  uint64_t v53 = v24;
  uint64_t v54 = v52;
  id v60 = v53;
  sub_1000CC298(v48);
  swift_release();
  static DispatchQoS.unspecified.getter();
  *(void *)&long long aBlock = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v54);

  sub_1000BF118(v48);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v14, v65);
LABEL_14:
  a1 = v62;
  a2 = v63;
LABEL_15:
  sub_1000B9BD4(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate, (uint64_t)&aBlock, (uint64_t *)&unk_1002AA690);
  if (!*((void *)&v67 + 1)) {
    return sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AA690);
  }
  sub_1000A5D40((uint64_t)&aBlock, (uint64_t)v70);
  sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AA690);
  uint64_t v55 = a1;
  uint64_t v56 = v71;
  uint64_t v57 = v72;
  sub_1000A5DA4(v70, v71);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v57 + 16))(v55, a2, v56, v57);
  return sub_100099BCC((uint64_t)v70);
}

uint64_t sub_100144090(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v43 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v40 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v38 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = a1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v36 = v5;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v35 = swift_slowAlloc();
    *(void *)&long long aBlock = v35;
    uint64_t v37 = v2;
    *(_DWORD *)uint64_t v16 = 136315138;
    id v17 = [v12 identifier:v16 + 4, v35];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v18 = UUID.uuidString.getter();
    unint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v51[0] = sub_1000993AC(v18, v20, (uint64_t *)&aBlock);
    uint64_t v3 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Peripheral %s failed to connect", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v5 = v36;
    swift_slowDealloc();
  }
  else
  {
  }
  swift_retain();
  sub_1001060E8();
  swift_release();
  *(unsigned char *)(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) = 0;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v21 = (char *)*(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  sub_1000D0DDC(v12, (uint64_t)&aBlock);
  if (v47)
  {
    sub_1000A6298(&aBlock, (uint64_t)v51);
    if (v43)
    {
      uint64_t v22 = *(void **)&v21[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
      sub_1000A5D40((uint64_t)v51, (uint64_t)v50);
      id v23 = (void *)swift_allocObject();
      v23[2] = v21;
      sub_1000A6298(v50, (uint64_t)(v23 + 3));
      uint64_t v24 = v43;
      v23[8] = v12;
      v23[9] = v24;
      uint64_t v48 = sub_100145E6C;
      uint64_t v49 = v23;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      id v46 = sub_1001468DC;
      uint64_t v47 = &unk_100278280;
      uint64_t v25 = _Block_copy(&aBlock);
      id v26 = v12;
      uint64_t v27 = v21;
      id v28 = v22;
      swift_errorRetain();
      uint64_t v29 = v38;
      static DispatchQoS.unspecified.getter();
      uint64_t v44 = _swiftEmptyArrayStorage;
      sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000992E8((uint64_t *)&unk_1002A7F60);
      sub_100099CB8();
      os_log_type_t v30 = v40;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v25);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v5);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v41);
      sub_100099BCC((uint64_t)v51);
      swift_release();
    }
    else
    {
      sub_100099BCC((uint64_t)v51);
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AAA30);
  }
  sub_1000B9BD4(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate, (uint64_t)&aBlock, (uint64_t *)&unk_1002AA690);
  if (v47)
  {
    sub_1000A5D40((uint64_t)&aBlock, (uint64_t)v51);
    sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AA690);
    uint64_t v31 = v52;
    uint64_t v32 = v53;
    sub_1000A5DA4(v51, v52);
    (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v32 + 24))(v12, v43, v31, v32);

    return sub_100099BCC((uint64_t)v51);
  }
  else
  {

    return sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AA690);
  }
}

id sub_100144734(uint64_t a1, uint64_t a2, char *a3)
{
  id v90 = a3;
  uint64_t v80 = a2;
  uint64_t v84 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v85 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v5 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DKBTConnectMetric();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v79 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000992E8(&qword_1002AA6A0);
  __chkstk_darwin(v13 - 8);
  id v82 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for Date();
  uint64_t v86 = *(void *)(v89 - 8);
  uint64_t v15 = __chkstk_darwin(v89);
  uint64_t v83 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v81 = (char *)&v71 - v17;
  uint64_t v18 = (void *)type metadata accessor for Logger();
  uint64_t v88 = *(v18 - 1);
  __chkstk_darwin(v18);
  uint64_t v87 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93[3] = type metadata accessor for DaemonAccessory();
  v93[4] = &off_100279790;
  v93[0] = a1;
  sub_1000A5D40((uint64_t)v93, (uint64_t)aBlock);
  swift_retain();
  sub_1000992E8(&qword_1002A82E0);
  if (!swift_dynamicCast()) {
    return (id)sub_100099BCC((uint64_t)v93);
  }
  uint64_t v72 = v11;
  uint64_t v73 = v10;
  id v76 = v9;
  uint64_t v77 = v7;
  unint64_t v23 = (unint64_t)v92;
  BOOL v24 = *((unsigned char *)v92 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2;
  uint64_t v25 = v90;
  uint64_t v78 = v6;
  if (v24 || (id v26 = (void *)v92[4]) == 0)
  {
LABEL_6:
    uint64_t v39 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
    uint64_t v40 = *(os_unfair_lock_s **)&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock];
    swift_retain();
    os_unfair_lock_lock(v40 + 4);
    swift_release();
    *(void *)&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing] = 0;
    swift_release();
    uint64_t v41 = *(os_unfair_lock_s **)&v25[v39];
    swift_retain();
    os_unfair_lock_unlock(v41 + 4);
    swift_release();
    uint64_t v42 = *(void **)&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup];
    *(void *)&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup] = 0;

    uint64_t v43 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController;
    [*(id *)(v23 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController) deRegisterFromNotifications];
    [*(id *)(v23 + v43) invalidate];
    uint64_t v44 = *(void **)(v23 + v43);
    *(void *)(v23 + v43) = 0;

    uint64_t v45 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v22, 1, 1, v45);
    id v46 = (void *)swift_allocObject();
    v46[2] = 0;
    v46[3] = 0;
    v46[4] = v23;
    swift_retain();
    sub_1001BC1A8((uint64_t)v22, (uint64_t)&unk_1002AA6A8, (uint64_t)v46);
    swift_release();
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    id v75 = objc_retain(*(id *)(*(void *)(qword_1002B1628
                                        + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                            + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
    sub_10014A068(v23, 0, 0, 0, 0.0);
    uint64_t v47 = v89;
    uint64_t v48 = *(void **)(v23 + 32);
    uint64_t v49 = v86;
    uint64_t v50 = v83;
    if (!v48) {
      goto LABEL_17;
    }
    self;
    uint64_t v51 = swift_dynamicCastObjCClass();
    if (!v51) {
      goto LABEL_17;
    }
    uint64_t v52 = (void *)v51;
    uint64_t v53 = v47;
    id v90 = v48;
    id v54 = [v52 connectionStartTime];
    if (v54)
    {
      uint64_t v55 = v54;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v56 = v49;
      uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 32);
      uint64_t v58 = (uint64_t)v82;
      uint64_t v59 = v53;
      id v60 = v57;
      v57(v82, (uint64_t)v50, v59);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v58, 0, 1, v59);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v58, 1, v59) != 1)
      {
        uint64_t v74 = v5;
        v60(v81, v58, v59);
        static Date.now.getter();
        Date.timeIntervalSince1970.getter();
        uint64_t v61 = *(void (**)(char *, uint64_t))(v56 + 8);
        uint64_t v86 = v56 + 8;
        v61(v50, v59);
        Date.timeIntervalSince1970.getter();
        if (v80)
        {
          swift_getErrorValue();
          Error.localizedDescription.getter();
        }
        id v62 = v90;
        [v52 connectReason:v71];
        uint64_t v63 = v79;
        DKBTConnectMetric.init(duration:error:reason:)();
        DKBTConnectMetric.send()();

        (*(void (**)(char *, uint64_t))(v72 + 8))(v63, v73);
        v61(v81, v59);
        uint64_t v6 = v78;
        uint64_t v5 = v74;
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v58 = (uint64_t)v82;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v82, 1, 1, v53);
    }

    sub_1000A61E4(v58, &qword_1002AA6A0);
    uint64_t v6 = v78;
LABEL_17:
    uint64_t v64 = *(void **)&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = v25;
    *(void *)(v65 + 24) = v23;
    aBlock[4] = sub_100145DA8;
    aBlock[5] = v65;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001468DC;
    uint64_t aBlock[3] = &unk_100278230;
    uint64_t v66 = _Block_copy(aBlock);
    swift_retain();
    id v67 = v64;
    uint64_t v68 = v25;
    BOOL v69 = v76;
    static DispatchQoS.unspecified.getter();
    uint64_t v92 = _swiftEmptyArrayStorage;
    sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000992E8((uint64_t *)&unk_1002A7F60);
    sub_100099CB8();
    uint64_t v70 = v84;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v66);
    swift_release();

    (*(void (**)(char *, uint64_t))(v85 + 8))(v5, v70);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v69, v6);
    swift_release();
    return (id)sub_100099BCC((uint64_t)v93);
  }
  id v75 = v18;
  uint64_t v74 = v5;
  id v27 = *(id *)&v90[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
  id v28 = v26;
  id result = [v28 identifier];
  if (result)
  {
    os_log_type_t v30 = result;
    uint64_t v31 = v25;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

    uint64_t v35 = type metadata accessor for Errors();
    sub_1000C8E10((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v36 = swift_allocError();
    *uint64_t v37 = 0xD000000000000016;
    v37[1] = 0x8000000100238530;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, enum case for Errors.PairingError(_:), v35);
    unint64_t v38 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
    sub_100156E14(v32, v34, 5, v38, v36);
    swift_bridgeObjectRelease();

    swift_errorRelease();
    swift_bridgeObjectRelease();
    v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
    uint64_t v6 = v78;
    uint64_t v5 = v74;
    uint64_t v25 = v31;
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_10014554C(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v57 = a2;
  id v62 = a4;
  uint64_t v58 = a1;
  uint64_t v5 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v6 = __chkstk_darwin(v5);
  id v60 = (uint64_t *)((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin(v6);
  BOOL v69 = (uint64_t *)((char *)&v56 - v9);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v68 = (uint64_t *)((char *)&v56 - v11);
  __chkstk_darwin(v10);
  uint64_t v73 = (uint64_t *)((char *)&v56 - v12);
  uint64_t v13 = type metadata accessor for BTDiscoveredDevice();
  uint64_t v67 = *(void *)(v13 - 8);
  uint64_t result = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = 0;
  int64_t v17 = 0;
  uint64_t v18 = *(void *)(a3 + 64);
  uint64_t v63 = a3 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v64 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v70 = v5;
  uint64_t v61 = a3;
  uint64_t v66 = v16;
  while (1)
  {
    if (v21)
    {
      uint64_t v71 = (v21 - 1) & v21;
      int64_t v72 = v17;
      unint64_t v22 = __clz(__rbit64(v21)) | (v17 << 6);
      goto LABEL_19;
    }
    BOOL v23 = __OFADD__(v17, 1);
    int64_t v24 = v17 + 1;
    if (v23)
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v24 >= v64) {
      return sub_1001D0E88(v58, v57, v59, (void *)a3);
    }
    unint64_t v25 = *(void *)(v63 + 8 * v24);
    if (!v25) {
      break;
    }
LABEL_18:
    uint64_t v71 = (v25 - 1) & v25;
    int64_t v72 = v24;
    unint64_t v22 = __clz(__rbit64(v25)) + (v24 << 6);
LABEL_19:
    uint64_t v27 = *(void *)(a3 + 56);
    id v28 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v22);
    uint64_t v30 = *v28;
    uint64_t v29 = v28[1];
    uint64_t v31 = *(void *)(v67 + 72);
    unint64_t v65 = v22;
    sub_1000E9F88(v27 + v31 * v22, (uint64_t)v16);
    uint64_t v32 = *(int *)(v5 + 48);
    unint64_t v33 = v73;
    uint64_t v34 = (uint64_t)v73 + v32;
    void *v73 = v30;
    v33[1] = v29;
    sub_1000E9F88((uint64_t)v16, (uint64_t)v33 + v32);
    uint64_t v35 = *(int *)(v5 + 48);
    uint64_t v36 = v68;
    uint64_t v37 = (uint64_t)v68 + v35;
    *uint64_t v68 = v30;
    v36[1] = v29;
    sub_1000E9F88(v34, (uint64_t)v36 + v35);
    unint64_t v38 = *(void **)(v37 + 8);
    id v39 = v38;
    swift_bridgeObjectRetain_n();
    sub_1000E9FEC(v37);
    if (v38)
    {
      sub_100099C7C(0, (unint64_t *)&qword_1002AAA60);
      id v40 = v39;
      id v41 = v62;
      char v42 = static NSObject.== infix(_:_:)();

      uint64_t v5 = v70;
    }
    else
    {
      char v42 = 0;
    }
    uint64_t v43 = *(int *)(v5 + 48);
    uint64_t v44 = (uint64_t)v69;
    uint64_t v45 = (uint64_t)v69 + v43;
    *BOOL v69 = v30;
    *(void *)(v44 + 8) = v29;
    sub_1000E9F88(v34, v44 + v43);
    swift_bridgeObjectRetain();
    sub_1000A61E4((uint64_t)v73, (uint64_t *)&unk_1002AA6B0);
    if ((v42 & 1) == 0)
    {
      sub_1000A61E4(v44, (uint64_t *)&unk_1002AA6B0);
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    uint64_t v46 = *(int *)(v5 + 48);
    uint64_t v47 = v60;
    uint64_t v48 = (void *)((char *)v60 + v46);
    *id v60 = v30;
    v47[1] = v29;
    sub_1000E9F88(v45, (uint64_t)v47 + v46);
    sub_1000A61E4(v44, (uint64_t *)&unk_1002AA6B0);
    swift_bridgeObjectRelease();
    uint64_t v50 = v48[2];
    uint64_t v49 = v48[3];
    uint64_t v52 = v48[4];
    uint64_t v51 = v48[5];
    uint64_t v53 = v48[6];
    unint64_t v54 = v48[7];
    sub_1000EA048(v50, v49, v52, v51, v53, v54);
    uint64_t v55 = (uint64_t)v48;
    a3 = v61;
    sub_1000E9FEC(v55);
    if (v49)
    {
      sub_1000E94DC(v50, v49, v52, v51, v53, v54);
      uint64_t v16 = v66;
      sub_1000E9FEC((uint64_t)v66);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = v70;
      unint64_t v21 = v71;
      int64_t v17 = v72;
      if ((v51 & 0x10000) != 0)
      {
        *(unint64_t *)((char *)v58 + ((v65 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v65;
        BOOL v23 = __OFADD__(v59++, 1);
        if (v23) {
          goto LABEL_35;
        }
      }
    }
    else
    {
LABEL_5:
      uint64_t v16 = v66;
      sub_1000E9FEC((uint64_t)v66);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v5 = v70;
      unint64_t v21 = v71;
      int64_t v17 = v72;
    }
  }
  int64_t v26 = v24 + 1;
  if (v24 + 1 >= v64) {
    return sub_1001D0E88(v58, v57, v59, (void *)a3);
  }
  unint64_t v25 = *(void *)(v63 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v26 = v24 + 2;
  if (v24 + 2 >= v64) {
    return sub_1001D0E88(v58, v57, v59, (void *)a3);
  }
  unint64_t v25 = *(void *)(v63 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v26 = v24 + 3;
  if (v24 + 3 >= v64) {
    return sub_1001D0E88(v58, v57, v59, (void *)a3);
  }
  unint64_t v25 = *(void *)(v63 + 8 * v26);
  if (v25)
  {
LABEL_17:
    int64_t v24 = v26;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v24 >= v64) {
      return sub_1001D0E88(v58, v57, v59, (void *)a3);
    }
    unint64_t v25 = *(void *)(v63 + 8 * v24);
    ++v26;
    if (v25) {
      goto LABEL_18;
    }
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_100145A38(uint64_t a1, void *a2)
{
  char v4 = *(unsigned char *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  uint64_t v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v9 = (char *)&v15 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v9, 8 * v6);
    id v10 = v8;
    uint64_t v11 = sub_10014554C((unint64_t *)v9, v6, a1, v10);

    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, 8 * v6);
    id v13 = v8;
    uint64_t v11 = sub_10014554C((unint64_t *)v12, v6, a1, v13);

    swift_slowDealloc();
  }
  return v11;
}

uint64_t sub_100145BDC()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_100145C24()
{
  return sub_10013E374();
}

uint64_t sub_100145C48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100145C58()
{
  return swift_release();
}

void sub_100145C64()
{
  sub_100140E44(*(char **)(v0 + 16), (void *)(v0 + 24), *(void *)(v0 + 64), *(void **)(v0 + 72));
}

uint64_t sub_100145C74()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100145CB4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000A5ED8;
  return sub_1000DD7F4(a1, v4, v5, v6);
}

uint64_t sub_100145D68()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100145DA8()
{
  sub_1000DDABC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100145DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100145E1C()
{
  sub_100099BCC(v0 + 24);
  swift_errorRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100145E6C()
{
  return sub_100140D50(v0[2], v0 + 3, v0[8], v0[9]);
}

uint64_t sub_100145E7C()
{
  sub_100099BCC(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100145EBC()
{
  sub_1000DD790(*(void *)(v0 + 16), (void *)(v0 + 24));
}

uint64_t sub_100145EC8()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_100145F08()
{
  return sub_10013DF98();
}

uint64_t sub_100145F2C()
{
  sub_100099BCC(v0 + 24);

  return _swift_deallocObject(v0, 72, 7);
}

id sub_100145F74()
{
  unint64_t v1 = v0[2];
  uint64_t v2 = (void *)v0[8];
  uint64_t v3 = *sub_1000A5DA4(v0 + 3, v0[6]);

  return sub_1001419B8(v3, v2, v1);
}

unint64_t sub_100145FC8@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_100162314(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_100145FF4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100146034()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

unint64_t sub_100146064()
{
  unint64_t result = qword_1002AA6E0;
  if (!qword_1002AA6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AA6E0);
  }
  return result;
}

unsigned char *_s12PowerOnErrorOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100146184);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s12PowerOnErrorOMa()
{
  return &_s12PowerOnErrorON;
}

unint64_t sub_1001461C0()
{
  unint64_t result = qword_1002AA6E8;
  if (!qword_1002AA6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AA6E8);
  }
  return result;
}

id MockAttributes.service.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

void MockAttributes.service.setter(void *a1)
{
  id *v1 = a1;
}

void *MockAttributes.start.getter()
{
  id v1 = *(void **)(v0 + 8);
  id v2 = v1;
  return v1;
}

void MockAttributes.start.setter(uint64_t a1)
{
  *(void *)(v1 + 8) = a1;
}

void *MockAttributes.veloWrite.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void MockAttributes.veloWrite.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
}

dockaccessoryd::MotionFeedback (__swiftcall *MockAttributes.veloWrite.modify())(Swift::OpaquePointer positions, Swift::OpaquePointer velocities)
{
  return MotionFeedback.init(positions:velocities:);
}

void *MockAttributes.veloRead.getter()
{
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  return v1;
}

void MockAttributes.veloRead.setter(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
}

dockaccessoryd::MotionFeedback (__swiftcall *MockAttributes.veloRead.modify())(Swift::OpaquePointer positions, Swift::OpaquePointer velocities)
{
  return MotionFeedback.init(positions:velocities:);
}

void *MockAttributes.posWrite.getter()
{
  uint64_t v1 = *(void **)(v0 + 32);
  id v2 = v1;
  return v1;
}

void MockAttributes.posWrite.setter(uint64_t a1)
{
  *(void *)(v1 + 32) = a1;
}

dockaccessoryd::MotionFeedback (__swiftcall *MockAttributes.posWrite.modify())(Swift::OpaquePointer positions, Swift::OpaquePointer velocities)
{
  return MotionFeedback.init(positions:velocities:);
}

void *MockAttributes.posRead.getter()
{
  uint64_t v1 = *(void **)(v0 + 40);
  id v2 = v1;
  return v1;
}

void MockAttributes.posRead.setter(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
}

dockaccessoryd::MotionFeedback (__swiftcall *MockAttributes.posRead.modify())(Swift::OpaquePointer positions, Swift::OpaquePointer velocities)
{
  return MotionFeedback.init(positions:velocities:);
}

unint64_t static MockDockAccessory.getAccessoryDescription()()
{
  return 0xD0000000000002EDLL;
}

double static MockDockAccessory.getBLEAttributes(_:)@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t static MockDockAccessory.getDockCoreInfo(name:uuid:)()
{
  uint64_t v0 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v0 - 8);
  id v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    objc_allocWithZone((Class)type metadata accessor for DockCoreInfo());
    swift_bridgeObjectRetain();
    return DockCoreInfo.init(type:name:identifier:)();
  }
  return result;
}

void destroy for MockAttributes(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
}

void *initializeWithCopy for MockAttributes(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  unsigned int v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  uint64_t v7 = *(void **)(a2 + 32);
  uint64_t v8 = *(void **)(a2 + 40);
  a1[4] = v7;
  a1[5] = v8;
  id v9 = v3;
  id v10 = v4;
  id v11 = v5;
  id v12 = v6;
  id v13 = v7;
  id v14 = v8;
  return a1;
}

uint64_t assignWithCopy for MockAttributes(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  id v10 = *(void **)(a1 + 16);
  id v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  id v13 = *(void **)(a1 + 24);
  id v14 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v14;
  id v15 = v14;

  uint64_t v16 = *(void **)(a1 + 32);
  int64_t v17 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v17;
  id v18 = v17;

  uint64_t v19 = *(void **)(a1 + 40);
  uint64_t v20 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v20;
  id v21 = v20;

  return a1;
}

__n128 initializeWithTake for AccessoryAdvData(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MockAttributes(uint64_t a1, _OWORD *a2)
{
  unsigned int v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  id v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = a2[2];

  return a1;
}

uint64_t getEnumTagSinglePayload for MockAttributes(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MockAttributes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MockAttributes()
{
  return &type metadata for MockAttributes;
}

ValueMetadata *type metadata accessor for MockDockAccessory()
{
  return &type metadata for MockDockAccessory;
}

uint64_t sub_1001468DC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

BOOL static MotionType.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void MotionType.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int MotionType.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

id MotionValidator.__allocating_init(type:interval:)(char a1, double a2)
{
  char v4 = a1 & 1;
  id v5 = objc_allocWithZone(v2);
  return MotionValidator.init(type:interval:)(v4, a2);
}

id MotionValidator.init(type:interval:)(char a1, double a2)
{
  char v4 = a1 & 1;
  id v5 = v2;
  Logger.init(subsystem:category:)();
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer] = _swiftEmptyArrayStorage;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleStampedBufferImu] = _swiftEmptyArrayStorage;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationBuffer] = _swiftEmptyArrayStorage;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__pitchRateBuffer] = _swiftEmptyArrayStorage;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer] = 0;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationTimer] = 0;
  id v6 = &v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants];
  sub_1000992E8(&qword_1002A7C48);
  uint64_t v7 = (_OWORD *)swift_allocObject();
  v7[1] = xmmword_10023FD30;
  v7[2] = xmmword_10023FD40;
  v7[3] = xmmword_10023FD50;
  *(_OWORD *)id v6 = xmmword_10023FD60;
  *((void *)v6 + 2) = 0x3FC3333333333333;
  *((void *)v6 + 3) = 5;
  *((void *)v6 + 4) = 0x3FC3333333333333;
  *((void *)v6 + 5) = v7;
  *((_OWORD *)v6 + 3) = xmmword_10023FD70;
  uint64_t v8 = &v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationCallback];
  *uint64_t v8 = 0;
  v8[1] = 0;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__expiry] = 0x3FF0000000000000;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupTimeout] = 0x402E000000000000;
  id v9 = &v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback];
  *id v9 = 0;
  v9[1] = 0;
  v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator_type] = v4;
  *(double *)&v5[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__interval] = a2;

  v11.receiver = v5;
  v11.super_class = (Class)type metadata accessor for MotionValidator();
  return [super init];
}

uint64_t type metadata accessor for MotionValidator()
{
  uint64_t result = qword_1002AA790;
  if (!qword_1002AA790) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void MotionValidator.start(timedOutCallback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v6 = [v2 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  sub_100186888(v7, v9, 0, 0);
  swift_bridgeObjectRelease();
  id v10 = &v2[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer];
  swift_beginAccess();
  *(void *)id v10 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  objc_super v11 = &v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__pitchRateBuffer];
  swift_beginAccess();
  *(void *)objc_super v11 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  id v12 = &v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback];
  uint64_t v13 = *(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback];
  *(void *)id v12 = a1;
  *((void *)v12 + 1) = a2;
  swift_retain();
  sub_1000BF118(v13);
  *(void *)(swift_allocObject() + 16) = v3;
  objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
  id v14 = v3;
  uint64_t v15 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
  uint64_t v16 = *(void **)&v14[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer];
  *(void *)&v14[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer] = v15;

  sub_100147FA4();
}

void sub_100146DD8(uint64_t a1)
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_1000992E8(&qword_1002AA758);
  OS_dispatch_queue.sync<A>(execute:)();
  if (v47)
  {
    id v2 = [objc_allocWithZone((Class)NSDate) init];
    [v2 timeIntervalSince1970];
    uint64_t v4 = v3;

    id v5 = [v47 attitude];
    [v5 quaternion];
    simd_quatd.init(_:)(v6, v48);
    float64x2_t v45 = v7;
    float64x2_t __y = v8;

    int8x16_t v9 = (int8x16_t)vnegq_f64(v45);
    float64x2_t v10 = vmulq_f64(__y, (float64x2_t)xmmword_1002423B0);
    float64x2_t v11 = (float64x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)vnegq_f64(v10), 8uLL);
    float64x2_t v12 = vmlaq_f64(vmulq_f64(v45, (float64x2_t)0), (float64x2_t)0, (float64x2_t)vextq_s8(v9, (int8x16_t)v45, 8uLL));
    float64x2_t v13 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v45, v9, 8uLL), vmlaq_f64(vmulq_f64(v10, (float64x2_t)0), (float64x2_t)0, v11));
    float64x2_t v14 = vaddq_f64(v11, v12);
    float64x2_t v15 = vnegq_f64(v13);
    float64x2_t v16 = (float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)vnegq_f64(v14), 8uLL);
    float64x2_t v17 = vmlaq_n_f64(vmulq_laneq_f64(v15, v45, 1), (float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v15, 8uLL), v45.f64[0]);
    float64x2_t v18 = vmlaq_n_f64(vmulq_laneq_f64(v13, __y, 1), (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v13, 8uLL), __y.f64[0]);
    *(void *)&__y.f64[0] = *(_OWORD *)&vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v14, __y, 1), v16, __y.f64[0]), v17);
    float64x2_t v19 = vaddq_f64(v18, vmlaq_n_f64(vmulq_laneq_f64(v14, v45, 1), v16, v45.f64[0]));
    long double v20 = sqrt(vmuld_n_f64(v19.f64[0], v19.f64[0]) + vmuld_lane_f64(v19.f64[1], v19, 1));
    long double v21 = atan2(v19.f64[1], v19.f64[0]);
    long double v22 = atan2(__y.f64[0], v20);
    BOOL v23 = (void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleStampedBufferImu);
    swift_beginAccess();
    int64_t v24 = *v23;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void *v23 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int64_t v24 = sub_100102C50(0, v24[2] + 1, 1, v24);
      void *v23 = v24;
    }
    unint64_t v27 = v24[2];
    unint64_t v26 = v24[3];
    if (v27 >= v26 >> 1)
    {
      int64_t v24 = sub_100102C50((void *)(v26 > 1), v27 + 1, 1, v24);
      void *v23 = v24;
    }
    v24[2] = v27 + 1;
    id v28 = (long double *)&v24[3 * v27];
    v28[4] = v21;
    v28[5] = v22;
    *((void *)v28 + 6) = v4;
    uint64_t v29 = *v23;
    swift_endAccess();
    unint64_t v30 = v29[2];
    if (v30 >= 2)
    {
      uint64_t v31 = (double *)&v29[3 * v30];
      double v32 = *(v31 - 1) - v31[2];
      double v33 = *v31 - v31[3];
      uint64_t v34 = (void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__pitchRateBuffer);
      swift_beginAccess();
      uint64_t v35 = *v34;
      char v36 = swift_isUniquelyReferenced_nonNull_native();
      void *v34 = v35;
      if ((v36 & 1) == 0)
      {
        uint64_t v35 = sub_100102918(0, v35[2] + 1, 1, v35);
        void *v34 = v35;
      }
      unint64_t v38 = v35[2];
      unint64_t v37 = v35[3];
      double v39 = v32 / v33;
      if (v38 >= v37 >> 1)
      {
        uint64_t v35 = sub_100102918((void *)(v37 > 1), v38 + 1, 1, v35);
        void *v34 = v35;
      }
      v35[2] = v38 + 1;
      *(double *)&v35[v38 + 4] = v39;
      swift_endAccess();
    }
  }
  id v40 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer);
  if (v40)
  {
    id v41 = v40;
    dispatch thunk of RepeatingTimer.timeSinceInit()();
    double v43 = v42;

    if (v43 > 15.0)
    {
      uint64_t v44 = *(void (**)(uint64_t))(a1 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback);
      if (v44)
      {
        swift_retain();
        v44(1);
        sub_1000BF118((uint64_t)v44);
      }
    }
  }
}

void MotionValidator.startCalibrationMonitor(callback:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = &v2[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationCallback];
  uint64_t v5 = *(void *)&v2[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationCallback];
  *(void *)uint64_t v4 = a1;
  *((void *)v4 + 1) = a2;
  swift_retain();
  sub_1000BF118(v5);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v6 = [v3 description];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  sub_100186888(v7, v9, 0, 0);
  swift_bridgeObjectRelease();
  float64x2_t v10 = &v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationBuffer];
  swift_beginAccess();
  *(void *)float64x2_t v10 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  id v11 = objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
  swift_retain();
  uint64_t v12 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
  float64x2_t v13 = *(void **)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationTimer];
  *(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationTimer] = v12;
  swift_release();
}

void sub_10014733C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    sub_1000992E8(&qword_1002AA758);
    OS_dispatch_queue.sync<A>(execute:)();
    id v2 = v48;
    if (v48)
    {
      id v3 = [v48 attitude];
      [v3 quaternion];
      simd_quatd.init(_:)(v4, v49);
      float64x2_t v46 = v5;
      float64x2_t __y = v6;

      int8x16_t v7 = (int8x16_t)vnegq_f64(v46);
      float64x2_t v8 = vmulq_f64(__y, (float64x2_t)xmmword_1002423B0);
      float64x2_t v9 = (float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)vnegq_f64(v8), 8uLL);
      float64x2_t v10 = vmlaq_f64(vmulq_f64(v46, (float64x2_t)0), (float64x2_t)0, (float64x2_t)vextq_s8(v7, (int8x16_t)v46, 8uLL));
      float64x2_t v11 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v46, v7, 8uLL), vmlaq_f64(vmulq_f64(v8, (float64x2_t)0), (float64x2_t)0, v9));
      float64x2_t v12 = vaddq_f64(v9, v10);
      float64x2_t v13 = vnegq_f64(v11);
      float64x2_t v14 = (float64x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)vnegq_f64(v12), 8uLL);
      float64x2_t v15 = vmlaq_n_f64(vmulq_laneq_f64(v13, v46, 1), (float64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v13, 8uLL), v46.f64[0]);
      float64x2_t v16 = vmlaq_n_f64(vmulq_laneq_f64(v11, __y, 1), (float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v11, 8uLL), __y.f64[0]);
      *(void *)&__y.f64[0] = *(_OWORD *)&vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v12, __y, 1), v14, __y.f64[0]), v15);
      float64x2_t v17 = vaddq_f64(v16, vmlaq_n_f64(vmulq_laneq_f64(v12, v46, 1), v14, v46.f64[0]));
      long double v18 = sqrt(vmuld_n_f64(v17.f64[0], v17.f64[0]) + vmuld_lane_f64(v17.f64[1], v17, 1));
      long double v19 = atan2(v17.f64[1], v17.f64[0]);
      long double v20 = atan2(__y.f64[0], v18);
      id v21 = [objc_allocWithZone((Class)NSDate) init];
      [v21 timeIntervalSince1970];
      uint64_t v23 = v22;

      int64_t v24 = &v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationBuffer];
      swift_beginAccess();
      unint64_t v25 = *(double **)v24;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)int64_t v24 = v25;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v25 = (double *)sub_100102C50(0, *((void *)v25 + 2) + 1, 1, v25);
        *(void *)int64_t v24 = v25;
      }
      unint64_t v28 = *((void *)v25 + 2);
      unint64_t v27 = *((void *)v25 + 3);
      if (v28 >= v27 >> 1)
      {
        unint64_t v25 = (double *)sub_100102C50((void *)(v27 > 1), v28 + 1, 1, v25);
        *(void *)int64_t v24 = v25;
      }
      *((void *)v25 + 2) = v28 + 1;
      uint64_t v29 = &v25[3 * v28];
      v29[4] = v19;
      v29[5] = v20;
      *((void *)v29 + 6) = v23;
      unint64_t v30 = *(double **)v24;
      swift_endAccess();
      uint64_t v31 = *((void *)v30 + 2);
      if (v31)
      {
        double v32 = &v30[3 * v31];
        if (*(double *)&v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants + 48] < v32[3] - v30[6])
        {
          double v33 = v30[5];
          uint64_t v34 = v31 - 1;
          if (v34)
          {
            char v36 = v30 + 8;
            uint64_t v37 = v34;
            double v35 = v30[5];
            do
            {
              double v38 = *v36;
              v36 += 3;
              double v39 = v38;
              if (v38 < v35) {
                double v35 = v39;
              }
              --v37;
            }
            while (v37);
            id v40 = v30 + 8;
            do
            {
              double v41 = *v40;
              v40 += 3;
              double v42 = v41;
              if (v41 < v33) {
                double v33 = v42;
              }
              --v34;
            }
            while (v34);
          }
          else
          {
            double v35 = v30[5];
          }
          if (v35 - v33 < *(double *)&v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants + 56])
          {
            double v43 = *(void (**)(uint64_t, double))&v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationCallback];
            if (v43)
            {
              double v44 = v32[2];
              uint64_t v45 = swift_retain();
              v43(v45, v44);
              *(void *)int64_t v24 = _swiftEmptyArrayStorage;
              swift_bridgeObjectRelease();
              sub_1000BF118((uint64_t)v43);
            }
          }
          if (*(void *)(*(void *)v24 + 16))
          {
            swift_beginAccess();
            if (!*(void *)(*(void *)v24 + 16))
            {
              __break(1u);
              return;
            }
            sub_1001A4B08(0, 1);
            swift_endAccess();
            id v2 = v1;
            uint64_t v1 = v48;
          }
        }
      }
    }
  }
}

Swift::Void __swiftcall MotionValidator.stopCalibrationMonitor()()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationBuffer);
  swift_beginAccess();
  void *v1 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationTimer);
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__calibrationTimer) = 0;
}

Swift::Void __swiftcall MotionValidator.stop()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  int8x16_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  float64x2_t v8 = &v0[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer];
  swift_beginAccess();
  *(void *)float64x2_t v8 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  float64x2_t v9 = &v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__pitchRateBuffer];
  swift_beginAccess();
  *(void *)float64x2_t v9 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer;
  float64x2_t v11 = *(void **)&v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer];
  if (v11)
  {
    id v12 = v11;
    dispatch thunk of RepeatingTimer.cancel()();

    float64x2_t v11 = *(void **)&v1[v10];
  }
  *(void *)&v1[v10] = 0;

  sub_100148D98();
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_1002B1628;
  id v14 = [v1 description];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  long double v18 = (void *)swift_allocObject();
  v18[2] = v13;
  v18[3] = v15;
  v18[4] = v17;
  aBlock[4] = sub_1001491CC;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001468DC;
  uint64_t aBlock[3] = &unk_100278618;
  long double v19 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  unint64_t v25 = &_swiftEmptyArrayStorage;
  sub_1000EAF7C();
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v23);
  swift_bridgeObjectRelease();
  swift_release();
  long double v20 = &v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback];
  uint64_t v21 = *(void *)&v1[OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timedOutCallback];
  *(void *)long double v20 = 0;
  *((void *)v20 + 1) = 0;
  sub_1000BF118(v21);
}

Swift::Bool __swiftcall MotionValidator.startupInProgress()()
{
  return *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer) != 0;
}

uint64_t MotionValidator.registerMotion(completion:)(uint64_t a1, uint64_t a2)
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v5 = [v2 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  sub_100186888(v6, v8, a1, a2);

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall MotionValidator.unregisterMotion(dispatch:)(Swift::Bool dispatch)
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v3 = [v1 description];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  sub_100187868(v4, v6, dispatch);

  swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall MotionValidator.isPositionValid(deviceMotion:)(CMDeviceMotion_optional deviceMotion)
{
  uint64_t v2 = v1;
  Class isa = deviceMotion.value.super.super.isa;
  type metadata accessor for DockCoreManager();
  if ((static DockCoreManager.ignoreStartupValidation.getter() & 1) == 0)
  {
    unint64_t v5 = isa;
    if (isa) {
      goto LABEL_7;
    }
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    sub_1000992E8(&qword_1002AA758);
    OS_dispatch_queue.sync<A>(execute:)();
    unint64_t v5 = v34;
    if (v34)
    {
LABEL_7:
      unint64_t v6 = isa;
      id v7 = [v5 attitude];
      [v7 quaternion];
      simd_quatd.init(_:)(v8, v35);
      float64x2_t v32 = v9;
      float64x2_t v33 = v10;

      int8x16_t v11 = (int8x16_t)vnegq_f64(v32);
      float64x2_t v12 = vmulq_f64(v33, (float64x2_t)xmmword_1002423B0);
      float64x2_t v13 = (float64x2_t)vextq_s8((int8x16_t)v12, (int8x16_t)vnegq_f64(v12), 8uLL);
      float64x2_t v14 = vmlaq_f64(vmulq_f64(v32, (float64x2_t)0), (float64x2_t)0, (float64x2_t)vextq_s8(v11, (int8x16_t)v32, 8uLL));
      float64x2_t v15 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v32, v11, 8uLL), vmlaq_f64(vmulq_f64(v12, (float64x2_t)0), (float64x2_t)0, v13));
      float64x2_t v16 = vaddq_f64(v13, v14);
      float64x2_t v17 = vnegq_f64(v15);
      float64x2_t v18 = (float64x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)vnegq_f64(v16), 8uLL);
      float64x2_t v19 = vmlaq_n_f64(vmulq_laneq_f64(v15, v33, 1), (float64x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v15, 8uLL), v33.f64[0]);
      *(void *)&v15.f64[0] = *(_OWORD *)&vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v16, v33, 1), v18, v33.f64[0]), vmlaq_n_f64(vmulq_laneq_f64(v17, v32, 1), (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v17, 8uLL), v32.f64[0]));
      float64x2_t v20 = vaddq_f64(v19, vmlaq_n_f64(vmulq_laneq_f64(v16, v32, 1), v18, v32.f64[0]));
      double v21 = atan2(v15.f64[0], sqrt(vmuld_n_f64(v20.f64[0], v20.f64[0]) + vmuld_lane_f64(v20.f64[1], v20, 1)));
      uint64_t v22 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants + 40);
      uint64_t v23 = *(void *)(v22 + 16);
      if (v23)
      {
        double v24 = v21;
        if (vabdd_f64(v21, *(double *)(v22 + 32)) < *(double *)(v22 + 40))
        {
LABEL_12:
          unint64_t v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v28, v29))
          {
            unint64_t v30 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)unint64_t v30 = 134217984;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v28, v29, "Startup position is invalid, pitch -> %f", v30, 0xCu);
            swift_slowDealloc();
          }

          Swift::Bool v4 = 0;
          goto LABEL_16;
        }
        unint64_t v25 = (double *)(v22 + 56);
        while (--v23)
        {
          double v27 = *(v25 - 1);
          double v26 = *v25;
          v25 += 2;
          if (vabdd_f64(v24, v27) < v26) {
            goto LABEL_12;
          }
        }
      }
      Swift::Bool v4 = 1;
      unint64_t v28 = v5;
LABEL_16:

      return v4;
    }
  }
  return 1;
}

Swift::Bool __swiftcall MotionValidator.isMotionValid()()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer)
    && (*(unsigned char *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator_type) & 1) == 0)
  {
    return sub_1001484E0();
  }
  else
  {
    return 1;
  }
}

void sub_100147FA4()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  Swift::Bool v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  unint64_t v6 = (char *)&v39 - v5;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1002B1628;
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  float64x2_t v9 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  float64x2_t v10 = *(void **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  int8x16_t v11 = *(os_unfair_lock_s **)(v7 + v8);
  id v45 = v10;
  swift_retain();
  os_unfair_lock_unlock(v11 + 4);
  swift_release();
  if (!v10) {
    return;
  }
  type metadata accessor for Actuator();
  static Actuator.Yaw.getter();
  id v44 = (id)dispatch thunk of DockCoreAccessory.getActuator(name:)();
  swift_bridgeObjectRelease();
  if (!v44)
  {
    id v36 = v45;
LABEL_16:

    return;
  }
  static Actuator.Pitch.getter();
  float64x2_t v12 = (void *)dispatch thunk of DockCoreAccessory.getActuator(name:)();
  swift_bridgeObjectRelease();
  if (!v12)
  {

    id v36 = v44;
    goto LABEL_16;
  }
  float64x2_t v13 = (char *)*(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  float64x2_t v14 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
  uint64_t v41 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v15 = *(id *)&v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  double v42 = v13;
  float64x2_t v16 = &v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v17 = *(void *)v16;
  uint64_t v18 = *(void *)(*(void *)v16 + 16);
  if (v18)
  {
    id v40 = v12;
    uint64_t v19 = v17 + 32;
    float64x2_t v20 = (void (**)(char *, uint64_t))(v1 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v19, (uint64_t)v46);
      id v21 = *(id *)(*sub_1000A5DA4(v46, v46[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v21) = static UUID.== infix(_:_:)();
      uint64_t v22 = *v20;
      (*v20)(v4, v0);
      v22(v6, v0);
      if (v21) {
        break;
      }
      sub_100099BCC((uint64_t)v46);
      v19 += 40;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        float64x2_t v12 = v40;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v37 = v42;
    id v38 = *(id *)&v42[v41];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v46, (uint64_t)&v47);
    sub_100099BCC((uint64_t)v46);

    float64x2_t v12 = v40;
    if (!*((void *)&v48 + 1)) {
      goto LABEL_20;
    }
  }
  else
  {
LABEL_11:
    uint64_t v23 = v42;
    id v24 = *(id *)&v42[v41];
    OS_dispatch_semaphore.signal()();

    uint64_t v49 = 0;
    long long v47 = 0u;
    long long v48 = 0u;

    if (!*((void *)&v48 + 1))
    {
LABEL_20:

      sub_100149664((uint64_t)&v47);
      return;
    }
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if (swift_dynamicCast())
  {
    uint64_t v25 = v46[0];
    double v26 = (void *)swift_allocObject();
    v26[2] = v43;
    id v27 = v44;
    uint64_t v26[3] = v44;
    v26[4] = v12;
    unint64_t v28 = *(os_unfair_lock_s **)(v25 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
    uint64_t v29 = __chkstk_darwin(v27);
    *(&v39 - 4) = v25;
    *(&v39 - 3) = (uint64_t)sub_100149728;
    *(&v39 - 2) = (uint64_t)v26;
    __chkstk_darwin(v29);
    *(&v39 - 2) = (uint64_t)sub_100149734;
    *(&v39 - 1) = v30;
    id v32 = v31;
    id v33 = v44;
    id v34 = v12;
    swift_retain();
    os_unfair_lock_lock(v28 + 4);
    sub_100135C58(v35);
    os_unfair_lock_unlock(v28 + 4);

    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
  }
}

uint64_t sub_1001484E0()
{
  uint64_t v1 = sub_100148830();
  int64_t v2 = v1[2];
  uint64_t v3 = v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants;
  if (*(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants + 24) >= v2)
  {
    swift_bridgeObjectRelease();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "minimum angle readings not met, force setting valid to true", v17, 2u);
      swift_slowDealloc();
    }

    return 1;
  }
  Swift::Bool v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "using precise startup validation", v6, 2u);
    swift_slowDealloc();
  }

  if (v2)
  {
    sub_1001DC544(0, v2, 0);
    uint64_t v7 = _swiftEmptyArrayStorage;
    unint64_t v8 = _swiftEmptyArrayStorage[2];
    float64x2_t v9 = (double *)(v1 + 7);
    int64_t v10 = v2;
    do
    {
      double v11 = *(v9 - 2);
      double v12 = *v9;
      id v27 = v7;
      unint64_t v13 = v7[3];
      unint64_t v14 = v8 + 1;
      if (v8 >= v13 >> 1)
      {
        sub_1001DC544(v13 > 1, v8 + 1, 1);
        uint64_t v7 = v27;
      }
      v7[2] = v14;
      *(double *)&v7[v8 + 4] = vabdd_f64(v11, v12);
      v9 += 4;
      ++v8;
      --v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    if (!v14)
    {
      double v19 = 0.0;
      goto LABEL_22;
    }
  }
  if (v14 >= 2)
  {
    uint64_t v20 = 0;
    unint64_t v18 = v14 & 0xFFFFFFFFFFFFFFFELL;
    double v19 = 0.0;
    do
    {
      double v19 = v19 + *(double *)&v7[v20 + 4] + *(double *)&v7[v20 + 5];
      v20 += 2;
    }
    while (v18 != v20);
    goto LABEL_21;
  }
  unint64_t v18 = 0;
  double v19 = 0.0;
  do
  {
    double v21 = *(double *)&v7[v18++ + 4];
    double v19 = v19 + v21;
LABEL_21:
    ;
  }
  while (v14 != v18);
LABEL_22:
  swift_bridgeObjectRelease();
  double v22 = v19 / (double)v2;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "pitchError is %f", v25, 0xCu);
    swift_slowDealloc();
  }

  if (v22 < *(double *)(v3 + 16))
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  sub_1001489EC((uint64_t)v1);
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_100148830()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = *(void *)(v2 + 32);
  double v5 = *(double *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  double v7 = *(double *)(v2 + 56);
  swift_bridgeObjectRetain();
  unint64_t v8 = _swiftEmptyArrayStorage;
  double v9 = 0.0;
  uint64_t v10 = 1;
  double v11 = v5;
LABEL_4:
  if (vabdd_f64(v11, v5) > 0.1)
  {
    double v9 = v7 - v11;
    goto LABEL_8;
  }
  int v12 = 1;
  while (v10 != v3)
  {
    uint64_t v13 = v2 + 32 + 32 * v10;
    uint64_t v4 = *(void *)v13;
    double v11 = *(double *)(v13 + 8);
    uint64_t v6 = *(void *)(v13 + 16);
    double v7 = *(double *)(v13 + 24);
    ++v10;
    if (v12) {
      goto LABEL_4;
    }
LABEL_8:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v8 = sub_1001025D4(0, v8[2] + 1, 1, v8);
    }
    unint64_t v15 = v8[2];
    unint64_t v14 = v8[3];
    if (v15 >= v14 >> 1) {
      unint64_t v8 = sub_1001025D4((void *)(v14 > 1), v15 + 1, 1, v8);
    }
    int v12 = 0;
    v8[2] = v15 + 1;
    os_log_type_t v16 = (double *)&v8[4 * v15];
    *((void *)v16 + 4) = v4;
    v16[5] = v11;
    *((void *)v16 + 6) = v6;
    v16[7] = v7 - v9;
  }
  swift_bridgeObjectRelease();
  if (v8[2] < *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__startupConstants + 24))
  {
    swift_bridgeObjectRelease();
    unint64_t v8 = (void *)*v1;
    swift_bridgeObjectRetain();
  }
  return v8;
}

uint64_t sub_1001489EC(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(swift_bridgeObjectRetain() + 56);
    do
    {
      uint64_t v3 = *(v2 - 2);
      uint64_t v4 = *v2;
      double v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = swift_slowAlloc();
        *(_DWORD *)uint64_t v7 = 134218240;
        *(void *)(v7 + 4) = v3;
        *(_WORD *)(v7 + 12) = 2048;
        *(void *)(v7 + 14) = v4;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "imu pitch %f acc pitch %f", (uint8_t *)v7, 0x16u);
        swift_slowDealloc();
      }

      v2 += 4;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

id MotionValidator.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void MotionValidator.init()()
{
}

id MotionValidator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MotionValidator();
  return [super dealloc];
}

uint64_t sub_100148D18()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100148D50()
{
  sub_100146DD8(*(void *)(v0 + 16));
}

uint64_t sub_100148D58()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100148D90()
{
}

void sub_100148D98()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  os_log_type_t v6 = (char *)&v31 - v5;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1002B1628;
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  double v9 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = *(void **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  double v11 = *(os_unfair_lock_s **)(v7 + v8);
  id v12 = v10;
  swift_retain();
  os_unfair_lock_unlock(v11 + 4);
  swift_release();
  if (v10)
  {
    uint64_t v35 = v1;
    uint64_t v13 = (char *)*(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    unint64_t v14 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    id v16 = *(id *)&v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    uint64_t v17 = &v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(*(void *)v17 + 16);
    if (v19)
    {
      uint64_t v32 = v15;
      id v33 = v13;
      id v34 = v12;
      uint64_t v20 = v18 + 32;
      double v21 = (void (**)(char *, uint64_t))(v35 + 8);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000A5D40(v20, (uint64_t)v36);
        id v22 = *(id *)(*sub_1000A5DA4(v36, v36[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v22) = static UUID.== infix(_:_:)();
        uint64_t v23 = *v21;
        (*v21)(v4, v0);
        v23(v6, v0);
        if (v22) {
          break;
        }
        sub_100099BCC((uint64_t)v36);
        v20 += 40;
        if (!--v19)
        {
          swift_bridgeObjectRelease();
          uint64_t v13 = v33;
          id v12 = v34;
          uint64_t v15 = v32;
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v29 = v33;
      id v30 = *(id *)&v33[v32];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v36, (uint64_t)&v37);
      sub_100099BCC((uint64_t)v36);

      id v12 = v34;
      if (!*((void *)&v38 + 1)) {
        goto LABEL_13;
      }
    }
    else
    {
LABEL_9:
      id v24 = *(id *)&v13[v15];
      OS_dispatch_semaphore.signal()();

      uint64_t v39 = 0;
      long long v37 = 0u;
      long long v38 = 0u;

      if (!*((void *)&v38 + 1))
      {
LABEL_13:

        sub_100149664((uint64_t)&v37);
        return;
      }
    }
    sub_1000992E8(&qword_1002A82E0);
    type metadata accessor for DaemonAccessory();
    uint64_t v25 = swift_dynamicCast();
    if (v25)
    {
      uint64_t v26 = v36[0];
      id v27 = *(os_unfair_lock_s **)(v36[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
      __chkstk_darwin(v25);
      *(&v31 - 2) = (uint64_t)sub_1001496C4;
      *(&v31 - 1) = v26;
      swift_retain();
      os_unfair_lock_lock(v27 + 4);
      sub_100134E64(v28);
      os_unfair_lock_unlock(v27 + 4);

      swift_release();
      swift_release();
    }
    else
    {
    }
  }
}

uint64_t sub_10014918C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1001491CC()
{
  sub_100187B6C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001491D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001491E8()
{
  return swift_release();
}

id sub_1001491F0@<X0>(void *a1@<X8>)
{
  return sub_10018834C(v1, a1);
}

unint64_t sub_100149210()
{
  unint64_t result = qword_1002AA760;
  if (!qword_1002AA760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AA760);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MotionType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100149330);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MotionType()
{
  return &type metadata for MotionType;
}

uint64_t sub_100149368()
{
  return type metadata accessor for MotionValidator();
}

uint64_t sub_100149370()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t destroy for StartupParameters()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StartupParameters(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for StartupParameters(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

__n128 initializeWithTake for StartupParameters(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for StartupParameters(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartupParameters(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StartupParameters(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StartupParameters()
{
  return &type metadata for StartupParameters;
}

ValueMetadata *type metadata accessor for Angle2DStamped()
{
  return &type metadata for Angle2DStamped;
}

ValueMetadata *type metadata accessor for Angle2D()
{
  return &type metadata for Angle2D;
}

ValueMetadata *type metadata accessor for InvalalidAngle()
{
  return &type metadata for InvalalidAngle;
}

uint64_t sub_100149664(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8((uint64_t *)&unk_1002AAA30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001496C4()
{
  return sub_1001AF83C(v0);
}

uint64_t sub_1001496E0()
{
  return _swift_deallocObject(v0, 40, 7);
}

void sub_100149728(uint64_t a1, uint64_t a2)
{
  sub_100149754(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100149734()
{
  return sub_1001AF7E4(v0[2], v0[3], v0[4]);
}

void sub_100149754(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (qword_1002A7C00 != -1) {
    goto LABEL_26;
  }
  while (1)
  {
    sub_1000992E8(&qword_1002AA758);
    OS_dispatch_queue.sync<A>(execute:)();
    if (!v38) {
      break;
    }
    id v6 = [v38 attitude];
    [v6 quaternion];
    simd_quatd.init(_:)(v7, v39);
    float64x2_t v35 = v8;
    float64x2_t __ya = v9;

    int8x16_t v10 = (int8x16_t)vnegq_f64(v35);
    float64x2_t v11 = vmulq_f64(__ya, (float64x2_t)xmmword_1002423B0);
    float64x2_t v12 = (float64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)vnegq_f64(v11), 8uLL);
    float64x2_t v13 = vmlaq_f64(vmulq_f64(v35, (float64x2_t)0), (float64x2_t)0, (float64x2_t)vextq_s8(v10, (int8x16_t)v35, 8uLL));
    float64x2_t v14 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v35, v10, 8uLL), vmlaq_f64(vmulq_f64(v11, (float64x2_t)0), (float64x2_t)0, v12));
    float64x2_t v15 = vaddq_f64(v12, v13);
    float64x2_t v16 = vnegq_f64(v14);
    float64x2_t v17 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)vnegq_f64(v15), 8uLL);
    float64x2_t v18 = vmlaq_n_f64(vmulq_laneq_f64(v16, v35, 1), (float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v16, 8uLL), v35.f64[0]);
    float64x2_t v19 = vmlaq_n_f64(vmulq_laneq_f64(v14, __ya, 1), (float64x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v14, 8uLL), __ya.f64[0]);
    *(void *)&__ya.f64[0] = *(_OWORD *)&vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v15, __ya, 1), v17, __ya.f64[0]), v18);
    float64x2_t v20 = vaddq_f64(v19, vmlaq_n_f64(vmulq_laneq_f64(v15, v35, 1), v17, v35.f64[0]));
    long double v21 = sqrt(vmuld_n_f64(v20.f64[0], v20.f64[0]) + vmuld_lane_f64(v20.f64[1], v20, 1));
    long double v22 = atan2(v20.f64[1], v20.f64[0]);
    long double v23 = atan2(__ya.f64[0], v21);
    uint64_t v24 = *(void *)(a1 + 16);
    if (!v24)
    {
      double v27 = 0.0;
      uint64_t v28 = 0;
LABEL_17:
      uint64_t v29 = (void **)(a3 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__angleBuffer);
      swift_beginAccess();
      id v30 = *v29;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v29 = v30;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        id v30 = sub_1001025D4(0, v30[2] + 1, 1, v30);
        *uint64_t v29 = v30;
      }
      unint64_t v33 = v30[2];
      unint64_t v32 = v30[3];
      if (v33 >= v32 >> 1)
      {
        id v30 = sub_1001025D4((void *)(v32 > 1), v33 + 1, 1, v30);
        *uint64_t v29 = v30;
      }
      v30[2] = v33 + 1;
      id v34 = (long double *)&v30[4 * v33];
      v34[4] = v22;
      v34[5] = v23;
      *((void *)v34 + 6) = v28;
      v34[7] = v27;
      swift_endAccess();

      return;
    }
    unint64_t __y = a3;
    uint64_t v25 = a2 + 32;
    swift_bridgeObjectRetain();
    uint64_t v26 = 0;
    double v27 = 0.0;
    uint64_t v28 = 0;
    while (1)
    {
      a3 = *(void *)(a1 + 8 * v26 + 32);
      if (a3 != dispatch thunk of Component.id.getter()) {
        goto LABEL_11;
      }
      if ((a3 & 0x8000000000000000) != 0) {
        break;
      }
      if (a3 >= *(void *)(a2 + 16)) {
        goto LABEL_24;
      }
      uint64_t v28 = *(void *)(v25 + 8 * a3);
LABEL_11:
      if (a3 == dispatch thunk of Component.id.getter())
      {
        if ((a3 & 0x8000000000000000) != 0) {
          goto LABEL_25;
        }
        if (a3 >= *(void *)(a2 + 16))
        {
          __break(1u);
LABEL_15:
          swift_bridgeObjectRelease();
          a3 = __y;
          goto LABEL_17;
        }
        double v27 = -*(double *)(v25 + 8 * a3);
      }
      if (v24 == ++v26) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    swift_once();
  }
}

uint64_t sub_100149A7C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 9u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for FirmwareUpdateErrors(uint64_t a1)
{
  return sub_100149AA4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_100149AA4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 9u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s14dockaccessoryd20FirmwareUpdateErrorsOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_100149A7C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for FirmwareUpdateErrors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_100149A7C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100149AA4(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for FirmwareUpdateErrors(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for FirmwareUpdateErrors(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100149AA4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FirmwareUpdateErrors(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF7 && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 247);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 9) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FirmwareUpdateErrors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 247;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF7) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100149C48(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100149C50(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FirmwareUpdateErrors()
{
  return &type metadata for FirmwareUpdateErrors;
}

char *sub_100149C68()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0;
  Logger.init(subsystem:category:)();
  uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController;
  *(void *)&v5[v6] = [objc_allocWithZone((Class)UARPController) init];
  uint64_t v7 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories;
  *(void *)&v5[v7] = sub_1001EB120((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions;
  *(void *)&v5[v8] = sub_1001EB22C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  sub_1000992E8((uint64_t *)&unk_1002A87B0);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = 0;
  *(void *)&v5[v9] = v10;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_FWUPDATE_IDLE_TIMEOUT] = 0x404E000000000000;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer] = 0;

  updated = (objc_class *)type metadata accessor for AccessoryFirmwareUpdateManager();
  v33.receiver = v5;
  v33.super_class = updated;
  float64x2_t v12 = (char *)[super init];
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController;
  float64x2_t v14 = *(void **)&v12[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController];
  float64x2_t v15 = v12;
  [v14 setDelegate:v15];
  uint64_t v16 = sub_10015016C(0x706163702ELL, (void *)0xE500000000000000);
  if (v17)
  {
    unint64_t v18 = v17;
    uint64_t v19 = v16;
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, &v15[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger], v1);
    swift_bridgeObjectRetain_n();
    id v30 = v4;
    float64x2_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v29 = v13;
      long double v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v28 = v2;
      uint64_t v32 = v23;
      uint64_t v27 = v1;
      *(_DWORD *)long double v22 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_1000993AC(v19, v18, &v32);
      uint64_t v13 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Starting packet capture to %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v30, v1);
    }
    id v24 = *(id *)&v12[v13];
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v24 startPacketCapture:v25];
  }
  return v15;
}

void sub_10014A068(unint64_t a1, char a2, void (*a3)(char *, uint64_t), unint64_t a4, double a5)
{
  if (a5 == 0.0)
  {
    sub_10014E0C8(a1, a2 & 1, a3, a4);
    if (v6) {
      return;
    }
    float64x2_t v11 = *(void **)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer];
    *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer] = 0;
  }
  else
  {
    float64x2_t v12 = *(void **)(a1 + 40);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v5;
    *(void *)(v13 + 24) = a1;
    *(unsigned char *)(v13 + 32) = a2 & 1;
    *(void *)(v13 + 40) = a3;
    *(void *)(v13 + 48) = a4;
    objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
    swift_bridgeObjectRetain();
    id v14 = v12;
    float64x2_t v15 = v5;
    swift_retain();
    uint64_t v16 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
    float64x2_t v11 = *(void **)&v15[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer];
    *(void *)&v15[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer] = v16;
  }
}

void sub_10014A194(uint64_t a1, unint64_t a2, char a3, void (*a4)(char *, uint64_t), unint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  __chkstk_darwin(v10);
  sub_10014E0C8(a2, a3, a4, a5);
  float64x2_t v11 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer);
  *(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_reachabilityTimer) = 0;
}

void *sub_10014A4E4(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v12 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v12 initWithString:v13];

  float64x2_t v15 = [v14 UTF8String];
  id v16 = v14;
  if (sandbox_extension_consume() == -1)
  {
    uint64_t v18 = type metadata accessor for Errors();
    sub_100151570((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    float64x2_t v15 = v19;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = a3;
    v20._object = a4;
    String.append(_:)(v20);
    v21._uint64_t countAndFlagsBits = 0x20726F6620;
    v21._object = (void *)0xE500000000000000;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = a1;
    v22._object = a2;
    String.append(_:)(v22);
    *float64x2_t v15 = 0xD00000000000001CLL;
    v15[1] = 0x8000000100238B40;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v15, enum case for Errors.FailedToConsumeExtensionForLocalAsset(_:), v18);
    goto LABEL_5;
  }
  unint64_t v17 = sub_10014F778(a1, (uint64_t)a2, a5, a6);
  if (v6)
  {
LABEL_5:
    swift_willThrow();
    return v15;
  }
  float64x2_t v15 = v17;
  sandbox_extension_release();
  return v15;
}

void sub_10014A714(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  float64x2_t v11 = (char *)&v41 - v10;
  id v12 = sub_10014ED94(a2);
  if (v12)
  {
    NSString v13 = v12;
    float64x2_t v46 = a1;
    uint64_t v43 = v5;
    uint64_t v14 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    float64x2_t v15 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain();
    os_unfair_lock_lock(v15 + 4);
    swift_release();
    id v16 = [v13 uuid];
    unint64_t v17 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess();
    uint64_t v18 = *v17;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_1001A6464(v16, v18);

    swift_bridgeObjectRelease();
    Swift::String v20 = *(os_unfair_lock_s **)(v2 + v14);
    swift_retain();
    os_unfair_lock_unlock(v20 + 4);
    swift_release();
    if (v19)
    {
      sub_1000A5D40((uint64_t)v46, (uint64_t)&v44);
      uint64_t v21 = (uint64_t)v19 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
      swift_beginAccess();
      sub_1001516A4((uint64_t)&v44, v21);
      swift_endAccess();
    }
    else
    {
      uint64_t v26 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v43);
      uint64_t v27 = v13;
      uint64_t v28 = Logger.logObject.getter();
      uint64_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, (os_log_type_t)v29))
      {
        id v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = (void *)swift_slowAlloc();
        double v42 = v30;
        *(_DWORD *)id v30 = 138412290;
        unint64_t v44 = (unint64_t)v27;
        uint64_t v31 = v27;
        float64x2_t v46 = v27;
        uint64_t v32 = v31;
        uint64_t v26 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v41 = v13;

        uint64_t v27 = v46;
        _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v29, "Failed fetching UARP session for %@", v42, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v28 = v27;
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v26);
      unint64_t v44 = 0;
      unint64_t v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v44 = 0xD000000000000014;
      unint64_t v45 = 0x8000000100238B20;
      id v33 = [v27 description];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v36 = v35;

      v37._uint64_t countAndFlagsBits = v34;
      v37._object = v36;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      unint64_t v38 = v44;
      unint64_t v39 = v45;
      sub_1000A6750();
      swift_allocError();
      *(void *)uint64_t v40 = v38;
      *(void *)(v40 + 8) = v39;
      *(unsigned char *)(v40 + 16) = 2;
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v5);
    Swift::String v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed fetching UARP accessory", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    sub_1000A6750();
    swift_allocError();
    *(void *)uint64_t v25 = 0xD000000000000011;
    *(void *)(v25 + 8) = 0x8000000100238B00;
    *(unsigned char *)(v25 + 16) = 1;
    swift_willThrow();
  }
}

void sub_10014AC3C(uint64_t a1, void *a2)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v12 = (char *)&v41 - v11;
  id v13 = sub_10014ED94(a1);
  if (v13)
  {
    uint64_t v14 = v13;
    float64x2_t v46 = v3;
    uint64_t v43 = v6;
    uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    id v16 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain();
    os_unfair_lock_lock(v16 + 4);
    swift_release();
    id v17 = [v14 uuid];
    uint64_t v18 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess();
    uint64_t v19 = *v18;
    swift_bridgeObjectRetain();
    Swift::String v20 = sub_1001A6464(v17, v19);

    swift_bridgeObjectRelease();
    uint64_t v21 = *(os_unfair_lock_s **)(v2 + v15);
    swift_retain();
    os_unfair_lock_unlock(v21 + 4);
    swift_release();
    if (v20)
    {
      sub_1000BF97C(a2);
    }
    else
    {
      uint64_t v26 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v43);
      uint64_t v27 = v14;
      uint64_t v28 = Logger.logObject.getter();
      uint64_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, (os_log_type_t)v29))
      {
        id v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = (void *)swift_slowAlloc();
        double v42 = v30;
        *(_DWORD *)id v30 = 138412290;
        unint64_t v44 = (unint64_t)v27;
        uint64_t v31 = v27;
        float64x2_t v46 = v27;
        uint64_t v32 = v31;
        uint64_t v26 = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v41 = v14;

        uint64_t v27 = v46;
        _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v29, "Failed fetching UARP session for %@", v42, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v28 = v27;
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v26);
      unint64_t v44 = 0;
      unint64_t v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v44 = 0xD000000000000014;
      unint64_t v45 = 0x8000000100238B20;
      id v33 = [v27 description];
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v36 = v35;

      v37._uint64_t countAndFlagsBits = v34;
      v37._object = v36;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      unint64_t v38 = v44;
      unint64_t v39 = v45;
      sub_1000A6750();
      swift_allocError();
      *(void *)uint64_t v40 = v38;
      *(void *)(v40 + 8) = v39;
      *(unsigned char *)(v40 + 16) = 2;
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v6);
    Swift::String v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed fetching UARP accessory", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    sub_1000A6750();
    swift_allocError();
    *(void *)uint64_t v25 = 0xD000000000000011;
    *(void *)(v25 + 8) = 0x8000000100238B00;
    *(unsigned char *)(v25 + 16) = 1;
    swift_willThrow();
  }
}

void sub_10014B134(uint64_t a1, void *a2)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v12 = (char *)&v42 - v11;
  id v13 = sub_10014ED94(a1);
  if (v13)
  {
    uint64_t v14 = v13;
    long long v47 = v3;
    uint64_t v44 = v6;
    uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    id v16 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain();
    os_unfair_lock_lock(v16 + 4);
    swift_release();
    id v17 = [v14 uuid];
    uint64_t v18 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess();
    uint64_t v19 = *v18;
    swift_bridgeObjectRetain();
    Swift::String v20 = (char *)sub_1001A6464(v17, v19);

    swift_bridgeObjectRelease();
    uint64_t v21 = *(os_unfair_lock_s **)(v2 + v15);
    swift_retain();
    os_unfair_lock_unlock(v21 + 4);
    swift_release();
    if (v20)
    {
      id v22 = *(id *)&v20[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile];
      sub_100138BB8(a2);
    }
    else
    {
      uint64_t v27 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v44);
      uint64_t v28 = v14;
      uint64_t v29 = Logger.logObject.getter();
      uint64_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, (os_log_type_t)v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        double v42 = (void *)swift_slowAlloc();
        uint64_t v43 = v31;
        *(_DWORD *)uint64_t v31 = 138412290;
        unint64_t v45 = (unint64_t)v28;
        uint64_t v32 = v28;
        long long v47 = v28;
        id v33 = v32;
        uint64_t v27 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *double v42 = v14;

        uint64_t v28 = v47;
        _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "Failed fetching UARP session for %@", v43, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v29 = v28;
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v27);
      unint64_t v45 = 0;
      unint64_t v46 = 0xE000000000000000;
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v45 = 0xD000000000000014;
      unint64_t v46 = 0x8000000100238B20;
      id v34 = [v28 description];
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v37 = v36;

      v38._uint64_t countAndFlagsBits = v35;
      v38._object = v37;
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      unint64_t v39 = v45;
      unint64_t v40 = v46;
      sub_1000A6750();
      swift_allocError();
      *(void *)uint64_t v41 = v39;
      *(void *)(v41 + 8) = v40;
      *(unsigned char *)(v41 + 16) = 2;
      swift_willThrow();
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v6);
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed fetching UARP accessory", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    sub_1000A6750();
    swift_allocError();
    *(void *)uint64_t v26 = 0xD000000000000011;
    *(void *)(v26 + 8) = 0x8000000100238B00;
    *(unsigned char *)(v26 + 16) = 1;
    swift_willThrow();
  }
}

uint64_t sub_10014B644(id a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v79 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  id v16 = (char *)&v79 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v79 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v79 - v20;
  if ([a2 downloadStatus] == (id)2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v6);
    id v22 = a2;
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      uint64_t v90 = v6;
      *(_DWORD *)uint64_t v25 = 138412290;
      uint64_t v91 = v22;
      uint64_t v26 = v7;
      uint64_t v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v89 = v22;

      uint64_t v7 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Download failed for %@", v25, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      uint64_t v6 = v90;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v23 = v22;
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  }
  uint64_t v28 = sub_10014F390(a1);
  if (!v28) {
    goto LABEL_16;
  }
  id v88 = a1;
  uint64_t v89 = v7;
  uint64_t v29 = v28;
  sub_1000F9814();
  if (!v30)
  {
    swift_release();
    a1 = v88;
    uint64_t v7 = v89;
LABEL_16:
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v6);
    uint64_t v52 = a1;
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      uint64_t v90 = v6;
      *(_DWORD *)uint64_t v55 = 138412290;
      uint64_t v91 = v52;
      uint64_t v56 = v7;
      uint64_t v57 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v89 = v52;

      uint64_t v7 = v56;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "error retreiving dockaccessory for uarp accessory %@", v55, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      uint64_t v6 = v90;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v53 = v52;
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v16, v6);
  }
  uint64_t v31 = v30;
  uint64_t v87 = v29;
  uint64_t v90 = v6;
  id v32 = [a2 assetVersion];
  if (v32)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v33 = objc_allocWithZone((Class)HMFSoftwareVersion);
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v32 = [v33 initWithVersionString:v34];
  }
  uint64_t v35 = v10;
  unsigned int v36 = [v31 isAtLeastVersion:v32];

  Swift::String v37 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 16);
  if (v36)
  {
    v37(v21, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v90);
    id v38 = v31;
    id v39 = a2;
    unint64_t v40 = v38;
    id v41 = v39;
    double v42 = Logger.logObject.getter();
    int v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, (os_log_type_t)v43))
    {
      LODWORD(v88) = v43;
      uint64_t v44 = swift_slowAlloc();
      unint64_t v45 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 138412546;
      uint64_t v91 = v40;
      unint64_t v40 = v40;
      uint64_t v86 = &v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v45 = v31;

      *(_WORD *)(v44 + 12) = 2112;
      id v46 = [v41 assetVersion];
      if (!v46) {
        goto LABEL_27;
      }
      long long v47 = v46;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v48 = objc_allocWithZone((Class)HMFSoftwareVersion);
      NSString v49 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v50 = [v48 initWithVersionString:v49];

      if (v50)
      {
        uint64_t v91 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
LABEL_27:
        uint64_t v91 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v50 = 0;
      }
      os_log_type_t v77 = v88;
      v45[1] = v50;

      _os_log_impl((void *)&_mh_execute_header, v42, v77, "Current FW version %@ if greater than or equal to new version %@", (uint8_t *)v44, 0x16u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      double v42 = v40;
    }
    uint64_t v78 = v90;

    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v21, v78);
  }
  else
  {
    uint64_t v82 = v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger;
    uint64_t v83 = v37;
    uint64_t v58 = v90;
    uint64_t v84 = v89 + 16;
    ((void (*)(char *))v37)(v19);
    uint64_t v59 = v31;
    id v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.default.getter();
    int v62 = v61;
    BOOL v63 = os_log_type_enabled(v60, v61);
    uint64_t v85 = v35;
    uint64_t v86 = v59;
    if (v63)
    {
      uint64_t v64 = swift_slowAlloc();
      LODWORD(v81) = v62;
      unint64_t v65 = (uint8_t *)v64;
      uint64_t v80 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v65 = 138412290;
      id v79 = v65 + 4;
      uint64_t v91 = v59;
      uint64_t v66 = v59;
      uint64_t v58 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v80 = v31;

      _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v81, "asset version is %@", v65, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v60 = v59;
    }

    uint64_t v68 = v89 + 8;
    uint64_t v67 = *(void (**)(char *, uint64_t))(v89 + 8);
    v67(v19, v58);
    uint64_t v69 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    uint64_t v70 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain();
    os_unfair_lock_lock(v70 + 4);
    swift_release();
    uint64_t v71 = (char *)v88;
    id v72 = [v88 uuid];
    uint64_t v73 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess();
    uint64_t v74 = *v73;
    swift_bridgeObjectRetain();
    id v75 = sub_1001A6464(v72, v74);

    swift_bridgeObjectRelease();
    id v76 = *(os_unfair_lock_s **)(v3 + v69);
    swift_retain();
    os_unfair_lock_unlock(v76 + 4);
    swift_release();
    if (!v75)
    {
      uint64_t v81 = v67;
      uint64_t v89 = v68;
      id v75 = sub_10014E9AC(v71);
    }
    [v75 assetAvailablityUpdateForAccessoryID:v71 assetID:a2];

    return swift_release();
  }
}

void sub_10014C27C(void *a1, uint64_t a2, uint8_t *a3)
{
  uint64_t v38 = a2;
  id v39 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v40 = (uint8_t *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  uint64_t v12 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  swift_release();
  id v13 = [a1 uuid];
  uint64_t v14 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
  swift_beginAccess();
  uint64_t v15 = *v14;
  swift_bridgeObjectRetain();
  id v16 = sub_1001A6464(v13, v15);

  swift_bridgeObjectRelease();
  uint64_t v17 = *(os_unfair_lock_s **)(v3 + v11);
  swift_retain();
  os_unfair_lock_unlock(v17 + 4);
  swift_release();
  if (v16)
  {
    uint64_t v36 = v6;
    uint64_t v37 = v5;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v41 = 0;
    unsigned int v19 = [v16 sendMessageToAccessory:a1 uarpMsg:isa error:&v41];

    if (v19)
    {
      uint64_t v20 = v41;
    }
    else
    {
      uint64_t v27 = v41;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v29 = v36;
      uint64_t v28 = v37;
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(v36 + 16))(v40, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v37);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        id v32 = (uint8_t *)swift_slowAlloc();
        id v33 = (void *)swift_slowAlloc();
        *(_DWORD *)id v32 = 138412290;
        swift_errorRetain();
        NSString v34 = _swift_stdlib_bridgeErrorToNSError();
        id v41 = v34;
        uint64_t v29 = v36;
        uint64_t v28 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v33 = v34;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "sendMessageToAccessory: failed with error %@", v32, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      (*(void (**)(uint8_t *, uint64_t))(v29 + 8))(v40, v28);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v5);
    uint64_t v21 = a1;
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v37 = v5;
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      unint64_t v40 = v24;
      *(_DWORD *)os_log_type_t v24 = 138412290;
      id v39 = v24 + 4;
      id v41 = v21;
      uint64_t v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v25 = v21;

      uint64_t v5 = v37;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "UARP session not found for %@", v40, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v22 = v21;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
}

void sub_10014C894(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v25 = a4;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  uint64_t v12 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  swift_release();
  id v13 = [a1 uuid];
  uint64_t v14 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
  swift_beginAccess();
  uint64_t v15 = *v14;
  swift_bridgeObjectRetain();
  id v16 = sub_1001A6464(v13, v15);

  swift_bridgeObjectRelease();
  uint64_t v17 = *(os_unfair_lock_s **)(v4 + v11);
  swift_retain();
  os_unfair_lock_unlock(v17 + 4);
  swift_release();
  if (v16)
  {
    [v16 firmwareStagingProgress:a1 assetID:a2 bytesSent:a3 bytesTotal:v25];
  }
  else
  {
    uint64_t v18 = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v10, v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v8);
    unsigned int v19 = a1;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      id v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      uint64_t v26 = v19;
      *(_DWORD *)id v22 = 138412290;
      os_log_type_t v23 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v25 = v19;

      uint64_t v18 = v24;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "UARP session not found for %@", v22, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v20 = v19;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v8);
  }
}

void sub_10014CC28(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  uint64_t v11 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
  swift_retain();
  os_unfair_lock_lock(v11 + 4);
  swift_release();
  id v12 = [a1 uuid];
  id v13 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
  swift_beginAccess();
  uint64_t v14 = *v13;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_1001A6464(v12, v14);

  swift_bridgeObjectRelease();
  id v16 = *(os_unfair_lock_s **)(v3 + v10);
  swift_retain();
  os_unfair_lock_unlock(v16 + 4);
  swift_release();
  if (v15)
  {
    [v15 firmwareStagingComplete:a1 assetID:a2 withStatus:a3];
  }
  else
  {
    uint64_t v17 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v7);
    uint64_t v18 = a1;
    unsigned int v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      id v22 = (void *)swift_slowAlloc();
      uint64_t v24 = v21;
      *(_DWORD *)os_log_type_t v21 = 138412290;
      uint64_t v26 = v18;
      os_log_type_t v23 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v22 = v18;

      uint64_t v17 = v25;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "UARP session not found for %@", v24, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      unsigned int v19 = v18;
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v7);
  }
}

void sub_10014CFB4(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  uint64_t v10 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_release();
  id v11 = [a1 uuid];
  id v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
  swift_beginAccess();
  uint64_t v13 = *v12;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1001A6464(v11, v13);

  swift_bridgeObjectRelease();
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + v9);
  swift_retain();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  if (v14)
  {
    [v14 stagedFirmwareApplicationComplete:a1 withStatus:a2];
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v5);
    id v16 = a1;
    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, (os_log_type_t)v18))
    {
      unsigned int v19 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v21 = (void *)swift_slowAlloc();
      id v22 = v19;
      os_log_type_t v23 = v16;
      *(_DWORD *)unsigned int v19 = 138412290;
      os_log_type_t v20 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v21 = v16;

      _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v18, "UARP session not found for %@", v22, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v17 = v16;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_10014D318(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  id v6 = [a1 uuid];
  swift_beginAccess();
  uint64_t v7 = (void *)sub_1001ECF68((unint64_t)v6);
  swift_endAccess();

  uint64_t v8 = *(os_unfair_lock_s **)(v2 + v4);
  swift_retain();
  os_unfair_lock_unlock(v8 + 4);
  return swift_release();
}

uint64_t sub_10014D3F4(uint64_t a1, void (*a2)(char *, uint64_t), unint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v92 = a3;
  uint64_t v93 = a2;
  uint64_t v6 = sub_1000992E8(&qword_1002A7F70);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = ((char *)v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  id v11 = (char *)v81 - v10;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v94 = *(void *)(v12 - 8);
  uint64_t v95 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v81 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  os_log_type_t v21 = (char *)v81 - v20;
  __chkstk_darwin(v19);
  os_log_type_t v23 = (char *)v81 - v22;
  uint64_t v24 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories);
  swift_beginAccess();
  uint64_t v25 = *v24;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v26 = sub_1001A637C(a1, v25);
  swift_release();
  swift_bridgeObjectRelease();
  if (v26)
  {

    uint64_t v27 = v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger;
    uint64_t v28 = v94;
    (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v23, v27, v95);
    swift_retain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    os_log_type_t v31 = v23;
    if (os_log_type_enabled(v29, v30))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      id v33 = (void *)swift_slowAlloc();
      *(_DWORD *)id v32 = 138412290;
      NSString v34 = *(NSObject **)(a1 + 24);
      id v97 = v34;
      uint64_t v35 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v33 = v34;
      uint64_t v36 = v94;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Accessory %@ is already registered", v32, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v36 = v28;

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v31, v95);
    return 1;
  }
  else
  {
    uint64_t v87 = v9;
    id v88 = v21;
    unint64_t v37 = v92;
    uint64_t v85 = a1;
    uint64_t v86 = v18;
    uint64_t v90 = v11;
    id v38 = sub_10014ED94(a1);
    uint64_t v91 = v4;
    id v89 = v38;
    if (v38)
    {
      unint64_t v39 = v37;
      if (v37)
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = (uint64_t)v90;
        URL.init(string:)();
        swift_bridgeObjectRelease();
        uint64_t v41 = type metadata accessor for URL();
        BOOL v42 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v40, 1, v41) == 1;
      }
      else
      {
        uint64_t v41 = type metadata accessor for URL();
        BOOL v42 = 1;
        uint64_t v40 = (uint64_t)v90;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v90, 1, 1, v41);
      }
      id v48 = v87;
      sub_1000B9BD4(v40, (uint64_t)v87, &qword_1002A7F70);
      type metadata accessor for URL();
      uint64_t v49 = *(void *)(v41 - 8);
      uint64_t v51 = 0;
      if ((*(unsigned int (**)(NSObject *, uint64_t, uint64_t))(v49 + 48))(v48, 1, v41) != 1)
      {
        URL._bridgeToObjectiveC()(v50);
        uint64_t v51 = v52;
        (*(void (**)(NSObject *, uint64_t))(v49 + 8))(v48, v41);
      }
      uint64_t v87 = [objc_allocWithZone((Class)UARPAssetID) initWithLocationType:v42 remoteURL:v51];

      uint64_t v53 = v91 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger;
      uint64_t v54 = v94;
      uint64_t v55 = v94 + 16;
      uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
      uint64_t v57 = v88;
      v56(v88, v91 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v95);
      swift_bridgeObjectRetain_n();
      id v58 = v89;
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.default.getter();
      int v84 = v60;
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = swift_slowAlloc();
        uint64_t v82 = v56;
        uint64_t v62 = v61;
        BOOL v63 = (void *)swift_slowAlloc();
        v81[0] = swift_slowAlloc();
        uint64_t v96 = (uint64_t)v58;
        id v97 = v81[0];
        *(_DWORD *)uint64_t v62 = 138412546;
        v81[1] = v55;
        id v64 = v58;
        uint64_t v83 = v53;
        id v65 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *BOOL v63 = v89;

        *(_WORD *)(v62 + 12) = 2080;
        if (v39) {
          uint64_t v66 = (uint64_t)v93;
        }
        else {
          uint64_t v66 = 7104878;
        }
        if (v39) {
          unint64_t v67 = v39;
        }
        else {
          unint64_t v67 = 0xE300000000000000;
        }
        swift_bridgeObjectRetain();
        uint64_t v96 = sub_1000993AC(v66, v67, (uint64_t *)&v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v53 = v83;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v84, "registering accessory %@, filepath is %s", (uint8_t *)v62, 0x16u);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v56 = v82;
        swift_slowDealloc();

        uint64_t v68 = *(void (**)(char *, uint64_t))(v94 + 8);
        v68(v88, v95);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v68 = *(void (**)(char *, uint64_t))(v54 + 8);
        v68(v57, v95);
      }
      uint64_t v69 = v85;
      uint64_t v70 = v86;
      if ([*(id *)(v91 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController) addAccessory:v58 assetID:v87])
      {

        sub_1000A61E4((uint64_t)v90, &qword_1002A7F70);
        return 1;
      }
      uint64_t v93 = v68;
      v56(v70, v53, v95);
      swift_retain_n();
      uint64_t v71 = v58;
      id v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = swift_slowAlloc();
        id v75 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v74 = 138412546;
        id v97 = v71;
        uint64_t v71 = v71;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v75 = v89;

        *(_WORD *)(v74 + 12) = 2112;
        id v76 = *(NSObject **)(v69 + 24);
        id v97 = v76;
        os_log_type_t v77 = v76;
        uint64_t v78 = v87;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v75[1] = v76;
        uint64_t v70 = v86;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Failed to register uarp accessory %@ for dock accessory %@", (uint8_t *)v74, 0x16u);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
        uint64_t v78 = v71;
        id v72 = v71;
      }
      uint64_t v79 = (uint64_t)v90;
      uint64_t v80 = v93;

      v80(v70, v95);
      sub_1000A61E4(v79, &qword_1002A7F70);
    }
    else
    {
      uint64_t v44 = v94;
      (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v15, v91 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v95);
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        long long v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Error retreiving uarp accessory", v47, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v95);
    }
    return 0;
  }
}

void sub_10014DE2C(unint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v8 = sub_10014ED94(a1);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    id v11 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain();
    os_unfair_lock_lock(v11 + 4);
    swift_release();
    id v12 = [v9 uuid];
    uint64_t v13 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess();
    uint64_t v14 = *v13;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_1001A6464(v12, v14);

    swift_bridgeObjectRelease();
    uint64_t v16 = *(os_unfair_lock_s **)(v2 + v10);
    swift_retain();
    os_unfair_lock_unlock(v16 + 4);
    swift_release();
    if (v15)
    {
      sub_1000BF418();
    }
    sub_10014D318(v9);
    swift_beginAccess();
    uint64_t v17 = (void *)sub_1001ECE04(a1);
    swift_endAccess();

    [*(id *)(v2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController) removeAccessory:v9];
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v4);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error retreiving uarp accessory", v20, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void sub_10014E0C8(unint64_t a1, char a2, void (*a3)(char *, uint64_t), unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v10 - 8);
  id v12 = (uint8_t *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v58 = v13;
  uint64_t v59 = v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (uint8_t *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)&v53 - v18;
  if (a2)
  {
    sub_10014DE2C(a1);
    if ((sub_10014D3F4(a1, a3, a4) & 1) == 0)
    {
      sub_1000A6750();
      swift_allocError();
      *(void *)uint64_t v39 = 0xD00000000000002BLL;
      *(void *)(v39 + 8) = 0x8000000100238AD0;
      *(unsigned char *)(v39 + 16) = 0;
      swift_willThrow();
      return;
    }
  }
  uint64_t v57 = v12;
  uint64_t v20 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories);
  swift_beginAccess();
  uint64_t v21 = *v20;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1001A637C(a1, v21);
  swift_release();
  swift_bridgeObjectRelease();
  if (v22)
  {
    uint64_t v56 = v17;
    uint64_t v23 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
    uint64_t v24 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock);
    swift_retain();
    os_unfair_lock_lock(v24 + 4);
    swift_release();
    id v25 = [v22 uuid];
    uint64_t v26 = (uint64_t *)(v5 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions);
    swift_beginAccess();
    uint64_t v27 = *v26;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1001A6464(v25, v27);

    swift_bridgeObjectRelease();
    uint64_t v29 = *(os_unfair_lock_s **)(v5 + v23);
    swift_retain();
    os_unfair_lock_unlock(v29 + 4);
    swift_release();
    if (!v28)
    {
      uint64_t v40 = v60;
      uint64_t v41 = sub_10014E9AC((char *)v22);
      if (v40)
      {
        swift_willThrow();

        return;
      }
      uint64_t v28 = v41;
      uint64_t v60 = 0;
    }
    uint64_t v30 = v5 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger;
    os_log_type_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
    id v32 = v56;
    uint64_t v55 = v22;
    if (a2)
    {
      v31(v19, v30, v58);
      swift_retain_n();
      id v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v54 = (void *)swift_slowAlloc();
        uint64_t v56 = v35;
        *(_DWORD *)uint64_t v35 = 138412290;
        uint64_t v36 = v28;
        unint64_t v37 = *(void **)(a1 + 24);
        uint64_t v61 = v37;
        id v38 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v54 = v37;
        uint64_t v28 = v36;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Marking accessory reachable: %@", v56, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      id v48 = v55;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v19, v58);
      uint64_t v49 = type metadata accessor for TaskPriority();
      uint64_t v50 = v57;
      (*(void (**)(uint8_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v57, 1, 1, v49);
      uint64_t v51 = (void *)swift_allocObject();
      v51[2] = 0;
      void v51[3] = 0;
      v51[4] = v28;
      sub_1001BC1A8((uint64_t)v50, (uint64_t)&unk_1002AA898, (uint64_t)v51);

      swift_release();
    }
    else
    {
      v31((char *)v56, v30, v58);
      swift_retain_n();
      BOOL v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v54 = (void *)swift_slowAlloc();
        uint64_t v57 = v44;
        *(_DWORD *)uint64_t v44 = 138412290;
        unint64_t v45 = v28;
        os_log_type_t v46 = *(void **)(a1 + 24);
        uint64_t v61 = v46;
        id v47 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v54 = v46;
        uint64_t v28 = v45;
        id v32 = v56;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Marking accessory un-reachable: %@", v57, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v52 = v55;
      (*(void (**)(uint8_t *, uint64_t))(v59 + 8))(v32, v58);
      sub_10014DE2C(a1);
    }
  }
}

uint64_t sub_10014E74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a4;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10014E76C, 0, 0);
}

uint64_t sub_10014E76C()
{
  uint64_t v1 = v0[15] + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
  swift_beginAccess();
  sub_1000B9BD4(v1, (uint64_t)(v0 + 2), (uint64_t *)&unk_1002A87D0);
  if (v0[5])
  {
    sub_1000A5D40((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
    sub_1000A61E4((uint64_t)(v0 + 2), (uint64_t *)&unk_1002A87D0);
    uint64_t v2 = v0[10];
    uint64_t v3 = v0[11];
    sub_1000A5DA4(v0 + 7, v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(1, v2, v3);
    sub_100099BCC((uint64_t)(v0 + 7));
  }
  else
  {
    sub_1000A61E4((uint64_t)(v0 + 2), (uint64_t *)&unk_1002A87D0);
  }
  uint64_t v4 = (void *)swift_task_alloc();
  v0[16] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10014E8B8;
  return sub_1000C0170();
}

uint64_t sub_10014E8B8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

char *sub_10014E9AC(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock;
  uint64_t v5 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_sessionLock];
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  id v6 = [a1 uuid];
  uint64_t v7 = (uint64_t *)&v2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_activeSessions];
  swift_beginAccess();
  uint64_t v8 = *v7;
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1001A6464(v6, v8);

  swift_bridgeObjectRelease();
  uint64_t v10 = *(os_unfair_lock_s **)&v2[v4];
  swift_retain();
  os_unfair_lock_unlock(v10 + 4);
  swift_release();
  if (v9)
  {

    uint64_t v11 = type metadata accessor for Errors();
    sub_100151570((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    *id v12 = 0xD00000000000001BLL;
    v12[1] = 0x8000000100238AB0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for Errors.AlreadyDone(_:), v11);
  }
  else
  {
    uint64_t v13 = sub_10014F390(a1);
    if (v13)
    {
      uint64_t v14 = v13;
      id v15 = objc_allocWithZone((Class)type metadata accessor for AccessoryFirmwareUpdateSession());
      uint64_t v16 = a1;
      uint64_t v17 = v2;
      uint64_t v18 = sub_1000C7B50(v14, v16, v17);

      os_log_type_t v19 = *(os_unfair_lock_s **)&v2[v4];
      swift_retain();
      os_unfair_lock_lock(v19 + 4);
      swift_release();
      id v20 = [v16 uuid];
      swift_beginAccess();
      a1 = v18;
      sub_100151004((uint64_t)a1, (uint64_t)v20, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001F45B0, sub_100151334);
      swift_endAccess();

      uint64_t v21 = *(os_unfair_lock_s **)&v2[v4];
      swift_retain();
      os_unfair_lock_unlock(v21 + 4);
      swift_release();
      swift_release();
      return a1;
    }
    uint64_t v23 = type metadata accessor for Errors();
    sub_100151570((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    id v25 = v24;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    id v26 = [a1 description];
    a1 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;

    v29._uint64_t countAndFlagsBits = (uint64_t)a1;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    void *v25 = 0xD00000000000002FLL;
    v25[1] = 0x8000000100238A80;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, enum case for Errors.NotFound(_:), v23);
  }
  swift_willThrow();
  return a1;
}

id sub_10014ED94(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v45 = *(void *)(v3 - 8);
  uint64_t v46 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  id v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v42 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v1;
  id v12 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories);
  swift_beginAccess();
  uint64_t v13 = *v12;
  swift_retain();
  swift_bridgeObjectRetain();
  id v14 = sub_1001A637C(a1, v13);
  uint64_t v15 = a1;
  swift_release();
  swift_bridgeObjectRelease();
  if (!v14)
  {
    uint64_t v43 = v9;
    if (*(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup + 8))
    {
      if (*(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber + 8))
      {
        uint64_t v16 = *(void **)(a1 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v17 = v16;
        DockCoreInfo.identifier.getter();

        id v18 = objc_allocWithZone((Class)UARPAccessory);
        NSString v19 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        NSString v20 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        id v22 = [v18 initWithProductGroup:v19 productNumber:v20 uuid:isa];

        (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v43);
        swift_beginAccess();
        swift_retain();
        id v14 = v22;
        sub_100151004((uint64_t)v14, v15, (void (*)(uint64_t, uint64_t, uint64_t))sub_1001F444C, sub_1001510D0);
        swift_endAccess();
        swift_release();
        return v14;
      }
      uint64_t v33 = v45;
      uint64_t v32 = v46;
      os_log_type_t v34 = v8;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v8, v47 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v46);
      swift_retain_n();
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        unint64_t v37 = (uint8_t *)swift_slowAlloc();
        id v38 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v37 = 138412290;
        uint64_t v39 = *(void **)(v15 + 24);
        id v48 = v39;
        id v40 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v38 = v39;
        uint64_t v32 = v46;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Error reading product number for accessory %@, PN is nil", v37, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        uint64_t v33 = v45;
        swift_slowDealloc();
        os_log_type_t v34 = v8;
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
    }
    else
    {
      uint64_t v24 = v45;
      uint64_t v23 = v46;
      id v25 = v6;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v6, v47 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger, v46);
      swift_retain_n();
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        Swift::String v29 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = 138412290;
        uint64_t v30 = *(void **)(v15 + 24);
        id v48 = v30;
        id v31 = v30;
        uint64_t v24 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *Swift::String v29 = v30;
        uint64_t v23 = v46;
        swift_release_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Error reading product group for accessory %@, PG is nil", v28, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v23);
    }
    return 0;
  }
  return v14;
}

uint64_t sub_10014F390(void *a1)
{
  uint64_t v2 = (unint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_registeredAccessories);
  swift_beginAccess();
  unint64_t v3 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    unint64_t v29 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    unint64_t v6 = __CocoaDictionary.makeIterator()() | 0x8000000000000000;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(v3 + 32);
    uint64_t v4 = ~v7;
    unint64_t v29 = v3 + 64;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(v3 + 64);
    unint64_t v6 = *v2;
  }
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  int64_t v28 = (unint64_t)(v4 + 64) >> 6;
  while (1)
  {
    uint64_t v12 = v11;
    if ((v6 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaDictionary.Iterator.nextKey()()) {
      goto LABEL_44;
    }
    type metadata accessor for DaemonAccessory();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = v30;
    swift_unknownObjectRelease();
    if (!v30) {
      goto LABEL_45;
    }
LABEL_35:
    unint64_t v19 = *v2;
    if ((*v2 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      if (!__CocoaDictionary.lookup(_:)()) {
        goto LABEL_8;
      }
      sub_100099C7C(0, (unint64_t *)&qword_1002A87E0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v20 = v30;
      swift_unknownObjectRelease();
    }
    else
    {
      if (!*(void *)(v19 + 16)) {
        goto LABEL_9;
      }
      swift_bridgeObjectRetain();
      uint64_t v21 = swift_retain();
      unint64_t v22 = sub_10016DE10(v21);
      if ((v23 & 1) == 0)
      {
LABEL_8:
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      id v20 = *(id *)(*(void *)(v19 + 56) + 8 * v22);
    }
    swift_release();
    swift_bridgeObjectRelease();
    if (v20)
    {
      sub_100099C7C(0, (unint64_t *)&qword_1002A87E0);
      id v24 = a1;
      id v25 = v20;
      char v26 = static NSObject.== infix(_:_:)();

      if (v26) {
        goto LABEL_45;
      }
    }
LABEL_9:
    uint64_t result = swift_release();
  }
  if (v5)
  {
    unint64_t v13 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v14 = v13 | (v11 << 6);
LABEL_34:
    uint64_t v15 = *(void **)(*(void *)(v6 + 48) + 8 * v14);
    swift_retain();
    if (!v15) {
      goto LABEL_45;
    }
    goto LABEL_35;
  }
  int64_t v16 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v16 >= v28) {
      goto LABEL_44;
    }
    unint64_t v17 = *(void *)(v29 + 8 * v16);
    ++v11;
    if (!v17)
    {
      uint64_t v11 = v12 + 2;
      if (v12 + 2 >= v28) {
        goto LABEL_44;
      }
      unint64_t v17 = *(void *)(v29 + 8 * v11);
      if (!v17)
      {
        uint64_t v11 = v12 + 3;
        if (v12 + 3 >= v28) {
          goto LABEL_44;
        }
        unint64_t v17 = *(void *)(v29 + 8 * v11);
        if (!v17)
        {
          uint64_t v11 = v12 + 4;
          if (v12 + 4 >= v28) {
            goto LABEL_44;
          }
          unint64_t v17 = *(void *)(v29 + 8 * v11);
          if (!v17)
          {
            uint64_t v11 = v12 + 5;
            if (v12 + 5 >= v28) {
              goto LABEL_44;
            }
            unint64_t v17 = *(void *)(v29 + 8 * v11);
            if (!v17)
            {
              uint64_t v11 = v12 + 6;
              if (v12 + 6 >= v28) {
                goto LABEL_44;
              }
              unint64_t v17 = *(void *)(v29 + 8 * v11);
              if (!v17)
              {
                uint64_t v18 = v12 + 7;
                while (v28 != v18)
                {
                  unint64_t v17 = *(void *)(v29 + 8 * v18++);
                  if (v17)
                  {
                    uint64_t v11 = v18 - 1;
                    goto LABEL_33;
                  }
                }
LABEL_44:
                uint64_t v15 = 0;
LABEL_45:
                sub_1000FE8D4();
                return (uint64_t)v15;
              }
            }
          }
        }
      }
    }
LABEL_33:
    unint64_t v5 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v11 << 6);
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

void *sub_10014F778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = a4;
  uint64_t v70 = a2;
  uint64_t v69 = a1;
  uint64_t v5 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v5 - 8);
  uint64_t v68 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for Logger();
  uint64_t v74 = *(void (***)(char *, uint64_t, uint64_t))(v63 - 8);
  __chkstk_darwin(v63);
  os_log_type_t v73 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL.DirectoryHint();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t countAndFlagsBits = *(void **)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  id v72 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v61 - v17;
  __chkstk_darwin(v16);
  id v20 = (char *)&v61 - v19;
  id v21 = [self defaultManager];
  static URL.temporaryDirectory.getter();
  v81[0] = a3;
  v81[1] = v76;
  unint64_t v22 = *(void (**)(char *, void, uint64_t))(v9 + 104);
  uint64_t v65 = v9 + 104;
  id v64 = v22;
  v22(v11, enum case for URL.DirectoryHint.isDirectory(_:), v8);
  sub_1000E9828();
  URL.appending<A>(component:directoryHint:)();
  char v23 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v66 = v11;
  uint64_t v67 = v8;
  v23(v11, v8);
  id v75 = countAndFlagsBits;
  id v24 = (void (*)(char *, char *, uint64_t))countAndFlagsBits[5];
  uint64_t v76 = v12;
  v24(v20, v18, v12);
  char v79 = 0;
  URL.path(percentEncoded:)(1);
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v18) = [v21 fileExistsAtPath:v25 isDirectory:&v79];

  if (v18) {
    goto LABEL_5;
  }
  id v61 = v21;
  sub_1000992E8((uint64_t *)&unk_1002A8FF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  *(void *)(inited + 32) = NSFilePosixPermissions;
  *(void *)(inited + 40) = 457;
  os_log_type_t v27 = NSFilePosixPermissions;
  unint64_t v28 = sub_1001E9D0C(inited);
  uint64_t v29 = v63;
  v74[2](v73, (uint64_t)&v62[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger], v63);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t countAndFlagsBits = (void *)swift_slowAlloc();
    v81[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t countAndFlagsBits = 136315138;
    uint64_t v62 = (char *)countAndFlagsBits + 4;
    swift_beginAccess();
    uint64_t v32 = URL.path.getter();
    v80[0] = (id)sub_1000993AC(v32, v33, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "creating firmware directory ar %s", (uint8_t *)countAndFlagsBits, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  ((void (*)(char *, uint64_t))v74[1])(v73, v29);
  swift_beginAccess();
  URL._bridgeToObjectiveC()(v34);
  os_log_type_t v36 = v35;
  sub_1001E1290(v28);
  swift_bridgeObjectRelease();
  type metadata accessor for FileAttributeKey(0);
  sub_100151570((unint64_t *)&qword_1002A8130, type metadata accessor for FileAttributeKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v80[0] = 0;
  id v21 = v61;
  unsigned int v38 = [v61 createDirectoryAtURL:v36 withIntermediateDirectories:1 attributes:isa error:v80];

  id v39 = v80[0];
  if (v38)
  {
LABEL_5:
    swift_beginAccess();
    Swift::String v40 = URL.path(percentEncoded:)(1);
    v78[0] = (id)0xD000000000000010;
    v78[1] = (id)0x8000000100238A60;
    Swift::String v77 = v40;
    swift_bridgeObjectRetain();
    v77._uint64_t countAndFlagsBits = String.init<A>(_:)();
    v77._object = v41;
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = (void *)v77._countAndFlagsBits;
    NSString v42 = String._bridgeToObjectiveC()();
    unsigned int v43 = [v21 fileExistsAtPath:v42];

    uint64_t v44 = v75;
    uint64_t v45 = v72;
    if (v43)
    {
      NSString v46 = String._bridgeToObjectiveC()();
      v78[0] = 0;
      unsigned int v47 = [v21 removeItemAtPath:v46 error:v78];

      if (!v47)
      {
        uint64_t countAndFlagsBits = v78[0];
        swift_bridgeObjectRelease();
        _convertNSErrorToError(_:)();

        swift_willThrow();
        ((void (*)(char *, uint64_t))v44[1])(v20, v76);
        return countAndFlagsBits;
      }
      id v48 = v78[0];
    }
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v44[7])(v68, 1, 1, v76);
    v64(v66, enum case for URL.DirectoryHint.inferFromPath(_:), v67);
    swift_bridgeObjectRetain();
    URL.init(filePath:directoryHint:relativeTo:)();
    uint64_t v49 = v71;
    uint64_t v50 = Data.init(contentsOf:options:)();
    if (v49)
    {
      uint64_t v52 = (void (*)(char *, uint64_t))v44[1];
      uint64_t countAndFlagsBits = (void *)v76;
      v52(v45, v76);
      swift_bridgeObjectRelease();

      v52(v20, (uint64_t)countAndFlagsBits);
    }
    else
    {
      unint64_t v54 = v51;
      id v61 = v21;
      uint64_t v55 = (void (**)(char *, uint64_t, uint64_t))v44[1];
      id v75 = v44 + 1;
      uint64_t v74 = v55;
      uint64_t v56 = v50;
      ((void (*)(char *, uint64_t))v55)(v45, v76);
      NSString v57 = String._bridgeToObjectiveC()();
      Class v58 = Data._bridgeToObjectiveC()().super.isa;
      id v59 = v61;
      [v61 createFileAtPath:v57 contents:v58 attributes:0];

      sub_1000A6240(v56, v54);
      ((void (*)(char *, uint64_t))v74)(v20, v76);
    }
  }
  else
  {
    uint64_t v53 = v39;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    ((void (*)(char *, uint64_t))v75[1])(v20, v76);
  }
  return countAndFlagsBits;
}

uint64_t sub_10015016C(uint64_t a1, void *a2)
{
  v72._object = a2;
  v72._uint64_t countAndFlagsBits = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v75 = *(void *)(v2 - 8);
  uint64_t v76 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v65 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v74 = (char *)&v64 - v5;
  uint64_t v71 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v69 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for Date();
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v66 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL.DirectoryHint();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = [self defaultManager];
  id v20 = [v19 URLsForDirectory:13 inDomains:1];
  uint64_t v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v21 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v14, v21 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0, 1, v15);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {

    sub_1000A61E4((uint64_t)v14, &qword_1002A7F70);
    return 0;
  }
  uint64_t v64 = v16;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for URL.DirectoryHint.isDirectory(_:), v8);
  sub_1000E9828();
  URL.append<A>(components:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  unint64_t v22 = v18;
  char v78 = 0;
  URL.path(percentEncoded:)(1);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v24 = [v19 fileExistsAtPath:v23 isDirectory:&v78];

  if ((v24 & 1) == 0)
  {
    sub_1000992E8((uint64_t *)&unk_1002A8FF0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = NSFilePosixPermissions;
    *(void *)(inited + 40) = 448;
    char v26 = NSFilePosixPermissions;
    unint64_t v27 = sub_1001E9D0C(inited);
    URL._bridgeToObjectiveC()(v28);
    uint64_t v30 = v29;
    sub_1001E1290(v27);
    swift_bridgeObjectRelease();
    type metadata accessor for FileAttributeKey(0);
    sub_100151570((unint64_t *)&qword_1002A8130, type metadata accessor for FileAttributeKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v80 = 0;
    unsigned int v32 = [v19 createDirectoryAtURL:v30 withIntermediateDirectories:1 attributes:isa error:&v80];

    id v33 = (id)v80;
    if (!v32)
    {
      uint64_t v53 = v33;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v55 = v75;
      uint64_t v54 = v76;
      uint64_t v56 = v65;
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v65, &v73[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger], v76);
      swift_errorRetain();
      swift_errorRetain();
      NSString v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = swift_slowAlloc();
        v79._uint64_t countAndFlagsBits = swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 136315394;
        swift_beginAccess();
        Swift::String v60 = URL.path(percentEncoded:)(1);
        uint64_t v77 = sub_1000993AC(v60._countAndFlagsBits, (unint64_t)v60._object, &v79._countAndFlagsBits);
        os_log_type_t v73 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v59 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v61 = Error.localizedDescription.getter();
        uint64_t v77 = sub_1000993AC(v61, v62, &v79._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Unable to create file storage directory %s: %s", (uint8_t *)v59, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v65, v76);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v73, v15);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v54);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v18, v15);
      }
      return 0;
    }
  }
  Swift::String v34 = URL.path(percentEncoded:)(1);
  uint64_t v80 = 0;
  unint64_t v81 = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  uint64_t v80 = 0x6574616470557766;
  unint64_t v81 = 0xE90000000000005FLL;
  uint64_t v35 = v66;
  Date.init()();
  uint64_t v36 = Date.description.getter();
  unsigned int v38 = v37;
  (*(void (**)(char *, uint64_t))(v67 + 8))(v35, v68);
  v39._uint64_t countAndFlagsBits = v36;
  v39._object = v38;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = 95;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  uint64_t v41 = v69;
  UUID.init()();
  sub_100151570(&qword_1002AA860, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v42 = v71;
  v43._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v41, v42);
  String.append(_:)(v72);
  Swift::String v79 = v34;
  swift_bridgeObjectRetain();
  v79._uint64_t countAndFlagsBits = String.init<A>(_:)();
  v79._object = v44;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v79._countAndFlagsBits;
  object = v79._object;
  uint64_t v48 = v75;
  uint64_t v47 = v76;
  uint64_t v49 = v74;
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v74, &v73[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_logger], v76);
  swift_bridgeObjectRetain_n();
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    os_log_type_t v73 = v22;
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    uint64_t v80 = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 136315138;
    swift_bridgeObjectRetain();
    v79._uint64_t countAndFlagsBits = sub_1000993AC(countAndFlagsBits, (unint64_t)object, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "packet capture file at %s", v52, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v76);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v73, v15);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v47);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v22, v15);
  }
  return countAndFlagsBits;
}

id sub_100150DE4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryFirmwareUpdateManager();
  return [super dealloc];
}

uint64_t sub_100150EDC()
{
  return type metadata accessor for AccessoryFirmwareUpdateManager();
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateManager()
{
  uint64_t result = qword_1002AA850;
  if (!qword_1002AA850) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100150F30()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100151004(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v6 = v4;
  uint64_t v9 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v9 < 0) {
      uint64_t v11 = *v4;
    }
    else {
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
    }
    uint64_t result = __CocoaDictionary.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    *uint64_t v6 = a4(v11, result + 1);
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v6;
  *uint64_t v6 = 0x8000000000000000;
  a3(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v6 = v14;

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001510D0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1000992E8((uint64_t *)&unk_1002AA868);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      type metadata accessor for DaemonAccessory();
      do
      {
        swift_dynamicCast();
        sub_100099C7C(0, (unint64_t *)&qword_1002A87E0);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v11 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v11)
        {
          sub_1001EE5E8(v11 + 1, 1);
          uint64_t v2 = v18;
        }
        Hasher.init(_seed:)();
        id v3 = *(id *)(v17 + 24);
        NSObject.hash(into:)();

        Swift::Int result = Hasher._finalize()();
        uint64_t v5 = v2 + 64;
        uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v7 = result & ~v6;
        unint64_t v8 = v7 >> 6;
        if (((-1 << v7) & ~*(void *)(v2 + 64 + 8 * (v7 >> 6))) != 0)
        {
          unint64_t v9 = __clz(__rbit64((-1 << v7) & ~*(void *)(v2 + 64 + 8 * (v7 >> 6)))) | v7 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v12 = 0;
          unint64_t v13 = (unint64_t)(63 - v6) >> 6;
          do
          {
            if (++v8 == v13 && (v12 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v14 = v8 == v13;
            if (v8 == v13) {
              unint64_t v8 = 0;
            }
            v12 |= v14;
            uint64_t v15 = *(void *)(v5 + 8 * v8);
          }
          while (v15 == -1);
          unint64_t v9 = __clz(__rbit64(~v15)) + (v8 << 6);
        }
        *(void *)(v5 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
        uint64_t v10 = 8 * v9;
        *(void *)(*(void *)(v2 + 48) + v10) = v17;
        *(void *)(*(void *)(v2 + 56) + v10) = v16;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaDictionary.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

Swift::Int sub_100151334(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1000992E8(&qword_1002AA878);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_100099C7C(0, (unint64_t *)&qword_1002AA880);
      do
      {
        swift_dynamicCast();
        type metadata accessor for AccessoryFirmwareUpdateSession();
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_1001EE8F4(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_100151570(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001515B8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001515F8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000A5ED8;
  v3[15] = v2;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10014E76C, 0, 0);
}

uint64_t sub_1001516A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8((uint64_t *)&unk_1002A87D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015170C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100151754()
{
  sub_10014A194(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void (**)(char *, uint64_t))(v0 + 40), *(void *)(v0 + 48));
}

id sub_100151764()
{
  type metadata accessor for FileSystem();
  uint64_t v0 = swift_allocObject();
  Logger.init(subsystem:category:)();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_cachePath;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_libraryPath, 1, 1, v2);
  id result = [self defaultManager];
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_system) = result;
  qword_1002B1558 = v0;
  return result;
}

id sub_100151890()
{
  uint64_t v1 = type metadata accessor for URL.DirectoryHint();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v5 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  id v20 = *(id *)(v0 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_system);
  id v12 = [v20 URLsForDirectory:5 inDomains:1];
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v13 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, v13 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100099DB0((uint64_t)v7);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to locate Library directory!", v16, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    strcpy(v21, "dockaccessoryd");
    v21[15] = -18;
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for URL.DirectoryHint.isDirectory(_:), v1);
    sub_1000E9828();
    URL.append<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    swift_bridgeObjectRelease();
    v21[0] = 0;
    URL.path(percentEncoded:)(1);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v17 = [v20 fileExistsAtPath:v18 isDirectory:v21];

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return v17;
}

uint64_t sub_100151CA4@<X0>(uint64_t a1@<X8>)
{
  return sub_100151D7C(&OBJC_IVAR____TtC14dockaccessoryd10FileSystem_libraryPath, 5, "Unable to locate Library directory!", a1);
}

uint64_t sub_100151D10@<X0>(uint64_t a1@<X8>)
{
  return sub_100151D7C(&OBJC_IVAR____TtC14dockaccessoryd10FileSystem_cachePath, 13, "Unable to locate Caches directory!", a1);
}

uint64_t sub_100151D7C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v63 = a3;
  uint64_t v7 = v4;
  uint64_t v68 = type metadata accessor for URL.DirectoryHint();
  uint64_t v67 = *(void *)(v68 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v66 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v69 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000992E8(&qword_1002A7F70);
  uint64_t v13 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v65 = (uint64_t)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v64 = (char *)&v61 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  id v19 = (char *)&v61 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v61 - v20;
  uint64_t v22 = v7 + *a1;
  swift_beginAccess();
  sub_1000EA570(v22, (uint64_t)v21);
  uint64_t v70 = v11;
  NSString v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v24 = v23(v21, 1, v10);
  sub_100099DB0((uint64_t)v21);
  if (v24 != 1) {
    return sub_1000EA570(v22, a4);
  }
  uint64_t v62 = a4;
  NSString v25 = *(void **)(v7 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_system);
  id v26 = [v25 URLsForDirectory:a2 inDomains:1];
  uint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v27 + 16))
  {
    uint64_t v28 = v70;
    (*(void (**)(char *, unint64_t, uint64_t))(v70 + 16))(v19, v27 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)), v10);
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56);
    v29(v19, 0, 1, v10);
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56);
    v29(v19, 1, 1, v10);
  }
  swift_bridgeObjectRelease();
  if (v23(v19, 1, v10) == 1)
  {
    sub_100099DB0((uint64_t)v19);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unsigned int v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, v63, v32, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v29)(v62, 1, 1, v10);
  }
  Swift::String v34 = v29;
  uint64_t v35 = v69;
  (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v69, v19, v10);
  strcpy((char *)v73, "dockaccessoryd");
  HIBYTE(v73[1]) = -18;
  uint64_t v36 = v67;
  unint64_t v37 = v66;
  uint64_t v38 = v68;
  (*(void (**)(char *, void, uint64_t))(v67 + 104))(v66, enum case for URL.DirectoryHint.isDirectory(_:), v68);
  sub_1000E9828();
  URL.append<A>(component:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
  swift_bridgeObjectRelease();
  char v72 = 0;
  URL.path(percentEncoded:)(1);
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v38) = [v25 fileExistsAtPath:v39 isDirectory:&v72];

  if (v38) {
    goto LABEL_11;
  }
  sub_1000992E8((uint64_t *)&unk_1002A8FF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  *(void *)(inited + 32) = NSFilePosixPermissions;
  *(void *)(inited + 40) = 448;
  uint64_t v41 = NSFilePosixPermissions;
  unint64_t v42 = sub_1001E9D0C(inited);
  URL._bridgeToObjectiveC()(v43);
  uint64_t v45 = v44;
  sub_1001E1290(v42);
  swift_bridgeObjectRelease();
  type metadata accessor for FileAttributeKey(0);
  sub_100152890();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v73[0] = 0;
  unsigned int v47 = [v25 createDirectoryAtURL:v45 withIntermediateDirectories:1 attributes:isa error:v73];

  id v48 = v73[0];
  if (v47)
  {
LABEL_11:
    uint64_t v49 = v70;
    uint64_t v50 = v64;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v64, v35, v10);
    v34(v50, 0, 1, v10);
    uint64_t v51 = (uint64_t)v50;
    uint64_t v52 = v65;
    sub_1001528E8(v51, v65);
    swift_beginAccess();
    sub_100152950(v52, v22);
    swift_endAccess();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v35, v10);
    a4 = v62;
    return sub_1000EA570(v22, a4);
  }
  uint64_t v53 = v48;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    *(_DWORD *)uint64_t v56 = 136315394;
    swift_beginAccess();
    Swift::String v57 = URL.path(percentEncoded:)(1);
    uint64_t v71 = sub_1000993AC(v57._countAndFlagsBits, (unint64_t)v57._object, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v58 = Error.localizedDescription.getter();
    uint64_t v71 = sub_1000993AC(v58, v59, &v74);
    uint64_t v35 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Unable to create file storage directory %s: %s", (uint8_t *)v56, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v60 = v70;
  v34((char *)v62, 1, 1, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v35, v10);
}

uint64_t sub_100152690()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_100099DB0(v0 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_cachePath);
  sub_100099DB0(v0 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_libraryPath);

  return swift_deallocClassInstance();
}

uint64_t sub_100152760()
{
  return type metadata accessor for FileSystem();
}

uint64_t type metadata accessor for FileSystem()
{
  uint64_t result = qword_1002AA8E0;
  if (!qword_1002AA8E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001527B4()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    sub_1000E472C();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

unint64_t sub_100152890()
{
  unint64_t result = qword_1002A8130;
  if (!qword_1002A8130)
  {
    type metadata accessor for FileAttributeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8130);
  }
  return result;
}

uint64_t sub_1001528E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002A7F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100152950(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002A7F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1001529B8()
{
  uint64_t v1 = v0;
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v34 - 8);
  uint64_t v3 = __chkstk_darwin(v34);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v33 - v5;
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v33 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1) {
    goto LABEL_17;
  }
  id v16 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo());
  uint64_t v17 = (void *)DockCoreInfo.init(type:name:identifier:)();
  DockCoreInfo.identifier.getter();

  id v18 = objc_allocWithZone((Class)type metadata accessor for AccessoryDescriptionParser());
  id v19 = sub_1001EB8B4((uint64_t)v12);
  unint64_t v20 = (unint64_t)sub_1001EBAD4();

  uint64_t v21 = v34;
  if (!(v20 >> 62))
  {
    if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v32) {
    goto LABEL_14;
  }
LABEL_4:
  if ((v20 & 0xC000000000000001) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    return;
  }
  id v22 = *(id *)(v20 + 32);
LABEL_7:
  id v33 = v22;
  swift_bridgeObjectRelease();
  uint64_t v23 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  int v24 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v24(v8, v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v21);
  NSString v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "adding debug mock", v27, 2u);
    uint64_t v21 = v34;
    swift_slowDealloc();
  }

  uint64_t v28 = *(void (**)(char *, uint64_t))(v2 + 8);
  v28(v8, v21);

  v24(v6, v23, v21);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed retrieving mock accessory", v31, 2u);
    swift_slowDealloc();
  }

  v28(v6, v21);
}

uint64_t sub_100152FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_1001B0B44(v10, v9, a2, a3);
  if (a1 && (v11 & 0x8000000000000000) == 0 && v11 < a1)
  {
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v12 = sub_1001B0AC8(v10, a1, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = (int)a2;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  if (v12 < v13)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x100153148);
  }
LABEL_16:
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_1000A6240(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

void sub_100153178()
{
  uint64_t v0 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100240BE0;
  *(void *)(v1 + 56) = &type metadata for UInt32;
  *(void *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = 260;
  String.init(format:_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 UUIDWithString:v2];

  qword_1002B1568 = (uint64_t)v3;
}

void sub_10015324C()
{
  uint64_t v0 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100240BE0;
  *(void *)(v1 + 56) = &type metadata for UInt32;
  *(void *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = 261;
  String.init(format:_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 UUIDWithString:v2];

  qword_1002B1570 = (uint64_t)v3;
}

void sub_100153320()
{
  uint64_t v0 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100240BE0;
  *(void *)(v1 + 56) = &type metadata for UInt32;
  *(void *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = 264;
  String.init(format:_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 UUIDWithString:v2];

  qword_1002B1578 = (uint64_t)v3;
}

void sub_1001533F4()
{
  uint64_t v0 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100240BE0;
  *(void *)(v1 + 56) = &type metadata for UInt32;
  *(void *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = 265;
  String.init(format:_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 UUIDWithString:v2];

  qword_1002B1580 = (uint64_t)v3;
}

void sub_1001534C8()
{
  uint64_t v0 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100240BE0;
  *(void *)(v1 + 56) = &type metadata for UInt32;
  *(void *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = 272;
  String.init(format:_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 UUIDWithString:v2];

  qword_1002B1588 = (uint64_t)v3;
}

void sub_10015359C()
{
  uint64_t v0 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100240BE0;
  *(void *)(v1 + 56) = &type metadata for UInt32;
  *(void *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = 266;
  String.init(format:_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 UUIDWithString:v2];

  qword_1002B1590 = (uint64_t)v3;
}

void sub_100153670()
{
  uint64_t v0 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100240BE0;
  *(void *)(v1 + 56) = &type metadata for UInt32;
  *(void *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = 564;
  String.init(format:_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 UUIDWithString:v2];

  qword_1002B1598 = (uint64_t)v3;
}

void sub_100153744()
{
  uint64_t v0 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100240BE0;
  *(void *)(v1 + 56) = &type metadata for UInt32;
  *(void *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = 565;
  String.init(format:_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 UUIDWithString:v2];

  qword_1002B15A0 = (uint64_t)v3;
}

void sub_100153818()
{
  uint64_t v0 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100240BE0;
  *(void *)(v1 + 56) = &type metadata for UInt32;
  *(void *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = 801;
  String.init(format:_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 UUIDWithString:v2];

  qword_1002B15A8 = (uint64_t)v3;
}

void sub_1001538EC()
{
  uint64_t v0 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100240BE0;
  *(void *)(v1 + 56) = &type metadata for UInt32;
  *(void *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = 802;
  String.init(format:_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 UUIDWithString:v2];

  qword_1002B15B0 = (uint64_t)v3;
}

void sub_1001539C0()
{
  uint64_t v0 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100240BE0;
  *(void *)(v1 + 56) = &type metadata for UInt32;
  *(void *)(v1 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v1 + 32) = 35;
  String.init(format:_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v0 UUIDWithString:v2];

  qword_1002B15B8 = (uint64_t)v3;
}

id sub_100153A94(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v80 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v77 = (char *)&v70 - v11;
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v70 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v78 = v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  Swift::String v79 = v14;
  ((void (*)(char *))v14)((char *)&v70 - v12);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accessory requested setup password.", v17, 2u);
    swift_slowDealloc();
  }

  unint64_t v20 = *(void (**)(void, void))(v7 + 8);
  uint64_t v18 = v7 + 8;
  id v19 = v20;
  id result = (id)((uint64_t (*)(char *, uint64_t))v20)(v13, v6);
  if (a2 != 1) {
    return result;
  }
  id v22 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (!v22)
  {
    uint64_t v84 = 0;
    long long v82 = 0u;
    long long v83 = 0u;
    unint64_t v42 = v80;
    goto LABEL_28;
  }
  if (!a1)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v75 = v19;
  uint64_t v76 = v18;
  uint64_t v23 = v22;
  id result = [a1 identifier];
  if (!result)
  {
LABEL_46:
    __break(1u);
    return result;
  }
  int v24 = result;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  uint64_t v73 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v28 = *(id *)&v23[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  uint64_t v74 = v23;
  uint64_t v29 = &v23[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v30 = *(void *)v29;
  uint64_t v31 = *(void *)(*(void *)v29 + 16);
  if (!v31)
  {
LABEL_21:
    Swift::String v43 = v74;
    id v44 = *(id *)&v74[v73];
    OS_dispatch_semaphore.signal()();

    uint64_t v84 = 0;
    long long v82 = 0u;
    long long v83 = 0u;

    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v71 = v6;
  char v72 = a1;
  uint64_t v32 = v30 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000A5D40(v32, (uint64_t)v81);
    id v33 = *(void **)(*sub_1000A5DA4(v81, v81[3]) + 32);
    if (!v33) {
      goto LABEL_10;
    }
    id v34 = v33;
    id v35 = [v34 identifier];
    if (v35) {
      break;
    }
LABEL_9:

LABEL_10:
    sub_100099BCC((uint64_t)v81);
    v32 += 40;
    if (!--v31)
    {
      swift_bridgeObjectRelease();
      a1 = v72;
      uint64_t v6 = v71;
      goto LABEL_21;
    }
  }
  uint64_t v36 = v35;
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  if (v37 != v25 || v39 != v27)
  {
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v41) {
      goto LABEL_23;
    }
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
LABEL_23:
  swift_bridgeObjectRelease();
  uint64_t v45 = v74;
  id v46 = *(id *)&v74[v73];
  OS_dispatch_semaphore.signal()();

  sub_1000A5D40((uint64_t)v81, (uint64_t)&v82);
  sub_100099BCC((uint64_t)v81);

  swift_bridgeObjectRelease();
  a1 = v72;
  uint64_t v6 = v71;
LABEL_24:
  id v19 = v75;
  unint64_t v42 = v80;
  if (!*((void *)&v83 + 1))
  {
LABEL_28:
    sub_1000A61E4((uint64_t)&v82, (uint64_t *)&unk_1002AAA30);
LABEL_29:
    v79(v42, v78, v6);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "No setup code available for pairing!", v51, 2u);
      swift_slowDealloc();
    }

    id result = (id)((uint64_t (*)(char *, uint64_t))v19)(v42, v6);
    if (a1)
    {
      *(void *)&long long v82 = 0;
      unsigned int v52 = [a1 stopPairingWithError:&v82];
      uint64_t v53 = (void *)v82;
      if (v52)
      {
        return v53;
      }
      else
      {
        uint64_t v80 = (char *)v82;
        id v54 = (id)v82;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        return (id)swift_errorRelease();
      }
    }
    __break(1u);
    goto LABEL_45;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_29;
  }
  unsigned int v47 = (uint64_t *)(v81[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  uint64_t v48 = *(void *)(v81[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24);
  if (v48 == 2)
  {
    swift_release();
    goto LABEL_29;
  }
  uint64_t v80 = (char *)v81[0];
  os_log_type_t v55 = a1;
  uint64_t v57 = v47[1];
  unint64_t v56 = v47[2];
  uint64_t v59 = v47[5];
  uint64_t v58 = v47[6];
  uint64_t v60 = v47[4];
  uint64_t v61 = *v47;
  sub_100169A00(*v47, v57, v56, v48, v60, v59, v58, (void (*)(uint64_t, uint64_t))sub_1000A618C);
  sub_1000A618C(v57, v56);
  sub_100169A00(v61, v57, v56, v48, v60, v59, v58, (void (*)(uint64_t, uint64_t))sub_1000A6240);
  uint64_t v62 = v77;
  v79(v77, v78, v6);
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v65 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v65 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Using setup code from setup payload.", v65, 2u);
    swift_slowDealloc();
  }

  v75(v62, v6);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v82 = 0;
  unsigned int v67 = [v55 tryPairingPassword:isa error:&v82];

  if (v67)
  {
    id v68 = (id)v82;
    sub_1000A6240(v57, v56);
  }
  else
  {
    id v69 = (id)v82;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_1000A6240(v57, v56);
    swift_errorRelease();
  }
  return (id)swift_release();
}

uint64_t sub_1001543EC(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v33 = a2;
  id v34 = a1;
  uint64_t v4 = type metadata accessor for DKPairingMetric();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v11);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v37 = v3;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Sending pairing metrics...", v18, 2u);
    uint64_t v3 = v37;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v19 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_pairingInterval;
  if (*(double *)(v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_pairingInterval) > 0.0)
  {
    static Date.now.getter();
    Date.timeIntervalSince1970.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_1002B1628;
  uint64_t v21 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  id v22 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v22 + 4);
  swift_release();
  uint64_t v23 = (unint64_t *)(v20 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess();
  unint64_t v24 = *v23;
  uint64_t v25 = *(os_unfair_lock_s **)(v20 + v21);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v25 + 4);
  swift_release();
  if (!(v24 >> 62))
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = v34;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease_n();
  uint64_t v26 = v34;
  if ((v32 & 0x8000000000000000) == 0)
  {
LABEL_9:
    if (v33)
    {
      swift_getErrorValue();
      Error.localizedDescription.getter();
      if (v26)
      {
LABEL_11:
        id v27 = [v26 firmwareVersion:v33];
        if (v27)
        {
          id v28 = v27;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        id v29 = [v26 serialNumber];
        if (v29)
        {
          uint64_t v30 = v29;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
      }
    }
    else if (v26)
    {
      goto LABEL_11;
    }
    DKPairingMetric.init(activePairings:duration:error:firmwareVersion:hardwareVersion:)();
    DKPairingMetric.send()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v6, v36);
    *(void *)(v37 + v19) = 0xBFF0000000000000;
    return result;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100154904(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for UUID();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v197 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(char **)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v14 = __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v197 - v15;
  if (!a2)
  {
    id v27 = *(void **)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
    if (!v27)
    {
      uint64_t v213 = 0;
      long long v212 = 0u;
      long long v211 = 0u;
      goto LABEL_45;
    }
    v203 = v17;
    uint64_t v200 = v16;
    if (a1)
    {
      v199 = v9;
      v202 = (char *)OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager;
      v206 = v11;
      uint64_t v204 = v10;
      id v28 = v27;
      *(void *)&long long v207 = a1;
      id v29 = [a1 identifier];
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v33 = v32;

        v201 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        id v34 = *(id *)((char *)v28 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
        OS_dispatch_semaphore.wait()();

        uint64_t v35 = (char *)v28 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories;
        swift_beginAccess();
        uint64_t v36 = *(void *)v35;
        uint64_t v37 = *(void *)(*(void *)v35 + 16);
        if (!v37)
        {
LABEL_29:
          id v64 = *(id *)&v201[(void)v28];
          OS_dispatch_semaphore.signal()();

          uint64_t v213 = 0;
          long long v212 = 0u;
          long long v211 = 0u;

          swift_bridgeObjectRelease();
          uint64_t v65 = v204;
          uint64_t v66 = v206;
          goto LABEL_41;
        }
        v205 = v4;
        uint64_t v38 = v36 + 32;
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_1000A5D40(v38, (uint64_t)v210);
          uint64_t v39 = *(void **)(*sub_1000A5DA4(v210, v210[3]) + 32);
          if (v39)
          {
            id v40 = v39;
            id v41 = [v40 identifier];
            if (v41)
            {
              unint64_t v42 = v41;
              uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v44 = v43;

              if (v3 == v31 && v44 == v33)
              {
                swift_bridgeObjectRelease();
LABEL_40:
                swift_bridgeObjectRelease();
                id v72 = *(id *)&v201[(void)v28];
                OS_dispatch_semaphore.signal()();

                sub_1000A5D40((uint64_t)v210, (uint64_t)&v211);
                sub_100099BCC((uint64_t)v210);

                swift_bridgeObjectRelease();
                uint64_t v65 = v204;
                uint64_t v66 = v206;
                uint64_t v4 = v205;
LABEL_41:
                uint64_t v73 = v203;
                uint64_t v74 = v202;
                if (*((void *)&v212 + 1))
                {
                  sub_1000A6298(&v211, (uint64_t)&v214);
                  sub_1000A5D40((uint64_t)&v214, (uint64_t)&v211);
                  sub_1000992E8(&qword_1002A82E0);
                  type metadata accessor for DaemonAccessory();
                  if (swift_dynamicCast())
                  {
                    *(unsigned char *)(v210[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 1;
                    swift_release();
                    uint64_t v75 = *(void **)&v74[(void)v4];
                    if (!v75) {
                      goto LABEL_60;
                    }
LABEL_55:
                    uint64_t v90 = v4;
                    uint64_t v91 = v75;
                    id v92 = [(id)v207 identifier];
                    if (v92)
                    {
                      uint64_t v93 = v92;
                      uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      unint64_t v96 = v95;

                      unint64_t v97 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
                      if (*(void *)&v91[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
                      {
                        v91[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 6;
                        id v98 = *(id *)&v91[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
                        sub_100156E14(v94, v96, 3, v97, 0);

                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                      }
                      else
                      {

                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                      }
                      uint64_t v4 = v90;
                      uint64_t v73 = v203;
                      goto LABEL_60;
                    }
LABEL_106:
                    __break(1u);
LABEL_107:
                    __break(1u);
LABEL_108:

                    __break(1u);
                    return;
                  }
                  id v76 = *(id *)(*sub_1000A5DA4(&v214, v215) + 24);
                  DockCoreInfo.type.getter();

                  id v77 = [(id)v207 primaryAccessory];
                  if (v77)
                  {
                    uint64_t v78 = v77;
                    id v79 = [v77 name];

                    if (v79)
                    {
                      static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v81 = v80;

                      sub_1000A5D40((uint64_t)&v214, (uint64_t)&v211);
                      if (!v81)
                      {
LABEL_51:
                        id v82 = *(id *)(*sub_1000A5DA4(&v211, *((uint64_t *)&v212 + 1)) + 24);
                        DockCoreInfo.name.getter();
                      }
                      sub_100099BCC((uint64_t)&v211);
                      id v83 = *(id *)(*sub_1000A5DA4(&v214, v215) + 24);
                      DockCoreInfo.identifier.getter();

                      id v84 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo());
                      uint64_t v85 = (void *)DockCoreInfo.init(type:name:identifier:)();
                      if (qword_1002A7C00 != -1) {
                        swift_once();
                      }
                      uint64_t v3 = qword_1002B1628;
                      id v86 = objc_allocWithZone((Class)type metadata accessor for DockCoreAccessory());
                      id v87 = v85;
                      id v88 = (void *)DockCoreAccessory.init(info:systems:)();
                      id v89 = sub_10018DFF0(v88, 0);

                      uint64_t v73 = v203;
                      uint64_t v75 = *(void **)&v74[(void)v4];
                      if (v75) {
                        goto LABEL_55;
                      }
LABEL_60:
                      uint64_t v99 = (void (*)(uint64_t, char *, uint64_t))*((void *)v66 + 2);
                      v199 = (char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
                      v201 = v66 + 16;
                      v198 = v99;
                      ((void (*)(void (*)(void, void)))v99)(v73);
                      uint64_t v100 = Logger.logObject.getter();
                      os_log_type_t v101 = static os_log_type_t.debug.getter();
                      if (os_log_type_enabled(v100, v101))
                      {
                        uint64_t v102 = (uint8_t *)swift_slowAlloc();
                        *(_WORD *)uint64_t v102 = 0;
                        _os_log_impl((void *)&_mh_execute_header, v100, v101, "Pair key exchange completed.", v102, 2u);
                        swift_slowDealloc();
                      }

                      id v104 = (void (*)(void, void))*((void *)v66 + 1);
                      uint64_t v103 = v66 + 8;
                      v203 = v104;
                      v104(v73, v65);
                      uint64_t v105 = *(void **)&v74[(void)v4];
                      if (v105)
                      {
                        v206 = v103;
                        uint64_t v3 = v105;
                        id v106 = [(id)v207 identifier];
                        if (!v106) {
                          goto LABEL_107;
                        }
                        uint64_t v107 = v106;
                        uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        uint64_t v110 = v109;

                        v202 = (char *)v3;
                        id v111 = (unint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
                        swift_beginAccess();
                        unint64_t v208 = *v111;
                        unint64_t v112 = v208;
                        if (v208 >> 62) {
                          goto LABEL_101;
                        }
                        unint64_t v113 = *(void *)((v208 & 0xFFFFFFFFFFFFFF8) + 0x10);
                        swift_bridgeObjectRetain();
                        swift_bridgeObjectRetain();
                        for (; v113; unint64_t v113 = _CocoaArrayWrapper.endIndex.getter())
                        {
                          *(void *)&long long v207 = v112 & 0xFFFFFFFFFFFFFF8;
                          v205 = (void *)(v112 + 32);
                          while (!__OFSUB__(v113--, 1))
                          {
                            if ((v112 & 0xC000000000000001) != 0)
                            {
                              uint64_t v115 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                            }
                            else
                            {
                              if ((v113 & 0x8000000000000000) != 0) {
                                goto LABEL_99;
                              }
                              if (v113 >= *(void *)(v207 + 16)) {
                                goto LABEL_100;
                              }
                              uint64_t v115 = v205[v113];
                              swift_retain();
                            }
                            uint64_t v117 = *(void *)(v115
                                             + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload
                                             + 32);
                            unint64_t v116 = *(void *)(v115
                                             + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload
                                             + 40);
                            sub_1000A618C(v117, v116);
                            uint64_t v118 = sub_10013E71C(v117, v116);
                            uint64_t v120 = v119;
                            sub_1000A6240(v117, v116);
                            if (v118 == v108 && v120 == v110)
                            {
                              swift_release();
                              swift_bridgeObjectRelease();
LABEL_84:
                              uint64_t v137 = swift_bridgeObjectRelease();
                              __chkstk_darwin(v137);
                              *(&v197 - 2) = (uint64_t)&v208;
                              unint64_t v209 = v113;
                              sub_10016999C(&v209, v210);
                              unint64_t v123 = v210[0];
                              goto LABEL_87;
                            }
                            char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
                            swift_release();
                            swift_bridgeObjectRelease();
                            if (v122) {
                              goto LABEL_84;
                            }
                            if (!v113) {
                              goto LABEL_79;
                            }
                          }
                          __break(1u);
LABEL_99:
                          __break(1u);
LABEL_100:
                          __break(1u);
LABEL_101:
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                        }
LABEL_79:
                        swift_bridgeObjectRelease();
                        unint64_t v123 = 0;
LABEL_87:

                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v65 = v204;
                        if (v123)
                        {
                          if (qword_1002A7C00 != -1) {
                            swift_once();
                          }
                          uint64_t v138 = v123 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
                          unint64_t v139 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
                          sub_1001958D4(v138, 3, v139, 0);
                          swift_release();
                          swift_bridgeObjectRelease();
                        }
                      }
                      unint64_t v140 = *(void **)(*sub_1000A5DA4(&v214, v215) + 32);
                      if (v140)
                      {
                        self;
                        id v141 = (char *)swift_dynamicCastObjCClass();
                        if (v141)
                        {
                          v206 = v141;
                          v198(v200, v199, v65);
                          v205 = v140;
                          uint64_t v142 = Logger.logObject.getter();
                          os_log_type_t v143 = static os_log_type_t.info.getter();
                          if (os_log_type_enabled(v142, v143))
                          {
                            v144 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)v144 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v142, v143, "Initiating characteristic discovery for newly paired accessory...", v144, 2u);
                            swift_slowDealloc();
                          }

                          v203(v200, v65);
                          sub_1000992E8((uint64_t *)&unk_1002AA6C0);
                          uint64_t v145 = swift_allocObject();
                          *(_OWORD *)(v145 + 16) = xmmword_1002425E0;
                          long long v146 = self;
                          sub_1000992E8((uint64_t *)&unk_1002A9F50);
                          uint64_t v147 = swift_allocObject();
                          long long v207 = xmmword_100240BE0;
                          *(_OWORD *)(v147 + 16) = xmmword_100240BE0;
                          *(void *)(v147 + 56) = &type metadata for UInt32;
                          *(void *)(v147 + 64) = &protocol witness table for UInt32;
                          *(_DWORD *)(v147 + 32) = 35;
                          String.init(format:_:)();
                          NSString v148 = String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease();
                          id v149 = [v146 UUIDWithString:v148];

                          id v150 = [v149 UUIDString];
                          uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v153 = v152;

                          *(void *)(v145 + 32) = v151;
                          *(void *)(v145 + 40) = v153;
                          uint64_t v154 = swift_allocObject();
                          *(_OWORD *)(v154 + 16) = v207;
                          *(void *)(v154 + 56) = &type metadata for UInt32;
                          *(void *)(v154 + 64) = &protocol witness table for UInt32;
                          *(_DWORD *)(v154 + 32) = 33;
                          String.init(format:_:)();
                          NSString v155 = String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease();
                          id v156 = [v146 UUIDWithString:v155];

                          id v157 = [v156 UUIDString];
                          uint64_t v158 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v160 = v159;

                          *(void *)(v145 + 48) = v158;
                          *(void *)(v145 + 56) = v160;
                          uint64_t v161 = swift_allocObject();
                          *(_OWORD *)(v161 + 16) = v207;
                          *(void *)(v161 + 56) = &type metadata for UInt32;
                          *(void *)(v161 + 64) = &protocol witness table for UInt32;
                          *(_DWORD *)(v161 + 32) = 32;
                          String.init(format:_:)();
                          NSString v162 = String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease();
                          id v163 = [v146 UUIDWithString:v162];

                          id v164 = [v163 UUIDString];
                          uint64_t v165 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v167 = v166;

                          *(void *)(v145 + 64) = v165;
                          *(void *)(v145 + 72) = v167;
                          uint64_t v168 = swift_allocObject();
                          *(_OWORD *)(v168 + 16) = v207;
                          *(void *)(v168 + 56) = &type metadata for UInt32;
                          *(void *)(v168 + 64) = &protocol witness table for UInt32;
                          *(_DWORD *)(v168 + 32) = 48;
                          String.init(format:_:)();
                          NSString v169 = String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease();
                          id v170 = [v146 UUIDWithString:v169];

                          id v171 = [v170 UUIDString];
                          uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v174 = v173;

                          *(void *)(v145 + 80) = v172;
                          *(void *)(v145 + 88) = v174;
                          uint64_t v175 = swift_allocObject();
                          *(_OWORD *)(v175 + 16) = v207;
                          *(void *)(v175 + 56) = &type metadata for UInt32;
                          *(void *)(v175 + 64) = &protocol witness table for UInt32;
                          *(_DWORD *)(v175 + 32) = 82;
                          String.init(format:_:)();
                          NSString v176 = String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease();
                          id v177 = [v146 UUIDWithString:v176];

                          id v178 = [v177 UUIDString];
                          uint64_t v179 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v181 = v180;

                          *(void *)(v145 + 96) = v179;
                          *(void *)(v145 + 104) = v181;
                          uint64_t v182 = swift_allocObject();
                          *(_OWORD *)(v182 + 16) = v207;
                          *(void *)(v182 + 56) = &type metadata for UInt32;
                          *(void *)(v182 + 64) = &protocol witness table for UInt32;
                          *(_DWORD *)(v182 + 32) = 544;
                          String.init(format:_:)();
                          NSString v183 = String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease();
                          id v184 = [v146 UUIDWithString:v183];

                          id v185 = [v184 UUIDString];
                          uint64_t v186 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v188 = v187;

                          *(void *)(v145 + 112) = v186;
                          *(void *)(v145 + 120) = v188;
                          uint64_t v189 = swift_allocObject();
                          *(_OWORD *)(v189 + 16) = v207;
                          *(void *)(v189 + 56) = &type metadata for UInt32;
                          *(void *)(v189 + 64) = &protocol witness table for UInt32;
                          *(_DWORD *)(v189 + 32) = 304;
                          String.init(format:_:)();
                          NSString v190 = String._bridgeToObjectiveC()();
                          swift_bridgeObjectRelease();
                          id v191 = [v146 UUIDWithString:v190];

                          id v192 = [v191 UUIDString];
                          uint64_t v193 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                          uint64_t v195 = v194;

                          *(void *)(v145 + 128) = v193;
                          *(void *)(v145 + 136) = v195;
                          Class isa = Array._bridgeToObjectiveC()().super.isa;
                          swift_bridgeObjectRelease();
                          [v206 discoverAccessoriesAndReadCharacteristicTypes:isa];
                        }
                      }
                      sub_100099BCC((uint64_t)&v214);
                      return;
                    }
                  }
                  sub_1000A5D40((uint64_t)&v214, (uint64_t)&v211);
                  goto LABEL_51;
                }
LABEL_45:
                sub_1000A61E4((uint64_t)&v211, (uint64_t *)&unk_1002AAA30);
                return;
              }
              uint64_t v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v3) {
                goto LABEL_40;
              }
            }
          }
          sub_100099BCC((uint64_t)v210);
          v38 += 40;
          if (!--v37)
          {
            swift_bridgeObjectRelease();
            uint64_t v4 = v205;
            goto LABEL_29;
          }
        }
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_105;
  }
  v203 = v18;
  *(void *)&long long v207 = a1;
  v205 = v4;
  uint64_t v20 = (char *)*((void *)v11 + 2);
  v202 = (char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  v201 = v20;
  ((void (*)(char *))v20)((char *)&v197 - v15);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v204 = v10;
    v206 = v11;
    unint64_t v24 = (uint8_t *)v23;
    id v214 = (id)swift_slowAlloc();
    *(_DWORD *)unint64_t v24 = 136315138;
    uint64_t v3 = (uint64_t)(v24 + 12);
    swift_getErrorValue();
    uint64_t v25 = Error.localizedDescription.getter();
    *(void *)&long long v211 = sub_1000993AC(v25, v26, (uint64_t *)&v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error during pair setup: %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v11 = v206;
    uint64_t v10 = v204;
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  id v46 = (void (*)(char *, uint64_t))*((void *)v11 + 1);
  v46(v19, v10);
  unsigned int v47 = (void *)v207;
  if (!(void)v207) {
    return;
  }
  self;
  uint64_t v48 = swift_dynamicCastObjCClass();
  if (!v48) {
    return;
  }
  uint64_t v49 = (void *)v48;
  os_log_type_t v50 = *(void **)((char *)v205 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (!v50)
  {
    id v63 = v47;
    goto LABEL_32;
  }
  v206 = v11;
  uint64_t v51 = v10;
  unsigned int v52 = v50;
  uint64_t v53 = v47;
  id v54 = v52;
  id v55 = v53;
  id v56 = [v49 identifier];
  if (!v56)
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  uint64_t v57 = v56;
  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v60 = v59;

  unint64_t v61 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
  if (*(void *)&v54[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
  {
    v54[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
    id v62 = *(id *)&v54[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
    sub_100156E14(v58, v60, 5, v61, a2);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = v51;
  uint64_t v11 = v206;
  unsigned int v47 = (void *)v207;
LABEL_32:
  sub_1001543EC(0, a2);
  if ([v49 pendingRemovePairing] == (id)1 || objc_msgSend(v49, "connectReason") == 7)
  {
  }
  else
  {
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    id v67 = *(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
    id v68 = (void *)v207;
    id v69 = [(id)v207 identifier];
    id v214 = 0;
    unsigned int v70 = [v67 removeAccessoryKeyForName:v69 error:&v214];

    if (v70)
    {
      id v71 = v214;
    }
    else
    {
      v206 = v11;
      id v124 = v214;
      uint64_t v125 = _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v126 = (char *)v203;
      ((void (*)(void (*)(void, void), char *, uint64_t))v201)(v203, v202, v10);
      uint64_t v3 = v68;
      NSString v127 = Logger.logObject.getter();
      os_log_type_t v128 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v127, v128))
      {
        *(void *)&long long v207 = v125;
        uint64_t v204 = v10;
        uint64_t v129 = (uint8_t *)swift_slowAlloc();
        id v214 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v129 = 136315138;
        id v130 = [(id)v3 identifier];
        if (!v130) {
          goto LABEL_108;
        }
        id v131 = v130;
        uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v134 = v133;

        *(void *)&long long v211 = sub_1000993AC(v132, v134, (uint64_t *)&v214);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v127, v128, "Failed to remove keychain entry for accessory: %s", v129, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_errorRelease();

        unint64_t v135 = (char *)v203;
        uint64_t v136 = v204;
      }
      else
      {

        swift_errorRelease();
        unint64_t v135 = v126;
        uint64_t v136 = v10;
      }
      v46(v135, v136);
    }
  }
}

void sub_1001561AC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v43 - v9;
  if (a1)
  {
    self;
    uint64_t v11 = swift_dynamicCastObjCClass();
    if (v11)
    {
      uint64_t v12 = (void *)v11;
      uint64_t v13 = a1;
      unsigned int v47 = v12;
      id v14 = [v12 primaryAccessory];
      if (!v14) {
        goto LABEL_12;
      }
      id v44 = v14;
      uint64_t v45 = v13;
      id v46 = v2;
      uint64_t v15 = self;
      sub_1000992E8((uint64_t *)&unk_1002A9F50);
      uint64_t v16 = swift_allocObject();
      long long v43 = xmmword_100240BE0;
      *(_OWORD *)(v16 + 16) = xmmword_100240BE0;
      *(void *)(v16 + 56) = &type metadata for UInt32;
      *(void *)(v16 + 64) = &protocol witness table for UInt32;
      *(_DWORD *)(v16 + 32) = 21;
      String.init(format:_:)();
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v18 = [v15 UUIDWithString:v17];

      NSString v19 = [v18 UUIDString];
      if (!v19)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v19 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = v43;
      *(void *)(v20 + 56) = &type metadata for UInt32;
      *(void *)(v20 + 64) = &protocol witness table for UInt32;
      *(_DWORD *)(v20 + 32) = 16;
      String.init(format:_:)();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v22 = [v15 UUIDWithString:v21];

      NSString v23 = [v22 UUIDString];
      if (!v23)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      id v24 = v44;
      id v25 = [v44 characteristicOfType:v19 serviceType:v23];

      uint64_t v13 = v45;
      uint64_t v2 = v46;
      if (v25)
      {
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v10, &v46[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger], v4);
        unint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v26, v27))
        {
          id v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v28 = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Reading Pairing State Number...", v28, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
        sub_1000992E8(&qword_1002A8340);
        uint64_t v29 = swift_allocObject();
        *(_OWORD *)(v29 + 16) = xmmword_100240BF0;
        *(void *)(v29 + 32) = v25;
        aBlock[0] = v29;
        specialized Array._endMutation()();
        sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
        id v30 = v25;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v32 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_workQueue];
        uint64_t v33 = swift_allocObject();
        id v34 = v47;
        *(void *)(v33 + 16) = v2;
        *(void *)(v33 + 24) = v34;
        aBlock[4] = sub_1001699B4;
        aBlock[5] = v33;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1001A6714;
        uint64_t aBlock[3] = &unk_100278AE0;
        uint64_t v35 = _Block_copy(aBlock);
        uint64_t v36 = v13;
        id v37 = v32;
        uint64_t v38 = v2;
        swift_release();
        [v34 readCharacteristicValues:isa timeout:v37 completionQueue:v35 completionHandler:10.0];

        _Block_release(v35);
      }
      else
      {
LABEL_12:
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, &v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger], v4);
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          id v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Accessory does not contain a Pairing State Number characteristic!", v41, 2u);
          swift_slowDealloc();
          unint64_t v42 = v13;
        }
        else
        {
          unint64_t v42 = v39;
          uint64_t v39 = v13;
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      }
    }
  }
}

void sub_1001567A4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)type metadata accessor for Logger();
  uint64_t v9 = (char *)*(v8 - 1);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v42 - v14;
  __chkstk_darwin(v13);
  NSString v17 = (char *)&v42 - v16;
  if (a2)
  {
    (*((void (**)(char *, uint64_t, void *))v9 + 2))((char *)&v42 - v16, a3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v8);
    swift_errorRetain();
    swift_errorRetain();
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      v53[0] = swift_slowAlloc();
      os_log_type_t v50 = v8;
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_getErrorValue();
      uint64_t v21 = Error.localizedDescription.getter();
      *(void *)&v52[0] = sub_1000993AC(v21, v22, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error reading Pairing State Number characteristic: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*((void (**)(char *, void *))v9 + 1))(v17, v50);
      return;
    }
    swift_errorRelease();
    swift_errorRelease();

    id v37 = (void (*)(char *, void *))*((void *)v9 + 1);
    uint64_t v38 = v17;
    goto LABEL_29;
  }
  if (!a1)
  {
    (*((void (**)(char *, uint64_t, void *))v9 + 2))(v15, a3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v8);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Error reading Pairing State Number characteristic: no results returned!", v41, 2u);
      swift_slowDealloc();
    }

    id v37 = (void (*)(char *, void *))*((void *)v9 + 1);
    uint64_t v38 = v15;
LABEL_29:
    v37(v38, v8);
    return;
  }
  if (!(a1 >> 62))
  {
    uint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v23) {
      goto LABEL_7;
    }
LABEL_34:
LABEL_36:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_33:
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  if (!v23) {
    goto LABEL_34;
  }
LABEL_7:
  uint64_t v45 = a3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  id v46 = (id)a4;
  unint64_t v49 = a1 & 0xC000000000000001;
  os_log_type_t v50 = v8;
  id v44 = (void (**)(char *, uint64_t, void *))(v9 + 16);
  long long v43 = (void (**)(char *, void *))(v9 + 8);
  a4 = 4;
  unsigned int v47 = (char *)&type metadata for Any + 8;
  *(void *)&long long v24 = 33554688;
  long long v42 = v24;
  unint64_t v48 = a1;
  while (1)
  {
    a3 = a4 - 4;
    if (v49) {
      id v25 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v25 = (char *)*(id *)(a1 + 8 * a4);
    }
    uint64_t v9 = v25;
    unint64_t v26 = v50;
    a1 = a4 - 3;
    if (__OFADD__(a3, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if ([v25 value])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v52, 0, sizeof(v52));
    }
    sub_1000EA2DC((uint64_t)v52, (uint64_t)v53, &qword_1002AA5F0);
    if (!v53[3])
    {

      sub_1000A61E4((uint64_t)v53, &qword_1002AA5F0);
      goto LABEL_36;
    }
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      return;
    }
    unint64_t v27 = v51;
    (*v44)(v12, v45, v26);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = v42;
      *(_WORD *)(v30 + 4) = v27;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Updating Pairing State Number to %hu", (uint8_t *)v30, 6u);
      unint64_t v26 = v50;
      swift_slowDealloc();
    }

    (*v43)(v12, v26);
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    id v31 = *(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
    id v32 = [v46 identifier];
    if (!v32) {
      break;
    }
    uint64_t v33 = v32;
    uint64_t v8 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;

    sub_100173420(v27, v8, v35);
    swift_bridgeObjectRelease();
    ++a4;
    BOOL v36 = a1 == v23;
    a1 = v48;
    if (v36) {
      goto LABEL_36;
    }
  }
  __break(1u);
}

uint64_t sub_100156E14(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v78 = a3;
  uint64_t v83 = a1;
  uint64_t v77 = 0;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v75 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v67 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  os_log_type_t v19 = (char *)&v67 - v18;
  uint64_t v20 = v6 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v81 = v17;
  uint64_t v82 = v6;
  uint64_t v76 = v11;
  uint64_t v71 = a4;
  uint64_t v74 = v11 + 16;
  uint64_t v73 = v21;
  if (a5)
  {
    v21((char *)&v67 - v18, v20, v10);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v22 = v10;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      v87[0] = v80;
      *(_DWORD *)uint64_t v25 = 136315650;
      swift_bridgeObjectRetain();
      v86[0] = (id)sub_1000993AC(v83, a2, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 12) = 2048;
      v86[0] = (id)PairingRequestState.rawValue.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 22) = 2080;
      swift_getErrorValue();
      uint64_t v26 = Error.localizedDescription.getter();
      v86[0] = (id)sub_1000993AC(v26, v27, v87);
      uint64_t v6 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Attempting to update prox card for %s with status %ld due to error: %s", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v10 = v81;
      id v72 = *(void (**)(char *, uint64_t))(v11 + 8);
      v72(v19, v81);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();

      id v72 = *(void (**)(char *, uint64_t))(v11 + 8);
      v72(v19, v22);
      uint64_t v10 = v22;
    }
  }
  else
  {
    v21(v16, v20, v10);
    swift_bridgeObjectRetain_n();
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      v87[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315394;
      swift_bridgeObjectRetain();
      v86[0] = (id)sub_1000993AC(v83, a2, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v30 + 12) = 2048;
      v86[0] = (id)PairingRequestState.rawValue.getter();
      uint64_t v6 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Attempting to update prox card for %s with status %ld", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      uint64_t v10 = v81;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    id v72 = *(void (**)(char *, uint64_t))(v11 + 8);
    v72(v16, v10);
  }
  uint64_t v70 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager;
  uint64_t v31 = *(void *)(v6 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (!v31) {
    goto LABEL_45;
  }
  id v32 = (unint64_t *)(v31 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
  swift_beginAccess();
  unint64_t v84 = *v32;
  unint64_t v33 = v84;
  uint64_t v69 = a5;
  id v68 = (void *)v31;
  if (!(v84 >> 62))
  {
    unint64_t v34 = *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v35 = (id)v31;
    if (v34) {
      goto LABEL_12;
    }
LABEL_25:
    swift_bridgeObjectRelease();
    unint64_t v34 = 0;
    uint64_t v6 = v82;
    uint64_t v44 = v69;
    uint64_t v45 = v68;
    goto LABEL_31;
  }
LABEL_56:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v66 = (id)v31;
  unint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  if (!v34) {
    goto LABEL_25;
  }
LABEL_12:
  unint64_t v79 = v33 + 32;
  uint64_t v80 = v33 & 0xFFFFFFFFFFFFFF8;
  while (1)
  {
    if (__OFSUB__(v34--, 1))
    {
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    if ((v33 & 0xC000000000000001) != 0)
    {
      uint64_t v37 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((v34 & 0x8000000000000000) != 0) {
        goto LABEL_54;
      }
      if (v34 >= *(void *)(v80 + 16)) {
        goto LABEL_55;
      }
      uint64_t v37 = *(void *)(v79 + 8 * v34);
      swift_retain();
    }
    uint64_t v38 = *(void *)(v37 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    unint64_t v39 = *(void *)(v37 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    sub_1000A618C(v38, v39);
    uint64_t v40 = sub_10013E71C(v38, v39);
    uint64_t v42 = v41;
    sub_1000A6240(v38, v39);
    if (v40 == v83 && v42 == a2) {
      break;
    }
    uint64_t v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_27;
    }
    if (!v34) {
      goto LABEL_25;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v46 = swift_bridgeObjectRelease();
  __chkstk_darwin(v46);
  *(&v67 - 2) = (uint64_t)&v84;
  uint64_t v85 = v34;
  uint64_t v47 = v77;
  sub_10016999C((unint64_t *)&v85, (unint64_t *)v86);
  uint64_t v45 = v68;
  if (v47)
  {
    uint64_t v77 = 1;
  }
  else
  {
    uint64_t v77 = 0;
    unint64_t v34 = (unint64_t)v86[0];
  }
  uint64_t v6 = v82;
  uint64_t v44 = v69;
LABEL_31:

  swift_bridgeObjectRelease();
  uint64_t v10 = v81;
  if (!v34)
  {
LABEL_45:
    unint64_t v61 = v75;
    v73(v75, v6 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v10);
    swift_bridgeObjectRetain_n();
    id v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      id v64 = (uint8_t *)swift_slowAlloc();
      v86[0] = (id)swift_slowAlloc();
      *(_DWORD *)id v64 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v85 = sub_1000993AC(v83, a2, (uint64_t *)v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Cannot find token for accessory %s", v64, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return ((uint64_t (*)(char *, uint64_t))v72)(v61, v10);
  }
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_1001958D4(v34 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, v78, v71, v44);
  uint64_t v48 = PairingRequestState.rawValue.getter();
  if (v48 != PairingRequestState.rawValue.getter())
  {
    uint64_t v49 = PairingRequestState.rawValue.getter();
    if (v49 != PairingRequestState.rawValue.getter()) {
      goto LABEL_40;
    }
  }
  os_log_type_t v50 = *(char **)(v6 + v70);
  if (!v50) {
    goto LABEL_40;
  }
  unsigned __int16 v51 = (uint64_t *)&v50[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unsigned int v52 = v50;
  uint64_t v53 = sub_100162874(v51, v83, a2);
  swift_bridgeObjectRelease();
  if ((unint64_t)*v51 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v54 >= v53) {
      goto LABEL_39;
    }
LABEL_59:
    __break(1u);
  }
  uint64_t v54 = *(void *)((*v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v54 < v53) {
    goto LABEL_59;
  }
LABEL_39:
  sub_1001A0960(v53, v54);
  swift_endAccess();

LABEL_40:
  uint64_t v55 = PairingRequestState.rawValue.getter();
  if (v55 != PairingRequestState.rawValue.getter()) {
    return swift_release();
  }
  uint64_t v56 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth;
  if (!*(void *)(v6 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth)) {
    return swift_release();
  }
  uint64_t result = sub_1001543EC(0, v44);
  uint64_t v58 = *(void *)(v6 + v56);
  if (v58)
  {
    unint64_t v59 = *(void **)(v58 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
    v86[0] = 0;
    if ([v59 stopPairingWithError:v86])
    {
      id v60 = v86[0];
    }
    else
    {
      id v65 = v86[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    *(void *)(v6 + v56) = 0;
    swift_release();
    return swift_release();
  }
  __break(1u);
  return result;
}

uint64_t sub_100157980(uint64_t a1, void *a2)
{
  uint64_t v66 = a1;
  uint64_t v4 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v4 - 8);
  id v64 = (char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v67 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v61 - v10;
  id v65 = v2;
  uint64_t v12 = &v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger];
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v13((char *)v61 - v10, &v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger], v6);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Finished discovery of accessory.  Device successfully paired!", v16, 2u);
    swift_slowDealloc();
  }

  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v11, v6);
  uint64_t v18 = v67;
  v13(v67, v12, v6);
  id v19 = a2;
  uint64_t v20 = Logger.logObject.getter();
  int v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, (os_log_type_t)v21))
  {
    v61[0] = v17;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v69 = v23;
    *(_DWORD *)uint64_t v22 = 136316162;
    id v24 = [v19 name];
    uint64_t v63 = v6;
    int v62 = v21;
    v61[1] = v23;
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v28 = v27;
    }
    else
    {
      unint64_t v28 = 0xE300000000000000;
      uint64_t v26 = 4144959;
    }
    uint64_t v68 = sub_1000993AC(v26, v28, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    id v31 = [v19 manufacturer];
    if (v31)
    {
      id v32 = v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v35 = v34;
    }
    else
    {
      unint64_t v35 = 0xE300000000000000;
      uint64_t v33 = 4144959;
    }
    uint64_t v68 = sub_1000993AC(v33, v35, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    id v36 = [v19 model];
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v40 = v39;
    }
    else
    {
      unint64_t v40 = 0xE300000000000000;
      uint64_t v38 = 4144959;
    }
    uint64_t v68 = sub_1000993AC(v38, v40, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 32) = 2080;
    id v41 = [v19 serialNumber];
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v45 = v44;
    }
    else
    {
      unint64_t v45 = 0xE300000000000000;
      uint64_t v43 = 4144959;
    }
    uint64_t v68 = sub_1000993AC(v43, v45, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 42) = 2080;
    id v46 = [v19 firmwareVersion];
    if (v46)
    {
      uint64_t v47 = v46;
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v50 = v49;

      uint64_t v30 = v66;
      unsigned __int16 v51 = v67;
      unsigned int v52 = (uint64_t (*)(char *, uint64_t))v61[0];
    }
    else
    {
      unint64_t v50 = 0xE300000000000000;
      uint64_t v30 = v66;
      unsigned __int16 v51 = v67;
      unsigned int v52 = (uint64_t (*)(char *, uint64_t))v61[0];
      uint64_t v48 = 4144959;
    }
    uint64_t v68 = sub_1000993AC(v48, v50, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v62, "Accessory [name: %s, manufacturer: %s, model: %s, serial number: %s, firmware version: %s]", (uint8_t *)v22, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t result = v52(v51, v63);
  }
  else
  {

    uint64_t result = ((uint64_t (*)(char *, uint64_t))v17)(v18, v6);
    uint64_t v30 = v66;
  }
  *(unsigned char *)(v30 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 2;
  uint64_t v53 = *(void **)(v30 + 32);
  if (v53)
  {
    id v54 = v53;
    uint64_t v55 = v65;
    sub_1001561AC(v53);

    uint64_t v56 = type metadata accessor for TaskPriority();
    uint64_t v57 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v64, 1, 1, v56);
    uint64_t v58 = (void *)swift_allocObject();
    void v58[2] = 0;
    v58[3] = 0;
    v58[4] = v30;
    v58[5] = v55;
    v58[6] = v19;
    id v59 = v19;
    swift_retain();
    id v60 = v55;
    sub_1001BC1A8(v57, (uint64_t)&unk_1002AAA58, (uint64_t)v58);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10015805C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[8] = a5;
  v6[9] = a6;
  v6[7] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[10] = v7;
  v6[11] = *(void *)(v7 - 8);
  v6[12] = swift_task_alloc();
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v6[15] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_10015816C;
  return sub_1000F9F28();
}

uint64_t sub_10015816C()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100158268, 0, 0);
}

uint64_t sub_100158268()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController;
  [*(id *)(v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController) deRegisterFromNotifications];
  [*(id *)(v1 + v2) invalidate];
  uint64_t v3 = *(void **)(v1 + v2);
  *(void *)(v1 + v2) = 0;

  sub_1000A9C64();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100158338;
  return sub_1000F9954();
}

uint64_t sub_100158338()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100158434, 0, 0);
}

uint64_t sub_100158434()
{
  uint64_t v1 = (void *)v0[9];
  sub_1001AADB0(1);
  id v2 = [v1 name];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v6 = 0;
  }
  v0[17] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[18] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10015852C;
  uint64_t v8 = v0[7];
  return sub_10015AD70(v8, v4, v6, 1);
}

uint64_t sub_10015852C()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = sub_1001590F4;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v2 = sub_100158648;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_100158648()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 56);
  sub_1000F908C(0);
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion);
  *uint64_t v3 = v4;
  v3[1] = v5;
  swift_bridgeObjectRelease();
  sub_1000F9098(0);
  uint64_t v6 = (void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup);
  *uint64_t v6 = v7;
  v6[1] = v8;
  swift_bridgeObjectRelease();
  sub_1000F93D8(0);
  uint64_t v9 = (void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber);
  *uint64_t v9 = v10;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  sub_1000F95DC(0);
  uint64_t v12 = (void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData);
  *uint64_t v12 = v13;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  os_log_type_t v15 = *(void **)(v0 + 72);
  uint64_t v110 = *(void *)(v0 + 56);
  id v16 = *(id *)(v110 + 24);
  id v17 = [v15 firmwareVersion];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;
  }
  else
  {
    uint64_t v113 = 0;
    uint64_t v20 = 0;
  }
  id v21 = [*(id *)(v0 + 72) serialNumber];
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v25 = 0;
  }
  id v26 = [*(id *)(v0 + 72) model];
  if (v26)
  {
    unint64_t v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v30 = 0;
  }
  id v31 = (uint64_t *)(*(void *)(v0 + 56) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  unint64_t v32 = v31[3];
  uint64_t v111 = v1;
  uint64_t v118 = v25;
  uint64_t v116 = v30;
  if (v32 == 2)
  {
    LODWORD(v33) = 0;
  }
  else
  {
    os_log_t loga = (os_log_t)v23;
    *(void *)uint64_t v108 = v16;
    unint64_t v34 = v31[5];
    uint64_t v104 = v31[6];
    uint64_t v35 = v31[4];
    uint64_t v36 = v20;
    uint64_t v38 = v31[1];
    unint64_t v37 = v31[2];
    uint64_t v39 = *v31;
    sub_1000A618C(v38, v37);
    sub_1000A618C(v35, v34);
    uint64_t v40 = v38;
    uint64_t v20 = v36;
    uint64_t v41 = v34;
    uint64_t v23 = (uint64_t)loga;
    id v16 = *(id *)v108;
    sub_100169A00(v39, v40, v37, v32, v35, v41, v104, (void (*)(uint64_t, uint64_t))sub_1000A6240);
    uint64_t v33 = (v32 >> 8) & 1;
  }
  uint64_t v42 = *(void *)(v0 + 64);
  uint64_t v43 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager;
  uint64_t v44 = *(void *)(v42 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (v44)
  {
    uint64_t v44 = *(void *)(v44 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard);
    if (v44) {
      LOBYTE(v44) = *(unsigned char *)(v44 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_requiresSWAuth);
    }
  }
  unint64_t v45 = *(void **)(v0 + 72);
  LOBYTE(v101) = v44;
  sub_10018EEEC(v16, v113, v20, v23, v118, v28, v116, v33);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001543EC(v45, 0);
  id v46 = *(void **)(v42 + v43);
  if (!v46) {
    goto LABEL_24;
  }
  uint64_t v47 = *(void **)(*(void *)(v0 + 56) + 32);
  uint64_t v48 = v46;
  if (!v47)
  {
    swift_errorRelease();
    __break(1u);
    goto LABEL_49;
  }
  unint64_t v49 = v48;
  id v50 = [v47 identifier:v101];
  if (!v50)
  {
LABEL_49:
    uint64_t result = swift_errorRelease();
    __break(1u);
    return result;
  }
  unsigned __int16 v51 = v50;
  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v54 = v53;

  unint64_t v55 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
  if (*(void *)&v49[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
  {
    v49[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
    id v56 = *(id *)&v49[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
    sub_100156E14(v52, v54, 4, v55, 0);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_24:
  if (qword_1002A7C20 != -1) {
    swift_once();
  }
  uint64_t v57 = *(void *)(v0 + 56);
  uint64_t v58 = *(void **)(v0 + 64);
  id v59 = &unk_1002B1000;
  id v60 = sub_1001DB130();
  swift_retain();
  uint64_t v61 = v111;
  uint64_t v62 = sub_100163414((uint64_t)v60, v57);
  swift_release();
  swift_bridgeObjectRelease();
  id v63 = v58;
  sub_100162428(v62, (uint64_t)v63);

  swift_release();
  id v64 = *(void **)(*(void *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
  id v65 = *(char **)(v57 + 16);
  if (v65 && (uint64_t v66 = *(void **)&v65[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
  {
    id v67 = v64;
    uint64_t v68 = v65;
    if ([v66 state] == (id)2)
    {
      unint64_t v112 = v68;
      uint64_t v117 = v64;
      uint64_t v69 = *(void *)(v0 + 64) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
      uint64_t v105 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 88) + 16);
      v105(*(void *)(v0 + 112), v69, *(void *)(v0 + 80));
      swift_retain_n();
      id v114 = v67;
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.default.getter();
      os_log_t log = (os_log_t)v69;
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = swift_slowAlloc();
        uint64_t v73 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v72 = 138412546;
        os_log_type_t type = v71;
        uint64_t v74 = *(void **)(v110 + 24);
        *(void *)(v0 + 32) = v74;
        id v75 = v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v73 = v74;
        swift_release_n();
        *(_WORD *)(v72 + 12) = 2048;
        *(void *)(v0 + 40) = 0x404E000000000000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v70, type, "Setting accessory reachable %@ after %f secs", (uint8_t *)v72, 0x16u);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }
      unint64_t v77 = *(void *)(v0 + 56);
      uint64_t v78 = *(void (**)(void, void))(*(void *)(v0 + 88) + 8);
      v78(*(void *)(v0 + 112), *(void *)(v0 + 80));
      type metadata accessor for DockCoreManager();
      unint64_t v79 = (void (*)(char *, uint64_t))static DockCoreManager.localFirmwarePath.getter();
      sub_10014A068(v77, 1, v79, v80, 60.0);
      id v59 = &unk_1002B1000;
      if (v61)
      {
        uint64_t v115 = v78;
        uint64_t v81 = *(void *)(v0 + 96);
        uint64_t v82 = *(void *)(v0 + 80);
        swift_bridgeObjectRelease();
        v105(v81, (uint64_t)log, v82);
        swift_retain();
        swift_errorRetain();
        swift_retain();
        swift_errorRetain();
        uint64_t v83 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v83, v84))
        {
          os_log_type_t v109 = v84;
          uint64_t v85 = swift_slowAlloc();
          typea = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v85 = 138412546;
          id v86 = *(void **)(v110 + 24);
          *(void *)(v0 + 16) = v86;
          id v87 = v86;
          id v59 = (void *)&unk_1002B1000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *typea = v86;
          swift_release_n();
          *(_WORD *)(v85 + 12) = 2112;
          swift_errorRetain();
          uint64_t v88 = _swift_stdlib_bridgeErrorToNSError();
          *(void *)(v0 + 24) = v88;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          typea[1] = v88;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v83, v109, "error setting accessory %@ reachable: %@", (uint8_t *)v85, 0x16u);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {

          swift_errorRelease();
          swift_release_n();
          swift_errorRelease();
          swift_errorRelease();
        }
        v115(*(void *)(v0 + 96), *(void *)(v0 + 80));
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      id v64 = v117;
    }
    else
    {
    }
  }
  else
  {
    id v76 = v64;
  }
  id v89 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v90 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
  uint64_t v91 = *(os_unfair_lock_s **)&v89[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock];
  id v92 = v89;
  swift_retain();
  os_unfair_lock_lock(v91 + 4);
  swift_release();
  *(void *)&v92[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing] = 0;
  swift_release();
  uint64_t v93 = *(os_unfair_lock_s **)&v89[v90];
  swift_retain();
  os_unfair_lock_unlock(v93 + 4);
  swift_release();

  uint64_t v94 = *(char **)(v57 + 16);
  if (v94 && *(void *)&v94[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    unint64_t v95 = (void *)v59[244];
    uint64_t v96 = swift_allocObject();
    *(void *)(v96 + 16) = v95;
    *(void *)(v96 + 24) = v94;
    unint64_t v97 = v94;
    id v98 = v95;
    sub_1001DA690((uint64_t)sub_1000E7540, v96);
    swift_release();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v99 = *(uint64_t (**)(void))(v0 + 8);
  return v99();
}

uint64_t sub_1001590F4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = *(void *)(v0 + 64);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v2);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 48) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Accessory Description transfer request failed with %@", v7, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v110 = *(void *)(v0 + 152);
  (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 80));
  uint64_t v10 = *(void *)(v0 + 56);
  sub_1000F908C(0);
  uint64_t v11 = (void *)(v10 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion);
  void *v11 = v12;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  sub_1000F9098(0);
  uint64_t v14 = (void *)(v10 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup);
  *uint64_t v14 = v15;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  sub_1000F93D8(0);
  id v17 = (void *)(v10 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber);
  *id v17 = v18;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  sub_1000F95DC(0);
  uint64_t v20 = (void *)(v10 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData);
  *uint64_t v20 = v21;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v23 = *(void **)(v0 + 72);
  uint64_t v104 = *(void *)(v0 + 56);
  os_log_t log = (os_log_t)*(id *)(v104 + 24);
  id v24 = [v23 firmwareVersion];
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v28 = 0;
  }
  id v29 = [*(id *)(v0 + 72) serialNumber];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v33 = 0;
  }
  id v34 = [*(id *)(v0 + 72) model];
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v38 = v37;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v38 = 0;
  }
  uint64_t v39 = (uint64_t *)(*(void *)(v0 + 56) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  unint64_t v40 = v39[3];
  uint64_t v107 = v33;
  uint64_t v109 = v28;
  uint64_t v106 = v38;
  if (v40 == 2)
  {
    LODWORD(v41) = 0;
  }
  else
  {
    uint64_t v103 = v39[6];
    uint64_t v42 = v26;
    uint64_t v43 = v39[4];
    unint64_t v44 = v39[5];
    uint64_t v46 = v39[1];
    unint64_t v45 = v39[2];
    uint64_t v47 = v31;
    uint64_t v48 = *v39;
    sub_1000A618C(v46, v45);
    sub_1000A618C(v43, v44);
    uint64_t v49 = v48;
    uint64_t v31 = v47;
    uint64_t v50 = v44;
    uint64_t v26 = v42;
    sub_100169A00(v49, v46, v45, v40, v43, v50, v103, (void (*)(uint64_t, uint64_t))sub_1000A6240);
    uint64_t v41 = (v40 >> 8) & 1;
  }
  uint64_t v51 = *(void *)(v0 + 64);
  uint64_t v52 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager;
  uint64_t v53 = *(void *)(v51 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (v53)
  {
    uint64_t v53 = *(void *)(v53 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard);
    if (v53) {
      LOBYTE(v53) = *(unsigned char *)(v53 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_requiresSWAuth);
    }
  }
  unint64_t v54 = *(void **)(v0 + 72);
  LOBYTE(v100) = v53;
  sub_10018EEEC(log, v26, v109, v31, v107, v36, v106, v41);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1001543EC(v54, v110);
  unint64_t v55 = *(void **)(v51 + v52);
  if (!v55) {
    goto LABEL_30;
  }
  id v56 = *(void **)(*(void *)(v0 + 56) + 32);
  uint64_t v57 = v55;
  if (!v56)
  {
    swift_errorRelease();
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v58 = v57;
  id v59 = [v56 identifier:v100];
  if (!v59)
  {
LABEL_49:
    uint64_t result = swift_errorRelease();
    __break(1u);
    return result;
  }
  id v60 = v59;
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v63 = v62;

  unint64_t v64 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
  if (*(void *)&v58[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
  {
    v58[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
    if (v110) {
      uint64_t v65 = 5;
    }
    else {
      uint64_t v65 = 4;
    }
    id v66 = *(id *)&v58[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
    sub_100156E14(v61, v63, v65, v64, v110);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_30:
  if (qword_1002A7C20 != -1) {
    swift_once();
  }
  uint64_t v67 = *(void *)(v0 + 56);
  uint64_t v68 = *(void **)(v0 + 64);
  uint64_t v69 = sub_1001DB130();
  swift_retain();
  uint64_t v70 = sub_100163414((uint64_t)v69, v67);
  swift_release();
  swift_bridgeObjectRelease();
  id v71 = v68;
  sub_100162428(v70, (uint64_t)v71);

  swift_release();
  uint64_t v72 = &unk_1002B1000;
  uint64_t v73 = *(void **)(*(void *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
  uint64_t v74 = *(char **)(v67 + 16);
  if (v74 && (id v75 = *(void **)&v74[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
  {
    id v76 = v73;
    unint64_t v77 = v74;
    if ([v75 state] == (id)2)
    {
      uint64_t v108 = v77;
      (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 88) + 16))(*(void *)(v0 + 112), *(void *)(v0 + 64) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, *(void *)(v0 + 80));
      swift_retain_n();
      id v78 = v76;
      unint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = swift_slowAlloc();
        uint64_t v101 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v81 = 138412546;
        os_log_type_t type = v80;
        uint64_t v82 = *(void **)(v104 + 24);
        *(void *)(v0 + 32) = v82;
        id v83 = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v101 = v82;
        swift_release_n();
        *(_WORD *)(v81 + 12) = 2048;
        *(void *)(v0 + 40) = 0x404E000000000000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v79, type, "Setting accessory reachable %@ after %f secs", (uint8_t *)v81, 0x16u);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }
      unint64_t v85 = *(void *)(v0 + 56);
      (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 80));
      type metadata accessor for DockCoreManager();
      id v86 = (void (*)(char *, uint64_t))static DockCoreManager.localFirmwarePath.getter();
      sub_10014A068(v85, 1, v86, v87, 60.0);
      swift_bridgeObjectRelease();

      uint64_t v72 = (void *)&unk_1002B1000;
    }
    else
    {
    }
  }
  else
  {
    id v84 = v73;
  }
  uint64_t v88 = *(char **)(v72[197] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v89 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
  uint64_t v90 = *(os_unfair_lock_s **)&v88[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock];
  uint64_t v91 = v88;
  swift_retain();
  os_unfair_lock_lock(v90 + 4);
  swift_release();
  *(void *)&v91[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing] = 0;
  swift_release();
  id v92 = *(os_unfair_lock_s **)&v88[v89];
  swift_retain();
  os_unfair_lock_unlock(v92 + 4);
  swift_release();

  uint64_t v93 = *(char **)(v67 + 16);
  if (v93 && *(void *)&v93[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    uint64_t v94 = (void *)qword_1002B17A0;
    uint64_t v95 = swift_allocObject();
    *(void *)(v95 + 16) = v94;
    *(void *)(v95 + 24) = v93;
    uint64_t v96 = v93;
    id v97 = v94;
    sub_1001DA690((uint64_t)sub_1000E7540, v95);
    swift_release();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v98 = *(uint64_t (**)(void))(v0 + 8);
  return v98();
}

uint64_t sub_100159D60(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v36 = (void *)((char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v32 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (void *)((char *)v32 - v11);
  __chkstk_darwin(v10);
  uint64_t v14 = (void *)((char *)v32 - v13);
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v16 + 16);
  uint64_t v38 = v20;
  v19(v18, a2 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger);
  uint64_t v21 = *(int *)(v4 + 48);
  uint64_t v22 = a1[1];
  *uint64_t v14 = *a1;
  v14[1] = v22;
  sub_1000E9F88((uint64_t)a1 + v21, (uint64_t)v14 + v21);
  sub_1000B9BD4((uint64_t)v14, (uint64_t)v12, (uint64_t *)&unk_1002AA6B0);
  uint64_t v37 = v9;
  sub_1000EA2DC((uint64_t)v14, (uint64_t)v9, (uint64_t *)&unk_1002AA6B0);
  swift_bridgeObjectRetain();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    uint64_t v40 = v34;
    uint64_t v35 = a1;
    *(_DWORD *)uint64_t v25 = 136315138;
    v32[1] = v25 + 4;
    uint64_t v33 = v25;
    uint64_t v26 = *(int *)(v4 + 48);
    uint64_t v27 = v36;
    uint64_t v28 = (uint64_t)v36 + v26;
    uint64_t v29 = *v12;
    unint64_t v30 = v12[1];
    uint64_t *v36 = *v12;
    v27[1] = v30;
    sub_1000E9F88((uint64_t)v12 + v26, (uint64_t)v27 + v26);
    swift_bridgeObjectRetain();
    sub_1000E9FEC(v28);
    uint64_t v39 = sub_1000993AC(v29, v30, &v40);
    a1 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A61E4((uint64_t)v37, (uint64_t *)&unk_1002AA6B0);
    sub_1000A61E4((uint64_t)v12, (uint64_t *)&unk_1002AA6B0);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Removing discovered device after successful pairing: %s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000A61E4((uint64_t)v37, (uint64_t *)&unk_1002AA6B0);
    sub_1000A61E4((uint64_t)v12, (uint64_t *)&unk_1002AA6B0);
  }

  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v38);
  if (qword_1002A7C20 != -1) {
    swift_once();
  }
  return sub_1001DB00C(*a1, a1[1]);
}

uint64_t sub_10015A120(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for String.Encoding();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10015A24C, 0, 0);
}

uint64_t sub_10015A24C()
{
  uint64_t v1 = *(void *)(v0[3] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager);
  v0[12] = v1;
  if (v1)
  {
    type metadata accessor for AccessoryDiagnosticsOptions();
    uint64_t v2 = swift_allocObject();
    v0[13] = v2;
    *(void *)(v2 + 16) = 0;
    *(unsigned char *)(v2 + 24) = 1;
    *(void *)(v2 + 32) = 0;
    *(unsigned char *)(v2 + 40) = 1;
    *(void *)(v2 + 48) = 2;
    *(_WORD *)(v2 + 56) = 256;
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[14] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10015A454;
    return sub_1000CD1E4(v2);
  }
  else
  {
    uint64_t v5 = type metadata accessor for Errors();
    sub_100169A74((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    *uint64_t v6 = 0xD00000000000001ALL;
    v6[1] = 0x8000000100234D00;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v5 - 8) + 104))(v6, enum case for Errors.NotFound(_:), v5);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_10015A454(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 120) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10015ACE0;
  }
  else
  {
    *(void *)(v6 + 128) = a2;
    *(void *)(v6 + 136) = a1;
    uint64_t v7 = sub_10015A588;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v7, 0, 0);
}

uint64_t sub_10015A588()
{
  uint64_t v58 = v0;
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v6 >> 60 == 15)
  {
    swift_release();
    swift_release();
    goto LABEL_48;
  }
  uint64_t v7 = v56[7];
  uint64_t v8 = v56[5];
  uint64_t v9 = v56[6];
  uint64_t v10 = v56[4];
  Logger.init(subsystem:category:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v10 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v8);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "dumping accessory logs", v13, 2u);
    swift_slowDealloc();
  }
  uint64_t v15 = v56[6];
  uint64_t v14 = v56[7];
  uint64_t v16 = v56[5];

  unint64_t v55 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v55(v14, v16);
  while (2)
  {
    unint64_t v17 = v6 >> 62;
    switch(v6 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v4), v4)) {
          goto LABEL_55;
        }
        if (HIDWORD(v4) - (int)v4 <= 30000) {
          goto LABEL_41;
        }
        uint64_t v18 = (int)v4;
        uint64_t v19 = v4 >> 32;
        sub_1000A618C(v4, v6);
        if (v4 >> 32 < (int)v4) {
          goto LABEL_51;
        }
        uint64_t v20 = v4 >> 32;
        uint64_t v21 = (int)v4;
        goto LABEL_17;
      case 2uLL:
        uint64_t v18 = *(void *)(v4 + 16);
        uint64_t v19 = *(void *)(v4 + 24);
        if (__OFSUB__(v19, v18)) {
          goto LABEL_56;
        }
        if (v19 - v18 > 30000)
        {
          sub_1000A618C(v4, v6);
          if (v19 < v18)
          {
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
            JUMPOUT(0x10015ACD0);
          }
          uint64_t v21 = *(void *)(v4 + 16);
          uint64_t v20 = *(void *)(v4 + 24);
LABEL_17:
          if (v20 < v19 || v19 < v21) {
            goto LABEL_53;
          }
          if (__OFSUB__(v19, v18)) {
            goto LABEL_54;
          }
          if ((unint64_t)(v19 - v18) >> 4 < 0x753)
          {
            if (v17 == 2)
            {
              uint64_t v22 = *(void *)(v4 + 16);
              uint64_t v23 = *(void *)(v4 + 24);
              goto LABEL_32;
            }
            uint64_t v23 = v4 >> 32;
            goto LABEL_31;
          }
          uint64_t v23 = v18 + 30000;
          if (__OFADD__(v18, 30000)) {
            goto LABEL_57;
          }
          if (v17 != 2)
          {
            if (v23 > v4 >> 32 || v23 < (int)v4) {
              goto LABEL_58;
            }
LABEL_31:
            uint64_t v22 = (int)v4;
            goto LABEL_32;
          }
          if (*(void *)(v4 + 24) < v23 || v23 < *(void *)(v4 + 16)) {
            goto LABEL_58;
          }
          uint64_t v22 = *(void *)(v4 + 16);
LABEL_32:
          if (v23 < v22) {
            goto LABEL_52;
          }
          uint64_t v24 = Data._Representation.subscript.getter();
          unint64_t v26 = v25;
          sub_1000A6240(v4, v6);
          if (v17 == 2) {
            uint64_t v27 = *(void *)(v4 + 24);
          }
          else {
            uint64_t v27 = v4 >> 32;
          }
          sub_1000A618C(v4, v6);
          if (v27 < 30000) {
            goto LABEL_59;
          }
          uint64_t v28 = Data._Representation.subscript.getter();
          unint64_t v30 = v29;
          sub_1000A6240(v4, v6);
          sub_1000A6240(v4, v6);
          static String.Encoding.utf8.getter();
          uint64_t v31 = String.init(data:encoding:)();
          if (v32)
          {
            uint64_t v33 = v31;
            unint64_t v34 = v32;
            swift_bridgeObjectRetain();
            uint64_t v35 = Logger.logObject.getter();
            os_log_type_t v36 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v35, v36))
            {
              uint64_t v37 = swift_slowAlloc();
              uint64_t v57 = swift_slowAlloc();
              *(_DWORD *)uint64_t v37 = 136446210;
              swift_bridgeObjectRetain();
              *(void *)(v37 + 4) = sub_1000993AC(v33, v34, &v57);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v35, v36, "%{public}s", (uint8_t *)v37, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              sub_1000A6240(v24, v26);
            }
            else
            {
              sub_1000A6240(v24, v26);

              swift_bridgeObjectRelease_n();
            }
          }
          else
          {
            sub_1000A6240(v24, v26);
          }
          uint64_t v4 = v28;
          unint64_t v6 = v30;
          continue;
        }
LABEL_41:
        static String.Encoding.utf8.getter();
        uint64_t v38 = String.init(data:encoding:)();
        if (v39)
        {
          uint64_t v40 = v38;
          unint64_t v41 = v39;
          swift_bridgeObjectRetain();
          uint64_t v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.default.getter();
          BOOL v44 = os_log_type_enabled(v42, v43);
          uint64_t v45 = v56[8];
          uint64_t v46 = v56[5];
          if (v44)
          {
            uint64_t v54 = v40;
            uint64_t v47 = (uint8_t *)swift_slowAlloc();
            uint64_t v57 = swift_slowAlloc();
            *(_DWORD *)uint64_t v47 = 136446210;
            swift_bridgeObjectRetain();
            v56[2] = sub_1000993AC(v54, v41, &v57);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v42, v43, "%{public}s", v47, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();
            swift_release();
          }
          else
          {
            swift_release();

            swift_bridgeObjectRelease_n();
            swift_release();
          }
          sub_1000A6240(v4, v6);
          uint64_t v48 = v45;
          uint64_t v49 = v46;
        }
        else
        {
          uint64_t v50 = v56[8];
          uint64_t v51 = v56[5];
          swift_release();
          swift_release();
          sub_1000A6240(v4, v6);
          uint64_t v48 = v50;
          uint64_t v49 = v51;
        }
        v55(v48, v49);
LABEL_48:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v52 = (uint64_t (*)(void))v56[1];
        return v52();
      default:
        goto LABEL_41;
    }
  }
}

uint64_t sub_10015ACE0()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10015AD70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 364) = a4;
  *(void *)(v5 + 168) = a3;
  *(void *)(v5 + 176) = v4;
  *(void *)(v5 + 152) = a1;
  *(void *)(v5 + 160) = a2;
  uint64_t v6 = type metadata accessor for CharacterSet();
  *(void *)(v5 + 184) = v6;
  *(void *)(v5 + 192) = *(void *)(v6 - 8);
  *(void *)(v5 + 200) = swift_task_alloc();
  type metadata accessor for UUID();
  *(void *)(v5 + 208) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v5 + 216) = v7;
  *(void *)(v5 + 224) = *(void *)(v7 - 8);
  *(void *)(v5 + 232) = swift_task_alloc();
  *(void *)(v5 + 240) = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10015AEFC, 0, 0);
}

uint64_t sub_10015AEFC()
{
  uint64_t v1 = *(void *)(v0[19] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager);
  v0[31] = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = (void *)swift_task_alloc();
    v0[32] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10015B118;
    return sub_1000EB03C();
  }
  else
  {
    uint64_t v4 = type metadata accessor for Errors();
    sub_100169A74((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    void *v5 = 0xD000000000000024;
    v5[1] = 0x8000000100238CD0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v5, enum case for Errors.NotFound(_:), v4);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_10015B118(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v4;
  *(void *)(v6 + 264) = a2;
  *(void *)(v6 + 272) = a3;
  *(void *)(v6 + 280) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = sub_10015BF24;
  }
  else
  {
    *(unsigned char *)(v6 + 365) = a1 & 1;
    uint64_t v7 = sub_10015B270;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v7, 0, 0);
}

uint64_t sub_10015B270()
{
  if (*(unsigned char *)(v0 + 365) != 1 || (*(unsigned char *)(v0 + 364) & 1) != 0)
  {
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v14 = *(void **)(v13 + 24);
    if (*(void *)(v0 + 168))
    {
      id v15 = v14;
      swift_bridgeObjectRetain();
      DockCoreInfo.type.getter();
      id v16 = *(id *)(v13 + 24);
      DockCoreInfo.identifier.getter();

      id v17 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo());
      id v18 = (id)DockCoreInfo.init(type:name:identifier:)();
    }
    else
    {
      id v18 = v14;
    }
    *(void *)(v0 + 288) = v18;
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v19;
    void *v19 = v0;
    v19[1] = sub_10015B52C;
    return sub_1000EC204();
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 240);
    uint64_t v2 = *(void *)(v0 + 216);
    uint64_t v3 = *(void *)(v0 + 224);
    uint64_t v4 = *(void *)(v0 + 176);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v2);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Accessory description hash matched, no need to read description", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 216);
    uint64_t v10 = *(void *)(v0 + 224);

    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_10015B52C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[38] = a1;
  v4[39] = a2;
  v4[40] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10015BFE8;
  }
  else
  {
    uint64_t v5 = sub_10015B680;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v5, 0, 0);
}

uint64_t sub_10015B680()
{
  uint64_t v71 = v0;
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = v0 + 56;
  unint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 176);
  DockCoreInfo.identifier.getter();
  id v6 = objc_allocWithZone((Class)type metadata accessor for AccessoryDescriptionParser());
  id v7 = sub_1001EB8B4(v4);
  uint64_t v8 = *(void **)(v5 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_parser);
  uint64_t v68 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_parser;
  uint64_t v69 = v5;
  *(void *)(v5 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_parser) = v7;

  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v15 = *(void *)(v0 + 304);
      id v16 = (id *)(int)v15;
      if (v15 >> 32 < (int)v15)
      {
        __break(1u);
        goto LABEL_41;
      }
      unint64_t v17 = *(void *)(v0 + 312);
      uint64_t v67 = *(void *)(v0 + 320);
      sub_1000A618C(v15, v17);
      swift_retain();
      uint64_t v1 = (void *)(v0 + 16);
      uint64_t v2 = v0 + 56;
      uint64_t v11 = sub_100161F9C((int)v15, v15 >> 32, v17 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100162354);
      uint64_t v13 = v18;
      uint64_t result = sub_1000A6240(v15, v17);
      if (!v67) {
        goto LABEL_7;
      }
      return result;
    case 2uLL:
      unint64_t v20 = *(void *)(v0 + 312);
      uint64_t v21 = *(void *)(v0 + 320);
      uint64_t v22 = *(void *)(v0 + 304);
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v25 = *(void *)(v22 + 16);
      uint64_t v24 = *(void *)(v22 + 24);
      sub_1000A618C(v22, v20);
      swift_retain();
      swift_retain();
      uint64_t v11 = sub_100161F9C(v25, v24, v23, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100162354);
      uint64_t v13 = v26;
      swift_release();
      uint64_t result = swift_release();
      if (!v21)
      {
LABEL_7:
        uint64_t v27 = *(void *)(v0 + 304);
        unint64_t v28 = *(void *)(v0 + 312);
        if (v13)
        {
          sub_1000A6240(v27, v28);
          uint64_t v14 = 0;
          goto LABEL_12;
        }
        *(void *)(v0 + 96) = v27;
        *(void *)(v0 + 104) = v28;
        sub_1000A618C(v27, v28);
        sub_1000992E8(&qword_1002A8320);
        if (swift_dynamicCast())
        {
          sub_1000A6298((long long *)v2, (uint64_t)v1);
          sub_1000A5DA4(v1, *(void *)(v0 + 40));
          if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
          {
            uint64_t v63 = *(void *)(v0 + 304);
            unint64_t v62 = *(void *)(v0 + 312);
            sub_1000A5DA4(v1, *(void *)(v0 + 40));
            uint64_t v14 = 0;
            dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
            sub_1000A6240(v63, v62);
            uint64_t v11 = *(void *)(v0 + 128);
            uint64_t v13 = *(void *)(v0 + 136);
            sub_100099BCC((uint64_t)v1);
            goto LABEL_12;
          }
          sub_100099BCC((uint64_t)v1);
        }
        else
        {
          *(void *)(v2 + 32) = 0;
          *(_OWORD *)uint64_t v2 = 0u;
          *(_OWORD *)(v2 + 16) = 0u;
          sub_1000A61E4(v2, &qword_1002A8328);
        }
        uint64_t v65 = *(void *)(v0 + 304);
        unint64_t v64 = *(void *)(v0 + 312);
        uint64_t v11 = sub_100161EE8(v65, v64);
        uint64_t v13 = v66;
        sub_1000A6240(v65, v64);
        uint64_t v14 = 0;
        goto LABEL_12;
      }
      return result;
    case 3uLL:
      uint64_t v14 = *(void *)(v0 + 320);
      *(void *)(v0 + 336) = 0;
      *(void *)(v0 + 342) = 0;
      uint64_t result = sub_100162354(v70);
      if (!v14)
      {
        sub_1000A6240(*(void *)(v0 + 304), *(void *)(v0 + 312));
        uint64_t v11 = v70[0];
        uint64_t v13 = v70[1];
        goto LABEL_12;
      }
      return result;
    default:
      uint64_t v10 = *(void *)(v0 + 304);
      unint64_t v9 = *(void *)(v0 + 312);
      *(void *)(v0 + 350) = v10;
      *(_WORD *)(v0 + 358) = v9;
      *(unsigned char *)(v0 + 360) = BYTE2(v9);
      *(unsigned char *)(v0 + 361) = BYTE3(v9);
      *(unsigned char *)(v0 + 362) = BYTE4(v9);
      *(unsigned char *)(v0 + 363) = BYTE5(v9);
      uint64_t v11 = static String._fromUTF8Repairing(_:)();
      uint64_t v13 = v12;
      sub_1000A6240(v10, v9);
      uint64_t v14 = *(void *)(v0 + 320);
LABEL_12:
      uint64_t v30 = *(void *)(v0 + 192);
      uint64_t v29 = *(void *)(v0 + 200);
      uint64_t v31 = *(void *)(v0 + 184);
      *(void *)(v0 + 112) = v11;
      *(void *)(v0 + 120) = v13;
      sub_100169A74((unint64_t *)&unk_1002AAA40, (void (*)(uint64_t))&type metadata accessor for CharacterSet);
      dispatch thunk of SetAlgebra.init()();
      *(_DWORD *)(v0 + 332) = 0;
      dispatch thunk of SetAlgebra.insert(_:)();
      sub_1000E9828();
      StringProtocol.trimmingCharacters(in:)();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      swift_bridgeObjectRelease();
      unint64_t v32 = *(void **)(v69 + v68);
      if (!v32)
      {
        __break(1u);
        JUMPOUT(0x10015BF14);
      }
      id v33 = v32;
      unint64_t v34 = (id *)sub_1001EBAD4();
      if (v14)
      {
        uint64_t v36 = *(void *)(v0 + 304);
        unint64_t v35 = *(void *)(v0 + 312);

        sub_1000A6240(v36, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_31;
      }
      id v16 = v34;
      swift_bridgeObjectRelease();

      if ((unint64_t)v16 >> 62)
      {
LABEL_41:
        swift_bridgeObjectRetain();
        uint64_t v38 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v38) {
          goto LABEL_21;
        }
      }
      else
      {
        uint64_t v38 = *(void **)(((unint64_t)v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v38) {
          goto LABEL_21;
        }
      }
      if (((unint64_t)v16 & 0xC000000000000001) != 0) {
        goto LABEL_45;
      }
      if (!*(void *)(((unint64_t)v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        __break(1u);
      }
      id v39 = v16[4];
      break;
  }
  while (1)
  {
    uint64_t v38 = v39;
LABEL_21:
    swift_bridgeObjectRelease();
    (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 224) + 16))(*(void *)(v0 + 232), *(void *)(v0 + 176) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, *(void *)(v0 + 216));
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Accessory Description parsed, adding accessory to DataBase", v42, 2u);
      swift_slowDealloc();
    }
    uint64_t v44 = *(void *)(v0 + 224);
    uint64_t v43 = *(void *)(v0 + 232);
    uint64_t v45 = *(void *)(v0 + 216);

    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    if (qword_1002A7C00 != -1) {
      break;
    }
    if (v38) {
      goto LABEL_25;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  swift_once();
  if (!v38) {
    goto LABEL_44;
  }
LABEL_25:
  uint64_t v46 = *(void *)(v0 + 152);
  id v47 = v38;
  id v48 = sub_10018DFF0(v47, 1);

  uint64_t v49 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  uint64_t v50 = *(void **)(v46 + 32);
  if (v50)
  {
    id v51 = v49;
    id v52 = [v50 identifier];
    if (v52)
    {
      uint64_t v53 = v52;
      uint64_t v54 = (const void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v56 = v55;

      goto LABEL_30;
    }
  }
  else
  {
    id v57 = v49;
  }
  uint64_t v54 = 0;
  id v56 = (const void *)0xE000000000000000;
LABEL_30:
  uint64_t v59 = *(void *)(v0 + 304);
  unint64_t v58 = *(void *)(v0 + 312);
  id v60 = *(void **)(v0 + 288);
  sub_100173888(*(void *)(v0 + 264), *(void *)(v0 + 272), v54, v56);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = *(void **)(v69 + v68);
  *(void *)(v69 + v68) = 0;

  sub_1000A6240(v59, v58);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
LABEL_31:
  return v37();
}

uint64_t sub_10015BF24()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10015BFE8()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10015C0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v4);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      v14[1] = v11 + 4;
      swift_getErrorValue();
      uint64_t v12 = Error.localizedDescription.getter();
      v14[2] = sub_1000993AC(v12, v13, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unable to remove pairing: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t sub_10015C304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[9] = a5;
  v6[10] = a6;
  v6[8] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[11] = v7;
  v6[12] = *(void *)(v7 - 8);
  v6[13] = swift_task_alloc();
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  v6[16] = swift_task_alloc();
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v6[20] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_10015C444;
  return sub_1000F9F28();
}

uint64_t sub_10015C444()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10015C540, 0, 0);
}

uint64_t sub_10015C540()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController;
  [*(id *)(v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController) deRegisterFromNotifications];
  [*(id *)(v1 + v2) invalidate];
  uint64_t v3 = *(void **)(v1 + v2);
  *(void *)(v1 + v2) = 0;

  sub_1000A9C64();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10015C610;
  return sub_1000F9954();
}

uint64_t sub_10015C610()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10015C70C, 0, 0);
}

uint64_t sub_10015C70C()
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v1 = *(id *)(*(void *)(v0 + 64) + 24);
  sub_1001891D0(v1);
  uint64_t v3 = v2;

  if (v3)
  {
    char v4 = dispatch thunk of DockCoreAccessory.isMagSafe.getter();
    char v5 = dispatch thunk of DockCoreAccessory.certified.getter();
    char v6 = dispatch thunk of DockCoreAccessory.needsMigration.getter();
  }
  else
  {
    char v6 = 0;
    char v5 = 0;
    char v4 = 0;
  }
  *(unsigned char *)(v0 + 273) = v4 & 1;
  *(unsigned char *)(v0 + 272) = v5 & 1;
  uint64_t v7 = *(void **)(*(void *)(v0 + 64) + 32);
  if (v7 && (id v8 = [v7 name]) != 0)
  {
    unint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  *(void *)(v0 + 176) = v12;
  unint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v13;
  *unint64_t v13 = v0;
  v13[1] = sub_10015C89C;
  uint64_t v14 = *(void *)(v0 + 64);
  return sub_10015AD70(v14, v10, v12, v6 & 1);
}

uint64_t sub_10015C89C()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10015DC88;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10015C9B8;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_10015C9B8()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  *(void *)(v0 + 200) = type metadata accessor for DockCoreManager();
  char v4 = static DockCoreManager.diagnosticsCollectionEnabled.getter();
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  *(void *)(v0 + 208) = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  char v6 = *(void (**)(void, uint64_t, uint64_t))(v2 + 16);
  uint64_t v7 = v3 + v5;
  *(void *)(v0 + 216) = v6;
  *(void *)(v0 + 224) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v8 = *(void *)(v0 + 88);
  if (v4)
  {
    v6(*(void *)(v0 + 152), v7, v8);
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Diagnostics collection is enabled, initiating.", v11, 2u);
      swift_slowDealloc();
    }
    uint64_t v12 = *(void *)(v0 + 152);
    uint64_t v13 = *(void *)(v0 + 88);
    uint64_t v14 = *(void *)(v0 + 96);

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    *(void *)(v0 + 232) = v15;
    *(void *)(v0 + 240) = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v15(v12, v13);
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_10015D274;
    return sub_1000F67F0();
  }
  else
  {
    uint64_t v82 = v1;
    v6(*(void *)(v0 + 136), v7, v8);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Diagnostics collection is not enabled, ignoring.", v20, 2u);
      swift_slowDealloc();
    }
    uint64_t v21 = *(void *)(v0 + 136);
    uint64_t v22 = *(void *)(v0 + 88);
    uint64_t v23 = *(void *)(v0 + 96);

    id v84 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v84(v21, v22);
    uint64_t v24 = *(void **)(v0 + 80);
    id v25 = *(id *)(*(void *)(v0 + 64) + 24);
    id v26 = [v24 firmwareVersion];
    if (v26)
    {
      uint64_t v27 = v26;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = v29;
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v30 = 0;
    }
    id v31 = [*(id *)(v0 + 80) serialNumber];
    if (v31)
    {
      unint64_t v32 = v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v35 = 0;
    }
    id v36 = [*(id *)(v0 + 80) model];
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v39;
    }
    else
    {
      uint64_t v38 = 0;
      uint64_t v40 = 0;
    }
    uint64_t v41 = *(void *)(v0 + 64);
    LOBYTE(v79) = *(unsigned char *)(v0 + 272);
    sub_10018EEEC(v25, v28, v30, v33, v35, v38, v40, *(unsigned __int8 *)(v0 + 273));

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = *(void **)(v41 + 16);
    if (v42)
    {
      id v43 = v42;
      sub_1000F70A4(0);

      uint64_t v44 = *(char **)(v41 + 16);
      if (v44)
      {
        uint64_t v45 = *(void **)&v44[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
        if (v45)
        {
          id v46 = objc_retain(*(id *)(*(void *)(qword_1002B1628
                                              + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                                  + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
          id v47 = v44;
          if (objc_msgSend(v45, "state", v79) == (id)2)
          {
            uint64_t v48 = *(void *)(v0 + 72) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
            (*(void (**)(void, uint64_t, void))(v0 + 216))(*(void *)(v0 + 128), v48, *(void *)(v0 + 88));
            id v49 = v46;
            swift_retain_n();
            uint64_t v50 = v49;
            id v51 = Logger.logObject.getter();
            os_log_type_t v52 = static os_log_type_t.default.getter();
            BOOL v53 = os_log_type_enabled(v51, v52);
            uint64_t v54 = *(void *)(v0 + 64);
            if (v53)
            {
              unint64_t v85 = v47;
              uint64_t v55 = swift_slowAlloc();
              os_log_t log = v51;
              uint64_t v56 = swift_slowAlloc();
              *(_DWORD *)uint64_t v55 = 138412546;
              id v57 = v50;
              unint64_t v58 = *(void **)(v54 + 24);
              *(void *)(v0 + 32) = v58;
              id v59 = v58;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              id v60 = (void *)v56;
              id v51 = log;
              *id v60 = v58;
              uint64_t v50 = v57;
              swift_release_n();
              *(_WORD *)(v55 + 12) = 2048;
              *(void *)(v0 + 40) = 0x404E000000000000;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              _os_log_impl((void *)&_mh_execute_header, log, v52, "Setting accessory reachable %@ after %f secs", (uint8_t *)v55, 0x16u);
              sub_1000992E8(&qword_1002A7C40);
              swift_arrayDestroy();
              swift_slowDealloc();
              id v47 = v85;
              swift_slowDealloc();
            }
            else
            {
              swift_release_n();
            }
            unint64_t v61 = *(void *)(v0 + 64);
            v84(*(void *)(v0 + 128), *(void *)(v0 + 88));
            unint64_t v62 = (void (*)(char *, uint64_t))static DockCoreManager.localFirmwarePath.getter();
            sub_10014A068(v61, 1, v62, v63, 60.0);
            if (v82)
            {
              id v83 = v50;
              unint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
              uint64_t v65 = *(void *)(v0 + 104);
              uint64_t v66 = *(void *)(v0 + 88);
              swift_bridgeObjectRelease();
              v64(v65, v48, v66);
              swift_retain();
              swift_errorRetain();
              swift_retain();
              swift_errorRetain();
              uint64_t v67 = Logger.logObject.getter();
              os_log_type_t v68 = static os_log_type_t.error.getter();
              BOOL v69 = os_log_type_enabled(v67, v68);
              uint64_t v70 = *(void *)(v0 + 64);
              if (v69)
              {
                uint64_t v71 = swift_slowAlloc();
                uint64_t v72 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v71 = 138412546;
                os_log_t loga = v67;
                uint64_t v73 = *(void **)(v70 + 24);
                *(void *)(v0 + 16) = v73;
                id v74 = v73;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *uint64_t v72 = v73;
                swift_release_n();
                *(_WORD *)(v71 + 12) = 2112;
                swift_errorRetain();
                uint64_t v75 = _swift_stdlib_bridgeErrorToNSError();
                *(void *)(v0 + 24) = v75;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                v72[1] = v75;
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, loga, v68, "error setting accessory %@ reachable: %@", (uint8_t *)v71, 0x16u);
                sub_1000992E8(&qword_1002A7C40);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                uint64_t v67 = v83;
              }
              else
              {

                swift_errorRelease();
                swift_release_n();
                swift_errorRelease();
              }
              uint64_t v76 = *(void *)(v0 + 104);
              uint64_t v77 = *(void *)(v0 + 88);
              swift_errorRelease();

              v84(v76, v77);
            }
            else
            {

              swift_bridgeObjectRelease();
            }
          }
          else
          {
          }
        }
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v78 = *(uint64_t (**)(void))(v0 + 8);
    return v78();
  }
}

uint64_t sub_10015D274()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10015D370, 0, 0);
}

uint64_t sub_10015D370()
{
  (*(void (**)(void, void, void))(v0 + 216))(*(void *)(v0 + 144), *(void *)(v0 + 72) + *(void *)(v0 + 208), *(void *)(v0 + 88));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "collecting diagnostics and dumping to sys logs", v3, 2u);
    swift_slowDealloc();
  }
  char v4 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 88);

  v4(v5, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_10015D4B8;
  uint64_t v8 = *(void *)(v0 + 64);
  return sub_10015A120(v8);
}

uint64_t sub_10015D4B8()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_10015E6D8;
  }
  else {
    os_log_type_t v2 = sub_10015D5CC;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_10015D5CC()
{
  uint64_t v61 = *(void *)(v0 + 264);
  unint64_t v63 = *(void (**)(uint64_t, uint64_t))(v0 + 232);
  uint64_t v1 = *(void **)(v0 + 80);
  id v2 = *(id *)(*(void *)(v0 + 64) + 24);
  id v3 = [v1 firmwareVersion];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  id v8 = [*(id *)(v0 + 80) serialNumber];
  if (v8)
  {
    unint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  id v13 = [*(id *)(v0 + 80) model];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void *)(v0 + 64);
  LOBYTE(v57) = *(unsigned char *)(v0 + 272);
  sub_10018EEEC(v2, v5, v7, v10, v12, v15, v17, *(unsigned __int8 *)(v0 + 273));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_log_type_t v19 = *(void **)(v18 + 16);
  if (v19)
  {
    id v20 = v19;
    sub_1000F70A4(0);

    uint64_t v21 = *(char **)(v18 + 16);
    if (v21)
    {
      uint64_t v22 = *(void **)&v21[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
      if (v22)
      {
        id v23 = objc_retain(*(id *)(*(void *)(qword_1002B1628
                                            + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                                + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
        uint64_t v24 = v21;
        if (objc_msgSend(v22, "state", v57) == (id)2)
        {
          uint64_t v25 = *(void *)(v0 + 72) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
          (*(void (**)(void, uint64_t, void))(v0 + 216))(*(void *)(v0 + 128), v25, *(void *)(v0 + 88));
          id v26 = v23;
          swift_retain_n();
          uint64_t v27 = v26;
          uint64_t v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.default.getter();
          BOOL v30 = os_log_type_enabled(v28, v29);
          uint64_t v31 = *(void *)(v0 + 64);
          if (v30)
          {
            id v60 = v24;
            uint64_t v32 = swift_slowAlloc();
            os_log_t log = v28;
            uint64_t v33 = swift_slowAlloc();
            *(_DWORD *)uint64_t v32 = 138412546;
            uint64_t v34 = v27;
            uint64_t v35 = *(void **)(v31 + 24);
            *(void *)(v0 + 32) = v35;
            id v36 = v35;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v37 = (void *)v33;
            uint64_t v28 = log;
            *uint64_t v37 = v35;
            uint64_t v27 = v34;
            swift_release_n();
            *(_WORD *)(v32 + 12) = 2048;
            *(void *)(v0 + 40) = 0x404E000000000000;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl((void *)&_mh_execute_header, log, v29, "Setting accessory reachable %@ after %f secs", (uint8_t *)v32, 0x16u);
            sub_1000992E8(&qword_1002A7C40);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v24 = v60;
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
          }
          unint64_t v38 = *(void *)(v0 + 64);
          v63(*(void *)(v0 + 128), *(void *)(v0 + 88));
          uint64_t v39 = (void (*)(char *, uint64_t))static DockCoreManager.localFirmwarePath.getter();
          sub_10014A068(v38, 1, v39, v40, 60.0);
          if (v61)
          {
            unint64_t v62 = v27;
            uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
            uint64_t v42 = *(void *)(v0 + 104);
            uint64_t v43 = *(void *)(v0 + 88);
            swift_bridgeObjectRelease();
            v41(v42, v25, v43);
            swift_retain();
            swift_errorRetain();
            swift_retain();
            swift_errorRetain();
            uint64_t v44 = Logger.logObject.getter();
            os_log_type_t v45 = static os_log_type_t.error.getter();
            BOOL v46 = os_log_type_enabled(v44, v45);
            uint64_t v47 = *(void *)(v0 + 64);
            if (v46)
            {
              uint64_t v48 = swift_slowAlloc();
              id v49 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v48 = 138412546;
              os_log_t loga = v44;
              uint64_t v50 = *(void **)(v47 + 24);
              *(void *)(v0 + 16) = v50;
              id v51 = v50;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *id v49 = v50;
              swift_release_n();
              *(_WORD *)(v48 + 12) = 2112;
              swift_errorRetain();
              uint64_t v52 = _swift_stdlib_bridgeErrorToNSError();
              *(void *)(v0 + 24) = v52;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              v49[1] = v52;
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, loga, v45, "error setting accessory %@ reachable: %@", (uint8_t *)v48, 0x16u);
              sub_1000992E8(&qword_1002A7C40);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              uint64_t v44 = v62;
            }
            else
            {

              swift_errorRelease();
              swift_release_n();
              swift_errorRelease();
            }
            uint64_t v53 = *(void *)(v0 + 104);
            uint64_t v54 = *(void *)(v0 + 88);
            swift_errorRelease();

            v63(v53, v54);
          }
          else
          {

            swift_bridgeObjectRelease();
          }
        }
        else
        {
        }
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v55 = *(uint64_t (**)(void))(v0 + 8);
  return v55();
}

uint64_t sub_10015DC88()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 72);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v2);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    id v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 56) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Accessory description read failed with error: %@", v7, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(*(void *)(v0 + 96) + 8))(*(void *)(v0 + 120), *(void *)(v0 + 88));
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v11 = *(void *)(v0 + 72);
  *(void *)(v0 + 200) = type metadata accessor for DockCoreManager();
  char v12 = static DockCoreManager.diagnosticsCollectionEnabled.getter();
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  *(void *)(v0 + 208) = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
  uint64_t v14 = *(void (**)(void, uint64_t, uint64_t))(v10 + 16);
  uint64_t v15 = v11 + v13;
  *(void *)(v0 + 216) = v14;
  *(void *)(v0 + 224) = (v10 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v16 = *(void *)(v0 + 88);
  if (v12)
  {
    v14(*(void *)(v0 + 152), v15, v16);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Diagnostics collection is enabled, initiating.", v19, 2u);
      swift_slowDealloc();
    }
    uint64_t v20 = *(void *)(v0 + 152);
    uint64_t v21 = *(void *)(v0 + 88);
    uint64_t v22 = *(void *)(v0 + 96);

    id v23 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    *(void *)(v0 + 232) = v23;
    *(void *)(v0 + 240) = (v22 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v23(v20, v21);
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v24;
    void *v24 = v0;
    v24[1] = sub_10015D274;
    return sub_1000F67F0();
  }
  else
  {
    v14(*(void *)(v0 + 136), v15, v16);
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Diagnostics collection is not enabled, ignoring.", v28, 2u);
      swift_slowDealloc();
    }
    uint64_t v29 = *(void *)(v0 + 136);
    uint64_t v30 = *(void *)(v0 + 88);
    uint64_t v31 = *(void *)(v0 + 96);

    uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v73(v29, v30);
    uint64_t v32 = *(void **)(v0 + 80);
    id v33 = *(id *)(*(void *)(v0 + 64) + 24);
    id v34 = [v32 firmwareVersion];
    if (v34)
    {
      uint64_t v35 = v34;
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v38 = 0;
    }
    id v39 = [*(id *)(v0 + 80) serialNumber];
    if (v39)
    {
      unint64_t v40 = v39;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;
    }
    else
    {
      uint64_t v41 = 0;
      uint64_t v43 = 0;
    }
    id v44 = [*(id *)(v0 + 80) model];
    if (v44)
    {
      os_log_type_t v45 = v44;
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v48 = v47;
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v48 = 0;
    }
    uint64_t v49 = *(void *)(v0 + 64);
    LOBYTE(v70) = *(unsigned char *)(v0 + 272);
    sub_10018EEEC(v33, v36, v38, v41, v43, v46, v48, *(unsigned __int8 *)(v0 + 273));

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v50 = *(void **)(v49 + 16);
    if (v50)
    {
      id v51 = v50;
      sub_1000F70A4(0);

      uint64_t v52 = *(char **)(v49 + 16);
      if (v52)
      {
        uint64_t v53 = *(void **)&v52[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
        if (v53)
        {
          id v54 = objc_retain(*(id *)(*(void *)(qword_1002B1628
                                              + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                                  + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
          uint64_t v55 = v52;
          if (objc_msgSend(v53, "state", v70) == (id)2)
          {
            (*(void (**)(void, uint64_t, void))(v0 + 216))(*(void *)(v0 + 128), *(void *)(v0 + 72) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, *(void *)(v0 + 88));
            id v56 = v54;
            swift_retain_n();
            id v57 = v56;
            unint64_t v58 = Logger.logObject.getter();
            os_log_type_t v59 = static os_log_type_t.default.getter();
            BOOL v60 = os_log_type_enabled(v58, v59);
            uint64_t v61 = *(void *)(v0 + 64);
            if (v60)
            {
              os_log_type_t type = v59;
              uint64_t v62 = swift_slowAlloc();
              uint64_t v71 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v62 = 138412546;
              unint64_t v63 = v57;
              uint64_t v64 = *(void **)(v61 + 24);
              *(void *)(v0 + 32) = v64;
              id v65 = v64;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v71 = v64;
              id v57 = v63;
              swift_release_n();
              *(_WORD *)(v62 + 12) = 2048;
              *(void *)(v0 + 40) = 0x404E000000000000;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              _os_log_impl((void *)&_mh_execute_header, v58, type, "Setting accessory reachable %@ after %f secs", (uint8_t *)v62, 0x16u);
              sub_1000992E8(&qword_1002A7C40);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_release_n();
            }

            unint64_t v66 = *(void *)(v0 + 64);
            v73(*(void *)(v0 + 128), *(void *)(v0 + 88));
            uint64_t v67 = (void (*)(char *, uint64_t))static DockCoreManager.localFirmwarePath.getter();
            sub_10014A068(v66, 1, v67, v68, 60.0);

            swift_bridgeObjectRelease();
          }
          else
          {
          }
        }
      }
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v69 = *(uint64_t (**)(void))(v0 + 8);
    return v69();
  }
}

uint64_t sub_10015E6D8()
{
  (*(void (**)(void, void, void))(v0 + 216))(*(void *)(v0 + 112), *(void *)(v0 + 72) + *(void *)(v0 + 208), *(void *)(v0 + 88));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 48) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Diagnostics transfer request failed with %@", v3, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0 + 232))(*(void *)(v0 + 112), *(void *)(v0 + 88));
  os_log_type_t v6 = *(void **)(v0 + 80);
  uint64_t v48 = *(void (**)(void, void))(v0 + 232);
  id v7 = *(id *)(*(void *)(v0 + 64) + 24);
  id v8 = [v6 firmwareVersion];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  id v13 = [*(id *)(v0 + 80) serialNumber];
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  id v18 = [*(id *)(v0 + 80) model];
  if (v18)
  {
    os_log_type_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(void *)(v0 + 64);
  LOBYTE(v45) = *(unsigned char *)(v0 + 272);
  sub_10018EEEC(v7, v10, v12, v15, v17, v20, v22, *(unsigned __int8 *)(v0 + 273));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void **)(v23 + 16);
  if (v24)
  {
    id v25 = v24;
    sub_1000F70A4(0);

    id v26 = *(char **)(v23 + 16);
    if (v26)
    {
      os_log_type_t v27 = *(void **)&v26[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
      if (v27)
      {
        id v28 = objc_retain(*(id *)(*(void *)(qword_1002B1628
                                            + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                                + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
        uint64_t v29 = v26;
        if (objc_msgSend(v27, "state", v45) == (id)2)
        {
          (*(void (**)(void, uint64_t, void))(v0 + 216))(*(void *)(v0 + 128), *(void *)(v0 + 72) + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, *(void *)(v0 + 88));
          id v30 = v28;
          swift_retain_n();
          id v31 = v30;
          uint64_t v32 = Logger.logObject.getter();
          os_log_type_t v33 = static os_log_type_t.default.getter();
          BOOL v34 = os_log_type_enabled(v32, v33);
          uint64_t v35 = *(void *)(v0 + 64);
          if (v34)
          {
            os_log_type_t type = v33;
            uint64_t v36 = swift_slowAlloc();
            uint64_t v46 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v36 = 138412546;
            uint64_t v37 = v31;
            uint64_t v38 = *(void **)(v35 + 24);
            *(void *)(v0 + 32) = v38;
            id v39 = v38;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v46 = v38;
            id v31 = v37;
            swift_release_n();
            *(_WORD *)(v36 + 12) = 2048;
            *(void *)(v0 + 40) = 0x404E000000000000;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl((void *)&_mh_execute_header, v32, type, "Setting accessory reachable %@ after %f secs", (uint8_t *)v36, 0x16u);
            sub_1000992E8(&qword_1002A7C40);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
          }
          unint64_t v40 = *(void *)(v0 + 64);
          v48(*(void *)(v0 + 128), *(void *)(v0 + 88));
          uint64_t v41 = (void (*)(char *, uint64_t))static DockCoreManager.localFirmwarePath.getter();
          sub_10014A068(v40, 1, v41, v42, 60.0);

          swift_bridgeObjectRelease();
        }
        else
        {
        }
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
  return v43();
}

void sub_10015F078(id a1, void *a2, void *a3, id a4)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2) {
    return;
  }
  id v13 = [a2 cbCharacteristic];
  if (!v13) {
    return;
  }
  if (!a1)
  {

    return;
  }
  id v111 = v13;
  uint64_t v14 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  uint64_t v104 = v9;
  uint64_t v103 = v10;
  id v110 = a3;
  uint64_t v102 = v4;
  if (!v14)
  {
    uint64_t v115 = 0;
    long long v113 = 0u;
    long long v114 = 0u;
    id v34 = a1;
    goto LABEL_30;
  }
  id v107 = a4;
  uint64_t v108 = v12;
  uint64_t v15 = v14;
  id v109 = a1;
  id v16 = [a1 identifier];
  if (!v16)
  {
    __break(1u);
    return;
  }
  uint64_t v17 = v16;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  os_log_t v105 = (os_log_t)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v21 = *(id *)((char *)v15 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  Class v106 = v15;
  uint64_t v22 = (char *)v15 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories;
  swift_beginAccess();
  uint64_t v23 = *(void *)(*(void *)v22 + 16);
  if (!v23)
  {
LABEL_23:
    Class v35 = v106;
    id v36 = *(id *)((char *)&v105->isa + (void)v106);
    OS_dispatch_semaphore.signal()();

    uint64_t v115 = 0;
    long long v113 = 0u;
    long long v114 = 0u;
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)v22 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000A5D40(v24, (uint64_t)v112);
    id v25 = *(void **)(*sub_1000A5DA4(v112, v112[3]) + 32);
    if (!v25) {
      goto LABEL_9;
    }
    id v26 = v25;
    id v27 = [v26 identifier];
    if (v27) {
      break;
    }
LABEL_8:

LABEL_9:
    sub_100099BCC((uint64_t)v112);
    v24 += 40;
    if (!--v23)
    {
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
  id v28 = v27;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  if (v29 != v18 || v31 != v20)
  {
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v33) {
      goto LABEL_25;
    }
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
  Class v35 = v106;
  id v37 = *(id *)((char *)&v105->isa + (void)v106);
  OS_dispatch_semaphore.signal()();

  sub_1000A5D40((uint64_t)v112, (uint64_t)&v113);
  sub_100099BCC((uint64_t)v112);
LABEL_26:

  swift_bridgeObjectRelease();
  a1 = v109;
  uint64_t v12 = v108;
  a4 = v107;
  if (!*((void *)&v114 + 1))
  {
LABEL_30:
    sub_1000A61E4((uint64_t)&v113, (uint64_t *)&unk_1002AAA30);
    uint64_t v38 = 0;
    goto LABEL_31;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if (swift_dynamicCast()) {
    uint64_t v38 = v112[0];
  }
  else {
    uint64_t v38 = 0;
  }
LABEL_31:
  sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
  id v39 = [v111 UUID];
  if (qword_1002A7B98 != -1) {
    swift_once();
  }
  char v40 = static NSObject.== infix(_:_:)();

  if (v40) {
    goto LABEL_44;
  }
  id v41 = [v111 UUID];
  if (qword_1002A7BA0 != -1) {
    swift_once();
  }
  char v42 = static NSObject.== infix(_:_:)();

  if (v42) {
    goto LABEL_44;
  }
  id v43 = [v111 UUID];
  if (qword_1002A7BC0 != -1) {
    swift_once();
  }
  char v44 = static NSObject.== infix(_:_:)();

  if ((v44 & 1) == 0)
  {
LABEL_44:
    if (v38)
    {
      swift_retain();
      id v63 = [v111 UUID];
      sub_1001A7908((uint64_t)v63, (uint64_t)v110, (unint64_t)a4, 0);

      swift_release_n();
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  if (!v38)
  {
LABEL_46:

    goto LABEL_47;
  }
  uint64_t v45 = *(void **)(v38 + 24);
  Class v106 = (Class)type metadata accessor for AccessorySystemEvent();
  id v46 = objc_allocWithZone(v106);
  id v47 = v45;
  uint64_t v48 = (uint64_t)v110;
  sub_1000A618C((uint64_t)v110, (unint64_t)a4);
  uint64_t v49 = AccessorySystemEvent.init(data:name:)();
  if (!v49) {
    goto LABEL_79;
  }
  uint64_t v50 = (void *)v49;
  uint64_t v51 = v103;
  (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v12, v102 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v104);
  sub_1000A618C(v48, (unint64_t)a4);
  id v52 = v50;
  sub_1000A618C(v48, (unint64_t)a4);
  id v53 = v52;
  id v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.default.getter();
  BOOL v56 = os_log_type_enabled(v54, v55);
  id v109 = a1;
  id v107 = v53;
  if (v56)
  {
    uint64_t v57 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    uint64_t v108 = v12;
    *(void *)&long long v113 = v58;
    *(_DWORD *)uint64_t v57 = 136315394;
    os_log_t v105 = v54;
    uint64_t v59 = sub_100139704(v48, (unint64_t)a4);
    v112[0] = sub_1000993AC(v59, v60, (uint64_t *)&v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A6240(v48, (unint64_t)a4);
    sub_1000A6240(v48, (unint64_t)a4);
    *(_WORD *)(v57 + 12) = 256;
    char v61 = AccessorySystemEvent.header.getter();

    LOBYTE(v112[0]) = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    os_log_t v62 = v105;
    _os_log_impl((void *)&_mh_execute_header, v105, v55, "Got accessory event: %s -> %hhu", (uint8_t *)v57, 0xFu);
    swift_arrayDestroy();
    a1 = v109;
    swift_slowDealloc();
    id v53 = v107;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v51 + 8))(v108, v104);
  }
  else
  {

    sub_1000A6240(v48, (unint64_t)a4);
    sub_1000A6240(v48, (unint64_t)a4);

    (*(void (**)(char *, uint64_t))(v51 + 8))(v12, v104);
  }
  int v64 = AccessorySystemEvent.header.getter();
  if (v64 != static AccessorySystemEvent.kHeaderCameraShutter.getter()) {
    goto LABEL_63;
  }
  int v65 = AccessorySystemEvent.payload.getter();
  if (v65 != static AccessorySystemEvent.kHeaderEventRelease.getter()) {
    goto LABEL_63;
  }
  id v110 = v47;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v66 = qword_1002B1628;
  uint64_t v67 = sub_10011468C();
  uint64_t v68 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  BOOL v69 = *(os_unfair_lock_s **)(v66 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v69 + 4);
  swift_release();
  uint64_t v70 = *(void *)(v67 + 16);
  if (v70)
  {
    uint64_t v71 = v66 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps;
    swift_beginAccess();
    uint64_t v72 = (uint64_t *)(v67 + 40);
    while (1)
    {
      if (*(void *)(*(void *)v71 + 16))
      {
        uint64_t v74 = *(v72 - 1);
        uint64_t v73 = *v72;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10016DB60(v74, v73);
        LOBYTE(v74) = v75;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v74) {
          break;
        }
      }
      v72 += 2;
      if (!--v70) {
        goto LABEL_60;
      }
    }
    swift_bridgeObjectRelease();
LABEL_62:
    uint64_t v79 = *(os_unfair_lock_s **)(v66 + v68);
    swift_retain();
    os_unfair_lock_unlock(v79 + 4);
    swift_release();
    a1 = v109;
    id v47 = v110;
    id v53 = v107;
LABEL_63:
    int v80 = AccessorySystemEvent.header.getter();
    if (v80 == static AccessorySystemEvent.kHeaderCameraFlip.getter())
    {
      id v110 = v47;
      if (qword_1002A7C00 != -1) {
        swift_once();
      }
      uint64_t v81 = qword_1002B1628;
      uint64_t v82 = sub_10011468C();
      id v83 = (os_unfair_lock_s **)(v81 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      id v84 = *(os_unfair_lock_s **)(v81 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain();
      os_unfair_lock_lock(v84 + 4);
      swift_release();
      uint64_t v85 = *(void *)(v82 + 16);
      if (v85)
      {
        uint64_t v86 = v81 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps;
        swift_beginAccess();
        unint64_t v87 = (uint64_t *)(v82 + 40);
        while (1)
        {
          if (*(void *)(*(void *)v86 + 16))
          {
            uint64_t v89 = *(v87 - 1);
            uint64_t v88 = *v87;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_10016DB60(v89, v88);
            LOBYTE(v89) = v90;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v89) {
              break;
            }
          }
          v87 += 2;
          if (!--v85) {
            goto LABEL_72;
          }
        }
        swift_bridgeObjectRelease();
        a1 = v109;
        id v53 = v107;
LABEL_74:
        uint64_t v94 = *v83 + 4;
        swift_retain();
        os_unfair_lock_unlock(v94);
        swift_release();
        uint64_t v95 = qword_1002B1628;
        id v83 = (os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
        uint64_t v96 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
        swift_retain();
        os_unfair_lock_lock(v96 + 4);
        swift_release();
        unint64_t v97 = sub_1001EB364((uint64_t)_swiftEmptyArrayStorage);
        id v98 = (unint64_t *)(v95 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions);
        swift_beginAccess();
        *id v98 = v97;
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_72:
        swift_bridgeObjectRelease();
        uint64_t v91 = v81 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps;
        swift_beginAccess();
        if (*(void *)(*(void *)v91 + 16))
        {
          swift_bridgeObjectRetain();
          sub_10016DB60(0xD000000000000018, 0x8000000100237420);
          char v93 = v92;
          swift_bridgeObjectRelease();
          a1 = v109;
          id v53 = v107;
          if (v93) {
            goto LABEL_74;
          }
        }
        else
        {
          a1 = v109;
          id v53 = v107;
        }
      }
      uint64_t v100 = *v83 + 4;
      swift_retain();
      os_unfair_lock_unlock(v100);
      swift_release();
      id v47 = v110;
    }
    sub_100168800((uint64_t)v47, (uint64_t)v53);

LABEL_79:
    swift_release();
LABEL_47:
  }
  else
  {
LABEL_60:
    swift_bridgeObjectRelease();
    uint64_t v76 = v66 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps;
    swift_beginAccess();
    if (*(void *)(*(void *)v76 + 16))
    {
      swift_bridgeObjectRetain();
      sub_10016DB60(0xD000000000000018, 0x8000000100237420);
      char v78 = v77;
      swift_bridgeObjectRelease();
      if (v78) {
        goto LABEL_62;
      }
    }
    uint64_t v99 = *(os_unfair_lock_s **)(v66 + v68);
    swift_retain();
    os_unfair_lock_unlock(v99 + 4);
    swift_release();
    sub_10018839C();

    swift_release();
  }
}

void sub_100160038(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v84 = a3;
  uint64_t v79 = a5;
  uint64_t v80 = a6;
  uint64_t v82 = a1;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v81 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v72 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v72 - v21;
  uint64_t v23 = a2;
  uint64_t v25 = v24;
  sub_1000B9BD4(v23, (uint64_t)v14, &qword_1002AAA20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v14, 1, v15) == 1)
  {
    sub_1000A61E4((uint64_t)v14, &qword_1002AAA20);
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v14, v15);
  if (a4 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v15);
    return;
  }
  uint64_t v26 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v83 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v8);
  id v27 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  char v78 = v22;
  uint64_t v74 = v27;
  uint64_t v75 = v25 + 16;
  v27(v20, v22, v15);
  unint64_t v77 = a4;
  sub_1000A618C(v84, a4);
  id v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v76 = v25;
  if (v30)
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v72 = swift_slowAlloc();
    v86[0] = v72;
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v73 = (void (*)(char *, uint64_t))(v31 + 4);
    sub_100169A74(&qword_1002AA860, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v85 = sub_1000993AC(v32, v33, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v73 = *(void (**)(char *, uint64_t))(v76 + 8);
    v73(v20, v15);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Request to validate SW token: %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v73 = *(void (**)(char *, uint64_t))(v25 + 8);
    v73(v20, v15);
  }

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v8);
  id v34 = v82;
  if (!v82)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v35 = (uint64_t)v81;
  v74(v81, v78, v15);
  uint64_t v36 = type metadata accessor for AccessoryServer();
  id v86[3] = v36;
  v86[4] = (uint64_t)&off_1002789F0;
  id v37 = (void *)v83;
  v86[0] = v83;
  type metadata accessor for DockAccessorySWAuth(0);
  uint64_t v38 = swift_allocObject();
  uint64_t v39 = sub_1000E987C((uint64_t)v86, v36);
  __chkstk_darwin(v39);
  id v41 = (uint64_t *)((char *)&v72 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v42 + 16))(v41);
  uint64_t v43 = *v41;
  uint64_t v44 = v84;
  unint64_t v45 = v77;
  sub_1000A997C(v84, v77);
  id v46 = v37;
  id v47 = v34;
  uint64_t v48 = sub_100168E80(v43, v47, v35, v44, v45, v38);
  sub_1000A9990(v44, v45);

  sub_100099BCC((uint64_t)v86);
  uint64_t v49 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth;
  *(void *)&v46[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth] = v48;
  swift_release();
  uint64_t v50 = *(void *)&v46[v49];
  if (!v50)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v51 = self;
  uint64_t v52 = *(void *)(v50 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  unint64_t v53 = *(void *)(v50 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token + 8);
  swift_retain();
  sub_1000A618C(v52, v53);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A6240(v52, v53);
  LODWORD(v51) = [v51 isTokenValidForFeatures:32 token:isa];
  swift_release();

  if (!v51)
  {
    sub_1000B8650();
    uint64_t v58 = swift_allocError();
    unsigned char *v59 = 5;
    sub_1001543EC(0, v58);
    swift_errorRelease();
    unint64_t v60 = *(void **)&v46[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager];
    char v61 = v78;
    if (!v60)
    {
      v73(v78, v15);
      sub_1000A9990(v84, v77);
      return;
    }
    os_log_t v62 = v60;
    id v63 = [v47 identifier];
    if (v63)
    {
      int v64 = v63;
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v67 = v66;

      uint64_t v68 = swift_allocError();
      *BOOL v69 = 5;
      unint64_t v70 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
      if (*(void *)&v62[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
      {
        v62[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
        id v71 = *(id *)&v62[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
        sub_100156E14(v65, v67, 5, v70, v68);
        swift_bridgeObjectRelease();

        char v61 = v78;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_errorRelease();

      swift_bridgeObjectRelease();
      sub_1000A9990(v84, v77);
      uint64_t v57 = v61;
      goto LABEL_21;
    }
LABEL_27:
    __break(1u);
    return;
  }
  os_log_type_t v55 = v78;
  if (!*(void *)&v46[v49]) {
    goto LABEL_25;
  }
  uint64_t v56 = v80;
  if (!v80)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  swift_retain();
  sub_1001B8608(v79, v56);
  swift_release();
  sub_1000A9990(v84, v77);
  uint64_t v57 = v55;
LABEL_21:
  v73(v57, v15);
}

id sub_100160CC0(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v36 = a3;
  uint64_t v9 = &qword_1002AAA20;
  uint64_t v10 = sub_1000992E8(&qword_1002AAA20);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth;
  uint64_t v17 = *(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth);
  sub_1000B9BD4(a2, (uint64_t)&v34 - v14, &qword_1002AAA20);
  if (v17) {
    BOOL v18 = a4 >> 60 == 15;
  }
  else {
    BOOL v18 = 1;
  }
  if (!v18)
  {
    uint64_t v9 = (uint64_t *)type metadata accessor for UUID();
    uint64_t v35 = *(v9 - 1);
    uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t *))(v35 + 48);
    if (v5(v15, 1, v9) != 1)
    {
LABEL_13:
      id result = (id)sub_1000A61E4((uint64_t)v15, &qword_1002AAA20);
      if (*(void *)(v4 + v16))
      {
        sub_1000B9BD4(a2, (uint64_t)v13, &qword_1002AAA20);
        id result = (id)v5(v13, 1, v9);
        if (result != 1)
        {
          swift_retain();
          sub_1001BA2A0(v36, a4, (uint64_t)v13);
          swift_release();
          return (id)(*(uint64_t (**)(char *, uint64_t *))(v35 + 8))(v13, v9);
        }
        goto LABEL_26;
      }
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      return result;
    }
  }
  sub_1000A61E4((uint64_t)v15, &qword_1002AAA20);
  uint64_t v13 = (char *)sub_1000B8650();
  a4 = swift_allocError();
  unsigned char *v19 = 7;
  sub_1001543EC(0, a4);
  id result = (id)swift_errorRelease();
  uint64_t v21 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (v21)
  {
    if (a1)
    {
      uint64_t v22 = v21;
      id result = [a1 identifier];
      if (result)
      {
        uint64_t v23 = result;
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v26 = v25;

        uint64_t v27 = swift_allocError();
        unsigned char *v28 = 7;
        unint64_t v29 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
        if (*(void *)&v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
        {
          v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
          id v30 = *(id *)&v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
          sub_100156E14(v24, v26, 5, v29, v27);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        swift_errorRelease();

        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_25;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_13;
  }
LABEL_18:
  id v37 = 0;
  unsigned int v31 = [a1 stopPairingWithError:&v37];
  id v32 = v37;
  if (v31)
  {
    return v32;
  }
  else
  {
    uint64_t v36 = (uint64_t)v37;
    id v33 = v37;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (id)swift_errorRelease();
  }
}

void sub_100161254(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  *(void *)&v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth] = 0;
  swift_release();
  if (a2)
  {
    sub_1001543EC(0, a2);
    id v7 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager];
    if (!v7)
    {
      if (a1) {
        goto LABEL_15;
      }
      __break(1u);
      goto LABEL_14;
    }
    if (a1)
    {
      uint64_t v3 = v7;
      id v8 = [a1 identifier];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v12 = v11;

        unint64_t v13 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
        if (*(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
        {
          v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
          id v14 = *(id *)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
          sub_100156E14(v10, v12, 5, v13, a2);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

LABEL_15:
          uint64_t v23 = *(void **)&v4[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_workQueue];
          aBlock[4] = MotionFeedback.init(positions:velocities:);
          aBlock[5] = 0;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1001B81B8;
          uint64_t aBlock[3] = &unk_100278A40;
          uint64_t v24 = _Block_copy(aBlock);
          id v25 = v23;
          [a1 removePairingForCurrentControllerOnQueue:v25 completion:v24];
          _Block_release(v24);

          return;
        }
LABEL_14:

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_24;
  }
  id v26 = [objc_allocWithZone((Class)HAPAccessoryPairingRequest) init];
  [v26 setRequiresUserConsent:0];
  [v26 setPairingIdentity:0];
  uint64_t v15 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager];
  if (!v15)
  {
    if (a1) {
      goto LABEL_19;
    }
    __break(1u);
LABEL_18:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (!a1)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v4 = v15;
  id v16 = [a1 identifier];
  if (!v16)
  {
LABEL_25:
    __break(1u);
    return;
  }
  uint64_t v17 = v16;
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  unint64_t v21 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
  if (!*(void *)&v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard]) {
    goto LABEL_18;
  }
  v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 5;
  id v22 = *(id *)&v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
  sub_100156E14(v18, v20, 2, v21, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_19:
  [a1 tearDownSessionOnAuthCompletion];
  [a1 startPairingWithRequest:v26];
}

id sub_1001616C0()
{
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  os_log_type_t v6 = v0;
  Logger.init(subsystem:category:)();
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager] = 0;
  uint64_t v11 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_workQueue;
  sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  static DispatchQoS.unspecified.getter();
  id v14 = _swiftEmptyArrayStorage;
  sub_100169A74((unint64_t *)&qword_1002A8530, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000992E8(&qword_1002A9000);
  sub_1000EAA74((unint64_t *)&qword_1002A8540, &qword_1002A9000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v12);
  *(void *)&v6[v11] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_parser] = 0;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_pairingInterval] = 0xBFF0000000000000;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth] = 0;
  uint64_t v7 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_virtualEventService;
  *(void *)&v6[v7] = [objc_allocWithZone((Class)type metadata accessor for VirtualEventService()) init];

  id v8 = (objc_class *)type metadata accessor for AccessoryServer();
  v13.receiver = v6;
  v13.super_class = v8;
  return [super init];
}

id sub_100161A14()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryServer();
  return [super dealloc];
}

uint64_t sub_100161B0C()
{
  return type metadata accessor for AccessoryServer();
}

uint64_t type metadata accessor for AccessoryServer()
{
  uint64_t result = qword_1002AA9F8;
  if (!qword_1002AA9F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100161B60()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_100161C1C(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    sub_100161254(a1, a4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v9);
    sub_1000A618C(a2, a3);
    sub_1000A618C(a2, a3);
    objc_super v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      unint64_t v21 = a1;
      id v16 = (uint8_t *)v15;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v23 = v20;
      *(_DWORD *)id v16 = 136315138;
      v19[1] = v16 + 4;
      Swift::String v17 = Data.base64EncodedString(options:)(0);
      uint64_t v22 = sub_1000993AC(v17._countAndFlagsBits, (unint64_t)v17._object, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000A6240(a2, a3);
      sub_1000A6240(a2, a3);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Provisioning new SW auth token: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a1 = v21;
      swift_slowDealloc();
    }
    else
    {
      sub_1000A6240(a2, a3);
      sub_1000A6240(a2, a3);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [a1 provisionToken:isa];
  }
}

uint64_t sub_100161EE8(uint64_t a1, unint64_t a2)
{
  sub_1000A618C(a1, a2);
  sub_100162158(a1, a2);
  sub_1000A6240(a1, a2);
  uint64_t v4 = static String._fromUTF8Repairing(_:)();
  swift_release();
  return v4;
}

uint64_t sub_100161F60@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100161F9C(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t result = (uint64_t)sub_100162104(v9, v15, a4);
  if (v4) {
    return v16;
  }
  return result;
}

unint64_t sub_10016204C(unint64_t result, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0) {
    return specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
  {
    return swift_retain();
  }
  __break(1u);
  return result;
}

void *sub_1001620A8(void *(*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return 0;
  }
  uint64_t v6 = a3;
  uint64_t result = a1(&v7, &v6);
  if (!v4) {
    return (void *)v7;
  }
  return result;
}

void *sub_100162104(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

void *sub_100162158(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = _swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v9 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v9)
      {
        if (v9 >= 1)
        {
          sub_1000992E8(&qword_1002A7F40);
          id v8 = (void *)swift_allocObject();
          size_t v12 = j__malloc_size(v8);
          v8[2] = v9;
          v8[3] = 2 * v12 - 64;
        }
        sub_1000A618C(a1, a2);
        uint64_t v13 = Data._copyContents(initializing:)();
        sub_1000A6240(a1, a2);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        if (v13 != v9)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x100162304);
        }
      }
      return v8;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v10 = *(void *)(a1 + 24);
      uint64_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v8;
    default:
      uint64_t v9 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_100162314@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_10016204C(*a1, *a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

uint64_t sub_100162354@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10016238C(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t sub_100162428(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v27 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v4 = __chkstk_darwin(v27);
  uint64_t v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  id v8 = (uint64_t *)((char *)&v25 - v7);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v25 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v26 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v29 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (v12)
  {
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v16 = v15 | (v14 << 6);
LABEL_5:
    uint64_t v17 = *(void *)(v29 + 56);
    uint64_t v18 = (uint64_t *)(*(void *)(v29 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = type metadata accessor for BTDiscoveredDevice();
    sub_1000E9F88(v17 + *(void *)(*(void *)(v21 - 8) + 72) * v16, (uint64_t)v8 + *(int *)(v27 + 48));
    *id v8 = v19;
    v8[1] = v20;
    sub_1000EA2DC((uint64_t)v8, (uint64_t)v6, (uint64_t *)&unk_1002AA6B0);
    swift_bridgeObjectRetain();
    sub_100159D60(v6, v28);
    uint64_t result = sub_1000A61E4((uint64_t)v6, (uint64_t *)&unk_1002AA6B0);
    if (v2) {
      return swift_release();
    }
  }
  if (__OFADD__(v14++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v14 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v14);
  if (v23)
  {
LABEL_19:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v16 = __clz(__rbit64(v23)) + (v14 << 6);
    goto LABEL_5;
  }
  int64_t v24 = v14 + 1;
  if (v14 + 1 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v14 + 2;
  if (v14 + 2 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v14 + 3;
  if (v14 + 3 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23) {
    goto LABEL_18;
  }
  int64_t v24 = v14 + 4;
  if (v14 + 4 >= v26) {
    return swift_release();
  }
  unint64_t v23 = *(void *)(v25 + 8 * v24);
  if (v23)
  {
LABEL_18:
    int64_t v14 = v24;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v14 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v14 >= v26) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v25 + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1001626BC(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = result + 40;
    uint64_t v4 = -(uint64_t)v1;
    uint64_t v14 = result + 40;
    unint64_t v15 = *(void *)(result + 16);
    do
    {
      if (v2 <= v1) {
        unint64_t v5 = v1;
      }
      else {
        unint64_t v5 = v2;
      }
      uint64_t v6 = -(uint64_t)v5;
      for (uint64_t i = (_OWORD *)(v3 + 24 * v2++); ; uint64_t i = (_OWORD *)((char *)i + 24))
      {
        if (v6 + v2 == 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v8 = *((void *)i - 1);
        long long v16 = *i;
        sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
        swift_bridgeObjectRetain();
        id v9 = *((id *)&v16 + 1);
        if (static NSObject.== infix(_:_:)()) {
          break;
        }

        uint64_t result = swift_bridgeObjectRelease();
        ++v2;
        if (v4 + v2 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = sub_1001DC5D4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      uint64_t v3 = v14;
      long long v10 = v16;
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
      {
        uint64_t result = sub_1001DC5D4(v11 > 1, v12 + 1, 1);
        long long v10 = v16;
      }
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[3 * v12];
      v13[4] = v8;
      *(_OWORD *)(v13 + 5) = v10;
      unint64_t v1 = v15;
    }
    while (v4 + v2);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_100162874(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    if ((unint64_t)*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      return v18;
    }
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_14;
  }
LABEL_3:
  unint64_t v7 = 0;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  while (1)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v8 = *(void *)(v5 + 8 * v7 + 32);
      swift_retain();
    }
    uint64_t v10 = *(void *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    unint64_t v9 = *(void *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    sub_1000A618C(v10, v9);
    uint64_t v11 = sub_10013E71C(v10, v9);
    uint64_t v13 = v12;
    sub_1000A6240(v10, v9);
    a2 = v40;
    if (v11 == v39 && v13 == v40) {
      break;
    }
    a3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_bridgeObjectRelease();
    if (a3) {
      goto LABEL_17;
    }
    unint64_t v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_22;
    }
    ++v7;
    if (v15 == v6) {
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
LABEL_17:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v17 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else if (!((unint64_t)*a1 >> 62))
  {
    if (v17 == *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      return v7;
    }
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v17 == v19) {
    return v7;
  }
LABEL_27:
  for (unint64_t i = v7 + 5; ; ++i)
  {
    unint64_t v21 = i - 4;
    uint64_t v22 = *a1;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      uint64_t v23 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_32;
    }
    if ((v21 & 0x8000000000000000) != 0) {
      break;
    }
    if (v21 >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_70;
    }
    uint64_t v23 = *(void *)(v22 + 8 * i);
    swift_retain();
LABEL_32:
    uint64_t v24 = *(void *)(v23 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    unint64_t v25 = *(void *)(v23 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    sub_1000A618C(v24, v25);
    uint64_t v26 = sub_10013E71C(v24, v25);
    uint64_t v28 = v27;
    sub_1000A6240(v24, v25);
    if (v26 == v39 && v28 == v40)
    {
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_60;
    }
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_60;
    }
    if (v21 != v7)
    {
      uint64_t v31 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v32 = result;
        uint64_t v31 = *a1;
        if ((*a1 & 0xC000000000000001) == 0) {
          goto LABEL_42;
        }
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0) {
          goto LABEL_73;
        }
        if (v7 >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_74;
        }
        uint64_t v32 = *(void *)(v31 + 8 * v7 + 32);
        uint64_t result = swift_retain();
        if ((v31 & 0xC000000000000001) == 0)
        {
LABEL_42:
          if ((v21 & 0x8000000000000000) != 0) {
            goto LABEL_75;
          }
          if (v21 >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_76;
          }
          uint64_t v33 = *(void *)(v31 + 8 * i);
          swift_retain();
          goto LABEL_45;
        }
      }
      uint64_t v33 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v31 = *a1;
LABEL_45:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v31;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v31 < 0 || (v31 & 0x4000000000000000) != 0)
      {
        uint64_t v31 = sub_1001137FC(v31);
        *a1 = v31;
      }
      *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v33;
      swift_release();
      specialized Array._endMutation()();
      uint64_t v35 = *a1;
      uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v35;
      if (!result || v35 < 0 || (v35 & 0x4000000000000000) != 0)
      {
        uint64_t result = sub_1001137FC(v35);
        uint64_t v35 = result;
        *a1 = result;
      }
      if ((v21 & 0x8000000000000000) != 0) {
        goto LABEL_77;
      }
      if (v21 >= *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_78;
      }
      *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v32;
      swift_release();
      uint64_t result = specialized Array._endMutation()();
    }
    if (__OFADD__(v7++, 1)) {
      goto LABEL_72;
    }
LABEL_60:
    unint64_t v37 = i - 3;
    if (__OFADD__(v21, 1)) {
      goto LABEL_71;
    }
    if ((unint64_t)*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v38 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v37 == v38) {
      return v7;
    }
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
  return result;
}

void sub_100162D54(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v6);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessory uncertified, requesting user permission.", v12, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v13 = *(char **)(v3 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
    if (v13)
    {
      uint64_t v14 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard;
      if (*(void *)&v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
      {
        if (a1)
        {
          unint64_t v15 = v13;
          id v16 = [a1 identifier];
          if (!v16)
          {
LABEL_15:
            __break(1u);
            return;
          }
          unint64_t v17 = v16;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v20 = v19;

          unint64_t v21 = sub_1001EA374((uint64_t)&off_100274B90);
          if (*(void *)&v13[v14])
          {
            v15[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 3;
            id v22 = *(id *)&v15[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
            sub_100156E14(v18, v20, 1, v21, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            uint64_t v23 = *(void **)&v13[v14];
            if (v23)
            {
LABEL_11:
              uint64_t v24 = v23;

              v24[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_requiresSWAuth] = 0;
              return;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v23 = *(void **)&v13[v14];
            if (v23) {
              goto LABEL_11;
            }
          }
          __break(1u);
        }
        __break(1u);
        goto LABEL_15;
      }
    }
  }
}

uint64_t sub_100162FE0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a2;
  uint64_t v50 = a4;
  uint64_t v43 = a1;
  uint64_t v49 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v5 = __chkstk_darwin(v49);
  uint64_t v48 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v41 - v7);
  uint64_t v9 = type metadata accessor for BTDiscoveredDevice();
  uint64_t v47 = *(void *)(v9 - 8);
  uint64_t result = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = 0;
  uint64_t v51 = (void *)a3;
  uint64_t v14 = *(void *)(a3 + 64);
  uint64_t v44 = 0;
  uint64_t v45 = a3 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v46 = (unint64_t)(v15 + 63) >> 6;
  while (v17)
  {
    unint64_t v18 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    int64_t v52 = v13;
    unint64_t v19 = v18 | (v13 << 6);
LABEL_22:
    uint64_t v24 = (uint64_t *)(v51[6] + 16 * v19);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    sub_1000E9F88(v51[7] + *(void *)(v47 + 72) * v19, (uint64_t)v12);
    uint64_t v27 = v49;
    uint64_t v28 = (uint64_t)v8 + *(int *)(v49 + 48);
    *uint64_t v8 = v25;
    v8[1] = v26;
    uint64_t v29 = (uint64_t)v12;
    sub_1000E9F88((uint64_t)v12, v28);
    uint64_t v30 = *(int *)(v27 + 48);
    uint64_t v31 = v48;
    uint64_t v32 = (uint64_t)v48 + v30;
    *uint64_t v48 = v25;
    v31[1] = v26;
    sub_1000E9F88(v28, (uint64_t)v31 + v30);
    uint64_t v33 = *(void **)(v32 + 8);
    id v34 = v33;
    swift_bridgeObjectRetain_n();
    sub_1000E9FEC(v32);
    uint64_t v35 = *(void *)(v50 + 16);
    if (v35)
    {
      uint64_t v36 = *(void **)(v35 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral);
      id v37 = v36;
      if (!v33)
      {
        sub_1000A61E4((uint64_t)v8, (uint64_t *)&unk_1002AA6B0);
        if (v36) {
          goto LABEL_5;
        }
        goto LABEL_30;
      }
      if (v36)
      {
        sub_100099C7C(0, (unint64_t *)&qword_1002AAA60);
        id v38 = v34;
        char v39 = static NSObject.== infix(_:_:)();
        sub_1000A61E4((uint64_t)v8, (uint64_t *)&unk_1002AA6B0);

        uint64_t v12 = (char *)v29;
        sub_1000E9FEC(v29);
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v13 = v52;
        if (v39) {
          goto LABEL_31;
        }
      }
      else
      {
LABEL_28:
        sub_1000A61E4((uint64_t)v8, (uint64_t *)&unk_1002AA6B0);
        id v37 = v34;
LABEL_5:

        uint64_t v12 = (char *)v29;
        sub_1000E9FEC(v29);
        uint64_t result = swift_bridgeObjectRelease();
        int64_t v13 = v52;
      }
    }
    else
    {
      if (v33) {
        goto LABEL_28;
      }
      sub_1000A61E4((uint64_t)v8, (uint64_t *)&unk_1002AA6B0);
LABEL_30:
      uint64_t v12 = (char *)v29;
      sub_1000E9FEC(v29);
      uint64_t result = swift_bridgeObjectRelease();
      int64_t v13 = v52;
LABEL_31:
      *(unint64_t *)((char *)v43 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v44++, 1))
      {
        __break(1u);
        return sub_1001D0E88(v43, v42, v44, v51);
      }
    }
  }
  int64_t v20 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v20 >= v46) {
    return sub_1001D0E88(v43, v42, v44, v51);
  }
  unint64_t v21 = *(void *)(v45 + 8 * v20);
  int64_t v22 = v13 + 1;
  if (v21) {
    goto LABEL_21;
  }
  int64_t v22 = v13 + 2;
  if (v13 + 2 >= v46) {
    return sub_1001D0E88(v43, v42, v44, v51);
  }
  unint64_t v21 = *(void *)(v45 + 8 * v22);
  if (v21) {
    goto LABEL_21;
  }
  int64_t v22 = v13 + 3;
  if (v13 + 3 >= v46) {
    return sub_1001D0E88(v43, v42, v44, v51);
  }
  unint64_t v21 = *(void *)(v45 + 8 * v22);
  if (v21)
  {
LABEL_21:
    unint64_t v17 = (v21 - 1) & v21;
    int64_t v52 = v22;
    unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
    goto LABEL_22;
  }
  uint64_t v23 = v13 + 4;
  if (v13 + 4 >= v46) {
    return sub_1001D0E88(v43, v42, v44, v51);
  }
  unint64_t v21 = *(void *)(v45 + 8 * v23);
  if (v21)
  {
    int64_t v22 = v13 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v22 >= v46) {
      return sub_1001D0E88(v43, v42, v44, v51);
    }
    unint64_t v21 = *(void *)(v45 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_21;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100163414(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    uint64_t v11 = sub_100162FE0((unint64_t *)((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, a1, a2);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    uint64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v9);
    swift_retain();
    uint64_t v11 = sub_100162FE0((unint64_t *)v12, v8, a1, a2);
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v11;
}

void *sub_1001635D0(void *result)
{
  uint64_t v49 = result;
  uint64_t v1 = result[2];
  if (v1)
  {
    uint64_t result = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral);
    if (result)
    {
      uint64_t result = [result services];
      if (result)
      {
        uint64_t v2 = result;
        sub_100099C7C(0, (unint64_t *)&unk_1002A8F30);
        unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v46 = v3;
        if (v3 >> 62) {
          goto LABEL_63;
        }
        uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        while (v4)
        {
          unint64_t v5 = 0;
          uint64_t v47 = v4;
          unint64_t v45 = v46 + 32;
          while ((v46 & 0xC000000000000001) != 0)
          {
            id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            BOOL v7 = __OFADD__(v5++, 1);
            if (v7) {
              goto LABEL_60;
            }
LABEL_14:
            uint64_t v48 = v6;
            id v8 = [v6 characteristics:v45];
            if (v8)
            {
              size_t v9 = v8;
              sub_100099C7C(0, (unint64_t *)&unk_1002A9F60);
              unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
            }
            else
            {
              unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
            }
            if (v10 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v11) {
                goto LABEL_7;
              }
            }
            else
            {
              uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (!v11) {
                goto LABEL_7;
              }
            }
            sub_100099C7C(0, &qword_1002AAAA8);
            if (v11 < 1) {
              goto LABEL_61;
            }
            for (uint64_t i = 0; i != v11; ++i)
            {
              if ((v10 & 0xC000000000000001) != 0) {
                id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v13 = *(id *)(v10 + 8 * i + 32);
              }
              uint64_t v14 = v13;
              id v15 = [v13 UUID];
              if (qword_1002A7B98 != -1) {
                swift_once();
              }
              id v16 = (id)qword_1002B1568;
              char v17 = static NSObject.== infix(_:_:)();

              if (v17) {
                goto LABEL_69;
              }
              id v18 = [v14 UUID];
              if (qword_1002A7BA0 != -1) {
                swift_once();
              }
              id v19 = (id)qword_1002B1570;
              char v20 = static NSObject.== infix(_:_:)();

              if (v20) {
                goto LABEL_69;
              }
              id v21 = [v14 UUID];
              if (qword_1002A7BA8 != -1) {
                swift_once();
              }
              id v22 = (id)qword_1002B1578;
              char v23 = static NSObject.== infix(_:_:)();

              if (v23) {
                goto LABEL_69;
              }
              id v24 = [v14 UUID];
              if (qword_1002A7BC8 != -1) {
                swift_once();
              }
              id v25 = (id)qword_1002B1598;
              char v26 = static NSObject.== infix(_:_:)();

              if (v26) {
                goto LABEL_69;
              }
              id v27 = [v14 UUID];
              if (qword_1002A7BD0 != -1) {
                swift_once();
              }
              id v28 = (id)qword_1002B15A0;
              char v29 = static NSObject.== infix(_:_:)();

              if (v29) {
                goto LABEL_69;
              }
              id v30 = [v14 UUID];
              if (qword_1002A7BB0 != -1) {
                swift_once();
              }
              id v31 = (id)qword_1002B1580;
              char v32 = static NSObject.== infix(_:_:)();

              if (v32) {
                goto LABEL_69;
              }
              id v33 = [v14 UUID];
              if (qword_1002A7BB8 != -1) {
                swift_once();
              }
              id v34 = (id)qword_1002B1588;
              char v35 = static NSObject.== infix(_:_:)();

              if (v35) {
                goto LABEL_69;
              }
              id v36 = [v14 UUID];
              if (qword_1002A7BC0 != -1) {
                swift_once();
              }
              id v37 = (id)qword_1002B1590;
              char v38 = static NSObject.== infix(_:_:)();

              if (v38) {
                goto LABEL_69;
              }
              id v39 = [v14 UUID];
              if (qword_1002A7BE0 != -1) {
                swift_once();
              }
              id v40 = (id)qword_1002B15B0;
              char v41 = static NSObject.== infix(_:_:)();

              if (v41)
              {
LABEL_69:
                if (([v14 properties] & 0x10) != 0
                  || ([v14 properties] & 0x20) != 0)
                {
                  uint64_t v42 = v49[2];
                  if (v42)
                  {
                    uint64_t v43 = *(void **)(v42 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral);
                    if (v43)
                    {
                      id v44 = v43;
                      [v44 setNotifyValue:1 forCharacteristic:v14];
                    }
                  }
                }
              }
            }
LABEL_7:

            swift_bridgeObjectRelease();
            if (v5 == v47) {
              goto LABEL_64;
            }
          }
          if (v5 >= *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_62;
          }
          id v6 = *(id *)(v45 + 8 * v5);
          BOOL v7 = __OFADD__(v5++, 1);
          if (!v7) {
            goto LABEL_14;
          }
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          swift_bridgeObjectRetain();
          uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
LABEL_64:
        return (void *)swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

void sub_100163D08(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v157 = a1;
  uint64_t v7 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v7 - 8);
  size_t v9 = (char *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __chkstk_darwin(v10);
  id v13 = (char *)&v148 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v15 = __chkstk_darwin(v14);
  char v17 = (char *)&v148 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (uint64_t)&v148 - v19;
  __chkstk_darwin(v18);
  id v25 = (char *)&v148 - v21;
  uint64_t v159 = v4;
  if (!a3)
  {
    if (!a2) {
      goto LABEL_102;
    }
    unint64_t v36 = a2 >> 62;
    if (a2 >> 62)
    {
      uint64_t v137 = v24;
      uint64_t v138 = v22;
      uint64_t v20 = (uint64_t)v23;
      swift_bridgeObjectRetain();
      uint64_t v139 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      id v24 = v137;
      char v23 = (char *)v20;
      unint64_t v36 = a2 >> 62;
      uint64_t v22 = v138;
      if (v139)
      {
LABEL_7:
        id v37 = *(void **)&v159[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager];
        uint64_t v156 = v22;
        uint64_t v158 = v23;
        if (v37)
        {
          id v150 = v24;
          char v38 = v157;
          if (!v157) {
            goto LABEL_103;
          }
          unint64_t v153 = v36;
          uint64_t v154 = v9;
          uint64_t v155 = a2;
          id v39 = v37;
          id v40 = [v38 identifier];
          if (!v40)
          {
LABEL_104:
            __break(1u);
            goto LABEL_105;
          }
          char v41 = v40;
          uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v44 = v43;

          uint64_t v45 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
          id v46 = *(id *)&v39[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
          OS_dispatch_semaphore.wait()();

          uint64_t v47 = &v39[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
          swift_beginAccess();
          uint64_t v48 = *(void *)v47;
          uint64_t v49 = *(void *)(v48 + 16);
          if (v49)
          {
            uint64_t v151 = (void (*)(char *, id, uint64_t))v45;
            uint64_t v152 = v39;
            uint64_t v50 = v48 + 32;
            swift_bridgeObjectRetain();
            do
            {
              sub_1000A5D40(v50, (uint64_t)v164);
              uint64_t v51 = *(void **)(*sub_1000A5DA4(v164, v165) + 32);
              if (v51)
              {
                id v52 = v51;
                id v53 = [v52 identifier];
                if (v53)
                {
                  id v54 = v53;
                  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v57 = v56;

                  if (v55 == v42 && v57 == v44)
                  {
                    swift_bridgeObjectRelease();
LABEL_63:
                    swift_bridgeObjectRelease();
                    id v107 = v152;
                    id v108 = *(id *)((char *)v151 + (void)v152);
                    OS_dispatch_semaphore.signal()();

                    sub_1000A5D40((uint64_t)v164, (uint64_t)&aBlock);
                    sub_100099BCC((uint64_t)v164);

LABEL_64:
                    swift_bridgeObjectRelease();
                    uint64_t v20 = v155;
                    uint64_t v109 = (uint64_t)v154;
                    if (*((void *)&v161 + 1))
                    {
                      sub_1000992E8(&qword_1002A82E0);
                      type metadata accessor for DaemonAccessory();
                      if (swift_dynamicCast())
                      {
                        id v110 = v164[0];
                        sub_1001635D0(v164[0]);
                        if (*((unsigned char *)v110 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2)
                        {
                          id v111 = v157;
                          sub_1000F908C(v157);
                          unint64_t v112 = (void *)((char *)v110
                                          + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion);
                          void *v112 = v113;
                          v112[1] = v114;
                          swift_bridgeObjectRelease();
                          sub_1000F9098(v111);
                          uint64_t v115 = (void *)((char *)v110 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup);
                          *uint64_t v115 = v116;
                          v115[1] = v117;
                          swift_bridgeObjectRelease();
                          sub_1000F93D8(v111);
                          uint64_t v118 = (void *)((char *)v110
                                          + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber);
                          *uint64_t v118 = v119;
                          v118[1] = v120;
                          swift_bridgeObjectRelease();
                          sub_1000F95DC(v111);
                          NSString v121 = (void *)((char *)v110 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData);
                          *NSString v121 = v122;
                          v121[1] = v123;
                          swift_bridgeObjectRelease();
                          id v124 = v159;
                          if (!v153)
                          {
                            uint64_t v125 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
                            swift_bridgeObjectRetain();
                            if (v125) {
                              goto LABEL_69;
                            }
LABEL_90:
                            swift_bridgeObjectRelease();
                            (*((void (**)(void *, uint64_t, uint64_t))v158 + 2))(v150, (uint64_t)v124 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v156);
                            uint64_t v145 = Logger.logObject.getter();
                            os_log_type_t v146 = static os_log_type_t.default.getter();
                            if (os_log_type_enabled(v145, v146))
                            {
                              uint64_t v147 = (uint8_t *)swift_slowAlloc();
                              *(_WORD *)uint64_t v147 = 0;
                              _os_log_impl((void *)&_mh_execute_header, v145, v146, "No accessories paired", v147, 2u);
                              swift_slowDealloc();
                              swift_release();
                            }
                            else
                            {

                              swift_release();
                            }
                            (*((void (**)(void *, uint64_t))v158 + 1))(v150, v156);
                            return;
                          }
                          swift_bridgeObjectRetain();
                          if (!_CocoaArrayWrapper.endIndex.getter()) {
                            goto LABEL_90;
                          }
LABEL_69:
                          if ((v20 & 0xC000000000000001) != 0)
                          {
                            id v126 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                            goto LABEL_72;
                          }
                          if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
                          {
                            id v126 = *(id *)(v20 + 32);
LABEL_72:
                            id v127 = v126;
                            swift_bridgeObjectRelease();
                            uint64_t v128 = type metadata accessor for TaskPriority();
                            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v128 - 8) + 56))(v109, 1, 1, v128);
                            uint64_t v129 = (void *)swift_allocObject();
                            v129[2] = 0;
                            v129[3] = 0;
                            v129[4] = v110;
                            v129[5] = v124;
                            v129[6] = v127;
                            id v130 = v124;
                            swift_retain();
                            sub_1001BC1A8(v109, (uint64_t)&unk_1002AAA98, (uint64_t)v129);
                            swift_release();
                            swift_release();
                            return;
                          }
                          __break(1u);
LABEL_99:
                          __break(1u);
LABEL_100:
                          __break(1u);
LABEL_101:
                          __break(1u);
LABEL_102:
                          __break(1u);
LABEL_103:
                          __break(1u);
                          goto LABEL_104;
                        }
                        if (v153)
                        {
                          swift_bridgeObjectRetain();
                          if (_CocoaArrayWrapper.endIndex.getter())
                          {
LABEL_80:
                            if ((v20 & 0xC000000000000001) != 0)
                            {
                              id v135 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                            }
                            else
                            {
                              if (!*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                                goto LABEL_99;
                              }
                              id v135 = *(id *)(v20 + 32);
                            }
                            uint64_t v136 = v135;
                            swift_bridgeObjectRelease();
                            sub_100157980((uint64_t)v110, v136);

                            swift_release();
                            return;
                          }
                        }
                        else
                        {
                          uint64_t v134 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
                          swift_bridgeObjectRetain();
                          if (v134) {
                            goto LABEL_80;
                          }
                        }
                        swift_release();
                        swift_bridgeObjectRelease();
                        return;
                      }
LABEL_74:
                      (*((void (**)(char *, char *, uint64_t))v158 + 2))(v13, &v159[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger], v156);
                      id v131 = Logger.logObject.getter();
                      os_log_type_t v132 = static os_log_type_t.error.getter();
                      if (os_log_type_enabled(v131, v132))
                      {
                        unint64_t v133 = (uint8_t *)swift_slowAlloc();
                        *(_WORD *)unint64_t v133 = 0;
                        _os_log_impl((void *)&_mh_execute_header, v131, v132, "No record for discovered accessory!", v133, 2u);
                        swift_slowDealloc();
                      }

                      (*((void (**)(char *, uint64_t))v158 + 1))(v13, v156);
                      return;
                    }
LABEL_73:
                    sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AAA30);
                    goto LABEL_74;
                  }
                  char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  if (v59) {
                    goto LABEL_63;
                  }
                }
              }
              sub_100099BCC((uint64_t)v164);
              v50 += 40;
              --v49;
            }
            while (v49);
            swift_bridgeObjectRelease();
            id v39 = v152;
            uint64_t v45 = (uint64_t)v151;
          }
          id v101 = *(id *)&v39[v45];
          OS_dispatch_semaphore.signal()();

          NSString v162 = 0;
          long long aBlock = 0u;
          long long v161 = 0u;

          goto LABEL_64;
        }
        NSString v162 = 0;
        long long aBlock = 0u;
        long long v161 = 0u;
        goto LABEL_73;
      }
    }
    else if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_7;
    }
    unint64_t v140 = (void (**)(char *, uint64_t))v23;
    uint64_t v141 = v22;
    (*((void (**)(char *, char *, uint64_t))v23 + 2))(v17, &v159[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger], v22);
    uint64_t v142 = Logger.logObject.getter();
    os_log_type_t v143 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v142, v143))
    {
      v144 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v144 = 0;
      _os_log_impl((void *)&_mh_execute_header, v142, v143, "Error while discoverying accessory: No accessories.", v144, 2u);
      swift_slowDealloc();
    }

    v140[1](v17, v141);
    return;
  }
  id v27 = v23 + 16;
  char v26 = (char *)*((void *)v23 + 2);
  uint64_t v152 = &v4[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger];
  uint64_t v28 = v22;
  uint64_t v158 = v23;
  uint64_t v151 = (void (*)(char *, id, uint64_t))v26;
  ((void (*)(char *))v26)((char *)&v148 - v21);
  swift_errorRetain();
  swift_errorRetain();
  char v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v156 = v28;
  uint64_t v154 = (char *)v20;
  unint64_t v153 = (unint64_t)v27;
  if (v31)
  {
    char v32 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)char v32 = 136315138;
    swift_getErrorValue();
    uint64_t v33 = Error.localizedDescription.getter();
    v164[0] = (void *)sub_1000993AC(v33, v34, (uint64_t *)&aBlock);
    char v35 = v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Error while discoverying accessory: %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    char v35 = v4;
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v20 = *((void *)v158 + 1);
  ((void (*)(char *, uint64_t))v20)(v25, v28);
  swift_getErrorValue();
  uint64_t v60 = dispatch thunk of Error._domain.getter();
  uint64_t v62 = v61;
  if (v60 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v62 == v63)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v64 & 1) == 0) {
      goto LABEL_28;
    }
  }
  swift_getErrorValue();
  dispatch thunk of Error._code.getter();
LABEL_28:
  uint64_t v65 = (void *)_convertErrorToNSError(_:)();
  [v65 isHAPError];
  unint64_t v66 = *(void **)&v35[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager];
  unint64_t v67 = v157;
  if (!v66)
  {
    NSString v162 = 0;
    long long aBlock = 0u;
    long long v161 = 0u;
    goto LABEL_55;
  }
  if (!v157) {
    goto LABEL_100;
  }
  id v149 = (void (*)(char *, uint64_t))v20;
  uint64_t v68 = v66;
  id v69 = [v67 identifier];
  if (!v69) {
    goto LABEL_101;
  }
  unint64_t v70 = v69;
  uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v73 = v72;

  uint64_t v155 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v74 = *(id *)&v68[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  uint64_t v75 = &v68[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v76 = *(void *)v75;
  uint64_t v77 = *(void *)(v76 + 16);
  if (!v77)
  {
LABEL_45:
    id v88 = *(id *)&v68[v155];
    OS_dispatch_semaphore.signal()();

    NSString v162 = 0;
    long long aBlock = 0u;
    long long v161 = 0u;

    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  id v150 = v65;
  uint64_t v78 = v76 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000A5D40(v78, (uint64_t)v164);
    uint64_t v79 = *(void **)(*sub_1000A5DA4(v164, v165) + 32);
    if (!v79) {
      goto LABEL_34;
    }
    id v80 = v79;
    id v81 = [v80 identifier];
    if (v81) {
      break;
    }
LABEL_33:

LABEL_34:
    sub_100099BCC((uint64_t)v164);
    v78 += 40;
    if (!--v77)
    {
      swift_bridgeObjectRelease();
      uint64_t v65 = v150;
      goto LABEL_45;
    }
  }
  uint64_t v82 = v81;
  uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v85 = v84;

  if (v83 != v71 || v85 != v73)
  {
    char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v87) {
      goto LABEL_48;
    }
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
LABEL_48:
  swift_bridgeObjectRelease();
  id v89 = *(id *)&v68[v155];
  OS_dispatch_semaphore.signal()();

  sub_1000A5D40((uint64_t)v164, (uint64_t)&aBlock);
  sub_100099BCC((uint64_t)v164);

  swift_bridgeObjectRelease();
  uint64_t v65 = v150;
LABEL_49:
  char v90 = v159;
  if (!*((void *)&v161 + 1))
  {
LABEL_55:

    sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AAA30);
    return;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if (swift_dynamicCast())
  {
    if (*((unsigned char *)v164[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 1)
    {
      *((unsigned char *)v164[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 0;
      uint64_t v91 = v154;
      uint64_t v92 = v156;
      v151(v154, v152, v156);
      uint64_t v20 = v157;
      char v93 = Logger.logObject.getter();
      os_log_type_t v94 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v93, v94))
      {
        id v150 = v65;
        uint64_t v95 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v95 = 136315138;
        id v96 = [(id)v20 identifier];
        if (v96)
        {
          unint64_t v97 = v96;
          uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v100 = v99;

          v164[0] = (void *)sub_1000993AC(v98, v100, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "Attempting to remove pairing for undiscovered accessory %s", v95, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v149(v154, v156);
          char v90 = v159;
          uint64_t v65 = v150;
          goto LABEL_61;
        }
LABEL_105:

        __break(1u);
      }
      else
      {

        v149(v91, v92);
LABEL_61:
        uint64_t v102 = *(void **)&v90[OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_workQueue];
        uint64_t v103 = swift_allocObject();
        *(void *)(v103 + 16) = v90;
        NSString v162 = sub_100169C2C;
        uint64_t v163 = v103;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        *(void *)&long long v161 = sub_1001B81B8;
        *((void *)&v161 + 1) = &unk_100278B80;
        uint64_t v104 = _Block_copy(&aBlock);
        id v105 = v102;
        Class v106 = v90;
        swift_release();
        [(id)v20 removePairingForCurrentControllerOnQueue:v105 completion:v104];

        _Block_release(v104);
        swift_release();
      }
    }
    else
    {
      swift_release();
    }
  }
  else
  {
  }
}

uint64_t sub_100164F04(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a2;
  uint64_t v47 = type metadata accessor for DispatchWorkItemFlags();
  unint64_t v3 = *(char **)(v47 - 8);
  __chkstk_darwin(v47);
  id v46 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for DispatchQoS();
  unint64_t v5 = *(os_unfair_lock_s **)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v55 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7C00 != -1) {
LABEL_34:
  }
    swift_once();
  uint64_t v7 = &unk_1002B1000;
  uint64_t v8 = qword_1002B1628;
  sub_1001FBC9C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  uint64_t v10 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_release();
  uint64_t v11 = (uint64_t *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients);
  swift_beginAccess();
  uint64_t v12 = *v11;
  id v13 = *(os_unfair_lock_s **)(v8 + v9);
  uint64_t v14 = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v13 + 4);
  swift_release();
  int64_t v15 = 0;
  uint64_t v16 = v14 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v14 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v44 = v60;
  uint64_t v43 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v42 = (void (**)(char *, uint64_t))&v5[2];
  uint64_t v58 = (char *)&type metadata for Any + 8;
  uint64_t v52 = v14;
  uint64_t v53 = a1;
  int64_t v56 = v20;
  uint64_t v57 = v14 + 64;
  while (v19)
  {
    unint64_t v21 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    unint64_t v22 = v21 | (v15 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v14 + 56) + 16 * v22;
    if (*(void *)v26)
    {
      id v27 = *(void **)(v26 + 8);
      id v28 = *(id *)v26;
      unint64_t v5 = v27;
      unint64_t v3 = (char *)[v28 remoteObjectProxy];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000992E8((uint64_t *)&unk_1002A9F30);
      if (swift_dynamicCast())
      {
        unint64_t v3 = v61;
        sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
        char v29 = v5;
        unint64_t v5 = (os_unfair_lock_s *)static NSObject.== infix(_:_:)();

        if (v5)
        {
          uint64_t v30 = v7[197];
          uint64_t v31 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
          char v32 = *(os_unfair_lock_s **)(v30 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
          swift_retain();
          os_unfair_lock_lock(v32 + 4);
          swift_release();
          uint64_t v33 = *(void *)(v30 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
          if (v33)
          {
            unint64_t v34 = *(void **)(v33 + 24);
            if (v34)
            {
              v60[2] = sub_1000BF168;
              v60[3] = v33;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              v60[0] = sub_1001468DC;
              v60[1] = &unk_100278B08;
              uint64_t v49 = _Block_copy(aBlock);
              swift_retain_n();
              id v48 = v34;
              uint64_t v50 = v3;
              static DispatchQoS.unspecified.getter();
              uint64_t v61 = (char *)_swiftEmptyArrayStorage;
              sub_100169A74((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              uint64_t v51 = v31;
              sub_1000992E8((uint64_t *)&unk_1002A7F60);
              sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
              char v35 = v46;
              uint64_t v36 = v47;
              dispatch thunk of SetAlgebra.init<A>(_:)();
              id v37 = v49;
              char v38 = v48;
              OS_dispatch_queue.async(group:qos:flags:execute:)();
              _Block_release(v37);

              id v39 = v35;
              uint64_t v7 = (void *)&unk_1002B1000;
              uint64_t v40 = v36;
              uint64_t v31 = v51;
              (*v43)(v39, v40);
              unint64_t v3 = v50;
              (*v42)(v55, v45);
              swift_release();
              swift_release();
            }
          }
          unint64_t v5 = *(os_unfair_lock_s **)(v30 + v31);
          swift_retain();
          os_unfair_lock_unlock(v5 + 4);
          swift_release();
          a1 = v53;
          [v3 batteryStateDataWithInfo:v53 data:v54];
          swift_unknownObjectRelease();

          uint64_t v14 = v52;
        }
        else
        {
          swift_unknownObjectRelease();
        }
        int64_t v20 = v56;
        uint64_t v16 = v57;
      }
      else
      {
      }
    }
  }
  int64_t v23 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v23 >= v20) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v16 + 8 * v23);
  ++v15;
  if (v24) {
    goto LABEL_21;
  }
  int64_t v15 = v23 + 1;
  if (v23 + 1 >= v20) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v16 + 8 * v15);
  if (v24) {
    goto LABEL_21;
  }
  int64_t v15 = v23 + 2;
  if (v23 + 2 >= v20) {
    return swift_release();
  }
  unint64_t v24 = *(void *)(v16 + 8 * v15);
  if (v24)
  {
LABEL_21:
    unint64_t v19 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v15 << 6);
    goto LABEL_22;
  }
  int64_t v25 = v23 + 3;
  if (v25 < v20)
  {
    unint64_t v24 = *(void *)(v16 + 8 * v25);
    if (!v24)
    {
      while (1)
      {
        int64_t v15 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          goto LABEL_33;
        }
        if (v15 >= v20) {
          return swift_release();
        }
        unint64_t v24 = *(void *)(v16 + 8 * v15);
        ++v25;
        if (v24) {
          goto LABEL_21;
        }
      }
    }
    int64_t v15 = v25;
    goto LABEL_21;
  }
  return swift_release();
}

void sub_1001655A8(void *a1, uint64_t a2)
{
  v404 = a1;
  uint64_t v3 = type metadata accessor for ComponentType();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v365 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000992E8((uint64_t *)&unk_1002AA0F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v365 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TrajectoryCommand.Progress();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v394 = ((char *)v365 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = __chkstk_darwin(v13);
  v389 = (char *)v365 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  v390 = (char *)v365 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v19 = __chkstk_darwin(v18);
  v393 = (char *)v365 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v388 = (char *)v365 - v22;
  __chkstk_darwin(v21);
  uint64_t v24 = __chkstk_darwin((char *)v365 - v23);
  uint64_t v25 = __chkstk_darwin(v24);
  uint64_t v26 = __chkstk_darwin(v25);
  v400 = (char *)v365 - v31;
  if (a2)
  {
    uint64_t v411 = *(void *)(a2 + 16);
    if (v411)
    {
      v398 = v28;
      uint64_t v370 = v30;
      uint64_t v408 = v403 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger;
      uint64_t v402 = OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager;
      uint64_t v410 = a2 + 32;
      v406 = (void (**)(char *, uint64_t))(v29 + 8);
      v407 = (id *)(v29 + 16);
      v384 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      v385 = v27;
      v380 = (void (**)(NSObject *, uint64_t, uint64_t))(v11 + 32);
      uint64_t v381 = v26;
      v377 = (char *)&v415 + 8;
      v378 = (void (**)(NSObject *, uint64_t))(v11 + 8);
      v375 = (char *)&v417 + 8;
      unsigned int v373 = enum case for ComponentType.Battery(_:);
      v371 = (void (**)(uint64_t, uint64_t))(v4 + 8);
      v372 = (void (**)(char *, void, uint64_t))(v4 + 104);
      v369 = (char *)&v415 + 4;
      uint64_t v382 = a2;
      swift_bridgeObjectRetain();
      uint64_t v387 = 0;
      v409 = (char *)&type metadata for Any + 8;
      *(void *)&long long v32 = 136315138;
      long long v399 = v32;
      *(void *)&long long v32 = 138412290;
      long long v383 = v32;
      *(void *)&long long v32 = 136316162;
      long long v368 = v32;
      unint64_t v376 = (unint64_t)"com.apple.dockaccessoryd.server";
      unint64_t v379 = 0x8000000100238D20;
      uint64_t v396 = v3;
      v374 = v6;
      v386 = v9;
      uint64_t v33 = &selRef_authSession_authComplete_;
      uint64_t v392 = v10;
      uint64_t v34 = 0;
      uint64_t v412 = v13;
      while (1)
      {
        sub_100099C1C(v410 + 32 * v34, (uint64_t)v421);
        sub_100099C1C((uint64_t)v421, (uint64_t)&v417);
        uint64_t v35 = sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
        char v36 = swift_dynamicCast();
        unint64_t v414 = v35;
        if ((v36 & 1) == 0) {
          goto LABEL_69;
        }
        id v37 = (void *)v415;
        id v38 = [(id)v415 v33[41]];
        if (!v38)
        {
          __break(1u);
LABEL_288:
          __break(1u);
LABEL_289:
          __break(1u);
LABEL_290:
          __break(1u);
LABEL_291:
          __break(1u);
LABEL_292:
          __break(1u);
LABEL_293:
          __break(1u);
        }
        id v39 = v38;
        uint64_t v40 = (void (*)(char *, uint64_t))sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
        id v41 = [v39 UUID];

        if (qword_1002A7BA8 != -1) {
          swift_once();
        }
        char v42 = static NSObject.== infix(_:_:)();

        if ((v42 & 1) == 0)
        {

          goto LABEL_69;
        }
        if ([v37 value])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v415 = 0u;
          long long v416 = 0u;
        }
        uint64_t v43 = v400;
        sub_1000EA2DC((uint64_t)&v415, (uint64_t)&v417, &qword_1002AA5F0);
        if (!*((void *)&v418 + 1))
        {

          sub_1000A61E4((uint64_t)&v417, &qword_1002AA5F0);
LABEL_284:
          sub_100099BCC((uint64_t)v421);
          goto LABEL_285;
        }
        if ((swift_dynamicCast() & 1) == 0)
        {

          goto LABEL_284;
        }
        uint64_t v413 = v34;
        uint64_t v401 = __dst;
        uint64_t v44 = (char *)(__dst & 1);
        uint64_t v45 = (void (*)(char *, uint64_t, uint64_t))*v407;
        ((void (*)(char *, uint64_t, uint64_t))*v407)(v43, v408, v13);
        id v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.default.getter();
        BOOL v48 = os_log_type_enabled(v46, v47);
        id v405 = v37;
        v397 = v40;
        v395 = v44;
        if (v48)
        {
          uint64_t v49 = swift_slowAlloc();
          *(void *)&long long v417 = swift_slowAlloc();
          *(_DWORD *)uint64_t v49 = v399;
          if (v44) {
            uint64_t v50 = 0x64656C62616E45;
          }
          else {
            uint64_t v50 = 0x64656C6261736944;
          }
          if (v44) {
            unint64_t v51 = 0xE700000000000000;
          }
          else {
            unint64_t v51 = 0xE800000000000000;
          }
          *(void *)(v49 + 4) = sub_1000993AC(v50, v51, (uint64_t *)&v417);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "Tracking is %s!", (uint8_t *)v49, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        uint64_t v52 = *v406;
        (*v406)(v43, v13);
        uint64_t v53 = v398;
        v45(v398, v408, v13);
        uint64_t v54 = Logger.logObject.getter();
        os_log_type_t v55 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v56 = swift_slowAlloc();
          *(void *)&long long v417 = swift_slowAlloc();
          *(_DWORD *)uint64_t v56 = v399;
          char v57 = v401;
          if (((unint64_t)v401 >> 1)) {
            uint64_t v58 = 1701736260;
          }
          else {
            uint64_t v58 = 0x656E6F44746F4ELL;
          }
          if (((unint64_t)v401 >> 1)) {
            unint64_t v59 = 0xE400000000000000;
          }
          else {
            unint64_t v59 = 0xE700000000000000;
          }
          *(void *)(v56 + 4) = sub_1000993AC(v58, v59, (uint64_t *)&v417);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Startup done is %s!", (uint8_t *)v56, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v52(v53, v13);
          id v60 = v405;
        }
        else
        {

          v52(v53, v13);
          id v60 = v405;
          char v57 = v401;
        }
        uint64_t v61 = v404;
        uint64_t v34 = v413;
        if ((v57 & 2) != 0)
        {
          if (qword_1002A7C00 != -1) {
            swift_once();
          }
          id v62 = *(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
          sub_1000E6CAC();

          uint64_t v61 = v404;
        }
        uint64_t v63 = *(void **)(v403 + v402);
        if (!v63)
        {
          uint64_t v419 = 0;
          long long v417 = 0u;
          long long v418 = 0u;
          uint64_t v33 = &selRef_authSession_authComplete_;
LABEL_63:

          sub_1000A61E4((uint64_t)&v417, (uint64_t *)&unk_1002AAA30);
          goto LABEL_69;
        }
        if (!v61) {
          goto LABEL_292;
        }
        char v64 = v63;
        id v65 = [v61 identifier];
        if (!v65) {
          goto LABEL_293;
        }
        unint64_t v66 = v65;
        uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v69 = v68;

        uint64_t v70 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        id v71 = *(id *)&v64[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
        OS_dispatch_semaphore.wait()();

        uint64_t v72 = &v64[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
        swift_beginAccess();
        uint64_t v73 = *(void *)v72;
        uint64_t v74 = *(void *)(v73 + 16);
        if (!v74) {
          goto LABEL_53;
        }
        uint64_t v391 = v70;
        uint64_t v401 = (uint64_t)v64;
        uint64_t v75 = v73 + 32;
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_1000A5D40(v75, (uint64_t)&v415);
          uint64_t v76 = *(void **)(*sub_1000A5DA4(&v415, *((uint64_t *)&v416 + 1)) + 32);
          if (!v76) {
            goto LABEL_42;
          }
          id v77 = v76;
          id v78 = [v77 identifier];
          if (v78) {
            break;
          }
LABEL_41:

LABEL_42:
          sub_100099BCC((uint64_t)&v415);
          v75 += 40;
          if (!--v74)
          {
            swift_bridgeObjectRelease();
            id v60 = v405;
            char v64 = (char *)v401;
            uint64_t v70 = v391;
LABEL_53:
            id v85 = *(id *)&v64[v70];
            OS_dispatch_semaphore.signal()();

            uint64_t v419 = 0;
            long long v417 = 0u;
            long long v418 = 0u;

            swift_bridgeObjectRelease();
            uint64_t v34 = v413;
            goto LABEL_56;
          }
        }
        uint64_t v79 = v78;
        uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v82 = v81;

        if (v80 != v67 || v82 != v69) {
          break;
        }
        swift_bridgeObjectRelease();
        uint64_t v13 = v412;
LABEL_55:
        swift_bridgeObjectRelease();
        id v86 = (id)v401;
        id v87 = *(id *)(v401 + v391);
        OS_dispatch_semaphore.signal()();

        sub_1000A5D40((uint64_t)&v415, (uint64_t)&v417);
        sub_100099BCC((uint64_t)&v415);

        swift_bridgeObjectRelease();
        uint64_t v34 = v413;
        id v60 = v405;
LABEL_56:
        uint64_t v33 = &selRef_authSession_authComplete_;
        if (!*((void *)&v418 + 1)) {
          goto LABEL_63;
        }
        sub_1000992E8(&qword_1002A82E0);
        type metadata accessor for DaemonAccessory();
        if (swift_dynamicCast())
        {
          uint64_t v88 = v415;
          if (qword_1002A7C00 != -1) {
            swift_once();
          }
          uint64_t v89 = qword_1002B1628;
          uint64_t v90 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
          uint64_t v91 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
          swift_retain();
          os_unfair_lock_lock(v91 + 4);
          swift_release();
          uint64_t v92 = *(void **)(v89 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
          char v93 = *(os_unfair_lock_s **)(v89 + v90);
          id v94 = v92;
          swift_retain();
          os_unfair_lock_unlock(v93 + 4);
          swift_release();
          if (v92)
          {
            uint64_t v95 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
            id v96 = *(id *)(v88 + 24);
            char v97 = static NSObject.== infix(_:_:)();

            if (v97)
            {
              char v98 = (char)v395;
              *(unsigned char *)(v88 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingEnabled) = (_BYTE)v395;
              sub_10018AB98(v98);
              swift_release();

              goto LABEL_68;
            }
            swift_release();
          }
          else
          {
            swift_release();
          }

LABEL_68:
          uint64_t v33 = &selRef_authSession_authComplete_;
        }
        else
        {
        }
LABEL_69:
        sub_100099C1C((uint64_t)v421, (uint64_t)&v417);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_98;
        }
        unint64_t v99 = (void *)v415;
        id v100 = [(id)v415 v33[41]];
        if (!v100) {
          goto LABEL_288;
        }
        id v101 = v100;
        sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
        id v102 = [v101 UUID];

        if (qword_1002A7BC8 != -1) {
          swift_once();
        }
        char v103 = static NSObject.== infix(_:_:)();

        if ((v103 & 1) == 0) {
          goto LABEL_97;
        }
        if ([v99 value])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v415 = 0u;
          long long v416 = 0u;
        }
        sub_1000EA2DC((uint64_t)&v415, (uint64_t)&v417, &qword_1002AA5F0);
        if (!*((void *)&v418 + 1))
        {

          sub_1000A61E4((uint64_t)&v417, &qword_1002AA5F0);
          goto LABEL_98;
        }
        if ((swift_dynamicCast() & 1) == 0)
        {
LABEL_97:

          goto LABEL_98;
        }
        unint64_t v105 = *((void *)&__dst + 1);
        uint64_t v104 = __dst;
        Class v106 = self;
        uint64_t v401 = v104;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        *(void *)&long long v417 = 0;
        id v108 = (char *)[v106 parsedFromData:isa error:&v417];

        uint64_t v109 = v108;
        id v110 = (void *)v417;
        if (!v109)
        {
          v397 = (void (*)(char *, uint64_t))v105;
          id v170 = (id)v417;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          goto LABEL_128;
        }
        id v111 = *(void **)(v403 + v402);
        if (!v111)
        {
          uint64_t v419 = 0;
          long long v417 = 0u;
          long long v418 = 0u;
          id v183 = v110;
LABEL_150:

          sub_1000A6240(v401, v105);
          sub_1000A61E4((uint64_t)&v417, (uint64_t *)&unk_1002AAA30);
          goto LABEL_98;
        }
        v395 = v109;
        unint64_t v112 = v404;
        if (!v404) {
          goto LABEL_295;
        }
        v397 = (void (*)(char *, uint64_t))v105;
        uint64_t v413 = v34;
        uint64_t v113 = v111;
        id v114 = v110;
        id v115 = [v112 identifier];
        if (!v115) {
          goto LABEL_296;
        }
        uint64_t v116 = v115;
        uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v405 = v118;

        uint64_t v119 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        id v120 = *(id *)(v113 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
        OS_dispatch_semaphore.wait()();

        NSString v121 = (char *)(v113 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
        swift_beginAccess();
        uint64_t v122 = *(void **)v121;
        uint64_t v123 = *(void *)(*(void *)v121 + 16);
        if (!v123) {
          goto LABEL_140;
        }
        id v366 = v122;
        v367 = v119;
        uint64_t v391 = v113;
        uint64_t v124 = (uint64_t)v122 + 32;
        swift_bridgeObjectRetain();
        while (2)
        {
          sub_1000A5D40(v124, (uint64_t)&v415);
          uint64_t v125 = *(void **)(*sub_1000A5DA4(&v415, *((uint64_t *)&v416 + 1)) + 32);
          if (!v125) {
            goto LABEL_87;
          }
          id v126 = v125;
          id v127 = [v126 identifier];
          if (!v127) {
            goto LABEL_86;
          }
          uint64_t v128 = v127;
          uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v131 = v130;

          if (v129 != v117 || v131 != v405)
          {
            char v133 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v13 = v412;
            if (v133) {
              goto LABEL_144;
            }
LABEL_86:

            uint64_t v33 = &selRef_authSession_authComplete_;
LABEL_87:
            sub_100099BCC((uint64_t)&v415);
            v124 += 40;
            if (!--v123)
            {
              swift_bridgeObjectRelease();
              uint64_t v113 = v391;
              uint64_t v119 = v367;
LABEL_140:
              id v185 = *(id *)&v119[v113];
              OS_dispatch_semaphore.signal()();

              uint64_t v419 = 0;
              long long v417 = 0u;
              long long v418 = 0u;

              swift_bridgeObjectRelease();
              goto LABEL_145;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease();
        uint64_t v13 = v412;
LABEL_144:
        swift_bridgeObjectRelease();
        uint64_t v187 = (void *)v391;
        id v188 = *(id *)&v367[v391];
        OS_dispatch_semaphore.signal()();

        sub_1000A5D40((uint64_t)&v415, (uint64_t)&v417);
        sub_100099BCC((uint64_t)&v415);

        swift_bridgeObjectRelease();
        uint64_t v33 = &selRef_authSession_authComplete_;
LABEL_145:
        unint64_t v105 = (unint64_t)v397;
        uint64_t v109 = v395;
        uint64_t v34 = v413;
        if (!*((void *)&v418 + 1)) {
          goto LABEL_150;
        }
        sub_1000992E8(&qword_1002A82E0);
        type metadata accessor for DaemonAccessory();
        if (swift_dynamicCast())
        {
          uint64_t v189 = v415;
          uint64_t v190 = *(void *)(v403 + v402);
          if (v190)
          {
            id v191 = *(id *)(v190 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
            id v192 = v109;
            uint64_t v193 = v387;
            sub_10014AC3C(v189, v192);
            if (v193)
            {

              swift_release();
LABEL_128:
              ((void (*)(char *, uint64_t, uint64_t))*v407)(v390, v408, v13);
              swift_errorRetain();
              swift_errorRetain();
              id v171 = Logger.logObject.getter();
              os_log_type_t v172 = static os_log_type_t.error.getter();
              BOOL v173 = os_log_type_enabled(v171, v172);
              uint64_t v387 = 0;
              if (v173)
              {
                uint64_t v174 = swift_slowAlloc();
                uint64_t v175 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v174 = v383;
                swift_errorRetain();
                uint64_t v176 = _swift_stdlib_bridgeErrorToNSError();
                *(void *)(v174 + 4) = v176;
                *uint64_t v175 = v176;
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v171, v172, "error parsing firmware update readiness %@", (uint8_t *)v174, 0xCu);
                sub_1000992E8(&qword_1002A7C40);
                swift_arrayDestroy();
                uint64_t v33 = &selRef_authSession_authComplete_;
                swift_slowDealloc();
                swift_slowDealloc();

                sub_1000A6240(v401, (unint64_t)v397);
                swift_errorRelease();
              }
              else
              {

                sub_1000A6240(v401, (unint64_t)v397);
                swift_errorRelease();
                swift_errorRelease();
                swift_errorRelease();
              }
              (*v406)(v390, v13);
            }
            else
            {
              uint64_t v387 = 0;

              sub_1000A6240(v401, (unint64_t)v397);
              swift_release();
            }
          }
          else
          {

            sub_1000A6240(v401, (unint64_t)v397);
            swift_release();
          }
        }
        else
        {

          sub_1000A6240(v401, v105);
        }
LABEL_98:
        sub_100099C1C((uint64_t)v421, (uint64_t)&v417);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_161;
        }
        uint64_t v134 = (void *)v415;
        id v135 = [(id)v415 v33[41]];
        if (!v135) {
          goto LABEL_289;
        }
        uint64_t v136 = v135;
        sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
        id v137 = [v136 UUID];

        if (qword_1002A7BD0 != -1) {
          swift_once();
        }
        char v138 = static NSObject.== infix(_:_:)();

        if ((v138 & 1) == 0)
        {
LABEL_105:

          goto LABEL_161;
        }
        if ([v134 value])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v415 = 0u;
          long long v416 = 0u;
        }
        sub_1000EA2DC((uint64_t)&v415, (uint64_t)&v417, &qword_1002AA5F0);
        if (!*((void *)&v418 + 1))
        {

          NSString v169 = &qword_1002AA5F0;
          goto LABEL_160;
        }
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_105;
        }
        unint64_t v140 = *((void *)&__dst + 1);
        uint64_t v139 = __dst;
        uint64_t v141 = self;
        uint64_t v401 = v139;
        Class v142 = Data._bridgeToObjectiveC()().super.isa;
        *(void *)&long long v417 = 0;
        os_log_type_t v143 = (char *)[v141 parsedFromData:v142 error:&v417];

        v144 = v143;
        uint64_t v145 = (void *)v417;
        if (!v144)
        {
          v397 = (void (*)(char *, uint64_t))v140;
          id v177 = (id)v417;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          goto LABEL_131;
        }
        os_log_type_t v146 = *(void **)(v403 + v402);
        if (!v146)
        {
          uint64_t v419 = 0;
          long long v417 = 0u;
          long long v418 = 0u;
          id v184 = v145;
LABEL_159:

          sub_1000A6240(v401, v140);
          NSString v169 = (uint64_t *)&unk_1002AAA30;
LABEL_160:
          sub_1000A61E4((uint64_t)&v417, v169);
          goto LABEL_161;
        }
        v395 = v144;
        uint64_t v147 = v404;
        if (!v404) {
          goto LABEL_297;
        }
        v397 = (void (*)(char *, uint64_t))v140;
        uint64_t v413 = v34;
        uint64_t v148 = v146;
        id v149 = v145;
        id v150 = [v147 identifier];
        if (!v150) {
          goto LABEL_298;
        }
        uint64_t v151 = v150;
        uint64_t v152 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v405 = v153;

        uint64_t v154 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        id v155 = *(id *)(v148 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
        OS_dispatch_semaphore.wait()();

        uint64_t v156 = (char *)(v148 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
        swift_beginAccess();
        id v157 = *(void **)v156;
        uint64_t v158 = *(void *)(*(void *)v156 + 16);
        if (!v158) {
          goto LABEL_142;
        }
        id v366 = v157;
        v367 = v154;
        uint64_t v391 = v148;
        uint64_t v159 = (uint64_t)v157 + 32;
        swift_bridgeObjectRetain();
        while (2)
        {
          sub_1000A5D40(v159, (uint64_t)&v415);
          uint64_t v160 = *(void **)(*sub_1000A5DA4(&v415, *((uint64_t *)&v416 + 1)) + 32);
          if (!v160) {
            goto LABEL_116;
          }
          id v161 = v160;
          id v162 = [v161 identifier];
          if (!v162) {
            goto LABEL_115;
          }
          uint64_t v163 = v162;
          uint64_t v164 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v166 = v165;

          if (v164 != v152 || v166 != v405)
          {
            char v168 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v13 = v412;
            if (v168) {
              goto LABEL_153;
            }
LABEL_115:

            uint64_t v33 = &selRef_authSession_authComplete_;
LABEL_116:
            sub_100099BCC((uint64_t)&v415);
            v159 += 40;
            if (!--v158)
            {
              swift_bridgeObjectRelease();
              uint64_t v148 = v391;
              uint64_t v154 = v367;
LABEL_142:
              id v186 = *(id *)&v154[v148];
              OS_dispatch_semaphore.signal()();

              uint64_t v419 = 0;
              long long v417 = 0u;
              long long v418 = 0u;

              swift_bridgeObjectRelease();
              goto LABEL_154;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease();
        uint64_t v13 = v412;
LABEL_153:
        swift_bridgeObjectRelease();
        uint64_t v194 = (void *)v391;
        id v195 = *(id *)&v367[v391];
        OS_dispatch_semaphore.signal()();

        sub_1000A5D40((uint64_t)&v415, (uint64_t)&v417);
        sub_100099BCC((uint64_t)&v415);

        swift_bridgeObjectRelease();
        uint64_t v33 = &selRef_authSession_authComplete_;
LABEL_154:
        unint64_t v140 = (unint64_t)v397;
        v144 = v395;
        uint64_t v34 = v413;
        if (!*((void *)&v418 + 1)) {
          goto LABEL_159;
        }
        sub_1000992E8(&qword_1002A82E0);
        type metadata accessor for DaemonAccessory();
        if (swift_dynamicCast())
        {
          uint64_t v196 = v415;
          uint64_t v197 = *(void *)(v403 + v402);
          if (v197)
          {
            id v198 = *(id *)(v197 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
            v199 = v144;
            uint64_t v200 = v387;
            sub_10014B134(v196, v199);
            if (v200)
            {

              swift_release();
LABEL_131:
              uint64_t v387 = 0;
              ((void (*)(char *, uint64_t, uint64_t))*v407)(v389, v408, v13);
              swift_errorRetain();
              swift_errorRetain();
              id v178 = Logger.logObject.getter();
              os_log_type_t v179 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v178, v179))
              {
                uint64_t v180 = swift_slowAlloc();
                uint64_t v181 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v180 = v383;
                swift_errorRetain();
                uint64_t v182 = _swift_stdlib_bridgeErrorToNSError();
                *(void *)(v180 + 4) = v182;
                *uint64_t v181 = v182;
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v178, v179, "error parsing firmware update update status %@", (uint8_t *)v180, 0xCu);
                sub_1000992E8(&qword_1002A7C40);
                swift_arrayDestroy();
                uint64_t v33 = &selRef_authSession_authComplete_;
                swift_slowDealloc();
                swift_slowDealloc();

                sub_1000A6240(v401, (unint64_t)v397);
                swift_errorRelease();
              }
              else
              {

                sub_1000A6240(v401, (unint64_t)v397);
                swift_errorRelease();
                swift_errorRelease();
                swift_errorRelease();
              }
              (*v406)(v389, v13);
            }
            else
            {
              uint64_t v387 = 0;

              sub_1000A6240(v401, (unint64_t)v397);
              swift_release();
            }
          }
          else
          {

            sub_1000A6240(v401, (unint64_t)v397);
            swift_release();
          }
        }
        else
        {

          sub_1000A6240(v401, v140);
        }
LABEL_161:
        sub_100099C1C((uint64_t)v421, (uint64_t)&v417);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_210;
        }
        v201 = (void *)v415;
        id v202 = [(id)v415 v33[41]];
        if (!v202) {
          goto LABEL_290;
        }
        v203 = v202;
        sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
        id v204 = [v203 UUID];

        if (qword_1002A7BB0 != -1) {
          swift_once();
        }
        char v205 = static NSObject.== infix(_:_:)();

        if ((v205 & 1) == 0) {
          goto LABEL_168;
        }
        if ([v201 value])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v415 = 0u;
          long long v416 = 0u;
        }
        sub_1000EA2DC((uint64_t)&v415, (uint64_t)&v417, &qword_1002AA5F0);
        if (!*((void *)&v418 + 1))
        {

          sub_1000A61E4((uint64_t)&v417, &qword_1002AA5F0);
          goto LABEL_210;
        }
        if ((swift_dynamicCast() & 1) == 0)
        {
LABEL_168:

          goto LABEL_210;
        }
        uint64_t v413 = v34;
        unint64_t v206 = *((void *)&__dst + 1);
        id v207 = (id)__dst;
        uint64_t v208 = v13;
        unint64_t v209 = v385;
        uint64_t v401 = (uint64_t)*v407;
        ((void (*)(char *, uint64_t, uint64_t))v401)(v385, v408, v208);
        v210 = Logger.logObject.getter();
        os_log_type_t v211 = static os_log_type_t.debug.getter();
        BOOL v212 = os_log_type_enabled(v210, v211);
        id v405 = v207;
        if (v212)
        {
          uint64_t v213 = swift_slowAlloc();
          *(void *)&long long v417 = swift_slowAlloc();
          *(_DWORD *)uint64_t v213 = v399;
          *(void *)(v213 + 4) = sub_1000993AC(0xD00000000000004BLL, v379, (uint64_t *)&v417);
          _os_log_impl((void *)&_mh_execute_header, v210, v211, "%s Decoding trajectory status from ADK", (uint8_t *)v213, 0xCu);
          swift_arrayDestroy();
          id v207 = v405;
          swift_slowDealloc();
          swift_slowDealloc();
        }

        id v214 = *v406;
        (*v406)(v209, v208);
        uint64_t v13 = v208;
        sub_1000A618C((uint64_t)v207, v206);
        uint64_t v215 = (uint64_t)v386;
        TrajectoryCommand.Progress.init(data:)();
        uint64_t v216 = v392;
        if ((*v384)(v215, 1, v392) == 1)
        {

          sub_1000A6240((uint64_t)v207, v206);
          sub_1000A61E4(v215, (uint64_t *)&unk_1002AA0F0);
          uint64_t v34 = v413;
          uint64_t v33 = &selRef_authSession_authComplete_;
          goto LABEL_210;
        }
        (*v380)(v394, v215, v216);
        uint64_t v217 = v381;
        ((void (*)(uint64_t, uint64_t, uint64_t))v401)(v381, v408, v208);
        v218 = Logger.logObject.getter();
        os_log_type_t v219 = static os_log_type_t.debug.getter();
        BOOL v220 = os_log_type_enabled(v218, v219);
        v397 = (void (*)(char *, uint64_t))v206;
        if (v220)
        {
          v221 = v214;
          uint64_t v222 = swift_slowAlloc();
          *(void *)&long long v417 = swift_slowAlloc();
          *(_DWORD *)uint64_t v222 = v399;
          *(void *)(v222 + 4) = sub_1000993AC(0xD00000000000004BLL, v376 | 0x8000000000000000, (uint64_t *)&v417);
          _os_log_impl((void *)&_mh_execute_header, v218, v219, "%s Received trajectory status from ADK", (uint8_t *)v222, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v221((char *)v217, v208);
        }
        else
        {

          v214((char *)v217, v208);
        }
        uint64_t v13 = v208;
        v223 = *(void **)(v403 + v402);
        v224 = v404;
        uint64_t v225 = v392;
        uint64_t v34 = v413;
        uint64_t v33 = &selRef_authSession_authComplete_;
        if (!v223)
        {
          uint64_t v419 = 0;
          long long v417 = 0u;
          long long v418 = 0u;
LABEL_207:

          sub_1000A6240((uint64_t)v405, (unint64_t)v397);
          sub_1000A61E4((uint64_t)&v417, (uint64_t *)&unk_1002AAA30);
          goto LABEL_209;
        }
        if (!v404) {
          goto LABEL_299;
        }
        v226 = v223;
        id v227 = [v224 identifier];
        if (!v227) {
          goto LABEL_300;
        }
        v228 = v227;
        uint64_t v229 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v231 = v230;

        uint64_t v401 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        id v232 = *(id *)&v226[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
        OS_dispatch_semaphore.wait()();

        v233 = &v226[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
        swift_beginAccess();
        uint64_t v234 = *(void *)v233;
        uint64_t v235 = *(void *)(*(void *)v233 + 16);
        if (!v235) {
          goto LABEL_199;
        }
        v395 = v226;
        uint64_t v236 = v234 + 32;
        uint64_t v391 = v234;
        swift_bridgeObjectRetain();
        while (2)
        {
          sub_1000A5D40(v236, (uint64_t)&v415);
          v237 = *(void **)(*sub_1000A5DA4(&v415, *((uint64_t *)&v416 + 1)) + 32);
          if (!v237) {
            goto LABEL_187;
          }
          id v238 = v237;
          id v239 = [v238 identifier];
          if (!v239) {
            goto LABEL_186;
          }
          v240 = v239;
          uint64_t v241 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v243 = v242;

          if (v241 != v229 || v243 != v231)
          {
            char v245 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v13 = v412;
            if (v245) {
              goto LABEL_203;
            }
LABEL_186:

LABEL_187:
            sub_100099BCC((uint64_t)&v415);
            v236 += 40;
            if (!--v235)
            {
              swift_bridgeObjectRelease();
              v226 = v395;
LABEL_199:
              id v246 = *(id *)&v226[v401];
              OS_dispatch_semaphore.signal()();

              uint64_t v419 = 0;
              long long v417 = 0u;
              long long v418 = 0u;

              swift_bridgeObjectRelease();
              uint64_t v225 = v392;
              uint64_t v34 = v413;
              goto LABEL_204;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease();
        uint64_t v13 = v412;
LABEL_203:
        swift_bridgeObjectRelease();
        id v247 = v395;
        id v248 = *(id *)&v395[v401];
        OS_dispatch_semaphore.signal()();

        sub_1000A5D40((uint64_t)&v415, (uint64_t)&v417);
        sub_100099BCC((uint64_t)&v415);

        swift_bridgeObjectRelease();
        uint64_t v225 = v392;
        uint64_t v34 = v413;
LABEL_204:
        uint64_t v33 = &selRef_authSession_authComplete_;
        if (!*((void *)&v418 + 1)) {
          goto LABEL_207;
        }
        sub_1000992E8(&qword_1002A82E0);
        type metadata accessor for DaemonAccessory();
        uint64_t v249 = swift_dynamicCast();
        if (v249)
        {
          v250 = v415;
          v251 = *(os_unfair_lock_s **)(v415 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
          uint64_t v252 = __chkstk_darwin(v249);
          v365[-2] = v394;
          v365[-1] = v250;
          __chkstk_darwin(v252);
          v365[-2] = (os_log_t)sub_100169ABC;
          v365[-1] = v253;
          swift_retain();
          os_unfair_lock_lock(v251 + 4);
          uint64_t v254 = v387;
          sub_100134E64(v255);
          uint64_t v387 = v254;
          uint64_t v33 = &selRef_authSession_authComplete_;
          os_unfair_lock_unlock(v251 + 4);
          swift_release();

          swift_release();
          sub_1000A6240((uint64_t)v405, (unint64_t)v397);
          uint64_t v34 = v413;
          uint64_t v225 = v392;
        }
        else
        {

          sub_1000A6240((uint64_t)v405, (unint64_t)v397);
        }
LABEL_209:
        (*v378)(v394, v225);
LABEL_210:
        sub_100099C1C((uint64_t)v421, (uint64_t)&v417);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_235;
        }
        v256 = (void *)v415;
        if ([(id)v415 value])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          long long v415 = 0u;
          long long v416 = 0u;
        }
        sub_1000EA2DC((uint64_t)&v415, (uint64_t)&v417, &qword_1002AA5F0);
        if (!*((void *)&v418 + 1))
        {

          sub_1000A61E4((uint64_t)&v417, &qword_1002AA5F0);
          goto LABEL_235;
        }
        if ((swift_dynamicCast() & 1) == 0)
        {

          goto LABEL_235;
        }
        id v405 = (id)__dst;
        uint64_t v413 = v34;
        unint64_t v414 = *((void *)&__dst + 1);
        id v257 = [v256 v33[41]];
        if (!v257) {
          goto LABEL_291;
        }
        v258 = v257;
        id v259 = [v257 UUID];

        id v260 = [v259 data];
        uint64_t v261 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v263 = v262;

        sub_1001A6570(12, v261, v263, (uint64_t *)&v415);
        long long v264 = v415;
        uint64_t v265 = sub_1000992E8((uint64_t *)&unk_1002AAA80);
        *((void *)&v418 + 1) = v265;
        uint64_t v419 = sub_1000EAA74((unint64_t *)&qword_1002A8FE0, (uint64_t *)&unk_1002AAA80);
        *(void *)&long long v417 = &off_100274B20;
        v266 = sub_1000A5DA4(&v417, v265);
        uint64_t v267 = *v266;
        size_t v268 = *(void *)(*v266 + 16);
        if (v268)
        {
          if (v268 <= 0xE)
          {
            *(void *)((char *)&__dst + 6) = 0;
            *(void *)&long long __dst = 0;
            BYTE14(__dst) = v268;
            memcpy(&__dst, (const void *)(v267 + 32), v268);
            uint64_t v272 = __dst;
            unint64_t v273 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
          }
          else
          {
            uint64_t v269 = v13;
            type metadata accessor for __DataStorage();
            swift_allocObject();
            uint64_t v270 = __DataStorage.init(bytes:length:)();
            uint64_t v271 = v270;
            if (v268 >= 0x7FFFFFFF)
            {
              type metadata accessor for Data.RangeReference();
              uint64_t v272 = swift_allocObject();
              *(void *)(v272 + 16) = 0;
              *(void *)(v272 + 24) = v268;
              unint64_t v273 = v271 | 0x8000000000000000;
            }
            else
            {
              uint64_t v272 = v268 << 32;
              unint64_t v273 = v270 | 0x4000000000000000;
            }
            uint64_t v13 = v269;
          }
        }
        else
        {
          uint64_t v272 = 0;
          unint64_t v273 = 0xC000000000000000;
        }
        sub_100099BCC((uint64_t)&v417);
        char v274 = sub_1001B0F38(v264, *((unint64_t *)&v264 + 1), v272, v273);
        sub_1000A6240(v272, v273);
        sub_1000A6240(v264, *((unint64_t *)&v264 + 1));

        uint64_t v34 = v413;
        uint64_t v33 = &selRef_authSession_authComplete_;
        if ((v274 & 1) == 0)
        {
LABEL_234:

          sub_1000A6240((uint64_t)v405, v414);
          goto LABEL_235;
        }
        id v275 = [v256 cbCharacteristic];
        if (!v275)
        {
          __break(1u);
LABEL_295:
          __break(1u);
LABEL_296:
          __break(1u);
LABEL_297:
          __break(1u);
LABEL_298:
          __break(1u);
LABEL_299:
          __break(1u);
LABEL_300:
          __break(1u);
LABEL_301:
          __break(1u);
LABEL_302:
          __break(1u);
LABEL_303:
          __break(1u);
LABEL_304:
          __break(1u);
          return;
        }
        v276 = v275;
        id v277 = [v275 UUID];

        int v278 = sub_10013A984();
        if (qword_1002A7BE0 != -1) {
          swift_once();
        }
        if (v278 != sub_10013A984()) {
          goto LABEL_234;
        }
        v279 = v388;
        v395 = (char *)*v407;
        ((void (*)(char *, uint64_t, uint64_t))v395)(v388, v408, v13);
        uint64_t v280 = (uint64_t)v405;
        unint64_t v281 = v414;
        sub_1000A618C((uint64_t)v405, v414);
        sub_1000A618C(v280, v281);
        v282 = Logger.logObject.getter();
        os_log_type_t v283 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v282, v283))
        {
          v284 = (uint8_t *)swift_slowAlloc();
          uint64_t v401 = swift_slowAlloc();
          *(void *)&long long v417 = v401;
          *(_DWORD *)v284 = v399;
          v397 = (void (*)(char *, uint64_t))(v284 + 4);
          uint64_t v285 = sub_100139704(v280, v281);
          *(void *)&long long v415 = sub_1000993AC(v285, v286, (uint64_t *)&v417);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          unint64_t v287 = v414;
          swift_bridgeObjectRelease();
          sub_1000A6240(v280, v287);
          sub_1000A6240(v280, v287);
          _os_log_impl((void *)&_mh_execute_header, v282, v283, "Sensor Data: %s", v284, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v397 = *v406;
          v397(v388, v13);
        }
        else
        {
          sub_1000A6240(v280, v281);
          sub_1000A6240(v280, v281);

          v397 = *v406;
          v397(v279, v13);
        }
        ((void (*)(char *, uint64_t, uint64_t))v395)(v393, v408, v13);
        v288 = v256;
        v289 = Logger.logObject.getter();
        os_log_type_t v290 = static os_log_type_t.default.getter();
        BOOL v291 = os_log_type_enabled(v289, v290);
        uint64_t v401 = (uint64_t)v288;
        if (v291)
        {
          v292 = (uint8_t *)swift_slowAlloc();
          v293 = (void *)swift_slowAlloc();
          *(_DWORD *)v292 = v383;
          uint64_t v391 = (uint64_t)(v292 + 4);
          *(void *)&long long v417 = v288;
          v294 = v288;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v293 = v288;

          _os_log_impl((void *)&_mh_execute_header, v289, v290, "Characteristic: %@", v292, 0xCu);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          v289 = v288;
        }
        uint64_t v295 = v396;
        uint64_t v33 = &selRef_authSession_authComplete_;

        v397(v393, v13);
        v296 = *(void **)(v403 + v402);
        if (!v296)
        {
          uint64_t v419 = 0;
          long long v417 = 0u;
          long long v418 = 0u;
LABEL_271:

          sub_1000A6240((uint64_t)v405, v414);
          sub_1000A61E4((uint64_t)&v417, (uint64_t *)&unk_1002AAA30);
          uint64_t v34 = v413;
LABEL_235:
          sub_100099BCC((uint64_t)v421);
          goto LABEL_236;
        }
        v297 = v404;
        if (!v404) {
          goto LABEL_301;
        }
        v298 = v296;
        id v299 = [v297 identifier];
        if (!v299) {
          goto LABEL_302;
        }
        v300 = v299;
        uint64_t v301 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v303 = v302;

        uint64_t v391 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        id v304 = *(id *)&v298[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
        OS_dispatch_semaphore.wait()();

        v305 = &v298[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
        swift_beginAccess();
        uint64_t v306 = *(void *)v305;
        uint64_t v307 = *(void *)(v306 + 16);
        if (!v307)
        {
LABEL_259:
          id v318 = *(id *)&v298[v391];
          OS_dispatch_semaphore.signal()();

          uint64_t v419 = 0;
          long long v417 = 0u;
          long long v418 = 0u;

          swift_bridgeObjectRelease();
          goto LABEL_262;
        }
        v367 = v298;
        uint64_t v308 = v306 + 32;
        swift_bridgeObjectRetain();
        while (2)
        {
          sub_1000A5D40(v308, (uint64_t)&v415);
          v309 = *(void **)(*sub_1000A5DA4(&v415, *((uint64_t *)&v416 + 1)) + 32);
          if (!v309) {
            goto LABEL_248;
          }
          id v310 = v309;
          id v311 = [v310 identifier];
          if (!v311) {
            goto LABEL_247;
          }
          v312 = v311;
          uint64_t v313 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v315 = v314;

          if (v313 != v301 || v315 != v303)
          {
            char v317 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t v13 = v412;
            if (v317) {
              goto LABEL_261;
            }
LABEL_247:

            uint64_t v295 = v396;
LABEL_248:
            sub_100099BCC((uint64_t)&v415);
            v308 += 40;
            if (!--v307)
            {
              swift_bridgeObjectRelease();
              v298 = v367;
              goto LABEL_259;
            }
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease();
        uint64_t v13 = v412;
LABEL_261:
        swift_bridgeObjectRelease();
        id v319 = v367;
        id v320 = *(id *)&v367[v391];
        OS_dispatch_semaphore.signal()();

        sub_1000A5D40((uint64_t)&v415, (uint64_t)&v417);
        sub_100099BCC((uint64_t)&v415);

        swift_bridgeObjectRelease();
        uint64_t v295 = v396;
LABEL_262:
        uint64_t v33 = &selRef_authSession_authComplete_;
        if (!*((void *)&v418 + 1)) {
          goto LABEL_271;
        }
        sub_1000992E8(&qword_1002A82E0);
        type metadata accessor for DaemonAccessory();
        if ((swift_dynamicCast() & 1) == 0)
        {

          sub_1000A6240((uint64_t)v405, v414);
          uint64_t v34 = v413;
          goto LABEL_235;
        }
        uint64_t v321 = v415;
        id v322 = [(id)v401 service];
        if (!v322) {
          goto LABEL_303;
        }
        v323 = v322;
        id v324 = [v322 type];

        if (!v324) {
          goto LABEL_304;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        NSString v325 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v326 = [self UUIDWithString:v325];

        uint64_t v327 = (uint64_t)v374;
        (*v372)(v374, v373, v295);
        v328 = (uint64_t *)(v321 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap);
        swift_beginAccess();
        uint64_t v329 = *v328;
        swift_bridgeObjectRetain();
        uint64_t v330 = sub_1001A652C(v327, v329);
        swift_bridgeObjectRelease();
        if (!v330)
        {
          (*v371)(v327, v295);
          goto LABEL_277;
        }
        uint64_t v391 = v321;
        v331 = (char *)v326;
        uint64_t v332 = v387;
        uint64_t v333 = v295;
        v334 = (void *)sub_1001626BC(v330);
        uint64_t v387 = v332;
        swift_bridgeObjectRelease();
        v367 = v331;

        (*v371)(v327, v333);
        if (!v334[2])
        {
          swift_bridgeObjectRelease();
LABEL_277:
          sub_100099BCC((uint64_t)v421);

          sub_1000A6240((uint64_t)v405, v414);
          swift_release();

LABEL_278:
          uint64_t v34 = v413;
          uint64_t v33 = &selRef_authSession_authComplete_;
          goto LABEL_236;
        }
        uint64_t v336 = v334[4];
        unint64_t v335 = v334[5];
        v337 = (void *)v334[6];
        swift_bridgeObjectRetain();
        id v338 = v337;
        swift_bridgeObjectRelease();
        id v339 = objc_allocWithZone((Class)type metadata accessor for AccessoryBatteryState());
        swift_bridgeObjectRetain();
        uint64_t v340 = (uint64_t)v405;
        unint64_t v341 = v414;
        sub_1000A618C((uint64_t)v405, v414);
        swift_bridgeObjectRetain();
        uint64_t v342 = AccessoryBatteryState.init(data:name:)();
        uint64_t v343 = v391;
        if (!v342)
        {
          sub_100099BCC((uint64_t)v421);

          sub_1000A6240(v340, v341);
          swift_release();

          swift_bridgeObjectRelease_n();
          goto LABEL_278;
        }
        v344 = (void *)v342;
        id v366 = v338;
        uint64_t v345 = v370;
        ((void (*)(uint64_t, uint64_t, uint64_t))v395)(v370, v408, v13);
        id v346 = v344;
        sub_1000A618C(v340, v341);
        id v347 = v346;
        sub_1000A618C(v340, v341);
        swift_bridgeObjectRetain();
        id v348 = v347;
        v349 = Logger.logObject.getter();
        os_log_type_t v350 = static os_log_type_t.default.getter();
        LODWORD(v395) = v350;
        if (os_log_type_enabled(v349, v350))
        {
          uint64_t v351 = v340;
          uint64_t v352 = swift_slowAlloc();
          v353 = swift_slowAlloc();
          v365[0] = v349;
          v365[1] = v353;
          *(void *)&long long v417 = v353;
          *(_DWORD *)uint64_t v352 = v368;
          swift_bridgeObjectRetain();
          *(void *)&long long v415 = sub_1000993AC(v336, v335, (uint64_t *)&v417);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v352 + 12) = 2080;
          uint64_t v354 = sub_100139704(v351, v341);
          *(void *)&long long v415 = sub_1000993AC(v354, v355, (uint64_t *)&v417);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000A6240(v351, v341);
          uint64_t v356 = v351;
          uint64_t v343 = v391;
          sub_1000A6240(v356, v341);
          *(_WORD *)(v352 + 22) = 2048;
          AccessoryBatteryState.batteryPercent.getter();
          *(void *)&long long v415 = v357;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v352 + 32) = 1024;
          char v358 = AccessoryBatteryState.lowBattery.getter();

          LODWORD(v415) = v358 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v352 + 38) = 2080;
          *(void *)&long long v415 = AccessoryBatteryState.chargeState.getter();
          uint64_t v359 = String.init<A>(describing:)();
          *(void *)&long long v415 = sub_1000993AC(v359, v360, (uint64_t *)&v417);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          os_log_t v361 = v365[0];
          _os_log_impl((void *)&_mh_execute_header, v365[0], (os_log_type_t)v395, "Got battery data for '%s': %s -> %f, %{BOOL}d, %s", (uint8_t *)v352, 0x30u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v362 = v370;
        }
        else
        {
          swift_bridgeObjectRelease_n();

          sub_1000A6240(v340, v341);
          sub_1000A6240(v340, v341);

          uint64_t v362 = v345;
        }
        uint64_t v363 = v412;
        ((void (*)(uint64_t))v397)(v362);
        uint64_t v34 = v413;
        uint64_t v33 = &selRef_authSession_authComplete_;
        id v364 = *(id *)(v343 + 24);
        sub_100164F04((uint64_t)v364, (uint64_t)v348);

        swift_bridgeObjectRelease();
        swift_release();

        sub_1000A6240((uint64_t)v405, v341);
        sub_100099BCC((uint64_t)v421);
        uint64_t v13 = v363;
LABEL_236:
        if (++v34 == v411)
        {
LABEL_285:
          swift_bridgeObjectRelease();
          return;
        }
      }
      char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v13 = v412;
      if (v84) {
        goto LABEL_55;
      }
      goto LABEL_41;
    }
  }
}

uint64_t sub_100168800(uint64_t a1, uint64_t a2)
{
  uint64_t v56 = a2;
  uint64_t v57 = a1;
  uint64_t v50 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(char **)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v49 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for DispatchQoS();
  uint64_t v4 = *(uint64_t **)(v48 - 8);
  __chkstk_darwin(v48);
  os_log_type_t v47 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7C00 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v6 = &unk_1002B1000;
    uint64_t v7 = qword_1002B1628;
    sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
    uint64_t v9 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
    swift_retain();
    os_unfair_lock_lock(v9 + 4);
    swift_release();
    uint64_t v10 = (uint64_t *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients);
    swift_beginAccess();
    uint64_t v11 = *v10;
    uint64_t v12 = *(os_unfair_lock_s **)(v7 + v8);
    uint64_t v13 = v11;
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_unlock(v12 + 4);
    swift_release();
    int64_t v14 = 0;
    uint64_t v15 = *(void *)(v13 + 64);
    uint64_t v58 = v13 + 64;
    uint64_t v16 = 1 << *(unsigned char *)(v13 + 32);
    uint64_t v17 = -1;
    if (v16 < 64) {
      uint64_t v17 = ~(-1 << v16);
    }
    unint64_t v18 = v17 & v15;
    int64_t v59 = (unint64_t)(v16 + 63) >> 6;
    uint64_t v45 = v61;
    uint64_t v44 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v43 = (void (**)(char *, uint64_t))(v4 + 1);
    uint64_t v4 = &qword_1002A9F28;
    uint64_t v19 = &selRef_listener_shouldAcceptNewConnection_;
    uint64_t v46 = v13;
    os_log_type_t v55 = (char *)&type metadata for Any + 8;
    if ((v17 & v15) != 0)
    {
      do
      {
        while (1)
        {
          unint64_t v20 = __clz(__rbit64(v18));
          v18 &= v18 - 1;
          unint64_t v21 = v20 | (v14 << 6);
LABEL_22:
          id v25 = *(id *)(*(void *)(v13 + 56) + 8 * v21);
          uint64_t v2 = (char *)[v25 v19[84]];
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          sub_1000992E8(&qword_1002A9F28);
          if (swift_dynamicCast()) {
            break;
          }

          if (!v18) {
            goto LABEL_8;
          }
        }
        uint64_t v2 = v62;
        uint64_t v26 = v6[197];
        uint64_t v27 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
        id v28 = *(os_unfair_lock_s **)(v26 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
        swift_retain();
        os_unfair_lock_lock(v28 + 4);
        swift_release();
        uint64_t v29 = *(void *)(v26 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
        if (v29)
        {
          uint64_t v30 = *(void **)(v29 + 24);
          if (v30)
          {
            void v61[2] = sub_1000BF168;
            v61[3] = v29;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            v61[0] = sub_1001468DC;
            v61[1] = &unk_100278A18;
            uint64_t v31 = _Block_copy(aBlock);
            int64_t v53 = v14;
            long long v32 = v31;
            swift_retain_n();
            id v52 = v30;
            uint64_t v33 = v47;
            static DispatchQoS.unspecified.getter();
            id v62 = (char *)_swiftEmptyArrayStorage;
            uint64_t v51 = sub_100169A74((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            uint64_t v54 = v2;
            sub_1000992E8((uint64_t *)&unk_1002A7F60);
            sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
            uint64_t v34 = v49;
            uint64_t v35 = v50;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            char v36 = v52;
            OS_dispatch_queue.async(group:qos:flags:execute:)();
            id v37 = v32;
            int64_t v14 = v53;
            _Block_release(v37);

            id v38 = v34;
            uint64_t v13 = v46;
            uint64_t v39 = v35;
            uint64_t v2 = v54;
            (*v44)(v38, v39);
            uint64_t v40 = v33;
            uint64_t v6 = (void *)&unk_1002B1000;
            (*v43)(v40, v48);
            swift_release();
            swift_release();
          }
        }
        id v41 = *(os_unfair_lock_s **)(v26 + v27);
        swift_retain();
        os_unfair_lock_unlock(v41 + 4);
        swift_release();
        [v2 systemEventDataWithInfo:v57 data:v56];
        swift_unknownObjectRelease();

        uint64_t v4 = &qword_1002A9F28;
        uint64_t v19 = &selRef_listener_shouldAcceptNewConnection_;
      }
      while (v18);
    }
LABEL_8:
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v59) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v58 + 8 * v22);
    ++v14;
    if (v23) {
      goto LABEL_21;
    }
    int64_t v14 = v22 + 1;
    if (v22 + 1 >= v59) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v58 + 8 * v14);
    if (v23) {
      goto LABEL_21;
    }
    int64_t v14 = v22 + 2;
    if (v22 + 2 >= v59) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v58 + 8 * v14);
    if (v23) {
      goto LABEL_21;
    }
    int64_t v24 = v22 + 3;
    if (v24 >= v59) {
      return swift_release();
    }
    unint64_t v23 = *(void *)(v58 + 8 * v24);
    if (v23)
    {
      int64_t v14 = v24;
LABEL_21:
      unint64_t v18 = (v23 - 1) & v23;
      unint64_t v21 = __clz(__rbit64(v23)) + (v14 << 6);
      goto LABEL_22;
    }
    while (1)
    {
      int64_t v14 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        break;
      }
      if (v14 >= v59) {
        return swift_release();
      }
      unint64_t v23 = *(void *)(v58 + 8 * v14);
      ++v24;
      if (v23) {
        goto LABEL_21;
      }
    }
LABEL_30:
    __break(1u);
  }
}

uint64_t sub_100168E68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100168E78()
{
  return swift_release();
}

uint64_t sub_100168E80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  v27[3] = type metadata accessor for AccessoryServer();
  v27[4] = &off_1002789F0;
  v27[0] = a1;
  Logger.init(subsystem:category:)();
  uint64_t v16 = OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_authManager;
  *(void *)(a6 + v16) = [objc_allocWithZone((Class)DockAuthManager) init];
  uint64_t v17 = OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_manager;
  *(void *)(a6 + v17) = [self sharedManager];
  uint64_t v18 = a6 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
  *(_OWORD *)uint64_t v18 = 0u;
  *(_OWORD *)(v18 + 16) = 0u;
  *(void *)(v18 + 32) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a6 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_tokenUUID, a3, v12);
  uint64_t v19 = (uint64_t *)(a6 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  uint64_t *v19 = a4;
  v19[1] = a5;
  sub_1000A5D40((uint64_t)v27, (uint64_t)v26);
  swift_beginAccess();
  sub_1000A618C(a4, a5);
  sub_100169828((uint64_t)v26, v18);
  swift_endAccess();
  *(void *)(a6 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer) = a2;
  type metadata accessor for Transaction();
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 48) = 0;
  *(void *)(v20 + 24) = 0;
  *(void *)(v20 + 32) = 0;
  *(void *)(v20 + 16) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v20 + 80) = 0;
  *(unsigned char *)(v20 + 88) = 1;
  id v21 = a2;
  Logger.init(subsystem:category:)();
  *(void *)(v20 + 64) = 0xD00000000000001FLL;
  *(void *)(v20 + 72) = 0x8000000100238CB0;
  *(void *)(v20 + 48) = 0;
  *(void *)(v20 + 56) = 0x4024000000000000;
  swift_unknownObjectWeakAssign();
  UUID.init()();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a3, v12);
  sub_100099BCC((uint64_t)v27);
  uint64_t v22 = a6 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  *(void *)uint64_t v22 = v20;
  *(void *)(v22 + 8) = 0;
  *(unsigned char *)(v22 + 16) = 0;
  *(void *)(v22 + 24) = 0;
  *(void *)(v22 + 32) = 0xE000000000000000;
  *(void *)(v22 + 40) = 0;
  uint64_t v23 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v13 + 32))(v22 + *(int *)(v23 + 36), v15, v12);
  *(_OWORD *)(v22 + *(int *)(v23 + 40)) = xmmword_100240D00;
  swift_beginAccess();
  *(void *)(*(void *)v22 + 48) = &off_100279E70;
  swift_unknownObjectWeakAssign();
  return a6;
}

id sub_100169230(void *a1)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth))
  {
    swift_retain();
    sub_1001B96EC();
    return (id)swift_release();
  }
  sub_1000B8650();
  uint64_t v4 = (unsigned char *)swift_allocError();
  unsigned char *v5 = 6;
  sub_1001543EC(0, (uint64_t)v4);
  id result = (id)swift_errorRelease();
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  if (!v6)
  {
    if (a1) {
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_12;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v4 = v6;
  id result = [a1 identifier];
  if (!result)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  uint64_t v11 = swift_allocError();
  *uint64_t v12 = 6;
  unint64_t v13 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
  if (!*(void *)&v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
  {
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
  id v14 = *(id *)&v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
  sub_100156E14(v8, v10, 5, v13, v11);
  swift_bridgeObjectRelease();

LABEL_13:
  swift_errorRelease();

  swift_bridgeObjectRelease();
LABEL_14:
  id v18 = 0;
  unsigned int v15 = [a1 stopPairingWithError:&v18];
  id v16 = v18;
  if (v15)
  {
    return v16;
  }
  else
  {
    id v17 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (id)swift_errorRelease();
  }
}

uint64_t sub_1001694E8(const char *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_logger, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, a1, v9, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_100169648(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (a3)
  {
    sub_100161254(a1, a3);
  }
  else
  {
    unint64_t v7 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v8 = a2[1];
    if (v8)
    {
      uint64_t v9 = *a2;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1001F42C4(v9, v8, 1701667182, 0xE400000000000000, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    uint64_t v11 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
    if (v11)
    {
      id v18 = v11;
      id v12 = [a1 identifier];
      if (v12)
      {
        unint64_t v13 = v12;
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v16 = v15;

        if (*(void *)&v18[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
        {
          v18[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 3;
          id v17 = *(id *)&v18[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
          sub_100156E14(v14, v16, 1, v7, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_100169828(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AAA28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100169894(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1000A5ED8;
  return sub_10015805C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10016995C()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10016999C@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_1001699BC(a1, a2);
}

void sub_1001699B4(unint64_t a1, uint64_t a2)
{
  sub_1001567A4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

unint64_t sub_1001699BC@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = sub_10016204C(*a1, **(void **)(v2 + 16));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

void sub_100169A00(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t))
{
  if (a4 != 2)
  {
    a8(a2, a3);
    a8(a5, a6);
  }
}

uint64_t sub_100169A74(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100169ABC()
{
  sub_1001AE620(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100169ADC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100169B2C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1000A69C4;
  return sub_10015C304(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100169BF4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100169C2C(uint64_t a1)
{
  return sub_10015C0B8(a1, *(void *)(v1 + 16));
}

uint64_t sub_100169C58()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100169D54, 0, 0);
}

uint64_t sub_100169D54()
{
  uint64_t v2 = v0 + 6;
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger;
  v0[11] = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger;
  uint64_t v7 = v1 + v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[12] = v8;
  v0[13] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v3, v7, v4);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Shutting down", v11, 2u);
    swift_slowDealloc();
  }
  uint64_t v12 = v0[10];
  uint64_t v13 = v0[7];
  uint64_t v14 = v0[8];
  uint64_t v15 = v0[6];

  unint64_t v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v0[14] = v16;
  v0[15] = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v12, v13);
  id v17 = *(void **)(v15 + 32);
  v0[16] = v17;
  if (v17)
  {
    v17;
    id v18 = (void *)swift_task_alloc();
    v0[17] = v18;
    void *v18 = v0;
    v18[1] = sub_10016A2F8;
    return sub_1000FA064();
  }
  else
  {
    uint64_t v20 = (void *)*v2;
    v20[4] = 0;
    if (v20[5])
    {
      uint64_t v21 = type metadata accessor for Errors();
      sub_10016F890((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      uint64_t v22 = swift_allocError();
      void *v23 = 0;
      v23[1] = 0xE000000000000000;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v23, enum case for Errors.OperationCancelled(_:), v21);
      sub_10016D5E0(v22);
      swift_errorRelease();
    }
    int64_t v24 = (void *)*v2;
    v24[14] = 0;
    v24[15] = 0;
    swift_bridgeObjectRelease();
    id v25 = (void *)v24[16];
    if (v25)
    {
      v0[2] = 0;
      unsigned int v26 = [v25 closeAndReturnError:v0 + 2];
      uint64_t v27 = (void *)v0[2];
      if (v26)
      {
        id v28 = v27;
      }
      else
      {
        uint64_t v29 = (void (*)(uint64_t, uint64_t, uint64_t))v0[12];
        uint64_t v30 = v0[9];
        uint64_t v31 = v0[7];
        uint64_t v32 = v0[6] + v0[11];
        id v33 = v27;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        v29(v30, v32, v31);
        swift_retain();
        swift_errorRetain();
        swift_retain();
        swift_errorRetain();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v35))
        {
          os_log_type_t v43 = v35;
          uint64_t v36 = swift_slowAlloc();
          id v37 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v36 = 138412546;
          uint64_t Strong = swift_weakLoadStrong();
          if (Strong)
          {
            id v39 = *(id *)(Strong + 24);
            swift_release();
            v0[3] = v39;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
          }
          else
          {
            v0[5] = 0;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            id v39 = 0;
          }
          *id v37 = v39;
          swift_release_n();
          *(_WORD *)(v36 + 12) = 2112;
          swift_errorRetain();
          uint64_t v40 = _swift_stdlib_bridgeErrorToNSError();
          v0[4] = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v37[1] = v40;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v34, v43, "Failed to close file for accessory: %@ with error: %@'", (uint8_t *)v36, 0x16u);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();
          swift_release_n();
          swift_errorRelease();
          swift_errorRelease();
        }
        ((void (*)(void, void))v0[14])(v0[9], v0[7]);
      }
    }
    id v41 = (void *)v24[16];
    v24[16] = 0;

    swift_task_dealloc();
    swift_task_dealloc();
    char v42 = (uint64_t (*)(void))v0[1];
    return v42();
  }
}

uint64_t sub_10016A2F8()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 128);
  swift_task_dealloc();

  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10016A438, 0, 0);
}

uint64_t sub_10016A438()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;

  if (*(void *)(v1 + 40))
  {
    uint64_t v3 = type metadata accessor for Errors();
    sub_10016F890((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v4 = swift_allocError();
    void *v5 = 0;
    v5[1] = 0xE000000000000000;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, enum case for Errors.OperationCancelled(_:), v3);
    sub_10016D5E0(v4);
    swift_errorRelease();
  }
  uint64_t v6 = *(void **)(v0 + 48);
  v6[14] = 0;
  v6[15] = 0;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)v6[16];
  if (v7)
  {
    *(void *)(v0 + 16) = 0;
    unsigned int v8 = [v7 closeAndReturnError:v0 + 16];
    uint64_t v9 = *(void **)(v0 + 16);
    if (v8)
    {
      id v10 = v9;
    }
    else
    {
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 96);
      uint64_t v12 = *(void *)(v0 + 72);
      uint64_t v13 = *(void *)(v0 + 56);
      uint64_t v14 = *(void *)(v0 + 48) + *(void *)(v0 + 88);
      id v15 = v9;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      v11(v12, v14, v13);
      swift_retain();
      swift_errorRetain();
      swift_retain();
      swift_errorRetain();
      unint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        os_log_type_t v26 = v17;
        uint64_t v18 = swift_slowAlloc();
        uint64_t v19 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 138412546;
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          id v21 = *(id *)(Strong + 24);
          swift_release();
          *(void *)(v0 + 24) = v21;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
        }
        else
        {
          *(void *)(v0 + 40) = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v21 = 0;
        }
        void *v19 = v21;
        swift_release_n();
        *(_WORD *)(v18 + 12) = 2112;
        swift_errorRetain();
        uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 32) = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v19[1] = v22;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v26, "Failed to close file for accessory: %@ with error: %@'", (uint8_t *)v18, 0x16u);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_release_n();
        swift_errorRelease();
        swift_errorRelease();
      }
      (*(void (**)(void, void))(v0 + 112))(*(void *)(v0 + 72), *(void *)(v0 + 56));
    }
  }
  uint64_t v23 = (void *)v6[16];
  v6[16] = 0;

  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_10016A868()
{
  id v1 = [*(id *)(v0 + 56) format];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = [v1 value];

    if (!v3) {
      return 7367034;
    }
  }
  uint64_t result = (uint64_t)[*(id *)(v0 + 56) format];
  if (result)
  {
    uint64_t v5 = (void *)result;
    id v6 = [(id)result value];

    if (v6 == (id)1) {
      return 7633012;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10016A928(uint64_t a1)
{
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = v1;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10016A948, 0, 0);
}

uint64_t sub_10016A948()
{
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 96) = Strong;
  if (!Strong)
  {
    uint64_t v28 = type metadata accessor for Errors();
    sub_10016F890((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    *uint64_t v29 = 0xD000000000000010;
    v29[1] = 0x8000000100236700;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v28 - 8) + 104))(v29, enum case for Errors.AccessoryServerNil(_:), v28);
    swift_willThrow();
    goto LABEL_12;
  }
  uint64_t v2 = Strong;
  id v3 = *(void **)(Strong + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  if (!v3 || ([v3 canAcceptBulkSendListeners] & 1) == 0)
  {
    id v4 = *(id *)(v2 + 40);
    OS_dispatch_queue.sync<A>(execute:)();

    if (*(unsigned char *)(v0 + 120) == 1)
    {
      uint64_t v5 = type metadata accessor for Errors();
      sub_10016F890((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      uint64_t v7 = v6;
      _StringGuts.grow(_:)(53);
      v8._uint64_t countAndFlagsBits = 0xD000000000000033;
      v8._object = (void *)0x8000000100238F30;
      String.append(_:)(v8);
      id v9 = *(id *)(v2 + 24);
      id v10 = [v9 description];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      v14._uint64_t countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);

      swift_bridgeObjectRelease();
      *uint64_t v7 = 0;
      v7[1] = 0xE000000000000000;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v5 - 8) + 104))(v7, enum case for Errors.OperationNotSupported(_:), v5);
      swift_willThrow();
      swift_release();
LABEL_12:
      uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
      return v30();
    }
  }
  uint64_t v15 = *(void *)(v0 + 88);
  id v16 = *(id *)(v15 + 24);
  swift_retain();
  unint64_t v17 = sub_100106DBC();
  uint64_t v18 = *(void *)(v15 + 64);
  uint64_t v19 = *(void *)(v15 + 72);
  objc_allocWithZone((Class)type metadata accessor for AccessoryDataStreamAdapter());
  swift_bridgeObjectRetain();
  id v20 = sub_1000FE434(v2, v16, v17, 0xD000000000000014, 0x8000000100238EF0, v18, v19);
  swift_release();

  id v21 = *(void **)(v15 + 32);
  *(void *)(v15 + 32) = v20;

  uint64_t v22 = *(void **)(v15 + 32);
  if (v22)
  {
    uint64_t v23 = *(void *)(v0 + 88);
    *(void *)(v0 + 40) = type metadata accessor for AccessoryDiagnosticsSession();
    *(void *)(v0 + 48) = &off_100278BA8;
    *(void *)(v0 + 16) = v23;
    uint64_t v24 = (uint64_t)v22 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate;
    swift_beginAccess();
    id v25 = v22;
    swift_retain();
    sub_10016F9CC(v0 + 16, v24);
    swift_endAccess();
  }
  os_log_type_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v26;
  void *v26 = v0;
  v26[1] = sub_10016AE00;
  uint64_t v27 = *(void *)(v0 + 88);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v26, 0, 0, 0xD000000000000010, 0x8000000100238F10, sub_10016FA34, v27, (char *)&type metadata for () + 8);
}

uint64_t sub_10016AE00()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10016AF78;
  }
  else {
    uint64_t v2 = sub_10016AF14;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_10016AF14()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10016AF78()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10016AFDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AADC0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t result = __chkstk_darwin(v4);
  Swift::String v8 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = *(char **)(a2 + 32);
  if (v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    unint64_t v11 = (v6 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v12 + v10, v8, v4);
    *(void *)(v12 + v11) = a2;
    uint64_t v13 = (uint64_t *)&v9[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback];
    if (*(void *)&v9[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback])
    {
      uint64_t v14 = type metadata accessor for Errors();
      sub_10016F890((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      uint64_t v15 = swift_allocError();
      *id v16 = 0xD00000000000001ELL;
      v16[1] = 0x8000000100238F70;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, enum case for Errors.OperationInProgress(_:), v14);
      swift_retain();
      swift_willThrow();
      swift_release();
      v19[0] = v15;
      return CheckedContinuation.resume(throwing:)();
    }
    else
    {
      swift_retain();
      unint64_t v17 = v9;
      sub_1000FB744();
      uint64_t v18 = *v13;
      *uint64_t v13 = (uint64_t)sub_10016FAE4;
      v13[1] = v12;
      swift_retain();
      sub_1000BF118(v18);

      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10016B258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v14[1] = a2;
    swift_errorRetain();
    sub_1000992E8(&qword_1002AADC0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v6);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Diagnostics data stream was setup successfully", v13, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(unsigned char *)(a4 + 104) = 1;
    *(void *)(a4 + 96) = 1;
    sub_1000992E8(&qword_1002AADC0);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_10016B418(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(v2 + 32))
  {
    uint64_t v8 = type metadata accessor for Errors();
    sub_10016F890((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    unint64_t v10 = v9;
    unint64_t v11 = 0xD000000000000017;
    os_log_type_t v12 = "Data stream not present";
LABEL_7:
    *id v9 = v11;
    v9[1] = (unint64_t)(v12 - 32) | 0x8000000000000000;
    (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, enum case for Errors.CommunicationFailure(_:), v8);
    goto LABEL_8;
  }
  if ((*(unsigned char *)(v2 + 104) & 1) == 0)
  {
    uint64_t v8 = type metadata accessor for Errors();
    sub_10016F890((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    unint64_t v10 = v9;
    unint64_t v11 = 0xD00000000000001FLL;
    os_log_type_t v12 = "Session not ready for data read";
    goto LABEL_7;
  }
  if (*(void *)(v2 + 40))
  {
    uint64_t v3 = type metadata accessor for Errors();
    sub_10016F890((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v4 = swift_allocError();
    void *v5 = 0xD000000000000027;
    v5[1] = 0x8000000100238EA0;
    uint64_t v6 = *(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104);
    v6(v5, enum case for Errors.OperationInProgress(_:), v3);
    sub_10016D5E0(v4);
    swift_errorRelease();
    swift_allocError();
    *uint64_t v7 = 0xD000000000000027;
    v7[1] = 0x8000000100238EA0;
    v6(v7, enum case for Errors.CommunicationFailure(_:), v3);
LABEL_8:
    swift_willThrow();
    return;
  }
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  swift_retain();
  sub_1000BF118(0);
  id v13 = *(id *)(v2 + 24);
  sub_1000992E8(&qword_1002A8588);
  OS_dispatch_queue.sync<A>(execute:)();
}

void sub_10016B714(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    id v4 = v3;
    sub_1000FA734();
  }
  *a2 = v3 == 0;
}

uint64_t sub_10016B768(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v56 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  id v13 = (char *)&v56 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v56 - v14;
  uint64_t v16 = v1[17];
  uint64_t v59 = v6;
  if (v16 && (*(unsigned char *)(v16 + 57) & 1) != 0)
  {
    int v17 = 1;
  }
  else
  {
    if (!v1[16])
    {
      uint64_t v18 = sub_10016C1B4();
      if (v18)
      {
        uint64_t v19 = (void *)v1[16];
        v1[16] = v18;
      }
      else
      {
        id v20 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
        uint64_t v58 = v5;
        v20(v15, (char *)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v5);
        id v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "error creating file handle", v23, 2u);
          uint64_t v6 = v59;
          swift_slowDealloc();
        }

        uint64_t v5 = v58;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v58);
      }
    }
    int v17 = 0;
  }
  uint64_t v24 = v2[11];
  unint64_t v25 = (unint64_t)[a1 length];
  if ((v25 & 0x8000000000000000) != 0) {
    goto LABEL_38;
  }
  if (__CFADD__(v24, v25))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v2[10] < v24 + v25)
  {
    uint64_t v26 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v13, (uint64_t)v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v5);
    swift_retain();
    uint64_t v27 = a1;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 134218496;
      id v61 = (id)v2[11];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 12) = 2048;
      id v61 = [v27 length];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v30 + 22) = 2048;
      id v61 = (id)v2[10];
      uint64_t v26 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Diagnostics exceeded max size (written: %llu, new data: %ld, max: %llu", (uint8_t *)v30, 0x20u);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
      uint64_t v28 = v27;
    }

    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, v5);
    return 0;
  }
  unint64_t v31 = (unint64_t)[a1 length];
  if ((v31 & 0x8000000000000000) != 0) {
    goto LABEL_38;
  }
  uint64_t v32 = v2[11];
  BOOL v33 = __CFADD__(v32, v31);
  uint64_t v34 = (char *)(v32 + v31);
  if (v33) {
LABEL_36:
  }
    __break(1u);
  v2[11] = v34;
  if (v17)
  {
    uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v37 = v36;
    static String.Encoding.utf8.getter();
    uint64_t v38 = String.init(data:encoding:)();
    uint64_t v40 = v39;
    sub_1000A6240(v35, v37);
    if (v40)
    {
      uint64_t v41 = v2[19];
      id v61 = (id)v2[18];
      uint64_t v62 = v41;
      swift_bridgeObjectRetain();
      v42._uint64_t countAndFlagsBits = v38;
      v42._object = v40;
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      uint64_t v43 = v62;
      v2[18] = v61;
      v2[19] = v43;
      swift_bridgeObjectRelease();
      return 1;
    }
    return 1;
  }
  uint64_t v45 = (void *)v2[16];
  if (v45)
  {
    id v61 = a1;
    sub_100099C7C(0, (unint64_t *)&qword_1002A9FC8);
    sub_10016F92C();
    id v46 = v45;
    NSFileHandle.write<A>(contentsOf:)();

    return 1;
  }
  uint64_t v47 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v10, (uint64_t)v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v5);
  swift_retain_n();
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v58 = v5;
    uint64_t v50 = swift_slowAlloc();
    uint64_t v51 = (void *)swift_slowAlloc();
    id v57 = (id)swift_slowAlloc();
    id v61 = v57;
    *(_DWORD *)uint64_t v50 = 138412546;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      id v53 = *(id *)(Strong + 24);
      swift_release();
      uint64_t v60 = (uint64_t)v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t v60 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v53 = 0;
    }
    *uint64_t v51 = v53;
    swift_release_n();
    *(_WORD *)(v50 + 12) = 2080;
    unint64_t v54 = v2[15];
    if (v54)
    {
      uint64_t v55 = v2[14];
      swift_bridgeObjectRetain();
      uint64_t v60 = sub_1000993AC(v55, v54, (uint64_t *)&v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Failed to create log file for accessory: %@ file path: %s", (uint8_t *)v50, 0x16u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v59 + 8))(v10, v58);
      return 0;
    }
    swift_release();
    __break(1u);
LABEL_38:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }

  swift_release_n();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v10, v5);
  return 0;
}

uint64_t sub_10016C1B4()
{
  uint64_t v130 = type metadata accessor for Logger();
  uint64_t v129 = *(void *)(v130 - 8);
  uint64_t v0 = __chkstk_darwin(v130);
  Class v106 = (char *)&v102 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v0);
  unint64_t v105 = (char *)&v102 - v2;
  uint64_t v3 = sub_1000992E8(&qword_1002AADA8);
  __chkstk_darwin(v3 - 8);
  uint64_t v128 = (char *)&v102 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for TimeZone();
  uint64_t v126 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  id v114 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  uint64_t v121 = *(void *)(v122 - 8);
  __chkstk_darwin(v122);
  uint64_t v125 = (char *)&v102 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  uint64_t v118 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v124 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  uint64_t v115 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  id v120 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  uint64_t v9 = *(void *)(v123 - 8);
  uint64_t v10 = __chkstk_darwin(v123);
  id v111 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v117 = (char *)&v102 - v12;
  uint64_t v113 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v112 = *(void *)(v113 - 8);
  uint64_t v13 = __chkstk_darwin(v113);
  id v107 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v109 = (char *)&v102 - v15;
  uint64_t v110 = type metadata accessor for Date();
  uint64_t v108 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  id v131 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for URL.DirectoryHint();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v20 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v102 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v133 = [self defaultManager];
  id v28 = [v133 URLsForDirectory:13 inDomains:1];
  uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v29 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v23, v29 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)), v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v23, 1, 1, v24);
  }
  uint64_t v30 = v25;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {

    sub_1000A61E4((uint64_t)v23, &qword_1002A7F70);
    return 0;
  }
  uint64_t v31 = v9;
  uint64_t v104 = v30;
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  BOOL v33 = v27;
  v32(v27, v23, v24);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for URL.DirectoryHint.isDirectory(_:), v17);
  sub_1000E9828();
  URL.append<A>(components:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  char v135 = 0;
  URL.path(percentEncoded:)(1);
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v35 = v133;
  unsigned __int8 v36 = [v133 fileExistsAtPath:v34 isDirectory:&v135];

  if ((v36 & 1) == 0)
  {
    sub_1000992E8((uint64_t *)&unk_1002A8FF0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = NSFilePosixPermissions;
    *(void *)(inited + 40) = 448;
    uint64_t v38 = NSFilePosixPermissions;
    unint64_t v39 = sub_1001E9D0C(inited);
    URL._bridgeToObjectiveC()(v40);
    Swift::String v42 = v41;
    sub_1001E1290(v39);
    swift_bridgeObjectRelease();
    type metadata accessor for FileAttributeKey(0);
    sub_10016F890((unint64_t *)&qword_1002A8130, type metadata accessor for FileAttributeKey);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v137[0] = 0;
    unsigned int v44 = [v35 createDirectoryAtURL:v42 withIntermediateDirectories:1 attributes:isa error:v137];

    id v45 = v137[0];
    if (!v44)
    {
      uint64_t v79 = v45;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v80 = v129;
      uint64_t v81 = v106;
      uint64_t v82 = v130;
      (*(void (**)(char *, uint64_t, uint64_t))(v129 + 16))(v106, v132 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v130);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = swift_slowAlloc();
        v136._uint64_t countAndFlagsBits = swift_slowAlloc();
        *(_DWORD *)uint64_t v85 = 136315394;
        swift_beginAccess();
        Swift::String v86 = URL.path(percentEncoded:)(1);
        uint64_t v134 = sub_1000993AC(v86._countAndFlagsBits, (unint64_t)v86._object, &v136._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v85 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v87 = Error.localizedDescription.getter();
        uint64_t v134 = sub_1000993AC(v87, v88, &v136._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "Unable to create file storage directory %s: %s", (uint8_t *)v85, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v129 + 8))(v106, v130);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v82);
      }
      (*(void (**)(char *, uint64_t))(v104 + 8))(v33, v24);
      return 0;
    }
  }
  Class v106 = (char *)v24;
  uint64_t v46 = v132;
  uint64_t v47 = sub_10016A868();
  if (!v48)
  {
    uint64_t v73 = v129;
    uint64_t v74 = v105;
    uint64_t v75 = v130;
    (*(void (**)(char *, uint64_t, uint64_t))(v129 + 16))(v105, v46 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v130);
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      id v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "FileType not supported", v78, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
    (*(void (**)(char *, char *))(v104 + 8))(v33, v106);
    return 0;
  }
  uint64_t v102 = v47;
  char v103 = v48;
  uint64_t v130 = (uint64_t)v33;
  static Date.now.getter();
  os_log_type_t v49 = *(char **)(v9 + 104);
  LODWORD(v129) = enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:);
  uint64_t v50 = v123;
  unint64_t v105 = v49;
  ((void (*)(char *))v49)(v117);
  (*(void (**)(char *, void, uint64_t))(v115 + 104))(v120, enum case for Date.ISO8601FormatStyle.DateTimeSeparator.standard(_:), v116);
  (*(void (**)(char *, void, uint64_t))(v118 + 104))(v124, enum case for Date.ISO8601FormatStyle.TimeSeparator.colon(_:), v119);
  (*(void (**)(char *, void, uint64_t))(v121 + 104))(v125, enum case for Date.ISO8601FormatStyle.TimeZoneSeparator.omitted(_:), v122);
  uint64_t v51 = v128;
  TimeZone.init(secondsFromGMT:)();
  uint64_t v52 = v126;
  uint64_t v53 = v127;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v126 + 48))(v51, 1, v127);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v114, v51, v53);
    uint64_t v55 = v107;
    Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
    uint64_t v56 = v111;
    ((void (*)(char *, void, uint64_t))v105)(v111, v129, v50);
    id v57 = v109;
    Date.ISO8601FormatStyle.dateSeparator(_:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v56, v50);
    uint64_t v58 = *(void (**)(char *, uint64_t))(v112 + 8);
    uint64_t v59 = v113;
    v58(v55, v113);
    sub_10016F890(&qword_1002AADB0, (void (*)(uint64_t))&type metadata accessor for Date.ISO8601FormatStyle);
    uint64_t v60 = v131;
    Date.formatted<A>(_:)();
    v58(v57, v59);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v60, v110);
    id v61 = v137[0];
    id v62 = v137[1];
    uint64_t v63 = v130;
    Swift::String v64 = URL.path(percentEncoded:)(1);
    v137[0] = 0;
    v137[1] = (id)0xE000000000000000;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    strcpy((char *)v137, "diagnostics_");
    BYTE5(v137[1]) = 0;
    HIWORD(v137[1]) = -5120;
    v65._uint64_t countAndFlagsBits = (uint64_t)v61;
    v65._object = v62;
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    v66._uint64_t countAndFlagsBits = 95;
    v66._object = (void *)0xE100000000000000;
    String.append(_:)(v66);
    uint64_t v67 = v132;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      id v69 = *(id *)(Strong + 24);
      swift_release();
      uint64_t v70 = DockCoreInfo.description.getter();
      uint64_t v72 = v71;
    }
    else
    {
      uint64_t v72 = (void *)0xE300000000000000;
      uint64_t v70 = 7104878;
    }
    uint64_t v89 = v106;
    uint64_t v90 = v103;
    uint64_t v91 = v102;
    v92._uint64_t countAndFlagsBits = v70;
    v92._object = v72;
    String.append(_:)(v92);
    swift_bridgeObjectRelease();
    v93._uint64_t countAndFlagsBits = 46;
    v93._object = (void *)0xE100000000000000;
    String.append(_:)(v93);
    v94._uint64_t countAndFlagsBits = v91;
    v94._object = v90;
    String.append(_:)(v94);
    swift_bridgeObjectRelease();
    Swift::String v136 = v64;
    swift_bridgeObjectRetain();
    v136._uint64_t countAndFlagsBits = String.init<A>(_:)();
    v136._object = v95;
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v136._countAndFlagsBits;
    object = v136._object;
    NSString v98 = String._bridgeToObjectiveC()();
    id v99 = v133;
    [v133 createFileAtPath:v98 contents:0 attributes:0];

    swift_bridgeObjectRetain();
    NSString v100 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v101 = [self fileHandleForWritingAtPath:v100];

    *(void *)(v67 + 112) = countAndFlagsBits;
    *(void *)(v67 + 120) = object;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *))(v104 + 8))(v63, v89);
    return (uint64_t)v101;
  }
  __break(1u);
  return result;
}

uint64_t sub_10016D3E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v8 = a1 >= 0 && *(void *)(v2 + 96) == a1;
  uint64_t v9 = v8;
  if (v8)
  {
    *(void *)(v2 + 96) = a1 + 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v4);
    swift_retain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 134218240;
      uint64_t v16 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2048;
      uint64_t v16 = *(void *)(v2 + 96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Invalid data sequence number received: %ld expected: %llu", (uint8_t *)v13, 0x16u);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v9;
}

uint64_t sub_10016D5E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v4);
  swift_errorRetain();
  swift_errorRetain();
  BOOL v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v16 = v2;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138412290;
    if (a1)
    {
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t v17 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v12 = 0;
    }
    void *v11 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Calling completion handler with error: %@", v10, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v2 = v16;
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v14 = *(void (**)(uint64_t, void, void))(v2 + 40);
  if (v14)
  {
    *(void *)(v2 + 40) = 0;
    *(void *)(v2 + 48) = 0;
    swift_retain();
    sub_1000BF118((uint64_t)v14);
    v14(a1, 0, 0);
    return sub_1000BF118((uint64_t)v14);
  }
  return result;
}

uint64_t sub_10016D8A4()
{
  swift_weakDestroy();

  sub_1000BF118(*(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10016D958()
{
  sub_10016D8A4();

  return swift_deallocClassInstance();
}

uint64_t sub_10016D9B0()
{
  return type metadata accessor for AccessoryDiagnosticsSession();
}

uint64_t type metadata accessor for AccessoryDiagnosticsSession()
{
  uint64_t result = qword_1002AAAD8;
  if (!qword_1002AAAD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10016DA04()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_10016DAEC(uint64_t a1, uint64_t a2)
{
  return sub_10016ED60(a2) & 1;
}

uint64_t sub_10016DB18()
{
  return sub_10016F230();
}

uint64_t sub_10016DB3C()
{
  return sub_10016EA18();
}

unint64_t sub_10016DB60(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10016E09C(a1, a2, v4);
}

unint64_t sub_10016DBD8(int a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return sub_10016E180(a1, v2);
}

unint64_t sub_10016DC20(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10016E21C(a1, v4);
}

unint64_t sub_10016DC68(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_10016F890(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10016E788(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&unk_1002AA100, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_10016DD3C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10016E328(a1, v4);
}

unint64_t sub_10016DD80(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_10016E3F0(a1, v2);
}

unint64_t sub_10016DE10(uint64_t a1)
{
  Hasher.init(_seed:)();
  id v2 = *(id *)(a1 + 24);
  NSObject.hash(into:)();

  Swift::Int v3 = Hasher._finalize()();

  return sub_10016E568(a1, v3);
}

unint64_t sub_10016DE88(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10016E674(a1, v4, (unint64_t *)&qword_1002AA880);
}

unint64_t sub_10016DED8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10016E674(a1, v4, &qword_1002AAAA8);
}

unint64_t sub_10016DF28(uint64_t a1)
{
  type metadata accessor for ComponentType();
  sub_10016F890(&qword_1002AAD98, (void (*)(uint64_t))&type metadata accessor for ComponentType);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_10016E788(a1, v2, (uint64_t (*)(void))&type metadata accessor for ComponentType, &qword_1002AADA0, (void (*)(uint64_t))&type metadata accessor for ComponentType, (uint64_t)&protocol conformance descriptor for ComponentType);
}

unint64_t sub_10016DFFC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10016E674(a1, v4, (unint64_t *)&unk_1002A8F30);
}

unint64_t sub_10016E04C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10016E674(a1, v4, (unint64_t *)&unk_1002A9F60);
}

unint64_t sub_10016E09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10016E180(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_10016E21C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for DockCoreInfo();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10016E328(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1000FE878(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10016F8D8((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10016E3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10016E568(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = v2;
    uint64_t v8 = ~v4;
    uint64_t v9 = type metadata accessor for DockCoreInfo();
    do
    {
      char v10 = *(void **)(*(void *)(*(void *)(v6 + 48) + 8 * v5) + 24);
      char v11 = *(void **)(a1 + 24);
      v15[3] = v9;
      v15[0] = v11;
      swift_retain();
      id v12 = v10;
      id v13 = v11;
      LOBYTE(v10) = DockCoreInfo.isEqual(_:)();

      sub_1000A61E4((uint64_t)v15, &qword_1002AA5F0);
      swift_release();
      if (v10) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v8;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_10016E674(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_100099C7C(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10016E788(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_10016F890(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_10016E928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_weakInit();
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 64) = 0x74736F6E67616964;
  *(void *)(v3 + 72) = 0xEF61746144736369;
  *(void *)(v3 + 80) = 5242880;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  *(unsigned char *)(v3 + 104) = 0;
  *(void *)(v3 + 144) = 0;
  *(void *)(v3 + 152) = 0xE000000000000000;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  Logger.init(subsystem:category:)();
  swift_weakAssign();
  *(void *)(v3 + 24) = a2;
  *(void *)(v3 + 56) = a3;
  return v3;
}

uint64_t sub_10016EA18()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v2);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      id v10 = *(id *)(Strong + 24);
      swift_release();
      id v17 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      id v17 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v10 = 0;
    }
    *uint64_t v16 = v10;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to read data for accessory: %@", v8, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (*(void *)(v1 + 40))
  {
    uint64_t v12 = type metadata accessor for Errors();
    sub_10016F890((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v13 = swift_allocError();
    *uint64_t v14 = 0x722064656C696166;
    v14[1] = 0xEB00000000646165;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, enum case for Errors.CommunicationFailure(_:), v12);
    sub_10016D5E0(v13);
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10016ED60(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  char v11 = (char *)&v34 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v34 - v12;
  if (*(void *)(a1 + 16)
    && (unint64_t v14 = sub_10016DB60(1635017060, 0xE400000000000000), (v15 & 1) != 0)
    && (sub_100099C1C(*(void *)(a1 + 56) + 32 * v14, (uint64_t)&v36),
        sub_100099C7C(0, (unint64_t *)&qword_1002A9FC8),
        (swift_dynamicCast() & 1) != 0))
  {
    id v16 = v35;
    if (*(void *)(a1 + 16))
    {
      unint64_t v17 = sub_10016DB60(0x617461646174656DLL, 0xE800000000000000);
      if (v18)
      {
        sub_100099C1C(*(void *)(a1 + 56) + 32 * v17, (uint64_t)&v36);
        sub_1000992E8(&qword_1002AAD90);
        if (swift_dynamicCast())
        {
          char v19 = v35;
          if (v35[2] && (unint64_t v20 = sub_10016DB60(0xD000000000000012, 0x8000000100238E60), (v21 & 1) != 0))
          {
            sub_100099C1C(v19[7] + 32 * v20, (uint64_t)&v36);
          }
          else
          {
            long long v36 = 0u;
            long long v37 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v37 + 1))
          {
            sub_100099C7C(0, &qword_1002A8380);
            if (swift_dynamicCast())
            {
              id v27 = v35;
              if (sub_10016D3E0((uint64_t)[v35 integerValue]))
              {
              }
              else
              {
                (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v13, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v4);
                id v28 = Logger.logObject.getter();
                os_log_type_t v29 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v28, v29))
                {
                  uint64_t v30 = (uint8_t *)swift_slowAlloc();
                  os_log_t v34 = v28;
                  *(_WORD *)uint64_t v30 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v34, v29, "unexpected sequence number but still accept it", v30, 2u);
                  id v28 = v34;
                  swift_slowDealloc();
                }

                (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
              }
            }
          }
          else
          {
            sub_1000A61E4((uint64_t)&v36, &qword_1002AA5F0);
          }
        }
      }
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v4);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      BOOL v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Data frame received", v33, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    char v25 = sub_10016B768(v16);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v4);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No data present in frame", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    char v25 = 0;
  }
  return v25 & 1;
}

uint64_t sub_10016F230()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v37 - v8;
  __chkstk_darwin(v7);
  char v11 = (char *)&v37 - v10;
  if (!v1[5])
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v37 - v10, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger, v2);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      unint64_t v39 = v6;
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Data read completed but no completion handler", v16, 2u);
      uint64_t v6 = v39;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
    uint64_t v12 = v1[17];
    if (v12) {
      goto LABEL_3;
    }
LABEL_7:
    int v13 = 0;
    goto LABEL_8;
  }
  uint64_t v12 = v1[17];
  if (!v12) {
    goto LABEL_7;
  }
LABEL_3:
  int v13 = *(unsigned __int8 *)(v12 + 57);
LABEL_8:
  unint64_t v17 = (char *)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsSession_logger;
  char v18 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
  if ((v13 & 1) != 0 || v1[16])
  {
    v18(v6, v17, v2);
    swift_retain_n();
    char v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v39 = v6;
      uint64_t v40 = v2;
      id v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = (void *)swift_slowAlloc();
      *(_DWORD *)id v27 = 138412290;
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        id v29 = *(id *)(Strong + 24);
        swift_release();
        id v41 = v29;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        id v41 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v29 = 0;
      }
      void *v38 = v29;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Data read completed for accessory: %@", v27, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v6 = v39;
      uint64_t v2 = v40;
    }
    else
    {

      swift_release_n();
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    uint64_t v31 = (void (*)(void, uint64_t, uint64_t))v1[5];
    if (v31)
    {
      v1[5] = 0;
      v1[6] = 0;
      swift_retain();
      sub_1000BF118((uint64_t)v31);
      if (v13)
      {
        uint64_t v33 = v1[18];
        uint64_t v32 = v1[19];
      }
      else
      {
        uint64_t v33 = v1[14];
        uint64_t v32 = v1[15];
      }
      swift_bridgeObjectRetain();
      v31(0, v33, v32);
      swift_bridgeObjectRelease();
      return sub_1000BF118((uint64_t)v31);
    }
  }
  else
  {
    v18(v9, v17, v2);
    swift_retain_n();
    char v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v40 = v2;
      char v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)char v21 = 138412290;
      uint64_t v23 = swift_weakLoadStrong();
      if (v23)
      {
        id v24 = *(id *)(v23 + 24);
        swift_release();
        id v41 = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        id v41 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v24 = 0;
      }
      *uint64_t v22 = v24;
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Data read completed for accessory: %@ but file path not present", v21, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v2 = v40;
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    uint64_t v34 = type metadata accessor for Errors();
    sub_10016F890((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v35 = swift_allocError();
    void *v36 = 0x656C6966206C696ELL;
    v36[1] = 0xEF656C646E616820;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v34 - 8) + 104))(v36, enum case for Errors.CommunicationFailure(_:), v34);
    sub_10016D5E0(v35);
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10016F890(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10016F8D8(uint64_t a1)
{
  return a1;
}

unint64_t sub_10016F92C()
{
  unint64_t result = qword_1002AADB8;
  if (!qword_1002AADB8)
  {
    sub_100099C7C(255, (unint64_t *)&qword_1002A9FC8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AADB8);
  }
  return result;
}

void sub_10016F994(BOOL *a1@<X8>)
{
  sub_10016B714(v1, a1);
}

id sub_10016F9B0@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000AA484(v1, a1);
}

uint64_t sub_10016F9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8((uint64_t *)&unk_1002A9798);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016FA34(uint64_t a1)
{
  return sub_10016AFDC(a1, v1);
}

uint64_t sub_10016FA3C()
{
  uint64_t v1 = sub_1000992E8(&qword_1002AADC0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10016FAE4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_1000992E8(&qword_1002AADC0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_10016B258(a1, a2, v2 + v6, v7);
}

char *DockDetector.__allocating_init(workQueue:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return DockDetector.init(workQueue:)(a1);
}

void sub_10016FBC8(uint64_t a1@<X0>, NSObject *a2@<X8>)
{
  LOBYTE(a2->isa) = 0;
  a2[1].Class isa = (Class)&_swiftEmptyArrayStorage;
  type metadata accessor for JarvisEventHistory(0);
  osos_log_t log = a2;
  Logger.init(subsystem:category:)();
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 && (LOBYTE(a2->isa) = *(unsigned char *)(a1 + 32), v4 != 1))
  {
    if (v4 >= 0xA)
    {
      uint64_t v7 = 0;
      uint64_t v22 = a1;
      while (1)
      {
        unint64_t v8 = *(void *)(a1 + 16);
        if (v7 + 1 >= v8) {
          break;
        }
        unint64_t v9 = v7 + 10;
        if (v8 < v7 + 10) {
          goto LABEL_29;
        }
        char v10 = *(unsigned char *)(a1 + v7 + 33);
        unint64_t v11 = *(void *)(a1 + v7 + 34);
        uint64_t v12 = mach_continuous_time();
        uint64_t v13 = v12 - v11;
        if (v12 < v11) {
          goto LABEL_30;
        }
        unint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = swift_slowAlloc();
          *(_DWORD *)uint64_t v16 = 134218752;
          *(void *)(v16 + 4) = v11;
          *(_WORD *)(v16 + 12) = 2048;
          *(void *)(v16 + 14) = mach_continuous_time();
          *(_WORD *)(v16 + 22) = 2048;
          *(void *)(v16 + 24) = v13;
          *(_WORD *)(v16 + 32) = 256;
          *(unsigned char *)(v16 + 34) = v10;
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "time is %llu, current time is %llu, ticks = %llu event is %hhu", (uint8_t *)v16, 0x23u);
          a1 = v22;
          swift_slowDealloc();
        }

        if (v11)
        {
          Class isa = (char *)oslog[1].isa;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            Class isa = sub_100102D78(0, *((void *)isa + 2) + 1, 1, isa);
          }
          unint64_t v19 = *((void *)isa + 2);
          unint64_t v18 = *((void *)isa + 3);
          if (v19 >= v18 >> 1) {
            Class isa = sub_100102D78((char *)(v18 > 1), v19 + 1, 1, isa);
          }
          *((void *)isa + 2) = v19 + 1;
          os_log_type_t v20 = &isa[16 * v19];
          v20[32] = v10;
          *((void *)v20 + 5) = v13;
          oslog[1].Class isa = (Class)isa;
        }
        if (v9 >= v4) {
          goto LABEL_3;
        }
        int64_t v21 = v7 + 19;
        if (__OFADD__(v9, 9)) {
          goto LABEL_31;
        }
        v7 += 9;
        if ((uint64_t)v4 < v21) {
          goto LABEL_7;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
    }
    else
    {
LABEL_7:
      swift_bridgeObjectRelease();
      osos_log_t loga = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(osloga, v5))
      {
        unint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, osloga, v5, "buffer is incomplete, this is not expected. Not processing jarvis report further", v6, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
LABEL_3:
    swift_bridgeObjectRelease();
  }
}

id DockDetector.startupValidator.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void DockDetector.startupValidator.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
  swift_beginAccess();
  unint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*DockDetector.startupValidator.modify())()
{
  return j__swift_endAccess;
}

char *DockDetector.init(workQueue:)(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator;
  id v4 = objc_allocWithZone((Class)type metadata accessor for MotionValidator());
  os_log_type_t v5 = v1;
  *(void *)&v1[v3] = MotionValidator.init(type:interval:)(0, 0.1);
  Logger.init(subsystem:category:)();
  uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager;
  *(void *)&v5[v6] = IOHIDManagerCreate(kCFAllocatorDefault, 0);
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvis] = 0;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer] = 0;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisInterval] = 0x3FC999999999999ALL;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisLastDockedTimeout] = 0x4000000000000000;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisLastUndockedTimeout] = 0x4014000000000000;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimeThreshold] = 0x404E000000000000;
  uint64_t v7 = &v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus];
  uint64_t v8 = enum case for DockStatus.Undocked(_:);
  uint64_t v9 = type metadata accessor for DockStatus();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v7, v8, v9);
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisReportLength] = 91;
  char v10 = &v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisCallback];
  *(void *)char v10 = 0;
  *((void *)v10 + 1) = 0;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_clockTimebase] = 0;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_kJarvisReportID] = 2;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_workQueue] = a1;
  id v11 = a1;
  *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_reportBuffer] = swift_slowAlloc();

  v16.receiver = v5;
  v16.super_class = (Class)type metadata accessor for DockDetector(0);
  uint64_t v12 = (char *)[super init];
  uint64_t v13 = (mach_timebase_info *)&v12[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_clockTimebase];
  swift_beginAccess();
  unint64_t v14 = v12;
  mach_timebase_info(v13);
  swift_endAccess();

  return v14;
}

uint64_t type metadata accessor for DockDetector(uint64_t a1)
{
  return sub_100171AB4(a1, (uint64_t *)&unk_1002AAE70);
}

id DockDetector.__deallocating_deinit()
{
  IOHIDManagerClose(*(IOHIDManagerRef *)&v0[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager], 0);
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer];
  *(void *)&v0[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer] = 0;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for DockDetector(0);
  return [super dealloc];
}

void sub_100170454()
{
  uint64_t v1 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Setting up Jarvis detection", v4, 2u);
    swift_slowDealloc();
  }

  sub_1001EB370((uint64_t)&off_100274BD0);
  CFDictionaryRef matching = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager;
  IOHIDManagerSetDeviceMatching(*(IOHIDManagerRef *)(v1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager), matching);
  CFSetRef v6 = IOHIDManagerCopyDevices(*(IOHIDManagerRef *)(v1 + v5));
  if (v6)
  {
    CFSetRef v7 = v6;
    type metadata accessor for IOHIDDevice(0);
    sub_100171B48(&qword_1002A7F38, type metadata accessor for IOHIDDevice);
    static Set._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  swift_bridgeObjectRelease();
  unint64_t v8 = (unint64_t)sub_1001F99B8((uint64_t)&_swiftEmptySetSingleton);
  swift_bridgeObjectRelease();
  if ((v8 & 0x8000000000000000) != 0 || (v8 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v9) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 16);
    if (!v9) {
      goto LABEL_12;
    }
  }
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)(v8 + 16))
    {
      __break(1u);
      return;
    }
    id v10 = *(id *)(v8 + 32);
  }
  uint64_t v9 = (uint64_t)v10;
LABEL_12:
  swift_release();
  id v11 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvis);
  *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvis) = v9;

  uint64_t v12 = (__IOHIDManager *)*(id *)(v1 + v5);
  IOHIDManagerOpen(v12, 0);
}

BOOL sub_100170688()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer;
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer];
  if (v3)
  {
    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      CFSetRef v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)CFSetRef v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Another instance of Jarvis monitoring is running, this is unusual - not starting another instance", v6, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    sub_100170454();
    CFSetRef v7 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_workQueue];
    *(void *)(swift_allocObject() + 16) = v1;
    objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
    id v8 = v7;
    uint64_t v9 = v1;
    uint64_t v10 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
    id v4 = *(NSObject **)&v1[v2];
    *(void *)&v1[v2] = v10;
  }

  return v3 == 0;
}

void sub_1001707D0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DockStatus();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  os_log_type_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for JarvisEventHistory(0);
  __chkstk_darwin(v6 - 8);
  id v8 = ((char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvis);
  if (v9)
  {
    CFIndex pReportLength = 91;
    uint64_t v10 = *(uint8_t **)(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_reportBuffer);
    id v11 = v9;
    if (IOHIDDeviceGetReport(v11, kIOHIDReportTypeFeature, 2, v10, &pReportLength))
    {
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        unint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v14 = 0;
        os_log_type_t v15 = "Failed to get HID device report";
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 2u);
        swift_slowDealloc();
        goto LABEL_21;
      }
      goto LABEL_21;
    }
    if (pReportLength != 91)
    {
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        unint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v14 = 0;
        os_log_type_t v15 = "Report length is not valid";
        goto LABEL_20;
      }
LABEL_21:

LABEL_22:
      return;
    }
    if (*v10 != 2)
    {
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        unint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v14 = 0;
        os_log_type_t v15 = "Report doesn't contain valid report ID";
        goto LABEL_20;
      }
      goto LABEL_21;
    }
    unint64_t v19 = sub_1001F9AB4((char *)v10, 91);
    sub_10016FBC8((uint64_t)v19, v8);
    uint64_t v20 = OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer;
    int64_t v21 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer);
    if (v21)
    {
      id v22 = v21;
      dispatch thunk of RepeatingTimer.timeSinceInit()();
      double v24 = v23;

      BOOL v25 = sub_100170E68((uint64_t)v8, INFINITY);
      if (v24 > 5.0)
      {
        os_log_type_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          id v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v28 = 0;
          id v29 = "Jarvis: monitoring done, not docked but still connecting";
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v26, v27, v29, v28, 2u);
          swift_slowDealloc();
          goto LABEL_27;
        }
        goto LABEL_27;
      }
      if (v24 > 2.0 && v25)
      {
        os_log_type_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          id v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v28 = 0;
          id v29 = "Jarvis: monitoring done, docked and connecting";
          goto LABEL_26;
        }
LABEL_27:

        (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DockStatus.Docked(_:), v2);
        uint64_t v30 = a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus;
        swift_beginAccess();
        (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v30, v5, v2);
        swift_endAccess();
LABEL_32:
        uint64_t v35 = *(void (**)(uint64_t))(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisCallback);
        if (v35)
        {
          swift_retain();
          v35(1);
          sub_1000BF118((uint64_t)v35);
        }
        IOHIDManagerClose(*(IOHIDManagerRef *)(a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager), 0);
        long long v36 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = 0;

        sub_100171AEC((uint64_t)v8);
        return;
      }
    }
    if (!sub_100170E68((uint64_t)v8, 60.0))
    {
      sub_100171AEC((uint64_t)v8);
      goto LABEL_22;
    }
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DockStatus.Docked(_:), v2);
    uint64_t v31 = a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v31, v5, v2);
    swift_endAccess();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Jarvis: docked", v34, 2u);
      swift_slowDealloc();
    }

    goto LABEL_32;
  }
  os_log_t v37 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v16, "Jarvis: no devices found", v17, 2u);
    swift_slowDealloc();
  }
  os_log_t v18 = v37;
}

BOOL sub_100170E68(uint64_t a1, double a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(void *)(v3 + 16)) {
    return 1;
  }
  if (*(unsigned char *)(v3 + 32) != 1) {
    return 0;
  }
  double v5 = (double)*(unint64_t *)(v3 + 40);
  uint64_t v6 = (_DWORD *)(v2 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_clockTimebase);
  swift_beginAccess();
  LODWORD(v7) = *v6;
  LODWORD(v8) = v6[1];
  double v9 = v5 * (double)v7 / (double)v8 / 1000000000.0;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Secs since last Jarvis event is %f", v12, 0xCu);
    swift_slowDealloc();
  }

  return v9 < a2;
}

uint64_t DockDetector.newStatus(_:monitorJarvisCallback:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v8 - 8);
  uint64_t v28 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DockStatus();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  id v24 = *(id *)&v3[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_workQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v3;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v15 + v14, (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  os_log_type_t v16 = (uint64_t *)(v15 + ((v13 + v14 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v18 = v25;
  uint64_t v17 = v26;
  *os_log_type_t v16 = v25;
  v16[1] = v17;
  aBlock[4] = sub_100171820;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  uint64_t aBlock[3] = &unk_100278C18;
  unint64_t v19 = _Block_copy(aBlock);
  id v20 = v24;
  int64_t v21 = v3;
  sub_1000CC298(v18);
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = &_swiftEmptyArrayStorage;
  sub_100171B48((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v28);
  return swift_release();
}

void sub_100171354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a4;
  uint64_t v31 = a3;
  uint64_t v6 = type metadata accessor for DockStatus();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v34 = a1;
  uint64_t v13 = a1 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_dockStatus;
  swift_beginAccess();
  unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v32 = v13;
  v14(v12, v13, v6);
  sub_100171B48(&qword_1002AAE80, (void (*)(uint64_t))&type metadata accessor for DockStatus);
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v33 = a2;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v15 = v35;
  uint64_t v16 = v36;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v12, v6);
  if (v15 == v16)
  {
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Dock status has not changed, returning", v20, 2u);
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v21 = v34;
  v14(v10, v33, v6);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
  if (v22 == enum case for DockStatus.Undocked(_:))
  {
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 104))(v12, v22, v6);
    uint64_t v23 = v32;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v23, v12, v6);
    swift_endAccess();
    IOHIDManagerClose(*(IOHIDManagerRef *)(v21 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_hidManager), 0);
    id v24 = *(void **)(v21 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer);
    *(void *)(v21 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisTimer) = 0;

    return;
  }
  if (v22 != enum case for DockStatus.DockedRSSI(_:))
  {
    if (v22 != enum case for DockStatus.Docked(_:))
    {
      v17(v10, v6);
      return;
    }
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 104))(v12, v22, v6);
  uint64_t v25 = v32;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v25, v12, v6);
  swift_endAccess();
  uint64_t v26 = v31;
  if (v31 && sub_100170688())
  {
    uint64_t v27 = (void *)(v21 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisCallback);
    uint64_t v28 = *(void *)(v21 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_jarvisCallback);
    uint64_t v29 = v30;
    *uint64_t v27 = v26;
    v27[1] = v29;
    swift_retain();
    sub_1000BF118(v28);
  }
}

uint64_t sub_10017173C()
{
  uint64_t v1 = type metadata accessor for DockStatus();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(void *)(v0 + v5)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v5 + 16, v3 | 7);
}

void sub_100171820()
{
  uint64_t v1 = *(void *)(type metadata accessor for DockStatus() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + v2;
  unint64_t v5 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];

  sub_100171354(v3, v4, v6, v7);
}

uint64_t sub_1001718B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001718C4()
{
  return swift_release();
}

void DockDetector.init()()
{
}

uint64_t sub_1001718FC()
{
  return type metadata accessor for DockDetector(0);
}

uint64_t sub_100171934()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for DockStatus();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_100171A54()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100171A8C()
{
  sub_1001707D0(*(void *)(v0 + 16));
}

uint64_t type metadata accessor for JarvisEventHistory(uint64_t a1)
{
  return sub_100171AB4(a1, qword_1002AAEE0);
}

uint64_t sub_100171AB4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100171AEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JarvisEventHistory(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100171B48(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for JarvisEvent()
{
  return &type metadata for JarvisEvent;
}

uint64_t *sub_100171BA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    a1[1] = a2[1];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_100171C90(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100171D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t sub_100171DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_100171E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100171EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100171F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100171F70);
}

uint64_t sub_100171F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100172020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100172034);
}

uint64_t sub_100172034(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001720DC()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100172188(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3 - 37 < 0xFFFFFFFFFFFFFFDDLL)
  {
    __break(1u);
LABEL_75:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v4 = HIBYTE(a2) & 0xF;
  uint64_t v5 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v6) {
    goto LABEL_75;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0) {
        uint64_t v8 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v9 = sub_10017D740(v8, v5, a3);
      char v11 = v10 & 1;
      goto LABEL_11;
    }
    v41[0] = result;
    v41[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (v4)
      {
        uint64_t v23 = v4 - 1;
        if (v23)
        {
          unint64_t v13 = 0;
          unsigned __int8 v24 = a3 + 48;
          unsigned __int8 v25 = a3 + 55;
          unsigned __int8 v26 = a3 + 87;
          if (a3 > 0xA)
          {
            unsigned __int8 v24 = 58;
          }
          else
          {
            unsigned __int8 v26 = 97;
            unsigned __int8 v25 = 65;
          }
          uint64_t v27 = (unsigned __int8 *)v41 + 1;
          char v11 = 1;
          do
          {
            unsigned int v28 = *v27;
            if (v28 < 0x30 || v28 >= v24)
            {
              if (v28 < 0x41 || v28 >= v25)
              {
                uint64_t v9 = 0;
                if (v28 < 0x61 || v28 >= v26) {
                  goto LABEL_11;
                }
                char v29 = -87;
              }
              else
              {
                char v29 = -55;
              }
            }
            else
            {
              char v29 = -48;
            }
            if (!is_mul_ok(v13, a3)) {
              goto LABEL_73;
            }
            unint64_t v30 = v13 * a3;
            unsigned __int8 v31 = v28 + v29;
            BOOL v22 = __CFADD__(v30, v31);
            unint64_t v13 = v30 + v31;
            if (v22) {
              goto LABEL_73;
            }
            ++v27;
            --v23;
          }
          while (v23);
LABEL_72:
          char v11 = 0;
          uint64_t v9 = (unsigned __int8 *)v13;
          goto LABEL_11;
        }
        goto LABEL_73;
      }
    }
    else
    {
      if (result != 45)
      {
        if (v4)
        {
          unint64_t v13 = 0;
          unsigned __int8 v32 = a3 + 48;
          unsigned __int8 v33 = a3 + 55;
          unsigned __int8 v34 = a3 + 87;
          if (a3 > 0xA)
          {
            unsigned __int8 v32 = 58;
          }
          else
          {
            unsigned __int8 v34 = 97;
            unsigned __int8 v33 = 65;
          }
          uint64_t v35 = (unsigned __int8 *)v41;
          char v11 = 1;
          while (1)
          {
            unsigned int v36 = *v35;
            if (v36 < 0x30 || v36 >= v32)
            {
              if (v36 < 0x41 || v36 >= v33)
              {
                uint64_t v9 = 0;
                if (v36 < 0x61 || v36 >= v34) {
                  goto LABEL_11;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            if (!is_mul_ok(v13, a3)) {
              goto LABEL_73;
            }
            unint64_t v38 = v13 * a3;
            unsigned __int8 v39 = v36 + v37;
            BOOL v22 = __CFADD__(v38, v39);
            unint64_t v13 = v38 + v39;
            if (v22) {
              goto LABEL_73;
            }
            ++v35;
            if (!--v4) {
              goto LABEL_72;
            }
          }
        }
        goto LABEL_73;
      }
      if (v4)
      {
        uint64_t v12 = v4 - 1;
        if (v12)
        {
          unint64_t v13 = 0;
          unsigned __int8 v14 = a3 + 48;
          unsigned __int8 v15 = a3 + 55;
          unsigned __int8 v16 = a3 + 87;
          if (a3 > 0xA)
          {
            unsigned __int8 v14 = 58;
          }
          else
          {
            unsigned __int8 v16 = 97;
            unsigned __int8 v15 = 65;
          }
          uint64_t v17 = (unsigned __int8 *)v41 + 1;
          char v11 = 1;
          while (1)
          {
            unsigned int v18 = *v17;
            if (v18 < 0x30 || v18 >= v14)
            {
              if (v18 < 0x41 || v18 >= v15)
              {
                uint64_t v9 = 0;
                if (v18 < 0x61 || v18 >= v16) {
                  goto LABEL_11;
                }
                char v19 = -87;
              }
              else
              {
                char v19 = -55;
              }
            }
            else
            {
              char v19 = -48;
            }
            if (!is_mul_ok(v13, a3)) {
              break;
            }
            unint64_t v20 = v13 * a3;
            unsigned __int8 v21 = v18 + v19;
            BOOL v22 = v20 >= v21;
            unint64_t v13 = v20 - v21;
            if (!v22) {
              break;
            }
            ++v17;
            if (!--v12) {
              goto LABEL_72;
            }
          }
        }
LABEL_73:
        uint64_t v9 = 0;
        char v11 = 1;
        goto LABEL_11;
      }
      __break(1u);
    }
    __break(1u);
    return result;
  }
  uint64_t v9 = sub_10017D108(result, a2, a3);
  char v11 = v40;
LABEL_11:
  swift_bridgeObjectRelease();
  if (v11) {
    return 0;
  }
  else {
    return (uint64_t)v9;
  }
}

uint64_t sub_1001724B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = Strong;
    if (*(void *)(a2 + 16))
    {
      sub_1000B9BD4(v2, (uint64_t)v13, (uint64_t *)&unk_1002AB310);
      char v9 = *(unsigned char *)(v8 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      if (v9)
      {
        sub_100172628(v8, a2, (uint64_t)v13, a1);
      }
      else
      {
        sub_100136F60();
        if (!v4)
        {
          sub_100172628(v8, a2, (uint64_t)v13, a1);
          sub_1001376E0();
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      sub_1000A61E4((uint64_t)v13, (uint64_t *)&unk_1002AB310);
    }
    else
    {
      sub_1000B8650();
      swift_allocError();
      *uint64_t v12 = 2;
      swift_willThrow();
    }
    return swift_release();
  }
  else
  {
    sub_1000B8650();
    swift_allocError();
    *char v10 = 2;
    return swift_willThrow();
  }
}

uint64_t sub_100172628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v31[3] = a4;
  uint64_t v6 = sub_1000CAE44(63, 0xE100000000000000, *(void *)(a2 + 16));
  uint64_t v7 = sub_10017292C((uint64_t)v6);
  char v9 = v8;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  strcpy((char *)v31, "INSERT INTO ");
  BYTE5(v31[1]) = 0;
  HIWORD(v31[1]) = -5120;
  uint64_t v10 = *(void *)(*(void *)a3 + 16);
  char v11 = *(void **)(*(void *)a3 + 24);
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 10272;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  v14._uint64_t countAndFlagsBits = sub_10017292C(a2);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0x5345554C41562029;
  v15._object = (void *)0xEA00000000002820;
  String.append(_:)(v15);
  v16._uint64_t countAndFlagsBits = v7;
  v16._object = v9;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 15145;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  uint64_t v18 = v31[0];
  unint64_t v19 = v31[1];
  type metadata accessor for DBStatement();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = 0;
  swift_weakInit();
  swift_weakAssign();
  swift_retain();
  uint64_t v21 = sub_1001379D0(v18, v19);
  swift_bridgeObjectRelease();
  uint64_t v22 = swift_release();
  *(void *)(inited + 16) = v21;
  if (!v21)
  {
    sub_100137F94();
    swift_allocError();
    *(_DWORD *)uint64_t v26 = 1;
LABEL_7:
    *(unsigned char *)(v26 + 4) = 2;
    swift_willThrow();
    return swift_release();
  }
  __chkstk_darwin(v22);
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  if ((v30 & 1) == 0)
  {
    sub_100137F94();
    swift_allocError();
    *(_DWORD *)uint64_t v26 = 2;
    goto LABEL_7;
  }
  unint64_t v23 = sub_100135F48(101);
  if ((v24 & 1) == 0)
  {
    swift_setDeallocating();
    return sub_100135D94();
  }
  int v27 = v23;
  unint64_t v28 = HIDWORD(v23);
  LODWORD(v31[0]) = v23;
  BYTE4(v31[0]) = BYTE4(v23);
  sub_100137F94();
  swift_willThrowTypedImpl();
  swift_allocError();
  *(_DWORD *)uint64_t v29 = v27;
  *(unsigned char *)(v29 + 4) = v28;
  return swift_release();
}

uint64_t sub_10017292C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = swift_bridgeObjectRetain() + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v3._uint64_t countAndFlagsBits = 0;
      v3._object = (void *)0xE000000000000000;
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 += 16;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_100172A50(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v8 = v7;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v16 = Strong;
    if (*(void *)(a2 + 16))
    {
      sub_1000B9BD4(v6, (uint64_t)v21, (uint64_t *)&unk_1002AB310);
      char v17 = *(unsigned char *)(v16 + 24);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v17)
      {
        sub_100172C28(v16, a1, a2, (uint64_t)v21, a3, a4, a5, a6);
      }
      else
      {
        sub_100136F60();
        if (!v8)
        {
          sub_100172C28(v16, a1, a2, (uint64_t)v21, a3, a4, a5, a6);
          sub_1001376E0();
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      sub_1000A61E4((uint64_t)v21, (uint64_t *)&unk_1002AB310);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000B8650();
      swift_allocError();
      *unint64_t v20 = 2;
      swift_willThrow();
      return swift_release();
    }
  }
  else
  {
    sub_1000B8650();
    swift_allocError();
    unsigned char *v18 = 2;
    return swift_willThrow();
  }
}

uint64_t sub_100172C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  Swift::String v13 = sub_100175424(a3);
  uint64_t v14 = v13[2];
  if (v14 == *(void *)(a3 + 16))
  {
    unsigned int v44 = a6;
    uint64_t v45 = a7;
    uint64_t v15 = 0;
    if (v14)
    {
      uint64_t v16 = (void **)(v13 + 5);
      char v17 = (void **)(a3 + 40);
      unint64_t v18 = 0xE000000000000000;
      do
      {
        uint64_t v19 = HIBYTE(v18) & 0xF;
        if (v19) {
          uint64_t v20 = 8236;
        }
        else {
          uint64_t v20 = 0;
        }
        if (v19) {
          uint64_t v21 = (void *)0xE200000000000000;
        }
        else {
          uint64_t v21 = (void *)0xE000000000000000;
        }
        swift_bridgeObjectRetain();
        v22._uint64_t countAndFlagsBits = v20;
        v22._object = v21;
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = v15;
        unint64_t v23 = v18;
        uint64_t v46 = (uint64_t)*(v17 - 1);
        uint64_t v47 = *v17;
        swift_bridgeObjectRetain();
        v25._uint64_t countAndFlagsBits = 656424224;
        v25._object = (void *)0xE400000000000000;
        String.append(_:)(v25);
        uint64_t v26 = (uint64_t)*(v16 - 1);
        int v27 = *v16;
        swift_bridgeObjectRetain();
        v28._uint64_t countAndFlagsBits = v26;
        v28._object = v27;
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        v29._uint64_t countAndFlagsBits = 39;
        v29._object = (void *)0xE100000000000000;
        String.append(_:)(v29);
        char v30 = v47;
        unint64_t v48 = v23;
        swift_bridgeObjectRetain();
        v31._uint64_t countAndFlagsBits = v46;
        v31._object = v30;
        String.append(_:)(v31);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v15 = v24;
        unint64_t v18 = v48;
        v16 += 2;
        v17 += 2;
        --v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v18 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void *)(*(void *)a4 + 16);
    uint64_t v35 = *(void **)(*(void *)a4 + 24);
    swift_bridgeObjectRetain();
    v36._uint64_t countAndFlagsBits = v34;
    v36._object = v35;
    String.append(_:)(v36);
    swift_bridgeObjectRelease();
    v37._uint64_t countAndFlagsBits = 0x2054455320;
    v37._object = (void *)0xE500000000000000;
    String.append(_:)(v37);
    swift_bridgeObjectRetain();
    v38._uint64_t countAndFlagsBits = v15;
    v38._object = (void *)v18;
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = a5;
    v39._object = v44;
    String.append(_:)(v39);
    v40._uint64_t countAndFlagsBits = 2112800;
    v40._object = (void *)0xE300000000000000;
    String.append(_:)(v40);
    v41._uint64_t countAndFlagsBits = v45;
    v41._object = a8;
    String.append(_:)(v41);
    v42._uint64_t countAndFlagsBits = 59;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    swift_bridgeObjectRetain();
    v43._uint64_t countAndFlagsBits = 0x20455245485720;
    v43._object = (void *)0xE700000000000000;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100137DC0(0x20455441445055, 0xE700000000000000, 0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100137F94();
    swift_allocError();
    *(_DWORD *)uint64_t v32 = 2;
    *(unsigned char *)(v32 + 4) = 2;
    return swift_willThrow();
  }
}

uint64_t sub_100172F40()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong;
    sub_1000B9BD4(v0, (uint64_t)v7, (uint64_t *)&unk_1002AB350);
    if (*(unsigned char *)(v4 + 24))
    {
      uint64_t v2 = sub_100173074(v4, (uint64_t)v7);
      swift_release();
    }
    else
    {
      sub_100136F60();
      if (!v1)
      {
        uint64_t v2 = sub_100173074(v4, (uint64_t)v7);
        sub_1001376E0();
      }
      swift_release();
    }
    sub_1000A61E4((uint64_t)v7, (uint64_t *)&unk_1002AB350);
  }
  else
  {
    sub_1000B8650();
    swift_allocError();
    unsigned char *v5 = 2;
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_100173074(uint64_t a1, uint64_t a2)
{
  unint64_t v21 = (unint64_t)_swiftEmptyArrayStorage;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  strcpy((char *)v20, "SELECT * FROM ");
  HIBYTE(v20[1]) = -18;
  uint64_t v3 = *(void *)(*(void *)a2 + 16);
  uint64_t v4 = *(void **)(*(void *)a2 + 24);
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v20[0];
  unint64_t v7 = v20[1];
  type metadata accessor for DBStatement();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = 0;
  swift_weakInit();
  swift_weakAssign();
  swift_retain();
  uint64_t v9 = sub_1001379D0(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(inited + 16) = v9;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = Strong;
    while (1)
    {
      if (!*(void *)(inited + 16))
      {
        swift_release();
        unint64_t v13 = 0x200000001;
        goto LABEL_14;
      }
      if ((*(unsigned char *)(v11 + 24) & 1) == 0)
      {
        swift_release();
        goto LABEL_13;
      }
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v12 = swift_release();
      if (LODWORD(v20[0]) != 100)
      {
        unint64_t v13 = LODWORD(v20[0]) | (unint64_t)&_mh_execute_header;
        goto LABEL_14;
      }
      __chkstk_darwin(v12);
      sub_1000992E8((uint64_t *)&unk_1002AB360);
      OS_dispatch_queue.sync<A>(execute:)();
      if (!v20[0]) {
        break;
      }
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v11 = swift_weakLoadStrong();
      if (!v11) {
        goto LABEL_13;
      }
    }
    sub_1000B8650();
    uint64_t v14 = swift_allocError();
    *char v17 = 2;
    swift_willThrow();
  }
  else
  {
LABEL_13:
    unint64_t v13 = 0x200000000;
LABEL_14:
    LODWORD(v20[0]) = v13;
    BYTE4(v20[0]) = BYTE4(v13);
    sub_100137F94();
    swift_willThrowTypedImpl();
    uint64_t v14 = swift_allocError();
    *(_DWORD *)uint64_t v15 = v13;
    *(unsigned char *)(v15 + 4) = BYTE4(v13);
  }
  v20[0] = v14;
  swift_errorRetain();
  sub_1000992E8(&qword_1002A8F70);
  if (swift_dynamicCast() && v19 == 1 && v18 == 101)
  {
    swift_errorRelease();
    swift_release();
    swift_errorRelease();
    return v21;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_willThrow();
    swift_setDeallocating();
    return sub_100135D94();
  }
}

void sub_100173420(unint64_t a1, const void *a2, const void *a3)
{
  unint64_t v7 = sub_100177250(a2, a3, 1);
  unint64_t v8 = v7;
  if (v7 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
    {
LABEL_3:
      if ((v8 & 0xC000000000000001) != 0)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_26:
          swift_once();
LABEL_11:
          uint64_t v23 = type metadata accessor for Logger();
          sub_100096F64(v23, (uint64_t)qword_1002AAF20);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          uint64_t v24 = Logger.logObject.getter();
          os_log_type_t v25 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v24, v25))
          {
            uint64_t v26 = swift_slowAlloc();
            v29[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v26 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v30 = sub_1000993AC((uint64_t)a2, (unint64_t)a3, v29);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v26 + 12) = 2080;
            if (a1) {
              uint64_t v27 = v3;
            }
            else {
              uint64_t v27 = 0x206E776F6E6B6E55;
            }
            if (a1) {
              unint64_t v28 = a1;
            }
            else {
              unint64_t v28 = 0xED0000726F727245;
            }
            swift_bridgeObjectRetain();
            uint64_t v30 = sub_1000993AC(v27, v28, v29);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to update peer key state number for %s: %s", (uint8_t *)v26, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();
          }
          else
          {

            swift_release();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          return;
        }
        uint64_t v9 = *(void *)(v8 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 128) = a1;
      sub_1000992E8((uint64_t *)&unk_1002A82D0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100240BE0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v11;
      uint64_t v12 = *(void *)(v9 + 96);
      unint64_t v13 = *(void *)(v9 + 104);
      *(void *)(inited + 72) = &type metadata for Data;
      *(void *)(inited + 48) = v12;
      *(void *)(inited + 56) = v13;
      sub_1000A618C(v12, v13);
      sub_1001E9E0C(inited);
      uint64_t v14 = swift_initStackObject();
      *(_OWORD *)(v14 + 16) = xmmword_100240BE0;
      *(void *)(v14 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v14 + 40) = v15;
      uint64_t v16 = sub_100176618();
      *(void *)(v14 + 72) = &type metadata for String;
      *(void *)(v14 + 48) = v16;
      *(void *)(v14 + 56) = v17;
      sub_1001E9E0C(v14);
      CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      CFDictionaryRef v19 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      OSStatus v20 = SecItemUpdate(isa, v19);

      if (!v20)
      {
        swift_release();
        return;
      }
      CFStringRef v21 = SecCopyErrorMessageString(v20, 0);
      if (v21)
      {
        Swift::String v22 = (__CFString *)v21;
        v29[1] = 0;
        static String._conditionallyBridgeFromObjectiveC(_:result:)();
      }
      uint64_t v3 = 0;
      a1 = 0;
      if (qword_1002A7BF0 == -1) {
        goto LABEL_11;
      }
      goto LABEL_26;
    }
  }
  else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }

  swift_bridgeObjectRelease();
}

void sub_100173888(uint64_t a1, unint64_t a2, const void *a3, const void *a4)
{
  unint64_t v9 = sub_100177250(a3, a4, 1);
  unint64_t v10 = v9;
  if (v9 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter())
    {
LABEL_3:
      if ((v10 & 0xC000000000000001) != 0)
      {
        uint64_t v11 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_26:
          swift_once();
LABEL_11:
          uint64_t v25 = type metadata accessor for Logger();
          sub_100096F64(v25, (uint64_t)qword_1002AAF20);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          uint64_t v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v26, v27))
          {
            uint64_t v28 = swift_slowAlloc();
            v31[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v28 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v32 = sub_1000993AC((uint64_t)a3, (unint64_t)a4, v31);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v28 + 12) = 2080;
            if (a2) {
              uint64_t v29 = v4;
            }
            else {
              uint64_t v29 = 0x206E776F6E6B6E55;
            }
            if (a2) {
              unint64_t v30 = a2;
            }
            else {
              unint64_t v30 = 0xED0000726F727245;
            }
            swift_bridgeObjectRetain();
            uint64_t v32 = sub_1000993AC(v29, v30, v31);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to update peer key state number for %s: %s", (uint8_t *)v28, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_release();
          }
          else
          {

            swift_release();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          return;
        }
        uint64_t v11 = *(void **)(v10 + 32);
        swift_retain();
      }
      swift_bridgeObjectRelease();
      v11[17] = a1;
      v11[18] = a2;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1000992E8((uint64_t *)&unk_1002A82D0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100240BE0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v13;
      uint64_t v14 = v11[12];
      unint64_t v15 = v11[13];
      *(void *)(inited + 72) = &type metadata for Data;
      *(void *)(inited + 48) = v14;
      *(void *)(inited + 56) = v15;
      sub_1000A618C(v14, v15);
      sub_1001E9E0C(inited);
      uint64_t v16 = swift_initStackObject();
      *(_OWORD *)(v16 + 16) = xmmword_100240BE0;
      *(void *)(v16 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v16 + 40) = v17;
      uint64_t v18 = sub_100176618();
      *(void *)(v16 + 72) = &type metadata for String;
      *(void *)(v16 + 48) = v18;
      *(void *)(v16 + 56) = v19;
      sub_1001E9E0C(v16);
      CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      CFDictionaryRef v21 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      OSStatus v22 = SecItemUpdate(isa, v21);

      if (!v22)
      {
        swift_release();
        return;
      }
      CFStringRef v23 = SecCopyErrorMessageString(v22, 0);
      if (v23)
      {
        uint64_t v24 = (__CFString *)v23;
        v31[1] = 0;
        static String._conditionallyBridgeFromObjectiveC(_:result:)();
      }
      uint64_t v4 = 0;
      a2 = 0;
      if (qword_1002A7BF0 == -1) {
        goto LABEL_11;
      }
      goto LABEL_26;
    }
  }
  else if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }

  swift_bridgeObjectRelease();
}

uint64_t sub_100173D08()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002AAF20);
  sub_100096F64(v0, (uint64_t)qword_1002AAF20);
  return Logger.init(subsystem:category:)();
}

double sub_100173D80(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v6 - 8);
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((int)a1 != a1 >> 32) {
        goto LABEL_7;
      }
      break;
    case 2uLL:
      if (*(void *)(a1 + 16) != *(void *)(a1 + 24)) {
        goto LABEL_7;
      }
      break;
    case 3uLL:
      return result;
    default:
      if ((a2 & 0xFF000000000000) != 0)
      {
LABEL_7:
        uint64_t v31 = a1;
        unint64_t v32 = a2;
        static String.Encoding.utf8.getter();
        sub_10017F494();
        uint64_t v8 = String.init<A>(bytes:encoding:)();
        if (v9)
        {
          uint64_t v10 = v8;
          unint64_t v11 = v9;
          if (a3)
          {
            uint64_t v12 = sub_100139D10(v8, v9);
            unint64_t v14 = v13;
            swift_bridgeObjectRelease();
            if (v14 >> 60 != 15)
            {
              sub_1000992E8(&qword_1002AB388);
              uint64_t v15 = swift_allocObject();
              *(void *)&double result = 1;
              *(_OWORD *)(v15 + 16) = xmmword_100240BE0;
              *(void *)(v15 + 32) = v12;
              *(void *)(v15 + 40) = v14;
            }
          }
          else
          {
            uint64_t v31 = 43;
            unint64_t v32 = 0xE100000000000000;
            __chkstk_darwin(v8);
            *(void *)&v30[-16] = &v31;
            swift_bridgeObjectRetain();
            uint64_t v16 = sub_10017C910(0x7FFFFFFFFFFFFFFFLL, 1, sub_10017F350, (uint64_t)&v30[-32], v10, v11);
            swift_bridgeObjectRelease();
            if (*(void *)(v16 + 16) == 2
              && (swift_bridgeObjectRetain(),
                  uint64_t v17 = static String._fromSubstring(_:)(),
                  unint64_t v19 = v18,
                  swift_bridgeObjectRelease(),
                  uint64_t v20 = sub_100139D10(v17, v19),
                  unint64_t v22 = v21,
                  swift_bridgeObjectRelease(),
                  v22 >> 60 != 15))
            {
              if (*(void *)(v16 + 16) < 2uLL)
              {
                __break(1u);
                JUMPOUT(0x10017409CLL);
              }
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v23 = static String._fromSubstring(_:)();
              unint64_t v25 = v24;
              swift_bridgeObjectRelease();
              uint64_t v26 = sub_100139D10(v23, v25);
              unint64_t v28 = v27;
              swift_bridgeObjectRelease();
              if (v28 >> 60 == 15)
              {
                sub_1000A9990(v20, v22);
              }
              else
              {
                sub_1000992E8(&qword_1002AB388);
                uint64_t v29 = swift_allocObject();
                *(void *)&double result = 2;
                *(_OWORD *)(v29 + 16) = xmmword_10023FD30;
                *(void *)(v29 + 32) = v20;
                *(void *)(v29 + 40) = v22;
                *(void *)(v29 + 48) = v26;
                *(void *)(v29 + 56) = v28;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
        }
      }
      break;
  }
  return result;
}

BOOL sub_1001740AC(char *a1, char *a2)
{
  return *(void *)&aIpkd[8 * *a1] == *(void *)&aIpkd[8 * *a2];
}

Swift::Int sub_1001740D0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)&aIpkd[8 * v1]);
  return Hasher._finalize()();
}

void sub_100174120()
{
  Hasher._combine(_:)(*(void *)&aIpkd[8 * *v0]);
}

Swift::Int sub_100174158()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)&aIpkd[8 * v1]);
  return Hasher._finalize()();
}

uint64_t *sub_1001741A4@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v2 = *result;
  if (*result == 1684762729) {
    char v3 = 0;
  }
  else {
    char v3 = 3;
  }
  if (v2 == 1684762731) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  if (v2 == 1684759156) {
    char v5 = 2;
  }
  else {
    char v5 = v4;
  }
  *a2 = v5;
  return result;
}

void sub_1001741EC(void *a1@<X8>)
{
  *a1 = *(void *)&aIpkd[8 * *v1];
}

uint64_t sub_100174204(sqlite3_stmt *a1)
{
  uint64_t v3 = sub_1000992E8(&qword_1002AAA20);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v67 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v69 = (char *)v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v1 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
  unint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v13(v1 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, 1, 1, v9);
  *(void *)(v1 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId) = 0;
  uint64_t v70 = v1;
  *(void *)(v1 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version) = 0;
  if (!sqlite3_column_text(a1, 1))
  {
    if (qword_1002A7BF0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100096F64(v24, (uint64_t)qword_1002AAF20);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v18, v25);
    uint64_t v16 = v70;
    uint64_t v20 = (void *)&unk_1002B1000;
    if (!v26) {
      goto LABEL_28;
    }
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v27 = 0;
    unint64_t v28 = "Unable to read identifier";
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v18, v25, v28, v27, 2u);
    goto LABEL_27;
  }
  uint64_t v68 = v9;
  if (!sqlite3_column_text(a1, 2))
  {
    if (qword_1002A7BF0 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100096F64(v29, (uint64_t)qword_1002AAF20);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v30 = os_log_type_enabled(v18, v25);
    uint64_t v16 = v70;
    uint64_t v20 = (void *)&unk_1002B1000;
    if (!v30) {
      goto LABEL_28;
    }
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v27 = 0;
    unint64_t v28 = "Unable to read peripheral identifier";
    goto LABEL_26;
  }
  if (!sqlite3_column_text(a1, 3))
  {
    if (qword_1002A7BF0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100096F64(v31, (uint64_t)qword_1002AAF20);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v32 = os_log_type_enabled(v18, v25);
    uint64_t v20 = (void *)&unk_1002B1000;
    uint64_t v16 = v70;
    if (!v32) {
      goto LABEL_28;
    }
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v27 = 0;
    unint64_t v28 = "Unable to read session Id";
    goto LABEL_26;
  }
  unint64_t v14 = sqlite3_column_text(a1, 4);
  if (!v14)
  {
    if (qword_1002A7BF0 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100096F64(v33, (uint64_t)qword_1002AAF20);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v34 = os_log_type_enabled(v18, v25);
    uint64_t v20 = &unk_1002B1000;
    uint64_t v16 = v70;
    if (!v34) {
      goto LABEL_28;
    }
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v27 = 0;
    unint64_t v28 = "Unable to read version";
    goto LABEL_26;
  }
  v67[1] = v14;
  String.init(cString:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v68;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v68) == 1)
  {
    sub_1000A61E4((uint64_t)v8, &qword_1002AAA20);
    uint64_t v16 = v70;
    if (qword_1002A7BF0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100096F64(v17, (uint64_t)qword_1002AAF20);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    uint64_t v20 = (void *)&unk_1002B1000;
    if (!os_log_type_enabled(v18, v19)) {
      goto LABEL_28;
    }
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    v71[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v21 = 136315138;
    uint64_t v22 = String.init(cString:)();
    v71[3] = sub_1000993AC(v22, v23, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Invalid UUID %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
LABEL_27:
    swift_slowDealloc();
LABEL_28:

    sub_1000A61E4(v16 + v20[192], &qword_1002AAA20);
    type metadata accessor for AccessoryKeystore.AccessoryPeripheralEntry();
    swift_deallocPartialClassInstance();
    return 0;
  }
  Swift::String v37 = v69;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v69, v8, v15);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v6, v37, v15);
  v13((uint64_t)v6, 0, 1, v15);
  swift_beginAccess();
  sub_10017F2A0((uint64_t)v6, v12);
  swift_endAccess();
  uint64_t v38 = String.init(cString:)();
  uint64_t v35 = v70;
  *(void *)(v70 + 16) = v38;
  *(void *)(v35 + 24) = v39;
  uint64_t result = String.init(cString:)();
  uint64_t v41 = v40;
  uint64_t v42 = HIBYTE(v40) & 0xF;
  uint64_t v43 = result & 0xFFFFFFFFFFFFLL;
  if ((v41 & 0x2000000000000000) != 0) {
    uint64_t v44 = v42;
  }
  else {
    uint64_t v44 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v44)
  {
    swift_bridgeObjectRelease();
    unint64_t v58 = 0;
    goto LABEL_69;
  }
  if ((v41 & 0x1000000000000000) != 0)
  {
    unint64_t v46 = (unint64_t)sub_10017D108(result, v41, 10);
    char v48 = v66;
LABEL_66:
    swift_bridgeObjectRelease();
    if (v48) {
      unint64_t v58 = 0;
    }
    else {
      unint64_t v58 = v46;
    }
LABEL_69:
    uint64_t v59 = v68;
    *(void *)(v35 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId) = v58;
    uint64_t v60 = String.init(cString:)();
    uint64_t v62 = sub_100172188(v60, v61, 0xAuLL);
    char v64 = v63;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v69, v59);
    if (v64) {
      uint64_t v65 = 0;
    }
    else {
      uint64_t v65 = v62;
    }
    *(void *)(v35 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version) = v65;
    return v35;
  }
  if ((v41 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      uint64_t v45 = (unsigned __int8 *)((v41 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v45 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    unint64_t v46 = (unint64_t)sub_10017D740(v45, v43, 10);
    char v48 = v47 & 1;
    goto LABEL_66;
  }
  v71[0] = result;
  v71[1] = v41 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (v42)
    {
      uint64_t v53 = v42 - 1;
      if (v53)
      {
        unint64_t v46 = 0;
        unint64_t v54 = (unsigned __int8 *)v71 + 1;
        while (1)
        {
          unsigned int v55 = *v54 - 48;
          if (v55 > 9) {
            break;
          }
          if (!is_mul_ok(v46, 0xAuLL)) {
            break;
          }
          BOOL v52 = __CFADD__(10 * v46, v55);
          unint64_t v46 = 10 * v46 + v55;
          if (v52) {
            break;
          }
          char v48 = 0;
          ++v54;
          if (!--v53) {
            goto LABEL_66;
          }
        }
      }
      goto LABEL_65;
    }
  }
  else
  {
    if (result != 45)
    {
      if (v42)
      {
        unint64_t v46 = 0;
        uint64_t v56 = v71;
        while (1)
        {
          unsigned int v57 = *(unsigned __int8 *)v56 - 48;
          if (v57 > 9) {
            break;
          }
          if (!is_mul_ok(v46, 0xAuLL)) {
            break;
          }
          BOOL v52 = __CFADD__(10 * v46, v57);
          unint64_t v46 = 10 * v46 + v57;
          if (v52) {
            break;
          }
          char v48 = 0;
          uint64_t v56 = (uint64_t *)((char *)v56 + 1);
          if (!--v42) {
            goto LABEL_66;
          }
        }
      }
      goto LABEL_65;
    }
    if (v42)
    {
      uint64_t v49 = v42 - 1;
      if (v49)
      {
        unint64_t v46 = 0;
        uint64_t v50 = (unsigned __int8 *)v71 + 1;
        while (1)
        {
          unsigned int v51 = *v50 - 48;
          if (v51 > 9) {
            break;
          }
          if (!is_mul_ok(v46, 0xAuLL)) {
            break;
          }
          BOOL v52 = 10 * v46 >= v51;
          unint64_t v46 = 10 * v46 - v51;
          if (!v52) {
            break;
          }
          char v48 = 0;
          ++v50;
          if (!--v49) {
            goto LABEL_66;
          }
        }
      }
LABEL_65:
      unint64_t v46 = 0;
      char v48 = 1;
      goto LABEL_66;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100174AF8(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AAA20);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v51 - v8;
  uint64_t v56 = a1;
  uint64_t v10 = sqlite3_bind_parameter_count(*(sqlite3_stmt **)(a1 + 16));
  uint64_t v11 = v10;
  uint64_t v57 = a2[2];
  if (v57 != (int)v10)
  {
    if (qword_1002A7BF0 == -1) {
      goto LABEL_41;
    }
    goto LABEL_66;
  }
  if ((int)v10 < 1)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    swift_once();
LABEL_41:
    uint64_t v39 = type metadata accessor for Logger();
    sub_100096F64(v39, (uint64_t)qword_1002AAF20);
    swift_bridgeObjectRetain();
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 67109376;
      LODWORD(v61) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 8) = 2048;
      uint64_t v61 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "SQL parameters list (%d) is not the same size as bound values (%ld)", (uint8_t *)v42, 0x12u);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    return 0;
  }
  uint64_t v51 = OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version;
  uint64_t v52 = OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId;
  uint64_t v12 = v53 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
  unint64_t v54 = v7;
  unsigned int v55 = a2 + 4;
  swift_beginAccess();
  int v13 = 1;
  while (1)
  {
    int v14 = v13;
    if (v13 == v11)
    {
      int v13 = 0;
      goto LABEL_8;
    }
    if (v13 == 0x7FFFFFFF)
    {
      __break(1u);
      goto LABEL_65;
    }
    ++v13;
LABEL_8:
    int v15 = v14 - 1;
    if (__OFSUB__(v14, 1))
    {
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      if (qword_1002A7BF0 != -1) {
        goto LABEL_68;
      }
      goto LABEL_59;
    }
    if (v15 < 0 || v57 <= v15) {
      goto LABEL_57;
    }
    uint64_t v16 = &v55[2 * v15];
    a2 = (void *)*v16;
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == 0x7265687069726570 && v17 == 0xEC00000064496C61;
    if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      int v58 = v14;
      int v59 = v13;
      sub_1000B9BD4(v12, (uint64_t)v9, &qword_1002AAA20);
      a2 = (void *)type metadata accessor for UUID();
      uint64_t v19 = *(a2 - 1);
      uint64_t v20 = *(uint64_t (**)(char *, uint64_t, void *))(v19 + 48);
      int v21 = v20(v9, 1, a2);
      sub_1000A61E4((uint64_t)v9, &qword_1002AAA20);
      if (v21 == 1) {
        goto LABEL_19;
      }
      uint64_t v22 = v9;
      uint64_t v23 = v11;
      uint64_t v24 = v12;
      uint64_t v25 = v12;
      uint64_t v26 = (uint64_t)v54;
      sub_1000B9BD4(v25, (uint64_t)v54, &qword_1002AAA20);
      if (v20((char *)v26, 1, a2) != 1)
      {
        UUID.uuidString.getter();
        (*(void (**)(uint64_t, void *))(v19 + 8))(v26, a2);
        uint64_t v12 = v24;
        uint64_t v11 = v23;
        uint64_t v9 = v22;
LABEL_19:
        NSString v27 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        unint64_t v28 = *(sqlite3_stmt **)(v56 + 16);
        a2 = v27;
        uint64_t v29 = (const char *)[a2 UTF8String];
        int v14 = v58;
        int v30 = sqlite3_bind_text(v28, v58, v29, -1, 0);
        int v13 = v59;
        if (v30)
        {
          if (qword_1002A7BF0 != -1) {
            swift_once();
          }
          uint64_t v43 = type metadata accessor for Logger();
          sub_100096F64(v43, (uint64_t)qword_1002AAF20);
          uint64_t v44 = Logger.logObject.getter();
          os_log_type_t v45 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v44, v45)) {
            goto LABEL_62;
          }
          unint64_t v46 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v46 = 0;
          char v47 = "Unable to bind peripheral UUID";
          goto LABEL_61;
        }
        goto LABEL_37;
      }
      __break(1u);
LABEL_68:
      swift_once();
LABEL_59:
      uint64_t v50 = type metadata accessor for Logger();
      sub_100096F64(v50, (uint64_t)qword_1002AAF20);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        unint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v46 = 0;
        char v47 = "Unable to bind version";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    BOOL v31 = a2 == (void *)0x696669746E656469 && v17 == 0xEA00000000007265;
    if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      NSString v32 = String._bridgeToObjectiveC()();
      uint64_t v33 = *(sqlite3_stmt **)(v56 + 16);
      a2 = v32;
      if (sqlite3_bind_text(v33, v14, (const char *)[a2 UTF8String], -1, 0))
      {
        if (qword_1002A7BF0 != -1) {
          swift_once();
        }
        uint64_t v48 = type metadata accessor for Logger();
        sub_100096F64(v48, (uint64_t)qword_1002AAF20);
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v44, v45)) {
          goto LABEL_62;
        }
        unint64_t v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v46 = 0;
        char v47 = "Unable to bind identifier";
LABEL_61:
        _os_log_impl((void *)&_mh_execute_header, v44, v45, v47, v46, 2u);
        swift_slowDealloc();

        return 0;
      }
      goto LABEL_37;
    }
    if (a2 == (void *)0x496E6F6973736573 && v17 == 0xE900000000000064
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      break;
    }
    if ((a2 != (void *)0x6E6F6973726576 || v17 != 0xE700000000000000)
      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      goto LABEL_38;
    }
    uint64_t v60 = *(void *)(v53 + v51);
    sub_10017F408();
    String.init<A>(_:radix:uppercase:)();
    NSString v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Swift::String v37 = *(sqlite3_stmt **)(v56 + 16);
    a2 = v36;
    if (sqlite3_bind_text(v37, v14, (const char *)[a2 UTF8String], -1, 0)) {
      goto LABEL_58;
    }
LABEL_37:

LABEL_38:
    if (v14 == v11) {
      return 1;
    }
  }
  uint64_t v60 = *(void *)(v53 + v52);
  sub_1000A9A00();
  String.init<A>(_:radix:uppercase:)();
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v35 = *(sqlite3_stmt **)(v56 + 16);
  a2 = v34;
  if (!sqlite3_bind_text(v35, v14, (const char *)[a2 UTF8String], -1, 0)) {
    goto LABEL_37;
  }
  if (qword_1002A7BF0 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100096F64(v49, (uint64_t)qword_1002AAF20);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v46 = 0;
    char v47 = "Unable to bind sessionId";
    goto LABEL_61;
  }
LABEL_62:

  return 0;
}

void *sub_100175424(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_1000992E8(&qword_1002AAA20);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  __chkstk_darwin(v5);
  uint64_t v41 = (uint64_t)&v35 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v36 = OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version;
    uint64_t v38 = OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId;
    uint64_t v39 = v6;
    uint64_t v9 = v2 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v37 = a1;
    uint64_t v10 = (uint64_t *)(a1 + 40);
    uint64_t v11 = _swiftEmptyArrayStorage;
    uint64_t v42 = v9;
    uint64_t v40 = v2;
    while (1)
    {
      uint64_t v13 = *(v10 - 1);
      uint64_t v12 = *v10;
      BOOL v14 = v13 == 0x696669746E656469 && v12 == 0xEA00000000007265;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      BOOL v21 = v13 == 0x7265687069726570 && v12 == 0xEC00000064496C61;
      if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        if (v13 == 0x496E6F6973736573 && v12 == 0xE900000000000064
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t v43 = *(void *)(v2 + v38);
          sub_1000A9A00();
        }
        else
        {
          if ((v13 != 0x6E6F6973726576 || v12 != 0xE700000000000000)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            goto LABEL_15;
          }
          uint64_t v43 = *(void *)(v2 + v36);
          sub_10017F408();
        }
        uint64_t v15 = String.init<A>(_:radix:uppercase:)();
        unint64_t v16 = v34;
        goto LABEL_9;
      }
      uint64_t v22 = v41;
      sub_1000B9BD4(v9, v41, &qword_1002AAA20);
      uint64_t v23 = type metadata accessor for UUID();
      uint64_t v24 = *(void *)(v23 - 8);
      uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
      int v26 = v25(v22, 1, v23);
      sub_1000A61E4(v22, &qword_1002AAA20);
      if (v26 == 1)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = sub_100102294(0, v11[2] + 1, 1, v11);
        }
        uint64_t v2 = v40;
        unint64_t v28 = v11[2];
        unint64_t v27 = v11[3];
        if (v28 >= v27 >> 1) {
          uint64_t v11 = sub_100102294((void *)(v27 > 1), v28 + 1, 1, v11);
        }
        v11[2] = v28 + 1;
        uint64_t v29 = &v11[2 * v28];
        v29[4] = 0;
        uint64_t v20 = v29 + 4;
        unint64_t v16 = 0xE000000000000000;
        goto LABEL_14;
      }
      uint64_t v30 = v39;
      sub_1000B9BD4(v42, v39, &qword_1002AAA20);
      uint64_t result = (void *)v25(v30, 1, v23);
      if (result == 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v15 = UUID.uuidString.getter();
      unint64_t v16 = v32;
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v30, v23);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v2 = v40;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v11 = sub_100102294(0, v11[2] + 1, 1, v11);
      }
LABEL_11:
      unint64_t v18 = v11[2];
      unint64_t v17 = v11[3];
      if (v18 >= v17 >> 1) {
        uint64_t v11 = sub_100102294((void *)(v17 > 1), v18 + 1, 1, v11);
      }
      v11[2] = v18 + 1;
      uint64_t v19 = &v11[2 * v18];
      v19[4] = v15;
      uint64_t v20 = v19 + 4;
LABEL_14:
      v20[1] = v16;
      uint64_t v9 = v42;
LABEL_15:
      v10 += 2;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        return v11;
      }
    }
    uint64_t v15 = *(void *)(v2 + 16);
    unint64_t v16 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
LABEL_9:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_100102294(0, v11[2] + 1, 1, v11);
    }
    goto LABEL_11;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100175950()
{
  swift_bridgeObjectRelease();
  sub_1000A61E4(v0 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, &qword_1002AAA20);

  return swift_deallocClassInstance();
}

uint64_t sub_1001759C4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(v2 + 40) = xmmword_100240D00;
  *(unsigned char *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0xE000000000000000;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0xE000000000000000;
  *(_OWORD *)(v2 + 96) = xmmword_100240D00;
  *(void *)(v2 + 112) = 0;
  *(void *)(v2 + 120) = 0xE000000000000000;
  *(_WORD *)(v2 + 128) = 0;
  *(void *)(v2 + 136) = 0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  *(void *)(v2 + 32) = [self pairingIdentity];
  return v2;
}

void sub_100175A30(uint64_t a1)
{
  uint64_t v2 = v1;
  *(_OWORD *)(v1 + 40) = xmmword_100240D00;
  *(unsigned char *)(v1 + 56) = 0;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0xE000000000000000;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 88) = 0xE000000000000000;
  *(_OWORD *)(v1 + 96) = xmmword_100240D00;
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0xE000000000000000;
  *(_WORD *)(v1 + 128) = 0;
  *(void *)(v1 + 136) = 0;
  *(void *)(v1 + 144) = 0;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(a1 + 16) || (unint64_t v6 = sub_10016DB60(v4, v5), (v7 & 1) == 0))
  {
    long long v86 = 0u;
    long long v87 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_100099C1C(*(void *)(a1 + 56) + 32 * v6, (uint64_t)&v86);
  swift_bridgeObjectRelease();
  if (!*((void *)&v87 + 1))
  {
LABEL_9:
    swift_bridgeObjectRelease();
    sub_1000A61E4((uint64_t)&v86, &qword_1002AA5F0);
LABEL_10:
    if (qword_1002A7BF0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100096F64(v12, (uint64_t)qword_1002AAF20);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v13, v14)) {
      goto LABEL_15;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    unint64_t v16 = "Unable to parse key chain account";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v16, v15, 2u);
    swift_slowDealloc();
LABEL_15:

    goto LABEL_16;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v10 = sub_10016DB60(v8, v9), (v11 & 1) != 0))
  {
    sub_100099C1C(*(void *)(a1 + 56) + 32 * v10, (uint64_t)&v86);
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v87 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000A61E4((uint64_t)&v86, &qword_1002AA5F0);
LABEL_26:
    if (qword_1002A7BF0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100096F64(v21, (uint64_t)qword_1002AAF20);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v13, v14)) {
      goto LABEL_15;
    }
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    unint64_t v16 = "Unable to parse key chain value";
    goto LABEL_14;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v19 = sub_10016DB60(v17, v18), (v20 & 1) != 0))
  {
    sub_100099C1C(*(void *)(a1 + 56) + 32 * v19, (uint64_t)&v86);
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v87 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000A61E4((uint64_t)&v86, &qword_1002AA5F0);
LABEL_39:
    if (qword_1002A7BF0 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100096F64(v23, (uint64_t)qword_1002AAF20);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v24, "Unable to parse key chain item type", v25, 2u);
      swift_slowDealloc();
    }
    unint64_t v27 = *((void *)&v85 + 1);
    uint64_t v26 = v85;
LABEL_44:
    sub_1000A6240(v26, v27);
    goto LABEL_15;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  switch((void)v85)
  {
    case 0x646B6274:
      uint64_t v84 = 1684759156;
      int v22 = 2;
      break;
    case 0x646B7069:
      uint64_t v84 = 1684762729;
      int v22 = 0;
      break;
    case 0x646B706BLL:
      uint64_t v84 = 1684762731;
      int v22 = 1;
      break;
    default:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1002A7BF0 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_100096F64(v34, (uint64_t)qword_1002AAF20);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 134217984;
        *(void *)&long long v86 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v13, v35, "Unable to parse key chain item accessory key type: %ld", v36, 0xCu);
        swift_slowDealloc();
      }
      unint64_t v27 = *((void *)&v85 + 1);
      uint64_t v26 = v85;
      goto LABEL_44;
  }
  type metadata accessor for AccessoryKeystore.AccessoryKeyItem();
  uint64_t inited = swift_initStackObject();
  swift_bridgeObjectRetain();
  sub_1001759C4(v85, *((uint64_t *)&v85 + 1));
  *(unsigned char *)(inited + 56) = v22;
  if (!v22)
  {
    uint64_t v83 = inited;
    sub_100173D80(v84, *((unint64_t *)&v85 + 1), 0);
    uint64_t v38 = v37;
    if (v37[2])
    {
      uint64_t v40 = v37[4];
      unint64_t v39 = v37[5];
      id v41 = objc_allocWithZone((Class)HMFPairingKey);
      sub_1000A618C(v40, v39);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v42 = [v41 initWithPairingKeyData:isa];
      sub_1000A6240(v40, v39);

      uint64_t v82 = v42;
      if (v42)
      {
        if (v38[2] < 2uLL)
        {
          __break(1u);
          return;
        }
        uint64_t v43 = v38[6];
        unint64_t v44 = v38[7];
        sub_1000A618C(v43, v44);
        swift_bridgeObjectRelease();
        id v45 = objc_allocWithZone((Class)HMFPairingKey);
        Class v46 = Data._bridgeToObjectiveC()().super.isa;
        id v47 = [v45 initWithPairingKeyData:v46];
        sub_1000A6240(v43, v44);

        if (v47)
        {
          id v48 = objc_allocWithZone((Class)HAPPairingIdentity);
          id v49 = v47;
          NSString v50 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v51 = [v48 initWithIdentifier:v50 publicKey:v82 privateKey:v49];

          uint64_t inited = v83;
          uint64_t v52 = *(void **)(v83 + 32);
          *(void *)(v83 + 32) = v51;

          goto LABEL_62;
        }
        swift_release();
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v79 = v84;
      unint64_t v80 = *((void *)&v85 + 1);
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v79 = v84;
      unint64_t v80 = *((void *)&v85 + 1);
    }
    sub_1000A6240(v79, v80);
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (v22 == 1)
  {
    swift_bridgeObjectRelease();
    sub_100173D80(v84, *((unint64_t *)&v85 + 1), 1);
    if (v29[2])
    {
      uint64_t v30 = v29[4];
      unint64_t v31 = v29[5];
      sub_1000A618C(v30, v31);
      swift_bridgeObjectRelease();
      uint64_t v32 = *(void *)(inited + 40);
      unint64_t v33 = *(void *)(inited + 48);
      *(void *)(inited + 40) = v30;
      *(void *)(inited + 48) = v31;
      sub_1000A6240(v32, v33);
      goto LABEL_62;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000A6240(v84, *((unint64_t *)&v85 + 1));
LABEL_16:
    sub_1000A6240(*(void *)(v2 + 40), *(void *)(v2 + 48));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000A6240(*(void *)(v2 + 96), *(void *)(v2 + 104));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for AccessoryKeystore.AccessoryKeyItem();
    swift_deallocPartialClassInstance();
    return;
  }
  swift_bridgeObjectRelease();
LABEL_62:
  uint64_t v53 = *(void *)(inited + 24);
  *(void *)(v2 + 16) = *(void *)(inited + 16);
  *(void *)(v2 + 24) = v53;
  uint64_t v54 = inited;
  unsigned int v55 = *(void **)(inited + 32);
  *(void *)(v2 + 32) = v55;
  uint64_t v56 = *(void *)(v54 + 40);
  unint64_t v57 = *(void *)(v54 + 48);
  uint64_t v58 = *(void *)(v2 + 40);
  unint64_t v59 = *(void *)(v2 + 48);
  *(void *)(v2 + 40) = v56;
  *(void *)(v2 + 48) = v57;
  swift_bridgeObjectRetain();
  id v60 = v55;
  sub_1000A618C(v56, v57);
  sub_1000A6240(v58, v59);
  *(unsigned char *)(v2 + 56) = *(unsigned char *)(v54 + 56);
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v63 = sub_10016DB60(v61, v62), (v64 & 1) != 0))
  {
    sub_100099C1C(*(void *)(a1 + 56) + 32 * v63, (uint64_t)&v86);
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v87 + 1))
  {
    if (swift_dynamicCast())
    {
      *(_OWORD *)(v2 + 64) = v85;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&v86, &qword_1002AA5F0);
  }
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v67 = sub_10016DB60(v65, v66), (v68 & 1) != 0))
  {
    sub_100099C1C(*(void *)(a1 + 56) + 32 * v67, (uint64_t)&v86);
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v87 + 1))
  {
    if (swift_dynamicCast())
    {
      *(_OWORD *)(v2 + 80) = v85;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&v86, &qword_1002AA5F0);
  }
  uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v71 = sub_10016DB60(v69, v70), (v72 & 1) != 0))
  {
    sub_100099C1C(*(void *)(a1 + 56) + 32 * v71, (uint64_t)&v86);
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v87 + 1))
  {
    if (swift_dynamicCast())
    {
      uint64_t v73 = *(void *)(v2 + 96);
      unint64_t v74 = *(void *)(v2 + 104);
      *(_OWORD *)(v2 + 96) = v85;
      sub_1000A6240(v73, v74);
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&v86, &qword_1002AA5F0);
  }
  uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v77 = sub_10016DB60(v75, v76), (v78 & 1) != 0))
  {
    sub_100099C1C(*(void *)(a1 + 56) + 32 * v77, (uint64_t)&v86);
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)&v87 + 1))
  {
    if (swift_dynamicCast())
    {
      sub_10017676C(v85, *((unint64_t *)&v85 + 1));
      sub_1000A6240(v84, *((unint64_t *)&v85 + 1));
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000A6240(v84, *((unint64_t *)&v85 + 1));
      swift_release();
    }
  }
  else
  {
    sub_1000A6240(v84, *((unint64_t *)&v85 + 1));
    swift_release();
    sub_1000A61E4((uint64_t)&v86, &qword_1002AA5F0);
  }
}

uint64_t sub_100176618()
{
  uint64_t v13 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = 43;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100240BE0;
  __int16 v3 = *(_WORD *)(v0 + 128);
  *(void *)(v2 + 56) = &type metadata for UInt16;
  *(void *)(v2 + 64) = &protocol witness table for UInt16;
  *(_WORD *)(v2 + 32) = v3;
  uint64_t v4 = String.init(format:_:)();
  unint64_t v6 = v5;
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = v13;
  uint64_t v9 = *(void **)(v0 + 144);
  if (v9)
  {
    uint64_t v10 = *(void *)(v0 + 136);
    swift_bridgeObjectRetain();
    v11._uint64_t countAndFlagsBits = 43;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v12._uint64_t countAndFlagsBits = v10;
    v12._object = v9;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

uint64_t sub_10017676C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_1000992E8(&qword_1002AAA20);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  Swift::String v11 = (char *)&v70 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v70 - v12;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v17 = __chkstk_darwin(v16);
  int v22 = (char *)&v70 - v21;
  uint64_t v23 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v23 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v23) {
    return 0;
  }
  uint64_t v71 = v20;
  uint64_t v72 = v19;
  uint64_t v24 = v17;
  uint64_t v73 = v2;
  uint64_t v74 = v18;
  v75[0] = 43;
  v75[1] = 0xE100000000000000;
  __chkstk_darwin(v17);
  *(&v70 - 2) = (uint64_t)v75;
  swift_bridgeObjectRetain();
  uint64_t v25 = (void *)sub_10017C910(0x7FFFFFFFFFFFFFFFLL, 1, sub_10017F350, (uint64_t)(&v70 - 4), a1, a2);
  uint64_t v26 = v25[2];
  if (!v26) {
    goto LABEL_35;
  }
  if (v26 == 2)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    if (v35 != 36) {
      goto LABEL_35;
    }
    uint64_t v36 = v24;
    swift_bridgeObjectRetain();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = v74;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v11, 1, v24) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = (uint64_t)v11;
      goto LABEL_16;
    }
    uint64_t v49 = v71;
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v71, v11, v36);
    uint64_t v50 = UUID.uuidString.getter();
    uint64_t v41 = v73;
    *(void *)(v73 + 112) = v50;
    *(void *)(v41 + 120) = v51;
    swift_bridgeObjectRelease();
    if (v25[2] < 2uLL)
    {
      __break(1u);
    }
    else
    {
      unint64_t v52 = v25[8];
      unint64_t v53 = v25[9];
      unint64_t v55 = v25[10];
      unint64_t v54 = v25[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if ((v53 ^ v52) >> 14)
      {
        int v56 = sub_10017D9BC(v52, v53, v55, v54, 16);
        if ((v56 & 0x1000000) != 0) {
          int v56 = sub_10017D018(v52, v53, v55, v54, 16);
        }
        int v42 = v56;
        swift_bridgeObjectRelease();
        if ((v42 & 0x10000) == 0)
        {
          (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v49, v36);
LABEL_29:
          *(_WORD *)(v41 + 128) = v42;
          return 1;
        }
LABEL_46:
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v49, v36);
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }
  uint64_t v27 = v24;
  if (v26 != 1)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    if (v38 != 36) {
      goto LABEL_35;
    }
    swift_bridgeObjectRetain();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v39 = v74;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v8, 1, v24) == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = (uint64_t)v8;
      goto LABEL_16;
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v72, v8, v24);
    uint64_t v57 = UUID.uuidString.getter();
    uint64_t v58 = v73;
    *(void *)(v73 + 112) = v57;
    *(void *)(v58 + 120) = v59;
    uint64_t result = swift_bridgeObjectRelease();
    if (v25[2] < 2uLL)
    {
      __break(1u);
    }
    else
    {
      uint64_t v61 = v25[8];
      uint64_t v62 = v25[9];
      if ((v62 ^ (unint64_t)v61) < 0x4000)
      {
LABEL_34:
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v27);
        goto LABEL_35;
      }
      unint64_t v64 = v25[10];
      unint64_t v63 = v25[11];
      uint64_t result = sub_10017D9BC(v25[8], v25[9], v64, v63, 16);
      if ((result & 0x1000000) != 0)
      {
        swift_bridgeObjectRetain();
        int v65 = sub_10017D018(v61, v62, v64, v63, 16);
        uint64_t result = swift_bridgeObjectRelease();
        if ((v65 & 0x10000) != 0) {
          goto LABEL_34;
        }
      }
      else
      {
        LOWORD(v65) = result;
        if ((result & 0x10000) != 0) {
          goto LABEL_34;
        }
      }
      *(_WORD *)(v58 + 128) = v65;
      if (v25[2] >= 3uLL)
      {
        uint64_t v66 = v58;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v67 = static String._fromSubstring(_:)();
        uint64_t v69 = v68;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v27);
        *(void *)(v66 + 136) = v67;
        *(void *)(v66 + 144) = v69;
        goto LABEL_41;
      }
    }
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = Substring.distance(from:to:)();
  swift_bridgeObjectRelease();
  unint64_t v29 = v25[4];
  unint64_t v30 = v25[5];
  unint64_t v32 = v25[6];
  unint64_t v31 = v25[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v28 != 36)
  {
    if ((v30 ^ v29) >> 14)
    {
      int v40 = sub_10017D9BC(v29, v30, v32, v31, 16);
      uint64_t v41 = v73;
      if ((v40 & 0x1000000) != 0) {
        int v40 = sub_10017D018(v29, v30, v32, v31, 16);
      }
      int v42 = v40;
      swift_bridgeObjectRelease();
      if ((v42 & 0x10000) != 0) {
        return 0;
      }
      goto LABEL_29;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    return 0;
  }
  static String._fromSubstring(_:)();
  swift_bridgeObjectRelease();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v33 = v74;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v13, 1, v27) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v22, v13, v27);
    uint64_t v43 = UUID.uuidString.getter();
    uint64_t v44 = v33;
    uint64_t v45 = v43;
    uint64_t v47 = v46;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v22, v27);
    uint64_t v48 = v73;
    *(void *)(v73 + 112) = v45;
    *(void *)(v48 + 120) = v47;
LABEL_41:
    swift_bridgeObjectRelease();
    return 1;
  }
  uint64_t v34 = (uint64_t)v13;
LABEL_16:
  sub_1000A61E4(v34, &qword_1002AAA20);
  return 0;
}

uint64_t sub_100176F40()
{
  swift_bridgeObjectRelease();

  sub_1000A6240(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000A6240(*(void *)(v0 + 96), *(void *)(v0 + 104));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100176F98()
{
  sub_100176F40();

  return swift_deallocClassInstance();
}

void *sub_100176FCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7BF0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100096F64(v6, (uint64_t)qword_1002AAF20);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Creating new controller key-pair!", v9, 2u);
    swift_slowDealloc();
  }

  UUID.init()();
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  type metadata accessor for AccessoryKeystore.AccessoryKeyItem();
  uint64_t v13 = (void *)swift_allocObject();
  sub_1001759C4(v10, v12);
  v13[8] = 0xD000000000000018;
  v13[9] = 0x80000001002394D0;
  swift_bridgeObjectRelease();
  v13[10] = 0xD00000000000002FLL;
  v13[11] = 0x80000001002394F0;
  swift_bridgeObjectRelease();
  if (sub_100178158((uint64_t)v13, 0, 0))
  {
    uint64_t v14 = v13[3];
    uint64_t v15 = (void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController);
    *uint64_t v15 = v13[2];
    v15[1] = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000B8650();
    swift_allocError();
    *uint64_t v16 = 3;
    swift_willThrow();
    swift_release();
  }
  return v13;
}

uint64_t sub_100177250(const void *a1, const void *a2, char a3)
{
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002425E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v8;
  type metadata accessor for CFString(0);
  uint64_t v10 = v9;
  *(void *)(inited + 72) = v9;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v11;
  uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_keyGroup);
  uint64_t v13 = *(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_keyGroup + 8);
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v12;
  *(void *)(inited + 104) = v13;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v14;
  uint64_t v15 = *(void *)&aIpkd[8 * a3];
  id v16 = objc_allocWithZone((Class)NSNumber);
  CFStringRef v17 = (id)kSecClassGenericPassword;
  swift_bridgeObjectRetain();
  id v18 = [v16 initWithInteger:v15];
  *(void *)(inited + 168) = sub_1000A67A4();
  *(void *)(inited + 144) = v18;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v19;
  *(void *)(inited + 216) = &type metadata for Bool;
  uint64_t v20 = 1;
  *(unsigned char *)(inited + 192) = 1;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v21;
  *(void *)(inited + 264) = &type metadata for Bool;
  *(unsigned char *)(inited + 240) = 1;
  *(void *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 280) = v22;
  *(void *)(inited + 312) = &type metadata for Bool;
  *(unsigned char *)(inited + 288) = 1;
  *(void *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 328) = v23;
  *(void *)(inited + 360) = v10;
  *(void *)(inited + 336) = kSecMatchLimitAll;
  CFStringRef v24 = (id)kSecMatchLimitAll;
  unint64_t v25 = sub_1001E9E0C(inited);
  if (a2)
  {
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v27;
    result[3] = &type metadata for String;
    result[0] = a1;
    result[1] = a2;
    sub_1000FE5FC(result, v53);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v52 = v25;
    sub_1001F4170(v53, v26, v20, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  result[0] = 0;
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v30 = SecItemCopyMatching(isa, result);

  uint64_t v31 = (uint64_t)&_swiftEmptyArrayStorage;
  if (!v30)
  {
    if (result[0])
    {
      *(CFTypeRef *)&v53[0] = result[0];
      swift_unknownObjectRetain();
      sub_1000992E8(&qword_1002AAD90);
      if (swift_dynamicCast())
      {
        if (qword_1002A7BF0 != -1) {
          swift_once();
        }
        uint64_t v32 = type metadata accessor for Logger();
        sub_100096F64(v32, (uint64_t)qword_1002AAF20);
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v35 = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Found single keychain result for query.", v35, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for AccessoryKeystore.AccessoryKeyItem();
        swift_allocObject();
        sub_100175A30(v52);
        if (v36)
        {
          uint64_t v37 = v36;
          sub_1000992E8(&qword_1002A8340);
          uint64_t v38 = swift_allocObject();
          *(_OWORD *)(v38 + 16) = xmmword_100240BF0;
          *(void *)(v38 + 32) = v37;
          *(void *)&v53[0] = v38;
          specialized Array._endMutation()();
LABEL_41:
          uint64_t v31 = *(void *)&v53[0];
          goto LABEL_42;
        }
        goto LABEL_25;
      }
      if (result[0])
      {
        *(CFTypeRef *)&v53[0] = result[0];
        swift_unknownObjectRetain();
        sub_1000992E8((uint64_t *)&unk_1002AB370);
        if (swift_dynamicCast())
        {
          if (qword_1002A7BF0 != -1) {
            swift_once();
          }
          uint64_t v39 = type metadata accessor for Logger();
          sub_100096F64(v39, (uint64_t)qword_1002AAF20);
          swift_bridgeObjectRetain_n();
          int v40 = Logger.logObject.getter();
          os_log_type_t v41 = static os_log_type_t.info.getter();
          unint64_t v42 = (unint64_t)v52 >> 62;
          if (!os_log_type_enabled(v40, v41))
          {

            swift_bridgeObjectRelease_n();
            goto LABEL_27;
          }
          uint64_t v20 = swift_slowAlloc();
          *(_DWORD *)uint64_t v20 = 134217984;
          if (v42) {
            goto LABEL_49;
          }
          uint64_t v43 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
          while (1)
          {
            swift_bridgeObjectRelease();
            *(void *)&v53[0] = v43;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "Found keychain results for query: %ld", (uint8_t *)v20, 0xCu);
            swift_slowDealloc();

LABEL_27:
            *(void *)&v53[0] = v31;
            if (v42)
            {
              if (v52 < 0) {
                int v40 = v52;
              }
              else {
                int v40 = (v52 & 0xFFFFFFFFFFFFFF8);
              }
              swift_bridgeObjectRetain();
              uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (!v31)
              {
LABEL_47:
                swift_bridgeObjectRelease();
                uint64_t v31 = (uint64_t)&_swiftEmptyArrayStorage;
                goto LABEL_42;
              }
            }
            else
            {
              uint64_t v31 = *(void *)((v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (!v31) {
                goto LABEL_47;
              }
            }
            if (v31 >= 1) {
              break;
            }
            __break(1u);
LABEL_49:
            swift_bridgeObjectRetain();
            uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          for (uint64_t i = 0; i != v31; ++i)
          {
            if ((v52 & 0xC000000000000001) != 0) {
              specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              swift_unknownObjectRetain();
            }
            swift_unknownObjectRetain();
            sub_1000992E8(&qword_1002AAD90);
            if (swift_dynamicCast())
            {
              type metadata accessor for AccessoryKeystore.AccessoryKeyItem();
              swift_allocObject();
              sub_100175A30(v51);
              if (v49)
              {
                swift_retain();
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                if (*(void *)((*(void *)&v53[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)&v53[0] & 0xFFFFFFFFFFFFFF8)
                                                                                                 + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
                swift_release();
              }
            }
            swift_unknownObjectRelease();
          }
          swift_bridgeObjectRelease();
          goto LABEL_41;
        }
      }
    }
    if (qword_1002A7BF0 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100096F64(v44, (uint64_t)qword_1002AAF20);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Could not find any keychain results for query.", v47, 2u);
      swift_slowDealloc();
    }

LABEL_25:
    uint64_t v31 = (uint64_t)&_swiftEmptyArrayStorage;
  }
LABEL_42:
  swift_unknownObjectRelease();
  return v31;
}

uint64_t sub_100177A3C(uint64_t a1, char a2)
{
  uint64_t v5 = *(const void **)(a1 + 16);
  uint64_t v6 = *(const void **)(a1 + 24);
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_100177250(v5, v6, a2 & 1);
  swift_bridgeObjectRelease();
  if (!(v7 >> 62))
  {
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_43:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v42) {
    goto LABEL_43;
  }
LABEL_3:
  if ((v7 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_47:
      swift_once();
LABEL_26:
      uint64_t v32 = type metadata accessor for Logger();
      sub_100096F64(v32, (uint64_t)qword_1002AAF20);
      swift_bridgeObjectRetain();
      swift_retain_n();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v43 = v2;
        uint64_t v35 = swift_slowAlloc();
        v44[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136315650;
        if (a2) {
          uint64_t v36 = 1919247728;
        }
        else {
          uint64_t v36 = 0x676E6972696170;
        }
        if (a2) {
          unint64_t v37 = 0xE400000000000000;
        }
        else {
          unint64_t v37 = 0xE700000000000000;
        }
        uint64_t v45 = sub_1000993AC(v36, v37, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2080;
        uint64_t v39 = *(void *)(a1 + 16);
        unint64_t v38 = *(void *)(a1 + 24);
        swift_bridgeObjectRetain();
        uint64_t v45 = sub_1000993AC(v39, v38, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 22) = 2080;
        if (v6) {
          uint64_t v40 = v43;
        }
        else {
          uint64_t v40 = 0x206E776F6E6B6E55;
        }
        if (v6) {
          unint64_t v41 = (unint64_t)v6;
        }
        else {
          unint64_t v41 = 0xED0000726F727245;
        }
        swift_bridgeObjectRetain();
        uint64_t v45 = sub_1000993AC(v40, v41, v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unable to update %s keychain item for identfier %s: %s", (uint8_t *)v35, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      return 0;
    }
    uint64_t v8 = *(void **)(v7 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  BOOL v9 = *(void *)(a1 + 16) == v8[2] && *(void *)(a1 + 24) == v8[3];
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    swift_release();
    return 0;
  }
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v11;
  uint64_t v12 = v8[12];
  unint64_t v13 = v8[13];
  *(void *)(inited + 72) = &type metadata for Data;
  *(void *)(inited + 48) = v12;
  *(void *)(inited + 56) = v13;
  sub_1000A618C(v12, v13);
  sub_1001E9E0C(inited);
  uint64_t v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_100240BE0;
  *(void *)(v14 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v14 + 40) = v15;
  uint64_t v16 = sub_10017DFA4(a1, a2 & 1);
  *(void *)(v14 + 72) = &type metadata for Data;
  *(void *)(v14 + 48) = v16;
  *(void *)(v14 + 56) = v17;
  sub_1001E9E0C(v14);
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CFDictionaryRef v19 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v20 = SecItemUpdate(isa, v19);

  if (v20)
  {
    CFStringRef v21 = SecCopyErrorMessageString(v20, 0);
    if (v21)
    {
      uint64_t v22 = (__CFString *)v21;
      v44[1] = 0;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();
    }
    uint64_t v2 = 0;
    uint64_t v6 = 0;
    if (qword_1002A7BF0 == -1) {
      goto LABEL_26;
    }
    goto LABEL_47;
  }
  if (qword_1002A7BF0 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_100096F64(v23, (uint64_t)qword_1002AAF20);
  swift_retain_n();
  CFStringRef v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315394;
    if (*(unsigned char *)(a1 + 56)) {
      uint64_t v27 = 1919247728;
    }
    else {
      uint64_t v27 = 0x676E6972696170;
    }
    if (*(unsigned char *)(a1 + 56)) {
      unint64_t v28 = 0xE400000000000000;
    }
    else {
      unint64_t v28 = 0xE700000000000000;
    }
    uint64_t v45 = sub_1000993AC(v27, v28, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v29 = *(void *)(a1 + 16);
    unint64_t v30 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    uint64_t v45 = sub_1000993AC(v29, v30, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Successfully updated %s keychain item for identfier %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    return 1;
  }
  else
  {

    swift_release_n();
    swift_release();
    return 1;
  }
}

uint64_t sub_100178158(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = v3;
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240D10;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v8;
  type metadata accessor for CFString(0);
  uint64_t v10 = v9;
  *(void *)(inited + 72) = v9;
  *(void *)(inited + 48) = kSecClassGenericPassword;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v11;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_keyGroup);
  uint64_t v13 = *(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_keyGroup + 8);
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v12;
  *(void *)(inited + 104) = v13;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v14;
  *(void *)(inited + 168) = v10;
  *(void *)(inited + 144) = kSecAttrAccessibleAfterFirstUnlock;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 184) = v15;
  uint64_t v16 = *(void *)&aIpkd[8 * *(char *)(a1 + 56)];
  id v17 = objc_allocWithZone((Class)NSNumber);
  CFStringRef v18 = (id)kSecClassGenericPassword;
  swift_bridgeObjectRetain();
  CFStringRef v19 = (id)kSecAttrAccessibleAfterFirstUnlock;
  id v20 = [v17 initWithInteger:v16];
  *(void *)(inited + 216) = sub_1000A67A4();
  *(void *)(inited + 192) = v20;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v21;
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v23 = *(void *)(a1 + 72);
  *(void *)(inited + 264) = &type metadata for String;
  *(void *)(inited + 240) = v22;
  *(void *)(inited + 248) = v23;
  *(void *)(inited + 272) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 280) = v24;
  uint64_t v25 = *(void *)(a1 + 80);
  uint64_t v26 = *(void *)(a1 + 88);
  *(void *)(inited + 312) = &type metadata for String;
  *(void *)(inited + 288) = v25;
  *(void *)(inited + 296) = v26;
  *(void *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 328) = v27;
  uint64_t v28 = *(void *)(a1 + 16);
  uint64_t v29 = *(void *)(a1 + 24);
  *(void *)(inited + 360) = &type metadata for String;
  *(void *)(inited + 336) = v28;
  *(void *)(inited + 344) = v29;
  *(void *)(inited + 368) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 376) = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_10017DFA4(a1, a2);
  *(void *)(inited + 408) = &type metadata for Data;
  *(void *)(inited + 384) = v31;
  *(void *)(inited + 392) = v32;
  sub_1001E9E0C(inited);
  if (a2)
  {
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;
    uint64_t v68 = &type metadata for String;
    *(void *)&long long v67 = sub_100176618();
    *((void *)&v67 + 1) = v36;
    sub_1000FE5FC(&v67, v66);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1001F4170(v66, v33, v35, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v39 = SecItemAdd(isa, 0);

  if (v39)
  {
    if ((a3 & 1) != 0 && (v39 == -25296 || v39 == -25299))
    {
      char v40 = sub_100177A3C(a1, a2 & 1);
    }
    else
    {
      CFStringRef v41 = SecCopyErrorMessageString(v39, 0);
      if (v41)
      {
        uint64_t v42 = (__CFString *)v41;
        long long v67 = 0uLL;
        static String._conditionallyBridgeFromObjectiveC(_:result:)();

        unint64_t v43 = *((void *)&v67 + 1);
        uint64_t v44 = v67;
      }
      else
      {
        uint64_t v44 = 0;
        unint64_t v43 = 0;
      }
      if (qword_1002A7BF0 != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      sub_100096F64(v53, (uint64_t)qword_1002AAF20);
      swift_bridgeObjectRetain();
      swift_retain_n();
      unint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v65 = v44;
        uint64_t v56 = swift_slowAlloc();
        *(void *)&long long v67 = swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 136315650;
        if (*(unsigned char *)(a1 + 56)) {
          uint64_t v57 = 1919247728;
        }
        else {
          uint64_t v57 = 0x676E6972696170;
        }
        if (*(unsigned char *)(a1 + 56)) {
          unint64_t v58 = 0xE400000000000000;
        }
        else {
          unint64_t v58 = 0xE700000000000000;
        }
        *(void *)&v66[0] = sub_1000993AC(v57, v58, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 12) = 2080;
        uint64_t v59 = *(void *)(a1 + 16);
        unint64_t v60 = *(void *)(a1 + 24);
        swift_bridgeObjectRetain();
        *(void *)&v66[0] = sub_1000993AC(v59, v60, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 22) = 2080;
        if (v43) {
          uint64_t v61 = v65;
        }
        else {
          uint64_t v61 = 0x206E776F6E6B6E55;
        }
        if (v43) {
          unint64_t v62 = v43;
        }
        else {
          unint64_t v62 = 0xED0000726F727245;
        }
        swift_bridgeObjectRetain();
        *(void *)&v66[0] = sub_1000993AC(v61, v62, (uint64_t *)&v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Unable to add %s keychain item for identfier %s: %s", (uint8_t *)v56, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      char v40 = 0;
    }
  }
  else
  {
    if (qword_1002A7BF0 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100096F64(v45, (uint64_t)qword_1002AAF20);
    swift_retain_n();
    os_log_type_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      *(void *)&long long v67 = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315394;
      if (*(unsigned char *)(a1 + 56)) {
        uint64_t v49 = 1919247728;
      }
      else {
        uint64_t v49 = 0x676E6972696170;
      }
      if (*(unsigned char *)(a1 + 56)) {
        unint64_t v50 = 0xE400000000000000;
      }
      else {
        unint64_t v50 = 0xE700000000000000;
      }
      *(void *)&v66[0] = sub_1000993AC(v49, v50, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 12) = 2080;
      uint64_t v51 = *(void *)(a1 + 16);
      unint64_t v52 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      *(void *)&v66[0] = sub_1000993AC(v51, v52, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Successfully added %s keychain item for identfier %s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    char v40 = 1;
  }
  return v40 & 1;
}

unint64_t sub_100178930(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_peripherals);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!((unint64_t)*v5 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    unint64_t v2 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_table);
    uint64_t v15 = qword_1002A7B70;
    swift_retain();
    if (v15 == -1)
    {
LABEL_27:
      swift_weakInit();
      unint64_t v22 = v2;
      swift_weakAssign();
      sub_1000EA2DC((uint64_t)&v22, (uint64_t)v23, (uint64_t *)&unk_1002AB350);
      unint64_t result = sub_100172F40();
      unint64_t v2 = result;
      if (result >> 62) {
        goto LABEL_59;
      }
      uint64_t v17 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v17) {
        goto LABEL_29;
      }
LABEL_50:
      swift_bridgeObjectRelease();
      sub_1000A61E4((uint64_t)v23, (uint64_t *)&unk_1002AB350);
      return 0;
    }
LABEL_57:
    swift_once();
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_26;
  }
LABEL_3:
  if ((v6 & 0xC000000000000001) != 0) {
    goto LABEL_55;
  }
  if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v8 = *(void *)(v6 + 32);
  swift_retain();
LABEL_6:
  BOOL v9 = *(void *)(v8 + 16) == a1 && *(void *)(v8 + 24) == a2;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return v8;
  }
  swift_release();
  if (v7 == 1) {
    goto LABEL_26;
  }
  uint64_t v10 = 5;
  while (1)
  {
    unint64_t v11 = v10 - 4;
    if ((v6 & 0xC000000000000001) != 0)
    {
      uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v12 = __OFADD__(v11, 1);
      uint64_t v13 = v10 - 3;
      if (v12) {
        goto LABEL_54;
      }
      goto LABEL_20;
    }
    if (v11 >= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      break;
    }
    uint64_t v8 = *(void *)(v6 + 8 * v10);
    swift_retain();
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v10 - 3;
    if (v12)
    {
LABEL_54:
      __break(1u);
LABEL_55:
      uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_6;
    }
LABEL_20:
    BOOL v14 = *(void *)(v8 + 16) == a1 && *(void *)(v8 + 24) == a2;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_11;
    }
    swift_release();
    ++v10;
    if (v13 == v7) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_59:
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = swift_bridgeObjectRelease();
  if (!v17) {
    goto LABEL_50;
  }
LABEL_29:
  if ((v2 & 0xC000000000000001) != 0) {
    goto LABEL_62;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v8 = *(void *)(v2 + 32);
    swift_retain();
    while (1)
    {
      if (*(void *)(v8 + 16) == a1 && *(void *)(v8 + 24) == a2
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_35:
        swift_bridgeObjectRelease();
        sub_1000A61E4((uint64_t)v23, (uint64_t *)&unk_1002AB350);
        return v8;
      }
      unint64_t result = swift_release();
      if (v17 == 1) {
        goto LABEL_50;
      }
      uint64_t v18 = 5;
      while (1)
      {
        unint64_t v19 = v18 - 4;
        if ((v2 & 0xC000000000000001) == 0) {
          break;
        }
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v12 = __OFADD__(v19, 1);
        uint64_t v20 = v18 - 3;
        if (v12) {
          goto LABEL_61;
        }
LABEL_44:
        BOOL v21 = *(void *)(v8 + 16) == a1 && *(void *)(v8 + 24) == a2;
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_35;
        }
        unint64_t result = swift_release();
        ++v18;
        if (v20 == v17) {
          goto LABEL_50;
        }
      }
      if (v19 >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_64;
      }
      uint64_t v8 = *(void *)(v2 + 8 * v18);
      swift_retain();
      BOOL v12 = __OFADD__(v19, 1);
      uint64_t v20 = v18 - 3;
      if (!v12) {
        goto LABEL_44;
      }
LABEL_61:
      __break(1u);
LABEL_62:
      uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
  }
  __break(1u);
LABEL_64:
  __break(1u);
  return result;
}

void sub_100178D18(const void *a1, const void *a2, char a3)
{
  unint64_t v6 = sub_100177250(a1, a2, 1);
  unint64_t v7 = v6;
  unint64_t v29 = (unint64_t)a2;
  if (v6 >> 62)
  {
LABEL_27:
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = v7 & 0xC000000000000001;
      uint64_t v10 = 4;
      unint64_t v30 = v7;
      do
      {
        uint64_t v11 = v10 - 4;
        if (v9)
        {
          uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v13 = v10 - 3;
          if (__OFADD__(v11, 1)) {
            goto LABEL_26;
          }
        }
        else
        {
          uint64_t v12 = *(void *)(v7 + 8 * v10);
          swift_retain();
          uint64_t v13 = v10 - 3;
          if (__OFADD__(v11, 1))
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
        }
        uint64_t v14 = *(void *)(v12 + 112);
        unint64_t v3 = *(void *)(v12 + 120);
        uint64_t v15 = HIBYTE(v3) & 0xF;
        if ((v3 & 0x2000000000000000) == 0) {
          uint64_t v15 = v14 & 0xFFFFFFFFFFFFLL;
        }
        if (v15)
        {
          swift_bridgeObjectRetain_n();
          unint64_t v4 = sub_100177250((const void *)v14, (const void *)v3, 0);
          swift_bridgeObjectRelease();
          if (v4 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v16)
            {
LABEL_18:
              if (qword_1002A7BF0 != -1) {
                goto LABEL_45;
              }
              goto LABEL_19;
            }
          }
          else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            goto LABEL_18;
          }
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          unint64_t v7 = v30;
        }
        else
        {
          swift_release();
        }
        ++v10;
      }
      while (v13 != v8);
    }
  }
  swift_bridgeObjectRelease();
  if (qword_1002A7BF0 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100096F64(v21, (uint64_t)qword_1002AAF20);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled((os_log_t)v14, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    unint64_t v3 = (unint64_t)(v23 + 12);
    swift_bridgeObjectRetain();
    sub_1000993AC((uint64_t)a1, v29, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v14, v22, "Unable to find controller associated with accessory %s.  Returning default controller key-pair.", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v24 = sub_100177250(0, 0, 0);
  unint64_t v25 = v24;
  if (v24 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_35;
    }
LABEL_40:
    swift_bridgeObjectRelease();
    if (a3)
    {
      sub_100176FCC();
    }
    else
    {
      sub_1000B8650();
      swift_allocError();
      unsigned char *v26 = 1;
      swift_willThrow();
    }
    return;
  }
  if (!*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_40;
  }
LABEL_35:
  if ((v25 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_38;
  }
  if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_38:
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
LABEL_45:
  swift_once();
LABEL_19:
  uint64_t v17 = type metadata accessor for Logger();
  sub_100096F64(v17, (uint64_t)qword_1002AAF20);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315394;
    swift_bridgeObjectRetain();
    sub_1000993AC(v14, v3, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_1000993AC((uint64_t)a1, v29, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Found controller %s for given accessory identifier: %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  if ((v4 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_25;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_25:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  __break(1u);
}

unint64_t sub_100179324(const void *a1, const void *a2)
{
  unint64_t result = sub_100177250(a1, a2, 1);
  unint64_t v3 = result;
  if (!(result >> 62))
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    sub_1000B8650();
    swift_allocError();
    *os_log_type_t v22 = 1;
    return swift_willThrow();
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = v3 & 0xC000000000000001;
    unint64_t v7 = &unk_1002A7000;
    unint64_t v23 = v3;
    do
    {
      if (v6)
      {
        uint64_t v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v13 = *(void **)(v3 + 8 * v5 + 32);
        swift_retain();
      }
      if (v7[382] != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100096F64(v14, (uint64_t)qword_1002AAF20);
      swift_retain();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        uint64_t v18 = v4;
        unint64_t v19 = v6;
        uint64_t v20 = v13[2];
        unint64_t v21 = v13[3];
        swift_bridgeObjectRetain();
        *(void *)(v17 + 4) = sub_1000993AC(v20, v21, &v24);
        swift_release();
        unint64_t v6 = v19;
        uint64_t v4 = v18;
        unint64_t v3 = v23;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Removing accessory key item for %s", (uint8_t *)v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v7 = (void *)&unk_1002A7000;
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      ++v5;
      sub_1000992E8((uint64_t *)&unk_1002A82D0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100240BE0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v9;
      uint64_t v10 = v13[12];
      unint64_t v11 = v13[13];
      *(void *)(inited + 72) = &type metadata for Data;
      *(void *)(inited + 48) = v10;
      *(void *)(inited + 56) = v11;
      sub_1000A618C(v10, v11);
      sub_1001E9E0C(inited);
      CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      SecItemDelete(isa);
      swift_release();
    }
    while (v4 != v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100179658(const void *a1, const void *a2)
{
  unint64_t result = sub_100177250(a1, a2, 0);
  unint64_t v3 = result;
  if (!(result >> 62))
  {
    uint64_t v4 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v4 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v6 = v3 & 0xC000000000000001;
    unint64_t v7 = &unk_1002A7000;
    unint64_t v22 = v3;
    do
    {
      if (v6)
      {
        uint64_t v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v13 = *(void **)(v3 + 8 * v5 + 32);
        swift_retain();
      }
      if (v7[382] != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100096F64(v14, (uint64_t)qword_1002AAF20);
      swift_retain();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        uint64_t v18 = v4;
        unint64_t v19 = v6;
        uint64_t v20 = v13[2];
        unint64_t v21 = v13[3];
        swift_bridgeObjectRetain();
        *(void *)(v17 + 4) = sub_1000993AC(v20, v21, &v23);
        swift_release();
        unint64_t v6 = v19;
        uint64_t v4 = v18;
        unint64_t v3 = v22;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Removing controller key item for %s", (uint8_t *)v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v7 = (void *)&unk_1002A7000;
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      ++v5;
      sub_1000992E8((uint64_t *)&unk_1002A82D0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100240BE0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v9;
      uint64_t v10 = v13[12];
      unint64_t v11 = v13[13];
      *(void *)(inited + 72) = &type metadata for Data;
      *(void *)(inited + 48) = v10;
      *(void *)(inited + 56) = v11;
      sub_1000A618C(v10, v11);
      sub_1001E9E0C(inited);
      CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      SecItemDelete(isa);
      swift_release();
    }
    while (v4 != v5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_10017995C()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_keyGroup];
  *(void *)uint64_t v1 = 0xD000000000000020;
  *((void *)v1 + 1) = 0x8000000100234010;
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_table;
  type metadata accessor for DBTable();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0x7265687069726550;
  *(void *)(v3 + 24) = 0xEB00000000736C61;
  *(void *)&v0[v2] = v3;
  *(void *)&v0[OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_peripherals] = _swiftEmptyArrayStorage;
  uint64_t v4 = &v0[OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0xE000000000000000;
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for AccessoryKeystore();
  return [super init];
}

id sub_100179A4C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryKeystore();
  return [super dealloc];
}

uint64_t type metadata accessor for AccessoryKeystore()
{
  return self;
}

uint64_t sub_100179B18()
{
  return type metadata accessor for AccessoryKeystore.AccessoryPeripheralEntry();
}

uint64_t type metadata accessor for AccessoryKeystore.AccessoryPeripheralEntry()
{
  uint64_t result = qword_1002AB008;
  if (!qword_1002AB008) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100179B6C()
{
  sub_100179C18();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100179C18()
{
  if (!qword_1002AB018)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002AB018);
    }
  }
}

uint64_t type metadata accessor for AccessoryKeystore.AccessoryKeyItem()
{
  return self;
}

uint64_t sub_100179C94()
{
  if (qword_1002A7BF0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F64(v0, (uint64_t)qword_1002AAF20);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Attempting to fetch local keychain identity...", v3, 2u);
    swift_slowDealloc();
  }

  unint64_t v4 = sub_100177250(0, 0, 0);
  unint64_t v5 = v4;
  if (v4 >> 62)
  {
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    sub_1000B8650();
    swift_allocError();
    *uint64_t v9 = 1;
    return swift_willThrow();
  }
  uint64_t result = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!result) {
    goto LABEL_12;
  }
LABEL_7:
  if ((v5 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_10;
  }
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v7 = *(void *)(v5 + 32);
    swift_retain();
LABEL_10:
    swift_bridgeObjectRelease();
    id v8 = *(id *)(v7 + 32);
    swift_release();
    return (uint64_t)v8;
  }
  __break(1u);
  return result;
}

void sub_100179E6C()
{
  os_log_type_t v2 = v0;
  unint64_t v3 = sub_100177250(0, 0, 0);
  unint64_t v4 = v3;
  if (v3 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    unint64_t v11 = sub_100176FCC();
    if (!v1)
    {
      uint64_t v9 = (uint64_t)v11;
      goto LABEL_11;
    }
    return;
  }
  if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_13;
  }
LABEL_3:
  if (qword_1002A7BF0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100096F64(v5, (uint64_t)qword_1002AAF20);
  objc_super v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Found existing controller keychain item.", v8, 2u);
    swift_slowDealloc();
  }

  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_10;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v9 = *(void *)(v4 + 32);
    swift_retain();
LABEL_10:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v2 updateActiveControllerPairingIdentifier:v10];

LABEL_11:
    *(id *)(v9 + 32);
    swift_release();
    return;
  }
  __break(1u);
}

id sub_10017A068(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5 = a1;
  objc_super v6 = (void *)a4();

  return v6;
}

void sub_10017A1B4(void *a1, void *a2, void *a3, char a4, const void *a5, const void *a6)
{
  if (a6)
  {
    sub_100178D18(a5, a6, a4 & 1);
    if (!v6)
    {
      uint64_t v11 = v10;
      if (a3)
      {
        swift_bridgeObjectRetain();
        NSString v12 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v13 = v12;
        *a3 = v12;
      }
      if (a1)
      {
        id v14 = [*(id *)(v11 + 32) publicKey];
        id v15 = [v14 data];

        if (!v15)
        {
          __break(1u);
          goto LABEL_17;
        }
        id v16 = v15;
        *a1 = v15;
      }
      if (!a2) {
        goto LABEL_13;
      }
      id v17 = [*(id *)(v11 + 32) privateKey];

      if (!v17) {
        goto LABEL_13;
      }
      id v18 = [*(id *)(v11 + 32) privateKey];
      if (v18)
      {
        unint64_t v19 = v18;
        id v20 = [v18 data];

        if (v20)
        {
          id v21 = v20;
          *a2 = v20;
LABEL_13:
          swift_release();
          return;
        }
        goto LABEL_18;
      }
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
  else
  {
    sub_1000B8650();
    swift_allocError();
    *unint64_t v22 = 2;
    swift_willThrow();
  }
}

uint64_t sub_10017A850(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = v4;
    type metadata accessor for AccessoryKeystore.AccessoryKeyItem();
    uint64_t inited = swift_initStackObject();
    swift_bridgeObjectRetain();
    sub_1001759C4(a3, a4);
    *(unsigned char *)(inited + 56) = 1;
    *(void *)(inited + 64) = 0xD000000000000018;
    *(void *)(inited + 72) = 0x80000001002393E0;
    swift_bridgeObjectRelease();
    *(void *)(inited + 80) = 0xD000000000000039;
    *(void *)(inited + 88) = 0x8000000100239400;
    uint64_t result = swift_bridgeObjectRelease();
    if (a2 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v12 = *(void *)(inited + 40);
      unint64_t v13 = *(void *)(inited + 48);
      *(void *)(inited + 40) = a1;
      *(void *)(inited + 48) = a2;
      sub_1000A618C(a1, a2);
      sub_1000A6240(v12, v13);
      uint64_t v14 = *(void *)(v5 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController + 8);
      *(void *)(inited + 112) = *(void *)(v5 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController);
      *(void *)(inited + 120) = v14;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_WORD *)(inited + 128) = 0;
      sub_100178158(inited, 1, 1);
      return swift_release();
    }
  }
  else
  {
    sub_1000B8650();
    swift_allocError();
    *id v15 = 2;
    return swift_willThrow();
  }
  return result;
}

void sub_10017AADC(void *a1)
{
  if (!a1)
  {
    sub_1000B8650();
    swift_allocError();
    *id v20 = 2;
    swift_willThrow();
    return;
  }
  id v2 = a1;
  id v3 = [v2 controllerKeyIdentifier];
  if (!v3)
  {
    sub_1000B8650();
    swift_allocError();
    char v22 = 2;
LABEL_15:
    *id v21 = v22;
    swift_willThrow();

    return;
  }
  uint64_t v4 = v3;
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  id v8 = [v2 identifier];
  uint64_t v9 = (const void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  unint64_t v12 = sub_100177250(v9, v11, 1);
  swift_bridgeObjectRelease();
  if (!(v12 >> 62))
  {
    if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v23)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000B8650();
    swift_allocError();
    char v22 = 1;
    goto LABEL_15;
  }
LABEL_5:
  if ((v12 & 0xC000000000000001) != 0)
  {
    unint64_t v13 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    unint64_t v13 = *(void **)(v12 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = (void *)v13[4];
  v13[4] = v2;
  id v15 = v2;

  v13[14] = v5;
  v13[15] = v7;
  swift_bridgeObjectRelease();
  id v16 = [v15 identifier];
  id v17 = (const void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  sub_100179324(v17, v19);
  if (v1)
  {

    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100178158((uint64_t)v13, 1, 0);

    swift_release();
  }
}

uint64_t sub_10017ADF8(const void *a1, const void *a2, void *a3)
{
  if (a2)
  {
    unint64_t v4 = sub_100177250(a1, a2, 1);
    unint64_t v5 = v4;
    if (v4 >> 62) {
      goto LABEL_16;
    }
    for (uint64_t i = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v7 = 4;
      while (1)
      {
        uint64_t v8 = v7 - 4;
        if ((v5 & 0xC000000000000001) == 0) {
          break;
        }
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v9 = __OFADD__(v8, 1);
        uint64_t v10 = v7 - 3;
        if (v9) {
          goto LABEL_15;
        }
LABEL_10:
        if (a3)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          NSString v12 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v13 = v12;
          *a3 = v12;
          swift_release();
          return 1;
        }
        swift_release();
        ++v7;
        if (v10 == i) {
          goto LABEL_12;
        }
      }
      swift_retain();
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v7 - 3;
      if (!v9) {
        goto LABEL_10;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      ;
    }
LABEL_12:
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_10017B0CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v56 = a2;
  uint64_t v5 = sub_1000992E8(&qword_1002AAA20);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v54 = (char *)&v48 - v10;
  __chkstk_darwin(v9);
  NSString v12 = (char *)&v48 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v48 - v18;
  sub_1000B9BD4(a1, (uint64_t)v12, &qword_1002AAA20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_1000A61E4((uint64_t)v12, &qword_1002AAA20);
    sub_1000B8650();
    uint64_t v20 = swift_allocError();
    *id v21 = 2;
    uint64_t v59 = v20;
    return swift_willThrow();
  }
  else
  {
    uint64_t v52 = v14;
    uint64_t v53 = v19;
    uint64_t v51 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t result = v51(v19, v12, v13);
    if (a3)
    {
      uint64_t v23 = v56;
      unint64_t v24 = sub_100178930(v56, a3);
      if (v24)
      {
        unint64_t v55 = v24;
        unint64_t v25 = v53;
        if (qword_1002A7BF0 != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        sub_100096F64(v26, (uint64_t)qword_1002AAF20);
        uint64_t v27 = v52;
        (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v17, v25, v13);
        swift_bridgeObjectRetain_n();
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        int v50 = v29;
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = swift_slowAlloc();
          uint64_t v49 = swift_slowAlloc();
          v58[0] = v49;
          *(_DWORD *)uint64_t v30 = 136315394;
          os_log_t v48 = v28;
          swift_bridgeObjectRetain();
          uint64_t v57 = sub_1000993AC(v23, a3, v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v30 + 12) = 2080;
          uint64_t v31 = UUID.uuidString.getter();
          uint64_t v57 = sub_1000993AC(v31, v32, v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v13);
          uint64_t v28 = v48;
          _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v50, "Saving peripheral identifier for %s: %s.", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v25 = v53;
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v13);
        }

        uint64_t v37 = (uint64_t)v54;
        v51(v54, v25, v13);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56))(v37, 0, 1, v13);
        sub_1000EA2DC(v37, (uint64_t)v8, &qword_1002AAA20);
        uint64_t v38 = v55 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
        swift_beginAccess();
        sub_10017F2A0((uint64_t)v8, v38);
        swift_endAccess();
      }
      else
      {
        if (qword_1002A7BF0 != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        sub_100096F64(v33, (uint64_t)qword_1002AAF20);
        swift_bridgeObjectRetain_n();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          v58[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v36 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v57 = sub_1000993AC(v56, a3, v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Saving new peripheral identifier for %s.", v36, 0xCu);
          swift_arrayDestroy();
          uint64_t v23 = v56;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v39 = v52;
        type metadata accessor for AccessoryKeystore.AccessoryPeripheralEntry();
        uint64_t v40 = swift_allocObject();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56))(v40 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier, 1, 1, v13);
        *(void *)(v40 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId) = 0;
        *(void *)(v40 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version) = 0;
        *(void *)(v40 + 16) = v23;
        *(void *)(v40 + 24) = a3;
        uint64_t v41 = (uint64_t)v54;
        sub_1000B9BD4(a1, (uint64_t)v54, &qword_1002AAA20);
        uint64_t v42 = v40 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        sub_10017F2A0(v41, v42);
        swift_endAccess();
        unint64_t v43 = v55;
        uint64_t v44 = (void *)(v55 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_peripherals);
        swift_beginAccess();
        swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v44 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v44 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
        uint64_t v45 = *(void *)(v43 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_table);
        uint64_t v46 = qword_1002A7B70;
        swift_retain();
        if (v46 != -1) {
          swift_once();
        }
        swift_weakInit();
        uint64_t v57 = v45;
        swift_weakAssign();
        sub_1000EA2DC((uint64_t)&v57, (uint64_t)v58, (uint64_t *)&unk_1002AB310);
        uint64_t v47 = v59;
        sub_1001724B4(v40, (uint64_t)&off_100274C20);
        uint64_t v59 = v47;
        sub_1000A61E4((uint64_t)v58, (uint64_t *)&unk_1002AB310);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v53, v13);
      }
      return swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

unint64_t sub_10017BAA0(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_1000992E8(&qword_1002AAA20);
  unint64_t result = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    unint64_t result = sub_100178930(a1, a2);
    if (result)
    {
      unint64_t v9 = result;
      if (qword_1002A7BF0 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_100096F64(v10, (uint64_t)qword_1002AAF20);
      swift_bridgeObjectRetain_n();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v18 = v2;
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        v19[0] = swift_slowAlloc();
        id v17 = v8;
        *(_DWORD *)uint64_t v13 = 136315138;
        swift_bridgeObjectRetain();
        v19[4] = sub_1000993AC(a1, a2, v19);
        uint64_t v8 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Deleting peripheral identifier for %s.", v13, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v8, 1, 1, v14);
      uint64_t v15 = v9 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
      swift_beginAccess();
      sub_10017F2A0((uint64_t)v8, v15);
      swift_endAccess();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10017BDB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1002A7BF0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100096F64(v5, (uint64_t)qword_1002AAF20);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Deleting all peripheral identifiers.", v8, 2u);
    swift_slowDealloc();
  }

  unint64_t v9 = (unint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_peripherals);
  swift_beginAccess();
  unint64_t v10 = *v9;
  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_7;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v11 = result;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_7:
  if (v11 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      if ((v10 & 0xC000000000000001) != 0)
      {
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v14 = *(void *)(v10 + 8 * v13 + 32);
        swift_retain();
      }
      ++v13;
      uint64_t v15 = type metadata accessor for UUID();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v4, 1, 1, v15);
      uint64_t v16 = v14 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
      swift_beginAccess();
      sub_10017F2A0((uint64_t)v4, v16);
      swift_endAccess();
      swift_release();
    }
    while (v11 != v13);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_10017C130@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_1000992E8(&qword_1002AAA20);
  uint64_t result = __chkstk_darwin(v6 - 8);
  unint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    unint64_t v10 = sub_100178930(a1, a2);
    if (v10)
    {
      uint64_t v11 = v10 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
      swift_beginAccess();
      sub_1000B9BD4(v11, (uint64_t)v9, &qword_1002AAA20);
      uint64_t v12 = type metadata accessor for UUID();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v9, 1, v12) == 1)
      {
        sub_1000A61E4((uint64_t)v9, &qword_1002AAA20);
        sub_1000B8650();
        swift_allocError();
        *uint64_t v14 = 1;
        swift_willThrow();
        return swift_release();
      }
      else
      {
        swift_release();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v9, v12);
      }
    }
    else
    {
      if (qword_1002A7BF0 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_100096F64(v15, (uint64_t)qword_1002AAF20);
      swift_bridgeObjectRetain_n();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        v20[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315138;
        swift_bridgeObjectRetain();
        v20[3] = sub_1000993AC(a1, a2, v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to read peripheral identifier for %s: Key store does not exist.", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_1000B8650();
      swift_allocError();
      unsigned char *v19 = 1;
      return swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryKeystore.AccessoryKeyType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10017C880);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryKeystore.AccessoryKeyType()
{
  return &type metadata for AccessoryKeystore.AccessoryKeyType;
}

unint64_t sub_10017C8BC()
{
  unint64_t result = qword_1002AB300;
  if (!qword_1002AB300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AB300);
  }
  return result;
}

uint64_t sub_10017C910(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = &_swiftEmptyArrayStorage;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_10017CDB4(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(char **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = sub_100102060(0, *((void *)v13 + 2) + 1, 1, v13);
  }
  unint64_t v27 = *((void *)v13 + 2);
  unint64_t v26 = *((void *)v13 + 3);
  if (v27 >= v26 >> 1) {
    uint64_t v13 = sub_100102060((char *)(v26 > 1), v27 + 1, 1, v13);
  }
  *((void *)v13 + 2) = v27 + 1;
  uint64_t v28 = &v13[32 * v27];
  *((void *)v28 + 4) = v45;
  *((void *)v28 + 5) = v23;
  *((void *)v28 + 6) = v25;
  *((void *)v28 + 7) = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (*((void *)v13 + 2) != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_100102060(0, *((void *)v13 + 2) + 1, 1, v13);
    }
    unint64_t v39 = *((void *)v13 + 2);
    unint64_t v38 = *((void *)v13 + 3);
    if (v39 >= v38 >> 1) {
      uint64_t v13 = sub_100102060((char *)(v38 > 1), v39 + 1, 1, v13);
    }
    *((void *)v13 + 2) = v39 + 1;
    uint64_t v40 = &v13[32 * v39];
    *((void *)v40 + 4) = v31;
    *((void *)v40 + 5) = v33;
    *((void *)v40 + 6) = v35;
    *((void *)v40 + 7) = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10017CDB4(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(char **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_100102060(0, *((void *)v14 + 2) + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = *((void *)v14 + 2);
    unint64_t v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_100102060((char *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    *((void *)v14 + 2) = v17 + 1;
    char v18 = &v14[32 * v17];
    *((void *)v18 + 4) = v7;
    *((void *)v18 + 5) = v9;
    *((void *)v18 + 6) = v11;
    *((void *)v18 + 7) = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned __int8 *sub_10017CF10(unsigned __int8 *a1, uint64_t a2, int64_t a3)
{
  return sub_10017D740(a1, a2, a3);
}

uint64_t sub_10017CF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_10017F36C();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_1001EC814();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unsigned __int16 v13 = (unsigned __int16)sub_10017D1F0(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 & 0x1FF;
}

uint64_t sub_10017D018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_10017F36C();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_1001EC814();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unsigned int v13 = sub_10017D498(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 & 0x1FFFF;
}

unsigned __int8 *sub_10017D108(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_1001EC814();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v11 = sub_10017D740(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_10017D1F0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if ((v8 >> 8)) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v24 = (v24 * a3) + (v25 + v26);
            if ((v24 >> 8)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_10017D498(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int16 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if ((((unsigned __int16)v24 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int16 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int16 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_10017D740(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }
      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }
      if (result)
      {
        unint64_t v29 = 0;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }
            else
            {
              char v31 = -55;
            }
          }
          else
          {
            char v31 = -48;
          }
          if (!is_mul_ok(v29, a3)) {
            return 0;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }
  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  unsigned __int8 v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }
      else
      {
        char v23 = -55;
      }
    }
    else
    {
      char v23 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0;
    }
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10017D9BC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    LOWORD(result) = 0;
    unsigned __int8 v14 = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    unsigned int v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unsigned int v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_10017DB4C((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    unsigned __int8 v14 = BYTE2(result) & 1;
LABEL_8:
    LOBYTE(v13[0]) = (a4 & 0x1000000000000000) != 0;
    return (unsigned __int16)result | (v14 << 16) | (LOBYTE(v13[0]) << 24);
  }
  return result;
}

uint64_t sub_10017DA98(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_10017DAF0@<X0>(sqlite3_stmt *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for AccessoryKeystore.AccessoryPeripheralEntry();
  swift_allocObject();
  uint64_t result = sub_100174204(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10017DB4C(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = sub_1001EC41C(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_1001EC41C(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_1001EC41C(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  unsigned __int8 v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    unsigned __int8 v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v32 = a6 + 55;
        }
        else
        {
          unsigned __int8 v31 = 97;
          unsigned __int8 v32 = 65;
        }
        if (a6 <= 10) {
          unsigned __int8 v33 = a6 + 48;
        }
        else {
          unsigned __int8 v33 = 58;
        }
        if (v19)
        {
          LOWORD(v24) = 0;
          uint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v33)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                unsigned __int16 v29 = 0;
                int v30 = 1;
                if (v36 < 0x61 || v36 >= v31) {
                  return v29 | (v30 << 16);
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            if ((((unsigned __int16)v24 * (unsigned __int16)a6) & 0xFFFF0000) != 0) {
              goto LABEL_96;
            }
            int v24 = (unsigned __int16)(v24 * a6) + (v36 + v37);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_96;
            }
            ++v34;
            --v35;
          }
          while (v35);
LABEL_72:
          int v30 = 0;
          unsigned __int16 v29 = v24;
          return v29 | (v30 << 16);
        }
        goto LABEL_95;
      }
LABEL_96:
      unsigned __int16 v29 = 0;
      int v30 = 1;
      return v29 | (v30 << 16);
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v38 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = a6 + 55;
      }
      else
      {
        unsigned __int8 v38 = 97;
        unsigned __int8 v39 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v40 = a6 + 48;
      }
      else {
        unsigned __int8 v40 = 58;
      }
      if (v19)
      {
        LOWORD(v41) = 0;
        do
        {
          unsigned int v42 = *v19;
          if (v42 < 0x30 || v42 >= v40)
          {
            if (v42 < 0x41 || v42 >= v39)
            {
              unsigned __int16 v29 = 0;
              int v30 = 1;
              if (v42 < 0x61 || v42 >= v38) {
                return v29 | (v30 << 16);
              }
              char v43 = -87;
            }
            else
            {
              char v43 = -55;
            }
          }
          else
          {
            char v43 = -48;
          }
          if ((((unsigned __int16)v41 * (unsigned __int16)a6) & 0xFFFF0000) != 0) {
            goto LABEL_96;
          }
          int v41 = (unsigned __int16)(v41 * a6) + (v42 + v43);
          if ((v41 & 0x10000) != 0) {
            goto LABEL_96;
          }
          ++v19;
          --result;
        }
        while (result);
        int v30 = 0;
        unsigned __int16 v29 = v41;
        return v29 | (v30 << 16);
      }
      goto LABEL_95;
    }
    goto LABEL_96;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v22 = a6 + 55;
      }
      else
      {
        unsigned __int8 v21 = 97;
        unsigned __int8 v22 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v23 = a6 + 48;
      }
      else {
        unsigned __int8 v23 = 58;
      }
      if (v19)
      {
        LOWORD(v24) = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              unsigned __int16 v29 = 0;
              int v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | (v30 << 16);
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          if ((((unsigned __int16)v24 * (unsigned __int16)a6) & 0xFFFF0000) != 0) {
            goto LABEL_96;
          }
          int v24 = (unsigned __int16)(v24 * a6) - (v27 + v28);
          if ((v24 & 0xFFFF0000) != 0) {
            goto LABEL_96;
          }
          ++v25;
          if (!--v26) {
            goto LABEL_72;
          }
        }
      }
LABEL_95:
      unsigned __int16 v29 = 0;
      int v30 = 0;
      return v29 | (v30 << 16);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t sub_10017DFA4(uint64_t a1, char a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    unint64_t v4 = *(void *)(a1 + 48);
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 == v3 >> 32) {
          goto LABEL_8;
        }
        break;
      case 2uLL:
        if (*(void *)(v3 + 16) == *(void *)(v3 + 24)) {
          goto LABEL_8;
        }
        break;
      case 3uLL:
        goto LABEL_8;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_8;
        }
        break;
    }
    sub_1000A618C(*(void *)(a1 + 40), *(void *)(a1 + 48));
    sub_100139704(v3, v4);
    sub_1000A6240(v3, v4);
    Swift::String v5 = String.uppercased()();
    swift_bridgeObjectRelease();
    unint64_t countAndFlagsBits = v5._countAndFlagsBits;
    object = v5._object;
    return sub_100100590(countAndFlagsBits, (unint64_t)object);
  }
LABEL_8:
  id v8 = [*(id *)(a1 + 32) privateKey];

  if (v8)
  {
    id v9 = [*(id *)(a1 + 32) publicKey];
    id v10 = [v9 data];

    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    sub_100139704(v11, v13);
    sub_1000A6240(v11, v13);
    String.uppercased()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v14._unint64_t countAndFlagsBits = 43;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    id v15 = [*(id *)(a1 + 32) privateKey];
    if (!v15)
    {
      __break(1u);
      JUMPOUT(0x10017E24CLL);
    }
    unint64_t v16 = v15;
    id v17 = [v15 data];

    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    sub_100139704(v18, v20);
    sub_1000A6240(v18, v20);
    Swift::String v21 = String.uppercased()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t countAndFlagsBits = String.init<A>(_:)();
    return sub_100100590(countAndFlagsBits, (unint64_t)object);
  }
  return 0;
}

void sub_10017E25C(void *a1)
{
  if (!a1) {
    return;
  }
  uint64_t v3 = *(const void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController);
  unint64_t v4 = *(const void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController + 8);
  id v5 = a1;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100177250(v3, v4, 0);
  swift_bridgeObjectRelease();
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_4;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    unsigned int v36 = sub_100176FCC();
    if (v2)
    {

      return;
    }
    unsigned __int8 v7 = v36;
    goto LABEL_8;
  }
  if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_28;
  }
LABEL_4:
  if ((v6 & 0xC000000000000001) != 0)
  {
    unsigned __int8 v7 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    unsigned __int8 v7 = *(void **)(v6 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
LABEL_8:
  id v8 = (void *)v7[4];
  v7[4] = v5;
  id v37 = v5;

  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v10;
  uint64_t v11 = v7[12];
  unint64_t v12 = v7[13];
  *(void *)(inited + 72) = &type metadata for Data;
  *(void *)(inited + 48) = v11;
  *(void *)(inited + 56) = v12;
  sub_1000A618C(v11, v12);
  sub_1001E9E0C(inited);
  uint64_t v13 = swift_initStackObject();
  *(_OWORD *)(v13 + 16) = xmmword_100240BE0;
  *(void *)(v13 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v13 + 40) = v14;
  uint64_t v15 = swift_retain();
  uint64_t v16 = sub_10017DFA4(v15, 0);
  uint64_t v18 = v17;
  swift_release();
  *(void *)(v13 + 72) = &type metadata for Data;
  *(void *)(v13 + 48) = v16;
  *(void *)(v13 + 56) = v18;
  sub_1001E9E0C(v13);
  if (qword_1002A7BF0 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100096F64(v19, (uint64_t)qword_1002AAF20);
  swift_retain();
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unsigned __int8 v22 = (uint8_t *)swift_slowAlloc();
    unsigned __int8 v38 = (__CFString *)swift_slowAlloc();
    *(_DWORD *)unsigned __int8 v22 = 136315138;
    uint64_t v23 = v7[2];
    unint64_t v24 = v7[3];
    swift_bridgeObjectRetain();
    uint64_t v40 = sub_1000993AC(v23, v24, (uint64_t *)&v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Saving local pairing identity for %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  CFDictionaryRef isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  CFDictionaryRef v26 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  OSStatus v27 = SecItemUpdate(isa, v26);

  if (v27)
  {
    char v28 = (__CFString *)SecCopyErrorMessageString(v27, 0);
    if (v28)
    {
      unsigned __int8 v38 = 0;
      unint64_t v39 = 0;
      static String._conditionallyBridgeFromObjectiveC(_:result:)();

      char v28 = v38;
      unint64_t v29 = v39;
    }
    else
    {
      unint64_t v29 = 0;
    }
    swift_bridgeObjectRetain();
    int v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unsigned __int8 v32 = (uint8_t *)swift_slowAlloc();
      unsigned __int8 v38 = (__CFString *)swift_slowAlloc();
      *(_DWORD *)unsigned __int8 v32 = 136315138;
      if (v29) {
        uint64_t v33 = (uint64_t)v28;
      }
      else {
        uint64_t v33 = 0x206E776F6E6B6E55;
      }
      if (v29) {
        unint64_t v34 = v29;
      }
      else {
        unint64_t v34 = 0xED0000726F727245;
      }
      swift_bridgeObjectRetain();
      uint64_t v40 = sub_1000993AC(v33, v34, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to save local pairing identity: %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {

    swift_release();
  }
}

uint64_t sub_10017E818(const void *a1, const void *a2)
{
  if (a2)
  {
    unint64_t v3 = sub_100177250(a1, a2, 1);
    unint64_t v4 = v3;
    if (v3 >> 62) {
      goto LABEL_22;
    }
    for (uint64_t i = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
    {
      unint64_t v6 = (void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore__activeController);
      uint64_t v7 = 4;
      while (1)
      {
        uint64_t v8 = v7 - 4;
        if ((v4 & 0xC000000000000001) == 0) {
          break;
        }
        id v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v10 = __OFADD__(v8, 1);
        uint64_t v2 = v7 - 3;
        if (v10) {
          goto LABEL_21;
        }
LABEL_10:
        BOOL v11 = v9[14] == *v6 && v9[15] == v6[1];
        if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v12 = v9[5];
          sub_1000A618C(v12, v9[6]);
          swift_release();
          return v12;
        }
        swift_release();
        ++v7;
        if (v2 == i) {
          goto LABEL_16;
        }
      }
      id v9 = *(void **)(v4 + 8 * v7);
      swift_retain();
      BOOL v10 = __OFADD__(v8, 1);
      uint64_t v2 = v7 - 3;
      if (!v10) {
        goto LABEL_10;
      }
LABEL_21:
      __break(1u);
LABEL_22:
      ;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 2;
  }
  sub_1000B8650();
  swift_allocError();
  *uint64_t v13 = v12;
  swift_willThrow();
  return v12;
}

id sub_10017E984(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v71 = a5;
  uint64_t v72 = a4;
  uint64_t v10 = sub_1000992E8(&qword_1002AAA20);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v68 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v67 = (uint64_t)&v61 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v66 = (uint64_t)&v61 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v61 - v17;
  uint64_t v19 = (void *)type metadata accessor for Logger();
  uint64_t v20 = *(v19 - 1);
  __chkstk_darwin(v19);
  unsigned __int8 v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7BF0 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_100096F64((uint64_t)v19, (uint64_t)qword_1002AAF20);
  unint64_t v24 = *(void (**)(char *))(v20 + 16);
  uint64_t v70 = v23;
  v24(v22);
  sub_1000B9BD4(a1, (uint64_t)v18, &qword_1002AAA20);
  swift_bridgeObjectRetain_n();
  unsigned __int8 v25 = Logger.logObject.getter();
  int v69 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v25, (os_log_type_t)v69);
  uint64_t v75 = a2;
  uint64_t v73 = a1;
  if (v26)
  {
    unint64_t v62 = v19;
    os_log_t v63 = v25;
    uint64_t v64 = v5;
    unint64_t v65 = a3;
    a2 = swift_slowAlloc();
    OSStatus v27 = (void *)swift_slowAlloc();
    v78[0] = v27;
    *(_DWORD *)a2 = 136315394;
    uint64_t v6 = type metadata accessor for UUID();
    a3 = *(void *)(v6 - 8);
    uint64_t v19 = *(void **)(a3 + 48);
    int v28 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19)(v18, 1, v6);
    uint64_t v61 = v27;
    if (v28 == 1)
    {
      unint64_t v29 = 0xE300000000000000;
      uint64_t v30 = 7104878;
      goto LABEL_10;
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)v18, &qword_1002AAA20);

    swift_bridgeObjectRelease_n();
    os_log_type_t v31 = *(void (**)(char *, void *))(v20 + 8);
    v20 += 8;
    v31(v22, v19);
    if (a3) {
      goto LABEL_12;
    }
    __break(1u);
  }
  uint64_t v32 = v66;
  sub_1000B9BD4((uint64_t)v18, v66, &qword_1002AAA20);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v19)(v32, 1, v6) == 1)
  {
LABEL_27:
    id result = (id)swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  uint64_t v30 = UUID.uuidString.getter();
  unint64_t v29 = v33;
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(v32, v6);
LABEL_10:
  uint64_t v76 = sub_1000993AC(v30, v29, (uint64_t *)v78);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_1000A61E4((uint64_t)v18, &qword_1002AAA20);
  *(_WORD *)(a2 + 12) = 2080;
  a3 = v65;
  if (!v65)
  {
    __break(1u);
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v34 = v75;
  uint64_t v76 = sub_1000993AC(v75, a3, (uint64_t *)v78);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  os_log_t v35 = v63;
  _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v69, "updatePeripheralIdentifier(%s, %s)", (uint8_t *)a2, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  a2 = v34;
  swift_slowDealloc();

  (*(void (**)(char *, void *))(v20 + 8))(v22, v62);
  a1 = v73;
LABEL_12:
  unsigned int v36 = v74;
  unint64_t v37 = sub_100178930(a2, a3);
  if (v37)
  {
    uint64_t v38 = v37;
    swift_bridgeObjectRetain_n();
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      int v41 = (uint8_t *)swift_slowAlloc();
      v78[0] = (id)swift_slowAlloc();
      *(_DWORD *)int v41 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v76 = sub_1000993AC(v75, a3, (uint64_t *)v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Updating peripheral identifier information for %s.", v41, 0xCu);
      swift_arrayDestroy();
      unsigned int v36 = v74;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v51 = v71;
    uint64_t v50 = v72;
    uint64_t v52 = type metadata accessor for UUID();
    uint64_t v53 = v73;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v73, 1, v52) != 1)
    {
      uint64_t v54 = v67;
      sub_1000B9BD4(v53, v67, &qword_1002AAA20);
      uint64_t v55 = v38 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_peripheralIdentifier;
      swift_beginAccess();
      sub_10017F2A0(v54, v55);
      swift_endAccess();
    }
    *(void *)(v38 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_sessionId) = v51;
    *(void *)(v38 + OBJC_IVAR____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry_version) = v50;
    uint64_t v56 = *(void *)&v36[OBJC_IVAR____TtC14dockaccessoryd17AccessoryKeystore_table];
    uint64_t v57 = qword_1002A7B70;
    swift_retain();
    uint64_t v58 = v75;
    if (v57 != -1) {
      swift_once();
    }
    swift_weakInit();
    uint64_t v76 = v56;
    swift_weakAssign();
    sub_1000EA2DC((uint64_t)&v76, (uint64_t)v78, (uint64_t *)&unk_1002AB310);
    uint64_t v76 = 39;
    unint64_t v77 = (void *)0xE100000000000000;
    swift_bridgeObjectRetain();
    v59._unint64_t countAndFlagsBits = v58;
    v59._object = (void *)a3;
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    v60._unint64_t countAndFlagsBits = 39;
    v60._object = (void *)0xE100000000000000;
    String.append(_:)(v60);
    sub_100172A50(v38, (uint64_t)&off_100274C80, 0x696669746E656469, (void *)0xEA00000000007265, v76, v77);
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    sub_1000A61E4((uint64_t)v78, (uint64_t *)&unk_1002AB310);
    return (id)swift_release();
  }
  else
  {
    uint64_t v42 = v68;
    sub_1000B9BD4(a1, v68, &qword_1002AAA20);
    uint64_t v43 = type metadata accessor for UUID();
    uint64_t v44 = *(void *)(v43 - 8);
    Class isa = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43) != 1)
    {
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
    }
    NSString v46 = String._bridgeToObjectiveC()();
    v78[0] = 0;
    unsigned __int8 v47 = [v36 savePeripheralIdentifier:isa forAccessoryIdentifier:v46 error:v78];

    id result = v78[0];
    if ((v47 & 1) == 0)
    {
      uint64_t v49 = result;
      _convertNSErrorToError(_:)();

      return (id)swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_10017F2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AAA20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017F308@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100174AF8(*(void *)(v1 + 24), *(void **)(v1 + 32));
  *a1 = result & 1;
  return result;
}

uint64_t sub_10017F350(void *a1)
{
  return sub_10017F4E8(a1) & 1;
}

unint64_t sub_10017F36C()
{
  unint64_t result = qword_1002AB330;
  if (!qword_1002AB330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AB330);
  }
  return result;
}

uint64_t sub_10017F3C0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017F3F8()
{
  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_10017F408()
{
  unint64_t result = qword_1002AB340;
  if (!qword_1002AB340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AB340);
  }
  return result;
}

uint64_t sub_10017F45C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10017DAF0(*(sqlite3_stmt **)(v1 + 16), a1);
}

uint64_t sub_10017F478@<X0>(_DWORD *a1@<X8>)
{
  return sub_100137D8C(v1, a1);
}

unint64_t sub_10017F494()
{
  unint64_t result = qword_1002AB380;
  if (!qword_1002AB380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AB380);
  }
  return result;
}

uint64_t sub_10017F4E8(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_10017F540()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002AB390);
  sub_100096F64(v0, (uint64_t)qword_1002AB390);
  return Logger.init(subsystem:category:)();
}

id sub_10017F5C4()
{
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unsigned __int8 v22 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = &v0[OBJC_IVAR____TtC14dockaccessoryd11dockPairing_logger];
  uint64_t v19 = v0;
  Logger.init(subsystem:category:)();
  uint64_t v18 = OBJC_IVAR____TtC14dockaccessoryd11dockPairing_clientQueue;
  sub_1000B8610();
  static DispatchQoS.unspecified.getter();
  unsigned __int8 v25 = _swiftEmptyArrayStorage;
  sub_100106BF0((unint64_t *)&qword_1002A8530, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000992E8(&qword_1002A9000);
  sub_1000B9AB4((unint64_t *)&qword_1002A8540, &qword_1002A9000);
  uint64_t v8 = v21;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v20);
  id v9 = v19;
  uint64_t v11 = v22;
  uint64_t v10 = v23;
  *(void *)&v9[v18] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v7, v10);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "pairing interface open", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v10);
  uint64_t v15 = (objc_class *)type metadata accessor for dockPairing();
  v24.receiver = v9;
  v24.super_class = v15;
  return [super init];
}

void sub_10017FB1C(uint64_t a1, void (*a2)(uint64_t))
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v4 = *(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  a2(a1);
}

uint64_t sub_10017FBD8(void *a1, int a2, int a3, void *aBlock, void (*a5)(uint64_t, uint64_t, id, void *))
{
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  _Block_copy(v7);
  id v11 = a1;
  a5(v8, v10, v11, v7);
  _Block_release(v7);
  _Block_release(v7);

  return swift_bridgeObjectRelease();
}

id sub_10017FC7C()
{
  return sub_1001801D4(0, type metadata accessor for dockPairing);
}

uint64_t sub_10017FD18()
{
  return type metadata accessor for dockPairing();
}

uint64_t type metadata accessor for dockPairing()
{
  uint64_t result = qword_1002AB3D0;
  if (!qword_1002AB3D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10017FD6C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_10017FE08(int a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7BF8 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100096F64(v10, (uint64_t)qword_1002AB390);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  int v27 = a1;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    unsigned __int8 v25 = a5;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v26 = a4;
    uint64_t v28 = v20;
    *(_DWORD *)uint64_t v19 = 67109378;
    LODWORD(v29) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 8) = 2080;
    uint64_t v29 = a2;
    uint64_t v30 = a3;
    swift_bridgeObjectRetain();
    sub_1000992E8((uint64_t *)&unk_1002A82C0);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v29 = sub_1000993AC(v21, v22, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v25, (uint8_t *)v19, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  sub_1001A4C6C(v27);
}

id sub_1001801BC(uint64_t a1)
{
  return sub_1001801D4(a1, type metadata accessor for PairingServiceDelegate);
}

id sub_1001801D4(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t type metadata accessor for PairingServiceDelegate()
{
  return self;
}

void sub_100180230(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v33 - v13;
  id v15 = [self currentConnection];
  if (v15)
  {
    os_log_type_t v16 = v15;
    unsigned int v17 = [v15 processIdentifier];
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a3 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_logger, v8);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v36 = a1;
    unsigned int v35 = v17;
    if (v20)
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v34 = a4;
      uint64_t v22 = v21;
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 67109378;
      LODWORD(v37) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 8) = 2080;
      uint64_t v33 = v8;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_1000993AC(a1, a2, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Client %d requested pairing for %s", (uint8_t *)v22, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v34;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v33);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    v30.super.Class isa = (Class)v16;
    sub_100195638(v35, v16, v36, a2);
    os_log_type_t v31 = 0;
    Class isa = v30.super.isa;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_logger, v8);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unsigned __int8 v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int8 v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed fetching current NSXPCConnection, cannot construct client", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v27;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000029;
    *(void *)(inited + 56) = 0x8000000100234C60;
    sub_1001E9E0C(inited);
    id v28 = objc_allocWithZone((Class)NSError);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v30.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    os_log_type_t v31 = (objc_class *)[v28 initWithDomain:v29 code:100 userInfo:v30.super.isa];

    Class isa = v31;
  }

  (*(void (**)(uint64_t, objc_class *))(a4 + 16))(a4, v31);
}

void sub_100180720(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unsigned int v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_1000A61E4((uint64_t)v13, &qword_1002AAA20);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a3 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_logger, v7);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      BOOL v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)BOOL v20 = 136315138;
      id v28 = v20 + 4;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_1000993AC(a1, a2, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Invalid pairing token: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v23;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000015;
    *(void *)(inited + 56) = 0x8000000100239580;
    sub_1001E9E0C(inited);
    id v24 = objc_allocWithZone((Class)NSError);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v27 = [v24 initWithDomain:v25 code:100 userInfo:isa];

    (*(void (**)(uint64_t, id))(v29 + 16))(v29, v27);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    id v21 = *(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    sub_1000E569C((uint64_t)v17);

    (*(void (**)(uint64_t, void))(v29 + 16))(v29, 0);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_100180C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v21 = *(void *)(v8 - 8);
  uint64_t v22 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_clientQueue);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16 + v15, (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = sub_1001821F4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  uint64_t aBlock[3] = &unk_100278F28;
  unsigned int v17 = _Block_copy(aBlock);
  id v18 = v14;
  static DispatchQoS.unspecified.getter();
  NSString v25 = _swiftEmptyArrayStorage;
  sub_100106BF0((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
  swift_release();
  return (*(uint64_t (**)(uint64_t, void))(v24 + 16))(v24, 0);
}

void sub_100180FA8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v47 = a3;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v48 = *(void *)(v7 - 8);
  uint64_t v49 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v42 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  int v41 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = __chkstk_darwin(v15);
  os_log_type_t v19 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v40 - v20;
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_1000A61E4((uint64_t)v14, &qword_1002AAA20);
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v9, v47 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_logger, v49);
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v51 = (void *)sub_1000993AC(a1, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Invalid pairing token: %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v49);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v35;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000015;
    *(void *)(inited + 56) = 0x8000000100239580;
    sub_1001E9E0C(inited);
    id v36 = objc_allocWithZone((Class)NSError);
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v39 = [v36 initWithDomain:v37 code:100 userInfo:isa];

    (*(void (**)(uint64_t, id))(a4 + 16))(a4, v39);
  }
  else
  {
    uint64_t v49 = a4;
    NSString v25 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    os_log_type_t v40 = v21;
    v25(v21, v14, v15);
    uint64_t v26 = *(void **)(v47 + OBJC_IVAR____TtC14dockaccessoryd11dockPairing_clientQueue);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v21, v15);
    unint64_t v27 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v28 = swift_allocObject();
    v25((char *)(v28 + v27), v19, v15);
    aBlock[4] = (uint64_t)sub_100182118;
    aBlock[5] = v28;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_1001468DC;
    uint64_t aBlock[3] = (uint64_t)&unk_100278ED8;
    uint64_t v29 = _Block_copy(aBlock);
    id v30 = v26;
    uint64_t v31 = v41;
    static DispatchQoS.unspecified.getter();
    uint64_t v51 = _swiftEmptyArrayStorage;
    sub_100106BF0((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000992E8((uint64_t *)&unk_1002A7F60);
    sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
    uint64_t v32 = v42;
    uint64_t v33 = v46;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v44);
    swift_release();
    (*(void (**)(uint64_t, void))(v49 + 16))(v49, 0);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v40, v15);
  }
}

uint64_t sub_100181774(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v48 - v7;
  unsigned int v9 = [a1 processIdentifier];
  NSString v10 = String._bridgeToObjectiveC()();
  id v53 = a1;
  id v11 = [a1 valueForEntitlement:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v62 = 0u;
    long long v63 = 0u;
  }
  uint64_t v52 = v6;
  sub_1000A5BE8((uint64_t)&v62, (uint64_t)&aBlock);
  if (v59)
  {
    int v12 = swift_dynamicCast();
    if (v12) {
      uint64_t v13 = v54;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v12) {
      uint64_t v14 = v55;
    }
    else {
      uint64_t v14 = 0;
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&aBlock, &qword_1002AA5F0);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = v53;
  id v17 = [v53 valueForEntitlement:v15];

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v62 = 0u;
    long long v63 = 0u;
  }
  sub_1000A5BE8((uint64_t)&v62, (uint64_t)&aBlock);
  unsigned int v18 = v9;
  if (v59)
  {
    if (swift_dynamicCast() & 1) != 0 && (v54)
    {
      if (qword_1002A7C00 != -1) {
        swift_once();
      }
      uint64_t v19 = sub_10019AE8C(v16);
      uint64_t v21 = v20;
      uint64_t v22 = v13;
      if (qword_1002A7BF8 != -1) {
        swift_once();
      }
      uint64_t v23 = sub_100096F64(v2, (uint64_t)qword_1002AB390);
      uint64_t v24 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v52, v23, v2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      NSString v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      int v50 = v26;
      BOOL v27 = os_log_type_enabled(v25, v26);
      unsigned int v51 = v18;
      if (v27)
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(void *)&long long v62 = v49;
        *(_DWORD *)uint64_t v28 = 67109634;
        LODWORD(aBlock) = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v28 + 8) = 2080;
        v48[1] = v28 + 10;
        uint64_t aBlock = v22;
        uint64_t v57 = v14;
        swift_bridgeObjectRetain();
        sub_1000992E8((uint64_t *)&unk_1002A82C0);
        uint64_t v29 = String.init<A>(describing:)();
        uint64_t aBlock = sub_1000993AC(v29, v30, (uint64_t *)&v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v28 + 18) = 2080;
        uint64_t aBlock = v19;
        uint64_t v57 = v21;
        swift_bridgeObjectRetain();
        uint64_t v31 = String.init<A>(describing:)();
        uint64_t aBlock = sub_1000993AC(v31, v32, (uint64_t *)&v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v50, "new pairing connection from pid %d, appID entitlement %s, appID %s", (uint8_t *)v28, 0x1Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v16 = v53;
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v3 + 8))(v52, v2);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v24, v2);
      }
      uint64_t v38 = self;
      id v53 = [v38 interfaceWithProtocol:&OBJC_PROTOCOL____TtP11DockKitCore24XPCPairingDaemonProtocol_];
      uint64_t v39 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v40 = swift_allocObject();
      unsigned int v41 = v51;
      *(_DWORD *)(v40 + 16) = v51;
      *(void *)(v40 + 24) = v22;
      *(void *)(v40 + 32) = v14;
      *(void *)(v40 + 40) = v39;
      Swift::String v60 = sub_10018208C;
      uint64_t v61 = v40;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v57 = 1107296256;
      uint64_t v58 = sub_1001468DC;
      Swift::String v59 = &unk_100278E38;
      uint64_t v42 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      [v16 setInvalidationHandler:v42];
      _Block_release(v42);
      uint64_t v43 = swift_allocObject();
      *(_DWORD *)(v43 + 16) = v41;
      *(void *)(v43 + 24) = v22;
      *(void *)(v43 + 32) = v14;
      *(void *)(v43 + 40) = v39;
      Swift::String v60 = sub_1001820D4;
      uint64_t v61 = v43;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v57 = 1107296256;
      uint64_t v58 = sub_1001468DC;
      Swift::String v59 = &unk_100278E88;
      uint64_t v44 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v16 setInterruptionHandler:v44];
      _Block_release(v44);
      id v45 = v53;
      [v16 setExportedInterface:v53];
      id v46 = [v38 interfaceWithProtocol:&OBJC_PROTOCOL____TtP11DockKitCore24XPCPairingClientProtocol_];
      [v16 setRemoteObjectInterface:v46];
      id v47 = [objc_allocWithZone((Class)type metadata accessor for dockPairing()) init];
      [v16 setExportedObject:v47];
      [v16 resume];
      swift_release();

      return 1;
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&aBlock, &qword_1002AA5F0);
  }
  swift_bridgeObjectRelease();
  if (qword_1002A7BF8 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_100096F64(v2, (uint64_t)qword_1002AB390);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v33, v2);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    id v36 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v36 = 67109120;
    LODWORD(aBlock) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "process %d is not entitled for this API. Add entitlements and try again", v36, 8u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  [v16 invalidate];
  return 0;
}

uint64_t sub_100182050()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10018208C()
{
  sub_10017FE08(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), "dockaccessoryd: Pairing Connection to PID %d (%s) has been invalidated");
}

uint64_t sub_1001820B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001820C8()
{
  return swift_release();
}

void sub_1001820D4()
{
  sub_10017FE08(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), "dockaccessoryd: Pairing Connection to PID %d (%s) has been interrupted");
}

uint64_t sub_100182100()
{
  return sub_10018215C((uint64_t (*)(void))&type metadata accessor for UUID);
}

void sub_100182118()
{
}

uint64_t sub_100182144()
{
  return sub_10018215C((uint64_t (*)(void))&type metadata accessor for URL);
}

uint64_t sub_10018215C(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

void sub_1001821F4()
{
}

void sub_100182220(uint64_t (*a1)(void), void (*a2)(uint64_t))
{
  uint64_t v4 = *(void *)(a1(0) - 8);
  sub_10017FB1C(v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), a2);
}

uint64_t sub_1001822A4()
{
  uint64_t v1 = v0;
  uint64_t v150 = type metadata accessor for UUID();
  Class v142 = *(char **)(v150 - 8);
  uint64_t v2 = __chkstk_darwin(v150);
  uint64_t v4 = (char *)&v106 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v124 = (char *)&v106 - v5;
  uint64_t v6 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v6 - 8);
  uint64_t v134 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = type metadata accessor for Logger();
  uint64_t v145 = *(char ***)(v136 - 8);
  uint64_t v8 = __chkstk_darwin(v136);
  v144 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v8);
  id v120 = (char *)&v106 - v11;
  __chkstk_darwin(v10);
  os_log_type_t v143 = (char *)&v106 - v12;
  uint64_t v13 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v13 - 8);
  uint64_t v140 = type metadata accessor for URL.DirectoryHint();
  uint64_t v14 = *(void *)(v140 - 8);
  __chkstk_darwin(v140);
  uint64_t v139 = (char *)&v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000992E8(&qword_1002A7F70);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  id v137 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v106 - v19;
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  NSString v25 = (char *)&v106 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v23);
  id v133 = (char *)&v106 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v125 = (char *)&v106 - v29;
  __chkstk_darwin(v28);
  uint64_t v148 = (char *)&v106 - v30;
  uint64_t v126 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v31 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v31 + 4);
  swift_release();
  uint64_t v151 = v1;
  unint64_t v32 = (void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess();
  uint64_t v119 = v32;
  *unint64_t v32 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if (qword_1002A7B90 != -1) {
    swift_once();
  }
  sub_100151CA4((uint64_t)v20);
  id v149 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v149(v20, 1, v21) == 1)
  {
    sub_1000A61E4((uint64_t)v20, &qword_1002A7F70);
    goto LABEL_39;
  }
  uint64_t v135 = v22 + 48;
  char v138 = v25;
  os_log_type_t v146 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
  uint64_t v147 = v22 + 32;
  v146(v148, v20, v21);
  v153._unint64_t countAndFlagsBits = 0x6E6F6973726576;
  v153._object = (void *)0xE700000000000000;
  uint64_t v33 = *(void (**)(void))(v14 + 104);
  uint64_t v34 = v139;
  unsigned int v131 = enum case for URL.DirectoryHint.inferFromPath(_:);
  uint64_t v35 = v140;
  uint64_t v130 = v14 + 104;
  uint64_t v129 = (void (*)(char *, void, uint64_t))v33;
  v33(v139);
  unint64_t v128 = sub_1000E9828();
  URL.appending<A>(path:directoryHint:)();
  id v36 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v132 = v14 + 8;
  uint64_t v127 = v36;
  v36(v34, v35);
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v37 = String.init(contentsOf:encoding:)();
  id v114 = v4;
  uint64_t v116 = v22;
  uint64_t v38 = v37;
  unint64_t v40 = v39;
  unsigned int v41 = v145;
  uint64_t v42 = v143;
  uint64_t v43 = v136;
  uint64_t v113 = v145[2];
  ((void (*)(char *, uint64_t, uint64_t))v113)(v143, v151 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v136);
  swift_bridgeObjectRetain();
  uint64_t v44 = Logger.logObject.getter();
  uint64_t v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, (os_log_type_t)v45))
  {
    id v46 = (uint8_t *)swift_slowAlloc();
    v144 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))swift_slowAlloc();
    v153._unint64_t countAndFlagsBits = (uint64_t)v144;
    *(_DWORD *)id v46 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v152 = sub_1000993AC(v38, v40, &v153._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v45, "Current database version string %s", v46, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    id v47 = v145[1];
    uint64_t v48 = v143;
    uint64_t v49 = v136;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    id v47 = v41[1];
    uint64_t v48 = v42;
    uint64_t v49 = v43;
  }
  uint64_t v112 = v47;
  ((void (*)(char *, uint64_t))v47)(v48, v49);
  int v50 = v148;
  id v51 = *(id *)(qword_1002B1558 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_system);
  URL._bridgeToObjectiveC()(v52);
  uint64_t v54 = v53;
  sub_1000992E8(&qword_1002AC1C8);
  uint64_t v55 = swift_allocObject();
  *(_OWORD *)(v55 + 16) = xmmword_10023FD30;
  *(void *)(v55 + 32) = NSURLIsRegularFileKey;
  *(void *)(v55 + 40) = NSURLIsReadableKey;
  type metadata accessor for URLResourceKey(0);
  uint64_t v56 = NSURLIsRegularFileKey;
  uint64_t v57 = NSURLIsReadableKey;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v153._unint64_t countAndFlagsBits = 0;
  id v59 = [v51 contentsOfDirectoryAtURL:v54 includingPropertiesForKeys:isa options:21 error:&v153];

  unint64_t countAndFlagsBits = (void *)v153._countAndFlagsBits;
  if (!v59)
  {
    id v101 = (id)v153._countAndFlagsBits;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v102 = *(void (**)(char *, uint64_t))(v22 + 8);
    v102(v125, v21);
    v102(v50, v21);
    goto LABEL_39;
  }
  uint64_t v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v62 = countAndFlagsBits;

  uint64_t v63 = *(void *)(v61 + 16);
  uint64_t v111 = v61;
  if (v63)
  {
    uint64_t v115 = 0;
    uint64_t v117 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore;
    uint64_t v110 = v151 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
    uint64_t v64 = v22 + 16;
    unint64_t v65 = *(void (**)(void, void, void))(v22 + 16);
    unint64_t v66 = v61 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    os_log_type_t v143 = *(char **)(v22 + 72);
    v144 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v142 + 48);
    uint64_t v141 = (void (**)(char *, uint64_t))(v22 + 8);
    uint64_t v109 = v145 + 2;
    uint64_t v108 = v145 + 1;
    id v107 = (void (**)(uint64_t, uint64_t))(v142 + 8);
    uint64_t v145 = (char **)(v22 + 56);
    unint64_t v106 = (v22 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v67 = v137;
    uint64_t v68 = v133;
    uint64_t v69 = (uint64_t)v134;
    uint64_t v122 = v64;
    uint64_t v121 = v65;
    v65(v137, v66, v21);
    while (1)
    {
      Class v142 = *v145;
      ((void (*)(char *, void, uint64_t, uint64_t))v142)(v67, 0, 1, v21);
      if (v149(v67, 1, v21) == 1) {
        goto LABEL_38;
      }
      v146(v68, v67, v21);
      URL.path(percentEncoded:)(1);
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*v144)(v69, 1, v150) == 1)
      {
        (*v141)(v68, v21);
        sub_1000A61E4(v69, &qword_1002AAA20);
        goto LABEL_12;
      }
      sub_1000A61E4(v69, &qword_1002AAA20);
      Swift::String v153 = URL.path(percentEncoded:)(1);
      uint64_t v70 = v69;
      uint64_t v71 = v68;
      uint64_t v72 = v139;
      uint64_t v73 = v140;
      v129(v139, v131, v140);
      uint64_t v74 = (uint64_t)v138;
      URL.appending<A>(path:directoryHint:)();
      v127(v72, v73);
      swift_bridgeObjectRelease();
      uint64_t v75 = v151;
      uint64_t v76 = sub_10019C7EC(v74);
      if (!v76)
      {
        Swift::String v93 = *v141;
        (*v141)((char *)v74, v21);
        v93(v71, v21);
        uint64_t v67 = v137;
        uint64_t v68 = v71;
        uint64_t v69 = v70;
        unint64_t v65 = v121;
        goto LABEL_12;
      }
      unint64_t v77 = v76;
      char v78 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
      uint64_t v79 = (uint64_t)v124;
      DockCoreInfo.identifier.getter();

      uint64_t v80 = sub_10013EDA0(v79);
      unint64_t v82 = v81;
      id v83 = *(id *)(v75 + v117);
      uint64_t v123 = v80;
      uint64_t v84 = (const void *)sub_10013E71C(v80, v82);
      unint64_t v86 = sub_100177250(v84, v85, 1);
      unint64_t v87 = v86;
      if (v86 >> 62) {
        uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v88 = *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unint64_t v65 = v121;
      if (v88)
      {
        unint64_t v118 = v82;
        if ((v87 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();

          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v89 = *(void *)((v87 & 0xFFFFFFFFFFFFFF8) + 0x10);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v89) {
            __break(1u);
          }
        }
        uint64_t v90 = v119;
        swift_beginAccess();
        id v91 = v77;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((*v90 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v90 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
        sub_1000A6240(v123, v118);
      }
      else
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t, uint64_t))v113)(v120, v110, v136);
        Swift::String v94 = Logger.logObject.getter();
        os_log_type_t v95 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v94, v95))
        {
          id v96 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v96 = 0;
          _os_log_impl((void *)&_mh_execute_header, v94, v95, "Skipping existing paired accessory, no matching entry in keystore.", v96, 2u);
          swift_slowDealloc();
        }

        ((void (*)(char *, uint64_t))v112)(v120, v136);
        char v97 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
        uint64_t v98 = (uint64_t)v114;
        DockCoreInfo.identifier.getter();

        uint64_t v99 = v115;
        sub_100189850(v98);
        if (v99)
        {
          sub_1000A6240(v123, v82);

          swift_errorRelease();
          (*v107)(v98, v150);
          NSString v100 = *v141;
          (*v141)(v138, v21);
          uint64_t v68 = v133;
          v100(v133, v21);
          uint64_t v115 = 0;
          goto LABEL_31;
        }
        uint64_t v115 = 0;
        sub_1000A6240(v123, v82);

        (*v107)(v98, v150);
      }
      Swift::String v92 = *v141;
      (*v141)(v138, v21);
      uint64_t v68 = v133;
      v92(v133, v21);
LABEL_31:
      uint64_t v69 = (uint64_t)v134;
      uint64_t v67 = v137;
LABEL_12:
      v66 += (unint64_t)v143;
      if (!--v63)
      {
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v142)(v67, 1, 1, v21);
        goto LABEL_38;
      }
      v65(v67, v66, v21);
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v137, 1, 1, v21);
LABEL_38:
  swift_bridgeObjectRelease();
  char v103 = *(void (**)(char *, uint64_t))(v116 + 8);
  v103(v125, v21);
  v103(v148, v21);
LABEL_39:
  uint64_t v104 = *(os_unfair_lock_s **)(v151 + v126);
  swift_retain();
  os_unfair_lock_unlock(v104 + 4);
  return swift_release();
}

uint64_t sub_10018354C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  uint64_t v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess();
  uint64_t v7 = *v6;
  unint64_t v8 = (unint64_t)*v6 >> 62;
  v16[4] = v2;
  v16[5] = v1;
  v16[3] = v4;
  if (v8) {
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v9; uint64_t v9 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v10 = 4;
    while (1)
    {
      id v11 = (v7 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v7 + 8 * v10);
      uint64_t v12 = v11;
      uint64_t v13 = v10 - 3;
      if (__OFADD__(v10 - 4, 1)) {
        break;
      }
      dispatch thunk of DockCoreAccessory.needsMigration.setter();
      sub_10018E6C0(v12);

      ++v10;
      if (v13 == v9) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
LABEL_9:
  swift_bridgeObjectRelease();
  uint64_t v14 = *(os_unfair_lock_s **)(v0 + v17);
  swift_retain();
  os_unfair_lock_unlock(v14 + 4);
  swift_release();
  return 0;
}

uint64_t sub_100183950(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100183A18(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 9; ; ++i)
  {
    uint64_t v4 = i - 7;
    if (__OFADD__(i - 8, 1)) {
      break;
    }
    BOOL v6 = *(_DWORD *)(a2 + 4 * i) == result;
    BOOL v5 = v6;
    BOOL v6 = v6 || v4 == v2;
    if (v6) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100183A7C()
{
  uint64_t result = sub_100183A9C();
  qword_1002B1628 = result;
  return result;
}

uint64_t sub_100183A9C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DockAccessoryDatabase();
  swift_allocObject();
  uint64_t v4 = sub_100183EB0();
  id v5 = *(id *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connectNotification);
  DeviceNotification.state.setter();

  id v6 = *(id *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingEnableNotification);
  DeviceNotification.state.setter();

  id v7 = *(id *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonNotification);
  DeviceNotification.state.setter();

  sub_1001822A4();
  type metadata accessor for DockCoreManager();
  if (static DockCoreManager.debugAllowed.getter()) {
    sub_1001529B8();
  }
  uint64_t v8 = type metadata accessor for DockKitFeatures();
  uint64_t v22 = (void *)v8;
  uint64_t v23 = sub_1001A62BC(&qword_1002A7C30, (void (*)(uint64_t))&type metadata accessor for DockKitFeatures);
  uint64_t v9 = sub_100096F9C(aBlock);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, enum case for DockKitFeatures.RemoteControl(_:), v8);
  LOBYTE(v8) = isFeatureEnabled(_:)();
  sub_100099BCC((uint64_t)aBlock);
  if (v8)
  {
    id v10 = objc_allocWithZone((Class)type metadata accessor for DockIDSServer());
    uint64_t v11 = sub_1001BCD98(0xD000000000000025, 0x8000000100239DF0);
    BOOL v12 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
    *(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer) = v11;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v0);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ignoring IDS initialization, feature not enabled.", v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v23 = (uint64_t)sub_1001A62B4;
  uint64_t v24 = v16;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_100185E38;
  uint64_t v22 = &unk_100279658;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  uint64_t v18 = os_state_add_handler();
  _Block_release(v17);
  uint64_t v19 = v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_stateHandle;
  *(void *)uint64_t v19 = v18;
  *(unsigned char *)(v19 + 8) = 0;
  return v4;
}

uint64_t (*sub_100183E54())()
{
  return j__swift_endAccess;
}

uint64_t sub_100183EB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000992E8(&qword_1002AA0B0);
  uint64_t v69 = *(void *)(v2 - 8);
  uint64_t v70 = v2;
  __chkstk_darwin(v2);
  uint64_t v68 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v72 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  unint64_t v66 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  Logger.init(subsystem:category:)();
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__processesAuthorizedForCamera) = &_swiftEmptyArrayStorage;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories) = &_swiftEmptyArrayStorage;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState) = 2;
  uint64_t v7 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingState;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps) = &_swiftEmptyDictionarySingleton;
  uint64_t v8 = (void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId);
  *uint64_t v8 = 0;
  v8[1] = 0;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummaryDebug) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummary) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn) = 0;
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
  uint64_t v71 = sub_1000992E8((uint64_t *)&unk_1002A87B0);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = 0;
  *(void *)(v0 + v9) = v10;
  uint64_t v11 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_stateHandle;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore;
  *(void *)(v1 + v12) = [objc_allocWithZone((Class)type metadata accessor for AccessoryKeystore()) init];
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_queue;
  sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  static DispatchQoS.unspecified.getter();
  uint64_t v73 = &_swiftEmptyArrayStorage;
  uint64_t v64 = sub_1001A62BC((unint64_t *)&qword_1002A8530, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v63 = sub_1000992E8(&qword_1002A9000);
  uint64_t v65 = sub_1000B9AB4((unint64_t *)&qword_1002A8540, &qword_1002A9000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  unsigned int v62 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  os_log_type_t v14 = *(void (**)(void))(v72 + 104);
  v72 += 104;
  uint64_t v61 = (void (*)(char *, void, uint64_t))v14;
  uint64_t v15 = v66;
  uint64_t v16 = v67;
  v14(v66);
  *(void *)(v1 + v13) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v17 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager;
  *(void *)(v1 + v17) = [objc_allocWithZone((Class)type metadata accessor for AccessoryManager()) init];
  *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager) = 0;
  uint64_t v18 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients;
  *(void *)(v1 + v18) = sub_1001E9760((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v19 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionQueue;
  *(void *)(v1 + v19) = [objc_allocWithZone((Class)NSOperationQueue) init];
  uint64_t v20 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue;
  static DispatchQoS.unspecified.getter();
  uint64_t v73 = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v61(v15, v62, v16);
  *(void *)(v1 + v20) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_imuUpdateInterval) = 0x3F91111111111111;
  uint64_t v21 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_continuityCaptureHeadingMap;
  *(void *)(v1 + v21) = sub_1001E9888((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_batteryPollInterval) = 0x404E000000000000;
  *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer) = 0;
  uint64_t v22 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
  LOBYTE(v73) = 0;
  uint64_t v23 = v68;
  DKThreadSafe.init(wrappedValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v69 + 32))(v22, v23, v70);
  *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking) = &_swiftEmptyArrayStorage;
  uint64_t v24 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators;
  *(void *)(v1 + v24) = sub_1001E9998((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator) = 0;
  uint64_t v25 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients;
  *(void *)(v1 + v25) = sub_1001FB9A0((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v26 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules;
  *(void *)(v1 + v26) = sub_1001FBA9C((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v27 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount;
  *(void *)(v1 + v27) = sub_1001FBAA8((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v28 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount;
  *(void *)(v1 + v28) = sub_1001FBAA8((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v29 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__actuationFeedbackCache;
  *(void *)(v1 + v29) = sub_1001E9AB4((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v30 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients;
  *(void *)(v1 + v30) = sub_1001FB9A0((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v31 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules;
  *(void *)(v1 + v31) = sub_1001FBB80((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients;
  *(void *)(v1 + v32) = sub_1001FB9A0((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v33 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients;
  *(void *)(v1 + v33) = sub_1001FB9A0((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v34 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules;
  *(void *)(v1 + v34) = sub_1001FBB8C((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v35 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients;
  *(void *)(v1 + v35) = sub_1001FB9A0((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v36 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients;
  *(void *)(v1 + v36) = sub_1001FB9A0((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v37 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients;
  *(void *)(v1 + v37) = sub_1001FBC9C((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v38 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients;
  *(void *)(v1 + v38) = sub_1001FBCA8((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v39 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients;
  *(void *)(v1 + v39) = sub_1001E9AC0((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v40 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions;
  *(void *)(v1 + v40) = sub_1001E9ACC((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v41 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions;
  *(void *)(v1 + v41) = sub_1001E9ACC((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v42 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitXPCTrackingClients;
  *(void *)(v1 + v42) = sub_1001FBDC4((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v43 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitConfiguration;
  *(void *)(v1 + v43) = sub_1001E9BF8((uint64_t)&off_100274878);
  uint64_t v44 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connectNotification;
  uint64_t v45 = (objc_class *)type metadata accessor for DeviceNotification();
  static DeviceNotification.connectedNotificationName.getter();
  id v46 = objc_allocWithZone(v45);
  *(void *)(v1 + v44) = DeviceNotification.init(name:)();
  uint64_t v47 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingEnableNotification;
  static DeviceNotification.configNotificationName.getter();
  id v48 = objc_allocWithZone(v45);
  *(void *)(v1 + v47) = DeviceNotification.init(name:)();
  uint64_t v49 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonNotification;
  static DeviceNotification.trackingButtonNotificationName.getter();
  id v50 = objc_allocWithZone(v45);
  *(void *)(v1 + v49) = DeviceNotification.init(name:)();
  uint64_t v51 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  uint64_t v52 = swift_allocObject();
  *(_DWORD *)(v52 + 16) = 0;
  *(void *)(v1 + v51) = v52;
  uint64_t v53 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__configLock;
  uint64_t v54 = swift_allocObject();
  *(_DWORD *)(v54 + 16) = 0;
  *(void *)(v1 + v53) = v54;
  uint64_t v55 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v56 = swift_allocObject();
  *(_DWORD *)(v56 + 16) = 0;
  *(void *)(v1 + v55) = v56;
  uint64_t v57 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__cacheLock;
  uint64_t v58 = swift_allocObject();
  *(void *)(v1 + v57) = v58;
  *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__registeredTransactions) = &_swiftEmptyArrayStorage;
  *(_DWORD *)(v58 + 16) = 0;
  *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask) = 0;
  return v1;
}

uint64_t sub_100184798()
{
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_stateHandle + 8) & 1) == 0) {
    os_state_remove_handler();
  }
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v3 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
  uint64_t v4 = sub_1000992E8(&qword_1002AA0B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_100184BB4()
{
  sub_100184798();

  return swift_deallocClassInstance();
}

uint64_t sub_100184C0C()
{
  return type metadata accessor for DockAccessoryDatabase();
}

uint64_t type metadata accessor for DockAccessoryDatabase()
{
  uint64_t result = qword_1002AB5B8;
  if (!qword_1002AB5B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100184C60()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    sub_10019C3D0();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_100184DF0()
{
  uint64_t v117 = type metadata accessor for Logger();
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  unint64_t v1 = (char *)&v115 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "===== State Dump =====", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v124 = v1;
  if (v7)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    v127[0] = v9;
    uint64_t v10 = qword_1002B1310;
    unint64_t v11 = *(void *)algn_1002B1318;
    swift_bridgeObjectRetain();
    v126[0] = sub_1000993AC(v10, v11, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v1 = v124;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "dockaccessoryd version: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    v127[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136315138;
    v126[0] = sub_1000993AC(0x302E313632, 0xE500000000000000, v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "DockKitCore version: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Paired accessories:", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = v119;
  uint64_t v118 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v19 = *(os_unfair_lock_s **)(v119 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v19 + 4);
  swift_release();
  uint64_t v20 = (uint64_t *)(v18 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess();
  uint64_t v21 = *v20;
  if ((unint64_t)*v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    if (v22) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v22)
    {
LABEL_11:
      if (v22 < 1) {
        goto LABEL_107;
      }
      uint64_t v24 = 0;
      unint64_t v25 = v21 & 0xC000000000000001;
      *(void *)&long long v23 = 136315138;
      long long v121 = v23;
      id v120 = (char *)&type metadata for Any + 8;
      uint64_t v122 = v22;
      *(void *)&long long v123 = v21;
      do
      {
        if (v25) {
          id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v33 = *(id *)(v21 + 8 * v24 + 32);
        }
        id v34 = v33;
        uint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v26 = swift_slowAlloc();
          v126[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v26 = v121;
          id v27 = [v34 description];
          unint64_t v28 = v25;
          uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v31 = v30;

          uint64_t v32 = v29;
          unint64_t v25 = v28;
          *(void *)(v26 + 4) = sub_1000993AC(v32, v31, v126);

          uint64_t v22 = v122;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "- %s", (uint8_t *)v26, 0xCu);
          swift_arrayDestroy();
          unint64_t v1 = v124;
          swift_slowDealloc();
          uint64_t v21 = v123;
          swift_slowDealloc();
        }
        else
        {
        }
        ++v24;
      }
      while (v22 != v24);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v37 = *(os_unfair_lock_s **)(v119 + v118);
  swift_retain();
  os_unfair_lock_unlock(v37 + 4);
  swift_release();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    v126[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315138;
    id v41 = sub_1001E5BA0();
    uint64_t v125 = sub_1000993AC((uint64_t)v41, v42, v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v43 = *(os_unfair_lock_s **)(v119 + v118);
  swift_retain();
  os_unfair_lock_lock(v43 + 4);
  swift_release();
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    id v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "XPC Connections:", v46, 2u);
    swift_slowDealloc();
  }

  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Pairing Clients:", v49, 2u);
    swift_slowDealloc();
  }

  id v50 = (uint64_t *)(v119 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients);
  swift_beginAccess();
  uint64_t v51 = *v50;
  uint64_t v52 = *(void *)(*v50 + 64);
  uint64_t v122 = *v50 + 64;
  uint64_t v53 = 1 << *(unsigned char *)(v51 + 32);
  uint64_t v54 = -1;
  if (v53 < 64) {
    uint64_t v54 = ~(-1 << v53);
  }
  unint64_t v55 = v54 & v52;
  int64_t v56 = (unint64_t)(v53 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v57 = 0;
  *(void *)&long long v58 = 138412290;
  long long v123 = v58;
  while (1)
  {
    if (v55)
    {
      unint64_t v61 = __clz(__rbit64(v55));
      v55 &= v55 - 1;
      unint64_t v62 = v61 | (v57 << 6);
      goto LABEL_48;
    }
    int64_t v63 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    if (v63 >= v56) {
      goto LABEL_50;
    }
    unint64_t v64 = *(void *)(v122 + 8 * v63);
    ++v57;
    if (!v64)
    {
      int64_t v57 = v63 + 1;
      if (v63 + 1 >= v56) {
        goto LABEL_50;
      }
      unint64_t v64 = *(void *)(v122 + 8 * v57);
      if (!v64)
      {
        int64_t v57 = v63 + 2;
        if (v63 + 2 >= v56) {
          goto LABEL_50;
        }
        unint64_t v64 = *(void *)(v122 + 8 * v57);
        if (!v64) {
          break;
        }
      }
    }
LABEL_47:
    unint64_t v55 = (v64 - 1) & v64;
    unint64_t v62 = __clz(__rbit64(v64)) + (v57 << 6);
LABEL_48:
    uint64_t v60 = *(id *)(*(void *)(v51 + 56) + 8 * v62);
    unint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = swift_slowAlloc();
      uint64_t v69 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v68 = v123;
      *(void *)(v68 + 4) = v60;
      *uint64_t v69 = v60;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "- %@", (uint8_t *)v68, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v1 = v124;
      swift_slowDealloc();
      id v59 = v66;
    }
    else
    {

      id v59 = v60;
      uint64_t v60 = v66;
    }
  }
  int64_t v65 = v63 + 3;
  if (v65 < v56)
  {
    unint64_t v64 = *(void *)(v122 + 8 * v65);
    if (!v64)
    {
      while (1)
      {
        int64_t v57 = v65 + 1;
        if (__OFADD__(v65, 1)) {
          break;
        }
        if (v57 >= v56) {
          goto LABEL_50;
        }
        unint64_t v64 = *(void *)(v122 + 8 * v57);
        ++v65;
        if (v64) {
          goto LABEL_47;
        }
      }
LABEL_104:
      __break(1u);
      goto LABEL_105;
    }
    int64_t v57 = v65;
    goto LABEL_47;
  }
LABEL_50:
  swift_release();
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v72 = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "Actuation Clients:", v72, 2u);
    swift_slowDealloc();
  }

  uint64_t v73 = (uint64_t *)(v119 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients);
  swift_beginAccess();
  uint64_t v74 = *v73;
  uint64_t v75 = *(void *)(*v73 + 64);
  uint64_t v122 = *v73 + 64;
  uint64_t v76 = 1 << *(unsigned char *)(v74 + 32);
  uint64_t v77 = -1;
  if (v76 < 64) {
    uint64_t v77 = ~(-1 << v76);
  }
  unint64_t v78 = v77 & v75;
  int64_t v79 = (unint64_t)(v76 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v80 = 0;
  while (2)
  {
    if (v78)
    {
      unint64_t v83 = __clz(__rbit64(v78));
      v78 &= v78 - 1;
      unint64_t v84 = v83 | (v80 << 6);
LABEL_73:
      unint64_t v82 = *(id *)(*(void *)(v74 + 56) + 8 * v84);
      uint64_t v88 = Logger.logObject.getter();
      os_log_type_t v89 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v88, v89))
      {
        uint64_t v90 = swift_slowAlloc();
        id v91 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v90 = v123;
        *(void *)(v90 + 4) = v82;
        void *v91 = v82;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "- %@", (uint8_t *)v90, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v1 = v124;
        swift_slowDealloc();
        unint64_t v81 = v88;
      }
      else
      {

        unint64_t v81 = v82;
        unint64_t v82 = v88;
      }

      continue;
    }
    break;
  }
  int64_t v85 = v80 + 1;
  if (__OFADD__(v80, 1)) {
    goto LABEL_102;
  }
  if (v85 < v79)
  {
    unint64_t v86 = *(void *)(v122 + 8 * v85);
    ++v80;
    if (!v86)
    {
      int64_t v80 = v85 + 1;
      if (v85 + 1 >= v79) {
        goto LABEL_75;
      }
      unint64_t v86 = *(void *)(v122 + 8 * v80);
      if (!v86)
      {
        int64_t v80 = v85 + 2;
        if (v85 + 2 >= v79) {
          goto LABEL_75;
        }
        unint64_t v86 = *(void *)(v122 + 8 * v80);
        if (!v86)
        {
          int64_t v87 = v85 + 3;
          if (v87 >= v79) {
            goto LABEL_75;
          }
          unint64_t v86 = *(void *)(v122 + 8 * v87);
          if (!v86)
          {
            while (1)
            {
              int64_t v80 = v87 + 1;
              if (__OFADD__(v87, 1)) {
                break;
              }
              if (v80 >= v79) {
                goto LABEL_75;
              }
              unint64_t v86 = *(void *)(v122 + 8 * v80);
              ++v87;
              if (v86) {
                goto LABEL_72;
              }
            }
LABEL_105:
            __break(1u);
            goto LABEL_106;
          }
          int64_t v80 = v87;
        }
      }
    }
LABEL_72:
    unint64_t v78 = (v86 - 1) & v86;
    unint64_t v84 = __clz(__rbit64(v86)) + (v80 << 6);
    goto LABEL_73;
  }
LABEL_75:
  swift_release();
  Swift::String v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    Swift::String v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Sensor Clients:", v94, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v95 = (uint64_t *)(v119 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients);
  swift_beginAccess();
  uint64_t v96 = *v95;
  uint64_t v97 = *(void *)(*v95 + 64);
  uint64_t v122 = *v95 + 64;
  uint64_t v98 = 1 << *(unsigned char *)(v96 + 32);
  uint64_t v99 = -1;
  if (v98 < 64) {
    uint64_t v99 = ~(-1 << v98);
  }
  unint64_t v100 = v99 & v97;
  int64_t v101 = (unint64_t)(v98 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v102 = 0;
  while (2)
  {
    if (v100)
    {
      unint64_t v105 = __clz(__rbit64(v100));
      v100 &= v100 - 1;
      unint64_t v106 = v105 | (v102 << 6);
LABEL_98:
      uint64_t v104 = *(id *)(*(void *)(v96 + 56) + 8 * v106);
      uint64_t v110 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v110, v111))
      {
        uint64_t v112 = swift_slowAlloc();
        uint64_t v113 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v112 = v123;
        *(void *)(v112 + 4) = v104;
        void *v113 = v104;
        _os_log_impl((void *)&_mh_execute_header, v110, v111, "- %@", (uint8_t *)v112, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v1 = v124;
        swift_slowDealloc();
        char v103 = v110;
      }
      else
      {

        char v103 = v104;
        uint64_t v104 = v110;
      }

      continue;
    }
    break;
  }
  int64_t v107 = v102 + 1;
  if (__OFADD__(v102, 1)) {
    goto LABEL_103;
  }
  if (v107 >= v101)
  {
LABEL_100:
    swift_release();
    id v114 = *(os_unfair_lock_s **)(v119 + v118);
    swift_retain();
    os_unfair_lock_unlock(v114 + 4);
    swift_release();
    (*(void (**)(char *, uint64_t))(v116 + 8))(v1, v117);
    return;
  }
  unint64_t v108 = *(void *)(v122 + 8 * v107);
  ++v102;
  if (v108) {
    goto LABEL_97;
  }
  int64_t v102 = v107 + 1;
  if (v107 + 1 >= v101) {
    goto LABEL_100;
  }
  unint64_t v108 = *(void *)(v122 + 8 * v102);
  if (v108) {
    goto LABEL_97;
  }
  int64_t v102 = v107 + 2;
  if (v107 + 2 >= v101) {
    goto LABEL_100;
  }
  unint64_t v108 = *(void *)(v122 + 8 * v102);
  if (v108)
  {
LABEL_97:
    unint64_t v100 = (v108 - 1) & v108;
    unint64_t v106 = __clz(__rbit64(v108)) + (v102 << 6);
    goto LABEL_98;
  }
  int64_t v109 = v107 + 3;
  if (v109 >= v101) {
    goto LABEL_100;
  }
  unint64_t v108 = *(void *)(v122 + 8 * v109);
  if (v108)
  {
    int64_t v102 = v109;
    goto LABEL_97;
  }
  while (1)
  {
    int64_t v102 = v109 + 1;
    if (__OFADD__(v109, 1)) {
      break;
    }
    if (v102 >= v101) {
      goto LABEL_100;
    }
    unint64_t v108 = *(void *)(v122 + 8 * v102);
    ++v109;
    if (v108) {
      goto LABEL_97;
    }
  }
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
}

uint64_t sub_100185DD0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16) == 3)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_100184DF0();
      swift_release();
    }
  }
  return 0;
}

uint64_t sub_100185E38(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v4 = v3(a2);
  swift_release();
  return v4;
}

uint64_t sub_100185E88(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
  swift_retain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v20 = v4;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v21 = v2;
    unint64_t v11 = (uint8_t *)v10;
    v23[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v11 = 136315138;
    v19[1] = v11 + 4;
    uint64_t v12 = *(void *)(a1 + 64);
    unint64_t v13 = *(void *)(a1 + 72);
    swift_bridgeObjectRetain();
    uint64_t v22 = sub_1000993AC(v12, v13, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "registering transaction %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v21;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  }
  else
  {

    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v14 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  swift_release();
  os_log_type_t v16 = (void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__registeredTransactions);
  swift_beginAccess();
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  uint64_t v17 = *(os_unfair_lock_s **)(v2 + v14);
  swift_retain();
  os_unfair_lock_unlock(v17 + 4);
  return swift_release();
}

uint64_t sub_10018617C()
{
  uint64_t v45 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v49 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for DispatchQoS();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  unint64_t v42 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v8 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v8 + 4);
  swift_release();
  uint64_t v37 = v0;
  os_log_type_t v9 = (void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__registeredTransactions);
  swift_beginAccess();
  uint64_t v35 = v9;
  uint64_t v10 = *v9;
  if (!(*v9 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    *uint64_t v35 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    id v34 = *(os_unfair_lock_s **)(v37 + v36);
    swift_retain();
    os_unfair_lock_unlock(v34 + 4);
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v11 = result;
  if (!result) {
    goto LABEL_18;
  }
LABEL_3:
  if (v11 >= 1)
  {
    uint64_t v14 = 0;
    uint64_t v52 = v37 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
    id v50 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    unint64_t v51 = v10 & 0xC000000000000001;
    uint64_t v53 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v40 = v56;
    os_log_type_t v39 = (void (**)(char *, uint64_t))(v49 + 8);
    uint64_t v38 = (void (**)(char *, uint64_t))(v2 + 8);
    *(void *)&long long v13 = 136315138;
    long long v47 = v13;
    id v46 = (char *)&type metadata for Any + 8;
    uint64_t v48 = v11;
    uint64_t v49 = v10;
    id v41 = v7;
    do
    {
      if (v51)
      {
        uint64_t v15 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v15 = *(void **)(v10 + 8 * v14 + 32);
        swift_retain();
      }
      (*v50)(v7, v52, v4);
      swift_retain();
      os_log_type_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = v47;
        uint64_t v19 = v15[8];
        unint64_t v20 = v15[9];
        swift_bridgeObjectRetain();
        *(void *)(v18 + 4) = sub_1000993AC(v19, v20, aBlock);
        swift_release();
        uint64_t v11 = v48;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Stopping txn %s", (uint8_t *)v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v10 = v49;
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      (*v53)(v7, v4);
      if (v15[2])
      {
        uint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          long long v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "stopping txn", v23, 2u);
          swift_slowDealloc();
        }

        uint64_t v24 = (void *)v15[3];
        if (v24)
        {
          v56[2] = sub_100106BE8;
          v56[3] = v15;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          v56[0] = sub_1001468DC;
          v56[1] = &unk_1002794C8;
          unint64_t v25 = _Block_copy(aBlock);
          swift_retain();
          id v26 = v24;
          uint64_t v27 = v4;
          unint64_t v28 = v42;
          static DispatchQoS.unspecified.getter();
          uint64_t v54 = _swiftEmptyArrayStorage;
          sub_1001A62BC((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_1000992E8((uint64_t *)&unk_1002A7F60);
          sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
          uint64_t v29 = v44;
          uint64_t v30 = v45;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v25);

          unint64_t v31 = v29;
          uint64_t v32 = v30;
          uint64_t v11 = v48;
          uint64_t v10 = v49;
          (*v39)(v31, v32);
          id v33 = v28;
          uint64_t v4 = v27;
          BOOL v7 = v41;
          (*v38)(v33, v43);
          swift_release();
        }
      }
      swift_release();
      ++v14;
    }
    while (v11 != v14);
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t sub_100186888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  long long v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  os_log_type_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue);
  os_log_type_t v17 = (void *)swift_allocObject();
  void v17[2] = v5;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a4;
  aBlock[4] = sub_1001A622C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1001468DC;
  uint64_t aBlock[3] = &unk_100279568;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1000CC298(a3);
  static DispatchQoS.unspecified.getter();
  os_log_type_t v22 = &_swiftEmptyArrayStorage;
  sub_1001A62BC((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v21);
  return swift_release();
}

id sub_100186B68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v51 = a2;
  uint64_t v52 = a5;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v48 = (char *)&v44 - v14;
  __chkstk_darwin(v13);
  os_log_type_t v16 = (char *)&v44 - v15;
  uint64_t v50 = a1;
  id v46 = *(void (**)(char *))(v9 + 16);
  uint64_t v47 = a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v46((char *)&v44 - v15);
  swift_bridgeObjectRetain_n();
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v49 = a4;
  if (v19)
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v45 = v12;
    aBlock[0] = v21;
    uint64_t v44 = v9 + 16;
    *(_DWORD *)unint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v54 = sub_1000993AC(v51, a3, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Registering motion for client %s", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v12 = v45;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  os_log_type_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v16, v8);
  uint64_t v23 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager;
  uint64_t v24 = v50;
  id result = *(id *)(v50 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager);
  if (!result)
  {
    ((void (*)(char *, uint64_t, uint64_t))v46)(v48, v47, v8);
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = (char *)v8;
      *(_WORD *)unint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Creating motion manager", v28, 2u);
      uint64_t v8 = (uint64_t)v45;
      swift_slowDealloc();
    }

    v22(v48, v8);
    id v29 = [objc_allocWithZone((Class)CMMotionManager) init];
    uint64_t v30 = *(void **)(v24 + v23);
    *(void *)(v24 + v23) = v29;

    id result = *(id *)(v24 + v23);
    if (!result) {
      goto LABEL_22;
    }
  }
  if ([result isDeviceMotionActive]) {
    goto LABEL_17;
  }
  id result = *(id *)(v24 + v23);
  if (!result)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ([result isDeviceMotionAvailable])
  {
    ((void (*)(char *, uint64_t, uint64_t))v46)(v12, v47, v8);
    unint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "starting motion updates", v33, 2u);
      swift_slowDealloc();
    }

    v22(v12, v8);
    id result = *(id *)(v24 + v23);
    if (result)
    {
      [result setDeviceMotionUpdateInterval:0.0166666667];
      id result = *(id *)(v24 + v23);
      if (result)
      {
        [result setShowsDeviceMovementDisplay:1];
        id v34 = *(void **)(v24 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionQueue);
        id result = [v34 setMaxConcurrentOperationCount:1];
        uint64_t v35 = *(void **)(v24 + v23);
        if (v35)
        {
          aBlock[4] = (uint64_t)sub_1001A6268;
          aBlock[5] = v24;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          uint64_t aBlock[2] = (uint64_t)sub_1000AAC3C;
          uint64_t aBlock[3] = (uint64_t)&unk_1002795B8;
          uint64_t v36 = _Block_copy(aBlock);
          id v37 = v35;
          swift_retain();
          swift_release();
          [v37 startDeviceMotionUpdatesUsingReferenceFrame:4 toQueue:v34 withHandler:v36];
          _Block_release(v36);

          goto LABEL_17;
        }
LABEL_25:
        __break(1u);
        return result;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_17:
  uint64_t v38 = v49;
  if (v49)
  {
    uint64_t v39 = swift_allocObject();
    uint64_t v40 = v52;
    *(void *)(v39 + 16) = v38;
    *(void *)(v39 + 24) = v40;
    id v41 = sub_1001A623C;
  }
  else
  {
    id v41 = 0;
    uint64_t v39 = 0;
  }
  unint64_t v42 = (uint64_t *)(v24 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1000CC298(v38);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *v42;
  *unint64_t v42 = 0x8000000000000000;
  sub_1001F5D6C((uint64_t)v41, v39, v51, a3, isUniquelyReferenced_nonNull_native);
  *unint64_t v42 = v54;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (id)swift_endAccess();
}

uint64_t sub_1001871D0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v28 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  os_log_type_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit();
  if (a2)
  {
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v8, Strong + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v28);
      swift_errorRetain();
      swift_release();
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v21 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v20 = 138412290;
        swift_errorRetain();
        uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
        aBlock[0] = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v21 = v22;
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "device motion update failed with error %@", v20, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v28);
    }
    return swift_weakDestroy();
  }
  else
  {
    uint64_t v28 = *(void *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = a3;
    *(void *)(v23 + 24) = a1;
    aBlock[4] = sub_1001A6274;
    aBlock[5] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    uint64_t aBlock[2] = sub_1001468DC;
    uint64_t aBlock[3] = &unk_100279608;
    uint64_t v24 = _Block_copy(aBlock);
    id v25 = a1;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    id v29 = &_swiftEmptyArrayStorage;
    sub_1001A62BC((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000992E8((uint64_t *)&unk_1002A7F60);
    sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    swift_weakDestroy();
    return swift_release();
  }
}

uint64_t sub_1001876B0(uint64_t a1, void *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = *v3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(*v3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(*v3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_20;
    }
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v9) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v9) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v5 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v9) {
          return swift_release();
        }
        unint64_t v15 = *(void *)(v5 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_20:
    os_log_type_t v17 = *(void (**)(void **))(*(void *)(v4 + 56) + 16 * v13);
    if (v17) {
      BOOL v18 = a2 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18)
    {
      unint64_t v20 = a2;
      sub_1000CC298((uint64_t)v17);
      id v19 = a2;
      v17(&v20);

      uint64_t result = sub_1000BF118((uint64_t)v17);
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v9) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v9) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v5 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_19;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void sub_100187868(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v17[0] = *(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue);
    unint64_t v15 = (void *)swift_allocObject();
    v15[2] = v3;
    v15[3] = a1;
    void v15[4] = a2;
    aBlock[4] = sub_1001A61B0;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    uint64_t aBlock[2] = sub_1001468DC;
    uint64_t aBlock[3] = &unk_100279518;
    int64_t v16 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    static DispatchQoS.unspecified.getter();
    v17[1] = _swiftEmptyArrayStorage;
    sub_1001A62BC((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000992E8((uint64_t *)&unk_1002A7F60);
    sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    swift_release();
  }
  else
  {
    sub_100187B98(a1, a2);
  }
}

void sub_100187B6C(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void sub_100187B98(uint64_t a1, unint64_t a2)
{
  uint64_t v68 = a1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v66 = (char *)v63 - v10;
  __chkstk_darwin(v9);
  uint64_t v69 = (char *)v63 - v11;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (void *)((char *)v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v16 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue);
  *unint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  int64_t v67 = v2;
  id v19 = *(void (**)(char *, int64_t, uint64_t))(v5 + 16);
  int64_t v71 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  uint64_t v72 = v5 + 16;
  uint64_t v70 = v19;
  ((void (*)(char *))v19)(v69);
  unint64_t v20 = a2;
  swift_bridgeObjectRetain_n();
  uint64_t v21 = v5;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v65 = v4;
  if (v24)
  {
    id v25 = (uint8_t *)swift_slowAlloc();
    v74[0] = swift_slowAlloc();
    *(_DWORD *)id v25 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v26 = v68;
    uint64_t v73 = sub_1000993AC(v68, v20, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unregistering motion for client %s", v25, 0xCu);
    swift_arrayDestroy();
    uint64_t v4 = v65;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v27 = v20;
    uint64_t v28 = v69;
    uint64_t v69 = *(char **)(v21 + 8);
    ((void (*)(char *, uint64_t))v69)(v28, v4);
    uint64_t v29 = v21;
  }
  else
  {

    uint64_t v27 = v20;
    swift_bridgeObjectRelease_n();
    uint64_t v30 = v69;
    uint64_t v69 = *(char **)(v5 + 8);
    ((void (*)(char *, uint64_t))v69)(v30, v4);
    uint64_t v29 = v5;
    uint64_t v26 = v68;
  }
  int64_t v31 = v67;
  int64_t v32 = v67 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClients;
  swift_beginAccess();
  unint64_t v33 = sub_1001ED2E4(v26, v27);
  swift_endAccess();
  if (v33 >= 2) {
    sub_1001A60CC(v33);
  }
  uint64_t v34 = *(void *)v32;
  if (!*(void *)(*(void *)v32 + 16))
  {
    int64_t v57 = v66;
    v70(v66, v71, v4);
    long long v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Stopping device motion updates", v60, 2u);
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v69)(v57, v4);
    uint64_t v61 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager;
    [*(id *)(v31 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager) stopDeviceMotionUpdates];
    unint64_t v62 = *(void **)(v31 + v61);
    *(void *)(v31 + v61) = 0;

    return;
  }
  uint64_t v35 = *(void *)(v34 + 64);
  unint64_t v66 = (char *)(v34 + 64);
  uint64_t v36 = 1 << *(unsigned char *)(v34 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & v35;
  int64_t v67 = (unint64_t)(v36 + 63) >> 6;
  uint64_t v39 = v29 + 8;
  swift_bridgeObjectRetain();
  uint64_t v40 = 0;
  *(void *)&long long v41 = 136315138;
  long long v64 = v41;
  v63[1] = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v38)
    {
      unint64_t v42 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v43 = v42 | (v40 << 6);
      goto LABEL_33;
    }
    int64_t v44 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v44 >= v67) {
      goto LABEL_35;
    }
    unint64_t v45 = *(void *)&v66[8 * v44];
    ++v40;
    if (!v45)
    {
      uint64_t v40 = v44 + 1;
      if (v44 + 1 >= v67) {
        goto LABEL_35;
      }
      unint64_t v45 = *(void *)&v66[8 * v40];
      if (!v45)
      {
        uint64_t v40 = v44 + 2;
        if (v44 + 2 >= v67) {
          goto LABEL_35;
        }
        unint64_t v45 = *(void *)&v66[8 * v40];
        if (!v45)
        {
          uint64_t v40 = v44 + 3;
          if (v44 + 3 >= v67) {
            goto LABEL_35;
          }
          unint64_t v45 = *(void *)&v66[8 * v40];
          if (!v45)
          {
            uint64_t v40 = v44 + 4;
            if (v44 + 4 >= v67) {
              goto LABEL_35;
            }
            unint64_t v45 = *(void *)&v66[8 * v40];
            if (!v45) {
              break;
            }
          }
        }
      }
    }
LABEL_32:
    unint64_t v38 = (v45 - 1) & v45;
    unint64_t v43 = __clz(__rbit64(v45)) + (v40 << 6);
LABEL_33:
    uint64_t v47 = (uint64_t *)(*(void *)(v34 + 48) + 16 * v43);
    uint64_t v49 = *v47;
    unint64_t v48 = v47[1];
    v70(v8, v71, v4);
    swift_bridgeObjectRetain_n();
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v68 = v40;
      uint64_t v53 = v8;
      uint64_t v54 = v34;
      uint64_t v55 = v39;
      uint64_t v56 = v52;
      v74[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = v64;
      swift_bridgeObjectRetain();
      *(void *)(v56 + 4) = sub_1000993AC(v49, v48, v74);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Client remaining: %s", (uint8_t *)v56, 0xCu);
      swift_arrayDestroy();
      uint64_t v4 = v65;
      swift_slowDealloc();
      uint64_t v39 = v55;
      uint64_t v34 = v54;
      uint64_t v8 = v53;
      uint64_t v40 = v68;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    ((void (*)(char *, uint64_t))v69)(v8, v4);
  }
  int64_t v46 = v44 + 5;
  if (v46 >= v67)
  {
LABEL_35:
    swift_release();
    return;
  }
  unint64_t v45 = *(void *)&v66[8 * v46];
  if (v45)
  {
    uint64_t v40 = v46;
    goto LABEL_32;
  }
  while (1)
  {
    uint64_t v40 = v46 + 1;
    if (__OFADD__(v46, 1)) {
      break;
    }
    if (v40 >= v67) {
      goto LABEL_35;
    }
    unint64_t v45 = *(void *)&v66[8 * v40];
    ++v46;
    if (v45) {
      goto LABEL_32;
    }
  }
LABEL_42:
  __break(1u);
}

id sub_10018834C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionManager);
  if (result) {
    id result = [result deviceMotion];
  }
  *a2 = result;
  return result;
}

void sub_10018839C()
{
  uint64_t v1 = v0;
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  v8[4] = sub_1001A60B8;
  v8[5] = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1001468DC;
  v8[3] = &unk_100279478;
  uint64_t v4 = _Block_copy(v8);
  swift_retain();
  uint64_t v5 = v2;
  swift_release();
  AudioServicesPlaySystemSoundWithCompletion(0x424u, v4);
  _Block_release(v4);
  OS_dispatch_semaphore.wait()();
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v1;
  *(void *)(v6 + 24) = v5;
  swift_retain();
  uint64_t v7 = v5;
  sub_100188C8C(0xD000000000000010, 0x8000000100239D30, (uint64_t)sub_1001A60C4, v6);
  swift_release();
  OS_dispatch_semaphore.wait()();
}

Swift::Int sub_100188540(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "done playing pong sound", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return OS_dispatch_semaphore.signal()();
}

Swift::Int sub_1001886AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28 - v12;
  if (!a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v28 - v12, a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v7);
    uint64_t v22 = Logger.logObject.getter();
    uint64_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, (os_log_type_t)v23))
    {
      BOOL v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v23, "Launched camera app successfully", v24, 2u);
      swift_slowDealloc();
    }

    id v25 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v26 = v13;
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v7);
  id v14 = a2;
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v15, v16))
  {

    id v25 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v26 = v11;
LABEL_8:
    v25(v26, v7);
    return OS_dispatch_semaphore.signal()();
  }
  id v17 = (uint8_t *)swift_slowAlloc();
  uint64_t v29 = swift_slowAlloc();
  uint64_t v33 = v29;
  uint64_t v30 = v7;
  *(_DWORD *)id v17 = 136315138;
  id v18 = [v14 localizedDescription:v17 + 4, v29];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = a4;
  unint64_t v21 = v20;

  uint64_t v32 = sub_1000993AC(v19, v21, &v33);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to launch Camera app with error: %s", v17, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v30);
  return OS_dispatch_semaphore.signal()();
}

uint64_t sub_1001889EC()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  if (v6) {
    goto LABEL_6;
  }
  while (1)
  {
LABEL_7:
    int64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }
    if (v12 >= v7) {
      goto LABEL_48;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v9;
    if (!v13)
    {
      int64_t v9 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v9);
      if (!v13)
      {
        int64_t v9 = v12 + 2;
        if (v12 + 2 >= v7) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v3 + 8 * v9);
        if (!v13) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v13 - 1) & v13;
    for (unint64_t i = __clz(__rbit64(v13)) + (v9 << 6); ; unint64_t i = v10 | (v9 << 6))
    {
      uint64_t v15 = *(unsigned int *)(*(void *)(v2 + 48) + 4 * i);
      os_log_type_t v16 = (uint64_t *)(*(void *)(v2 + 56) + 16 * i);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      swift_bridgeObjectRetain();
      uint64_t v19 = (void *)sub_10011468C();
      unint64_t v20 = v19;
      uint64_t v21 = v19[2];
      if (v21)
      {
        BOOL v22 = v19[4] == v18 && v19[5] == v17;
        if (v22 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_45:
          swift_release();
LABEL_46:
          swift_bridgeObjectRelease();
          return v15;
        }
        if (v21 != 1)
        {
          if (v20[6] == v18 && v20[7] == v17) {
            goto LABEL_45;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            goto LABEL_45;
          }
          if (v21 != 2) {
            break;
          }
        }
      }
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v6) {
        goto LABEL_7;
      }
LABEL_6:
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
    }
    uint64_t v29 = v3;
    uint64_t v30 = v15;
    int64_t v28 = v7;
    BOOL v24 = v20 + 9;
    uint64_t v25 = 2;
    do
    {
      uint64_t v26 = v25 + 1;
      if (__OFADD__(v25, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      BOOL v27 = *(v24 - 1) == v18 && *v24 == v17;
      if (v27 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
        swift_release();
        uint64_t v15 = v30;
        goto LABEL_46;
      }
      v24 += 2;
      ++v25;
    }
    while (v26 != v21);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v7 = v28;
    uint64_t v3 = v29;
    if (v6) {
      goto LABEL_6;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 < v7)
  {
    unint64_t v13 = *(void *)(v3 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v9 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_51;
        }
        if (v9 >= v7) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v3 + 8 * v9);
        ++v14;
        if (v13) {
          goto LABEL_20;
        }
      }
    }
    int64_t v9 = v14;
    goto LABEL_20;
  }
LABEL_48:
  swift_release();
  return 0;
}

void sub_100188C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = (id)SBSCreateOpenApplicationService();
  sub_1000992E8((uint64_t *)&unk_1002A8FB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  uint64_t aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v11;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for Bool;
  *(unsigned char *)(inited + 72) = 1;
  sub_1001EA498(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v13 = [self optionsWithDictionary:isa];

  if (v9)
  {
    id v14 = v9;
    NSString v15 = String._bridgeToObjectiveC()();
    os_log_type_t v16 = (void *)swift_allocObject();
    v16[2] = v4;
    v16[3] = a1;
    v16[4] = a2;
    v16[5] = a3;
    void v16[6] = a4;
    BOOL v22 = sub_1001A60A4;
    uint64_t v23 = v16;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v19 = 1107296256;
    unint64_t v20 = sub_1000AAC3C;
    uint64_t v21 = &unk_100279428;
    uint64_t v17 = _Block_copy(&aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    [v14 openApplication:v15 withOptions:v13 completion:v17];

    _Block_release(v17);
    id v13 = v15;
  }
}

void sub_100188EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(void, void), uint64_t a7)
{
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v27 = a1;
    uint64_t v28 = a7;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v14);
    swift_errorRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v26 = a6;
      uint64_t v21 = v20;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v30 = v25;
      *(_DWORD *)uint64_t v21 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_1000993AC(a4, a5, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v22 = Error.localizedDescription.getter();
      uint64_t v29 = sub_1000993AC(v22, v23, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unable to launch %s: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a6 = v26;
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    BOOL v24 = (void *)_convertErrorToNSError(_:)();
    a1 = v27;
  }
  else
  {
    BOOL v24 = 0;
  }
  a6(a1, v24);
}

void sub_1001891D0(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  swift_beginAccess();
  id v5 = a1;
  unint64_t v6 = swift_bridgeObjectRetain();
  unint64_t v7 = (unint64_t)sub_1001A066C(v6);
  swift_bridgeObjectRelease();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v9) {
      goto LABEL_8;
    }
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10) {
      goto LABEL_8;
    }
  }
  else if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v11 = *(os_unfair_lock_s **)(v1 + v3);
    swift_retain();
    os_unfair_lock_unlock(v11 + 4);
    swift_release();
    return;
  }
  if ((v7 & 0xC000000000000001) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v8 = *(id *)(v7 + 32);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_100189354(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v20 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  os_log_type_t v19 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v9 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess();
  id v11 = a1;
  uint64_t v12 = sub_1001A0AB0(v10);

  if (!((unint64_t)*v10 >> 62))
  {
    uint64_t v13 = *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13 >= v12) {
      goto LABEL_3;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v13 < v12) {
    goto LABEL_12;
  }
LABEL_3:
  sub_1001A0E0C(v12, v13, (void (*)(void))&type metadata accessor for DockCoreAccessory);
  swift_endAccess();
  DockCoreInfo.identifier.getter();
  sub_100189850((uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (!((unint64_t)*v10 >> 62))
  {
    uint64_t v14 = *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_5;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_5:
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + v21);
  swift_retain();
  os_unfair_lock_unlock(v15 + 4);
  uint64_t result = swift_release();
  if (!v14)
  {
    if (qword_1002A7C20 != -1) {
      uint64_t result = swift_once();
    }
    if (*(void *)(qword_1002B17A0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan))
    {
      swift_retain();
      sub_1000F11F4(1);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100189850(uint64_t a1)
{
  v30[1] = a1;
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v31 = *(void *)(v1 - 8);
  uint64_t v32 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7B90 != -1) {
    swift_once();
  }
  sub_100151CA4((uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1000A61E4((uint64_t)v10, &qword_1002A7F70);
    uint64_t v16 = v31;
    uint64_t v15 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v3, v30[0] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v32);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to remove paired accessory: Unable to get library path", v19, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v3, v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v33[0] = (id)UUID.uuidString.getter();
    v33[1] = v21;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for URL.DirectoryHint.notDirectory(_:), v4);
    sub_1000E9828();
    URL.append<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRelease();
    id v22 = *(id *)(qword_1002B1558 + OBJC_IVAR____TtC14dockaccessoryd10FileSystem_system);
    URL._bridgeToObjectiveC()(v23);
    uint64_t v25 = v24;
    v33[0] = 0;
    unsigned int v26 = [v22 removeItemAtURL:v24 error:v33];

    if (v26)
    {
      uint64_t v27 = *(uint64_t (**)(char *, uint64_t))(v12 + 8);
      id v28 = v33[0];
      return v27(v14, v11);
    }
    else
    {
      id v29 = v33[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
}

uint64_t sub_100189CF4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v46 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint8_t *)type metadata accessor for DispatchQoS();
  uint64_t v47 = *((void *)v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v43 - v15;
  unint64_t v48 = v7;
  if (a1)
  {
    id v17 = a1;
    sub_1001891D0(v17);
    if (v18)
    {
      os_log_type_t v19 = v18;
      uint64_t v20 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      uint64_t v21 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain();
      os_unfair_lock_lock(v21 + 4);
      swift_release();
      uint64_t v45 = v5;
      id v22 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
      *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected) = v19;
      id v44 = v19;

      uint64_t v23 = 1;
      *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState) = 1;
      BOOL v24 = *(os_unfair_lock_s **)(v2 + v20);
      swift_retain();
      os_unfair_lock_unlock(v24 + 4);
      swift_release();
      sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
      uint64_t v25 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v53 = sub_1001A6038;
      uint64_t v54 = v2;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v50 = 1107296256;
      os_log_type_t v51 = sub_1001468DC;
      uint64_t v52 = &unk_1002793D8;
      unsigned int v26 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      static DispatchQoS.unspecified.getter();
      uint64_t aBlock = (void **)&_swiftEmptyArrayStorage;
      sub_1001A62BC((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000992E8((uint64_t *)&unk_1002A7F60);
      sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
      uint64_t v27 = v46;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v26);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v4);
      (*(void (**)(char *, uint8_t *))(v47 + 8))(v9, v48);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v10);
      unint64_t v38 = v17;
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        long long v41 = (uint8_t *)swift_slowAlloc();
        uint64_t v47 = swift_slowAlloc();
        unint64_t v48 = v41;
        uint64_t aBlock = (void **)&v38->isa;
        *(_DWORD *)long long v41 = 138412290;
        unint64_t v38 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(void *)uint64_t v47 = a1;

        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Can't select %@, it's unknown", v48, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v39 = v38;
      }

      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      return 0;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v10);
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Set connected to nil", v30, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    uint64_t v31 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v32 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v32 + 4);
    swift_release();
    uint64_t v33 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected) = 0;

    *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState) = 2;
    uint64_t v34 = *(os_unfair_lock_s **)(v2 + v31);
    swift_retain();
    os_unfair_lock_unlock(v34 + 4);
    swift_release();
    sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
    uint64_t v35 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v53 = sub_1001A6014;
    uint64_t v54 = v2;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v50 = 1107296256;
    os_log_type_t v51 = sub_1001468DC;
    uint64_t v52 = &unk_1002793B0;
    uint64_t v36 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    uint64_t aBlock = (void **)&_swiftEmptyArrayStorage;
    sub_1001A62BC((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000992E8((uint64_t *)&unk_1002A7F60);
    sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
    uint64_t v37 = v46;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v36);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v37, v4);
    (*(void (**)(char *, uint8_t *))(v47 + 8))(v9, v48);
    return 1;
  }
  return v23;
}

void sub_10018A50C(uint64_t a1)
{
  id v2 = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonNotification);
  if (TrackingButtonState.rawValue.getter() < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    DeviceNotification.state.setter();

    id v3 = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connectNotification);
    DeviceNotification.state.setter();
  }
}

void sub_10018A5EC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - v9;
  if (a1)
  {
    id v11 = a1;
    sub_1001891D0(v11);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      uint64_t v15 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain();
      os_unfair_lock_lock(v15 + 4);
      swift_release();
      uint64_t v16 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked;
      id v17 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
      *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked) = v13;
      id v18 = v13;

      os_log_type_t v19 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
      if (!v19)
      {
LABEL_6:
        uint64_t v23 = *(os_unfair_lock_s **)(v2 + v14);
        swift_retain();
        os_unfair_lock_unlock(v23 + 4);
        swift_release();

        return;
      }
      uint64_t v20 = *(void **)(v2 + v16);
      if (v20)
      {
        id v21 = v19;
        id v22 = v20;
        sub_1001BE638(v22, 0);

        goto LABEL_6;
      }
      __break(1u);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
      uint64_t v35 = v11;
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        unint64_t v38 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v40 = (void *)swift_slowAlloc();
        long long v41 = v38;
        unint64_t v42 = v35;
        *(_DWORD *)unint64_t v38 = 138412290;
        uint64_t v35 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v40 = a1;

        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Can't select %@, it's unknown", v41, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v36 = v35;
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    BOOL v24 = Logger.logObject.getter();
    uint64_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      unsigned int v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v25, "Set docked to nil", v26, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v27 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    id v28 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v28 + 4);
    swift_release();
    uint64_t v29 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked;
    uint64_t v30 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
    if (v30)
    {
      uint64_t v31 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
      if (v31)
      {
        id v32 = v31;
        id v33 = v30;
        sub_1001BE638(v33, 1);
      }
      char v43 = 0;
      swift_beginAccess();
      sub_1000992E8(&qword_1002AA0B0);
      DKThreadSafe.wrappedValue.setter();
      swift_endAccess();
      uint64_t v34 = *(void **)(v2 + v29);
    }
    else
    {
      uint64_t v34 = 0;
    }
    *(void *)(v2 + v29) = 0;

    uint64_t v39 = *(os_unfair_lock_s **)(v2 + v27);
    swift_retain();
    os_unfair_lock_unlock(v39 + 4);
    swift_release();
  }
}

void sub_10018AA90()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  sub_1000992E8(&qword_1002AA0B0);
  DKThreadSafe.wrappedValue.setter();
  swift_endAccess();
  if (sub_10018B750())
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v3 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v4 + 4);
    swift_release();
    uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    uint64_t v6 = *(os_unfair_lock_s **)(v1 + v3);
    id v7 = v5;
    swift_retain();
    os_unfair_lock_unlock(v6 + 4);
    swift_release();
    if (v5)
    {

      uint64_t v2 = 1;
    }
    else
    {
      uint64_t v2 = 0;
    }
  }
  sub_10018AFC0(v2);
}

void sub_10018AB98(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v7 - 8);
  uint64_t v27 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = TrackingButtonState.init(rawValue:)();
  if (v11) {
    uint64_t v12 = 2;
  }
  else {
    uint64_t v12 = v10;
  }
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v14 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v14 + 4);
  swift_release();
  uint64_t v25 = v12;
  *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState) = v12;
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + v13);
  swift_retain();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  uint64_t v16 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v2;
  *(unsigned char *)(v17 + 24) = a1;
  aBlock[4] = sub_1001A6008;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1001468DC;
  uint64_t aBlock[3] = &unk_100279388;
  id v18 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001A62BC((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
  os_log_type_t v19 = *(os_unfair_lock_s **)(v2 + v13);
  swift_retain();
  os_unfair_lock_lock(v19 + 4);
  swift_release();
  uint64_t v20 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  id v21 = *(os_unfair_lock_s **)(v2 + v13);
  id v22 = v20;
  swift_retain();
  os_unfair_lock_unlock(v21 + 4);
  swift_release();
  if (v20)
  {
    uint64_t v23 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
    if (v23)
    {
      id v24 = v23;
      sub_1001BE660(v22, v25);
    }
  }
}

void sub_10018AF60(uint64_t a1)
{
  id v1 = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonNotification);
  DeviceNotification.state.setter();
}

void sub_10018AFC0(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingState;
  *(void *)uint64_t v3 = a1;
  *(unsigned char *)(v3 + 8) = 0;
  uint64_t v4 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v5 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v7 = *(os_unfair_lock_s **)(v1 + v4);
  id v8 = v6;
  swift_retain();
  os_unfair_lock_unlock(v7 + 4);
  swift_release();
  if (v6)
  {
    id v9 = v8;
    sub_10018B0C0(a1, v6);
  }
}

void sub_10018B0C0(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v57 = a1;
  uint64_t v5 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  id v18 = (char *)&v48 - v17;
  if (a2)
  {
    uint64_t v50 = v11;
    uint64_t v51 = v9;
    uint64_t v52 = v7;
    uint64_t v53 = v8;
    uint64_t v56 = v3;
    os_log_type_t v19 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    id v20 = a2;
    id v21 = v19;
    id v22 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    uint64_t v54 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    id v23 = *(id *)&v21[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    uint64_t v55 = v21;
    id v24 = &v21[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v25 = *(void *)v24;
    uint64_t v26 = *(void *)(*(void *)v24 + 16);
    uint64_t v27 = v57;
    if (v26)
    {
      id v49 = v20;
      uint64_t v28 = v25 + 32;
      uint64_t v29 = (void (**)(char *, uint64_t))(v13 + 8);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000A5D40(v28, (uint64_t)v58);
        id v30 = *(id *)(*sub_1000A5DA4(v58, v58[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v30) = static UUID.== infix(_:_:)();
        uint64_t v31 = *v29;
        (*v29)(v16, v12);
        v31(v18, v12);
        if (v30) {
          break;
        }
        sub_100099BCC((uint64_t)v58);
        v28 += 40;
        if (!--v26)
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = v57;
          id v20 = v49;
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v34 = v55;
      id v35 = *(id *)&v55[v54];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v58, (uint64_t)&v59);
      sub_100099BCC((uint64_t)v58);

      uint64_t v27 = v57;
      id v20 = v49;
    }
    else
    {
LABEL_7:
      id v32 = v55;
      id v33 = *(id *)&v55[v54];
      OS_dispatch_semaphore.signal()();

      uint64_t v61 = 0;
      long long v59 = 0u;
      long long v60 = 0u;
    }
    uint64_t v36 = v56;
    if (*((void *)&v60 + 1))
    {
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      if (swift_dynamicCast())
      {
        uint64_t v37 = v58[0];
        uint64_t v39 = v50;
        uint64_t v38 = v51;
        uint64_t v40 = v53;
        (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v36 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v53);
        long long v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = swift_slowAlloc();
          uint64_t v44 = swift_slowAlloc();
          uint64_t v57 = v37;
          *(void *)&long long v59 = v44;
          *(_DWORD *)uint64_t v43 = 136315394;
          v58[0] = sub_1000993AC(0xD00000000000002FLL, 0x8000000100239C90, (uint64_t *)&v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v43 + 12) = 2048;
          v58[0] = TrackerStateEvent.rawValue.getter();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s Updated tracking sensor state=%ld", (uint8_t *)v43, 0x16u);
          swift_arrayDestroy();
          uint64_t v37 = v57;
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v53);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
        }
        uint64_t v45 = type metadata accessor for TaskPriority();
        uint64_t v46 = (uint64_t)v52;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v52, 1, 1, v45);
        uint64_t v47 = (void *)swift_allocObject();
        v47[2] = 0;
        v47[3] = 0;
        v47[4] = v37;
        v47[5] = v27;
        sub_1001BC1D4(v46, (uint64_t)&unk_1002AC1B8, (uint64_t)v47);

        swift_release();
      }
      else
      {
      }
    }
    else
    {

      sub_1000A61E4((uint64_t)&v59, (uint64_t *)&unk_1002AAA30);
    }
  }
}

uint64_t sub_10018B6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a1;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10010DF88;
  return sub_1001A8C8C(a5);
}

uint64_t sub_10018B750()
{
  uint64_t v1 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummary);
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + v1);
  swift_retain_n();
  id v6 = v3;
  swift_retain();
  id v7 = v6;
  os_unfair_lock_unlock(v5 + 4);

  swift_release();
  if (v3)
  {
    if (v4)
    {
      unint64_t v8 = dispatch thunk of TrackingSummaryInternal.subjects.getter();
      if (v8 >> 62) {
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      }
      else {
        uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();

      swift_release_n();
      if (v9 > 0) {
        return 1;
      }
    }
    else
    {
    }
  }
  else
  {
    swift_release_n();
  }
  return 0;
}

unint64_t sub_10018B878(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  id v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v55 - v8;
  uint64_t v56 = v1;
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v66 = v4 + 16;
  uint64_t v67 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  uint64_t v65 = v10;
  ((void (*)(char *))v10)((char *)&v55 - v8);
  id v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v62 = v4;
  if (v14)
  {
    uint64_t v15 = swift_slowAlloc();
    long long v64 = (void (*)(char *, uint64_t))swift_slowAlloc();
    v70[0] = (uint64_t)v64;
    *(_DWORD *)uint64_t v15 = 136315650;
    v69[0] = sub_1000993AC(0xD00000000000001DLL, 0x8000000100239C70, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v16 = CameraSessionInformation.appId.getter();
    v69[0] = sub_1000993AC(v16, v17, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 22) = 2048;
    CameraSessionInformation.cameraType.getter();
    uint64_t v18 = TrackerCamera.rawValue.getter();

    v69[0] = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s session=%s cam=%ld", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v19 = v62;
  }
  else
  {

    uint64_t v19 = v4;
  }
  long long v64 = *(void (**)(char *, uint64_t))(v19 + 8);
  v64(v9, v3);
  uint64_t v55 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v20 = v56;
  id v21 = *(os_unfair_lock_s **)(v56 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v21 + 4);
  swift_release();
  uint64_t v22 = CameraSessionInformation.appId.getter();
  uint64_t v24 = v23;
  uint64_t v25 = (uint64_t *)(v20 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions);
  swift_beginAccess();
  uint64_t v26 = *v25;
  if (*(void *)(*v25 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_10016DB60(v22, v24);
    if (v28)
    {
      unint64_t v29 = *(void *)(*(void *)(v26 + 56) + 8 * v27);
      swift_bridgeObjectRetain();
      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  unint64_t v29 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_9:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = CameraSessionInformation.appId.getter();
  uint64_t v32 = v31;
  sub_1000992E8(&qword_1002A8340);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_100240BF0;
  *(void *)(v33 + 32) = v11;
  v69[0] = v33;
  specialized Array._endMutation()();
  uint64_t v34 = v69[0];
  swift_beginAccess();
  v11;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v68 = *v25;
  uint64_t *v25 = 0x8000000000000000;
  sub_1001F4860(v34, v30, v32, isUniquelyReferenced_nonNull_native);
  uint64_t *v25 = v68;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v36 = CameraSessionInformation.appId.getter();
  uint64_t v37 = (uint64_t *)(v20 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId);
  *uint64_t v37 = v36;
  v37[1] = v38;
  swift_bridgeObjectRelease();
  unint64_t v39 = v29;
  if (v29 >> 62) {
    goto LABEL_23;
  }
  uint64_t v40 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v40)
  {
    v62 += 8;
    unint64_t v63 = v39 & 0xC000000000000001;
    uint64_t v42 = 4;
    *(void *)&long long v41 = 136315650;
    long long v59 = v41;
    unint64_t v58 = 0x8000000100239C70;
    uint64_t v57 = (char *)&type metadata for Any + 8;
    unint64_t v60 = v39;
    uint64_t v61 = v7;
    while (1)
    {
      id v43 = v63 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v39 + 8 * v42);
      uint64_t v44 = v43;
      uint64_t v45 = v42 - 3;
      if (__OFADD__(v42 - 4, 1)) {
        break;
      }
      v65(v7, v67, v3);
      id v46 = v44;
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc();
        v69[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = v59;
        *(void *)(v49 + 4) = sub_1000993AC(0xD00000000000001DLL, v58, v69);
        *(_WORD *)(v49 + 12) = 2080;
        uint64_t v50 = CameraSessionInformation.appId.getter();
        *(void *)(v49 + 14) = sub_1000993AC(v50, v51, v69);

        swift_bridgeObjectRelease();
        *(_WORD *)(v49 + 22) = 2048;
        CameraSessionInformation.cameraType.getter();
        uint64_t v52 = TrackerCamera.rawValue.getter();

        *(void *)(v49 + 24) = v52;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "%s previous session=%s cam=%ld", (uint8_t *)v49, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v39 = v60;
        id v7 = v61;
        swift_slowDealloc();
      }
      else
      {
      }
      v64(v7, v3);
      ++v42;
      if (v45 == v40) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v53 = *(os_unfair_lock_s **)(v56 + v55);
  swift_retain();
  os_unfair_lock_unlock(v53 + 4);
  swift_release();
  sub_100197990();
  return v39;
}

uint64_t sub_10018BF8C(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v9 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v14 = *v10;
  *uint64_t v10 = 0x8000000000000000;
  sub_1001F4720(a2, a3, a1, isUniquelyReferenced_nonNull_native);
  *uint64_t v10 = v14;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v12 = *(os_unfair_lock_s **)(v4 + v8);
  swift_retain();
  os_unfair_lock_unlock(v12 + 4);
  return swift_release();
}

uint64_t sub_10018C090(uint64_t result, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v4 = v3;
    uint64_t v7 = result;
    uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v9 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v9 + 4);
    swift_release();
    uint64_t v10 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps);
    swift_beginAccess();
    uint64_t v11 = *v10;
    if (*(void *)(*v10 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v12 = sub_10016DB60(v7, a2);
      if (v13)
      {
        id v14 = *(id *)(*(void *)(v11 + 56) + 8 * v12);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (a3
          && (sub_100099C7C(0, &qword_1002AC158),
              id v14 = v14,
              id v15 = a3,
              char v16 = static NSObject.== infix(_:_:)(),
              v14,
              v15,
              (v16 & 1) != 0))
        {
          swift_beginAccess();
          unint64_t v17 = (void *)sub_1001EDB94(v7, a2);
          swift_endAccess();
        }
        else
        {
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v18 = *(os_unfair_lock_s **)(v4 + v8);
    swift_retain();
    os_unfair_lock_unlock(v18 + 4);
    return swift_release();
  }
  return result;
}

uint64_t sub_10018C234(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v5 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  uint64_t v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_appIdMap);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*(void *)(*v6 + 16))
  {
    unint64_t v8 = sub_10016DBD8(a1);
    if (v9)
    {
      uint64_t v10 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v8);
      uint64_t v12 = *v10;
      unint64_t v11 = v10[1];
      swift_bridgeObjectRetain();
      sub_10018C9B8(v12, v11);
      swift_beginAccess();
      sub_1001ED150(a1);
      swift_endAccess();
      swift_bridgeObjectRelease();
      char v13 = (void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId);
      uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId + 8);
      if (v14)
      {
        if (v12 == *v13 && v14 == v11)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v16 & 1) == 0) {
            goto LABEL_13;
          }
        }
        *char v13 = 0;
        v13[1] = 0;
      }
      swift_bridgeObjectRelease();
    }
  }
LABEL_13:
  unint64_t v17 = *(os_unfair_lock_s **)(v2 + v4);
  swift_retain();
  os_unfair_lock_unlock(v17 + 4);
  return swift_release();
}

uint64_t sub_10018C3B0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CameraOrientationInternal();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v57 = (char *)&v47 - v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v56 = *(char **)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  char v16 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v16 + 4);
  swift_release();
  *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummary) = a1;
  uint64_t v58 = a1;
  swift_retain();
  swift_release();
  unint64_t v17 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  if (v17)
  {
    uint64_t v50 = v7;
    uint64_t v51 = v4;
    uint64_t v18 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    id v19 = v17;
    uint64_t v20 = v18;
    id v54 = v19;
    id v21 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    uint64_t v55 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    id v22 = *(id *)&v20[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    uint64_t v23 = &v20[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v24 = *(void *)v23;
    uint64_t v25 = *(void *)(*(void *)v23 + 16);
    uint64_t v53 = v15;
    if (v25)
    {
      os_log_type_t v48 = v20;
      uint64_t v49 = v2;
      uint64_t v26 = v24 + 32;
      unint64_t v27 = (void (**)(char *, uint64_t))(v56 + 8);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000A5D40(v26, (uint64_t)v59);
        id v28 = *(id *)(*sub_1000A5DA4(v59, v59[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v28) = static UUID.== infix(_:_:)();
        unint64_t v29 = *v27;
        (*v27)(v12, v9);
        v29(v14, v9);
        if (v28) {
          break;
        }
        sub_100099BCC((uint64_t)v59);
        v26 += 40;
        if (!--v25)
        {
          swift_bridgeObjectRelease();
          uint64_t v2 = v49;
          uint64_t v15 = v53;
          uint64_t v20 = v48;
          goto LABEL_7;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v31 = v48;
      id v32 = *(id *)&v48[v55];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v59, (uint64_t)&v60);
      sub_100099BCC((uint64_t)v59);

      uint64_t v2 = v49;
      uint64_t v15 = v53;
    }
    else
    {
LABEL_7:
      id v30 = *(id *)&v20[v55];
      OS_dispatch_semaphore.signal()();

      uint64_t v62 = 0;
      long long v60 = 0u;
      long long v61 = 0u;
    }
    uint64_t v33 = v57;
    if (*((void *)&v61 + 1))
    {
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      if (swift_dynamicCast())
      {
        uint64_t v57 = (char *)v59[0];
        dispatch thunk of TrackingSummaryInternal.orientation.getter();
        uint64_t v35 = v51;
        uint64_t v34 = v52;
        uint64_t v36 = v50;
        uint64_t v56 = *(char **)(v52 + 104);
        ((void (*)(char *, void, uint64_t))v56)(v50, enum case for CameraOrientationInternal.landscapeLeft(_:), v51);
        sub_1001A62BC(&qword_1002AC1A8, (void (*)(uint64_t))&type metadata accessor for CameraOrientationInternal);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v37 = v60;
        uint64_t v38 = v59[0];
        unint64_t v39 = *(void (**)(char *, uint64_t))(v34 + 8);
        v39(v36, v35);
        v39(v33, v35);
        if (v37 == v38)
        {

          uint64_t v15 = v53;
          uint64_t v40 = v57;
        }
        else
        {
          dispatch thunk of TrackingSummaryInternal.orientation.getter();
          ((void (*)(char *, void, uint64_t))v56)(v36, enum case for CameraOrientationInternal.landscapeRight(_:), v35);
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();

          uint64_t v41 = v60;
          uint64_t v42 = v59[0];
          v39(v36, v35);
          v39(v33, v35);
          uint64_t v15 = v53;
          uint64_t v40 = v57;
          if (v41 != v42)
          {
            uint64_t v43 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader;
            char v44 = v57[OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader] & 0xFE;
            goto LABEL_18;
          }
        }
        uint64_t v43 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader;
        char v44 = v40[OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader] | 1;
LABEL_18:
        v40[v43] = v44;
        swift_release();
        goto LABEL_19;
      }
    }
    else
    {

      sub_1000A61E4((uint64_t)&v60, (uint64_t *)&unk_1002AAA30);
    }
  }
LABEL_19:
  uint64_t v45 = *(os_unfair_lock_s **)(v2 + v15);
  swift_retain();
  os_unfair_lock_unlock(v45 + 4);
  return swift_release();
}

void sub_10018C9B8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v6 - 8);
  uint64_t v74 = &v70[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v78 = type metadata accessor for UUID();
  uint64_t v8 = *(void (***)(void, uint64_t))(v78 - 8);
  uint64_t v9 = __chkstk_darwin(v78);
  uint64_t v77 = &v70[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v76 = &v70[-v11];
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v70[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v13 + 16))(v15, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v12);
  swift_bridgeObjectRetain_n();
  char v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v75 = v3;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v72 = v12;
    *(void *)&long long v80 = v20;
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v73 = v8;
    v79[0] = sub_1000993AC(0xD00000000000001CLL, 0x8000000100239C50, (uint64_t *)&v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain();
    v79[0] = sub_1000993AC(a1, a2, (uint64_t *)&v80);
    uint64_t v8 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s finish camera session app=%s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v75;
    swift_slowDealloc();

    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v72);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
  }
  id v21 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions);
  swift_beginAccess();
  uint64_t v22 = *v21;
  if (*(void *)(*v21 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v23 = sub_10016DB60(a1, a2);
    if (v24)
    {
      unint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v25 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v26)
        {
LABEL_8:
          unint64_t v27 = v26 - 1;
          if (__OFSUB__(v26, 1))
          {
            __break(1u);
          }
          else if ((v25 & 0xC000000000000001) == 0)
          {
            if ((v27 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v27 < *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              id v28 = *(id *)(v25 + 8 * v27 + 32);
LABEL_13:
              unint64_t v29 = v28;
              swift_bridgeObjectRelease();
              id v30 = [objc_allocWithZone((Class)NSDate) init];
              [v30 timeIntervalSince1970];

              CameraSessionInformation.endTime.setter();
              goto LABEL_17;
            }
            __break(1u);
            goto LABEL_51;
          }
          id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v26) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
LABEL_17:
  uint64_t v31 = *v21;
  if (!*(void *)(*v21 + 16))
  {
LABEL_30:
    BOOL v40 = 0;
    goto LABEL_31;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v32 = sub_10016DB60(a1, a2);
  if ((v33 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  unint64_t v34 = *(void *)(*(void *)(v31 + 56) + 8 * v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!(v34 >> 62))
  {
    uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v35) {
      goto LABEL_21;
    }
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v35)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
LABEL_21:
  unint64_t v36 = v35 - 1;
  if (__OFSUB__(v35, 1))
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if ((v34 & 0xC000000000000001) != 0)
  {
LABEL_52:
    id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_26;
  }
  if ((v36 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_54;
  }
  if (v36 >= *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_54:
    __break(1u);
    return;
  }
  id v37 = *(id *)(v34 + 8 * v36 + 32);
LABEL_26:
  uint64_t v38 = v37;
  swift_bridgeObjectRelease();
  CameraSessionInformation.cameraType.getter();

  uint64_t v39 = TrackerCamera.rawValue.getter();
  BOOL v40 = v39 == TrackerCamera.rawValue.getter();
LABEL_31:
  uint64_t v41 = TrackingButtonState.rawValue.getter();
  if (v41 == TrackingButtonState.rawValue.getter())
  {
    uint64_t v42 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    if (v42)
    {
      BOOL v71 = v40;
      uint64_t v75 = v3;
      uint64_t v43 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
      char v44 = v42;
      uint64_t v45 = v43;
      id v46 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
      uint64_t v47 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
      id v48 = *(id *)&v45[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
      OS_dispatch_semaphore.wait()();

      uint64_t v49 = &v45[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
      swift_beginAccess();
      uint64_t v50 = *(void *)v49;
      uint64_t v51 = *(void *)(*(void *)v49 + 16);
      if (v51)
      {
        uint64_t v72 = v47;
        uint64_t v73 = v44;
        uint64_t v52 = v50 + 32;
        uint64_t v53 = (void (**)(unsigned char *, uint64_t))(v8 + 1);
        swift_bridgeObjectRetain();
        id v54 = v76;
        while (1)
        {
          sub_1000A5D40(v52, (uint64_t)v79);
          id v55 = *(id *)(*sub_1000A5DA4(v79, v79[3]) + 24);
          DockCoreInfo.identifier.getter();

          uint64_t v56 = v77;
          DockCoreInfo.identifier.getter();
          LOBYTE(v55) = static UUID.== infix(_:_:)();
          uint64_t v57 = *v53;
          uint64_t v58 = v56;
          uint64_t v59 = v78;
          (*v53)(v58, v78);
          v57(v54, v59);
          if (v55) {
            break;
          }
          sub_100099BCC((uint64_t)v79);
          v52 += 40;
          if (!--v51)
          {
            swift_bridgeObjectRelease();
            char v44 = v73;
            uint64_t v47 = v72;
            goto LABEL_38;
          }
        }
        swift_bridgeObjectRelease();
        id v69 = *(id *)&v45[v72];
        OS_dispatch_semaphore.signal()();

        sub_1000A5D40((uint64_t)v79, (uint64_t)&v80);
        sub_100099BCC((uint64_t)v79);

        char v44 = v73;
        if (!*((void *)&v81 + 1)) {
          goto LABEL_43;
        }
      }
      else
      {
LABEL_38:
        id v60 = *(id *)&v45[v47];
        OS_dispatch_semaphore.signal()();

        uint64_t v82 = 0;
        long long v80 = 0u;
        long long v81 = 0u;

        if (!*((void *)&v81 + 1))
        {
LABEL_43:

          sub_1000A61E4((uint64_t)&v80, (uint64_t *)&unk_1002AAA30);
          return;
        }
      }
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      if (swift_dynamicCast())
      {
        uint64_t v61 = v79[0];
        type metadata accessor for Actuator();
        static Actuator.Pitch.getter();
        uint64_t v62 = (void *)dispatch thunk of DockCoreAccessory.getActuator(name:)();
        swift_bridgeObjectRelease();
        if (v62)
        {
          uint64_t v63 = type metadata accessor for TaskPriority();
          uint64_t v64 = (uint64_t)v74;
          (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v74, 1, 1, v63);
          uint64_t v65 = swift_allocObject();
          *(void *)(v65 + 16) = 0;
          *(void *)(v65 + 24) = 0;
          uint64_t v66 = v75;
          *(void *)(v65 + 32) = v75;
          *(unsigned char *)(v65 + 40) = v71;
          *(void *)(v65 + 48) = v62;
          *(void *)(v65 + 56) = v61;
          swift_retain();
          id v67 = v62;
          swift_retain();
          uint64_t v68 = sub_1001BC1A8(v64, (uint64_t)&unk_1002AC198, v65);

          swift_release();
          *(void *)(v66 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask) = v68;
          swift_release();
          return;
        }
        swift_release();
      }
    }
  }
}

uint64_t sub_10018D364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a7;
  *(unsigned char *)(v7 + 34) = a5;
  *(void *)(v7 + 40) = a4;
  uint64_t v8 = type metadata accessor for TrajectoryCommand();
  *(void *)(v7 + 64) = v8;
  *(void *)(v7 + 72) = *(void *)(v8 - 8);
  *(void *)(v7 + 80) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ContinuousClock();
  *(void *)(v7 + 88) = v9;
  *(void *)(v7 + 96) = *(void *)(v9 - 8);
  *(void *)(v7 + 104) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v7 + 112) = v10;
  *(void *)(v7 + 120) = *(void *)(v10 - 8);
  *(void *)(v7 + 128) = swift_task_alloc();
  *(void *)(v7 + 136) = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10018D4F4, 0, 0);
}

uint64_t sub_10018D4F4()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  static ContinuousClock.Instant.now.getter();
  static Duration.seconds(_:)();
  ContinuousClock.Instant.advanced(by:)();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v0 + 144) = v4;
  *(void *)(v0 + 152) = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v1, v2);
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  ContinuousClock.init()();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v5;
  uint64_t v6 = sub_1001A62BC(&qword_1002AC1A0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  void *v5 = v0;
  v5[1] = sub_10018D648;
  uint64_t v7 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 104);
  uint64_t v9 = *(void *)(v0 + 88);
  return static Task<>.sleep<A>(until:tolerance:clock:)(v7, v0 + 16, v8, v9, v6);
}

uint64_t sub_10018D648()
{
  uint64_t v2 = (void *)*v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[18];
    uint64_t v4 = v2[17];
    uint64_t v6 = v2[13];
    uint64_t v5 = v2[14];
    uint64_t v9 = v2 + 11;
    uint64_t v7 = v2[11];
    uint64_t v8 = v9[1];
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v3(v4, v5);
  }
  else
  {
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v2[18];
    uint64_t v11 = v2[17];
    uint64_t v12 = v2[14];
    (*(void (**)(void, void))(v2[12] + 8))(v2[13], v2[11]);
    v10(v11, v12);
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10018D7D8, 0, 0);
}

uint64_t sub_10018D7D8()
{
  if (static Task<>.isCancelled.getter())
  {
LABEL_6:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  if (*(unsigned char *)(v0 + 34) == 1) {
    Actuator.homePosition.getter();
  }
  uint64_t v1 = *(void *)(v0 + 80);
  dispatch thunk of Component.id.getter();
  sub_10018DBA8(v1);
  uint64_t v2 = TrajectoryCommand.encode()();
  *(void *)(v0 + 168) = v3;
  if (v3 >> 60 == 15)
  {
    uint64_t v4 = *(void *)(v0 + 40);
    (*(void (**)(void, void))(*(void *)(v0 + 72) + 8))(*(void *)(v0 + 80), *(void *)(v0 + 64));
    *(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask) = 0;
    swift_release();
    goto LABEL_6;
  }
  uint64_t v7 = v2;
  unint64_t v8 = v3;
  uint64_t v9 = *(void *)(v0 + 56);
  *(void *)(v0 + 176) = v2;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v10;
  v10[2] = v9;
  v10[3] = v7;
  void v10[4] = v8;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v11;
  void *v11 = v0;
  v11[1] = sub_10018D9D0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 33, 0, 0, 0xD000000000000012, 0x80000001002375E0, sub_100135AB0, v10, &type metadata for Bool);
}

uint64_t sub_10018D9D0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10018DAE8, 0, 0);
}

uint64_t sub_10018DAE8()
{
  sub_1000A9990(v0[22], v0[21]);
  uint64_t v1 = v0[5];
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask) = 0;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_10018DBA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v1 = sub_1000992E8(&qword_1002AC178);
  __chkstk_darwin(v1 - 8);
  unint64_t v29 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for TrajectoryCommand.Animation();
  uint64_t v3 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  unint64_t v25 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TrajectoryCommand.TrajectoryPoint();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for TrajectoryCommand.Trajectory();
  uint64_t v26 = *(void *)(v28 - 8);
  uint64_t v9 = v26;
  __chkstk_darwin(v28);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  TrajectoryCommand.Trajectory.init()();
  TrajectoryCommand.Trajectory.actuatorId.setter();
  TrajectoryCommand.Trajectory.duration.setter();
  TrajectoryCommand.Trajectory.positionCommand.setter();
  TrajectoryCommand.Trajectory.velocityCommand.setter();
  TrajectoryCommand.Trajectory.relative.setter();
  TrajectoryCommand.TrajectoryPoint.init()();
  TrajectoryCommand.TrajectoryPoint.position.setter();
  TrajectoryCommand.TrajectoryPoint.velocity.setter();
  TrajectoryCommand.TrajectoryPoint.time.setter();
  sub_1000992E8(&qword_1002AC180);
  uint64_t v24 = v6;
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = swift_allocObject();
  long long v23 = xmmword_100240BE0;
  *(_OWORD *)(v13 + 16) = xmmword_100240BE0;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 16))(v13 + v12, v8, v5);
  TrajectoryCommand.Trajectory.points.setter();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v25, enum case for TrajectoryCommand.Animation.Custom(_:), v27);
  uint64_t v14 = enum case for TrajectoryCommand.Priority.Low(_:);
  uint64_t v15 = type metadata accessor for TrajectoryCommand.Priority();
  uint64_t v16 = *(void *)(v15 - 8);
  os_log_type_t v17 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v29, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v17, 0, 1, v15);
  sub_1000992E8(&qword_1002AC188);
  unint64_t v18 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v23;
  unint64_t v20 = v19 + v18;
  uint64_t v21 = v28;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 16))(v20, v11, v28);
  TrajectoryCommand.init(type:priority:trajectories:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v21);
}

id sub_10018DFF0(void *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  char v44 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v41 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v41 - v15;
  os_log_type_t v17 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
  sub_1001891D0(v17);
  id v19 = v18;

  if (v19)
  {
    if ((a2 & 1) == 0) {
      return v19;
    }
  }
  uint64_t v43 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  unint64_t v20 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v20 + 4);
  swift_release();
  if (a2)
  {
    swift_beginAccess();
    id v21 = a1;
    unint64_t v22 = swift_bridgeObjectRetain();
    id v19 = sub_1001A07F0(v22);
    swift_bridgeObjectRelease();

    if (v19)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v6);
      long long v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        unint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Found already paired accessory with the same info. Updating the accessory", v25, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
      dispatch thunk of DockCoreAccessory.updateFrom(accessory:)();
      uint64_t v26 = *(os_unfair_lock_s **)(v3 + v43);
      swift_retain();
      os_unfair_lock_unlock(v26 + 4);
      swift_release();
      return v19;
    }
    uint64_t v28 = v7;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v14, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v6);
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Not found any paired accessory with the same info. Saving paired accessory", v31, 2u);
      swift_slowDealloc();
    }

    unint64_t v32 = v14;
    uint64_t v27 = v6;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v32, v6);
  }
  else
  {
    uint64_t v27 = v6;
    uint64_t v28 = v7;
  }
  sub_10018E6C0(a1);
  char v33 = (void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess();
  id v19 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  unint64_t v34 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v42, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v27);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    id v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Saved paired accessory", v37, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v28 + 8))(v34, v27);
  uint64_t v38 = *(os_unfair_lock_s **)(v3 + v43);
  swift_retain();
  os_unfair_lock_unlock(v38 + 4);
  swift_release();
  id v39 = v19;
  return v19;
}

uint64_t sub_10018E6C0(void *a1)
{
  uint64_t v66 = a1;
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v68 = *(void *)(v1 - 8);
  uint64_t v69 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v65 = (char *)&v60 - v5;
  uint64_t v6 = type metadata accessor for URL.DirectoryHint();
  uint64_t v62 = *(void *)(v6 - 8);
  uint64_t v63 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v64 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v67 = (char *)&v60 - v20;
  if (qword_1002A7B90 != -1) {
    swift_once();
  }
  sub_100151CA4((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_1000A61E4((uint64_t)v15, &qword_1002A7F70);
    uint64_t v22 = v68;
    uint64_t v21 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v4, v71 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v69);
    long long v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to save paired accessory: Unable to get library path", v25, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v4, v21);
  }
  else
  {
    uint64_t v60 = v17;
    uint64_t v61 = v16;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v67, v15, v16);
    uint64_t v27 = v66;
    uint64_t v28 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    DockCoreInfo.identifier.getter();

    unint64_t v29 = (void *)UUID.uuidString.getter();
    uint64_t v31 = v30;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    v73[0] = v29;
    v73[1] = v31;
    uint64_t v33 = v62;
    uint64_t v32 = v63;
    (*(void (**)(char *, void, uint64_t))(v62 + 104))(v8, enum case for URL.DirectoryHint.notDirectory(_:), v63);
    sub_1000E9828();
    URL.append<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v32);
    swift_bridgeObjectRelease();
    uint64_t v35 = v68;
    uint64_t v34 = v69;
    os_log_type_t v36 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v65, v71 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v69);
    id v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc();
      v73[0] = (id)swift_slowAlloc();
      *(_DWORD *)id v39 = 136315138;
      swift_beginAccess();
      Swift::String v40 = URL.path(percentEncoded:)(1);
      uint64_t v72 = sub_1000993AC(v40._countAndFlagsBits, (unint64_t)v40._object, (uint64_t *)v73);
      uint64_t v27 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Attempting to save paired accessory to disk at %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v35 + 8))(v65, v34);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
    }
    uint64_t v41 = v70;
    dispatch thunk of DockCoreAccessory.prepForPersistence()();
    uint64_t v42 = self;
    v73[0] = 0;
    id v43 = [v42 archivedDataWithRootObject:v27 requiringSecureCoding:1 error:v73];
    id v44 = v73[0];
    uint64_t v45 = v64;
    if (v43)
    {
      uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v48 = v47;

      uint64_t v49 = v67;
      swift_beginAccess();
      uint64_t v51 = v60;
      uint64_t v50 = v61;
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v45, v49, v61);
      Data.write(to:options:)();
      if (v41)
      {
        uint64_t v52 = *(void (**)(char *, uint64_t))(v51 + 8);
        v52(v45, v50);
        sub_1000A6240(v46, v48);
        return ((uint64_t (*)(char *, uint64_t))v52)(v49, v50);
      }
      else
      {
        id v54 = *(void (**)(char *, uint64_t))(v51 + 8);
        v54(v45, v50);
        id v55 = *(void **)(v71 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
        if (v55)
        {
          uint64_t v56 = v50;
          id v57 = v55;
          sub_1001BEEAC(v27);
          sub_1000A6240(v46, v48);

          uint64_t v58 = v49;
          uint64_t v59 = v56;
        }
        else
        {
          sub_1000A6240(v46, v48);
          uint64_t v58 = v49;
          uint64_t v59 = v50;
        }
        return ((uint64_t (*)(char *, uint64_t))v54)(v58, v59);
      }
    }
    else
    {
      uint64_t v53 = v44;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v67, v61);
    }
  }
}

void sub_10018EEEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v55 = a2;
  uint64_t v56 = a6;
  uint64_t v53 = a4;
  uint64_t v54 = a5;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = &v39[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  uint64_t v19 = &v39[-v18];
  sub_1001891D0(a1);
  if (v20)
  {
    uint64_t v21 = v20;
    int v50 = a8;
    uint64_t v51 = v8;
    uint64_t v22 = *(void (**)(void))(v14 + 16);
    uint64_t v47 = v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
    uint64_t v48 = v14 + 16;
    uint64_t v46 = v22;
    v22(v19);
    swift_bridgeObjectRetain_n();
    id v23 = a1;
    swift_bridgeObjectRetain_n();
    id v24 = v23;
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    int v27 = v26;
    BOOL v28 = os_log_type_enabled(v25, v26);
    uint64_t v52 = v14;
    uint64_t v49 = v17;
    if (v28)
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v43 = a7;
      uint64_t v31 = (void *)v30;
      uint64_t v42 = v30;
      id v44 = (void (*)(void, void))swift_slowAlloc();
      uint64_t v59 = v44;
      *(_DWORD *)uint64_t v29 = 138412802;
      uint64_t v45 = v13;
      uint64_t v57 = (uint64_t)v24;
      os_log_t v41 = v25;
      id v32 = v24;
      int v40 = v27;
      id v33 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v24;
      a7 = v43;

      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v57 = v55;
      uint64_t v58 = a3;
      swift_bridgeObjectRetain();
      sub_1000992E8((uint64_t *)&unk_1002A82C0);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v57 = sub_1000993AC(v34, v35, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2080;
      uint64_t v13 = v45;
      uint64_t v57 = v56;
      uint64_t v58 = a7;
      swift_bridgeObjectRetain();
      uint64_t v36 = String.init<A>(describing:)();
      uint64_t v57 = sub_1000993AC(v36, v37, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      os_log_t v38 = v41;
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v40, "Updating accessory information for %@: firmware %s, model %s", (uint8_t *)v29, 0x20u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v14 = v52;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    id v44 = *(void (**)(void, void))(v14 + 8);
    v44(v19, v13);
    if (!a3) {
      uint64_t v55 = dispatch thunk of DockCoreAccessory.firmwareVersion.getter();
    }
    swift_bridgeObjectRetain();
    dispatch thunk of DockCoreAccessory.firmwareVersion.setter();
    if (!v54) {
      dispatch thunk of DockCoreAccessory.serialNumber.getter();
    }
    swift_bridgeObjectRetain();
    dispatch thunk of DockCoreAccessory.serialNumber.setter();
    if (!a7) {
      uint64_t v56 = dispatch thunk of DockCoreAccessory.model.getter();
    }
    swift_bridgeObjectRetain();
    dispatch thunk of DockCoreAccessory.model.setter();
    dispatch thunk of DockCoreAccessory.certified.setter();
    dispatch thunk of DockCoreAccessory.isMagSafe.setter();
    sub_10018E6C0(v21);
  }
}

uint64_t sub_10018F564(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v47 = a2;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v44 - v14;
  uint64_t v48 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v16 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v16 + 4);
  swift_release();
  uint64_t v17 = (uint64_t *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__processesAuthorizedForCamera);
  if (a4)
  {
    swift_beginAccess();
    if ((sub_100183A18(a1, *v17) & 1) == 0)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v9);
      swift_bridgeObjectRetain_n();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v46 = v9;
        uint64_t v21 = v20;
        uint64_t v45 = swift_slowAlloc();
        uint64_t v51 = v45;
        *(_DWORD *)uint64_t v21 = 67109378;
        LODWORD(v49) = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v21 + 8) = 2080;
        uint64_t v44 = v21 + 10;
        uint64_t v49 = v47;
        uint64_t v50 = a3;
        swift_bridgeObjectRetain();
        sub_1000992E8((uint64_t *)&unk_1002A82C0);
        uint64_t v22 = String.init<A>(describing:)();
        uint64_t v49 = sub_1000993AC(v22, v23, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "caching %d [%s] authorized for camera permission", (uint8_t *)v21, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v46);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      }
      swift_beginAccess();
      uint64_t v30 = (void *)*v17;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v17 = (uint64_t)v30;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v30 = sub_100102808(0, v30[2] + 1, 1, v30);
        *uint64_t v17 = (uint64_t)v30;
      }
      unint64_t v33 = v30[2];
      unint64_t v32 = v30[3];
      if (v33 >= v32 >> 1)
      {
        uint64_t v30 = sub_100102808((void *)(v32 > 1), v33 + 1, 1, v30);
        *uint64_t v17 = (uint64_t)v30;
      }
      void v30[2] = v33 + 1;
      *((_DWORD *)v30 + v33 + 8) = a1;
      swift_endAccess();
    }
  }
  else
  {
    swift_beginAccess();
    if (sub_100183A18(a1, *v17))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v9);
      swift_bridgeObjectRetain_n();
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = swift_slowAlloc();
        uint64_t v46 = v9;
        uint64_t v27 = v26;
        uint64_t v45 = swift_slowAlloc();
        uint64_t v51 = v45;
        *(_DWORD *)uint64_t v27 = 67109378;
        LODWORD(v49) = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 8) = 2080;
        uint64_t v44 = v27 + 10;
        uint64_t v49 = v47;
        uint64_t v50 = a3;
        swift_bridgeObjectRetain();
        sub_1000992E8((uint64_t *)&unk_1002A82C0);
        uint64_t v28 = String.init<A>(describing:)();
        uint64_t v49 = sub_1000993AC(v28, v29, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Clearing TCC cached authorization value for %d [%s]", (uint8_t *)v27, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v46);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      }
      uint64_t v34 = *v17;
      uint64_t v35 = *(void *)(*v17 + 16);
      if (v35)
      {
        swift_bridgeObjectRetain();
        uint64_t v36 = 0;
        unint64_t v37 = _swiftEmptyArrayStorage;
        do
        {
          int v40 = *(_DWORD *)(v34 + 4 * v36 + 32);
          if (v40 != a1)
          {
            char v41 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v49 = (uint64_t)v37;
            if ((v41 & 1) == 0)
            {
              sub_1001DC564(0, v37[2] + 1, 1);
              unint64_t v37 = (void *)v49;
            }
            unint64_t v39 = v37[2];
            unint64_t v38 = v37[3];
            if (v39 >= v38 >> 1)
            {
              sub_1001DC564(v38 > 1, v39 + 1, 1);
              unint64_t v37 = (void *)v49;
            }
            v37[2] = v39 + 1;
            *((_DWORD *)v37 + v39 + 8) = v40;
          }
          ++v36;
        }
        while (v35 != v36);
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v37 = _swiftEmptyArrayStorage;
      }
      *uint64_t v17 = (uint64_t)v37;
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v42 = *(os_unfair_lock_s **)(v5 + v48);
  swift_retain();
  os_unfair_lock_unlock(v42 + 4);
  return swift_release();
}

uint64_t sub_10018FBC8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients;
  swift_beginAccess();
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  uint64_t v3 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients;
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(*(void *)v3 + 16);
  BOOL v6 = __OFADD__(v2, v5);
  uint64_t v7 = v2 + v5;
  if (v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients;
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *(void *)(*(void *)v8 + 16);
  BOOL v6 = __OFADD__(v7, v9);
  uint64_t v10 = v7 + v9;
  if (v6)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v11 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients;
  uint64_t result = swift_beginAccess();
  uint64_t v12 = *(void *)(*(void *)v11 + 16);
  BOOL v6 = __OFADD__(v10, v12);
  uint64_t v13 = v10 + v12;
  if (v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v14 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients;
  uint64_t result = swift_beginAccess();
  uint64_t v15 = *(void *)(*(void *)v14 + 16);
  BOOL v6 = __OFADD__(v13, v15);
  uint64_t v16 = v13 + v15;
  if (v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v17 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients;
  uint64_t result = swift_beginAccess();
  uint64_t v18 = *(void *)(*(void *)v17 + 16);
  BOOL v6 = __OFADD__(v16, v18);
  uint64_t v19 = v16 + v18;
  if (v6)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v20 = v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients;
  swift_beginAccess();
  uint64_t v21 = *(void *)(*(void *)v20 + 16);
  uint64_t result = v19 + v21;
  if (__OFADD__(v19, v21)) {
LABEL_13:
  }
    __break(1u);
  return result;
}

uint64_t sub_10018FD54(int a1, void *a2)
{
  return sub_1001A2BDC(a1, a2, (uint64_t)&OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients, "added first event client, taking transaction");
}

uint64_t sub_10018FD68(int a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v13 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v13 + 4);
  swift_release();
  uint64_t v14 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients);
  swift_beginAccess();
  id v15 = a2;
  id v16 = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v29 = *v14;
  *uint64_t v14 = 0x8000000000000000;
  sub_1001F58E0((uint64_t)a2, (uint64_t)v16, a1, isUniquelyReferenced_nonNull_native);
  *uint64_t v14 = v29;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v18 = sub_10018FBC8();
  uint64_t v19 = *(os_unfair_lock_s **)(v4 + v12);
  swift_retain();
  os_unfair_lock_unlock(v19 + 4);
  swift_release();
  if (v18 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v8);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "added first battery client, taking transaction", v22, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_100199524(1);
  }
  uint64_t v23 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer;
  if (!*(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer))
  {
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = v4;
    *(void *)(v24 + 24) = v16;
    objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
    id v25 = v16;
    swift_retain();
    uint64_t v26 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
    uint64_t v27 = *(void **)(v4 + v23);
    *(void *)(v4 + v23) = v26;
  }
  return 1;
}

uint64_t sub_100190048(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v4 - 8);
  BOOL v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  swift_retain();
  id v9 = a2;
  sub_1001BC1A8((uint64_t)v6, (uint64_t)&unk_1002AC170, (uint64_t)v8);
  return swift_release();
}

uint64_t sub_100190150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  v5[19] = v7;
  v5[20] = *(void *)(v7 - 8);
  v5[21] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  v5[22] = v8;
  v5[23] = *(void *)(v8 - 8);
  v5[24] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  v5[25] = v9;
  v5[26] = *(void *)(v9 - 8);
  v5[27] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v5[28] = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_100190300;
  return sub_1001983C4(a5);
}

uint64_t sub_100190300(uint64_t a1)
{
  *(void *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return ((uint64_t (*)(void (*)(), void, void))_swift_task_switch)(sub_100190400, 0, 0);
}

void sub_100190400()
{
  uint64_t v1 = v0[29];
  if (!v1)
  {
    (*(void (**)(void, uint64_t, void))(v0[26] + 16))(v0[27], v0[17] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v0[25]);
    unint64_t v39 = Logger.logObject.getter();
    uint64_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, (os_log_type_t)v40))
    {
      char v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v40, "Error reading battery data", v41, 2u);
      swift_slowDealloc();
    }
    uint64_t v43 = v0[26];
    uint64_t v42 = v0[27];
    uint64_t v44 = v0[25];

    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
LABEL_47:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v45 = (void (*)(void))v0[1];
    v45();
    return;
  }
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[17];
  sub_1001FBC9C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  BOOL v6 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  swift_release();
  uint64_t v7 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients);
  swift_beginAccess();
  uint64_t v8 = *v7;
  uint64_t v9 = *(os_unfair_lock_s **)(v4 + v5);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v9 + 4);
  swift_release();
  int64_t v10 = 0;
  uint64_t v58 = v8 + 64;
  uint64_t v11 = -1;
  uint64_t v12 = -1 << *(unsigned char *)(v8 + 32);
  if (-v12 < 64) {
    uint64_t v11 = ~(-1 << -(char)v12);
  }
  unint64_t v13 = v11 & *(void *)(v8 + 64);
  int64_t v59 = (unint64_t)(63 - v12) >> 6;
  uint64_t v48 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v14 = (void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v15 = v8;
  uint64_t v16 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v1 < 0) {
    uint64_t v16 = v1;
  }
  uint64_t v46 = v16;
  uint64_t v47 = v14;
  uint64_t v57 = v8;
  while (v13)
  {
    unint64_t v17 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v18 = v17 | (v10 << 6);
LABEL_24:
    uint64_t v22 = *(void *)(v15 + 56) + 16 * v18;
    if (*(void *)v22)
    {
      uint64_t v23 = *(void **)(v22 + 8);
      id v24 = *(id *)v22;
      id v25 = v23;
      id v26 = [v24 remoteObjectProxy];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000992E8((uint64_t *)&unk_1002A9F30);
      if (swift_dynamicCast())
      {
        uint64_t v27 = (void *)v0[15];
        sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
        id v28 = v25;
        char v29 = static NSObject.== infix(_:_:)();

        if (v29)
        {
          uint64_t v55 = v28;
          if (qword_1002A7C00 != -1) {
            swift_once();
          }
          uint64_t v30 = qword_1002B1628;
          uint64_t v56 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
          uint64_t v31 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
          swift_retain();
          os_unfair_lock_lock(v31 + 4);
          swift_release();
          uint64_t v32 = *(void *)(v30 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
          if (v32)
          {
            unint64_t v33 = *(void **)(v32 + 24);
            if (v33)
            {
              uint64_t v51 = v0[22];
              uint64_t v52 = v0[21];
              uint64_t v53 = v0[19];
              uint64_t v54 = v0[24];
              v0[6] = sub_1000BF168;
              v0[7] = v32;
              v0[2] = _NSConcreteStackBlock;
              v0[3] = 1107296256;
              v0[4] = sub_1001468DC;
              v0[5] = &unk_1002792E8;
              uint64_t v50 = _Block_copy(v0 + 2);
              swift_retain_n();
              id v49 = v33;
              static DispatchQoS.unspecified.getter();
              v0[16] = _swiftEmptyArrayStorage;
              sub_1001A62BC((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              sub_1000992E8((uint64_t *)&unk_1002A7F60);
              sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
              dispatch thunk of SetAlgebra.init<A>(_:)();
              OS_dispatch_queue.async(group:qos:flags:execute:)();
              _Block_release(v50);

              (*v48)(v52, v53);
              (*v47)(v54, v51);
              swift_release();
              swift_release();
            }
          }
          uint64_t v34 = *(os_unfair_lock_s **)(v30 + v56);
          swift_retain();
          os_unfair_lock_unlock(v34 + 4);
          swift_release();
          if ((unint64_t)v1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
            if (!v35) {
              goto LABEL_42;
            }
          }
          else
          {
            uint64_t v35 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v35) {
              goto LABEL_42;
            }
          }
          if (v35 < 1) {
            goto LABEL_52;
          }
          for (uint64_t i = 0; i != v35; ++i)
          {
            if ((v1 & 0xC000000000000001) != 0) {
              id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v37 = *(id *)(v1 + 8 * i + 32);
            }
            unint64_t v38 = v37;
            [v27 batteryStateDataWithInfo:v0[18] data:v37, v46];
          }
LABEL_42:

          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();

          uint64_t v15 = v57;
        }
        else
        {
          swift_unknownObjectRelease();

          uint64_t v15 = v57;
        }
      }
      else
      {
      }
    }
  }
  int64_t v19 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_51;
  }
  if (v19 >= v59) {
    goto LABEL_43;
  }
  unint64_t v20 = *(void *)(v58 + 8 * v19);
  ++v10;
  if (v20) {
    goto LABEL_23;
  }
  int64_t v10 = v19 + 1;
  if (v19 + 1 >= v59) {
    goto LABEL_43;
  }
  unint64_t v20 = *(void *)(v58 + 8 * v10);
  if (v20) {
    goto LABEL_23;
  }
  int64_t v10 = v19 + 2;
  if (v19 + 2 >= v59) {
    goto LABEL_43;
  }
  unint64_t v20 = *(void *)(v58 + 8 * v10);
  if (v20)
  {
LABEL_23:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v10 << 6);
    goto LABEL_24;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v59)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_47;
  }
  unint64_t v20 = *(void *)(v58 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v59) {
      goto LABEL_43;
    }
    unint64_t v20 = *(void *)(v58 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
}

uint64_t sub_100190B64(int a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  unint64_t v13 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v13 + 4);
  swift_release();
  uint64_t v14 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients);
  swift_beginAccess();
  id v15 = a2;
  id v16 = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v24 = *v14;
  *uint64_t v14 = 0x8000000000000000;
  sub_1001F58EC((uint64_t)a2, (uint64_t)v16, a1, isUniquelyReferenced_nonNull_native);
  *uint64_t v14 = v24;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v18 = sub_10018FBC8();
  int64_t v19 = *(os_unfair_lock_s **)(v4 + v12);
  swift_retain();
  os_unfair_lock_unlock(v19 + 4);
  swift_release();
  if (v18 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v8);
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "added first tracking state client, taking transaction", v22, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_100199524(1);
  }
  return 1;
}

uint64_t sub_100190DC0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = v6;
  uint64_t v32 = DockCoreInfo.description.getter();
  uint64_t v13 = v12;
  uint64_t v35 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v14 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v14 + 4);
  swift_release();
  id v15 = (uint64_t *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess();
  if (!*(void *)(*v15 + 16) || (sub_10016DBD8(a1), (v16 & 1) == 0))
  {
    unint64_t v17 = sub_1001EAE60((uint64_t)_swiftEmptyArrayStorage);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = *v15;
    *id v15 = 0x8000000000000000;
    sub_1001F58D4(v17, a1, isUniquelyReferenced_nonNull_native);
    *id v15 = v36;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *v15;
  uint64_t v37 = *v15;
  *id v15 = 0x8000000000000000;
  unint64_t v22 = sub_10016DBD8(a1);
  uint64_t v23 = *(void *)(v20 + 16);
  BOOL v24 = (v21 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v7 = v21;
  if (*(void *)(v20 + 24) >= v25)
  {
    if (v19)
    {
      if ((v21 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_11;
    }
LABEL_16:
    sub_1001F8638();
    if ((v7 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  sub_1001F1358(v25, v19);
  unint64_t v26 = sub_10016DBD8(a1);
  if ((v7 & 1) != (v27 & 1))
  {
LABEL_18:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v22 = v26;
  if ((v7 & 1) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_11:
  uint64_t v28 = *(void *)(*(void *)(v37 + 56) + 8 * v22);
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_1001F5708(a3, a4, a5, a6, v32, v13, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28) {
    *(void *)(*(void *)(v37 + 56) + 8 * v22) = v28;
  }
  else {
    sub_1001F3E24(v22, v37);
  }
  *id v15 = v37;
  swift_endAccess();
  uint64_t v30 = *(os_unfair_lock_s **)(v8 + v35);
  swift_retain();
  os_unfair_lock_unlock(v30 + 4);
  swift_release();
  return 1;
}

void (*sub_100191064(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = sub_10019F7D0(v6, a2, a3);
  return sub_1001910E4;
}

void sub_1001910E4(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t sub_100191138(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v65 = a3;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v67 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = DockCoreInfo.description.getter();
  uint64_t v16 = v15;
  if (a6)
  {
    unint64_t v17 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v17 + 4);
    swift_release();
  }
  uint64_t v18 = (uint64_t *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess();
  uint64_t v19 = *v18;
  if (!*(void *)(*v18 + 16)) {
    goto LABEL_14;
  }
  sub_10016DBD8(a1);
  if ((v20 & 1) == 0) {
    goto LABEL_14;
  }
  unint64_t v21 = sub_10016DBD8(a1);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (!*(void *)(*(void *)(*(void *)(v19 + 56) + 8 * v21) + 16))
  {
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v39 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    a5 = 0;
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10016DB60(v66, v16);
  if ((v24 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = *v18;
  if (!*(void *)(*v18 + 16))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  unint64_t v26 = sub_10016DBD8(a1);
  if ((v22 & 1) == 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v27 = *(void *)(*(void *)(v25 + 56) + 8 * v26);
  if (!*(void *)(v27 + 16))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v62 = v12;
  uint64_t v63 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v28 = sub_10016DB60(v66, v16);
  if ((v29 & 1) == 0)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v30 = (uint64_t *)(*(void *)(v27 + 56) + 32 * v28);
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  uint64_t v34 = v30[2];
  uint64_t v33 = v30[3];
  uint64_t v68 = v32;
  uint64_t v69 = v33;
  uint64_t v64 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_1001A23F0(v34);
  swift_bridgeObjectRelease();
  uint64_t v36 = swift_bridgeObjectRetain();
  uint64_t v37 = sub_1001A23F0(v36);
  swift_bridgeObjectRelease();
  if (*(void *)(v37 + 16) <= *(void *)(v35 + 16) >> 3)
  {
    uint64_t v72 = (unint64_t *)v35;
    sub_10019FAC4(v37);
    swift_bridgeObjectRelease();
    unint64_t v38 = v72;
  }
  else
  {
    unint64_t v38 = sub_10019FC6C(v37, v35);
    swift_bridgeObjectRelease();
  }
  a5 = sub_1001F973C((uint64_t)v38);
  swift_bridgeObjectRelease();
  uint64_t v12 = v62;
  if (a5[2])
  {
    swift_retain();
    if (v64)
    {
      sub_1001A5C38(v68, v64);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v47 = v69;
    }
    else
    {
      uint64_t v47 = 1;
    }
    uint64_t v60 = v47;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    LODWORD(v61) = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v71 = *v18;
    uint64_t v48 = v71;
    uint64_t *v18 = 0x8000000000000000;
    unint64_t v23 = sub_10016DBD8(a1);
    uint64_t v49 = *(void *)(v48 + 16);
    BOOL v50 = (v22 & 1) == 0;
    uint64_t v51 = v49 + v50;
    if (!__OFADD__(v49, v50))
    {
      if (*(void *)(v48 + 24) < v51)
      {
        HIDWORD(v59) = v22;
        sub_1001F1358(v51, v61);
        unint64_t v52 = sub_10016DBD8(a1);
        if ((BYTE4(v59) & 1) != (v53 & 1))
        {
LABEL_49:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v23 = v52;
        if ((v59 & 0x100000000) == 0) {
          goto LABEL_47;
        }
        goto LABEL_37;
      }
      if (v61)
      {
        if (v22)
        {
LABEL_37:
          uint64_t v54 = *(void *)(*(void *)(v71 + 56) + 8 * v23);
          unint64_t v61 = v23;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v70 = v54;
          sub_1001F5708(v65, v63, (uint64_t)a5, v60, v66, v16, isUniquelyReferenced_nonNull_native);
          uint64_t v56 = v70;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v57 = v71;
          if (v56) {
            *(void *)(*(void *)(v71 + 56) + 8 * v61) = v56;
          }
          else {
            sub_1001F3E24(v61, v71);
          }
          uint64_t v39 = v64;
          uint64_t *v18 = v57;
          swift_endAccess();
          goto LABEL_16;
        }
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
LABEL_46:
      unint64_t v61 = v23;
      char v58 = v22;
      sub_1001F8638();
      unint64_t v23 = v61;
      if (v58) {
        goto LABEL_37;
      }
      goto LABEL_47;
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  swift_bridgeObjectRelease();
  uint64_t v39 = v64;
LABEL_15:
  swift_beginAccess();
  uint64_t v40 = (void *)sub_1001ED0B8(a1);
  swift_endAccess();

  swift_beginAccess();
  sub_1001EDA1C(a1);
  swift_endAccess();
  swift_bridgeObjectRelease();
LABEL_16:
  uint64_t v41 = sub_10018FBC8();
  if (a6)
  {
    uint64_t v42 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_unlock(v42 + 4);
    swift_release();
  }
  if (!v41)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v14, v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v12);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "no more sensor or actuation clients, releasing transaction", v45, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v67 + 8))(v14, v12);
    sub_10019A168();
  }
  sub_1001A5BF4(v68, v39);
  return (uint64_t)a5;
}

uint64_t sub_100191778(int a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = DockCoreInfo.description.getter();
  uint64_t v7 = v6;
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess();
  if (!*(void *)(*v10 + 16) || (sub_10016DBD8(a1), (v11 & 1) == 0))
  {
LABEL_14:
    swift_bridgeObjectRelease();
    char v24 = *(os_unfair_lock_s **)(v3 + v8);
    swift_retain();
    os_unfair_lock_unlock(v24 + 4);
    swift_release();
    return 1;
  }
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v10;
  uint64_t v27 = *v10;
  *uint64_t v10 = 0x8000000000000000;
  unint64_t v15 = sub_10016DBD8(a1);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v2 = v14;
  if (*(void *)(v13 + 24) >= v18)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v14)
      {
LABEL_10:
        uint64_t v26 = *(void *)(*(void *)(v27 + 56) + 8 * v15);
        uint64_t v21 = sub_1001ED914(v5, v7);
        uint64_t v23 = v22;
        if (v26) {
          *(void *)(*(void *)(v27 + 56) + 8 * v15) = v26;
        }
        else {
          sub_1001F3E24(v15, v27);
        }
        *uint64_t v10 = v27;
        swift_endAccess();
        sub_1001A5BF4(v21, v23);
        goto LABEL_14;
      }
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
LABEL_16:
    sub_1001F8638();
    if (v2) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
  sub_1001F1358(v18, isUniquelyReferenced_nonNull_native);
  unint64_t v19 = sub_10016DBD8(a1);
  if ((v2 & 1) == (v20 & 1))
  {
    unint64_t v15 = v19;
    if ((v2 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_10;
  }
LABEL_18:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100191998(int a1)
{
  int v55 = a1;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42[0] = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v6 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  swift_release();
  uint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess();
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)(*v7 + 64);
  uint64_t v53 = *v7 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  uint64_t v52 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  uint64_t v47 = v1;
  uint64_t v13 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories;
  uint64_t v46 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected;
  swift_bridgeObjectRetain();
  uint64_t v51 = v13;
  uint64_t result = swift_beginAccess();
  int64_t v15 = 0;
  int64_t v54 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v49 = (void (**)(char *, uint64_t))(v3 + 8);
  BOOL v50 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v16 = v5;
  *(void *)&long long v17 = 136315394;
  long long v43 = v17;
  v42[1] = (char *)&type metadata for Any + 8;
  os_log_type_t v44 = v5;
  uint64_t v45 = v2;
  uint64_t v48 = v8;
  while (v12)
  {
    unint64_t v18 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v19 = v18 | (v15 << 6);
LABEL_19:
    if (*(_DWORD *)(*(void *)(*(void *)(v8 + 56) + 8 * v19) + 16) == v55)
    {
      uint64_t v23 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v19);
      uint64_t v24 = *v23;
      unint64_t v25 = v23[1];
      (*v50)(v16, v52, v2);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        *(_DWORD *)uint64_t v28 = v43;
        swift_bridgeObjectRetain();
        *(void *)(v28 + 4) = sub_1000993AC(v24, v25, &v56);
        swift_release_n();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v28 + 12) = 1024;
        *(_DWORD *)(v28 + 14) = v55;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Stopping animator for device %s, client %d disconnected", (uint8_t *)v28, 0x12u);
        swift_arrayDestroy();
        uint64_t v16 = v44;
        swift_slowDealloc();
        uint64_t v2 = v45;
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
      (*v49)(v16, v2);
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v29 = swift_bridgeObjectRetain();
      unint64_t v30 = (unint64_t)sub_1001A19C0(v29, v24, v25);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      if (v30 >> 62)
      {
        if (!_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_4:
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
      }
      else if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_4;
      }
      if ((v30 & 0xC000000000000001) != 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRelease();
        if (!v31) {
          goto LABEL_44;
        }
      }
      uint64_t v32 = *(void **)(v47 + v46);
      if (v32)
      {
        id v33 = v32;
        uint64_t v34 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
        uint64_t v35 = DockCoreInfo.description.getter();
        uint64_t v37 = v36;

        if (v35 == v24 && v37 == v25)
        {
          swift_bridgeObjectRelease();
          goto LABEL_36;
        }
        char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v38)
        {
LABEL_36:
          uint64_t v39 = *(void **)(v47 + v46);
          id v40 = v39;
          sub_10018B0C0(0, v39);

          id v33 = v40;
        }
        uint64_t v16 = v44;
        uint64_t v2 = v45;
      }
      sub_1000CA02C(1, 0.0);
      swift_release();
LABEL_5:
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v8 = v48;
    }
  }
  if (__OFADD__(v15++, 1))
  {
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v15 >= v54) {
    goto LABEL_42;
  }
  unint64_t v21 = *(void *)(v53 + 8 * v15);
  if (v21)
  {
LABEL_18:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v15 << 6);
    goto LABEL_19;
  }
  int64_t v22 = v15 + 1;
  if (v15 + 1 >= v54) {
    goto LABEL_42;
  }
  unint64_t v21 = *(void *)(v53 + 8 * v22);
  if (v21) {
    goto LABEL_17;
  }
  int64_t v22 = v15 + 2;
  if (v15 + 2 >= v54) {
    goto LABEL_42;
  }
  unint64_t v21 = *(void *)(v53 + 8 * v22);
  if (v21) {
    goto LABEL_17;
  }
  int64_t v22 = v15 + 3;
  if (v15 + 3 >= v54)
  {
LABEL_42:
    swift_release();
    uint64_t v41 = *(os_unfair_lock_s **)(v47 + v42[0]);
    swift_retain();
    os_unfair_lock_unlock(v41 + 4);
    swift_release();
    return 1;
  }
  unint64_t v21 = *(void *)(v53 + 8 * v22);
  if (v21)
  {
LABEL_17:
    int64_t v15 = v22;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v15 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v15 >= v54) {
      goto LABEL_42;
    }
    unint64_t v21 = *(void *)(v53 + 8 * v15);
    ++v22;
    if (v21) {
      goto LABEL_18;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

void sub_100191FAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v216 = (char *)&v207 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  v210 = (char *)&v207 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  *(void *)&long long v215 = (char *)&v207 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v218 = (char *)&v207 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  os_log_type_t v219 = (char *)&v207 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v207 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v19 = (char *)&v207 - v18;
  __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v207 - v20;
  int64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v225 = v3 + 16;
  uint64_t v226 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  v224 = v22;
  ((void (*)(char *))v22)((char *)&v207 - v20);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "removing all clients", v25, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v27 = *(void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v26 = v3 + 8;
  v223 = v27;
  v27(v21, v2);
  uint64_t v209 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v28 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v28 + 4);
  swift_release();
  uint64_t v211 = v1;
  unint64_t v29 = (unint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients);
  swift_beginAccess();
  unint64_t v30 = *v29;
  uint64_t v32 = (unint64_t *)(*v29 + 64);
  unint64_t v31 = *v32;
  BOOL v212 = v29;
  uint64_t v213 = v32;
  uint64_t v33 = 1 << *(unsigned char *)(v30 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & v31;
  id v214 = (void *)((unint64_t)(v33 + 63) >> 6);
  swift_bridgeObjectRetain();
  uint64_t v36 = 0;
  *(void *)&long long v37 = 138412290;
  long long v220 = v37;
  uint64_t v221 = v2;
  uint64_t v222 = v26;
  while (1)
  {
    if (v35)
    {
      unint64_t v39 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      unint64_t v40 = v39 | (v36 << 6);
      goto LABEL_24;
    }
    uint64_t v41 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
      __break(1u);
LABEL_172:
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
      goto LABEL_178;
    }
    if (v41 >= (uint64_t)v214) {
      goto LABEL_26;
    }
    unint64_t v42 = v213[v41];
    ++v36;
    if (!v42)
    {
      uint64_t v36 = v41 + 1;
      if (v41 + 1 >= (uint64_t)v214) {
        goto LABEL_26;
      }
      unint64_t v42 = v213[v36];
      if (!v42)
      {
        uint64_t v36 = v41 + 2;
        if (v41 + 2 >= (uint64_t)v214) {
          goto LABEL_26;
        }
        unint64_t v42 = v213[v36];
        if (!v42) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v35 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v36 << 6);
    uint64_t v2 = v221;
LABEL_24:
    os_log_type_t v44 = *(void **)(*(void *)(v30 + 56) + 8 * v40);
    v224(v19, v226, v2);
    uint64_t v45 = v44;
    char v38 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      uint64_t v217 = (void *)v36;
      *(_DWORD *)uint64_t v47 = v220;
      *(void *)(v47 + 4) = v45;
      *uint64_t v48 = v45;
      _os_log_impl((void *)&_mh_execute_header, v38, v46, "forcibly removing act client %@", (uint8_t *)v47, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      uint64_t v36 = (uint64_t)v217;
      swift_slowDealloc();
      uint64_t v2 = v221;
      swift_slowDealloc();
    }
    else
    {

      char v38 = v45;
    }

    v223(v19, v2);
    [v45 invalidate];
  }
  uint64_t v43 = v41 + 3;
  if (v43 < (uint64_t)v214)
  {
    unint64_t v42 = v213[v43];
    if (!v42)
    {
      while (1)
      {
        uint64_t v36 = v43 + 1;
        if (__OFADD__(v43, 1)) {
          break;
        }
        if (v36 >= (uint64_t)v214) {
          goto LABEL_26;
        }
        unint64_t v42 = v213[v36];
        ++v43;
        if (v42) {
          goto LABEL_23;
        }
      }
LABEL_178:
      __break(1u);
      goto LABEL_179;
    }
    uint64_t v36 = v43;
    goto LABEL_23;
  }
LABEL_26:
  swift_release();
  unint64_t v49 = sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
  *BOOL v212 = v49;
  swift_bridgeObjectRelease();
  unint64_t v50 = sub_1001FBA9C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v51 = v211;
  uint64_t v52 = (unint64_t *)(v211 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess();
  *uint64_t v52 = v50;
  swift_bridgeObjectRelease();
  uint64_t v53 = (unint64_t *)(v51 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients);
  swift_beginAccess();
  unint64_t v54 = *v53;
  uint64_t v56 = (void *)(*v53 + 64);
  uint64_t v55 = *v56;
  uint64_t v213 = v53;
  id v214 = v56;
  uint64_t v57 = 1 << *(unsigned char *)(v54 + 32);
  uint64_t v58 = -1;
  if (v57 < 64) {
    uint64_t v58 = ~(-1 << v57);
  }
  unint64_t v59 = v58 & v55;
  uint64_t v217 = (void *)((unint64_t)(v57 + 63) >> 6);
  swift_bridgeObjectRetain();
  uint64_t v60 = 0;
  uint64_t v61 = v221;
  while (2)
  {
    if (v59)
    {
      unint64_t v63 = __clz(__rbit64(v59));
      v59 &= v59 - 1;
      unint64_t v64 = v63 | (v60 << 6);
LABEL_47:
      uint64_t v68 = *(void **)(*(void *)(v54 + 56) + 8 * v64);
      v224(v16, v226, v61);
      uint64_t v69 = v68;
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v62, v70))
      {
        uint64_t v71 = swift_slowAlloc();
        uint64_t v72 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v71 = v220;
        *(void *)(v71 + 4) = v69;
        *uint64_t v72 = v69;
        _os_log_impl((void *)&_mh_execute_header, v62, v70, "forcibly removing sens client %@", (uint8_t *)v71, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v61 = v221;
        swift_slowDealloc();
      }
      else
      {

        uint64_t v62 = v69;
      }

      v223(v16, v61);
      [v69 invalidate];

      continue;
    }
    break;
  }
  uint64_t v65 = v60 + 1;
  if (__OFADD__(v60, 1)) {
    goto LABEL_172;
  }
  if (v65 < (uint64_t)v217)
  {
    unint64_t v66 = v214[v65];
    ++v60;
    if (!v66)
    {
      uint64_t v60 = v65 + 1;
      if (v65 + 1 >= (uint64_t)v217) {
        goto LABEL_49;
      }
      unint64_t v66 = v214[v60];
      if (!v66)
      {
        uint64_t v60 = v65 + 2;
        if (v65 + 2 >= (uint64_t)v217) {
          goto LABEL_49;
        }
        unint64_t v66 = v214[v60];
        if (!v66)
        {
          uint64_t v67 = v65 + 3;
          if (v67 >= (uint64_t)v217) {
            goto LABEL_49;
          }
          unint64_t v66 = v214[v67];
          if (!v66)
          {
            while (1)
            {
              uint64_t v60 = v67 + 1;
              if (__OFADD__(v67, 1)) {
                break;
              }
              if (v60 >= (uint64_t)v217) {
                goto LABEL_49;
              }
              unint64_t v66 = v214[v60];
              ++v67;
              if (v66) {
                goto LABEL_46;
              }
            }
LABEL_179:
            __break(1u);
            goto LABEL_180;
          }
          uint64_t v60 = v67;
        }
      }
    }
LABEL_46:
    unint64_t v59 = (v66 - 1) & v66;
    unint64_t v64 = __clz(__rbit64(v66)) + (v60 << 6);
    goto LABEL_47;
  }
LABEL_49:
  swift_release();
  unint64_t v73 = sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
  *uint64_t v213 = v73;
  swift_bridgeObjectRelease();
  unint64_t v74 = sub_1001FBB80((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v75 = v211;
  uint64_t v76 = (unint64_t *)(v211 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules);
  swift_beginAccess();
  unint64_t *v76 = v74;
  swift_bridgeObjectRelease();
  uint64_t v77 = (void *)(v75 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients);
  swift_beginAccess();
  id v214 = v77;
  uint64_t v78 = *v77;
  uint64_t v79 = *(void *)(*v77 + 64);
  uint64_t v217 = (void *)(*v77 + 64);
  uint64_t v80 = 1 << *(unsigned char *)(v78 + 32);
  uint64_t v81 = -1;
  if (v80 < 64) {
    uint64_t v81 = ~(-1 << v80);
  }
  unint64_t v82 = v81 & v79;
  int64_t v83 = (unint64_t)(v80 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v84 = 0;
  while (2)
  {
    if (v82)
    {
      unint64_t v86 = __clz(__rbit64(v82));
      v82 &= v82 - 1;
      unint64_t v87 = v86 | (v84 << 6);
LABEL_70:
      id v91 = *(void **)(*(void *)(v78 + 56) + 8 * v87);
      v224(v219, v226, v61);
      Swift::String v92 = v91;
      int64_t v85 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v85, v93))
      {
        uint64_t v94 = swift_slowAlloc();
        os_log_type_t v95 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v94 = v220;
        *(void *)(v94 + 4) = v92;
        *os_log_type_t v95 = v92;
        _os_log_impl((void *)&_mh_execute_header, v85, v93, "forcibly removing pairing client %@", (uint8_t *)v94, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v61 = v221;
        swift_slowDealloc();
      }
      else
      {

        int64_t v85 = v92;
      }

      v223(v219, v61);
      [v92 invalidate];

      continue;
    }
    break;
  }
  int64_t v88 = v84 + 1;
  if (__OFADD__(v84, 1)) {
    goto LABEL_173;
  }
  if (v88 < v83)
  {
    unint64_t v89 = v217[v88];
    ++v84;
    if (!v89)
    {
      int64_t v84 = v88 + 1;
      if (v88 + 1 >= v83) {
        goto LABEL_72;
      }
      unint64_t v89 = v217[v84];
      if (!v89)
      {
        int64_t v84 = v88 + 2;
        if (v88 + 2 >= v83) {
          goto LABEL_72;
        }
        unint64_t v89 = v217[v84];
        if (!v89)
        {
          int64_t v90 = v88 + 3;
          if (v90 >= v83) {
            goto LABEL_72;
          }
          unint64_t v89 = v217[v90];
          if (!v89)
          {
            while (1)
            {
              int64_t v84 = v90 + 1;
              if (__OFADD__(v90, 1)) {
                break;
              }
              if (v84 >= v83) {
                goto LABEL_72;
              }
              unint64_t v89 = v217[v84];
              ++v90;
              if (v89) {
                goto LABEL_69;
              }
            }
LABEL_180:
            __break(1u);
            goto LABEL_181;
          }
          int64_t v84 = v90;
        }
      }
    }
LABEL_69:
    unint64_t v82 = (v89 - 1) & v89;
    unint64_t v87 = __clz(__rbit64(v89)) + (v84 << 6);
    goto LABEL_70;
  }
LABEL_72:
  swift_release();
  unint64_t v96 = sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
  *id v214 = v96;
  swift_bridgeObjectRelease();
  unint64_t v97 = sub_1001FBB8C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v98 = v211;
  uint64_t v99 = (unint64_t *)(v211 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules);
  swift_beginAccess();
  unint64_t *v99 = v97;
  swift_bridgeObjectRelease();
  unint64_t v100 = (void *)(v98 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients);
  swift_beginAccess();
  uint64_t v217 = v100;
  uint64_t v101 = *v100;
  uint64_t v102 = *(void *)(*v100 + 64);
  os_log_type_t v219 = (char *)(*v100 + 64);
  uint64_t v103 = 1 << *(unsigned char *)(v101 + 32);
  uint64_t v104 = -1;
  if (v103 < 64) {
    uint64_t v104 = ~(-1 << v103);
  }
  unint64_t v105 = v104 & v102;
  int64_t v106 = (unint64_t)(v103 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v107 = 0;
  while (2)
  {
    if (v105)
    {
      unint64_t v109 = __clz(__rbit64(v105));
      v105 &= v105 - 1;
      unint64_t v110 = v109 | (v107 << 6);
LABEL_93:
      uint64_t v115 = *(void **)(*(void *)(v101 + 56) + 8 * v110);
      v224(v218, v226, v61);
      uint64_t v116 = v115;
      unint64_t v108 = Logger.logObject.getter();
      os_log_type_t v117 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v108, v117))
      {
        uint64_t v118 = swift_slowAlloc();
        uint64_t v119 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v118 = v220;
        *(void *)(v118 + 4) = v116;
        *uint64_t v119 = v116;
        _os_log_impl((void *)&_mh_execute_header, v108, v117, "forcibly removing trajectory client %@", (uint8_t *)v118, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v61 = v221;
        swift_slowDealloc();
      }
      else
      {

        unint64_t v108 = v116;
      }

      v223(v218, v61);
      [v116 invalidate];

      continue;
    }
    break;
  }
  int64_t v111 = v107 + 1;
  if (__OFADD__(v107, 1)) {
    goto LABEL_174;
  }
  uint64_t v112 = (char *)v215;
  if (v111 < v106)
  {
    unint64_t v113 = *(void *)&v219[8 * v111];
    ++v107;
    if (!v113)
    {
      int64_t v107 = v111 + 1;
      if (v111 + 1 >= v106) {
        goto LABEL_95;
      }
      unint64_t v113 = *(void *)&v219[8 * v107];
      if (!v113)
      {
        int64_t v107 = v111 + 2;
        if (v111 + 2 >= v106) {
          goto LABEL_95;
        }
        unint64_t v113 = *(void *)&v219[8 * v107];
        if (!v113)
        {
          int64_t v114 = v111 + 3;
          if (v114 >= v106) {
            goto LABEL_95;
          }
          unint64_t v113 = *(void *)&v219[8 * v114];
          if (!v113)
          {
            while (1)
            {
              int64_t v107 = v114 + 1;
              if (__OFADD__(v114, 1)) {
                break;
              }
              if (v107 >= v106) {
                goto LABEL_95;
              }
              unint64_t v113 = *(void *)&v219[8 * v107];
              ++v114;
              if (v113) {
                goto LABEL_92;
              }
            }
LABEL_181:
            __break(1u);
            goto LABEL_182;
          }
          int64_t v107 = v114;
        }
      }
    }
LABEL_92:
    unint64_t v105 = (v113 - 1) & v113;
    unint64_t v110 = __clz(__rbit64(v113)) + (v107 << 6);
    goto LABEL_93;
  }
LABEL_95:
  swift_release();
  unint64_t v120 = sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
  *uint64_t v217 = v120;
  swift_bridgeObjectRelease();
  long long v121 = (char *)(v211 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients);
  swift_beginAccess();
  uint64_t v122 = *(void *)v121;
  uint64_t v124 = (char *)(*(void *)v121 + 64);
  uint64_t v123 = *(void *)v124;
  v218 = v121;
  os_log_type_t v219 = v124;
  uint64_t v125 = 1 << *(unsigned char *)(v122 + 32);
  uint64_t v126 = -1;
  if (v125 < 64) {
    uint64_t v126 = ~(-1 << v125);
  }
  unint64_t v127 = v126 & v123;
  int64_t v128 = (unint64_t)(v125 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v129 = 0;
  while (2)
  {
    if (v127)
    {
      unint64_t v131 = __clz(__rbit64(v127));
      v127 &= v127 - 1;
      unint64_t v132 = v131 | (v129 << 6);
LABEL_116:
      uint64_t v136 = *(void **)(*(void *)(v122 + 56) + 8 * v132);
      v224(v112, v226, v61);
      id v137 = v136;
      uint64_t v130 = Logger.logObject.getter();
      os_log_type_t v138 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v130, v138))
      {
        uint64_t v139 = swift_slowAlloc();
        uint64_t v140 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v139 = v220;
        *(void *)(v139 + 4) = v137;
        void *v140 = v137;
        _os_log_impl((void *)&_mh_execute_header, v130, v138, "forcibly removing event client %@", (uint8_t *)v139, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        uint64_t v112 = (char *)v215;
        swift_slowDealloc();
        uint64_t v61 = v221;
        swift_slowDealloc();
      }
      else
      {

        uint64_t v130 = v137;
      }

      v223(v112, v61);
      [v137 invalidate];

      continue;
    }
    break;
  }
  int64_t v133 = v129 + 1;
  if (__OFADD__(v129, 1)) {
    goto LABEL_175;
  }
  if (v133 < v128)
  {
    unint64_t v134 = *(void *)&v219[8 * v133];
    ++v129;
    if (!v134)
    {
      int64_t v129 = v133 + 1;
      if (v133 + 1 >= v128) {
        goto LABEL_118;
      }
      unint64_t v134 = *(void *)&v219[8 * v129];
      if (!v134)
      {
        int64_t v129 = v133 + 2;
        if (v133 + 2 >= v128) {
          goto LABEL_118;
        }
        unint64_t v134 = *(void *)&v219[8 * v129];
        if (!v134)
        {
          int64_t v135 = v133 + 3;
          if (v135 >= v128) {
            goto LABEL_118;
          }
          unint64_t v134 = *(void *)&v219[8 * v135];
          if (!v134)
          {
            while (1)
            {
              int64_t v129 = v135 + 1;
              if (__OFADD__(v135, 1)) {
                break;
              }
              if (v129 >= v128) {
                goto LABEL_118;
              }
              unint64_t v134 = *(void *)&v219[8 * v129];
              ++v135;
              if (v134) {
                goto LABEL_115;
              }
            }
LABEL_182:
            __break(1u);
            goto LABEL_183;
          }
          int64_t v129 = v135;
        }
      }
    }
LABEL_115:
    unint64_t v127 = (v134 - 1) & v134;
    unint64_t v132 = __clz(__rbit64(v134)) + (v129 << 6);
    goto LABEL_116;
  }
LABEL_118:
  swift_release();
  unint64_t v141 = sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
  *(void *)v218 = v141;
  swift_bridgeObjectRelease();
  Class v142 = (unint64_t *)(v211 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients);
  swift_beginAccess();
  uint64_t v208 = v142;
  unint64_t v143 = *v142;
  uint64_t v144 = *(void *)(*v142 + 64);
  uint64_t v213 = (unint64_t *)(*v142 + 64);
  uint64_t v145 = 1 << *(unsigned char *)(v143 + 32);
  uint64_t v146 = -1;
  if (v145 < 64) {
    uint64_t v146 = ~(-1 << v145);
  }
  unint64_t v147 = v146 & v144;
  id v214 = (void *)((unint64_t)(v145 + 63) >> 6);
  uint64_t v217 = (void *)v143;
  swift_bridgeObjectRetain();
  uint64_t v148 = 0;
  *(void *)&long long v149 = 136315138;
  long long v215 = v149;
  BOOL v212 = (unint64_t *)((char *)&type metadata for Any + 8);
  uint64_t v150 = v216;
  uint64_t v151 = v210;
  while (2)
  {
    if (v147)
    {
      v218 = (char *)((v147 - 1) & v147);
      os_log_type_t v219 = v148;
      unint64_t v152 = __clz(__rbit64(v147)) | ((void)v148 << 6);
LABEL_138:
      uint64_t v157 = v217[7] + 16 * v152;
      uint64_t v158 = *(void **)v157;
      uint64_t v159 = *(void **)(v157 + 8);
      v224(v151, v226, v61);
      *(void *)&long long v220 = v158;
      id v160 = v158;
      id v161 = v159;
      id v162 = v160;
      id v163 = v161;
      id v164 = v162;
      id v165 = v163;
      id v166 = Logger.logObject.getter();
      os_log_type_t v167 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v166, v167))
      {
        uint64_t v168 = swift_slowAlloc();
        v228[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v168 = v215;
        v229[0] = v220;
        id v169 = v164;
        sub_1000992E8(&qword_1002AC160);
        uint64_t v170 = String.init<A>(describing:)();
        *(void *)(v168 + 4) = sub_1000993AC(v170, v171, v228);

        uint64_t v61 = v221;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v166, v167, "forcibly removing battery client %s", (uint8_t *)v168, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v150 = v216;
        swift_slowDealloc();
      }
      else
      {
      }
      v223(v151, v61);
      unint64_t v147 = (unint64_t)v218;
      if ((void)v220)
      {
        [v164 invalidate];
      }
      uint64_t v148 = v219;
      continue;
    }
    break;
  }
  uint64_t v153 = (uint64_t)(v148 + 1);
  if (__OFADD__(v148, 1)) {
    goto LABEL_176;
  }
  if (v153 >= (uint64_t)v214)
  {
LABEL_143:
    swift_release();
    unint64_t v172 = sub_1001FBC9C((uint64_t)_swiftEmptyArrayStorage);
    *uint64_t v208 = v172;
    swift_bridgeObjectRelease();
    uint64_t v173 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer;
    uint64_t v174 = v211;
    uint64_t v175 = *(void **)(v211 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer);
    if (v175)
    {
      id v176 = v175;
      dispatch thunk of RepeatingTimer.cancel()();

      uint64_t v174 = v211;
      uint64_t v175 = *(void **)(v211 + v173);
    }
    *(void *)(v174 + v173) = 0;
    uint64_t v177 = v174;

    id v178 = (unint64_t *)(v177
                              + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients);
    swift_beginAccess();
    BOOL v212 = v178;
    os_log_type_t v179 = (void *)*v178;
    uint64_t v180 = *(void *)(*v178 + 64);
    uint64_t v217 = (void *)(*v178 + 64);
    uint64_t v181 = 1 << *((unsigned char *)v179 + 32);
    uint64_t v182 = -1;
    if (v181 < 64) {
      uint64_t v182 = ~(-1 << v181);
    }
    unint64_t v183 = v182 & v180;
    v218 = (char *)((unint64_t)(v181 + 63) >> 6);
    swift_bridgeObjectRetain();
    uint64_t v184 = 0;
    uint64_t v213 = (unint64_t *)((char *)&type metadata for Any + 8);
    id v214 = v179;
    while (1)
    {
      if (v183)
      {
        os_log_type_t v219 = (char *)((v183 - 1) & v183);
        *(void *)&long long v220 = v184;
        unint64_t v185 = __clz(__rbit64(v183)) | (v184 << 6);
      }
      else
      {
        uint64_t v186 = v184 + 1;
        if (__OFADD__(v184, 1)) {
          goto LABEL_177;
        }
        if (v186 >= (uint64_t)v218)
        {
LABEL_170:
          swift_release();
          unint64_t v205 = sub_1001FBCA8((uint64_t)_swiftEmptyArrayStorage);
          *BOOL v212 = v205;
          swift_bridgeObjectRelease();
          unint64_t v206 = *(os_unfair_lock_s **)(v211 + v209);
          swift_retain();
          os_unfair_lock_unlock(v206 + 4);
          swift_release();
          return;
        }
        unint64_t v187 = v217[v186];
        uint64_t v188 = v184 + 1;
        if (!v187)
        {
          uint64_t v188 = v184 + 2;
          if (v184 + 2 >= (uint64_t)v218) {
            goto LABEL_170;
          }
          unint64_t v187 = v217[v188];
          if (!v187)
          {
            uint64_t v188 = v184 + 3;
            if (v184 + 3 >= (uint64_t)v218) {
              goto LABEL_170;
            }
            unint64_t v187 = v217[v188];
            if (!v187)
            {
              uint64_t v189 = v184 + 4;
              if (v184 + 4 >= (uint64_t)v218) {
                goto LABEL_170;
              }
              unint64_t v187 = v217[v189];
              if (!v187)
              {
                while (1)
                {
                  uint64_t v188 = v189 + 1;
                  if (__OFADD__(v189, 1)) {
                    goto LABEL_184;
                  }
                  if (v188 >= (uint64_t)v218) {
                    goto LABEL_170;
                  }
                  unint64_t v187 = v217[v188];
                  ++v189;
                  if (v187) {
                    goto LABEL_164;
                  }
                }
              }
              uint64_t v188 = v184 + 4;
            }
          }
        }
LABEL_164:
        os_log_type_t v219 = (char *)((v187 - 1) & v187);
        *(void *)&long long v220 = v188;
        unint64_t v185 = __clz(__rbit64(v187)) + (v188 << 6);
      }
      uint64_t v190 = v179[7] + 16 * v185;
      id v192 = *(void **)v190;
      id v191 = *(void **)(v190 + 8);
      v224(v150, v226, v61);
      id v193 = v192;
      id v194 = v191;
      id v195 = v193;
      id v196 = v194;
      id v197 = v195;
      id v198 = v196;
      v199 = Logger.logObject.getter();
      os_log_type_t v200 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v199, v200))
      {
        uint64_t v201 = swift_slowAlloc();
        v229[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v201 = v215;
        id v227 = v192;
        id v202 = v197;
        sub_1000992E8(&qword_1002AC160);
        uint64_t v203 = String.init<A>(describing:)();
        *(void *)(v201 + 4) = sub_1000993AC(v203, v204, v229);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v199, v200, "forcibly removing tracking summary client %s", (uint8_t *)v201, 0xCu);
        swift_arrayDestroy();
        uint64_t v150 = v216;
        swift_slowDealloc();
        os_log_type_t v179 = v214;
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v61 = v221;
      v223(v150, v221);
      unint64_t v183 = (unint64_t)v219;
      uint64_t v184 = v220;
      if (v192)
      {
        [v197 invalidate];
      }
    }
  }
  unint64_t v154 = v213[v153];
  uint64_t v155 = (uint64_t)(v148 + 1);
  if (v154) {
    goto LABEL_137;
  }
  uint64_t v155 = (uint64_t)(v148 + 2);
  if ((uint64_t)(v148 + 2) >= (uint64_t)v214) {
    goto LABEL_143;
  }
  unint64_t v154 = v213[v155];
  if (v154) {
    goto LABEL_137;
  }
  uint64_t v155 = (uint64_t)(v148 + 3);
  if ((uint64_t)(v148 + 3) >= (uint64_t)v214) {
    goto LABEL_143;
  }
  unint64_t v154 = v213[v155];
  if (v154)
  {
LABEL_137:
    v218 = (char *)((v154 - 1) & v154);
    os_log_type_t v219 = (char *)v155;
    unint64_t v152 = __clz(__rbit64(v154)) + (v155 << 6);
    goto LABEL_138;
  }
  uint64_t v156 = v148 + 4;
  if ((uint64_t)(v148 + 4) >= (uint64_t)v214) {
    goto LABEL_143;
  }
  unint64_t v154 = v213[(void)v156];
  if (v154)
  {
    uint64_t v155 = (uint64_t)(v148 + 4);
    goto LABEL_137;
  }
  while (1)
  {
    uint64_t v155 = (uint64_t)(v156 + 1);
    if (__OFADD__(v156, 1)) {
      break;
    }
    if (v155 >= (uint64_t)v214) {
      goto LABEL_143;
    }
    unint64_t v154 = v213[v155];
    ++v156;
    if (v154) {
      goto LABEL_137;
    }
  }
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
}

uint64_t sub_100193718(int a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v11 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v11 + 4);
  swift_release();
  uint64_t v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients);
  swift_beginAccess();
  uint64_t v13 = *v12;
  if (*(void *)(*v12 + 16) && (unint64_t v14 = sub_10016DBD8(a1), (v15 & 1) != 0))
  {
    if (a2)
    {
      uint64_t v27 = v6;
      uint64_t v16 = *(void **)(*(void *)(v13 + 56) + 8 * v14);
      sub_100099C7C(0, &qword_1002AC158);
      id v17 = v16;
      id v18 = a2;
      LOBYTE(a2) = static NSObject.== infix(_:_:)();

      if (a2)
      {
        swift_beginAccess();
        uint64_t v19 = sub_1001ED0B8(a1);
        swift_endAccess();

        id v17 = (id)v19;
      }

      uint64_t v6 = v27;
    }
  }
  else
  {
    LOBYTE(a2) = 0;
  }
  uint64_t v20 = sub_10018FBC8();
  unint64_t v21 = *(os_unfair_lock_s **)(v3 + v10);
  swift_retain();
  os_unfair_lock_unlock(v21 + 4);
  swift_release();
  if ((a2 & 1) != 0 && !v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v6);
    int64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "no more clients, releasing transaction", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_10019A168();
  }
  return 1;
}

uint64_t sub_1001939C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v5 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  uint64_t v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients);
  swift_beginAccess();
  uint64_t v7 = *v6;
  uint64_t v8 = v7 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v7 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v17 >= v12) {
      goto LABEL_21;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_21;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_21;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_5:
    uint64_t result = sub_1001E60FC(*(_DWORD *)(*(void *)(v7 + 48) + 4 * v16), a2);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_21:
    swift_release();
    uint64_t v20 = *(os_unfair_lock_s **)(a1 + v4);
    swift_retain();
    os_unfair_lock_unlock(v20 + 4);
    return swift_release();
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v12) {
      goto LABEL_21;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t (*sub_100193B84(uint64_t a1, uint64_t a2))()
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v7 + 4);
  swift_release();
  uint64_t v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions);
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_10016DB60(a1, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    int64_t v12 = 0;
    goto LABEL_6;
  }
  long long v15 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v10);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(swift_allocObject() + 16) = v15;
  int64_t v12 = sub_1001A5BB0;
LABEL_6:
  uint64_t v13 = *(os_unfair_lock_s **)(v3 + v6);
  swift_retain();
  os_unfair_lock_unlock(v13 + 4);
  swift_release();
  return v12;
}

uint64_t (*sub_100193CD8(uint64_t a1, uint64_t a2))()
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v7 + 4);
  swift_release();
  uint64_t v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions);
  swift_beginAccess();
  uint64_t v9 = *v8;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_10016DB60(a1, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    int64_t v12 = 0;
    goto LABEL_6;
  }
  long long v15 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v10);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(swift_allocObject() + 16) = v15;
  int64_t v12 = sub_1001A5BB0;
LABEL_6:
  uint64_t v13 = *(os_unfair_lock_s **)(v3 + v6);
  swift_retain();
  os_unfair_lock_unlock(v13 + 4);
  swift_release();
  return v12;
}

uint64_t sub_100193E2C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = v6;
  uint64_t v32 = DockCoreInfo.description.getter();
  uint64_t v13 = v12;
  uint64_t v35 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  int64_t v14 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v14 + 4);
  swift_release();
  long long v15 = (uint64_t *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules);
  swift_beginAccess();
  if (!*(void *)(*v15 + 16) || (sub_10016DBD8(a1), (v16 & 1) == 0))
  {
    unint64_t v17 = sub_1001EAE54((uint64_t)_swiftEmptyArrayStorage);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = *v15;
    *long long v15 = 0x8000000000000000;
    sub_1001F55AC(v17, a1, isUniquelyReferenced_nonNull_native);
    *long long v15 = v36;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *v15;
  uint64_t v37 = *v15;
  *long long v15 = 0x8000000000000000;
  unint64_t v22 = sub_10016DBD8(a1);
  uint64_t v23 = *(void *)(v20 + 16);
  BOOL v24 = (v21 & 1) == 0;
  uint64_t v25 = v23 + v24;
  if (__OFADD__(v23, v24))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v7 = v21;
  if (*(void *)(v20 + 24) >= v25)
  {
    if (v19)
    {
      if ((v21 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_11;
    }
LABEL_16:
    sub_1001F8448();
    if ((v7 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_11;
  }
  sub_1001F101C(v25, v19);
  unint64_t v26 = sub_10016DBD8(a1);
  if ((v7 & 1) != (v27 & 1))
  {
LABEL_18:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v22 = v26;
  if ((v7 & 1) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_11:
  uint64_t v28 = *(void *)(*(void *)(v37 + 56) + 8 * v22);
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_1001F55A0(a3, a4, a5, a6, v32, v13, v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28) {
    *(void *)(*(void *)(v37 + 56) + 8 * v22) = v28;
  }
  else {
    sub_1001F3E24(v22, v37);
  }
  *long long v15 = v37;
  swift_endAccess();
  unint64_t v30 = *(os_unfair_lock_s **)(v8 + v35);
  swift_retain();
  os_unfair_lock_unlock(v30 + 4);
  swift_release();
  return 1;
}

uint64_t sub_1001940D0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v61 = a3;
  unint64_t v10 = type metadata accessor for Logger();
  uint64_t v63 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = DockCoreInfo.description.getter();
  uint64_t v14 = v13;
  uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  char v16 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v16 + 4);
  swift_release();
  unint64_t v17 = (uint64_t *)(v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules);
  swift_beginAccess();
  uint64_t v18 = *v17;
  if (!*(void *)(*v17 + 16)) {
    goto LABEL_12;
  }
  sub_10016DBD8(a1);
  if ((v19 & 1) == 0) {
    goto LABEL_12;
  }
  unint64_t v20 = sub_10016DBD8(a1);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  if (!*(void *)(*(void *)(*(void *)(v18 + 56) + 8 * v20) + 16))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    uint64_t v64 = 0;
    a5 = 0;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10016DB60(v62, v14);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = *v17;
  if (!*(void *)(*v17 + 16))
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  unint64_t v24 = sub_10016DBD8(a1);
  if ((v21 & 1) == 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v25 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
  if (!*(void *)(v25 + 16))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v59 = a4;
  unint64_t v60 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_10016DB60(v62, v14);
  if ((v27 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v28 = (uint64_t *)(*(void *)(v25 + 56) + 32 * v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  uint64_t v31 = v28[2];
  uint64_t v64 = v28[3];
  uint64_t v65 = v30;
  uint64_t v66 = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = sub_1001A23F0(v31);
  swift_bridgeObjectRelease();
  uint64_t v33 = swift_bridgeObjectRetain();
  uint64_t v34 = sub_1001A23F0(v33);
  swift_bridgeObjectRelease();
  if (*(void *)(v34 + 16) <= *(void *)(v32 + 16) >> 3)
  {
    uint64_t v69 = (unint64_t *)v32;
    sub_10019FAC4(v34);
    swift_bridgeObjectRelease();
    uint64_t v35 = v69;
  }
  else
  {
    uint64_t v35 = sub_10019FC6C(v34, v32);
    swift_bridgeObjectRelease();
  }
  a5 = sub_1001F973C((uint64_t)v35);
  swift_bridgeObjectRelease();
  unint64_t v10 = v60;
  if (a5[2])
  {
    swift_retain();
    if (v66)
    {
      uint64_t v44 = v64;
      sub_1001A5C38(v65, v66);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v57 = v44;
    }
    else
    {
      uint64_t v57 = 1;
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v68 = *v17;
    uint64_t v45 = v68;
    *unint64_t v17 = 0x8000000000000000;
    unint64_t v10 = sub_10016DBD8(a1);
    uint64_t v46 = *(void *)(v45 + 16);
    BOOL v47 = (v21 & 1) == 0;
    uint64_t v48 = v46 + v47;
    if (!__OFADD__(v46, v47))
    {
      if (*(void *)(v45 + 24) >= v48)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_31;
      }
      unint64_t v10 = v21;
      sub_1001F101C(v48, isUniquelyReferenced_nonNull_native);
      unint64_t v49 = sub_10016DBD8(a1);
      if ((v10 & 1) == (v50 & 1))
      {
        unint64_t v51 = v49;
        unint64_t v21 = v10;
        while ((v21 & 1) == 0)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          unint64_t v56 = v21;
          sub_1001F8448();
          unint64_t v21 = v56;
LABEL_31:
          unint64_t v51 = v10;
        }
        uint64_t v52 = *(void *)(*(void *)(v68 + 56) + 8 * v51);
        char v53 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v67 = v52;
        sub_1001F55A0(v61, v59, (uint64_t)a5, v57, v62, v14, v53);
        uint64_t v54 = v67;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v55 = v68;
        if (v54) {
          *(void *)(*(void *)(v68 + 56) + 8 * v51) = v54;
        }
        else {
          sub_1001F3E24(v51, v68);
        }
        unint64_t v10 = v60;
        *unint64_t v17 = v55;
        swift_endAccess();
        goto LABEL_14;
      }
LABEL_45:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  swift_bridgeObjectRelease();
LABEL_13:
  swift_beginAccess();
  uint64_t v36 = (void *)sub_1001ED0B8(a1);
  swift_endAccess();

  swift_beginAccess();
  sub_1001ED908(a1);
  swift_endAccess();
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v37 = sub_10018FBC8();
  char v38 = *(os_unfair_lock_s **)(v6 + v15);
  swift_retain();
  os_unfair_lock_unlock(v38 + 4);
  swift_release();
  if (!v37)
  {
    uint64_t v39 = v63;
    (*(void (**)(char *, uint64_t, unint64_t))(v63 + 16))(v12, v6 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v10);
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "no more sensor or actuation clients, releasing transaction", v42, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, unint64_t))(v39 + 8))(v12, v10);
    sub_10019A168();
  }
  sub_1001A5BF4(v65, v66);
  return (uint64_t)a5;
}

void sub_1001946EC(uint64_t a1, void (*a2)(char *, uint64_t), char a3, int a4)
{
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  unint64_t v10 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_release();
  uint64_t v11 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking);
  if (a3)
  {
    swift_beginAccess();
    if (sub_100183950(a1, (uint64_t)a2, (void *)*v11))
    {
      sub_100194944(a1, a2, a4);
      sub_100195448(0xD000000000000018, (void (*)(char *, uint64_t))0x8000000100237420);
    }
    swift_bridgeObjectRetain();
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = sub_1001A1B74(v12, a1, (uint64_t)a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t *v11 = v13;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_beginAccess();
    if ((sub_100183950(a1, (uint64_t)a2, (void *)*v11) & 1) == 0)
    {
      swift_beginAccess();
      uint64_t v14 = (void *)*v11;
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t *v11 = (uint64_t)v14;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v14 = sub_100102294(0, v14[2] + 1, 1, v14);
        uint64_t *v11 = (uint64_t)v14;
      }
      unint64_t v17 = v14[2];
      unint64_t v16 = v14[3];
      unint64_t v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        char v22 = sub_100102294((void *)(v16 > 1), v17 + 1, 1, v14);
        unint64_t v18 = v17 + 1;
        uint64_t v14 = v22;
        uint64_t *v11 = (uint64_t)v22;
      }
      void v14[2] = v18;
      char v19 = &v14[2 * v17];
      v19[4] = a1;
      uint64_t v19[5] = a2;
      swift_endAccess();
      sub_100194944(a1, a2, a4);
      sub_100195448(0xD000000000000018, (void (*)(char *, uint64_t))0x8000000100237420);
    }
  }
  unint64_t v20 = *(os_unfair_lock_s **)(v4 + v9);
  swift_retain();
  os_unfair_lock_unlock(v20 + 4);
  swift_release();
  id v21 = *(id *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingEnableNotification);
  DeviceNotification.state.getter();
  DeviceNotification.state.setter();
}

void sub_100194944(uint64_t a1, void (*a2)(char *, uint64_t), int a3)
{
  unint64_t v108 = (void (*)(char *, uint64_t))a2;
  uint64_t v99 = a1;
  uint64_t v103 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v103 - 8);
  uint64_t v6 = __chkstk_darwin(v103);
  int64_t v106 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v101 = (char *)&v91 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v91 - v10;
  uint64_t v12 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess();
  int64_t v107 = v12;
  uint64_t v13 = *v12;
  uint64_t v14 = *v12 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(*v12 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(*v12 + 64);
  uint64_t v95 = v3;
  uint64_t v112 = v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  unint64_t v110 = (void (**)(char *, uint64_t))(v5 + 8);
  int64_t v111 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v104 = &v115;
  uint64_t v98 = (char *)&v114 + 4;
  swift_bridgeObjectRetain();
  int64_t v19 = 0;
  unint64_t v20 = _swiftEmptyArrayStorage;
  *(void *)&long long v21 = 136315650;
  long long v97 = v21;
  unint64_t v96 = (char *)&type metadata for Any + 8;
  *(void *)&long long v102 = v11;
LABEL_4:
  unint64_t v100 = v20;
  while (v17)
  {
    unint64_t v22 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    unint64_t v23 = v22 | (v19 << 6);
LABEL_6:
    uint64_t v24 = *(void *)(*(void *)(v13 + 56) + 8 * v23);
    if (*(_DWORD *)(v24 + 16) == a3)
    {
      uint64_t v29 = (int64_t *)(*(void *)(v13 + 48) + 16 * v23);
      uint64_t v30 = (void (*)(char *, uint64_t, uint64_t))v29[1];
      int64_t v105 = *v29;
      (*v111)(v11, v112, v103);
      unint64_t v109 = v30;
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      int v33 = v32;
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v34 = swift_slowAlloc();
        int v94 = v33;
        uint64_t v35 = v34;
        uint64_t v93 = swift_slowAlloc();
        v113[0] = v93;
        *(_DWORD *)uint64_t v35 = v97;
        uint64_t v91 = v35 + 4;
        swift_retain();
        os_log_t v92 = v31;
        unint64_t v36 = sub_1000C9088();
        unint64_t v38 = v37;
        swift_release();
        uint64_t v114 = sub_1000993AC(v36, v38, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v35 + 12) = 2080;
        unint64_t v39 = (unint64_t)v108;
        swift_bridgeObjectRetain();
        uint64_t v114 = sub_1000993AC(v99, v39, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        unint64_t v40 = (uint8_t *)v35;
        *(_WORD *)(v35 + 22) = 1024;
        LODWORD(v114) = a3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_log_t v41 = v92;
        _os_log_impl((void *)&_mh_execute_header, v92, (os_log_type_t)v94, "expiring animator %s, owner %s [pid %d] re-enabling system tracking", v40, 0x1Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t v11 = (char *)v102;
      (*v110)((char *)v102, v103);
      unint64_t v42 = *(void **)(v24 + 144);
      uint64_t v43 = v100;
      if (v42)
      {
        id v44 = v42;
        dispatch thunk of RepeatingTimer.suspend()();

        unint64_t v42 = *(void **)(v24 + 144);
      }
      *(void *)(v24 + 144) = 0;

      sub_1000CB638();
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v43 = sub_100102294(0, v43[2] + 1, 1, v43);
      }
      uint64_t v45 = v43;
      unint64_t v46 = v43[2];
      BOOL v47 = v45;
      unint64_t v48 = v45[3];
      if (v46 >= v48 >> 1) {
        BOOL v47 = sub_100102294((void *)(v48 > 1), v46 + 1, 1, v47);
      }
      v47[2] = v46 + 1;
      unint64_t v49 = &v47[2 * v46];
      unint64_t v20 = v47;
      char v50 = v109;
      v49[4] = v105;
      v49[5] = v50;
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
  }
  int64_t v25 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  unint64_t v26 = v106;
  if (v25 >= v18) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v14 + 8 * v25);
  ++v19;
  if (v27) {
    goto LABEL_21;
  }
  int64_t v19 = v25 + 1;
  if (v25 + 1 >= v18) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v14 + 8 * v19);
  if (v27) {
    goto LABEL_21;
  }
  int64_t v19 = v25 + 2;
  if (v25 + 2 >= v18) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v14 + 8 * v19);
  if (v27)
  {
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v23 = __clz(__rbit64(v27)) + (v19 << 6);
    goto LABEL_6;
  }
  int64_t v28 = v25 + 3;
  if (v28 >= v18)
  {
LABEL_32:
    swift_release();
    uint64_t v51 = v20[2];
    if (v51)
    {
      swift_bridgeObjectRetain();
      uint64_t v52 = v20 + 5;
      do
      {
        uint64_t v54 = *(v52 - 1);
        uint64_t v53 = *v52;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v55 = sub_10016DB60(v54, v53);
        char v57 = v56;
        uint64_t v58 = v107;
        swift_bridgeObjectRelease();
        if (v57)
        {
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v60 = v58;
          uint64_t v61 = *v58;
          uint64_t v114 = v61;
          *unint64_t v60 = 0x8000000000000000;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_1001F80FC();
            uint64_t v61 = v114;
          }
          swift_bridgeObjectRelease();
          sub_1001F30C4(v55, v61);
          *unint64_t v60 = v61;
          swift_bridgeObjectRelease();
        }
        v52 += 2;
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_release();
        --v51;
      }
      while (v51);
      swift_bridgeObjectRelease();
    }
    uint64_t v62 = v101;
    uint64_t v63 = v103;
    unint64_t v109 = *v111;
    v109(v101, v112, v103);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v66 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "remaining animators:", v66, 2u);
      swift_slowDealloc();
    }

    unint64_t v108 = *v110;
    v108(v62, v63);
    uint64_t v67 = *v107;
    uint64_t v68 = *(void *)(*v107 + 64);
    uint64_t v104 = (char *)(*v107 + 64);
    uint64_t v69 = 1 << *(unsigned char *)(v67 + 32);
    uint64_t v70 = -1;
    if (v69 < 64) {
      uint64_t v70 = ~(-1 << v69);
    }
    unint64_t v71 = v70 & v68;
    int64_t v105 = (unint64_t)(v69 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v72 = 0;
    *(void *)&long long v73 = 136315138;
    long long v102 = v73;
    uint64_t v101 = (char *)&type metadata for Any + 8;
    while (1)
    {
      if (v71)
      {
        unint64_t v74 = __clz(__rbit64(v71));
        v71 &= v71 - 1;
        unint64_t v75 = v74 | (v72 << 6);
      }
      else
      {
        int64_t v76 = v72 + 1;
        if (__OFADD__(v72, 1)) {
          goto LABEL_70;
        }
        if (v76 >= v105)
        {
LABEL_65:
          swift_bridgeObjectRelease();
          swift_release();
          if (!*(void *)(*v107 + 16)
            && !*(void *)(v95 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator))
          {
            unint64_t v89 = *(void **)(v95 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
            id v90 = v89;
            sub_10018B0C0(1, v89);
          }
          return;
        }
        unint64_t v77 = *(void *)&v104[8 * v76];
        ++v72;
        if (!v77)
        {
          int64_t v72 = v76 + 1;
          if (v76 + 1 >= v105) {
            goto LABEL_65;
          }
          unint64_t v77 = *(void *)&v104[8 * v72];
          if (!v77)
          {
            int64_t v72 = v76 + 2;
            if (v76 + 2 >= v105) {
              goto LABEL_65;
            }
            unint64_t v77 = *(void *)&v104[8 * v72];
            if (!v77)
            {
              int64_t v78 = v76 + 3;
              if (v78 >= v105) {
                goto LABEL_65;
              }
              unint64_t v77 = *(void *)&v104[8 * v78];
              if (!v77)
              {
                while (1)
                {
                  int64_t v72 = v78 + 1;
                  if (__OFADD__(v78, 1)) {
                    goto LABEL_72;
                  }
                  if (v72 >= v105) {
                    goto LABEL_65;
                  }
                  unint64_t v77 = *(void *)&v104[8 * v72];
                  ++v78;
                  if (v77) {
                    goto LABEL_62;
                  }
                }
              }
              int64_t v72 = v78;
            }
          }
        }
LABEL_62:
        unint64_t v71 = (v77 - 1) & v77;
        unint64_t v75 = __clz(__rbit64(v77)) + (v72 << 6);
      }
      uint64_t v79 = (uint64_t *)(*(void *)(v67 + 48) + 16 * v75);
      uint64_t v80 = *v79;
      uint64_t v81 = v79[1];
      uint64_t v82 = *(void *)(*(void *)(v67 + 56) + 8 * v75);
      v109(v26, v112, v63);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      int64_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        v113[2] = v82;
        uint64_t v114 = v86;
        *(_DWORD *)uint64_t v85 = v102;
        v113[0] = v80;
        v113[1] = v81;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1000992E8(&qword_1002AC140);
        uint64_t v87 = String.init<A>(describing:)();
        *(void *)(v85 + 4) = sub_1000993AC(v87, v88, &v114);
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "    animator: %s", (uint8_t *)v85, 0xCu);
        swift_arrayDestroy();
        uint64_t v63 = v103;
        swift_slowDealloc();
        unint64_t v26 = v106;
        swift_slowDealloc();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
      v108(v26, v63);
    }
  }
  unint64_t v27 = *(void *)(v14 + 8 * v28);
  if (v27)
  {
    int64_t v19 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v19 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v19 >= v18) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v14 + 8 * v19);
    ++v28;
    if (v27) {
      goto LABEL_21;
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

uint64_t sub_100195448(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v21 = v6 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v6 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_21;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v16 >= v10) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v21 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v10) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v21 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v10) {
          return swift_release();
        }
        unint64_t v17 = *(void *)(v21 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_21:
    uint64_t v19 = *(void *)(*(void *)(v6 + 56) + 8 * v15);
    if (*(void *)(v19 + 24) != a1 || *(void *)(v19 + 32) != (void)a2)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    int v13 = *(_DWORD *)(v19 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_100194944(a1, a2, v13);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v10) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v21 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v10) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v21 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100195638(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v26 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  unint64_t v14 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v14 + 4);
  swift_release();
  swift_beginAccess();
  id v15 = a2;
  sub_1001E0F84((uint64_t)a2, a1);
  swift_endAccess();
  int64_t v16 = (uint64_t *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *v16;
  *int64_t v16 = 0x8000000000000000;
  sub_1001F4720(a3, a4, a1, isUniquelyReferenced_nonNull_native);
  *int64_t v16 = v27;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v18 = sub_10018FBC8();
  uint64_t v19 = *(os_unfair_lock_s **)(v5 + v13);
  swift_retain();
  os_unfair_lock_unlock(v19 + 4);
  swift_release();
  if (v18 == 1)
  {
    uint64_t v20 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v12, v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v10);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "added first pairing client, taking transaction", v23, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v20 + 8))(v12, v10);
    sub_100199524(1);
  }
  return 1;
}

void sub_1001958D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a4;
  uint64_t v63 = a3;
  uint64_t v65 = a2;
  uint64_t v74 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v70 = *(char **)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v62 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001FBB8C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  uint64_t v11 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v11 + 4);
  swift_release();
  int64_t v12 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClientsRules);
  swift_beginAccess();
  uint64_t v13 = *v12;
  unint64_t v14 = *(os_unfair_lock_s **)(v4 + v10);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v14 + 4);
  swift_release();
  sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  id v15 = *(os_unfair_lock_s **)(v4 + v10);
  swift_retain();
  os_unfair_lock_lock(v15 + 4);
  swift_release();
  int64_t v16 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients);
  swift_beginAccess();
  uint64_t v17 = *v16;
  uint64_t v18 = *(os_unfair_lock_s **)(v4 + v10);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v19 = v5;
  os_unfair_lock_unlock(v18 + 4);
  uint64_t v20 = v17;
  swift_release();
  int64_t v22 = 0;
  uint64_t v23 = v17 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(v17 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & *(void *)(v17 + 64);
  uint64_t v27 = v13;
  uint64_t v61 = v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  unint64_t v60 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v59 = (void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  uint64_t v58 = (void (**)(char *, uint64_t))(v70 + 8);
  char v57 = (void (**)(char *, uint64_t))(v8 + 8);
  int64_t v28 = (unint64_t)(v24 + 63) >> 6;
  uint64_t v70 = (char *)&type metadata for Any + 8;
  *(void *)&long long v21 = 136315394;
  long long v56 = v21;
  uint64_t v64 = v5;
  uint64_t v71 = v23;
  uint64_t v72 = v20;
  int64_t v73 = v28;
  while (1)
  {
    while (v26)
    {
      unint64_t v29 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v30 = v29 | (v22 << 6);
      if (*(void *)(v27 + 16))
      {
LABEL_24:
        uint64_t v34 = *(void **)(*(void *)(v20 + 56) + 8 * v30);
        uint64_t v35 = v27;
        unint64_t v36 = sub_10016DBD8(*(_DWORD *)(*(void *)(v20 + 48) + 4 * v30));
        uint64_t v27 = v35;
        if (v37)
        {
          unint64_t v38 = (uint64_t *)(*(void *)(v35 + 56) + 16 * v36);
          uint64_t v40 = *v38;
          uint64_t v39 = v38[1];
          id v41 = v34;
          swift_bridgeObjectRetain();
          if (v40 == UUID.uuidString.getter() && v39 == v42)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v44 & 1) == 0) {
              goto LABEL_5;
            }
          }
          id v41 = v41;
          id v45 = [v41 remoteObjectProxy];
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          sub_1000992E8(&qword_1002AC148);
          if ((swift_dynamicCast() & 1) == 0)
          {

LABEL_5:
            uint64_t v23 = v71;
            uint64_t v20 = v72;
            goto LABEL_6;
          }
          id v67 = v75;
          id v68 = v41;
          unint64_t v46 = v62;
          (*v60)(v62, v61, v69);
          (*v59)(v7, v74, v19);
          BOOL v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v47, v48))
          {
            uint64_t v49 = swift_slowAlloc();
            v76[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v49 = v56;
            uint64_t v50 = UUID.uuidString.getter();
            *(void *)(v49 + 4) = sub_1000993AC(v50, v51, v76);
            swift_bridgeObjectRelease();
            (*v58)(v7, v64);
            *(_WORD *)(v49 + 12) = 2048;
            *(void *)(v49 + 14) = PairingRequestState.rawValue.getter();
            _os_log_impl((void *)&_mh_execute_header, v47, v48, "Notifying prox card %s of state change %ld", (uint8_t *)v49, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            (*v58)(v7, v19);
          }

          (*v57)(v46, v69);
          uint64_t v23 = v71;
          uint64_t v20 = v72;
          UUID.uuidString.getter();
          NSString v52 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          v53.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          if (v66) {
            uint64_t v54 = (void *)_convertErrorToNSError(_:)();
          }
          else {
            uint64_t v54 = 0;
          }
          [v67 pairingStatusWithInfo:v52 state:v65 metadata:v53.super.isa error:v54];
          swift_unknownObjectRelease();

          id v55 = v68;
          uint64_t v19 = v64;
LABEL_6:
          int64_t v28 = v73;
          uint64_t v27 = v35;
        }
      }
    }
    int64_t v31 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v31 >= v28) {
      goto LABEL_40;
    }
    unint64_t v32 = *(void *)(v23 + 8 * v31);
    ++v22;
    if (!v32)
    {
      int64_t v22 = v31 + 1;
      if (v31 + 1 >= v28) {
        goto LABEL_40;
      }
      unint64_t v32 = *(void *)(v23 + 8 * v22);
      if (!v32)
      {
        int64_t v22 = v31 + 2;
        if (v31 + 2 >= v28) {
          goto LABEL_40;
        }
        unint64_t v32 = *(void *)(v23 + 8 * v22);
        if (!v32) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v26 = (v32 - 1) & v32;
    unint64_t v30 = __clz(__rbit64(v32)) + (v22 << 6);
    if (*(void *)(v27 + 16)) {
      goto LABEL_24;
    }
  }
  int64_t v33 = v31 + 3;
  if (v33 >= v28)
  {
LABEL_40:
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  unint64_t v32 = *(void *)(v23 + 8 * v33);
  if (v32)
  {
    int64_t v22 = v33;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v22 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v22 >= v28) {
      goto LABEL_40;
    }
    unint64_t v32 = *(void *)(v23 + 8 * v22);
    ++v33;
    if (v32) {
      goto LABEL_23;
    }
  }
LABEL_42:
  __break(1u);
}

uint64_t sub_10019601C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v52 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  int64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v45 = a1;
  uint64_t v17 = DockCoreInfo.description.getter();
  uint64_t v19 = v18;
  pid_t v20 = getpid();
  int v46 = a2;
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  if (v20 == a2)
  {
    if (a3 == 0xD000000000000018 && a4 == 0x8000000100233FF0) {
      char v21 = 1;
    }
    else {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  else
  {
    char v21 = 0;
  }
  uint64_t v22 = v19;
  uint64_t v23 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v24 = *(os_unfair_lock_s **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v24 + 4);
  swift_release();
  uint64_t v25 = v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators;
  swift_beginAccess();
  uint64_t v26 = *(void *)v25;
  if (*(void *)(*(void *)v25 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_10016DB60(v17, v22);
    if (v28)
    {
      uint64_t v29 = *(void *)(*(void *)(v26 + 56) + 8 * v27);
      swift_retain();
    }
    else
    {
      uint64_t v29 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v29 = 0;
  }
  uint64_t v51 = v23;
  uint64_t v44 = v17;
  if (v21)
  {
    uint64_t v30 = *(void *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator);
    swift_retain();
    swift_release();
    if (!v30) {
      goto LABEL_27;
    }
    uint64_t v29 = v30;
    if (!*(void *)(v30 + 56)) {
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (!v29) {
    goto LABEL_27;
  }
  uint64_t v30 = v29;
  if (*(void *)(v29 + 56))
  {
LABEL_19:
    if (*(void *)(v30 + 48) && *(unsigned char *)(v30 + 40) != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
  }
LABEL_21:
  *(unsigned char *)(v30 + 40) = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v52);
  int64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    int64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Removing previously expired animator", v33, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v52);
  uint64_t v34 = *(void **)(v30 + 144);
  swift_retain();
  if (v34)
  {
    id v35 = v34;
    dispatch thunk of RepeatingTimer.suspend()();

    unint64_t v36 = *(void **)(v30 + 144);
  }
  else
  {
    unint64_t v36 = 0;
  }
  *(void *)(v30 + 144) = 0;

  sub_1000CB638();
  swift_release_n();
LABEL_27:
  type metadata accessor for VelocityAnimator();
  swift_allocObject();
  id v37 = v45;
  uint64_t v38 = v48;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v39 = v50;
  swift_retain();
  uint64_t v29 = sub_1000CBE2C(v46, v47, v38, v49, v39, (uint64_t)sub_1001A5B54, v7);

  swift_release();
  swift_release();
  if (v21)
  {
    swift_bridgeObjectRelease();
    *(void *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator) = v29;
    swift_retain();
    swift_release();
LABEL_34:
    uint64_t v41 = v51;
    goto LABEL_35;
  }
  swift_beginAccess();
  if (v29)
  {
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v53 = *(void *)v25;
    *(void *)uint64_t v25 = 0x8000000000000000;
    sub_1001F51CC(v29, v44, v22, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v25 = v53;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1001ED838(v44, v22);
    swift_bridgeObjectRelease();
    swift_release();
  }
  uint64_t v41 = v51;
  swift_endAccess();
LABEL_35:
  uint64_t v42 = *(os_unfair_lock_s **)(v7 + v41);
  swift_retain();
  os_unfair_lock_unlock(v42 + 4);
  swift_release();
  return v29;
}

uint64_t sub_100196528(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v20 = *(void *)(v6 - 8);
  uint64_t v21 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v18 = *(void *)(a2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_queue);
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  aBlock[4] = sub_1001A5B5C;
  aBlock[5] = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1001468DC;
  uint64_t aBlock[3] = &unk_100279220;
  int64_t v16 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_1001A62BC((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, v21);
  v19(v15, v9);
  return swift_release();
}

uint64_t sub_1001968A8()
{
  uint64_t v1 = v0;
  uint64_t v2 = DockCoreInfo.description.getter();
  uint64_t v4 = v3;
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v6 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  swift_release();
  uint64_t v7 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_10016DB60(v2, v4);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v12 = *(os_unfair_lock_s **)(v1 + v5);
  swift_retain();
  os_unfair_lock_unlock(v12 + 4);
  swift_release();
  return v11;
}

uint64_t sub_1001969C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = DockCoreInfo.description.getter();
  uint64_t v4 = v3;
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v6 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  swift_release();
  uint64_t v7 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators;
  swift_beginAccess();
  if (*(void *)(*(void *)v7 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10016DB60(v2, v4);
    char v9 = v8;
    swift_bridgeObjectRelease();
    if (v9)
    {
      swift_bridgeObjectRelease();
      if (*(void *)(*(void *)v7 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10016DB60(v2, v4);
        if (v10)
        {
          swift_retain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000CB638();
          swift_release();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      swift_beginAccess();
      sub_1001ED838(v2, v4);
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = *(os_unfair_lock_s **)(v1 + v5);
  swift_retain();
  os_unfair_lock_unlock(v11 + 4);
  return swift_release();
}

uint64_t sub_100196B8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  unint64_t v109 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v110 = (char *)&v108 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v119 = (char *)&v108 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v112 = (char *)&v108 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v108 - v13;
  __chkstk_darwin(v12);
  int64_t v16 = (char *)&v108 - v15;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v124 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  uint64_t v125 = v17;
  uint64_t v126 = v3 + 16;
  ((void (*)(char *))v17)((char *)&v108 - v15);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Cleaning up stale animators", v20, 2u);
    swift_slowDealloc();
  }

  uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  uint64_t v21 = (unint64_t *)(v3 + 8);
  uint64_t v123 = v22;
  v22(v16, v2);
  uint64_t v111 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v23 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v23 + 4);
  swift_release();
  uint64_t v113 = v1;
  uint64_t v24 = (unint64_t **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
  swift_beginAccess();
  uint64_t v114 = v24;
  uint64_t v25 = *v24;
  unint64_t v26 = (*v24)[8];
  uint64_t v117 = (uint64_t)(*v24 + 8);
  uint64_t v27 = 1 << *((unsigned char *)v25 + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v29 = v28 & v26;
  int64_t v118 = (unint64_t)(v27 + 63) >> 6;
  uint64_t v122 = v25;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v31 = 0;
  *(void *)&long long v32 = 136315138;
  long long v120 = v32;
  char v115 = (char *)&type metadata for Any + 8;
  uint64_t v33 = v2;
  uint64_t v121 = v2;
  uint64_t v116 = v14;
  while (1)
  {
    if (v29)
    {
      unint64_t v34 = __clz(__rbit64(v29));
      v29 &= v29 - 1;
      unint64_t v35 = v34 | (v31 << 6);
      goto LABEL_24;
    }
    int64_t v36 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
LABEL_78:
      __break(1u);
      goto LABEL_79;
    }
    id v37 = v119;
    if (v36 >= v118) {
      goto LABEL_32;
    }
    unint64_t v38 = *(void *)(v117 + 8 * v36);
    ++v31;
    if (!v38)
    {
      int64_t v31 = v36 + 1;
      if (v36 + 1 >= v118) {
        goto LABEL_32;
      }
      unint64_t v38 = *(void *)(v117 + 8 * v31);
      if (!v38)
      {
        int64_t v31 = v36 + 2;
        if (v36 + 2 >= v118) {
          goto LABEL_32;
        }
        unint64_t v38 = *(void *)(v117 + 8 * v31);
        if (!v38) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v29 = (v38 - 1) & v38;
    unint64_t v35 = __clz(__rbit64(v38)) + (v31 << 6);
LABEL_24:
    uint64_t v40 = (uint64_t *)(v122[6] + 16 * v35);
    uint64_t v41 = *v40;
    uint64_t v42 = v40[1];
    uint64_t v43 = *(void *)(v122[7] + 8 * v35);
    if (!*(void *)(v43 + 56) || !*(void *)(v43 + 48) || *(unsigned char *)(v43 + 40) == 1)
    {
      *(unsigned char *)(v43 + 40) = 1;
      uint64_t v44 = *(void **)(v43 + 144);
      swift_bridgeObjectRetain();
      swift_retain();
      if (v44)
      {
        id v45 = v44;
        dispatch thunk of RepeatingTimer.suspend()();

        int v46 = *(void **)(v43 + 144);
      }
      else
      {
        int v46 = 0;
      }
      *(void *)(v43 + 144) = 0;

      sub_1000CB638();
      v125(v14, v124, v33);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        uint64_t v129 = v43;
        uint64_t v130 = v50;
        *(_DWORD *)uint64_t v49 = v120;
        uint64_t v127 = v41;
        uint64_t v128 = v42;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1000992E8(&qword_1002AC140);
        uint64_t v51 = String.init<A>(describing:)();
        *(void *)(v49 + 4) = sub_1000993AC(v51, v52, &v130);
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "   expired: %s", (uint8_t *)v49, 0xCu);
        swift_arrayDestroy();
        uint64_t v14 = v116;
        swift_slowDealloc();
        uint64_t v33 = v121;
        swift_slowDealloc();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t result = v123(v14, v33);
    }
  }
  int64_t v39 = v36 + 3;
  if (v39 >= v118)
  {
LABEL_32:
    swift_release();
    uint64_t v53 = v114;
    uint64_t v54 = swift_bridgeObjectRetain();
    id v55 = sub_10019F514(v54);
    swift_bridgeObjectRelease();
    *uint64_t v53 = v55;
    swift_bridgeObjectRelease();
    long long v56 = v112;
    v125(v112, v124, v33);
    char v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "remaining animators:", v59, 2u);
      swift_slowDealloc();
    }

    uint64_t v122 = v21;
    v123(v56, v33);
    unint64_t v60 = *v114;
    unint64_t v61 = (*v114)[8];
    uint64_t v117 = (uint64_t)(*v114 + 8);
    uint64_t v62 = 1 << *((unsigned char *)v60 + 32);
    uint64_t v63 = -1;
    if (v62 < 64) {
      uint64_t v63 = ~(-1 << v62);
    }
    unint64_t v64 = v63 & v61;
    int64_t v118 = (unint64_t)(v62 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v65 = 0;
    uint64_t v116 = (char *)&type metadata for Any + 8;
    while (1)
    {
      if (v64)
      {
        unint64_t v66 = __clz(__rbit64(v64));
        v64 &= v64 - 1;
        unint64_t v67 = v66 | (v65 << 6);
      }
      else
      {
        int64_t v68 = v65 + 1;
        if (__OFADD__(v65, 1)) {
          goto LABEL_78;
        }
        if (v68 >= v118)
        {
LABEL_57:
          swift_release();
          uint64_t v81 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator;
          uint64_t v82 = v113;
          uint64_t v83 = *(void *)(v113 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__systemAnimator);
          if (v83)
          {
            if (*(void *)(v83 + 56) && *(void *)(v83 + 48) && *(unsigned char *)(v83 + 40) != 1)
            {
              uint64_t v99 = v109;
              v125(v109, v124, v33);
              swift_retain_n();
              unint64_t v100 = Logger.logObject.getter();
              os_log_type_t v101 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v100, v101))
              {
                long long v102 = (uint8_t *)swift_slowAlloc();
                uint64_t v127 = swift_slowAlloc();
                *(_DWORD *)long long v102 = v120;
                swift_retain();
                unint64_t v103 = sub_1000C9088();
                unint64_t v105 = v104;
                swift_release();
                uint64_t v130 = sub_1000993AC(v103, v105, &v127);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v100, v101, "    animator: %s", v102, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
                swift_release();

                int64_t v106 = v109;
                uint64_t v107 = v121;
              }
              else
              {

                swift_release_n();
                int64_t v106 = v99;
                uint64_t v107 = v33;
              }
              v123(v106, v107);
            }
            else
            {
              *(unsigned char *)(v83 + 40) = 1;
              os_log_type_t v84 = *(void **)(v83 + 144);
              swift_retain();
              if (v84)
              {
                id v85 = v84;
                dispatch thunk of RepeatingTimer.suspend()();

                uint64_t v86 = *(void **)(v83 + 144);
              }
              else
              {
                uint64_t v86 = 0;
              }
              uint64_t v87 = v110;
              *(void *)(v83 + 144) = 0;

              sub_1000CB638();
              v125(v87, v124, v33);
              swift_retain_n();
              unint64_t v88 = Logger.logObject.getter();
              os_log_type_t v89 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v88, v89))
              {
                id v90 = (uint8_t *)swift_slowAlloc();
                uint64_t v127 = swift_slowAlloc();
                *(_DWORD *)id v90 = v120;
                swift_retain();
                unint64_t v91 = sub_1000C9088();
                unint64_t v93 = v92;
                swift_release();
                uint64_t v130 = sub_1000993AC(v91, v93, &v127);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v88, v89, "   expired: %s", v90, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
                swift_release();

                int v94 = v110;
                uint64_t v95 = v121;
              }
              else
              {

                swift_release_n();
                int v94 = v87;
                uint64_t v95 = v33;
              }
              v123(v94, v95);
              *(void *)(v113 + v81) = 0;
              swift_release();
            }
            uint64_t v82 = v113;
          }
          if (!(*v114)[2] && !*(void *)(v82 + v81))
          {
            unint64_t v96 = *(void **)(v82 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
            id v97 = v96;
            sub_10018B0C0(1, v96);

            uint64_t v82 = v113;
          }
          uint64_t v98 = *(os_unfair_lock_s **)(v82 + v111);
          swift_retain();
          os_unfair_lock_unlock(v98 + 4);
          return swift_release();
        }
        unint64_t v69 = *(void *)(v117 + 8 * v68);
        ++v65;
        if (!v69)
        {
          int64_t v65 = v68 + 1;
          if (v68 + 1 >= v118) {
            goto LABEL_57;
          }
          unint64_t v69 = *(void *)(v117 + 8 * v65);
          if (!v69)
          {
            int64_t v65 = v68 + 2;
            if (v68 + 2 >= v118) {
              goto LABEL_57;
            }
            unint64_t v69 = *(void *)(v117 + 8 * v65);
            if (!v69)
            {
              int64_t v70 = v68 + 3;
              if (v70 >= v118) {
                goto LABEL_57;
              }
              unint64_t v69 = *(void *)(v117 + 8 * v70);
              if (!v69)
              {
                while (1)
                {
                  int64_t v65 = v70 + 1;
                  if (__OFADD__(v70, 1)) {
                    goto LABEL_80;
                  }
                  if (v65 >= v118) {
                    goto LABEL_57;
                  }
                  unint64_t v69 = *(void *)(v117 + 8 * v65);
                  ++v70;
                  if (v69) {
                    goto LABEL_54;
                  }
                }
              }
              int64_t v65 = v70;
            }
          }
        }
LABEL_54:
        unint64_t v64 = (v69 - 1) & v69;
        unint64_t v67 = __clz(__rbit64(v69)) + (v65 << 6);
      }
      uint64_t v71 = (uint64_t *)(v60[6] + 16 * v67);
      uint64_t v72 = *v71;
      uint64_t v73 = v71[1];
      uint64_t v74 = *(void *)(v60[7] + 8 * v67);
      v125(v37, v124, v33);
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      unint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = swift_slowAlloc();
        uint64_t v78 = swift_slowAlloc();
        uint64_t v129 = v74;
        uint64_t v130 = v78;
        *(_DWORD *)uint64_t v77 = v120;
        uint64_t v127 = v72;
        uint64_t v128 = v73;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_1000992E8(&qword_1002AC140);
        uint64_t v79 = String.init<A>(describing:)();
        *(void *)(v77 + 4) = sub_1000993AC(v79, v80, &v130);
        swift_release_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "    animator: %s", (uint8_t *)v77, 0xCu);
        swift_arrayDestroy();
        id v37 = v119;
        swift_slowDealloc();
        uint64_t v33 = v121;
        swift_slowDealloc();
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
      }
      uint64_t result = v123(v37, v33);
    }
  }
  unint64_t v38 = *(void *)(v117 + 8 * v39);
  if (v38)
  {
    int64_t v31 = v39;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v31 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v31 >= v118) {
      goto LABEL_32;
    }
    unint64_t v38 = *(void *)(v117 + 8 * v31);
    ++v39;
    if (v38) {
      goto LABEL_23;
    }
  }
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
  return result;
}

uint64_t sub_100197990()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask;
  if (*(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_tiltToBaseTask)
    && *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastConnectedAppId + 8))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v2);
    swift_retain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Cancelling previous return to base task", v10, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    Task.cancel()();
    swift_release();
    *(void *)(v1 + v7) = 0;
    return swift_release();
  }
  return result;
}

uint64_t sub_100197B5C()
{
  uint64_t v1 = v0;
  uint64_t v2 = DockState.rawValue.getter();
  if (v2 == DockState.rawValue.getter())
  {
    uint64_t v3 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    id v4 = v3;
    goto LABEL_6;
  }
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v6 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  swift_release();
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
  uint64_t v8 = *(os_unfair_lock_s **)(v1 + v5);
  id v4 = v7;
  swift_retain();
  os_unfair_lock_unlock(v8 + 4);
  swift_release();
  if (v7)
  {
    sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
    os_log_type_t v9 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    uint64_t v10 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    char v11 = static NSObject.== infix(_:_:)();

    if ((v11 & 1) == 0)
    {
LABEL_7:

      return 1;
    }
    uint64_t v3 = 0;
LABEL_6:
    sub_10018A5EC(v3);
    goto LABEL_7;
  }
  return 1;
}

void sub_100197C84(void *a1)
{
  uint64_t v41 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  os_log_type_t v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v11 = (char *)v36 - v10;
  uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
  uint64_t v13 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
  swift_retain();
  os_unfair_lock_lock(v13 + 4);
  swift_release();
  uint64_t v42 = v1;
  if (*(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn))
  {
    swift_retain();
    sub_100106558();
    swift_release();
  }
  uint64_t v14 = *(os_unfair_lock_s **)(v42 + v12);
  swift_retain();
  os_unfair_lock_unlock(v14 + 4);
  swift_release();
  if (a1)
  {
    uint64_t v15 = qword_1002A7C00;
    v36[0] = a1;
    id v16 = a1;
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v17 = (char *)*(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    id v37 = v16;
    uint64_t v18 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    uint64_t v38 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    id v19 = *(id *)&v17[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    int64_t v39 = v17;
    uint64_t v20 = &v17[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v21 = *(void *)v20;
    uint64_t v22 = *(void *)(*(void *)v20 + 16);
    if (v22)
    {
      v36[1] = v5;
      v36[2] = v3;
      uint64_t v23 = v21 + 32;
      uint64_t v24 = (void (**)(char *, uint64_t))(v40 + 8);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000A5D40(v23, (uint64_t)v43);
        id v25 = *(id *)(*sub_1000A5DA4(v43, v43[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v25) = static UUID.== infix(_:_:)();
        unint64_t v26 = *v24;
        (*v24)(v9, v6);
        v26(v11, v6);
        if (v25) {
          break;
        }
        sub_100099BCC((uint64_t)v43);
        v23 += 40;
        if (!--v22)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v27 = v39;
      id v34 = *(id *)&v39[v38];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v43, (uint64_t)&v44);
      sub_100099BCC((uint64_t)v43);

      if (!*((void *)&v45 + 1)) {
        goto LABEL_18;
      }
    }
    else
    {
LABEL_11:
      uint64_t v27 = v39;
      id v28 = *(id *)&v39[v38];
      OS_dispatch_semaphore.signal()();

      uint64_t v46 = 0;
      long long v44 = 0u;
      long long v45 = 0u;

      if (!*((void *)&v45 + 1))
      {
LABEL_18:

        sub_1000A61E4((uint64_t)&v44, (uint64_t *)&unk_1002AAA30);
        return;
      }
    }
    sub_1000992E8(&qword_1002A82E0);
    type metadata accessor for DaemonAccessory();
    if (swift_dynamicCast())
    {
      unint64_t v29 = v43[0];
      uint64_t v30 = *(char **)(v43[0] + 16);
      if (v30)
      {
        int64_t v31 = *(void **)&v30[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
        if (v31)
        {
          long long v32 = v30;
          if ([v31 state] == (id)2)
          {
            id v33 = *(id *)&v27[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager];
            sub_10014A068(v29, 0, 0, 0, 0.0);

            swift_release();
            return;
          }
        }
        else
        {
          unint64_t v35 = v30;
        }

        swift_release();
      }
      else
      {

        swift_release();
      }
    }
    else
    {
    }
  }
}

uint64_t sub_1001983C4(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ComponentType();
  v2[29] = v4;
  v2[30] = *(void *)(v4 - 8);
  v2[31] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[32] = v5;
  v2[33] = *(void *)(v5 - 8);
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  return ((uint64_t (*)(void (*)(), void, void))_swift_task_switch)(sub_100198568, 0, 0);
}

void sub_100198568()
{
  if (qword_1002A7C00 != -1) {
    goto LABEL_64;
  }
  while (1)
  {
    uint64_t v1 = (uint64_t)(v0 + 2);
    uint64_t v2 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    uint64_t v3 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    uint64_t v4 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    uint64_t v5 = v2;
    id v6 = v4;
    OS_dispatch_semaphore.wait()();

    uint64_t v7 = &v5[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v8 = *(void *)(*(void *)v7 + 16);
    if (!v8) {
      goto LABEL_7;
    }
    uint64_t v74 = v3;
    uint64_t v77 = v2;
    unint64_t v80 = v5;
    uint64_t v9 = *(void *)v7 + 32;
    uint64_t v10 = (void (**)(uint64_t, uint64_t))(v0[33] + 8);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v12 = v0[34];
      uint64_t v11 = v0[35];
      uint64_t v13 = v0[32];
      sub_1000A5D40(v9, (uint64_t)(v0 + 7));
      id v14 = *(id *)(*sub_1000A5DA4(v0 + 7, v0[10]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v14) = static UUID.== infix(_:_:)();
      uint64_t v15 = *v10;
      (*v10)(v12, v13);
      v15(v11, v13);
      if (v14)
      {
        swift_bridgeObjectRelease();
        id v39 = *(id *)&v77[v74];
        OS_dispatch_semaphore.signal()();

        uint64_t v1 = (uint64_t)(v0 + 2);
        sub_1000A5D40((uint64_t)(v0 + 7), (uint64_t)(v0 + 2));
        sub_100099BCC((uint64_t)(v0 + 7));

        if (v0[5]) {
          goto LABEL_8;
        }
LABEL_18:
        sub_1000A61E4(v1, (uint64_t *)&unk_1002AAA30);
LABEL_19:
        (*(void (**)(void, uint64_t, void))(v0[25] + 16))(v0[26], v0[23] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v0[24]);
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v42 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Accessory not found", v42, 2u);
          swift_slowDealloc();
        }
        uint64_t v44 = v0[25];
        uint64_t v43 = v0[26];
        uint64_t v45 = v0[24];

        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
LABEL_59:
        unint64_t v69 = 0;
        goto LABEL_60;
      }
      sub_100099BCC((uint64_t)(v0 + 7));
      v9 += 40;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v5 = v80;
    uint64_t v1 = (uint64_t)(v0 + 2);
    uint64_t v3 = v74;
    uint64_t v2 = v77;
LABEL_7:
    id v16 = *(id *)&v2[v3];
    OS_dispatch_semaphore.signal()();

    *(void *)(v1 + 32) = 0;
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;

    if (!v0[5]) {
      goto LABEL_18;
    }
LABEL_8:
    sub_1000992E8(&qword_1002A82E0);
    type metadata accessor for DaemonAccessory();
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_19;
    }
    uint64_t v17 = v0[30];
    uint64_t v18 = v0[31];
    uint64_t v19 = v0[29];
    uint64_t v20 = v0[21];
    uint64_t v81 = swift_allocObject();
    *(void *)(v81 + 16) = sub_1001EAFB8((uint64_t)_swiftEmptyArrayStorage);
    (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))(v18, enum case for ComponentType.Battery(_:), v19);
    uint64_t v21 = v20 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap;
    swift_beginAccess();
    uint64_t v22 = *(void *)v21;
    if (!*(void *)(*(void *)v21 + 16)) {
      goto LABEL_23;
    }
    uint64_t v23 = v0[31];
    swift_bridgeObjectRetain();
    unint64_t v24 = sub_10016DF28(v23);
    if ((v25 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      uint64_t v46 = v0[27];
      uint64_t v48 = v0[24];
      uint64_t v47 = v0[25];
      uint64_t v49 = v0[23];
      (*(void (**)(void, void))(v0[30] + 8))(v0[31], v0[29]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v46, v49 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v48);
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        unint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Accessory does not have a battery service, cannot read", v52, 2u);
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_release();
      }
      uint64_t v53 = v0[27];
LABEL_58:
      (*(void (**)(uint64_t, void))(v0[25] + 8))(v53, v0[24]);
      swift_release();
      goto LABEL_59;
    }
    uint64_t v75 = v81 + 16;
    uint64_t v26 = v0[30];
    uint64_t v27 = v0[31];
    uint64_t v28 = v0[29];
    uint64_t v29 = *(void *)(*(void *)(v22 + 56) + 8 * v24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
    uint64_t v78 = v29;
    uint64_t v30 = *(void *)(v29 + 16);
    if (v30)
    {
      int64_t v31 = (void **)(v78 + 48);
      do
      {
        id v33 = *(v31 - 2);
        uint64_t v32 = (uint64_t)*(v31 - 1);
        id v34 = *v31;
        uint64_t v35 = qword_1002A7BE0;
        swift_bridgeObjectRetain_n();
        id v36 = v34;
        if (v35 != -1) {
          swift_once();
        }
        uint64_t v37 = v0[23];
        uint64_t v38 = qword_1002B15B0;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        sub_1001B546C(v38, v36, v20, v37, v81, v33, v32);

        swift_release();
        swift_release();
        swift_bridgeObjectRelease_n();
        v31 += 3;
        --v30;
      }
      while (v30);
    }
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v54 = *(void *)v75;
    if (!*(void *)(*(void *)v75 + 16))
    {
      (*(void (**)(void, uint64_t, void))(v0[25] + 16))(v0[28], v0[23] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v0[24]);
      int64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v72 = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Battery Data is empty", v72, 2u);
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_release();
      }
      uint64_t v53 = v0[28];
      goto LABEL_58;
    }
    uint64_t v76 = v54 + 64;
    uint64_t v55 = -1;
    uint64_t v56 = -1 << *(unsigned char *)(v54 + 32);
    if (-v56 < 64) {
      uint64_t v55 = ~(-1 << -(char)v56);
    }
    unint64_t v57 = v55 & *(void *)(v54 + 64);
    int64_t v79 = (unint64_t)(63 - v56) >> 6;
    swift_bridgeObjectRetain();
    int64_t v58 = 0;
    while (v57)
    {
      while (1)
      {
        unint64_t v63 = __clz(__rbit64(v57));
        v57 &= v57 - 1;
        unint64_t v62 = v63 | (v58 << 6);
LABEL_48:
        unint64_t v64 = (uint64_t *)(*(void *)(v54 + 56) + 16 * v62);
        uint64_t v66 = *v64;
        unint64_t v65 = v64[1];
        objc_allocWithZone((Class)type metadata accessor for AccessoryBatteryState());
        swift_bridgeObjectRetain();
        sub_1000A618C(v66, v65);
        swift_bridgeObjectRetain();
        sub_1000A618C(v66, v65);
        unint64_t v67 = (void *)AccessoryBatteryState.init(data:name:)();
        if (v67) {
          break;
        }
        swift_bridgeObjectRelease();
        sub_1000A6240(v66, v65);
        if (!v57) {
          goto LABEL_33;
        }
      }
      id v68 = v67;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      sub_1000A6240(v66, v65);
    }
LABEL_33:
    int64_t v59 = v58 + 1;
    if (!__OFADD__(v58, 1)) {
      break;
    }
    __break(1u);
LABEL_64:
    swift_once();
  }
  if (v59 >= v79) {
    goto LABEL_53;
  }
  unint64_t v60 = *(void *)(v76 + 8 * v59);
  ++v58;
  if (v60)
  {
LABEL_46:
    unint64_t v57 = (v60 - 1) & v60;
    unint64_t v62 = __clz(__rbit64(v60)) + (v58 << 6);
    goto LABEL_48;
  }
  int64_t v58 = v59 + 1;
  if (v59 + 1 >= v79)
  {
LABEL_53:
    swift_release();
    swift_release();
    unint64_t v69 = _swiftEmptyArrayStorage;
    swift_release();
LABEL_60:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v73 = (void (*)(void *))v0[1];
    v73(v69);
    return;
  }
  unint64_t v60 = *(void *)(v76 + 8 * v58);
  if (v60) {
    goto LABEL_46;
  }
  int64_t v58 = v59 + 2;
  if (v59 + 2 >= v79) {
    goto LABEL_53;
  }
  unint64_t v60 = *(void *)(v76 + 8 * v58);
  if (v60) {
    goto LABEL_46;
  }
  int64_t v61 = v59 + 3;
  if (v61 >= v79) {
    goto LABEL_53;
  }
  unint64_t v60 = *(void *)(v76 + 8 * v61);
  if (v60)
  {
    int64_t v58 = v61;
    goto LABEL_46;
  }
  while (1)
  {
    int64_t v58 = v61 + 1;
    if (__OFADD__(v61, 1)) {
      break;
    }
    if (v58 >= v79) {
      goto LABEL_53;
    }
    unint64_t v60 = *(void *)(v76 + 8 * v58);
    ++v61;
    if (v60) {
      goto LABEL_46;
    }
  }
  __break(1u);
}

void sub_100198EF8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  id v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v42 - v17;
  if (a2 || !a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)&v42 - v17, a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v12);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      uint64_t v42 = v13;
      *(_DWORD *)uint64_t v30 = 136315138;
      *(void *)&v46[0] = a2;
      swift_errorRetain();
      sub_1000992E8(&qword_1002AA080);
      uint64_t v43 = v12;
      uint64_t v31 = String.init<A>(describing:)();
      *(void *)&v46[0] = sub_1000993AC(v31, v32, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Unable to read characteristic: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v43);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    }
  }
  else
  {
    uint64_t v43 = a4;
    id v19 = [a1 metadata];
    if (v19)
    {
      uint64_t v20 = v19;
      id v21 = [v19 format];

      if (v21)
      {
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v24 = v23;

        if (v22 == 1635017060 && v24 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = a5;
        }
        else
        {
          char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v27 = a5;
          if ((v26 & 1) == 0) {
            return;
          }
        }
        if ([a1 value])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v46, 0, sizeof(v46));
        }
        sub_1000A5BE8((uint64_t)v46, (uint64_t)v47);
        if (v47[3])
        {
          if (swift_dynamicCast())
          {
            uint64_t v33 = v44;
            id v34 = (void *)(v43 + 16);
            unint64_t v35 = v45;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            sub_1000A618C(v33, v35);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v46[0] = *v34;
            void *v34 = 0x8000000000000000;
            sub_1001F5A50(v33, v35, v27, a6, isUniquelyReferenced_nonNull_native);
            void *v34 = *(void *)&v46[0];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_endAccess();
            (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v12);
            sub_1000A618C(v33, v35);
            sub_1000A618C(v33, v35);
            uint64_t v37 = Logger.logObject.getter();
            os_log_type_t v38 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v37, v38))
            {
              uint64_t v43 = v12;
              id v39 = (uint8_t *)swift_slowAlloc();
              uint64_t v42 = swift_slowAlloc();
              v47[0] = v42;
              *(_DWORD *)id v39 = 136315138;
              uint64_t v40 = sub_100139704(v33, v35);
              *(void *)&v46[0] = sub_1000993AC(v40, v41, v47);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_1000A6240(v33, v35);
              sub_1000A6240(v33, v35);
              _os_log_impl((void *)&_mh_execute_header, v37, v38, "Battery Data: %s", v39, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              sub_1000A6240(v33, v35);
              (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v43);
            }
            else
            {
              sub_1000A6240(v33, v35);
              sub_1000A6240(v33, v35);
              sub_1000A6240(v33, v35);

              (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
            }
          }
        }
        else
        {
          sub_1000A61E4((uint64_t)v47, &qword_1002AA5F0);
        }
      }
    }
  }
}

void sub_100199524(int a1)
{
  uint64_t v2 = v1;
  LODWORD(v75) = a1;
  uint64_t v76 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v76 - 8);
  uint64_t v3 = __chkstk_darwin(v76);
  uint64_t v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v62 - v6;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v62 - v13;
  uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
  id v16 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
  swift_retain();
  os_unfair_lock_lock(v16 + 4);
  swift_release();
  if (*(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn))
  {
    uint64_t v17 = *(os_unfair_lock_s **)(v2 + v15);
    swift_retain();
    os_unfair_lock_unlock(v17 + 4);
    goto LABEL_4;
  }
  uint64_t v69 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn;
  int64_t v70 = v7;
  os_log_type_t v71 = v5;
  uint64_t v72 = (char *)v15;
  id v68 = v12;
  uint64_t v19 = v9 + 16;
  uint64_t v18 = *(void (**)(void))(v9 + 16);
  uint64_t v65 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  unint64_t v64 = v18;
  v18(v14);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = v9;
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "starting keep-alive transaction", v22, 2u);
    uint64_t v9 = v73;
    swift_slowDealloc();
  }

  uint64_t v23 = *(void (**)(void, void))(v9 + 8);
  uint64_t v67 = v8;
  uint64_t v73 = v9 + 8;
  uint64_t v66 = v23;
  v23(v14, v8);
  if (v75) {
    double v24 = 10.0;
  }
  else {
    double v24 = 0.0;
  }
  type metadata accessor for Transaction();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 48) = 0;
  *(void *)(v25 + 24) = 0;
  *(void *)(v25 + 32) = 0;
  *(void *)(v25 + 16) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v25 + 80) = 0;
  *(unsigned char *)(v25 + 88) = 1;
  swift_retain();
  Logger.init(subsystem:category:)();
  *(void *)(v25 + 64) = 0xD000000000000022;
  *(void *)(v25 + 72) = 0x8000000100239C20;
  *(double *)(v25 + 56) = v24;
  *(void *)(v25 + 48) = &off_1002791E0;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v26 = v69;
  *(void *)(v2 + v69) = v25;
  swift_release();
  uint64_t v27 = *(void *)(v2 + v26);
  uint64_t v28 = v72;
  os_log_type_t v29 = v71;
  uint64_t v30 = v70;
  if (v27)
  {
    swift_retain();
    sub_100105BB4();
    swift_release();
  }
  uint64_t v31 = *(os_unfair_lock_s **)&v28[v2];
  swift_retain();
  os_unfair_lock_unlock(v31 + 4);
  swift_release();
  uint64_t v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v33 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v33 + 4);
  swift_release();
  uint64_t v34 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager;
  unint64_t v35 = *(void **)(*(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
  id v36 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v37 = *(os_unfair_lock_s **)(v2 + v32);
  id v38 = v36;
  id v39 = v35;
  swift_retain();
  os_unfair_lock_unlock(v37 + 4);
  swift_release();
  if (v36)
  {
    uint64_t v62 = v19;
    id v75 = v39;
    uint64_t v40 = *(void **)(v2 + v34);
    unint64_t v41 = (char *)v38;
    uint64_t v42 = v40;
    uint64_t v43 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    uint64_t v44 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    id v45 = *(id *)&v42[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    uint64_t v46 = &v42[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v47 = *(void *)v46;
    uint64_t v48 = *(void *)(*(void *)v46 + 16);
    if (v48)
    {
      uint64_t v63 = v44;
      uint64_t v69 = (uint64_t)v42;
      uint64_t v72 = v41;
      uint64_t v49 = v47 + 32;
      uint64_t v50 = (void (**)(char *, uint64_t))(v74 + 8);
      swift_bridgeObjectRetain();
      uint64_t v51 = v76;
      while (1)
      {
        sub_1000A5D40(v49, (uint64_t)v77);
        id v52 = *(id *)(*sub_1000A5DA4(v77, v77[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v52) = static UUID.== infix(_:_:)();
        uint64_t v53 = *v50;
        (*v50)(v29, v51);
        v53(v30, v51);
        if (v52) {
          break;
        }
        sub_100099BCC((uint64_t)v77);
        v49 += 40;
        if (!--v48)
        {
          swift_bridgeObjectRelease();
          unint64_t v41 = v72;
          uint64_t v42 = (char *)v69;
          uint64_t v44 = v63;
          goto LABEL_18;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v55 = (void *)v69;
      id v56 = *(id *)(v69 + v63);
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v77, (uint64_t)&v78);
      sub_100099BCC((uint64_t)v77);

      unint64_t v41 = v72;
    }
    else
    {
LABEL_18:
      id v54 = *(id *)&v42[v44];
      OS_dispatch_semaphore.signal()();

      uint64_t v80 = 0;
      long long v78 = 0u;
      long long v79 = 0u;
    }
    id v39 = v75;
    if (!*((void *)&v79 + 1))
    {

      sub_1000A61E4((uint64_t)&v78, (uint64_t *)&unk_1002AAA30);
      return;
    }
    sub_1000992E8(&qword_1002A82E0);
    type metadata accessor for DaemonAccessory();
    if ((swift_dynamicCast() & 1) == 0)
    {

      return;
    }
    unint64_t v57 = v77[0];
    int64_t v58 = *(char **)(v77[0] + 16);
    if (!v58)
    {

      goto LABEL_4;
    }
    int64_t v59 = *(void **)&v58[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
    if (v59)
    {
      unint64_t v60 = v58;
      if ([v59 state] == (id)2)
      {
        sub_10014A068(v57, 0, 0, 0, 0.0);

LABEL_4:
        swift_release();
        return;
      }
    }
    else
    {
      int64_t v61 = v58;
    }

    swift_release();
  }
}

void sub_100199F30(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v6);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v14[1] = v3;
    uint64_t v12 = swift_slowAlloc();
    v14[0] = a1;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    void v14[2] = sub_1000993AC(v14[0], a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "watchdog fired, tearing down os_transaction for %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_10019A168();
}

void sub_10019A168()
{
  uint64_t v1 = v0;
  uint64_t v95 = (void *)type metadata accessor for UUID();
  uint64_t v92 = *(v95 - 1);
  uint64_t v2 = __chkstk_darwin(v95);
  uint64_t v4 = (char *)&v81 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v81 - v5;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_type_t v89 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  id v90 = (char *)&v81 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v91 = (char *)&v81 - v14;
  __chkstk_darwin(v13);
  id v16 = (char *)&v81 - v15;
  uint64_t v17 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
  uint64_t v18 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
  swift_retain();
  os_unfair_lock_lock(v18 + 4);
  swift_release();
  uint64_t v19 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn;
  if (*(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn))
  {
    unint64_t v93 = v17;
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v85 = v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
    uint64_t v86 = v8 + 16;
    os_log_type_t v84 = v20;
    ((void (*)(char *))v20)(v16);
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v94 = v7;
    if (v23)
    {
      double v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "no more elegible clients, tearing down os_transaction", v24, 2u);
      uint64_t v7 = v94;
      swift_slowDealloc();
    }

    uint64_t v25 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v88 = v8 + 8;
    uint64_t v87 = v25;
    v25(v16, v7);
    uint64_t v26 = v95;
    if (*(void *)(v1 + v19))
    {
      swift_retain();
      sub_1001060E8();
      swift_release();
    }
    uint64_t v28 = v93;
    *(void *)(v1 + v19) = 0;
    swift_release();
    os_log_type_t v29 = *(os_unfair_lock_s **)((char *)&v28->isa + v1);
    swift_retain();
    os_unfair_lock_unlock(v29 + 4);
    swift_release();
    uint64_t v30 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v31 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v31 + 4);
    swift_release();
    uint64_t v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager;
    uint64_t v33 = *(void **)(*(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                   + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager);
    uint64_t v34 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    unint64_t v35 = *(os_unfair_lock_s **)(v1 + v30);
    id v36 = v34;
    uint64_t v37 = v33;
    swift_retain();
    os_unfair_lock_unlock(v35 + 4);
    swift_release();
    if (!v34)
    {

      return;
    }
    unint64_t v93 = v37;
    id v38 = *(void **)(v1 + v32);
    id v39 = v36;
    uint64_t v40 = v38;
    unint64_t v41 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    uint64_t v42 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    id v43 = *(id *)&v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    uint64_t v44 = &v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v45 = *(void *)v44;
    uint64_t v46 = *(void *)(*(void *)v44 + 16);
    if (v46)
    {
      uint64_t v81 = v42;
      uint64_t v82 = v40;
      id v83 = v39;
      uint64_t v47 = v45 + 32;
      uint64_t v48 = (void (**)(char *, void *))(v92 + 8);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000A5D40(v47, (uint64_t)v96);
        id v49 = *(id *)(*sub_1000A5DA4(v96, v96[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v49) = static UUID.== infix(_:_:)();
        uint64_t v50 = *v48;
        (*v48)(v4, v26);
        v50(v6, v26);
        if (v49) {
          break;
        }
        sub_100099BCC((uint64_t)v96);
        v47 += 40;
        if (!--v46)
        {
          swift_bridgeObjectRelease();
          id v39 = v83;
          uint64_t v40 = v82;
          uint64_t v42 = v81;
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      id v52 = v82;
      id v53 = *(id *)&v82[v81];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v96, (uint64_t)&v97);
      sub_100099BCC((uint64_t)v96);

      id v39 = v83;
    }
    else
    {
LABEL_15:
      id v51 = *(id *)&v40[v42];
      OS_dispatch_semaphore.signal()();

      uint64_t v99 = 0;
      long long v97 = 0u;
      long long v98 = 0u;
    }
    uint64_t v54 = v94;
    if (!*((void *)&v98 + 1))
    {

      sub_1000A61E4((uint64_t)&v97, (uint64_t *)&unk_1002AAA30);
      return;
    }
    sub_1000992E8(&qword_1002A82E0);
    type metadata accessor for DaemonAccessory();
    if ((swift_dynamicCast() & 1) == 0)
    {

      return;
    }
    unint64_t v55 = v96[0];
    id v56 = *(char **)(v96[0] + 16);
    if (!v56)
    {
      swift_release();

      return;
    }
    unint64_t v57 = *(void **)&v56[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
    if (v57)
    {
      int64_t v58 = v56;
      if ([v57 state] == (id)2)
      {
        sub_10014A068(v55, 0, 0, 0, 0.0);
        int64_t v59 = 0;
        uint64_t v95 = v58;
        v84(v91, v85, v54);
        int64_t v61 = v93;
        uint64_t v62 = v39;
        uint64_t v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v66 = swift_slowAlloc();
          uint64_t v67 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v66 = 138412546;
          unint64_t v93 = 0;
          uint64_t v68 = dispatch thunk of DockCoreAccessory.info.getter();
          *(void *)&long long v97 = v68;
          int64_t v59 = v93;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v67 = v68;

          *(_WORD *)(v66 + 12) = 2048;
          *(void *)&long long v97 = 0x404E000000000000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Setting accessory reachable %@ after %f secs", (uint8_t *)v66, 0x16u);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          uint64_t v54 = v94;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v63 = v62;
        }

        v87(v91, v54);
        type metadata accessor for DockCoreManager();
        uint64_t v69 = (void (*)(char *, uint64_t))static DockCoreManager.localFirmwarePath.getter();
        sub_10014A068(v55, 1, v69, v70, 60.0);
        if (v59)
        {
          swift_bridgeObjectRelease();
          os_log_type_t v71 = v89;
          v84(v89, v85, v54);
          uint64_t v72 = v62;
          swift_errorRetain();
          uint64_t v73 = v72;
          swift_errorRetain();
          uint64_t v74 = Logger.logObject.getter();
          os_log_type_t v75 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v74, v75))
          {
            uint64_t v76 = swift_slowAlloc();
            uint64_t v77 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v76 = 138412546;
            unint64_t v93 = v74;
            uint64_t v78 = dispatch thunk of DockCoreAccessory.info.getter();
            *(void *)&long long v97 = v78;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            void *v77 = v78;

            *(_WORD *)(v76 + 12) = 2112;
            swift_errorRetain();
            uint64_t v79 = _swift_stdlib_bridgeErrorToNSError();
            *(void *)&long long v97 = v79;
            os_log_type_t v71 = v89;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v77[1] = v79;
            swift_errorRelease();
            swift_errorRelease();
            uint64_t v80 = v93;
            _os_log_impl((void *)&_mh_execute_header, v93, v75, "Failed setting %@ reachable: %@", (uint8_t *)v76, 0x16u);
            sub_1000992E8(&qword_1002A7C40);
            swift_arrayDestroy();
            uint64_t v54 = v94;
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
            swift_release();
          }
          else
          {

            swift_release();
            swift_errorRelease();

            swift_errorRelease();
            swift_errorRelease();
            int64_t v61 = v74;
          }

          v87(v71, v54);
        }
        else
        {

          swift_release();
          swift_bridgeObjectRelease();
        }
        return;
      }
    }
    else
    {
      unint64_t v60 = v56;
    }

    swift_release();
    return;
  }
  uint64_t v27 = *(os_unfair_lock_s **)((char *)&v17->isa + v1);
  swift_retain();
  os_unfair_lock_unlock(v27 + 4);

  swift_release();
}

uint64_t sub_10019AE8C(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&token - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&token - v8;
  [a1 auditToken];
  uint64_t v10 = SecTaskCreateWithAuditToken(0, &token);
  if (!v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v3);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to create audit token task for bundle identifier", v17, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    return 0;
  }
  uint64_t v11 = v10;
  *(void *)token.val = 0;
  CFStringRef v12 = SecTaskCopySigningIdentifier(v10, (CFErrorRef *)&token);
  if (!v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v3);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed fetching signing identifier for new connection", v20, 2u);
      swift_slowDealloc();
      os_log_type_t v21 = v11;
    }
    else
    {
      os_log_type_t v21 = v18;
      uint64_t v18 = v11;
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    return 0;
  }
  uint64_t v13 = (__CFString *)v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v14;
}

unint64_t sub_10019B164(int a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount);
    swift_beginAccess();
    if (!*(void *)(*v5 + 16)) {
      goto LABEL_14;
    }
    sub_10016DBD8(a1);
    if ((v6 & 1) == 0) {
      goto LABEL_14;
    }
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v5;
    uint64_t v31 = *v5;
    uint64_t *v5 = 0x8000000000000000;
    unint64_t result = sub_10016DBD8(a1);
    uint64_t v11 = *(void *)(v8 + 16);
    BOOL v12 = (v10 & 1) == 0;
    BOOL v13 = __OFADD__(v11, v12);
    uint64_t v14 = v11 + v12;
    if (!v13)
    {
      char v3 = v10;
      if (*(void *)(v8 + 24) >= v14)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          goto LABEL_28;
        }
      }
      else
      {
        sub_1001F0D78(v14, isUniquelyReferenced_nonNull_native);
        unint64_t result = sub_10016DBD8(a1);
        if ((v3 & 1) != (v15 & 1))
        {
LABEL_13:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
LABEL_14:
          swift_beginAccess();
          char v23 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v32 = *v5;
          uint64_t *v5 = 0x8000000000000000;
          sub_1001F5474(1, a1, v23);
          uint64_t *v5 = v32;
          swift_bridgeObjectRelease();
          return swift_endAccess();
        }
      }
      if ((v3 & 1) == 0) {
        goto LABEL_29;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount);
  swift_beginAccess();
  if (!*(void *)(*v5 + 16)) {
    goto LABEL_14;
  }
  sub_10016DBD8(a1);
  if ((v16 & 1) == 0) {
    goto LABEL_14;
  }
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v17 = *v5;
  uint64_t v31 = *v5;
  uint64_t *v5 = 0x8000000000000000;
  unint64_t result = sub_10016DBD8(a1);
  uint64_t v19 = *(void *)(v17 + 16);
  BOOL v20 = (v18 & 1) == 0;
  BOOL v13 = __OFADD__(v19, v20);
  uint64_t v21 = v19 + v20;
  if (v13) {
    goto LABEL_26;
  }
  char v3 = v18;
  if (*(void *)(v17 + 24) >= v21) {
    goto LABEL_20;
  }
  sub_1001F0D78(v21, isUniquelyReferenced_nonNull_native);
  unint64_t result = sub_10016DBD8(a1);
  if ((v3 & 1) != (v22 & 1)) {
    goto LABEL_13;
  }
LABEL_21:
  if (v3)
  {
    while (1)
    {
      uint64_t v24 = v31;
      uint64_t v25 = *(void *)(v31 + 56);
      uint64_t v28 = *(void *)(v25 + 8 * result);
      BOOL v13 = __OFADD__(v28, 1);
      uint64_t v27 = v28 + 1;
      if (!v13) {
        break;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      unint64_t v29 = result;
      sub_1001F82B4();
      unint64_t result = v29;
      if (v3)
      {
LABEL_17:
        uint64_t v24 = v31;
        uint64_t v25 = *(void *)(v31 + 56);
        uint64_t v26 = *(void *)(v25 + 8 * result);
        BOOL v13 = __OFADD__(v26, 1);
        uint64_t v27 = v26 + 1;
        if (!v13) {
          break;
        }
        __break(1u);
LABEL_20:
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_21;
        }
      }
      else
      {
LABEL_29:
        __break(1u);
      }
      unint64_t v30 = result;
      sub_1001F82B4();
      unint64_t result = v30;
      if ((v3 & 1) == 0) {
        goto LABEL_31;
      }
    }
    *(void *)(v25 + 8 * result) = v27;
    uint64_t *v5 = v24;
    return swift_endAccess();
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_10019B410(int a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v7 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  char v8 = (_BYTE)v7 + 16;
  swift_retain();
  os_unfair_lock_lock(v7 + 4);
  swift_release();
  if ((a2 & 1) == 0)
  {
    uint64_t v9 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount);
    swift_beginAccess();
    if (!*(void *)(*v9 + 16)) {
      goto LABEL_14;
    }
    sub_10016DBD8(a1);
    if ((v10 & 1) == 0) {
      goto LABEL_14;
    }
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v9;
    uint64_t v36 = *v9;
    *uint64_t v9 = 0x8000000000000000;
    unint64_t result = sub_10016DBD8(a1);
    uint64_t v15 = *(void *)(v12 + 16);
    BOOL v16 = (v14 & 1) == 0;
    BOOL v17 = __OFADD__(v15, v16);
    uint64_t v18 = v15 + v16;
    if (!v17)
    {
      char v8 = v14;
      if (*(void *)(v12 + 24) >= v18)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          goto LABEL_28;
        }
      }
      else
      {
        sub_1001F0D78(v18, isUniquelyReferenced_nonNull_native);
        unint64_t result = sub_10016DBD8(a1);
        if ((v8 & 1) != (v19 & 1))
        {
LABEL_13:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
LABEL_14:
          swift_beginAccess();
          char v27 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v37 = *v9;
          *uint64_t v9 = 0x8000000000000000;
          sub_1001F5474(0, a1, v27);
          *uint64_t v9 = v37;
          swift_bridgeObjectRelease();
LABEL_24:
          swift_endAccess();
          uint64_t v33 = *(os_unfair_lock_s **)(v3 + v6);
          swift_retain();
          os_unfair_lock_unlock(v33 + 4);
          return swift_release();
        }
      }
      if ((v8 & 1) == 0) {
        goto LABEL_29;
      }
      goto LABEL_17;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v9 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount);
  swift_beginAccess();
  if (!*(void *)(*v9 + 16)) {
    goto LABEL_14;
  }
  sub_10016DBD8(a1);
  if ((v20 & 1) == 0) {
    goto LABEL_14;
  }
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v9;
  uint64_t v36 = *v9;
  *uint64_t v9 = 0x8000000000000000;
  unint64_t result = sub_10016DBD8(a1);
  uint64_t v23 = *(void *)(v21 + 16);
  BOOL v24 = (v22 & 1) == 0;
  BOOL v17 = __OFADD__(v23, v24);
  uint64_t v25 = v23 + v24;
  if (v17) {
    goto LABEL_26;
  }
  char v8 = v22;
  if (*(void *)(v21 + 24) >= v25) {
    goto LABEL_20;
  }
  sub_1001F0D78(v25, isUniquelyReferenced_nonNull_native);
  unint64_t result = sub_10016DBD8(a1);
  if ((v8 & 1) != (v26 & 1)) {
    goto LABEL_13;
  }
LABEL_21:
  if (v8)
  {
    while (1)
    {
      uint64_t v28 = v36;
      uint64_t v29 = *(void *)(v36 + 56);
      uint64_t v32 = *(void *)(v29 + 8 * result);
      BOOL v17 = __OFSUB__(v32, 1);
      uint64_t v31 = v32 - 1;
      if (!v17) {
        break;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      unint64_t v34 = result;
      sub_1001F82B4();
      unint64_t result = v34;
      if (v8)
      {
LABEL_17:
        uint64_t v28 = v36;
        uint64_t v29 = *(void *)(v36 + 56);
        uint64_t v30 = *(void *)(v29 + 8 * result);
        BOOL v17 = __OFSUB__(v30, 1);
        uint64_t v31 = v30 - 1;
        if (!v17) {
          break;
        }
        __break(1u);
LABEL_20:
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_21;
        }
      }
      else
      {
LABEL_29:
        __break(1u);
      }
      unint64_t v35 = result;
      sub_1001F82B4();
      unint64_t result = v35;
      if ((v8 & 1) == 0) {
        goto LABEL_31;
      }
    }
    *(void *)(v29 + 8 * result) = v31;
    *uint64_t v9 = v28;
    goto LABEL_24;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10019B714(unsigned int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  unsigned int v91 = a1;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v87 = *(void *)(v7 - 8);
  uint64_t v88 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000992E8(&qword_1002AA6A0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  BOOL v13 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  id v90 = (char *)&v76 - v15;
  __chkstk_darwin(v14);
  unint64_t v17 = (unint64_t)&v76 - v16;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  char v22 = (char *)&v76 - v21;
  __chkstk_darwin(v20);
  char v26 = (char *)&v76 - v25;
  BOOL v98 = 0;
  uint64_t v27 = *(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitConfiguration);
  if (!*(void *)(v27 + 16)) {
    return 0;
  }
  uint64_t v89 = v24;
  uint64_t v85 = v23;
  swift_bridgeObjectRetain();
  unint64_t v28 = sub_10016DB60(a2, a3);
  if ((v29 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v86 = v18;
  id v83 = v13;
  uint64_t v30 = a2;
  double v31 = *(double *)(*(void *)(v27 + 56) + 8 * v28);
  swift_bridgeObjectRelease();
  uint64_t v82 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v32 = (os_unfair_lock_s *)(*(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock) + 16);
  swift_retain();
  os_unfair_lock_lock(v32);
  swift_release();
  uint64_t v84 = v4;
  uint64_t v33 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitXPCTrackingClients);
  swift_beginAccess();
  uint64_t v34 = *v33;
  uint64_t v35 = v91;
  if (!*(void *)(*v33 + 16) || (sub_10016DBD8(v91), (v36 & 1) == 0))
  {
    unint64_t v47 = sub_1001EAC54((uint64_t)_swiftEmptyArrayStorage);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v95 = *v33;
    *uint64_t v33 = 0x8000000000000000;
    sub_1001F51C0(v47, v35, isUniquelyReferenced_nonNull_native);
    *uint64_t v33 = v95;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v32 = (os_unfair_lock_s *)v30;
    uint64_t v30 = (uint64_t)v83;
    goto LABEL_17;
  }
  unint64_t v37 = sub_10016DBD8(v35);
  if ((v38 & 1) == 0) {
    goto LABEL_39;
  }
  uint64_t v39 = *(void *)(*(void *)(v34 + 56) + 8 * v37);
  uint64_t v32 = (os_unfair_lock_s *)v30;
  uint64_t v40 = v86;
  if (!*(void *)(v39 + 16))
  {
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v89 + 56))(v17, 1, 1, v86);
    uint64_t v30 = (uint64_t)v83;
LABEL_15:
    sub_1000A61E4(v17, &qword_1002AA6A0);
LABEL_16:
    uint64_t v35 = v91;
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v81 = (os_unfair_lock_s *)v30;
  unint64_t v41 = sub_10016DB60(v30, a3);
  uint64_t v42 = (uint64_t)v83;
  if (v43)
  {
    uint64_t v44 = v89;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v89 + 16))(v17, *(void *)(v39 + 56) + *(void *)(v89 + 72) * v41, v40);
    uint64_t v45 = 0;
  }
  else
  {
    uint64_t v45 = 1;
    uint64_t v44 = v89;
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v17, v45, 1, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v49 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v44 + 48))(v17, 1, v40);
  uint64_t v30 = v42;
  uint64_t v32 = v81;
  if (v49 == 1) {
    goto LABEL_15;
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v89 + 32))(v26, v17, v40);
  Date.timeIntervalSinceNow.getter();
  double v67 = fabs(v66);
  BOOL v98 = v67 < 1.0 / v31;
  if (v67 >= 1.0 / v31)
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v26, v40);
    goto LABEL_16;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v9, v84 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v88);
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v22, v26, v40);
  swift_bridgeObjectRetain_n();
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.default.getter();
  int v70 = v69;
  if (!os_log_type_enabled(v68, v69))
  {

    os_log_type_t v75 = *(void (**)(char *, uint64_t))(v89 + 8);
    v75(v22, v40);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v9, v88);
    v75(v26, v40);
    goto LABEL_16;
  }
  uint64_t v71 = swift_slowAlloc();
  os_log_t v79 = v68;
  uint64_t v72 = v71;
  uint64_t v80 = swift_slowAlloc();
  v97[0] = v80;
  *(_DWORD *)uint64_t v72 = 136315906;
  int v78 = v70;
  swift_bridgeObjectRetain();
  uint64_t v95 = sub_1000993AC((uint64_t)v32, a3, v97);
  uint64_t v77 = &v96;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v72 + 12) = 1024;
  LODWORD(v95) = v91;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v72 + 18) = 1024;
  LODWORD(v95) = 1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v72 + 24) = 2048;
  Date.timeIntervalSinceNow.getter();
  uint64_t v95 = v73;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t v77 = *(uint64_t **)(v89 + 8);
  ((void (*)(char *, uint64_t))v77)(v22, v86);
  os_log_t v74 = v79;
  _os_log_impl((void *)&_mh_execute_header, v79, (os_log_type_t)v78, "rateLimit: %s %d %{BOOL}d %f", (uint8_t *)v72, 0x22u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v35 = v91;
  (*(void (**)(char *, uint64_t))(v87 + 8))(v9, v88);
  ((void (*)(char *, uint64_t))v77)(v26, v86);
LABEL_17:
  swift_beginAccess();
  char v22 = v90;
  if (v98)
  {
LABEL_31:
    uint64_t v65 = *(os_unfair_lock_s **)(v84 + v82);
    swift_retain();
    os_unfair_lock_unlock(v65 + 4);
    swift_release();
    return v98;
  }
  swift_bridgeObjectRetain();
  Date.init()();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v22, 0, 1, v86);
  swift_beginAccess();
  char v50 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v94 = *v33;
  uint64_t v51 = v94;
  *uint64_t v33 = 0x8000000000000000;
  unint64_t v17 = sub_10016DBD8(v35);
  uint64_t v53 = *(void *)(v51 + 16);
  BOOL v54 = (v52 & 1) == 0;
  uint64_t v55 = v53 + v54;
  if (__OFADD__(v53, v54))
  {
    __break(1u);
    goto LABEL_38;
  }
  LOBYTE(v9) = v52;
  if (*(void *)(v51 + 24) >= v55)
  {
    uint64_t v35 = v86;
    uint64_t v58 = v89;
    if ((v50 & 1) == 0) {
      goto LABEL_40;
    }
    goto LABEL_24;
  }
  sub_1001F0A54(v55, v50);
  unint64_t v56 = sub_10016DBD8(v35);
  if ((v9 & 1) == (v57 & 1))
  {
    unint64_t v17 = v56;
    uint64_t v35 = v86;
    while (1)
    {
      uint64_t v58 = v89;
LABEL_24:
      if (v9) {
        break;
      }
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      sub_1001F80F0();
    }
    uint64_t v93 = *(void *)(*(void *)(v94 + 56) + 8 * v17);
    uint64_t v59 = v58;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v22, 1, v35) == 1)
    {
      sub_1000A61E4((uint64_t)v22, &qword_1002AA6A0);
      sub_1001ED67C((uint64_t)v32, a3, v30);
      swift_bridgeObjectRelease();
      sub_1000A61E4(v30, &qword_1002AA6A0);
      uint64_t v60 = v93;
      if (v93)
      {
LABEL_27:
        uint64_t v61 = v94;
        *(void *)(*(void *)(v94 + 56) + 8 * v17) = v60;
LABEL_30:
        *uint64_t v33 = v61;
        swift_endAccess();
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v62 = v85;
      (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v85, v22, v35);
      uint64_t v63 = v93;
      char v64 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v92 = v63;
      sub_1001F5040(v62, (uint64_t)v32, a3, v64);
      uint64_t v60 = v92;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v60) {
        goto LABEL_27;
      }
    }
    uint64_t v61 = v94;
    sub_1001F3E24(v17, v94);
    goto LABEL_30;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10019C13C(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rateLimitXPCTrackingClients);
  swift_beginAccess();
  uint64_t v11 = *v10;
  if (*(void *)(*v10 + 16))
  {
    unint64_t v12 = sub_10016DBD8(a1);
    if (v13)
    {
      if (*(void *)(*(void *)(*(void *)(v11 + 56) + 8 * v12) + 16))
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v16 = 67109120;
          int v23 = a1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Cleaning rate-limiting tracking for %d", v16, 8u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        unint64_t v17 = sub_1001EAC54((uint64_t)_swiftEmptyArrayStorage);
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v22 = *v10;
        *uint64_t v10 = 0x8000000000000000;
        sub_1001F51C0(v17, a1, isUniquelyReferenced_nonNull_native);
        *uint64_t v10 = v22;
        swift_bridgeObjectRelease();
        swift_endAccess();
      }
    }
  }
  uint64_t v19 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain();
  os_unfair_lock_unlock(v19 + 4);
  return swift_release();
}

void sub_10019C3D0()
{
  if (!qword_1002AB5D0)
  {
    unint64_t v0 = type metadata accessor for DKThreadSafe();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002AB5D0);
    }
  }
}

ValueMetadata *type metadata accessor for TrackingSummaryClient()
{
  return &type metadata for TrackingSummaryClient;
}

void *initializeBufferWithCopyOfBuffer for BatteryClient(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for BatteryClient(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t assignWithCopy for BatteryClient(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for BatteryClient(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t _s14dockaccessoryd13BatteryClientVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10019C590(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BatteryClient()
{
  return &type metadata for BatteryClient;
}

ValueMetadata *type metadata accessor for SensorRule()
{
  return &type metadata for SensorRule;
}

uint64_t _s14dockaccessoryd12FeedbackRuleVwxx_0()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s14dockaccessoryd12FeedbackRuleVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s14dockaccessoryd12FeedbackRuleVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t _s14dockaccessoryd12FeedbackRuleVwta_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t _s14dockaccessoryd12FeedbackRuleVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10019C788(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeedbackRule()
{
  return &type metadata for FeedbackRule;
}

ValueMetadata *type metadata accessor for MagneticHeadingStamped()
{
  return &type metadata for MagneticHeadingStamped;
}

void *sub_10019C7EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v46 = v2;
  uint64_t v47 = v3;
  __chkstk_darwin(v2);
  id v5 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v48 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v42 - v10;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  char v50 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)v42 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v42 - v16, a1, v12);
  id v18 = objc_allocWithZone((Class)NSData);
  id v19 = sub_1000E73EC((uint64_t)v17, 2);
  unint64_t v20 = v49;
  char v50 = v5;
  uint64_t v21 = v11;
  uint64_t v23 = v51;
  uint64_t v22 = v52;
  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  sub_100099C7C(0, &qword_1002A8F88);
  type metadata accessor for DockCoreAccessory();
  uint64_t v27 = (void *)static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  if (v27)
  {
    uint64_t v28 = v23;
    uint64_t v29 = v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v21, v20 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v22);
    id v30 = v27;
    double v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    int v33 = v32;
    if (os_log_type_enabled(v31, v32))
    {
      LODWORD(v48) = v33;
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      v54[0] = v45;
      unint64_t v49 = v26;
      char v43 = v34;
      *(_DWORD *)uint64_t v34 = 136315138;
      v42[1] = v34 + 4;
      uint64_t v35 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
      char v36 = v50;
      DockCoreInfo.identifier.getter();

      sub_1001A62BC(&qword_1002AA860, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v37 = v46;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v44 = v21;
      unint64_t v40 = v39;
      (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v37);
      uint64_t v53 = sub_1000993AC(v38, v40, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v48, "Loaded paired accessory for %s.", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_1000A6240(v24, v49);

      (*(void (**)(char *, uint64_t))(v28 + 8))(v44, v52);
    }
    else
    {

      sub_1000A6240(v24, v26);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v29);
    }
  }
  else
  {
    sub_1000A6240(v24, v26);
  }
  return v27;
}

uint64_t sub_10019D11C(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_1001A62BC(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  int v33 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    uint64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    unint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      unint64_t v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_1001A62BC((unint64_t *)&unk_1002AA100, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_10019DCCC((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_10019D440(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10019DF6C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10019D5F0()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  unint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_1000992E8(&qword_1002AC1C0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    uint64_t v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_1001A62BC(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_10019D9EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000992E8(&qword_1002AC150);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *int64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_10019DCCC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_10019D5F0();
  }
  else
  {
    if (v11 > v10)
    {
      sub_10019E108();
      goto LABEL_12;
    }
    sub_10019E560();
  }
  uint64_t v12 = *v3;
  sub_1001A62BC(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    int64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_1001A62BC((unint64_t *)&unk_1002AA100, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_10019DF6C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10019D9EC();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_10019E3AC();
      goto LABEL_22;
    }
    sub_10019E910();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  char v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *char v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_10019E108()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000992E8(&qword_1002AC1C0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_10019E3AC()
{
  uint64_t v1 = v0;
  sub_1000992E8(&qword_1002AC150);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10019E560()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_1000992E8(&qword_1002AC1C0);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_1001A62BC(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10019E910()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1000992E8(&qword_1002AC150);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10019EBC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1001A62BC(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    unint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    int64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    unint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      sub_1001A62BC((unint64_t *)&unk_1002AA100, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10019E108();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    sub_10019F030(v12);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t sub_10019EEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      int64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10019E3AC();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_10019F34C(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_10019F030(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::Int v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v31 = v1;
    uint64_t v11 = ~v9;
    uint64_t v35 = result;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v13 = v4 + 16;
      uint64_t v32 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      int64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v35;
      do
      {
        uint64_t v18 = v8;
        uint64_t v19 = v15;
        int64_t v20 = v15 * v10;
        v32(v6, *(void *)(v17 + 48) + v15 * v10, v3);
        sub_1001A62BC(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v6, v3);
        unint64_t v22 = v21 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v22 < v33 || a1 < (uint64_t)v22)
          {
LABEL_4:
            uint64_t v8 = v18;
            uint64_t v15 = v19;
            uint64_t v17 = v35;
            goto LABEL_5;
          }
        }
        else if (v22 < v33 && a1 < (uint64_t)v22)
        {
          goto LABEL_4;
        }
        uint64_t v17 = v35;
        int64_t v25 = v19 * a1;
        uint64_t v8 = v18;
        if (v19 * a1 < v20
          || (uint64_t v15 = v19, *(void *)(v35 + 48) + v19 * a1 >= (unint64_t)(*(void *)(v35 + 48) + v20 + v19)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v10;
        if (v25 != v20)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v17 = v35;
          uint64_t v15 = v19;
          a1 = v10;
        }
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v31;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

unint64_t sub_10019F34C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t *sub_10019F514(uint64_t isStackAllocationSafe)
{
  int64_t v2 = (unint64_t *)isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    unint64_t v6 = sub_10019F66C((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, (uint64_t)v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    int64_t v2 = sub_10019F66C((unint64_t *)v7, v4, (uint64_t)v2);
    swift_slowDealloc();
  }
  return v2;
}

unint64_t *sub_10019F66C(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  int64_t v5 = 0;
  uint64_t v6 = a3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_21;
    }
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v13 >= v10) {
      return (unint64_t *)sub_1001D120C(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        return (unint64_t *)sub_1001D120C(result, a2, v4, a3);
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          return (unint64_t *)sub_1001D120C(result, a2, v4, a3);
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_21:
    uint64_t v16 = *(void *)(*(void *)(a3 + 56) + 8 * v12);
    if (*(void *)(v16 + 56) && *(void *)(v16 + 48) && (*(unsigned char *)(v16 + 40) & 1) == 0)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1001D120C(result, a2, v4, a3);
      }
    }
    else
    {
      *(unsigned char *)(v16 + 40) = 1;
    }
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v10) {
    return (unint64_t *)sub_1001D120C(result, a2, v4, a3);
  }
  unint64_t v14 = *(void *)(v6 + 8 * v15);
  if (v14)
  {
    int64_t v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v5 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v5 >= v10) {
      return (unint64_t *)sub_1001D120C(result, a2, v4, a3);
    }
    unint64_t v14 = *(void *)(v6 + 8 * v5);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void (*sub_10019F7D0(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = sub_10019FA88(v6);
  v6[10] = sub_10019F8F0(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10019F87C;
}

void sub_10019F87C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  int64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

void (*sub_10019F8F0(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  int64_t v5 = v4;
  int64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  unint64_t v13 = sub_10016DB60(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      void v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *int64_t v10 = v19;
        return sub_10019FA38;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1001F6F58();
      goto LABEL_7;
    }
    sub_1001EEE78(v16, a4 & 1);
    unint64_t v20 = sub_10016DB60(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      unint64_t v13 = v20;
      void v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10019FA38(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1001E4090(*a1, *((unsigned char *)*a1 + 40), (void *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_10019FA88(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return sub_10019FAB8;
}

uint64_t sub_10019FAB8(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_10019FAC4(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    sub_10019EEA0(v12, v13);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v16 = v14 + 4;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v8 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v16;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

unint64_t *sub_10019FC6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v37 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v35 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v36 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v11 = v10 | (v9 << 6);
      }
      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v36) {
          goto LABEL_47;
        }
        unint64_t v13 = *(void *)(v37 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v36) {
            goto LABEL_47;
          }
          unint64_t v13 = *(void *)(v37 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v36) {
              goto LABEL_47;
            }
            unint64_t v13 = *(void *)(v37 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v36) {
                goto LABEL_47;
              }
              unint64_t v13 = *(void *)(v37 + 8 * v14);
              if (!v13)
              {
                int64_t v15 = v9 + 5;
                if (v9 + 5 >= v36)
                {
LABEL_47:
                  sub_1000FE8D4();
                  return (unint64_t *)v2;
                }
                unint64_t v13 = *(void *)(v37 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1)) {
                      break;
                    }
                    if (v14 >= v36) {
                      goto LABEL_47;
                    }
                    unint64_t v13 = *(void *)(v37 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }
LABEL_49:
                  __break(1u);
                }
                int64_t v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        unint64_t v7 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
        int64_t v9 = v14;
      }
      int64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_6:
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void *)(v2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_6;
        }
        uint64_t v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v38 = a1;
      uint64_t v39 = v37;
      uint64_t v40 = v35;
      int64_t v41 = v9;
      unint64_t v42 = v7;
      uint64_t isStackAllocationSafe = swift_bridgeObjectRelease();
    }
    char v29 = *(unsigned char *)(v2 + 32);
    unint64_t v30 = (unint64_t)((1 << v29) + 63) >> 6;
    size_t v31 = 8 * v30;
    if ((v29 & 0x3Fu) < 0xE
      || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_1001A00DC((unint64_t *)((char *)&v35 - ((v31 + 15) & 0x3FFFFFFFFFFFFFF0)), v30, v2, v21, &v38);
      swift_release();
      sub_1000FE8D4();
    }
    else
    {
      unint64_t v33 = (void *)swift_slowAlloc();
      memcpy(v33, (const void *)(v2 + 56), v31);
      uint64_t v32 = sub_1001A00DC((unint64_t *)v33, v30, v2, v21, &v38);
      swift_release();
      sub_1000FE8D4();
      swift_slowDealloc();
    }
    return v32;
  }
  else
  {
    swift_release();
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

unint64_t *sub_1001A00DC(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v39 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v40 = a3 + 56;
  while (2)
  {
    uint64_t v38 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        int64_t v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
        int64_t v15 = a5[3];
        if (v13 >= v14) {
          goto LABEL_45;
        }
        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v13);
        if (!v17)
        {
          int64_t v18 = v9 + 2;
          int64_t v15 = v9 + 1;
          if (v9 + 2 >= v14) {
            goto LABEL_45;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            int64_t v15 = v9 + 2;
            if (v9 + 3 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              int64_t v13 = v9 + 3;
              goto LABEL_15;
            }
            int64_t v18 = v9 + 4;
            int64_t v15 = v9 + 3;
            if (v9 + 4 >= v14) {
              goto LABEL_45;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v13 = v9 + 5;
              int64_t v15 = v9 + 4;
              if (v9 + 5 >= v14) {
                goto LABEL_45;
              }
              unint64_t v17 = *(void *)(v16 + 8 * v13);
              if (!v17)
              {
                int64_t v15 = v14 - 1;
                int64_t v36 = v9 + 6;
                while (v14 != v36)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v36++);
                  if (v17)
                  {
                    int64_t v13 = v36 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain();
                return (unint64_t *)sub_1001A03D4(v39, a2, v38, a3);
              }
              goto LABEL_15;
            }
          }
          int64_t v13 = v18;
        }
LABEL_15:
        uint64_t v11 = (v17 - 1) & v17;
        unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
        int64_t v9 = v13;
LABEL_16:
        Swift::Int v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v40 + 8 * (v24 >> 6))) == 0) {
          goto LABEL_3;
        }
        uint64_t v27 = *(void *)(a3 + 48);
        BOOL v28 = (void *)(v27 + 16 * v24);
        BOOL v29 = *v28 == v21 && v28[1] == v20;
        if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v40 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          uint64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_23;
          }
        }
LABEL_3:
        uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
      }
      uint64_t result = (unint64_t *)swift_bridgeObjectRelease();
LABEL_23:
      unint64_t v30 = v39[v25];
      v39[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v38 != 1) {
      continue;
    }
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

uint64_t sub_1001A03D4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1000992E8(&qword_1002AC150);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = (unsigned char *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << v8[32];
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    BOOL v28 = (void *)(*((void *)v8 + 6) + 16 * v23);
    void *v28 = v18;
    v28[1] = v19;
    ++*((void *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_36;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

void *sub_1001A066C(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
        uint64_t v7 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
        char v8 = static NSObject.== infix(_:_:)();

        if (v8)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v3;
        if (v6 == v2) {
          return &_swiftEmptyArrayStorage;
        }
      }
      if (v3 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return &_swiftEmptyArrayStorage;
}

void *sub_1001A07F0(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v3);
      uint64_t v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      uint64_t v7 = v2;
      char v8 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
      unint64_t v9 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
      char v10 = static NSObject.== infix(_:_:)();

      if (v10)
      {
        swift_bridgeObjectRelease();
        return v5;
      }

      ++v3;
      uint64_t v2 = v7;
      if (v6 == v7) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1001A0960(uint64_t a1, uint64_t a2)
{
  return sub_1001A0E0C(a1, a2, (void (*)(void))type metadata accessor for AccessoryPairingToken);
}

uint64_t sub_1001A0978(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
    return 0;
  }
LABEL_13:
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
LABEL_3:
  sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
  for (uint64_t i = 0; ; ++i)
  {
    id v4 = (a1 & 0xC000000000000001) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
       : *(id *)(a1 + 8 * i + 32);
    uint64_t v5 = v4;
    uint64_t v6 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    char v7 = static NSObject.== infix(_:_:)();

    if (v7) {
      break;
    }
    uint64_t v8 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    if (v8 == v2) {
      return 0;
    }
  }
  return i;
}

uint64_t sub_1001A0AB0(uint64_t *a1)
{
  unint64_t v3 = swift_bridgeObjectRetain();
  unint64_t v4 = sub_1001A0978(v3);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v1) {
    return v4;
  }
  if ((v6 & 1) == 0)
  {
    unint64_t i = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*a1 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (i != v27) {
        goto LABEL_6;
      }
    }
    else if (i != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
      for (unint64_t i = v4 + 5; ; ++i)
      {
        unint64_t v8 = i - 4;
        uint64_t v9 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v8 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v8 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_45;
          }
          id v10 = *(id *)(v9 + 8 * i);
        }
        uint64_t v11 = v10;
        unint64_t v12 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
        char v13 = static NSObject.== infix(_:_:)();

        if ((v13 & 1) == 0) {
          break;
        }
LABEL_32:
        unint64_t v24 = i - 3;
        if (__OFADD__(v8, 1)) {
          goto LABEL_46;
        }
        if ((unint64_t)*a1 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v25 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        if (v24 == v25) {
          return v4;
        }
      }
      if (v8 == v4)
      {
LABEL_31:
        if (__OFADD__(v4++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_32;
      }
      uint64_t v14 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v14 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v8 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v8 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          id v16 = *(id *)(v14 + 8 * i);
          goto LABEL_20;
        }
      }
      else
      {
        if ((v4 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v4 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        id v15 = *(id *)(v14 + 8 * v4 + 32);
        if ((v14 & 0xC000000000000001) == 0) {
          goto LABEL_17;
        }
      }
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v14 = *a1;
LABEL_20:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v14;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v14 < 0 || (v14 & 0x4000000000000000) != 0)
      {
        uint64_t v14 = sub_1001137FC(v14);
        *a1 = v14;
      }
      uint64_t v18 = *(void **)((v14 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20);
      *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20) = v16;

      specialized Array._endMutation()();
      uint64_t v19 = *a1;
      int v20 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v19;
      if (!v20 || v19 < 0 || (v19 & 0x4000000000000000) != 0)
      {
        uint64_t v19 = sub_1001137FC(v19);
        *a1 = v19;
      }
      if ((v8 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      uint64_t v21 = v19 & 0xFFFFFFFFFFFFFF8;
      if (v8 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      unint64_t v22 = *(void **)(v21 + 8 * i);
      *(void *)(v21 + 8 * i) = v15;

      specialized Array._endMutation()();
      goto LABEL_31;
    }
    return v4;
  }
  if (!((unint64_t)*a1 >> 62)) {
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t sub_1001A0E0C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    char v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    if (!((unint64_t)*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v3) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = v5 - v3;
  if (__OFSUB__(0, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 - v8;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v13 = *v4 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v14 = v13 + 32;
  id v15 = (char *)(v13 + 32 + 8 * v5);
  v6(0);
  swift_arrayDestroy();
  if (v7)
  {
    if ((unint64_t)*v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v17 = v24 - v3;
      if (!__OFSUB__(v24, v3))
      {
LABEL_17:
        if (v17 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v18 = (char *)(v14 + 8 * v3);
        if (v5 != v3 || v15 >= &v18[8 * v17]) {
          memmove(v15, v18, 8 * v17);
        }
        if (!((unint64_t)*v4 >> 62))
        {
          uint64_t v19 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v17 = v16 - v3;
      if (!__OFSUB__(v16, v3)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1001A1120(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = sub_100102170(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  sub_1000992E8(&qword_1002A82E0);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[40 * a2 + 32];
    if (a1 != a2 || &v4[40 * a1 + 32] >= &v16[40 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[40 * a1 + 32], v16, 40 * v15);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL sub_1001A12A0(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return a3 != 0;
  }
  uint64_t v5 = v3;
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  int64_t v9 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients;
  swift_beginAccess();
  uint64_t v11 = *(void *)(*(void *)v10 + 16);
  swift_bridgeObjectRetain();
  if (!v11) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  sub_10016DB60(a1, a2);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21[0] = *(void *)v10;
    *(void *)uint64_t v10 = 0x8000000000000000;
    sub_1001F4714((uint64_t)_swiftEmptyArrayStorage, a1, a2, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v10 = v21[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_7:
  swift_bridgeObjectRetain();
  BOOL v14 = sub_100183E54();
  uint64_t v16 = sub_100191064(v21, a1, a2);
  if (*v15)
  {
    uint64_t v17 = v15;
    id v18 = a3;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    ((void (*)(void *, void))v16)(v21, 0);
    swift_bridgeObjectRelease();
    ((void (*)(unsigned char *, void))v14)(v22, 0);
  }
  else
  {
    ((void (*)(void *, void))v16)(v21, 0);
    swift_bridgeObjectRelease();
    ((void (*)(unsigned char *, void))v14)(v22, 0);
  }
  uint64_t v19 = *(os_unfair_lock_s **)(v5 + v8);
  swift_retain();
  os_unfair_lock_unlock(v19 + 4);
  swift_release();
  return a3 != 0;
}

uint64_t sub_1001A1514(void *a1)
{
  if (!a1) {
    return a1 != 0;
  }
  uint64_t v43 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v44 = v1;
  unint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess();
  uint64_t v46 = *v4 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(*v4 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(*v4 + 64);
  int64_t v47 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v48 = *v4;
  swift_bridgeObjectRetain();
  int64_t v8 = 0;
  int64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v45 = v4;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      uint64_t v11 = (v7 - 1) & v7;
      unint64_t v12 = v10 | (v8 << 6);
    }
    else
    {
      int64_t v13 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        goto LABEL_51;
      }
      if (v13 >= v47)
      {
LABEL_46:
        swift_release();
        int64_t v41 = *(os_unfair_lock_s **)(v44 + v43);
        swift_retain();
        os_unfair_lock_unlock(v41 + 4);
        swift_release();
        return a1 != 0;
      }
      unint64_t v14 = *(void *)(v46 + 8 * v13);
      ++v8;
      if (!v14)
      {
        int64_t v8 = v13 + 1;
        if (v13 + 1 >= v47) {
          goto LABEL_46;
        }
        unint64_t v14 = *(void *)(v46 + 8 * v8);
        if (!v14)
        {
          int64_t v8 = v13 + 2;
          if (v13 + 2 >= v47) {
            goto LABEL_46;
          }
          unint64_t v14 = *(void *)(v46 + 8 * v8);
          if (!v14)
          {
            int64_t v15 = v13 + 3;
            if (v15 >= v47) {
              goto LABEL_46;
            }
            unint64_t v14 = *(void *)(v46 + 8 * v15);
            if (!v14)
            {
              while (1)
              {
                int64_t v8 = v15 + 1;
                if (__OFADD__(v15, 1)) {
                  goto LABEL_52;
                }
                if (v8 >= v47) {
                  goto LABEL_46;
                }
                unint64_t v14 = *(void *)(v46 + 8 * v8);
                ++v15;
                if (v14) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v8 = v15;
          }
        }
      }
LABEL_22:
      uint64_t v11 = (v14 - 1) & v14;
      unint64_t v12 = __clz(__rbit64(v14)) + (v8 << 6);
    }
    uint64_t v16 = (uint64_t *)(*(void *)(v48 + 48) + 16 * v12);
    uint64_t v17 = v16[1];
    unint64_t v51 = v11;
    uint64_t v52 = *v16;
    unint64_t v18 = *(void *)(*(void *)(v48 + 56) + 8 * v12);
    BOOL v54 = v9;
    if (v18 >> 62) {
      break;
    }
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v20 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v19) {
      goto LABEL_25;
    }
LABEL_37:
    uint64_t v28 = v9;
    uint64_t v50 = (uint64_t)v9;
LABEL_38:
    swift_bridgeObjectRelease();

    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v31 = *v4;
    uint64_t v53 = (void *)*v4;
    *unint64_t v4 = 0x8000000000000000;
    unint64_t v33 = sub_10016DB60(v52, v17);
    uint64_t v34 = *(void *)(v31 + 16);
    BOOL v35 = (v32 & 1) == 0;
    uint64_t v36 = v34 + v35;
    if (__OFADD__(v34, v35)) {
      goto LABEL_50;
    }
    char v37 = v32;
    if (*(void *)(v31 + 24) >= v36)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1001F6F58();
      }
    }
    else
    {
      sub_1001EEE78(v36, isUniquelyReferenced_nonNull_native);
      unint64_t v38 = sub_10016DB60(v52, v17);
      if ((v37 & 1) != (v39 & 1)) {
        goto LABEL_53;
      }
      unint64_t v33 = v38;
    }
    int64_t v9 = v28;
    if (v37)
    {
      uint64_t v40 = v53[7];
      swift_bridgeObjectRelease();
      *(void *)(v40 + 8 * v33) = v50;
    }
    else
    {
      sub_1001F62BC(v33, v52, v17, v50, v53);
      swift_bridgeObjectRetain();
    }
    *unint64_t v4 = (uint64_t)v53;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    unint64_t v7 = v51;
  }
  id v29 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  if (!v19) {
    goto LABEL_37;
  }
LABEL_25:
  uint64_t v49 = v17;
  unint64_t v21 = 0;
  while (1)
  {
    if ((v18 & 0xC000000000000001) != 0)
    {
      id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v21 >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_49;
      }
      id v22 = *(id *)(v18 + 8 * v21 + 32);
    }
    uint64_t v23 = v22;
    unint64_t v24 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    sub_100099C7C(0, &qword_1002AC158);
    id v25 = a1;
    id v26 = v23;
    char v27 = static NSObject.== infix(_:_:)();

    if (v27)
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v21;
    if (v24 == v19)
    {
      uint64_t v50 = (uint64_t)v54;
      unint64_t v4 = v45;
      uint64_t v28 = _swiftEmptyArrayStorage;
      uint64_t v17 = v49;
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_1001A19C0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a1;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      unint64_t v6 = 0;
      unint64_t v18 = v4 & 0xC000000000000001;
      uint64_t v17 = v4 & 0xFFFFFFFFFFFFFF8;
      while (v18)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        int64_t v8 = v7;
        unint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_18;
        }
        unint64_t v10 = v4;
        uint64_t v11 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
        uint64_t v12 = DockCoreInfo.description.getter();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_14:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_5;
        }
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v15) {
          goto LABEL_14;
        }

LABEL_5:
        unint64_t v4 = v10;
        ++v6;
        if (v9 == v5) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v6 < *(void *)(v17 + 16)) {
        break;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v7 = *(id *)(v4 + 8 * v6 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001A1B74(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    unint64_t v6 = 0;
    uint64_t v7 = result + 40;
    uint64_t v8 = -(uint64_t)v3;
    uint64_t v18 = result + 40;
    do
    {
      if (v6 <= v3) {
        unint64_t v9 = v3;
      }
      else {
        unint64_t v9 = v6;
      }
      uint64_t v10 = -(uint64_t)v9;
      for (unint64_t i = (uint64_t *)(v7 + 16 * v6++); ; i += 2)
      {
        if (v10 + v6 == 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v12 = *(i - 1);
        uint64_t v13 = *i;
        if (v12 != a2 || v13 != a3)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
        }
        ++v6;
        if (v8 + v6 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
      }
      swift_bridgeObjectRetain();
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        uint64_t result = sub_1001DC584(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v16 = _swiftEmptyArrayStorage[2];
      unint64_t v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1) {
        uint64_t result = sub_1001DC584(v15 > 1, v16 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v16 + 1;
      uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
      v17[4] = v12;
      v17[5] = v13;
      unint64_t v3 = v19;
      uint64_t v7 = v18;
    }
    while (v8 + v6);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

void sub_1001A1CE4(uint64_t a1, void *a2)
{
  uint64_t v4 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v5 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  unint64_t v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients);
  swift_beginAccess();
  uint64_t v7 = *v6;
  uint64_t v8 = v7 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v7 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v13 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v18 >= v12) {
      goto LABEL_21;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v12) {
        goto LABEL_21;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v12) {
          goto LABEL_21;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_5:
    int v16 = *(_DWORD *)(*(void *)(v7 + 48) + 4 * v15);
    id v17 = *(id *)(*(void *)(v7 + 56) + 8 * v15);
    sub_10010D894(v16, v17, a2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v12)
  {
LABEL_21:
    swift_release();
    unint64_t v21 = *(os_unfair_lock_s **)(a1 + v4);
    swift_retain();
    os_unfair_lock_unlock(v21 + 4);
    swift_release();
    return;
  }
  unint64_t v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v13 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v13 >= v12) {
      goto LABEL_21;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_1001A1EC0(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *unint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  sub_100099C7C(0, (unint64_t *)&unk_1002A8F30);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        unint64_t v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1001A21B0(int a1, void *a2)
{
  return sub_1001A2BDC(a1, a2, (uint64_t)&OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients, "added first trajectory client, taking transaction");
}

void sub_1001A21C4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v10 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_release();
  uint64_t v27 = a1;
  uint64_t v11 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients);
  swift_beginAccess();
  uint64_t v12 = *v11;
  uint64_t v28 = v12 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v12 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v17 = 0;
  while (1)
  {
    if (v15)
    {
      unint64_t v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_5;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v22 >= v16) {
      goto LABEL_21;
    }
    unint64_t v23 = *(void *)(v28 + 8 * v22);
    ++v17;
    if (!v23)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_21;
      }
      unint64_t v23 = *(void *)(v28 + 8 * v17);
      if (!v23)
      {
        int64_t v17 = v22 + 2;
        if (v22 + 2 >= v16) {
          goto LABEL_21;
        }
        unint64_t v23 = *(void *)(v28 + 8 * v17);
        if (!v23) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v15 = (v23 - 1) & v23;
    unint64_t v19 = __clz(__rbit64(v23)) + (v17 << 6);
LABEL_5:
    int v20 = *(_DWORD *)(*(void *)(v12 + 48) + 4 * v19);
    id v21 = *(id *)(*(void *)(v12 + 56) + 8 * v19);
    sub_10010AD70(v20, v21, a2, a3, a4, a5);
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v16)
  {
LABEL_21:
    swift_release();
    id v25 = *(os_unfair_lock_s **)(v27 + v26);
    swift_retain();
    os_unfair_lock_unlock(v25 + 4);
    swift_release();
    return;
  }
  unint64_t v23 = *(void *)(v28 + 8 * v24);
  if (v23)
  {
    int64_t v17 = v24;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v17 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v17 >= v16) {
      goto LABEL_21;
    }
    unint64_t v23 = *(void *)(v28 + 8 * v17);
    ++v24;
    if (v23) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_1001A23DC(int a1, void *a2)
{
  return sub_1001A2BDC(a1, a2, (uint64_t)&OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients, "Got first sensor client, taking transaction");
}

uint64_t sub_1001A23F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_10019D440(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1001A2488(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::Int v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  unint64_t v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients;
  swift_beginAccess();
  if (*(void *)(*(void *)v10 + 16) && (sub_10016DBD8(a1), (v11 & 1) != 0))
  {
    swift_beginAccess();
    uint64_t v12 = (void *)sub_1001ED0B8(a1);
    swift_endAccess();

    swift_beginAccess();
    sub_1001ED908(a1);
    swift_endAccess();
    swift_bridgeObjectRelease();
    int v13 = 1;
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v14 = sub_10018FBC8();
  unint64_t v15 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  if (v13 && !v14)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    int64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "no more sensor or actuation clients, releasing transaction", v18, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    sub_10019A168();
  }
  return 1;
}

uint64_t sub_1001A2714(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  DockCoreInfo.identifier.getter();
  uint64_t v11 = UUID.description.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v28 = v11;
  uint64_t v29 = v13;
  swift_bridgeObjectRetain();
  v14._unint64_t countAndFlagsBits = 45;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._unint64_t countAndFlagsBits = a2;
  v15._object = a3;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v17 = v28;
  uint64_t v16 = v29;
  id v18 = objc_allocWithZone((Class)type metadata accessor for ActuatorFeedback());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v19 = (void *)ActuatorFeedback.init(velocities:positions:timestamp:)();
  uint64_t v20 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__cacheLock;
  id v21 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__cacheLock);
  swift_retain();
  os_unfair_lock_lock(v21 + 4);
  swift_release();
  int64_t v22 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__actuationFeedbackCache);
  swift_beginAccess();
  id v23 = v19;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = *v22;
  *int64_t v22 = 0x8000000000000000;
  sub_1001F56FC((uint64_t)v23, v17, v16, isUniquelyReferenced_nonNull_native);
  *int64_t v22 = v27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  id v25 = *(os_unfair_lock_s **)(v4 + v20);
  swift_retain();
  os_unfair_lock_unlock(v25 + 4);

  return swift_release();
}

void sub_1001A296C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, double a9)
{
  uint64_t v28 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v13 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v13 + 4);
  swift_release();
  Swift::String v14 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients);
  swift_beginAccess();
  uint64_t v15 = *v14;
  uint64_t v29 = v15 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v15 + 64);
  int64_t v30 = (unint64_t)(v16 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v19 = 0;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v19 << 6);
      goto LABEL_5;
    }
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v24 >= v30) {
      goto LABEL_21;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v19;
    if (!v25)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v30) {
        goto LABEL_21;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v19);
      if (!v25)
      {
        int64_t v19 = v24 + 2;
        if (v24 + 2 >= v30) {
          goto LABEL_21;
        }
        unint64_t v25 = *(void *)(v29 + 8 * v19);
        if (!v25) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v18 = (v25 - 1) & v25;
    unint64_t v21 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_5:
    int v22 = *(_DWORD *)(*(void *)(v15 + 48) + 4 * v21);
    id v23 = (void (*)(char *, uint64_t, uint64_t))*(id *)(*(void *)(v15 + 56) + 8 * v21);
    sub_10010C4EC(v22, v23, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, a7, a9, a8);
  }
  int64_t v26 = v24 + 3;
  if (v26 >= v30)
  {
LABEL_21:
    swift_release();
    uint64_t v27 = *(os_unfair_lock_s **)(a1 + v28);
    swift_retain();
    os_unfair_lock_unlock(v27 + 4);
    swift_release();
    return;
  }
  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    int64_t v19 = v26;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v19 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v19 >= v30) {
      goto LABEL_21;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v19);
    ++v26;
    if (v25) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
}

uint64_t sub_1001A2BC8(int a1, void *a2)
{
  return sub_1001A2BDC(a1, a2, (uint64_t)&OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients, "added first actuation client, taking transaction");
}

uint64_t sub_1001A2BDC(int a1, void *a2, uint64_t a3, const char *a4)
{
  unint64_t v21 = a4;
  uint64_t v5 = v4;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v13 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v13 + 4);
  swift_release();
  swift_beginAccess();
  id v14 = a2;
  sub_1001E0F84((uint64_t)a2, a1);
  swift_endAccess();
  uint64_t v15 = sub_10018FBC8();
  uint64_t v16 = *(os_unfair_lock_s **)(v5 + v12);
  swift_retain();
  os_unfair_lock_unlock(v16 + 4);
  swift_release();
  if (v15 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v8);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      int64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, v21, v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_100199524(1);
  }
  return 1;
}

void sub_1001A2DFC(int a1)
{
  uint64_t v2 = v1;
  uint64_t v92 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v92 - 8);
  uint64_t v5 = __chkstk_darwin(v92);
  unsigned int v91 = (char *)v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v83 - v7;
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v10 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_release();
  uint64_t v11 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClients;
  swift_beginAccess();
  uint64_t v12 = *(void *)(*(void *)v11 + 16);
  int v93 = a1;
  if (v12 && (sub_10016DBD8(a1), (v13 & 1) != 0))
  {
    swift_beginAccess();
    id v14 = (void *)sub_1001ED0B8(a1);
    swift_endAccess();

    uint64_t v15 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
    swift_beginAccess();
    uint64_t v16 = *v15;
    if (*(void *)(*v15 + 16) && (unint64_t v17 = sub_10016DBD8(a1), (v18 & 1) != 0))
    {
      uint64_t v96 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v96 = 0;
    }
    swift_beginAccess();
    sub_1001EDA1C(a1);
    swift_endAccess();
    swift_bridgeObjectRelease();
    int v19 = 1;
  }
  else
  {
    uint64_t v96 = 0;
    int v19 = 0;
  }
  uint64_t v20 = sub_10018FBC8();
  unint64_t v21 = *(os_unfair_lock_s **)(v2 + v9);
  swift_retain();
  os_unfair_lock_unlock(v21 + 4);
  swift_release();
  if (v19 && !v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v92);
    int v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      int64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "no more sensor or actuation clients, releasing transaction", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v92);
    sub_10019A168();
  }
  uint64_t v25 = v96;
  if (!v96) {
    return;
  }
  uint64_t v26 = *(void *)(v96 + 64);
  uint64_t v100 = v96 + 64;
  uint64_t v27 = 1 << *(unsigned char *)(v96 + 32);
  uint64_t v28 = -1;
  if (v27 < 64) {
    uint64_t v28 = ~(-1 << v27);
  }
  unint64_t v29 = v28 & v26;
  uint64_t v90 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  uint64_t v98 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories;
  swift_beginAccess();
  int64_t v30 = 0;
  uint64_t v104 = 0;
  int64_t v101 = (unint64_t)(v27 + 63) >> 6;
  uint64_t v89 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v88 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v86 = (char *)&v106 + 4;
  uint64_t v85 = &v107;
  *(void *)&long long v31 = 67109378;
  long long v84 = v31;
  v83[1] = (char *)&type metadata for Any + 8;
  uint64_t v94 = v2;
  uint64_t v95 = v9;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v29)
        {
          unint64_t v32 = __clz(__rbit64(v29));
          v29 &= v29 - 1;
          unint64_t v33 = v32 | (v30 << 6);
        }
        else
        {
          if (__OFADD__(v30++, 1)) {
            goto LABEL_70;
          }
          if (v30 >= v101)
          {
LABEL_67:
            swift_release();
            return;
          }
          unint64_t v35 = *(void *)(v100 + 8 * v30);
          if (!v35)
          {
            int64_t v36 = v30 + 1;
            if (v30 + 1 >= v101) {
              goto LABEL_67;
            }
            unint64_t v35 = *(void *)(v100 + 8 * v36);
            if (!v35)
            {
              int64_t v36 = v30 + 2;
              if (v30 + 2 >= v101) {
                goto LABEL_67;
              }
              unint64_t v35 = *(void *)(v100 + 8 * v36);
              if (!v35)
              {
                int64_t v36 = v30 + 3;
                if (v30 + 3 >= v101) {
                  goto LABEL_67;
                }
                unint64_t v35 = *(void *)(v100 + 8 * v36);
                if (!v35)
                {
                  while (1)
                  {
                    int64_t v30 = v36 + 1;
                    if (__OFADD__(v36, 1)) {
                      goto LABEL_71;
                    }
                    if (v30 >= v101) {
                      goto LABEL_67;
                    }
                    unint64_t v35 = *(void *)(v100 + 8 * v30);
                    ++v36;
                    if (v35) {
                      goto LABEL_31;
                    }
                  }
                }
              }
            }
            int64_t v30 = v36;
          }
LABEL_31:
          unint64_t v29 = (v35 - 1) & v35;
          unint64_t v33 = __clz(__rbit64(v35)) + (v30 << 6);
        }
        char v37 = (uint64_t *)(*(void *)(v25 + 48) + 16 * v33);
        uint64_t v38 = *v37;
        unint64_t v39 = v37[1];
        uint64_t v40 = *(void *)(v25 + 56) + 32 * v33;
        uint64_t v42 = *(void *)(v40 + 8);
        uint64_t v41 = *(void *)(v40 + 16);
        id v43 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo());
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v44 = (void *)DockCoreInfo.init(uuidString:)();
        if (v44) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v99 = v38;
      unint64_t v102 = v29;
      uint64_t v103 = v41;
      int64_t v45 = v30;
      uint64_t v46 = v25;
      uint64_t v47 = v2;
      uint64_t v48 = v9;
      uint64_t v49 = v47;
      uint64_t v50 = *(os_unfair_lock_s **)(v47 + v9);
      id v51 = v44;
      swift_retain();
      os_unfair_lock_lock(v50 + 4);
      swift_release();
      id v52 = v51;
      unint64_t v53 = swift_bridgeObjectRetain();
      uint64_t v54 = v104;
      unint64_t v55 = (unint64_t)sub_1001A066C(v53);
      uint64_t v104 = v54;
      swift_bridgeObjectRelease();
      id v105 = v52;

      if (v55 >> 62) {
        break;
      }
      if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_35;
      }
LABEL_64:
      swift_bridgeObjectRelease();
      uint64_t v9 = v48;
      uint64_t v2 = v49;
      uint64_t v81 = *(os_unfair_lock_s **)(v49 + v9);
      swift_retain();
      os_unfair_lock_unlock(v81 + 4);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v82 = v105;

      swift_release();
      uint64_t v25 = v46;
      int64_t v30 = v45;
      unint64_t v29 = v102;
LABEL_65:
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v80) {
      goto LABEL_64;
    }
    swift_bridgeObjectRetain();
    char v57 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v57) {
      break;
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = v48;
LABEL_39:
    uint64_t v2 = v49;
    uint64_t v25 = v46;
    int64_t v30 = v45;
    uint64_t v58 = *(os_unfair_lock_s **)(v2 + v9);
    swift_retain();
    os_unfair_lock_unlock(v58 + 4);
    id v59 = v105;

    swift_release();
    if (!v57)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      unint64_t v29 = v102;
      goto LABEL_65;
    }
    uint64_t v103 = v42;
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v60 = qword_1002B1628;
    id v61 = v57;
    uint64_t v62 = dispatch thunk of DockCoreAccessory.info.getter();
    id v97 = v61;

    uint64_t v63 = (void *)v62;
    uint64_t v64 = DockCoreInfo.description.getter();
    uint64_t v66 = v65;
    uint64_t v67 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v68 = *(os_unfair_lock_s **)(v60 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v68 + 4);
    swift_release();
    os_log_type_t v69 = (uint64_t *)(v60 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__animators);
    swift_beginAccess();
    uint64_t v70 = *v69;
    if (!*(void *)(v70 + 16)) {
      goto LABEL_52;
    }
    swift_bridgeObjectRetain();
    unint64_t v71 = sub_10016DB60(v64, v66);
    if ((v72 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_52:
      swift_bridgeObjectRelease();
      uint64_t v73 = 0;
      goto LABEL_53;
    }
    uint64_t v73 = *(void *)(*(void *)(v70 + 56) + 8 * v71);
    swift_retain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_53:
    uint64_t v9 = v95;
    os_log_t v74 = *(os_unfair_lock_s **)(v60 + v67);
    swift_retain();
    os_unfair_lock_unlock(v74 + 4);

    swift_release();
    if (v73)
    {
      uint64_t v2 = v94;
      uint64_t v25 = v96;
      if (*(_DWORD *)(v73 + 16) == v93)
      {
        (*v89)(v91, v90, v92);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        os_log_type_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v77 = swift_slowAlloc();
          uint64_t v87 = swift_slowAlloc();
          uint64_t v107 = v87;
          *(_DWORD *)uint64_t v77 = v84;
          LODWORD(v106) = v93;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v77 + 8) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v106 = sub_1000993AC(v99, v39, &v107);
          uint64_t v9 = v95;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Client %d disconnected while animator active for %s, stopping velocity", (uint8_t *)v77, 0x12u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v25 = v96;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        (*v88)(v91, v92);
        unint64_t v29 = v102;
        id v78 = v105;
        id v79 = v97;
        sub_10018AFC0(0);
        swift_retain();
        sub_1000CA02C(1, 0.0);
        swift_release_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_release();
        unint64_t v29 = v102;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      uint64_t v2 = v94;
      uint64_t v25 = v96;
      unint64_t v29 = v102;
    }
  }
LABEL_35:
  if ((v55 & 0xC000000000000001) != 0)
  {
    id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_38;
  }
  if (*(void *)((v55 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v56 = *(id *)(v55 + 32);
LABEL_38:
    char v57 = v56;
    uint64_t v9 = v48;
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
}

uint64_t sub_1001A3978(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrajectoryClients;
  swift_beginAccess();
  if (*(void *)(*(void *)v10 + 16) && (sub_10016DBD8(a1), (v11 & 1) != 0))
  {
    swift_beginAccess();
    uint64_t v12 = (void *)sub_1001ED0B8(a1);
    swift_endAccess();

    int v13 = 1;
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v14 = sub_10018FBC8();
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  if (v13 && !v14)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      char v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "no more clients, releasing transaction", v18, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    sub_10019A168();
  }
  return 1;
}

void *sub_1001A3BC8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  DockCoreInfo.identifier.getter();
  uint64_t v11 = UUID.description.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v29 = v11;
  uint64_t v30 = v13;
  swift_bridgeObjectRetain();
  v14._unint64_t countAndFlagsBits = 45;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v15._unint64_t countAndFlagsBits = a2;
  v15._object = a3;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = v29;
  uint64_t v17 = v30;
  uint64_t v18 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__cacheLock;
  int v19 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__cacheLock);
  swift_retain();
  os_unfair_lock_lock(v19 + 4);
  swift_release();
  uint64_t v20 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__actuationFeedbackCache);
  swift_beginAccess();
  uint64_t v21 = *v20;
  if (!*(void *)(v21 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v22 = sub_10016DB60(v16, v17);
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    int64_t v24 = 0;
    goto LABEL_7;
  }
  int64_t v24 = *(void **)(*(void *)(v21 + 56) + 8 * v22);
  id v25 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v26 = *(os_unfair_lock_s **)(v4 + v18);
  swift_retain();
  os_unfair_lock_unlock(v26 + 4);
  swift_release();
  return v24;
}

uint64_t sub_1001A3DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001A4034(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10010F15C);
}

uint64_t sub_1001A3DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, void *a7, void *a8)
{
  uint64_t v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v13 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v13 + 4);
  swift_release();
  uint64_t v33 = a3;
  Swift::String v14 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess();
  uint64_t v15 = *v14;
  uint64_t v16 = v15 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v15 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  while (1)
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_21;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v26 >= v20) {
      goto LABEL_27;
    }
    unint64_t v27 = *(void *)(v16 + 8 * v26);
    ++v22;
    if (!v27)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v20) {
        goto LABEL_27;
      }
      unint64_t v27 = *(void *)(v16 + 8 * v22);
      if (!v27)
      {
        int64_t v22 = v26 + 2;
        if (v26 + 2 >= v20) {
          goto LABEL_27;
        }
        unint64_t v27 = *(void *)(v16 + 8 * v22);
        if (!v27) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v19 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_21:
    uint64_t v29 = (void *)(*(void *)(v15 + 48) + 16 * v25);
    if (*v29 != a1 || v29[1] != a2)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    unint64_t v23 = swift_bridgeObjectRetain();
    sub_10010F5F8(v23, a4, a5, a6, a7, a8);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v20)
  {
LABEL_27:
    swift_release();
    long long v31 = *(os_unfair_lock_s **)(v33 + v32);
    swift_retain();
    os_unfair_lock_unlock(v31 + 4);
    return swift_release();
  }
  unint64_t v27 = *(void *)(v16 + 8 * v28);
  if (v27)
  {
    int64_t v22 = v28;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v22 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v22 >= v20) {
      goto LABEL_27;
    }
    unint64_t v27 = *(void *)(v16 + 8 * v22);
    ++v28;
    if (v27) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1001A401C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1001A4034(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10010FB5C);
}

uint64_t sub_1001A4034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v13 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v13 + 4);
  swift_release();
  uint64_t v33 = a3;
  Swift::String v14 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess();
  uint64_t v15 = *v14;
  uint64_t v16 = v15 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v15 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  while (1)
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_21;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v26 >= v20) {
      goto LABEL_27;
    }
    unint64_t v27 = *(void *)(v16 + 8 * v26);
    ++v22;
    if (!v27)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v20) {
        goto LABEL_27;
      }
      unint64_t v27 = *(void *)(v16 + 8 * v22);
      if (!v27)
      {
        int64_t v22 = v26 + 2;
        if (v26 + 2 >= v20) {
          goto LABEL_27;
        }
        unint64_t v27 = *(void *)(v16 + 8 * v22);
        if (!v27) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v19 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_21:
    uint64_t v29 = (void *)(*(void *)(v15 + 48) + 16 * v25);
    if (*v29 != a1 || v29[1] != a2)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    uint64_t v23 = swift_bridgeObjectRetain();
    a8(v23, a4, a5, a6, a7);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v20)
  {
LABEL_27:
    swift_release();
    long long v31 = *(os_unfair_lock_s **)(v33 + v32);
    swift_retain();
    os_unfair_lock_unlock(v31 + 4);
    return swift_release();
  }
  unint64_t v27 = *(void *)(v16 + 8 * v28);
  if (v27)
  {
    int64_t v22 = v28;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v22 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v22 >= v20) {
      goto LABEL_27;
    }
    unint64_t v27 = *(void *)(v16 + 8 * v22);
    ++v28;
    if (v27) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1001A4264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, double a7, double a8, double a9, double a10)
{
  uint64_t v38 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  unint64_t v19 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v19 + 4);
  swift_release();
  uint64_t v39 = a3;
  int64_t v20 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess();
  uint64_t v21 = *v20;
  uint64_t v22 = v21 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & *(void *)(v21 + 64);
  int64_t v26 = (unint64_t)(v23 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v28 = 0;
  while (1)
  {
    if (v25)
    {
      unint64_t v30 = __clz(__rbit64(v25));
      v25 &= v25 - 1;
      unint64_t v31 = v30 | (v28 << 6);
      goto LABEL_21;
    }
    int64_t v32 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v32 >= v26) {
      goto LABEL_27;
    }
    unint64_t v33 = *(void *)(v22 + 8 * v32);
    ++v28;
    if (!v33)
    {
      int64_t v28 = v32 + 1;
      if (v32 + 1 >= v26) {
        goto LABEL_27;
      }
      unint64_t v33 = *(void *)(v22 + 8 * v28);
      if (!v33)
      {
        int64_t v28 = v32 + 2;
        if (v32 + 2 >= v26) {
          goto LABEL_27;
        }
        unint64_t v33 = *(void *)(v22 + 8 * v28);
        if (!v33) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v25 = (v33 - 1) & v33;
    unint64_t v31 = __clz(__rbit64(v33)) + (v28 << 6);
LABEL_21:
    unint64_t v35 = (void *)(*(void *)(v21 + 48) + 16 * v31);
    if (*v35 != a1 || v35[1] != a2)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    unint64_t v29 = swift_bridgeObjectRetain();
    sub_10011044C(v29, a4, a5, a6, a7, a8, a9, a10);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v34 = v32 + 3;
  if (v34 >= v26)
  {
LABEL_27:
    swift_release();
    char v37 = *(os_unfair_lock_s **)(v39 + v38);
    swift_retain();
    os_unfair_lock_unlock(v37 + 4);
    return swift_release();
  }
  unint64_t v33 = *(void *)(v22 + 8 * v34);
  if (v33)
  {
    int64_t v28 = v34;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v28 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v28 >= v26) {
      goto LABEL_27;
    }
    unint64_t v33 = *(void *)(v22 + 8 * v28);
    ++v34;
    if (v33) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1001A44B8(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients;
  swift_beginAccess();
  if (*(void *)(*(void *)v10 + 16) && (sub_10016DBD8(a1), (v11 & 1) != 0))
  {
    swift_beginAccess();
    uint64_t v12 = (void *)sub_1001EDAC8(a1);
    Swift::String v14 = v13;
    swift_endAccess();
    sub_1001A60DC(v12, v14);
    int v15 = 1;
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v16 = sub_10018FBC8();
  uint64_t v17 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain();
  os_unfair_lock_unlock(v17 + 4);
  swift_release();
  if (v15 && !v16)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      int64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "no more clients, releasing transaction", v20, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v21 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer;
    uint64_t v22 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__batteryPollTimer);
    if (v22)
    {
      id v23 = v22;
      dispatch thunk of RepeatingTimer.cancel()();

      uint64_t v22 = *(void **)(v2 + v21);
    }
    *(void *)(v2 + v21) = 0;

    sub_10019A168();
  }
  return 1;
}

uint64_t sub_1001A4740(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients;
  swift_beginAccess();
  if (*(void *)(*(void *)v10 + 16) && (sub_10016DBD8(a1), (v11 & 1) != 0))
  {
    swift_beginAccess();
    uint64_t v12 = (void *)sub_1001EDAD4(a1);
    Swift::String v14 = v13;
    swift_endAccess();
    sub_1001A60DC(v12, v14);
    int v15 = 1;
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v16 = sub_10018FBC8();
  uint64_t v17 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain();
  os_unfair_lock_unlock(v17 + 4);
  swift_release();
  if (v15 && !v16)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      int64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "no more clients, releasing transaction", v20, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    sub_10019A168();
  }
  return 1;
}

uint64_t sub_1001A499C(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100102294(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (void *)&v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001A4B08(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = (char *)sub_100102C50(result, v11, 1, v4);
    uint64_t v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[24 * a1 + 32];
    uint64_t v15 = &v4[24 * a2 + 32];
    if (a1 != a2 || result >= &v15[24 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 24 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001A4C6C(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  int64_t v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyPairingClients;
  swift_beginAccess();
  if (*(void *)(*(void *)v10 + 16) && (sub_10016DBD8(a1), (v11 & 1) != 0))
  {
    swift_beginAccess();
    uint64_t v12 = (void *)sub_1001ED0B8(a1);
    swift_endAccess();

    swift_beginAccess();
    sub_1001ED150(a1);
    swift_endAccess();
    swift_bridgeObjectRelease();
    int v13 = 1;
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v14 = sub_10018FBC8();
  uint64_t v15 = *(os_unfair_lock_s **)(v2 + v8);
  swift_retain();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  if (v13 && !v14)
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v4);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "no more long running clients, releasing transaction", v18, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    sub_10019A168();
  }
  return 1;
}

uint64_t sub_1001A4EF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5, uint64_t a6, unint64_t a7)
{
  uint64_t v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  char v11 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v11 + 4);
  swift_release();
  uint64_t v33 = a3;
  uint64_t v12 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess();
  uint64_t v34 = *v12 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(*v12 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(*v12 + 64);
  int64_t v35 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v38 = *v12;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  while (1)
  {
    do
    {
      if (v15)
      {
        unint64_t v18 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v19 = v18 | (v17 << 6);
      }
      else
      {
        int64_t v20 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_44;
        }
        if (v20 >= v35) {
          goto LABEL_41;
        }
        unint64_t v21 = *(void *)(v34 + 8 * v20);
        ++v17;
        if (!v21)
        {
          int64_t v17 = v20 + 1;
          if (v20 + 1 >= v35) {
            goto LABEL_41;
          }
          unint64_t v21 = *(void *)(v34 + 8 * v17);
          if (!v21)
          {
            int64_t v17 = v20 + 2;
            if (v20 + 2 >= v35) {
              goto LABEL_41;
            }
            unint64_t v21 = *(void *)(v34 + 8 * v17);
            if (!v21)
            {
              int64_t v22 = v20 + 3;
              if (v22 >= v35) {
                goto LABEL_41;
              }
              unint64_t v21 = *(void *)(v34 + 8 * v22);
              int64_t v17 = v22;
              if (!v21)
              {
                while (1)
                {
                  int64_t v17 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_45;
                  }
                  if (v17 >= v35) {
                    break;
                  }
                  unint64_t v21 = *(void *)(v34 + 8 * v17);
                  ++v22;
                  if (v21) {
                    goto LABEL_19;
                  }
                }
LABEL_41:
                swift_release();
                unint64_t v31 = *(os_unfair_lock_s **)(v33 + v32);
                swift_retain();
                os_unfair_lock_unlock(v31 + 4);
                swift_bridgeObjectRelease();
                return swift_release();
              }
            }
          }
        }
LABEL_19:
        unint64_t v15 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
      }
      id v23 = (void *)(*(void *)(v38 + 48) + 16 * v19);
      unint64_t v24 = *(void *)(*(void *)(v38 + 56) + 8 * v19);
      if (*v23 == a1 && v23[1] == a2) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    while ((result & 1) == 0);
    unint64_t v39 = v15;
    if (v24 >> 62) {
      break;
    }
    uint64_t v26 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    uint64_t result = swift_bridgeObjectRetain();
    if (v26) {
      goto LABEL_27;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease_n();
    a1 = v36;
    a2 = v37;
    unint64_t v15 = v39;
  }
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v26 = result;
  if (!result) {
    goto LABEL_4;
  }
LABEL_27:
  if (v26 < 1) {
    goto LABEL_43;
  }
  uint64_t v27 = 0;
  while (2)
  {
    if ((v24 & 0xC000000000000001) != 0) {
      id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v28 = *(id *)(v24 + 8 * v27 + 32);
    }
    unint64_t v29 = v28;
    id v30 = [v28 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000992E8(&qword_1002AA088);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v44 = 0;
LABEL_30:

      goto LABEL_31;
    }
    if (!v44) {
      goto LABEL_30;
    }
    id v43 = v44;
    swift_unknownObjectRetain();
    sub_1001CF4A8(&v43, a5, a6, a7);

    uint64_t result = swift_unknownObjectRelease();
    if (!__OFADD__(*a4, 1))
    {
      ++*a4;
LABEL_31:
      ++v27;
      swift_unknownObjectRelease();
      if (v26 == v27) {
        goto LABEL_4;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1001A52CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5, uint64_t a6, unint64_t a7, double a8, double a9, double a10, double a11)
{
  uint64_t v39 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  int64_t v20 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v20 + 4);
  swift_release();
  uint64_t v40 = a3;
  unint64_t v21 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess();
  uint64_t v22 = *v21;
  uint64_t v23 = v22 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(v22 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & *(void *)(v22 + 64);
  int64_t v27 = (unint64_t)(v24 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v29 = 0;
  while (1)
  {
    if (v26)
    {
      unint64_t v31 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      unint64_t v32 = v31 | (v29 << 6);
      goto LABEL_21;
    }
    int64_t v33 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v33 >= v27) {
      goto LABEL_27;
    }
    unint64_t v34 = *(void *)(v23 + 8 * v33);
    ++v29;
    if (!v34)
    {
      int64_t v29 = v33 + 1;
      if (v33 + 1 >= v27) {
        goto LABEL_27;
      }
      unint64_t v34 = *(void *)(v23 + 8 * v29);
      if (!v34)
      {
        int64_t v29 = v33 + 2;
        if (v33 + 2 >= v27) {
          goto LABEL_27;
        }
        unint64_t v34 = *(void *)(v23 + 8 * v29);
        if (!v34) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v26 = (v34 - 1) & v34;
    unint64_t v32 = __clz(__rbit64(v34)) + (v29 << 6);
LABEL_21:
    uint64_t v36 = (void *)(*(void *)(v22 + 48) + 16 * v32);
    if (*v36 != a1 || v36[1] != a2)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v30 = swift_bridgeObjectRetain();
    sub_1001D3834(v30, a4, a8, a9, a10, a11, a5, a6, a7);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v35 = v33 + 3;
  if (v35 >= v27)
  {
LABEL_27:
    swift_release();
    uint64_t v38 = *(os_unfair_lock_s **)(v40 + v39);
    swift_retain();
    os_unfair_lock_unlock(v38 + 4);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  unint64_t v34 = *(void *)(v23 + 8 * v35);
  if (v34)
  {
    int64_t v29 = v35;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v29 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v29 >= v27) {
      goto LABEL_27;
    }
    unint64_t v34 = *(void *)(v23 + 8 * v29);
    ++v35;
    if (v34) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1001A5548(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned int a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v13 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v13 + 4);
  swift_release();
  uint64_t v33 = a3;
  uint64_t v14 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess();
  uint64_t v15 = *v14;
  uint64_t v16 = v15 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v15 + 64);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v22 = 0;
  while (1)
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_21;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v26 >= v20) {
      goto LABEL_27;
    }
    unint64_t v27 = *(void *)(v16 + 8 * v26);
    ++v22;
    if (!v27)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v20) {
        goto LABEL_27;
      }
      unint64_t v27 = *(void *)(v16 + 8 * v22);
      if (!v27)
      {
        int64_t v22 = v26 + 2;
        if (v26 + 2 >= v20) {
          goto LABEL_27;
        }
        unint64_t v27 = *(void *)(v16 + 8 * v22);
        if (!v27) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v19 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_21:
    int64_t v29 = (void *)(*(void *)(v15 + 48) + 16 * v25);
    if (*v29 != a1 || v29[1] != a2)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        continue;
      }
    }
    swift_bridgeObjectRetain();
    unint64_t v23 = swift_bridgeObjectRetain();
    sub_1001D3BE4(v23, a4, a5, a6, a7, a8);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v28 = v26 + 3;
  if (v28 >= v20)
  {
LABEL_27:
    swift_release();
    unint64_t v31 = *(os_unfair_lock_s **)(v33 + v32);
    swift_retain();
    os_unfair_lock_unlock(v31 + 4);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  unint64_t v27 = *(void *)(v16 + 8 * v28);
  if (v27)
  {
    int64_t v22 = v28;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v22 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v22 >= v20) {
      goto LABEL_27;
    }
    unint64_t v27 = *(void *)(v16 + 8 * v22);
    ++v28;
    if (v27) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1001A5794(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, void *a6)
{
  uint64_t v29 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v8 = *(os_unfair_lock_s **)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v8 + 4);
  swift_release();
  uint64_t v30 = a3;
  int64_t v9 = (uint64_t *)(a3 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackerConfigClients);
  swift_beginAccess();
  uint64_t v31 = *v9 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(*v9 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(*v9 + 64);
  int64_t v32 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v33 = *v9;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v34)
  {
    do
    {
      if (v12)
      {
        unint64_t v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v16 = v15 | (i << 6);
      }
      else
      {
        int64_t v17 = i + 1;
        if (__OFADD__(i, 1)) {
          goto LABEL_44;
        }
        if (v17 >= v32) {
          goto LABEL_41;
        }
        unint64_t v18 = *(void *)(v31 + 8 * v17);
        ++i;
        if (!v18)
        {
          int64_t i = v17 + 1;
          if (v17 + 1 >= v32) {
            goto LABEL_41;
          }
          unint64_t v18 = *(void *)(v31 + 8 * i);
          if (!v18)
          {
            int64_t i = v17 + 2;
            if (v17 + 2 >= v32) {
              goto LABEL_41;
            }
            unint64_t v18 = *(void *)(v31 + 8 * i);
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v32) {
                goto LABEL_41;
              }
              unint64_t v18 = *(void *)(v31 + 8 * v19);
              int64_t i = v19;
              if (!v18)
              {
                while (1)
                {
                  int64_t i = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_45;
                  }
                  if (i >= v32) {
                    break;
                  }
                  unint64_t v18 = *(void *)(v31 + 8 * i);
                  ++v19;
                  if (v18) {
                    goto LABEL_19;
                  }
                }
LABEL_41:
                swift_release();
                int64_t v28 = *(os_unfair_lock_s **)(v30 + v29);
                swift_retain();
                os_unfair_lock_unlock(v28 + 4);
                return swift_release();
              }
            }
          }
        }
LABEL_19:
        unint64_t v12 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (i << 6);
      }
      int64_t v20 = (void *)(*(void *)(v33 + 48) + 16 * v16);
      unint64_t v21 = *(void *)(*(void *)(v33 + 56) + 8 * v16);
      if (*v20 == a1 && v20[1] == a2) {
        break;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    while ((result & 1) == 0);
    int64_t v34 = i;
    if (v21 >> 62) {
      break;
    }
    uint64_t v23 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v23) {
      goto LABEL_27;
    }
LABEL_4:
    uint64_t result = swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v23 = result;
  if (!result) {
    goto LABEL_4;
  }
LABEL_27:
  if (v23 < 1) {
    goto LABEL_43;
  }
  uint64_t v24 = 0;
  while (2)
  {
    if ((v21 & 0xC000000000000001) != 0) {
      id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v25 = *(id *)(v21 + 8 * v24 + 32);
    }
    int64_t v26 = v25;
    id v27 = [v25 remoteObjectProxy:v29];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000992E8(&qword_1002AA088);
    if ((swift_dynamicCast() & 1) == 0)
    {
      uint64_t v39 = 0;
LABEL_30:

      goto LABEL_31;
    }
    if (!v39) {
      goto LABEL_30;
    }
    v38[0] = v39;
    swift_unknownObjectRetain();
    a4(v38);

    uint64_t result = swift_unknownObjectRelease();
    if (!__OFADD__(*a6, 1))
    {
      ++*a6;
LABEL_31:
      ++v24;
      swift_unknownObjectRelease();
      if (v23 == v24) {
        goto LABEL_4;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1001A5B1C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A5B54(uint64_t a1)
{
  return sub_100196528(a1, v1);
}

uint64_t sub_1001A5B60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001A5B70()
{
  return swift_release();
}

uint64_t sub_1001A5B78()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A5BB4(char a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(char *, uint64_t *))(v2 + 16);
  char v6 = a1;
  uint64_t v5 = a2;
  return v3(&v6, &v5);
}

uint64_t sub_1001A5BF4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001A5C38(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001A5C80()
{
  return sub_100190048(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001A5C88()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001A5CD0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000A69C4;
  return sub_100190150(a1, v4, v5, v7, v6);
}

uint64_t sub_1001A5D90()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001A5DE0(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 40);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_1000A5ED8;
  return sub_10018D364(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1001A5EB8()
{
  return sub_1001A614C((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release, 48);
}

uint64_t sub_1001A5EE8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000A69C4;
  v5[2] = a1;
  uint64_t v6 = (void *)swift_task_alloc();
  v5[3] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_10010DF88;
  return sub_1001A8C8C(v4);
}

uint64_t sub_1001A5FD0()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_1001A6008()
{
  sub_10018AF60(*(void *)(v0 + 16));
}

void sub_1001A6014()
{
  sub_10018A50C(v0);
}

void sub_1001A6038()
{
  sub_10018A50C(v0);
}

uint64_t sub_1001A605C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1001A60A4(uint64_t a1, uint64_t a2)
{
  sub_100188EBC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void (**)(void, void))(v2 + 40), *(void *)(v2 + 48));
}

Swift::Int sub_1001A60B8()
{
  return sub_100188540(*(void *)(v0 + 16));
}

Swift::Int sub_1001A60C4(uint64_t a1, void *a2)
{
  return sub_1001886AC(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001A60CC(uint64_t result)
{
  if (result != 1) {
    return sub_1000BF118(result);
  }
  return result;
}

void sub_1001A60DC(void *a1, void *a2)
{
  if (a2)
  {
  }
}

uint64_t sub_1001A611C()
{
  return sub_1001A614C((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_1001A614C(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  a1(*(void *)(v3 + 16));
  a2(*(void *)(v3 + 32));

  return _swift_deallocObject(v3, a3, 7);
}

void sub_1001A61B0()
{
  sub_100187B98(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001A61DC()
{
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 56, 7);
}

id sub_1001A622C()
{
  return sub_100186B68(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1001A623C(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1001A6268(void *a1, uint64_t a2)
{
  return sub_1001871D0(a1, a2, v2);
}

uint64_t sub_1001A6274()
{
  return sub_1001876B0(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001A627C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001A62B4(uint64_t a1)
{
  return sub_100185DD0(a1);
}

uint64_t sub_1001A62BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1001A637C(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v5 = sub_10016DE10(a1);
      if (v6)
      {
        uint64_t v4 = *(void **)(*(void *)(a2 + 56) + 8 * v5);
        id v7 = v4;
        return v4;
      }
    }
    return 0;
  }
  swift_retain();
  uint64_t v3 = __CocoaDictionary.lookup(_:)();
  swift_release();
  if (!v3) {
    return 0;
  }
  sub_100099C7C(0, (unint64_t *)&qword_1002A87E0);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v4 = v9;
  swift_unknownObjectRelease();
  return v4;
}

void *sub_1001A6464(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v6 = sub_10016DE88((uint64_t)a1);
      if (v7)
      {
        unint64_t v5 = *(void **)(*(void *)(a2 + 56) + 8 * v6);
        id v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  id v3 = a1;
  uint64_t v4 = __CocoaDictionary.lookup(_:)();

  if (!v4) {
    return 0;
  }
  type metadata accessor for AccessoryFirmwareUpdateSession();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  unint64_t v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_1001A652C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_10016DF28(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_1001A6570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = sub_1001B0B44(v9, v8, a2, a3);
  if (v11 <= 0 && v11 > v10)
  {
    uint64_t v12 = v5;
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = (int)a2;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 16);
        goto LABEL_14;
      case 3:
        goto LABEL_16;
      default:
        goto LABEL_11;
    }
  }
  uint64_t v12 = sub_1001B0AC8(v9, v10, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = a2 >> 32;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 24);
      break;
    case 3:
      break;
    default:
LABEL_11:
      uint64_t v13 = BYTE6(a3);
      break;
  }
  if (v13 < v12)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x1001A66E4);
  }
LABEL_16:
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_1000A6240(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_1001A6714(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  unint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_100099C7C(0, &qword_1002AC6D0);
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t *sub_1001A67B8@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_1001A67D0(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_1001A67DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v27 = a1;
  uint64_t v26 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  char v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  v3[2] = 0;
  v3[4] = 0;
  sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = &_swiftEmptyArrayStorage;
  sub_1001B6110((unint64_t *)&qword_1002A8530, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000992E8(&qword_1002A9000);
  sub_1000EAA74((unint64_t *)&qword_1002A8540, &qword_1002A9000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v26);
  v3[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  Logger.init(subsystem:category:)();
  *(void *)((char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController) = 0;
  *(void *)((char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager) = 0;
  *(void *)((char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager) = 0;
  *((unsigned char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 0;
  uint64_t v10 = (void *)((char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  *uint64_t v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  v10[3] = 2;
  v10[5] = 0;
  v10[6] = 0;
  void v10[4] = 0;
  *((unsigned char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader) = 0;
  uint64_t v11 = (void *)((char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion);
  void *v11 = 0;
  v11[1] = 0;
  uint64_t v12 = (void *)((char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productGroup);
  *uint64_t v12 = 0;
  v12[1] = 0;
  uint64_t v13 = (void *)((char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productNumber);
  *uint64_t v13 = 0;
  v13[1] = 0;
  uint64_t v14 = (void *)((char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData);
  *uint64_t v14 = 0;
  v14[1] = 0;
  *((unsigned char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingEnabled) = 1;
  *((unsigned char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_connectedForTracking) = 0;
  *((unsigned char *)v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer) = 0;
  uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap;
  *(void *)((char *)v4 + v15) = sub_1001EA944((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v16 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock;
  sub_1000992E8((uint64_t *)&unk_1002A87B0);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  *(void *)((char *)v4 + v16) = v17;
  uint64_t v18 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks;
  *(void *)((char *)v4 + v18) = sub_1001FBED0((uint64_t)&_swiftEmptyArrayStorage);
  int64_t v19 = (void *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  void *v19 = 0;
  v19[1] = 0;
  int64_t v20 = (void *)((char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback);
  *int64_t v20 = 0;
  v20[1] = 0;
  Date.init()();
  *((unsigned char *)v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sendImu) = 0;
  unint64_t v21 = (void *)v4[2];
  v4[2] = v27;

  int64_t v22 = (void *)v4[4];
  uint64_t v23 = v29;
  v4[3] = v28;
  v4[4] = v23;

  return v4;
}

void sub_1001A6C14(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 != *(void *)(a2 + 16)) {
    return;
  }
  uint64_t v6 = *(void **)(v4 + 32);
  if (!v6) {
    return;
  }
  self;
  uint64_t v11 = swift_dynamicCastObjCClass();
  if (!v11) {
    return;
  }
  uint64_t v12 = (void *)v11;
  id v25 = v6;
  id v13 = [v12 hapCharacteristicForCBCharacteristic:a4];
  if (!v13)
  {
    uint64_t v15 = v25;
LABEL_10:

    return;
  }
  id v24 = v13;
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingEnabled) != 1)
  {

    uint64_t v15 = v24;
    goto LABEL_10;
  }
  if ((a3 & 0x100) != 0) {
    char v14 = *(unsigned char *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingHeader);
  }
  else {
    char v14 = a3;
  }
  sub_1000992E8(&qword_1002A7F40);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_100240BE0;
  *(unsigned char *)(v16 + 32) = v14;
  uint64_t v17 = sub_1001038B0(v16);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  unint64_t v26 = v19;
  if (v5)
  {
    int64_t v20 = (double *)(a2 + 32);
    unint64_t v21 = (void *)(a1 + 32);
    while (1)
    {
      double v22 = *v20 * 1000.0;
      if ((~*(void *)&v22 & 0x7FF0000000000000) == 0) {
        break;
      }
      if (v22 <= -32769.0) {
        goto LABEL_26;
      }
      if (v22 >= 32768.0) {
        goto LABEL_27;
      }
      if ((*v21 & 0x8000000000000000) != 0 || *v21 >= 0x100uLL) {
        goto LABEL_28;
      }
      Data._Representation.append(contentsOf:)();
      ++v20;
      ++v21;
      if (!--v5)
      {
        unint64_t v19 = v26;
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_23:
    sub_1000A618C(v17, v19);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000A6240(v17, v19);
    [v12 writeWithoutResponse:isa toCharacteristic:v24];

    sub_1000A6240(v17, v19);
  }
}

void sub_1001A6F24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 || !a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v8);
    swift_errorRetain();
    swift_errorRetain();
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      id v23 = v15 + 4;
      *(void *)&long long v27 = a2;
      swift_errorRetain();
      sub_1000992E8(&qword_1002AA080);
      uint64_t v16 = String.init<A>(describing:)();
      *(void *)&long long v27 = sub_1000993AC(v16, v17, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unable to read characteristic: %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    id v23 = a1;
    id v12 = [v23 metadata];

    if (v12)
    {
      if ([v23 value])
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v24, 0, sizeof(v24));
      }
      sub_1000A5BE8((uint64_t)v24, (uint64_t)v25);
      if (v26)
      {
        sub_1000992E8(&qword_1002AC6F8);
        if (swift_dynamicCast())
        {
          if (*((void *)&v28 + 1))
          {
            sub_1000A6298(&v27, (uint64_t)v30);
            sub_1000A5DA4(v30, v30[3]);
            uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v21 = v20;

            swift_beginAccess();
            *(void *)(a4 + 16) = v19;
            *(void *)(a4 + 24) = v21;
            swift_bridgeObjectRelease();
            sub_100099BCC((uint64_t)v30);
            return;
          }
        }
        else
        {
          uint64_t v29 = 0;
          long long v27 = 0u;
          long long v28 = 0u;
        }
      }
      else
      {
        sub_1000A61E4((uint64_t)v25, &qword_1002AA5F0);
        long long v27 = 0u;
        long long v28 = 0u;
        uint64_t v29 = 0;
      }

      sub_1000A61E4((uint64_t)&v27, &qword_1002AC6F0);
    }
    else
    {
      id v18 = v23;
    }
  }
}

void sub_1001A7318(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(void), uint64_t a6, NSObject *a7)
{
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v52 - v17;
  if (a2)
  {
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    uint64_t v57 = v18;
    v20((char *)&v52 - v17, a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v13);
    id v21 = a4;
    swift_errorRetain();
    id v22 = v21;
    swift_errorRetain();
    id v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    int v25 = v24;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v26 = swift_slowAlloc();
      id v56 = a7;
      uint64_t v27 = v26;
      uint64_t v54 = swift_slowAlloc();
      uint64_t v59 = v54;
      *(_DWORD *)uint64_t v27 = 136315394;
      id v28 = [v22 UUIDString:v27 + 4];
      LODWORD(v53) = v25;
      id v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v55 = v13;
      uint64_t v31 = v30;
      unint64_t v33 = v32;

      uint64_t v58 = sub_1000993AC(v31, v33, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v34 = Error.localizedDescription.getter();
      uint64_t v58 = sub_1000993AC(v34, v35, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v53, "Error reading characteristic %s: %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a7 = v56;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v57 + 8))(v19, v55);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v57 + 8))(v19, v13);
    }
    uint64_t v41 = a2;
LABEL_15:
    ((void (*)(void, uint64_t))a5)(0, v41);
LABEL_16:
    dispatch_group_leave(a7);
    return;
  }
  if (!a1)
  {
    uint64_t v42 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v16, a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v13);
    id v43 = a4;
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v57 = v42;
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      uint64_t v59 = v54;
      id v56 = a7;
      *(_DWORD *)uint64_t v46 = 136315138;
      unint64_t v53 = v46;
      id v47 = [v43 UUIDString:v46 + 4];
      uint64_t v55 = v13;
      id v48 = v47;
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v51 = v50;

      uint64_t v58 = sub_1000993AC(v49, v51, &v59);
      a7 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Error reading characteristic %s: no results returned!", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v55);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v13);
    }
    uint64_t v41 = 0;
    goto LABEL_15;
  }
  if (!(a1 >> 62))
  {
    uint64_t v36 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v36) {
      goto LABEL_7;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
  if (!v36) {
    goto LABEL_23;
  }
LABEL_7:
  id v56 = a7;
  if (v36 >= 1)
  {
    uint64_t v37 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v38 = *(id *)(a1 + 8 * v37 + 32);
      }
      uint64_t v39 = v38;
      ++v37;
      id v40 = [v38 characteristic];
      a5();
    }
    while (v36 != v37);
    swift_bridgeObjectRelease();
    a7 = v56;
    goto LABEL_16;
  }
  __break(1u);
}

void sub_1001A7908(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (!a4 && a3 >> 60 != 15)
  {
    switch(a3 >> 62)
    {
      case 1uLL:
        if ((int)a2 != a2 >> 32) {
          goto LABEL_7;
        }
        return;
      case 2uLL:
        if (*(void *)(a2 + 16) != *(void *)(a2 + 24))
        {
LABEL_7:
          sub_1000A618C(a2, a3);
          goto LABEL_8;
        }
        return;
      case 3uLL:
        goto LABEL_15;
      default:
        if ((a3 & 0xFF000000000000) == 0) {
          goto LABEL_15;
        }
LABEL_8:
        sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
        if (qword_1002A7BB8 != -1) {
          swift_once();
        }
        if ((static NSObject.== infix(_:_:)() & 1) != 0
          && (sub_1000A618C(a2, a3),
              (uint64_t v6 = _s14dockaccessoryd14MotionFeedbackV4dataACSg10Foundation4DataV_tcfC_0(a2, a3)) != 0))
        {
          sub_1001AA55C((uint64_t)v6, v7);
          sub_1000A9990(a2, a3);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_15:
          sub_1000A9990(a2, a3);
        }
        break;
    }
  }
}

uint64_t sub_1001A7ABC()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001A7B8C, 0, 0);
}

uint64_t sub_1001A7B8C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = swift_task_alloc();
  v0[13] = v2;
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 4;
  id v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  uint64_t v4 = sub_1000992E8(&qword_1002AA080);
  *id v3 = v0;
  v3[1] = sub_1001A7C94;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000021, 0x800000010023A050, sub_1001B6358, v2, v4);
}

uint64_t sub_1001A7C94()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001A7DAC, 0, 0);
}

uint64_t sub_1001A7DAC()
{
  int v25 = v0;
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[8] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  uint64_t v3 = v0[9];
  uint64_t v4 = *(void (**)(void, uint64_t, uint64_t))(v0[10] + 16);
  if (v1)
  {
    v4(v0[12], v2, v3);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[9];
    uint64_t v9 = v0[10];
    if (v7)
    {
      uint64_t v23 = v0[12];
      uint64_t v22 = v0[9];
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_getErrorValue();
      uint64_t v12 = Error.localizedDescription.getter();
      v0[7] = sub_1000993AC(v12, v13, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to issue start feedback: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v23, v22);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    }
  }
  else
  {
    v4(v0[11], v2, v3);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Issued accessory start feedback!", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v18 = v0[10];
    uint64_t v17 = v0[11];
    uint64_t v19 = v0[9];

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(BOOL))v0[1];
  return v20(v1 == 0);
}

uint64_t sub_1001A80AC()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001A817C, 0, 0);
}

uint64_t sub_1001A817C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = swift_task_alloc();
  v0[13] = v2;
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 8;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  uint64_t v4 = sub_1000992E8(&qword_1002AA080);
  *uint64_t v3 = v0;
  v3[1] = sub_1001A8284;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000021, 0x800000010023A050, sub_1001B6358, v2, v4);
}

uint64_t sub_1001A8284()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001A839C, 0, 0);
}

uint64_t sub_1001A839C()
{
  int v25 = v0;
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[8] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  uint64_t v3 = v0[9];
  uint64_t v4 = *(void (**)(void, uint64_t, uint64_t))(v0[10] + 16);
  if (v1)
  {
    v4(v0[12], v2, v3);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[9];
    uint64_t v9 = v0[10];
    if (v7)
    {
      uint64_t v23 = v0[12];
      uint64_t v22 = v0[9];
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_getErrorValue();
      uint64_t v12 = Error.localizedDescription.getter();
      v0[7] = sub_1000993AC(v12, v13, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to issue stop feedback: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v23, v22);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    }
  }
  else
  {
    v4(v0[11], v2, v3);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Issued accessory stop feedback!", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v18 = v0[10];
    uint64_t v17 = v0[11];
    uint64_t v19 = v0[9];

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(BOOL))v0[1];
  return v20(v1 == 0);
}

uint64_t sub_1001A869C()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001A876C, 0, 0);
}

uint64_t sub_1001A876C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = swift_task_alloc();
  v0[13] = v2;
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 16;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  uint64_t v4 = sub_1000992E8(&qword_1002AA080);
  *uint64_t v3 = v0;
  v3[1] = sub_1001A8874;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000021, 0x800000010023A050, sub_1001B6358, v2, v4);
}

uint64_t sub_1001A8874()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001A898C, 0, 0);
}

uint64_t sub_1001A898C()
{
  int v25 = v0;
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[8] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  uint64_t v3 = v0[9];
  uint64_t v4 = *(void (**)(void, uint64_t, uint64_t))(v0[10] + 16);
  if (v1)
  {
    v4(v0[12], v2, v3);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[12];
    uint64_t v10 = v0[9];
    uint64_t v9 = v0[10];
    if (v7)
    {
      uint64_t v23 = v0[12];
      uint64_t v22 = v0[9];
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_getErrorValue();
      uint64_t v12 = Error.localizedDescription.getter();
      v0[7] = sub_1000993AC(v12, v13, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to issue begin startup command: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v23, v22);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    }
  }
  else
  {
    v4(v0[11], v2, v3);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Issued accessory begin startup command!", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v18 = v0[10];
    uint64_t v17 = v0[11];
    uint64_t v19 = v0[9];

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(BOOL))v0[1];
  return v20(v1 == 0);
}

uint64_t sub_1001A8C8C(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001A8D5C, 0, 0);
}

uint64_t sub_1001A8D5C()
{
  uint64_t v1 = TrackerStateEvent.rawValue.getter();
  if (v1 == TrackerStateEvent.rawValue.getter())
  {
    uint64_t v2 = 32;
  }
  else
  {
    uint64_t v3 = TrackerStateEvent.rawValue.getter();
    if (v3 == TrackerStateEvent.rawValue.getter())
    {
      uint64_t v2 = 64;
    }
    else
    {
      uint64_t v4 = TrackerStateEvent.rawValue.getter();
      if (v4 == TrackerStateEvent.rawValue.getter()) {
        uint64_t v2 = 96;
      }
      else {
        uint64_t v2 = 0;
      }
    }
  }
  uint64_t v5 = v0[9];
  uint64_t v6 = swift_task_alloc();
  v0[14] = v6;
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v2;
  BOOL v7 = (void *)swift_task_alloc();
  v0[15] = v7;
  uint64_t v8 = sub_1000992E8(&qword_1002AA080);
  *BOOL v7 = v0;
  v7[1] = sub_1001A8EC8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0xD000000000000021, 0x800000010023A050, sub_1001B48E0, v6, v8);
}

uint64_t sub_1001A8EC8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001A8FE0, 0, 0);
}

uint64_t sub_1001A8FE0()
{
  int v25 = v0;
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[9] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  uint64_t v4 = *(void (**)(void, uint64_t, uint64_t))(v0[11] + 16);
  if (v2)
  {
    v4(v0[13], v3, v1);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[13];
    uint64_t v10 = v0[10];
    uint64_t v9 = v0[11];
    if (v7)
    {
      uint64_t v23 = v0[13];
      uint64_t v22 = v0[10];
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_getErrorValue();
      uint64_t v12 = Error.localizedDescription.getter();
      v0[7] = sub_1000993AC(v12, v13, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to issue begin startup command: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v23, v22);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    }
  }
  else
  {
    v4(v0[12], v3, v1);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Issued accessory begin startup command!", v16, 2u);
      swift_slowDealloc();
    }
    uint64_t v18 = v0[11];
    uint64_t v17 = v0[12];
    uint64_t v19 = v0[10];

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(BOOL))v0[1];
  return v20(v2 == 0);
}

uint64_t sub_1001A92D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v4 = sub_1000992E8(&qword_1002AC6E8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[3] = &type metadata for UInt64;
  v22[0] = a3;
  uint64_t v8 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v9 = swift_allocObject();
  long long v19 = xmmword_100240BE0;
  *(_OWORD *)(v9 + 16) = xmmword_100240BE0;
  *(void *)(v9 + 56) = &type metadata for UInt32;
  *(void *)(v9 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v9 + 32) = 264;
  String.init(format:_:)();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v8 UUIDWithString:v10];

  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = v19;
  *(void *)(v12 + 56) = &type metadata for UInt32;
  *(void *)(v12 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v12 + 32) = 256;
  String.init(format:_:)();
  NSString v13 = String._bridgeToObjectiveC()();
  uint64_t v14 = v20;
  swift_bridgeObjectRelease();
  id v15 = [v8 UUIDWithString:v13];

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, v4);
  unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v17 + v16, v7, v4);
  sub_1001ADD24(v22, v11, v15, (uint64_t)sub_1001B497C, v17);
  swift_release();

  return sub_100099BCC((uint64_t)v22);
}

uint64_t sub_1001A95A8()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1001A95F4(unint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MotionFeedback.encode()(a1, a2);
  if (v10 >> 60 == 15) {
    return 0;
  }
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  NSString v13 = *(void **)(v2 + 32);
  if (!v13 || (self, (uint64_t v14 = swift_dynamicCastObjCClass()) == 0))
  {
    sub_1000A9990(v11, v12);
    return 0;
  }
  id v15 = (void *)v14;
  uint64_t v35 = v6;
  uint64_t v39 = v13;
  id v34 = v15;
  uint64_t result = (uint64_t)[v15 primaryAccessory];
  id v38 = (id)result;
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v17 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v18 = swift_allocObject();
  long long v36 = xmmword_100240BE0;
  *(_OWORD *)(v18 + 16) = xmmword_100240BE0;
  *(void *)(v18 + 56) = &type metadata for UInt32;
  *(void *)(v18 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v18 + 32) = 272;
  String.init(format:_:)();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v37 = v17;
  id v20 = [v17 UUIDWithString:v19];

  NSString v21 = [v20 UUIDString];
  if (!v21)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = v36;
  *(void *)(v22 + 56) = &type metadata for UInt32;
  *(void *)(v22 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v22 + 32) = 512;
  String.init(format:_:)();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v24 = [v37 UUIDWithString:v23];

  NSString v25 = [v24 UUIDString];
  if (!v25)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  id v26 = v38;
  id v27 = [v38 characteristicOfType:v21 serviceType:v25];

  if (!v27)
  {
    sub_1000A9990(v11, v12);

    return 0;
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v34 writeWithoutResponse:isa toCharacteristic:v27];

  uint64_t v29 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v5);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Sent motion feedback to accessory!", v32, 2u);
    swift_slowDealloc();
    unint64_t v33 = v39;
  }
  else
  {
    unint64_t v33 = v30;
    uint64_t v30 = v39;
  }
  sub_1000A9990(v11, v12);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v5);
  return 1;
}

void sub_1001A9A5C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void (***)(char *, uint64_t, uint64_t))(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1002B1628;
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  unint64_t v10 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_release();
  uint64_t v11 = *(void **)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  unint64_t v12 = *(os_unfair_lock_s **)(v8 + v9);
  id v53 = v11;
  swift_retain();
  os_unfair_lock_unlock(v12 + 4);
  swift_release();
  if (v11)
  {
    type metadata accessor for Actuator();
    static Actuator.Yaw.getter();
    id v52 = (id)dispatch thunk of DockCoreAccessory.getActuator(name:)();
    swift_bridgeObjectRelease();
    if (v52)
    {
      static Actuator.Pitch.getter();
      NSString v13 = (void *)dispatch thunk of DockCoreAccessory.getActuator(name:)();
      swift_bridgeObjectRelease();
      if (v13)
      {
        id v14 = [a1 attitude];
        [v14 quaternion];
        double v16 = v15;
        double v18 = v17;
        double v20 = v19;
        double v22 = v21;

        v56.x = v16;
        v56.y = v18;
        v56.z = v20;
        v56.w = v22;
        simd_quatd.init(_:)(v23, v56);
        int8x16_t v25 = (int8x16_t)vnegq_f64(v24);
        float64x2_t v27 = vmulq_f64(v26, (float64x2_t)xmmword_1002423B0);
        float64x2_t v28 = (float64x2_t)vextq_s8((int8x16_t)v27, (int8x16_t)vnegq_f64(v27), 8uLL);
        float64x2_t v29 = vmlaq_f64(vmulq_f64(v24, (float64x2_t)0), (float64x2_t)0, (float64x2_t)vextq_s8(v25, (int8x16_t)v24, 8uLL));
        float64x2_t v30 = vaddq_f64((float64x2_t)vextq_s8((int8x16_t)v24, v25, 8uLL), vmlaq_f64(vmulq_f64(v27, (float64x2_t)0), (float64x2_t)0, v28));
        float64x2_t v31 = vaddq_f64(v28, v29);
        float64x2_t v32 = vnegq_f64(v30);
        float64x2_t v33 = (float64x2_t)vextq_s8((int8x16_t)v31, (int8x16_t)vnegq_f64(v31), 8uLL);
        float64x2_t v51 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v31, v26, 1), v33, v26.f64[0]), vmlaq_n_f64(vmulq_laneq_f64(v32, v24, 1), (float64x2_t)vextq_s8((int8x16_t)v30, (int8x16_t)v32, 8uLL), v24.f64[0]));
        float64x2_t v34 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v30, v26, 1), (float64x2_t)vextq_s8((int8x16_t)v32, (int8x16_t)v30, 8uLL), v26.f64[0]), vmlaq_n_f64(vmulq_laneq_f64(v31, v24, 1), v33, v24.f64[0]));
        long double v35 = sqrt(vmuld_n_f64(v34.f64[0], v34.f64[0]) + vmuld_lane_f64(v34.f64[1], v34, 1));
        long double v36 = atan2(v34.f64[1], v34.f64[0]);
        double v37 = atan2(v51.f64[0], v35);
        id v38 = v52;
        uint64_t v39 = dispatch thunk of Component.id.getter();

        id v40 = v13;
        uint64_t v41 = dispatch thunk of Component.id.getter();

        double v42 = -v37;
        sub_1000992E8(&qword_1002A9940);
        unint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_10023FD30;
        *(void *)(inited + 32) = v39;
        *(long double *)(inited + 40) = v36;
        *(void *)(inited + 48) = v41;
        *(double *)(inited + 56) = v42;
        sub_1001A95F4(inited, (uint64_t)_swiftEmptyArrayStorage);
        swift_setDeallocating();
        v5[2](v7, v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v4);
        uint64_t v44 = v38;
        os_log_type_t v45 = v40;
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = swift_slowAlloc();
          *(_DWORD *)uint64_t v48 = 134218752;
          uint64_t v54 = dispatch thunk of Component.id.getter();
          id v52 = v5;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v48 + 12) = 2048;
          uint64_t v54 = *(void *)&v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v48 + 22) = 2048;
          uint64_t v54 = dispatch thunk of Component.id.getter();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v48 + 32) = 2048;
          uint64_t v54 = *(void *)&v42;
          uint64_t v5 = (void (**)(char *, uint64_t, uint64_t))v52;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "Sent IMU calibration yaw(%ld)=%f pitch(%ld)=%f", (uint8_t *)v48, 0x2Au);
          swift_slowDealloc();
          uint64_t v49 = v44;
        }
        else
        {

          uint64_t v49 = v45;
          os_log_type_t v45 = v44;
          uint64_t v46 = v44;
        }

        ((void (*)(char *, uint64_t))v5[1])(v7, v4);
        return;
      }

      id v50 = v52;
    }
    else
    {
      id v50 = v53;
    }
  }
}

uint64_t sub_1001A9F84(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 > 0.0)
  {
    uint64_t v8 = v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_lastImuStamp;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
    Date.timeIntervalSinceNow.getter();
    double v10 = v9;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (fabs(v10) < a1) {
      return 0;
    }
  }
  Date.init()();
  uint64_t v12 = v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_lastImuStamp;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v12, v7, v4);
  swift_endAccess();
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_1000992E8(&qword_1002AA758);
  OS_dispatch_queue.sync<A>(execute:)();
  NSString v13 = v16;
  if (v16)
  {
    sub_1001A9A5C(v16);

    return 1;
  }
  else
  {
    uint64_t v11 = 1;
    *(unsigned char *)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sendImu) = 1;
    swift_retain();
    sub_100186888(0xD00000000000001DLL, 0x800000010023A030, (uint64_t)sub_1001B48D8, v2);
    swift_release();
  }
  return v11;
}

uint64_t sub_1001AA200(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v22[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  double v9 = &v22[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_weakInit();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    int v11 = *(unsigned __int8 *)(Strong + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sendImu);
    swift_release();
    if (v11 == 1)
    {
      if (swift_weakLoadStrong())
      {
        sub_1001A9A5C(a1);
        swift_release();
      }
      uint64_t v12 = swift_weakLoadStrong();
      if (v12)
      {
        *(unsigned char *)(v12 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sendImu) = 0;
        swift_release();
      }
    }
  }
  uint64_t v13 = swift_weakLoadStrong();
  if (!v13
    || (uint64_t v14 = v13 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_lastImuStamp,
        swift_beginAccess(),
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v14, v6),
        swift_release(),
        Date.timeIntervalSinceNow.getter(),
        double v16 = v15,
        (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6),
        fabs(v16) > 5.0))
  {
    uint64_t v17 = swift_weakLoadStrong();
    if (v17)
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v17 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v2);
      swift_release();
      double v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        double v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)double v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "sendIMUPosition timeout exceeded. Unregistering imu motion manager", v20, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
    }
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    sub_100187B98(0xD00000000000001DLL, 0x800000010023A030);
  }
  return swift_weakDestroy();
}

uint64_t sub_1001AA55C(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock;
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  sub_1001B4790();
  uint64_t v6 = a1;
  os_unfair_lock_unlock(v5 + 4);
  uint64_t v7 = swift_release();
  int64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = v6;
    sub_1001DC5F4(0, v8, 0);
    unint64_t v9 = _swiftEmptyArrayStorage[2];
    uint64_t v10 = 32;
    int64_t v11 = v8;
    do
    {
      uint64_t v12 = *(void *)(v6 + v10);
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v9 >= v13 >> 1)
      {
        sub_1001DC5F4(v13 > 1, v9 + 1, 1);
        uint64_t v6 = v28;
      }
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v12;
      v10 += 16;
      ++v9;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1001DC544(0, v8, 0);
    unint64_t v14 = _swiftEmptyArrayStorage[2];
    uint64_t v15 = 40;
    uint64_t v16 = v28;
    do
    {
      uint64_t v17 = *(void *)(v16 + v15);
      unint64_t v18 = _swiftEmptyArrayStorage[3];
      if (v14 >= v18 >> 1)
      {
        sub_1001DC544(v18 > 1, v14 + 1, 1);
        uint64_t v16 = v28;
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      _swiftEmptyArrayStorage[v14 + 4] = v17;
      v15 += 16;
      ++v14;
      --v8;
    }
    while (v8);
    uint64_t v7 = swift_bridgeObjectRelease();
  }
  int64_t v19 = *(void *)(a2 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    sub_1001DC544(0, v19, 0);
    unint64_t v20 = _swiftEmptyArrayStorage[2];
    uint64_t v21 = 40;
    do
    {
      uint64_t v22 = *(void *)(a2 + v21);
      unint64_t v23 = _swiftEmptyArrayStorage[3];
      if (v20 >= v23 >> 1) {
        sub_1001DC544(v23 > 1, v20 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v20 + 1;
      _swiftEmptyArrayStorage[v20 + 4] = v22;
      v21 += 16;
      ++v20;
      --v19;
    }
    while (v19);
    uint64_t v7 = swift_bridgeObjectRelease();
  }
  float64x2_t v24 = *(void (**)(void *, void *, void *))(v30
                                                            + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  if (v24)
  {
    swift_retain();
    v24(_swiftEmptyArrayStorage, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage);
    uint64_t v7 = sub_1000BF118((uint64_t)v24);
  }
  int8x16_t v25 = *(os_unfair_lock_s **)(v30 + v29);
  uint64_t v26 = __chkstk_darwin(v7);
  __chkstk_darwin(v26);
  swift_retain();
  os_unfair_lock_lock(v25 + 4);
  sub_1001B6324();
  os_unfair_lock_unlock(v25 + 4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001AA8E0(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks;
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*(void *)v9 + 16)
    && !*(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v5);
    int64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Stopping feedback. No active feedback receivers and startup is not running", v13, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v14 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v4, 1, 1, v14);
    uint64_t v15 = (void *)swift_allocObject();
    v15[2] = 0;
    v15[3] = 0;
    void v15[4] = a1;
    swift_retain();
    sub_1001BC1A8((uint64_t)v4, (uint64_t)&unk_1002AC6E0, (uint64_t)v15);
    return swift_release();
  }
  return result;
}

uint64_t sub_1001AAB64()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000A5ED8;
  return sub_1001A80AC();
}

uint64_t sub_1001AABF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks);
  swift_beginAccess();
  uint64_t v7 = *v6;
  uint64_t v8 = *v6 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(*v6 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(*v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (v11)
  {
    unint64_t v15 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v16 = v15 | (v14 << 6);
LABEL_20:
    unint64_t v20 = *(void (**)(uint64_t *, uint64_t *, uint64_t *))(*(void *)(v7 + 56) + 16 * v16);
    if (v20)
    {
      uint64_t v24 = a2;
      uint64_t v22 = a4;
      uint64_t v23 = a3;
      swift_retain();
      v20(&v24, &v23, &v22);
      uint64_t result = sub_1000BF118((uint64_t)v20);
    }
  }
  int64_t v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v17 >= v12) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v8 + 8 * v17);
  ++v14;
  if (v18) {
    goto LABEL_19;
  }
  int64_t v14 = v17 + 1;
  if (v17 + 1 >= v12) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v8 + 8 * v14);
  if (v18) {
    goto LABEL_19;
  }
  int64_t v14 = v17 + 2;
  if (v17 + 2 >= v12) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v8 + 8 * v14);
  if (v18)
  {
LABEL_19:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_20;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v12) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v12) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_19;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1001AADB0(char a1)
{
  uint64_t v182 = type metadata accessor for ComponentType();
  uint64_t isUniquelyReferenced_nonNull_native = *(void *)(v182 - 8);
  uint64_t v4 = __chkstk_darwin(v182);
  unint64_t v179 = (unint64_t)v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v177 = (char *)v147 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  id v176 = (char *)v147 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  int64_t v12 = (char *)v147 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  id v178 = (char *)v147 - v14;
  __chkstk_darwin(v13);
  uint64_t v180 = (char *)v147 - v15;
  uint64_t v16 = type metadata accessor for Logger();
  unint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v20 = (char *)v147 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v175 = (char *)v147 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v174 = (char *)v147 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  float64x2_t v27 = (char *)v147 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)v147 - v28;
  uint64_t v30 = (unint64_t *)((char *)v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap);
  swift_beginAccess();
  uint64_t v181 = v30;
  if (*(void *)(*v30 + 16) && (a1 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v29, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v16);
    float64x2_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      float64x2_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float64x2_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Sensors already enumerated, skipping", v33, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v29, v16);
  }
  unint64_t v35 = sub_1001EA944((uint64_t)_swiftEmptyArrayStorage);
  *uint64_t v181 = v35;
  swift_bridgeObjectRelease();
  Class isa = v1[4].isa;
  if (isa
    && (id v165 = [(objc_class *)isa primaryAccessory]) != 0)
  {
    id v160 = v12;
    uint64_t v170 = v1;
    double v37 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    uint64_t v159 = (char *)v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
    unint64_t v158 = v17 + 16;
    uint64_t v157 = v37;
    ((void (*)(char *))v37)(v27);
    id v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      id v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Enumerating sensor services for accessory", v40, 2u);
      swift_slowDealloc();
    }

    uint64_t v41 = *(void (**)(char *, uint64_t))(v17 + 8);
    v17 += 8;
    uint64_t v156 = v41;
    v41(v27, v16);
    id v42 = [v165 services];
    if (v42)
    {
      id v43 = v42;
      sub_100099C7C(0, &qword_1002A8418);
      unint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v44 >> 62) {
        goto LABEL_73;
      }
      uint64_t v46 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v46)
      {
LABEL_74:

        return swift_bridgeObjectRelease();
      }
LABEL_13:
      uint64_t v155 = v16;
      id v163 = 0;
      unint64_t v185 = v44 & 0xC000000000000001;
      id v164 = (void (**)(uint64_t, uint64_t))(isUniquelyReferenced_nonNull_native + 104);
      unsigned int v173 = enum case for ComponentType.Actuator(_:);
      id v169 = (char **)(isUniquelyReferenced_nonNull_native + 16);
      unint64_t v172 = (unint64_t *)(isUniquelyReferenced_nonNull_native + 8);
      uint64_t v153 = &__dst[8];
      uint64_t v16 = 4;
      *(void *)&long long v45 = 136315394;
      long long v152 = v45;
      uint64_t v151 = (char *)&type metadata for Any + 8;
      unint64_t v154 = v17;
      unint64_t v184 = v44;
      uint64_t v183 = v46;
      while (1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = v16 - 4;
        if (v185)
        {
          id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v48 = v16 - 3;
          if (__OFADD__(isUniquelyReferenced_nonNull_native, 1)) {
            goto LABEL_70;
          }
        }
        else
        {
          id v47 = *(id *)(v44 + 8 * v16);
          uint64_t v48 = v16 - 3;
          if (__OFADD__(isUniquelyReferenced_nonNull_native, 1))
          {
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            swift_bridgeObjectRetain();
            uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v46) {
              goto LABEL_74;
            }
            goto LABEL_13;
          }
        }
        uint64_t v186 = v48;
        unint64_t v187 = v47;
        id v49 = [v47 type];
        if (!v49) {
          __break(1u);
        }
        id v50 = v49;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        NSString v51 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v52 = [self UUIDWithString:v51];

        id v53 = [v52 data];
        uint64_t v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v56 = v55;

        sub_1001A6570(12, v54, v56, (uint64_t *)&v195);
        uint64_t v57 = (uint64_t)v195;
        unint64_t v58 = v196;
        uint64_t v59 = sub_1000992E8((uint64_t *)&unk_1002AAA80);
        uint64_t v193 = v59;
        uint64_t v194 = sub_1000EAA74((unint64_t *)&qword_1002A8FE0, (uint64_t *)&unk_1002AAA80);
        id v191 = (char *)&off_1002749B8;
        uint64_t v60 = sub_1000A5DA4(&v191, v59);
        uint64_t v61 = *v60;
        size_t v62 = *(void *)(*v60 + 16);
        if (v62)
        {
          if (v62 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v189 = v62;
            memcpy(__dst, (const void *)(v61 + 32), v62);
            uint64_t v65 = *(void *)__dst;
            unint64_t v66 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v189 << 48);
          }
          else
          {
            type metadata accessor for __DataStorage();
            swift_allocObject();
            uint64_t v63 = __DataStorage.init(bytes:length:)();
            uint64_t v64 = v63;
            if (v62 >= 0x7FFFFFFF)
            {
              type metadata accessor for Data.RangeReference();
              uint64_t v65 = swift_allocObject();
              *(void *)(v65 + 16) = 0;
              *(void *)(v65 + 24) = v62;
              unint64_t v66 = v64 | 0x8000000000000000;
            }
            else
            {
              uint64_t v65 = v62 << 32;
              unint64_t v66 = v63 | 0x4000000000000000;
            }
          }
        }
        else
        {
          uint64_t v65 = 0;
          unint64_t v66 = 0xC000000000000000;
        }
        sub_100099BCC((uint64_t)&v191);
        char v67 = sub_1001B0F38(v57, v58, v65, v66);
        sub_1000A6240(v65, v66);
        sub_1000A6240(v57, v58);
        if ((v67 & 1) == 0 || sub_10013A984() < 0x300 || sub_10013A984() > 0x320)
        {

LABEL_31:
          goto LABEL_32;
        }
        uint64_t v68 = v182;
        uint64_t v69 = swift_allocBox();
        unint64_t v71 = v70;
        unint64_t v171 = *v164;
        ((void (*)(void *, void, uint64_t))v171)(v70, v173, v68);
        uint64_t v72 = swift_allocObject();
        *(void *)(v72 + 16) = 0x726F746175746361;
        uint64_t v168 = v72 + 16;
        *(void *)(v72 + 24) = 0xE800000000000000;
        if (qword_1002A7BD8 != -1) {
          swift_once();
        }
        uint64_t v73 = (void *)qword_1002B15A8;
        os_log_t v74 = v170;
        swift_retain();
        swift_retain();
        swift_retain();
        id v75 = v52;
        sub_1001B3C60(v73, v75, v74, (uint64_t)v74, v69, v72, v75);

        swift_release();
        swift_release();
        swift_release();
        swift_beginAccess();
        os_log_type_t v76 = *v169;
        uint64_t v77 = v180;
        id v167 = v71;
        id v166 = v76;
        ((void (*)(char *, void *, uint64_t))v76)(v180, v71, v68);
        id v78 = v178;
        ((void (*)(char *, void, uint64_t))v171)(v178, v173, v68);
        sub_1001B6110(&qword_1002AADA0, (void (*)(uint64_t))&type metadata accessor for ComponentType);
        char v79 = dispatch thunk of static Equatable.== infix(_:_:)();
        unint64_t v17 = *v172;
        ((void (*)(char *, uint64_t))*v172)(v78, v68);
        unint64_t v171 = (void (*)(uint64_t, uint64_t))v17;
        ((void (*)(char *, uint64_t))v17)(v77, v68);
        if (v79)
        {
          swift_release();
          swift_release();

          goto LABEL_31;
        }
        id v162 = v75;
        uint64_t v161 = v69;
        swift_beginAccess();
        uint64_t v80 = *(char **)(v72 + 16);
        unint64_t v44 = *(void *)(v72 + 24);
        uint64_t v168 = v72;
        uint64_t v81 = v163;
        id v191 = (char *)v163;
        swift_bridgeObjectRetain();
        uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
        long long v84 = v83;
        id v191 = v80;
        unint64_t v192 = v44;
        swift_bridgeObjectRetain();
        v85._unint64_t countAndFlagsBits = v82;
        v85._object = v84;
        String.append(_:)(v85);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v195 = v191;
        unint64_t v196 = v192;
        BOOL v86 = __OFADD__(v81, 1);
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)v81 + 1;
        if (v86) {
          goto LABEL_71;
        }
        uint64_t v87 = sub_1001AD080(v187);
        uint64_t v89 = v175;
        if (v88)
        {
          uint64_t v90 = v87;
          unint64_t v91 = v88;
          uint64_t v92 = v174;
          uint64_t v93 = v155;
          v157(v174, v159, v155);
          uint64_t v94 = v168;
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v95 = Logger.logObject.getter();
          os_log_type_t v96 = static os_log_type_t.default.getter();
          int v97 = v96;
          if (os_log_type_enabled(v95, v96))
          {
            uint64_t v98 = swift_slowAlloc();
            uint64_t v150 = (char *)swift_slowAlloc();
            id v191 = v150;
            *(_DWORD *)uint64_t v98 = v152;
            v147[1] = v98 + 4;
            int v149 = v97;
            os_log_t v148 = v95;
            uint64_t v100 = *(void *)(v94 + 16);
            unint64_t v99 = *(void *)(v94 + 24);
            swift_bridgeObjectRetain();
            *(void *)long long __dst = sub_1000993AC(v100, v99, (uint64_t *)&v191);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v98 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(void *)long long __dst = sub_1000993AC(v90, v91, (uint64_t *)&v191);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            os_log_t v101 = v148;
            _os_log_impl((void *)&_mh_execute_header, v148, (os_log_type_t)v149, "Read service name for %s as '%s'", (uint8_t *)v98, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_release_n();
          }
          v156(v92, v93);
          uint64_t v113 = v182;
          uint64_t v114 = (uint64_t)v160;
          swift_beginAccess();
          id v195 = (char *)v90;
          unint64_t v196 = v91;
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v102 = v155;
          v157(v175, v159, v155);
          uint64_t v103 = v168;
          swift_retain();
          uint64_t v104 = Logger.logObject.getter();
          os_log_type_t v105 = static os_log_type_t.default.getter();
          int v106 = v105;
          if (os_log_type_enabled(v104, v105))
          {
            uint64_t v107 = swift_slowAlloc();
            uint64_t v150 = (char *)swift_slowAlloc();
            id v191 = v150;
            *(_DWORD *)uint64_t v107 = v152;
            int v149 = v106;
            os_log_t v148 = v104;
            uint64_t v109 = *(void *)(v103 + 16);
            unint64_t v108 = *(void *)(v103 + 24);
            swift_bridgeObjectRetain();
            *(void *)long long __dst = sub_1000993AC(v109, v108, (uint64_t *)&v191);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            swift_bridgeObjectRelease();
            *(_WORD *)(v107 + 12) = 2080;
            swift_beginAccess();
            uint64_t v110 = (uint64_t)v195;
            unint64_t v111 = v196;
            swift_bridgeObjectRetain();
            *(void *)long long __dst = sub_1000993AC(v110, v111, (uint64_t *)&v191);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            os_log_t v112 = v148;
            _os_log_impl((void *)&_mh_execute_header, v148, (os_log_type_t)v149, "No service name for %s, using generated %s", (uint8_t *)v107, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release();
          }
          v156(v89, v102);
          uint64_t v113 = v182;
          uint64_t v114 = (uint64_t)v160;
        }
        char v115 = v181;
        uint64_t v116 = v171;
        id v117 = v167;
        unint64_t v20 = v166;
        ((void (*)(uint64_t, id, uint64_t))v166)(v114, v167, v113);
        uint64_t v118 = *(void *)(*v115 + 16);
        id v163 = (_UNKNOWN **)isUniquelyReferenced_nonNull_native;
        if (!v118) {
          goto LABEL_52;
        }
        swift_bridgeObjectRetain();
        sub_10016DF28(v114);
        if ((v119 & 1) == 0) {
          break;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v120 = v182;
        v116(v114, v182);
        swift_bridgeObjectRelease();
LABEL_53:
        swift_beginAccess();
        id v166 = v195;
        uint64_t v124 = v176;
        id v125 = v117;
        unint64_t v126 = v196;
        ((void (*)(char *, id, uint64_t))v20)(v176, v125, v120);
        swift_beginAccess();
        uint64_t v127 = v177;
        ((void (*)(char *, char *, uint64_t))v20)(v177, v124, v120);
        swift_bridgeObjectRetain_n();
        id v167 = v162;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v44 = v179;
        ((void (*)(unint64_t, char *, uint64_t))v20)(v179, v127, v120);
        *(void *)long long __dst = *v115;
        uint64_t v1 = *(NSObject **)__dst;
        *char v115 = 0x8000000000000000;
        unint64_t v17 = sub_10016DF28(v44);
        Class v129 = v1[2].isa;
        BOOL v130 = (v128 & 1) == 0;
        uint64_t v131 = (uint64_t)v129 + v130;
        if (__OFADD__(v129, v130)) {
          goto LABEL_72;
        }
        char v132 = v128;
        int64_t v133 = v171;
        if ((uint64_t)v1[3].isa >= v131)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((v128 & 1) == 0) {
              goto LABEL_66;
            }
          }
          else
          {
            uint64_t v1 = __dst;
            sub_1001F7928();
            if ((v132 & 1) == 0) {
              goto LABEL_66;
            }
          }
        }
        else
        {
          sub_1001EFEA4(v131, isUniquelyReferenced_nonNull_native);
          uint64_t v1 = *(NSObject **)__dst;
          unint64_t v134 = sub_10016DF28(v179);
          if ((v132 & 1) != (v135 & 1)) {
            goto LABEL_77;
          }
          unint64_t v17 = v134;
          if ((v132 & 1) == 0)
          {
LABEL_66:
            __break(1u);
            goto LABEL_67;
          }
        }
        uint64_t v136 = *(void **)(*(void *)(*(void *)__dst + 56) + 8 * v17);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v136 = sub_1001024AC(0, v136[2] + 1, 1, v136);
        }
        unint64_t v138 = v136[2];
        unint64_t v137 = v136[3];
        if (v138 >= v137 >> 1) {
          uint64_t v136 = sub_1001024AC((void *)(v137 > 1), v138 + 1, 1, v136);
        }
        v136[2] = v138 + 1;
        uint64_t v139 = &v136[3 * v138];
        v139[4] = v166;
        v139[5] = v126;
        uint64_t v140 = v167;
        v139[6] = v167;
        uint64_t v190 = v136;
        uint64_t v141 = v179;
        sub_1001E40BC((uint64_t *)&v190, 1, (uint64_t *)__dst, v17, v179);
        swift_bridgeObjectRelease();
        uint64_t v142 = v141;
        uint64_t v143 = v182;
        v133(v142, v182);
        *uint64_t v181 = *(void *)__dst;
        v133((uint64_t)v177, v143);
        v133((uint64_t)v176, v143);
        swift_endAccess();

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
LABEL_32:
        ++v16;
        unint64_t v44 = v184;
        if (v186 == v183) {
          goto LABEL_74;
        }
      }
      swift_bridgeObjectRelease();
LABEL_52:
      uint64_t v121 = v182;
      v116(v114, v182);
      uint64_t v122 = (uint64_t)v180;
      ((void (*)(char *, id, uint64_t))v20)(v180, v117, v121);
      swift_beginAccess();
      char v123 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)long long __dst = *v115;
      *char v115 = 0x8000000000000000;
      sub_1001F4D34((uint64_t)_swiftEmptyArrayStorage, v122, v123);
      uint64_t v120 = v121;
      *char v115 = *(void *)__dst;
      swift_bridgeObjectRelease();
      v116(v122, v121);
      swift_endAccess();
      goto LABEL_53;
    }
    __break(1u);
LABEL_77:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_67:
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v16);
    uint64_t v144 = Logger.logObject.getter();
    os_log_type_t v145 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v144, v145))
    {
      uint64_t v146 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v146 = 0;
      _os_log_impl((void *)&_mh_execute_header, v144, v145, "No accessory to enumerate sensors from", v146, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  }
  return result;
}

void sub_1001AC33C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v91 = a6;
  uint64_t v92 = a5;
  uint64_t v93 = a3;
  uint64_t v8 = type metadata accessor for ComponentType();
  uint64_t v90 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v94 - 8);
  uint64_t v12 = __chkstk_darwin(v94);
  uint64_t v14 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  unint64_t v17 = (char *)&v86 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v89 = (char *)&v86 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  unint64_t v88 = (char *)&v86 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v86 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v86 - v25;
  uint64_t v27 = swift_projectBox();
  if (a2 || !a1)
  {
    uint64_t v34 = v94;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v26, v93 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v94);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      double v37 = (uint8_t *)swift_slowAlloc();
      v97[0] = swift_slowAlloc();
      *(_DWORD *)double v37 = 136315138;
      *(void *)&v96[0] = a2;
      swift_errorRetain();
      sub_1000992E8(&qword_1002AA080);
      uint64_t v38 = String.init<A>(describing:)();
      *(void *)&v96[0] = sub_1000993AC(v38, v39, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unable to read characteristic: %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v26, v94);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v26, v34);
    }
    return;
  }
  uint64_t v86 = v27;
  id v28 = [a1 metadata];
  if (!v28) {
    goto LABEL_23;
  }
  uint64_t v29 = v28;
  id v30 = [v28 format];

  if (!v30) {
    goto LABEL_23;
  }
  uint64_t v87 = v11;
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  if (v31 == 0x38746E6975 && v33 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = v87;
  }
  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v11 = v87;
    if ((v40 & 1) == 0) {
      goto LABEL_23;
    }
  }
  if ([a1 value])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v96, 0, sizeof(v96));
  }
  sub_1000A5BE8((uint64_t)v96, (uint64_t)v97);
  if (v97[3])
  {
    if (swift_dynamicCast())
    {
      uint64_t v41 = v92;
      char v42 = (char)v95;
      switch(v95)
      {
        case 3u:
          uint64_t v63 = v90;
          (*(void (**)(char *, void, uint64_t))(v90 + 104))(v10, enum case for ComponentType.Battery(_:), v8);
          uint64_t v64 = v86;
          swift_beginAccess();
          (*(void (**)(uint64_t, char *, uint64_t))(v63 + 40))(v64, v10, v8);
          swift_beginAccess();
          *(void *)(v41 + 16) = 0x79726574746162;
          *(void *)(v41 + 24) = 0xE700000000000000;
          swift_bridgeObjectRelease();
          uint64_t v65 = v94;
          unint64_t v66 = v89;
          (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v89, v93 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v94);
          char v67 = v91;
          uint64_t v68 = Logger.logObject.getter();
          os_log_type_t v69 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v68, v69))
          {
            uint64_t v70 = (uint8_t *)swift_slowAlloc();
            unint64_t v71 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v70 = 138412290;
            uint64_t v95 = v67;
            uint64_t v72 = v67;
            uint64_t v11 = v87;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *unint64_t v71 = v67;

            _os_log_impl((void *)&_mh_execute_header, v68, v69, "Found Battery service %@", v70, 0xCu);
            sub_1000992E8(&qword_1002A7C40);
            swift_arrayDestroy();
            unint64_t v66 = v89;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v68 = v67;
          }

          (*(void (**)(char *, uint64_t))(v11 + 8))(v66, v65);
          break;
        case 2u:
          uint64_t v73 = v90;
          (*(void (**)(char *, void, uint64_t))(v90 + 104))(v10, enum case for ComponentType.Button(_:), v8);
          uint64_t v74 = v86;
          swift_beginAccess();
          (*(void (**)(uint64_t, char *, uint64_t))(v73 + 40))(v74, v10, v8);
          swift_beginAccess();
          *(void *)(v41 + 16) = 0x6E6F74747562;
          *(void *)(v41 + 24) = 0xE600000000000000;
          swift_bridgeObjectRelease();
          uint64_t v45 = v94;
          id v75 = v88;
          (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v88, v93 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v94);
          os_log_type_t v76 = v91;
          uint64_t v77 = Logger.logObject.getter();
          os_log_type_t v78 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v77, v78))
          {
            char v79 = (uint8_t *)swift_slowAlloc();
            uint64_t v80 = (void *)swift_slowAlloc();
            *(_DWORD *)char v79 = 138412290;
            uint64_t v11 = v87;
            uint64_t v95 = v76;
            uint64_t v81 = v76;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *uint64_t v80 = v76;

            uint64_t v45 = v94;
            _os_log_impl((void *)&_mh_execute_header, v77, v78, "Found Button service %@", v79, 0xCu);
            sub_1000992E8(&qword_1002A7C40);
            swift_arrayDestroy();
            id v75 = v88;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v77 = v76;
          }

          uint64_t v61 = *(void (**)(char *, uint64_t))(v11 + 8);
          size_t v62 = v75;
          goto LABEL_27;
        case 1u:
          uint64_t v43 = v90;
          (*(void (**)(char *, void, uint64_t))(v90 + 104))(v10, enum case for ComponentType.LED(_:), v8);
          uint64_t v44 = v86;
          swift_beginAccess();
          (*(void (**)(uint64_t, char *, uint64_t))(v43 + 40))(v44, v10, v8);
          swift_beginAccess();
          *(void *)(v41 + 16) = 6579564;
          *(void *)(v41 + 24) = 0xE300000000000000;
          swift_bridgeObjectRelease();
          uint64_t v45 = v94;
          (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v24, v93 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v94);
          uint64_t v46 = v91;
          id v47 = Logger.logObject.getter();
          os_log_type_t v48 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v47, v48))
          {
            id v49 = (uint8_t *)swift_slowAlloc();
            id v50 = (void *)swift_slowAlloc();
            *(_DWORD *)id v49 = 138412290;
            uint64_t v95 = v46;
            NSString v51 = v46;
            uint64_t v11 = v87;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *id v50 = v46;

            uint64_t v45 = v94;
            _os_log_impl((void *)&_mh_execute_header, v47, v48, "Found LED service %@", v49, 0xCu);
            sub_1000992E8(&qword_1002A7C40);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            id v47 = v46;
          }

          uint64_t v61 = *(void (**)(char *, uint64_t))(v11 + 8);
          size_t v62 = v24;
          goto LABEL_27;
        default:
          uint64_t v82 = v94;
          (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v17, v93 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v94);
          id v83 = Logger.logObject.getter();
          os_log_type_t v84 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v83, v84))
          {
            Swift::String v85 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)Swift::String v85 = 16777472;
            LOBYTE(v97[0]) = v42;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v83, v84, "Found unknown sensor type %hhu, ignoring", v85, 5u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v82);
          break;
      }
      return;
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)v97, &qword_1002AA5F0);
  }
LABEL_23:
  uint64_t v45 = v94;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v93 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v94);
  id v52 = a1;
  id v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v53, v54))
  {

    uint64_t v61 = *(void (**)(char *, uint64_t))(v11 + 8);
    size_t v62 = v14;
LABEL_27:
    v61(v62, v45);
    return;
  }
  uint64_t v87 = v11;
  unint64_t v55 = (uint8_t *)swift_slowAlloc();
  v97[0] = swift_slowAlloc();
  *(_DWORD *)unint64_t v55 = 136315138;
  id v56 = [v52 type];
  if (v56)
  {
    uint64_t v57 = v56;
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v60 = v59;

    *(void *)&v96[0] = sub_1000993AC(v58, v60, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Characteristic not convertable to UInt8: %s", v55, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v87 + 8))(v14, v94);
  }
  else
  {

    __break(1u);
  }
}

uint64_t sub_1001AD080(void *a1)
{
  uint64_t v2 = (void *)type metadata accessor for Logger();
  uint64_t v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t)v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  uint64_t v7 = v6 + 16;
  uint64_t v64 = v6;
  *(void *)(v6 + 24) = 0;
  id v8 = [a1 type];
  if (!v8) {
    goto LABEL_37;
  }
  uint64_t v9 = v8;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unint64_t v60 = (uint8_t *)[self UUIDWithString:v10];

  id v11 = [a1 characteristics];
  if (!v11) {
LABEL_38:
  }
    __break(1u);
  uint64_t v12 = v11;
  sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v13 >> 62) {
    goto LABEL_32;
  }
  uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v14)
  {
    uint64_t v57 = v5;
    uint64_t v58 = v2;
    uint64_t v56 = v59 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
    unint64_t v63 = v13 & 0xC000000000000001;
    v53[1] = v7;
    swift_beginAccess();
    unint64_t v55 = (void (**)(uint64_t, uint64_t, void *))(v3 + 16);
    os_log_type_t v54 = (void (**)(uint64_t, void *))(v3 + 8);
    uint64_t v5 = 4;
    uint64_t v15 = &selRef_authSession_authComplete_;
    p_prots = &OBJC_PROTOCOL____TtP11DockKitCore22XPCDaemonDebugProtocol_.prots;
    uint64_t v61 = v14;
    unint64_t v62 = v13;
    while (1)
    {
      uint64_t v3 = v5 - 4;
      unint64_t v17 = v63 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v13 + 8 * v5);
      uint64_t v2 = v17;
      uint64_t v7 = v5 - 3;
      if (__OFADD__(v3, 1)) {
        break;
      }
      id v18 = [v17 v15[41]];
      if (!v18)
      {
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      uint64_t v19 = v18;
      uint64_t v65 = v5 - 3;
      uint64_t v20 = [v18 p_prots[195]];

      uint64_t v21 = v15;
      id v22 = [v2 v15[41]];
      if (!v22) {
        goto LABEL_35;
      }
      uint64_t v23 = v22;
      id v24 = [v22 p_prots[195]];

      id v25 = [v24 data];
      uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v28 = v27;

      sub_1001A6570(12, v26, v28, v69);
      uint64_t v30 = v69[0];
      unint64_t v29 = v69[1];
      uint64_t v31 = sub_1000992E8((uint64_t *)&unk_1002AAA80);
      v68[3] = v31;
      v68[4] = sub_1000EAA74((unint64_t *)&qword_1002A8FE0, (uint64_t *)&unk_1002AAA80);
      v68[0] = &off_1002748F8;
      uint64_t v32 = sub_1000A5DA4(v68, v31);
      uint64_t v33 = *v32;
      size_t v34 = *(void *)(*v32 + 16);
      if (v34)
      {
        if (v34 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v67 = v34;
          memcpy(__dst, (const void *)(v33 + 32), v34);
          uint64_t v37 = *(void *)__dst;
          unint64_t v38 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v67 << 48);
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          uint64_t v35 = __DataStorage.init(bytes:length:)();
          uint64_t v36 = v35;
          if (v34 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            uint64_t v37 = swift_allocObject();
            *(void *)(v37 + 16) = 0;
            *(void *)(v37 + 24) = v34;
            unint64_t v38 = v36 | 0x8000000000000000;
          }
          else
          {
            uint64_t v37 = v34 << 32;
            unint64_t v38 = v35 | 0x4000000000000000;
          }
        }
      }
      else
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0xC000000000000000;
      }
      sub_100099BCC((uint64_t)v68);
      char v39 = sub_1001B0F38(v30, v29, v37, v38);
      sub_1000A6240(v37, v38);
      sub_1000A6240(v30, v29);

      uint64_t v15 = v21;
      p_prots = &OBJC_PROTOCOL____TtP11DockKitCore22XPCDaemonDebugProtocol_.prots;
      if (v39)
      {
        id v40 = [v2 v21[41]];
        if (!v40) {
          goto LABEL_36;
        }
        uint64_t v41 = v40;
        id v42 = [v40 UUID];

        int v43 = sub_10013A984();
        if (qword_1002A7BE8 != -1) {
          swift_once();
        }
        if (v43 == sub_10013A984())
        {
          uint64_t v44 = v57;
          uint64_t v45 = v58;
          (*v55)(v57, v56, v58);
          uint64_t v46 = Logger.logObject.getter();
          os_log_type_t v47 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v46, v47))
          {
            os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)os_log_type_t v48 = 0;
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "Found sensor name characteristic, reading", v48, 2u);
            swift_slowDealloc();
          }

          (*v54)(v44, v45);
          uint64_t v49 = v59;
          swift_retain();
          uint64_t v50 = v64;
          swift_retain();
          sub_1001B1094(v20, v60, v49, v49, v50);
          swift_release();
          swift_release();
          p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL____TtP11DockKitCore22XPCDaemonDebugProtocol_ + 16);
        }
      }

      if (!*(void *)(v64 + 24))
      {
        ++v5;
        unint64_t v13 = v62;
        if (v65 != v61) {
          continue;
        }
      }
      goto LABEL_33;
    }
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_33:

  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v51 = *(void *)(v64 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v51;
}

void sub_1001AD794(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v39 - v13;
  if (!a2 && a1)
  {
    id v15 = [a1 metadata];
    if (!v15) {
      goto LABEL_22;
    }
    uint64_t v16 = v15;
    id v17 = [v15 format];

    if (!v17) {
      goto LABEL_22;
    }
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    if (v18 == 0x676E69727473 && v20 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
      {
LABEL_22:
        (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v8);
        id v30 = a1;
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v39 = v9;
          uint64_t v40 = v8;
          uint64_t v33 = (uint8_t *)swift_slowAlloc();
          v44[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v33 = 136315138;
          id v34 = [v30 type];
          if (v34)
          {
            uint64_t v35 = v34;
            uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v38 = v37;

            *(void *)&v43[0] = sub_1000993AC(v36, v38, v44);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v31, v32, "Characteristic not convertable to UInt8: %s", v33, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v40);
          }
          else
          {

            __break(1u);
          }
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        }
        return;
      }
    }
    if ([a1 value])
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v43, 0, sizeof(v43));
    }
    sub_1000A5BE8((uint64_t)v43, (uint64_t)v44);
    if (v44[3])
    {
      if (swift_dynamicCast())
      {
        uint64_t v28 = v41;
        uint64_t v29 = v42;
        swift_beginAccess();
        *(void *)(a4 + 16) = v28;
        *(void *)(a4 + 24) = v29;
        swift_bridgeObjectRelease();
        return;
      }
    }
    else
    {
      sub_1000A61E4((uint64_t)v44, &qword_1002AA5F0);
    }
    goto LABEL_22;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v39 - v13, a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    id v25 = (uint8_t *)swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)id v25 = 136315138;
    uint64_t v40 = v8;
    *(void *)&v43[0] = a2;
    swift_errorRetain();
    sub_1000992E8(&qword_1002AA080);
    uint64_t v26 = String.init<A>(describing:)();
    *(void *)&v43[0] = sub_1000993AC(v26, v27, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to read characteristic: %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v40);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
}

void sub_1001ADD24(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  id v48 = a2;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void **)(v6 + 32);
  if (v13 && (self, (uint64_t v14 = swift_dynamicCastObjCClass()) != 0))
  {
    id v15 = (void *)v14;
    id v16 = v13;
    if ([v15 isSecuritySessionOpen])
    {
      id v44 = v16;
      uint64_t v45 = v10;
      uint64_t v43 = v9;
      id v17 = [v15 primaryAccessory];
      if (v17)
      {
        uint64_t v18 = v17;
        NSString v19 = [v48 UUIDString];
        if (!v19)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v19 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        NSString v20 = [a3 UUIDString];
        if (!v20)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v20 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        id v21 = [v18 characteristicOfType:v19 serviceType:v20];

        uint64_t v22 = v45;
        if (v21)
        {
          sub_1000A5DA4(a1, a1[3]);
          id v23 = v21;
          uint64_t v24 = _bridgeAnythingToObjectiveC<A>(_:)();
          id v25 = [self writeRequestTupleForCharacteristic:v23 value:v24 authorizationData:0 timedWrite:0 responseValue:0 type:0];
          swift_unknownObjectRelease();

          if (v25)
          {
            sub_1000992E8(&qword_1002A8340);
            uint64_t v26 = swift_allocObject();
            *(_OWORD *)(v26 + 16) = xmmword_100240BF0;
            *(void *)(v26 + 32) = v25;
            aBlock[0] = v26;
            specialized Array._endMutation()();
            sub_100099C7C(0, &qword_1002AC6C8);
            id v48 = v25;
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            uint64_t v28 = *(void **)(v6 + 40);
            aBlock[4] = v46;
            aBlock[5] = v47;
            aBlock[0] = (uint64_t)_NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            uint64_t aBlock[2] = (uint64_t)sub_1001A6714;
            uint64_t aBlock[3] = (uint64_t)&unk_100279808;
            uint64_t v29 = _Block_copy(aBlock);
            id v30 = v28;
            swift_retain();
            swift_release();
            [v15 writeCharacteristicValues:isa timeout:v30 completionQueue:v29 completionHandler:0.0];
            _Block_release(v29);

            return;
          }
        }
        uint64_t v33 = v43;
        (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v12, v6 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v43);
        id v34 = v48;
        uint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, v36))
        {
          unint64_t v37 = (uint8_t *)swift_slowAlloc();
          id v48 = (id)swift_slowAlloc();
          aBlock[0] = (uint64_t)v48;
          *(_DWORD *)unint64_t v37 = 136315138;
          uint64_t v47 = (uint64_t)(v37 + 4);
          id v38 = [v34 UUIDString];
          uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v41 = v40;

          void aBlock[7] = sub_1000993AC(v39, v41, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unable to write characterisitic %s", v37, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v45 + 8))(v12, v43);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v33);
        }
        sub_1000B8650();
        swift_allocError();
        *uint64_t v42 = 1;
        swift_willThrow();
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      sub_1000B8650();
      swift_allocError();
      *os_log_type_t v32 = 2;
      swift_willThrow();
    }
  }
  else
  {
    sub_1000B8650();
    swift_allocError();
    *uint64_t v31 = 2;
    swift_willThrow();
  }
}

uint64_t sub_1001AE338(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v4 = sub_1000992E8(&qword_1002AC6C0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[3] = &type metadata for Bool;
  LOBYTE(v22[0]) = a3;
  uint64_t v8 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v9 = swift_allocObject();
  long long v19 = xmmword_100240BE0;
  *(_OWORD *)(v9 + 16) = xmmword_100240BE0;
  *(void *)(v9 + 56) = &type metadata for UInt32;
  *(void *)(v9 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v9 + 32) = 259;
  String.init(format:_:)();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v8 UUIDWithString:v10];

  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = v19;
  *(void *)(v12 + 56) = &type metadata for UInt32;
  *(void *)(v12 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v12 + 32) = 512;
  String.init(format:_:)();
  NSString v13 = String._bridgeToObjectiveC()();
  uint64_t v14 = v20;
  swift_bridgeObjectRelease();
  id v15 = [v8 UUIDWithString:v13];

  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v14, v4);
  unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v17 + v16, v7, v4);
  swift_retain();
  sub_1001ADD24(v22, v11, v15, (uint64_t)sub_1001B615C, v17);
  swift_release();

  return sub_100099BCC((uint64_t)v22);
}

void sub_1001AE620(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (unint64_t)TrajectoryCommand.Progress.encode()();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    uint64_t v5 = *(void (**)(void *))(a2
                                       + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback);
    if (v5)
    {
      swift_retain();
      v5(v4);
      sub_1000BF118((uint64_t)v5);
    }
  }
}

uint64_t sub_1001AE69C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v6 = sub_1000992E8(&qword_1002AC6C0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24[3] = &type metadata for Data;
  v24[0] = a3;
  v24[1] = a4;
  NSString v10 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v11 = swift_allocObject();
  long long v21 = xmmword_100240BE0;
  *(_OWORD *)(v11 + 16) = xmmword_100240BE0;
  *(void *)(v11 + 56) = &type metadata for UInt32;
  *(void *)(v11 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v11 + 32) = 265;
  sub_1000A618C(a3, a4);
  String.init(format:_:)();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v13 = [v10 UUIDWithString:v12];

  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = v21;
  *(void *)(v14 + 56) = &type metadata for UInt32;
  *(void *)(v14 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v14 + 32) = 512;
  String.init(format:_:)();
  NSString v15 = String._bridgeToObjectiveC()();
  uint64_t v16 = v22;
  swift_bridgeObjectRelease();
  id v17 = [v10 UUIDWithString:v15];

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v16, v6);
  unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v23;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v19 + v18, v9, v6);
  swift_retain();
  sub_1001ADD24(v24, v13, v17, (uint64_t)sub_1001B0CA8, v19);
  swift_release();

  return sub_100099BCC((uint64_t)v24);
}

void sub_1001AE998()
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v1 = *(id *)(v0 + 24);
  sub_1001891D0(v1);
  id v32 = v2;

  if (!v32) {
    return;
  }
  unint64_t v3 = *(void **)(v0 + 16);
  if (!v3)
  {
    uint64_t v29 = v32;
    goto LABEL_25;
  }
  id v4 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100240BE0;
  *(void *)(v5 + 56) = &type metadata for UInt32;
  *(void *)(v5 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v5 + 32) = 512;
  uint64_t v31 = v3;
  String.init(format:_:)();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v30 = [v4 UUIDWithString:v6];

  uint64_t v7 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral;
  uint64_t v8 = *(void **)&v31[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
  if (!v8 || (id v9 = [v8 services]) == 0)
  {

    uint64_t v29 = v30;
LABEL_25:

    return;
  }
  NSString v10 = v9;
  sub_100099C7C(0, (unint64_t *)&unk_1002A8F30);
  uint64_t v11 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v12 = (unint64_t)v30;
  unint64_t v13 = (unint64_t)sub_1001138CC((unint64_t)v11);
  swift_bridgeObjectRelease();

  if (!(v13 >> 62))
  {
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
LABEL_29:

    swift_bridgeObjectRelease();
    return;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_29;
  }
LABEL_9:
  if ((v13 & 0xC000000000000001) != 0)
  {
    id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_34:
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_16;
      }
      goto LABEL_35;
    }
    id v14 = *(id *)(v13 + 32);
  }
  uint64_t v11 = v14;

  swift_bridgeObjectRelease();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100240BE0;
  *(void *)(v15 + 56) = &type metadata for UInt32;
  *(void *)(v15 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v15 + 32) = 260;
  String.init(format:_:)();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v17 = [v4 UUIDWithString:v16];

  if (!*(void *)&v31[v7] || (id v18 = [v11 characteristics]) == 0)
  {

LABEL_24:
    uint64_t v29 = v31;
    goto LABEL_25;
  }
  uint64_t v19 = v18;
  sub_100099C7C(0, (unint64_t *)&unk_1002A9F60);
  unint64_t v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v4 = v17;
  unint64_t v12 = (unint64_t)sub_1001138CC(v20);
  swift_bridgeObjectRelease();

  if (v12 >> 62) {
    goto LABEL_34;
  }
  if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_35:

    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
LABEL_16:
  if ((v12 & 0xC000000000000001) != 0)
  {
    id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v21 = *(id *)(v12 + 32);
  }
  uint64_t v22 = v21;

  swift_bridgeObjectRelease();
  sub_1000992E8((uint64_t *)&unk_1002AA6C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002413A0;
  type metadata accessor for Actuator();
  *(void *)(inited + 32) = static Actuator.Yaw.getter();
  *(void *)(inited + 40) = v24;
  *(void *)(inited + 48) = static Actuator.Pitch.getter();
  *(void *)(inited + 56) = v25;
  *(void *)(inited + 64) = static Actuator.Roll.getter();
  *(void *)(inited + 72) = v26;
  id v27 = v32;
  uint64_t v28 = sub_1001B3AE4(inited);

  swift_setDeallocating();
  swift_arrayDestroy();
  sub_1001A6C14((uint64_t)v28, (uint64_t)&off_100274CD0, 256, (uint64_t)v22);

  swift_bridgeObjectRelease();
}

uint64_t sub_1001AEEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v2 = sub_1000992E8(&qword_1002AC6C0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[3] = &type metadata for Bool;
  LOBYTE(v20[0]) = 1;
  NSString v6 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v7 = swift_allocObject();
  long long v17 = xmmword_100240BE0;
  *(_OWORD *)(v7 + 16) = xmmword_100240BE0;
  *(void *)(v7 + 56) = &type metadata for UInt32;
  *(void *)(v7 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v7 + 32) = 257;
  String.init(format:_:)();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v6 UUIDWithString:v8];

  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = v17;
  *(void *)(v10 + 56) = &type metadata for UInt32;
  *(void *)(v10 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v10 + 32) = 256;
  String.init(format:_:)();
  NSString v11 = String._bridgeToObjectiveC()();
  uint64_t v12 = v18;
  swift_bridgeObjectRelease();
  id v13 = [v6 UUIDWithString:v11];

  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v12, v2);
  unint64_t v14 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v15 + v14, v5, v2);
  swift_retain();
  sub_1001ADD24(v20, v9, v13, (uint64_t)sub_1001B6208, v15);
  swift_release();

  return sub_100099BCC((uint64_t)v20);
}

uint64_t sub_1001AF1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v2 = sub_1000992E8(&qword_1002AC6C0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[3] = &type metadata for Bool;
  LOBYTE(v20[0]) = 1;
  NSString v6 = self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v7 = swift_allocObject();
  long long v17 = xmmword_100240BE0;
  *(_OWORD *)(v7 + 16) = xmmword_100240BE0;
  *(void *)(v7 + 56) = &type metadata for UInt32;
  *(void *)(v7 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v7 + 32) = 258;
  String.init(format:_:)();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v6 UUIDWithString:v8];

  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = v17;
  *(void *)(v10 + 56) = &type metadata for UInt32;
  *(void *)(v10 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v10 + 32) = 256;
  String.init(format:_:)();
  NSString v11 = String._bridgeToObjectiveC()();
  uint64_t v12 = v18;
  swift_bridgeObjectRelease();
  id v13 = [v6 UUIDWithString:v11];

  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v12, v2);
  unint64_t v14 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v15 + v14, v5, v2);
  swift_retain();
  sub_1001ADD24(v20, v9, v13, (uint64_t)sub_1001B62F0, v15);
  swift_release();

  return sub_100099BCC((uint64_t)v20);
}

uint64_t sub_1001AF4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6)
{
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  long long v17 = (char *)v31 - v16;
  uint64_t v18 = a3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  if (a2)
  {
    v19((char *)v31 - v16, v18, v11);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v33 = a4;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc();
      id v32 = a5;
      uint64_t v35 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      v31[1] = v23 + 4;
      swift_getErrorValue();
      uint64_t v25 = Error.localizedDescription.getter();
      uint64_t v34 = sub_1000993AC(v25, v26, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, v32, v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
  else
  {
    v19(v15, v18, v11);
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, a6, v29, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  LOBYTE(v35) = a2 == 0;
  sub_1000992E8(&qword_1002AC6C0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1001AF7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  *uint64_t v3 = a2;
  v3[1] = a3;
  sub_1000CC298(a2);
  return sub_1000BF118(v4);
}

uint64_t sub_1001AF83C(uint64_t a1)
{
  id v1 = (void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback);
  void *v1 = 0;
  v1[1] = 0;
  return sub_1000BF118(v2);
}

uint64_t sub_1001AF878(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a3;
    *(void *)(v8 + 24) = a4;
    id v9 = sub_1001B60DC;
  }
  else
  {
    id v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks);
  swift_beginAccess();
  sub_1000CC298(a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v10;
  *uint64_t v10 = 0x8000000000000000;
  sub_1001F5EF4((uint64_t)v9, v8, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v10 = v13;
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t sub_1001AF980(uint64_t a1, int a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_feedbackCallbacks;
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)v8 + 16))
  {
    uint64_t result = sub_10016DBD8(a2);
    if (v10)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v4);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 67109120;
        int v15 = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "De-registering feedback callback for pid %d", v13, 8u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_beginAccess();
      unint64_t v14 = sub_1001EDC6C(a2);
      uint64_t result = swift_endAccess();
      if (v14 >= 2) {
        return sub_1001A60CC(v14);
      }
    }
  }
  return result;
}

uint64_t sub_1001AFBA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v6);
  char v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = a2;
    *(_WORD *)os_log_type_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Registering trajectory progress feedback", v12, 2u);
    a2 = v17;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback);
  uint64_t v14 = *(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback);
  *uint64_t v13 = a2;
  v13[1] = a3;
  sub_1000CC298(a2);
  return sub_1000BF118(v14);
}

id *sub_1001AFD5C()
{
  id v1 = (char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_release();
  swift_release();
  sub_1000E996C(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload), *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 8), *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 16), (char)*(id *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24), *(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 32), *(unint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 40));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000BF118(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_startupFeedback));
  sub_1000BF118(*(uint64_t *)((char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trajectoryProgressCallback));
  uint64_t v3 = (char *)v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_lastImuStamp;
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_1001AFF1C()
{
  sub_1001AFD5C();

  return swift_deallocClassInstance();
}

uint64_t sub_1001AFF74()
{
  return type metadata accessor for DaemonAccessory();
}

uint64_t type metadata accessor for DaemonAccessory()
{
  uint64_t result = qword_1002AC1F8;
  if (!qword_1002AC1F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001AFFC8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

void destroy for SensorInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = *(void **)(a1 + 16);
}

void *_s14dockaccessoryd10SensorInfoVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

void *assignWithCopy for SensorInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[2];
  id v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for SensorInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for SensorInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SensorInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SensorInfo()
{
  return &type metadata for SensorInfo;
}

unsigned char *storeEnumTagSinglePayload for AccessoryPairingState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B03A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingState()
{
  return &type metadata for AccessoryPairingState;
}

unint64_t sub_1001B03DC()
{
  unint64_t result = qword_1002AC6B0;
  if (!qword_1002AC6B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AC6B0);
  }
  return result;
}

Swift::Int sub_1001B0430()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 24);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

void sub_1001B0484()
{
  id v1 = *(id *)(*(void *)v0 + 24);
  NSObject.hash(into:)();
}

Swift::Int sub_1001B04E0()
{
  Hasher.init(_seed:)();
  id v1 = *(id *)(*(void *)v0 + 24);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t sub_1001B0530(uint64_t *a1, uint64_t *a2)
{
  return sub_1001B0C30(*a1, *a2);
}

uint64_t sub_1001B053C()
{
  return sub_1001B6110(&qword_1002AC6B8, (void (*)(uint64_t))type metadata accessor for DaemonAccessory);
}

uint64_t sub_1001B0584(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

unsigned char *sub_1001B05AC@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    unint64_t result = (unsigned char *)sub_1001B0CBC(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = (unsigned char *)sub_1001B0D80((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    unint64_t result = (unsigned char *)sub_1001B0DFC((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1001B0624@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_1000A618C(a2, a3);
      char v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1001B0888);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_1000A6240(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_1001B0898(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_1000A618C(a1, a2);
      char v5 = sub_1001B0E80((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
      sub_1000A6240(a1, a2);
      goto LABEL_6;
    case 2uLL:
      uint64_t v10 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      char v5 = sub_1001B0E80(v11, v12, v10, a3, a4);
      swift_release();
      swift_release();
LABEL_6:
      sub_1000A6240(a3, a4);
      return v5 & 1;
    case 3uLL:
      memset(__s1, 0, 14);
      goto LABEL_8;
    default:
      __s1[0] = a1;
      LOWORD(__s1[1]) = a2;
      BYTE2(__s1[1]) = BYTE2(a2);
      BYTE3(__s1[1]) = BYTE3(a2);
      BYTE4(__s1[1]) = BYTE4(a2);
      BYTE5(__s1[1]) = BYTE5(a2);
LABEL_8:
      sub_1001B0624((uint64_t)__s1, a3, a4, &v14);
      sub_1000A6240(a3, a4);
      if (!v4) {
        char v5 = v14;
      }
      return v5 & 1;
  }
}

uint64_t sub_1001B0AC8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x1001B0B34);
  }
  return result;
}

uint64_t sub_1001B0B44(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x1001B0C10);
  }
  return result;
}

uint64_t sub_1001B0C30(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 24);
  int v3 = *(void **)(a2 + 24);
  v7[3] = type metadata accessor for DockCoreInfo();
  v7[0] = v3;
  id v4 = v2;
  id v5 = v3;
  LOBYTE(v2) = DockCoreInfo.isEqual(_:)();

  sub_1000A61E4((uint64_t)v7, &qword_1002AA5F0);
  return v2 & 1;
}

uint64_t sub_1001B0CA8(uint64_t a1, uint64_t a2)
{
  return sub_1001B6170(a1, a2, "Unable to send trajectory %s", "Sent trajectory command to accessory");
}

uint64_t sub_1001B0CBC(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1001B0D80(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1001B0DFC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1001B0E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_1001B0624(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_1001B0F38(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x1001B1074);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_20;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v15 = 1;
            }
            else
            {
              sub_1000A618C(a3, a4);
              char v15 = sub_1001B0898(a1, a2, a3, a4);
            }
          }
          else
          {
            char v15 = 0;
          }
          return v15 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_21;
        case 3uLL:
          char v15 = v8 == 0;
          return v15 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1001B1094(NSObject *a1, uint8_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_t v101 = a2;
  uint64_t v104 = a1;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v100 = *(uint8_t **)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v98 = (uint64_t *)((char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (uint8_t *)type metadata accessor for DispatchTime();
  uint64_t v99 = *((void *)v10 - 1);
  uint64_t v11 = __chkstk_darwin(v10);
  os_log_type_t v96 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  int v97 = (char *)&v87 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v87 - v15;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v102 = *(void *)(v17 - 8);
  uint64_t v103 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  int64_t v20 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  size_t v22 = (char *)&v87 - v21;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a4;
  *(void *)(v23 + 24) = a5;
  uint64_t v24 = a3;
  uint64_t v25 = *(void **)(a3 + 32);
  if (v25 && (self, (uint64_t v26 = swift_dynamicCastObjCClass()) != 0))
  {
    uint64_t v92 = v20;
    char v27 = (void *)v26;
    swift_retain();
    swift_retain();
    id v28 = v25;
    id v93 = v27;
    id v94 = v28;
    id v29 = [v27 primaryAccessory];
    uint64_t v95 = v23;
    if (!v29) {
      goto LABEL_14;
    }
    char v30 = v29;
    NSString v31 = [v104 UUIDString];
    uint64_t v90 = v16;
    uint64_t v91 = v8;
    if (!v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    NSString v32 = [(uint8_t *)v101 UUIDString];
    if (!v32)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v33 = [v30 characteristicOfType:v31 serviceType:v32];

    uint64_t v34 = v95;
    if (v33)
    {
      id v89 = v33;
      os_log_t v101 = v10;
      dispatch_group_t v35 = dispatch_group_create();
      uint64_t v36 = v24;
      uint64_t v37 = v24 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
      uint64_t v38 = v102;
      uint64_t v39 = v103;
      unint64_t v40 = v92;
      (*(void (**)(char *, uint64_t, NSObject *))(v102 + 16))(v92, v37, v103);
      unint64_t v41 = v104;
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v104 = v35;
        uint64_t v45 = (uint8_t *)v44;
        uint64_t v88 = swift_slowAlloc();
        aBlock[0] = v88;
        *(_DWORD *)uint64_t v45 = 136315138;
        id v46 = [v41 UUIDString];
        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v48 = v40;
        unint64_t v50 = v49;

        uint64_t v51 = v47;
        uint64_t v34 = v95;
        uint64_t v106 = sub_1000993AC(v51, v50, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Reading characteristic %s...", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        dispatch_group_t v35 = v104;
        swift_slowDealloc();

        (*(void (**)(char *, NSObject *))(v102 + 8))(v48, v103);
      }
      else
      {

        (*(void (**)(char *, NSObject *))(v38 + 8))(v40, v39);
      }
      dispatch_group_enter(v35);
      sub_1000992E8(&qword_1002A8340);
      uint64_t v66 = swift_allocObject();
      *(_OWORD *)(v66 + 16) = xmmword_100240BF0;
      unsigned __int8 v67 = v89;
      *(void *)(v66 + 32) = v89;
      aBlock[0] = v66;
      specialized Array._endMutation()();
      sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
      uint64_t v104 = v67;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      os_log_type_t v69 = *(void **)(v36 + 40);
      uint64_t v70 = (void *)swift_allocObject();
      v70[2] = v36;
      uint64_t v70[3] = v41;
      unsigned char v70[4] = sub_1001B3C50;
      v70[5] = v34;
      v70[6] = v35;
      aBlock[4] = (uint64_t)sub_1001B3C5C;
      aBlock[5] = (uint64_t)v70;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = (uint64_t)sub_1001A6714;
      uint64_t aBlock[3] = (uint64_t)&unk_1002798A8;
      unint64_t v71 = _Block_copy(aBlock);
      uint64_t v72 = v41;
      id v73 = v69;
      swift_retain();
      swift_retain();
      uint64_t v103 = v35;
      swift_release();
      [v93 readCharacteristicValues:isa timeout:v73 completionQueue:v71 completionHandler:10.0];
      _Block_release(v71);

      uint64_t v74 = v96;
      static DispatchTime.now()();
      id v75 = v98;
      *uint64_t v98 = 10;
      os_log_type_t v76 = v100;
      uint64_t v77 = (void (*)(void *, void, uint64_t))*((void *)v100 + 13);
      uint64_t v78 = v91;
      v77(v75, enum case for DispatchTimeInterval.seconds(_:), v91);
      char v79 = v97;
      + infix(_:_:)();
      uint64_t v80 = (void (*)(void *, uint64_t))*((void *)v76 + 1);
      v80(v75, v78);
      uint64_t v81 = *(void (**)(char *, uint8_t *))(v99 + 8);
      uint64_t v82 = v74;
      id v83 = v101;
      v81(v82, v101);
      *id v75 = 500;
      v77(v75, enum case for DispatchTimeInterval.milliseconds(_:), v78);
      os_log_type_t v84 = v90;
      + infix(_:_:)();
      v80(v75, v78);
      v81(v79, v83);
      Swift::String v85 = v103;
      OS_dispatch_group.wait(timeout:)();

      v81(v84, v83);
    }
    else
    {
LABEL_14:
      uint64_t v55 = v102;
      os_log_type_t v54 = v103;
      (*(void (**)(char *, uint64_t, NSObject *))(v102 + 16))(v22, v24 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v103);
      uint64_t v56 = v104;
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v104 = swift_slowAlloc();
        aBlock[0] = (uint64_t)v104;
        *(_DWORD *)uint64_t v59 = 136315138;
        uint64_t v100 = v59 + 4;
        os_log_t v101 = v59;
        id v60 = [v56 UUIDString];
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v63 = v62;

        uint64_t v106 = sub_1000993AC(v61, v63, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Accessory does not contain characteristic %s!", v101, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, NSObject *))(v102 + 8))(v22, v103);
      }
      else
      {

        (*(void (**)(char *, NSObject *))(v55 + 8))(v22, v54);
      }
      sub_1000B8650();
      uint64_t v64 = swift_allocError();
      *uint64_t v65 = 1;
      sub_1001AD794(0, v64, a4, a5);

      swift_errorRelease();
    }
  }
  else
  {
    sub_1000B8650();
    uint64_t v52 = swift_allocError();
    *id v53 = 1;
    swift_retain();
    swift_retain();
    sub_1001AD794(0, v52, a4, a5);
    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_1001B1B28(NSObject *a1, uint8_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_t v101 = a2;
  uint64_t v104 = a1;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v100 = *(uint8_t **)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v98 = (uint64_t *)((char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (uint8_t *)type metadata accessor for DispatchTime();
  uint64_t v99 = *((void *)v10 - 1);
  uint64_t v11 = __chkstk_darwin(v10);
  os_log_type_t v96 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  int v97 = (char *)&v87 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v87 - v15;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v102 = *(void *)(v17 - 8);
  uint64_t v103 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  int64_t v20 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  size_t v22 = (char *)&v87 - v21;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a4;
  *(void *)(v23 + 24) = a5;
  uint64_t v24 = a3;
  uint64_t v25 = *(void **)(a3 + 32);
  if (v25 && (self, (uint64_t v26 = swift_dynamicCastObjCClass()) != 0))
  {
    uint64_t v92 = v20;
    char v27 = (void *)v26;
    swift_retain();
    swift_retain();
    id v28 = v25;
    id v93 = v27;
    id v94 = v28;
    id v29 = [v27 primaryAccessory];
    uint64_t v95 = v23;
    if (!v29) {
      goto LABEL_14;
    }
    char v30 = v29;
    NSString v31 = [v104 UUIDString];
    uint64_t v90 = v16;
    uint64_t v91 = v8;
    if (!v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    NSString v32 = [(uint8_t *)v101 UUIDString];
    if (!v32)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v33 = [v30 characteristicOfType:v31 serviceType:v32];

    uint64_t v34 = v95;
    if (v33)
    {
      id v89 = v33;
      os_log_t v101 = v10;
      dispatch_group_t v35 = dispatch_group_create();
      uint64_t v36 = v24;
      uint64_t v37 = v24 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
      uint64_t v38 = v102;
      uint64_t v39 = v103;
      unint64_t v40 = v92;
      (*(void (**)(char *, uint64_t, NSObject *))(v102 + 16))(v92, v37, v103);
      unint64_t v41 = v104;
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v104 = v35;
        uint64_t v45 = (uint8_t *)v44;
        uint64_t v88 = swift_slowAlloc();
        aBlock[0] = v88;
        *(_DWORD *)uint64_t v45 = 136315138;
        id v46 = [v41 UUIDString];
        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v48 = v40;
        unint64_t v50 = v49;

        uint64_t v51 = v47;
        uint64_t v34 = v95;
        uint64_t v106 = sub_1000993AC(v51, v50, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Reading characteristic %s...", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        dispatch_group_t v35 = v104;
        swift_slowDealloc();

        (*(void (**)(char *, NSObject *))(v102 + 8))(v48, v103);
      }
      else
      {

        (*(void (**)(char *, NSObject *))(v38 + 8))(v40, v39);
      }
      dispatch_group_enter(v35);
      sub_1000992E8(&qword_1002A8340);
      uint64_t v66 = swift_allocObject();
      *(_OWORD *)(v66 + 16) = xmmword_100240BF0;
      unsigned __int8 v67 = v89;
      *(void *)(v66 + 32) = v89;
      aBlock[0] = v66;
      specialized Array._endMutation()();
      sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
      uint64_t v104 = v67;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      os_log_type_t v69 = *(void **)(v36 + 40);
      uint64_t v70 = (void *)swift_allocObject();
      v70[2] = v36;
      uint64_t v70[3] = v41;
      unsigned char v70[4] = sub_1001B5FA4;
      v70[5] = v34;
      v70[6] = v35;
      aBlock[4] = (uint64_t)sub_1001B3C5C;
      aBlock[5] = (uint64_t)v70;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = (uint64_t)sub_1001A6714;
      uint64_t aBlock[3] = (uint64_t)&unk_100279B78;
      unint64_t v71 = _Block_copy(aBlock);
      uint64_t v72 = v41;
      id v73 = v69;
      swift_retain();
      swift_retain();
      uint64_t v103 = v35;
      swift_release();
      [v93 readCharacteristicValues:isa timeout:v73 completionQueue:v71 completionHandler:10.0];
      _Block_release(v71);

      uint64_t v74 = v96;
      static DispatchTime.now()();
      id v75 = v98;
      *uint64_t v98 = 10;
      os_log_type_t v76 = v100;
      uint64_t v77 = (void (*)(void *, void, uint64_t))*((void *)v100 + 13);
      uint64_t v78 = v91;
      v77(v75, enum case for DispatchTimeInterval.seconds(_:), v91);
      char v79 = v97;
      + infix(_:_:)();
      uint64_t v80 = (void (*)(void *, uint64_t))*((void *)v76 + 1);
      v80(v75, v78);
      uint64_t v81 = *(void (**)(char *, uint8_t *))(v99 + 8);
      uint64_t v82 = v74;
      id v83 = v101;
      v81(v82, v101);
      *id v75 = 500;
      v77(v75, enum case for DispatchTimeInterval.milliseconds(_:), v78);
      os_log_type_t v84 = v90;
      + infix(_:_:)();
      v80(v75, v78);
      v81(v79, v83);
      Swift::String v85 = v103;
      OS_dispatch_group.wait(timeout:)();

      v81(v84, v83);
    }
    else
    {
LABEL_14:
      uint64_t v55 = v102;
      os_log_type_t v54 = v103;
      (*(void (**)(char *, uint64_t, NSObject *))(v102 + 16))(v22, v24 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v103);
      uint64_t v56 = v104;
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v104 = swift_slowAlloc();
        aBlock[0] = (uint64_t)v104;
        *(_DWORD *)uint64_t v59 = 136315138;
        uint64_t v100 = v59 + 4;
        os_log_t v101 = v59;
        id v60 = [v56 UUIDString];
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v63 = v62;

        uint64_t v106 = sub_1000993AC(v61, v63, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Accessory does not contain characteristic %s!", v101, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, NSObject *))(v102 + 8))(v22, v103);
      }
      else
      {

        (*(void (**)(char *, NSObject *))(v55 + 8))(v22, v54);
      }
      sub_1000B8650();
      uint64_t v64 = swift_allocError();
      *uint64_t v65 = 1;
      sub_1001A6F24(0, v64, a4, a5);

      swift_errorRelease();
    }
  }
  else
  {
    sub_1000B8650();
    uint64_t v52 = swift_allocError();
    *id v53 = 1;
    swift_retain();
    swift_retain();
    sub_1001A6F24(0, v52, a4, a5);
    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_1001B25BC(NSObject *a1, uint8_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_t v101 = a2;
  uint64_t v104 = a1;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v100 = *(uint8_t **)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v98 = (uint64_t *)((char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (uint8_t *)type metadata accessor for DispatchTime();
  uint64_t v99 = *((void *)v10 - 1);
  uint64_t v11 = __chkstk_darwin(v10);
  os_log_type_t v96 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  int v97 = (char *)&v87 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v87 - v15;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v102 = *(void *)(v17 - 8);
  uint64_t v103 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  int64_t v20 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  size_t v22 = (char *)&v87 - v21;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a4;
  *(void *)(v23 + 24) = a5;
  uint64_t v24 = a3;
  uint64_t v25 = *(void **)(a3 + 32);
  if (v25 && (self, (uint64_t v26 = swift_dynamicCastObjCClass()) != 0))
  {
    uint64_t v92 = v20;
    char v27 = (void *)v26;
    swift_retain();
    swift_retain();
    id v28 = v25;
    id v93 = v27;
    id v94 = v28;
    id v29 = [v27 primaryAccessory];
    uint64_t v95 = v23;
    if (!v29) {
      goto LABEL_14;
    }
    char v30 = v29;
    NSString v31 = [v104 UUIDString];
    uint64_t v90 = v16;
    uint64_t v91 = v8;
    if (!v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    NSString v32 = [(uint8_t *)v101 UUIDString];
    if (!v32)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v33 = [v30 characteristicOfType:v31 serviceType:v32];

    uint64_t v34 = v95;
    if (v33)
    {
      id v89 = v33;
      os_log_t v101 = v10;
      dispatch_group_t v35 = dispatch_group_create();
      uint64_t v36 = v24;
      uint64_t v37 = v24 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
      uint64_t v38 = v102;
      uint64_t v39 = v103;
      unint64_t v40 = v92;
      (*(void (**)(char *, uint64_t, NSObject *))(v102 + 16))(v92, v37, v103);
      unint64_t v41 = v104;
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v104 = v35;
        uint64_t v45 = (uint8_t *)v44;
        uint64_t v88 = swift_slowAlloc();
        aBlock[0] = v88;
        *(_DWORD *)uint64_t v45 = 136315138;
        id v46 = [v41 UUIDString];
        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v48 = v40;
        unint64_t v50 = v49;

        uint64_t v51 = v47;
        uint64_t v34 = v95;
        uint64_t v106 = sub_1000993AC(v51, v50, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Reading characteristic %s...", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        dispatch_group_t v35 = v104;
        swift_slowDealloc();

        (*(void (**)(char *, NSObject *))(v102 + 8))(v48, v103);
      }
      else
      {

        (*(void (**)(char *, NSObject *))(v38 + 8))(v40, v39);
      }
      dispatch_group_enter(v35);
      sub_1000992E8(&qword_1002A8340);
      uint64_t v66 = swift_allocObject();
      *(_OWORD *)(v66 + 16) = xmmword_100240BF0;
      unsigned __int8 v67 = v89;
      *(void *)(v66 + 32) = v89;
      aBlock[0] = v66;
      specialized Array._endMutation()();
      sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
      uint64_t v104 = v67;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      os_log_type_t v69 = *(void **)(v36 + 40);
      uint64_t v70 = (void *)swift_allocObject();
      v70[2] = v36;
      uint64_t v70[3] = v41;
      unsigned char v70[4] = sub_1001B5F94;
      v70[5] = v34;
      v70[6] = v35;
      aBlock[4] = (uint64_t)sub_1001B3C5C;
      aBlock[5] = (uint64_t)v70;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = (uint64_t)sub_1001A6714;
      uint64_t aBlock[3] = (uint64_t)&unk_100279B00;
      unint64_t v71 = _Block_copy(aBlock);
      uint64_t v72 = v41;
      id v73 = v69;
      swift_retain();
      swift_retain();
      uint64_t v103 = v35;
      swift_release();
      [v93 readCharacteristicValues:isa timeout:v73 completionQueue:v71 completionHandler:10.0];
      _Block_release(v71);

      uint64_t v74 = v96;
      static DispatchTime.now()();
      id v75 = v98;
      *uint64_t v98 = 10;
      os_log_type_t v76 = v100;
      uint64_t v77 = (void (*)(void *, void, uint64_t))*((void *)v100 + 13);
      uint64_t v78 = v91;
      v77(v75, enum case for DispatchTimeInterval.seconds(_:), v91);
      char v79 = v97;
      + infix(_:_:)();
      uint64_t v80 = (void (*)(void *, uint64_t))*((void *)v76 + 1);
      v80(v75, v78);
      uint64_t v81 = *(void (**)(char *, uint8_t *))(v99 + 8);
      uint64_t v82 = v74;
      id v83 = v101;
      v81(v82, v101);
      *id v75 = 500;
      v77(v75, enum case for DispatchTimeInterval.milliseconds(_:), v78);
      os_log_type_t v84 = v90;
      + infix(_:_:)();
      v80(v75, v78);
      v81(v79, v83);
      Swift::String v85 = v103;
      OS_dispatch_group.wait(timeout:)();

      v81(v84, v83);
    }
    else
    {
LABEL_14:
      uint64_t v55 = v102;
      os_log_type_t v54 = v103;
      (*(void (**)(char *, uint64_t, NSObject *))(v102 + 16))(v22, v24 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v103);
      uint64_t v56 = v104;
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v104 = swift_slowAlloc();
        aBlock[0] = (uint64_t)v104;
        *(_DWORD *)uint64_t v59 = 136315138;
        uint64_t v100 = v59 + 4;
        os_log_t v101 = v59;
        id v60 = [v56 UUIDString];
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v63 = v62;

        uint64_t v106 = sub_1000993AC(v61, v63, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Accessory does not contain characteristic %s!", v101, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, NSObject *))(v102 + 8))(v22, v103);
      }
      else
      {

        (*(void (**)(char *, NSObject *))(v55 + 8))(v22, v54);
      }
      sub_1000B8650();
      uint64_t v64 = swift_allocError();
      *uint64_t v65 = 1;
      sub_1001E2EA8(0, v64);

      swift_errorRelease();
    }
  }
  else
  {
    sub_1000B8650();
    uint64_t v52 = swift_allocError();
    *id v53 = 1;
    swift_retain();
    swift_retain();
    sub_1001E2EA8(0, v52);
    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_1001B3050(NSObject *a1, uint8_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_t v101 = a2;
  uint64_t v104 = a1;
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  uint64_t v100 = *(uint8_t **)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v98 = (uint64_t *)((char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (uint8_t *)type metadata accessor for DispatchTime();
  uint64_t v99 = *((void *)v10 - 1);
  uint64_t v11 = __chkstk_darwin(v10);
  os_log_type_t v96 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  int v97 = (char *)&v87 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v87 - v15;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v102 = *(void *)(v17 - 8);
  uint64_t v103 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  int64_t v20 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  size_t v22 = (char *)&v87 - v21;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a4;
  *(void *)(v23 + 24) = a5;
  uint64_t v24 = a3;
  uint64_t v25 = *(void **)(a3 + 32);
  if (v25 && (self, (uint64_t v26 = swift_dynamicCastObjCClass()) != 0))
  {
    uint64_t v92 = v20;
    char v27 = (void *)v26;
    swift_retain();
    swift_retain();
    id v28 = v25;
    id v93 = v27;
    id v94 = v28;
    id v29 = [v27 primaryAccessory];
    uint64_t v95 = v23;
    if (!v29) {
      goto LABEL_14;
    }
    char v30 = v29;
    NSString v31 = [v104 UUIDString];
    uint64_t v90 = v16;
    uint64_t v91 = v8;
    if (!v31)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v31 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    NSString v32 = [(uint8_t *)v101 UUIDString];
    if (!v32)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v33 = [v30 characteristicOfType:v31 serviceType:v32];

    uint64_t v34 = v95;
    if (v33)
    {
      id v89 = v33;
      os_log_t v101 = v10;
      dispatch_group_t v35 = dispatch_group_create();
      uint64_t v36 = v24;
      uint64_t v37 = v24 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger;
      uint64_t v38 = v102;
      uint64_t v39 = v103;
      unint64_t v40 = v92;
      (*(void (**)(char *, uint64_t, NSObject *))(v102 + 16))(v92, v37, v103);
      unint64_t v41 = v104;
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v104 = v35;
        uint64_t v45 = (uint8_t *)v44;
        uint64_t v88 = swift_slowAlloc();
        aBlock[0] = v88;
        *(_DWORD *)uint64_t v45 = 136315138;
        id v46 = [v41 UUIDString];
        uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v48 = v40;
        unint64_t v50 = v49;

        uint64_t v51 = v47;
        uint64_t v34 = v95;
        uint64_t v106 = sub_1000993AC(v51, v50, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Reading characteristic %s...", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        dispatch_group_t v35 = v104;
        swift_slowDealloc();

        (*(void (**)(char *, NSObject *))(v102 + 8))(v48, v103);
      }
      else
      {

        (*(void (**)(char *, NSObject *))(v38 + 8))(v40, v39);
      }
      dispatch_group_enter(v35);
      sub_1000992E8(&qword_1002A8340);
      uint64_t v66 = swift_allocObject();
      *(_OWORD *)(v66 + 16) = xmmword_100240BF0;
      unsigned __int8 v67 = v89;
      *(void *)(v66 + 32) = v89;
      aBlock[0] = v66;
      specialized Array._endMutation()();
      sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
      uint64_t v104 = v67;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      os_log_type_t v69 = *(void **)(v36 + 40);
      uint64_t v70 = (void *)swift_allocObject();
      v70[2] = v36;
      uint64_t v70[3] = v41;
      unsigned char v70[4] = sub_1001B5F84;
      v70[5] = v34;
      v70[6] = v35;
      aBlock[4] = (uint64_t)sub_1001B3C5C;
      aBlock[5] = (uint64_t)v70;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = (uint64_t)sub_1001A6714;
      uint64_t aBlock[3] = (uint64_t)&unk_100279A88;
      unint64_t v71 = _Block_copy(aBlock);
      uint64_t v72 = v41;
      id v73 = v69;
      swift_retain();
      swift_retain();
      uint64_t v103 = v35;
      swift_release();
      [v93 readCharacteristicValues:isa timeout:v73 completionQueue:v71 completionHandler:10.0];
      _Block_release(v71);

      uint64_t v74 = v96;
      static DispatchTime.now()();
      id v75 = v98;
      *uint64_t v98 = 10;
      os_log_type_t v76 = v100;
      uint64_t v77 = (void (*)(void *, void, uint64_t))*((void *)v100 + 13);
      uint64_t v78 = v91;
      v77(v75, enum case for DispatchTimeInterval.seconds(_:), v91);
      char v79 = v97;
      + infix(_:_:)();
      uint64_t v80 = (void (*)(void *, uint64_t))*((void *)v76 + 1);
      v80(v75, v78);
      uint64_t v81 = *(void (**)(char *, uint8_t *))(v99 + 8);
      uint64_t v82 = v74;
      id v83 = v101;
      v81(v82, v101);
      *id v75 = 500;
      v77(v75, enum case for DispatchTimeInterval.milliseconds(_:), v78);
      os_log_type_t v84 = v90;
      + infix(_:_:)();
      v80(v75, v78);
      v81(v79, v83);
      Swift::String v85 = v103;
      OS_dispatch_group.wait(timeout:)();

      v81(v84, v83);
    }
    else
    {
LABEL_14:
      uint64_t v55 = v102;
      os_log_type_t v54 = v103;
      (*(void (**)(char *, uint64_t, NSObject *))(v102 + 16))(v22, v24 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v103);
      uint64_t v56 = v104;
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        uint64_t v104 = swift_slowAlloc();
        aBlock[0] = (uint64_t)v104;
        *(_DWORD *)uint64_t v59 = 136315138;
        uint64_t v100 = v59 + 4;
        os_log_t v101 = v59;
        id v60 = [v56 UUIDString];
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v63 = v62;

        uint64_t v106 = sub_1000993AC(v61, v63, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Accessory does not contain characteristic %s!", v101, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, NSObject *))(v102 + 8))(v22, v103);
      }
      else
      {

        (*(void (**)(char *, NSObject *))(v55 + 8))(v22, v54);
      }
      sub_1000B8650();
      uint64_t v64 = swift_allocError();
      *uint64_t v65 = 1;
      sub_1001E34C4(0, v64);

      swift_errorRelease();
    }
  }
  else
  {
    sub_1000B8650();
    uint64_t v52 = swift_allocError();
    *id v53 = 1;
    swift_retain();
    swift_retain();
    sub_1001E34C4(0, v52);
    swift_errorRelease();
  }
  return swift_release();
}

void *sub_1001B3AE4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1001DC5F4(0, v1, 0);
    uint64_t v3 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = dispatch thunk of DockCoreAccessory.getActuator(name:)();
      if (v4)
      {
        uint64_t v5 = (void *)v4;
        uint64_t v6 = dispatch thunk of Component.id.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = 0;
      }
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_1001DC5F4(v7 > 1, v8 + 1, 1);
      }
      v3 += 16;
      _swiftEmptyArrayStorage[2] = v8 + 1;
      _swiftEmptyArrayStorage[v8 + 4] = v6;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001B3BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001B3C0C()
{
  return swift_release();
}

uint64_t sub_1001B3C14()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001B3C50(void *a1, uint64_t a2)
{
  sub_1001AD794(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001B3C60(void *a1, void *a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14 = type metadata accessor for DispatchTimeInterval();
  Class isa = (uint8_t *)v14[-1].isa;
  os_log_t v100 = v14;
  __chkstk_darwin(v14);
  uint64_t v98 = (uint64_t *)((char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for DispatchTime();
  uint64_t v101 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v95 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  os_log_type_t v96 = (char *)&v88 - v20;
  __chkstk_darwin(v19);
  int v97 = (char *)&v88 - v21;
  uint64_t v102 = type metadata accessor for Logger();
  uint64_t v104 = *(void (***)(char *, void))(v102 - 8);
  uint64_t v22 = __chkstk_darwin(v102);
  uint64_t v24 = (char *)&v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v88 - v25;
  char v27 = (void *)swift_allocObject();
  void v27[2] = a4;
  v27[3] = a5;
  v27[4] = a6;
  void v27[5] = a7;
  os_log_type_t v105 = v27;
  uint64_t v103 = a3;
  Class v28 = a3[4].isa;
  if (v28 && (self, (uint64_t v29 = swift_dynamicCastObjCClass()) != 0))
  {
    id v94 = a1;
    char v30 = (void *)v29;
    swift_retain();
    swift_retain();
    swift_retain();
    id v92 = a7;
    id v93 = v28;
    id v91 = v30;
    id v31 = [v30 primaryAccessory];
    if (!v31) {
      goto LABEL_14;
    }
    NSString v32 = v31;
    NSString v33 = [v94 UUIDString];
    uint64_t v90 = v16;
    if (!v33)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    NSString v34 = [a2 UUIDString];
    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v35 = [v32 characteristicOfType:v33 serviceType:v34];

    id v89 = v35;
    if (v35)
    {
      uint64_t v36 = dispatch_group_create();
      uint64_t v37 = v104;
      uint64_t v38 = v102;
      ((void (*)(char *, uint64_t, uint64_t))v104[2])(v24, (uint64_t)v103 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v102);
      id v39 = v94;
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        id v94 = (id)swift_slowAlloc();
        aBlock[0] = (uint64_t)v94;
        *(_DWORD *)uint64_t v42 = 136315138;
        id v92 = v42 + 4;
        id v43 = [v39 UUIDString];
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v45 = v36;
        unint64_t v47 = v46;

        uint64_t v107 = sub_1000993AC(v44, v47, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        uint64_t v36 = v45;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Reading characteristic %s...", v42, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v104[1](v24, v102);
      }
      else
      {

        v37[1](v24, v38);
      }
      dispatch_group_enter(v36);
      sub_1000992E8(&qword_1002A8340);
      uint64_t v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = xmmword_100240BF0;
      uint64_t v66 = v89;
      *(void *)(v65 + 32) = v89;
      aBlock[0] = v65;
      specialized Array._endMutation()();
      sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
      uint64_t v104 = v66;
      Class v67 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v68 = v103;
      Class v69 = v103[5].isa;
      uint64_t v70 = (void *)swift_allocObject();
      v70[2] = v68;
      uint64_t v70[3] = v39;
      unint64_t v71 = v105;
      unsigned char v70[4] = sub_1001B4764;
      v70[5] = v71;
      v70[6] = v36;
      aBlock[4] = (uint64_t)sub_1001B3C5C;
      aBlock[5] = (uint64_t)v70;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = (uint64_t)sub_1001A6714;
      uint64_t aBlock[3] = (uint64_t)&unk_100279948;
      uint64_t v72 = _Block_copy(aBlock);
      id v73 = v39;
      uint64_t v74 = v69;
      swift_retain();
      swift_retain();
      uint64_t v103 = v36;
      swift_release();
      [v91 readCharacteristicValues:v67 timeout:v74 completionQueue:v72 completionHandler:10.0];
      _Block_release(v72);

      id v75 = v95;
      static DispatchTime.now()();
      os_log_type_t v76 = v98;
      uint64_t v77 = isa;
      *uint64_t v98 = 10;
      uint64_t v78 = (void (*)(void *, void, os_log_t))*((void *)v77 + 13);
      os_log_t v79 = v100;
      v78(v76, enum case for DispatchTimeInterval.seconds(_:), v100);
      uint64_t v80 = v96;
      + infix(_:_:)();
      uint64_t v81 = (void (*)(void *, os_log_t))*((void *)v77 + 1);
      v81(v76, v79);
      uint64_t v82 = *(void (**)(char *, uint64_t))(v101 + 8);
      id v83 = v75;
      uint64_t v84 = v90;
      v82(v83, v90);
      void *v76 = 500;
      v78(v76, enum case for DispatchTimeInterval.milliseconds(_:), v79);
      Swift::String v85 = v97;
      + infix(_:_:)();
      v81(v76, v79);
      v82(v80, v84);
      uint64_t v86 = v103;
      OS_dispatch_group.wait(timeout:)();

      v82(v85, v84);
    }
    else
    {
LABEL_14:
      unint64_t v50 = v104;
      uint64_t v51 = v102;
      ((void (*)(char *, uint64_t, uint64_t))v104[2])(v26, (uint64_t)v103 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v102);
      id v52 = v94;
      id v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.error.getter();
      int v55 = v54;
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v56 = swift_slowAlloc();
        LODWORD(v101) = v55;
        uint64_t v57 = (uint8_t *)v56;
        uint64_t v103 = swift_slowAlloc();
        aBlock[0] = (uint64_t)v103;
        Class isa = v57;
        os_log_t v100 = v53;
        *(_DWORD *)uint64_t v57 = 136315138;
        uint64_t v98 = v57 + 4;
        id v58 = [v52 UUIDString];
        uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v61 = v60;

        uint64_t v107 = sub_1000993AC(v59, v61, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_t v62 = v100;
        _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v101, "Accessory does not contain characteristic %s!", isa, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v104[1](v26, v51);
      }
      else
      {

        v50[1](v26, v51);
      }
      sub_1000B8650();
      uint64_t v63 = swift_allocError();
      unsigned char *v64 = 1;
      sub_1001AC33C(0, v63, a4, a5, a6, v92);

      swift_errorRelease();
    }
  }
  else
  {
    sub_1000B8650();
    uint64_t v48 = swift_allocError();
    *unint64_t v49 = 1;
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1001AC33C(0, v48, a4, a5, a6, a7);
    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_1001B4714()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1001B4764(void *a1, uint64_t a2)
{
  sub_1001AC33C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1001B4774()
{
  return sub_1001AA8E0(v0);
}

uint64_t sub_1001B4790()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001B47B8()
{
  return sub_1001AABF4(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1001B47D8()
{
  return sub_1001B5FDC((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1001B4804()
{
  int64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000A5ED8;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000A5ED8;
  return sub_1001A80AC();
}

uint64_t sub_1001B48D8(void *a1)
{
  return sub_1001AA200(a1);
}

uint64_t sub_1001B48E0(uint64_t a1)
{
  return sub_1001A92D8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001B48E8()
{
  uint64_t v1 = sub_1000992E8(&qword_1002AC6E8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001B497C()
{
  sub_1000992E8(&qword_1002AC6E8);

  return sub_1001A95A8();
}

uint64_t sub_1001B4A00(NSObject *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  id v96 = a2;
  uint64_t v99 = a1;
  uint64_t v10 = type metadata accessor for DispatchTimeInterval();
  uint64_t v95 = *(uint8_t **)(v10 - 8);
  __chkstk_darwin(v10);
  id v94 = (void *)((char *)v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for DispatchTime();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  id v91 = (char *)v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  id v92 = (char *)v85 - v17;
  __chkstk_darwin(v16);
  id v93 = (char *)v85 - v18;
  uint64_t v97 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v97 - 8);
  uint64_t v20 = __chkstk_darwin(v97);
  uint64_t v22 = (char *)v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)v85 - v23;
  uint64_t v25 = (void *)swift_allocObject();
  void v25[2] = a4;
  void v25[3] = a5;
  id v100 = a5;
  uint64_t v101 = v25;
  v25[4] = a6;
  uint64_t v98 = a3;
  uint64_t v26 = *(void **)(a3 + 32);
  if (v26 && (self, (uint64_t v27 = swift_dynamicCastObjCClass()) != 0))
  {
    Class v28 = (void *)v27;
    uint64_t v87 = v10;
    uint64_t v88 = v13;
    uint64_t v89 = v12;
    swift_retain();
    swift_bridgeObjectRetain();
    id v90 = v26;
    id v29 = [v28 primaryAccessory];
    uint64_t v30 = v19;
    if (!v29) {
      goto LABEL_14;
    }
    id v31 = v29;
    id v86 = v28;
    NSString v32 = [v99 UUIDString];
    if (!v32)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v32 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    NSString v33 = [v96 UUIDString];
    if (!v33)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v34 = [v31 characteristicOfType:v32 serviceType:v33];

    if (v34)
    {
      id v100 = v34;
      dispatch_group_t v35 = dispatch_group_create();
      uint64_t v36 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v22, v98 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v97);
      uint64_t v37 = v30;
      uint64_t v38 = v99;
      id v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v39, v40))
      {
        os_log_type_t v41 = (uint8_t *)swift_slowAlloc();
        id v96 = (id)swift_slowAlloc();
        aBlock[0] = (uint64_t)v96;
        *(_DWORD *)os_log_type_t v41 = 136315138;
        v85[1] = v41 + 4;
        id v42 = [v38 UUIDString];
        uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v99 = v35;
        unint64_t v45 = v44;

        uint64_t v103 = sub_1000993AC(v43, v45, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        dispatch_group_t v35 = v99;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Reading characteristic %s...", v41, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v97);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v36);
      }
      uint64_t v62 = v87;
      dispatch_group_enter(v35);
      sub_1000992E8(&qword_1002A8340);
      uint64_t v63 = swift_allocObject();
      *(_OWORD *)(v63 + 16) = xmmword_100240BF0;
      id v64 = v100;
      *(void *)(v63 + 32) = v100;
      aBlock[0] = v63;
      specialized Array._endMutation()();
      sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
      id v100 = v64;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v66 = v98;
      Class v67 = *(void **)(v98 + 40);
      uint64_t v68 = (void *)swift_allocObject();
      v68[2] = v66;
      v68[3] = v38;
      Class v69 = v101;
      v68[4] = sub_1001B6034;
      void v68[5] = v69;
      v68[6] = v35;
      aBlock[4] = (uint64_t)sub_1001B3C5C;
      aBlock[5] = (uint64_t)v68;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = (uint64_t)sub_1001A6714;
      uint64_t aBlock[3] = (uint64_t)&unk_100279BF0;
      uint64_t v70 = _Block_copy(aBlock);
      unint64_t v71 = v38;
      id v72 = v67;
      swift_retain();
      swift_retain();
      uint64_t v99 = v35;
      swift_release();
      [v86 readCharacteristicValues:isa timeout:v72 completionQueue:v70 completionHandler:10.0];
      _Block_release(v70);

      id v73 = v91;
      static DispatchTime.now()();
      uint64_t v74 = v94;
      id v75 = v95;
      void *v94 = 10;
      os_log_type_t v76 = (void (*)(void *, void, uint64_t))*((void *)v75 + 13);
      v76(v74, enum case for DispatchTimeInterval.seconds(_:), v62);
      uint64_t v77 = v92;
      + infix(_:_:)();
      uint64_t v78 = (void (*)(void *, uint64_t))*((void *)v75 + 1);
      v78(v74, v62);
      os_log_t v79 = *(void (**)(char *, uint64_t))(v88 + 8);
      uint64_t v80 = v73;
      uint64_t v81 = v89;
      v79(v80, v89);
      *uint64_t v74 = 500;
      v76(v74, enum case for DispatchTimeInterval.milliseconds(_:), v62);
      uint64_t v82 = v93;
      + infix(_:_:)();
      v78(v74, v62);
      v79(v77, v81);
      id v83 = v99;
      OS_dispatch_group.wait(timeout:)();

      v79(v82, v81);
    }
    else
    {
LABEL_14:
      uint64_t v48 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v24, v98 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v97);
      unint64_t v49 = v99;
      unint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      int v52 = v51;
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v99 = v50;
        uint64_t v53 = swift_slowAlloc();
        LODWORD(v96) = v52;
        os_log_type_t v54 = (uint8_t *)v53;
        uint64_t v98 = swift_slowAlloc();
        aBlock[0] = v98;
        uint64_t v95 = v54;
        *(_DWORD *)os_log_type_t v54 = 136315138;
        id v94 = v54 + 4;
        id v55 = [v49 UUIDString];
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v58 = v57;

        uint64_t v103 = sub_1000993AC(v56, v58, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v59 = v99;
        _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v96, "Accessory does not contain characteristic %s!", v95, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v30 + 8))(v24, v48);
      sub_1000B8650();
      uint64_t v60 = swift_allocError();
      *unint64_t v61 = 1;
      sub_100112330(0, v60, a4, (uint64_t)v100, a6);

      swift_errorRelease();
    }
  }
  else
  {
    sub_1000B8650();
    uint64_t v46 = swift_allocError();
    *unint64_t v47 = 1;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100112330(0, v46, a4, (uint64_t)v100, a6);
    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_1001B546C(NSObject *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, uint64_t a7)
{
  uint64_t v106 = a1;
  uint64_t v13 = type metadata accessor for DispatchTimeInterval();
  uint64_t v101 = *(uint8_t **)(v13 - 8);
  uint64_t v102 = v13;
  __chkstk_darwin(v13);
  id v100 = (uint64_t *)((char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for DispatchTime();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v97 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v98 = (char *)&v91 - v20;
  __chkstk_darwin(v19);
  uint64_t v99 = (char *)&v91 - v21;
  uint64_t v105 = type metadata accessor for Logger();
  uint64_t v103 = *(void *)(v105 - 8);
  uint64_t v22 = __chkstk_darwin(v105);
  uint64_t v24 = (char *)&v91 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v91 - v25;
  uint64_t v27 = (void *)swift_allocObject();
  void v27[2] = a4;
  v27[3] = a5;
  dispatch_group_t v107 = a6;
  unint64_t v108 = v27;
  v27[4] = a6;
  void v27[5] = a7;
  uint64_t v104 = a3;
  Class v28 = *(void **)(a3 + 32);
  if (v28 && (self, (uint64_t v29 = swift_dynamicCastObjCClass()) != 0))
  {
    uint64_t v30 = (void *)v29;
    uint64_t v94 = v15;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    id v96 = v28;
    id v31 = [v30 primaryAccessory];
    if (!v31) {
      goto LABEL_14;
    }
    NSString v32 = v31;
    uint64_t v95 = v30;
    NSString v33 = [v106 UUIDString];
    uint64_t v93 = v16;
    if (!v33)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    NSString v34 = [a2 UUIDString];
    if (!v34)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v35 = [v32 characteristicOfType:v33 serviceType:v34];

    uint64_t v36 = v95;
    id v92 = v35;
    if (v35)
    {
      dispatch_group_t v107 = dispatch_group_create();
      uint64_t v37 = v103;
      uint64_t v38 = v105;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v24, v104 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v105);
      id v39 = v106;
      os_log_type_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v40, v41))
      {
        id v42 = (uint8_t *)swift_slowAlloc();
        uint64_t v106 = swift_slowAlloc();
        aBlock[0] = (uint64_t)v106;
        *(_DWORD *)id v42 = 136315138;
        id v43 = [v39 UUIDString];
        uint64_t v44 = v37;
        uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v47 = v46;

        uint64_t v48 = v45;
        uint64_t v36 = v95;
        uint64_t v110 = sub_1000993AC(v48, v47, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Reading characteristic %s...", v42, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v105);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v37 + 8))(v24, v38);
      }
      dispatch_group_t v67 = v107;
      dispatch_group_enter(v107);
      sub_1000992E8(&qword_1002A8340);
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = xmmword_100240BF0;
      Class v69 = v92;
      *(void *)(v68 + 32) = v92;
      aBlock[0] = v68;
      specialized Array._endMutation()();
      sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
      uint64_t v106 = v69;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v71 = v104;
      id v72 = *(void **)(v104 + 40);
      id v73 = (void *)swift_allocObject();
      v73[2] = v71;
      id v73[3] = v39;
      uint64_t v74 = v108;
      void v73[4] = sub_1001B5F70;
      v73[5] = v74;
      v73[6] = v67;
      aBlock[4] = (uint64_t)sub_1001B3C5C;
      aBlock[5] = (uint64_t)v73;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = (uint64_t)sub_1001A6714;
      uint64_t aBlock[3] = (uint64_t)&unk_100279A10;
      id v75 = _Block_copy(aBlock);
      os_log_type_t v76 = v39;
      id v77 = v72;
      swift_retain();
      swift_retain();
      dispatch_group_t v107 = v67;
      swift_release();
      [v36 readCharacteristicValues:isa timeout:v77 completionQueue:v75 completionHandler:10.0];
      _Block_release(v75);

      uint64_t v78 = v97;
      static DispatchTime.now()();
      os_log_t v79 = v100;
      uint64_t v80 = v101;
      *id v100 = 10;
      uint64_t v81 = (void (*)(void *, void, uint64_t))*((void *)v80 + 13);
      uint64_t v82 = v102;
      v81(v79, enum case for DispatchTimeInterval.seconds(_:), v102);
      id v83 = v98;
      + infix(_:_:)();
      uint64_t v84 = (void (*)(void *, uint64_t))*((void *)v80 + 1);
      v84(v79, v82);
      Swift::String v85 = *(void (**)(char *, uint64_t))(v93 + 8);
      id v86 = v78;
      uint64_t v87 = v94;
      v85(v86, v94);
      *os_log_t v79 = 500;
      v81(v79, enum case for DispatchTimeInterval.milliseconds(_:), v82);
      uint64_t v88 = v99;
      + infix(_:_:)();
      v84(v79, v82);
      v85(v83, v87);
      dispatch_group_t v89 = v107;
      OS_dispatch_group.wait(timeout:)();

      v85(v88, v87);
    }
    else
    {
LABEL_14:
      uint64_t v51 = v103;
      uint64_t v52 = v105;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v26, v104 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v105);
      uint64_t v53 = v106;
      os_log_type_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      int v56 = v55;
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v106 = v54;
        uint64_t v57 = swift_slowAlloc();
        LODWORD(v102) = v56;
        unint64_t v58 = (uint8_t *)v57;
        uint64_t v104 = swift_slowAlloc();
        aBlock[0] = v104;
        uint64_t v101 = v58;
        *(_DWORD *)unint64_t v58 = 136315138;
        id v100 = v58 + 4;
        uint64_t v59 = v51;
        id v60 = [v53 UUIDString];
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v63 = v62;

        uint64_t v110 = sub_1000993AC(v61, v63, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        id v64 = v106;
        _os_log_impl((void *)&_mh_execute_header, v106, (os_log_type_t)v102, "Accessory does not contain characteristic %s!", v101, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v59 + 8))(v26, v105);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v51 + 8))(v26, v52);
      }
      sub_1000B8650();
      uint64_t v65 = swift_allocError();
      *uint64_t v66 = 1;
      sub_100198EF8(0, v65, a4, a5, (uint64_t)v107, a7);

      swift_errorRelease();
    }
  }
  else
  {
    sub_1000B8650();
    uint64_t v49 = swift_allocError();
    *unint64_t v50 = 1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100198EF8(0, v49, a4, a5, (uint64_t)v107, a7);
    swift_errorRelease();
  }
  return swift_release();
}

uint64_t sub_1001B5F28()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1001B5F70(void *a1, uint64_t a2)
{
  sub_100198EF8(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

void sub_1001B5F84(void *a1, uint64_t a2)
{
}

uint64_t sub_1001B5F94(void *a1, uint64_t a2)
{
  return sub_1001E2EA8(a1, a2);
}

void sub_1001B5FA4(void *a1, uint64_t a2)
{
  sub_1001A6F24(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1001B5FB0()
{
  return sub_1001B5FDC((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1001B5FDC(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 32));

  return _swift_deallocObject(v2, 40, 7);
}

void sub_1001B6034(void *a1, uint64_t a2)
{
  sub_100112330(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1001B6044()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1001B6094(unint64_t a1, uint64_t a2)
{
  sub_1001A7318(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void (**)(void))(v2 + 32), *(void *)(v2 + 40), *(NSObject **)(v2 + 48));
}

uint64_t sub_1001B60A4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B60DC(void *a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(v3 + 16))(*a1, *a2, *a3);
}

uint64_t sub_1001B6110(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001B615C(uint64_t a1, uint64_t a2)
{
  return sub_1001B6170(a1, a2, "Unable to issue accessory return to base: %s", "Issued accessory return to base!");
}

uint64_t sub_1001B6170(uint64_t a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t v9 = *(void *)(sub_1000992E8(&qword_1002AC6C0) - 8);
  return sub_1001AF4AC(a1, a2, *(void *)(v4 + 16), v4 + ((*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), a3, a4);
}

uint64_t sub_1001B6208(uint64_t a1, uint64_t a2)
{
  return sub_1001B6170(a1, a2, "Unable to issue accessory reboot: %s", "Issued accessory reboot!");
}

uint64_t sub_1001B6220()
{
  uint64_t v1 = sub_1000992E8(&qword_1002AC6C0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001B62F0(uint64_t a1, uint64_t a2)
{
  return sub_1001B6170(a1, a2, "Unable to halt accessory: %s", "Accessory halted!");
}

uint64_t sub_1001B6324()
{
  return sub_1001B4790();
}

uint64_t sub_1001B635C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002AC700);
  sub_100096F64(v0, (uint64_t)qword_1002AC700);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1001B63D4()
{
  uint64_t v1 = v0;
  unsigned int v2 = [self capabilitiesForHardware].supportsHaptics;
  swift_unknownObjectRelease();
  *(unsigned char *)(v0 + 16) = v2;
  *(void *)(v0 + 32) = 0;
  if (!v2)
  {
    if (qword_1002A7C08 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100096F64(v20, (uint64_t)qword_1002AC700);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Device does not support haptics!", v23, 2u);
      swift_slowDealloc();
    }
    goto LABEL_15;
  }
  if (qword_1002A7C08 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100096F64(v3, (uint64_t)qword_1002AC700);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Attempting to enable haptic engine...", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v30 = 0;
  id v7 = [objc_allocWithZone((Class)CHHapticEngine) initAndReturnError:&v30];
  unint64_t v8 = v30;
  if (!v7)
  {
    uint64_t v24 = v30;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412290;
      swift_errorRetain();
      Class v28 = (void **)_swift_stdlib_bridgeErrorToNSError();
      uint64_t v30 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v27 = v28;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v25, "Unable to create haptic engine, haptics will be disallowed: %@", v26, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
LABEL_16:
      swift_unknownObjectRelease();
      type metadata accessor for DKHaptics();
      swift_deallocPartialClassInstance();
      return 0;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
LABEL_15:

    goto LABEL_16;
  }
  uint64_t v9 = v7;
  *(void *)(v0 + 24) = v7;
  uint64_t v10 = swift_allocObject();
  swift_weakInit();
  NSString v34 = sub_1001B7448;
  uint64_t v35 = v10;
  uint64_t v30 = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  NSString v32 = sub_1001468DC;
  NSString v33 = &unk_100279CE0;
  uint64_t v11 = _Block_copy(&v30);
  uint64_t v12 = v8;
  id v13 = v9;
  swift_release();
  [v13 setResetHandler:v11];
  _Block_release(v11);

  uint64_t v14 = *(void **)(v1 + 24);
  NSString v34 = MotionFeedback.init(positions:velocities:);
  uint64_t v35 = 0;
  uint64_t v30 = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  NSString v32 = sub_1001B6C94;
  NSString v33 = &unk_100279D08;
  uint64_t v15 = _Block_copy(&v30);
  id v16 = v14;
  [v16 setStoppedHandler:v15];
  _Block_release(v15);

  uint64_t v17 = *(void **)(v1 + 24);
  NSString v34 = sub_1001B6CE8;
  uint64_t v35 = 0;
  uint64_t v30 = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  NSString v32 = sub_1001B6CF0;
  NSString v33 = &unk_100279D30;
  uint64_t v18 = _Block_copy(&v30);
  id v19 = v17;
  [v19 notifyWhenPlayersFinished:v18];
  _Block_release(v18);

  [*(id *)(v1 + 24) setAutoShutdownEnabled:1];
  return v1;
}

void sub_1001B6970()
{
  if (qword_1002A7C08 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F64(v0, (uint64_t)qword_1002AC700);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Reset Handler: Restarting the engine.", v3, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_8;
  }
  id v5 = *(id *)(Strong + 24);
  swift_release();
  v14[0] = 0;
  unsigned int v6 = [v5 startAndReturnError:v14];

  if (v6)
  {
    id v7 = v14[0];
LABEL_8:
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      sub_1001B6D4C();
      swift_release();
    }
    return;
  }
  id v8 = v14[0];
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412290;
    swift_errorRetain();
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v13;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to restart the engine: %@", v11, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_1001B6C94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_1001B6CE8()
{
  return 1;
}

uint64_t sub_1001B6CF0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  uint64_t v5 = v3(a2);
  swift_release();

  return v5;
}

void sub_1001B6D4C()
{
  sub_1000992E8(&qword_1002AC808);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  CHHapticPatternKey v0 = CHHapticPatternKeyPattern;
  *(void *)(inited + 32) = CHHapticPatternKeyPattern;
  sub_1000992E8(&qword_1002AC810);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1002413A0;
  sub_1000992E8(&qword_1002AC818);
  uint64_t v2 = swift_initStackObject();
  *(_OWORD *)(v2 + 16) = xmmword_100240BE0;
  CHHapticPatternKey v3 = CHHapticPatternKeyEvent;
  *(void *)(v2 + 32) = CHHapticPatternKeyEvent;
  sub_1000992E8(&qword_1002AC820);
  uint64_t v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002413A0;
  CHHapticPatternKey v5 = CHHapticPatternKeyEventType;
  *(void *)(v4 + 32) = CHHapticPatternKeyEventType;
  CHHapticEventType v6 = CHHapticEventTypeHapticContinuous;
  type metadata accessor for EventType(0);
  *(void *)(v4 + 40) = v6;
  CHHapticPatternKey v7 = CHHapticPatternKeyTime;
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 72) = v7;
  *(void *)(v4 + 80) = 0;
  CHHapticPatternKey v9 = CHHapticPatternKeyEventDuration;
  *(void *)(v4 + 104) = &type metadata for Double;
  *(void *)(v4 + 112) = v9;
  *(void *)(v4 + 144) = &type metadata for Double;
  *(void *)(v4 + 120) = 0x3FC3333333333333;
  os_log_type_t v10 = v0;
  uint64_t v11 = v3;
  uint64_t v12 = v5;
  uint64_t v13 = v6;
  uint64_t v14 = v7;
  uint64_t v15 = v9;
  *(void *)(v2 + 40) = sub_1001EA5DC(v4);
  *(void *)(v1 + 32) = sub_1001EA70C(v2);
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_100240BE0;
  CHHapticPatternKey v17 = CHHapticPatternKeyParameter;
  *(void *)(v16 + 32) = CHHapticPatternKeyParameter;
  uint64_t v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_1002413A0;
  CHHapticPatternKey v19 = CHHapticPatternKeyParameterID;
  *(void *)(v18 + 32) = CHHapticPatternKeyParameterID;
  CHHapticDynamicParameterID v20 = CHHapticDynamicParameterIDHapticIntensityControl;
  type metadata accessor for ID(0);
  uint64_t v22 = v21;
  *(void *)(v18 + 40) = v20;
  CHHapticPatternKey v23 = CHHapticPatternKeyTime;
  *(void *)(v18 + 64) = v21;
  *(void *)(v18 + 72) = v23;
  *(void *)(v18 + 80) = 0x3FB999999999999ALL;
  CHHapticPatternKey v24 = CHHapticPatternKeyParameterValue;
  *(void *)(v18 + 104) = &type metadata for Double;
  *(void *)(v18 + 112) = v24;
  *(void *)(v18 + 144) = &type metadata for Double;
  *(void *)(v18 + 120) = 0x3FF3333333333333;
  os_log_type_t v25 = v17;
  uint64_t v26 = v19;
  uint64_t v27 = v20;
  Class v28 = v23;
  uint64_t v29 = v24;
  *(void *)(v16 + 40) = sub_1001EA5DC(v18);
  *(void *)(v1 + 40) = sub_1001EA70C(v16);
  uint64_t v30 = swift_initStackObject();
  *(_OWORD *)(v30 + 16) = xmmword_100240BE0;
  CHHapticPatternKey v31 = CHHapticPatternKeyParameter;
  *(void *)(v30 + 32) = CHHapticPatternKeyParameter;
  uint64_t v32 = swift_initStackObject();
  *(_OWORD *)(v32 + 16) = xmmword_1002413A0;
  CHHapticPatternKey v33 = CHHapticPatternKeyParameterID;
  CHHapticDynamicParameterID v34 = CHHapticDynamicParameterIDHapticSharpnessControl;
  *(void *)(v32 + 32) = CHHapticPatternKeyParameterID;
  *(void *)(v32 + 40) = v34;
  CHHapticPatternKey v35 = CHHapticPatternKeyTime;
  *(void *)(v32 + 64) = v22;
  *(void *)(v32 + 72) = v35;
  *(void *)(v32 + 80) = 0;
  CHHapticPatternKey v36 = CHHapticPatternKeyParameterValue;
  *(void *)(v32 + 104) = &type metadata for Double;
  *(void *)(v32 + 112) = v36;
  *(void *)(v32 + 144) = &type metadata for Double;
  *(void *)(v32 + 120) = 0x3FF3333333333333;
  uint64_t v37 = v31;
  uint64_t v38 = v33;
  id v39 = v34;
  os_log_type_t v40 = v35;
  os_log_type_t v41 = v36;
  *(void *)(v30 + 40) = sub_1001EA5DC(v32);
  *(void *)(v1 + 48) = sub_1001EA70C(v30);
  *(void *)(inited + 40) = v1;
  unint64_t v42 = sub_1001EA718(inited);
  sub_1001E1628(v42);
  swift_bridgeObjectRelease();
  id v43 = objc_allocWithZone((Class)CHHapticPattern);
  id v44 = sub_1001B72C4();
  if (!v52)
  {
    uint64_t v45 = v44;
    unint64_t v46 = *(void **)(v50 + 24);
    id v53 = 0;
    id v47 = [v46 createPlayerWithPattern:v45 error:&v53];
    id v48 = v53;
    if (v47)
    {

      *(void *)(v50 + 32) = v47;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v49 = v48;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

void sub_1001B716C()
{
  if (*(void *)(v0 + 32) || (sub_1001B6D4C(), !v1))
  {
    uint64_t v2 = *(void **)(v0 + 24);
    os_log_type_t v10 = 0;
    unsigned int v3 = [v2 startAndReturnError:&v10];
    uint64_t v4 = v10;
    if (v3
      && ((CHHapticPatternKey v5 = *(void **)(v0 + 32)) == 0
       || (os_log_type_t v10 = 0,
           id v6 = v4,
           unsigned int v7 = [v5 startAtTime:&v10 error:0.0],
           uint64_t v4 = v10,
           v7)))
    {
      id v8 = v4;
    }
    else
    {
      id v9 = v4;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

uint64_t sub_1001B7260()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DKHaptics()
{
  return self;
}

id sub_1001B72C4()
{
  type metadata accessor for Key(0);
  sub_1001B73B8();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = 0;
  id v2 = [v0 initWithDictionary:isa error:&v6];

  if (v2)
  {
    id v3 = v6;
  }
  else
  {
    id v4 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

unint64_t sub_1001B73B8()
{
  unint64_t result = qword_1002A8160;
  if (!qword_1002A8160)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8160);
  }
  return result;
}

uint64_t sub_1001B7410()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001B7448()
{
}

uint64_t sub_1001B7450(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001B7460()
{
  return swift_release();
}

uint64_t destroy for AccessoryAdvData(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);

  return sub_1000A6240(v2, v3);
}

uint64_t initializeWithCopy for AccessoryAdvData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  int v4 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  uint64_t v5 = *(void *)(a2 + 32);
  unint64_t v6 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  sub_1000A618C(v5, v6);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for AccessoryAdvData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  int v4 = *(_DWORD *)(a2 + 20);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_DWORD *)(a1 + 20) = v4;
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  uint64_t v6 = *(void *)(a2 + 32);
  unint64_t v5 = *(void *)(a2 + 40);
  sub_1000A618C(v6, v5);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v5;
  sub_1000A6240(v7, v8);
  return a1;
}

uint64_t assignWithTake for AccessoryAdvData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  int v5 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = v5;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_1000A6240(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryAdvData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryAdvData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryAdvData()
{
  return &type metadata for AccessoryAdvData;
}

unsigned __int8 *sub_1001B76A8@<X0>(const void *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char **a4@<X4>, unsigned __int8 **a5@<X8>)
{
  LODWORD(v8) = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1001B781CLL);
      }
      unint64_t v8 = HIDWORD(a2) - (int)a2;
LABEL_6:
      if ((v8 & 0x8000000000000000) != 0 || HIDWORD(v8)) {
        goto LABEL_13;
      }
LABEL_8:
      uint64_t v11 = *a4;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v11;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        uint64_t v11 = sub_1001023B0(0, *((void *)v11 + 2), 0, v11);
      }
      *a4 = v11;
      unint64_t result = CC_SHA512(a1, v8, (unsigned __int8 *)v11 + 32);
      *a5 = result;
      return result;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      unint64_t v8 = v9 - v10;
      if (!__OFSUB__(v9, v10)) {
        goto LABEL_6;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_8;
    default:
      LODWORD(v8) = BYTE6(a3);
      goto LABEL_8;
  }
}

unsigned __int8 *sub_1001B782C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char **a6)
{
  unint64_t result = (unsigned __int8 *)__DataStorage._bytes.getter();
  uint64_t v13 = result;
  if (result)
  {
    unint64_t result = (unsigned __int8 *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v13 += a1 - (void)result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  unint64_t result = sub_1001B76A8(v13, a4, a5, a6, &v14);
  if (!v6) {
    return v14;
  }
  return result;
}

BOOL sub_1001B78F0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = type metadata accessor for String.Encoding();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10013E71C(a1, a2);
  uint64_t v16 = v15;
  *(void *)&long long v29 = a3;
  *((void *)&v29 + 1) = a4;
  swift_bridgeObjectRetain();
  v17._unint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v18 = String.data(using:allowLossyConversion:)();
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  BOOL result = 0;
  if (v20 >> 60 != 15)
  {
    uint64_t v22 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v22 + 16) = 64;
    *(_OWORD *)(v22 + 32) = 0u;
    *(_OWORD *)(v22 + 48) = 0u;
    *(_OWORD *)(v22 + 64) = 0u;
    *(_OWORD *)(v22 + 80) = 0u;
    Class v28 = (char *)v22;
    switch(v20 >> 62)
    {
      case 1uLL:
        if (v18 >> 32 < (int)v18) {
          goto LABEL_19;
        }
        sub_1000A997C(v18, v20);
        sub_1001B782C((int)v18, v18 >> 32, v20 & 0x3FFFFFFFFFFFFFFFLL, v18, v20, &v28);
        break;
      case 2uLL:
        uint64_t v23 = *(void *)(v18 + 16);
        uint64_t v24 = *(void *)(v18 + 24);
        sub_1000A997C(v18, v20);
        swift_retain();
        swift_retain();
        sub_1001B782C(v23, v24, v20 & 0x3FFFFFFFFFFFFFFFLL, v18, v20, &v28);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        *(void *)((char *)&v29 + 6) = 0;
        *(void *)&long long v29 = 0;
        goto LABEL_6;
      default:
        *(void *)&long long v29 = v18;
        WORD4(v29) = v20;
        BYTE10(v29) = BYTE2(v20);
        BYTE11(v29) = BYTE3(v20);
        BYTE12(v29) = BYTE4(v20);
        BYTE13(v29) = BYTE5(v20);
LABEL_6:
        sub_1001B76A8(&v29, v18, v20, &v28, &v30);
        break;
    }
    sub_1000A9990(v18, v20);
    unint64_t v25 = *((void *)v28 + 2);
    if (v25)
    {
      if (v25 != 1)
      {
        if (v25 >= 3)
        {
          if (v25 != 3)
          {
            unsigned int v26 = *((_DWORD *)v28 + 8);
            sub_1000A9990(v18, v20);
            swift_bridgeObjectRelease();
            return bswap32(v26) == a5;
          }
LABEL_18:
          __break(1u);
LABEL_19:
          __break(1u);
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_1001B7C9C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v6 - 8);
  unint64_t v7 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      if (v8 != 8)
      {
        if (!v7)
        {
          uint64_t v24 = BYTE6(a2);
          goto LABEL_15;
        }
        if (v7 != 1)
        {
          uint64_t v26 = *(void *)(a1 + 16);
          uint64_t v25 = *(void *)(a1 + 24);
          BOOL v11 = __OFSUB__(v25, v26);
          uint64_t v24 = v25 - v26;
          if (!v11) {
            goto LABEL_15;
          }
LABEL_26:
          __break(1u);
          JUMPOUT(0x1001B8040);
        }
        LODWORD(v24) = HIDWORD(a1) - a1;
        if (!__OFSUB__(HIDWORD(a1), a1))
        {
          uint64_t v24 = (int)v24;
LABEL_15:
          if (v24 != 12)
          {
LABEL_19:
            uint64_t result = sub_1000A6240(a1, a2);
            uint64_t v14 = 0;
            uint64_t v16 = 0;
LABEL_21:
            unint64_t v36 = 0;
            unint64_t v37 = 0;
            a1 = 0;
            a2 = 0;
            goto LABEL_22;
          }
          sub_1000A618C(a1, a2);
          sub_100152FDC(4, a1, a2, &v40);
          uint64_t v27 = v40;
          unint64_t v28 = v41;
          static String.Encoding.utf8.getter();
          sub_10017F494();
          uint64_t v14 = String.init<A>(bytes:encoding:)();
          uint64_t v16 = v29;
          sub_1000A6240(v27, v28);
          if (v16)
          {
            unsigned __int8 v30 = Data.subscript.getter();
            unsigned __int8 v38 = Data.subscript.getter();
            unsigned __int8 v31 = Data.subscript.getter();
            unsigned __int8 v32 = Data.subscript.getter();
            unsigned int v39 = Data.subscript.getter();
            unsigned int v33 = Data.subscript.getter();
            unsigned int v34 = Data.subscript.getter();
            unint64_t v22 = ((unint64_t)v30 << 24) | ((unint64_t)v38 << 16) | ((unint64_t)v31 << 8) | v32;
            uint64_t v35 = Data.subscript.getter();
            uint64_t result = Data.subscript.getter();
            unint64_t v23 = (v35 << 40) | ((unint64_t)result << 32) | (v34 >> 5) & 1 | ((unint64_t)((v33 >> 4) & 1) << 8) | ((unint64_t)((v39 >> 3) & 1) << 16);
            uint64_t v21 = 0x10000;
            goto LABEL_18;
          }
LABEL_20:
          uint64_t result = sub_1000A6240(a1, a2);
          uint64_t v14 = 0;
          goto LABEL_21;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      sub_1000A618C(a1, a2);
      sub_100152FDC(4, a1, a2, &v40);
      uint64_t v12 = v40;
      unint64_t v13 = v41;
      static String.Encoding.utf8.getter();
      sub_10017F494();
      uint64_t v14 = String.init<A>(bytes:encoding:)();
      uint64_t v16 = v15;
      sub_1000A6240(v12, v13);
      if (!v16) {
        goto LABEL_20;
      }
      unint64_t v17 = (unint64_t)Data.subscript.getter() << 24;
      unint64_t v18 = v17 & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)Data.subscript.getter() << 16);
      unint64_t v19 = v18 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)Data.subscript.getter() << 8);
      uint64_t result = Data.subscript.getter();
      uint64_t v21 = 0;
      unint64_t v22 = v19 & 0xFFFFFFFFFFFFFF00 | result;
      unint64_t v23 = 2;
LABEL_18:
      unint64_t v36 = v22 | (v23 << 32);
      unint64_t v37 = v21 | HIDWORD(v23);
LABEL_22:
      *a3 = v14;
      a3[1] = v16;
      a3[2] = v36;
      a3[3] = v37;
      a3[4] = a1;
      a3[5] = a2;
      return result;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_24;
    case 3uLL:
      goto LABEL_19;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AccessoryAdvData.AdvState(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryAdvData.AdvState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[6]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryAdvData.AdvState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 6) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 6) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryAdvData.AdvState()
{
  return &type metadata for AccessoryAdvData.AdvState;
}

uint64_t sub_1001B810C(uint64_t a1, void *a2, void *a3)
{
  BOOL v4 = a2;
  int v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    BOOL v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  sub_1000A9990((uint64_t)v4, v8);

  return swift_release();
}

void sub_1001B81B8(uint64_t a1, void *a2)
{
  unsigned int v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1001B8224()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001060E8();
  *(unsigned char *)(v0 + 16) = 0;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0xE000000000000000;
  uint64_t v6 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  uint64_t v7 = v1 + *(int *)(v6 + 40);
  sub_1000A6240(*(void *)v7, *(void *)(v7 + 8));
  *(_OWORD *)uint64_t v7 = xmmword_100240D00;
  UUID.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v1 + *(int *)(v6 + 36), v5, v2);
  uint64_t result = swift_errorRelease();
  *(void *)(v1 + 8) = 0;
  *(void *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_1001B834C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v0;
  if (*(void *)(v11 + 16))
  {
    uint64_t v12 = *(void **)(v11 + 24);
    if (v12)
    {
      aBlock[4] = sub_1000BF168;
      aBlock[5] = v11;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = sub_1001468DC;
      uint64_t aBlock[3] = &unk_100279E88;
      v18[0] = _Block_copy(aBlock);
      id v13 = v12;
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v18[1] = _swiftEmptyArrayStorage;
      sub_1001BBE28((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000992E8((uint64_t *)&unk_1002A7F60);
      sub_100099CB8();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v14 = (const void *)v18[0];
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v14);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      uint64_t result = swift_release();
    }
  }
  else
  {
    uint64_t result = sub_100105BB4();
  }
  uint64_t v15 = v1[5];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    v1[5] = v17;
  }
  return result;
}

void sub_1001B8608(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v49 = *(void *)(v6 - 8);
  uint64_t v50 = v6;
  __chkstk_darwin(v6);
  id v48 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  unint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token + 8);
  unint64_t v41 = (uint64_t *)(v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  uint64_t v14 = v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_tokenUUID;
  swift_beginAccess();
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v45 = v9 + 16;
  uint64_t v46 = v14;
  id v44 = v15;
  v15(v11, v14, v8);
  uint64_t v16 = v3 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  swift_beginAccess();
  sub_1000A618C(v13, v12);
  swift_errorRelease();
  *(void *)(v16 + 8) = 0;
  *(unsigned char *)(v16 + 16) = 1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  *(void *)(v16 + 24) = a1;
  *(void *)(v16 + 32) = a2;
  uint64_t v17 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 24))(v16 + *(int *)(v17 + 36), v11, v8);
  unint64_t v18 = (uint64_t *)(v16 + *(int *)(v17 + 40));
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  sub_1000A618C(v13, v12);
  sub_1000A6240(v19, v20);
  uint64_t *v18 = v13;
  v18[1] = v12;
  sub_1001B834C();
  uint64_t v21 = v9 + 8;
  unint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v11, v8);
  swift_endAccess();
  sub_1000A6240(v13, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v3 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v50);
  uint64_t v47 = v3;
  swift_retain_n();
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    v40[2] = v21;
    uint64_t v26 = (uint8_t *)v25;
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136315138;
    v40[1] = v26 + 4;
    v44(v11, v46, v8);
    uint64_t v27 = UUID.uuidString.getter();
    uint64_t v28 = v8;
    uint64_t v29 = v22;
    unint64_t v31 = v30;
    v29(v11, v28);
    uint64_t v51 = sub_1000993AC(v27, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    unint64_t v22 = v29;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Requesting metadata for token: %s", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
  }
  else
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v48, v50);
    uint64_t v28 = v8;
  }
  uint64_t v32 = v47;
  uint64_t v33 = *v41;
  unint64_t v34 = v41[1];
  id v35 = *(id *)(v47 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_authManager);
  sub_1000A618C(v33, v34);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A6240(v33, v34);
  v44(v11, v46, v28);
  Class v37 = UUID._bridgeToObjectiveC()().super.isa;
  v22(v11, v28);
  NSString v38 = String._bridgeToObjectiveC()();
  aBlock[4] = (uint64_t)sub_1001BBE80;
  aBlock[5] = v32;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = (uint64_t)sub_1001B9620;
  uint64_t aBlock[3] = (uint64_t)&unk_100279F00;
  unsigned int v39 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v35 requestTokenMetadata:isa tokenUUID:v37 model:v38 completionHandler:v39];
  _Block_release(v39);
}

void sub_1001B8BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v59 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v59 - v16;
  if (a4)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v59 - v16, a5 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v60 = a5;
      uint64_t v64 = v21;
      uint64_t v59 = v8;
      *(_DWORD *)unint64_t v20 = 136315138;
      swift_getErrorValue();
      uint64_t v22 = Error.localizedDescription.getter();
      *(void *)&long long v62 = sub_1000993AC(v22, v23, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Auth metadata request failed: %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v59);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    }
    sub_1001BAC3C(a4);
    return;
  }
  uint64_t v24 = a5 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  swift_beginAccess();
  if (*(unsigned char *)(v24 + 16) == 1)
  {
    swift_beginAccess();
    sub_1001B8224();
    swift_endAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, a5 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Auth metadata received.", v27, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
    uint64_t v60 = a5;
    if (a3)
    {
      strcpy((char *)v61, "accessory_name");
      HIBYTE(v61[1]) = -18;
      AnyHashable.init<A>(_:)();
      if (*(void *)(a3 + 16) && (unint64_t v28 = sub_10016DD3C((uint64_t)&v64), (v29 & 1) != 0))
      {
        sub_100099C1C(*(void *)(a3 + 56) + 32 * v28, (uint64_t)&v62);
      }
      else
      {
        long long v62 = 0u;
        long long v63 = 0u;
      }
      sub_10016F8D8((uint64_t)&v64);
      if (*((void *)&v63 + 1))
      {
        int v33 = swift_dynamicCast();
        if (v33) {
          uint64_t v34 = v64;
        }
        else {
          uint64_t v34 = 0;
        }
        if (v33) {
          uint64_t v35 = v65;
        }
        else {
          uint64_t v35 = 0;
        }
        uint64_t v59 = v35;
      }
      else
      {
        sub_1000A61E4((uint64_t)&v62, &qword_1002AA5F0);
        uint64_t v59 = 0;
        uint64_t v34 = 0;
      }
      v61[0] = 0x646E617262;
      v61[1] = 0xE500000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(a3 + 16) && (unint64_t v42 = sub_10016DD3C((uint64_t)&v64), (v43 & 1) != 0))
      {
        sub_100099C1C(*(void *)(a3 + 56) + 32 * v42, (uint64_t)&v62);
      }
      else
      {
        long long v62 = 0u;
        long long v63 = 0u;
      }
      sub_10016F8D8((uint64_t)&v64);
      if (*((void *)&v63 + 1))
      {
        int v44 = swift_dynamicCast();
        if (v44) {
          uint64_t v39 = v64;
        }
        else {
          uint64_t v39 = 0;
        }
        if (v44) {
          uint64_t v38 = v65;
        }
        else {
          uint64_t v38 = 0;
        }
      }
      else
      {
        sub_1000A61E4((uint64_t)&v62, &qword_1002AA5F0);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
      }
      v61[0] = 0x6C65646F6DLL;
      v61[1] = 0xE500000000000000;
      AnyHashable.init<A>(_:)();
      if (*(void *)(a3 + 16) && (unint64_t v45 = sub_10016DD3C((uint64_t)&v64), (v46 & 1) != 0))
      {
        sub_100099C1C(*(void *)(a3 + 56) + 32 * v45, (uint64_t)&v62);
      }
      else
      {
        long long v62 = 0u;
        long long v63 = 0u;
      }
      sub_10016F8D8((uint64_t)&v64);
      if (*((void *)&v63 + 1))
      {
        int v47 = swift_dynamicCast();
        if (v47) {
          uint64_t v40 = v64;
        }
        else {
          uint64_t v40 = 0;
        }
        if (v47) {
          uint64_t v41 = v65;
        }
        else {
          uint64_t v41 = 0;
        }
      }
      else
      {
        sub_1000A61E4((uint64_t)&v62, &qword_1002AA5F0);
        uint64_t v41 = 0;
        uint64_t v40 = 0;
      }
      v61[0] = 0xD000000000000014;
      v61[1] = 0x800000010023A1F0;
      AnyHashable.init<A>(_:)();
      if (*(void *)(a3 + 16) && (unint64_t v48 = sub_10016DD3C((uint64_t)&v64), (v49 & 1) != 0))
      {
        sub_100099C1C(*(void *)(a3 + 56) + 32 * v48, (uint64_t)&v62);
      }
      else
      {
        long long v62 = 0u;
        long long v63 = 0u;
      }
      sub_10016F8D8((uint64_t)&v64);
      if (*((void *)&v63 + 1))
      {
        int v50 = swift_dynamicCast();
        if (v50) {
          uint64_t v37 = v64;
        }
        else {
          uint64_t v37 = 0;
        }
        if (v50) {
          uint64_t v36 = v65;
        }
        else {
          uint64_t v36 = 0;
        }
      }
      else
      {
        sub_1000A61E4((uint64_t)&v62, &qword_1002AA5F0);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
      }
      v61[0] = 0xD000000000000012;
      v61[1] = 0x800000010023A1D0;
      AnyHashable.init<A>(_:)();
      if (*(void *)(a3 + 16) && (unint64_t v51 = sub_10016DD3C((uint64_t)&v64), (v52 & 1) != 0))
      {
        sub_100099C1C(*(void *)(a3 + 56) + 32 * v51, (uint64_t)&v62);
      }
      else
      {
        long long v62 = 0u;
        long long v63 = 0u;
      }
      sub_10016F8D8((uint64_t)&v64);
      if (*((void *)&v63 + 1))
      {
        int v53 = swift_dynamicCast();
        uint64_t v54 = v64;
        if (v53)
        {
          uint64_t v55 = v65;
        }
        else
        {
          uint64_t v54 = 0;
          uint64_t v55 = 0;
        }
        goto LABEL_72;
      }
    }
    else
    {
      long long v62 = 0u;
      long long v63 = 0u;
      sub_1000A61E4((uint64_t)&v62, &qword_1002AA5F0);
      long long v62 = 0u;
      long long v63 = 0u;
      sub_1000A61E4((uint64_t)&v62, &qword_1002AA5F0);
      long long v62 = 0u;
      long long v63 = 0u;
      sub_1000A61E4((uint64_t)&v62, &qword_1002AA5F0);
      long long v62 = 0u;
      long long v63 = 0u;
      sub_1000A61E4((uint64_t)&v62, &qword_1002AA5F0);
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v34 = 0;
      uint64_t v59 = 0;
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      long long v62 = 0u;
      long long v63 = 0u;
    }
    sub_1000A61E4((uint64_t)&v62, &qword_1002AA5F0);
    uint64_t v54 = 0;
    uint64_t v55 = 0;
LABEL_72:
    uint64_t v64 = v34;
    uint64_t v65 = v59;
    uint64_t v66 = v39;
    uint64_t v67 = v38;
    uint64_t v68 = v40;
    uint64_t v69 = v41;
    uint64_t v70 = v37;
    uint64_t v71 = v36;
    uint64_t v72 = v54;
    uint64_t v73 = v55;
    uint64_t v56 = v60;
    uint64_t v57 = v60 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
    swift_beginAccess();
    sub_1001BBD4C(v57, (uint64_t)&v62);
    if (*((void *)&v63 + 1))
    {
      sub_1000A5D40((uint64_t)&v62, (uint64_t)v61);
      sub_1000A61E4((uint64_t)&v62, &qword_1002AAA28);
      sub_1000A5DA4(v61, v61[3]);
      id v58 = *(id *)(v56 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
      sub_100169648(v58, &v64, 0);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100099BCC((uint64_t)v61);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000A61E4((uint64_t)&v62, &qword_1002AAA28);
    }
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a5 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
  unint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Ignoring metadata response, accessory not requesting metadata or metadata already requested.", v32, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1001B9620(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  if (a3) {
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v10 = a4;
  v6(v7, v9, a3, a4);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_1001B96EC()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v43 = *(void *)(v1 - 8);
  uint64_t v44 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v0;
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  unint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token + 8);
  uint64_t v35 = v0;
  uint64_t v36 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
  uint64_t v11 = v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_tokenUUID;
  uint64_t v12 = v8;
  swift_beginAccess();
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v40 = v5 + 16;
  uint64_t v41 = v11;
  uint64_t v39 = v13;
  v13(v7, v11, v4);
  uint64_t v14 = v12 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  swift_beginAccess();
  sub_1000A618C(v9, v10);
  swift_errorRelease();
  *(void *)(v14 + 8) = 0;
  *(unsigned char *)(v14 + 16) = 2;
  swift_bridgeObjectRelease();
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = 0xE000000000000000;
  uint64_t v15 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 24))(v14 + *(int *)(v15 + 36), v7, v4);
  uint64_t v16 = (uint64_t *)(v14 + *(int *)(v15 + 40));
  uint64_t v17 = *v16;
  unint64_t v18 = v16[1];
  sub_1000A618C(v9, v10);
  sub_1000A6240(v17, v18);
  *uint64_t v16 = v9;
  v16[1] = v10;
  sub_1001B834C();
  os_log_type_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v42 = v5 + 8;
  uint64_t v38 = v19;
  v19(v7, v4);
  swift_endAccess();
  unint64_t v20 = v10;
  uint64_t v21 = v35;
  sub_1000A6240(v9, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v3, v21 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v44);
  swift_retain_n();
  uint64_t v37 = v3;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    uint64_t v34 = v24 + 4;
    v39(v7, v41, v4);
    uint64_t v25 = UUID.uuidString.getter();
    unint64_t v27 = v26;
    v38(v7, v4);
    uint64_t v45 = sub_1000993AC(v25, v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Activating token for %s", v24, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v44);
  unint64_t v28 = *(void **)(v21 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_manager);
  uint64_t v29 = *v36;
  unint64_t v30 = v36[1];
  sub_1000A618C(*v36, v30);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A6240(v29, v30);
  v39(v7, v41, v4);
  UUID.uuidString.getter();
  v38(v7, v4);
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = (uint64_t)sub_1001BBE78;
  aBlock[5] = v21;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = (uint64_t)sub_1001B810C;
  uint64_t aBlock[3] = (uint64_t)&unk_100279ED8;
  int v33 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v28 requestActivationForAuthToken:isa withUUID:v32 completionHandler:v33];
  _Block_release(v33);
}

void sub_1001B9C5C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v18 = (char *)&v41 - v17;
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v41 - v19;
  if (a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v41 - v19, a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v42 = v8;
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      uint64_t v43 = a4;
      *(_DWORD *)os_log_type_t v23 = 136315138;
      swift_getErrorValue();
      uint64_t v24 = Error.localizedDescription.getter();
      v44[0] = sub_1000993AC(v24, v25, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Auth activation request failed: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v9 + 8))(v20, v42);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v9 + 8))(v20, v8);
    }
    sub_1001BAC3C(a3);
  }
  else if (a2 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v18, a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Auth activation request failed: No data returned", v28, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v18, v8);
    sub_1000B8650();
    uint64_t v29 = swift_allocError();
    *unint64_t v30 = 2;
    sub_1001BAC3C(v29);
    swift_errorRelease();
  }
  else
  {
    uint64_t v31 = a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
    swift_beginAccess();
    if (*(unsigned char *)(v31 + 16) == 2)
    {
      swift_beginAccess();
      sub_1001B8224();
      swift_endAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
      NSString v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Auth activation successful.", v34, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
      uint64_t v35 = a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
      swift_beginAccess();
      sub_1001BBD4C(v35, (uint64_t)v45);
      if (v45[3])
      {
        sub_1000A5D40((uint64_t)v45, (uint64_t)v44);
        sub_1000A61E4((uint64_t)v45, &qword_1002AAA28);
        sub_1000A5DA4(v44, v44[3]);
        id v36 = *(id *)(a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
        sub_100161C1C(v36, a1, a2, 0);

        sub_100099BCC((uint64_t)v44);
      }
      else
      {
        sub_1000A61E4((uint64_t)v45, &qword_1002AAA28);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a4 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v8);
      uint64_t v37 = v8;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Ignoring auth response, accessory not activating or already activated.", v40, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v37);
    }
  }
}

void sub_1001BA2A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v38 = a3;
  unint64_t v41 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v34 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v40 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v3 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  swift_beginAccess();
  swift_errorRelease();
  *(void *)(v12 + 8) = 0;
  *(unsigned char *)(v12 + 16) = 3;
  swift_bridgeObjectRelease();
  *(void *)(v12 + 24) = 0;
  *(void *)(v12 + 32) = 0xE000000000000000;
  uint64_t v13 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(v12 + *(int *)(v13 + 36), a3, v6);
  uint64_t v14 = (uint64_t *)(v12 + *(int *)(v13 + 40));
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  unint64_t v17 = v41;
  sub_1000A618C(a1, v41);
  sub_1000A6240(v15, v16);
  uint64_t v37 = a1;
  *uint64_t v14 = a1;
  v14[1] = v17;
  sub_1001B834C();
  swift_endAccess();
  uint64_t v18 = v39;
  uint64_t v19 = v6;
  unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
  uint64_t v36 = v9;
  uint64_t v21 = v11;
  v20(v11, v39 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v9);
  os_log_type_t v22 = v34;
  (*(void (**)(void))(v7 + 16))();
  uint64_t v35 = v21;
  os_log_type_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v25 = 136315138;
    uint64_t v26 = UUID.uuidString.getter();
    uint64_t v42 = sub_1000993AC(v26, v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v19);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Confirming token for %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v18 = v39;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v19);
  }

  (*(void (**)(char *, uint64_t))(v40 + 8))(v35, v36);
  uint64_t v28 = v18;
  uint64_t v29 = *(void **)(v18 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_manager);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  UUID.uuidString.getter();
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  aBlock[4] = (uint64_t)sub_1001BBE70;
  aBlock[5] = v28;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = (uint64_t)sub_1001B81B8;
  uint64_t aBlock[3] = (uint64_t)&unk_100279EB0;
  NSString v32 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v29 confirmActivationForAuthToken:isa withUUID:v31 completionHandler:v32];
  _Block_release(v32);
}

void sub_1001BA730(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v31 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v31 - v12;
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v31 - v12, a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v4);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v32 = v4;
      unint64_t v17 = (uint8_t *)v16;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v33 = a2;
      v35[0] = v18;
      *(_DWORD *)unint64_t v17 = 136315138;
      swift_getErrorValue();
      uint64_t v19 = Error.localizedDescription.getter();
      v34[0] = sub_1000993AC(v19, v20, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Auth confirmation request failed: %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v32);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
    }
    sub_1001BAC3C(a1);
  }
  else
  {
    uint64_t v21 = a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
    swift_beginAccess();
    if (*(unsigned char *)(v21 + 16) == 3)
    {
      swift_beginAccess();
      sub_1001B8224();
      swift_endAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v4);
      os_log_type_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Auth token confirmed.", v24, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
      uint64_t v25 = a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
      swift_beginAccess();
      sub_1001BBD4C(v25, (uint64_t)v35);
      if (v35[3])
      {
        sub_1000A5D40((uint64_t)v35, (uint64_t)v34);
        sub_1000A61E4((uint64_t)v35, &qword_1002AAA28);
        sub_1000A5DA4(v34, v34[3]);
        uint64_t v26 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
        id v27 = v26;
        sub_100161254(v26, 0);

        sub_100099BCC((uint64_t)v34);
      }
      else
      {
        sub_1000A61E4((uint64_t)v35, &qword_1002AAA28);
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v4);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        unint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Ignoring confirmation response, accessory not confirming or already confirmed.", v30, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
}

void sub_1001BAC3C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (!a1) {
    return;
  }
  v18[0] = a1;
  swift_errorRetain();
  sub_1000992E8(&qword_1002A8F70);
  type metadata accessor for MFAAError(0);
  if (swift_dynamicCast())
  {
    uint64_t v8 = (void *)v17[0];
    v18[0] = v17[0];
    sub_1001BBE28(&qword_1002A8118, type metadata accessor for MFAAError);
    if (_BridgedStoredNSError.errorCode.getter() == -5)
    {
      uint64_t v9 = v1 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
      swift_beginAccess();
      if (*(uint64_t *)(v9 + 40) <= 2)
      {
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16))(v7, v1 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger, v4);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v12 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Network error occurred, attempting retry.", v12, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
        swift_beginAccess();
        sub_1001060E8();
        sub_1001B834C();
        swift_endAccess();

        return;
      }
    }
  }
  uint64_t v13 = v1 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
  swift_beginAccess();
  sub_1001BBD4C(v13, (uint64_t)v18);
  if (v18[3])
  {
    sub_1000A5D40((uint64_t)v18, (uint64_t)v17);
    sub_1000A61E4((uint64_t)v18, &qword_1002AAA28);
    sub_1000A5DA4(v17, v17[3]);
    uint64_t v14 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
    id v15 = v14;
    sub_100161254(v14, a1);

    sub_100099BCC((uint64_t)v17);
  }
  else
  {
    sub_1000A61E4((uint64_t)v18, &qword_1002AAA28);
  }
  swift_beginAccess();
  sub_1001B8224();
  swift_endAccess();
}

uint64_t sub_1001BAF78()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  uint64_t v3 = v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_tokenUUID;
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  sub_1000A6240(*(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token), *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token + 8));
  sub_1001BBDB4(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry);

  sub_1000A61E4(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate, &qword_1002AAA28);

  return swift_deallocClassInstance();
}

uint64_t sub_1001BB0C8()
{
  return type metadata accessor for DockAccessorySWAuth(0);
}

uint64_t type metadata accessor for DockAccessorySWAuth(uint64_t a1)
{
  return sub_100171AB4(a1, qword_1002AC858);
}

uint64_t sub_1001BB0F0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for DockAccessorySWAuth.AuthRetry(319);
      if (v3 <= 0x3F) {
        return swift_updateClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for DockAccessorySWAuth.AuthRetry(uint64_t a1)
{
  return sub_100171AB4(a1, qword_1002ACA50);
}

uint64_t sub_1001BB23C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    swift_retain();
    swift_errorRetain();
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v9 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = a2[5];
    uint64_t v10 = *(int *)(a3 + 36);
    uint64_t v11 = a1 + v10;
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    uint64_t v15 = *(int *)(a3 + 40);
    uint64_t v16 = (uint64_t *)(a1 + v15);
    unint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    sub_1000A618C(*v17, v19);
    *uint64_t v16 = v18;
    v16[1] = v19;
  }
  return a1;
}

uint64_t sub_1001BB378(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 40));
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];

  return sub_1000A6240(v7, v8);
}

uint64_t sub_1001BB418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_errorRetain();
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = (uint64_t *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  sub_1000A618C(*v15, v17);
  *uint64_t v14 = v16;
  v14[1] = v17;
  return a1;
}

uint64_t sub_1001BB508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 8);
  swift_errorRetain();
  *(void *)(a1 + 8) = v6;
  swift_errorRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_1000A618C(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_1000A6240(v16, v17);
  return a1;
}

uint64_t sub_1001BB618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 40)) = *(_OWORD *)(a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t sub_1001BB6C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_errorRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 40);
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  sub_1000A6240(v12, v13);
  return a1;
}

uint64_t sub_1001BB7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001BB7B8);
}

uint64_t sub_1001BB7B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1001BB868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001BB87C);
}

void *sub_1001BB87C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 36);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001BB924()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001BB9F8()
{
  uint64_t v1 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_retry;
  swift_beginAccess();
  sub_1001BBCE8(v4, (uint64_t)v3);
  if (*((uint64_t *)v3 + 5) > 2)
  {
    uint64_t v7 = v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_delegate;
    swift_beginAccess();
    sub_1001BBD4C(v7, (uint64_t)v28);
    if (v29)
    {
      sub_1000A5D40((uint64_t)v28, (uint64_t)v27);
      sub_1000A61E4((uint64_t)v28, &qword_1002AAA28);
      sub_1000A5DA4(v27, v27[3]);
      uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_accessoryServer);
      sub_1000B8650();
      uint64_t v9 = swift_allocError();
      *uint64_t v10 = 4;
      id v11 = v8;
      sub_100161254(v8, v9);
      swift_errorRelease();

      sub_100099BCC((uint64_t)v27);
    }
    else
    {
      sub_1000A61E4((uint64_t)v28, &qword_1002AAA28);
    }
    swift_beginAccess();
    sub_1001B8224();
    swift_endAccess();
  }
  else
  {
    switch(v3[16])
    {
      case 1:
        uint64_t v5 = *((void *)v3 + 3);
        uint64_t v6 = *((void *)v3 + 4);
        swift_bridgeObjectRetain();
        sub_1001B8608(v5, v6);
        swift_bridgeObjectRelease();
        break;
      case 2:
        uint64_t v12 = (uint64_t *)&v3[*(int *)(v1 + 40)];
        uint64_t v13 = *v12;
        unint64_t v14 = v12[1];
        unint64_t v15 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
        uint64_t v16 = *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token);
        unint64_t v17 = *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_token + 8);
        *unint64_t v15 = v13;
        v15[1] = v14;
        sub_1000A618C(v13, v14);
        sub_1000A6240(v16, v17);
        uint64_t v18 = &v3[*(int *)(v1 + 36)];
        uint64_t v19 = v0 + OBJC_IVAR____TtC14dockaccessoryd19DockAccessorySWAuth_tokenUUID;
        swift_beginAccess();
        uint64_t v20 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 24))(v19, v18, v20);
        swift_endAccess();
        sub_1001B96EC();
        break;
      case 3:
        uint64_t v21 = *(int *)(v1 + 36);
        os_log_type_t v22 = (uint64_t *)&v3[*(int *)(v1 + 40)];
        uint64_t v23 = *v22;
        unint64_t v24 = v22[1];
        uint64_t v25 = (uint64_t)&v3[v21];
        sub_1000A618C(*v22, v24);
        sub_1001BA2A0(v23, v24, v25);
        sub_1000A6240(v23, v24);
        break;
      default:
        return sub_1001BBDB4((uint64_t)v3);
    }
  }
  return sub_1001BBDB4((uint64_t)v3);
}

uint64_t sub_1001BBCE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BBD4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AAA28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001BBDB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DockAccessorySWAuth.AuthRetry(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001BBE10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001BBE20()
{
  return swift_release();
}

uint64_t sub_1001BBE28(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1001BBE70(uint64_t a1)
{
  sub_1001BA730(a1, v1);
}

void sub_1001BBE78(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1001B9C5C(a1, a2, a3, v3);
}

void sub_1001BBE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001B8BB0(a1, a2, a3, a4, v4);
}

uint64_t getEnumTagSinglePayload for DockAccessorySWAuth.AuthRetryStep(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DockAccessorySWAuth.AuthRetryStep(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001BBFE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DockAccessorySWAuth.AuthRetryStep()
{
  return &type metadata for DockAccessorySWAuth.AuthRetryStep;
}

unint64_t sub_1001BC020()
{
  unint64_t result = qword_1002ACAA0;
  if (!qword_1002ACAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002ACAA0);
  }
  return result;
}

uint64_t type metadata accessor for DockIDSServer()
{
  uint64_t result = qword_1002ACB10;
  if (!qword_1002ACB10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1001BC0D8()
{
  sub_1001CE6FC();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t sub_1001BC1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BC1FC(a1, a2, a3);
}

uint64_t sub_1001BC1D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BC1FC(a1, a2, a3);
}

uint64_t sub_1001BC1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1000A61E4(a1, &qword_1002A8800);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1001BC3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_1000A61E4(a1, &qword_1002A8800);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void sub_1001BC528(char *a1, void **a2)
{
}

void sub_1001BC558(char *a1, void **a2)
{
}

uint64_t sub_1001BC588@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v33 = a3;
  uint64_t v37 = sub_1000992E8(&qword_1002ACB80);
  uint64_t v32 = *(void *)(v37 - 8);
  uint64_t v5 = __chkstk_darwin(v37);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v31 - v8;
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v34 = a2 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v35 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  if (!v13) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v16 | (v15 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v9, v21 + *(void *)(*(void *)(v22 - 8) + 72) * i, v22);
    uint64_t v23 = (uint64_t *)(*(void *)(a2 + 56) + 16 * i);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    uint64_t v26 = &v9[*(int *)(v37 + 48)];
    *(void *)uint64_t v26 = v24;
    *((void *)v26 + 1) = v25;
    sub_1000EA2DC((uint64_t)v9, (uint64_t)v7, &qword_1002ACB80);
    swift_bridgeObjectRetain();
    char v27 = v36(v7);
    if (v3)
    {
      sub_1000A61E4((uint64_t)v7, &qword_1002ACB80);
      return swift_release();
    }
    if (v27)
    {
      swift_release();
      uint64_t v28 = v33;
      sub_1000EA2DC((uint64_t)v7, v33, &qword_1002ACB80);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v37);
    }
    uint64_t result = sub_1000A61E4((uint64_t)v7, &qword_1002ACB80);
    if (v13) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v15 >= v35) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v34 + 8 * v15);
    if (!v19) {
      break;
    }
LABEL_17:
    unint64_t v13 = (v19 - 1) & v19;
  }
  int64_t v20 = v15 + 1;
  if (v15 + 1 >= v35) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v34 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v15 + 2;
  if (v15 + 2 >= v35) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v34 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v15 + 3;
  if (v15 + 3 >= v35) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v34 + 8 * v20);
  if (v19) {
    goto LABEL_16;
  }
  int64_t v20 = v15 + 4;
  if (v15 + 4 >= v35)
  {
LABEL_28:
    uint64_t v30 = v32;
    uint64_t v29 = v33;
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v29, 1, 1, v37);
  }
  unint64_t v19 = *(void *)(v34 + 8 * v20);
  if (v19)
  {
LABEL_16:
    int64_t v15 = v20;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v15 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v15 >= v35) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v34 + 8 * v15);
    ++v20;
    if (v19) {
      goto LABEL_17;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1001BC8FC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002ACAA8);
  sub_100096F64(v0, (uint64_t)qword_1002ACAA8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1001BC96C()
{
  uint64_t result = getpid();
  dword_1002ACAC0 = result;
  qword_1002ACAC8 = 0xD000000000000018;
  unk_1002ACAD0 = 0x8000000100233FF0;
  return result;
}

uint64_t sub_1001BC9AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for DockKitIDSMessageType.register(_:)) {
    return 0x7265747369676572;
  }
  int v8 = v6;
  if (v6 == enum case for DockKitIDSMessageType.deRegister(_:)) {
    return 0x7473696765526564;
  }
  if (v6 == enum case for DockKitIDSMessageType.ack(_:)) {
    return 7037793;
  }
  if (v6 == enum case for DockKitIDSMessageType.info(_:)) {
    return 1868983913;
  }
  if (v6 == enum case for DockKitIDSMessageType.select(_:)) {
    return 0x7463656C6573;
  }
  if (v6 == enum case for DockKitIDSMessageType.offset(_:)) {
    return 0x74657366666FLL;
  }
  if (v6 == enum case for DockKitIDSMessageType.region(_:)) {
    return 0x6E6F69676572;
  }
  if (v6 == enum case for DockKitIDSMessageType.frame(_:)) {
    return 0x656D617266;
  }
  if (v6 == enum case for DockKitIDSMessageType.velocity(_:)) {
    return 0x797469636F6C6576;
  }
  if (v6 == enum case for DockKitIDSMessageType.objects(_:)) {
    return 0x737463656A626FLL;
  }
  if (v6 == enum case for DockKitIDSMessageType.debug(_:)) {
    return 0x6775626564;
  }
  if (v6 == enum case for DockKitIDSMessageType.trajectory(_:)) {
    return 0x6F7463656A617274;
  }
  if (v6 == enum case for DockKitIDSMessageType.diagnostics(_:)) {
    return 0x74736F6E67616964;
  }
  if (v6 == enum case for DockKitIDSMessageType.systemTracking(_:)) {
    return 0x72546D6574737973;
  }
  if (v6 == enum case for DockKitIDSMessageType.camera(_:)) {
    return 0x6172656D6163;
  }
  uint64_t result = 0x76696C417065656BLL;
  if (v8 != enum case for DockKitIDSMessageType.keepAlive(_:)
    && v8 != enum case for DockKitIDSMessageType.keepAliveResp(_:))
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0x6E776F6E6B6E75;
  }
  return result;
}

char *sub_1001BCD98(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v48 = *(void *)(v3 - 8);
  uint64_t v49 = v3;
  __chkstk_darwin(v3);
  int v47 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v45 = *(void *)(v9 - 8);
  uint64_t v46 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = qword_1002ACAD8;
  v40[1] = sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  uint64_t v12 = v2;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_1001D6018((unint64_t *)&qword_1002A8530, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000992E8(&qword_1002A9000);
  sub_1000B9AB4((unint64_t *)&qword_1002A8540, &qword_1002A9000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v44);
  uint64_t v44 = (uint64_t)v11;
  *(void *)(v40[2] + v41) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v12[qword_1002ACAE0] = 0;
  uint64_t v13 = qword_1002ACAE8;
  *(void *)&v12[v13] = sub_1001E9F44((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v14 = qword_1002ACAF0;
  *(void *)&v12[v14] = sub_1001EA178((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)&v12[qword_1002ACAF8] = &_swiftEmptyArrayStorage;
  int64_t v15 = &v12[qword_1002ACB00];
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = qword_1002ACB08;
  type metadata accessor for DKIDSKeepAlive();
  swift_allocObject();
  *(void *)&v12[v17] = DKIDSKeepAlive.init(_:)();

  uint64_t v18 = (objc_class *)type metadata accessor for DockIDSServer();
  v52.receiver = v12;
  v52.super_class = v18;
  id v19 = [super init];
  uint64_t v20 = qword_1002A7C10;
  uint64_t v21 = (char *)v19;
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100096F64(v22, (uint64_t)qword_1002ACAA8);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Initializing IDS...", v25, 2u);
    swift_slowDealloc();
  }

  uint64_t v26 = *(void **)&v21[qword_1002ACAD8];
  id v27 = objc_allocWithZone((Class)type metadata accessor for DKIDSMessagingCenter());
  uint64_t v28 = v21;
  id v29 = v26;
  uint64_t v30 = DKIDSMessagingCenter.init(serviceName:delegate:queue:)();
  uint64_t v31 = *(void **)&v28[qword_1002ACAE0];
  *(void *)&v28[qword_1002ACAE0] = v30;

  sub_1001D6018(&qword_1002ACC58, (void (*)(uint64_t))type metadata accessor for DockIDSServer);
  uint64_t v32 = v28;
  swift_retain();
  dispatch thunk of DKIDSKeepAlive.setDelegate(delegate:)();
  swift_release();

  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v32;
  aBlock[4] = sub_1001D6098;
  aBlock[5] = v33;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1001468DC;
  uint64_t aBlock[3] = &unk_10027A328;
  uint64_t v34 = _Block_copy(aBlock);
  int64_t v35 = v32;
  uint64_t v36 = v44;
  static DispatchQoS.unspecified.getter();
  int v50 = &_swiftEmptyArrayStorage;
  sub_1001D6018((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  uint64_t v37 = v47;
  uint64_t v38 = v49;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v34);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v37, v38);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v36, v46);
  swift_release();
  swift_retain();
  dispatch thunk of DKIDSKeepAlive.startKeepAlive()();
  swift_release();

  return v35;
}

void sub_1001BD498(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + qword_1002ACAE0);
  if (v1)
  {
    id v2 = v1;
    id v3 = (id)DKIDSMessagingCenter.service.getter();

    sub_1001BD710(v3);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001BD508()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000A61E4(v0 + qword_1002ACB00, &qword_1002AA6A0);

  return swift_release();
}

id sub_1001BD5A0()
{
  swift_retain();
  dispatch thunk of DKIDSKeepAlive.stopKeepAlive()();
  swift_release();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DockIDSServer();
  return [super dealloc];
}

id sub_1001BD604(void *a1)
{
  id v1 = a1;
  swift_retain();
  dispatch thunk of DKIDSKeepAlive.stopKeepAlive()();
  swift_release();
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for DockIDSServer();
  return [super dealloc];
}

uint64_t sub_1001BD66C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000A61E4(a1 + qword_1002ACB00, &qword_1002AA6A0);

  return swift_release();
}

void sub_1001BD710(void *a1)
{
  uint64_t v67 = type metadata accessor for Logger();
  objc_super v2 = *(char **)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v65 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [a1 devices];
  if (!v4) {
    goto LABEL_41;
  }
  uint64_t v5 = v4;
  sub_100099C7C(0, &qword_1002ACC20);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = &off_1002AC000;
    if (v7) {
      goto LABEL_4;
    }
LABEL_34:
    swift_bridgeObjectRelease();
    uint64_t v52 = v53 + qword_1002ACAF0;
    swift_beginAccess();
    if (!*(void *)(*(void *)v52 + 16))
    {
      if (qword_1002A7C00 != -1) {
        swift_once();
      }
      sub_10018AA90();
    }
    return;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = &off_1002AC000;
  if (!v7) {
    goto LABEL_34;
  }
LABEL_4:
  uint64_t v9 = (char *)v8[350] + v53;
  unint64_t v64 = v6 & 0xC000000000000001;
  uint64_t v54 = (uint64_t *)v9;
  swift_beginAccess();
  uint64_t v60 = (void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  uint64_t v56 = 0;
  uint64_t v57 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v10 = 4;
  *(void *)&long long v11 = 136315138;
  long long v59 = v11;
  id v58 = (char *)&type metadata for Any + 8;
  *(void *)&long long v11 = 136315650;
  long long v55 = v11;
  uint64_t v12 = &selRef_authSession_authComplete_;
  unint64_t v61 = v6;
  uint64_t v63 = v7;
  while (1)
  {
    if (v64) {
      uint64_t v13 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v13 = (char *)*(id *)(v6 + 8 * v10);
    }
    objc_super v2 = v13;
    uint64_t v14 = v10 - 3;
    if (__OFADD__(v10 - 4, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_100096F64(v67, (uint64_t)qword_1002ACAA8);
    uint64_t v16 = v2;
    uint64_t v66 = v15;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      v68[0] = v62;
      *(_DWORD *)uint64_t v19 = v59;
      uint64_t v20 = v16;
      id v21 = [v20 description];
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;

      uint64_t v12 = &selRef_authSession_authComplete_;
      uint64_t v25 = v22;
      uint64_t v14 = v10 - 3;
      *(void *)(v19 + 4) = sub_1000993AC(v25, v24, v68);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s", (uint8_t *)v19, 0xCu);
      swift_arrayDestroy();
      unint64_t v6 = v61;
      swift_slowDealloc();
      uint64_t v7 = v63;
      swift_slowDealloc();
    }
    else
    {
    }
    if ([v16 isDefaultPairedDevice]) {
      break;
    }

LABEL_6:
    ++v10;
    if (v14 == v7) {
      goto LABEL_34;
    }
  }
  (*v60)(v65, v66, v67);
  uint64_t v26 = v16;
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v27, v28))
  {
    unint64_t v45 = v6;

    (*v57)(v65, v67);
LABEL_28:
    if ([v26 v12[469]])
    {
    }
    else
    {
      uint64_t v46 = v54;
      int v47 = v26;
      uint64_t v48 = swift_bridgeObjectRetain();
      uint64_t v49 = v56;
      uint64_t v50 = v14;
      uint64_t v51 = sub_1001D4454(v48, v47);
      uint64_t v56 = v49;
      swift_bridgeObjectRelease();

      *uint64_t v46 = v51;
      uint64_t v14 = v50;

      swift_bridgeObjectRelease();
    }
    unint64_t v6 = v45;
    uint64_t v7 = v63;
    goto LABEL_6;
  }
  uint64_t v66 = v14;
  uint64_t v29 = v10;
  uint64_t v30 = swift_slowAlloc();
  v68[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v30 = v55;
  id v31 = [v26 uniqueIDOverride];
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    *(void *)(v30 + 4) = sub_1000993AC(v33, v35, v68);
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    id v36 = [v26 name];
    if (!v36) {
      goto LABEL_40;
    }
    uint64_t v37 = v36;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v40 = v39;

    *(void *)(v30 + 14) = sub_1000993AC(v38, v40, v68);
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2080;
    uint64_t v12 = &selRef_authSession_authComplete_;
    unsigned int v41 = [v26 isConnected];
    BOOL v42 = v41 == 0;
    if (v41) {
      uint64_t v43 = 0x657463656E6E6F63;
    }
    else {
      uint64_t v43 = 0x656E6E6F63736964;
    }
    if (v42) {
      unint64_t v44 = 0xEC00000064657463;
    }
    else {
      unint64_t v44 = 0xE900000000000064;
    }
    *(void *)(v30 + 24) = sub_1000993AC(v43, v44, v68);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Device %s (%s) %s", (uint8_t *)v30, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*v57)(v65, v67);
    unint64_t v45 = v61;
    uint64_t v10 = v29;
    uint64_t v14 = v66;
    goto LABEL_28;
  }

  __break(1u);
LABEL_40:

  __break(1u);
LABEL_41:
  __break(1u);
}

void sub_1001BDE54(uint64_t a1)
{
  uint64_t v46 = a1;
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  __chkstk_darwin(v5);
  BOOL v42 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DockKitIDSMessage();
  uint64_t v44 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v43 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DockKitIDSInfo();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DockCoreManager();
  if ((static DockCoreManager.debugAllowed.getter() & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v16 = (void *)DockKitIDSInfo.info.getter();
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v15, 1, v1) == 1)
  {
    __break(1u);
    return;
  }
  id v17 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo());
  os_log_type_t v18 = (void *)DockCoreInfo.init(type:name:identifier:)();
  char v19 = static NSObject.== infix(_:_:)();

  if ((v19 & 1) == 0)
  {
LABEL_4:
    uint64_t v20 = v45 + qword_1002ACAF0;
    swift_beginAccess();
    if (*(void *)(*(void *)v20 + 16))
    {
      if (qword_1002A7C10 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100096F64(v21, (uint64_t)qword_1002ACAA8);
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v46, v9);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        unint64_t v39 = v4;
        uint64_t v25 = (uint8_t *)v24;
        uint64_t v26 = swift_slowAlloc();
        uint64_t v38 = v7;
        id v27 = (void *)v26;
        uint64_t v37 = v9;
        *(_DWORD *)uint64_t v25 = 138412290;
        uint64_t v28 = DockKitIDSInfo.info.getter();
        uint64_t v47 = v28;
        uint64_t v29 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v27 = v28;
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v29);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Sending INFO for accessory %@", v25, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        uint64_t v7 = v38;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      }

      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      sub_1001D6018(&qword_1002ACC30, (void (*)(uint64_t))&type metadata accessor for DockKitIDSInfo);
      uint64_t v30 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      unint64_t v32 = v31;
      swift_release();
      uint64_t v33 = *(void **)(v45 + qword_1002ACAE0);
      if (v33)
      {
        (*(void (**)(char *, void, uint64_t))(v40 + 104))(v42, enum case for DockKitIDSMessageType.info(_:), v41);
        type metadata accessor for DockKitIDSClient();
        id v34 = v33;
        static DockKitIDSClient.DockKitBroadcastToken.getter();
        sub_1000A618C(v30, v32);
        unint64_t v35 = v43;
        DockKitIDSMessage.init(type:token:payload:)();
        DKIDSMessagingCenter.send(_:)();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v35, v7);
        sub_1000A6240(v30, v32);
      }
      else
      {
        sub_1000A6240(v30, v32);
      }
    }
  }
}

uint64_t sub_1001BE638(void *a1, uint64_t a2)
{
  return sub_1001BE688(a1, a2, (uint64_t)&unk_10027A298, (uint64_t)sub_1001D5EA0, (uint64_t)&unk_10027A2B0);
}

uint64_t sub_1001BE660(void *a1, uint64_t a2)
{
  return sub_1001BE688(a1, a2, (uint64_t)&unk_10027A248, (uint64_t)sub_1001D5DF0, (uint64_t)&unk_10027A260);
}

uint64_t sub_1001BE688(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v5 + qword_1002ACAD8);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = a1;
  v16[3] = v15;
  v16[4] = a2;
  aBlock[4] = v21;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1001468DC;
  uint64_t aBlock[3] = v22;
  id v17 = _Block_copy(aBlock);
  id v18 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = &_swiftEmptyArrayStorage;
  sub_1001D6018((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v24);
  swift_release();
  return swift_release();
}

uint64_t sub_1001BE96C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), void (*a5)(uint64_t), uint64_t (*a6)(void))
{
  uint64_t v52 = a6;
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  uint64_t v54 = a3;
  uint64_t v6 = sub_1000992E8((uint64_t *)&unk_1002AD350);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v48 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v44 - v9;
  uint64_t v11 = type metadata accessor for DockKitIDSInfo();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v51 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v53 = (char *)&v44 - v15;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v44 - v21;
  uint64_t v23 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
  DockCoreInfo.identifier.getter();

  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
LABEL_14:
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    return sub_1000A61E4((uint64_t)v10, (uint64_t *)&unk_1002AD350);
  }
  uint64_t v25 = (void *)Strong;
  uint64_t v26 = (uint64_t *)(Strong + qword_1002ACAE8);
  swift_beginAccess();
  uint64_t v27 = *v26;
  swift_bridgeObjectRetain();

  if (*(void *)(v27 + 16) && (unint64_t v28 = sub_10016DC68((uint64_t)v22), (v29 & 1) != 0))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v10, *(void *)(v27 + 56) + *(void *)(v12 + 72) * v28, v11);
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v30(v10, 0, 1, v11);
  }
  else
  {
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    v30(v10, 1, 1, v11);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    goto LABEL_14;
  }
  uint64_t v46 = v30;
  uint64_t v47 = v16;
  unint64_t v31 = v53;
  uint64_t v32 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v53, v10, v11);
  uint64_t v49 = (uint64_t (*)(uint64_t))v49(v32);
  uint64_t v33 = (uint64_t)v51;
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v45(v51, v31, v11);
  v50(v54);
  swift_beginAccess();
  uint64_t v34 = swift_unknownObjectWeakLoadStrong();
  if (v34)
  {
    unint64_t v35 = (void *)v34;
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    uint64_t v44 = v20;
    v36(v20, v22, v47);
    uint64_t v37 = (uint64_t)v48;
    v45(v48, (char *)v33, v11);
    v46((char *)v37, 0, 1, v11);
    swift_beginAccess();
    sub_1001E1064(v37, (uint64_t)v44);
    swift_endAccess();
  }
  uint64_t v38 = v52;
  uint64_t v39 = v52(v54);
  if (v39 != v38(v49))
  {
    swift_beginAccess();
    uint64_t v40 = swift_unknownObjectWeakLoadStrong();
    if (v40)
    {
      uint64_t v41 = (void *)v40;
      sub_1001BDE54(v33);
    }
  }
  BOOL v42 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v42(v33, v11);
  v42((uint64_t)v53, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v22, v47);
}

uint64_t sub_1001BEEAC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)(v2 + qword_1002ACAD8);
  uint64_t v11 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_1001D5DE0;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1001468DC;
  uint64_t aBlock[3] = &unk_10027A210;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v18 = &_swiftEmptyArrayStorage;
  sub_1001D6018((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v17);
  swift_release();
  return swift_release();
}

uint64_t sub_1001BF198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8((uint64_t *)&unk_1002AD350);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v120 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  char v123 = (char *)&v117 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v117 - v9;
  uint64_t v11 = type metadata accessor for DockKitIDSInfo();
  uint64_t v132 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  char v119 = (char *)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v121 = (char *)&v117 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v118 = (char *)&v117 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  id v117 = (char *)&v117 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v124 = (char *)&v117 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v117 - v23;
  __chkstk_darwin(v22);
  unint64_t v126 = (char *)&v117 - v25;
  uint64_t v130 = type metadata accessor for UUID();
  uint64_t v129 = *(void *)(v130 - 8);
  uint64_t v26 = __chkstk_darwin(v130);
  uint64_t v122 = (char *)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  char v29 = (char *)&v117 - v28;
  uint64_t v30 = a2 + 16;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v31 = qword_1002B1628;
  uint64_t v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v33 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v33 + 4);
  swift_release();
  uint64_t v127 = *(void *)(v31 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState);
  uint64_t v34 = *(os_unfair_lock_s **)(v31 + v32);
  swift_retain();
  os_unfair_lock_unlock(v34 + 4);
  swift_release();
  unint64_t v35 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
  DockCoreInfo.identifier.getter();

  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v131 = a1;
  char v128 = v29;
  if (Strong)
  {
    uint64_t v37 = (void *)Strong;
    uint64_t v38 = (uint64_t *)(Strong + qword_1002ACAE8);
    swift_beginAccess();
    uint64_t v39 = *v38;
    swift_bridgeObjectRetain();

    uint64_t v40 = v132;
    if (*(void *)(v39 + 16) && (unint64_t v41 = sub_10016DC68((uint64_t)v29), (v42 & 1) != 0))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v10, *(void *)(v39 + 56) + *(void *)(v40 + 72) * v41, v11);
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v43(v10, 0, 1, v11);
    }
    else
    {
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56);
      v43(v10, 1, 1, v11);
    }
    swift_bridgeObjectRelease();
    int v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v10, 1, v11);
    id v125 = v43;
    if (v44 != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(v126, v10, v11);
      uint64_t v45 = qword_1002B1628;
      uint64_t v46 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
      uint64_t v47 = v46;
      uint64_t v48 = *(void **)(v45 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
      if (v48)
      {
        sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
        id v49 = v48;
        uint64_t v50 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
        static NSObject.== infix(_:_:)();
      }
      else
      {
      }
      dispatch thunk of DockCoreAccessory.info.getter();
      dispatch thunk of DockCoreAccessory.firmwareVersion.getter();
      dispatch thunk of DockCoreAccessory.serialNumber.getter();
      uint64_t v68 = v124;
      DockKitIDSInfo.init(info:dockState:trackingState:firmwareVersion:serialNumber:)();
      swift_beginAccess();
      uint64_t v69 = swift_unknownObjectWeakLoadStrong();
      uint64_t v70 = v132;
      if (v69)
      {
        uint64_t v71 = (void *)v69;
        uint64_t v72 = (uint64_t)v122;
        (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v122, v128, v130);
        uint64_t v73 = (uint64_t)v123;
        (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v123, v68, v11);
        v43((char *)v73, 0, 1, v11);
        swift_beginAccess();
        sub_1001E1064(v73, v72);
        swift_endAccess();
      }
      uint64_t v74 = v126;
      DockKitIDSInfo.dockState.getter();
      uint64_t v75 = DockState.rawValue.getter();
      uint64_t v76 = DockState.rawValue.getter();
      uint64_t v77 = v70;
      uint64_t v78 = v74;
      os_log_t v79 = v117;
      char v123 = *(char **)(v77 + 16);
      ((void (*)(char *, char *, uint64_t))v123)(v117, v78, v11);
      if (v75 == v76)
      {
        DockKitIDSInfo.trackingState.getter();
        uint64_t v80 = TrackingButtonState.rawValue.getter();
        BOOL v81 = v80 != TrackingButtonState.rawValue.getter();
      }
      else
      {
        BOOL v81 = 1;
      }
      uint64_t v82 = v118;
      uint64_t v67 = *(void (**)(char *, uint64_t))(v132 + 8);
      v67(v79, v11);
      id v83 = v123;
      ((void (*)(char *, char *, uint64_t))v123)(v82, v78, v11);
      if (v81)
      {
        v67(v82, v11);
        uint64_t v84 = v121;
        ((void (*)(char *, char *, uint64_t))v83)(v121, v78, v11);
      }
      else
      {
        Swift::String v85 = v82;
        id v86 = (void *)DockKitIDSInfo.info.getter();
        uint64_t v87 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
        type metadata accessor for DockCoreInfo();
        char v88 = static NSObject.== infix(_:_:)();
        dispatch_group_t v89 = v85;
        id v83 = v123;
        v67(v89, v11);

        uint64_t v78 = v126;
        uint64_t v84 = v121;
        ((void (*)(char *, char *, uint64_t))v83)(v121, v126, v11);
        if (v88)
        {
          uint64_t v90 = DockKitIDSInfo.firmwareVersion.getter();
          uint64_t v92 = v91;
          uint64_t v93 = dispatch thunk of DockCoreAccessory.firmwareVersion.getter();
          if (v94)
          {
            if (v90 == v93 && v94 == v92)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v67(v121, v11);
              swift_bridgeObjectRelease_n();
              uint64_t v95 = v119;
              ((void (*)(char *, char *, uint64_t))v83)(v119, v126, v11);
            }
            else
            {
              char v110 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              v67(v121, v11);
              swift_bridgeObjectRelease_n();
              uint64_t v95 = v119;
              id v96 = v126;
              ((void (*)(char *, char *, uint64_t))v83)(v119, v126, v11);
              if ((v110 & 1) == 0) {
                goto LABEL_33;
              }
            }
            uint64_t v111 = DockKitIDSInfo.serialNumber.getter();
            uint64_t v113 = v112;
            uint64_t v114 = dispatch thunk of DockCoreAccessory.serialNumber.getter();
            uint64_t v59 = v129;
            if (v115)
            {
              uint64_t v64 = v130;
              if (v111 == v114 && v115 == v113)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v67(v119, v11);
                v67(v124, v11);
                v67(v126, v11);
                swift_bridgeObjectRelease_n();
                uint64_t v63 = (uint64_t)v128;
              }
              else
              {
                char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v67(v119, v11);
                v67(v124, v11);
                v67(v126, v11);
                swift_bridgeObjectRelease_n();
                uint64_t v63 = (uint64_t)v128;
                if ((v116 & 1) == 0) {
                  goto LABEL_36;
                }
              }
              return (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v63, v64);
            }
            swift_bridgeObjectRetain();
            v67(v95, v11);
            v67(v124, v11);
            v67(v126, v11);
            swift_bridgeObjectRelease_n();
            uint64_t v64 = v130;
            goto LABEL_35;
          }
          swift_bridgeObjectRetain();
          v67(v121, v11);
          swift_bridgeObjectRelease_n();
          uint64_t v95 = v119;
          uint64_t v78 = v126;
LABEL_32:
          ((void (*)(char *, char *, uint64_t))v83)(v95, v78, v11);
          id v96 = v78;
LABEL_33:
          v67(v95, v11);
          v67(v124, v11);
          v67(v96, v11);
          goto LABEL_34;
        }
      }
      v67(v84, v11);
      uint64_t v95 = v119;
      goto LABEL_32;
    }
  }
  else
  {
    id v125 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v132 + 56);
    v125(v10, 1, 1, v11);
  }
  sub_1000A61E4((uint64_t)v10, (uint64_t *)&unk_1002AD350);
  dispatch thunk of DockCoreAccessory.info.getter();
  uint64_t v51 = qword_1002B1628;
  uint64_t v52 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
  uint64_t v53 = v52;
  uint64_t v54 = *(void **)(v51 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
  if (v54)
  {
    sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
    id v55 = v54;
    uint64_t v56 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    static NSObject.== infix(_:_:)();
  }
  else
  {
  }
  dispatch thunk of DockCoreAccessory.firmwareVersion.getter();
  dispatch thunk of DockCoreAccessory.serialNumber.getter();
  DockKitIDSInfo.init(info:dockState:trackingState:firmwareVersion:serialNumber:)();
  swift_beginAccess();
  uint64_t v57 = swift_unknownObjectWeakLoadStrong();
  if (!v57)
  {
    uint64_t v67 = *(void (**)(char *, uint64_t))(v132 + 8);
    v67(v24, v11);
LABEL_34:
    uint64_t v64 = v130;
    uint64_t v59 = v129;
LABEL_35:
    uint64_t v63 = (uint64_t)v128;
    goto LABEL_36;
  }
  id v58 = (void *)v57;
  uint64_t v59 = v129;
  uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v129 + 16);
  uint64_t v131 = v30;
  unint64_t v61 = v24;
  uint64_t v62 = (uint64_t)v122;
  uint64_t v63 = (uint64_t)v128;
  uint64_t v64 = v130;
  v60(v122, v128, v130);
  uint64_t v65 = v132;
  uint64_t v66 = (uint64_t)v123;
  (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v123, v61, v11);
  v125((char *)v66, 0, 1, v11);
  swift_beginAccess();
  sub_1001E1064(v66, v62);
  swift_endAccess();

  uint64_t v67 = *(void (**)(char *, uint64_t))(v65 + 8);
  v67(v61, v11);
LABEL_36:
  swift_beginAccess();
  uint64_t v97 = (void *)swift_unknownObjectWeakLoadStrong();

  if (!v97) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v63, v64);
  }
  swift_beginAccess();
  uint64_t v98 = swift_unknownObjectWeakLoadStrong();
  if (!v98) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8))(v63, v64);
  }
  uint64_t v99 = (void *)v98;
  uint64_t v100 = v63;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v102 = (void *)result;
    uint64_t v103 = (uint64_t *)(result + qword_1002ACAE8);
    swift_beginAccess();
    uint64_t v104 = *v103;
    swift_bridgeObjectRetain();

    if (*(void *)(v104 + 16))
    {
      unint64_t v105 = sub_10016DC68(v100);
      uint64_t v106 = (uint64_t)v120;
      uint64_t v107 = v132;
      if (v108)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v132 + 16))(v120, *(void *)(v104 + 56) + *(void *)(v132 + 72) * v105, v11);
        uint64_t v109 = 0;
      }
      else
      {
        uint64_t v109 = 1;
      }
    }
    else
    {
      uint64_t v109 = 1;
      uint64_t v106 = (uint64_t)v120;
      uint64_t v107 = v132;
    }
    v125((char *)v106, v109, 1, v11);
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v106, 1, v11);
    if (result != 1)
    {
      sub_1001BDE54(v106);

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v100, v64);
      return ((uint64_t (*)(uint64_t, uint64_t))v67)(v106, v11);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}