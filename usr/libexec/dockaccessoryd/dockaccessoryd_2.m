uint64_t sub_1001C0190(uint64_t a1)
{
  return sub_1001C1320(a1, (uint64_t)&unk_10027A1A8, (uint64_t)sub_1001D5DD0, (uint64_t)&unk_10027A1C0);
}

void sub_1001C01B8(uint64_t a1, uint64_t a2)
{
  uint64_t v116 = a2;
  uint64_t v2 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DockKitIDSMessage();
  unint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for Date();
  uint64_t v117 = *(void *)(v115 - 8);
  uint64_t v10 = __chkstk_darwin(v115);
  v109 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v108 = (char *)&v98 - v12;
  uint64_t v13 = sub_1000992E8(&qword_1002AA6A0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  v110 = (char *)&v98 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v111 = (uint64_t)&v98 - v17;
  __chkstk_darwin(v16);
  v118 = (char *)&v98 - v18;
  uint64_t v114 = sub_1000992E8(&qword_1002AA0B0);
  uint64_t v113 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  v112 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  __chkstk_darwin(v20 - 8);
  v119 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for DockKitBoundingBox();
  uint64_t v121 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  v23 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v24 = dispatch thunk of DKIntelligentTrackingState.trackedPeople.getter();
  if (v24)
  {
    unint64_t v25 = v24;
    v101 = v9;
    unint64_t v26 = v24 >> 62;
    v100 = v5;
    if (v24 >> 62)
    {
      unint64_t v46 = swift_bridgeObjectRetain();
      unint64_t v27 = (unint64_t)sub_1001F9BF0(v46);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v27 = v24 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    unint64_t v125 = v27;
    uint64_t v28 = 0;
    sub_1001D1890((uint64_t *)&v125, sub_1001E0CE8, (void (*)(void *))sub_1001D1924);
    uint64_t v29 = v125;
    if ((v125 & 0x8000000000000000) != 0) {
      unint64_t v30 = 1;
    }
    else {
      unint64_t v30 = (v125 >> 62) & 1;
    }
    uint64_t v103 = v6;
    unint64_t v102 = v7;
    uint64_t v99 = v2;
    uint64_t v105 = 0;
    unint64_t v104 = v26;
    if (v30 == 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      swift_bridgeObjectRetain();
      uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v48 < 0)
      {
        __break(1u);
        swift_release();
        __break(1u);
        return;
      }
      if (v47 >= 10) {
        uint64_t v49 = 10;
      }
      else {
        uint64_t v49 = v47;
      }
      if (v47 >= 0) {
        unint64_t v31 = v49;
      }
      else {
        unint64_t v31 = 10;
      }
      swift_bridgeObjectRetain();
      uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
      swift_release();
      if (v50 < (uint64_t)v31)
      {
        __break(1u);
        goto LABEL_48;
      }
    }
    else if (*(uint64_t *)(v125 + 16) >= 10)
    {
      unint64_t v31 = 10;
    }
    else
    {
      unint64_t v31 = *(void *)(v125 + 16);
    }
    uint64_t v28 = (uint64_t)v118;
    if ((v29 & 0xC000000000000001) != 0 && v31)
    {
      type metadata accessor for DKPersonTrackerState();
      Swift::Int v32 = 0;
      do
      {
        Swift::Int v33 = v32 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v32);
        Swift::Int v32 = v33;
      }
      while (v31 != v33);
    }
    if (v30)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.subscript.getter();
      uint64_t v36 = v35;
      v38 = v37;
      unint64_t v31 = v39;
      swift_release_n();
      uint64_t v29 = v34;
      unint64_t v30 = (unint64_t)v23;
      if ((v31 & 1) == 0) {
        goto LABEL_19;
      }
    }
    else
    {
      v38 = 0;
      uint64_t v36 = v29 + 32;
      unint64_t v31 = (2 * v31) | 1;
      unint64_t v30 = (unint64_t)v23;
      if ((v31 & 1) == 0) {
        goto LABEL_19;
      }
    }
    unint64_t v7 = v25;
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_unknownObjectRetain_n();
    v40 = (void *)swift_dynamicCastClass();
    if (!v40)
    {
      swift_unknownObjectRelease();
      v40 = _swiftEmptyArrayStorage;
    }
    uint64_t v41 = v40[2];
    swift_release();
    if (__OFSUB__(v31 >> 1, v38)) {
      goto LABEL_82;
    }
    if (v41 != (v31 >> 1) - (void)v38) {
      goto LABEL_83;
    }
    unint64_t v31 = swift_dynamicCastClass();
    uint64_t v28 = (uint64_t)v118;
    if (!v31)
    {
      swift_unknownObjectRelease();
      unint64_t v31 = (unint64_t)_swiftEmptyArrayStorage;
    }
    while (1)
    {
      swift_unknownObjectRelease();
      if ((v31 & 0x8000000000000000) != 0 || (v31 & 0x4000000000000000) != 0)
      {
LABEL_48:
        uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
        if (!v36)
        {
LABEL_49:
          swift_release();
          v43 = _swiftEmptyArrayStorage;
          goto LABEL_50;
        }
      }
      else
      {
        uint64_t v36 = *(void *)(v31 + 16);
        if (!v36) {
          goto LABEL_49;
        }
      }
      unint64_t v125 = (unint64_t)_swiftEmptyArrayStorage;
      v38 = &v125;
      sub_1001DC614(0, v36 & ~(v36 >> 63), 0);
      if ((v36 & 0x8000000000000000) == 0) {
        break;
      }
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      swift_unknownObjectRelease();
      unint64_t v25 = v7;
      uint64_t v28 = (uint64_t)v118;
LABEL_19:
      unint64_t v31 = (unint64_t)sub_1001F9BD8(v29, v36, (uint64_t)v38, v31);
    }
    unint64_t v106 = v25;
    uint64_t v107 = v3;
    uint64_t v42 = 0;
    v43 = (void *)v125;
    do
    {
      if ((v31 & 0xC000000000000001) != 0) {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        swift_retain();
      }
      dispatch thunk of DKPersonTrackerState.rect.getter();
      dispatch thunk of DKPersonTrackerState.uuid.getter();
      DockKitBoundingBox.init(_:id:)();
      swift_release();
      unint64_t v125 = (unint64_t)v43;
      unint64_t v45 = v43[2];
      unint64_t v44 = v43[3];
      if (v45 >= v44 >> 1)
      {
        sub_1001DC614(v44 > 1, v45 + 1, 1);
        v43 = (void *)v125;
      }
      ++v42;
      v43[2] = v45 + 1;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v121 + 32))((unint64_t)v43+ ((*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80))+ *(void *)(v121 + 72) * v45, v30, v120);
    }
    while (v36 != v42);
    swift_release();
    uint64_t v3 = v107;
    unint64_t v25 = v106;
    uint64_t v28 = (uint64_t)v118;
LABEL_50:
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    v52 = (void *)v117;
    if (!Strong)
    {
      swift_bridgeObjectRelease();
LABEL_57:
      swift_bridgeObjectRelease();
      return;
    }
    v53 = (char *)Strong;
    uint64_t v54 = Strong + qword_1002ACAF0;
    swift_beginAccess();
    if (!*(void *)(*(void *)v54 + 16)) {
      goto LABEL_55;
    }
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v55 = qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
    swift_beginAccess();
    uint64_t v56 = v113;
    v57 = v112;
    uint64_t v58 = v114;
    (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v112, v55, v114);
    DKThreadSafe.wrappedValue.getter();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
    if (v124)
    {
LABEL_55:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    uint64_t v59 = (uint64_t)&v53[qword_1002ACB00];
    swift_beginAccess();
    sub_1001D5CFC(v59, v28);
    v60 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v52[6];
    uint64_t v61 = v115;
    if (v60(v28, 1, v115))
    {
      sub_1000A61E4(v28, &qword_1002AA6A0);
      BOOL v62 = 0;
    }
    else
    {
      v63 = (void (*)(char *, uint64_t, uint64_t))v52[2];
      uint64_t v107 = v3;
      v64 = v108;
      v63(v108, v28, v61);
      sub_1000A61E4(v28, &qword_1002AA6A0);
      v65 = v109;
      static Date.now.getter();
      Date.distance(to:)();
      double v67 = v66;
      v68 = (void (*)(char *, uint64_t))v52[1];
      v68(v65, v115);
      v69 = v64;
      uint64_t v3 = v107;
      v68(v69, v115);
      uint64_t v61 = v115;
      BOOL v62 = v67 > 0.1;
    }
    uint64_t v70 = v111;
    sub_1001D5CFC(v59, v111);
    unsigned int v71 = v60(v70, 1, v61);
    sub_1000A61E4(v70, &qword_1002AA6A0);
    if (v71 != 1 && !v62 && v43[2])
    {

      swift_bridgeObjectRelease();
      goto LABEL_57;
    }
    uint64_t v72 = (uint64_t)v110;
    static Date.now.getter();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v117 + 56))(v72, 0, 1, v115);
    swift_beginAccess();
    sub_1001D5D64(v72, v59);
    swift_endAccess();
    uint64_t v73 = qword_1002ACAF8;
    *(void *)&v53[qword_1002ACAF8] = v43;
    swift_bridgeObjectRelease();
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    uint64_t v75 = sub_100096F64(v74, (uint64_t)qword_1002ACAA8);
    v76 = v53;
    swift_bridgeObjectRetain();
    v77 = Logger.logObject.getter();
    int v78 = static os_log_type_t.debug.getter();
    BOOL v79 = os_log_type_enabled(v77, (os_log_type_t)v78);
    uint64_t v121 = v75;
    if (v79)
    {
      v118 = v76;
      uint64_t v80 = swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      v123[0] = v116;
      *(_DWORD *)uint64_t v80 = 134218498;
      uint64_t v122 = *(void *)(*(void *)&v53[v73] + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v80 + 12) = 2048;
      LODWORD(v117) = v78;
      if (v104)
      {
        swift_bridgeObjectRetain();
        uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v81 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      uint64_t v122 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v80 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v82 = Array.description.getter();
      unint64_t v84 = v83;
      swift_bridgeObjectRelease();
      uint64_t v122 = sub_1000993AC(v82, v84, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v76 = v118;

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v117, "Sending bounding box information %ld of %ld: %s", (uint8_t *)v80, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    v123[0] = *(void *)&v53[v73];
    swift_bridgeObjectRetain();
    sub_1000992E8(&qword_1002ACC08);
    sub_1001D5C14();
    uint64_t v85 = v105;
    uint64_t v86 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v85)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_errorRetain();
      swift_errorRetain();
      v88 = Logger.logObject.getter();
      os_log_type_t v89 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc();
        v123[0] = swift_slowAlloc();
        *(_DWORD *)v90 = 136315138;
        swift_getErrorValue();
        uint64_t v91 = Error.localizedDescription.getter();
        uint64_t v122 = sub_1000993AC(v91, v92, v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "Unable to broadcast bounding boxes: %s", v90, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
    else
    {
      uint64_t v93 = v86;
      unint64_t v94 = v87;
      swift_release();
      swift_bridgeObjectRelease();
      v95 = *(void **)&v76[qword_1002ACAE0];
      if (v95)
      {
        (*(void (**)(char *, void, uint64_t))(v3 + 104))(v100, enum case for DockKitIDSMessageType.objects(_:), v99);
        type metadata accessor for DockKitIDSClient();
        id v96 = v95;
        static DockKitIDSClient.DockKitBroadcastToken.getter();
        sub_1000A618C(v93, v94);
        v97 = v101;
        DockKitIDSMessage.init(type:token:payload:)();
        DKIDSMessagingCenter.send(_:)();
        (*(void (**)(char *, uint64_t))(v102 + 8))(v97, v103);
        sub_1000A6240(v93, v94);
      }
      else
      {
        sub_1000A6240(v93, v94);
      }
    }
  }
}

uint64_t sub_1001C12F8(uint64_t a1)
{
  return sub_1001C1320(a1, (uint64_t)&unk_10027A158, (uint64_t)sub_1001D5CF4, (uint64_t)&unk_10027A170);
}

uint64_t sub_1001C1320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v18[0] = a4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(void *)(v4 + qword_1002ACAD8);
  uint64_t v14 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a1;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = a3;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001468DC;
  aBlock[3] = v18[0];
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = _swiftEmptyArrayStorage;
  sub_1001D6018((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v19);
  swift_release();
  return swift_release();
}

void sub_1001C1600(uint64_t a1, uint64_t a2)
{
  uint64_t v114 = a2;
  uint64_t v2 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v99 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DockKitIDSMessage();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v102 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = type metadata accessor for Date();
  uint64_t v115 = *(void *)(v113 - 8);
  uint64_t v8 = __chkstk_darwin(v113);
  unint64_t v104 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v103 = (char *)&v97 - v10;
  uint64_t v11 = sub_1000992E8(&qword_1002AA6A0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v105 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v108 = (uint64_t)&v97 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v97 - v16;
  uint64_t v111 = sub_1000992E8(&qword_1002AA0B0);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  __chkstk_darwin(v19 - 8);
  uint64_t v116 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = type metadata accessor for DockKitBoundingBox();
  uint64_t v118 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v22 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v23 = dispatch thunk of TrackingSummaryInternal.subjects.getter();
  uint64_t v24 = dispatch thunk of TrackingSummaryInternal.subjects.getter();
  uint64_t v107 = v17;
  if (v24 < 0 || (v24 & 0x4000000000000000) != 0) {
    goto LABEL_47;
  }
  uint64_t v25 = v24 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v122 = v25;
    sub_1001D1890(&v122, sub_1001E0A18, (void (*)(void *))sub_1001D212C);
    uint64_t v106 = 0;
    swift_bridgeObjectRelease();
    uint64_t v26 = v122;
    BOOL v27 = v122 < 0 || (v122 & 0x4000000000000000) != 0;
    uint64_t v101 = v4;
    uint64_t v100 = v2;
    if (!v27) {
      break;
    }
    swift_bridgeObjectRetain();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v4 < 0)
    {
      __break(1u);
      swift_release();
      __break(1u);
      return;
    }
    if (v44 >= 10) {
      uint64_t v45 = 10;
    }
    else {
      uint64_t v45 = v44;
    }
    if (v44 >= 0) {
      uint64_t v2 = v45;
    }
    else {
      uint64_t v2 = 10;
    }
    swift_bridgeObjectRetain();
    uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v46 >= v2) {
      goto LABEL_11;
    }
    __break(1u);
LABEL_47:
    unint64_t v47 = swift_bridgeObjectRetain();
    uint64_t v25 = (uint64_t)sub_1001F9DD8(v47);
    swift_bridgeObjectRelease();
  }
  if (*(uint64_t *)(v122 + 16) >= 10) {
    uint64_t v2 = 10;
  }
  else {
    uint64_t v2 = *(void *)(v122 + 16);
  }
LABEL_11:
  if ((v26 & 0xC000000000000001) != 0 && v2)
  {
    type metadata accessor for TrackedSubjectInternal();
    Swift::Int v28 = 0;
    do
    {
      Swift::Int v29 = v28 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v28);
      Swift::Int v28 = v29;
    }
    while (v2 != v29);
  }
  uint64_t v98 = v5;
  uint64_t v97 = v6;
  if (v27)
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = _CocoaArrayWrapper.subscript.getter();
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    unint64_t v36 = v35;
    swift_release_n();
    uint64_t v26 = v30;
    if ((v36 & 1) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v32 = v26 + 32;
    unint64_t v36 = (2 * v2) | 1;
    if ((v36 & 1) == 0) {
      goto LABEL_19;
    }
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  v38 = (void *)swift_dynamicCastClass();
  if (!v38)
  {
    swift_unknownObjectRelease();
    v38 = _swiftEmptyArrayStorage;
  }
  uint64_t v39 = v38[2];
  swift_release();
  if (__OFSUB__(v36 >> 1, v34)) {
    goto LABEL_80;
  }
  if (v39 != (v36 >> 1) - v34) {
    goto LABEL_81;
  }
  uint64_t v37 = swift_dynamicCastClass();
  if (!v37)
  {
    swift_unknownObjectRelease();
    uint64_t v37 = (uint64_t)_swiftEmptyArrayStorage;
  }
  while (1)
  {
    swift_unknownObjectRelease();
    if (v37 < 0 || (v37 & 0x4000000000000000) != 0)
    {
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
      if (!v32)
      {
LABEL_49:
        swift_release();
        uint64_t v41 = _swiftEmptyArrayStorage;
        goto LABEL_50;
      }
    }
    else
    {
      uint64_t v32 = *(void *)(v37 + 16);
      if (!v32) {
        goto LABEL_49;
      }
    }
    uint64_t v122 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v26 = (uint64_t)&v122;
    sub_1001DC614(0, v32 & ~(v32 >> 63), 0);
    if ((v32 & 0x8000000000000000) == 0) {
      break;
    }
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    swift_unknownObjectRelease();
LABEL_19:
    uint64_t v37 = (uint64_t)sub_1001F9C2C(v26, v32, v34, v36);
  }
  unint64_t v112 = v23;
  uint64_t v40 = 0;
  uint64_t v41 = (void *)v122;
  do
  {
    if ((v37 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    dispatch thunk of TrackedSubjectInternal.rect.getter();
    dispatch thunk of TrackedSubjectInternal.identifier.getter();
    DockKitBoundingBox.init(_:id:)();
    swift_release();
    uint64_t v122 = (uint64_t)v41;
    unint64_t v43 = v41[2];
    unint64_t v42 = v41[3];
    if (v43 >= v42 >> 1)
    {
      sub_1001DC614(v42 > 1, v43 + 1, 1);
      uint64_t v41 = (void *)v122;
    }
    ++v40;
    v41[2] = v43 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v118 + 32))((unint64_t)v41+ ((*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80))+ *(void *)(v118 + 72) * v43, v22, v117);
  }
  while (v32 != v40);
  swift_release();
  unint64_t v23 = v112;
LABEL_50:
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v49 = (void *)v115;
  if (!Strong)
  {
    swift_bridgeObjectRelease();
LABEL_57:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v50 = (char *)Strong;
  uint64_t v51 = Strong + qword_1002ACAF0;
  swift_beginAccess();
  if (!*(void *)(*(void *)v51 + 16)) {
    goto LABEL_55;
  }
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v52 = qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
  swift_beginAccess();
  uint64_t v53 = v110;
  uint64_t v54 = v109;
  uint64_t v55 = v52;
  uint64_t v56 = v111;
  (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v109, v55, v111);
  DKThreadSafe.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v56);
  if (v121)
  {
LABEL_55:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v57 = (uint64_t)&v50[qword_1002ACB00];
  swift_beginAccess();
  uint64_t v58 = (uint64_t)v107;
  sub_1001D5CFC(v57, (uint64_t)v107);
  uint64_t v59 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v49[6];
  uint64_t v60 = v113;
  if (v59(v58, 1, v113))
  {
    sub_1000A61E4(v58, &qword_1002AA6A0);
    BOOL v61 = 0;
  }
  else
  {
    BOOL v62 = (void (*)(char *, uint64_t, uint64_t))v49[2];
    unint64_t v112 = v23;
    v63 = v103;
    v62(v103, v58, v60);
    sub_1000A61E4(v58, &qword_1002AA6A0);
    v64 = v104;
    static Date.now.getter();
    Date.distance(to:)();
    double v66 = v65;
    double v67 = (void (*)(char *, uint64_t))v49[1];
    v67(v64, v113);
    v68 = v63;
    unint64_t v23 = v112;
    v67(v68, v113);
    uint64_t v60 = v113;
    BOOL v61 = v66 > 0.1;
  }
  uint64_t v69 = v108;
  sub_1001D5CFC(v57, v108);
  unsigned int v70 = v59(v69, 1, v60);
  sub_1000A61E4(v69, &qword_1002AA6A0);
  if (v70 != 1 && !v61 && v41[2])
  {

    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  uint64_t v71 = (uint64_t)v105;
  static Date.now.getter();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56))(v71, 0, 1, v113);
  swift_beginAccess();
  sub_1001D5D64(v71, v57);
  swift_endAccess();
  uint64_t v72 = qword_1002ACAF8;
  *(void *)&v50[qword_1002ACAF8] = v41;
  swift_bridgeObjectRelease();
  if (qword_1002A7C10 != -1) {
    swift_once();
  }
  uint64_t v73 = type metadata accessor for Logger();
  uint64_t v74 = sub_100096F64(v73, (uint64_t)qword_1002ACAA8);
  uint64_t v75 = v50;
  swift_bridgeObjectRetain();
  v76 = Logger.logObject.getter();
  int v77 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v76, (os_log_type_t)v77))
  {
    LODWORD(v115) = v77;
    uint64_t v78 = swift_slowAlloc();
    uint64_t v114 = swift_slowAlloc();
    v120[0] = v114;
    *(_DWORD *)uint64_t v78 = 134218498;
    uint64_t v79 = *(void *)(*(void *)&v50[v72] + 16);

    uint64_t v119 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v78 + 12) = 2048;
    uint64_t v118 = v74;
    if (v23 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v80 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    uint64_t v119 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v78 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v81 = Array.description.getter();
    unint64_t v83 = v82;
    swift_bridgeObjectRelease();
    uint64_t v119 = sub_1000993AC(v81, v83, v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v115, "Sending bounding box information %ld of %ld: %s", (uint8_t *)v78, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v120[0] = *(void *)&v50[v72];
  swift_bridgeObjectRetain();
  sub_1000992E8(&qword_1002ACC08);
  sub_1001D5C14();
  uint64_t v84 = v106;
  uint64_t v85 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v84)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v87, v88))
    {
      os_log_type_t v89 = (uint8_t *)swift_slowAlloc();
      v120[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v89 = 136315138;
      swift_getErrorValue();
      uint64_t v90 = Error.localizedDescription.getter();
      uint64_t v119 = sub_1000993AC(v90, v91, v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "Unable to broadcast bounding boxes: %s", v89, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v92 = v85;
    unint64_t v93 = v86;
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v94 = *(void **)&v75[qword_1002ACAE0];
    if (v94)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v99 + 104))(v101, enum case for DockKitIDSMessageType.objects(_:), v100);
      type metadata accessor for DockKitIDSClient();
      id v95 = v94;
      static DockKitIDSClient.DockKitBroadcastToken.getter();
      sub_1000A618C(v92, v93);
      id v96 = v102;
      DockKitIDSMessage.init(type:token:payload:)();
      DKIDSMessagingCenter.send(_:)();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v98);
      sub_1000A6240(v92, v93);
    }
    else
    {
      sub_1000A6240(v92, v93);
    }
  }
}

void sub_1001C2720(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_1002A7C10 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100096F64(v6, (uint64_t)qword_1002ACAA8);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    v13[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_bridgeObjectRetain();
    sub_1000993AC(a1, a2, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Expiring client %s due to keep-alive timeout.", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v10 = v3 + qword_1002ACAF0;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_1001D498C(v11, a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)uint64_t v10 = v12;
  swift_bridgeObjectRelease();
  if (!*(void *)(*(void *)v10 + 16))
  {
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    sub_10018AA90();
  }
}

void sub_1001C2980()
{
  uint64_t v1 = type metadata accessor for UUID();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DockKitIDSMessage();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v0 + qword_1002ACAF0;
  swift_beginAccess();
  if (*(void *)(*(void *)v10 + 16))
  {
    uint64_t v11 = *(void **)(v0 + qword_1002ACAE0);
    if (v11)
    {
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DockKitIDSMessageType.keepAlive(_:), v2);
      type metadata accessor for DockKitIDSClient();
      id v12 = v11;
      static DockKitIDSClient.DockKitBroadcastToken.getter();
      DockKitIDSMessage.init(type:token:payload:)();
      DKIDSMessagingCenter.send(_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
}

void sub_1001C2D74(void *a1, uint64_t a2, uint64_t a3)
{
  double v65 = a1;
  uint64_t v64 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v66 = *(void *)(v64 - 8);
  uint64_t v6 = __chkstk_darwin(v64);
  v63 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v54 - v8;
  uint64_t v10 = type metadata accessor for DockKitIDSMessage();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = v3;
  if (a3 && (uint64_t v19 = *(void **)(v3 + qword_1002ACAE0)) != 0)
  {
    uint64_t v59 = v16;
    uint64_t v60 = v15;
    uint64_t v61 = v4;
    id v20 = v19;
    uint64_t v21 = (void *)DKIDSMessagingCenter.service.getter();

    NSString v22 = String._bridgeToObjectiveC()();
    id v23 = [v21 deviceForFromID:v22];

    if (v23)
    {
      uint64_t v24 = v65;
      if (qword_1002A7C10 != -1) {
        swift_once();
      }
      uint64_t v25 = v60;
      uint64_t v26 = sub_100096F64(v60, (uint64_t)qword_1002ACAA8);
      uint64_t v27 = v59;
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v18, v26, v25);
      (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v13, v24, v10);
      id v58 = v23;
      uint64_t v28 = Logger.logObject.getter();
      uint64_t v57 = v18;
      uint64_t v29 = v11;
      uint64_t v30 = v28;
      int v56 = static os_log_type_t.debug.getter();
      uint64_t v31 = &selRef_listener_shouldAcceptNewConnection_;
      if (os_log_type_enabled(v30, (os_log_type_t)v56))
      {
        os_log_t v55 = v30;
        uint64_t v32 = swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        uint64_t v68 = v54;
        *(_DWORD *)uint64_t v32 = 136315395;
        DockKitIDSMessage.type.getter();
        uint64_t v33 = sub_1001BC9AC();
        unint64_t v35 = v34;
        unint64_t v36 = v9;
        uint64_t v37 = v64;
        (*(void (**)(char *, uint64_t))(v66 + 8))(v36, v64);
        uint64_t v67 = sub_1000993AC(v33, v35, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v10);
        *(_WORD *)(v32 + 12) = 2081;
        id v38 = v58;
        id v39 = [v58 uniqueIDOverride];
        if (!v39) {
          goto LABEL_44;
        }
        uint64_t v40 = v39;
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v43 = v42;

        uint64_t v67 = sub_1000993AC(v41, v43, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_t v44 = v55;
        _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v56, "Got IDS message %s from %{private}s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v60);
        uint64_t v24 = v65;
        uint64_t v45 = v63;
        uint64_t v31 = &selRef_listener_shouldAcceptNewConnection_;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v10);

        id v38 = v58;
        (*(void (**)(char *, uint64_t))(v27 + 8))(v57, v25);
        uint64_t v45 = v63;
        uint64_t v37 = v64;
      }
      id v48 = [v38 v31[248]];
      if (v48)
      {
        uint64_t v49 = v48;
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v47 = v50;

        goto LABEL_15;
      }
      __break(1u);
LABEL_44:

      __break(1u);
      return;
    }
    uint64_t v46 = 0;
    unint64_t v47 = 0xE000000000000000;
  }
  else
  {
    uint64_t v46 = 0;
    unint64_t v47 = 0xE000000000000000;
  }
  uint64_t v37 = v64;
  uint64_t v24 = v65;
  uint64_t v45 = v63;
LABEL_15:
  DockKitIDSMessage.type.getter();
  int v51 = (*(uint64_t (**)(char *, uint64_t))(v66 + 88))(v45, v37);
  if (v51 == enum case for DockKitIDSMessageType.register(_:))
  {
    sub_1001C3668((uint64_t)v24, v46, v47);
LABEL_19:
    swift_bridgeObjectRelease();
    return;
  }
  if (v51 == enum case for DockKitIDSMessageType.deRegister(_:))
  {
    sub_1001C4768((uint64_t)v24, v46, v47);
    goto LABEL_19;
  }
  if (v51 == enum case for DockKitIDSMessageType.select(_:))
  {
    swift_bridgeObjectRelease();
    sub_1001C5D74();
  }
  else if (v51 == enum case for DockKitIDSMessageType.offset(_:))
  {
    swift_bridgeObjectRelease();
    sub_1001CB42C();
  }
  else if (v51 == enum case for DockKitIDSMessageType.region(_:))
  {
    swift_bridgeObjectRelease();
    sub_1001C6CC4();
  }
  else if (v51 == enum case for DockKitIDSMessageType.frame(_:))
  {
    swift_bridgeObjectRelease();
    sub_1001CACBC();
  }
  else if (v51 == enum case for DockKitIDSMessageType.velocity(_:))
  {
    swift_bridgeObjectRelease();
    sub_1001C7AFC();
  }
  else if (v51 == enum case for DockKitIDSMessageType.objects(_:))
  {
    swift_bridgeObjectRelease();
    sub_1001CD130((uint64_t)v24);
  }
  else if (v51 == enum case for DockKitIDSMessageType.trajectory(_:))
  {
    swift_bridgeObjectRelease();
    sub_1001C9860();
  }
  else if (v51 == enum case for DockKitIDSMessageType.diagnostics(_:))
  {
    swift_bridgeObjectRelease();
    sub_1001C52D0(v24);
  }
  else if (v51 == enum case for DockKitIDSMessageType.systemTracking(_:))
  {
    swift_bridgeObjectRelease();
    sub_1001C8BE0((uint64_t)v24);
  }
  else if (v51 == enum case for DockKitIDSMessageType.camera(_:))
  {
    swift_bridgeObjectRelease();
    sub_1001CBAE4();
  }
  else
  {
    if (v51 == enum case for DockKitIDSMessageType.keepAliveResp(_:))
    {
      sub_1001CCBD4((uint64_t)v24, v46, v47);
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
    uint64_t v52 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v52 - 8) + 104))(v53, enum case for DockKitIDSMessagingError.unsupportedMessageType(_:), v52);
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v45, v37);
  }
}

void sub_1001C3668(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v130 = a3;
  uint64_t v128 = a2;
  uint64_t v4 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v4 - 8);
  uint64_t v127 = (uint64_t)&v114 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = type metadata accessor for DockKitIDSMessage();
  uint64_t v134 = *(void *)(v131 - 8);
  uint64_t v6 = __chkstk_darwin(v131);
  char v124 = (char *)&v114 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  os_log_t v125 = (os_log_t)((char *)&v114 - v9);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v118 = (char *)&v114 - v11;
  __chkstk_darwin(v10);
  v129 = (char *)&v114 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v136 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v119 = (char *)&v114 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  v133 = (char *)&v114 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v114 - v18;
  uint64_t v20 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v114 - v25;
  uint64_t v135 = a1;
  DockKitIDSMessage.type.getter();
  uint64_t v27 = *(void (**)(char *, void, uint64_t))(v21 + 104);
  uint64_t v121 = v21 + 104;
  uint64_t v120 = v27;
  v27(v24, enum case for DockKitIDSMessageType.register(_:), v20);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v28 = v137[3];
  uint64_t v29 = v137[0];
  uint64_t v30 = *(void (**)(char *, uint64_t))(v21 + 8);
  v30(v24, v20);
  uint64_t v122 = v26;
  uint64_t v123 = v20;
  v30(v26, v20);
  if (v28 != v29)
  {
    uint64_t v36 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v38 = v40;
    id v39 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
    goto LABEL_5;
  }
  uint64_t v31 = v135;
  DockKitIDSMessage.token.getter();
  type metadata accessor for DockKitIDSClient();
  uint64_t v32 = v133;
  static DockKitIDSClient.DockKitBroadcastToken.getter();
  sub_1001D6018((unint64_t *)&unk_1002AA100, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = v136 + 8;
  unint64_t v34 = *(void (**)(char *, uint64_t))(v136 + 8);
  v34(v32, v13);
  uint64_t v136 = v35;
  v34(v19, v13);
  if (v33)
  {
    uint64_t v36 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v38 = v37;
    id v39 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
LABEL_5:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, *v39, v36);
    swift_willThrow();
    return;
  }
  uint64_t v116 = v34;
  uint64_t v117 = v19;
  v133 = (char *)v13;
  uint64_t v41 = DockKitIDSMessage.payload.getter();
  unint64_t v43 = v42;
  sub_1000A9990(v41, v42);
  uint64_t v44 = v134;
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v134 + 16);
  uint64_t v46 = v129;
  uint64_t v47 = v131;
  v45(v129, v31, v131);
  if (v43 >> 60 == 15)
  {
    v129 = *(char **)(v44 + 8);
    ((void (*)(char *, uint64_t))v129)(v46, v47);
    BOOL v115 = 0;
    unint64_t v48 = v130;
    goto LABEL_21;
  }
  unint64_t v49 = DockKitIDSMessage.payload.getter();
  unint64_t v48 = v130;
  if (v50 >> 60 == 15) {
    goto LABEL_49;
  }
  unsigned __int8 v51 = BYTE6(v50);
  int v52 = v49;
  switch(v50 >> 62)
  {
    case 1uLL:
      unint64_t v54 = HIDWORD(v49);
      sub_1000A9990(v49, v50);
      if (__OFSUB__(v54, v52))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      uint64_t v53 = (int)v54 - v52;
LABEL_15:
      uint64_t v31 = v135;
LABEL_16:
      v129 = *(char **)(v134 + 8);
      ((void (*)(char *, uint64_t))v129)(v46, v47);
      if (v53 >= 1)
      {
        uint64_t v57 = DockKitIDSMessage.payload.getter();
        if (v58 >> 60 != 15)
        {
          uint64_t v59 = v57;
          unint64_t v60 = v58;
          char v61 = Data.subscript.getter();
          sub_1000A9990(v59, v60);
          BOOL v115 = v61 != 0;
          goto LABEL_21;
        }
LABEL_50:
        __break(1u);
        JUMPOUT(0x1001C4758);
      }
LABEL_20:
      BOOL v115 = 0;
LABEL_21:
      uint64_t v62 = (uint64_t *)(v132 + qword_1002ACAF0);
      uint64_t v63 = swift_beginAccess();
      uint64_t v64 = *v62;
      __chkstk_darwin(v63);
      *(&v114 - 2) = v31;
      swift_bridgeObjectRetain();
      uint64_t v65 = v127;
      unint64_t v66 = v126;
      sub_1001BC588((uint64_t (*)(char *))sub_1001D0E68, v64, v127);
      unint64_t v130 = v66;
      swift_bridgeObjectRelease();
      uint64_t v67 = sub_1000992E8(&qword_1002ACB80);
      LODWORD(v64) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 48))(v65, 1, v67);
      sub_1000A61E4(v65, &qword_1002ACB70);
      uint64_t v68 = &unk_1002A7000;
      if (v64 == 1)
      {
        if (qword_1002A7C10 != -1) {
          swift_once();
        }
        uint64_t v69 = type metadata accessor for Logger();
        sub_100096F64(v69, (uint64_t)qword_1002ACAA8);
        os_log_t v70 = v125;
        v45((char *)v125, v31, v47);
        swift_bridgeObjectRetain_n();
        uint64_t v71 = v47;
        uint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.default.getter();
        int v74 = v73;
        if (os_log_type_enabled(v72, v73))
        {
          uint64_t v75 = swift_slowAlloc();
          uint64_t v127 = swift_slowAlloc();
          v137[0] = v127;
          *(_DWORD *)uint64_t v75 = 136315394;
          uint64_t v118 = (char *)(v75 + 4);
          v76 = v117;
          LODWORD(v126) = v74;
          DockKitIDSMessage.token.getter();
          sub_1001D6018(&qword_1002AA860, (void (*)(uint64_t))&type metadata accessor for UUID);
          int v77 = v133;
          uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v80 = v79;
          uint64_t v81 = v76;
          unint64_t v82 = (void (*)(uint64_t, char *))v116;
          v116(v81, (uint64_t)v77);
          uint64_t v138 = sub_1000993AC(v78, v80, v137);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          ((void (*)(os_log_t, uint64_t))v129)(v125, v71);
          *(_WORD *)(v75 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v83 = v128;
          uint64_t v138 = sub_1000993AC(v128, v48, v137);
          uint64_t v84 = v82;
          uint64_t v68 = (void *)&unk_1002A7000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v72, (os_log_type_t)v126, "Registering new client %s for device %s", (uint8_t *)v75, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v85 = v132;
          goto LABEL_33;
        }
        ((void (*)(os_log_t, uint64_t))v129)(v70, v71);
      }
      else
      {
        if (qword_1002A7C10 != -1) {
          swift_once();
        }
        uint64_t v86 = type metadata accessor for Logger();
        sub_100096F64(v86, (uint64_t)qword_1002ACAA8);
        unint64_t v87 = v118;
        v45(v118, v31, v47);
        swift_bridgeObjectRetain_n();
        os_log_type_t v88 = Logger.logObject.getter();
        os_log_type_t v89 = static os_log_type_t.default.getter();
        int v90 = v89;
        if (os_log_type_enabled(v88, v89))
        {
          uint64_t v91 = swift_slowAlloc();
          uint64_t v127 = swift_slowAlloc();
          v137[0] = v127;
          *(_DWORD *)uint64_t v91 = 136315394;
          uint64_t v114 = v91 + 4;
          LODWORD(v126) = v90;
          uint64_t v92 = v117;
          os_log_t v125 = v88;
          DockKitIDSMessage.token.getter();
          sub_1001D6018(&qword_1002AA860, (void (*)(uint64_t))&type metadata accessor for UUID);
          unint64_t v93 = v133;
          uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v96 = v95;
          uint64_t v97 = v92;
          uint64_t v98 = v93;
          uint64_t v68 = &unk_1002A7000;
          uint64_t v99 = (void (*)(uint64_t, char *))v116;
          v116(v97, (uint64_t)v98);
          uint64_t v138 = sub_1000993AC(v94, v96, v137);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v84 = v99;
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v129)(v87, v131);
          *(_WORD *)(v91 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v83 = v128;
          uint64_t v138 = sub_1000993AC(v128, v48, v137);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          os_log_t v100 = v125;
          _os_log_impl((void *)&_mh_execute_header, v125, (os_log_type_t)v126, "Re-registering client %s for device %s", (uint8_t *)v91, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v85 = v132;
          goto LABEL_33;
        }
        ((void (*)(char *, uint64_t))v129)(v87, v47);
      }
      swift_bridgeObjectRelease_n();
      uint64_t v83 = v128;
      uint64_t v85 = v132;
      uint64_t v84 = (void (*)(uint64_t, char *))v116;
LABEL_33:
      if (v115)
      {
        if (v68[386] != -1) {
          swift_once();
        }
        uint64_t v101 = type metadata accessor for Logger();
        sub_100096F64(v101, (uint64_t)qword_1002ACAA8);
        unint64_t v102 = Logger.logObject.getter();
        os_log_type_t v103 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v102, v103))
        {
          unint64_t v104 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v104 = 0;
          _os_log_impl((void *)&_mh_execute_header, v102, v103, "Treating this as an initial registration and clearing state.", v104, 2u);
          swift_slowDealloc();
        }

        if (qword_1002A7C00 != -1) {
          swift_once();
        }
        sub_10018AA90();
      }
      swift_bridgeObjectRetain();
      uint64_t v105 = swift_bridgeObjectRetain();
      unint64_t v106 = v130;
      uint64_t v107 = sub_1001D498C(v105, v83, v48);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *uint64_t v62 = v107;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v108 = (uint64_t)v117;
      DockKitIDSMessage.token.getter();
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v138 = *v62;
      *uint64_t v62 = 0x8000000000000000;
      sub_1001D3260(v83, v48, v108, isUniquelyReferenced_nonNull_native);
      *uint64_t v62 = v138;
      swift_bridgeObjectRelease();
      v84(v108, v133);
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v110 = *(void **)(v85 + qword_1002ACAE0);
      if (v110)
      {
        v120(v122, enum case for DockKitIDSMessageType.ack(_:), v123);
        id v111 = v110;
        DockKitIDSMessage.token.getter();
        unint64_t v112 = v124;
        DockKitIDSMessage.init(type:token:payload:)();
        DKIDSMessagingCenter.send(_:)();
        if (v106)
        {
          ((void (*)(char *, uint64_t))v129)(v112, v131);

          return;
        }
        ((void (*)(char *, uint64_t))v129)(v112, v131);

        uint64_t v84 = (void (*)(uint64_t, char *))v116;
      }
      unint64_t v113 = (unint64_t)v119;
      DockKitIDSMessage.token.getter();
      sub_1001CDCB4(v113);
      v84(v113, v133);
      if (!v106)
      {
        swift_retain();
        dispatch thunk of DKIDSKeepAlive.monitor(from:)();
        swift_release();
      }
      return;
    case 2uLL:
      uint64_t v56 = *(void *)(v49 + 16);
      uint64_t v55 = *(void *)(v49 + 24);
      sub_1000A9990(v49, v50);
      uint64_t v53 = v55 - v56;
      if (__OFSUB__(v55, v56)) {
        goto LABEL_48;
      }
      unint64_t v48 = v130;
      goto LABEL_15;
    case 3uLL:
      sub_1000A9990(v49, v50);
      v129 = *(char **)(v134 + 8);
      ((void (*)(char *, uint64_t))v129)(v46, v47);
      goto LABEL_20;
    default:
      sub_1000A9990(v49, v50);
      uint64_t v53 = v51;
      goto LABEL_16;
  }
}

void sub_1001C4768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v88 = a2;
  uint64_t v89 = a3;
  uint64_t v90 = type metadata accessor for DockKitIDSMessage();
  uint64_t v95 = *(void *)(v90 - 8);
  uint64_t v4 = __chkstk_darwin(v90);
  unint64_t v87 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v91 = (char *)&v81 - v6;
  uint64_t v7 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v7 - 8);
  uint64_t v93 = (uint64_t)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v98 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v92 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v96 = (char *)&v81 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v81 - v14;
  uint64_t v16 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v81 - v21;
  uint64_t v99 = a1;
  DockKitIDSMessage.type.getter();
  uint64_t v23 = *(void (**)(char *, void, uint64_t))(v17 + 104);
  uint64_t v85 = v17 + 104;
  uint64_t v84 = v23;
  v23(v20, enum case for DockKitIDSMessageType.deRegister(_:), v16);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v24 = v100[3];
  uint64_t v25 = v100[0];
  uint64_t v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v20, v16);
  uint64_t v86 = v22;
  uint64_t v83 = v16;
  v26(v22, v16);
  if (v24 != v25)
  {
    uint64_t v31 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v33 = v35;
    unint64_t v34 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
    goto LABEL_5;
  }
  DockKitIDSMessage.token.getter();
  type metadata accessor for DockKitIDSClient();
  uint64_t v27 = v96;
  static DockKitIDSClient.DockKitBroadcastToken.getter();
  sub_1001D6018((unint64_t *)&unk_1002AA100, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v29 = v98 + 8;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v98 + 8);
  v30(v27, v9);
  v30(v15, v9);
  if (v28)
  {
    uint64_t v31 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v33 = v32;
    unint64_t v34 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
LABEL_5:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, *v34, v31);
LABEL_6:
    swift_willThrow();
    return;
  }
  uint64_t v36 = v9;
  uint64_t v37 = v92;
  DockKitIDSMessage.token.getter();
  uint64_t v38 = (uint64_t *)&v97[qword_1002ACAF0];
  uint64_t v39 = swift_beginAccess();
  unint64_t v96 = v15;
  uint64_t v40 = v29;
  uint64_t v41 = *v38;
  __chkstk_darwin(v39);
  *(&v81 - 2) = (uint64_t)v37;
  swift_bridgeObjectRetain();
  unint64_t v42 = v30;
  uint64_t v43 = v93;
  uint64_t v44 = v94;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D4B54, v41, v93);
  uint64_t v94 = v44;
  swift_bridgeObjectRelease();
  uint64_t v45 = (uint64_t)v96;
  uint64_t v46 = sub_1000992E8(&qword_1002ACB80);
  int v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v43, 1, v46);
  uint64_t v48 = v43;
  unint64_t v49 = v42;
  sub_1000A61E4(v48, &qword_1002ACB70);
  v42(v37, v36);
  uint64_t v50 = v99;
  DockKitIDSMessage.token.getter();
  BOOL v51 = v47 == 1;
  uint64_t v52 = v36;
  if (v51)
  {
    uint64_t v53 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v54 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v53 - 8) + 104))(v55, enum case for DockKitIDSMessagingError.notRegistered(_:), v53);
    sub_1001CD810(v45, v54);
    v42((char *)v45, v52);
    swift_errorRelease();
    goto LABEL_6;
  }
  swift_beginAccess();
  sub_1001ED3CC(v45);
  uint64_t v93 = v36;
  v42((char *)v45, v36);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v56 = v38;
  if (qword_1002A7C10 != -1) {
    swift_once();
  }
  uint64_t v57 = type metadata accessor for Logger();
  sub_100096F64(v57, (uint64_t)qword_1002ACAA8);
  uint64_t v58 = v95;
  uint64_t v59 = v91;
  uint64_t v60 = v50;
  uint64_t v61 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v91, v60, v90);
  uint64_t v62 = v97;
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.default.getter();
  int v65 = v64;
  if (os_log_type_enabled(v63, v64))
  {
    uint64_t v66 = swift_slowAlloc();
    uint64_t v98 = v40;
    uint64_t v67 = v66;
    uint64_t v97 = (char *)swift_slowAlloc();
    v100[0] = (uint64_t)v97;
    *(_DWORD *)uint64_t v67 = 136315394;
    uint64_t v81 = v67 + 4;
    uint64_t v68 = v61;
    uint64_t v69 = v96;
    os_log_t v82 = v63;
    LODWORD(v92) = v65;
    DockKitIDSMessage.token.getter();
    sub_1001D6018(&qword_1002AA860, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v70 = v93;
    uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v72 = v56;
    unint64_t v74 = v73;
    uint64_t v75 = v69;
    uint64_t v61 = v68;
    v49(v75, v70);
    uint64_t v101 = sub_1000993AC(v71, v74, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v56 = v72;
    swift_bridgeObjectRelease();
    uint64_t v98 = *(void *)(v95 + 8);
    ((void (*)(char *, uint64_t))v98)(v91, v68);
    *(_WORD *)(v67 + 12) = 2048;
    uint64_t v76 = *(void *)(*v72 + 16);

    uint64_t v101 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    os_log_t v77 = v82;
    _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v92, "De-registering client %s. %ld client(s) remaining.", (uint8_t *)v67, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v98 = *(void *)(v58 + 8);
    ((void (*)(char *, uint64_t))v98)(v59, v61);
  }
  if (!*(void *)(*v56 + 16))
  {
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    sub_10018AA90();
  }
  swift_retain();
  dispatch thunk of DKIDSKeepAlive.expire(from:fail:)();
  swift_release();
  uint64_t v78 = *(void **)&v62[qword_1002ACAE0];
  if (v78)
  {
    v84(v86, enum case for DockKitIDSMessageType.ack(_:), v83);
    id v79 = v78;
    DockKitIDSMessage.token.getter();
    unint64_t v80 = v87;
    DockKitIDSMessage.init(type:token:payload:)();
    DKIDSMessagingCenter.send(_:)();
    ((void (*)(char *, uint64_t))v98)(v80, v61);
  }
}

void sub_1001C52D0(void *a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v2 - 8);
  uint64_t v68 = (char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v4 - 8);
  uint64_t v69 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for UUID();
  uint64_t v70 = *(void **)(v73 - 8);
  uint64_t v6 = __chkstk_darwin(v73);
  uint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  id v79 = (char *)&v67 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v67 - v11;
  uint64_t v13 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v67 - v18;
  id v74 = a1;
  DockKitIDSMessage.type.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for DockKitIDSMessageType.diagnostics(_:), v13);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v20 = v76;
  uint64_t v21 = v75[0];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  if (v20 != v21)
  {
    uint64_t v35 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v37 = v36;
    uint64_t v38 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_5:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *v38, v35);
    goto LABEL_6;
  }
  DockKitIDSMessage.token.getter();
  uint64_t v23 = (uint64_t *)(v72 + qword_1002ACAF0);
  uint64_t v24 = swift_beginAccess();
  uint64_t v25 = *v23;
  __chkstk_darwin(v24);
  *(&v67 - 2) = (uint64_t)v12;
  swift_bridgeObjectRetain();
  uint64_t v26 = (uint64_t)v69;
  uint64_t v27 = v71;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D60A0, v25, (uint64_t)v69);
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_1000992E8(&qword_1002ACB80);
  LODWORD(v25) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v26, 1, v28);
  sub_1000A61E4(v26, &qword_1002ACB70);
  uint64_t v29 = (void (*)(char *, uint64_t))v70[1];
  uint64_t v30 = v73;
  v29(v12, v73);
  if (v25 == 1)
  {
    uint64_t v31 = (uint64_t)v79;
    DockKitIDSMessage.token.getter();
    uint64_t v32 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v33 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, enum case for DockKitIDSMessagingError.notRegistered(_:), v32);
    sub_1001CD810(v31, v33);
    v29((char *)v31, v30);
    swift_errorRelease();
LABEL_6:
    swift_willThrow();
    return;
  }
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v39 = qword_1002B1628;
  uint64_t v40 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v41 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v41 + 4);
  swift_release();
  unint64_t v42 = *(void **)(v39 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v43 = *(os_unfair_lock_s **)(v39 + v40);
  uint64_t v44 = v42;
  swift_retain();
  os_unfair_lock_unlock(v43 + 4);
  swift_release();
  if (!v42)
  {
    uint64_t v35 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v37 = v55;
    uint64_t v38 = (unsigned int *)&enum case for DockKitIDSMessagingError.noPairedDevice(_:);
    goto LABEL_5;
  }
  uint64_t v72 = v27;
  uint64_t v45 = (char *)*(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  id v74 = (id)dispatch thunk of DockCoreAccessory.info.getter();
  uint64_t v71 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v46 = *(id *)&v45[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  int v47 = &v45[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v48 = *(void *)v47;
  uint64_t v49 = *(void *)(*(void *)v47 + 16);
  uint64_t v50 = v73;
  if (v49)
  {
    uint64_t v69 = v45;
    uint64_t v70 = v44;
    uint64_t v51 = v48 + 32;
    uint64_t v67 = v48;
    swift_bridgeObjectRetain();
    uint64_t v52 = v79;
    while (1)
    {
      sub_1000A5D40(v51, (uint64_t)v75);
      id v53 = *(id *)(*sub_1000A5DA4(v75, v75[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v53) = static UUID.== infix(_:_:)();
      v29(v8, v50);
      v29(v52, v50);
      if (v53) {
        break;
      }
      sub_100099BCC((uint64_t)v75);
      v51 += 40;
      if (!--v49)
      {
        swift_bridgeObjectRelease();
        uint64_t v44 = v70;
        uint64_t v45 = v69;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v56 = v69;
    id v57 = *(id *)&v69[v71];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v75, (uint64_t)&v76);
    sub_100099BCC((uint64_t)v75);

    uint64_t v44 = v70;
  }
  else
  {
LABEL_15:
    id v54 = *(id *)&v45[v71];
    OS_dispatch_semaphore.signal()();

    uint64_t v78 = 0;
    long long v76 = 0u;
    long long v77 = 0u;
  }
  if (!*((void *)&v77 + 1))
  {
    sub_1000A61E4((uint64_t)&v76, (uint64_t *)&unk_1002AAA30);
    goto LABEL_27;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_27:
    uint64_t v65 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v65 - 8) + 104))(v66, enum case for DockKitIDSMessagingError.noPairedDevice(_:), v65);
    swift_willThrow();
    goto LABEL_28;
  }
  uint64_t v58 = v75[0];
  if (*(unsigned char *)(v75[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) != 2
    || (uint64_t v59 = *(char **)(v75[0] + 16)) == 0
    || (uint64_t v60 = *(void **)&v59[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) == 0)
  {
    swift_release();
    goto LABEL_27;
  }
  uint64_t v61 = v59;
  if ([v60 state] != (id)2)
  {
    swift_release();

    goto LABEL_27;
  }
  sub_1000A9C64();
  uint64_t v62 = type metadata accessor for TaskPriority();
  uint64_t v63 = (uint64_t)v68;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v68, 1, 1, v62);
  os_log_type_t v64 = (void *)swift_allocObject();
  v64[2] = 0;
  v64[3] = 0;
  v64[4] = v58;
  swift_retain();
  sub_1001BC3A0(v63, (uint64_t)&unk_1002ACB90, (uint64_t)v64);
  swift_release();

  swift_release();
LABEL_28:
}

void sub_1001C5D74()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v95 = *(void *)(v0 - 8);
  uint64_t v96 = v0;
  __chkstk_darwin(v0);
  uint64_t v93 = (char *)&v84 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for DispatchQoS();
  uint64_t v92 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v91 = (char *)&v84 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for DispatchTime();
  uint64_t v90 = *(void *)(v97 - 8);
  uint64_t v3 = __chkstk_darwin(v97);
  uint64_t v88 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v89 = (char *)&v84 - v5;
  uint64_t v87 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v85 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v7 - 8);
  uint64_t v99 = (uint64_t)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v100 = *(void *)(v9 - 8);
  uint64_t v101 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v98 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v84 - v12;
  uint64_t v14 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v84 - v19;
  DockKitIDSMessage.type.getter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for DockKitIDSMessageType.select(_:), v14);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  double v21 = aBlock;
  uint64_t v22 = v110;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v18, v14);
  v23(v20, v14);
  if (*(void *)&v21 != v22)
  {
    uint64_t v36 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v38 = v37;
    uint64_t v39 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_7:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, *v39, v36);
    goto LABEL_8;
  }
  DockKitIDSMessage.token.getter();
  uint64_t v24 = (uint64_t *)((char *)v103 + qword_1002ACAF0);
  uint64_t v25 = swift_beginAccess();
  uint64_t v26 = *v24;
  __chkstk_darwin(v25);
  *(&v84 - 2) = (uint64_t)v13;
  swift_bridgeObjectRetain();
  uint64_t v27 = v99;
  uint64_t v28 = v102;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D60A0, v26, v99);
  swift_bridgeObjectRelease();
  uint64_t v29 = sub_1000992E8(&qword_1002ACB80);
  LODWORD(v26) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v27, 1, v29);
  sub_1000A61E4(v27, &qword_1002ACB70);
  uint64_t v30 = v101;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v100 + 8);
  v31(v13, v101);
  if (v26 == 1)
  {
    uint64_t v32 = (uint64_t)v98;
    DockKitIDSMessage.token.getter();
    uint64_t v33 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v34 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104))(v35, enum case for DockKitIDSMessagingError.notRegistered(_:), v33);
    sub_1001CD810(v32, v34);
    v31((char *)v32, v30);
    swift_errorRelease();
LABEL_8:
    swift_willThrow();
    return;
  }
  uint64_t v40 = DockKitIDSMessage.payload.getter();
  unint64_t v42 = v41;
  sub_1000A9990(v40, v41);
  if (v42 >> 60 == 15)
  {
LABEL_6:
    uint64_t v36 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v38 = v43;
    uint64_t v39 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_7;
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  uint64_t v44 = DockKitIDSMessage.payload.getter();
  if (v45 >> 60 == 15)
  {
    __break(1u);
    return;
  }
  uint64_t v46 = v44;
  unint64_t v47 = v45;
  type metadata accessor for CGPoint(0);
  sub_1001D6018(&qword_1002ACB98, type metadata accessor for CGPoint);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  sub_1000A9990(v46, v47);
  swift_release();
  if (!v28)
  {
    double v49 = aBlock;
    uint64_t v48 = v105;
    if (aBlock == CGPointZero.x && *(double *)&v105 == CGPointZero.y) {
      goto LABEL_6;
    }
    if (aBlock < 0.0 || aBlock > 1.0 || *(double *)&v105 < 0.0 || *(double *)&v105 > 1.0)
    {
      if (qword_1002A7C10 != -1) {
        swift_once();
      }
      uint64_t v56 = type metadata accessor for Logger();
      sub_100096F64(v56, (uint64_t)qword_1002ACAA8);
      id v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        id v111 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v59 = 136315138;
        double aBlock = v49;
        uint64_t v105 = v48;
        uint64_t v60 = String.init<A>(describing:)();
        double aBlock = COERCE_DOUBLE(sub_1000993AC(v60, v61, (uint64_t *)&v111));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Subject selection point not normalized: %s", v59, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v36 = type metadata accessor for DockKitIDSMessagingError();
      sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
      swift_allocError();
      uint64_t v38 = v62;
      uint64_t v39 = (unsigned int *)&enum case for DockKitIDSMessagingError.argumentNotNormalized(_:);
      goto LABEL_7;
    }
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    unsigned int v50 = sub_1001889EC();
    if (v52)
    {
      unsigned int v53 = v50;
      uint64_t v54 = v51;
      unint64_t v55 = v52;
      swift_bridgeObjectRetain();
      sub_1001D4C9C(v54, v55, v53, v54, v55);
      swift_bridgeObjectRelease();
      uint64_t v67 = qword_1002B1628;
      uint64_t v68 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      uint64_t v69 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v69 + 4);
      swift_release();
      uint64_t v70 = (void **)(v67 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__subjectSelectionCompletions);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      id v111 = *v70;
      *uint64_t v70 = (void *)0x8000000000000000;
      sub_1001F49F4((uint64_t)sub_1001BC528, 0, v54, v55, isUniquelyReferenced_nonNull_native);
      *uint64_t v70 = v111;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v72 = *(os_unfair_lock_s **)(v67 + v68);
      swift_retain();
      os_unfair_lock_unlock(v72 + 4);
      swift_bridgeObjectRelease();
      swift_release();
      sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
      uint64_t v73 = v86;
      id v74 = v85;
      uint64_t v75 = v87;
      (*(void (**)(char *, void, uint64_t))(v86 + 104))(v85, enum case for DispatchQoS.QoSClass.default(_:), v87);
      uint64_t v102 = static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
      long long v76 = v88;
      static DispatchTime.now()();
      long long v77 = v89;
      + infix(_:_:)();
      os_log_type_t v103 = *(void (**)(char *, uint64_t))(v90 + 8);
      v103(v76, v97);
      uint64_t v78 = swift_allocObject();
      *(_DWORD *)(v78 + 16) = v53;
      *(void *)(v78 + 24) = v54;
      *(void *)(v78 + 32) = v55;
      uint64_t v108 = sub_1001D4F7C;
      uint64_t v109 = v78;
      double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
      uint64_t v105 = 1107296256;
      unint64_t v106 = sub_1001468DC;
      uint64_t v107 = &unk_10027A008;
      id v79 = _Block_copy(&aBlock);
      unint64_t v80 = v91;
      static DispatchQoS.unspecified.getter();
      id v111 = _swiftEmptyArrayStorage;
      sub_1001D6018((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000992E8((uint64_t *)&unk_1002A7F60);
      sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
      uint64_t v81 = v93;
      uint64_t v82 = v96;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v83 = (void *)v102;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v79);

      (*(void (**)(char *, uint64_t))(v95 + 8))(v81, v82);
      (*(void (**)(char *, uint64_t))(v92 + 8))(v80, v94);
      v103(v77, v97);
      swift_release();
    }
    else
    {
      if (qword_1002A7C10 != -1) {
        swift_once();
      }
      uint64_t v63 = type metadata accessor for Logger();
      sub_100096F64(v63, (uint64_t)qword_1002ACAA8);
      os_log_type_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v66 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v66 = 0;
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "No foregrounded app available to select subject!", v66, 2u);
        swift_slowDealloc();
      }
    }
  }
}

void sub_1001C6CC4()
{
  uint64_t v91 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v88 = (char *)&v79 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for DispatchQoS();
  uint64_t v87 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v86 = (char *)&v79 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for DispatchTime();
  uint64_t v85 = *(void *)(v92 - 8);
  uint64_t v2 = __chkstk_darwin(v92);
  uint64_t v83 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v84 = (char *)&v79 - v4;
  uint64_t v82 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v81 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  unint64_t v80 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v6 - 8);
  uint64_t v94 = (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v95 = *(void *)(v8 - 8);
  uint64_t v96 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v93 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v79 - v11;
  uint64_t v13 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v79 - v18;
  DockKitIDSMessage.type.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for DockKitIDSMessageType.region(_:), v13);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  double v20 = aBlock;
  uint64_t v21 = v105;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  if (*(void *)&v20 != v21)
  {
    uint64_t v35 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v37 = v36;
    uint64_t v38 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_5:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v35 - 8) + 104))(v37, *v38, v35);
    goto LABEL_6;
  }
  DockKitIDSMessage.token.getter();
  uint64_t v23 = (uint64_t *)((char *)v98 + qword_1002ACAF0);
  uint64_t v24 = swift_beginAccess();
  uint64_t v25 = *v23;
  __chkstk_darwin(v24);
  *(&v79 - 2) = (uint64_t)v12;
  swift_bridgeObjectRetain();
  uint64_t v26 = v94;
  uint64_t v27 = v97;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D60A0, v25, v94);
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_1000992E8(&qword_1002ACB80);
  LODWORD(v25) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48))(v26, 1, v28);
  sub_1000A61E4(v26, &qword_1002ACB70);
  uint64_t v29 = v96;
  uint64_t v30 = *(void (**)(char *, uint64_t))(v95 + 8);
  v30(v12, v96);
  if (v25 == 1)
  {
    uint64_t v31 = (uint64_t)v93;
    DockKitIDSMessage.token.getter();
    uint64_t v32 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v33 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, enum case for DockKitIDSMessagingError.notRegistered(_:), v32);
    sub_1001CD810(v31, v33);
    v30((char *)v31, v29);
    swift_errorRelease();
LABEL_6:
    swift_willThrow();
    return;
  }
  uint64_t v39 = DockKitIDSMessage.payload.getter();
  unint64_t v41 = v40;
  sub_1000A9990(v39, v40);
  if (v41 >> 60 == 15)
  {
    uint64_t v35 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v37 = v42;
    uint64_t v38 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_5;
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  uint64_t v43 = DockKitIDSMessage.payload.getter();
  if (v44 >> 60 == 15)
  {
    __break(1u);
    return;
  }
  uint64_t v45 = v43;
  unint64_t v46 = v44;
  type metadata accessor for CGRect(0);
  sub_1001D6018(&qword_1002ACBA0, type metadata accessor for CGRect);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  sub_1000A9990(v45, v46);
  swift_release();
  if (!v27)
  {
    double v47 = aBlock;
    if (aBlock < 0.0
      || aBlock > 1.0
      || (double v48 = *(double *)&v100, *(double *)&v100 < 0.0)
      || *(double *)&v100 > 1.0
      || (double v49 = v101, aBlock + v101 > 1.0)
      || (double v50 = v102, *(double *)&v100 + v102 > 1.0))
    {
      uint64_t v35 = type metadata accessor for DockKitIDSMessagingError();
      sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
      swift_allocError();
      uint64_t v37 = v57;
      uint64_t v38 = (unsigned int *)&enum case for DockKitIDSMessagingError.argumentNotNormalized(_:);
      goto LABEL_5;
    }
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    unsigned int v51 = sub_1001889EC();
    if (v53)
    {
      unsigned int v54 = v51;
      uint64_t v55 = v52;
      unint64_t v56 = v53;
      swift_bridgeObjectRetain();
      sub_1001D4FD8(v55, v56, v54, v55, v56, v47, v48, v49, v50);
      swift_bridgeObjectRelease();
      uint64_t v62 = qword_1002B1628;
      uint64_t v63 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      os_log_type_t v64 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_bridgeObjectRetain();
      swift_retain();
      os_unfair_lock_lock(v64 + 4);
      swift_release();
      os_log_type_t v65 = (void **)(v62 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__rectOfInterestCompletions);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v106 = *v65;
      void *v65 = (void *)0x8000000000000000;
      sub_1001F49F4((uint64_t)sub_1001BC558, 0, v55, v56, isUniquelyReferenced_nonNull_native);
      void *v65 = v106;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v67 = *(os_unfair_lock_s **)(v62 + v63);
      swift_retain();
      os_unfair_lock_unlock(v67 + 4);
      swift_bridgeObjectRelease();
      swift_release();
      sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
      uint64_t v68 = v81;
      uint64_t v69 = v80;
      uint64_t v70 = v82;
      (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for DispatchQoS.QoSClass.default(_:), v82);
      uint64_t v97 = static OS_dispatch_queue.global(qos:)();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v70);
      uint64_t v71 = v83;
      static DispatchTime.now()();
      uint64_t v72 = v84;
      + infix(_:_:)();
      uint64_t v98 = *(void (**)(char *, uint64_t))(v85 + 8);
      v98(v71, v92);
      uint64_t v73 = swift_allocObject();
      *(_DWORD *)(v73 + 16) = v54;
      *(void *)(v73 + 24) = v55;
      *(void *)(v73 + 32) = v56;
      os_log_type_t v103 = sub_1001D5308;
      uint64_t v104 = v73;
      double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
      uint64_t v100 = 1107296256;
      double v101 = COERCE_DOUBLE(sub_1001468DC);
      double v102 = COERCE_DOUBLE(&unk_10027A058);
      id v74 = _Block_copy(&aBlock);
      uint64_t v75 = v86;
      static DispatchQoS.unspecified.getter();
      unint64_t v106 = _swiftEmptyArrayStorage;
      sub_1001D6018((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000992E8((uint64_t *)&unk_1002A7F60);
      sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
      long long v76 = v88;
      uint64_t v77 = v91;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v78 = (void *)v97;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v74);

      (*(void (**)(char *, uint64_t))(v90 + 8))(v76, v77);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v75, v89);
      v98(v72, v92);
      swift_release();
    }
    else
    {
      if (qword_1002A7C10 != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      sub_100096F64(v58, (uint64_t)qword_1002ACAA8);
      uint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        unint64_t v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "No foregrounded app available to set region of interest!", v61, 2u);
        swift_slowDealloc();
      }
    }
  }
}

uint64_t sub_1001C7AFC()
{
  uint64_t v125 = type metadata accessor for ActuatorLimit();
  uint64_t v121 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  unint64_t v126 = (char *)v109 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&uint64_t v124 = COERCE_DOUBLE(sub_1000992E8(&qword_1002AA0B0));
  uint64_t v123 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v122 = (char *)v109 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v2 - 8);
  uint64_t v129 = (uint64_t)v109 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = type metadata accessor for UUID();
  unint64_t v127 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v5 = (char *)v109 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v109 - v11;
  DockKitIDSMessage.type.getter();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for DockKitIDSMessageType.velocity(_:), v6);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v13 = v131[0];
  uint64_t v14 = v131[8];
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  v15(v12, v6);
  if (v13 != v14)
  {
    uint64_t v22 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v24 = v26;
    uint64_t v25 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
    goto LABEL_19;
  }
  DockKitIDSMessage.token.getter();
  uint64_t v16 = (uint64_t *)(v128 + qword_1002ACAF0);
  uint64_t v17 = swift_beginAccess();
  uint64_t v18 = *v16;
  __chkstk_darwin(v17);
  v109[-2] = v5;
  swift_bridgeObjectRetain();
  uint64_t v19 = v129;
  double v20 = v132;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D60A0, v18, v129);
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_1000992E8(&qword_1002ACB80);
  LODWORD(v18) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v19, 1, v21);
  sub_1000A61E4(v19, &qword_1002ACB70);
  (*(void (**)(char *, uint64_t))(v127 + 8))(v5, v130);
  if (v18 == 1)
  {
    uint64_t v22 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v24 = v23;
    uint64_t v25 = (unsigned int *)&enum case for DockKitIDSMessagingError.notRegistered(_:);
LABEL_19:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v22 - 8) + 104))(v24, *v25, v22);
    return swift_willThrow();
  }
  uint64_t v27 = DockKitIDSMessage.payload.getter();
  unint64_t v29 = v28;
  sub_1000A9990(v27, v28);
  if (v29 >> 60 == 15) {
    goto LABEL_17;
  }
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v30 = qword_1002B1628;
  uint64_t v31 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v32 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v32 + 4);
  swift_release();
  uint64_t v33 = *(void **)(v30 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v34 = *(os_unfair_lock_s **)(v30 + v31);
  id v35 = v33;
  swift_retain();
  os_unfair_lock_unlock(v34 + 4);

  swift_release();
  if (!v33)
  {
    uint64_t v22 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v24 = v62;
    uint64_t v25 = (unsigned int *)&enum case for DockKitIDSMessagingError.noPairedDevice(_:);
    goto LABEL_19;
  }
  uint64_t v36 = qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
  swift_beginAccess();
  uint64_t v37 = v123;
  uint64_t v38 = v122;
  uint64_t v39 = v36;
  uint64_t v40 = v124;
  (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v122, v39, v124);
  DKThreadSafe.wrappedValue.getter();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v40);
  if (LOBYTE(v131[0]) != 1)
  {
LABEL_17:
    uint64_t v22 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v24 = v61;
    uint64_t v25 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_19;
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  uint64_t result = DockKitIDSMessage.payload.getter();
  if (v42 >> 60 == 15)
  {
    __break(1u);
    return result;
  }
  uint64_t v43 = result;
  unint64_t v44 = v42;
  type metadata accessor for Vector3D(0);
  sub_1001D6018(&qword_1002ACBA8, type metadata accessor for Vector3D);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  sub_1000A9990(v43, v44);
  uint64_t result = swift_release();
  if (!v20)
  {
    uint64_t v124 = v131[0];
    uint64_t v123 = v131[1];
    uint64_t v122 = (char *)v131[2];
    uint64_t v45 = qword_1002B1628;
    uint64_t v46 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    double v47 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v47 + 4);
    swift_release();
    double v48 = *(void **)(v45 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    double v49 = *(os_unfair_lock_s **)(v45 + v46);
    id v50 = v48;
    swift_retain();
    os_unfair_lock_unlock(v49 + 4);
    uint64_t result = swift_release();
    if (v48)
    {
      unint64_t v51 = dispatch thunk of DockCoreAccessory.systems.getter();
      unint64_t v52 = v51;
      if (v51 >> 62) {
LABEL_58:
      }
        uint64_t v53 = _CocoaArrayWrapper.endIndex.getter();
      else {
        uint64_t v53 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v54 = v125;
      uint64_t v55 = v126;
      if (!v53)
      {
LABEL_54:

        return swift_bridgeObjectRelease();
      }
      unint64_t v56 = 0;
      unint64_t v127 = v52 & 0xC000000000000001;
      uint64_t v115 = v52 & 0xFFFFFFFFFFFFFF8;
      unint64_t v114 = v52 + 32;
      uint64_t v57 = v124;
      double v58 = *(double *)&v123;
      uint64_t v59 = v122;
      uint64_t v130 = v121 + 16;
      uint64_t v132 = (void (**)(char *, uint64_t))(v121 + 8);
      *((void *)&v60 + 1) = 6;
      long long v119 = xmmword_1002413A0;
      *(void *)&long long v60 = 136315138;
      long long v110 = v60;
      v109[1] = (char *)&type metadata for Any + 8;
      unint64_t v113 = v52;
      uint64_t v111 = v53;
      id v118 = v50;
      while (1)
      {
        if (v127)
        {
          id v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v56 >= *(void *)(v115 + 16)) {
            goto LABEL_57;
          }
          id v63 = *(id *)(v114 + 8 * v56);
        }
        unint64_t v128 = v56 + 1;
        if (__OFADD__(v56, 1))
        {
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }
        os_log_type_t v64 = v63;
        System.type.getter();
        uint64_t v65 = SystemType.rawValue.getter();
        if (v65 == SystemType.rawValue.getter()
          && (type metadata accessor for ActuationController(), (uint64_t v66 = swift_dynamicCastClass()) != 0))
        {
          uint64_t v117 = v64;
          uint64_t v67 = v66;
          id v68 = v64;
          uint64_t v116 = v67;
          uint64_t v69 = ActuationController.getActuatorLimits()();
          id v120 = v68;
          uint64_t v70 = *(void *)(v69 + 16);
          if (v70)
          {
            type metadata accessor for Actuator();
            unint64_t v71 = (*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
            uint64_t v112 = v69;
            unint64_t v72 = v69 + v71;
            uint64_t v129 = *(void *)(v121 + 72);
            uint64_t v73 = *(void (**)(char *, unint64_t, uint64_t))(v121 + 16);
            while (1)
            {
              v73(v55, v72, v54);
              uint64_t v74 = ActuatorLimit.name.getter();
              uint64_t v76 = v75;
              if (static Actuator.Pitch.getter() == v74 && v77 == v76)
              {
                swift_bridgeObjectRelease_n();
                double v78 = v58;
              }
              else
              {
                char v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v79)
                {
                  swift_bridgeObjectRelease();
                  double v78 = v58;
                }
                else if (static Actuator.Roll.getter() == v74 && v80 == v76)
                {
                  swift_bridgeObjectRelease_n();
                  double v78 = *(double *)&v59;
                }
                else
                {
                  char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  double v78 = (v81 & 1) != 0 ? *(double *)&v59 : *(double *)&v57;
                }
                uint64_t v54 = v125;
              }
              double v82 = fabs(v78);
              uint64_t v55 = v126;
              ActuatorLimit.maxSpeed.getter();
              if (v83 < v82) {
                break;
              }
              (*v132)(v55, v54);
              v72 += v129;
              if (!--v70) {
                goto LABEL_46;
              }
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v106 = type metadata accessor for DockKitIDSMessagingError();
            sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
            swift_allocError();
            (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v106 - 8) + 104))(v107, enum case for DockKitIDSMessagingError.argumentNotNormalized(_:), v106);
            swift_willThrow();
            id v108 = v120;

            return ((uint64_t (*)(char *, uint64_t))*v132)(v55, v54);
          }
LABEL_46:
          swift_bridgeObjectRelease();
          sub_1000992E8((uint64_t *)&unk_1002AA6C0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = v119;
          type metadata accessor for Actuator();
          *(void *)(inited + 32) = static Actuator.Yaw.getter();
          uint64_t v112 = inited + 32;
          *(void *)(inited + 40) = v85;
          *(void *)(inited + 48) = static Actuator.Pitch.getter();
          *(void *)(inited + 56) = v86;
          *(void *)(inited + 64) = static Actuator.Roll.getter();
          *(void *)(inited + 72) = v87;
          uint64_t v129 = inited;
          sub_1000992E8(&qword_1002AD5F0);
          uint64_t v88 = swift_allocObject();
          *(_OWORD *)(v88 + 16) = v119;
          uint64_t v89 = v123;
          *(double *)(v88 + 32) = *(double *)&v124;
          *(void *)(v88 + 40) = v89;
          *(double *)(v88 + 48) = *(double *)&v122;
          if (qword_1002A7C10 != -1) {
            swift_once();
          }
          uint64_t v90 = type metadata accessor for Logger();
          sub_100096F64(v90, (uint64_t)qword_1002ACAA8);
          swift_bridgeObjectRetain_n();
          uint64_t v91 = Logger.logObject.getter();
          os_log_type_t v92 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v91, v92))
          {
            uint64_t v93 = swift_slowAlloc();
            v131[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v93 = v110;
            swift_bridgeObjectRetain();
            uint64_t v94 = Array.description.getter();
            unint64_t v96 = v95;
            swift_bridgeObjectRelease();
            *(void *)(v93 + 4) = sub_1000993AC(v94, v96, v131);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v91, v92, "Setting actuation: %s", (uint8_t *)v93, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          uint64_t v97 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
          id v98 = v120;
          if (qword_1002A7C18 != -1) {
            swift_once();
          }
          int v99 = dword_1002ACAC0;
          uint64_t v100 = qword_1002ACAC8;
          uint64_t v101 = unk_1002ACAD0;
          id v102 = v98;
          uint64_t v103 = System.name.getter();
          uint64_t v105 = v104;

          sub_100119624(v97, v99, v100, v101, v103, v105, v129, (void *)v88);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_setDeallocating();
          swift_arrayDestroy();
          uint64_t v54 = v125;
          uint64_t v55 = v126;
          unint64_t v52 = v113;
          uint64_t v53 = v111;
          unint64_t v56 = v128;
          os_log_type_t v64 = v117;
          id v50 = v118;
        }
        else
        {
          unint64_t v56 = v128;
        }

        if (v56 == v53) {
          goto LABEL_54;
        }
      }
    }
  }
  return result;
}

void sub_1001C8BE0(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v2 - 8);
  id v98 = (char *)&v93 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for UUID();
  uint64_t v105 = *(void *)(v99 - 8);
  uint64_t v4 = __chkstk_darwin(v99);
  unint64_t v95 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v96 = (char *)&v93 - v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v93 - v8;
  uint64_t v10 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v93 - v15;
  uint64_t v17 = a1;
  DockKitIDSMessage.type.getter();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, enum case for DockKitIDSMessageType.systemTracking(_:), v10);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v18 = v102;
  uint64_t v19 = v101[0];
  double v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, v10);
  v20(v16, v10);
  if (v18 != v19)
  {
    uint64_t v37 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v39 = v38;
    uint64_t v40 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_26:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v37 - 8) + 104))(v39, *v40, v37);
    goto LABEL_27;
  }
  uint64_t v21 = v17;
  DockKitIDSMessage.token.getter();
  id v22 = v100;
  uint64_t v23 = (uint64_t *)&v100[qword_1002ACAF0];
  uint64_t v24 = swift_beginAccess();
  uint64_t v25 = *v23;
  __chkstk_darwin(v24);
  *(&v93 - 2) = (uint64_t)v9;
  swift_bridgeObjectRetain();
  uint64_t v26 = (uint64_t)v98;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D60A0, v25, (uint64_t)v98);
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1000992E8(&qword_1002ACB80);
  int v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27);
  sub_1000A61E4(v26, &qword_1002ACB70);
  uint64_t v30 = v105 + 8;
  unint64_t v29 = *(void (**)(char *, uint64_t))(v105 + 8);
  uint64_t v31 = v9;
  uint64_t v32 = v99;
  v29(v31, v99);
  if (v28 == 1)
  {
    uint64_t v33 = (uint64_t)v96;
    DockKitIDSMessage.token.getter();
    uint64_t v34 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v35 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v34 - 8) + 104))(v36, enum case for DockKitIDSMessagingError.notRegistered(_:), v34);
    sub_1001CD810(v33, v35);
    v29((char *)v33, v32);
    swift_errorRelease();
LABEL_27:
    swift_willThrow();
    return;
  }
  uint64_t v41 = DockKitIDSMessage.payload.getter();
  unint64_t v43 = v42;
  sub_1000A9990(v41, v42);
  if (v43 >> 60 == 15)
  {
LABEL_25:
    uint64_t v37 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v39 = v69;
    uint64_t v40 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_26;
  }
  unint64_t v44 = DockKitIDSMessage.payload.getter();
  if (v45 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_48;
  }
  unsigned __int8 v46 = BYTE6(v45);
  int v47 = v44;
  switch(v45 >> 62)
  {
    case 1uLL:
      unint64_t v49 = HIDWORD(v44);
      sub_1000A9990(v44, v45);
      LODWORD(v48) = v49 - v47;
      if (__OFSUB__(v49, v47))
      {
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      uint64_t v48 = (int)v48;
LABEL_12:
      if (v48 < 1) {
        goto LABEL_25;
      }
      uint64_t v105 = v21;
      if (qword_1002A7C00 != -1) {
        swift_once();
      }
      uint64_t v51 = qword_1002B1628;
      uint64_t v52 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      uint64_t v53 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain();
      os_unfair_lock_lock(v53 + 4);
      swift_release();
      uint64_t v54 = *(void **)(v51 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
      uint64_t v55 = *(os_unfair_lock_s **)(v51 + v52);
      id v22 = v54;
      swift_retain();
      os_unfair_lock_unlock(v55 + 4);
      swift_release();
      if (!v54)
      {
        uint64_t v37 = type metadata accessor for DockKitIDSMessagingError();
        sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
        swift_allocError();
        uint64_t v39 = v70;
        uint64_t v40 = (unsigned int *)&enum case for DockKitIDSMessagingError.noPairedDevice(_:);
        goto LABEL_26;
      }
      uint64_t v56 = DockKitIDSMessage.payload.getter();
      if (v57 >> 60 == 15)
      {
LABEL_48:
        __break(1u);
        JUMPOUT(0x1001C9850);
      }
      uint64_t v58 = v56;
      unint64_t v59 = v57;
      LODWORD(v60) = Data.subscript.getter();
      sub_1000A9990(v58, v59);
      if (qword_1002A7C10 != -1) {
        swift_once();
      }
      uint64_t v61 = type metadata accessor for Logger();
      sub_100096F64(v61, (uint64_t)qword_1002ACAA8);
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v62, v63))
      {
        id v64 = v22;
        uint64_t v65 = v30;
        uint64_t v66 = v32;
        BOOL v67 = v60 == 0;
        id v68 = (uint8_t *)swift_slowAlloc();
        LODWORD(v105) = v60;
        long long v60 = v68;
        *(_DWORD *)id v68 = 67109120;
        LODWORD(v102) = v67;
        uint64_t v32 = v66;
        uint64_t v30 = v65;
        id v22 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Setting manual control to %{BOOL}d", v60, 8u);
        LOBYTE(v60) = v105;
        swift_slowDealloc();
      }

      if ((_BYTE)v60)
      {
        sub_10018AA90();
        if (qword_1002A7C18 == -1)
        {
LABEL_23:
          sub_100194944(qword_1002ACAC8, unk_1002ACAD0, dword_1002ACAC0);

          return;
        }
LABEL_46:
        swift_once();
        goto LABEL_23;
      }
      LOBYTE(v101[0]) = 1;
      swift_beginAccess();
      sub_1000992E8(&qword_1002AA0B0);
      DKThreadSafe.wrappedValue.setter();
      swift_endAccess();
      sub_10018AFC0(1);
      unint64_t v71 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
      sub_1001969C4();

      uint64_t v72 = qword_1002B1628;
      uint64_t v73 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      uint64_t v74 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain();
      os_unfair_lock_lock(v74 + 4);
      swift_release();
      uint64_t v75 = v22;
      uint64_t v76 = *(void **)(v72 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
      uint64_t v77 = *(os_unfair_lock_s **)(v72 + v73);
      double v78 = v76;
      swift_retain();
      os_unfair_lock_unlock(v77 + 4);
      swift_release();
      if (v76)
      {
        uint64_t v99 = (uint64_t)v75;
        uint64_t v105 = v30;
        char v79 = (char *)objc_retain(*(id *)(qword_1002B1628
                                        + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager));
        uint64_t v100 = (char *)dispatch thunk of DockCoreAccessory.info.getter();
        uint64_t v80 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        id v81 = *(id *)&v79[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
        OS_dispatch_semaphore.wait()();

        double v82 = &v79[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
        swift_beginAccess();
        uint64_t v83 = *(void *)v82;
        uint64_t v84 = *(void *)(*(void *)v82 + 16);
        if (v84)
        {
          uint64_t v94 = v80;
          uint64_t v97 = v79;
          id v98 = v78;
          uint64_t v85 = v83 + 32;
          uint64_t v93 = v83;
          swift_bridgeObjectRetain();
          uint64_t v86 = v96;
          while (1)
          {
            sub_1000A5D40(v85, (uint64_t)v101);
            id v87 = *(id *)(*sub_1000A5DA4(v101, v101[3]) + 24);
            DockCoreInfo.identifier.getter();

            uint64_t v88 = v95;
            DockCoreInfo.identifier.getter();
            LOBYTE(v87) = static UUID.== infix(_:_:)();
            v29(v88, v32);
            v29(v86, v32);
            if (v87) {
              break;
            }
            sub_100099BCC((uint64_t)v101);
            v85 += 40;
            if (!--v84)
            {
              swift_bridgeObjectRelease();
              char v79 = v97;
              double v78 = v98;
              uint64_t v80 = v94;
              goto LABEL_35;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v90 = v97;
          id v91 = *(id *)&v97[v94];
          OS_dispatch_semaphore.signal()();

          sub_1000A5D40((uint64_t)v101, (uint64_t)&v102);
          sub_100099BCC((uint64_t)v101);

          double v78 = v98;
        }
        else
        {
LABEL_35:
          id v89 = *(id *)&v79[v80];
          OS_dispatch_semaphore.signal()();

          uint64_t v104 = 0;
          long long v102 = 0u;
          long long v103 = 0u;
        }
        os_log_type_t v92 = (void *)v99;
        if (*((void *)&v103 + 1))
        {
          sub_1000992E8(&qword_1002A82E0);
          type metadata accessor for DaemonAccessory();
          if (swift_dynamicCast())
          {
            sub_1001AE998();

            swift_release();
          }
          else
          {
          }
        }
        else
        {

          sub_1000A61E4((uint64_t)&v102, (uint64_t *)&unk_1002AAA30);
        }
      }
      else
      {
      }
      return;
    case 2uLL:
      id v22 = *(id *)(v44 + 16);
      uint64_t v50 = *(void *)(v44 + 24);
      sub_1000A9990(v44, v45);
      uint64_t v48 = v50 - (void)v22;
      if (!__OFSUB__(v50, v22)) {
        goto LABEL_12;
      }
      goto LABEL_45;
    case 3uLL:
      sub_1000A9990(v44, v45);
      goto LABEL_25;
    default:
      sub_1000A9990(v44, v45);
      uint64_t v48 = v46;
      goto LABEL_12;
  }
}

uint64_t sub_1001C9860()
{
  uint64_t v0 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v0 - 8);
  uint64_t v135 = (uint64_t)v129 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for TrajectoryCommand.Animation();
  uint64_t v139 = *(void *)(v140 - 8);
  uint64_t v2 = __chkstk_darwin(v140);
  uint64_t v138 = (char *)v129 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v142 = (char *)v129 - v4;
  uint64_t v146 = type metadata accessor for TrajectoryCommand();
  uint64_t v143 = *(void *)(v146 - 8);
  uint64_t v5 = __chkstk_darwin(v146);
  uint64_t v136 = (char *)v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v137 = (char *)v129 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v141 = (char *)v129 - v10;
  uint64_t v134 = v11;
  __chkstk_darwin(v9);
  v145 = (char *)v129 - v12;
  uint64_t v13 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v13 - 8);
  v148 = (char *)v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = type metadata accessor for UUID();
  v156 = *(char **)(v151 - 8);
  uint64_t v15 = __chkstk_darwin(v151);
  v144 = (char *)v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  v147 = (char *)v129 - v18;
  __chkstk_darwin(v17);
  double v20 = (char *)v129 - v19;
  uint64_t v21 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)v129 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)v129 - v26;
  DockKitIDSMessage.type.getter();
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v25, enum case for DockKitIDSMessageType.trajectory(_:), v21);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v28 = v153;
  uint64_t v29 = v152[0];
  uint64_t v30 = *(void (**)(char *, uint64_t))(v22 + 8);
  v30(v25, v21);
  v30(v27, v21);
  if (v28 != v29)
  {
    uint64_t v44 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v46 = v45;
    int v47 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_7:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v44 - 8) + 104))(v46, *v47, v44);
    return swift_willThrow();
  }
  DockKitIDSMessage.token.getter();
  uint64_t v31 = (uint64_t *)(v150 + qword_1002ACAF0);
  uint64_t v32 = swift_beginAccess();
  uint64_t v33 = *v31;
  __chkstk_darwin(v32);
  v129[-2] = v20;
  swift_bridgeObjectRetain();
  id v34 = v148;
  unint64_t v35 = v149;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D60A0, v33, (uint64_t)v148);
  swift_bridgeObjectRelease();
  uint64_t v36 = sub_1000992E8(&qword_1002ACB80);
  LODWORD(v33) = (*(uint64_t (**)(id, uint64_t, uint64_t))(*(void *)(v36 - 8) + 48))(v34, 1, v36);
  sub_1000A61E4((uint64_t)v34, &qword_1002ACB70);
  uint64_t v38 = v156 + 8;
  uint64_t v37 = (void (*)(char *, uint64_t))*((void *)v156 + 1);
  uint64_t v39 = v151;
  v37(v20, v151);
  if (v33 == 1)
  {
    uint64_t v40 = (uint64_t)v147;
    DockKitIDSMessage.token.getter();
    uint64_t v41 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v42 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v41 - 8) + 104))(v43, enum case for DockKitIDSMessagingError.notRegistered(_:), v41);
    sub_1001CD810(v40, v42);
    v37((char *)v40, v39);
    swift_errorRelease();
    return swift_willThrow();
  }
  uint64_t v48 = DockKitIDSMessage.payload.getter();
  if (v49 >> 60 == 15)
  {
    uint64_t v44 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v46 = v50;
    int v47 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_7;
  }
  uint64_t v52 = v48;
  unint64_t v53 = v49;
  v156 = v38;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  sub_1001D6018(&qword_1002ACBB0, (void (*)(uint64_t))&type metadata accessor for TrajectoryCommand);
  uint64_t v54 = v145;
  uint64_t v55 = v146;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v35)
  {
    sub_1000A9990(v52, v53);
    return swift_release();
  }
  uint64_t v150 = v52;
  swift_release();
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v56 = qword_1002B1628;
  uint64_t v57 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v58 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v58 + 4);
  swift_release();
  unint64_t v59 = *(void **)(v56 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  long long v60 = *(os_unfair_lock_s **)(v56 + v57);
  uint64_t v61 = v59;
  swift_retain();
  os_unfair_lock_unlock(v60 + 4);
  swift_release();
  if (!v59)
  {
    uint64_t v71 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v71 - 8) + 104))(v72, enum case for DockKitIDSMessagingError.noPairedDevice(_:), v71);
    swift_willThrow();
    sub_1000A9990(v150, v53);
    return (*(uint64_t (**)(char *, uint64_t))(v143 + 8))(v54, v55);
  }
  v148 = v61;
  unint64_t v149 = v53;
  uint64_t v133 = 0;
  uint64_t v62 = v142;
  TrajectoryCommand.type.getter();
  uint64_t v63 = v139;
  id v64 = v138;
  uint64_t v65 = v140;
  uint64_t v130 = *(void (**)(char *, void, uint64_t))(v139 + 104);
  v129[0] = v139 + 104;
  v130(v138, enum case for TrajectoryCommand.Animation.ReturnToHome(_:), v140);
  uint64_t v66 = sub_1001D6018(&qword_1002ACBB8, (void (*)(uint64_t))&type metadata accessor for TrajectoryCommand.Animation);
  dispatch thunk of RawRepresentable.rawValue.getter();
  v129[1] = v66;
  dispatch thunk of RawRepresentable.rawValue.getter();
  LODWORD(v132) = v153;
  int v131 = LOBYTE(v152[0]);
  BOOL v67 = *(void (**)(char *, uint64_t))(v63 + 8);
  v67(v64, v65);
  v67(v62, v65);
  uint64_t v68 = v143;
  uint64_t v69 = v141;
  uint64_t v70 = *(void (**)(void))(v143 + 16);
  uint64_t v139 = v143 + 16;
  v70();
  if (v132 == v131)
  {
    v142 = *(char **)(v68 + 8);
    ((void (*)(char *, uint64_t))v142)(v69, v146);
    goto LABEL_18;
  }
  uint64_t v73 = v142;
  TrajectoryCommand.type.getter();
  v130(v64, enum case for TrajectoryCommand.Animation.Flip180(_:), v65);
  uint64_t v74 = v67;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v75 = v153;
  int v76 = LOBYTE(v152[0]);
  v74(v64, v65);
  v74(v73, v65);
  uint64_t v77 = (char *)(v143 + 8);
  v142 = *(char **)(v143 + 8);
  ((void (*)(char *, uint64_t))v142)(v141, v146);
  if (v75 != v76)
  {
    uint64_t v132 = v70;
    uint64_t v97 = (char *)*(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    id v98 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    uint64_t v99 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    id v100 = *(id *)&v97[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    OS_dispatch_semaphore.wait()();

    uint64_t v101 = &v97[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    long long v102 = *(char **)v101;
    uint64_t v103 = *(void *)(*(void *)v101 + 16);
    if (v103)
    {
      uint64_t v138 = (char *)v99;
      uint64_t v140 = (uint64_t)v97;
      v141 = v77;
      uint64_t v104 = (uint64_t)(v102 + 32);
      v137 = v102;
      swift_bridgeObjectRetain();
      uint64_t v105 = v147;
      uint64_t v106 = v151;
      while (1)
      {
        sub_1000A5D40(v104, (uint64_t)v152);
        id v107 = *(id *)(*sub_1000A5DA4(v152, v152[3]) + 24);
        DockCoreInfo.identifier.getter();

        id v108 = v144;
        DockCoreInfo.identifier.getter();
        LOBYTE(v107) = static UUID.== infix(_:_:)();
        v37(v108, v106);
        v37(v105, v106);
        if (v107) {
          break;
        }
        sub_100099BCC((uint64_t)v152);
        v104 += 40;
        if (!--v103)
        {
          swift_bridgeObjectRelease();
          uint64_t v77 = v141;
          uint64_t v97 = (char *)v140;
          uint64_t v99 = (uint64_t)v138;
          goto LABEL_29;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v111 = (void *)v140;
      id v112 = *(id *)&v138[v140];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v152, (uint64_t)&v153);
      sub_100099BCC((uint64_t)v152);

      uint64_t v77 = v141;
    }
    else
    {
LABEL_29:
      id v109 = *(id *)&v97[v99];
      OS_dispatch_semaphore.signal()();

      uint64_t v155 = 0;
      long long v153 = 0u;
      long long v154 = 0u;
    }
    unint64_t v113 = v145;
    unint64_t v114 = v149;
    uint64_t v115 = v150;
    id v116 = v148;
    if (*((void *)&v154 + 1))
    {
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      if (swift_dynamicCast())
      {
        uint64_t v117 = v152[0];
        if (*(unsigned char *)(v152[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2)
        {
          id v118 = *(char **)(v152[0] + 16);
          if (v118)
          {
            long long v119 = *(void **)&v118[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
            if (v119)
            {
              v156 = v118;
              if ([v119 state] == (id)2)
              {
                uint64_t v120 = type metadata accessor for TaskPriority();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 56))(v135, 1, 1, v120);
                uint64_t v121 = v146;
                v141 = v77;
                uint64_t v122 = v136;
                ((void (*)(char *, char *, uint64_t))v132)(v136, v113, v146);
                uint64_t v123 = v143;
                unint64_t v124 = (*(unsigned __int8 *)(v143 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
                uint64_t v125 = (char *)swift_allocObject();
                *((void *)v125 + 2) = 0;
                *((void *)v125 + 3) = 0;
                *((void *)v125 + 4) = v117;
                (*(void (**)(char *, char *, uint64_t))(v123 + 32))(&v125[v124], v122, v121);
                swift_retain();
                sub_1001BC1FC(v135, (uint64_t)&unk_1002ACBC8, (uint64_t)v125);
                sub_1000A9990(v115, v149);
                swift_release();

                swift_release();
                return ((uint64_t (*)(char *, uint64_t))v142)(v113, v121);
              }
            }
            else
            {
              unint64_t v128 = v118;
            }
            sub_1000A9990(v115, v149);
            swift_release();

            return ((uint64_t (*)(char *, uint64_t))v142)(v113, v146);
          }
          uint64_t v126 = v115;
          unint64_t v127 = v149;
        }
        else
        {
          uint64_t v126 = v115;
          unint64_t v127 = v114;
        }
        sub_1000A9990(v126, v127);

        swift_release();
      }
      else
      {
        sub_1000A9990(v115, v114);
      }
    }
    else
    {
      sub_1000A9990(v150, v149);

      sub_1000A61E4((uint64_t)&v153, (uint64_t *)&unk_1002AAA30);
    }
    return ((uint64_t (*)(char *, uint64_t))v142)(v113, v146);
  }
LABEL_18:
  uint64_t v78 = sub_1001889EC();
  unint64_t v80 = v149;
  uint64_t v81 = v150;
  double v82 = v137;
  if (v79)
  {
    unint64_t v83 = v79;
    LODWORD(v129[-6]) = __chkstk_darwin(v78);
    v129[-5] = v84;
    v129[-4] = v85;
    v129[-3] = v86;
    v129[-2] = v81;
    v129[-1] = v80;
    uint64_t v87 = v86;
    sub_1001D551C(v84, v83, (void (*)(uint64_t *))sub_1001D5508, (uint64_t)&v129[-8]);
    uint64_t v88 = (uint64_t (*)(uint64_t, uint64_t))v142;
    sub_1000A9990(v81, v80);

    swift_bridgeObjectRelease();
    return v88(v87, v146);
  }
  else
  {
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v89 = type metadata accessor for Logger();
    sub_100096F64(v89, (uint64_t)qword_1002ACAA8);
    ((void (*)(char *, char *, uint64_t))v70)(v82, v145, v146);
    uint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v90, v91))
    {
      os_log_type_t v92 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v153 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v92 = 136315138;
      v156 = (char *)(v92 + 4);
      uint64_t v93 = v146;
      ((void (*)(char *, char *, uint64_t))v70)(v136, v82, v146);
      uint64_t v94 = String.init<A>(describing:)();
      v152[0] = sub_1000993AC(v94, v95, (uint64_t *)&v153);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v96 = (uint64_t (*)(char *, uint64_t))v142;
      ((void (*)(char *, uint64_t))v142)(v137, v93);
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "No foregrounded app available to send trajectory: %s", v92, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_1000A9990(v150, v149);
    }
    else
    {
      sub_1000A9990(v81, v149);

      long long v110 = v82;
      unint64_t v96 = (uint64_t (*)(char *, uint64_t))v142;
      ((void (*)(char *, uint64_t))v142)(v110, v146);
    }
    return v96(v145, v146);
  }
}

void sub_1001CACBC()
{
  uint64_t v0 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v0 - 8);
  uint64_t v52 = (uint64_t)&v49 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v2 - 8);
  uint64_t v54 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v50 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v49 - v5;
  uint64_t v7 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v49 - v12;
  DockKitIDSMessage.type.getter();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, enum case for DockKitIDSMessageType.frame(_:), v7);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v14 = v56;
  uint64_t v15 = v57;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  v16(v13, v7);
  if (v14 != v15)
  {
    uint64_t v29 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v31 = v30;
    uint64_t v32 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_5:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, *v32, v29);
    goto LABEL_6;
  }
  DockKitIDSMessage.token.getter();
  uint64_t v17 = (uint64_t *)(v55 + qword_1002ACAF0);
  uint64_t v18 = swift_beginAccess();
  uint64_t v19 = *v17;
  __chkstk_darwin(v18);
  *(&v49 - 2) = (uint64_t)v6;
  swift_bridgeObjectRetain();
  uint64_t v20 = v52;
  uint64_t v21 = v51;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D60A0, v19, v52);
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_1000992E8(&qword_1002ACB80);
  LODWORD(v19) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v20, 1, v22);
  sub_1000A61E4(v20, &qword_1002ACB70);
  uint64_t v23 = v54;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v53 + 8);
  v24(v6, v54);
  if (v19 == 1)
  {
    uint64_t v25 = (uint64_t)v50;
    DockKitIDSMessage.token.getter();
    uint64_t v26 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v27 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, enum case for DockKitIDSMessagingError.notRegistered(_:), v26);
    sub_1001CD810(v25, v27);
    v24((char *)v25, v23);
    swift_errorRelease();
LABEL_6:
    swift_willThrow();
    return;
  }
  uint64_t v33 = DockKitIDSMessage.payload.getter();
  unint64_t v35 = v34;
  sub_1000A9990(v33, v34);
  if (v35 >> 60 == 15)
  {
    uint64_t v29 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v31 = v36;
    uint64_t v32 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_5;
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  uint64_t v37 = DockKitIDSMessage.payload.getter();
  if (v38 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v39 = v37;
    unint64_t v40 = v38;
    sub_1001D5804();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    sub_1000A9990(v39, v40);
    swift_release();
    if (!v21)
    {
      uint64_t v41 = v57;
      if (qword_1002A7C00 != -1) {
        swift_once();
      }
      unsigned int v42 = sub_1001889EC();
      if (v44)
      {
        sub_1001D5858(v43, v44, v42, v43, v44, v41);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (qword_1002A7C10 != -1) {
          swift_once();
        }
        uint64_t v45 = type metadata accessor for Logger();
        sub_100096F64(v45, (uint64_t)qword_1002ACAA8);
        uint64_t v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v48 = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "No foregrounded app available to set framing mode!", v48, 2u);
          swift_slowDealloc();
        }
      }
    }
  }
}

uint64_t sub_1001CB42C()
{
  uint64_t v0 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v0 - 8);
  uint64_t v54 = (uint64_t)&v52 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v2 - 8);
  uint64_t v56 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v53 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v52 - v5;
  uint64_t v7 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v52 - v12;
  DockKitIDSMessage.type.getter();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, enum case for DockKitIDSMessageType.offset(_:), v7);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v14 = v58;
  uint64_t v15 = v59;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  v16(v13, v7);
  if (v14 != v15)
  {
    uint64_t v28 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v30 = v29;
    uint64_t v31 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_20:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104))(v30, *v31, v28);
    return swift_willThrow();
  }
  DockKitIDSMessage.token.getter();
  uint64_t v17 = (uint64_t *)(v57 + qword_1002ACAF0);
  uint64_t v18 = swift_beginAccess();
  uint64_t v19 = *v17;
  __chkstk_darwin(v18);
  *(&v52 - 2) = (uint64_t)v6;
  swift_bridgeObjectRetain();
  uint64_t v20 = v54;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D60A0, v19, v54);
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_1000992E8(&qword_1002ACB80);
  LODWORD(v19) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21);
  sub_1000A61E4(v20, &qword_1002ACB70);
  uint64_t v22 = v56;
  uint64_t v23 = *(void (**)(char *, uint64_t))(v55 + 8);
  v23(v6, v56);
  if (v19 == 1)
  {
    uint64_t v24 = (uint64_t)v53;
    DockKitIDSMessage.token.getter();
    uint64_t v25 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v26 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104))(v27, enum case for DockKitIDSMessagingError.notRegistered(_:), v25);
    sub_1001CD810(v24, v26);
    v23((char *)v24, v22);
    swift_errorRelease();
    return swift_willThrow();
  }
  uint64_t v32 = DockKitIDSMessage.payload.getter();
  unint64_t v34 = v33;
  sub_1000A9990(v32, v33);
  if (v34 >> 60 == 15)
  {
LABEL_19:
    uint64_t v28 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v30 = v51;
    uint64_t v31 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_20;
  }
  uint64_t v35 = DockKitIDSMessage.payload.getter();
  if (v36 >> 60 == 15) {
    goto LABEL_26;
  }
  unint64_t v37 = v36;
  uint64_t v38 = v35;
  switch(v36 >> 62)
  {
    case 1uLL:
      if ((int)v35 > v35 >> 32)
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __DataStorage._length.getter();
        __break(1u);
LABEL_28:
        __DataStorage._length.getter();
        __break(1u);
        JUMPOUT(0x1001CBAD4);
      }
      uint64_t v40 = __DataStorage._bytes.getter();
      if (!v40) {
        goto LABEL_28;
      }
      uint64_t v41 = v40;
      uint64_t v42 = __DataStorage._offset.getter();
      uint64_t v43 = (int)v38 - v42;
      if (__OFSUB__((int)v38, v42)) {
        goto LABEL_25;
      }
      __DataStorage._length.getter();
      int v39 = *(_DWORD *)(v41 + v43);
LABEL_16:
      uint64_t result = sub_1000A9990(v38, v37);
      if (!v39) {
        goto LABEL_19;
      }
      return result;
    case 2uLL:
      uint64_t v44 = *(void *)(v35 + 16);
      swift_retain();
      swift_retain();
      uint64_t v45 = __DataStorage._bytes.getter();
      if (!v45) {
        goto LABEL_27;
      }
      uint64_t v46 = v45;
      uint64_t v47 = __DataStorage._offset.getter();
      BOOL v48 = __OFSUB__(v44, v47);
      uint64_t v49 = v44 - v47;
      if (v48) {
        goto LABEL_24;
      }
      __DataStorage._length.getter();
      int v39 = *(_DWORD *)(v46 + v49);
      swift_release();
      swift_release();
      goto LABEL_16;
    case 3uLL:
      sub_1000A9990(v35, v36);
      goto LABEL_19;
    default:
      int v39 = v35;
      goto LABEL_16;
  }
}

void sub_1001CBAE4()
{
  uint64_t v0 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v0 - 8);
  uint64_t v103 = (char *)&v102 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for DockKitCameraCommand();
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v104 = (char *)&v102 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for DockKitCameraCommandPayload();
  uint64_t v107 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  id v109 = (char *)&v102 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v4 - 8);
  uint64_t v111 = (uint64_t)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for UUID();
  uint64_t v113 = *(void *)(v114 - 8);
  uint64_t v6 = __chkstk_darwin(v114);
  long long v110 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v102 - v8;
  uint64_t v10 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v102 - v15;
  DockKitIDSMessage.type.getter();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, enum case for DockKitIDSMessageType.camera(_:), v10);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v17 = aBlock;
  uint64_t v18 = v121;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  v19(v16, v10);
  if (v17 != v18)
  {
    uint64_t v32 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v34 = v33;
    uint64_t v35 = (unsigned int *)&enum case for DockKitIDSMessagingError.unsupportedMessageType(_:);
LABEL_5:
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, *v35, v32);
    goto LABEL_6;
  }
  DockKitIDSMessage.token.getter();
  uint64_t v20 = (uint64_t *)(v122 + qword_1002ACAF0);
  uint64_t v21 = swift_beginAccess();
  uint64_t v22 = *v20;
  __chkstk_darwin(v21);
  *(&v102 - 2) = (uint64_t)v9;
  swift_bridgeObjectRetain();
  uint64_t v23 = v111;
  uint64_t v24 = v112;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D60A0, v22, v111);
  swift_bridgeObjectRelease();
  uint64_t v25 = sub_1000992E8(&qword_1002ACB80);
  LODWORD(v22) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v23, 1, v25);
  sub_1000A61E4(v23, &qword_1002ACB70);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v113 + 8);
  uint64_t v27 = v114;
  v26(v9, v114);
  if (v22 == 1)
  {
    uint64_t v28 = (uint64_t)v110;
    DockKitIDSMessage.token.getter();
    uint64_t v29 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v30 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, enum case for DockKitIDSMessagingError.notRegistered(_:), v29);
    sub_1001CD810(v28, v30);
    v26((char *)v28, v27);
    swift_errorRelease();
LABEL_6:
    swift_willThrow();
    return;
  }
  uint64_t v36 = DockKitIDSMessage.payload.getter();
  unint64_t v38 = v37;
  sub_1000A9990(v36, v37);
  if (v38 >> 60 == 15)
  {
    uint64_t v32 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    uint64_t v34 = v39;
    uint64_t v35 = (unsigned int *)&enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:);
    goto LABEL_5;
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  uint64_t v40 = DockKitIDSMessage.payload.getter();
  if (v41 >> 60 == 15)
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    return;
  }
  uint64_t v42 = v40;
  unint64_t v43 = v41;
  sub_1001D6018(&qword_1002ACBE0, (void (*)(uint64_t))&type metadata accessor for DockKitCameraCommandPayload);
  uint64_t v44 = v109;
  uint64_t v45 = v108;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  sub_1000A9990(v42, v43);
  swift_release();
  if (!v24)
  {
    uint64_t v46 = v104;
    DockKitCameraCommandPayload.command.getter();
    uint64_t v47 = v105;
    uint64_t v48 = v106;
    int v49 = (*(uint64_t (**)(char *, uint64_t))(v105 + 88))(v46, v106);
    if (v49 == enum case for DockKitCameraCommand.photo(_:))
    {
      uint64_t v50 = DockKitCameraCommandPayload.payload.getter();
      unint64_t v52 = v51;
      sub_1000A9990(v50, v51);
      if (v52 >> 60 == 15)
      {
        uint64_t v53 = 0;
LABEL_26:
        uint64_t v79 = v107;
        uint64_t v80 = type metadata accessor for TaskPriority();
        uint64_t v81 = (uint64_t)v103;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v103, 1, 1, v80);
        double v82 = (void *)swift_allocObject();
        v82[2] = 0;
        v82[3] = 0;
        v82[4] = v53;
        sub_1001BC3A0(v81, (uint64_t)&unk_1002ACBF0, (uint64_t)v82);
        swift_release();
        (*(void (**)(char *, uint64_t))(v79 + 8))(v44, v45);
        return;
      }
      swift_allocObject();
      PropertyListDecoder.init()();
      uint64_t v75 = DockKitCameraCommandPayload.payload.getter();
      if (v76 >> 60 != 15)
      {
        uint64_t v77 = v75;
        unint64_t v78 = v76;
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        sub_1000A9990(v77, v78);
        swift_release();
        uint64_t v53 = aBlock;
        goto LABEL_26;
      }
      goto LABEL_40;
    }
    if (v49 != enum case for DockKitCameraCommand.flip(_:))
    {
      if (v49 == enum case for DockKitCameraCommand.zoom(_:))
      {
        uint64_t v83 = DockKitCameraCommandPayload.payload.getter();
        unint64_t v85 = v84;
        sub_1000A9990(v83, v84);
        if (v85 >> 60 != 15)
        {
          swift_allocObject();
          PropertyListDecoder.init()();
          uint64_t v96 = DockKitCameraCommandPayload.payload.getter();
          if (v97 >> 60 != 15)
          {
            uint64_t v98 = v96;
            unint64_t v99 = v97;
            dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
            (*(void (**)(char *, uint64_t))(v107 + 8))(v44, v45);
            sub_1000A9990(v98, v99);
            swift_release();
            return;
          }
          goto LABEL_41;
        }
        uint64_t v86 = type metadata accessor for DockKitIDSMessagingError();
        sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v86 - 8) + 104))(v87, enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:), v86);
        swift_willThrow();
      }
      else
      {
        if (v49 != enum case for DockKitCameraCommand.open(_:))
        {
          uint64_t v100 = type metadata accessor for DockKitIDSMessagingError();
          sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
          swift_allocError();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v100 - 8) + 104))(v101, enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:), v100);
          swift_willThrow();
          (*(void (**)(char *, uint64_t))(v107 + 8))(v44, v45);
          (*(void (**)(char *, uint64_t))(v47 + 8))(v46, v48);
          return;
        }
        id v88 = (id)SBSCreateOpenApplicationService();
        sub_1000992E8((uint64_t *)&unk_1002A8FB0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100240BE0;
        uint64_t aBlock = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v116 = v90;
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 96) = &type metadata for Bool;
        *(unsigned char *)(inited + 72) = 1;
        sub_1001EA498(inited);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v92 = [self optionsWithDictionary:isa];

        if (!v88)
        {
          (*(void (**)(char *, uint64_t))(v107 + 8))(v44, v45);

          return;
        }
        id v93 = v88;
        NSString v94 = String._bridgeToObjectiveC()();
        long long v119 = sub_1001D0210;
        uint64_t v120 = 0;
        uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
        uint64_t v116 = 1107296256;
        uint64_t v117 = sub_1000AAC3C;
        id v118 = &unk_10027A0F8;
        unint64_t v95 = _Block_copy(&aBlock);
        [v93 openApplication:v94 withOptions:v92 completion:v95];
        _Block_release(v95);
      }
      (*(void (**)(char *, uint64_t))(v107 + 8))(v44, v45);
      return;
    }
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    sub_100096F64(v54, (uint64_t)qword_1002ACAA8);
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Doing camera flip!", v57, 2u);
      swift_slowDealloc();
    }

    uint64_t v58 = (objc_class *)type metadata accessor for AccessorySystemEvent();
    static AccessorySystemEvent.kHeaderCameraFlip.getter();
    id v59 = objc_allocWithZone(v58);
    LOBYTE(aBlock) = 0;
    long long v60 = (void *)AccessorySystemEvent.init(name:payload:)();
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v61 = qword_1002B1628;
    uint64_t v62 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v63 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v63 + 4);
    swift_release();
    id v64 = *(void **)(v61 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    uint64_t v65 = *(os_unfair_lock_s **)(v61 + v62);
    id v66 = v64;
    swift_retain();
    os_unfair_lock_unlock(v65 + 4);
    swift_release();
    if (v64)
    {
      BOOL v67 = (void *)dispatch thunk of DockCoreAccessory.info.getter();

      uint64_t v68 = qword_1002B1628;
      uint64_t v69 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      uint64_t v70 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain();
      os_unfair_lock_lock(v70 + 4);
      swift_release();
      unint64_t v71 = sub_1001EB364((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v72 = (unint64_t *)(v68 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_previousCameraSessions);
      swift_beginAccess();
      *uint64_t v72 = v71;
      swift_bridgeObjectRelease();
      uint64_t v73 = *(os_unfair_lock_s **)(v68 + v69);
      swift_retain();
      os_unfair_lock_unlock(v73 + 4);
      swift_release();
      id v74 = objc_retain(*(id *)(*(void *)(qword_1002B1628
                                          + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                              + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server));
      sub_100168800((uint64_t)v67, (uint64_t)v60);

      (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v45);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v107 + 8))(v109, v45);
    }
  }
}

uint64_t sub_1001CCBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v36[2] = a2;
  v36[1] = a3;
  uint64_t v4 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v4 - 8);
  uint64_t v37 = (uint64_t)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v36 - v10;
  uint64_t v12 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)v36 - v17;
  uint64_t v41 = a1;
  DockKitIDSMessage.type.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for DockKitIDSMessageType.keepAliveResp(_:), v12);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v19 = v42;
  uint64_t v20 = v43;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v21(v18, v12);
  if (v19 != v20)
  {
    uint64_t v33 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104))(v34, enum case for DockKitIDSMessagingError.unsupportedMessageType(_:), v33);
    return swift_willThrow();
  }
  DockKitIDSMessage.token.getter();
  uint64_t v22 = (uint64_t *)(v40 + qword_1002ACAF0);
  uint64_t v23 = swift_beginAccess();
  uint64_t v24 = *v22;
  __chkstk_darwin(v23);
  v36[-2] = v11;
  swift_bridgeObjectRetain();
  uint64_t v25 = v37;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D60A0, v24, v37);
  swift_bridgeObjectRelease();
  uint64_t v26 = sub_1000992E8(&qword_1002ACB80);
  LODWORD(v24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v25, 1, v26);
  sub_1000A61E4(v25, &qword_1002ACB70);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v38 + 8);
  uint64_t v28 = v11;
  uint64_t v29 = v39;
  v27(v28, v39);
  if (v24 == 1)
  {
    DockKitIDSMessage.token.getter();
    uint64_t v30 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v31 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, enum case for DockKitIDSMessagingError.notRegistered(_:), v30);
    sub_1001CD810((uint64_t)v9, v31);
    v27(v9, v29);
    swift_errorRelease();
    return swift_willThrow();
  }
  swift_retain();
  dispatch thunk of DKIDSKeepAlive.monitor(from:)();
  return swift_release();
}

void sub_1001CD130(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DockKitIDSMessage();
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v46 = v2;
  __chkstk_darwin(v2);
  uint64_t v44 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1000992E8(&qword_1002ACB70);
  __chkstk_darwin(v4 - 8);
  uint64_t v48 = (uint64_t)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v53 - 8);
  uint64_t v6 = __chkstk_darwin(v53);
  uint64_t v47 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v41 - v8;
  uint64_t v10 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v41 - v15;
  uint64_t v52 = a1;
  DockKitIDSMessage.type.getter();
  uint64_t v17 = *(void (**)(void))(v11 + 104);
  unsigned int v43 = enum case for DockKitIDSMessageType.objects(_:);
  uint64_t v42 = (void (*)(char *, void, uint64_t))v17;
  v17(v14);
  sub_1001D6018(&qword_1002ACB78, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessageType);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v18 = v54;
  uint64_t v19 = v55;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v14, v10);
  v20(v16, v10);
  if (v18 != v19)
  {
    uint64_t v33 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104))(v34, enum case for DockKitIDSMessagingError.unsupportedMessageType(_:), v33);
    goto LABEL_5;
  }
  DockKitIDSMessage.token.getter();
  uint64_t v21 = v50;
  uint64_t v22 = (uint64_t *)(v50 + qword_1002ACAF0);
  uint64_t v23 = swift_beginAccess();
  uint64_t v24 = *v22;
  __chkstk_darwin(v23);
  *(&v41 - 2) = (uint64_t)v9;
  swift_bridgeObjectRetain();
  uint64_t v25 = v48;
  uint64_t v26 = v49;
  sub_1001BC588((uint64_t (*)(char *))sub_1001D60A0, v24, v48);
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1000992E8(&qword_1002ACB80);
  LODWORD(v24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v25, 1, v27);
  sub_1000A61E4(v25, &qword_1002ACB70);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v51 + 8);
  v28(v9, v53);
  if (v24 == 1)
  {
    uint64_t v29 = (uint64_t)v47;
    DockKitIDSMessage.token.getter();
    uint64_t v30 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v31 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, enum case for DockKitIDSMessagingError.notRegistered(_:), v30);
    sub_1001CD810(v29, v31);
    v28((char *)v29, v53);
    swift_errorRelease();
LABEL_5:
    swift_willThrow();
    return;
  }
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  uint64_t v55 = _swiftEmptyArrayStorage;
  sub_1000992E8(&qword_1002ACC08);
  sub_1001D5C14();
  uint64_t v35 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v37 = v36;
  swift_release();
  if (!v26)
  {
    uint64_t v38 = *(void **)(v21 + qword_1002ACAE0);
    if (v38)
    {
      v42(v16, v43, v10);
      type metadata accessor for DockKitIDSClient();
      id v39 = v38;
      static DockKitIDSClient.DockKitBroadcastToken.getter();
      sub_1000A618C(v35, v37);
      uint64_t v40 = v44;
      DockKitIDSMessage.init(type:token:payload:)();
      DKIDSMessagingCenter.send(_:)();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v40, v46);
      sub_1000A6240(v35, v37);
    }
    else
    {
      sub_1000A6240(v35, v37);
    }
  }
}

uint64_t sub_1001CD810(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  __chkstk_darwin(v6);
  uint64_t v28 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DockKitIDSMessage();
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DockKitIDSMessagingError();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v35 = a2;
  swift_errorRetain();
  sub_1000992E8(&qword_1002A8F70);
  char v17 = swift_dynamicCast();
  uint64_t v33 = v5;
  if (v17)
  {
    uint64_t v25 = a1;
    uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
    v18(v16, v10);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    uint64_t v35 = a2;
    swift_errorRetain();
    swift_dynamicCast();
    sub_1001D6018(&qword_1002ACC38, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    uint64_t v19 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v21 = v20;
    swift_release();
    v18(v14, v10);
    a1 = v25;
  }
  else
  {
    uint64_t v19 = 0;
    unint64_t v21 = 0xF000000000000000;
  }
  uint64_t v22 = *(void **)(v34 + qword_1002ACAE0);
  if (v22)
  {
    (*(void (**)(char *, void, uint64_t))(v26 + 104))(v28, enum case for DockKitIDSMessageType.ack(_:), v27);
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v33, a1, v31);
    id v23 = v22;
    sub_1000A997C(v19, v21);
    DockKitIDSMessage.init(type:token:payload:)();
    DKIDSMessagingCenter.send(_:)();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v32);
    sub_1000A9990(v19, v21);
  }
  else
  {
    sub_1000A9990(v19, v21);
  }
  swift_errorRetain();
  return a2;
}

uint64_t sub_1001CDCB4(unint64_t a1)
{
  unint64_t v84 = a1;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v83 = (char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for DockKitIDSMessageType();
  uint64_t v5 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v81 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for DockKitIDSMessage();
  uint64_t v7 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v96 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000992E8(&qword_1002ACC28);
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v76 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v95 = (uint64_t)&v74 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  NSString v94 = (char *)&v74 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v105 = (uint64_t)&v74 - v17;
  __chkstk_darwin(v16);
  id v93 = (char *)&v74 - v18;
  uint64_t v91 = v1;
  uint64_t v19 = (uint64_t *)(v1 + qword_1002ACAE8);
  swift_beginAccess();
  uint64_t v20 = *v19;
  uint64_t v21 = *(void *)(*v19 + 64);
  uint64_t v85 = *v19 + 64;
  uint64_t v22 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  uint64_t v90 = qword_1002ACAE0;
  int64_t v86 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v92 = v3 + 32;
  uint64_t v97 = v3;
  uint64_t v75 = (void (**)(char *, uint64_t))(v3 + 8);
  unsigned int v80 = enum case for DockKitIDSMessageType.info(_:);
  uint64_t v79 = (void (**)(char *, void, uint64_t))(v5 + 104);
  uint64_t v77 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v98 = v20;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v26 = 0;
  *(void *)&long long v27 = 138412290;
  long long v74 = v27;
  uint64_t v100 = v2;
  uint64_t v106 = v9;
  uint64_t v107 = v3 + 16;
  while (1)
  {
    if (v24)
    {
      uint64_t v28 = v9;
      uint64_t v101 = (v24 - 1) & v24;
      int64_t v102 = v26;
      unint64_t v29 = __clz(__rbit64(v24)) | (v26 << 6);
      goto LABEL_19;
    }
    BOOL v30 = __OFADD__(v26, 1);
    int64_t v31 = v26 + 1;
    if (v30)
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v31 >= v86) {
      return swift_release();
    }
    unint64_t v32 = *(void *)(v85 + 8 * v31);
    if (!v32) {
      break;
    }
LABEL_18:
    uint64_t v28 = v9;
    uint64_t v101 = (v32 - 1) & v32;
    int64_t v102 = v31;
    unint64_t v29 = __clz(__rbit64(v32)) + (v31 << 6);
LABEL_19:
    uint64_t v35 = v97;
    uint64_t v34 = v98;
    unint64_t v36 = *(void *)(v98 + 48) + *(void *)(v97 + 72) * v29;
    unint64_t v37 = v93;
    uint64_t v108 = *(void (**)(char *, unint64_t, uint64_t))(v97 + 16);
    v108(v93, v36, v2);
    uint64_t v38 = *(void *)(v34 + 56);
    uint64_t v39 = type metadata accessor for DockKitIDSInfo();
    uint64_t v40 = v2;
    uint64_t v41 = *(void *)(v39 - 8);
    uint64_t v42 = v38 + *(void *)(v41 + 72) * v29;
    unsigned int v43 = &v37[*(int *)(v28 + 48)];
    uint64_t v103 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
    v103(v43, v42, v39);
    uint64_t v44 = v105;
    uint64_t v45 = v105 + *(int *)(v28 + 48);
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v105, v37, v40);
    uint64_t v99 = v41;
    uint64_t v46 = v41;
    uint64_t v47 = v39;
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v45, v43, v39);
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    sub_100096F64(v48, (uint64_t)qword_1002ACAA8);
    uint64_t v49 = (uint64_t)v94;
    uint64_t v50 = &v94[*(int *)(v106 + 48)];
    v108(v94, v44, v40);
    uint64_t v104 = v45;
    uint64_t v51 = v39;
    uint64_t v52 = v103;
    v103(v50, v45, v51);
    uint64_t v53 = v95;
    sub_1000EA2DC(v49, v95, &qword_1002ACC28);
    uint64_t v54 = v40;
    uint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (_DWORD *)swift_slowAlloc();
      uint64_t v87 = v57;
      id v88 = (void *)swift_slowAlloc();
      _DWORD *v57 = v74;
      uint64_t v58 = *(int *)(v106 + 48);
      id v59 = v76;
      uint64_t v89 = v55;
      uint64_t v60 = v54;
      uint64_t v61 = &v76[v58];
      uint64_t v62 = v53 + v58;
      v108(v76, v53, v60);
      v52(v61, v62, v47);
      uint64_t v63 = DockKitIDSInfo.info.getter();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v61, v47);
      uint64_t v64 = v60;
      uint64_t v55 = v89;
      (*v75)(v59, v64);
      uint64_t v65 = (uint8_t *)v87;
      *(void *)(v87 + 1) = v63;
      void *v88 = v63;
      sub_1000A61E4(v53, &qword_1002ACC28);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Sending INFO for accessory %@", v65, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000A61E4(v53, &qword_1002ACC28);
    }
    id v66 = v96;

    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_1001D6018(&qword_1002ACC30, (void (*)(uint64_t))&type metadata accessor for DockKitIDSInfo);
    uint64_t v67 = v109;
    uint64_t v68 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v70 = v69;
    swift_release();
    uint64_t v109 = v67;
    if (v67) {
      goto LABEL_33;
    }
    unint64_t v71 = *(void **)(v91 + v90);
    if (v71)
    {
      (*v79)(v81, v80, v82);
      v108(v83, v84, v100);
      id v72 = v71;
      sub_1000A618C(v68, v70);
      DockKitIDSMessage.init(type:token:payload:)();
      uint64_t v73 = v109;
      DKIDSMessagingCenter.send(_:)();
      uint64_t v109 = v73;
      if (v73)
      {

        sub_1000A6240(v68, v70);
        (*v77)(v66, v78);
LABEL_33:
        sub_1000A61E4(v105, &qword_1002ACC28);
        return swift_release();
      }

      sub_1000A6240(v68, v70);
      (*v77)(v66, v78);
      uint64_t result = sub_1000A61E4(v105, &qword_1002ACC28);
      uint64_t v2 = v100;
      uint64_t v9 = v106;
    }
    else
    {
      sub_1000A61E4(v105, &qword_1002ACC28);
      uint64_t result = sub_1000A6240(v68, v70);
      uint64_t v2 = v100;
      uint64_t v9 = v106;
    }
    unint64_t v24 = v101;
    int64_t v26 = v102;
  }
  int64_t v33 = v31 + 1;
  if (v31 + 1 >= v86) {
    return swift_release();
  }
  unint64_t v32 = *(void *)(v85 + 8 * v33);
  if (v32) {
    goto LABEL_17;
  }
  int64_t v33 = v31 + 2;
  if (v31 + 2 >= v86) {
    return swift_release();
  }
  unint64_t v32 = *(void *)(v85 + 8 * v33);
  if (v32) {
    goto LABEL_17;
  }
  int64_t v33 = v31 + 3;
  if (v31 + 3 >= v86) {
    return swift_release();
  }
  unint64_t v32 = *(void *)(v85 + 8 * v33);
  if (v32)
  {
LABEL_17:
    int64_t v31 = v33;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v31 >= v86) {
      return swift_release();
    }
    unint64_t v32 = *(void *)(v85 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_18;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

void sub_1001CE6CC()
{
}

void sub_1001CE6FC()
{
  if (!qword_1002ACB48)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1002ACB48);
    }
  }
}

uint64_t sub_1001CE754()
{
  return type metadata accessor for DockIDSServer();
}

uint64_t sub_1001CE764()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  DockKitIDSMessage.token.getter();
  char v4 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

void sub_1001CE850(char a1, void *a2)
{
  if (a2)
  {
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100096F64(v3, (uint64_t)qword_1002ACAA8);
    uint64_t v14 = a2;
    char v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      id v7 = [v14 localizedDescription];
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      sub_1000993AC(v8, v10, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to set actuator velocities: %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  else
  {
    if (a1) {
      return;
    }
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100096F64(v11, (uint64_t)qword_1002ACAA8);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v12, "Unable to set actuator velocities!", v13, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001CEB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 32) = a4;
  os_log_type_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 40) = v5;
  void *v5 = v4;
  v5[1] = sub_1001CEBAC;
  return sub_1000F67F0();
}

uint64_t sub_1001CEBAC()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001CECA8, 0, 0);
}

uint64_t sub_1001CECA8()
{
  uint64_t v1 = *(void *)(v0[4] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager);
  v0[6] = v1;
  if (v1)
  {
    swift_retain();
    unint64_t v2 = sub_1001EB484((uint64_t)_swiftEmptyArrayStorage);
    sub_100099C7C(0, &qword_1002A8380);
    Class isa = NSNumber.init(integerLiteral:)(5242880).super.super.isa;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1001F6238((uint64_t)isa, 0x6953676F4C78616DLL, 0xEA0000000000657ALL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    Class v5 = NSNumber.init(integerLiteral:)(2).super.super.isa;
    char v6 = swift_isUniquelyReferenced_nonNull_native();
    sub_1001F6238((uint64_t)v5, 0x746F687370616E73, 0xEC00000065707954, v6);
    swift_bridgeObjectRelease();
    type metadata accessor for AccessoryDiagnosticsOptions();
    swift_allocObject();
    uint64_t v7 = sub_100106C40(v2);
    v0[7] = v7;
    uint64_t v8 = (void *)swift_task_alloc();
    v0[8] = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1001CEF44;
    return sub_1000CD1E4(v7);
  }
  else
  {
    uint64_t v10 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v11, enum case for DockKitIDSMessagingError.invalidOrMissingParameters(_:), v10);
    swift_willThrow();
    os_log_type_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_1001CEF44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = v2;
  swift_task_dealloc();
  if (v2) {
    Class v5 = sub_1001CF278;
  }
  else {
    Class v5 = sub_1001CF05C;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v5, 0, 0);
}

uint64_t sub_1001CF05C()
{
  uint64_t v11 = v0;
  if (qword_1002A7C10 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100096F64(v1, (uint64_t)qword_1002ACAA8);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[10];
  if (v4)
  {
    uint64_t v6 = v0[9];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[3] = sub_1000993AC(v6, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Diagnostic logs saved to %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_release();

    swift_release();
  }
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1001CF278()
{
  if (qword_1002A7C10 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100096F64(v1, (uint64_t)qword_1002ACAA8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    BOOL v4 = (uint8_t *)swift_slowAlloc();
    unint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)BOOL v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Diagnostics transfer failed: %@", v4, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

void sub_1001CF4A8(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = *a1;
  if (qword_1002A7C10 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100096F64(v7, (uint64_t)qword_1002ACAA8);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315650;
    swift_bridgeObjectRetain();
    sub_1000993AC(a3, a4, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Notifying client that %s just set subject selection to %f, %f", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  Class v12 = CGFloat._bridgeToObjectiveC()().super.super.isa;
  [v6 selectSubjectAtEventWithX:isa y:v12];
}

void sub_1001CF6D4(char a1, void *a2, const char *a3, const char *a4)
{
  if (a2)
  {
    uint64_t v5 = qword_1002A7C10;
    id v6 = a2;
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100096F64(v7, (uint64_t)qword_1002ACAA8);
    uint64_t v20 = v6;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      id v11 = [v20 localizedDescription];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      sub_1000993AC(v12, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, a3, v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  else
  {
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100096F64(v17, (uint64_t)qword_1002ACAA8);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 67109120;
      LODWORD(v21) = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v20, v18, a4, v19, 8u);
      swift_slowDealloc();

      return;
    }
  }
}

uint64_t sub_1001CF9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), const char *a5)
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t result = a4(a2, a3);
  if (result)
  {
    sub_1000BF118(result);
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100096F64(v10, (uint64_t)qword_1002ACAA8);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, a5, v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v14 = qword_1002B1628;
    uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v16 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v16 + 4);
    swift_release();
    swift_beginAccess();
    uint64_t v17 = sub_1001ED1FC(a2, a3);
    swift_endAccess();
    if (v17) {
      sub_1000BF118(v17);
    }
    os_log_type_t v18 = *(os_unfair_lock_s **)(v14 + v15);
    swift_retain();
    os_unfair_lock_unlock(v18 + 4);
    return swift_release();
  }
  return result;
}

void sub_1001CFBC8(id *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for TrajectoryCommand();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v29 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)v27 - v17;
  id v30 = *a1;
  if (qword_1002A7C10 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100096F64(v19, (uint64_t)qword_1002ACAA8);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v28(v18, a5, v13);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    v27[1] = a6;
    uint64_t v23 = v22;
    v27[0] = swift_slowAlloc();
    uint64_t v32 = v27[0];
    *(_DWORD *)uint64_t v23 = 136315394;
    v27[2] = a7;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_1000993AC(a3, a4, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v23 + 12) = 2080;
    v28(v29, (uint64_t)v18, v13);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v31 = sub_1000993AC(v24, v25, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Notifying client that %s just sent a trajectory: %s ", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  }

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v30 sendCommandEventWithCommand:isa];
}

uint64_t sub_1001CFF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001CFF34, 0, 0);
}

uint64_t sub_1001CFF34()
{
  uint64_t v1 = TrajectoryCommand.encode()();
  v0[4] = v2;
  if (v2 >> 60 == 15)
  {
    os_log_type_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v1;
    unint64_t v6 = v2;
    uint64_t v7 = v0[2];
    v0[5] = v1;
    uint64_t v8 = (void *)swift_task_alloc();
    v0[6] = v8;
    v8[2] = v7;
    v8[3] = v5;
    v8[4] = v6;
    os_log_type_t v9 = (void *)swift_task_alloc();
    v0[7] = v9;
    void *v9 = v0;
    v9[1] = sub_1001D0098;
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 8, 0, 0, 0xD000000000000012, 0x80000001002375E0, sub_100135AB0, v8, &type metadata for Bool);
  }
}

uint64_t sub_1001D0098()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001D01B0, 0, 0);
}

uint64_t sub_1001D01B0()
{
  sub_1000A9990(v0[5], v0[4]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_1001D0210(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100096F64(v2, (uint64_t)qword_1002ACAA8);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      BOOL v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)BOOL v4 = 136315138;
      swift_getErrorValue();
      uint64_t v5 = Error.localizedDescription.getter();
      sub_1000993AC(v5, v6, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Unable to launch camera app: %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_1001D0408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[3] = v5;
  v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001D04C8, 0, 0);
}

uint64_t sub_1001D04C8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = 1000000000000000000 * v1;
  uint64_t v3 = ((v1 >> 63) & 0xF21F494C589C0000) + (((unint64_t)v1 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64);
  ContinuousClock.init()();
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1002ACBF8 + dword_1002ACBF8);
  BOOL v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  *BOOL v4 = v0;
  v4[1] = sub_1001D05BC;
  return v6(v2, v3, 0, 0, 1);
}

uint64_t sub_1001D05BC()
{
  uint64_t v2 = *(void *)(*v1 + 40);
  uint64_t v3 = *(void *)(*v1 + 32);
  uint64_t v4 = *(void *)(*v1 + 24);
  uint64_t v5 = *v1;
  *(void *)(v5 + 56) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (!v0)
  {
    swift_task_dealloc();
    uint64_t v6 = *(void *)(v5 + 8);
    __asm { BRAA            X1, X16 }
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001D0764, 0, 0);
}

uint64_t sub_1001D0764()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D07C8(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1001D08A4;
  return v6(a1);
}

uint64_t sub_1001D08A4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1001D099C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001D0AA0, 0, 0);
}

uint64_t sub_1001D0AA0()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_1001D6018(&qword_1002AC1A0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_1001D6018(&qword_1002ACC00, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1001D0C40;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_1001D0C40()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (!v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(void *)(v5 + 8);
    __asm { BRAA            X1, X16 }
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001D0DFC, 0, 0);
}

uint64_t sub_1001D0DFC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D0E68()
{
  return sub_1001CE764() & 1;
}

uint64_t sub_1001D0E88(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v42 = a1;
  uint64_t v7 = type metadata accessor for BTDiscoveredDevice();
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  __chkstk_darwin(v8);
  uint64_t v44 = (char *)&v40 - v10;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  uint64_t v43 = v9;
  sub_1000992E8(&qword_1002ACC50);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  uint64_t v41 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *v42;
  }
  uint64_t v14 = 0;
  uint64_t v15 = result + 64;
  uint64_t v16 = v43;
  uint64_t v17 = (uint64_t)v44;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v46 = v14;
      unint64_t v19 = v18 | (v14 << 6);
    }
    else
    {
      uint64_t v20 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v20 >= v41) {
        return v12;
      }
      unint64_t v21 = v42[v20];
      uint64_t v22 = v14 + 1;
      if (!v21)
      {
        uint64_t v22 = v14 + 2;
        if (v14 + 2 >= v41) {
          return v12;
        }
        unint64_t v21 = v42[v22];
        if (!v21)
        {
          uint64_t v22 = v14 + 3;
          if (v14 + 3 >= v41) {
            return v12;
          }
          unint64_t v21 = v42[v22];
          if (!v21)
          {
            uint64_t v23 = v14 + 4;
            if (v14 + 4 >= v41) {
              return v12;
            }
            unint64_t v21 = v42[v23];
            if (!v21)
            {
              while (1)
              {
                uint64_t v22 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v22 >= v41) {
                  return v12;
                }
                unint64_t v21 = v42[v22];
                ++v23;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v22 = v14 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v13 = (v21 - 1) & v21;
      uint64_t v46 = v22;
      unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
    }
    uint64_t v24 = a4[7];
    unint64_t v25 = a4;
    int64_t v26 = (uint64_t *)(a4[6] + 16 * v19);
    uint64_t v27 = *v26;
    uint64_t v28 = v26[1];
    uint64_t v29 = *(void *)(v45 + 72);
    sub_1000E9F88(v24 + v29 * v19, v17);
    sub_1001D5FB4(v17, v16);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6))) != 0)
    {
      unint64_t v33 = __clz(__rbit64((-1 << v31) & ~*(void *)(v15 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v16 = v43;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v30) >> 6;
      uint64_t v16 = v43;
      do
      {
        if (++v32 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v36 = v32 == v35;
        if (v32 == v35) {
          unint64_t v32 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v32);
      }
      while (v37 == -1);
      unint64_t v33 = __clz(__rbit64(~v37)) + (v32 << 6);
    }
    *(void *)(v15 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
    uint64_t v38 = (void *)(*(void *)(v12 + 48) + 16 * v33);
    void *v38 = v27;
    v38[1] = v28;
    uint64_t result = sub_1001D5FB4(v16, *(void *)(v12 + 56) + v33 * v29);
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v25;
    uint64_t v14 = v46;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001D120C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_1000992E8((uint64_t *)&unk_1002AD550);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  unint64_t v32 = a1;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v33) {
        return v9;
      }
      unint64_t v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v33) {
          return v9;
        }
        unint64_t v16 = v32[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v33) {
            return v9;
          }
          unint64_t v16 = v32[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v33) {
              return v9;
            }
            unint64_t v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v33) {
                  return v9;
                }
                unint64_t v16 = v32[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    unint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_retain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t v30 = (void *)(*(void *)(v9 + 48) + 16 * v25);
    *uint64_t v30 = v20;
    v30[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v25) = v21;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v9;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001D14A8(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v49 - 8);
  uint64_t v8 = __chkstk_darwin(v49);
  uint64_t v48 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v38 - v10;
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_1000992E8((uint64_t *)&unk_1002AD490);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v12 = result;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v40 = a4;
  uint64_t v41 = v43 + 16;
  uint64_t v47 = v43 + 32;
  uint64_t v15 = result + 64;
  uint64_t v16 = v49;
  while (1)
  {
    if (v13)
    {
      uint64_t v44 = (v13 - 1) & v13;
      uint64_t v45 = v14;
      unint64_t v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v39) {
        return v12;
      }
      unint64_t v19 = v38[v18];
      uint64_t v20 = v14 + 1;
      if (!v19)
      {
        uint64_t v20 = v14 + 2;
        if (v14 + 2 >= v39) {
          return v12;
        }
        unint64_t v19 = v38[v20];
        if (!v19)
        {
          uint64_t v20 = v14 + 3;
          if (v14 + 3 >= v39) {
            return v12;
          }
          unint64_t v19 = v38[v20];
          if (!v19)
          {
            uint64_t v21 = v14 + 4;
            if (v14 + 4 >= v39) {
              return v12;
            }
            unint64_t v19 = v38[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v20 >= v39) {
                  return v12;
                }
                unint64_t v19 = v38[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v44 = (v19 - 1) & v19;
      uint64_t v45 = v20;
      unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    unint64_t v23 = v42;
    uint64_t v22 = v43;
    uint64_t v24 = *(void *)(v43 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v42, a4[6] + v24 * v17, v16);
    unint64_t v25 = (uint64_t *)(a4[7] + 16 * v17);
    uint64_t v26 = v25[1];
    uint64_t v46 = *v25;
    unint64_t v27 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v27(v48, v23, v16);
    sub_1001D6018(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    swift_bridgeObjectRetain();
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v31 = __clz(__rbit64((-1 << v29) & ~*(void *)(v15 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v34 = v30 == v33;
        if (v30 == v33) {
          unint64_t v30 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v15 + 8 * v30);
      }
      while (v35 == -1);
      unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
    }
    *(void *)(v15 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(*(void *)(v12 + 48) + v31 * v24, v48, v49);
    BOOL v36 = (void *)(*(void *)(v12 + 56) + 16 * v31);
    *BOOL v36 = v46;
    v36[1] = v26;
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v40;
    unint64_t v13 = v44;
    uint64_t v14 = v45;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001D1890(uint64_t *a1, uint64_t (*a2)(uint64_t), void (*a3)(void *))
{
  uint64_t v6 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = a2(v6);
    *a1 = v6;
  }
  uint64_t v8 = *(void *)(v6 + 16);
  v10[0] = v6 + 32;
  v10[1] = v8;
  a3(v10);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int sub_1001D1924(uint64_t *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_148;
    }
    if (v3) {
      return sub_1001D2940(0, v3, 1, v2);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_156;
  }
  Swift::Int v6 = result;
  uint64_t v92 = v2;
  if (v3 < 2)
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    uint64_t v102 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v98 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
LABEL_114:
      if (v12 >= 2)
      {
        uint64_t v83 = *v92;
        do
        {
          unint64_t v84 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_143;
          }
          if (!v83) {
            goto LABEL_155;
          }
          uint64_t v85 = v10;
          int64_t v86 = v10 + 32;
          uint64_t v87 = *(void *)&v10[16 * v84 + 32];
          uint64_t v88 = *(void *)&v10[16 * v12 + 24];
          sub_1001D2B8C((char *)(v83 + 8 * v87), (char *)(v83 + 8 * *(void *)&v86[16 * v12 - 16]), (char *)(v83 + 8 * v88), v98);
          if (v1) {
            break;
          }
          if (v88 < v87) {
            goto LABEL_144;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v85 = sub_1001E0484((uint64_t)v85);
          }
          if (v84 >= *((void *)v85 + 2)) {
            goto LABEL_145;
          }
          uint64_t v89 = &v85[16 * v84 + 32];
          *(void *)uint64_t v89 = v87;
          *((void *)v89 + 1) = v88;
          unint64_t v90 = *((void *)v85 + 2);
          if (v12 > v90) {
            goto LABEL_146;
          }
          uint64_t v10 = v85;
          memmove(&v85[16 * v12 + 16], &v85[16 * v12 + 32], 16 * (v90 - v12));
          *((void *)v85 + 2) = v90 - 1;
          unint64_t v12 = v90 - 1;
        }
        while (v90 > 2);
      }
LABEL_125:
      swift_bridgeObjectRelease();
      *(void *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v2;
    uint64_t v8 = v5 >> 1;
    type metadata accessor for DKPersonTrackerState();
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v2 = v7;
    uint64_t v98 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v102 = v9;
  }
  Swift::Int v11 = 0;
  uint64_t v93 = *v2 + 16;
  uint64_t v94 = *v2 - 8;
  Swift::Int v95 = v6;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v97 = v3;
  uint64_t v99 = *v2;
  while (1)
  {
    Swift::Int v13 = v11++;
    if (v11 >= v3) {
      goto LABEL_46;
    }
    swift_retain();
    swift_retain();
    dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
    dispatch thunk of DKProbabilityValue.variable.getter();
    swift_release();
    dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
    dispatch thunk of DKProbabilityValue.variable.getter();
    swift_release();
    swift_release();
    swift_release();
    int v15 = v101 >= 1 && (v100 < 1 || v101 < v100);
    Swift::Int v11 = v13 + 2;
    uint64_t v16 = v99;
    if (v13 + 2 >= v97)
    {
LABEL_36:
      if (!v15) {
        goto LABEL_46;
      }
LABEL_39:
      if (v11 < v13) {
        goto LABEL_149;
      }
      if (v13 < v11)
      {
        uint64_t v20 = (uint64_t *)(v94 + 8 * v11);
        Swift::Int v21 = v11;
        Swift::Int v22 = v13;
        unint64_t v23 = (uint64_t *)(v16 + 8 * v13);
        while (1)
        {
          if (v22 != --v21)
          {
            if (!v16) {
              goto LABEL_154;
            }
            uint64_t v24 = *v23;
            uint64_t *v23 = *v20;
            *uint64_t v20 = v24;
          }
          ++v22;
          --v20;
          ++v23;
          if (v22 >= v21) {
            goto LABEL_46;
          }
        }
      }
      goto LABEL_46;
    }
    uint64_t v17 = v93 + 8 * v13;
    do
    {
      swift_retain();
      swift_retain();
      dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
      dispatch thunk of DKProbabilityValue.variable.getter();
      swift_release();
      dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
      dispatch thunk of DKProbabilityValue.variable.getter();
      swift_release();
      swift_release();
      swift_release();
      if (v101 <= 0)
      {
        uint64_t v16 = v99;
        if (v15) {
          goto LABEL_39;
        }
      }
      else
      {
        int v19 = v100 < 1 || v101 < v100;
        uint64_t v16 = v99;
        if (v15 != v19) {
          goto LABEL_36;
        }
      }
      ++v11;
      v17 += 8;
    }
    while (v97 != v11);
    Swift::Int v11 = v97;
    if (v15) {
      goto LABEL_39;
    }
LABEL_46:
    Swift::Int v25 = v97;
    if (v11 >= v97) {
      goto LABEL_66;
    }
    if (__OFSUB__(v11, v13)) {
      goto LABEL_147;
    }
    if (v11 - v13 >= v95) {
      goto LABEL_66;
    }
    if (__OFADD__(v13, v95)) {
      goto LABEL_150;
    }
    if (v13 + v95 < v97) {
      Swift::Int v25 = v13 + v95;
    }
    if (v25 < v13) {
      break;
    }
    if (v11 != v25)
    {
      Swift::Int v96 = v13;
      uint64_t v91 = v10;
      uint64_t v26 = (uint64_t *)(v94 + 8 * v11);
      do
      {
        Swift::Int v27 = v25;
        Swift::Int v28 = v96;
        unint64_t v29 = v26;
        do
        {
          swift_retain();
          swift_retain();
          dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
          dispatch thunk of DKProbabilityValue.variable.getter();
          swift_release();
          dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
          dispatch thunk of DKProbabilityValue.variable.getter();
          swift_release();
          swift_release();
          swift_release();
          if (v101 < 1) {
            break;
          }
          if (v100 <= 0)
          {
            if (!v99) {
              goto LABEL_152;
            }
          }
          else
          {
            if (v101 >= (unint64_t)v100) {
              break;
            }
            if (!v99) {
              goto LABEL_152;
            }
          }
          uint64_t v30 = *v29;
          *unint64_t v29 = v29[1];
          v29[1] = v30;
          --v29;
          ++v28;
        }
        while (v11 != v28);
        ++v11;
        ++v26;
        Swift::Int v25 = v27;
      }
      while (v11 != v27);
      Swift::Int v11 = v27;
      uint64_t v10 = v91;
      Swift::Int v13 = v96;
    }
LABEL_66:
    if (v11 < v13) {
      goto LABEL_142;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_1001E0044(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v32 = *((void *)v10 + 2);
    unint64_t v31 = *((void *)v10 + 3);
    unint64_t v12 = v32 + 1;
    uint64_t v33 = v99;
    if (v32 >= v31 >> 1)
    {
      uint64_t v82 = sub_1001E0044((char *)(v31 > 1), v32 + 1, 1, v10);
      uint64_t v33 = v99;
      uint64_t v10 = v82;
    }
    *((void *)v10 + 2) = v12;
    BOOL v34 = v10 + 32;
    uint64_t v35 = &v10[16 * v32 + 32];
    *(void *)uint64_t v35 = v13;
    *((void *)v35 + 1) = v11;
    if (v32)
    {
      while (1)
      {
        unint64_t v36 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v41 = &v34[16 * v12];
          uint64_t v42 = *((void *)v41 - 8);
          uint64_t v43 = *((void *)v41 - 7);
          BOOL v47 = __OFSUB__(v43, v42);
          uint64_t v44 = v43 - v42;
          if (v47) {
            goto LABEL_131;
          }
          uint64_t v46 = *((void *)v41 - 6);
          uint64_t v45 = *((void *)v41 - 5);
          BOOL v47 = __OFSUB__(v45, v46);
          uint64_t v39 = v45 - v46;
          char v40 = v47;
          if (v47) {
            goto LABEL_132;
          }
          unint64_t v48 = v12 - 2;
          uint64_t v49 = &v34[16 * v12 - 32];
          uint64_t v51 = *(void *)v49;
          uint64_t v50 = *((void *)v49 + 1);
          BOOL v47 = __OFSUB__(v50, v51);
          uint64_t v52 = v50 - v51;
          if (v47) {
            goto LABEL_134;
          }
          BOOL v47 = __OFADD__(v39, v52);
          uint64_t v53 = v39 + v52;
          if (v47) {
            goto LABEL_137;
          }
          if (v53 >= v44)
          {
            unint64_t v71 = &v34[16 * v36];
            uint64_t v73 = *(void *)v71;
            uint64_t v72 = *((void *)v71 + 1);
            BOOL v47 = __OFSUB__(v72, v73);
            uint64_t v74 = v72 - v73;
            if (v47) {
              goto LABEL_141;
            }
            BOOL v64 = v39 < v74;
            goto LABEL_103;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v65 = *((void *)v10 + 4);
            uint64_t v66 = *((void *)v10 + 5);
            BOOL v47 = __OFSUB__(v66, v65);
            uint64_t v58 = v66 - v65;
            char v59 = v47;
            goto LABEL_97;
          }
          uint64_t v38 = *((void *)v10 + 4);
          uint64_t v37 = *((void *)v10 + 5);
          BOOL v47 = __OFSUB__(v37, v38);
          uint64_t v39 = v37 - v38;
          char v40 = v47;
        }
        if (v40) {
          goto LABEL_133;
        }
        unint64_t v48 = v12 - 2;
        uint64_t v54 = &v34[16 * v12 - 32];
        uint64_t v56 = *(void *)v54;
        uint64_t v55 = *((void *)v54 + 1);
        BOOL v57 = __OFSUB__(v55, v56);
        uint64_t v58 = v55 - v56;
        char v59 = v57;
        if (v57) {
          goto LABEL_136;
        }
        uint64_t v60 = &v34[16 * v36];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v47 = __OFSUB__(v61, v62);
        uint64_t v63 = v61 - v62;
        if (v47) {
          goto LABEL_139;
        }
        if (__OFADD__(v58, v63)) {
          goto LABEL_140;
        }
        if (v58 + v63 >= v39)
        {
          BOOL v64 = v39 < v63;
LABEL_103:
          if (v64) {
            unint64_t v36 = v48;
          }
          goto LABEL_105;
        }
LABEL_97:
        if (v59) {
          goto LABEL_135;
        }
        uint64_t v67 = &v34[16 * v36];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v47 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v47) {
          goto LABEL_138;
        }
        if (v70 < v58) {
          goto LABEL_14;
        }
LABEL_105:
        unint64_t v75 = v36 - 1;
        if (v36 - 1 >= v12)
        {
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
          goto LABEL_151;
        }
        if (!v33) {
          goto LABEL_153;
        }
        unint64_t v76 = v10;
        uint64_t v77 = &v34[16 * v75];
        uint64_t v78 = *(void *)v77;
        uint64_t v79 = &v34[16 * v36];
        uint64_t v80 = *((void *)v79 + 1);
        sub_1001D2B8C((char *)(v33 + 8 * *(void *)v77), (char *)(v33 + 8 * *(void *)v79), (char *)(v33 + 8 * v80), v98);
        if (v1) {
          goto LABEL_125;
        }
        if (v80 < v78) {
          goto LABEL_128;
        }
        if (v36 > *((void *)v76 + 2)) {
          goto LABEL_129;
        }
        *(void *)uint64_t v77 = v78;
        *(void *)&v34[16 * v75 + 8] = v80;
        unint64_t v81 = *((void *)v76 + 2);
        if (v36 >= v81) {
          goto LABEL_130;
        }
        uint64_t v10 = v76;
        unint64_t v12 = v81 - 1;
        memmove(&v34[16 * v36], v79 + 16, 16 * (v81 - 1 - v36));
        *((void *)v76 + 2) = v81 - 1;
        uint64_t v33 = v99;
        if (v81 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_14:
    Swift::Int v3 = v97;
    if (v11 >= v97) {
      goto LABEL_114;
    }
  }
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1001D212C(uint64_t *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_164;
    }
    if (v3) {
      return sub_1001D2A68(0, v3, 1, v2);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_172;
  }
  Swift::Int v6 = result;
  uint64_t v105 = v2;
  if (v3 < 2)
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
    uint64_t v114 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v112 = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
LABEL_130:
      if (v12 >= 2)
      {
        uint64_t v99 = *v105;
        do
        {
          unint64_t v100 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_159;
          }
          if (!v99) {
            goto LABEL_171;
          }
          uint64_t v101 = *(void *)&v10[16 * v100 + 32];
          uint64_t v102 = *(void *)&v10[16 * v12 + 24];
          sub_1001D2EF4((char *)(v99 + 8 * v101), (char *)(v99 + 8 * *(void *)&v10[16 * v12 + 16]), v99 + 8 * v102, v112);
          if (v1) {
            break;
          }
          if (v102 < v101) {
            goto LABEL_160;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v10 = sub_1001E0484((uint64_t)v10);
          }
          if (v100 >= *((void *)v10 + 2)) {
            goto LABEL_161;
          }
          uint64_t v103 = &v10[16 * v100 + 32];
          *(void *)uint64_t v103 = v101;
          *((void *)v103 + 1) = v102;
          unint64_t v104 = *((void *)v10 + 2);
          if (v12 > v104) {
            goto LABEL_162;
          }
          memmove(&v10[16 * v12 + 16], &v10[16 * v12 + 32], 16 * (v104 - v12));
          *((void *)v10 + 2) = v104 - 1;
          unint64_t v12 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_141:
      swift_bridgeObjectRelease();
      *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v2;
    uint64_t v8 = v5 >> 1;
    type metadata accessor for TrackedSubjectInternal();
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    uint64_t v2 = v7;
    uint64_t v112 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v114 = v9;
  }
  Swift::Int v11 = 0;
  uint64_t v106 = *v2 - 8;
  Swift::Int v107 = v6;
  uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v111 = v3;
  uint64_t v113 = *v2;
  while (1)
  {
    Swift::Int v13 = v11++;
    long long v110 = v10;
    if (v11 >= v3) {
      goto LABEL_57;
    }
    swift_retain();
    swift_retain();
    uint64_t v14 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
    uint64_t v16 = (v15 & 1) != 0 ? 0x7FFFFFFFFFFFFFFFLL : v14;
    uint64_t v17 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
    char v19 = v18;
    swift_release();
    swift_release();
    if (v19) {
      break;
    }
    uint64_t v20 = v113;
    if (v16 <= 0) {
      goto LABEL_28;
    }
    if (v17 < 1)
    {
      BOOL v21 = 1;
      goto LABEL_26;
    }
LABEL_25:
    BOOL v21 = v16 < (unint64_t)v17;
LABEL_26:
    Swift::Int v22 = v13 + 2;
    if (v13 + 2 < v111) {
      goto LABEL_30;
    }
LABEL_44:
    Swift::Int v11 = v22;
    if (v21) {
      goto LABEL_47;
    }
LABEL_57:
    Swift::Int v35 = v111;
    if (v11 < v111)
    {
      if (__OFSUB__(v11, v13)) {
        goto LABEL_163;
      }
      if (v11 - v13 < v107)
      {
        if (__OFADD__(v13, v107)) {
          goto LABEL_165;
        }
        if (v13 + v107 < v111) {
          Swift::Int v35 = v13 + v107;
        }
        if (v35 < v13)
        {
LABEL_166:
          __break(1u);
          goto LABEL_167;
        }
        if (v11 != v35)
        {
          unint64_t v36 = (uint64_t *)(v106 + 8 * v11);
          Swift::Int v108 = v35;
          Swift::Int v109 = v13;
          do
          {
            Swift::Int v37 = v13;
            uint64_t v38 = v36;
            do
            {
              swift_retain();
              swift_retain();
              uint64_t v39 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
              if (v40) {
                uint64_t v41 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v41 = v39;
              }
              uint64_t v42 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
              char v44 = v43;
              swift_release();
              swift_release();
              if (v44)
              {
                uint64_t v45 = v113;
                if ((unint64_t)(v41 - 1) >= 0x7FFFFFFFFFFFFFFELL) {
                  break;
                }
              }
              else
              {
                if (v41 <= 0) {
                  break;
                }
                uint64_t v45 = v113;
                if (v42 >= 1 && v41 >= v42) {
                  break;
                }
              }
              if (!v45) {
                goto LABEL_168;
              }
              uint64_t v46 = *v38;
              uint64_t *v38 = v38[1];
              v38[1] = v46;
              --v38;
              ++v37;
            }
            while (v11 != v37);
            ++v11;
            ++v36;
            Swift::Int v13 = v109;
          }
          while (v11 != v108);
          Swift::Int v11 = v108;
          uint64_t v10 = v110;
        }
      }
    }
    if (v11 < v13) {
      goto LABEL_158;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = sub_1001E0044(0, *((void *)v10 + 2) + 1, 1, v10);
    }
    unint64_t v48 = *((void *)v10 + 2);
    unint64_t v47 = *((void *)v10 + 3);
    unint64_t v12 = v48 + 1;
    uint64_t v49 = v113;
    if (v48 >= v47 >> 1)
    {
      uint64_t v98 = sub_1001E0044((char *)(v47 > 1), v48 + 1, 1, v10);
      uint64_t v49 = v113;
      uint64_t v10 = v98;
    }
    *((void *)v10 + 2) = v12;
    uint64_t v50 = v10 + 32;
    uint64_t v51 = &v10[16 * v48 + 32];
    *(void *)uint64_t v51 = v13;
    *((void *)v51 + 1) = v11;
    if (v48)
    {
      while (1)
      {
        unint64_t v52 = v12 - 1;
        if (v12 >= 4)
        {
          BOOL v57 = &v50[16 * v12];
          uint64_t v58 = *((void *)v57 - 8);
          uint64_t v59 = *((void *)v57 - 7);
          BOOL v63 = __OFSUB__(v59, v58);
          uint64_t v60 = v59 - v58;
          if (v63) {
            goto LABEL_147;
          }
          uint64_t v62 = *((void *)v57 - 6);
          uint64_t v61 = *((void *)v57 - 5);
          BOOL v63 = __OFSUB__(v61, v62);
          uint64_t v55 = v61 - v62;
          char v56 = v63;
          if (v63) {
            goto LABEL_148;
          }
          unint64_t v64 = v12 - 2;
          uint64_t v65 = &v50[16 * v12 - 32];
          uint64_t v67 = *(void *)v65;
          uint64_t v66 = *((void *)v65 + 1);
          BOOL v63 = __OFSUB__(v66, v67);
          uint64_t v68 = v66 - v67;
          if (v63) {
            goto LABEL_150;
          }
          BOOL v63 = __OFADD__(v55, v68);
          uint64_t v69 = v55 + v68;
          if (v63) {
            goto LABEL_153;
          }
          if (v69 >= v60)
          {
            uint64_t v87 = &v50[16 * v52];
            uint64_t v89 = *(void *)v87;
            uint64_t v88 = *((void *)v87 + 1);
            BOOL v63 = __OFSUB__(v88, v89);
            uint64_t v90 = v88 - v89;
            if (v63) {
              goto LABEL_157;
            }
            BOOL v80 = v55 < v90;
            goto LABEL_118;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v81 = *((void *)v10 + 4);
            uint64_t v82 = *((void *)v10 + 5);
            BOOL v63 = __OFSUB__(v82, v81);
            uint64_t v74 = v82 - v81;
            char v75 = v63;
            goto LABEL_112;
          }
          uint64_t v54 = *((void *)v10 + 4);
          uint64_t v53 = *((void *)v10 + 5);
          BOOL v63 = __OFSUB__(v53, v54);
          uint64_t v55 = v53 - v54;
          char v56 = v63;
        }
        if (v56) {
          goto LABEL_149;
        }
        unint64_t v64 = v12 - 2;
        uint64_t v70 = &v50[16 * v12 - 32];
        uint64_t v72 = *(void *)v70;
        uint64_t v71 = *((void *)v70 + 1);
        BOOL v73 = __OFSUB__(v71, v72);
        uint64_t v74 = v71 - v72;
        char v75 = v73;
        if (v73) {
          goto LABEL_152;
        }
        unint64_t v76 = &v50[16 * v52];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v63 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v63) {
          goto LABEL_155;
        }
        if (__OFADD__(v74, v79)) {
          goto LABEL_156;
        }
        if (v74 + v79 >= v55)
        {
          BOOL v80 = v55 < v79;
LABEL_118:
          if (v80) {
            unint64_t v52 = v64;
          }
          goto LABEL_120;
        }
LABEL_112:
        if (v75) {
          goto LABEL_151;
        }
        uint64_t v83 = &v50[16 * v52];
        uint64_t v85 = *(void *)v83;
        uint64_t v84 = *((void *)v83 + 1);
        BOOL v63 = __OFSUB__(v84, v85);
        uint64_t v86 = v84 - v85;
        if (v63) {
          goto LABEL_154;
        }
        if (v86 < v74) {
          goto LABEL_14;
        }
LABEL_120:
        unint64_t v91 = v52 - 1;
        if (v52 - 1 >= v12)
        {
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
          goto LABEL_166;
        }
        if (!v49) {
          goto LABEL_169;
        }
        uint64_t v92 = v10;
        uint64_t v93 = &v50[16 * v91];
        uint64_t v94 = *(void *)v93;
        Swift::Int v95 = &v50[16 * v52];
        uint64_t v96 = *((void *)v95 + 1);
        sub_1001D2EF4((char *)(v49 + 8 * *(void *)v93), (char *)(v49 + 8 * *(void *)v95), v49 + 8 * v96, v112);
        if (v1) {
          goto LABEL_141;
        }
        if (v96 < v94) {
          goto LABEL_144;
        }
        if (v52 > *((void *)v92 + 2)) {
          goto LABEL_145;
        }
        *(void *)uint64_t v93 = v94;
        *(void *)&v50[16 * v91 + 8] = v96;
        unint64_t v97 = *((void *)v92 + 2);
        if (v52 >= v97) {
          goto LABEL_146;
        }
        uint64_t v10 = v92;
        unint64_t v12 = v97 - 1;
        memmove(&v50[16 * v52], v95 + 16, 16 * (v97 - 1 - v52));
        *((void *)v92 + 2) = v97 - 1;
        uint64_t v49 = v113;
        if (v97 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_14:
    Swift::Int v3 = v111;
    if (v11 >= v111) {
      goto LABEL_130;
    }
  }
  uint64_t v20 = v113;
  if (v16 > 0)
  {
    uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
LABEL_28:
  Swift::Int v22 = v13 + 2;
  if (v13 + 2 >= v3)
  {
    Swift::Int v11 = v13 + 2;
    goto LABEL_57;
  }
  BOOL v21 = 0;
LABEL_30:
  Swift::Int v23 = v22;
  while (2)
  {
    Swift::Int v22 = v23;
    swift_retain();
    swift_retain();
    uint64_t v24 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
    if (v25) {
      uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v26 = v24;
    }
    uint64_t v27 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
    char v29 = v28;
    swift_release();
    swift_release();
    if (v29)
    {
      uint64_t v10 = v110;
      if (v26 > 0)
      {
        uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v20 = v113;
        goto LABEL_43;
      }
LABEL_31:
      uint64_t v20 = v113;
      if (v21) {
        goto LABEL_47;
      }
      goto LABEL_32;
    }
    uint64_t v10 = v110;
    if (v26 <= 0) {
      goto LABEL_31;
    }
    uint64_t v20 = v113;
    if (v27 <= 0)
    {
      if (!v21) {
        goto LABEL_55;
      }
      goto LABEL_32;
    }
LABEL_43:
    if (((v21 ^ (v26 >= (unint64_t)v27)) & 1) == 0) {
      goto LABEL_44;
    }
LABEL_32:
    Swift::Int v23 = v22 + 1;
    if (v22 + 1 < v111) {
      continue;
    }
    break;
  }
  ++v22;
  Swift::Int v11 = v23;
  if (!v21) {
    goto LABEL_57;
  }
LABEL_47:
  if (v22 >= v13)
  {
    if (v13 < v22)
    {
      uint64_t v30 = (uint64_t *)(v106 + 8 * v22);
      Swift::Int v31 = v22;
      Swift::Int v32 = v13;
      uint64_t v33 = (uint64_t *)(v20 + 8 * v13);
      do
      {
        if (v32 != --v31)
        {
          if (!v20) {
            goto LABEL_170;
          }
          uint64_t v34 = *v33;
          *uint64_t v33 = *v30;
          *uint64_t v30 = v34;
        }
        ++v32;
        --v30;
        ++v33;
      }
      while (v32 < v31);
    }
LABEL_55:
    Swift::Int v11 = v22;
    goto LABEL_57;
  }
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
LABEL_170:
  __break(1u);
LABEL_171:
  __break(1u);
LABEL_172:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001D2940(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v11 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v7 = v11;
    uint64_t v8 = (uint64_t *)v6;
    while (1)
    {
      swift_retain();
      swift_retain();
      dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
      dispatch thunk of DKProbabilityValue.variable.getter();
      swift_release();
      dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
      dispatch thunk of DKProbabilityValue.variable.getter();
      swift_release();
      swift_release();
      Swift::Int result = swift_release();
      if (v13 < 1 || v12 > 0 && v13 >= (unint64_t)v12)
      {
LABEL_4:
        ++v4;
        v6 += 8;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      uint64_t v9 = *v8;
      *uint64_t v8 = v8[1];
      v8[1] = v9;
      --v8;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001D2A68(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = result;
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = (void *)(*a4 + 8 * a3 - 8);
LABEL_5:
    uint64_t v7 = v16;
    uint64_t v17 = v6;
    while (1)
    {
      swift_retain();
      swift_retain();
      uint64_t v8 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
      uint64_t v10 = (v9 & 1) != 0 ? 0x7FFFFFFFFFFFFFFFLL : v8;
      uint64_t v11 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
      char v13 = v12;
      swift_release();
      Swift::Int result = swift_release();
      if (v13)
      {
        if ((unint64_t)(v10 - 1) >= 0x7FFFFFFFFFFFFFFELL) {
          goto LABEL_4;
        }
      }
      else if (v10 <= 0 || v11 >= 1 && v10 >= v11)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v17 + 1;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      uint64_t v14 = *v6;
      *uint64_t v6 = v6[1];
      v6[1] = v14;
      --v6;
      if (v4 == ++v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001D2B8C(char *a1, char *__src, char *a3, char *a4)
{
  uint64_t v4 = a3;
  uint64_t v5 = __src;
  uint64_t v6 = __src - a1;
  uint64_t v7 = __src - a1 + 7;
  if (__src - a1 >= 0) {
    uint64_t v7 = __src - a1;
  }
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = a3 - __src;
  uint64_t v10 = a3 - __src + 7;
  if (a3 - __src >= 0) {
    uint64_t v10 = a3 - __src;
  }
  uint64_t v11 = v10 >> 3;
  uint64_t v26 = a1;
  char v25 = a4;
  if (v8 >= v10 >> 3)
  {
    if (v9 < -7) {
      goto LABEL_49;
    }
    if (a4 != __src || &__src[8 * v11] <= a4) {
      memmove(a4, __src, 8 * v11);
    }
    char v15 = &a4[8 * v11];
    uint64_t v24 = v15;
    uint64_t v26 = v5;
    if (a1 >= v5 || v9 < 8) {
      goto LABEL_48;
    }
    uint64_t v16 = v5;
    while (1)
    {
      v16 -= 8;
      swift_retain();
      swift_retain();
      dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
      dispatch thunk of DKProbabilityValue.variable.getter();
      swift_release();
      dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
      dispatch thunk of DKProbabilityValue.variable.getter();
      swift_release();
      swift_release();
      swift_release();
      if (v23 <= 0) {
        break;
      }
      uint64_t v17 = v4 - 8;
      if (v22 >= 1 && v23 >= v22) {
        goto LABEL_41;
      }
      if (v4 != v5 || v17 >= v5) {
        *(void *)uint64_t v17 = *(void *)v16;
      }
      uint64_t v26 = v16;
      char v18 = a4;
LABEL_46:
      if (v16 > a1)
      {
        uint64_t v5 = v16;
        uint64_t v4 = v17;
        if (v15 > v18) {
          continue;
        }
      }
      goto LABEL_48;
    }
    uint64_t v17 = v4 - 8;
LABEL_41:
    uint64_t v24 = v15 - 8;
    char v18 = a4;
    if (v4 < v15 || v17 >= v15 || v4 != v15) {
      *(void *)uint64_t v17 = *((void *)v15 - 1);
    }
    uint64_t v16 = v5;
    v15 -= 8;
    goto LABEL_46;
  }
  if (v6 >= -7)
  {
    char v12 = a4;
    if (a4 != a1 || &a1[8 * v8] <= a4) {
      memmove(a4, a1, 8 * v8);
    }
    uint64_t v24 = &a4[8 * v8];
    if (v5 < v4 && v6 >= 8)
    {
      char v13 = a1;
      do
      {
        swift_retain();
        swift_retain();
        dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
        dispatch thunk of DKProbabilityValue.variable.getter();
        swift_release();
        dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
        dispatch thunk of DKProbabilityValue.variable.getter();
        swift_release();
        swift_release();
        swift_release();
        if (v23 < 1 || v22 > 0 && v23 >= (unint64_t)v22)
        {
          if (v13 != v12) {
            *(void *)char v13 = *(void *)v12;
          }
          v12 += 8;
          char v25 = v12;
          uint64_t v14 = v5;
        }
        else
        {
          uint64_t v14 = v5 + 8;
          if (v13 < v5 || v13 >= v14 || v13 != v5) {
            *(void *)char v13 = *(void *)v5;
          }
        }
        v13 += 8;
        if (v12 >= &a4[8 * v8]) {
          break;
        }
        uint64_t v5 = v14;
      }
      while (v14 < v4);
      uint64_t v26 = v13;
    }
LABEL_48:
    sub_1001E03C4(&v26, &v25, &v24);
    return 1;
  }
LABEL_49:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001D2EF4(char *__src, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = __src;
  int64_t v6 = a2 - __src;
  int64_t v7 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v7 = a2 - __src;
  }
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = a3 - (void)a2;
  uint64_t v10 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v10 = a3 - (void)a2;
  }
  uint64_t v11 = v10 >> 3;
  Swift::Int v37 = __src;
  unint64_t v36 = a4;
  if (v8 >= v10 >> 3)
  {
    if (v9 < -7) {
      goto LABEL_58;
    }
    if (a4 != a2 || &a2[8 * v11] <= a4) {
      memmove(a4, a2, 8 * v11);
    }
    BOOL v21 = &a4[8 * v11];
    Swift::Int v35 = v21;
    Swift::Int v37 = v4;
    if (v5 >= v4 || v9 < 8)
    {
LABEL_57:
      sub_1001E03C4(&v37, &v36, &v35);
      return 1;
    }
    uint64_t v22 = (char *)(a3 - 8);
    uint64_t v23 = v4;
    while (1)
    {
      Swift::Int v32 = v22 + 8;
      uint64_t v34 = v21;
      v21 -= 8;
      v23 -= 8;
      swift_retain();
      swift_retain();
      uint64_t v24 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
      if (v25) {
        uint64_t v26 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v26 = v24;
      }
      uint64_t v27 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
      char v29 = v28;
      swift_release();
      swift_release();
      if (v29)
      {
        if ((unint64_t)(v26 - 1) < 0x7FFFFFFFFFFFFFFELL) {
          goto LABEL_51;
        }
      }
      else if (v26 > 0 && (v27 < 1 || v26 < v27))
      {
LABEL_51:
        BOOL v21 = v34;
        if (v32 != v4 || v22 >= v4) {
          *(void *)uint64_t v22 = *(void *)v23;
        }
        Swift::Int v37 = v23;
        goto LABEL_55;
      }
      Swift::Int v35 = v21;
      if (v32 < v34 || v22 >= v34 || v32 != v34) {
        *(void *)uint64_t v22 = *(void *)v21;
      }
      uint64_t v23 = v4;
LABEL_55:
      if (v23 > v5)
      {
        v22 -= 8;
        uint64_t v4 = v23;
        if (v21 > a4) {
          continue;
        }
      }
      goto LABEL_57;
    }
  }
  if (v6 >= -7)
  {
    if (a4 != __src || &__src[8 * v8] <= a4) {
      memmove(a4, __src, 8 * v8);
    }
    char v12 = &a4[8 * v8];
    Swift::Int v35 = v12;
    if ((unint64_t)v4 < a3 && v6 >= 8)
    {
      char v13 = a4;
      while (1)
      {
        swift_retain();
        swift_retain();
        uint64_t v14 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
        if (v15) {
          uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v16 = v14;
        }
        uint64_t v17 = dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
        char v19 = v18;
        swift_release();
        swift_release();
        if (v19)
        {
          if ((unint64_t)(v16 - 1) < 0x7FFFFFFFFFFFFFFELL) {
            goto LABEL_24;
          }
        }
        else if (v16 > 0 && (v17 < 1 || v16 < v17))
        {
LABEL_24:
          uint64_t v20 = v4 + 8;
          if (v5 < v4 || v5 >= v20 || v5 != v4) {
            *(void *)uint64_t v5 = *(void *)v4;
          }
          goto LABEL_28;
        }
        if (v5 != v13) {
          *(void *)uint64_t v5 = *(void *)v13;
        }
        v13 += 8;
        unint64_t v36 = v13;
        uint64_t v20 = v4;
LABEL_28:
        v5 += 8;
        if (v13 < v12)
        {
          uint64_t v4 = v20;
          if ((unint64_t)v20 < a3) {
            continue;
          }
        }
        Swift::Int v37 = v5;
        goto LABEL_57;
      }
    }
    goto LABEL_57;
  }
LABEL_58:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001D3260(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_10016DC68(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    BOOL v21 = *v5;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = *v22;
      uint64_t v24 = v28;
      *uint64_t v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1001F7650();
    goto LABEL_7;
  }
  sub_1001EFA64(v18, a4 & 1);
  unint64_t v25 = sub_10016DC68(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  BOOL v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  sub_1001F62C0(v15, (uint64_t)v12, a1, v28, v21);
  return 0;
}

uint64_t (*sub_1001D341C(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  int64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1001D3538(v6, a2, a3);
  return sub_1001D3484;
}

uint64_t (*sub_1001D3488(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  int64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1001D35B8(v6, a2, a3);
  return sub_1001D3484;
}

void sub_1001D34F0(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_1001D3538(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  Swift::Int v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *Swift::Int v3 = v4;
    return sub_1001D6104;
  }
  __break(1u);
  return result;
}

uint64_t (*sub_1001D35B8(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  Swift::Int v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    uint64_t v4 = swift_retain();
LABEL_5:
    *Swift::Int v3 = v4;
    return sub_1001D3638;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001D3638()
{
  return swift_release();
}

uint64_t sub_1001D3640(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  Swift::Int v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  *Swift::Int v3 = v2;
  v3[1] = sub_1001D3720;
  return v5(v2 + 32);
}

uint64_t sub_1001D3720()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(unsigned char **)(*v0 + 16);
  uint64_t v5 = *v0;
  swift_task_dealloc();
  *uint64_t v2 = *(unsigned char *)(v1 + 32);
  Swift::Int v3 = *(uint64_t (**)(void))(v5 + 8);
  return v3();
}

uint64_t sub_1001D3834(unint64_t a1, void *a2, double a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  unint64_t v15 = a1;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v16) {
    goto LABEL_24;
  }
  do
  {
    uint64_t v19 = v16 - 1;
    if (v16 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v20 = 0;
    unint64_t v21 = v15 & 0xC000000000000001;
    uint64_t v22 = &selRef_listener_shouldAcceptNewConnection_;
    *(void *)&long long v18 = 136315394;
    long long v34 = v18;
    unint64_t v36 = v15;
    Swift::Int v37 = a2;
    uint64_t v35 = v16 - 1;
    if ((v15 & 0xC000000000000001) != 0)
    {
LABEL_5:
      id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_7;
    }
    while (1)
    {
      id v23 = *(id *)(v15 + 8 * v20 + 32);
LABEL_7:
      uint64_t v24 = v23;
      id v25 = [v23 v22[84]:v34];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000992E8(&qword_1002AA088);
      if ((swift_dynamicCast() & 1) == 0)
      {
        char v40 = 0;
        goto LABEL_14;
      }
      char v26 = v40;
      if (v40) {
        break;
      }
LABEL_14:

LABEL_18:
      swift_unknownObjectRelease();
      if (v19 == v20) {
        return swift_bridgeObjectRelease();
      }
      ++v20;
      if (v21) {
        goto LABEL_5;
      }
    }
    uint64_t v27 = qword_1002A7C10;
    swift_unknownObjectRetain();
    if (v27 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100096F64(v28, (uint64_t)qword_1002ACAA8);
    swift_bridgeObjectRetain_n();
    char v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = v34;
      swift_bridgeObjectRetain();
      *(void *)(v31 + 4) = sub_1000993AC(a8, a9, v39);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v31 + 12) = 2080;
      *(double *)&v39[1] = a3;
      *(double *)&v39[2] = a4;
      *(double *)&v39[3] = a5;
      *(double *)&v39[4] = a6;
      type metadata accessor for CGRect(0);
      uint64_t v32 = String.init<A>(describing:)();
      *(void *)(v31 + 14) = sub_1000993AC(v32, v33, v39);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Notifying client that %s just set subject ROI to %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      uint64_t v19 = v35;
      unint64_t v15 = v36;
      swift_slowDealloc();
      a2 = v37;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    [v26 setRectOfInterestEventWithRect:a3, a4, a5, a6];
    swift_unknownObjectRelease();

    uint64_t v22 = &selRef_listener_shouldAcceptNewConnection_;
    if (!__OFADD__(*a2, 1))
    {
      ++*a2;
      goto LABEL_18;
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v16 = result;
  }
  while (result);
LABEL_24:

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001D3BE4(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v10) {
    goto LABEL_24;
  }
  do
  {
    uint64_t v13 = v10 - 1;
    if (v10 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v14 = 0;
    unint64_t v15 = a1 & 0xC000000000000001;
    *(void *)&long long v12 = 136315394;
    long long v27 = v12;
    uint64_t v28 = v10 - 1;
    char v29 = a2;
    if ((a1 & 0xC000000000000001) != 0)
    {
LABEL_5:
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_7;
    }
    while (1)
    {
      id v16 = *(id *)(a1 + 8 * v14 + 32);
LABEL_7:
      BOOL v17 = v16;
      id v18 = [v16 remoteObjectProxy:v27];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000992E8(&qword_1002AA088);
      if ((swift_dynamicCast() & 1) == 0)
      {
        uint64_t v32 = 0;
        goto LABEL_14;
      }
      uint64_t v19 = v32;
      if (v32) {
        break;
      }
LABEL_14:

LABEL_18:
      swift_unknownObjectRelease();
      if (v13 == v14) {
        return swift_bridgeObjectRelease();
      }
      ++v14;
      if (v15) {
        goto LABEL_5;
      }
    }
    uint64_t v20 = qword_1002A7C10;
    swift_unknownObjectRetain();
    if (v20 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100096F64(v21, (uint64_t)qword_1002ACAA8);
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = v27;
      swift_bridgeObjectRetain();
      *(void *)(v24 + 4) = sub_1000993AC(a4, a5, v31);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v25 = DockFramingMode.description.getter();
      *(void *)(v24 + 14) = sub_1000993AC(v25, v26, v31);
      uint64_t v13 = v28;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Notifying client that %s just set framing mode to %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v29;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v15 = a1 & 0xC000000000000001;
    [v19 setFramingModeEventWithMode:a6];
    swift_unknownObjectRelease();

    if (!__OFADD__(*a2, 1))
    {
      ++*a2;
      goto LABEL_18;
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v10 = result;
  }
  while (result);
LABEL_24:

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001D3F5C(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v50 = a2;
  id v59 = a4;
  uint64_t v51 = a1;
  uint64_t v58 = sub_1000992E8(&qword_1002ACB80);
  uint64_t v5 = __chkstk_darwin(v58);
  int64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v66 = (char *)&v49 - v8;
  uint64_t v64 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin(v64);
  uint64_t v65 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = 0;
  uint64_t v60 = (void *)a3;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v52 = 0;
  uint64_t v53 = a3 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v56 = v10 + 16;
  uint64_t v57 = v10;
  int64_t v54 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v55 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v17 = v64;
  while (v16)
  {
    uint64_t v62 = (v16 - 1) & v16;
    int64_t v63 = v12;
    unint64_t v20 = __clz(__rbit64(v16)) | (v12 << 6);
LABEL_21:
    uint64_t v25 = v60;
    unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v57 + 16);
    long long v27 = v65;
    v26(v65, v60[6] + *(void *)(v57 + 72) * v20, v17);
    uint64_t v28 = v25[7];
    unint64_t v61 = v20;
    char v29 = (uint64_t *)(v28 + 16 * v20);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v32 = (uint64_t)v66;
    v26(v66, (unint64_t)v27, v17);
    uint64_t v33 = *(int *)(v58 + 48);
    long long v34 = (void *)(v32 + v33);
    *long long v34 = v30;
    v34[1] = v31;
    uint64_t v35 = &v7[v33];
    v26(v7, v32, v17);
    *(void *)uint64_t v35 = v30;
    *((void *)v35 + 1) = v31;
    swift_bridgeObjectRetain_n();
    id v36 = [v59 uniqueIDOverride];
    if (v36)
    {
      Swift::Int v37 = v36;
      uint64_t v38 = v7;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;

      if (v30 == v39 && v31 == v41)
      {
        sub_1000A61E4((uint64_t)v66, &qword_1002ACB80);
        swift_bridgeObjectRelease_n();
        id v18 = *v55;
        int64_t v7 = v38;
        uint64_t v19 = v64;
        (*v55)(v38, v64);
        swift_bridgeObjectRelease();
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v18)(v65, v19);
        unint64_t v16 = v62;
        int64_t v12 = v63;
      }
      else
      {
        char v43 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_1000A61E4((uint64_t)v66, &qword_1002ACB80);
        swift_bridgeObjectRelease_n();
        char v44 = *v55;
        int64_t v7 = v38;
        uint64_t v45 = v64;
        (*v55)(v38, v64);
        swift_bridgeObjectRelease();
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(v65, v45);
        unint64_t v16 = v62;
        int64_t v12 = v63;
        if ((v43 & 1) == 0) {
          goto LABEL_29;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1000A61E4((uint64_t)v66, &qword_1002ACB80);
      swift_bridgeObjectRelease_n();
      uint64_t v46 = *v55;
      uint64_t v47 = v64;
      (*v55)(v7, v64);
      swift_bridgeObjectRelease();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v46)(v65, v47);
      unint64_t v16 = v62;
      int64_t v12 = v63;
LABEL_29:
      *(unint64_t *)((char *)v51 + ((v61 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v61;
      if (__OFADD__(v52++, 1))
      {
        __break(1u);
        return sub_1001D14A8(v51, v50, v52, v60);
      }
    }
  }
  int64_t v21 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v21 >= v54) {
    return sub_1001D14A8(v51, v50, v52, v60);
  }
  unint64_t v22 = *(void *)(v53 + 8 * v21);
  int64_t v23 = v12 + 1;
  if (v22) {
    goto LABEL_20;
  }
  int64_t v23 = v12 + 2;
  if (v12 + 2 >= v54) {
    return sub_1001D14A8(v51, v50, v52, v60);
  }
  unint64_t v22 = *(void *)(v53 + 8 * v23);
  if (v22) {
    goto LABEL_20;
  }
  int64_t v23 = v12 + 3;
  if (v12 + 3 >= v54) {
    return sub_1001D14A8(v51, v50, v52, v60);
  }
  unint64_t v22 = *(void *)(v53 + 8 * v23);
  if (v22)
  {
LABEL_20:
    uint64_t v62 = (v22 - 1) & v22;
    int64_t v63 = v23;
    unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
    goto LABEL_21;
  }
  uint64_t v24 = v12 + 4;
  if (v12 + 4 >= v54) {
    return sub_1001D14A8(v51, v50, v52, v60);
  }
  unint64_t v22 = *(void *)(v53 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v12 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v54) {
      return sub_1001D14A8(v51, v50, v52, v60);
    }
    unint64_t v22 = *(void *)(v53 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_1001D4454(uint64_t a1, void *a2)
{
  char v4 = *(unsigned char *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  uint64_t v8 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    uint64_t v9 = (char *)&v15 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v9, 8 * v6);
    id v10 = v8;
    uint64_t v11 = sub_1001D3F5C((unint64_t *)v9, v6, a1, v10);

    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    int64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, 8 * v6);
    id v13 = v8;
    uint64_t v11 = sub_1001D3F5C((unint64_t *)v12, v6, a1, v13);

    swift_slowDealloc();
  }
  return v11;
}

uint64_t sub_1001D45F8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a2;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  long long v34 = a1;
  uint64_t v42 = sub_1000992E8(&qword_1002ACB80);
  __chkstk_darwin(v42);
  uint64_t v39 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = 0;
  uint64_t v45 = (void *)a3;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v35 = 0;
  uint64_t v36 = a3 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  uint64_t v40 = v9 + 16;
  uint64_t v41 = v9;
  int64_t v37 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v17 = (uint64_t)v39;
  while (v16)
  {
    unint64_t v18 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    int64_t v46 = v12;
    unint64_t v19 = v18 | (v12 << 6);
LABEL_18:
    uint64_t v24 = v45;
    uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
    v25(v11, v45[6] + *(void *)(v41 + 72) * v19, v7);
    unint64_t v26 = (uint64_t *)(v24[7] + 16 * v19);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    v25((char *)v17, (unint64_t)v11, v7);
    uint64_t v29 = v43;
    uint64_t v30 = (void *)(v17 + *(int *)(v42 + 48));
    *uint64_t v30 = v28;
    v30[1] = v27;
    if (v28 == v29 && v27 == v44)
    {
      swift_bridgeObjectRetain();
      sub_1000A61E4(v17, &qword_1002ACB80);
      uint64_t result = (*v38)(v11, v7);
      int64_t v12 = v46;
    }
    else
    {
      char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      sub_1000A61E4(v17, &qword_1002ACB80);
      uint64_t result = (*v38)(v11, v7);
      int64_t v12 = v46;
      if ((v32 & 1) == 0)
      {
        *(unint64_t *)((char *)v34 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        BOOL v20 = __OFADD__(v35++, 1);
        if (v20) {
          goto LABEL_33;
        }
      }
    }
  }
  BOOL v20 = __OFADD__(v12, 1);
  int64_t v21 = v12 + 1;
  if (v20)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v21 >= v37) {
    return sub_1001D14A8(v34, v33, v35, v45);
  }
  unint64_t v22 = *(void *)(v36 + 8 * v21);
  if (v22)
  {
LABEL_17:
    unint64_t v16 = (v22 - 1) & v22;
    int64_t v46 = v21;
    unint64_t v19 = __clz(__rbit64(v22)) + (v21 << 6);
    goto LABEL_18;
  }
  int64_t v23 = v21 + 1;
  if (v21 + 1 >= v37) {
    return sub_1001D14A8(v34, v33, v35, v45);
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v21 + 2;
  if (v21 + 2 >= v37) {
    return sub_1001D14A8(v34, v33, v35, v45);
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v21 + 3;
  if (v21 + 3 >= v37) {
    return sub_1001D14A8(v34, v33, v35, v45);
  }
  unint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
LABEL_16:
    int64_t v21 = v23;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v21 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v21 >= v37) {
      return sub_1001D14A8(v34, v33, v35, v45);
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v23;
    if (v22) {
      goto LABEL_17;
    }
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1001D498C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1001D45F8((unint64_t *)((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v10);
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1001D45F8((unint64_t *)v13, v9, a1, a2, a3);
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v12;
}

uint64_t sub_1001D4B54()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_1001D4B84()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D4BC4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000A69C4;
  v3[4] = v2;
  char v4 = (void *)swift_task_alloc();
  v3[5] = v4;
  *char v4 = v3;
  v4[1] = sub_1001CEBAC;
  return sub_1000F67F0();
}

uint64_t sub_1001D4C9C(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  uint64_t v19 = 0;
  uint64_t v10 = qword_1002A7C00;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  sub_1001A4EF8(a1, a2, qword_1002B1628, &v19, a3, a4, a5);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v19)
  {
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100096F64(v12, (uint64_t)qword_1002ACAA8);
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      sub_1000993AC(a1, a2, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No clients registered for config changes on %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v16 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v16 - 8) + 104))(v17, enum case for DockKitIDSMessagingError.unrecognizedClient(_:), v16);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1001D4F7C()
{
  return sub_1001CF9E4(*(unsigned int *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), (uint64_t (*)(uint64_t, uint64_t))sub_100193B84, "Subject selection not completed after 1 sec, expiring");
}

uint64_t sub_1001D4FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001D4FD0()
{
  return swift_release();
}

uint64_t sub_1001D4FD8(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v27 = 0;
  uint64_t v18 = qword_1002A7C00;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  sub_1001A52CC(a1, a2, qword_1002B1628, &v27, a3, a4, a5, a6, a7, a8, a9);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v27)
  {
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100096F64(v20, (uint64_t)qword_1002ACAA8);
    swift_bridgeObjectRetain_n();
    int64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      int64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)int64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      sub_1000993AC(a1, a2, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No clients registered for config changes on %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v24 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104))(v25, enum case for DockKitIDSMessagingError.unrecognizedClient(_:), v24);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1001D52D0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D5308()
{
  return sub_1001CF9E4(*(unsigned int *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), (uint64_t (*)(uint64_t, uint64_t))sub_100193CD8, "Region of Interest not completed after 1 sec, expiring");
}

uint64_t sub_1001D534C()
{
  uint64_t v1 = type metadata accessor for TrajectoryCommand();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001D5420()
{
  uint64_t v2 = *(void *)(type metadata accessor for TrajectoryCommand() - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_1000A5ED8;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001CFF34, 0, 0);
}

void sub_1001D5508(id *a1)
{
  sub_1001CFBC8(a1, *(unsigned int *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1001D551C(uint64_t a1, unint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v16 = 0;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t result = sub_1001A5794(a1, a2, qword_1002B1628, a3, a4, &v16);
  if (!v16)
  {
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100096F64(v9, (uint64_t)qword_1002ACAA8);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_bridgeObjectRetain();
      sub_1000993AC(a1, a2, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No clients registered for config changes on %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v13 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v13 - 8) + 104))(v14, enum case for DockKitIDSMessagingError.unrecognizedClient(_:), v13);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1001D57CC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1001D5804()
{
  unint64_t result = qword_1002ACBD8;
  if (!qword_1002ACBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002ACBD8);
  }
  return result;
}

uint64_t sub_1001D5858(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v21 = 0;
  uint64_t v12 = qword_1002A7C00;
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  sub_1001A5548(a1, a2, qword_1002B1628, &v21, a3, a4, a5, a6);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v21)
  {
    if (qword_1002A7C10 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100096F64(v14, (uint64_t)qword_1002ACAA8);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      sub_1000993AC(a1, a2, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No clients registered for config changes on %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v18 = type metadata accessor for DockKitIDSMessagingError();
    sub_1001D6018(&qword_1002ACB68, (void (*)(uint64_t))&type metadata accessor for DockKitIDSMessagingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v18 - 8) + 104))(v19, enum case for DockKitIDSMessagingError.unrecognizedClient(_:), v18);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1001D5B28()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D5B60(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000A5ED8;
  return sub_1001D0408(a1, v4, v5, v6);
}

unint64_t sub_1001D5C14()
{
  unint64_t result = qword_1002ACC10;
  if (!qword_1002ACC10)
  {
    sub_100099D14(&qword_1002ACC08);
    sub_1001D6018(&qword_1002ACC18, (void (*)(uint64_t))&type metadata accessor for DockKitBoundingBox);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002ACC10);
  }
  return result;
}

uint64_t sub_1001D5CB8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001D5CF4()
{
  sub_1001C1600(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001D5CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AA6A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D5D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AA6A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1001D5DD0()
{
  sub_1001C01B8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001D5DD8()
{
  return sub_1001D5E54(32);
}

uint64_t sub_1001D5DE0()
{
  return sub_1001BF198(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1001D5DE8()
{
  return sub_1001D5E54(40);
}

uint64_t sub_1001D5DF0()
{
  return sub_1001BE96C(v0[2], v0[3], v0[4], (uint64_t (*)(uint64_t))&DockKitIDSInfo.trackingState.getter, (void (*)(uint64_t))&DockKitIDSInfo.trackingState.setter, (uint64_t (*)(void))&TrackingButtonState.rawValue.getter);
}

uint64_t sub_1001D5E4C()
{
  return sub_1001D5E54(40);
}

uint64_t sub_1001D5E54(uint64_t a1)
{
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1001D5EA0()
{
  return sub_1001BE96C(v0[2], v0[3], v0[4], (uint64_t (*)(uint64_t))&DockKitIDSInfo.dockState.getter, (void (*)(uint64_t))&DockKitIDSInfo.dockState.setter, (uint64_t (*)(void))&DockState.rawValue.getter);
}

uint64_t sub_1001D5EFC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_1000A69C4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1002ACC40 + dword_1002ACC40);
  return v6(a1, v4);
}

uint64_t sub_1001D5FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BTDiscoveredDevice();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D6018(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001D6060()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001D6098()
{
  sub_1001BD498(*(void *)(v0 + 16));
}

uint64_t sub_1001D60A0()
{
  return sub_1001D4B54() & 1;
}

uint64_t sub_1001D6108(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
        JUMPOUT(0x1001D6374);
      }
      uint64_t v8 = HIDWORD(a1) - (int)a1;
LABEL_7:
      sub_1000A618C(a1, a2);
      if (v8 != 6) {
        goto LABEL_11;
      }
LABEL_8:
      sub_1000A618C(a1, a2);
      unsigned int v11 = Data.subscript.getter();
      sub_1000A6240(a1, a2);
      if (v11 < 0xC0)
      {
LABEL_11:
        sub_1000A6240(a1, a2);
        goto LABEL_12;
      }
      if (a2 >> 62)
      {
        sub_1000A618C(a1, a2);
        sub_1000A618C(a1, a2);
      }
      Data.Iterator.init(_:at:)();
      sub_1000A6240(a1, a2);
      Swift::UInt8_optional v13 = Data.Iterator.next()();
      BOOL v14 = (*(_WORD *)&v13 & 0x100) == 0;
      char v15 = 0;
      if ((*(_WORD *)&v13 & 0x100) != 0) {
        goto LABEL_24;
      }
      char v16 = 0;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      uint64_t v8 = v9 - v10;
      if (!__OFSUB__(v9, v10)) {
        goto LABEL_7;
      }
      goto LABEL_28;
    case 3uLL:
      goto LABEL_11;
    default:
      if (BYTE6(a2) != 6) {
        goto LABEL_11;
      }
      goto LABEL_8;
  }
  while (1)
  {
    if (!v13.value) {
      goto LABEL_17;
    }
    if (v13.value == 255) {
      break;
    }
LABEL_16:
    char v15 = 1;
LABEL_17:
    Swift::UInt8_optional v13 = Data.Iterator.next()();
    char v16 = 1;
    if ((*(_WORD *)&v13 & 0x100) != 0) {
      goto LABEL_24;
    }
  }
  while (1)
  {
    Swift::UInt8_optional v17 = Data.Iterator.next()();
    if ((*(_WORD *)&v17 & 0x100) != 0) {
      break;
    }
    if (v17.value != 255) {
      goto LABEL_16;
    }
  }
  char v15 = 1;
  BOOL v14 = v16;
LABEL_24:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1000A6240(a1, a2);
  if ((v15 & 1) == 0 || !v14)
  {
LABEL_12:
    sub_1000A6240(a1, a2);
    return 0;
  }
  return a1;
}

uint64_t sub_1001D6384()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd19RotationRateStorage_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1001D6418()
{
  return type metadata accessor for RotationRateStorage();
}

uint64_t type metadata accessor for RotationRateStorage()
{
  uint64_t result = qword_1002ACC90;
  if (!qword_1002ACC90) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001D646C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RotationRateStamped(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RotationRateStamped(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RotationRateStamped()
{
  return &type metadata for RotationRateStamped;
}

ValueMetadata *type metadata accessor for RotationErrorStamped()
{
  return &type metadata for RotationErrorStamped;
}

uint64_t sub_1001D65A4()
{
  return v0;
}

uint64_t (*sub_1001D65B0())()
{
  return j__swift_endAccess;
}

uint64_t sub_1001D6604()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001D66C4, 0, 0);
}

uint64_t sub_1001D66C4()
{
  (*(void (**)(void, uint64_t, void))(v0[7] + 16))(v0[8], v0[5] + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v0[6]);
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    char v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Shutting down", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v7 = v0[5];
  uint64_t v6 = v0[6];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v8 = *(void **)(v7 + 32);
  v0[9] = v8;
  if (v8)
  {
    v8;
    uint64_t v9 = (void *)swift_task_alloc();
    v0[10] = v9;
    void *v9 = v0;
    v9[1] = sub_1001D6928;
    return sub_1000FA064();
  }
  else
  {
    unsigned int v11 = (void *)v0[5];
    v11[4] = 0;
    swift_beginAccess();
    uint64_t v12 = v11[13];
    unint64_t v13 = v11[14];
    *(_OWORD *)(v11 + 13) = xmmword_100240E00;
    sub_1000A9990(v12, v13);
    if (v11[5])
    {
      uint64_t v14 = type metadata accessor for Errors();
      sub_1000AADE4();
      uint64_t v15 = swift_allocError();
      *char v16 = 0;
      v16[1] = 0xE000000000000000;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, enum case for Errors.OperationCancelled(_:), v14);
      sub_1001D7BFC(v15);
      swift_errorRelease();
    }
    swift_task_dealloc();
    Swift::UInt8_optional v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_1001D6928()
{
  unint64_t v1 = *(void **)(*(void *)v0 + 72);
  swift_task_dealloc();

  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001D6A3C, 0, 0);
}

uint64_t sub_1001D6A3C()
{
  unint64_t v1 = *(void **)(v0 + 40);
  os_log_type_t v2 = (void *)v1[4];
  v1[4] = 0;

  swift_beginAccess();
  uint64_t v3 = v1[13];
  unint64_t v4 = v1[14];
  *(_OWORD *)(v1 + 13) = xmmword_100240E00;
  sub_1000A9990(v3, v4);
  if (v1[5])
  {
    uint64_t v5 = type metadata accessor for Errors();
    sub_1000AADE4();
    uint64_t v6 = swift_allocError();
    *uint64_t v7 = 0;
    v7[1] = 0xE000000000000000;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v5 - 8) + 104))(v7, enum case for Errors.OperationCancelled(_:), v5);
    sub_1001D7BFC(v6);
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1001D6B68()
{
  *(void *)(v1 + 160) = v0;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1001D6B88, 0, 0);
}

uint64_t sub_1001D6B88()
{
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 168) = Strong;
  if (!Strong)
  {
    uint64_t v30 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    *uint64_t v31 = 0xD000000000000010;
    v31[1] = 0x8000000100236700;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v31, enum case for Errors.AccessoryServerNil(_:), v30);
    swift_willThrow();
    goto LABEL_12;
  }
  uint64_t v2 = Strong;
  uint64_t v3 = *(void **)(Strong + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  if (!v3 || ([v3 canAcceptBulkSendListeners] & 1) == 0)
  {
    id v4 = *(id *)(v2 + 40);
    OS_dispatch_queue.sync<A>(execute:)();

    if (*(unsigned char *)(v0 + 192) == 1)
    {
      uint64_t v5 = type metadata accessor for Errors();
      sub_1000AADE4();
      swift_allocError();
      uint64_t v7 = v6;
      _StringGuts.grow(_:)(53);
      v8._countAndFlagsBits = 0xD000000000000033;
      v8._object = (void *)0x8000000100238F30;
      String.append(_:)(v8);
      id v9 = *(id *)(v2 + 24);
      id v10 = [v9 description];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);

      swift_bridgeObjectRelease();
      *uint64_t v7 = 0;
      v7[1] = 0xE000000000000000;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v5 - 8) + 104))(v7, enum case for Errors.OperationNotSupported(_:), v5);
      swift_willThrow();
      swift_release();
LABEL_12:
      char v32 = *(uint64_t (**)(void))(v0 + 8);
      return v32();
    }
  }
  uint64_t v15 = *(void **)(v0 + 160);
  char v16 = (void *)v15[3];
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  *(void *)(inited + 32) = 0x79616C6564;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 48) = 0;
  id v18 = v16;
  swift_retain();
  unint64_t v19 = sub_1001E9E0C(inited);
  uint64_t v20 = v15[7];
  uint64_t v21 = v15[8];
  objc_allocWithZone((Class)type metadata accessor for AccessoryDataStreamAdapter());
  swift_bridgeObjectRetain();
  id v22 = sub_1000FE434(v2, v18, v19, 0xD000000000000015, 0x800000010023A440, v20, v21);
  swift_release();

  int64_t v23 = (void *)v15[4];
  v15[4] = v22;

  uint64_t v24 = (void *)v15[4];
  if (v24)
  {
    uint64_t v25 = *(void *)(v0 + 160);
    *(void *)(v0 + 120) = type metadata accessor for AccessoryDescriptionSession();
    *(void *)(v0 + 128) = &off_10027A458;
    *(void *)(v0 + 96) = v25;
    uint64_t v26 = (uint64_t)v24 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate;
    swift_beginAccess();
    id v27 = v24;
    swift_retain();
    sub_10016F9CC(v0 + 96, v26);
    swift_endAccess();
  }
  uint64_t v28 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_1001D702C;
  uint64_t v29 = *(void *)(v0 + 160);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v28, 0, 0, 0x292870757465735FLL, 0xE800000000000000, sub_1001D8BF8, v29, (char *)&type metadata for () + 8);
}

uint64_t sub_1001D702C()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001D71A4;
  }
  else {
    uint64_t v2 = sub_1001D7140;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_1001D7140()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D71A4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D7208(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AADC0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t result = __chkstk_darwin(v4);
  Swift::String v8 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = *(char **)(a2 + 32);
  if (v9)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    unint64_t v11 = (v6 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v12 + v10, v8, v4);
    *(void *)(v12 + v11) = a2;
    unint64_t v13 = (uint64_t *)&v9[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback];
    if (*(void *)&v9[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback])
    {
      uint64_t v14 = type metadata accessor for Errors();
      sub_1000AADE4();
      uint64_t v15 = swift_allocError();
      *char v16 = 0xD00000000000001ELL;
      v16[1] = 0x8000000100238F70;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v14 - 8) + 104))(v16, enum case for Errors.OperationInProgress(_:), v14);
      swift_retain();
      swift_willThrow();
      swift_release();
      v19[0] = v15;
      return CheckedContinuation.resume(throwing:)();
    }
    else
    {
      swift_retain();
      Swift::UInt8_optional v17 = v9;
      sub_1000FB744();
      uint64_t v18 = *v13;
      *unint64_t v13 = (uint64_t)sub_1001D8CA8;
      v13[1] = v12;
      swift_retain();
      sub_1000BF118(v18);

      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1001D7454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v14[1] = a2;
    swift_errorRetain();
    sub_1000992E8(&qword_1002AADC0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v6);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Accessory Description data stream was setup successfully", v13, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(unsigned char *)(a4 + 96) = 1;
    *(void *)(a4 + 88) = 1;
    sub_1000992E8(&qword_1002AADC0);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_1001D7614(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(v2 + 32))
  {
    uint64_t v8 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    unint64_t v10 = v9;
    unint64_t v11 = 0xD000000000000017;
    os_log_type_t v12 = "Data stream not present";
LABEL_7:
    unint64_t *v9 = v11;
    v9[1] = (unint64_t)(v12 - 32) | 0x8000000000000000;
    (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, enum case for Errors.NotFound(_:), v8);
    goto LABEL_8;
  }
  if ((*(unsigned char *)(v2 + 96) & 1) == 0)
  {
    uint64_t v8 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    unint64_t v10 = v9;
    unint64_t v11 = 0xD00000000000001FLL;
    os_log_type_t v12 = "Session not ready for data read";
    goto LABEL_7;
  }
  if (*(void *)(v2 + 40))
  {
    uint64_t v3 = type metadata accessor for Errors();
    sub_1000AADE4();
    uint64_t v4 = swift_allocError();
    void *v5 = 0xD000000000000031;
    v5[1] = 0x800000010023A400;
    uint64_t v6 = *(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104);
    v6(v5, enum case for Errors.OperationInProgress(_:), v3);
    sub_1001D7BFC(v4);
    swift_errorRelease();
    swift_allocError();
    *uint64_t v7 = 0xD000000000000031;
    v7[1] = 0x800000010023A400;
    v6(v7, enum case for Errors.NotFound(_:), v3);
LABEL_8:
    swift_willThrow();
    return;
  }
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  swift_retain();
  sub_1000BF118(0);
  id v13 = *(id *)(v2 + 24);
  sub_1000992E8(&qword_1002A8588);
  OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1001D7880(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v2[10];
  unint64_t v9 = (unint64_t)[a1 length];
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_18;
  }
  unint64_t v10 = (char *)(v8 + v9);
  if (__CFADD__(v8, v9))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v11 = v2[9];
  if (v11 < (unint64_t)v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v4);
    swift_retain();
    uint64_t v24 = a1;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v27 = (_DWORD *)swift_slowAlloc();
      char v32 = v10;
      uint64_t v28 = v27;
      *id v27 = 134218496;
      v33[0] = *((id *)v2 + 10);
      unint64_t v31 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v28 + 6) = 2048;
      v33[0] = [v24 length];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *((_WORD *)v28 + 11) = 2048;
      v33[0] = *((id *)v2 + 9);
      unint64_t v11 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Accessory Description exceeded max size (written: %llu, new data: %ld, max: %llu", (uint8_t *)v28, 0x20u);
      unint64_t v10 = v32;
      swift_slowDealloc();
    }
    else
    {

      swift_release();
      uint64_t v25 = v24;
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v11 >= (unint64_t)v10;
  }
  unint64_t v12 = (unint64_t)[a1 length];
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v13 = v2[10];
    BOOL v14 = __CFADD__(v13, v12);
    uint64_t v15 = (char *)(v13 + v12);
    if (!v14)
    {
      v2[10] = v15;
      char v16 = v2 + 13;
      swift_beginAccess();
      unint64_t v17 = v2[14];
      if (v17 >> 60 == 15)
      {
        uint64_t v18 = *v16;
        *(_OWORD *)char v16 = xmmword_100240D00;
        sub_1000A9990(v18, v17);
      }
      unint64_t v19 = sub_1001D65B0();
      if (*(void *)(v20 + 8) >> 60 != 15)
      {
        uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;
        Data.append(_:)();
        sub_1000A6240(v21, v23);
      }
      ((void (*)(id *, void))v19)(v33, 0);
      return v11 >= (unint64_t)v10;
    }
    goto LABEL_17;
  }
LABEL_18:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001D7BFC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v16 = v2;
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    unint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 138412290;
    if (a1)
    {
      swift_errorRetain();
      uint64_t v12 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t v17 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v12 = 0;
    }
    *unint64_t v11 = v12;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Calling completion handler with error: %@", v10, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v2 = v16;
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  BOOL v14 = *(void (**)(uint64_t, void, unint64_t))(v2 + 40);
  if (v14)
  {
    *(void *)(v2 + 40) = 0;
    *(void *)(v2 + 48) = 0;
    swift_retain();
    sub_1000BF118((uint64_t)v14);
    v14(a1, 0, 0xF000000000000000);
    return sub_1000BF118((uint64_t)v14);
  }
  return result;
}

uint64_t sub_1001D7EC0()
{
  swift_weakDestroy();

  sub_1000BF118(*(void *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_1000A9990(*(void *)(v0 + 104), *(void *)(v0 + 112));
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1001D7F90()
{
  return type metadata accessor for AccessoryDescriptionSession();
}

uint64_t type metadata accessor for AccessoryDescriptionSession()
{
  uint64_t result = qword_1002ACE58;
  if (!qword_1002ACE58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001D7FE4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_1001D80CC(uint64_t a1, uint64_t a2)
{
  return sub_1001D8520(a2) & 1;
}

uint64_t sub_1001D80F8()
{
  return sub_1001D87D8();
}

uint64_t sub_1001D811C()
{
  return sub_1001D8208();
}

uint64_t sub_1001D8140(uint64_t a1, uint64_t a2)
{
  swift_weakInit();
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 48) = 0;
  *(void *)(v2 + 56) = 0xD000000000000018;
  *(void *)(v2 + 64) = 0x800000010023A460;
  *(void *)(v2 + 72) = 5242880;
  *(void *)(v2 + 80) = 0;
  *(void *)(v2 + 88) = 0;
  *(unsigned char *)(v2 + 96) = 0;
  *(_OWORD *)(v2 + 104) = xmmword_100240E00;
  Logger.init(subsystem:category:)();
  swift_weakAssign();
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_1001D8208()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v2);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      id v10 = *(id *)(Strong + 24);
      swift_release();
      id v17 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      id v17 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v10 = 0;
    }
    *uint64_t v16 = v10;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to read data for accessory: %@", v8, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (*(void *)(v1 + 40))
  {
    uint64_t v12 = type metadata accessor for Errors();
    sub_1000AADE4();
    uint64_t v13 = swift_allocError();
    *BOOL v14 = 0x722064656C696166;
    v14[1] = 0xEB00000000646165;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, enum case for Errors.CommunicationFailure(_:), v12);
    sub_1001D7BFC(v13);
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_1001D8520(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v10 = (char *)v22 - v9;
  if (*(void *)(a1 + 16)
    && (unint64_t v11 = sub_10016DB60(1635017060, 0xE400000000000000), (v12 & 1) != 0)
    && (sub_100099C1C(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v23), sub_1001D8BB8(), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v13 = (void *)v22[1];
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v4);
    BOOL v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Data frame received", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    char v17 = sub_1001D7880(v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v4);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No data present in frame", v20, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_1001D87D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v24 - v7;
  uint64_t v9 = (void (**)(void, uint64_t, unint64_t))(v1 + 5);
  if (v1[5])
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v2);
  }
  else
  {
    uint64_t v24 = v6;
    uint64_t v25 = v2;
    id v10 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    v10((char *)&v24 - v7, (char *)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v2);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Data read completed but no completion handler", v13, 2u);
      swift_slowDealloc();
    }

    uint64_t v2 = v25;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v25);
    uint64_t v6 = v24;
    v10(v24, (char *)v1 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionSession_logger, v2);
  }
  swift_retain_n();
  BOOL v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v24 = v6;
    uint64_t v25 = v2;
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    char v17 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 138412290;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      id v19 = *(id *)(Strong + 24);
      swift_release();
      id v26 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      id v26 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v19 = 0;
    }
    *char v17 = v19;
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Data read completed for accessory: %@", v16, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v24;
    uint64_t v2 = v25;
  }
  else
  {

    swift_release_n();
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v21 = *v9;
  if (*v9)
  {
    unint64_t *v9 = 0;
    v1[6] = 0;
    swift_retain();
    sub_1000BF118((uint64_t)v21);
    swift_beginAccess();
    uint64_t v23 = v1[13];
    unint64_t v22 = v1[14];
    sub_1000A997C(v23, v22);
    v21(0, v23, v22);
    sub_1000A9990(v23, v22);
    return sub_1000BF118((uint64_t)v21);
  }
  return result;
}

unint64_t sub_1001D8BB8()
{
  unint64_t result = qword_1002A9FC8;
  if (!qword_1002A9FC8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002A9FC8);
  }
  return result;
}

uint64_t sub_1001D8BF8(uint64_t a1)
{
  return sub_1001D7208(a1, v1);
}

uint64_t sub_1001D8C00()
{
  uint64_t v1 = sub_1000992E8(&qword_1002AADC0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001D8CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_1000992E8(&qword_1002AADC0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1001D7454(a1, a2, v2 + v6, v7);
}

dockaccessoryd::VirtualEvent_optional __swiftcall VirtualEvent.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    v1.value = dockaccessoryd_VirtualEvent_ShutterButtonUp;
  }
  else {
    v1.value = dockaccessoryd_VirtualEvent_unknownDefault;
  }
  if (rawValue) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t VirtualEvent.rawValue.getter(char a1)
{
  return a1 & 1;
}

unint64_t sub_1001D8D7C()
{
  unint64_t result = qword_1002AD070;
  if (!qword_1002AD070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AD070);
  }
  return result;
}

void *sub_1001D8DD0@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

unsigned char *storeEnumTagSinglePayload for VirtualEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001D8EBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VirtualEvent()
{
  return &type metadata for VirtualEvent;
}

char *sub_1001D8EF4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v1 - 8);
  uint64_t v36 = v1;
  __chkstk_darwin(v1);
  uint64_t v34 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = v0;
  Logger.init(subsystem:category:)();
  uint64_t v32 = OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_workQueue;
  sub_1000B8610();
  static DispatchQoS.unspecified.getter();
  v37[0] = _swiftEmptyArrayStorage;
  sub_1000CC1E4();
  sub_1000992E8(&qword_1002A9000);
  sub_1000CC23C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v33);
  *(void *)&v8[v32] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v8[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService] = 0;
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100243100;
  *(void *)(inited + 32) = 0x726F70736E617254;
  *(void *)(inited + 40) = 0xE900000000000074;
  *(void *)(inited + 48) = 0x6C617574726956;
  *(void *)(inited + 56) = 0xE700000000000000;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0xD00000000000001ALL;
  *(void *)(inited + 88) = 0x800000010023A550;
  *(unsigned char *)(inited + 96) = 1;
  *(void *)(inited + 120) = &type metadata for Bool;
  *(void *)(inited + 128) = 0xD000000000000016;
  *(void *)(inited + 136) = 0x800000010023A570;
  id v10 = v34;
  UUID.init()();
  uint64_t v11 = UUID.uuidString.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v36);
  *(void *)(inited + 144) = v11;
  *(void *)(inited + 152) = v13;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 176) = 0xD000000000000010;
  *(void *)(inited + 184) = 0x8000000100233FD0;
  *(void *)(inited + 192) = 65280;
  *(void *)(inited + 216) = &type metadata for Int;
  strcpy((char *)(inited + 224), "PrimaryUsage");
  *(unsigned char *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  *(void *)(inited + 240) = 1;
  *(void *)(inited + 264) = &type metadata for Int;
  *(void *)(inited + 272) = 0x6E492D746C697542;
  *(void *)(inited + 280) = 0xE800000000000000;
  *(void *)(inited + 288) = 1;
  *(void *)(inited + 312) = &type metadata for Int;
  *(void *)(inited + 320) = 0x4449726F646E6556;
  *(void *)(inited + 328) = 0xE800000000000000;
  *(void *)(inited + 336) = 65280;
  *(void *)(inited + 360) = &type metadata for Int;
  *(void *)(inited + 368) = 0x49746375646F7250;
  *(void *)(inited + 376) = 0xE900000000000044;
  *(void *)(inited + 384) = 65280;
  *(void *)(inited + 408) = &type metadata for Int;
  strcpy((char *)(inited + 416), "ReportInterval");
  *(unsigned char *)(inited + 431) = -18;
  *(void *)(inited + 432) = 0;
  *(void *)(inited + 456) = &type metadata for Int;
  *(void *)(inited + 464) = 0xD000000000000010;
  *(void *)(inited + 472) = 0x800000010023A590;
  unint64_t v14 = sub_1001EB370((uint64_t)&off_100274D08);
  *(void *)(inited + 504) = sub_1000992E8((uint64_t *)&unk_1002AD110);
  *(void *)(inited + 480) = v14;
  *(void *)&v8[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_properties] = sub_1001E9E0C(inited);

  os_log_type_t v15 = (objc_class *)type metadata accessor for VirtualEventService();
  v38.receiver = v8;
  v38.super_class = v15;
  id v16 = [super init];
  id v17 = objc_allocWithZone((Class)HIDVirtualEventService);
  uint64_t v18 = (char *)v16;
  id v19 = [v17 init];
  uint64_t v20 = OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService;
  uint64_t v21 = *(void **)&v18[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService];
  *(void *)&v18[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService] = v19;

  unint64_t v22 = *(void **)&v18[v20];
  if (v22)
  {
    [v22 setDelegate:v18];
    uint64_t v23 = *(void **)&v18[v20];
    if (v23)
    {
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = v18;
      v37[4] = sub_1001DA040;
      v37[5] = v24;
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 1107296256;
      v37[2] = sub_1001468DC;
      v37[3] = &unk_10027A558;
      uint64_t v25 = _Block_copy(v37);
      id v26 = v18;
      id v27 = v23;
      swift_release();
      [v27 setCancelHandler:v25];
      _Block_release(v25);

      uint64_t v28 = *(void **)&v18[v20];
      if (v28)
      {
        [v28 setDispatchQueue:*(void *)&v26[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_workQueue]];
        uint64_t v29 = *(void **)&v18[v20];
        if (v29)
        {
          id v30 = v29;
          [v30 activate];
        }
      }
    }
  }

  return v18;
}

uint64_t sub_1001D955C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_logger, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "event service cancelled", v8, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

id sub_1001D96D8()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService];
  *(void *)&v0[OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_eventService] = 0;

  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for VirtualEventService();
  return [super dealloc];
}

uint64_t sub_1001D9820()
{
  return type metadata accessor for VirtualEventService();
}

uint64_t type metadata accessor for VirtualEventService()
{
  uint64_t result = qword_1002AD100;
  if (!qword_1002AD100) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001D9924@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_properties);
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = result;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_10016DB60(v7, a2);
    if (v9)
    {
      sub_100099C1C(*(void *)(v5 + 56) + 32 * v8, (uint64_t)a3);
    }
    else
    {
      *a3 = 0u;
      a3[1] = 0u;
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1001D9D34()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001D9DE8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd19VirtualEventService_logger, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    char v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)char v9 = 136315138;
    uint64_t v14 = v10;
    if (a1 == 10) {
      uint64_t v11 = 0x746172656D756E65;
    }
    else {
      uint64_t v11 = 0x74616E696D726574;
    }
    uint64_t v13 = sub_1000993AC(v11, 0xEA00000000006465, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "notification:, %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001DA008()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001DA040()
{
  return sub_1001D955C(*(void *)(v0 + 16));
}

uint64_t sub_1001DA048(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001DA058()
{
  return swift_release();
}

uint64_t sub_1001DA060()
{
  swift_beginAccess();
  id v1 = v0[5];
  if (v1) {
    [v1 invalidate];
  }

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PairingUIServiceAlert()
{
  return self;
}

id sub_1001DA0F8()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for BTLink()) init];
  qword_1002B17A0 = (uint64_t)result;
  return result;
}

char *sub_1001DA12C()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v29 = *(void *)(v1 - 8);
  uint64_t v30 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = v0;
  Logger.init(subsystem:category:)();
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager] = 0;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions] = _swiftEmptyArrayStorage;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd6BTLink_device] = 0;
  v6[OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode] = 0;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan] = 0;
  uint64_t v7 = &v6[OBJC_IVAR____TtC14dockaccessoryd6BTLink_filter];
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((void *)v7 + 4) = 0;
  os_log_type_t v8 = &v6[OBJC_IVAR____TtC14dockaccessoryd6BTLink_match];
  *os_log_type_t v8 = 0;
  v8[1] = 0;
  v6[OBJC_IVAR____TtC14dockaccessoryd6BTLink_shouldScan] = 0;
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_connectionTxn;
  type metadata accessor for Transaction();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 24) = 0;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 16) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v10 + 80) = 0;
  *(unsigned char *)(v10 + 88) = 1;
  Logger.init(subsystem:category:)();
  *(void *)(v10 + 64) = 0xD000000000000026;
  *(void *)(v10 + 72) = 0x800000010023A730;
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0x402E000000000000;
  swift_unknownObjectWeakAssign();
  *(void *)&v6[v9] = v10;
  v6[OBJC_IVAR____TtC14dockaccessoryd6BTLink_enableOnPowerOn] = 0;
  uint64_t v11 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue;
  sub_1000B8610();
  static DispatchQoS.unspecified.getter();
  *(void *)&v31[0] = _swiftEmptyArrayStorage;
  sub_100106BF0((unint64_t *)&qword_1002A8530, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000992E8(&qword_1002A9000);
  sub_1000B9AB4((unint64_t *)&qword_1002A8540, &qword_1002A9000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v29 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v30);
  *(void *)&v6[v11] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v12 = &v6[OBJC_IVAR____TtC14dockaccessoryd6BTLink_delegate];
  *((void *)v12 + 4) = 0;
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
  sub_1000992E8((uint64_t *)&unk_1002A87B0);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(void *)&v6[v13] = v14;
  uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices;
  *(void *)&v6[v15] = sub_1001EB5A8((uint64_t)_swiftEmptyArrayStorage);

  id v16 = (objc_class *)type metadata accessor for BTLink();
  v33.receiver = v6;
  v33.super_class = v16;
  id v17 = (char *)[super init];
  uint64_t v18 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue;
  uint64_t v19 = *(void *)&v17[OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue];
  id v20 = objc_allocWithZone((Class)CBCentralManager);
  uint64_t v21 = v17;
  id v22 = [v20 initWithDelegate:v21 queue:v19];
  uint64_t v23 = *(void **)&v17[v18];
  type metadata accessor for BTScanEngine();
  memset(v31, 0, sizeof(v31));
  uint64_t v32 = 0;
  swift_allocObject();
  id v24 = v22;
  id v25 = v23;
  uint64_t v26 = sub_1000F5578(v24, v25, (uint64_t)v31);

  *(void *)&v21[OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan] = v26;
  swift_release();
  id v27 = *(void **)&v21[OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager];
  *(void *)&v21[OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager] = v24;

  *(void *)(*(void *)&v21[OBJC_IVAR____TtC14dockaccessoryd6BTLink_connectionTxn] + 48) = &off_10027A610;
  swift_unknownObjectWeakAssign();
  return v21;
}

uint64_t sub_1001DA690(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v18[0] - 8);
  __chkstk_darwin(v18[0]);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue];
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v2;
  uint64_t v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1001E0C70;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001468DC;
  aBlock[3] = &unk_10027A6A0;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v12;
  id v16 = v2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v18[1] = &_swiftEmptyArrayStorage;
  sub_100106BF0((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, void))(v9 + 8))(v11, v18[0]);
  return swift_release();
}

void sub_1001DA958(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager;
  uint64_t v7 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager);
  if (v7 && [v7 state] == (id)5)
  {
    os_log_type_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Central already powered on, performing action immediately.", v10, 2u);
      swift_slowDealloc();
    }

    uint64_t v11 = *(void **)(a1 + v6);
    if (v11)
    {
      id v22 = v11;
      a2();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Queueing power on action...", v14, 2u);
      swift_slowDealloc();
    }

    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a2;
    *(void *)(v15 + 24) = a3;
    id v16 = (char **)(a1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_powerOnActions);
    swift_beginAccess();
    id v17 = *v16;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *id v16 = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      id v17 = sub_100102B38(0, *((void *)v17 + 2) + 1, 1, v17);
      *id v16 = v17;
    }
    unint64_t v20 = *((void *)v17 + 2);
    unint64_t v19 = *((void *)v17 + 3);
    if (v20 >= v19 >> 1)
    {
      id v17 = sub_100102B38((char *)(v19 > 1), v20 + 1, 1, v17);
      *id v16 = v17;
    }
    *((void *)v17 + 2) = v20 + 1;
    uint64_t v21 = &v17[16 * v20];
    *((void *)v21 + 4) = sub_1001E0CB4;
    *((void *)v21 + 5) = v15;
    swift_endAccess();
  }
}

uint64_t sub_1001DABDC(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue];
  os_log_type_t v13 = (void *)swift_allocObject();
  v13[2] = v2;
  uint64_t v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1001E0BF8;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001468DC;
  aBlock[3] = &unk_10027A650;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v12;
  id v16 = v2;
  id v17 = a2;
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_100106BF0((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, void))(v9 + 8))(v11, v19[0]);
  return swift_release();
}

uint64_t sub_1001DAEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1000992E8(&qword_1002AD2A0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
  uint64_t v12 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  swift_release();
  sub_1000E9F88(a3, (uint64_t)v10);
  uint64_t v13 = type metadata accessor for BTDiscoveredDevice();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 0, 1, v13);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_1001E0DC8((uint64_t)v10, a1, a2);
  swift_endAccess();
  uint64_t v14 = *(os_unfair_lock_s **)(v4 + v11);
  swift_retain();
  os_unfair_lock_unlock(v14 + 4);
  return swift_release();
}

uint64_t sub_1001DB00C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000992E8(&qword_1002AD2A0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
  uint64_t v10 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_release();
  swift_beginAccess();
  sub_1001ED4D8(a1, a2, (uint64_t)v8);
  sub_1000A61E4((uint64_t)v8, &qword_1002AD2A0);
  swift_endAccess();
  uint64_t v11 = *(os_unfair_lock_s **)(v3 + v9);
  swift_retain();
  os_unfair_lock_unlock(v11 + 4);
  return swift_release();
}

void *sub_1001DB130()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
  uint64_t v3 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices);
  swift_beginAccess();
  uint64_t v5 = *v4;
  swift_bridgeObjectRetain_n();
  uint64_t v6 = sub_1001F9824(v5);
  swift_bridgeObjectRelease();
  uint64_t v13 = v6;
  sub_1001DD294(&v13);
  swift_bridgeObjectRelease();
  uint64_t v7 = sub_1001DB2B0((uint64_t)v13);
  swift_release();
  if (v7[2])
  {
    sub_1000992E8(&qword_1002ACC50);
    uint64_t v8 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v13 = v8;
  uint64_t v9 = swift_bridgeObjectRetain();
  sub_1001E0498(v9, 1, &v13);
  swift_bridgeObjectRelease();
  uint64_t v10 = v13;
  uint64_t v11 = *(os_unfair_lock_s **)(v1 + v2);
  swift_retain();
  os_unfair_lock_unlock(v11 + 4);
  swift_release();
  return v10;
}

void *sub_1001DB2B0(uint64_t a1)
{
  uint64_t v16 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v2 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000992E8(&qword_1002AD480);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (v9)
  {
    id v17 = _swiftEmptyArrayStorage;
    sub_1001DC5A4(0, v9, 0);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v12 = *(void *)(v2 + 72);
    uint64_t v10 = v17;
    do
    {
      sub_1000B9BD4(v11, (uint64_t)v4, (uint64_t *)&unk_1002AA6B0);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1001DC5A4(0, v10[2] + 1, 1);
        uint64_t v10 = v17;
      }
      unint64_t v14 = v10[2];
      unint64_t v13 = v10[3];
      if (v14 >= v13 >> 1)
      {
        sub_1001DC5A4(v13 > 1, v14 + 1, 1);
        uint64_t v10 = v17;
      }
      void v10[2] = v14 + 1;
      sub_1000EA2DC((uint64_t)v8, (uint64_t)v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v14, &qword_1002AD480);
      v11 += v12;
      --v9;
    }
    while (v9);
  }
  return v10;
}

void *sub_1001DB4F4()
{
  uint64_t v1 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  uint64_t v3 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices);
  swift_beginAccess();
  uint64_t v4 = *v3;
  swift_bridgeObjectRetain_n();
  uint64_t v5 = sub_1001F95E8(v4);
  swift_bridgeObjectRelease();
  int64_t v9 = v5;
  sub_1001DD1EC(&v9);
  swift_bridgeObjectRelease();
  uint64_t v6 = v9;
  uint64_t v7 = *(os_unfair_lock_s **)(v0 + v1);
  swift_retain();
  os_unfair_lock_unlock(v7 + 4);
  swift_release();
  return v6;
}

void sub_1001DB5DC(NSObject *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v12 = a4;
    swift_errorRetain();
    unint64_t v13 = v12;
    swift_errorRetain();
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      uint64_t v17 = sub_10013D3A0();
      uint64_t v44 = sub_1000993AC(v17, v18, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v19 = Error.localizedDescription.getter();
      uint64_t v44 = sub_1000993AC(v19, v20, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to connect to %s: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    return;
  }
  uint64_t v21 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral;
  if (*(void *)&a4[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    id v22 = *(void **)(a3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device);
    *(void *)(a3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device) = a4;
    uint64_t v23 = a4;

    *(unsigned char *)(a3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) = 2;
    swift_retain();
    sub_100105BB4();
    swift_release();
    id v24 = v23;
    id v25 = Logger.logObject.getter();
    int v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      int v42 = v26;
      uint64_t v43 = a1;
      id v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v45 = v41;
      *(_DWORD *)id v27 = 136315138;
      uint64_t v28 = *(void **)&a4[v21];
      if (!v28) {
        goto LABEL_21;
      }
      id v29 = [v28 identifier:v27 + 4, v41];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v30 = UUID.uuidString.getter();
      unint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v44 = sub_1000993AC(v30, v32, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v42, "Connecting peripheral %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a1 = v43;
    }
    else
    {
    }
    uint64_t v38 = *(void *)&a4[v21];
    if (v38)
    {
      [a1 connectPeripheral:v38 options:0];
      return;
    }
    __break(1u);
LABEL_21:

    __break(1u);
    return;
  }
  objc_super v33 = a4;
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315138;
    uint64_t v36 = sub_10013D3A0();
    uint64_t v44 = sub_1000993AC(v36, v37, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v43, v34, "Unable to connect to %s: Peripheral is nil", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v39 = v43;
  }
}

void sub_1001DBBE4(void *a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v12 = a4;
    swift_errorRetain();
    unint64_t v13 = v12;
    swift_errorRetain();
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      if (a4)
      {
        uint64_t v17 = sub_10013D3A0();
        unint64_t v19 = v18;
      }
      else
      {
        unint64_t v19 = 0xE600000000000000;
        uint64_t v17 = 0x656369766564;
      }
      uint64_t v40 = sub_1000993AC(v17, v19, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v36 = Error.localizedDescription.getter();
      uint64_t v40 = sub_1000993AC(v36, v37, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to disconnect %s: %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    return;
  }
  int v42 = a4;
  unint64_t v20 = a4;
  if (!a4)
  {
    unint64_t v20 = *(char **)(a3 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device);
    int v42 = v20;
    if (!v20) {
      goto LABEL_16;
    }
    uint64_t v21 = v20;
  }
  if (*(void *)&v20[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    id v22 = a4;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)id v25 = 136315138;
      swift_beginAccess();
      int v26 = v42;
      if (!v42)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      id v27 = *(void **)&v42[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
      if (!v27)
      {
LABEL_29:

        __break(1u);
        return;
      }
      v39[1] = v25 + 4;
      id v28 = [v27 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v29 = UUID.uuidString.getter();
      unint64_t v31 = v30;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v39[6] = sub_1000993AC(v29, v31, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Disconnecting peripheral %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    swift_beginAccess();
    uint64_t v38 = v42;
    if (v42)
    {
      int v26 = (void *)OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral;
      if (*(void *)&v42[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
      {
        [a1 cancelPeripheralConnection:];

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
LABEL_16:
  unint64_t v32 = a4;
  objc_super v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unable to disconnect: Invalid BT peripheral", v35, 2u);
    swift_slowDealloc();
  }
}

id sub_1001DC130()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BTLink();
  return [super dealloc];
}

uint64_t sub_1001DC29C()
{
  return type metadata accessor for BTLink();
}

uint64_t type metadata accessor for BTLink()
{
  uint64_t result = qword_1002AD270;
  if (!qword_1002AD270) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001DC2F0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BTLink.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001DC4B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BTLink.Mode()
{
  return &type metadata for BTLink.Mode;
}

unint64_t sub_1001DC4EC()
{
  unint64_t result = qword_1002AD280;
  if (!qword_1002AD280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002AD280);
  }
  return result;
}

uint64_t sub_1001DC544(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DC650(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1001DC564(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DC7B0(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1001DC584(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DC910(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1001DC5A4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DCA7C(a1, a2, a3, (void *)*v3, &qword_1002AD290, &qword_1002AD480);
  *int v3 = result;
  return result;
}

uint64_t sub_1001DC5D4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DCCBC(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1001DC5F4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DCE44(a1, a2, a3, *v3);
  *int v3 = (char *)result;
  return result;
}

uint64_t sub_1001DC614(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1001DCFA4(a1, a2, a3, (void *)*v3, &qword_1002AD2A8, (uint64_t (*)(void))&type metadata accessor for DockKitBoundingBox);
  *int v3 = result;
  return result;
}

uint64_t sub_1001DC650(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000992E8(&qword_1002AD5F0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DC7B0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000992E8(&qword_1002A98A0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DC910(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000992E8((uint64_t *)&unk_1002AA6C0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DCA7C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000992E8(a5);
  uint64_t v13 = *(void *)(sub_1000992E8(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_1000992E8(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  id v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  os_log_type_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DCCBC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000992E8(&qword_1002A98C0);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DCE44(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000992E8(&qword_1002A98B8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DCFA4(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_1000992E8(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  id v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  os_log_type_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1001DD1EC(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BTDiscoveredDevice() - 8);
  int v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = (void *)sub_1001E099C(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1001DD340(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1001DD294(void **a1)
{
  uint64_t v2 = *(void *)(sub_1000992E8((uint64_t *)&unk_1002AA6B0) - 8);
  int v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    int v3 = (void *)sub_1001E09E0(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1001DDD4C(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1001DD340(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v144 = type metadata accessor for BTDiscoveredDevice();
  uint64_t v137 = *(void *)(v144 - 8);
  uint64_t v4 = __chkstk_darwin(v144);
  uint64_t v134 = (uint64_t)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v145 = (uint64_t)&v129 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v141 = (uint64_t)&v129 - v9;
  __chkstk_darwin(v8);
  uint64_t v140 = (uint64_t)&v129 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_139;
    }
    if (v11) {
      return sub_1001DEC5C(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_147;
  }
  Swift::Int v132 = result;
  if (v11 < 2)
  {
    size_t v17 = (char *)&_swiftEmptyArrayStorage;
    unint64_t v136 = (unint64_t)&_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80));
    int v131 = &_swiftEmptyArrayStorage;
    if (v11 != 1)
    {
      unint64_t v19 = *((void *)&_swiftEmptyArrayStorage + 2);
LABEL_105:
      if (v19 >= 2)
      {
        uint64_t v121 = *a1;
        do
        {
          unint64_t v122 = v19 - 2;
          if (v19 < 2) {
            goto LABEL_134;
          }
          if (!v121) {
            goto LABEL_146;
          }
          uint64_t v123 = v17;
          unint64_t v124 = v17 + 32;
          uint64_t v125 = *(void *)&v17[16 * v122 + 32];
          uint64_t v126 = *(void *)&v17[16 * v19 + 24];
          sub_1001DF36C(v121 + *(void *)(v137 + 72) * v125, v121 + *(void *)(v137 + 72) * *(void *)&v124[16 * v19 - 16], v121 + *(void *)(v137 + 72) * v126, v136);
          if (v2) {
            break;
          }
          if (v126 < v125) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v123 = sub_1001E0484((uint64_t)v123);
          }
          if (v122 >= *((void *)v123 + 2)) {
            goto LABEL_136;
          }
          unint64_t v127 = &v123[16 * v122 + 32];
          *(void *)unint64_t v127 = v125;
          *((void *)v127 + 1) = v126;
          unint64_t v128 = *((void *)v123 + 2);
          if (v19 > v128) {
            goto LABEL_137;
          }
          size_t v17 = v123;
          memmove(&v123[16 * v19 + 16], &v123[16 * v19 + 32], 16 * (v128 - v19));
          *((void *)v123 + 2) = v128 - 1;
          unint64_t v19 = v128 - 1;
        }
        while (v128 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      v131[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v137 + 80);
    int v131 = (void *)v15;
    unint64_t v136 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  size_t v17 = (char *)&_swiftEmptyArrayStorage;
  v142 = a1;
  while (1)
  {
    Swift::Int v20 = v18;
    Swift::Int v21 = v18 + 1;
    Swift::Int v135 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v32 = v18 + 1;
    }
    else
    {
      uint64_t v138 = *a1;
      uint64_t v22 = v138;
      Swift::Int v23 = *(void *)(v137 + 72);
      uint64_t v24 = v140;
      sub_1000E9F88(v138 + v23 * v21, v140);
      uint64_t v25 = v141;
      sub_1000E9F88(v22 + v23 * v20, v141);
      Swift::Int v139 = v11;
      Date.timeIntervalSince1970.getter();
      double v27 = v26;
      Swift::Int v11 = v139;
      Date.timeIntervalSince1970.getter();
      double v29 = v28;
      sub_1000E9FEC(v25);
      uint64_t v30 = v24;
      uint64_t v31 = v138;
      sub_1000E9FEC(v30);
      Swift::Int v32 = v20 + 2;
      Swift::Int v146 = v23;
      if (v20 + 2 >= v11)
      {
        a1 = v142;
        Swift::Int v41 = v23;
        if (v29 >= v27) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v130 = v2;
        Swift::Int v143 = v23 * v21;
        Swift::Int v33 = v23 * v32;
        while (1)
        {
          Swift::Int v34 = v32;
          uint64_t v35 = v140;
          sub_1000E9F88(v31 + v33, v140);
          uint64_t v36 = v141;
          sub_1000E9F88(v31 + v143, v141);
          Date.timeIntervalSince1970.getter();
          double v38 = v37;
          Date.timeIntervalSince1970.getter();
          BOOL v40 = v39 >= v38;
          sub_1000E9FEC(v36);
          sub_1000E9FEC(v35);
          if (v29 < v27 == v40) {
            break;
          }
          ++v32;
          Swift::Int v41 = v146;
          v31 += v146;
          if (v139 == v34 + 1)
          {
            Swift::Int v11 = v139;
            Swift::Int v32 = v139;
            a1 = v142;
            uint64_t v2 = v130;
            Swift::Int v20 = v135;
            if (v29 < v27) {
              goto LABEL_26;
            }
            goto LABEL_39;
          }
        }
        a1 = v142;
        uint64_t v2 = v130;
        Swift::Int v20 = v135;
        Swift::Int v11 = v139;
        Swift::Int v41 = v146;
        if (v29 >= v27) {
          goto LABEL_39;
        }
      }
LABEL_26:
      if (v32 < v20) {
        goto LABEL_140;
      }
      if (v20 < v32)
      {
        uint64_t v129 = v17;
        uint64_t v42 = 0;
        uint64_t v43 = v41 * (v32 - 1);
        Swift::Int v44 = v32 * v41;
        uint64_t v45 = v20 * v41;
        Swift::Int v143 = v32;
        do
        {
          if (v20 != v32 + v42 - 1)
          {
            uint64_t v46 = v138;
            if (!v138) {
              goto LABEL_145;
            }
            unint64_t v47 = v138 + v45;
            uint64_t v48 = v138 + v43;
            sub_1001D5FB4(v138 + v45, v134);
            if (v45 < v43 || v47 >= v46 + v44)
            {
              swift_arrayInitWithTakeFrontToBack();
              Swift::Int v41 = v146;
            }
            else
            {
              Swift::Int v41 = v146;
              if (v45 != v43) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            sub_1001D5FB4(v134, v48);
            a1 = v142;
            Swift::Int v32 = v143;
          }
          ++v20;
          --v42;
          v43 -= v41;
          v44 -= v41;
          v45 += v41;
        }
        while (v20 < v32 + v42);
        size_t v17 = v129;
        Swift::Int v20 = v135;
        Swift::Int v11 = v139;
      }
    }
LABEL_39:
    if (v32 >= v11) {
      goto LABEL_57;
    }
    if (__OFSUB__(v32, v20)) {
      goto LABEL_138;
    }
    if (v32 - v20 >= v132) {
      goto LABEL_57;
    }
    if (__OFADD__(v20, v132)) {
      goto LABEL_141;
    }
    Swift::Int v49 = v20 + v132 >= v11 ? v11 : v20 + v132;
    if (v49 < v20) {
      break;
    }
    if (v32 != v49)
    {
      uint64_t v129 = v17;
      uint64_t v130 = v2;
      uint64_t v50 = *(void *)(v137 + 72);
      uint64_t v51 = v50 * (v32 - 1);
      uint64_t v138 = v50;
      Swift::Int v52 = v32 * v50;
      Swift::Int v133 = v49;
      do
      {
        uint64_t v54 = 0;
        Swift::Int v143 = v32;
        Swift::Int v139 = v52;
        while (1)
        {
          Swift::Int v146 = v20;
          uint64_t v55 = *a1;
          uint64_t v56 = v52 + v54 + *a1;
          uint64_t v57 = v140;
          sub_1000E9F88(v56, v140);
          uint64_t v58 = v51;
          uint64_t v59 = v51 + v54 + v55;
          uint64_t v60 = a1;
          uint64_t v61 = v141;
          sub_1000E9F88(v59, v141);
          Date.timeIntervalSince1970.getter();
          double v63 = v62;
          Date.timeIntervalSince1970.getter();
          double v65 = v64;
          sub_1000E9FEC(v61);
          sub_1000E9FEC(v57);
          if (v65 >= v63) {
            break;
          }
          uint64_t v66 = *v60;
          if (!*v60) {
            goto LABEL_143;
          }
          Swift::Int v52 = v139;
          uint64_t v51 = v58;
          uint64_t v67 = v66 + v58 + v54;
          sub_1001D5FB4(v66 + v139 + v54, v145);
          swift_arrayInitWithTakeFrontToBack();
          sub_1001D5FB4(v145, v67);
          v54 -= v138;
          Swift::Int v20 = v146 + 1;
          a1 = v142;
          Swift::Int v53 = v143;
          if (v143 == v146 + 1) {
            goto LABEL_50;
          }
        }
        Swift::Int v53 = v143;
        a1 = v60;
        uint64_t v51 = v58;
        Swift::Int v52 = v139;
LABEL_50:
        Swift::Int v32 = v53 + 1;
        v51 += v138;
        v52 += v138;
        Swift::Int v20 = v135;
      }
      while (v32 != v133);
      Swift::Int v32 = v133;
      size_t v17 = v129;
      uint64_t v2 = v130;
    }
LABEL_57:
    if (v32 < v20) {
      goto LABEL_133;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v143 = v32;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      size_t v17 = sub_1001E0044(0, *((void *)v17 + 2) + 1, 1, v17);
    }
    unint64_t v70 = *((void *)v17 + 2);
    unint64_t v69 = *((void *)v17 + 3);
    unint64_t v19 = v70 + 1;
    if (v70 >= v69 >> 1) {
      size_t v17 = sub_1001E0044((char *)(v69 > 1), v70 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v19;
    uint64_t v71 = v17 + 32;
    uint64_t v72 = &v17[16 * v70 + 32];
    Swift::Int v73 = v143;
    *(void *)uint64_t v72 = v20;
    *((void *)v72 + 1) = v73;
    if (v70)
    {
      while (1)
      {
        unint64_t v74 = v19 - 1;
        if (v19 >= 4)
        {
          uint64_t v79 = &v71[16 * v19];
          uint64_t v80 = *((void *)v79 - 8);
          uint64_t v81 = *((void *)v79 - 7);
          BOOL v85 = __OFSUB__(v81, v80);
          uint64_t v82 = v81 - v80;
          if (v85) {
            goto LABEL_122;
          }
          uint64_t v84 = *((void *)v79 - 6);
          uint64_t v83 = *((void *)v79 - 5);
          BOOL v85 = __OFSUB__(v83, v84);
          uint64_t v77 = v83 - v84;
          char v78 = v85;
          if (v85) {
            goto LABEL_123;
          }
          unint64_t v86 = v19 - 2;
          uint64_t v87 = &v71[16 * v19 - 32];
          uint64_t v89 = *(void *)v87;
          uint64_t v88 = *((void *)v87 + 1);
          BOOL v85 = __OFSUB__(v88, v89);
          uint64_t v90 = v88 - v89;
          if (v85) {
            goto LABEL_125;
          }
          BOOL v85 = __OFADD__(v77, v90);
          uint64_t v91 = v77 + v90;
          if (v85) {
            goto LABEL_128;
          }
          if (v91 >= v82)
          {
            Swift::Int v109 = &v71[16 * v74];
            uint64_t v111 = *(void *)v109;
            uint64_t v110 = *((void *)v109 + 1);
            BOOL v85 = __OFSUB__(v110, v111);
            uint64_t v112 = v110 - v111;
            if (v85) {
              goto LABEL_132;
            }
            BOOL v102 = v77 < v112;
            goto LABEL_94;
          }
        }
        else
        {
          if (v19 != 3)
          {
            uint64_t v103 = *((void *)v17 + 4);
            uint64_t v104 = *((void *)v17 + 5);
            BOOL v85 = __OFSUB__(v104, v103);
            uint64_t v96 = v104 - v103;
            char v97 = v85;
            goto LABEL_88;
          }
          uint64_t v76 = *((void *)v17 + 4);
          uint64_t v75 = *((void *)v17 + 5);
          BOOL v85 = __OFSUB__(v75, v76);
          uint64_t v77 = v75 - v76;
          char v78 = v85;
        }
        if (v78) {
          goto LABEL_124;
        }
        unint64_t v86 = v19 - 2;
        uint64_t v92 = &v71[16 * v19 - 32];
        uint64_t v94 = *(void *)v92;
        uint64_t v93 = *((void *)v92 + 1);
        BOOL v95 = __OFSUB__(v93, v94);
        uint64_t v96 = v93 - v94;
        char v97 = v95;
        if (v95) {
          goto LABEL_127;
        }
        uint64_t v98 = &v71[16 * v74];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        BOOL v85 = __OFSUB__(v99, v100);
        uint64_t v101 = v99 - v100;
        if (v85) {
          goto LABEL_130;
        }
        if (__OFADD__(v96, v101)) {
          goto LABEL_131;
        }
        if (v96 + v101 >= v77)
        {
          BOOL v102 = v77 < v101;
LABEL_94:
          if (v102) {
            unint64_t v74 = v86;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v97) {
          goto LABEL_126;
        }
        uint64_t v105 = &v71[16 * v74];
        uint64_t v107 = *(void *)v105;
        uint64_t v106 = *((void *)v105 + 1);
        BOOL v85 = __OFSUB__(v106, v107);
        uint64_t v108 = v106 - v107;
        if (v85) {
          goto LABEL_129;
        }
        if (v108 < v96) {
          goto LABEL_14;
        }
LABEL_96:
        unint64_t v113 = v74 - 1;
        if (v74 - 1 >= v19)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        uint64_t v114 = *a1;
        if (!*a1) {
          goto LABEL_144;
        }
        uint64_t v115 = v17;
        uint64_t v116 = &v71[16 * v113];
        uint64_t v117 = *(void *)v116;
        id v118 = &v71[16 * v74];
        uint64_t v119 = *((void *)v118 + 1);
        sub_1001DF36C(v114 + *(void *)(v137 + 72) * *(void *)v116, v114 + *(void *)(v137 + 72) * *(void *)v118, v114 + *(void *)(v137 + 72) * v119, v136);
        if (v2) {
          goto LABEL_116;
        }
        if (v119 < v117) {
          goto LABEL_119;
        }
        if (v74 > *((void *)v115 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v116 = v117;
        *(void *)&v71[16 * v113 + 8] = v119;
        unint64_t v120 = *((void *)v115 + 2);
        if (v74 >= v120) {
          goto LABEL_121;
        }
        size_t v17 = v115;
        unint64_t v19 = v120 - 1;
        memmove(&v71[16 * v74], v118 + 16, 16 * (v120 - 1 - v74));
        *((void *)v115 + 2) = v120 - 1;
        a1 = v142;
        if (v120 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v19 = 1;
LABEL_14:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v143;
    if (v143 >= v11) {
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1001DDD4C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v191 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v191 - 8);
  uint64_t v5 = __chkstk_darwin(v191);
  v190 = (char *)&v173 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v189 = (char *)&v173 - v7;
  uint64_t v204 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v183 = *(void *)(v204 - 8);
  uint64_t v8 = __chkstk_darwin(v204);
  uint64_t v179 = (uint64_t)&v173 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v197 = (uint64_t)&v173 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v188 = (uint64_t *)((char *)&v173 - v13);
  uint64_t v14 = __chkstk_darwin(v12);
  v187 = (uint64_t *)((char *)&v173 - v15);
  uint64_t v16 = __chkstk_darwin(v14);
  v193 = (uint64_t *)((char *)&v173 - v17);
  __chkstk_darwin(v16);
  v192 = (uint64_t *)((char *)&v173 - v18);
  Swift::Int v19 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v19);
  if (result >= v19)
  {
    if (v19 < 0) {
      goto LABEL_137;
    }
    if (v19) {
      return sub_1001DEED4(0, v19, 1, a1);
    }
    return result;
  }
  if (v19 >= 0) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v19 + 1;
  }
  if (v19 < -1) {
    goto LABEL_145;
  }
  Swift::Int v176 = result;
  if (v19 < 2)
  {
    uint64_t v25 = (char *)_swiftEmptyArrayStorage;
    unint64_t v181 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v183 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80));
    v174 = _swiftEmptyArrayStorage;
    if (v19 != 1)
    {
      unint64_t v27 = _swiftEmptyArrayStorage[2];
LABEL_103:
      if (v27 >= 2)
      {
        uint64_t v167 = *a1;
        do
        {
          unint64_t v168 = v27 - 2;
          if (v27 < 2) {
            goto LABEL_132;
          }
          if (!v167) {
            goto LABEL_144;
          }
          uint64_t v169 = *(void *)&v25[16 * v168 + 32];
          uint64_t v170 = *(void *)&v25[16 * v27 + 24];
          sub_1001DF830(v167 + *(void *)(v183 + 72) * v169, v167 + *(void *)(v183 + 72) * *(void *)&v25[16 * v27 + 16], (char *)(v167 + *(void *)(v183 + 72) * v170), v181);
          if (v2) {
            break;
          }
          if (v170 < v169) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v25 = sub_1001E0484((uint64_t)v25);
          }
          if (v168 >= *((void *)v25 + 2)) {
            goto LABEL_134;
          }
          v171 = &v25[16 * v168 + 32];
          *(void *)v171 = v169;
          *((void *)v171 + 1) = v170;
          unint64_t v172 = *((void *)v25 + 2);
          if (v27 > v172) {
            goto LABEL_135;
          }
          memmove(&v25[16 * v27 + 16], &v25[16 * v27 + 32], 16 * (v172 - v27));
          *((void *)v25 + 2) = v172 - 1;
          unint64_t v27 = v172 - 1;
        }
        while (v172 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v174[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v22 = v21 >> 1;
    uint64_t v23 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v23 + 16) = v22;
    uint64_t v24 = *(unsigned __int8 *)(v183 + 80);
    v174 = (void *)v23;
    unint64_t v181 = v23 + ((v24 + 32) & ~v24);
  }
  Swift::Int v26 = 0;
  v194 = (void (**)(char *, uint64_t))(v4 + 8);
  v195 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v25 = (char *)_swiftEmptyArrayStorage;
  v182 = a1;
  while (1)
  {
    Swift::Int v28 = v26 + 1;
    if (v26 + 1 >= v19)
    {
      Swift::Int v75 = v26;
      Swift::Int v76 = v176;
    }
    else
    {
      uint64_t v175 = v2;
      uint64_t v29 = *a1;
      uint64_t v184 = v29;
      uint64_t v30 = *(void (**)(char *, uint64_t))(v183 + 72);
      v201 = v30;
      Swift::Int v202 = v26 + 1;
      uint64_t v31 = v192;
      sub_1000B9BD4(v29 + (void)v30 * v28, (uint64_t)v192, (uint64_t *)&unk_1002AA6B0);
      Swift::Int v200 = v19;
      sub_1000B9BD4(v29 + (void)v30 * v26, (uint64_t)v193, (uint64_t *)&unk_1002AA6B0);
      uint64_t v32 = *(int *)(v204 + 48);
      Swift::Int v33 = v187;
      uint64_t v34 = (uint64_t)v187 + v32;
      uint64_t v35 = v31[1];
      void *v187 = *v31;
      v33[1] = v35;
      sub_1000E9F88((uint64_t)v31 + v32, v34);
      uint64_t v36 = type metadata accessor for BTDiscoveredDevice();
      uint64_t v37 = v34 + *(int *)(v36 + 28);
      Swift::Int v180 = v26;
      double v38 = *v195;
      double v39 = v189;
      uint64_t v40 = v191;
      (*v195)(v189, v37, v191);
      sub_1000E9FEC(v34);
      Date.timeIntervalSince1970.getter();
      double v42 = v41;
      uint64_t v43 = *v194;
      (*v194)(v39, v40);
      uint64_t v44 = *(int *)(v204 + 48);
      uint64_t v45 = v188;
      uint64_t v46 = (uint64_t)v188 + v44;
      uint64_t v47 = (uint64_t)v193 + v44;
      uint64_t v48 = v193[1];
      void *v188 = *v193;
      v45[1] = v48;
      sub_1000E9F88(v47, v46);
      uint64_t v203 = v36;
      uint64_t v49 = v46 + *(int *)(v36 + 28);
      uint64_t v50 = v190;
      v199 = v38;
      v38(v190, v49, v40);
      sub_1000E9FEC(v46);
      Date.timeIntervalSince1970.getter();
      double v52 = v51;
      Swift::Int v53 = v50;
      uint64_t v54 = v184;
      v198 = v43;
      v43(v53, v40);
      Swift::Int v19 = v200;
      sub_1000A61E4((uint64_t)v193, (uint64_t *)&unk_1002AA6B0);
      sub_1000A61E4((uint64_t)v192, (uint64_t *)&unk_1002AA6B0);
      Swift::Int v28 = v180 + 2;
      if (v180 + 2 < v19)
      {
        v177 = v25;
        uint64_t v186 = (void)v201 * v202;
        Swift::Int v185 = (void)v201 * v28;
        while (1)
        {
          Swift::Int v196 = v28;
          LODWORD(v202) = v52 < v42;
          uint64_t v55 = v192;
          sub_1000B9BD4(v54 + v185, (uint64_t)v192, (uint64_t *)&unk_1002AA6B0);
          uint64_t v56 = v193;
          sub_1000B9BD4(v54 + v186, (uint64_t)v193, (uint64_t *)&unk_1002AA6B0);
          uint64_t v57 = v204;
          uint64_t v58 = *(int *)(v204 + 48);
          uint64_t v59 = v187;
          uint64_t v60 = (uint64_t)v187 + v58;
          uint64_t v61 = v55[1];
          void *v187 = *v55;
          v59[1] = v61;
          sub_1000E9F88((uint64_t)v55 + v58, v60);
          double v62 = v189;
          uint64_t v63 = v191;
          double v64 = v199;
          v199(v189, v60 + *(int *)(v203 + 28), v191);
          sub_1000E9FEC(v60);
          Date.timeIntervalSince1970.getter();
          double v66 = v65;
          uint64_t v67 = v198;
          v198(v62, v63);
          uint64_t v68 = *(int *)(v57 + 48);
          unint64_t v69 = v188;
          uint64_t v70 = (uint64_t)v188 + v68;
          uint64_t v71 = v56[1];
          void *v188 = *v56;
          v69[1] = v71;
          sub_1000E9F88((uint64_t)v56 + v68, v70);
          uint64_t v72 = v190;
          v64(v190, v70 + *(int *)(v203 + 28), v63);
          sub_1000E9FEC(v70);
          Date.timeIntervalSince1970.getter();
          double v74 = v73;
          v67(v72, v63);
          sub_1000A61E4((uint64_t)v56, (uint64_t *)&unk_1002AA6B0);
          sub_1000A61E4((uint64_t)v55, (uint64_t *)&unk_1002AA6B0);
          if (v202 == v74 >= v66) {
            break;
          }
          Swift::Int v28 = v196 + 1;
          Swift::Int v19 = v200;
          v54 += (uint64_t)v201;
          if (v200 == v196 + 1)
          {
            Swift::Int v28 = v200;
            uint64_t v25 = v177;
            goto LABEL_23;
          }
        }
        uint64_t v25 = v177;
        Swift::Int v28 = v196;
        Swift::Int v19 = v200;
      }
LABEL_23:
      a1 = v182;
      uint64_t v2 = v175;
      Swift::Int v76 = v176;
      Swift::Int v75 = v180;
      if (v52 < v42)
      {
        if (v28 < v180) {
          goto LABEL_138;
        }
        if (v180 < v28)
        {
          uint64_t v77 = 0;
          char v78 = v201;
          uint64_t v79 = (void)v201 * (v28 - 1);
          Swift::Int v80 = v28 * (void)v201;
          Swift::Int v81 = v180;
          uint64_t v82 = v180 * (void)v201;
          v177 = v25;
          do
          {
            if (v81 != v28 + v77 - 1)
            {
              uint64_t v84 = v184;
              if (!v184) {
                goto LABEL_143;
              }
              unint64_t v85 = v184 + v82;
              uint64_t v203 = v184 + v79;
              sub_1000EA2DC(v184 + v82, v179, (uint64_t *)&unk_1002AA6B0);
              if (v82 < v79 || v85 >= v84 + v80)
              {
                uint64_t v83 = v203;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v83 = v203;
                if (v82 != v79) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_1000EA2DC(v179, v83, (uint64_t *)&unk_1002AA6B0);
              uint64_t v25 = v177;
              char v78 = v201;
            }
            ++v81;
            --v77;
            v79 -= (uint64_t)v78;
            v80 -= (uint64_t)v78;
            v82 += (uint64_t)v78;
          }
          while (v81 < v28 + v77);
          a1 = v182;
          Swift::Int v76 = v176;
          Swift::Int v75 = v180;
          Swift::Int v19 = v200;
        }
      }
    }
    if (v28 < v19)
    {
      if (__OFSUB__(v28, v75)) {
        goto LABEL_136;
      }
      if (v28 - v75 < v76) {
        break;
      }
    }
LABEL_55:
    if (v28 < v75) {
      goto LABEL_131;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v196 = v28;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v25 = sub_1001E0044(0, *((void *)v25 + 2) + 1, 1, v25);
    }
    unint64_t v118 = *((void *)v25 + 2);
    unint64_t v117 = *((void *)v25 + 3);
    unint64_t v27 = v118 + 1;
    if (v118 >= v117 >> 1) {
      uint64_t v25 = sub_1001E0044((char *)(v117 > 1), v118 + 1, 1, v25);
    }
    *((void *)v25 + 2) = v27;
    uint64_t v119 = v25 + 32;
    unint64_t v120 = &v25[16 * v118 + 32];
    Swift::Int v121 = v196;
    *(void *)unint64_t v120 = v75;
    *((void *)v120 + 1) = v121;
    if (v118)
    {
      while (1)
      {
        unint64_t v122 = v27 - 1;
        if (v27 >= 4)
        {
          unint64_t v127 = &v119[16 * v27];
          uint64_t v128 = *((void *)v127 - 8);
          uint64_t v129 = *((void *)v127 - 7);
          BOOL v133 = __OFSUB__(v129, v128);
          uint64_t v130 = v129 - v128;
          if (v133) {
            goto LABEL_120;
          }
          uint64_t v132 = *((void *)v127 - 6);
          uint64_t v131 = *((void *)v127 - 5);
          BOOL v133 = __OFSUB__(v131, v132);
          uint64_t v125 = v131 - v132;
          char v126 = v133;
          if (v133) {
            goto LABEL_121;
          }
          unint64_t v134 = v27 - 2;
          Swift::Int v135 = &v119[16 * v27 - 32];
          uint64_t v137 = *(void *)v135;
          uint64_t v136 = *((void *)v135 + 1);
          BOOL v133 = __OFSUB__(v136, v137);
          uint64_t v138 = v136 - v137;
          if (v133) {
            goto LABEL_123;
          }
          BOOL v133 = __OFADD__(v125, v138);
          uint64_t v139 = v125 + v138;
          if (v133) {
            goto LABEL_126;
          }
          if (v139 >= v130)
          {
            v157 = &v119[16 * v122];
            uint64_t v159 = *(void *)v157;
            uint64_t v158 = *((void *)v157 + 1);
            BOOL v133 = __OFSUB__(v158, v159);
            uint64_t v160 = v158 - v159;
            if (v133) {
              goto LABEL_130;
            }
            BOOL v150 = v125 < v160;
            goto LABEL_92;
          }
        }
        else
        {
          if (v27 != 3)
          {
            uint64_t v151 = *((void *)v25 + 4);
            uint64_t v152 = *((void *)v25 + 5);
            BOOL v133 = __OFSUB__(v152, v151);
            uint64_t v144 = v152 - v151;
            char v145 = v133;
            goto LABEL_86;
          }
          uint64_t v124 = *((void *)v25 + 4);
          uint64_t v123 = *((void *)v25 + 5);
          BOOL v133 = __OFSUB__(v123, v124);
          uint64_t v125 = v123 - v124;
          char v126 = v133;
        }
        if (v126) {
          goto LABEL_122;
        }
        unint64_t v134 = v27 - 2;
        uint64_t v140 = &v119[16 * v27 - 32];
        uint64_t v142 = *(void *)v140;
        uint64_t v141 = *((void *)v140 + 1);
        BOOL v143 = __OFSUB__(v141, v142);
        uint64_t v144 = v141 - v142;
        char v145 = v143;
        if (v143) {
          goto LABEL_125;
        }
        Swift::Int v146 = &v119[16 * v122];
        uint64_t v148 = *(void *)v146;
        uint64_t v147 = *((void *)v146 + 1);
        BOOL v133 = __OFSUB__(v147, v148);
        uint64_t v149 = v147 - v148;
        if (v133) {
          goto LABEL_128;
        }
        if (__OFADD__(v144, v149)) {
          goto LABEL_129;
        }
        if (v144 + v149 >= v125)
        {
          BOOL v150 = v125 < v149;
LABEL_92:
          if (v150) {
            unint64_t v122 = v134;
          }
          goto LABEL_94;
        }
LABEL_86:
        if (v145) {
          goto LABEL_124;
        }
        long long v153 = &v119[16 * v122];
        uint64_t v155 = *(void *)v153;
        uint64_t v154 = *((void *)v153 + 1);
        BOOL v133 = __OFSUB__(v154, v155);
        uint64_t v156 = v154 - v155;
        if (v133) {
          goto LABEL_127;
        }
        if (v156 < v144) {
          goto LABEL_14;
        }
LABEL_94:
        unint64_t v161 = v122 - 1;
        if (v122 - 1 >= v27)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!*v182) {
          goto LABEL_142;
        }
        v162 = &v119[16 * v161];
        uint64_t v163 = *(void *)v162;
        v164 = &v119[16 * v122];
        uint64_t v165 = *((void *)v164 + 1);
        sub_1001DF830(*v182 + *(void *)(v183 + 72) * *(void *)v162, *v182 + *(void *)(v183 + 72) * *(void *)v164, (char *)(*v182 + *(void *)(v183 + 72) * v165), v181);
        if (v2) {
          goto LABEL_114;
        }
        if (v165 < v163) {
          goto LABEL_117;
        }
        if (v122 > *((void *)v25 + 2)) {
          goto LABEL_118;
        }
        *(void *)v162 = v163;
        *(void *)&v119[16 * v161 + 8] = v165;
        unint64_t v166 = *((void *)v25 + 2);
        if (v122 >= v166) {
          goto LABEL_119;
        }
        unint64_t v27 = v166 - 1;
        memmove(&v119[16 * v122], v164 + 16, 16 * (v166 - 1 - v122));
        *((void *)v25 + 2) = v166 - 1;
        if (v166 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v27 = 1;
LABEL_14:
    a1 = v182;
    Swift::Int v19 = v182[1];
    Swift::Int v26 = v196;
    if (v196 >= v19) {
      goto LABEL_103;
    }
  }
  if (__OFADD__(v75, v76)) {
    goto LABEL_139;
  }
  if (v75 + v76 >= v19) {
    Swift::Int v86 = v19;
  }
  else {
    Swift::Int v86 = v75 + v76;
  }
  if (v86 >= v75)
  {
    if (v28 != v86)
    {
      Swift::Int v180 = v75;
      v177 = v25;
      uint64_t v175 = v2;
      uint64_t v87 = *(void *)(v183 + 72);
      uint64_t v88 = v87 * (v28 - 1);
      uint64_t v184 = v87;
      Swift::Int v89 = v28 * v87;
      Swift::Int v178 = v86;
      do
      {
        uint64_t v91 = 0;
        Swift::Int v92 = v180;
        Swift::Int v196 = v28;
        uint64_t v186 = v88;
        Swift::Int v185 = v89;
        while (1)
        {
          Swift::Int v200 = v92;
          uint64_t v93 = *a1;
          v199 = (void (*)(char *, uint64_t, uint64_t))(v89 + v91);
          uint64_t v94 = v89 + v91 + v93;
          BOOL v95 = v192;
          sub_1000B9BD4(v94, (uint64_t)v192, (uint64_t *)&unk_1002AA6B0);
          v198 = (void (*)(char *, uint64_t))(v88 + v91);
          uint64_t v96 = v193;
          sub_1000B9BD4(v88 + v91 + v93, (uint64_t)v193, (uint64_t *)&unk_1002AA6B0);
          uint64_t v97 = *(int *)(v204 + 48);
          uint64_t v98 = v187;
          uint64_t v99 = (uint64_t)v187 + v97;
          uint64_t v100 = v95[1];
          void *v187 = *v95;
          v98[1] = v100;
          sub_1000E9F88((uint64_t)v95 + v97, v99);
          uint64_t v101 = type metadata accessor for BTDiscoveredDevice();
          uint64_t v102 = v99 + *(int *)(v101 + 28);
          Swift::Int v202 = (Swift::Int)*v195;
          uint64_t v203 = v101;
          uint64_t v103 = v189;
          uint64_t v104 = v191;
          ((void (*)(char *, uint64_t, uint64_t))v202)(v189, v102, v191);
          sub_1000E9FEC(v99);
          Date.timeIntervalSince1970.getter();
          double v106 = v105;
          v201 = *v194;
          v201(v103, v104);
          uint64_t v107 = *(int *)(v204 + 48);
          uint64_t v108 = v188;
          uint64_t v109 = (uint64_t)v188 + v107;
          uint64_t v110 = v96[1];
          void *v188 = *v96;
          v108[1] = v110;
          sub_1000E9F88((uint64_t)v96 + v107, v109);
          uint64_t v111 = v190;
          ((void (*)(char *, uint64_t, uint64_t))v202)(v190, v109 + *(int *)(v203 + 28), v104);
          sub_1000E9FEC(v109);
          Date.timeIntervalSince1970.getter();
          double v113 = v112;
          v201(v111, v104);
          sub_1000A61E4((uint64_t)v96, (uint64_t *)&unk_1002AA6B0);
          sub_1000A61E4((uint64_t)v95, (uint64_t *)&unk_1002AA6B0);
          if (v113 >= v106) {
            break;
          }
          uint64_t v114 = *a1;
          if (!*a1) {
            goto LABEL_141;
          }
          Swift::Int v89 = v185;
          uint64_t v88 = v186;
          uint64_t v115 = v114 + v186 + v91;
          sub_1000EA2DC(v114 + v185 + v91, v197, (uint64_t *)&unk_1002AA6B0);
          swift_arrayInitWithTakeFrontToBack();
          sub_1000EA2DC(v197, v115, (uint64_t *)&unk_1002AA6B0);
          v91 -= v184;
          Swift::Int v92 = v200 + 1;
          Swift::Int v90 = v196;
          if (v196 == v200 + 1) {
            goto LABEL_48;
          }
        }
        Swift::Int v90 = v196;
        uint64_t v88 = v186;
        Swift::Int v89 = v185;
LABEL_48:
        Swift::Int v28 = v90 + 1;
        v88 += v184;
        v89 += v184;
      }
      while (v28 != v178);
      Swift::Int v28 = v178;
      uint64_t v2 = v175;
      uint64_t v25 = v177;
      Swift::Int v75 = v180;
    }
    goto LABEL_55;
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DEC5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v28 = a1;
  uint64_t v31 = type metadata accessor for BTDiscoveredDevice();
  uint64_t v7 = __chkstk_darwin(v31);
  uint64_t v32 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v26 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v30 = a3;
  uint64_t v27 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v34 = v16 * (v30 - 1);
    uint64_t v29 = v16;
    uint64_t v33 = v16 * v30;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v28;
    while (1)
    {
      uint64_t v19 = *a4;
      sub_1000E9F88(v33 + v17 + *a4, (uint64_t)v15);
      sub_1000E9F88(v34 + v17 + v19, (uint64_t)v11);
      Date.timeIntervalSince1970.getter();
      double v21 = v20;
      Date.timeIntervalSince1970.getter();
      double v23 = v22;
      sub_1000E9FEC((uint64_t)v11);
      uint64_t result = sub_1000E9FEC((uint64_t)v15);
      if (v23 >= v21)
      {
LABEL_4:
        v34 += v29;
        v33 += v29;
        if (++v30 == v27) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v24 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v25 = v24 + v34 + v17;
      sub_1001D5FB4(v24 + v33 + v17, v32);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1001D5FB4(v32, v25);
      v17 -= v29;
      if (v30 == ++v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DEED4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v54 = a1;
  uint64_t v64 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v64 - 8);
  uint64_t v8 = __chkstk_darwin(v64);
  uint64_t v63 = &v52[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  double v62 = &v52[-v10];
  uint64_t v74 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v11 = __chkstk_darwin(v74);
  unint64_t v69 = &v52[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v61 = &v52[-v14];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v60 = &v52[-v16];
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v59 = &v52[-v18];
  uint64_t result = __chkstk_darwin(v17);
  uint64_t v58 = &v52[-v21];
  uint64_t v68 = a3;
  uint64_t v53 = a2;
  if (a3 != a2)
  {
    uint64_t v22 = *(void *)(v20 + 72);
    uint64_t v55 = (void (**)(unsigned char *, uint64_t))(v7 + 8);
    uint64_t v56 = (void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v23 = v22 * (v68 - 1);
    uint64_t v65 = v22;
    uint64_t v24 = v22 * v68;
    uint64_t v57 = a4;
    uint64_t v25 = v58;
LABEL_5:
    uint64_t v26 = 0;
    uint64_t v72 = v54;
    uint64_t v66 = v24;
    uint64_t v67 = v23;
    while (1)
    {
      uint64_t v27 = *a4;
      uint64_t v71 = v24 + v26;
      sub_1000B9BD4(v24 + v26 + v27, (uint64_t)v25, (uint64_t *)&unk_1002AA6B0);
      uint64_t v70 = v23 + v26;
      uint64_t v28 = v23 + v26 + v27;
      uint64_t v29 = v59;
      sub_1000B9BD4(v28, (uint64_t)v59, (uint64_t *)&unk_1002AA6B0);
      uint64_t v30 = *(int *)(v74 + 48);
      uint64_t v31 = v60;
      uint64_t v32 = (uint64_t)v60 + v30;
      uint64_t v33 = v25[1];
      *uint64_t v60 = *v25;
      v31[1] = v33;
      sub_1000E9F88((uint64_t)v25 + v30, v32);
      uint64_t v34 = type metadata accessor for BTDiscoveredDevice();
      uint64_t v35 = v32 + *(int *)(v34 + 28);
      double v73 = *v56;
      uint64_t v36 = v62;
      uint64_t v37 = v64;
      v73(v62, v35, v64);
      sub_1000E9FEC(v32);
      Date.timeIntervalSince1970.getter();
      double v39 = v38;
      uint64_t v40 = *v55;
      (*v55)(v36, v37);
      uint64_t v41 = *(int *)(v74 + 48);
      double v42 = v61;
      uint64_t v43 = (uint64_t)v61 + v41;
      uint64_t v44 = v29[1];
      *uint64_t v61 = *v29;
      v42[1] = v44;
      sub_1000E9F88((uint64_t)v29 + v41, v43);
      uint64_t v45 = v43 + *(int *)(v34 + 28);
      uint64_t v46 = v63;
      v73(v63, v45, v37);
      a4 = v57;
      sub_1000E9FEC(v43);
      Date.timeIntervalSince1970.getter();
      double v48 = v47;
      v40(v46, v37);
      uint64_t v49 = (uint64_t)v29;
      uint64_t v24 = v66;
      uint64_t v23 = v67;
      sub_1000A61E4(v49, (uint64_t *)&unk_1002AA6B0);
      uint64_t result = sub_1000A61E4((uint64_t)v25, (uint64_t *)&unk_1002AA6B0);
      if (v48 >= v39)
      {
LABEL_4:
        v23 += v65;
        v24 += v65;
        if (++v68 == v53) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v50 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v51 = v50 + v23 + v26;
      sub_1000EA2DC(v50 + v24 + v26, (uint64_t)v69, (uint64_t *)&unk_1002AA6B0);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1000EA2DC((uint64_t)v69, v51, (uint64_t *)&unk_1002AA6B0);
      v26 -= v65;
      if (v68 == ++v72) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DF36C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for BTDiscoveredDevice();
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v41 - v11;
  uint64_t v14 = *(void *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_61;
  }
  int64_t v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_62;
  }
  uint64_t v16 = (uint64_t)(a2 - a1) / v14;
  unint64_t v47 = a1;
  unint64_t v46 = a4;
  uint64_t v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      uint64_t v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v29 = a4 + v19;
      unint64_t v45 = a4 + v19;
      unint64_t v47 = a2;
      unint64_t v43 = a1;
      if (v19 >= 1 && a1 < a2)
      {
        uint64_t v31 = -v14;
        unint64_t v42 = a4;
        do
        {
          unint64_t v32 = a3 + v31;
          sub_1000E9F88(v29 + v31, (uint64_t)v12);
          unint64_t v33 = a2 + v31;
          sub_1000E9F88(a2 + v31, (uint64_t)v10);
          Date.timeIntervalSince1970.getter();
          double v35 = v34;
          Date.timeIntervalSince1970.getter();
          double v37 = v36;
          sub_1000E9FEC((uint64_t)v10);
          sub_1000E9FEC((uint64_t)v12);
          if (v37 >= v35)
          {
            unint64_t v39 = v45;
            v45 += v31;
            if (a3 < v39 || v32 >= v39)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v39)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v33 = a2;
            unint64_t v38 = v42;
          }
          else
          {
            if (a3 < a2 || v32 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v38 = v42;
            }
            else
            {
              unint64_t v38 = v42;
              if (a3 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v47 += v31;
          }
          unint64_t v29 = v45;
          if (v45 <= v38) {
            break;
          }
          a2 = v33;
          a3 += v31;
        }
        while (v33 > v43);
      }
      goto LABEL_59;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v20 = a4 + v18;
    unint64_t v45 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      do
      {
        sub_1000E9F88(a2, (uint64_t)v12);
        sub_1000E9F88(a4, (uint64_t)v10);
        Date.timeIntervalSince1970.getter();
        double v23 = v22;
        Date.timeIntervalSince1970.getter();
        double v25 = v24;
        sub_1000E9FEC((uint64_t)v10);
        sub_1000E9FEC((uint64_t)v12);
        unint64_t v26 = v47;
        if (v25 >= v23)
        {
          unint64_t v28 = v46 + v14;
          if (v47 < v46 || v47 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v46 = v28;
          unint64_t v27 = a2;
        }
        else
        {
          unint64_t v27 = a2 + v14;
          if (v47 < a2 || v47 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            unint64_t v26 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        unint64_t v47 = v26 + v14;
        a4 = v46;
        if (v46 >= v20) {
          break;
        }
        a2 = v27;
      }
      while (v27 < a3);
    }
LABEL_59:
    sub_1001E0140(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001DF830(unint64_t a1, unint64_t a2, char *a3, unint64_t a4)
{
  uint64_t v96 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v96 - 8);
  uint64_t v9 = __chkstk_darwin(v96);
  BOOL v95 = &v82[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v94 = &v82[-v11];
  uint64_t v99 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v12 = __chkstk_darwin(v99);
  uint64_t v93 = &v82[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __chkstk_darwin(v12);
  Swift::Int v92 = &v82[-v15];
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v91 = &v82[-v17];
  __chkstk_darwin(v16);
  Swift::Int v90 = &v82[-v18];
  uint64_t v20 = *(void *)(v19 + 72);
  if (!v20)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v20 == -1) {
    goto LABEL_62;
  }
  uint64_t v21 = (uint64_t)&a3[-a2];
  if (&a3[-a2] == (char *)0x8000000000000000 && v20 == -1) {
    goto LABEL_63;
  }
  uint64_t v22 = (uint64_t)(a2 - a1) / v20;
  unint64_t v102 = a1;
  unint64_t v101 = a4;
  uint64_t v23 = v21 / v20;
  if (v22 >= v21 / v20)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      uint64_t v25 = v23 * v20;
      if (a4 < a2 || a2 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v53 = a4 + v25;
      unint64_t v100 = a4 + v25;
      unint64_t v102 = a2;
      if (v25 >= 1 && a1 < a2)
      {
        uint64_t v55 = -v20;
        unint64_t v85 = (char **)(v8 + 8);
        Swift::Int v86 = (void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
        unint64_t v87 = a4;
        unint64_t v83 = a1;
        uint64_t v84 = v55;
        uint64_t v56 = v91;
        do
        {
          unint64_t v97 = (unint64_t)a3;
          unint64_t v98 = a2;
          Swift::Int v89 = &a3[v55];
          uint64_t v57 = v90;
          sub_1000B9BD4(v53 + v55, (uint64_t)v90, (uint64_t *)&unk_1002AA6B0);
          unint64_t v88 = a2 + v55;
          sub_1000B9BD4(a2 + v55, (uint64_t)v56, (uint64_t *)&unk_1002AA6B0);
          uint64_t v58 = *(int *)(v99 + 48);
          uint64_t v59 = v92;
          uint64_t v60 = (uint64_t)v92 + v58;
          uint64_t v61 = v57[1];
          *Swift::Int v92 = *v57;
          v59[1] = v61;
          sub_1000E9F88((uint64_t)v57 + v58, v60);
          uint64_t v62 = type metadata accessor for BTDiscoveredDevice();
          uint64_t v63 = *v86;
          uint64_t v64 = v94;
          uint64_t v65 = v96;
          (*v86)(v94, v60 + *(int *)(v62 + 28), v96);
          sub_1000E9FEC(v60);
          Date.timeIntervalSince1970.getter();
          double v67 = v66;
          uint64_t v68 = *v85;
          ((void (*)(unsigned char *, uint64_t))*v85)(v64, v65);
          uint64_t v69 = *(int *)(v99 + 48);
          uint64_t v70 = v93;
          uint64_t v71 = (uint64_t)v93 + v69;
          uint64_t v72 = v56[1];
          *uint64_t v93 = *v56;
          v70[1] = v72;
          sub_1000E9F88((uint64_t)v56 + v69, v71);
          uint64_t v73 = v71 + *(int *)(v62 + 28);
          uint64_t v74 = v95;
          v63(v95, v73, v65);
          sub_1000E9FEC(v71);
          Date.timeIntervalSince1970.getter();
          double v76 = v75;
          ((void (*)(unsigned char *, uint64_t))v68)(v74, v65);
          sub_1000A61E4((uint64_t)v56, (uint64_t *)&unk_1002AA6B0);
          sub_1000A61E4((uint64_t)v57, (uint64_t *)&unk_1002AA6B0);
          if (v76 >= v67)
          {
            unint64_t v77 = v98;
            unint64_t v80 = v100;
            v100 += v84;
            uint64_t v55 = v84;
            a3 = v89;
            if (v97 < v80 || (unint64_t)v89 >= v80)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v78 = v87;
            }
            else
            {
              unint64_t v78 = v87;
              if (v97 != v80) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            unint64_t v79 = v83;
          }
          else
          {
            uint64_t v55 = v84;
            a3 = v89;
            if (v97 < v98 || (unint64_t)v89 >= v98)
            {
              unint64_t v77 = v88;
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v78 = v87;
              unint64_t v79 = v83;
            }
            else
            {
              unint64_t v78 = v87;
              unint64_t v77 = v88;
              unint64_t v79 = v83;
              if (v97 != v98) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v102 += v55;
          }
          unint64_t v53 = v100;
          if (v100 <= v78) {
            break;
          }
          a2 = v77;
        }
        while (v77 > v79);
      }
      goto LABEL_60;
    }
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t v24 = v22 * v20;
    if (a4 < a1 || a1 + v24 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v88 = a4 + v24;
    unint64_t v100 = a4 + v24;
    if (v24 >= 1 && a2 < (unint64_t)a3)
    {
      uint64_t v84 = v8 + 8;
      unint64_t v85 = (char **)(v8 + 16);
      unint64_t v97 = (unint64_t)a3;
      Swift::Int v86 = (void (**)(unsigned char *, uint64_t, uint64_t))v20;
      unint64_t v27 = v90;
      unint64_t v28 = v91;
      do
      {
        unint64_t v98 = a2;
        sub_1000B9BD4(a2, (uint64_t)v27, (uint64_t *)&unk_1002AA6B0);
        sub_1000B9BD4(a4, (uint64_t)v28, (uint64_t *)&unk_1002AA6B0);
        uint64_t v29 = *(int *)(v99 + 48);
        uint64_t v30 = v92;
        uint64_t v31 = (uint64_t)v92 + v29;
        uint64_t v32 = v27[1];
        *Swift::Int v92 = *v27;
        v30[1] = v32;
        sub_1000E9F88((uint64_t)v27 + v29, v31);
        uint64_t v33 = type metadata accessor for BTDiscoveredDevice();
        uint64_t v34 = v31 + *(int *)(v33 + 28);
        Swift::Int v89 = *v85;
        double v35 = v94;
        uint64_t v36 = v96;
        ((void (*)(unsigned char *, uint64_t, uint64_t))v89)(v94, v34, v96);
        sub_1000E9FEC(v31);
        Date.timeIntervalSince1970.getter();
        double v38 = v37;
        unint64_t v39 = *(void (**)(unsigned char *, uint64_t))v84;
        (*(void (**)(unsigned char *, uint64_t))v84)(v35, v36);
        uint64_t v40 = *(int *)(v99 + 48);
        uint64_t v41 = v93;
        uint64_t v42 = (uint64_t)v93 + v40;
        uint64_t v43 = v28[1];
        *uint64_t v93 = *v28;
        v41[1] = v43;
        sub_1000E9F88((uint64_t)v28 + v40, v42);
        uint64_t v44 = v95;
        ((void (*)(unsigned char *, uint64_t, uint64_t))v89)(v95, v42 + *(int *)(v33 + 28), v36);
        sub_1000E9FEC(v42);
        Date.timeIntervalSince1970.getter();
        double v46 = v45;
        v39(v44, v36);
        sub_1000A61E4((uint64_t)v28, (uint64_t *)&unk_1002AA6B0);
        sub_1000A61E4((uint64_t)v27, (uint64_t *)&unk_1002AA6B0);
        unint64_t v47 = v102;
        if (v46 >= v38)
        {
          unint64_t v51 = v98;
          double v48 = (void (**)(void, void, void))v86;
          unint64_t v52 = (unint64_t)v86 + v101;
          if (v102 < v101 || v102 >= v52)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v50 = v97;
          }
          else
          {
            unint64_t v50 = v97;
            if (v102 != v101) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v101 = v52;
          unint64_t v49 = v51;
        }
        else
        {
          double v48 = (void (**)(void, void, void))v86;
          unint64_t v49 = (unint64_t)v86 + v98;
          if (v102 < v98 || v102 >= v49)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v50 = v97;
          }
          else
          {
            unint64_t v50 = v97;
            if (v102 == v98) {
              unint64_t v47 = v98;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        unint64_t v102 = (unint64_t)v48 + v47;
        a4 = v101;
        if (v101 >= v88) {
          break;
        }
        a2 = v49;
      }
      while (v49 < v50);
    }
LABEL_60:
    sub_1001E0280(&v102, &v101, (uint64_t *)&v100);
    return 1;
  }
LABEL_64:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001E0044(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000992E8(&qword_1002AD288);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001E0140(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for BTDiscoveredDevice();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t sub_1001E0280(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_1001E03C8(void **a1, const void **a2, void *a3)
{
  unint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1001E0484(uint64_t a1)
{
  return sub_1001E0044(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1001E0498(uint64_t a1, char a2, void *a3)
{
  uint64_t v7 = type metadata accessor for BTDiscoveredDevice();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1000992E8(&qword_1002AD480);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v15 = (uint64_t *)((char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v61 = a1;
  uint64_t v62 = v8;
  char v17 = a2;
  uint64_t v59 = v3;
  uint64_t v60 = v16;
  uint64_t v18 = (uint64_t)v15 + *(int *)(v12 + 48);
  unint64_t v58 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v19 = a1 + v58;
  uint64_t v64 = *(void *)(v13 + 72);
  swift_bridgeObjectRetain();
  sub_1000B9BD4(v19, (uint64_t)v15, &qword_1002AD480);
  uint64_t v20 = v15[1];
  uint64_t v67 = *v15;
  uint64_t v21 = v67;
  uint64_t v68 = v20;
  uint64_t v63 = v18;
  sub_1001D5FB4(v18, (uint64_t)v10);
  uint64_t v22 = (void *)*a3;
  unint64_t v24 = sub_10016DB60(v21, v20);
  uint64_t v25 = v22[2];
  BOOL v26 = (v23 & 1) == 0;
  uint64_t v27 = v25 + v26;
  if (__OFADD__(v25, v26)) {
    goto LABEL_23;
  }
  char v28 = v23;
  if (v22[3] >= v27)
  {
    if (v17)
    {
      if (v23) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1001F7BC0();
      if (v28) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v33 = (void *)*a3;
    *(void *)(*a3 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    uint64_t v34 = (uint64_t *)(v33[6] + 16 * v24);
    *uint64_t v34 = v21;
    v34[1] = v20;
    uint64_t v35 = v33[7];
    uint64_t v62 = *(void *)(v62 + 72);
    sub_1001D5FB4((uint64_t)v10, v35 + v62 * v24);
    uint64_t v36 = v33[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (v37)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v33[2] = v38;
    uint64_t v39 = v60 - 1;
    if (v60 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v40 = v61 + v64 + v58;
    while (1)
    {
      sub_1000B9BD4(v40, (uint64_t)v15, &qword_1002AD480);
      uint64_t v42 = v15[1];
      uint64_t v67 = *v15;
      uint64_t v41 = v67;
      uint64_t v68 = v42;
      sub_1001D5FB4(v63, (uint64_t)v10);
      uint64_t v43 = (void *)*a3;
      unint64_t v44 = sub_10016DB60(v41, v42);
      uint64_t v46 = v43[2];
      BOOL v47 = (v45 & 1) == 0;
      BOOL v37 = __OFADD__(v46, v47);
      uint64_t v48 = v46 + v47;
      if (v37) {
        break;
      }
      char v49 = v45;
      if (v43[3] < v48)
      {
        sub_1001F02C8(v48, 1);
        unint64_t v44 = sub_10016DB60(v41, v42);
        if ((v49 & 1) != (v50 & 1)) {
          goto LABEL_25;
        }
      }
      if (v49) {
        goto LABEL_10;
      }
      unint64_t v51 = (void *)*a3;
      *(void *)(*a3 + 8 * (v44 >> 6) + 64) |= 1 << v44;
      unint64_t v52 = (uint64_t *)(v51[6] + 16 * v44);
      uint64_t *v52 = v41;
      v52[1] = v42;
      sub_1001D5FB4((uint64_t)v10, v51[7] + v62 * v44);
      uint64_t v53 = v51[2];
      BOOL v37 = __OFADD__(v53, 1);
      uint64_t v54 = v53 + 1;
      if (v37) {
        goto LABEL_24;
      }
      v51[2] = v54;
      v40 += v64;
      if (!--v39) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1001F02C8(v27, v17 & 1);
  unint64_t v29 = sub_10016DB60(v21, v20);
  if ((v28 & 1) == (v30 & 1))
  {
    unint64_t v24 = v29;
    if ((v28 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v32 = swift_allocError();
    swift_willThrow();
    uint64_t v69 = v32;
    swift_errorRetain();
    sub_1000992E8(&qword_1002A8F70);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_1000E9FEC((uint64_t)v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  uint64_t v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v55._object = (void *)0x800000010023A710;
  v55._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v55);
  _print_unlocked<A, B>(_:_:)();
  v56._countAndFlagsBits = 39;
  v56._object = (void *)0xE100000000000000;
  String.append(_:)(v56);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001E099C(void *a1)
{
  return sub_1001DCFA4(0, a1[2], 0, a1, (uint64_t *)&unk_1002AD470, (uint64_t (*)(void))type metadata accessor for BTDiscoveredDevice);
}

uint64_t sub_1001E09E0(void *a1)
{
  return sub_1001DCA7C(0, a1[2], 0, a1, &qword_1002AD298, (uint64_t *)&unk_1002AA6B0);
}

uint64_t sub_1001E0A18(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void sub_1001E0A2C()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Connection timeout occured!", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_device);
  if (v4 && *(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral))
  {
    [*(id *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager) cancelPeripheralConnection:];
    *(unsigned char *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) = 0;
  }
  else
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "No peripheral to disconnect.", v6, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001E0BB8()
{
  return _swift_deallocObject(v0, 40, 7);
}

id sub_1001E0BF8()
{
  return [*(id *)(v0[2] + OBJC_IVAR____TtC14dockaccessoryd6BTLink_manager) setDesiredConnectionLatency:v0[3] forPeripheral:v0[4]];
}

uint64_t sub_1001E0C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001E0C28()
{
  return swift_release();
}

uint64_t sub_1001E0C30()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1001E0C70()
{
  sub_1001DA958(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1001E0C7C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E0CB4(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_1001E0CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_1000FE5FC((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1001F4170(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000A61E4(a1, &qword_1002AA5F0);
    sub_1001ECD00(a2, a3, v9);
    swift_bridgeObjectRelease();
    return sub_1000A61E4((uint64_t)v9, &qword_1002AA5F0);
  }
}

uint64_t sub_1001E0DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1000992E8(&qword_1002AD2A0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BTDiscoveredDevice();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_1000A61E4(a1, &qword_1002AD2A0);
    sub_1001ED4D8(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return sub_1000A61E4((uint64_t)v10, &qword_1002AD2A0);
  }
  else
  {
    sub_1001D5FB4(a1, (uint64_t)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_1001F4EDC((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

unint64_t sub_1001E0F84(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    sub_1001F533C(a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v13;
  }
  else
  {
    unint64_t result = sub_10016DBD8(a2);
    if ((v8 & 1) == 0) {
      return result;
    }
    unint64_t v9 = result;
    int v10 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v2;
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!v10)
    {
      sub_1001F6DB0();
      uint64_t v11 = v14;
    }
    uint64_t v12 = *(void **)(*(void *)(v11 + 56) + 8 * v9);
    sub_1001F2F28(v9, v11);
    *uint64_t v3 = v11;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E1064(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000992E8((uint64_t *)&unk_1002AD350);
  __chkstk_darwin(v6 - 8);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DockKitIDSInfo();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    sub_1000A61E4(a1, (uint64_t *)&unk_1002AD350);
    sub_1001EDD18(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return sub_1000A61E4((uint64_t)v8, (uint64_t *)&unk_1002AD350);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1001F6034((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    uint64_t v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t sub_1001E1290(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000992E8(&qword_1002AD378);
    uint64_t v2 = (unsigned char *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v28 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v28 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    int64_t v13 = v28 + 1;
    if (!v12)
    {
      int64_t v13 = v28 + 2;
      if (v28 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v28 + 3;
        if (v28 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v28 + 4;
          if (v28 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v28 = v13;
LABEL_28:
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v31[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    *(void *)&v30[0] = v15;
    id v16 = *(id *)&v31[0];
    swift_dynamicCast();
    uint64_t v17 = *(void *)&v31[0];
    sub_1000FE5FC((_OWORD *)((char *)v31 + 8), v29);
    sub_1000FE5FC(v29, v31);
    sub_1000FE5FC(v31, v30);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v19 = -1 << v2[32];
    unint64_t v20 = v18 & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v8 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(void *)(*((void *)v2 + 6) + 8 * v8) = v17;
    uint64_t result = (uint64_t)sub_1000FE5FC(v30, (_OWORD *)(*((void *)v2 + 7) + 32 * v8));
    ++*((void *)v2 + 2);
  }
  int64_t v14 = v28 + 5;
  if (v28 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_1000FE8D4();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v28 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1001E1628(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000992E8(&qword_1002AD500);
    uint64_t v2 = (unsigned char *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v28 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v28 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v28 + 1;
    if (__OFADD__(v28, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    int64_t v13 = v28 + 1;
    if (!v12)
    {
      int64_t v13 = v28 + 2;
      if (v28 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v28 + 3;
        if (v28 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v28 + 4;
          if (v28 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v28 = v13;
LABEL_28:
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v31[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    *(void *)&v30[0] = v15;
    id v16 = *(id *)&v31[0];
    swift_bridgeObjectRetain();
    sub_1000992E8((uint64_t *)&unk_1002AD360);
    swift_dynamicCast();
    uint64_t v17 = *(void *)&v31[0];
    sub_1000FE5FC((_OWORD *)((char *)v31 + 8), v29);
    sub_1000FE5FC(v29, v31);
    sub_1000FE5FC(v31, v30);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v19 = -1 << v2[32];
    unint64_t v20 = v18 & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v8 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(void *)(*((void *)v2 + 6) + 8 * v8) = v17;
    uint64_t result = (uint64_t)sub_1000FE5FC(v30, (_OWORD *)(*((void *)v2 + 7) + 32 * v8));
    ++*((void *)v2 + 2);
  }
  int64_t v14 = v28 + 5;
  if (v28 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_1000FE8D4();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v28 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t sub_1001E19D0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_1000992E8(&qword_1002AD330);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v33 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v32 = (unint64_t)(63 - v3) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  unint64_t v8 = (uint64_t *)&unk_1002AD338;
  unint64_t v9 = (uint64_t *)&unk_1002AD340;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v19 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v19 >= v32) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v33 + 8 * v19);
  int64_t v21 = i + 1;
  if (!v20)
  {
    int64_t v21 = i + 2;
    if (i + 2 >= v32) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = i + 3;
      if (i + 3 >= v32) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v33 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = i + 4;
        if (i + 4 >= v32) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v33 + 8 * v21);
        if (!v20)
        {
          int64_t v22 = i + 5;
          if (i + 5 < v32)
          {
            unint64_t v20 = *(void *)(v33 + 8 * v22);
            if (v20)
            {
              int64_t v21 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v21 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_36;
              }
              if (v21 >= v32) {
                break;
              }
              unint64_t v20 = *(void *)(v33 + 8 * v21);
              ++v22;
              if (v20) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_1000FE8D4();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  unint64_t v5 = (v20 - 1) & v20;
  unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
  for (i = v21; ; unint64_t v18 = v17 | (i << 6))
  {
    unint64_t v23 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v18);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000992E8(v8);
    sub_1000992E8(v9);
    swift_dynamicCast();
    unint64_t result = sub_10016DB60(v25, v24);
    unint64_t v26 = result;
    if (v27)
    {
      unint64_t v10 = v5;
      uint64_t v11 = v1;
      int64_t v12 = i;
      int64_t v13 = v9;
      int64_t v14 = v8;
      uint64_t v15 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *uint64_t v15 = v25;
      v15[1] = v24;
      unint64_t v8 = v14;
      unint64_t v9 = v13;
      int64_t i = v12;
      uint64_t v1 = v11;
      unint64_t v5 = v10;
      uint64_t v16 = v2[7];
      unint64_t result = swift_bridgeObjectRelease();
      *(void *)(v16 + 8 * v26) = v34;
      if (!v10) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int64_t v28 = (uint64_t *)(v2[6] + 16 * result);
    *int64_t v28 = v25;
    v28[1] = v24;
    *(void *)(v2[7] + 8 * result) = v34;
    uint64_t v29 = v2[2];
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30) {
      goto LABEL_34;
    }
    v2[2] = v31;
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    unint64_t v17 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1001E1CF0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001E1D18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1001E1D40()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002AD2B0);
  sub_100096F64(v0, (uint64_t)qword_1002AD2B0);
  return Logger.init(subsystem:category:)();
}

id sub_1001E1DC0()
{
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  int64_t v22 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = &v0[OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger];
  int64_t v19 = v0;
  Logger.init(subsystem:category:)();
  uint64_t v18 = OBJC_IVAR____TtC14dockaccessoryd9dockDebug_clientQueue;
  sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_1000CC1E4();
  sub_1000992E8(&qword_1002A9000);
  sub_1000EAA74((unint64_t *)&qword_1002A8540, &qword_1002A9000);
  uint64_t v8 = v21;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v20);
  unint64_t v9 = v19;
  uint64_t v11 = v22;
  uint64_t v10 = v23;
  *(void *)&v9[v18] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v7, v10);
  int64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    int64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "debug interface open", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v10);
  uint64_t v15 = (objc_class *)type metadata accessor for dockDebug();
  v24.receiver = v9;
  v24.super_class = v15;
  return [super init];
}

void sub_1001E2340(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_1001E23D4(void **a1, uint64_t a2, SEL *a3)
{
  if (qword_1002A7C00 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v4 = qword_1002B1628;
    sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
    uint64_t v6 = *(os_unfair_lock_s **)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
    swift_retain();
    os_unfair_lock_lock(v6 + 4);
    swift_release();
    id v7 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients);
    swift_beginAccess();
    uint64_t v8 = *v7;
    unint64_t v9 = *(os_unfair_lock_s **)(v4 + v5);
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_unlock(v9 + 4);
    swift_release();
    int64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 64);
    uint64_t v37 = v8 + 64;
    uint64_t v12 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v13 = -1;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    unint64_t v14 = v13 & v11;
    int64_t v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v15 = &selRef_listener_shouldAcceptNewConnection_;
    uint64_t v16 = (uint64_t *)&unk_1002AD348;
    uint64_t v17 = (char *)&type metadata for Any + 8;
    uint64_t v33 = v8;
    uint64_t v34 = a1;
    if ((v13 & v11) != 0)
    {
      do
      {
        while (1)
        {
          unint64_t v18 = __clz(__rbit64(v14));
          v14 &= v14 - 1;
          unint64_t v19 = v18 | (v10 << 6);
LABEL_22:
          int v23 = *(_DWORD *)(*(void *)(v8 + 48) + 4 * v19);
          id v24 = *(id *)(*(void *)(v8 + 56) + 8 * v19);
          id v25 = [v24 v15[84]];
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          sub_1000992E8(v16);
          if (swift_dynamicCast()) {
            break;
          }

          if (!v14) {
            goto LABEL_8;
          }
        }
        unint64_t v26 = v17;
        char v27 = v16;
        int64_t v28 = *a1;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a1 = v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          int64_t v28 = sub_100102808(0, v28[2] + 1, 1, v28);
          *a1 = v28;
        }
        unint64_t v31 = v28[2];
        unint64_t v30 = v28[3];
        if (v31 >= v30 >> 1) {
          int64_t v28 = sub_100102808((void *)(v30 > 1), v31 + 1, 1, v28);
        }
        v28[2] = v31 + 1;
        *((_DWORD *)v28 + v31 + 8) = v23;
        a1 = (void **)v34;
        *uint64_t v34 = v28;
        [swift_unknownObjectRetain() *a3, a2];
        swift_unknownObjectRelease_n();

        uint64_t v15 = &selRef_listener_shouldAcceptNewConnection_;
        uint64_t v16 = v27;
        uint64_t v17 = v26;
        uint64_t v8 = v33;
      }
      while (v14);
    }
LABEL_8:
    int64_t v20 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v20 >= v38) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v37 + 8 * v20);
    ++v10;
    if (v21) {
      goto LABEL_21;
    }
    int64_t v10 = v20 + 1;
    if (v20 + 1 >= v38) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v37 + 8 * v10);
    if (v21) {
      goto LABEL_21;
    }
    int64_t v10 = v20 + 2;
    if (v20 + 2 >= v38) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v37 + 8 * v10);
    if (v21) {
      goto LABEL_21;
    }
    int64_t v22 = v20 + 3;
    if (v22 >= v38) {
      return swift_release();
    }
    unint64_t v21 = *(void *)(v37 + 8 * v22);
    if (v21)
    {
      int64_t v10 = v22;
LABEL_21:
      unint64_t v14 = (v21 - 1) & v21;
      unint64_t v19 = __clz(__rbit64(v21)) + (v10 << 6);
      goto LABEL_22;
    }
    while (1)
    {
      int64_t v10 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        break;
      }
      if (v10 >= v38) {
        return swift_release();
      }
      unint64_t v21 = *(void *)(v37 + 8 * v10);
      ++v22;
      if (v21) {
        goto LABEL_21;
      }
    }
LABEL_31:
    __break(1u);
  }
}

void sub_1001E2768(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
  _Block_release(v8);
}

uint64_t sub_1001E2814(void **a1, char a2, SEL *a3)
{
  LOBYTE(v3) = a2;
  if (qword_1002A7C00 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v5 = qword_1002B1628;
    sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
    id v7 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
    swift_retain();
    os_unfair_lock_lock(v7 + 4);
    swift_release();
    uint64_t v8 = (uint64_t *)(v5 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients);
    swift_beginAccess();
    uint64_t v9 = *v8;
    id v10 = *(os_unfair_lock_s **)(v5 + v6);
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_unlock(v10 + 4);
    swift_release();
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v9 + 64);
    uint64_t v37 = v9 + 64;
    uint64_t v13 = 1 << *(unsigned char *)(v9 + 32);
    uint64_t v14 = -1;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    unint64_t v15 = v14 & v12;
    int64_t v38 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v16 = &selRef_listener_shouldAcceptNewConnection_;
    uint64_t v17 = (uint64_t *)&unk_1002AD348;
    unint64_t v18 = (char *)&type metadata for Any + 8;
    unsigned int v33 = v3 & 1;
    uint64_t v34 = v9;
    uint64_t v35 = a1;
    if ((v14 & v12) != 0)
    {
      do
      {
        while (1)
        {
          unint64_t v19 = __clz(__rbit64(v15));
          v15 &= v15 - 1;
          unint64_t v20 = v19 | (v11 << 6);
LABEL_22:
          int v24 = *(_DWORD *)(*(void *)(v9 + 48) + 4 * v20);
          id v3 = *(id *)(*(void *)(v9 + 56) + 8 * v20);
          id v25 = [v3 v16[84]];
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          sub_1000992E8(v17);
          if (swift_dynamicCast()) {
            break;
          }

          if (!v15) {
            goto LABEL_8;
          }
        }
        unint64_t v26 = v18;
        char v27 = v17;
        int64_t v28 = *a1;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *a1 = v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          int64_t v28 = sub_100102808(0, v28[2] + 1, 1, v28);
          *a1 = v28;
        }
        unint64_t v31 = v28[2];
        unint64_t v30 = v28[3];
        if (v31 >= v30 >> 1) {
          int64_t v28 = sub_100102808((void *)(v30 > 1), v31 + 1, 1, v28);
        }
        v28[2] = v31 + 1;
        *((_DWORD *)v28 + v31 + 8) = v24;
        a1 = (void **)v35;
        *uint64_t v35 = v28;
        [swift_unknownObjectRetain() *a3, v33];
        swift_unknownObjectRelease_n();

        uint64_t v16 = &selRef_listener_shouldAcceptNewConnection_;
        uint64_t v17 = v27;
        unint64_t v18 = v26;
        uint64_t v9 = v34;
      }
      while (v15);
    }
LABEL_8:
    int64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v21 >= v38) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v37 + 8 * v21);
    ++v11;
    if (v22) {
      goto LABEL_21;
    }
    int64_t v11 = v21 + 1;
    if (v21 + 1 >= v38) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v37 + 8 * v11);
    if (v22) {
      goto LABEL_21;
    }
    int64_t v11 = v21 + 2;
    if (v21 + 2 >= v38) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v37 + 8 * v11);
    if (v22) {
      goto LABEL_21;
    }
    int64_t v23 = v21 + 3;
    if (v23 >= v38) {
      return swift_release();
    }
    unint64_t v22 = *(void *)(v37 + 8 * v23);
    if (v22)
    {
      int64_t v11 = v23;
LABEL_21:
      unint64_t v15 = (v22 - 1) & v22;
      unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      goto LABEL_22;
    }
    while (1)
    {
      int64_t v11 = v23 + 1;
      if (__OFADD__(v23, 1)) {
        break;
      }
      if (v11 >= v38) {
        return swift_release();
      }
      unint64_t v22 = *(void *)(v37 + 8 * v11);
      ++v23;
      if (v22) {
        goto LABEL_21;
      }
    }
LABEL_31:
    __break(1u);
  }
}

void sub_1001E2BB8(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a1;
  a5(a3, v9, v8);
  _Block_release(v8);
  _Block_release(v8);
}

void sub_1001E2DC0(void *a1, int a2, void *aBlock, void (*a4)(void *))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4(v6);
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_1001E2EA8(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AD370);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_projectBox();
  if (!a2 && a1)
  {
    uint64_t v8 = v7;
    id v9 = [a1 metadata];
    if (v9)
    {
      id v10 = v9;
      id v11 = [v9 format];

      if (v11)
      {
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == 0x38746E6975 && v14 == 0xE500000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v16 & 1) == 0) {
            goto LABEL_23;
          }
        }
        if ([a1 value])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v41, 0, sizeof(v41));
        }
        sub_1000A5BE8((uint64_t)v41, (uint64_t)&v42);
        if (v44)
        {
          uint64_t result = swift_dynamicCast();
          if (result)
          {
            switch(v40)
            {
              case 3:
                uint64_t v33 = enum case for ComponentType.Battery(_:);
                uint64_t v34 = type metadata accessor for ComponentType();
                uint64_t v35 = *(void *)(v34 - 8);
                (*(void (**)(char *, uint64_t, uint64_t))(v35 + 104))(v6, v33, v34);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v6, 0, 1, v34);
                swift_beginAccess();
                sub_1001E96C4((uint64_t)v6, v8);
                swift_beginAccess();
                uint64_t v23 = 0x2079726574746142;
                unint64_t v24 = 0xEF0A726F736E6573;
                break;
              case 2:
                uint64_t v36 = enum case for ComponentType.Button(_:);
                uint64_t v37 = type metadata accessor for ComponentType();
                uint64_t v38 = *(void *)(v37 - 8);
                (*(void (**)(char *, uint64_t, uint64_t))(v38 + 104))(v6, v36, v37);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v6, 0, 1, v37);
                swift_beginAccess();
                sub_1001E96C4((uint64_t)v6, v8);
                swift_beginAccess();
                uint64_t v23 = 0x73206E6F74747542;
                unint64_t v24 = 0xEE000A726F736E65;
                break;
              case 1:
                uint64_t v20 = enum case for ComponentType.LED(_:);
                uint64_t v21 = type metadata accessor for ComponentType();
                uint64_t v22 = *(void *)(v21 - 8);
                (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v6, v20, v21);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v6, 0, 1, v21);
                swift_beginAccess();
                sub_1001E96C4((uint64_t)v6, v8);
                swift_beginAccess();
                uint64_t v23 = 0x736E65732044454CLL;
                unint64_t v24 = 0xEB000000000A726FLL;
                break;
              default:
                return result;
            }
            String.append(_:)(*(Swift::String *)&v23);
            return swift_endAccess();
          }
        }
        else
        {
          sub_1000A61E4((uint64_t)&v42, &qword_1002AA5F0);
        }
      }
    }
LABEL_23:
    unint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    unint64_t v42 = 0xD000000000000029;
    unint64_t v43 = 0x800000010023A880;
    id v25 = [a1 type];
    if (v25)
    {
      unint64_t v26 = v25;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v29 = 0;
    }
    *(void *)&v41[0] = v27;
    *((void *)&v41[0] + 1) = v29;
    sub_1000992E8((uint64_t *)&unk_1002A82C0);
    uint64_t v17 = String.init<A>(describing:)();
    goto LABEL_27;
  }
  unint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  unint64_t v42 = 0xD00000000000001FLL;
  unint64_t v43 = 0x800000010023A840;
  *(void *)&v41[0] = a2;
  swift_errorRetain();
  sub_1000992E8(&qword_1002AA080);
  uint64_t v17 = String.init<A>(describing:)();
LABEL_27:
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  uint64_t v30 = v42;
  unint64_t v31 = (void *)v43;
  swift_beginAccess();
  v32._countAndFlagsBits = v30;
  v32._object = v31;
  String.append(_:)(v32);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void sub_1001E34C4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AD370);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)v48 - v8;
  uint64_t v10 = swift_projectBox();
  if (a2 || !a1)
  {
    v50[0] = 0;
    v50[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v50[0] = 0xD00000000000001FLL;
    v50[1] = 0x800000010023A840;
    *(void *)&v49[0] = a2;
    swift_errorRetain();
    sub_1000992E8(&qword_1002AA080);
    v20._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    uint64_t v21 = v50[0];
    uint64_t v22 = (void *)v50[1];
    swift_beginAccess();
    v23._countAndFlagsBits = v21;
    v23._object = v22;
    String.append(_:)(v23);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = v10;
    id v12 = [a1 metadata];
    if (v12)
    {
      uint64_t v13 = v12;
      id v14 = [v12 format];

      if (v14)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;

        if (v15 == 1635017060 && v17 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0) {
            return;
          }
        }
        if ([a1 value])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v49, 0, sizeof(v49));
        }
        sub_1000A5BE8((uint64_t)v49, (uint64_t)v50);
        if (!v50[3])
        {
          uint64_t v33 = &qword_1002AA5F0;
          uint64_t v34 = (char *)v50;
LABEL_33:
          sub_1000A61E4((uint64_t)v34, v33);
          return;
        }
        if (swift_dynamicCast())
        {
          uint64_t v25 = v48[0];
          unint64_t v24 = v48[1];
          v50[0] = 0;
          v50[1] = 0xE000000000000000;
          _StringGuts.grow(_:)(17);
          swift_bridgeObjectRelease();
          strcpy((char *)v50, "\nSensor Data: ");
          HIBYTE(v50[1]) = -18;
          v26._countAndFlagsBits = sub_100139704(v25, v24);
          String.append(_:)(v26);
          swift_bridgeObjectRelease();
          v27._countAndFlagsBits = 10;
          v27._object = (void *)0xE100000000000000;
          String.append(_:)(v27);
          uint64_t v28 = v50[0];
          uint64_t v29 = (void *)v50[1];
          swift_beginAccess();
          v30._countAndFlagsBits = v28;
          v30._object = v29;
          String.append(_:)(v30);
          swift_endAccess();
          swift_bridgeObjectRelease();
          swift_beginAccess();
          sub_1001E965C(v11, (uint64_t)v9);
          uint64_t v31 = type metadata accessor for ComponentType();
          uint64_t v32 = *(void *)(v31 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v9, 1, v31) != 1)
          {
            sub_1001E965C((uint64_t)v9, (uint64_t)v7);
            if ((*(unsigned int (**)(char *, uint64_t))(v32 + 88))(v7, v31) != enum case for ComponentType.Battery(_:))
            {
              sub_1000A6240(v25, v24);
              (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v31);
              goto LABEL_32;
            }
            id v35 = objc_allocWithZone((Class)type metadata accessor for AccessoryBatteryState());
            sub_1000A618C(v25, v24);
            uint64_t v36 = AccessoryBatteryState.init(data:name:)();
            if (v36)
            {
              uint64_t v37 = (void *)v36;
              *(void *)&v49[0] = 0;
              *((void *)&v49[0] + 1) = 0xE000000000000000;
              _StringGuts.grow(_:)(45);
              v38._object = (void *)0xEE00203A61746164;
              v38._countAndFlagsBits = 0x2079726574746142;
              String.append(_:)(v38);
              AccessoryBatteryState.batteryPercent.getter();
              Double.write<A>(to:)();
              v39._countAndFlagsBits = 0x6142776F6C202C25;
              v39._object = (void *)0xEB000000003D7474;
              String.append(_:)(v39);
              char v40 = AccessoryBatteryState.lowBattery.getter();
              BOOL v41 = (v40 & 1) == 0;
              if (v40) {
                uint64_t v42 = 1702195828;
              }
              else {
                uint64_t v42 = 0x65736C6166;
              }
              if (v41) {
                unint64_t v43 = 0xE500000000000000;
              }
              else {
                unint64_t v43 = 0xE400000000000000;
              }
              unint64_t v44 = v43;
              String.append(_:)(*(Swift::String *)&v42);
              swift_bridgeObjectRelease();
              v45._countAndFlagsBits = 0x656772616863202CLL;
              v45._object = (void *)0xEE003D6574617453;
              String.append(_:)(v45);
              v48[0] = AccessoryBatteryState.chargeState.getter();
              _print_unlocked<A, B>(_:_:)();
              Swift::String v46 = (Swift::String)v49[0];
              swift_beginAccess();
              String.append(_:)(v46);
              swift_endAccess();
              sub_1000A6240(v25, v24);

              swift_bridgeObjectRelease();
              goto LABEL_32;
            }
            swift_beginAccess();
            v47._object = (void *)0x800000010023A860;
            v47._countAndFlagsBits = 0xD00000000000001CLL;
            String.append(_:)(v47);
            swift_endAccess();
          }
          sub_1000A6240(v25, v24);
LABEL_32:
          uint64_t v33 = &qword_1002AD370;
          uint64_t v34 = v9;
          goto LABEL_33;
        }
      }
    }
  }
}

id sub_1001E3B00()
{
  return sub_1001E4034(0, type metadata accessor for dockDebug);
}

uint64_t sub_1001E3B9C()
{
  return type metadata accessor for dockDebug();
}

uint64_t type metadata accessor for dockDebug()
{
  uint64_t result = qword_1002AD2F0;
  if (!qword_1002AD2F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001E3BF0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7C28 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100096F64(v10, (uint64_t)qword_1002AD2B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  int v33 = a1;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v31 = a5;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v32 = a4;
    v34[0] = v20;
    *(_DWORD *)uint64_t v19 = 67109378;
    LODWORD(v35) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 8) = 2080;
    uint64_t v35 = a2;
    uint64_t v36 = a3;
    swift_bridgeObjectRetain();
    sub_1000992E8((uint64_t *)&unk_1002A82C0);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v35 = sub_1000993AC(v21, v22, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v31, (uint8_t *)v19, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1002B1628;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v25 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  Swift::String v26 = *(os_unfair_lock_s **)(v23 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v26 + 4);
  swift_release();
  swift_beginAccess();
  Swift::String v27 = (void *)sub_1001ED0B8(v33);
  swift_endAccess();

  uint64_t v28 = *(os_unfair_lock_s **)(v23 + v25);
  swift_retain();
  os_unfair_lock_unlock(v28 + 4);

  return swift_release();
}

id sub_1001E401C(uint64_t a1)
{
  return sub_1001E4034(a1, type metadata accessor for DebugServiceDelegate);
}

id sub_1001E4034(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t type metadata accessor for DebugServiceDelegate()
{
  return self;
}

uint64_t sub_1001E4090(uint64_t *a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1001E41F4(a1, a2, a3, a4, a5, a6, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1001F62BC, (void (*)(uint64_t, void))sub_1001F30C4);
}

uint64_t sub_1001E40BC(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for ComponentType();
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  if (v14)
  {
    uint64_t v15 = (void *)*a3;
    if (a2)
    {
      *(void *)(v15[7] + 8 * a4) = v14;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 16))(v13, a5);
      sub_1001F6380(a4, (uint64_t)v13, v14, v15);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    sub_1001F390C(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001E41F4(uint64_t *a1, char a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, void), void (*a8)(uint64_t, void))
{
  uint64_t v10 = *a1;
  if (*a1)
  {
    if (a2)
    {
      *(void *)(*(void *)(*a3 + 56) + 8 * a4) = v10;
    }
    else
    {
      a7(a4, a5, a6, v10, *a3);
      swift_bridgeObjectRetain();
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    a8(a4, *a3);
  }

  return swift_bridgeObjectRetain();
}

id sub_1001E42B8(void *a1)
{
  unint64_t v2 = type metadata accessor for UUID();
  unint64_t v142 = *(void *)(v2 - 8);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char **)((char *)&v127 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  uint64_t v7 = (char **)((char *)&v127 - v6);
  uint64_t v150 = 0;
  unint64_t v151 = 0xE000000000000000;
  if (qword_1002A7C00 != -1) {
    goto LABEL_83;
  }
  while (1)
  {
    uint64_t v8 = qword_1002B1628;
    uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v10 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v10 + 4);
    swift_release();
    uint64_t v11 = *(void **)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    uint64_t v12 = *(os_unfair_lock_s **)(v8 + v9);
    id v13 = v11;
    swift_retain();
    os_unfair_lock_unlock(v12 + 4);
    swift_release();
    if (!v11) {
      return (id)v150;
    }
    uint64_t v14 = (uint64_t)*(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    uint64_t v15 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    uint64_t v141 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    id v16 = *(id *)(v14 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
    OS_dispatch_semaphore.wait()();

    uint64_t v17 = (char *)(v14 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
    swift_beginAccess();
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(*(void *)v17 + 16);
    id v133 = v13;
    if (!v19) {
      goto LABEL_8;
    }
    uint64_t v139 = v14;
    unint64_t v140 = (unint64_t)a1;
    uint64_t v20 = v18 + 32;
    uint64_t v21 = (void (**)(char **, unint64_t))(v142 + 8);
    swift_bridgeObjectRetain();
    do
    {
      sub_1000A5D40(v20, (uint64_t)&v145);
      id v22 = *(id *)(*sub_1000A5DA4(&v145, v146) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v22) = static UUID.== infix(_:_:)();
      uint64_t v23 = *v21;
      (*v21)(v5, v2);
      v23(v7, v2);
      if (v22)
      {
        swift_bridgeObjectRelease();
        uint64_t v125 = (void *)v139;
        id v126 = *(id *)&v141[v139];
        OS_dispatch_semaphore.signal()();

        sub_1000A5D40((uint64_t)&v145, (uint64_t)&v147);
        sub_100099BCC((uint64_t)&v145);

        id v13 = v133;
        a1 = (void *)v140;
        if (*((void *)&v148 + 1)) {
          goto LABEL_9;
        }
LABEL_76:

        sub_1000A61E4((uint64_t)&v147, (uint64_t *)&unk_1002AAA30);
        return (id)v150;
      }
      sub_100099BCC((uint64_t)&v145);
      v20 += 40;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    id v13 = v133;
    uint64_t v14 = v139;
    a1 = (void *)v140;
LABEL_8:
    id v24 = *(id *)&v141[v14];
    OS_dispatch_semaphore.signal()();

    uint64_t v149 = 0;
    long long v147 = 0u;
    long long v148 = 0u;

    if (!*((void *)&v148 + 1)) {
      goto LABEL_76;
    }
LABEL_9:
    sub_1000992E8(&qword_1002A82E0);
    type metadata accessor for DaemonAccessory();
    if ((swift_dynamicCast() & 1) == 0)
    {

      return (id)v150;
    }
    uint64_t countAndFlagsBits = v145._countAndFlagsBits;
    id result = [a1 services];
    if (!result) {
      goto LABEL_97;
    }
    Swift::String v26 = result;
    sub_100099C7C(0, &qword_1002A8418);
    unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v27 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v28 = v133;
    if (!v27)
    {
LABEL_78:

      swift_bridgeObjectRelease();
      swift_release();
      return (id)v150;
    }
    unint64_t v29 = 0;
    unint64_t v132 = v2 & 0xC000000000000001;
    uint64_t v129 = v2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v128 = v2 + 32;
    a1 = (void *)0xE000000000000000;
    uint64_t v5 = &selRef_authSession_authComplete_;
    uint64_t v30 = &selRef_setState_;
    p_prots = (__objc2_prot_list **)(&OBJC_PROTOCOL____TtP11DockKitCore22XPCDaemonDebugProtocol_ + 16);
    uint64_t v138 = (void *)0x800000010023A8B0;
    uint64_t v130 = v27;
    unint64_t v131 = v2;
LABEL_16:
    if (v132)
    {
      id v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v29 >= *(void *)(v129 + 16)) {
        goto LABEL_82;
      }
      id v33 = *(id *)(v128 + 8 * v29);
    }
    uint64_t v137 = v33;
    BOOL v34 = __OFADD__(v29, 1);
    unint64_t v35 = v29 + 1;
    if (!v34) {
      break;
    }
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    swift_once();
  }
  v145._uint64_t countAndFlagsBits = 0;
  v145._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease();
  v145._uint64_t countAndFlagsBits = 0x6976726553504148;
  v145._object = (void *)0xEB00000000206563;
  id result = [v137 v5[448]];
  if (!result) {
    goto LABEL_92;
  }
  uint64_t v36 = result;
  uint64_t v143 = 0;
  char v144 = 1;
  id result = (id)static Int._forceBridgeFromObjectiveC(_:result:)();
  if ((v144 & 1) == 0)
  {
    uint64_t v37 = v143;

    uint64_t v143 = v37;
    v38._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v38);
    swift_bridgeObjectRelease();
    v39._uint64_t countAndFlagsBits = 32;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    id result = [v137 v30[149]];
    if (!result) {
      goto LABEL_94;
    }
    char v40 = result;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v43 = v42;

    v44._uint64_t countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    String.append(_:)(v145);
    swift_bridgeObjectRelease();
    if (qword_1002A7B80 != -1) {
      swift_once();
    }
    uint64_t v45 = qword_1002B14E0;
    id result = [v137 v30[149]];
    if (!result) {
      goto LABEL_95;
    }
    Swift::String v46 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v48 = (char *)self;
    id v49 = [v48 p_prots[198]:v47];

    if (*(void *)(v45 + 16) && (unint64_t v50 = sub_10016DED8((uint64_t)v49), (v51 & 1) != 0))
    {
      unint64_t v52 = (uint64_t *)(*(void *)(v45 + 56) + 16 * v50);
      uint64_t v53 = *v52;
      uint64_t v54 = (void *)v52[1];
      swift_bridgeObjectRetain();

      v145._uint64_t countAndFlagsBits = 10272;
      v145._object = (void *)0xE200000000000000;
      v55._uint64_t countAndFlagsBits = v53;
      v55._object = v54;
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      v56._uint64_t countAndFlagsBits = 41;
      v56._object = (void *)0xE100000000000000;
      String.append(_:)(v56);
      String.append(_:)(v145);
      swift_bridgeObjectRelease();
    }
    else
    {
    }
    uint64_t v7 = (char **)0xD000000000000014;
    uint64_t v141 = v48;
    id v57 = [v137 propertiesDescription];
    if (v57)
    {
      unint64_t v58 = v57;
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v61 = v60;

      v145._uint64_t countAndFlagsBits = 32;
      v145._object = (void *)0xE100000000000000;
      v62._uint64_t countAndFlagsBits = v59;
      v62._object = v61;
      String.append(_:)(v62);
      uint64_t v7 = (char **)0xD000000000000014;
      swift_bridgeObjectRelease();
      String.append(_:)(v145);
      swift_bridgeObjectRelease();
    }
    v145._uint64_t countAndFlagsBits = 0x3D20656D614E2820;
    v145._object = (void *)0xE900000000000020;
    uint64_t v63 = v137;
    uint64_t v64 = sub_1001AD080(v137);
    if (v65)
    {
      unint64_t v66 = v65;
    }
    else
    {
      uint64_t v64 = 4271950;
      unint64_t v66 = 0xE300000000000000;
    }
    unint64_t v67 = v66;
    String.append(_:)(*(Swift::String *)&v64);
    swift_bridgeObjectRelease();
    v68._uint64_t countAndFlagsBits = 41;
    v68._object = (void *)0xE100000000000000;
    String.append(_:)(v68);
    String.append(_:)(v145);
    swift_bridgeObjectRelease();
    v69._uint64_t countAndFlagsBits = 686858;
    v69._object = (void *)0xE300000000000000;
    String.append(_:)(v69);
    id result = [v63 characteristics];
    if (!result) {
      goto LABEL_96;
    }
    uint64_t v70 = result;
    sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
    unint64_t v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = &selRef_authSession_authComplete_;
    unint64_t v134 = v35;
    if (!(v71 >> 62))
    {
      uint64_t v72 = *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v72) {
        goto LABEL_39;
      }
      goto LABEL_15;
    }
    swift_bridgeObjectRetain();
    uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v72)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      v32._uint64_t countAndFlagsBits = 2685;
      v32._object = (void *)0xE200000000000000;
      String.append(_:)(v32);

      unint64_t v29 = v134;
      uint64_t v28 = v133;
      unint64_t v2 = v131;
      p_prots = &OBJC_PROTOCOL____TtP11DockKitCore22XPCDaemonDebugProtocol_.prots;
      if (v134 == v130) {
        goto LABEL_78;
      }
      goto LABEL_16;
    }
LABEL_39:
    unint64_t v140 = v71 & 0xC000000000000001;
    unint64_t v2 = 4;
    unint64_t v135 = v71;
    uint64_t v139 = v72;
    while (2)
    {
      if (v140) {
        id v73 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v73 = *(id *)(v71 + 8 * v2);
      }
      uint64_t v74 = v73;
      if (__OFADD__(v2 - 4, 1))
      {
        __break(1u);
        goto LABEL_81;
      }
      v145._uint64_t countAndFlagsBits = 0;
      v145._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v145._uint64_t countAndFlagsBits = 0xD000000000000014;
      v145._object = v138;
      id result = [v74 v5[448]];
      if (!result)
      {
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
        break;
      }
      double v75 = result;
      uint64_t v143 = 0;
      char v144 = 1;
      id result = (id)static Int._forceBridgeFromObjectiveC(_:result:)();
      if (v144) {
        goto LABEL_86;
      }
      unint64_t v142 = v2 - 3;
      uint64_t v76 = v143;

      uint64_t v143 = v76;
      v77._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v77);
      swift_bridgeObjectRelease();
      v78._uint64_t countAndFlagsBits = 32;
      v78._object = (void *)0xE100000000000000;
      String.append(_:)(v78);
      id result = [v74 v30[149]];
      if (!result) {
        goto LABEL_87;
      }
      unint64_t v79 = result;
      uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v82 = v81;

      v83._uint64_t countAndFlagsBits = v80;
      v83._object = v82;
      String.append(_:)(v83);
      swift_bridgeObjectRelease();
      v84._uint64_t countAndFlagsBits = 32;
      v84._object = (void *)0xE100000000000000;
      String.append(_:)(v84);
      String.append(_:)(v145);
      swift_bridgeObjectRelease();
      if (qword_1002A7B88 != -1) {
        swift_once();
      }
      uint64_t v85 = qword_1002B14E8;
      id result = [v74 v30[149]];
      if (!result) {
        goto LABEL_88;
      }
      Swift::Int v86 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v87 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v88 = [v141 UUIDWithString:v87];

      if (*(void *)(v85 + 16) && (unint64_t v89 = sub_10016DED8((uint64_t)v88), (v90 & 1) != 0))
      {
        uint64_t v91 = (uint64_t *)(*(void *)(v85 + 56) + 16 * v89);
        uint64_t v92 = *v91;
        uint64_t v93 = (void *)v91[1];
        swift_bridgeObjectRetain();

        v145._uint64_t countAndFlagsBits = 40;
        v145._object = (void *)0xE100000000000000;
        v94._uint64_t countAndFlagsBits = v92;
        v94._object = v93;
        String.append(_:)(v94);
        swift_bridgeObjectRelease();
        v95._uint64_t countAndFlagsBits = 8233;
        v95._object = (void *)0xE200000000000000;
        String.append(_:)(v95);
        String.append(_:)(v145);
        swift_bridgeObjectRelease();
      }
      else
      {
      }
      id v96 = [v74 metadata];
      if (v96)
      {
        unint64_t v97 = v96;
        id v98 = [v96 format];
        if (v98)
        {
          uint64_t v99 = v98;
          uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v102 = v101;

          if (v100 == 0x676E69727473 && v102 == 0xE600000000000000)
          {
            swift_bridgeObjectRelease();
            goto LABEL_60;
          }
          char v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v103)
          {
LABEL_60:
            v145._uint64_t countAndFlagsBits = 0x203A65756C6156;
            v145._object = (void *)0xE700000000000000;
            id result = [v74 type];
            if (!result) {
              goto LABEL_90;
            }
            uint64_t v104 = result;
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            NSString v105 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v106 = v141;
            uint64_t v107 = [v141 UUIDWithString:v105];

            id result = [v137 type];
            if (!result) {
              goto LABEL_91;
            }
            uint64_t v108 = result;
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            NSString v109 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            uint64_t v110 = (uint8_t *)[v106 UUIDWithString:v109];

            uint64_t v111 = swift_allocObject();
            *(void *)(v111 + 24) = 0;
            *(void *)(v111 + 16) = 0;
            uint64_t v112 = countAndFlagsBits;
            swift_retain();
            sub_1001B1B28(v107, v110, v112, v112, v111);
            swift_release();
            swift_beginAccess();
            uint64_t v113 = *(void *)(v111 + 16);
            unint64_t v114 = *(void *)(v111 + 24);
            swift_bridgeObjectRetain();

            swift_release();
            if (v114) {
              uint64_t v115 = v113;
            }
            else {
              uint64_t v115 = 4271950;
            }
            if (v114) {
              unint64_t v116 = v114;
            }
            else {
              unint64_t v116 = 0xE300000000000000;
            }
            unint64_t v117 = v116;
            String.append(_:)(*(Swift::String *)&v115);
            swift_bridgeObjectRelease();
            v118._uint64_t countAndFlagsBits = 2592;
            v118._object = (void *)0xE200000000000000;
            String.append(_:)(v118);
            String.append(_:)(v145);
            swift_bridgeObjectRelease();
            a1 = (void *)0xE000000000000000;
            uint64_t v5 = &selRef_authSession_authComplete_;
            uint64_t v7 = (char **)0xD000000000000014;
            unint64_t v71 = v135;
          }
        }
      }
      id result = [v74 shortDescription];
      if (!result) {
        goto LABEL_89;
      }
      uint64_t v119 = result;
      uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v122 = v121;

      v145._uint64_t countAndFlagsBits = 0x202020200A7BLL;
      v145._object = (void *)0xE600000000000000;
      v123._uint64_t countAndFlagsBits = v120;
      v123._object = v122;
      String.append(_:)(v123);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v124._uint64_t countAndFlagsBits = 0xA7D20200ALL;
      v124._object = (void *)0xE500000000000000;
      String.append(_:)(v124);
      swift_bridgeObjectRelease();
      String.append(_:)(v145);

      swift_bridgeObjectRelease();
      ++v2;
      uint64_t v30 = &selRef_setState_;
      if (v142 == v139) {
        goto LABEL_15;
      }
      continue;
    }
  }
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
  return result;
}

uint64_t sub_1001E5218(void *a1)
{
  uint64_t v71 = type metadata accessor for UUID();
  unint64_t v2 = *(char **)(v71 - 8);
  uint64_t v3 = __chkstk_darwin(v71);
  uint64_t v70 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  Swift::String v69 = (char *)&v59 - v5;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  uint64_t v7 = (void *)(v6 + 16);
  *(void *)(v6 + 24) = 0xE000000000000000;
  id v8 = [a1 services];
  if (!v8) {
LABEL_50:
  }
    __break(1u);
  uint64_t v9 = v8;
  sub_100099C7C(0, &qword_1002A8418);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62) {
    goto LABEL_47;
  }
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v11)
  {
LABEL_4:
    uint64_t v59 = v7;
    unint64_t v12 = 0;
    unint64_t v74 = v10 & 0xC000000000000001;
    uint64_t v66 = v10 & 0xFFFFFFFFFFFFFF8;
    unint64_t v67 = v10;
    unint64_t v65 = v10 + 32;
    Swift::String v68 = (void (**)(char *, uint64_t))(v2 + 8);
    unint64_t v10 = 0x7FFFFFFFLL;
    uint64_t v60 = v6;
    uint64_t v73 = v11;
    do
    {
      if (v74)
      {
        id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v14 = __OFADD__(v12++, 1);
        if (v14) {
          goto LABEL_45;
        }
      }
      else
      {
        if (v12 >= *(void *)(v66 + 16)) {
          goto LABEL_46;
        }
        id v13 = *(id *)(v65 + 8 * v12);
        BOOL v14 = __OFADD__(v12++, 1);
        if (v14)
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          swift_bridgeObjectRetain();
          uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v11) {
            break;
          }
          goto LABEL_4;
        }
      }
      uint64_t v7 = v13;
      id v15 = [v13 type:v59];
      if (!v15)
      {
        __break(1u);
        goto LABEL_50;
      }
      id v16 = v15;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      uint64_t v18 = (char *)[self UUIDWithString:v17];

      id v19 = [v18 data];
      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      sub_1001A6570(12, v20, v22, v77);
      uint64_t v23 = v77[0];
      unint64_t v24 = v77[1];
      uint64_t v25 = sub_1000992E8((uint64_t *)&unk_1002AAA80);
      *((void *)&v79 + 1) = v25;
      uint64_t v80 = sub_1000EAA74((unint64_t *)&qword_1002A8FE0, (uint64_t *)&unk_1002AAA80);
      *(void *)&long long v78 = &off_100274928;
      Swift::String v26 = sub_1000A5DA4(&v78, v25);
      uint64_t v27 = *v26;
      size_t v28 = *(void *)(*v26 + 16);
      if (v28)
      {
        if (v28 <= 0xE)
        {
          memset(__dst, 0, sizeof(__dst));
          unsigned __int8 v76 = v28;
          memcpy(__dst, (const void *)(v27 + 32), v28);
          unint64_t v2 = *(char **)__dst;
          unint64_t v31 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v76 << 48);
        }
        else
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          uint64_t v29 = __DataStorage.init(bytes:length:)();
          uint64_t v30 = v29;
          if (v28 >= 0x7FFFFFFF)
          {
            type metadata accessor for Data.RangeReference();
            unint64_t v2 = (char *)swift_allocObject();
            *((void *)v2 + 2) = 0;
            *((void *)v2 + 3) = v28;
            unint64_t v31 = v30 | 0x8000000000000000;
          }
          else
          {
            unint64_t v2 = (char *)(v28 << 32);
            unint64_t v31 = v29 | 0x4000000000000000;
          }
        }
      }
      else
      {
        unint64_t v2 = 0;
        unint64_t v31 = 0xC000000000000000;
      }
      sub_100099BCC((uint64_t)&v78);
      char v32 = sub_1001B0F38(v23, v24, (uint64_t)v2, v31);
      sub_1000A6240((uint64_t)v2, v31);
      sub_1000A6240(v23, v24);
      if (v32)
      {
        unint64_t v2 = v18;
        if (sub_10013A984() >= 0x300)
        {
          unint64_t v2 = v18;
          if (sub_10013A984() <= 0x320)
          {
            if (qword_1002A7C00 != -1) {
              swift_once();
            }
            uint64_t v33 = qword_1002B1628;
            uint64_t v34 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
            unint64_t v35 = *(os_unfair_lock_s **)(qword_1002B1628
                                       + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
            swift_retain();
            os_unfair_lock_lock(v35 + 4);
            swift_release();
            uint64_t v36 = *(void **)(v33 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
            unint64_t v2 = (char *)(*(void *)(v33 + v34) + 16);
            id v37 = v36;
            swift_retain();
            os_unfair_lock_unlock((os_unfair_lock_t)v2);
            swift_release();
            if (!v36)
            {

              unint64_t v10 = 0x7FFFFFFFLL;
              continue;
            }
            Swift::String v38 = (char *)objc_retain(*(id *)(qword_1002B1628
                                            + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager));
            id v72 = (id)dispatch thunk of DockCoreAccessory.info.getter();
            uint64_t v64 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
            id v39 = *(id *)&v38[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
            OS_dispatch_semaphore.wait()();

            char v40 = &v38[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
            swift_beginAccess();
            uint64_t v41 = *(void *)v40;
            uint64_t v42 = *(void *)(*(void *)v40 + 16);
            if (v42)
            {
              Swift::String v62 = v38;
              id v63 = v37;
              uint64_t v43 = v41 + 32;
              uint64_t v61 = v41;
              swift_bridgeObjectRetain();
              while (1)
              {
                sub_1000A5D40(v43, (uint64_t)v77);
                id v44 = *(id *)(*sub_1000A5DA4(v77, v77[3]) + 24);
                uint64_t v45 = v69;
                DockCoreInfo.identifier.getter();

                Swift::String v46 = v70;
                DockCoreInfo.identifier.getter();
                LOBYTE(v44) = static UUID.== infix(_:_:)();
                NSString v47 = *v68;
                uint64_t v48 = v46;
                uint64_t v49 = v71;
                (*v68)(v48, v71);
                v47(v45, v49);
                if (v44) {
                  break;
                }
                sub_100099BCC((uint64_t)v77);
                v43 += 40;
                if (!--v42)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v6 = v60;
                  id v37 = v63;
                  Swift::String v38 = v62;
                  goto LABEL_33;
                }
              }
              swift_bridgeObjectRelease();
              unint64_t v50 = v62;
              unint64_t v2 = (char *)*(id *)&v62[v64];
              OS_dispatch_semaphore.signal()();

              sub_1000A5D40((uint64_t)v77, (uint64_t)&v78);
              sub_100099BCC((uint64_t)v77);

              uint64_t v6 = v60;
              id v37 = v63;
            }
            else
            {
LABEL_33:
              unint64_t v2 = (char *)*(id *)&v38[v64];
              OS_dispatch_semaphore.signal()();

              uint64_t v80 = 0;
              long long v78 = 0u;
              long long v79 = 0u;
            }
            unint64_t v10 = 0x7FFFFFFFLL;
            if (!*((void *)&v79 + 1))
            {

              sub_1000A61E4((uint64_t)&v78, (uint64_t *)&unk_1002AAA30);
              continue;
            }
            sub_1000992E8(&qword_1002A82E0);
            type metadata accessor for DaemonAccessory();
            if (swift_dynamicCast())
            {
              unint64_t v2 = (char *)v77[0];
              sub_1000992E8(&qword_1002AD370);
              uint64_t v51 = swift_allocBox();
              uint64_t v53 = v52;
              uint64_t v54 = type metadata accessor for ComponentType();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v53, 1, 1, v54);
              if (qword_1002A7BD8 != -1) {
                swift_once();
              }
              Swift::String v55 = qword_1002B15A8;
              swift_retain();
              swift_retain();
              sub_1001B25BC(v55, (uint8_t *)v18, (uint64_t)v2, v6, v51);
              swift_release();
              swift_release();
              if (qword_1002A7BE0 != -1) {
                swift_once();
              }
              Swift::String v56 = qword_1002B15B0;
              swift_retain();
              swift_retain();
              sub_1001B3050(v56, (uint8_t *)v18, (uint64_t)v2, v6, v51);

              swift_release();
              swift_release_n();
              swift_release();
            }
            else
            {
            }
          }
        }
      }
    }
    while (v12 != v73);
  }
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v57 = *(void *)(v6 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v57;
}

id sub_1001E5BA0()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v60 = *(void *)(v0 - 8);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v55 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v55 - v4;
  v65._uint64_t countAndFlagsBits = 0;
  v65._object = (void *)0xE000000000000000;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  unint64_t v6 = 0xD000000000000019;
  uint64_t v7 = qword_1002B1628;
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v9 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  unint64_t v10 = *(void **)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v11 = *(os_unfair_lock_s **)(v7 + v8);
  id v12 = v10;
  swift_retain();
  os_unfair_lock_unlock(v11 + 4);
  swift_release();
  if (!v10) {
    return (id)v6;
  }
  unint64_t v58 = "dockaccessoryd.debug.clients";
  id v13 = (char *)*(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  BOOL v14 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
  uint64_t v59 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v15 = *(id *)&v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  id v16 = &v13[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v17 = *(void *)v16;
  uint64_t v18 = *(void *)(*(void *)v16 + 16);
  if (v18)
  {
    Swift::String v56 = v13;
    id v57 = v12;
    uint64_t v19 = v17 + 32;
    uint64_t v20 = (void (**)(char *, uint64_t))(v60 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v19, (uint64_t)v61);
      id v21 = *(id *)(*sub_1000A5DA4(v61, v61[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v21) = static UUID.== infix(_:_:)();
      unint64_t v22 = *v20;
      (*v20)(v3, v0);
      v22(v5, v0);
      if (v21) {
        break;
      }
      sub_100099BCC((uint64_t)v61);
      v19 += 40;
      if (!--v18)
      {
        swift_bridgeObjectRelease();
        id v13 = v56;
        id v12 = v57;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v24 = v56;
    id v25 = *(id *)&v56[v59];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v61, (uint64_t)&v62);
    sub_100099BCC((uint64_t)v61);

    id v12 = v57;
  }
  else
  {
LABEL_9:
    id v23 = *(id *)&v13[v59];
    OS_dispatch_semaphore.signal()();

    uint64_t v64 = 0;
    Swift::String v62 = (Swift::String)0;
    long long v63 = 0u;
  }
  unint64_t v6 = 0xD000000000000019;
  if (!*((void *)&v63 + 1))
  {

    sub_1000A61E4((uint64_t)&v62, (uint64_t *)&unk_1002AAA30);
    return (id)v6;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_21:

    return (id)v6;
  }
  uint64_t v26 = v61[0];
  uint64_t v27 = *(void **)(v61[0] + 32);
  if (!v27 || (self, (uint64_t v28 = swift_dynamicCastObjCClass()) == 0))
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v29 = (void *)v28;
  uint64_t v30 = *(void **)(v26 + 24);
  id v31 = v27;
  id v32 = v30;
  id v33 = [v32 description];
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;

  v62._uint64_t countAndFlagsBits = v34;
  v62._object = v36;
  v37._uint64_t countAndFlagsBits = 10;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  Swift::String v65 = v62;
  v62._uint64_t countAndFlagsBits = 0;
  v62._object = (void *)0xE000000000000000;
  id result = [v29 primaryAccessory];
  if (!result)
  {
    __break(1u);
    goto LABEL_24;
  }
  id v39 = result;
  id v40 = [result description];

  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v43 = v42;

  v44._uint64_t countAndFlagsBits = v41;
  v44._object = v43;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  id result = [v29 primaryAccessory];
  if (!result)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v45 = result;
  id v46 = sub_1001E42B8(result);
  uint64_t v48 = v47;

  v49._uint64_t countAndFlagsBits = (uint64_t)v46;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  id result = [v29 primaryAccessory];
  if (result)
  {
    unint64_t v50 = result;
    uint64_t v51 = sub_1001E5218(result);
    uint64_t v53 = v52;

    v54._uint64_t countAndFlagsBits = v51;
    v54._object = v53;
    String.append(_:)(v54);

    swift_release();
    swift_bridgeObjectRelease();
    return (id)v65._countAndFlagsBits;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1001E60FC(int a1, uint64_t a2)
{
  if (!*(void *)(*(void *)a2 + 16) || (sub_10016DB60(0x6F69746175746361, 0xE90000000000006ELL), (v4 & 1) == 0))
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v21 = *(void *)a2;
    *(void *)a2 = 0x8000000000000000;
    sub_1001F6244((uint64_t)_swiftEmptyArrayStorage, 0x6F69746175746361, 0xE90000000000006ELL, isUniquelyReferenced_nonNull_native);
    *(void *)a2 = v21;
    swift_bridgeObjectRelease();
  }
  unint64_t v22 = &type metadata for Int32;
  LODWORD(v21) = a1;
  uint64_t v6 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v20 = *(void **)a2;
  uint64_t v7 = v20;
  *(void *)a2 = 0x8000000000000000;
  unint64_t v9 = sub_10016DB60(0x6F69746175746361, 0xE90000000000006ELL);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_16:
    uint64_t v7 = sub_100102E88(0, v7[2] + 1, 1, v7);
    goto LABEL_12;
  }
  char v13 = v8;
  if (v7[3] >= v12)
  {
    if (v6)
    {
      if ((v8 & 1) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      sub_1001F90B0();
      if ((v13 & 1) == 0) {
        goto LABEL_18;
      }
    }
  }
  else
  {
    sub_1001F2394(v12, v6);
    unint64_t v14 = sub_10016DB60(0x6F69746175746361, 0xE90000000000006ELL);
    if ((v13 & 1) != (v15 & 1))
    {
LABEL_19:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    unint64_t v9 = v14;
    if ((v13 & 1) == 0)
    {
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
  }
  uint64_t v6 = (uint64_t)v20;
  uint64_t v7 = *(void **)(v20[7] + 8 * v9);
  uint64_t v19 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_16;
  }
LABEL_12:
  unint64_t v17 = v7[2];
  unint64_t v16 = v7[3];
  if (v17 >= v16 >> 1) {
    uint64_t v7 = sub_100102E88((void *)(v16 > 1), v17 + 1, 1, v7);
  }
  v7[2] = v17 + 1;
  sub_1000FE5FC(&v21, &v7[4 * v17 + 4]);
  uint64_t v19 = v7;
  sub_1001E41F4((uint64_t *)&v19, 1, &v20, v9, 0x6F69746175746361, 0xE90000000000006ELL, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_1001F62BC, (void (*)(uint64_t, void))sub_1001F30C4);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v6;
  return result;
}

void sub_1001E6384(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v80 = a2;
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v68 - v11;
  if (a1)
  {
    uint64_t v77 = v13;
    uint64_t v73 = v12;
    char v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    uint64_t v74 = a3 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger;
    unsigned __int8 v76 = (uint8_t *)(v8 + 16);
    double v75 = v15;
    ((void (*)(char *))v15)((char *)&v68 - v11);
    id v16 = a1;
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v78 = v8;
    id v72 = a1;
    if (v19)
    {
      uint64_t v20 = swift_slowAlloc();
      os_log_t v70 = v17;
      uint64_t v21 = v20;
      uint64_t v22 = swift_slowAlloc();
      id v79 = v16;
      Swift::String v69 = (void *)v22;
      uint64_t v71 = swift_slowAlloc();
      uint64_t v82 = v71;
      *(_DWORD *)uint64_t v21 = 138412546;
      uint64_t v81 = (uint64_t)v79;
      id v23 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v69 = a1;

      *(_WORD *)(v21 + 12) = 2080;
      uint64_t v24 = DockState.description.getter();
      uint64_t v81 = sub_1000993AC(v24, v25, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v26 = v70;
      _os_log_impl((void *)&_mh_execute_header, v70, v18, "Setting %@ state to d=%s", (uint8_t *)v21, 0x16u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      id v16 = v79;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v27 = v78;
    }
    else
    {

      uint64_t v27 = v8;
    }
    uint64_t v34 = *(void (**)(char *, uint64_t))(v27 + 8);
    v34(v14, v7);
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    unint64_t v35 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
    if (v35)
    {
      sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
      id v36 = v35;
      Swift::String v37 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
      static NSObject.== infix(_:_:)();
    }
    sub_1001891D0(v16);
    if (v38)
    {
      id v33 = v38;
      if (sub_100197B5C())
      {
        type metadata accessor for DockCoreManager();
        if ((static DockCoreManager.debugAllowed.getter() & 1) == 0
          || (DockCoreInfo.type.getter(),
              uint64_t v39 = DockCoreAccessoryType.rawValue.getter(),
              v39 != DockCoreAccessoryType.rawValue.getter()))
        {
LABEL_29:
          (*(void (**)(uint64_t, uint64_t, void))(a4 + 16))(a4, 1, 0);
          unint64_t v67 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
          sub_100113A68((uint64_t)v67);

          goto LABEL_30;
        }
        uint64_t v40 = DockState.rawValue.getter();
        if (v40 == DockState.rawValue.getter()
          && (uint64_t v41 = DockState.rawValue.getter(), v41 != DockState.rawValue.getter()))
        {
          v75(v77, v74, v7);
          Swift::String v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v62, v63))
          {
            uint64_t v64 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v64 = 0;
            _os_log_impl((void *)&_mh_execute_header, v62, v63, "Mock device - not scanning, immediately marking as connected", v64, 2u);
            swift_slowDealloc();
          }

          v34((char *)v77, v7);
          id v65 = v16;
          sub_100189CF4(v72);
        }
        else
        {
          uint64_t v42 = DockState.rawValue.getter();
          if (v42 == DockState.rawValue.getter())
          {
            uint64_t v43 = DockState.rawValue.getter();
            if (v43 != DockState.rawValue.getter())
            {
              Swift::String v44 = v73;
              v75((uint64_t)v73, v74, v7);
              id v33 = v33;
              uint64_t v45 = Logger.logObject.getter();
              uint64_t v46 = v7;
              os_log_type_t v47 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v45, v47))
              {
                uint64_t v80 = v46;
                uint64_t v48 = (uint8_t *)swift_slowAlloc();
                uint64_t v77 = swift_slowAlloc();
                uint64_t v82 = v77;
                unsigned __int8 v76 = v48;
                *(_DWORD *)uint64_t v48 = 136315138;
                double v75 = (void (*)(uint64_t, uint64_t, uint64_t))(v48 + 4);
                Swift::String v49 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
                uint64_t v50 = a4;
                uint64_t v51 = DockCoreInfo.name.getter();
                id v79 = v16;
                unint64_t v53 = v52;

                uint64_t v54 = v51;
                a4 = v50;
                uint64_t v81 = sub_1000993AC(v54, v53, &v82);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                id v16 = v79;
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v45, v47, "Tearing down debug accessory for %s", v76, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                uint64_t v55 = v73;
                uint64_t v56 = v80;
              }
              else
              {

                uint64_t v55 = v44;
                uint64_t v56 = v46;
              }
              v34(v55, v56);
              sub_100189CF4(0);
              uint64_t v66 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
              sub_1001969C4();

              goto LABEL_29;
            }
          }
        }
        (*(void (**)(uint64_t, uint64_t, void))(a4 + 16))(a4, 1, 0);
        goto LABEL_22;
      }
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v58;
    *(void *)(inited + 72) = &type metadata for String;
    strcpy((char *)(inited + 48), "not permitted");
    *(_WORD *)(inited + 62) = -4864;
    sub_1001E9E0C(inited);
    id v59 = objc_allocWithZone((Class)NSError);
    NSString v60 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v33 = [v59 initWithDomain:v60 code:1 userInfo:isa];

    (*(void (**)(uint64_t, void, id))(a4 + 16))(a4, 0, v33);
LABEL_22:

    goto LABEL_30;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t v28 = swift_initStackObject();
  *(_OWORD *)(v28 + 16) = xmmword_100240BE0;
  *(void *)(v28 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v28 + 40) = v29;
  *(void *)(v28 + 72) = &type metadata for String;
  *(void *)(v28 + 48) = 0xD000000000000012;
  *(void *)(v28 + 56) = 0x8000000100234C00;
  sub_1001E9E0C(v28);
  id v30 = objc_allocWithZone((Class)NSError);
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v32 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v33 = [v30 initWithDomain:v31 code:72 userInfo:v32];

  (*(void (**)(uint64_t, void, id))(a4 + 16))(a4, 0, v33);
LABEL_30:
}

void sub_1001E6E0C(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    id v5 = a1;
    int v6 = AccessorySystemEvent.header.getter();
    type metadata accessor for AccessorySystemEvent();
    uint64_t v7 = &unk_1002A7000;
    uint64_t v8 = &unk_1002B1000;
    if (v6 == static AccessorySystemEvent.kHeaderCameraShutter.getter())
    {
      int v9 = AccessorySystemEvent.payload.getter();
      if (v9 == static AccessorySystemEvent.kHeaderEventRelease.getter())
      {
        if (qword_1002A7C00 != -1) {
          swift_once();
        }
        uint64_t v10 = qword_1002B1628;
        uint64_t v11 = sub_10011468C();
        uint64_t v32 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
        uint64_t v12 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
        swift_retain();
        os_unfair_lock_lock(v12 + 4);
        swift_release();
        uint64_t v13 = *(void *)(v11 + 16);
        p_info = &OBJC_METACLASS____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry.info;
        if (v13)
        {
          uint64_t v31 = v10;
          uint64_t v15 = v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_dockKitApps;
          swift_beginAccess();
          id v16 = (uint64_t *)(v11 + 40);
          do
          {
            if (*(void *)(*(void *)v15 + 16))
            {
              uint64_t v18 = *(v16 - 1);
              uint64_t v17 = *v16;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_10016DB60(v18, v17);
              LOBYTE(v18) = v19;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v18)
              {
                swift_bridgeObjectRelease();
                uint64_t v8 = (void *)&unk_1002B1000;
                uint64_t v7 = (void *)&unk_1002A7000;
                uint64_t v10 = v31;
                goto LABEL_17;
              }
            }
            v16 += 2;
            --v13;
          }
          while (v13);
          swift_bridgeObjectRelease();
          uint64_t v8 = (void *)&unk_1002B1000;
          uint64_t v7 = (void *)&unk_1002A7000;
          uint64_t v10 = v31;
          p_info = (__objc2_class_ro **)(&OBJC_METACLASS____TtCC14dockaccessoryd17AccessoryKeystore24AccessoryPeripheralEntry
                                       + 32);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        unint64_t v25 = (char *)p_info[137] + v10;
        swift_beginAccess();
        if (!*(void *)(*(void *)v25 + 16)
          || (swift_bridgeObjectRetain(),
              sub_10016DB60(0xD000000000000018, 0x8000000100237420),
              char v27 = v26,
              swift_bridgeObjectRelease(),
              (v27 & 1) == 0))
        {
          id v30 = *(os_unfair_lock_s **)(v10 + v32);
          swift_retain();
          os_unfair_lock_unlock(v30 + 4);
          swift_release();
          sub_10018839C();
LABEL_21:
          (*(void (**)(uint64_t, uint64_t, void))(a3 + 16))(a3, 1, 0);
          goto LABEL_22;
        }
LABEL_17:
        uint64_t v28 = *(os_unfair_lock_s **)(v10 + v32);
        swift_retain();
        os_unfair_lock_unlock(v28 + 4);
        swift_release();
      }
    }
    if (v7[384] != -1) {
      swift_once();
    }
    id v29 = objc_retain(*(id *)(*(void *)(v8[197] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                            + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server));
    sub_100168800((uint64_t)v5, a2);

    goto LABEL_21;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v21;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0xD000000000000012;
  *(void *)(inited + 56) = 0x8000000100234C00;
  sub_1001E9E0C(inited);
  id v22 = objc_allocWithZone((Class)NSError);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v22 initWithDomain:v23 code:72 userInfo:isa];

  (*(void (**)(uint64_t, void, id))(a3 + 16))(a3, 0, v5);
LABEL_22:
}

void sub_1001E7224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v33 - v9;
  id v11 = [self currentConnection];
  if (v11)
  {
    uint64_t v12 = v11;
    int v13 = [v11 processIdentifier];
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a1 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger, v4);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v16 = 67109120;
      int v34 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Client %d registering for debug notifications", v16, 8u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_1002B1628;
    uint64_t v18 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    char v19 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    id v20 = v12;
    swift_retain();
    os_unfair_lock_lock(v19 + 4);
    swift_release();
    uint64_t v21 = (uint64_t *)(v17 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients);
    swift_beginAccess();
    id v22 = v20;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v33 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    sub_1001F533C((uint64_t)v22, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v21 = v33;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v24 = *(os_unfair_lock_s **)(v17 + v18);
    swift_retain();
    os_unfair_lock_unlock(v24 + 4);

    swift_release();
    (*(void (**)(uint64_t, uint64_t, void))(a2 + 16))(a2, 1, 0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger, v4);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      char v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed fetching current NSXPCConnection, cannot construct client", v27, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v29;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000029;
    *(void *)(inited + 56) = 0x8000000100234C60;
    sub_1001E9E0C(inited);
    id v30 = objc_allocWithZone((Class)NSError);
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v22 = [v30 initWithDomain:v31 code:100 userInfo:isa];

    (*(void (**)(uint64_t, void, id))(a2 + 16))(a2, 0, v22);
  }
}

void sub_1001E76F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v31 - v9;
  id v11 = [self currentConnection];
  if (v11)
  {
    uint64_t v12 = v11;
    int v13 = [v11 processIdentifier];
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a1 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger, v4);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v16 = 67109120;
      _OWORD v31[2] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Client %d de-registering for debug notifications", v16, 8u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_1002B1628;
    uint64_t v18 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    char v19 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    id v20 = v12;
    swift_retain();
    os_unfair_lock_lock(v19 + 4);
    swift_release();
    swift_beginAccess();
    uint64_t v21 = (void *)sub_1001ED0B8(v13);
    swift_endAccess();

    id v22 = *(os_unfair_lock_s **)(v17 + v18);
    swift_retain();
    os_unfair_lock_unlock(v22 + 4);

    swift_release();
    (*(void (**)(uint64_t, uint64_t, void))(a2 + 16))(a2, 1, 0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger, v4);
    NSString v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed fetching current NSXPCConnection, cannot construct client", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v27;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000029;
    *(void *)(inited + 56) = 0x8000000100234C60;
    sub_1001E9E0C(inited);
    id v28 = objc_allocWithZone((Class)NSError);
    NSString v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v20 = [v28 initWithDomain:v29 code:100 userInfo:isa];

    (*(void (**)(uint64_t, void, id))(a2 + 16))(a2, 0, v20);
  }
}

uint64_t sub_1001E7B88(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v5 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_clientQueue);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &v14;
  *(void *)(v6 + 24) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1001E95F0;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_1001E972C;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E1D18;
  aBlock[3] = &unk_10027A970;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = v5;
  id v10 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v9, v8);

  _Block_release(v8);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a1)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, void))(a3 + 16))(a3, isa, 0);
    swift_bridgeObjectRelease();

    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001E7D54(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v14 = _swiftEmptyArrayStorage;
  uint64_t v5 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_clientQueue);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &v14;
  *(void *)(v6 + 24) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1001E95BC;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_1001E972C;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E1D18;
  aBlock[3] = &unk_10027A8F8;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = v5;
  id v10 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v9, v8);

  _Block_release(v8);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a1)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, void))(a3 + 16))(a3, isa, 0);
    swift_bridgeObjectRelease();

    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001E7F20(char a1, uint64_t a2, uint64_t a3)
{
  int v13 = _swiftEmptyArrayStorage;
  uint64_t v5 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_clientQueue);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &v13;
  *(unsigned char *)(v6 + 24) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1001E954C;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_1001E972C;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E1D18;
  aBlock[3] = &unk_10027A880;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = v5;
  swift_retain();
  swift_release();
  dispatch_sync(v9, v8);

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, void))(a3 + 16))(a3, isa, 0);
    swift_bridgeObjectRelease();

    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001E80E4(char a1, uint64_t a2, uint64_t a3)
{
  int v13 = _swiftEmptyArrayStorage;
  uint64_t v5 = *(void **)(a2 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_clientQueue);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = &v13;
  *(unsigned char *)(v6 + 24) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1001E94DC;
  *(void *)(v7 + 24) = v6;
  aBlock[4] = sub_1001E9514;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E1D18;
  aBlock[3] = &unk_10027A808;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = v5;
  swift_retain();
  swift_release();
  dispatch_sync(v9, v8);

  _Block_release(v8);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v8)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, void))(a3 + 16))(a3, isa, 0);
    swift_bridgeObjectRelease();

    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001E82A8(void (**a1)(void, void, void))
{
  unint64_t v80 = sub_1001EB790((uint64_t)_swiftEmptyArrayStorage);
  if (qword_1002A7C00 == -1) {
    goto LABEL_2;
  }
LABEL_81:
  swift_once();
LABEL_2:
  uint64_t v1 = qword_1002B1628;
  sub_1001939C8(qword_1002B1628, (uint64_t)&v80);
  sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyDebugClients);
  swift_beginAccess();
  uint64_t v5 = *v4;
  uint64_t v6 = *(os_unfair_lock_s **)(v1 + v2);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v6 + 4);
  swift_release();
  int64_t v7 = 0;
  uint64_t v8 = v5 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v74 = (unint64_t)(v9 + 63) >> 6;
  if (v11)
  {
LABEL_5:
    unint64_t v12 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v13 = v12 | (v7 << 6);
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_77;
    }
    if (v14 >= v74) {
      goto LABEL_38;
    }
    unint64_t v15 = *(void *)(v8 + 8 * v14);
    ++v7;
    if (!v15)
    {
      int64_t v7 = v14 + 1;
      if (v14 + 1 >= v74) {
        goto LABEL_38;
      }
      unint64_t v15 = *(void *)(v8 + 8 * v7);
      if (!v15)
      {
        int64_t v7 = v14 + 2;
        if (v14 + 2 >= v74) {
          goto LABEL_38;
        }
        unint64_t v15 = *(void *)(v8 + 8 * v7);
        if (!v15)
        {
          int64_t v16 = v14 + 3;
          if (v16 >= v74) {
            goto LABEL_38;
          }
          unint64_t v15 = *(void *)(v8 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              int64_t v7 = v16 + 1;
              if (__OFADD__(v16, 1)) {
                goto LABEL_79;
              }
              if (v7 >= v74) {
                goto LABEL_38;
              }
              unint64_t v15 = *(void *)(v8 + 8 * v7);
              ++v16;
              if (v15) {
                goto LABEL_19;
              }
            }
          }
          int64_t v7 = v16;
        }
      }
    }
LABEL_19:
    unint64_t v11 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_20:
    int v17 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v13);
    uint64_t v18 = (void *)v80;
    uint64_t v19 = *(void *)(v80 + 16);
    id v20 = *(id *)(*(void *)(v5 + 56) + 8 * v13);
    if (!v19 || (sub_10016DB60(0x6775626564, 0xE500000000000000), (v21 & 1) == 0))
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v78 = v18;
      sub_1001F6244((uint64_t)_swiftEmptyArrayStorage, 0x6775626564, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
      uint64_t v18 = (void *)v78;
      swift_bridgeObjectRelease();
    }
    id v79 = &type metadata for Int32;
    LODWORD(v78) = v17;
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v77 = v18;
    unint64_t v80 = 0x8000000000000000;
    unint64_t v25 = sub_10016DB60(0x6775626564, 0xE500000000000000);
    uint64_t v26 = v18[2];
    BOOL v27 = (v24 & 1) == 0;
    uint64_t v28 = v26 + v27;
    if (__OFADD__(v26, v27))
    {
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
      goto LABEL_78;
    }
    char v29 = v24;
    if (v18[3] < v28) {
      break;
    }
    if (v23)
    {
      if ((v24 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      sub_1001F90B0();
      if ((v29 & 1) == 0)
      {
LABEL_37:
        __break(1u);
LABEL_38:
        swift_release();
        uint64_t v35 = qword_1002B1628;
        sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease();
        uint64_t v36 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
        Swift::String v37 = *(os_unfair_lock_s **)(v35 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
        swift_retain();
        os_unfair_lock_lock(v37 + 4);
        swift_release();
        Swift::String v38 = (uint64_t *)(v35 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients);
        swift_beginAccess();
        uint64_t v39 = *v38;
        uint64_t v40 = *(os_unfair_lock_s **)(v35 + v36);
        swift_bridgeObjectRetain();
        swift_retain();
        os_unfair_lock_unlock(v40 + 4);
        swift_release();
        int64_t v41 = 0;
        uint64_t v42 = v39 + 64;
        uint64_t v43 = 1 << *(unsigned char *)(v39 + 32);
        uint64_t v44 = -1;
        if (v43 < 64) {
          uint64_t v44 = ~(-1 << v43);
        }
        unint64_t v45 = v44 & *(void *)(v39 + 64);
        int64_t v75 = (unint64_t)(v43 + 63) >> 6;
        if (v45)
        {
LABEL_41:
          unint64_t v46 = __clz(__rbit64(v45));
          v45 &= v45 - 1;
          unint64_t v47 = v46 | (v41 << 6);
          goto LABEL_56;
        }
        while (1)
        {
          int64_t v48 = v41 + 1;
          if (__OFADD__(v41, 1)) {
            break;
          }
          if (v48 >= v75) {
            goto LABEL_74;
          }
          unint64_t v49 = *(void *)(v42 + 8 * v48);
          ++v41;
          if (!v49)
          {
            int64_t v41 = v48 + 1;
            if (v48 + 1 >= v75) {
              goto LABEL_74;
            }
            unint64_t v49 = *(void *)(v42 + 8 * v41);
            if (!v49)
            {
              int64_t v41 = v48 + 2;
              if (v48 + 2 >= v75) {
                goto LABEL_74;
              }
              unint64_t v49 = *(void *)(v42 + 8 * v41);
              if (!v49)
              {
                int64_t v50 = v48 + 3;
                if (v50 >= v75) {
                  goto LABEL_74;
                }
                unint64_t v49 = *(void *)(v42 + 8 * v50);
                if (!v49)
                {
                  while (1)
                  {
                    int64_t v41 = v50 + 1;
                    if (__OFADD__(v50, 1)) {
                      goto LABEL_80;
                    }
                    if (v41 >= v75) {
                      goto LABEL_74;
                    }
                    unint64_t v49 = *(void *)(v42 + 8 * v41);
                    ++v50;
                    if (v49) {
                      goto LABEL_55;
                    }
                  }
                }
                int64_t v41 = v50;
              }
            }
          }
LABEL_55:
          unint64_t v45 = (v49 - 1) & v49;
          unint64_t v47 = __clz(__rbit64(v49)) + (v41 << 6);
LABEL_56:
          int v51 = *(_DWORD *)(*(void *)(v39 + 48) + 4 * v47);
          unint64_t v52 = (void *)v80;
          uint64_t v53 = *(void *)(v80 + 16);
          id v54 = *(id *)(*(void *)(v39 + 56) + 8 * v47);
          if (!v53 || (sub_10016DB60(0x73726F736E6573, 0xE700000000000000), (v55 & 1) == 0))
          {
            char v56 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v78 = v52;
            sub_1001F6244((uint64_t)_swiftEmptyArrayStorage, 0x73726F736E6573, 0xE700000000000000, v56);
            unint64_t v52 = (void *)v78;
            swift_bridgeObjectRelease();
          }
          id v79 = &type metadata for Int32;
          LODWORD(v78) = v51;
          char v57 = swift_isUniquelyReferenced_nonNull_native();
          unsigned __int8 v76 = v52;
          unint64_t v80 = 0x8000000000000000;
          unint64_t v59 = sub_10016DB60(0x73726F736E6573, 0xE700000000000000);
          uint64_t v60 = v52[2];
          BOOL v61 = (v58 & 1) == 0;
          uint64_t v62 = v60 + v61;
          if (__OFADD__(v60, v61)) {
            goto LABEL_76;
          }
          char v63 = v58;
          if (v52[3] >= v62)
          {
            if (v57)
            {
              if ((v58 & 1) == 0) {
                goto LABEL_73;
              }
            }
            else
            {
              sub_1001F90B0();
              if ((v63 & 1) == 0) {
                goto LABEL_73;
              }
            }
          }
          else
          {
            sub_1001F2394(v62, v57);
            unint64_t v64 = sub_10016DB60(0x73726F736E6573, 0xE700000000000000);
            if ((v63 & 1) != (v65 & 1)) {
              goto LABEL_82;
            }
            unint64_t v59 = v64;
            if ((v63 & 1) == 0)
            {
LABEL_73:
              __break(1u);
LABEL_74:
              swift_release();
              uint64_t v69 = swift_bridgeObjectRetain();
              sub_1001E19D0(v69);
              swift_bridgeObjectRelease();
              id v70 = objc_allocWithZone((Class)type metadata accessor for ClientDictionary());
              uint64_t v71 = (void *)ClientDictionary.init(dictionary:)();
              ((void (**)(void, void *, void))a1)[2](a1, v71, 0);

              return swift_bridgeObjectRelease();
            }
          }
          uint64_t v66 = *(void **)(v52[7] + 8 * v59);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v66 = sub_100102E88(0, v66[2] + 1, 1, v66);
          }
          unint64_t v68 = v66[2];
          unint64_t v67 = v66[3];
          if (v68 >= v67 >> 1) {
            uint64_t v66 = sub_100102E88((void *)(v67 > 1), v68 + 1, 1, v66);
          }
          v66[2] = v68 + 1;
          sub_1000FE5FC(&v78, &v66[4 * v68 + 4]);
          *(void *)(v76[7] + 8 * v59) = v66;
          unint64_t v80 = (unint64_t)v76;

          if (v45) {
            goto LABEL_41;
          }
        }
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
    }
LABEL_30:
    uint64_t v32 = *(void **)(v18[7] + 8 * v25);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v32 = sub_100102E88(0, v32[2] + 1, 1, v32);
    }
    unint64_t v34 = v32[2];
    unint64_t v33 = v32[3];
    if (v34 >= v33 >> 1) {
      uint64_t v32 = sub_100102E88((void *)(v33 > 1), v34 + 1, 1, v32);
    }
    v32[2] = v34 + 1;
    sub_1000FE5FC(&v78, &v32[4 * v34 + 4]);
    *(void *)(v77[7] + 8 * v25) = v32;
    unint64_t v80 = (unint64_t)v77;

    if (v11) {
      goto LABEL_5;
    }
  }
  sub_1001F2394(v28, v23);
  unint64_t v30 = sub_10016DB60(0x6775626564, 0xE500000000000000);
  if ((v29 & 1) == (v31 & 1))
  {
    unint64_t v25 = v30;
    if ((v29 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
LABEL_82:
  _Block_release(a1);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001E8A78(uint64_t a1)
{
  sub_1000992E8(&qword_1002AD328);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10023FD30;
  strcpy((char *)(inited + 32), "dockaccessoryd");
  *(unsigned char *)(inited + 47) = -18;
  uint64_t v3 = *(void *)algn_1002B1318;
  *(void *)(inited + 48) = qword_1002B1310;
  *(void *)(inited + 56) = v3;
  strcpy((char *)(inited + 64), "dockkit-core");
  *(unsigned char *)(inited + 77) = 0;
  *(_WORD *)(inited + 78) = -5120;
  *(void *)(inited + 80) = 0x302E313632;
  *(void *)(inited + 88) = 0xE500000000000000;
  swift_bridgeObjectRetain();
  sub_1001EA374(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(a1 + 16))(a1, isa, 0);
  swift_bridgeObjectRelease();
}

void sub_1001E8B84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC14dockaccessoryd9dockDebug_logger, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Got here! Do the migration", v10, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  unint64_t v11 = (void *)sub_1000FE93C();
  (*(void (**)(uint64_t, BOOL, void *))(a2 + 16))(a2, v11 == 0, v11);
}

uint64_t sub_1001E8D48(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v6 = [a1 processIdentifier];
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [a1 valueForEntitlement:v7];

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v51, 0, 32);
  }
  sub_1000A5BE8((uint64_t)v51, (uint64_t)&aBlock);
  if (v48)
  {
    int v9 = swift_dynamicCast();
    if (v9) {
      uint64_t v10 = v43;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v9) {
      uint64_t v11 = v44;
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&aBlock, &qword_1002AA5F0);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v39 = sub_10019AE8C(a1);
  uint64_t v13 = v12;
  if (qword_1002A7C28 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100096F64(v2, (uint64_t)qword_1002AD2B0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v14, v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  uint64_t v40 = v5;
  os_log_type_t v17 = v16;
  BOOL v18 = os_log_type_enabled(v15, v16);
  unsigned int v42 = v6;
  uint64_t v41 = v10;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v38 = v3;
    uint64_t v20 = v19;
    *(void *)&v51[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 67109634;
    LODWORD(aBlock) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 8) = 2080;
    uint64_t v37 = v2;
    uint64_t aBlock = v10;
    uint64_t v46 = v11;
    swift_bridgeObjectRetain();
    sub_1000992E8((uint64_t *)&unk_1002A82C0);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t aBlock = sub_1000993AC(v21, v22, (uint64_t *)v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 18) = 2080;
    uint64_t aBlock = v39;
    uint64_t v46 = v13;
    swift_bridgeObjectRetain();
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t aBlock = sub_1000993AC(v23, v24, (uint64_t *)v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v17, "new connection from pid %d, appID entitlement %s, appID %s", (uint8_t *)v20, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v40, v2);
  }
  unint64_t v25 = self;
  uint64_t v40 = (char *)[v25 interfaceWithProtocol:&OBJC_PROTOCOL____TtP11DockKitCore23DockDaemonDebugProtocol_];
  uint64_t v26 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v27 = swift_allocObject();
  unsigned int v28 = v42;
  *(_DWORD *)(v27 + 16) = v42;
  uint64_t v29 = v41;
  *(void *)(v27 + 24) = v41;
  *(void *)(v27 + 32) = v11;
  *(void *)(v27 + 40) = v26;
  unint64_t v49 = sub_1001E9458;
  uint64_t v50 = v27;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v46 = 1107296256;
  unint64_t v47 = sub_1001468DC;
  int64_t v48 = &unk_10027A740;
  unint64_t v30 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  [a1 setInvalidationHandler:v30];
  _Block_release(v30);
  uint64_t v31 = swift_allocObject();
  *(_DWORD *)(v31 + 16) = v28;
  *(void *)(v31 + 24) = v29;
  *(void *)(v31 + 32) = v11;
  *(void *)(v31 + 40) = v26;
  unint64_t v49 = sub_1001E94A0;
  uint64_t v50 = v31;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v46 = 1107296256;
  unint64_t v47 = sub_1001468DC;
  int64_t v48 = &unk_10027A790;
  uint64_t v32 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  [a1 setInterruptionHandler:v32];
  _Block_release(v32);
  unint64_t v33 = v40;
  [a1 setExportedInterface:v40];
  id v34 = [v25 interfaceWithProtocol:&OBJC_PROTOCOL____TtP11DockKitCore23DockClientDebugProtocol_];
  [a1 setRemoteObjectInterface:v34];
  id v35 = [objc_allocWithZone((Class)type metadata accessor for dockDebug()) init];
  [a1 setExportedObject:v35];
  [a1 resume];
  swift_release();

  return 1;
}

uint64_t sub_1001E941C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001E9458()
{
  return sub_1001E3BF0(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been invalidated");
}

uint64_t sub_1001E9484(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001E9494()
{
  return swift_release();
}

uint64_t sub_1001E94A0()
{
  return sub_1001E3BF0(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been interrupted");
}

uint64_t sub_1001E94CC()
{
  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1001E94DC()
{
  return sub_1001E2814(*(void ***)(v0 + 16), *(unsigned char *)(v0 + 24), (SEL *)&selRef_stopSearchWithCalibrate_);
}

uint64_t sub_1001E9504()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E9514()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001E953C()
{
  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1001E954C()
{
  return sub_1001E2814(*(void ***)(v0 + 16), *(unsigned char *)(v0 + 24), (SEL *)&selRef_searchWithCalibrate_);
}

uint64_t sub_1001E9574()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E9584()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E95BC()
{
  return sub_1001E23D4(*(void ***)(v0 + 16), *(void *)(v0 + 24), (SEL *)&selRef_dumpTrackerStateWithPath_);
}

uint64_t sub_1001E95E0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E95F0()
{
  return sub_1001E23D4(*(void ***)(v0 + 16), *(void *)(v0 + 24), (SEL *)&selRef_dumpTrackerDiagnosticsWithPath_);
}

uint64_t sub_1001E9614()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E9624()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E965C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AD370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E96C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AD370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001E9760(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD598);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    sub_1000CC298(v7);
    unint64_t result = sub_10016DB60(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (uint64_t *)(v2[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E9888(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD608);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    long long v11 = *v4;
    id v5 = *((id *)v4 - 1);
    unint64_t result = sub_10016DC20((uint64_t)v5);
    if (v7) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v11;
    uint64_t v8 = v2[2];
    BOOL v9 = __OFADD__(v8, 1);
    uint64_t v10 = v8 + 1;
    if (v9) {
      goto LABEL_11;
    }
    v2[2] = v10;
    uint64_t v4 = (_OWORD *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E9998(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8((uint64_t *)&unk_1002AD550);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_10016DB60(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E9AB4(uint64_t a1)
{
  return sub_1001EB490(a1, &qword_1002AD5E0);
}

unint64_t sub_1001E9AC0(uint64_t a1)
{
  return sub_1001EB79C(a1, &qword_1002AD5F8);
}

unint64_t sub_1001E9ACC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD4A8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_10016DB60(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v9 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E9BF8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD438);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10016DB60(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E9D0C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8((uint64_t *)&unk_1002AD5B0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    unint64_t result = sub_10016DC64();
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v4 += 2;
    v2[2] = v12;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E9E0C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002A97B0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000B9BD4(v6, (uint64_t)&v15, &qword_1002AD460);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10016DB60(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000FE5FC(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001E9F44(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002AD600);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD4E8);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000B9BD4(v12, (uint64_t)v5, &qword_1002AD600);
    unint64_t result = sub_10016DC68((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = v7[7];
    uint64_t v20 = type metadata accessor for DockKitIDSInfo();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v16, v9, v20);
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EA178(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002AD5E8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8((uint64_t *)&unk_1002AD490);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = &v5[*(int *)(v2 + 48)];
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000B9BD4(v12, (uint64_t)v5, &qword_1002AD5E8);
    unint64_t result = sub_10016DC68((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    uint64_t v19 = (void *)(v7[7] + 16 * v16);
    uint64_t v20 = *((void *)v9 + 1);
    *uint64_t v19 = *(void *)v9;
    v19[1] = v20;
    uint64_t v21 = v7[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v7[2] = v23;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EA374(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD448);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10016DB60(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *unint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EA498(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD4B8);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000B9BD4(v6, (uint64_t)v15, &qword_1002AD4C0);
    unint64_t result = sub_10016DD3C((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1000FE5FC(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EA5DC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD500);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000B9BD4(v6, (uint64_t)&v13, &qword_1002AD508);
    uint64_t v7 = v13;
    unint64_t result = sub_10016DC64(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1000FE5FC(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EA70C(uint64_t a1)
{
  return sub_1001EA724(a1, &qword_1002AD4F8);
}

unint64_t sub_1001EA718(uint64_t a1)
{
  return sub_1001EA724(a1, &qword_1002AD4F0);
}

unint64_t sub_1001EA724(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *v5;
    id v7 = (id)*(v5 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_10016DC64(v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v3[6] + v10) = v7;
    *(void *)(v3[7] + v10) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EA82C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8((uint64_t *)&unk_1002AD5A0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    id v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    unint64_t result = sub_10016DED8((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v7;
    uint64_t v10 = (void *)(v2[7] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EA944(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002AD520);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    id v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8((uint64_t *)&unk_1002AD510);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000B9BD4(v12, (uint64_t)v5, &qword_1002AD520);
    unint64_t result = sub_10016DF28((uint64_t)v5);
    if (v15) {
      break;
    }
    unint64_t v16 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v17 = v7[6];
    uint64_t v18 = type metadata accessor for ComponentType();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v16, v5, v18);
    *(void *)(v7[7] + 8 * v16) = *(void *)&v5[v9];
    uint64_t v19 = v7[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_11;
    }
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EAB38(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD5D0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    unint64_t v6 = *v4;
    id v7 = (id)*(v4 - 2);
    sub_1000A618C(v5, v6);
    unint64_t result = sub_10016DED8((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v7;
    uint64_t v10 = (uint64_t *)(v2[7] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EAC54(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002AD530);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    id v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD538);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  id v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  char v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000B9BD4(v12, (uint64_t)v5, &qword_1002AD530);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_10016DB60(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for Date();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EAE54(uint64_t a1)
{
  return sub_1001EAE6C(a1, &qword_1002AD570);
}

unint64_t sub_1001EAE60(uint64_t a1)
{
  return sub_1001EAE6C(a1, &qword_1002AD588);
}

unint64_t sub_1001EAE6C(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = a1 + 40;
  while (1)
  {
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(void *)v5;
    uint64_t v8 = *(void *)(v5 + 8);
    long long v17 = *(_OWORD *)(v5 + 16);
    uint64_t v9 = *(void *)(v5 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10016DB60(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    uint64_t v13 = v3[7] + 32 * result;
    *(void *)uint64_t v13 = v8;
    *(_OWORD *)(v13 + 8) = v17;
    *(void *)(v13 + 24) = v9;
    uint64_t v14 = v3[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5 += 48;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EAFB8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD548);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    unint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    sub_1000A618C(v7, v8);
    unint64_t result = sub_10016DB60(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v2[6] + 16 * result);
    *char v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (uint64_t *)(v2[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EB0E0(uint64_t a1)
{
  return sub_1001EB24C(a1, &qword_1002AD5C8, (uint64_t (*)(id))sub_10016E04C);
}

unint64_t sub_1001EB100(uint64_t a1)
{
  return sub_1001EB24C(a1, &qword_1002AD5C0, (uint64_t (*)(id))sub_10016DFFC);
}

unint64_t sub_1001EB120(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8((uint64_t *)&unk_1002AA868);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 1);
    uint64_t v6 = *v4;
    swift_retain();
    id v7 = v6;
    unint64_t result = sub_10016DE10(v5);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v5;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EB22C(uint64_t a1)
{
  return sub_1001EB24C(a1, &qword_1002AA878, (uint64_t (*)(id))sub_10016DE88);
}

unint64_t sub_1001EB24C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(a2);
  uint64_t v5 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  id v7 = (void **)(a1 + 40);
  while (1)
  {
    unint64_t v8 = *v7;
    id v9 = *(v7 - 1);
    id v10 = v8;
    unint64_t result = a3(v9);
    if (v12) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = 8 * result;
    *(void *)(v5[6] + v13) = v9;
    *(void *)(v5[7] + v13) = v10;
    uint64_t v14 = v5[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5[2] = v16;
    v7 += 2;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EB364(uint64_t a1)
{
  return sub_1001EB79C(a1, &qword_1002AD4B0);
}

unint64_t sub_1001EB370(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002AD488);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10016DB60(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v10 = (uint64_t *)(v2[6] + 16 * result);
    *id v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EB484(uint64_t a1)
{
  return sub_1001EB490(a1, &qword_1002AD4A0);
}

unint64_t sub_1001EB490(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    unint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_10016DB60(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v12 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EB5A8(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002AD480);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(&qword_1002ACC50);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000B9BD4(v12, (uint64_t)v5, &qword_1002AD480);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_10016DB60(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for BTDiscoveredDevice();
    unint64_t result = sub_1001D5FB4(v9, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001EB790(uint64_t a1)
{
  return sub_1001EB79C(a1, (uint64_t *)&unk_1002AD450);
}

unint64_t sub_1001EB79C(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_1000992E8(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_10016DB60(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *unint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_1001EB8B4(uint64_t a1)
{
  uint64_t v3 = v1;
  Logger.init(subsystem:category:)();
  *(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_accessories] = &_swiftEmptyArrayStorage;
  uint64_t v4 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems;
  *(void *)&v3[v4] = sub_1001EB490((uint64_t)&_swiftEmptyArrayStorage, &qword_1002AD430);
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensors;
  *(void *)&v3[v5] = sub_1001EB490((uint64_t)&_swiftEmptyArrayStorage, &qword_1002AD428);
  uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuators;
  *(void *)&v3[v6] = sub_1001EB490((uint64_t)&_swiftEmptyArrayStorage, &qword_1002AD420);
  uint64_t v7 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentAttributes;
  *(void *)&v3[v7] = sub_1001EB79C((uint64_t)&_swiftEmptyArrayStorage, &qword_1002AD418);
  *(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId] = -1;
  *(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensorId] = -1;
  *(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId] = -1;
  *(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorType] = 1;
  *(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensor] = 0;
  *(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error] = 0;
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_parser;
  *(void *)&v3[v8] = [objc_allocWithZone((Class)NSXMLParser) init];
  uint64_t v9 = &v3[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_identifier];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);

  v14.receiver = v3;
  v14.super_class = (Class)type metadata accessor for AccessoryDescriptionParser();
  id v12 = [super init];
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
  return v12;
}

void *sub_1001EBAD4()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v5 = String.data(using:allowLossyConversion:)();
  unint64_t v7 = v6;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v7 >> 60 == 15) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error) = 0;
  swift_errorRelease();
  id v10 = objc_allocWithZone((Class)NSXMLParser);
  sub_1000A618C(v5, v7);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v12 = [v10 initWithData:isa];
  sub_1000A9990(v5, v7);

  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_parser;
  objc_super v14 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_parser);
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_parser) = v12;

  [*(id *)(v0 + v13) setDelegate:v0];
  sub_1001EBDB4();
  unsigned __int8 v15 = [*(id *)(v0 + v13) parse];
  uint64_t v16 = *(void *)(v0 + v9);
  if (v15)
  {
    if (!v16)
    {
      sub_1000A9990(v5, v7);
      swift_beginAccess();
      return (void *)swift_bridgeObjectRetain();
    }
  }
  else if (!v16)
  {
    uint64_t v17 = type metadata accessor for Errors();
    sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    strcpy(v18, "Unknown error");
    *((_WORD *)v18 + 7) = -4864;
    (*(void (**)(char *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v18, enum case for Errors.ParseFailure(_:), v17);
    goto LABEL_9;
  }
  swift_errorRetain();
LABEL_9:
  swift_willThrow();
  return (void *)sub_1000A9990(v5, v7);
}

uint64_t sub_1001EBDB4()
{
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId) = -1;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensorId) = -1;
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId) = -1;
  unint64_t v1 = sub_1001EB490((uint64_t)&_swiftEmptyArrayStorage, &qword_1002AD430);
  uint64_t v2 = (unint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems);
  swift_beginAccess();
  *uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  unint64_t v3 = sub_1001EB490((uint64_t)&_swiftEmptyArrayStorage, &qword_1002AD428);
  uint64_t v4 = (unint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensors);
  swift_beginAccess();
  *uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  unint64_t v5 = sub_1001EB490((uint64_t)&_swiftEmptyArrayStorage, &qword_1002AD420);
  unint64_t v6 = (unint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuators);
  swift_beginAccess();
  *unint64_t v6 = v5;
  swift_bridgeObjectRelease();
  unint64_t v7 = sub_1001EB79C((uint64_t)&_swiftEmptyArrayStorage, &qword_1002AD418);
  uint64_t v8 = (unint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentAttributes);
  swift_beginAccess();
  *uint64_t v8 = v7;
  return swift_bridgeObjectRelease();
}

id sub_1001EC0E8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryDescriptionParser();
  return [super dealloc];
}

uint64_t sub_1001EC254()
{
  return type metadata accessor for AccessoryDescriptionParser();
}

uint64_t type metadata accessor for AccessoryDescriptionParser()
{
  uint64_t result = qword_1002AD408;
  if (!qword_1002AD408) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001EC2A8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

void *sub_1001EC3B4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_1000992E8(&qword_1002A7F40);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1001EC41C(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unsigned __int8 *sub_1001EC498(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_1001EC598(a1, a2, a3);
}

unsigned __int8 *sub_1001EC4B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_1001EC814();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_1001EC598(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

unsigned __int8 *sub_1001EC598(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (int64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  unint64_t v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_1001EC814()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_1001EC894(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1001EC894(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_1001EC9EC(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_1001EC3B4(v9, 0),
          unint64_t v12 = sub_1001ECAEC((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_1001EC9EC(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_1001EC41C(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1001EC41C(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_1001ECAEC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    _OWORD v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_1001EC41C(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_1001EC41C(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

double sub_1001ECD00@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10016DB60(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001F66BC();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1000FE5FC((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1001F29C0(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1001ECE04(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    a1 = sub_10016DE10(a1);
    char v12 = v11;
    swift_bridgeObjectRelease();
    if (v12)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v8 = *v2;
      Swift::Int v16 = *v2;
      *unint64_t v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1001F6A60();
        Swift::Int v8 = v16;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0) {
    uint64_t v5 = *v2;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = __CocoaDictionary.lookup(_:)();
  swift_release();
  if (!v6)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRelease();
  uint64_t v7 = __CocoaDictionary.count.getter();
  Swift::Int v8 = sub_1001510D0(v5, v7);
  swift_retain();
  a1 = sub_10016DE10(a1);
  char v10 = v9;
  swift_release();
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:
  swift_release();
  uint64_t v14 = *(void *)(*(void *)(v8 + 56) + 8 * a1);
  sub_1001F2B98(a1, v8);
  *unint64_t v2 = v8;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_1001ECF68(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((v4 & 0xC000000000000001) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain();
    a1 = sub_10016DE88(a1);
    char v13 = v12;
    swift_bridgeObjectRelease();
    if (v13)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v9 = *v2;
      Swift::Int v17 = *v2;
      *unint64_t v2 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1001F6C08();
        Swift::Int v9 = v17;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v4 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  id v6 = (id)a1;
  uint64_t v7 = __CocoaDictionary.lookup(_:)();

  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_unknownObjectRelease();
  uint64_t v8 = __CocoaDictionary.count.getter();
  Swift::Int v9 = sub_100151334(v5, v8);
  swift_retain();
  a1 = sub_10016DE88((uint64_t)v6);
  char v11 = v10;
  swift_release();
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
LABEL_11:

  uint64_t v15 = *(void *)(*(void *)(v9 + 56) + 8 * a1);
  sub_1001F2D74(a1, v9);
  *unint64_t v2 = v9;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1001ED0B8(int a1)
{
  unint64_t v2 = v1;
  unint64_t v3 = sub_10016DBD8(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *unint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F6DB0();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  sub_1001F2F28(v5, v7);
  *unint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1001ED150(int a1)
{
  unint64_t v2 = v1;
  unint64_t v3 = sub_10016DBD8(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *unint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F6F64();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 16 * v5);
  sub_1001F30C8(v5, v7);
  *unint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1001ED1FC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10016DB60(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F7114();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_1001F3264(v6, v9);
  *unint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001ED2E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10016DB60(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 1;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F7488();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v6);
  sub_1001F3264(v6, v9);
  *unint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001ED3CC(uint64_t a1)
{
  unint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_10016DC68(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *unint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F7650();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  sub_1001F3614(v4, v7);
  *unint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001ED4D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10016DB60(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001F7BC0();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for BTDiscoveredDevice();
    uint64_t v20 = *(void *)(v13 - 8);
    sub_1001D5FB4(v12 + *(void *)(v20 + 72) * v8, a3);
    sub_1001F3C04(v8, v11, (uint64_t (*)(void))type metadata accessor for BTDiscoveredDevice);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for BTDiscoveredDevice();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_1001ED67C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_10016DB60(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001F7E2C();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a3, v12 + *(void *)(v20 + 72) * v8, v13);
    sub_1001F3C04(v8, v11, (uint64_t (*)(void))&type metadata accessor for Date);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_1001ED838(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10016DB60(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F80FC();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1001F343C(v6, v9);
  *unint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001ED908(int a1)
{
  return sub_1001EDA28(a1, &qword_1002AD568);
}

uint64_t sub_1001ED914(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10016DB60(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F8454(&qword_1002AD588);
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 32 * v6);
  sub_1001F29C0(v6, v9);
  *unint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001EDA1C(int a1)
{
  return sub_1001EDA28(a1, &qword_1002AD468);
}

uint64_t sub_1001EDA28(int a1, uint64_t *a2)
{
  unint64_t v4 = v2;
  unint64_t v5 = sub_10016DBD8(a1);
  if ((v6 & 1) == 0) {
    return 0;
  }
  unint64_t v7 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v2;
  uint64_t v12 = *v4;
  *unint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F8644(a2);
    uint64_t v9 = v12;
  }
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v7);
  sub_1001F2F28(v7, v9);
  *unint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001EDAC8(int a1)
{
  return sub_1001EDAE0(a1, &qword_1002AD580);
}

uint64_t sub_1001EDAD4(int a1)
{
  return sub_1001EDAE0(a1, &qword_1002AD578);
}

uint64_t sub_1001EDAE0(int a1, uint64_t *a2)
{
  unint64_t v4 = v2;
  unint64_t v5 = sub_10016DBD8(a1);
  if ((v6 & 1) == 0) {
    return 0;
  }
  unint64_t v7 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v2;
  uint64_t v12 = *v4;
  *unint64_t v4 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F87E4(a2);
    uint64_t v9 = v12;
  }
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 16 * v7);
  sub_1001F30C8(v7, v9);
  *unint64_t v4 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001EDB94(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10016DB60(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F926C(&qword_1002AD590);
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1001F343C(v6, v9);
  *unint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001EDC6C(int a1)
{
  unint64_t v2 = sub_10016DBD8(a1);
  if ((v3 & 1) == 0) {
    return 1;
  }
  unint64_t v4 = v2;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v1;
  uint64_t v9 = *v1;
  *unint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F8B58();
    uint64_t v6 = v9;
  }
  uint64_t v7 = *(void *)(*(void *)(v6 + 56) + 16 * v4);
  sub_1001F30C8(v4, v6);
  *unint64_t v1 = v6;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1001EDD18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10016DC68(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *char v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1001F8D08();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for DockKitIDSInfo();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    sub_1001F3E28(v6, v9);
    *char v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for DockKitIDSInfo();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

uint64_t sub_1001EDEE8(uint64_t a1, uint64_t a2)
{
  char v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10016DB60(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *char v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1001F90BC(&qword_1002AD418);
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1001F343C(v6, v9);
  *char v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1001EDFC0(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8(&qword_1002A97B0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    id v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              char v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *id v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      unsigned __int8 v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1000FE5FC(v24, v35);
      }
      else
      {
        sub_100099C1C((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1000FE5FC(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *char v3 = v7;
  return result;
}

uint64_t sub_1001EE2C0(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8(&qword_1002AD448);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unsigned __int8 v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          char v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    id v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    int64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *int64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  char v3 = v39;
  unsigned __int8 v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unsigned __int8 v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *char v3 = v7;
  return result;
}

uint64_t sub_1001EE5E8(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8((uint64_t *)&unk_1002AA868);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v37) {
      break;
    }
    unsigned __int8 v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v14;
    if (!v25)
    {
      int64_t v14 = v23 + 1;
      if (v23 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v14);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v37)
        {
LABEL_33:
          swift_release();
          char v3 = v36;
          if ((v6 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v14);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void *)(*(void *)(v5 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + v31);
    if ((v6 & 1) == 0)
    {
      swift_retain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    id v15 = *(id *)(v32 + 24);
    NSObject.hash(into:)();

    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v12 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v12 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v12 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v12 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  char v3 = v36;
  unsigned __int8 v24 = (void *)(v5 + 64);
  if ((v6 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unsigned __int8 v24 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *char v3 = v8;
  return result;
}

uint64_t sub_1001EE8F4(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8(&qword_1002AA878);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          char v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  char v3 = v36;
  int64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *char v3 = v7;
  return result;
}

uint64_t sub_1001EEBC8(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8(&qword_1002AD440);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v32 = v3;
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v9[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v9[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                char v3 = v32;
                goto LABEL_40;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v33);
              }
              else {
                uint64_t *v9 = v30;
              }
              char v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v9[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v9[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v12 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      int v27 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v19);
      BOOL v28 = *(void **)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        id v29 = v28;
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v17) = v27;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *char v3 = v7;
  return result;
}

uint64_t sub_1001EEE78(uint64_t a1, char a2)
{
  return sub_1001F23A0(a1, a2, &qword_1002AD5F8);
}

uint64_t sub_1001EEE84(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8(&qword_1002AD560);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    id v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v9;
    uint64_t v32 = v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        unint64_t v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          unint64_t v21 = v34[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  *id v34 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                unint64_t v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      int v27 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v19);
      BOOL v28 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v19);
      uint64_t v29 = *v28;
      uint64_t v30 = v28[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v16) = v27;
      unint64_t v17 = (void *)(*(void *)(v7 + 56) + 16 * v16);
      *unint64_t v17 = v29;
      v17[1] = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *char v3 = v7;
  return result;
}

uint64_t sub_1001EF140(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8(&qword_1002AD4A8);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              char v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      int64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *int64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *char v3 = v8;
  return result;
}

uint64_t sub_1001EF44C(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8(&qword_1002AD438);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          char v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  char v3 = v35;
  int64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *char v3 = v7;
  return result;
}

uint64_t sub_1001EF754(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8(&qword_1002AD598);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              char v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_1000CC298(v37);
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *unint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *char v3 = v8;
  return result;
}

uint64_t sub_1001EFA64(uint64_t a1, int a2)
{
  char v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000992E8((uint64_t *)&unk_1002AD490);
  int v47 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  unint64_t v49 = v8;
  uint64_t v50 = v5;
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v41 = v2;
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  int64_t v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v9;
  uint64_t v46 = v6;
  while (1)
  {
    if (v15)
    {
      unint64_t v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    unint64_t v24 = v43;
    unint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v25 = v43[v18];
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          char v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            unint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    unint64_t v15 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    uint64_t v27 = *(void *)(v6 + 72);
    unint64_t v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      uint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      uint64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      uint64_t v31 = *v32;
      uint64_t v30 = v32[1];
      swift_bridgeObjectRetain();
    }
    sub_1002001F8(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    unint64_t v20 = (void *)(*(void *)(v11 + 56) + 16 * v19);
    *unint64_t v20 = v31;
    v20[1] = v30;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  char v3 = v41;
  unint64_t v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *char v3 = v11;
  return result;
}

uint64_t sub_1001EFEA4(uint64_t a1, int a2)
{
  char v3 = v2;
  uint64_t v5 = type metadata accessor for ComponentType();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_1000992E8((uint64_t *)&unk_1002AD510);
  int v46 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  int64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          char v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_1002001F8(&qword_1002AAD98, (void (*)(uint64_t))&type metadata accessor for ComponentType);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  char v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *char v3 = v12;
  return result;
}

uint64_t sub_1001F02C8(uint64_t a1, int a2)
{
  char v3 = v2;
  uint64_t v5 = type metadata accessor for BTDiscoveredDevice();
  uint64_t v42 = *(void *)(v5 - 8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_1000992E8(&qword_1002ACC50);
  int v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  int64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    unint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          char v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    unint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      sub_1001D5FB4(v30, (uint64_t)v7);
    }
    else
    {
      sub_1000E9F88(v30, (uint64_t)v7);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *unint64_t v19 = v28;
    v19[1] = v27;
    uint64_t result = sub_1001D5FB4((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  char v3 = v39;
  unint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *char v3 = v10;
  return result;
}

uint64_t sub_1001F066C(uint64_t a1, int a2)
{
  char v3 = v2;
  uint64_t v49 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  int64_t v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_1000992E8(&qword_1002AD538);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  unint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    unint64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          char v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    uint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *unint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  char v3 = v42;
  unint64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *char v3 = v9;
  return result;
}

uint64_t sub_1001F0A54(uint64_t a1, char a2)
{
  return sub_1001F1364(a1, a2, &qword_1002AD528);
}

uint64_t sub_1001F0A60(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8((uint64_t *)&unk_1002AD550);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *char v3 = v7;
  return result;
}

uint64_t sub_1001F0D78(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8(&qword_1002AD540);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v33 = a2;
    uint64_t v32 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v30 = -1 << v10;
    uint64_t v31 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                char v3 = v32;
                goto LABEL_38;
              }
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v30;
              }
              char v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      int v21 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v17);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v15) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *char v3 = v7;
  return result;
}

uint64_t sub_1001F101C(uint64_t a1, char a2)
{
  return sub_1001F1364(a1, a2, &qword_1002AD568);
}

uint64_t sub_1001F1028(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1000992E8(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    BOOL v38 = (void *)(v6 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v6 + 64);
    int64_t v37 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v37) {
          goto LABEL_33;
        }
        unint64_t v24 = v38[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v24 = v38[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v37)
            {
LABEL_33:
              swift_release();
              unint64_t v4 = v3;
              if (v39)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v6 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v38 = -1 << v36;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v38[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v24 = v38[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
      uint64_t v32 = *v30;
      uint64_t v31 = v30[1];
      uint64_t v33 = *(void *)(v6 + 56) + 32 * v22;
      uint64_t v34 = *(void *)v33;
      long long v40 = *(_OWORD *)(v33 + 8);
      uint64_t v35 = *(void *)(v33 + 24);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
      *unint64_t v19 = v32;
      v19[1] = v31;
      uint64_t v20 = *(void *)(v8 + 56) + 32 * v18;
      *(void *)uint64_t v20 = v34;
      *(_OWORD *)(v20 + 8) = v40;
      *(void *)(v20 + 24) = v35;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_1001F1358(uint64_t a1, char a2)
{
  return sub_1001F1364(a1, a2, &qword_1002AD468);
}

uint64_t sub_1001F1364(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1000992E8(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v30 = -1 << v11;
    uint64_t v31 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v32 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }
      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v32) {
          goto LABEL_33;
        }
        unint64_t v22 = v10[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v22 = v10[v9];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v32)
            {
LABEL_33:
              if (a2)
              {
                if (v31 >= 64) {
                  bzero((void *)(v6 + 64), 8 * v32);
                }
                else {
                  *uint64_t v10 = v30;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v10[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v9 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v22 = v10[v9];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v23;
          }
        }
LABEL_30:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      int v28 = *(_DWORD *)(*(void *)(v6 + 48) + 4 * v20);
      uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_DWORD *)(*(void *)(v8 + 48) + 4 * v18) = v28;
      *(void *)(*(void *)(v8 + 56) + 8 * v18) = v29;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_1001F1614(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1000992E8(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    BOOL v38 = (uint64_t *)(v6 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v34 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v6 + 64);
    uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v36 = v4;
    int64_t v37 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }
      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v6 + 64;
        if (v21 >= v37) {
          goto LABEL_33;
        }
        unint64_t v22 = v38[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v22 = v38[v9];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                unint64_t v4 = v36;
                goto LABEL_40;
              }
              if (v35 >= 64) {
                bzero(v38, 8 * v37);
              }
              else {
                uint64_t *v38 = v34;
              }
              unint64_t v4 = v36;
              *(void *)(v6 + 16) = 0;
              break;
            }
            unint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v9 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v22 = v38[v9];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      int v28 = *(_DWORD *)(*(void *)(v6 + 48) + 4 * v20);
      uint64_t v29 = *(void *)(v6 + 56) + 16 * v20;
      uint64_t v31 = *(void **)v29;
      uint64_t v30 = *(void **)(v29 + 8);
      if ((a2 & 1) == 0)
      {
        id v32 = v31;
        id v33 = v30;
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v14 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(void *)(v8 + 48) + 4 * v17) = v28;
      unint64_t v18 = (void *)(*(void *)(v8 + 56) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v30;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_1001F18CC(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8(&qword_1002AD548);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              char v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        sub_1000A618C(v37, *((unint64_t *)&v37 + 1));
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      unint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *unint64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *char v3 = v8;
  return result;
}

uint64_t sub_1001F1BDC(uint64_t a1, char a2)
{
  char v3 = v2;
  uint64_t v5 = *v2;
  sub_1000992E8(&qword_1002AD5D8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v29 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = v3;
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                char v3 = v31;
                goto LABEL_40;
              }
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                uint64_t *v9 = v29;
              }
              char v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      int v28 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v20);
      long long v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        sub_1000CC298(v32);
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v18) = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *char v3 = v7;
  return result;
}

uint64_t sub_1001F1E98(uint64_t a1, int a2)
{
  char v3 = v2;
  uint64_t v53 = type metadata accessor for DockKitIDSInfo();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  unint64_t v52 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v2;
  sub_1000992E8(&qword_1002AD4E8);
  int v50 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v44 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v45 = v5 + 16;
  uint64_t v46 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v48 = v5;
  uint64_t v49 = v8;
  unint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  int v51 = (uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32);
  uint64_t v19 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v43) {
      break;
    }
    BOOL v26 = v44;
    unint64_t v27 = v44[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v27 = v44[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v43)
        {
LABEL_34:
          swift_release();
          char v3 = v42;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v44[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v43) {
              goto LABEL_34;
            }
            unint64_t v27 = v44[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v49 + 72);
    unint64_t v30 = *(void *)(v11 + 48) + v29 * v24;
    if (v50)
    {
      (*v18)(v10, v30, v7);
      uint64_t v31 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 32))(v52, v31 + v32 * v24, v53);
    }
    else
    {
      (*v46)(v10, v30, v7);
      uint64_t v33 = *(void *)(v11 + 56);
      uint64_t v32 = *(void *)(v48 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v48 + 16))(v52, v33 + v32 * v24, v53);
    }
    sub_1002001F8(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v35) & ~*(void *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    (*v18)((char *)(*(void *)(v13 + 48) + v29 * v22), (unint64_t)v10, v7);
    uint64_t result = (*v51)(*(void *)(v13 + 56) + v32 * v22, v52, v53);
    ++*(void *)(v13 + 16);
  }
  swift_release();
  char v3 = v42;
  BOOL v26 = v44;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v11 + 32);
  if (v41 >= 64) {
    bzero(v26, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *BOOL v26 = -1 << v41;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *char v3 = v13;
  return result;
}

uint64_t sub_1001F2394(uint64_t a1, char a2)
{
  return sub_1001F23A0(a1, a2, (uint64_t *)&unk_1002AD450);
}

uint64_t sub_1001F23A0(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1000992E8(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

uint64_t sub_1001F26B4(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_1000992E8(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          unint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v4 = v36;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *unint64_t v4 = v8;
  return result;
}

unint64_t sub_1001F29C0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          int64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001F2B98(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Swift::Int v10 = *(void **)(v9 + 24);
        swift_retain();
        id v11 = v10;
        NSObject.hash(into:)();

        Swift::Int v12 = Hasher._finalize()();
        uint64_t result = swift_release();
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          unint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *unint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_1001F2D74(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            unint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * v3);
            uint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << a1) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

unint64_t sub_1001F2F28(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        Swift::Int v10 = (_DWORD *)(v9 + 4 * v6);
        uint64_t result = static Hasher._hash(seed:bytes:count:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (_DWORD *)(v9 + 4 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001F30C8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        Swift::Int v10 = (_DWORD *)(v9 + 4 * v6);
        uint64_t result = static Hasher._hash(seed:bytes:count:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (_DWORD *)(v9 + 4 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
            uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001F3264(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::Int v12 = (_OWORD *)(v11 + 16 * v3);
          Swift::Int v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *Swift::Int v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001F343C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::Int v12 = (_OWORD *)(v11 + 16 * v3);
          Swift::Int v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *Swift::Int v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001F3614(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      Swift::Int v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1002001F8(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (_OWORD *)(v22 + 16 * a1);
            uint64_t v24 = (_OWORD *)(v22 + 16 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              _OWORD *v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001F390C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ComponentType();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v33 = v5 + 16;
      Swift::Int v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        int64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        sub_1002001F8(&qword_1002AAD98, (void (*)(uint64_t))&type metadata accessor for ComponentType);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        unint64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              void *v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v25;
    uint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v25;
    uint64_t v26 = (-1 << a1) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  BOOL v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001F3C04(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v9;
        if (v4 >= (uint64_t)v10) {
          break;
        }
        if (v12 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v13 = *(void *)(a2 + 48);
        uint64_t v14 = (_OWORD *)(v13 + 16 * v4);
        uint64_t v15 = (_OWORD *)(v13 + 16 * v7);
        if (v4 != v7 || v14 >= v15 + 1) {
          *uint64_t v14 = *v15;
        }
        uint64_t v16 = *(void *)(a2 + 56);
        uint64_t v17 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v18 = v17 * v4;
        unint64_t result = v16 + v17 * v4;
        int64_t v19 = v17 * v7;
        unint64_t v20 = v16 + v17 * v7 + v17;
        if (v18 < v19 || result >= v20)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v18 == v19) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v12 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      if (v4 < (uint64_t)v12) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v22 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v4) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001F3E28(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      int64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_1002001F8(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for DockKitIDSInfo() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    BOOL v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *BOOL v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_1001F4170(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10016DB60(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001F66BC();
      goto LABEL_7;
    }
    sub_1001EDFC0(v15, a4 & 1);
    unint64_t v21 = sub_10016DB60(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_100099BCC((uint64_t)v19);
    return sub_1000FE5FC(a1, v19);
  }
LABEL_13:
  sub_1001F6250(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_1001F42C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10016DB60(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001F68A4();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1001EE2C0(v17, a5 & 1);
  unint64_t v23 = sub_10016DB60(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  int64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *int64_t v25 = a3;
  v25[1] = a4;
  int64_t v26 = (void *)(v20[7] + 16 * v14);
  *int64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

void sub_1001F444C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10016DE10(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1001F6A60();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1001EE5E8(v13, a3 & 1);
  unint64_t v18 = sub_10016DE10(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_17:
    type metadata accessor for DaemonAccessory();
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v18;
  BOOL v16 = (void *)*v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  v16[(v10 >> 6) + 8] |= 1 << v10;
  uint64_t v20 = 8 * v10;
  *(void *)(v16[6] + v20) = a2;
  *(void *)(v16[7] + v20) = a1;
  uint64_t v21 = v16[2];
  BOOL v22 = __OFADD__(v21, 1);
  uint64_t v23 = v21 + 1;
  if (v22)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v16[2] = v23;

  swift_retain();
}

void sub_1001F45B0(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_10016DE88((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1001F6C08();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1001EE8F4(v12, a3 & 1);
  unint64_t v17 = sub_10016DE88((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    sub_100200240();
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v15[2] = v22;

  id v23 = a2;
}

uint64_t sub_1001F4714(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1001F486C(a1, a2, a3, a4, &qword_1002AD5F8);
}

uint64_t sub_1001F4720(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10016DBD8(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1001F6F64();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_DWORD *)(v18[6] + 4 * v12) = a3;
    BOOL v21 = (void *)(v18[7] + 16 * v12);
    *BOOL v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      void v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_1001EEE84(result, a4 & 1);
  uint64_t result = sub_10016DBD8(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    char v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F4860(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1001F486C(a1, a2, a3, a4, &qword_1002AD4B0);
}

uint64_t sub_1001F486C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10016DB60(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1001F90BC(a5);
LABEL_7:
    char v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1001F23A0(v17, a4 & 1, a5);
  unint64_t v23 = sub_10016DB60(a2, a3);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  int64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *int64_t v25 = a2;
  v25[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v26 = v20[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v28;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001F49F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10016DB60(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001F7114();
LABEL_7:
    char v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_release();
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1001EF140(v17, a5 & 1);
  unint64_t v23 = sub_10016DB60(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  int64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *int64_t v25 = a3;
  v25[1] = a4;
  uint64_t v26 = (void *)(v20[7] + 16 * v14);
  *uint64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001F4B7C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v4;
  unint64_t v15 = sub_10016DC68(a3);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v24 = v28;
      *uint64_t v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    sub_1001F7650();
    goto LABEL_7;
  }
  sub_1001EFA64(v18, a4 & 1);
  unint64_t v25 = sub_10016DC68(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v25;
  uint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return sub_1001F62C0(v15, (uint64_t)v12, a1, v28, v21);
}

uint64_t sub_1001F4D34(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for ComponentType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10016DF28(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_1001F7928();
    goto LABEL_7;
  }
  sub_1001EFEA4(v17, a3 & 1);
  unint64_t v23 = sub_10016DF28(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1001F6380(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_1001F4EDC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10016DB60(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001F7BC0();
      goto LABEL_7;
    }
    sub_1001F02C8(v15, a4 & 1);
    unint64_t v22 = sub_10016DB60(a2, a3);
    if ((v16 & 1) == (v23 & 1))
    {
      unint64_t v12 = v22;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = v19 + *(void *)(*(void *)(type metadata accessor for BTDiscoveredDevice() - 8) + 72) * v12;
    return sub_100200144(a1, v20);
  }
LABEL_13:
  sub_1001F6438(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001F5040(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_10016DB60(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001F7E2C();
      goto LABEL_7;
    }
    sub_1001F066C(v15, a4 & 1);
    unint64_t v26 = sub_10016DB60(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void *)(v20 - 8);
    unint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  sub_1001F64D0(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001F51C0(uint64_t a1, int a2, char a3)
{
  return sub_1001F55B8(a1, a2, a3, &qword_1002AD528);
}

uint64_t sub_1001F51CC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10016DB60(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1001F80FC();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1001F0A60(v15, a4 & 1);
  unint64_t v21 = sub_10016DB60(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v18[2] = v26;

  return swift_bridgeObjectRetain();
}

void sub_1001F533C(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10016DBD8(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1001F6DB0();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return;
    }
    goto LABEL_14;
  }
  sub_1001EEBC8(v13, a3 & 1);
  unint64_t v18 = sub_10016DBD8(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    unint64_t v10 = v18;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_1001F5474(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_10016DBD8(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1001F82B4();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_1001F0D78(result, a3 & 1);
  uint64_t result = sub_10016DBD8(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F55A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  return sub_1001F5714(a1, a2, a3, a4, a5, a6, a7, &qword_1002AD570);
}

uint64_t sub_1001F55AC(uint64_t a1, int a2, char a3)
{
  return sub_1001F55B8(a1, a2, a3, &qword_1002AD568);
}

uint64_t sub_1001F55B8(uint64_t a1, int a2, char a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10016DBD8(a2);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1001F8644(a4);
LABEL_7:
    uint64_t v18 = (void *)*v6;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_DWORD *)(v18[6] + 4 * v12) = a2;
    *(void *)(v18[7] + 8 * v12) = a1;
    uint64_t v21 = v18[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (!v22)
    {
      void v18[2] = v23;
      return result;
    }
    goto LABEL_14;
  }
  sub_1001F1364(result, a3 & 1, a4);
  uint64_t result = sub_10016DBD8(a2);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    uint64_t v18 = (void *)*v6;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1001F56FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1001F5708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  return sub_1001F5714(a1, a2, a3, a4, a5, a6, a7, &qword_1002AD588);
}

uint64_t sub_1001F5714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t *a8)
{
  uint64_t v10 = v8;
  uint64_t v16 = *v8;
  unint64_t v18 = sub_10016DB60(a5, a6);
  uint64_t v19 = *(void *)(v16 + 16);
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v22 = v17;
  uint64_t v23 = *(void *)(v16 + 24);
  if (v23 >= v21 && (a7 & 1) != 0) {
    goto LABEL_7;
  }
  if (v23 >= v21 && (a7 & 1) == 0)
  {
    sub_1001F8454(a8);
LABEL_7:
    uint64_t v24 = (void *)*v10;
    if (v22)
    {
LABEL_8:
      BOOL v25 = (void *)(v24[7] + 32 * v18);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *BOOL v25 = a1;
      v25[1] = a2;
      void v25[2] = a3;
      v25[3] = a4;
      return result;
    }
    goto LABEL_11;
  }
  sub_1001F1028(v21, a7 & 1, a8);
  unint64_t v27 = sub_10016DB60(a5, a6);
  if ((v22 & 1) != (v28 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v27;
  uint64_t v24 = (void *)*v10;
  if (v22) {
    goto LABEL_8;
  }
LABEL_11:
  v24[(v18 >> 6) + 8] |= 1 << v18;
  uint64_t v29 = (uint64_t *)(v24[6] + 16 * v18);
  *uint64_t v29 = a5;
  v29[1] = a6;
  uint64_t v30 = (void *)(v24[7] + 32 * v18);
  *uint64_t v30 = a1;
  v30[1] = a2;
  _OWORD v30[2] = a3;
  v30[3] = a4;
  uint64_t v31 = v24[2];
  BOOL v32 = __OFADD__(v31, 1);
  uint64_t v33 = v31 + 1;
  if (v32)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v24[2] = v33;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001F58D4(uint64_t a1, int a2, char a3)
{
  return sub_1001F55B8(a1, a2, a3, &qword_1002AD468);
}

void sub_1001F58E0(uint64_t a1, uint64_t a2, int a3, char a4)
{
}

void sub_1001F58EC(uint64_t a1, uint64_t a2, int a3, char a4)
{
}

void sub_1001F58F8(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10016DBD8(a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1001F87E4(a5);
LABEL_7:
    BOOL v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      char v22 = *(void **)v21;

      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    *(_DWORD *)(v20[6] + 4 * v14) = a3;
    BOOL v25 = (void *)(v20[7] + 16 * v14);
    *BOOL v25 = a1;
    v25[1] = a2;
    uint64_t v26 = v20[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      return;
    }
    goto LABEL_14;
  }
  sub_1001F1614(v17, a4 & 1, a5);
  unint64_t v23 = sub_10016DBD8(a3);
  if ((v18 & 1) == (v24 & 1))
  {
    unint64_t v14 = v23;
    BOOL v20 = (void *)*v7;
    if (v18) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_1001F5A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10016DB60(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001F8990();
LABEL_7:
    BOOL v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      uint64_t result = sub_1000A6240(*(void *)v21, *(void *)(v21 + 8));
      *(void *)uint64_t v21 = a1;
      *(void *)(v21 + 8) = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1001F18CC(v17, a5 & 1);
  unint64_t v23 = sub_10016DB60(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  BOOL v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  BOOL v25 = (uint64_t *)(v20[6] + 16 * v14);
  *BOOL v25 = a3;
  v25[1] = a4;
  uint64_t v26 = (void *)(v20[7] + 16 * v14);
  *uint64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

void sub_1001F5BD8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_1001F5BE4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10016DB60(a2, a3);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1001F926C(a5);
LABEL_7:
    BOOL v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1001F26B4(v17, a4 & 1, a5);
  unint64_t v22 = sub_10016DB60(a2, a3);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  BOOL v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  char v24 = (uint64_t *)(v20[6] + 16 * v14);
  *char v24 = a2;
  v24[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v27;

  swift_bridgeObjectRetain();
}

uint64_t sub_1001F5D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10016DB60(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1001F7488();
LABEL_7:
    BOOL v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = sub_1000BF118(*v21);
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1001EF754(v17, a5 & 1);
  unint64_t v23 = sub_10016DB60(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  BOOL v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  BOOL v26 = (uint64_t *)(v20[7] + 16 * v14);
  *BOOL v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001F5EF4(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_10016DBD8(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1001F8B58();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      uint64_t result = sub_1000BF118(*v19);
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_DWORD *)(v18[6] + 4 * v12) = a3;
    uint64_t v21 = (uint64_t *)(v18[7] + 16 * v12);
    *uint64_t v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      void v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_1001F1BDC(result, a4 & 1);
  uint64_t result = sub_10016DBD8(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    char v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1001F6034(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_10016DC68(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_1001F8D08();
      goto LABEL_7;
    }
    sub_1001F1E98(v17, a3 & 1);
    unint64_t v28 = sub_10016DC68(a2);
    if ((v18 & 1) == (v29 & 1))
    {
      unint64_t v14 = v28;
      char v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1001F6580(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v21 = v20[7];
  uint64_t v22 = type metadata accessor for DockKitIDSInfo();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  uint64_t v25 = v22;
  uint64_t v26 = v21 + *(void *)(v23 + 72) * v14;

  return v24(v26, a1, v25);
}

void sub_1001F6238(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1001F6244(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1001F486C(a1, a2, a3, a4, (uint64_t *)&unk_1002AD450);
}

_OWORD *sub_1001F6250(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1000FE5FC(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_1001F62C0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  char v13 = (void *)(a5[7] + 16 * a1);
  *char v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

uint64_t sub_1001F6380(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for ComponentType();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1001F6438(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for BTDiscoveredDevice();
  uint64_t result = sub_1001D5FB4(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_1001F64D0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

uint64_t sub_1001F6580(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for DockKitIDSInfo();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

unint64_t sub_1001F6674(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void *sub_1001F66BC()
{
  unint64_t v1 = v0;
  sub_1000992E8(&qword_1002A97B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100099C1C(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_1000FE5FC(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    unint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1001F68A4()
{
  unint64_t v1 = v0;
  sub_1000992E8(&qword_1002AD448);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001F6A60()
{
  unint64_t v1 = v0;
  sub_1000992E8((uint64_t *)&unk_1002AA868);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    swift_retain();
    id result = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001F6C08()
{
  unint64_t v1 = v0;
  sub_1000992E8(&qword_1002AA878);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001F6DB0()
{
  unint64_t v1 = v0;
  sub_1000992E8(&qword_1002AD440);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    int v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 8 * v15;
    id v19 = *(void **)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    id result = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F6F58()
{
  return sub_1001F90BC(&qword_1002AD5F8);
}

void *sub_1001F6F64()
{
  unint64_t v1 = v0;
  sub_1000992E8(&qword_1002AD560);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    int v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 16 * v15;
    id v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    int64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *int64_t v22 = v21;
    v22[1] = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F7114()
{
  unint64_t v1 = v0;
  sub_1000992E8(&qword_1002AD4A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F72D8()
{
  unint64_t v1 = v0;
  sub_1000992E8(&qword_1002AD438);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F7488()
{
  unint64_t v1 = v0;
  sub_1000992E8(&qword_1002AD598);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *unint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    id result = (void *)sub_1000CC298(v24);
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F7650()
{
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  int64_t v37 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000992E8((uint64_t *)&unk_1002AD490);
  BOOL v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v40 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v30 = v40;
    char v29 = v32;
LABEL_25:
    *char v29 = v30;
    return result;
  }
  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v40;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v39 = v3;
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v35 = v1 + 32;
  uint64_t v36 = v1 + 16;
  unint64_t v14 = v37;
  uint64_t v13 = v38;
  uint64_t v15 = v40;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v9 << 6);
      uint64_t v18 = v39;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v18 = v39;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v17 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_9:
    unint64_t v19 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v14, *(void *)(v18 + 48) + v19, v13);
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v21 = 16 * v17;
    unint64_t v22 = (uint64_t *)(v20 + 16 * v17);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v15 + 48) + v19, v14, v13);
    int64_t v25 = (void *)(*(void *)(v15 + 56) + v21);
    *int64_t v25 = v23;
    v25[1] = v24;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v34)
  {
LABEL_23:
    id result = (void *)swift_release();
    char v29 = v32;
    uint64_t v30 = v40;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F7928()
{
  uint64_t v1 = type metadata accessor for ComponentType();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000992E8((uint64_t *)&unk_1002AD510);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t *v23 = v7;
    return result;
  }
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v24 = v5 + 64;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  uint64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    unint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1001F7BC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BTDiscoveredDevice();
  uint64_t v29 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000992E8(&qword_1002ACC50);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_25:
    *uint64_t v1 = v7;
    return result;
  }
  uint64_t v27 = v1;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_1000E9F88(*(void *)(v5 + 56) + v21, (uint64_t)v4);
    uint64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    *uint64_t v22 = v19;
    v22[1] = v20;
    sub_1001D5FB4((uint64_t)v4, *(void *)(v7 + 56) + v21);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F7E2C()
{
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000992E8(&qword_1002AD538);
  uint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = v5;
  if (!v6)
  {
    id result = (void *)swift_release();
    uint64_t v28 = v36;
    uint64_t v27 = v30;
LABEL_25:
    *uint64_t v27 = v28;
    return result;
  }
  uint64_t v7 = v5;
  id result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    id result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v36;
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  uint64_t v34 = v1 + 16;
  uint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    int64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    void *v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v27 = v30;
    uint64_t v28 = v36;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F80F0()
{
  return sub_1001F8644(&qword_1002AD528);
}

void *sub_1001F80FC()
{
  uint64_t v1 = v0;
  sub_1000992E8((uint64_t *)&unk_1002AD550);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F82B4()
{
  uint64_t v1 = v0;
  sub_1000992E8(&qword_1002AD540);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v23 = __clz(__rbit64(v21));
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    int v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F8448()
{
  return sub_1001F8644(&qword_1002AD568);
}

void *sub_1001F8454(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000992E8(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v14) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v7 + 8 * v28);
    ++v10;
    if (!v29)
    {
      int64_t v10 = v28 + 1;
      if (v28 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v7 + 8 * v10);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v29 - 1) & v29;
    unint64_t v16 = __clz(__rbit64(v29)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    uint64_t v21 = 32 * v16;
    uint64_t v22 = *(void *)(v3 + 56) + v21;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = *(void *)(v22 + 24);
    unint64_t v25 = (void *)(*(void *)(v5 + 48) + v17);
    long long v26 = *(_OWORD *)(v22 + 8);
    *unint64_t v25 = v20;
    v25[1] = v19;
    uint64_t v27 = *(void *)(v5 + 56) + v21;
    *(void *)uint64_t v27 = v23;
    *(_OWORD *)(v27 + 8) = v26;
    *(void *)(v27 + 24) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v14) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v7 + 8 * v30);
  if (v29)
  {
    int64_t v10 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v7 + 8 * v10);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F8638()
{
  return sub_1001F8644(&qword_1002AD468);
}

void *sub_1001F8644(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000992E8(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 4 * v16;
    int v18 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v16);
    uint64_t v19 = 8 * v16;
    uint64_t v20 = *(void *)(*(void *)(v3 + 56) + v19);
    *(_DWORD *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v19) = v20;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001F87E4(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000992E8(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v14) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v7 + 8 * v25);
    ++v10;
    if (!v26)
    {
      int64_t v10 = v25 + 1;
      if (v25 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v7 + 8 * v10);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v26 - 1) & v26;
    unint64_t v16 = __clz(__rbit64(v26)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 4 * v16;
    int v18 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v16);
    uint64_t v19 = 16 * v16;
    uint64_t v20 = *(void *)(v3 + 56) + v19;
    int64_t v21 = *(void **)v20;
    unint64_t v22 = *(void **)(v20 + 8);
    *(_DWORD *)(*(void *)(v5 + 48) + v17) = v18;
    int64_t v23 = (void *)(*(void *)(v5 + 56) + v19);
    void *v23 = v21;
    v23[1] = v22;
    id v24 = v21;
    id result = v22;
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v14) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v7 + 8 * v27);
  if (v26)
  {
    int64_t v10 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v7 + 8 * v10);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F8990()
{
  uint64_t v1 = v0;
  sub_1000992E8(&qword_1002AD548);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v24 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain();
    id result = (void *)sub_1000A618C(v24, *((unint64_t *)&v24 + 1));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F8B58()
{
  uint64_t v1 = v0;
  sub_1000992E8(&qword_1002AD5D8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    int v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)sub_1000CC298(v19);
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F8D08()
{
  uint64_t v42 = type metadata accessor for DockKitIDSInfo();
  uint64_t v45 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v44 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v39 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000992E8(&qword_1002AD4E8);
  int64_t v32 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v46 = v4;
  if (!v5)
  {
    id result = (void *)swift_release();
    uint64_t v31 = v46;
    int64_t v30 = v32;
LABEL_25:
    *int64_t v30 = v31;
    return result;
  }
  uint64_t v6 = v4;
  id result = (void *)(v4 + 64);
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v46;
  }
  int64_t v9 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v11 = -1;
  uint64_t v43 = v3;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v3 + 64);
  uint64_t v33 = v3 + 64;
  int64_t v34 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v13 = v45;
  uint64_t v14 = v44;
  uint64_t v37 = v45 + 16;
  uint64_t v38 = v44 + 16;
  uint64_t v35 = v45 + 32;
  uint64_t v36 = v44 + 32;
  unint64_t v15 = v39;
  uint64_t v16 = v40;
  uint64_t v17 = v42;
  uint64_t v18 = v46;
  while (1)
  {
    if (v12)
    {
      unint64_t v19 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v47 = v9;
      unint64_t v20 = v19 | (v9 << 6);
      uint64_t v21 = v43;
      goto LABEL_9;
    }
    int64_t v26 = v9 + 1;
    uint64_t v21 = v43;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v26 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v26);
    int64_t v28 = v9 + 1;
    if (!v27)
    {
      int64_t v28 = v26 + 1;
      if (v26 + 1 >= v34) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v33 + 8 * v28);
      if (!v27) {
        break;
      }
    }
LABEL_22:
    unint64_t v12 = (v27 - 1) & v27;
    int64_t v47 = v28;
    unint64_t v20 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_9:
    unint64_t v22 = *(void *)(v14 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v15, *(void *)(v21 + 48) + v22, v16);
    unint64_t v23 = *(void *)(v13 + 72) * v20;
    unint64_t v24 = *(void *)(v21 + 56) + v23;
    int64_t v25 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v41, v24, v17);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(void *)(v18 + 48) + v22, v15, v16);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v13 + 32))(*(void *)(v18 + 56) + v23, v25, v17);
    int64_t v9 = v47;
  }
  int64_t v29 = v26 + 2;
  if (v29 >= v34)
  {
LABEL_23:
    id result = (void *)swift_release();
    int64_t v30 = v32;
    uint64_t v31 = v46;
    goto LABEL_25;
  }
  unint64_t v27 = *(void *)(v33 + 8 * v29);
  if (v27)
  {
    int64_t v28 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v34) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v33 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001F90B0()
{
  return sub_1001F90BC((uint64_t *)&unk_1002AD450);
}

void *sub_1001F90BC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000992E8(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1001F926C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1000992E8(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    unint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *unint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001F9418(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000992E8(&qword_1002AD5F0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  uint64_t v6 = sub_1001FA8E4(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1000FE8D4();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1001F9500(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000992E8((uint64_t *)&unk_1002AA6C0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1001FAA78((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1000FE8D4();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1001F95E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000992E8((uint64_t *)&unk_1002AD470);
  uint64_t v3 = *(void *)(type metadata accessor for BTDiscoveredDevice() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  id result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      void v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_1001FAC78(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_1000FE8D4();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1001F973C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000992E8((uint64_t *)&unk_1002AA6C0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1001FAF44((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1000FE8D4();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1001F9824(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000992E8(&qword_1002AD298);
  uint64_t v3 = *(void *)(sub_1000992E8((uint64_t *)&unk_1002AA6B0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  id result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      void v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = *(void *)(sub_1000992E8((uint64_t *)&unk_1002AA6B0) - 8);
      uint64_t v10 = sub_1001FB144(&v11, (uint64_t)v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v1, a1);
      swift_bridgeObjectRetain();
      sub_1000FE8D4();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1001F99B8(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaSet.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = &_swiftEmptyArrayStorage;
  }
  else
  {
    sub_1000992E8(&qword_1002A8340);
    uint64_t v3 = (void *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1001FB488(&v8, v3 + 4, v2, a1);
  id result = (void *)sub_1000FE8D4();
  if (v6 == (void *)v2) {
    return v3;
  }
  __break(1u);
  return result;
}

char *sub_1001F9AB4(char *a1, int64_t a2)
{
  if (!a2) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  if (a2 > 0)
  {
    sub_1000992E8(&qword_1002A7F40);
    int64_t v4 = (char *)swift_allocObject();
    size_t v5 = j__malloc_size(v4);
    *((void *)v4 + 2) = a2;
    *((void *)v4 + 3) = 2 * v5 - 64;
    uint64_t v6 = v4 + 32;
    if (&v4[a2 + 32] <= a1 || v6 >= &a1[a2])
    {
      memcpy(v6, a1, a2);
      return v4;
    }
  }
  id result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1001F9BD8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001F9C44(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for DKPersonTrackerState);
}

void *sub_1001F9BF0(unint64_t a1)
{
  return sub_1001F9E14(a1, (void (*)(void))&type metadata accessor for DKPersonTrackerState, &qword_1002AD4E0, &qword_1002AD4D8, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1001D341C);
}

void *sub_1001F9C2C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1001F9C44(a1, a2, a3, a4, (void (*)(void))&type metadata accessor for TrackedSubjectInternal);
}

void *sub_1001F9C44(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void))
{
  unint64_t v5 = a4 >> 1;
  uint64_t v6 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v6) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v10 = v6;
    if (v6 <= 0)
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      if (v5 != a3)
      {
LABEL_7:
        if (v6 < 0) {
          goto LABEL_19;
        }
        unint64_t v14 = a2 + 8 * a3;
        if (v14 < (unint64_t)&v11[v10 + 4] && (unint64_t)(v11 + 4) < v14 + v10 * 8) {
          goto LABEL_19;
        }
        a5(0);
        swift_arrayInitWithCopy();
        return v11;
      }
    }
    else
    {
      sub_1000992E8(&qword_1002A8340);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v6;
      v11[3] = (2 * (v13 >> 3)) | 1;
      if (v5 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  id result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_1001F9DD8(unint64_t a1)
{
  return sub_1001F9E14(a1, (void (*)(void))&type metadata accessor for TrackedSubjectInternal, &qword_1002AD4D0, &qword_1002AD4C8, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1001D3488);
}

void *sub_1001F9E14(unint64_t a1, void (*a2)(void), unint64_t *a3, uint64_t *a4, uint64_t (*a5)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v10) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v10 <= 0)
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_1000992E8(&qword_1002A8340);
      uint64_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v10;
      v11[3] = (2 * (v13 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1001FA33C((unint64_t)(v11 + 4), v10, a1, a2, a3, a4, a5);
    a5 = v14;
    swift_bridgeObjectRelease();
    if (a5 == (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))v10) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v10) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v11;
}

void *sub_1001F9F3C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_1000992E8(&qword_1002A8340);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  uint64_t v6 = sub_1001FB7A4(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1000FE8D4();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

unint64_t sub_1001FA028(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    sub_1001FA108(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v5 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v5 = _decodeScalar(_:startingAt:)();
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  return v5 | ((unint64_t)(v2 == 0) << 32);
}

unint64_t sub_1001FA108(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5) {
    goto LABEL_9;
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    id result = sub_1001FA1A8(result, a2, a3);
    if ((result & 1) == 0) {
      return result & 0xC | sub_1001FA218(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
    }
  }
  return result;
}

unint64_t sub_1001FA1A8(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0) {
    LOBYTE(v5) = 1;
  }
  if ((result & 0xC) == 4 << v5) {
    id result = sub_1001EC41C(result, a2, a3);
  }
  unint64_t v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    unint64_t v6 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (v6 <= result >> 16) {
    __break(1u);
  }
  return result;
}

unint64_t sub_1001FA218(unint64_t result, uint64_t a2, unint64_t a3)
{
  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    unint64_t v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      uint64_t v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((unsigned char *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            unint64_t v7 = v5 - 1;
            int v11 = *((unsigned char *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL)) {
          goto LABEL_14;
        }
      }
      else
      {
        unint64_t v12 = result >> 16;
        uint64_t v6 = _StringObject.sharedUTF8.getter();
        unint64_t v5 = v12;
        if (v12 == v10) {
          goto LABEL_14;
        }
      }
      if ((*(unsigned char *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          unint64_t v7 = v5 - 1;
          int v8 = *(unsigned char *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      unint64_t v7 = v5;
      return v7 << 16;
    }
    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9)
    {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }
  return result;
}

uint64_t sub_1001FA33C(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = sub_1002001A8(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = sub_1000992E8(a6);
          unint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          uint64_t v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001FA560(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

uint64_t sub_1001FA5C0(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  unint64_t v5 = a5 >> 62;
  uint64_t v9 = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (uint64_t)a4 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v9 = *(void *)(a4 + 24);
      if (a2) {
        goto LABEL_8;
      }
      goto LABEL_39;
    case 3uLL:
LABEL_5:
      if (!a2) {
        goto LABEL_39;
      }
      goto LABEL_8;
    default:
      uint64_t v9 = BYTE6(a5);
      if (!a2)
      {
LABEL_39:
        uint64_t v14 = 0;
        goto LABEL_40;
      }
LABEL_8:
      if (!a3)
      {
        uint64_t v14 = 0;
        goto LABEL_40;
      }
      if (a3 < 0) {
        goto LABEL_48;
      }
      int64_t v25 = a1;
      uint64_t v10 = 0;
      char v11 = a4;
      uint64_t v38 = (uint64_t)a4 >> 32;
      unint64_t v36 = a4 >> 16;
      unint64_t v37 = a4 >> 8;
      unint64_t v34 = HIDWORD(a4);
      unint64_t v35 = a4 >> 24;
      unint64_t v32 = HIWORD(a4);
      unint64_t v33 = a4 >> 40;
      unint64_t v30 = a5 >> 8;
      unint64_t v31 = HIBYTE(a4);
      unint64_t v28 = a5 >> 24;
      unint64_t v29 = a5 >> 16;
      unint64_t v26 = a5 >> 40;
      unint64_t v27 = HIDWORD(a5);
      uint64_t v24 = v9;
      uint64_t v12 = v5;
      unint64_t v40 = a5 >> 62;
      break;
  }
  while (2)
  {
    uint64_t v14 = v10++;
    uint64_t v15 = (int)a4;
    switch(v12)
    {
      case 0:
        if (!v9) {
          goto LABEL_35;
        }
        BOOL v16 = __OFSUB__(v9--, 1);
        if (v16) {
          goto LABEL_42;
        }
        if (v9 >= BYTE6(a5)) {
          goto LABEL_43;
        }
        v41[0] = v11;
        v41[1] = v37;
        _OWORD v41[2] = v36;
        uint64_t v41[3] = v35;
        v41[4] = v34;
        v41[5] = v33;
        v41[6] = v32;
        v41[7] = v31;
        v41[8] = a5;
        v41[9] = v30;
        v41[10] = v29;
        v41[11] = v28;
        v41[12] = v27;
        v41[13] = v26;
        char v13 = v41[v9];
        goto LABEL_12;
      case 1:
        goto LABEL_19;
      case 2:
        uint64_t v15 = *(void *)(a4 + 16);
LABEL_19:
        if (v9 == v15) {
          goto LABEL_35;
        }
        BOOL v16 = __OFSUB__(v9--, 1);
        if (v16)
        {
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
        }
        if (v5 == 2)
        {
          if (v9 < *(void *)(a4 + 16)) {
            goto LABEL_44;
          }
          if (v9 >= *(void *)(a4 + 24)) {
            goto LABEL_46;
          }
          uint64_t v17 = __DataStorage._bytes.getter();
          if (!v17) {
            goto LABEL_50;
          }
          uint64_t v18 = v17;
          uint64_t v19 = __DataStorage._offset.getter();
          uint64_t v20 = v9 - v19;
          if (__OFSUB__(v9, v19)) {
            goto LABEL_47;
          }
LABEL_11:
          char v13 = *(unsigned char *)(v18 + v20);
          LODWORD(v5) = v40;
LABEL_12:
          *(unsigned char *)(a2 + v14) = v13;
          if (a3 == v10) {
            goto LABEL_34;
          }
          continue;
        }
        if (v9 < (int)a4 || v9 >= v38) {
          goto LABEL_45;
        }
        uint64_t v21 = __DataStorage._bytes.getter();
        if (!v21) {
          goto LABEL_51;
        }
        uint64_t v18 = v21;
        uint64_t v22 = __DataStorage._offset.getter();
        uint64_t v20 = v9 - v22;
        if (!__OFSUB__(v9, v22)) {
          goto LABEL_11;
        }
        __break(1u);
LABEL_34:
        uint64_t v14 = a3;
LABEL_35:
        a1 = v25;
LABEL_40:
        *a1 = a4;
        a1[1] = a5;
        a1[2] = v9;
        return v14;
      case 3:
        a1 = v25;
        if (v24) {
          goto LABEL_49;
        }
        uint64_t v9 = 0;
        goto LABEL_39;
      default:
        JUMPOUT(0);
    }
  }
}

void *sub_1001FA8E4(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 56) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1001FAA78(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001FAC78(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BTDiscoveredDevice();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  int64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  unint64_t v15 = (char *)&v30 - v14;
  uint64_t v35 = a4;
  uint64_t v18 = *(void *)(a4 + 64);
  uint64_t v17 = a4 + 64;
  uint64_t v16 = v18;
  uint64_t v19 = -1 << *(unsigned char *)(v17 - 32);
  if (-v19 < 64) {
    uint64_t v20 = ~(-1 << -(char)v19);
  }
  else {
    uint64_t v20 = -1;
  }
  unint64_t v21 = v20 & v16;
  if (!a2)
  {
    int64_t v22 = 0;
    a3 = 0;
LABEL_38:
    *a1 = v35;
    a1[1] = v17;
    a1[2] = ~v19;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }
  if (!a3)
  {
    int64_t v22 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v32 = -1 << *(unsigned char *)(v17 - 32);
  unint64_t v33 = a1;
  int64_t v22 = 0;
  uint64_t v23 = 0;
  int64_t v34 = (unint64_t)(63 - v19) >> 6;
  int64_t v31 = v34 - 1;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v9 + 72);
    sub_1000E9F88(*(void *)(v35 + 56) + v29 * v25, (uint64_t)v12);
    sub_1001D5FB4((uint64_t)v12, (uint64_t)v15);
    uint64_t result = sub_1001D5FB4((uint64_t)v15, a2);
    if (v23 == a3) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v26 >= v34) {
      goto LABEL_32;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }
  v22 += 2;
  if (v26 + 1 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v34) {
    goto LABEL_32;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v34)
  {
    unint64_t v21 = 0;
    int64_t v22 = v26 + 2;
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }
  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v34)
  {
LABEL_32:
    unint64_t v21 = 0;
LABEL_36:
    a3 = v23;
LABEL_37:
    uint64_t v19 = v32;
    a1 = v33;
    goto LABEL_38;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v26 >= v34)
    {
      unint64_t v21 = 0;
      int64_t v22 = v31;
      goto LABEL_36;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001FAF44(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001FB144(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000992E8((uint64_t *)&unk_1002AA6B0);
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = __chkstk_darwin(v9);
  int64_t v14 = (char *)&v34 - v13;
  uint64_t v43 = a4;
  uint64_t v17 = *(void *)(a4 + 64);
  uint64_t v16 = a4 + 64;
  uint64_t v15 = v17;
  uint64_t v39 = v16;
  uint64_t v18 = -1 << *(unsigned char *)(v16 - 32);
  if (-v18 < 64) {
    uint64_t v19 = ~(-1 << -(char)v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v15;
  if (!a2)
  {
    int64_t v21 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v33 = v39;
    *a1 = v43;
    a1[1] = v33;
    a1[2] = ~v18;
    a1[3] = v21;
    a1[4] = v20;
    return a3;
  }
  if (!a3)
  {
    int64_t v21 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v36 = -1 << *(unsigned char *)(v16 - 32);
  unint64_t v37 = a1;
  int64_t v21 = 0;
  uint64_t v22 = 0;
  int64_t v38 = (unint64_t)(63 - v18) >> 6;
  int64_t v35 = v38 - 1;
  uint64_t v40 = a3;
  if (!v20) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  unint64_t v24 = v23 | (v21 << 6);
  while (1)
  {
    ++v22;
    uint64_t v28 = *(void *)(v43 + 56);
    uint64_t v29 = (uint64_t *)(*(void *)(v43 + 48) + 16 * v24);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    uint64_t v32 = type metadata accessor for BTDiscoveredDevice();
    sub_1000E9F88(v28 + *(void *)(*(void *)(v32 - 8) + 72) * v24, (uint64_t)v11 + *(int *)(v42 + 48));
    *uint64_t v11 = v30;
    v11[1] = v31;
    sub_100145DB0((uint64_t)v11, (uint64_t)v14);
    sub_100145DB0((uint64_t)v14, a2);
    a3 = v40;
    if (v22 == v40)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    a2 += *(void *)(v41 + 72);
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v25 >= v38) {
      goto LABEL_33;
    }
    unint64_t v26 = *(void *)(v39 + 8 * v25);
    if (!v26)
    {
      v21 += 2;
      if (v25 + 1 >= v38)
      {
        unint64_t v20 = 0;
        int64_t v21 = v25;
      }
      else
      {
        unint64_t v26 = *(void *)(v39 + 8 * v21);
        if (v26) {
          goto LABEL_14;
        }
        int64_t v27 = v25 + 2;
        if (v25 + 2 >= v38) {
          goto LABEL_33;
        }
        unint64_t v26 = *(void *)(v39 + 8 * v27);
        if (v26)
        {
LABEL_17:
          int64_t v25 = v27;
          goto LABEL_18;
        }
        int64_t v21 = v25 + 3;
        if (v25 + 3 < v38)
        {
          unint64_t v26 = *(void *)(v39 + 8 * v21);
          if (v26)
          {
LABEL_14:
            int64_t v25 = v21;
            goto LABEL_18;
          }
          int64_t v27 = v25 + 4;
          if (v25 + 4 >= v38)
          {
LABEL_33:
            unint64_t v20 = 0;
            goto LABEL_37;
          }
          unint64_t v26 = *(void *)(v39 + 8 * v27);
          if (!v26)
          {
            while (1)
            {
              int64_t v25 = v27 + 1;
              if (__OFADD__(v27, 1)) {
                goto LABEL_42;
              }
              if (v25 >= v38)
              {
                unint64_t v20 = 0;
                int64_t v21 = v35;
                goto LABEL_37;
              }
              unint64_t v26 = *(void *)(v39 + 8 * v25);
              ++v27;
              if (v26) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v20 = 0;
        int64_t v21 = v25 + 2;
      }
LABEL_37:
      a3 = v22;
LABEL_38:
      uint64_t v18 = v36;
      a1 = v37;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v20 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v21 = v25;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_1001FB488(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for IOHIDDevice(0);
    sub_1002001F8(&qword_1002A7F38, type metadata accessor for IOHIDDevice);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v8 = v28;
    uint64_t v9 = v29;
    int64_t v10 = v30;
    unint64_t v11 = v31;
    unint64_t v24 = v7;
    if (v6) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v12 = 0;
LABEL_46:
    *unint64_t v24 = v4;
    v24[1] = v8;
    void v24[2] = v9;
    v24[3] = v10;
    v24[4] = v11;
    return (void *)v12;
  }
  int64_t v10 = 0;
  uint64_t v20 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v8 = a4 + 56;
  uint64_t v9 = ~v20;
  uint64_t v21 = -v20;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v11 = v22 & *(void *)(a4 + 56);
  unint64_t v24 = result;
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v12 = 0;
    goto LABEL_46;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v12 = 0;
  int64_t v25 = (unint64_t)(v9 + 64) >> 6;
  uint64_t v23 = v9;
  while (1)
  {
    if (v4 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_45;
      }
      type metadata accessor for IOHIDDevice(0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v15 = v26;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v26) {
        goto LABEL_45;
      }
      goto LABEL_8;
    }
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v10 << 6);
      goto LABEL_7;
    }
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v16 >= v25)
    {
      unint64_t v11 = 0;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    if (v17) {
      goto LABEL_23;
    }
    int64_t v18 = v10 + 2;
    if (v10 + 2 >= v25)
    {
      unint64_t v11 = 0;
      ++v10;
      goto LABEL_45;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v18);
    if (!v17)
    {
      if (v10 + 3 >= v25) {
        goto LABEL_42;
      }
      unint64_t v17 = *(void *)(v8 + 8 * (v10 + 3));
      if (v17)
      {
        int64_t v16 = v10 + 3;
        goto LABEL_23;
      }
      int64_t v18 = v10 + 4;
      if (v10 + 4 >= v25)
      {
        unint64_t v11 = 0;
        v10 += 3;
        goto LABEL_45;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v18);
      if (!v17)
      {
        int64_t v16 = v10 + 5;
        if (v10 + 5 >= v25)
        {
LABEL_42:
          unint64_t v11 = 0;
          int64_t v10 = v18;
          goto LABEL_45;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v16);
        if (!v17)
        {
          int64_t v19 = v10 + 6;
          while (v25 != v19)
          {
            unint64_t v17 = *(void *)(v8 + 8 * v19++);
            if (v17)
            {
              int64_t v16 = v19 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v11 = 0;
          int64_t v10 = v25 - 1;
          goto LABEL_45;
        }
        goto LABEL_23;
      }
    }
    int64_t v16 = v18;
LABEL_23:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v10 = v16;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t v15 = result;
    if (!result) {
      goto LABEL_45;
    }
LABEL_8:
    ++v12;
    *v6++ = v15;
    if (v12 == a3)
    {
      uint64_t v12 = a3;
LABEL_45:
      uint64_t v9 = v23;
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void *sub_1001FB7A4(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    void *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *unint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_1001FB9A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000992E8(&qword_1002AD440);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  unint64_t result = sub_10016DBD8(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v16 = v5;
    return (unint64_t)v3;
  }
  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    int64_t v12 = v8 + 2;
    int v4 = *((_DWORD *)v8 - 2);
    uint64_t v13 = (void *)*v8;
    id v14 = v5;
    unint64_t result = sub_10016DBD8(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1001FBA9C(uint64_t a1)
{
  return sub_1001FBDD0(a1, &qword_1002AD468);
}

unint64_t sub_1001FBAA8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000992E8(&qword_1002AD540);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (void *)(a1 + 40); ; i += 2)
    {
      int v5 = *((_DWORD *)i - 2);
      uint64_t v6 = *i;
      unint64_t result = sub_10016DBD8(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      *(void *)(v3[7] + 8 * result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1001FBB80(uint64_t a1)
{
  return sub_1001FBDD0(a1, &qword_1002AD568);
}

unint64_t sub_1001FBB8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000992E8(&qword_1002AD560);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  unint64_t result = sub_10016DBD8(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    BOOL v10 = (void *)(v3[7] + 16 * result);
    *BOOL v10 = v6;
    v10[1] = v5;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    id v14 = v9 + 3;
    int v4 = *((_DWORD *)v9 - 4);
    uint64_t v6 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10016DBD8(v4);
    uint64_t v9 = v14;
    uint64_t v5 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1001FBC9C(uint64_t a1)
{
  return sub_1001FBCB4(a1, &qword_1002AD580);
}

unint64_t sub_1001FBCA8(uint64_t a1)
{
  return sub_1001FBCB4(a1, &qword_1002AD578);
}

unint64_t sub_1001FBCB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000992E8(a2);
  int v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  int v5 = *(_DWORD *)(a1 + 32);
  char v7 = *(void **)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  unint64_t result = sub_10016DBD8(v5);
  if (v9)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v21 = v7;
    id v22 = v6;
    return (unint64_t)v4;
  }
  BOOL v10 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v4[6] + 4 * result) = v5;
    uint64_t v11 = (void *)(v4[7] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v6;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      break;
    }
    v4[2] = v14;
    if (!--v2) {
      goto LABEL_8;
    }
    uint64_t v15 = v10 + 3;
    int v5 = *((_DWORD *)v10 - 4);
    char v16 = (void *)*(v10 - 1);
    int64_t v17 = (void *)*v10;
    id v18 = v7;
    id v19 = v6;
    unint64_t result = sub_10016DBD8(v5);
    BOOL v10 = v15;
    uint64_t v6 = v17;
    char v7 = v16;
    if (v20) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1001FBDC4(uint64_t a1)
{
  return sub_1001FBDD0(a1, &qword_1002AD528);
}

unint64_t sub_1001FBDD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000992E8(a2);
  int v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
  int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t result = sub_10016DBD8(v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v4;
  }
  char v9 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v4[6] + 4 * result) = v5;
    *(void *)(v4[7] + 8 * result) = v6;
    uint64_t v10 = v4[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v4[2] = v12;
    if (!--v2) {
      goto LABEL_8;
    }
    BOOL v13 = v9 + 2;
    int v5 = *((_DWORD *)v9 - 2);
    uint64_t v14 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = sub_10016DBD8(v5);
    char v9 = v13;
    uint64_t v6 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1001FBED0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000992E8(&qword_1002AD5D8);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  unint64_t result = sub_10016DBD8(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  char v9 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    uint64_t v10 = (uint64_t *)(v3[7] + 16 * result);
    *uint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    sub_1000CC298(v5);
    if (!--v1) {
      return (unint64_t)v3;
    }
    int v4 = *((_DWORD *)v9 - 4);
    uint64_t v5 = *(v9 - 1);
    uint64_t v6 = *v9;
    unint64_t result = sub_10016DBD8(v4);
    v9 += 3;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001FBFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10016DB60(a2, a3);
  if ((v7 & 1) == 0) {
    goto LABEL_12;
  }
  char v8 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v6);
  uint64_t v10 = *v8;
  unint64_t v9 = v8[1];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v12 = HIBYTE(v9) & 0xF;
  uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  if (!((v9 & 0x2000000000000000) != 0 ? HIBYTE(v9) & 0xF : v10 & 0xFFFFFFFFFFFFLL))
  {
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v9 & 0x1000000000000000) == 0)
  {
    if ((v9 & 0x2000000000000000) == 0)
    {
      if ((v10 & 0x1000000000000000) != 0) {
        char v15 = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        char v15 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v16 = (uint64_t)sub_1001EC598(v15, v13, 10);
      LOBYTE(v10) = v17 & 1;
      goto LABEL_48;
    }
    v31[0] = v10;
    v31[1] = v9 & 0xFFFFFFFFFFFFFFLL;
    if (v10 == 43)
    {
      if (!v12) {
        goto LABEL_61;
      }
      if (v12 == 1 || (BYTE1(v10) - 48) > 9u) {
        goto LABEL_35;
      }
      uint64_t v16 = (BYTE1(v10) - 48);
      if (v12 != 2)
      {
        if ((BYTE2(v10) - 48) > 9u) {
          goto LABEL_35;
        }
        uint64_t v16 = 10 * (BYTE1(v10) - 48) + (BYTE2(v10) - 48);
        uint64_t v18 = v12 - 3;
        if (v18)
        {
          id v19 = (unsigned __int8 *)v31 + 3;
          while (1)
          {
            unsigned int v20 = *v19 - 48;
            if (v20 > 9) {
              goto LABEL_35;
            }
            uint64_t v21 = 10 * v16;
            if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63) {
              goto LABEL_35;
            }
            uint64_t v16 = v21 + v20;
            if (__OFADD__(v21, v20)) {
              goto LABEL_35;
            }
            LOBYTE(v10) = 0;
            ++v19;
            if (!--v18) {
              goto LABEL_48;
            }
          }
        }
      }
    }
    else
    {
      if (v10 == 45)
      {
        if (v12)
        {
          if (v12 != 1 && (BYTE1(v10) - 48) <= 9u)
          {
            if (v12 == 2)
            {
              LOBYTE(v10) = 0;
              uint64_t v16 = -(uint64_t)(BYTE1(v10) - 48);
              goto LABEL_48;
            }
            if ((BYTE2(v10) - 48) <= 9u)
            {
              uint64_t v16 = -10 * (BYTE1(v10) - 48) - (BYTE2(v10) - 48);
              uint64_t v26 = v12 - 3;
              if (!v26) {
                goto LABEL_47;
              }
              uint64_t v27 = (unsigned __int8 *)v31 + 3;
              while (1)
              {
                unsigned int v28 = *v27 - 48;
                if (v28 > 9) {
                  break;
                }
                uint64_t v29 = 10 * v16;
                if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63) {
                  break;
                }
                uint64_t v16 = v29 - v28;
                if (__OFSUB__(v29, v28)) {
                  break;
                }
                LOBYTE(v10) = 0;
                ++v27;
                if (!--v26) {
                  goto LABEL_48;
                }
              }
            }
          }
LABEL_35:
          uint64_t v16 = 0;
          LOBYTE(v10) = 1;
          goto LABEL_48;
        }
        __break(1u);
LABEL_61:
        __break(1u);
        return result;
      }
      if (!v12 || (v10 - 48) > 9u) {
        goto LABEL_35;
      }
      uint64_t v16 = (v10 - 48);
      if (v12 != 1)
      {
        if ((BYTE1(v10) - 48) > 9u) {
          goto LABEL_35;
        }
        uint64_t v16 = 10 * (v10 - 48) + (BYTE1(v10) - 48);
        uint64_t v22 = v12 - 2;
        if (v22)
        {
          uint64_t v23 = (unsigned __int8 *)v31 + 2;
          while (1)
          {
            unsigned int v24 = *v23 - 48;
            if (v24 > 9) {
              goto LABEL_35;
            }
            uint64_t v25 = 10 * v16;
            if ((unsigned __int128)(v16 * (__int128)10) >> 64 != (10 * v16) >> 63) {
              goto LABEL_35;
            }
            uint64_t v16 = v25 + v24;
            if (__OFADD__(v25, v24)) {
              goto LABEL_35;
            }
            LOBYTE(v10) = 0;
            ++v23;
            if (!--v22) {
              goto LABEL_48;
            }
          }
        }
      }
    }
LABEL_47:
    LOBYTE(v10) = 0;
    goto LABEL_48;
  }
  uint64_t v16 = (uint64_t)sub_1001EC4B0(v10, v9, 10);
  LOBYTE(v10) = v30;
LABEL_48:
  swift_bridgeObjectRelease();
  if (v10) {
    return 0;
  }
  else {
    return v16;
  }
}

uint64_t sub_1001FC2F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10016DB60(a2, a3);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  char v8 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v6);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRelease();
  uint64_t v12 = __chkstk_darwin(v11);
  if ((v9 & 0x1000000000000000) != 0 || !(v9 & 0x2000000000000000 | v10 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    __chkstk_darwin(v12);
    if ((v9 & 0x2000000000000000) != 0)
    {
      if (v10 > 0x20u || ((0x100003E01uLL >> v10) & 1) == 0) {
        _swift_stdlib_strtod_clocale();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v10 & 0x1000000000000000) != 0)
      {
        uint64_t v13 = (v9 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v14 = v10 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v13 = _StringObject.sharedUTF8.getter();
      }
      sub_1001FA560(v13, v14, (void (*)(uint64_t *__return_ptr))sub_100200100);
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

void *sub_1001FC50C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v35 = a1 + 64;
    uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
    uint64_t v2 = -1;
    if (v1 < 64) {
      uint64_t v2 = ~(-1 << v1);
    }
    unint64_t v3 = v2 & *(void *)(a1 + 64);
    int64_t v36 = (unint64_t)(v1 + 63) >> 6;
    uint64_t v4 = swift_bridgeObjectRetain();
    int64_t v5 = 0;
    for (i = v4; ; uint64_t v4 = i)
    {
      if (v3)
      {
        unint64_t v6 = __clz(__rbit64(v3));
        v3 &= v3 - 1;
        unint64_t v7 = v6 | (v5 << 6);
      }
      else
      {
        BOOL v8 = __OFADD__(v5++, 1);
        if (v8)
        {
          __break(1u);
          goto LABEL_59;
        }
        if (v5 >= v36) {
          goto LABEL_54;
        }
        unint64_t v9 = *(void *)(v35 + 8 * v5);
        if (!v9)
        {
          int64_t v10 = v5 + 1;
          if (v5 + 1 >= v36) {
            goto LABEL_54;
          }
          unint64_t v9 = *(void *)(v35 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v5 + 2;
            if (v5 + 2 >= v36) {
              goto LABEL_54;
            }
            unint64_t v9 = *(void *)(v35 + 8 * v10);
            if (!v9)
            {
              int64_t v10 = v5 + 3;
              if (v5 + 3 >= v36)
              {
LABEL_54:
                swift_release();
                return _swiftEmptyDictionarySingleton;
              }
              unint64_t v9 = *(void *)(v35 + 8 * v10);
              if (!v9)
              {
                while (1)
                {
                  int64_t v5 = v10 + 1;
                  if (__OFADD__(v10, 1)) {
                    break;
                  }
                  if (v5 >= v36) {
                    goto LABEL_54;
                  }
                  unint64_t v9 = *(void *)(v35 + 8 * v5);
                  ++v10;
                  if (v9) {
                    goto LABEL_20;
                  }
                }
LABEL_59:
                __break(1u);
LABEL_60:
                __break(1u);
LABEL_61:
                __break(1u);
LABEL_62:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x1001FC9E4);
              }
            }
          }
          int64_t v5 = v10;
        }
LABEL_20:
        unint64_t v3 = (v9 - 1) & v9;
        unint64_t v7 = __clz(__rbit64(v9)) + (v5 << 6);
      }
      uint64_t v11 = 16 * v7;
      uint64_t v12 = (uint64_t *)(*(void *)(v4 + 48) + v11);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      char v15 = (uint64_t *)(*(void *)(v4 + 56) + v11);
      uint64_t v17 = *v15;
      uint64_t v16 = v15[1];
      __chkstk_darwin(v4);
      if ((v16 & 0x1000000000000000) != 0) {
        goto LABEL_51;
      }
      if ((v16 & 0x2000000000000000) == 0) {
        break;
      }
      switch((char)v17)
      {
        case 0:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
LABEL_28:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          goto LABEL_29;
        default:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v18 = (unsigned char *)_swift_stdlib_strtod_clocale();
          if (v18) {
LABEL_38:
          }
            BOOL v38 = *v18 == 0;
          else {
LABEL_29:
          }
            BOOL v38 = 0;
          break;
      }
LABEL_30:
      swift_bridgeObjectRelease();
      if (v38)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v24 = sub_10016DB60(v14, v13);
        uint64_t v25 = _swiftEmptyDictionarySingleton[2];
        BOOL v26 = (v23 & 1) == 0;
        uint64_t v27 = v25 + v26;
        if (__OFADD__(v25, v26)) {
          goto LABEL_60;
        }
        char v28 = v23;
        if (_swiftEmptyDictionarySingleton[3] < v27)
        {
          sub_1001EF44C(v27, isUniquelyReferenced_nonNull_native);
          unint64_t v29 = sub_10016DB60(v14, v13);
          if ((v28 & 1) != (v30 & 1)) {
            goto LABEL_62;
          }
          unint64_t v24 = v29;
          if ((v28 & 1) == 0) {
            goto LABEL_49;
          }
LABEL_5:
          *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v24) = 0;
LABEL_6:
          swift_bridgeObjectRelease();
          goto LABEL_7;
        }
        if (isUniquelyReferenced_nonNull_native)
        {
          if (v23) {
            goto LABEL_5;
          }
        }
        else
        {
          sub_1001F72D8();
          if (v28) {
            goto LABEL_5;
          }
        }
LABEL_49:
        _swiftEmptyDictionarySingleton[(v24 >> 6) + 8] |= 1 << v24;
        unint64_t v31 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v24);
        *unint64_t v31 = v14;
        v31[1] = v13;
        *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v24) = 0;
        uint64_t v32 = _swiftEmptyDictionarySingleton[2];
        BOOL v8 = __OFADD__(v32, 1);
        uint64_t v33 = v32 + 1;
        if (v8) {
          goto LABEL_61;
        }
        _swiftEmptyDictionarySingleton[2] = v33;
        swift_bridgeObjectRetain();
        goto LABEL_6;
      }
      swift_bridgeObjectRetain();
      unint64_t v19 = sub_10016DB60(v14, v13);
      char v21 = v20;
      swift_bridgeObjectRelease();
      if (v21)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1001F72D8();
        }
        swift_bridgeObjectRelease();
        sub_1001F343C(v19, (uint64_t)_swiftEmptyDictionarySingleton);
        goto LABEL_6;
      }
LABEL_7:
      swift_bridgeObjectRelease();
    }
    if ((v17 & 0x1000000000000000) != 0)
    {
      switch(*(unsigned char *)((v16 & 0xFFFFFFFFFFFFFFFLL) + 0x20))
      {
        case 0:
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0x20:
          goto LABEL_28;
        default:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v18 = (unsigned char *)_swift_stdlib_strtod_clocale();
          if (!v18) {
            goto LABEL_29;
          }
          goto LABEL_38;
      }
    }
LABEL_51:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _StringGuts._slowWithCString<A>(_:)();
    goto LABEL_30;
  }

  return (void *)sub_1001E9BF8((uint64_t)_swiftEmptyArrayStorage);
}

void *sub_1001FCAEC(uint64_t a1)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v57 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    uint64_t v49 = 0;
    while (1)
    {
      uint64_t v5 = *(void *)(a1 + 8 * v4 + 32);
      if (*(void *)(v5 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v6 = sub_10016DB60(0x6C65646F6DLL, 0xE500000000000000);
        if ((v7 & 1) != 0 && *(void *)(v5 + 16))
        {
          uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 16 * v6);
          swift_bridgeObjectRetain();
          unint64_t v9 = sub_10016DB60(0x6172656D6163, 0xE600000000000000);
          if (v10)
          {
            uint64_t v11 = *(void *)(*(void *)(v5 + 56) + 16 * v9);
            uint64_t v51 = v8;
            uint64_t v52 = v11;
            uint64_t v12 = *(void *)(v5 + 16);
            swift_bridgeObjectRetain();
            if (!v12)
            {
              int v20 = 1;
              goto LABEL_39;
            }
            unint64_t v13 = sub_10016DB60(0x7265776F6CLL, 0xE500000000000000);
            if ((v14 & 1) == 0) {
              goto LABEL_28;
            }
            int v50 = &v49;
            char v15 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v13);
            uint64_t v17 = *v15;
            uint64_t v16 = v15[1];
            uint64_t v56 = 0;
            __chkstk_darwin(v13);
            if ((v16 & 0x1000000000000000) != 0 || !(v16 & 0x2000000000000000 | v17 & 0x1000000000000000))
            {
              swift_bridgeObjectRetain();
              uint64_t v47 = v49;
              _StringGuts._slowWithCString<A>(_:)();
              uint64_t v49 = v47;
              swift_bridgeObjectRelease();
            }
            else
            {
              if ((v16 & 0x2000000000000000) != 0)
              {
                uint64_t v53 = v17;
                uint64_t v54 = v16 & 0xFFFFFFFFFFFFFFLL;
                switch((char)v17)
                {
                  case 0:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 32:
                    swift_bridgeObjectRetain();
                    goto LABEL_23;
                  default:
                    swift_bridgeObjectRetain();
                    uint64_t v44 = (unsigned char *)_swift_stdlib_strtod_clocale();
                    if (v44) {
                      BOOL v19 = *v44 == 0;
                    }
                    else {
LABEL_23:
                    }
                      BOOL v19 = 0;
                    break;
                }
              }
              else
              {
                uint64_t v18 = (unsigned char *)((v17 & 0x1000000000000000) != 0
                              ? (v16 & 0xFFFFFFFFFFFFFFFLL) + 32
                              : _StringObject.sharedUTF8.getter());
                switch(*v18)
                {
                  case 0:
                  case 9:
                  case 0xA:
                  case 0xB:
                  case 0xC:
                  case 0xD:
                  case 0x20:
                    swift_bridgeObjectRetain();
                    goto LABEL_18;
                  default:
                    swift_bridgeObjectRetain();
                    uint64_t v43 = (unsigned char *)_swift_stdlib_strtod_clocale();
                    if (v43) {
                      BOOL v19 = *v43 == 0;
                    }
                    else {
LABEL_18:
                    }
                      BOOL v19 = 0;
                    break;
                }
              }
              BOOL v55 = v19;
              swift_bridgeObjectRelease();
            }
            if (v55)
            {
              int v20 = 0;
              unint64_t v21 = v56 ^ 0x8000000000000000;
              if (!*(void *)(v5 + 16)) {
                goto LABEL_39;
              }
            }
            else
            {
LABEL_28:
              unint64_t v21 = 0;
              int v20 = 1;
              if (!*(void *)(v5 + 16)) {
                goto LABEL_39;
              }
            }
            unint64_t v22 = sub_10016DB60(0x7265707075, 0xE500000000000000);
            if ((v23 & 1) == 0) {
              goto LABEL_39;
            }
            int v50 = (uint64_t *)v21;
            unint64_t v24 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v22);
            uint64_t v26 = *v24;
            uint64_t v25 = v24[1];
            swift_bridgeObjectRetain();
            uint64_t v27 = swift_bridgeObjectRelease();
            uint64_t v56 = 0;
            __chkstk_darwin(v27);
            if ((v25 & 0x1000000000000000) != 0 || !(v25 & 0x2000000000000000 | v26 & 0x1000000000000000))
            {
              uint64_t v48 = v49;
              _StringGuts._slowWithCString<A>(_:)();
              uint64_t v49 = v48;
              goto LABEL_39;
            }
            if ((v25 & 0x2000000000000000) != 0)
            {
              uint64_t v53 = v26;
              uint64_t v54 = v25 & 0xFFFFFFFFFFFFFFLL;
              BOOL v39 = (v26 > 0x20u || ((0x100003E01uLL >> v26) & 1) == 0)
                 && (BOOL v38 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
                 && *v38 == 0;
              BOOL v55 = v39;
              swift_bridgeObjectRelease();
            }
            else
            {
              if ((v26 & 0x1000000000000000) != 0) {
                char v28 = (unsigned __int8 *)((v25 & 0xFFFFFFFFFFFFFFFLL) + 32);
              }
              else {
                char v28 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
              }
              unint64_t v29 = *v28;
              BOOL v31 = (v29 >= 0x21 || ((0x100003E01uLL >> v29) & 1) == 0)
                 && (char v30 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
                 && *v30 == 0;
              BOOL v55 = v31;
LABEL_39:
              swift_bridgeObjectRelease();
            }
            Swift::String v32 = String.lowercased()();
            if (v32._countAndFlagsBits == 0x746E6F7266 && v32._object == (void *)0xE500000000000000)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              LODWORD(v50) = v20;
              char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v34) {
                goto LABEL_75;
              }
              Swift::String v35 = String.lowercased()();
              if (v35._countAndFlagsBits == 0x656469776B636162 && v35._object == (void *)0xE800000000000000) {
                goto LABEL_68;
              }
              char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v37) {
                goto LABEL_75;
              }
              Swift::String v40 = String.lowercased()();
              if (v40._countAndFlagsBits == 0x657075736B636162 && v40._object == (void *)0xED00006564697772)
              {
LABEL_68:
                swift_bridgeObjectRelease();
                goto LABEL_75;
              }
              char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v42 & 1) != 0
                || (Swift::String v45 = String.lowercased()(),
                    swift_bridgeObjectRelease(),
                    v45._countAndFlagsBits == 0x656C65746B636162)
                && v45._object == (void *)0xED00006F746F6870)
              {
LABEL_75:
                swift_bridgeObjectRelease();
              }
              else
              {
                _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
              }
            }
            id v46 = objc_allocWithZone((Class)type metadata accessor for CameraLimit());
            CameraLimit.init(model:camera:minPosition:maxPosition:)();
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            goto LABEL_4;
          }
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
LABEL_4:
      if (v3 == ++v4)
      {
        swift_bridgeObjectRelease();
        return (void *)v57;
      }
    }
  }
  return result;
}

uint64_t sub_1001FD3C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error)) {
    return result;
  }
  uint64_t v6 = result;
  char v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentAttributes);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if (!*(void *)(*v7 + 16))
  {
LABEL_10:
    sub_1000992E8(&qword_1002A9890);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_100240BE0;
    *(void *)(v14 + 32) = a3;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = *v7;
    *char v7 = 0x8000000000000000;
    sub_1001F486C(v14, v6, a2, isUniquelyReferenced_nonNull_native, &qword_1002AD418);
    *char v7 = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_10016DB60(v6, a2);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v11 = *(void **)(*(void *)(v8 + 56) + 8 * v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = sub_100102F98(0, v11[2] + 1, 1, v11);
  }
  unint64_t v13 = v11[2];
  unint64_t v12 = v11[3];
  if (v13 >= v12 >> 1) {
    uint64_t v11 = sub_100102F98((void *)(v12 > 1), v13 + 1, 1, v11);
  }
  v11[2] = v13 + 1;
  v11[v13 + 4] = a3;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001FD5C0(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  sub_10016DB60(1701869940, 0xE400000000000000);
  if ((v1 & 1) == 0) {
    return 0;
  }
  Swift::String v2 = String.lowercased()();
  BOOL v3 = v2._countAndFlagsBits == 0x6574756C6F766572 && v2._object == (void *)0xE800000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = v2._countAndFlagsBits == 0x756F6E69746E6F63 && v2._object == (void *)0xE900000000000073;
    if (v5
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || (v2._countAndFlagsBits == 0x6F756E69746E6F63 ? (BOOL v6 = v2._object == (void *)0xEA00000000007375) : (BOOL v6 = 0),
          v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (v2._countAndFlagsBits == 0x6974616D73697270 && v2._object == (void *)0xE900000000000063 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else if (v2._countAndFlagsBits == 0x676E6974616F6C66 && v2._object == (void *)0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      return 3;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 3;
      }
      else {
        return 0;
      }
    }
  }
}

uint64_t sub_1001FD834(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  sub_10016DB60(0x6C65646F6DLL, 0xE500000000000000);
  if ((v1 & 1) == 0) {
    return 0;
  }
  Swift::String v2 = String.lowercased()();
  BOOL v3 = v2._countAndFlagsBits == 7499897 && v2._object == (void *)0xE300000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v5 = v2._countAndFlagsBits == 0x6E65726566666964 && v2._object == (void *)0xEC0000006C616974;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (v2._countAndFlagsBits == 0x6D6F74737563 && v2._object == (void *)0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v7) {
        return 2;
      }
      else {
        return 0;
      }
    }
  }
}

void sub_1001FD9D8(void *a1, uint64_t a2, objc_class *a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  char v10 = (char *)&v210 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v210 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v210 - v16;
  if (*(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error)) {
    return;
  }
  v214 = v15;
  uint64_t v212 = v7;
  v213 = v10;
  uint64_t v211 = v8;
  uint64_t v218 = a2;
  uint64_t v215 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_error;
  id v216 = a1;
  uint64_t v217 = v3;
  uint64_t v18 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentAttributes);
  swift_beginAccess();
  uint64_t v19 = *v18;
  int v20 = a3;
  if (!*(void *)(*v18 + 16)) {
    goto LABEL_43;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v21 = sub_10016DB60(v218, (uint64_t)a3);
  if ((v22 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  uint64_t v23 = *(void *)(*(void *)(v19 + 56) + 8 * v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v23 + 16)) {
    goto LABEL_42;
  }
  unint64_t v210 = *(void *)(v23 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  type metadata accessor for DockCoreManager();
  if ((static DockCoreManager.debugAllowed.getter() & 1) != 0
    && (v218 == 0x6174735F6B636F6DLL && a3 == (objc_class *)0xEA0000000000646ELL
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v24 = v217;
    ((void (*)(char *, uint64_t, uint64_t))v214[2])(v17, v217 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_logger, v11);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "mock stand", v27, 2u);
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v214[1])(v17, v11);
    id v28 = v216;
    unint64_t v29 = v213;
    uint64_t v30 = v212;
    if (!*(void *)(v210 + 16) || (sub_10016DB60(0x74636166756E616DLL, 0xEC00000072657275), (v31 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v73 = type metadata accessor for Errors();
      sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      uint64_t v74 = swift_allocError();
      *int64_t v75 = 0xD00000000000004FLL;
      v75[1] = 0x800000010023AFE0;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v73 - 8) + 104))(v75, enum case for Errors.ParseFailure(_:), v73);
      *(void *)(v24 + v215) = v74;
      swift_errorRelease();
      [v28 abortParsing];
      return;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v211 + 16))(v29, v24 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_identifier, v30);
    id v32 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo());
    uint64_t v33 = (void *)DockCoreInfo.init(type:name:identifier:)();
    char v34 = (unint64_t *)(v24 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems);
    swift_beginAccess();
    id v35 = v33;
    uint64_t v36 = swift_bridgeObjectRetain();
    sub_1001F9F3C(v36);
    swift_bridgeObjectRelease();
    id v37 = objc_allocWithZone((Class)type metadata accessor for TrackingStand());
    BOOL v38 = (void *)TrackingStand.init(info:systems:)();
    BOOL v39 = (void *)(v24 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_accessories);
    swift_beginAccess();
    id v40 = v38;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    *char v34 = sub_1001EB490((uint64_t)_swiftEmptyArrayStorage, &qword_1002AD430);

    goto LABEL_78;
  }
  if ((v218 != 0x735F6172656D6163 || a3 != (objc_class *)0xEC000000646E6174)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    unint64_t v76 = 0xD000000000000011;
    if (v218 == 0xD000000000000011 && a3 == (objc_class *)0x800000010023AD20
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v77 = v210;
      sub_1001FD834(v210);
      if (v78)
      {
        swift_bridgeObjectRelease();
        uint64_t v79 = v217;
        id v80 = v216;
      }
      else
      {
        uint64_t v79 = v217;
        id v80 = v216;
        if (*(void *)(v77 + 16))
        {
          unint64_t v81 = sub_10016DB60(1701667182, 0xE400000000000000);
          if (v82)
          {
            Swift::String v83 = (uint64_t *)(*(void *)(v77 + 56) + 16 * v81);
            uint64_t v85 = *v83;
            uint64_t v84 = v83[1];
            uint64_t v86 = v79 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuators;
            swift_beginAccess();
            if (!*(void *)(*(void *)v86 + 16))
            {
              swift_bridgeObjectRelease();
              uint64_t v89 = type metadata accessor for Errors();
              sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
              uint64_t v91 = swift_allocError();
              uint64_t v92 = v90;
              unint64_t v93 = 0xD00000000000001ELL;
              Swift::String v94 = "Invalid XML. Missing actuators";
              goto LABEL_64;
            }
            NSString v87 = (uint64_t *)(v79 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems);
            swift_beginAccess();
            if (*(void *)(*v87 + 16))
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              sub_10016DB60(v218, (uint64_t)v20);
              if (v88)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v89 = type metadata accessor for Errors();
                sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
                uint64_t v91 = swift_allocError();
                uint64_t v92 = v90;
                unint64_t v93 = 0xD00000000000002CLL;
                Swift::String v94 = "Invalid XML. Multiple systems with same name";
LABEL_64:
                unint64_t *v90 = v93;
                v90[1] = (unint64_t)(v94 - 32) | 0x8000000000000000;
                (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v89 - 8) + 104))(v92, enum case for Errors.ParseFailure(_:), v89);
                *(void *)(v79 + v215) = v91;
                swift_errorRelease();
                [v80 abortParsing];
                return;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              swift_bridgeObjectRetain();
            }
            unint64_t v76 = v210;
            uint64_t v133 = sub_1001FBFD4(v210, 25705, 0xE200000000000000);
            char v135 = v134;
            swift_bridgeObjectRelease();
            if ((v135 & 1) == 0)
            {
              *(void *)(v79 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId) = v133;
LABEL_107:
              swift_bridgeObjectRetain();
              uint64_t v139 = swift_bridgeObjectRetain();
              sub_1001F9F3C(v139);
              swift_bridgeObjectRelease();
              id v140 = objc_allocWithZone((Class)type metadata accessor for ActuationController());
              uint64_t v141 = (void *)ActuationController.init(accessory:id:motionModel:name:actuators:)();
              swift_beginAccess();
              id v40 = v141;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v223 = *v87;
              *NSString v87 = 0x8000000000000000;
              sub_1001F5BE4((uint64_t)v40, v85, v84, isUniquelyReferenced_nonNull_native, &qword_1002AD430);
              *NSString v87 = v223;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_endAccess();
              *(void *)uint64_t v86 = sub_1001EB490((uint64_t)_swiftEmptyArrayStorage, &qword_1002AD420);
LABEL_78:

              swift_bridgeObjectRelease();
              return;
            }
            uint64_t v136 = *(void *)(v79 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId);
            BOOL v137 = __OFADD__(v136, 1);
            uint64_t v138 = v136 + 1;
            if (!v137)
            {
              *(void *)(v79 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId) = v138;
              goto LABEL_107;
            }
            __break(1u);
            goto LABEL_193;
          }
        }
        swift_bridgeObjectRelease();
      }
      uint64_t v89 = type metadata accessor for Errors();
      sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      uint64_t v91 = swift_allocError();
      uint64_t v92 = v90;
      unint64_t v93 = 0xD000000000000041;
      Swift::String v94 = "Invalid or missing attribute. Required attributes = [model, name]";
      goto LABEL_64;
    }
    uint64_t v95 = v210;
    if (v218 == 0xD000000000000011 && a3 == (objc_class *)0x800000010023AD40
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if (*(void *)(v95 + 16))
      {
        unint64_t v96 = sub_10016DB60(1701667182, 0xE400000000000000);
        if (v97)
        {
          id v98 = (uint64_t *)(*(void *)(v95 + 56) + 16 * v96);
          uint64_t v100 = *v98;
          uint64_t v99 = v98[1];
          uint64_t v101 = v217;
          uint64_t v102 = (unint64_t *)(v217 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensors);
          swift_beginAccess();
          id v103 = v216;
          if (!*(void *)(*v102 + 16))
          {
            swift_bridgeObjectRelease();
            uint64_t v109 = type metadata accessor for Errors();
            sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
            uint64_t v111 = swift_allocError();
            uint64_t v112 = v110;
            unint64_t v113 = 0xD00000000000001CLL;
            unint64_t v114 = "Invalid XML. Missing sensors";
            goto LABEL_109;
          }
          id v104 = objc_allocWithZone((Class)type metadata accessor for SensorTracker());
          swift_bridgeObjectRetain();
          uint64_t v105 = SensorTracker.init(id:name:state:)();
          swift_beginAccess();
          char v106 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v224 = *v102;
          *uint64_t v102 = 0x8000000000000000;
          sub_1001F5BE4(v105, 0x5372656B63617274, 0xED0000726F736E65, v106, &qword_1002AD428);
          *uint64_t v102 = v224;
          swift_bridgeObjectRelease();
          swift_endAccess();
          uint64_t v107 = (uint64_t *)(v101 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems);
          swift_beginAccess();
          if (*(void *)(*v107 + 16))
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_10016DB60(v218, (uint64_t)v20);
            if (v108)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v109 = type metadata accessor for Errors();
              sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
              uint64_t v111 = swift_allocError();
              uint64_t v112 = v110;
              unint64_t v113 = 0xD00000000000002CLL;
              unint64_t v114 = "Invalid XML. Multiple systems with same name";
LABEL_109:
              unint64_t *v110 = v113;
              v110[1] = (unint64_t)(v114 - 32) | 0x8000000000000000;
              (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v109 - 8) + 104))(v112, enum case for Errors.ParseFailure(_:), v109);
              *(void *)(v101 + v215) = v111;
              swift_errorRelease();
              [v103 abortParsing];
              return;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v143 = sub_1001FBFD4(v210, 25705, 0xE200000000000000);
          char v145 = v144;
          swift_bridgeObjectRelease();
          if ((v145 & 1) == 0)
          {
            *(void *)(v101 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId) = v143;
LABEL_115:
            swift_bridgeObjectRetain();
            uint64_t v148 = swift_bridgeObjectRetain();
            sub_1001F9F3C(v148);
            swift_bridgeObjectRelease();
            id v149 = objc_allocWithZone((Class)type metadata accessor for SensorController());
            uint64_t v150 = (void *)SensorController.init(accessory:id:name:sensors:)();
            swift_beginAccess();
            id v40 = v150;
            char v151 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v223 = *v107;
            *uint64_t v107 = 0x8000000000000000;
            sub_1001F5BE4((uint64_t)v40, v100, v99, v151, &qword_1002AD430);
            *uint64_t v107 = v223;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_endAccess();
            *uint64_t v102 = sub_1001EB490((uint64_t)_swiftEmptyArrayStorage, &qword_1002AD428);
            goto LABEL_78;
          }
          uint64_t v146 = *(void *)(v101 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId);
          BOOL v137 = __OFADD__(v146, 1);
          uint64_t v147 = v146 + 1;
          if (!v137)
          {
            *(void *)(v101 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystemId) = v147;
            goto LABEL_115;
          }
          __break(1u);
LABEL_196:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
      }
      goto LABEL_98;
    }
    BOOL v121 = v218 == 6579564 && a3 == (objc_class *)0xE300000000000000;
    char v122 = v121;
    if (v121
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v218 == 0x6E6F74747562 && a3 == (objc_class *)0xE600000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v218 == 0x79726574746162 && a3 == (objc_class *)0xE700000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if (!*(void *)(v95 + 16) || (unint64_t v123 = sub_10016DB60(1701667182, 0xE400000000000000), (v124 & 1) == 0))
      {
LABEL_98:
        swift_bridgeObjectRelease();
        uint64_t v127 = type metadata accessor for Errors();
        sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
        uint64_t v129 = swift_allocError();
        uint64_t v130 = v128;
        unint64_t v131 = 0xD00000000000003ALL;
        unint64_t v132 = "Invalid or missing attribute. Required attributes = [name]";
LABEL_99:
        *unint64_t v128 = v131;
        v128[1] = (unint64_t)(v132 - 32) | 0x8000000000000000;
        (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v127 - 8) + 104))(v130, enum case for Errors.ParseFailure(_:), v127);
        *(void *)(v217 + v215) = v129;
        goto LABEL_44;
      }
      uint64_t v125 = (uint64_t *)(*(void *)(v95 + 56) + 16 * v123);
      uint64_t v55 = *v125;
      a3 = (objc_class *)v125[1];
      uint64_t v79 = v217;
      char v10 = (char *)(v217 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensors);
      swift_beginAccess();
      id v80 = v216;
      if (*(void *)(*(void *)v10 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10016DB60(v218, (uint64_t)v20);
        if (v126)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v89 = type metadata accessor for Errors();
          sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
          uint64_t v91 = swift_allocError();
          uint64_t v92 = v90;
          unint64_t v93 = 0xD00000000000002CLL;
          Swift::String v94 = "Invalid XML. Multiple sensors with same name";
          goto LABEL_64;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      uint64_t v152 = sub_1001FBFD4(v210, 25705, 0xE200000000000000);
      char v154 = v153;
      swift_bridgeObjectRelease();
      if ((v154 & 1) == 0)
      {
        uint64_t v155 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensorId;
LABEL_121:
        *(void *)(v79 + v155) = v152;
        if (v218 == 0x6E6F74747562 && v20 == (objc_class *)0xE600000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          objc_allocWithZone((Class)type metadata accessor for SensorButton());
          swift_bridgeObjectRetain();
          uint64_t v157 = SensorButton.init(id:name:state:)();
LABEL_128:
          uint64_t v159 = v157;
          swift_beginAccess();
          char v160 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v224 = *(void *)v10;
          *(void *)char v10 = 0x8000000000000000;
          sub_1001F5BE4(v159, v55, (uint64_t)a3, v160, &qword_1002AD428);
          *(void *)char v10 = v224;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();
          return;
        }
        if (v122 & 1) != 0 || (_stringCompareWithSmolCheck(_:_:expecting:)())
        {
          id v158 = objc_allocWithZone((Class)type metadata accessor for SensorLED());
          swift_bridgeObjectRetain();
          uint64_t v157 = SensorLED.init(id:name:state:)();
          goto LABEL_128;
        }
        if (v218 == 0x79726574746162 && v20 == (objc_class *)0xE700000000000000
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          id v163 = objc_allocWithZone((Class)type metadata accessor for SensorBattery());
          swift_bridgeObjectRetain();
          uint64_t v157 = SensorBattery.init(id:name:state:)();
          goto LABEL_128;
        }
LABEL_152:
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v155 = OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensorId;
      uint64_t v156 = *(void *)(v79 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSensorId);
      uint64_t v152 = v156 + 1;
      if (!__OFADD__(v156, 1)) {
        goto LABEL_121;
      }
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
      goto LABEL_200;
    }
    unint64_t v161 = v18;
    a3 = (objc_class *)type metadata accessor for Actuator();
    if (static Actuator.Yaw.getter() == v218 && v162 == v20) {
      goto LABEL_131;
    }
    char v164 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v164 & 1) == 0)
    {
      if (static Actuator.Pitch.getter() == v218 && v165 == v20) {
        goto LABEL_131;
      }
      char v166 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v166) {
        goto LABEL_143;
      }
      if (static Actuator.Roll.getter() == v218 && v167 == v20)
      {
LABEL_131:
        swift_bridgeObjectRelease();
        goto LABEL_143;
      }
      char v168 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v168 & 1) == 0) {
        goto LABEL_152;
      }
    }
LABEL_143:
    uint64_t v169 = *v18;
    if (*(void *)(*v18 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v170 = sub_10016DB60(0x7374696D696CLL, 0xE600000000000000);
      if (v171)
      {
        uint64_t v172 = *(void *)(*(void *)(v169 + 56) + 8 * v170);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (*(void *)(v172 + 16))
        {
          uint64_t v173 = *(void *)(v172 + 32);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v174 = *v161;
          if (*(void *)(*v161 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v175 = sub_10016DB60(0x6C6F72746E6F63, 0xE700000000000000);
            if (v176)
            {
              uint64_t v177 = *(void *)(*(void *)(v174 + 56) + 8 * v175);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              if (*(void *)(v177 + 16))
              {
                uint64_t v55 = *(void *)(v177 + 32);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                goto LABEL_157;
              }
            }
            swift_bridgeObjectRelease();
          }
          uint64_t v55 = 0;
LABEL_157:
          char v10 = (char *)(v217 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuators);
          swift_beginAccess();
          if (*(void *)(*(void *)v10 + 16))
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_10016DB60(v218, (uint64_t)v20);
            if (v178)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v127 = type metadata accessor for Errors();
              sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
              uint64_t v129 = swift_allocError();
              uint64_t v130 = v128;
              unint64_t v131 = 0xD00000000000002DLL;
              unint64_t v132 = "Invalid XML. Multiple actuators for same axis";
              goto LABEL_99;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          uint64_t v179 = *v161;
          if (*(void *)(*v161 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v180 = sub_10016DB60(0x6C5F6172656D6163, 0xEC00000074696D69);
            if (v181)
            {
              v214 = *(void **)(*(void *)(v179 + 56) + 8 * v180);
              swift_bridgeObjectRetain();
            }
            else
            {
              v214 = _swiftEmptyArrayStorage;
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            v214 = _swiftEmptyArrayStorage;
          }
          swift_beginAccess();
          sub_1001EDEE8(0x7374696D696CLL, 0xE600000000000000);
          swift_endAccess();
          swift_bridgeObjectRelease();
          swift_beginAccess();
          sub_1001EDEE8(0x6C6F72746E6F63, 0xE700000000000000);
          swift_endAccess();
          swift_bridgeObjectRelease();
          swift_beginAccess();
          sub_1001EDEE8(0x6C5F6172656D6163, 0xEC00000074696D69);
          swift_endAccess();
          swift_bridgeObjectRelease();
          sub_1001FD5C0(v210);
          if (v182)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v127 = type metadata accessor for Errors();
            sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
            uint64_t v129 = swift_allocError();
            uint64_t v130 = v128;
            unint64_t v131 = 0xD00000000000003DLL;
            unint64_t v132 = "Invalid or missing attribute. Required attributes = [type,id]";
            goto LABEL_99;
          }
          uint64_t v183 = sub_1001FBFD4(v210, 25705, 0xE200000000000000);
          char v185 = v184;
          swift_bridgeObjectRelease();
          if (v185)
          {
            uint64_t v186 = *(void *)(v217 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId);
            BOOL v137 = __OFADD__(v186, 1);
            uint64_t v187 = v186 + 1;
            if (v137)
            {
              __break(1u);
              return;
            }
            *(void *)(v217 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId) = v187;
          }
          else
          {
            *(void *)(v217 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentActuatorId) = v183;
          }
          uint64_t v188 = ActuatorType.rawValue.getter();
          if (v188 != ActuatorType.rawValue.getter())
          {
            uint64_t v189 = ActuatorType.rawValue.getter();
            if (v189 != ActuatorType.rawValue.getter())
            {
              uint64_t v196 = ActuatorType.rawValue.getter();
              if (v196 != ActuatorType.rawValue.getter())
              {
                uint64_t v197 = ActuatorType.rawValue.getter();
                if (v197 != ActuatorType.rawValue.getter()) {
                  goto LABEL_196;
                }
              }
              sub_1001FC2F8(v173, 0x797469636F6C6576, 0xE800000000000000);
              if (v198 & 1) != 0 || (sub_1001FC2F8(v173, 0x6172656C65636361, 0xEC0000006E6F6974), (v199))
              {
LABEL_193:
                swift_bridgeObjectRelease();
                goto LABEL_194;
              }
              sub_1001FC2F8(v173, 1701670760, 0xE400000000000000);
              char v201 = v200;
              swift_bridgeObjectRelease();
              if (v201)
              {
LABEL_194:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v127 = type metadata accessor for Errors();
                sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
                uint64_t v129 = swift_allocError();
                uint64_t v130 = v128;
                unint64_t v131 = v76 + 63;
                unint64_t v132 = "Invalid or missing attribute. Required attributes = [velocity,acceleration,home]";
                goto LABEL_99;
              }
              swift_bridgeObjectRetain();
              sub_1001FC50C(v55);
              swift_bridgeObjectRelease();
              sub_1001FCAEC((uint64_t)v214);
              swift_bridgeObjectRelease();
              id v202 = objc_allocWithZone(a3);
              uint64_t v203 = v218;
              uint64_t v204 = (void *)Actuator.init(id:type:name:minPosition:maxPosition:maxSpeed:maxAcceleration:homePosition:controlParams:cameraLimits:)();
              swift_beginAccess();
              swift_bridgeObjectRetain();
              id v205 = v204;
              char v206 = swift_isUniquelyReferenced_nonNull_native();
              unint64_t v224 = *(void *)v10;
              *(void *)char v10 = 0x8000000000000000;
              uint64_t v207 = (uint64_t)v205;
              uint64_t v208 = v203;
LABEL_202:
              sub_1001F5BE4(v207, v208, (uint64_t)v20, v206, &qword_1002AD420);
              *(void *)char v10 = v224;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_endAccess();

              return;
            }
          }
          sub_1001FC2F8(v173, 0x7265776F6CLL, 0xE500000000000000);
          if ((v190 & 1) != 0
            || (sub_1001FC2F8(v173, 0x7265707075, 0xE500000000000000), (v191 & 1) != 0)
            || (sub_1001FC2F8(v173, 0x797469636F6C6576, 0xE800000000000000), (v192 & 1) != 0)
            || (sub_1001FC2F8(v173, 0x6172656C65636361, 0xEC0000006E6F6974), (v193 & 1) != 0))
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v212 = sub_1001FC2F8(v173, 1701670760, 0xE400000000000000);
            LODWORD(v213) = v194;
            swift_bridgeObjectRelease();
            if ((v213 & 1) == 0)
            {
              if (static Actuator.Pitch.getter() == v218 && v195 == v20)
              {
                swift_bridgeObjectRelease();
LABEL_201:
                swift_bridgeObjectRetain();
                sub_1001FC50C(v55);
                swift_bridgeObjectRelease();
                sub_1001FCAEC((uint64_t)v214);
                swift_bridgeObjectRelease();
                objc_allocWithZone(a3);
                v209 = (void *)Actuator.init(id:type:name:minPosition:maxPosition:maxSpeed:maxAcceleration:homePosition:controlParams:cameraLimits:)();
                swift_beginAccess();
                swift_bridgeObjectRetain();
                id v205 = v209;
                char v206 = swift_isUniquelyReferenced_nonNull_native();
                unint64_t v224 = *(void *)v10;
                *(void *)char v10 = 0x8000000000000000;
                uint64_t v207 = (uint64_t)v205;
                uint64_t v208 = v218;
                goto LABEL_202;
              }
LABEL_200:
              _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              goto LABEL_201;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v127 = type metadata accessor for Errors();
          sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
          uint64_t v129 = swift_allocError();
          uint64_t v130 = v128;
          unint64_t v131 = 0xD00000000000005CLL;
          unint64_t v132 = "Invalid or missing attribute. Required attributes = [lower,upper,velocity,acceleration,home]";
          goto LABEL_99;
        }
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v127 = type metadata accessor for Errors();
    sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v129 = swift_allocError();
    uint64_t v130 = v128;
    unint64_t v131 = 0xD000000000000019;
    unint64_t v132 = "Missing limits attributes";
    goto LABEL_99;
  }
  uint64_t v41 = v217;
  ((void (*)(char *, uint64_t, uint64_t))v214[2])(v14, v217 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_logger, v11);
  char v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "camera_stand", v44, 2u);
    swift_slowDealloc();
  }

  ((void (*)(char *, uint64_t))v214[1])(v14, v11);
  uint64_t v45 = v210;
  if (!*(void *)(v210 + 16) || (unint64_t v46 = sub_10016DB60(0x74636166756E616DLL, 0xEC00000072657275), (v47 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v67 = type metadata accessor for Errors();
    sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v69 = swift_allocError();
    id v70 = v68;
    unint64_t v71 = 0xD00000000000004FLL;
    id v72 = "Invalid XML. Invalid or missing attribute. Required attributes = [manufacturer]";
LABEL_47:
    unint64_t *v68 = v71;
    v68[1] = (unint64_t)(v72 - 32) | 0x8000000000000000;
    (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v67 - 8) + 104))(v70, enum case for Errors.ParseFailure(_:), v67);
    *(void *)(v41 + v215) = v69;
    goto LABEL_44;
  }
  uint64_t v48 = (uint64_t *)(*(void *)(v45 + 56) + 16 * v46);
  uint64_t v49 = *v48;
  unint64_t v50 = v48[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v20 = (objc_class *)(v41 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_currentSystems);
  swift_beginAccess();
  if (!*(void *)(*(void *)v20 + 16))
  {
    swift_bridgeObjectRelease();
    uint64_t v67 = type metadata accessor for Errors();
    sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v69 = swift_allocError();
    id v70 = v68;
    unint64_t v71 = 0xD00000000000001CLL;
    id v72 = "Invalid XML. Missing systems";
    goto LABEL_47;
  }
  unint64_t v224 = 0;
  unint64_t v225 = 0xE000000000000000;
  uint64_t v51 = HIBYTE(v50) & 0xF;
  if ((v50 & 0x2000000000000000) == 0) {
    uint64_t v51 = v49 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v219 = v49;
  unint64_t v220 = v50;
  uint64_t v221 = 0;
  uint64_t v222 = v51;
  Swift::String_optional v52 = String.Iterator.next()();
  if (!v52.value._object)
  {
    uint64_t v55 = v211;
LABEL_75:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v213, v41 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_identifier, v212);
    id v115 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo());
    id v116 = (id)DockCoreInfo.init(type:name:identifier:)();
    uint64_t v117 = swift_bridgeObjectRetain();
    sub_1001F9F3C(v117);
    swift_bridgeObjectRelease();
    id v118 = objc_allocWithZone((Class)type metadata accessor for TrackingStand());
    uint64_t v119 = (void *)TrackingStand.init(info:systems:)();
    uint64_t v120 = (void *)(v41 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDescriptionParser_accessories);
    swift_beginAccess();
    id v40 = v119;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v120 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v120 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    *(void *)int v20 = sub_1001EB490((uint64_t)_swiftEmptyArrayStorage, &qword_1002AD430);

    goto LABEL_78;
  }
  uint64_t countAndFlagsBits = v52.value._countAndFlagsBits;
  object = v52.value._object;
  uint64_t v55 = v211;
  while (1)
  {
    if ((Character.isLetter.getter() & 1) == 0 && (Character.isNumber.getter() & 1) == 0) {
      goto LABEL_30;
    }
    if (countAndFlagsBits == 2573 && object == (void *)0xE200000000000000
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      goto LABEL_29;
    }
    if (Character._isSingleScalar.getter())
    {
      unint64_t v58 = sub_1001FA028(countAndFlagsBits, (unint64_t)object);
      if ((v58 & 0x100000000) != 0) {
        goto LABEL_198;
      }
      if ((v58 & 0xFFFFFF80) == 0) {
        break;
      }
    }
LABEL_30:
    swift_bridgeObjectRelease();
    Swift::String_optional v57 = String.Iterator.next()();
    uint64_t countAndFlagsBits = v57.value._countAndFlagsBits;
    object = v57.value._object;
    if (!v57.value._object) {
      goto LABEL_75;
    }
  }
  unint64_t v59 = sub_1001FA028(countAndFlagsBits, (unint64_t)object);
  if ((v59 & 0x100000000) != 0) {
    goto LABEL_199;
  }
  if ((v59 & 0xFFFFFF00) == 0)
  {
LABEL_29:
    v56._uint64_t countAndFlagsBits = countAndFlagsBits;
    v56._object = object;
    String.append(_:)(v56);
    goto LABEL_30;
  }
  __break(1u);
LABEL_42:
  swift_bridgeObjectRelease();
LABEL_43:
  uint64_t v60 = type metadata accessor for Errors();
  sub_1002001F8((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
  uint64_t v61 = swift_allocError();
  char v63 = v62;
  uint64_t v219 = 0;
  unint64_t v220 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v64._uint64_t countAndFlagsBits = 0xD000000000000037;
  v64._object = (void *)0x800000010023ACE0;
  String.append(_:)(v64);
  v65._uint64_t countAndFlagsBits = v218;
  v65._object = v20;
  String.append(_:)(v65);
  unint64_t v66 = v220;
  void *v63 = v219;
  v63[1] = v66;
  (*(void (**)(void *, void, uint64_t))(*(void *)(v60 - 8) + 104))(v63, enum case for Errors.ParseFailure(_:), v60);
  *(void *)(v217 + v215) = v61;
LABEL_44:
  swift_errorRelease();
  [v216 abortParsing];
}

unsigned char *sub_100200078@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100200090(a1, a2);
}

unsigned char *sub_100200090@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_100200100@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_100200144(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BTDiscoveredDevice();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002001A8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100099D14(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002001F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100200240()
{
  unint64_t result = qword_1002AA880;
  if (!qword_1002AA880)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002AA880);
  }
  return result;
}

uint64_t static CocoaError.fileNoSuchFile.getter()
{
  return static CocoaError.fileNoSuchFile.getter();
}

uint64_t type metadata accessor for CocoaError.Code()
{
  return type metadata accessor for CocoaError.Code();
}

uint64_t type metadata accessor for CocoaError()
{
  return type metadata accessor for CocoaError();
}

uint64_t type metadata accessor for CharacterSet()
{
  return type metadata accessor for CharacterSet();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage.init(length:)()
{
  return __DataStorage.init(length:)();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _BridgedStoredNSError.errorCode.getter()
{
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t static URL.temporaryDirectory.getter()
{
  return static URL.temporaryDirectory.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.path(percentEncoded:)(percentEncoded);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.append<A>(components:directoryHint:)()
{
  return URL.append<A>(components:directoryHint:)();
}

uint64_t URL.append<A>(component:directoryHint:)()
{
  return URL.append<A>(component:directoryHint:)();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return URL.init(filePath:directoryHint:relativeTo:)();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return URL.appending<A>(component:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t Data.Deallocator._deallocator.getter()
{
  return Data.Deallocator._deallocator.getter();
}

uint64_t type metadata accessor for Data.Deallocator()
{
  return type metadata accessor for Data.Deallocator();
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
}

uint64_t Data._copyContents(initializing:)()
{
  return Data._copyContents(initializing:)();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return Data._Representation.replaceSubrange(_:with:count:)();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t Data._Representation.subscript.getter()
{
  return Data._Representation.subscript.getter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t Data.append(_:)()
{
  return Data.append(_:)();
}

Swift::UInt8_optional __swiftcall Data.Iterator.next()()
{
  return (Swift::UInt8_optional)Data.Iterator.next()();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return type metadata accessor for Data.Iterator();
}

uint64_t Data.Iterator.init(_:at:)()
{
  return Data.Iterator.init(_:at:)();
}

uint64_t Data.subscript.getter()
{
  return Data.subscript.getter();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t Date.description.getter()
{
  return Date.description.getter();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.DateSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
}

uint64_t Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)()
{
  return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
}

uint64_t Date.ISO8601FormatStyle.dateSeparator(_:)()
{
  return Date.ISO8601FormatStyle.dateSeparator(_:)();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator()
{
  return type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
}

uint64_t type metadata accessor for Date.ISO8601FormatStyle()
{
  return type metadata accessor for Date.ISO8601FormatStyle();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.distance(to:)()
{
  return Date.distance(to:)();
}

uint64_t Date.formatted<A>(_:)()
{
  return Date.formatted<A>(_:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

uint64_t UUID.description.getter()
{
  return UUID.description.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.uuid.getter()
{
  return UUID.uuid.getter();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t TimeZone.init(secondsFromGMT:)()
{
  return TimeZone.init(secondsFromGMT:)();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

Swift::Bool __swiftcall allowedForDockKit()()
{
  return allowedForDockKit()();
}

uint64_t DockFramingMode.description.getter()
{
  return DockFramingMode.description.getter();
}

uint64_t DockState.description.getter()
{
  return DockState.description.getter();
}

uint64_t DockState.rawValue.getter()
{
  return DockState.rawValue.getter();
}

uint64_t type metadata accessor for DockStatus()
{
  return type metadata accessor for DockStatus();
}

uint64_t DockKitIDSMessage.init(type:token:payload:)()
{
  return DockKitIDSMessage.init(type:token:payload:)();
}

uint64_t DockKitIDSMessage.type.getter()
{
  return DockKitIDSMessage.type.getter();
}

uint64_t DockKitIDSMessage.token.getter()
{
  return DockKitIDSMessage.token.getter();
}

uint64_t DockKitIDSMessage.payload.getter()
{
  return DockKitIDSMessage.payload.getter();
}

uint64_t type metadata accessor for DockKitIDSMessage()
{
  return type metadata accessor for DockKitIDSMessage();
}

uint64_t type metadata accessor for DockKitBoundingBox()
{
  return type metadata accessor for DockKitBoundingBox();
}

uint64_t DockKitBoundingBox.init(_:id:)()
{
  return DockKitBoundingBox.init(_:id:)();
}

uint64_t type metadata accessor for DockKitCameraCommand()
{
  return type metadata accessor for DockKitCameraCommand();
}

uint64_t type metadata accessor for DockKitIDSMessageType()
{
  return type metadata accessor for DockKitIDSMessageType();
}

uint64_t type metadata accessor for DockKitIDSMessagingError()
{
  return type metadata accessor for DockKitIDSMessagingError();
}

uint64_t DockKitCameraCommandPayload.command.getter()
{
  return DockKitCameraCommandPayload.command.getter();
}

uint64_t DockKitCameraCommandPayload.payload.getter()
{
  return DockKitCameraCommandPayload.payload.getter();
}

uint64_t type metadata accessor for DockKitCameraCommandPayload()
{
  return type metadata accessor for DockKitCameraCommandPayload();
}

uint64_t DockKitIDSInfo.serialNumber.getter()
{
  return DockKitIDSInfo.serialNumber.getter();
}

uint64_t DockKitIDSInfo.trackingState.getter()
{
  return DockKitIDSInfo.trackingState.getter();
}

uint64_t DockKitIDSInfo.firmwareVersion.getter()
{
  return DockKitIDSInfo.firmwareVersion.getter();
}

uint64_t DockKitIDSInfo.init(info:dockState:trackingState:firmwareVersion:serialNumber:)()
{
  return DockKitIDSInfo.init(info:dockState:trackingState:firmwareVersion:serialNumber:)();
}

uint64_t DockKitIDSInfo.info.getter()
{
  return DockKitIDSInfo.info.getter();
}

uint64_t DockKitIDSInfo.dockState.getter()
{
  return DockKitIDSInfo.dockState.getter();
}

uint64_t type metadata accessor for DockKitIDSInfo()
{
  return type metadata accessor for DockKitIDSInfo();
}

uint64_t type metadata accessor for DockKitFeatures()
{
  return type metadata accessor for DockKitFeatures();
}

uint64_t static DockKitIDSClient.DockKitBroadcastToken.getter()
{
  return static DockKitIDSClient.DockKitBroadcastToken.getter();
}

uint64_t type metadata accessor for DockKitIDSClient()
{
  return type metadata accessor for DockKitIDSClient();
}

uint64_t DockCoreAccessoryType.description.getter()
{
  return DockCoreAccessoryType.description.getter();
}

uint64_t DockCoreAccessoryType.init(rawValue:)()
{
  return DockCoreAccessoryType.init(rawValue:)();
}

uint64_t DockCoreAccessoryType.rawValue.getter()
{
  return DockCoreAccessoryType.rawValue.getter();
}

uint64_t DockCoreInfo.identifier.getter()
{
  return DockCoreInfo.identifier.getter();
}

uint64_t DockCoreInfo.init(uuidString:)()
{
  return DockCoreInfo.init(uuidString:)();
}

uint64_t DockCoreInfo.description.getter()
{
  return DockCoreInfo.description.getter();
}

uint64_t DockCoreInfo.name.getter()
{
  return DockCoreInfo.name.getter();
}

uint64_t DockCoreInfo.init(type:name:identifier:)()
{
  return DockCoreInfo.init(type:name:identifier:)();
}

uint64_t DockCoreInfo.type.getter()
{
  return DockCoreInfo.type.getter();
}

uint64_t DockCoreInfo.isEqual(_:)()
{
  return DockCoreInfo.isEqual(_:)();
}

uint64_t type metadata accessor for DockCoreInfo()
{
  return type metadata accessor for DockCoreInfo();
}

uint64_t static DockCoreManager.debugAllowed.getter()
{
  return static DockCoreManager.debugAllowed.getter();
}

uint64_t static DockCoreManager.localFirmwarePath.getter()
{
  return static DockCoreManager.localFirmwarePath.getter();
}

uint64_t static DockCoreManager.ignoreStartupValidation.getter()
{
  return static DockCoreManager.ignoreStartupValidation.getter();
}

uint64_t static DockCoreManager.diagnosticsCollectionEnabled.getter()
{
  return static DockCoreManager.diagnosticsCollectionEnabled.getter();
}

uint64_t type metadata accessor for DockCoreManager()
{
  return type metadata accessor for DockCoreManager();
}

uint64_t dispatch thunk of DockCoreAccessory.updateFrom(accessory:)()
{
  return dispatch thunk of DockCoreAccessory.updateFrom(accessory:)();
}

uint64_t dispatch thunk of DockCoreAccessory.getActuator(name:)()
{
  return dispatch thunk of DockCoreAccessory.getActuator(name:)();
}

uint64_t dispatch thunk of DockCoreAccessory.serialNumber.getter()
{
  return dispatch thunk of DockCoreAccessory.serialNumber.getter();
}

uint64_t dispatch thunk of DockCoreAccessory.serialNumber.setter()
{
  return dispatch thunk of DockCoreAccessory.serialNumber.setter();
}

uint64_t dispatch thunk of DockCoreAccessory.needsMigration.getter()
{
  return dispatch thunk of DockCoreAccessory.needsMigration.getter();
}

uint64_t dispatch thunk of DockCoreAccessory.needsMigration.setter()
{
  return dispatch thunk of DockCoreAccessory.needsMigration.setter();
}

uint64_t dispatch thunk of DockCoreAccessory.firmwareVersion.getter()
{
  return dispatch thunk of DockCoreAccessory.firmwareVersion.getter();
}

uint64_t dispatch thunk of DockCoreAccessory.firmwareVersion.setter()
{
  return dispatch thunk of DockCoreAccessory.firmwareVersion.setter();
}

uint64_t dispatch thunk of DockCoreAccessory.getActuatorIndex(name:system:)()
{
  return dispatch thunk of DockCoreAccessory.getActuatorIndex(name:system:)();
}

uint64_t dispatch thunk of DockCoreAccessory.getSystemSensors(name:sensors:)()
{
  return dispatch thunk of DockCoreAccessory.getSystemSensors(name:sensors:)();
}

uint64_t dispatch thunk of DockCoreAccessory.hasSystemSensors(name:sensors:)()
{
  return dispatch thunk of DockCoreAccessory.hasSystemSensors(name:sensors:)();
}

uint64_t dispatch thunk of DockCoreAccessory.hasSystemActuators(name:actuators:)()
{
  return dispatch thunk of DockCoreAccessory.hasSystemActuators(name:actuators:)();
}

uint64_t dispatch thunk of DockCoreAccessory.prepForPersistence()()
{
  return dispatch thunk of DockCoreAccessory.prepForPersistence()();
}

uint64_t DockCoreAccessory.init(info:systems:)()
{
  return DockCoreAccessory.init(info:systems:)();
}

uint64_t dispatch thunk of DockCoreAccessory.info.getter()
{
  return dispatch thunk of DockCoreAccessory.info.getter();
}

uint64_t dispatch thunk of DockCoreAccessory.model.getter()
{
  return dispatch thunk of DockCoreAccessory.model.getter();
}

uint64_t dispatch thunk of DockCoreAccessory.model.setter()
{
  return dispatch thunk of DockCoreAccessory.model.setter();
}

uint64_t dispatch thunk of DockCoreAccessory.systems.getter()
{
  return dispatch thunk of DockCoreAccessory.systems.getter();
}

uint64_t dispatch thunk of DockCoreAccessory.certified.getter()
{
  return dispatch thunk of DockCoreAccessory.certified.getter();
}

uint64_t dispatch thunk of DockCoreAccessory.certified.setter()
{
  return dispatch thunk of DockCoreAccessory.certified.setter();
}

uint64_t dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)()
{
  return dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)();
}

uint64_t dispatch thunk of DockCoreAccessory.isMagSafe.getter()
{
  return dispatch thunk of DockCoreAccessory.isMagSafe.getter();
}

uint64_t dispatch thunk of DockCoreAccessory.isMagSafe.setter()
{
  return dispatch thunk of DockCoreAccessory.isMagSafe.setter();
}

uint64_t type metadata accessor for DockCoreAccessory()
{
  return type metadata accessor for DockCoreAccessory();
}

uint64_t type metadata accessor for SensorData()
{
  return type metadata accessor for SensorData();
}

uint64_t SystemType.rawValue.getter()
{
  return SystemType.rawValue.getter();
}

uint64_t CameraLimit.init(model:camera:minPosition:maxPosition:)()
{
  return CameraLimit.init(model:camera:minPosition:maxPosition:)();
}

uint64_t type metadata accessor for CameraLimit()
{
  return type metadata accessor for CameraLimit();
}

uint64_t ActuatorType.rawValue.getter()
{
  return ActuatorType.rawValue.getter();
}

uint64_t SensorButton.init(id:name:state:)()
{
  return SensorButton.init(id:name:state:)();
}

uint64_t type metadata accessor for SensorButton()
{
  return type metadata accessor for SensorButton();
}

uint64_t ActuatorLimit.name.getter()
{
  return ActuatorLimit.name.getter();
}

uint64_t ActuatorLimit.maxSpeed.getter()
{
  return ActuatorLimit.maxSpeed.getter();
}

uint64_t type metadata accessor for ActuatorLimit()
{
  return type metadata accessor for ActuatorLimit();
}

uint64_t type metadata accessor for ComponentType()
{
  return type metadata accessor for ComponentType();
}

uint64_t SensorBattery.init(id:name:state:)()
{
  return SensorBattery.init(id:name:state:)();
}

uint64_t type metadata accessor for SensorBattery()
{
  return type metadata accessor for SensorBattery();
}

uint64_t SensorTracker.init(id:name:state:)()
{
  return SensorTracker.init(id:name:state:)();
}

uint64_t dispatch thunk of SensorTracker.setState(state:)()
{
  return dispatch thunk of SensorTracker.setState(state:)();
}

uint64_t type metadata accessor for SensorTracker()
{
  return type metadata accessor for SensorTracker();
}

uint64_t TrackerCamera.rawValue.getter()
{
  return TrackerCamera.rawValue.getter();
}

uint64_t TrackingStand.init(info:systems:)()
{
  return TrackingStand.init(info:systems:)();
}

uint64_t type metadata accessor for TrackingStand()
{
  return type metadata accessor for TrackingStand();
}

uint64_t dispatch thunk of DKIDSKeepAlive.stopKeepAlive()()
{
  return dispatch thunk of DKIDSKeepAlive.stopKeepAlive()();
}

uint64_t dispatch thunk of DKIDSKeepAlive.startKeepAlive()()
{
  return dispatch thunk of DKIDSKeepAlive.startKeepAlive()();
}

uint64_t dispatch thunk of DKIDSKeepAlive.setDelegate(delegate:)()
{
  return dispatch thunk of DKIDSKeepAlive.setDelegate(delegate:)();
}

uint64_t dispatch thunk of DKIDSKeepAlive.expire(from:fail:)()
{
  return dispatch thunk of DKIDSKeepAlive.expire(from:fail:)();
}

uint64_t dispatch thunk of DKIDSKeepAlive.monitor(from:)()
{
  return dispatch thunk of DKIDSKeepAlive.monitor(from:)();
}

uint64_t type metadata accessor for DKIDSKeepAlive()
{
  return type metadata accessor for DKIDSKeepAlive();
}

uint64_t DKIDSKeepAlive.init(_:)()
{
  return DKIDSKeepAlive.init(_:)();
}

uint64_t dispatch thunk of RepeatingTimer.timeSinceInit()()
{
  return dispatch thunk of RepeatingTimer.timeSinceInit()();
}

uint64_t dispatch thunk of RepeatingTimer.cancel()()
{
  return dispatch thunk of RepeatingTimer.cancel()();
}

uint64_t dispatch thunk of RepeatingTimer.suspend()()
{
  return dispatch thunk of RepeatingTimer.suspend()();
}

uint64_t RepeatingTimer.init(interval:fireOnce:queue:_:)()
{
  return RepeatingTimer.init(interval:fireOnce:queue:_:)();
}

uint64_t type metadata accessor for RepeatingTimer()
{
  return type metadata accessor for RepeatingTimer();
}

uint64_t type metadata accessor for SensorLEDState()
{
  return type metadata accessor for SensorLEDState();
}

uint64_t DKPairingMetric.init(activePairings:duration:error:firmwareVersion:hardwareVersion:)()
{
  return DKPairingMetric.init(activePairings:duration:error:firmwareVersion:hardwareVersion:)();
}

Swift::Void __swiftcall DKPairingMetric.send()()
{
}

uint64_t type metadata accessor for DKPairingMetric()
{
  return type metadata accessor for DKPairingMetric();
}

uint64_t ActuatorFeedback.init(velocities:positions:timestamp:)()
{
  return ActuatorFeedback.init(velocities:positions:timestamp:)();
}

uint64_t type metadata accessor for ActuatorFeedback()
{
  return type metadata accessor for ActuatorFeedback();
}

uint64_t ClientDictionary.init(dictionary:)()
{
  return ClientDictionary.init(dictionary:)();
}

uint64_t type metadata accessor for ClientDictionary()
{
  return type metadata accessor for ClientDictionary();
}

uint64_t SensorController.init(accessory:id:name:sensors:)()
{
  return SensorController.init(accessory:id:name:sensors:)();
}

uint64_t type metadata accessor for SensorController()
{
  return type metadata accessor for SensorController();
}

uint64_t SensorOccurrence.description.getter()
{
  return SensorOccurrence.description.getter();
}

uint64_t SensorOccurrence.rawValue.getter()
{
  return SensorOccurrence.rawValue.getter();
}

Swift::Void __swiftcall DKBTConnectMetric.send()()
{
}

uint64_t DKBTConnectMetric.init(duration:error:reason:)()
{
  return DKBTConnectMetric.init(duration:error:reason:)();
}

uint64_t type metadata accessor for DKBTConnectMetric()
{
  return type metadata accessor for DKBTConnectMetric();
}

uint64_t type metadata accessor for SensorButtonState()
{
  return type metadata accessor for SensorButtonState();
}

uint64_t TrackerStateEvent.rawValue.getter()
{
  return TrackerStateEvent.rawValue.getter();
}

uint64_t TrajectoryCommand.Trajectory.positionCommand.setter()
{
  return TrajectoryCommand.Trajectory.positionCommand.setter();
}

uint64_t TrajectoryCommand.Trajectory.velocityCommand.setter()
{
  return TrajectoryCommand.Trajectory.velocityCommand.setter();
}

uint64_t TrajectoryCommand.Trajectory.actuatorId.setter()
{
  return TrajectoryCommand.Trajectory.actuatorId.setter();
}

uint64_t TrajectoryCommand.Trajectory.points.setter()
{
  return TrajectoryCommand.Trajectory.points.setter();
}

uint64_t TrajectoryCommand.Trajectory.duration.setter()
{
  return TrajectoryCommand.Trajectory.duration.setter();
}

uint64_t TrajectoryCommand.Trajectory.relative.setter()
{
  return TrajectoryCommand.Trajectory.relative.setter();
}

uint64_t TrajectoryCommand.Trajectory.init()()
{
  return TrajectoryCommand.Trajectory.init()();
}

uint64_t type metadata accessor for TrajectoryCommand.Trajectory()
{
  return type metadata accessor for TrajectoryCommand.Trajectory();
}

uint64_t TrajectoryCommand.TrajectoryPoint.time.setter()
{
  return TrajectoryCommand.TrajectoryPoint.time.setter();
}

uint64_t TrajectoryCommand.TrajectoryPoint.position.setter()
{
  return TrajectoryCommand.TrajectoryPoint.position.setter();
}

uint64_t TrajectoryCommand.TrajectoryPoint.velocity.setter()
{
  return TrajectoryCommand.TrajectoryPoint.velocity.setter();
}

uint64_t TrajectoryCommand.TrajectoryPoint.init()()
{
  return TrajectoryCommand.TrajectoryPoint.init()();
}

uint64_t type metadata accessor for TrajectoryCommand.TrajectoryPoint()
{
  return type metadata accessor for TrajectoryCommand.TrajectoryPoint();
}

uint64_t TrajectoryCommand.init(type:priority:trajectories:)()
{
  return TrajectoryCommand.init(type:priority:trajectories:)();
}

uint64_t TrajectoryCommand.type.getter()
{
  return TrajectoryCommand.type.getter();
}

uint64_t TrajectoryCommand.encode()()
{
  return TrajectoryCommand.encode()();
}

uint64_t TrajectoryCommand.init(nsdata:)()
{
  return TrajectoryCommand.init(nsdata:)();
}

uint64_t type metadata accessor for TrajectoryCommand.Priority()
{
  return type metadata accessor for TrajectoryCommand.Priority();
}

uint64_t TrajectoryCommand.Progress.init(data:)()
{
  return TrajectoryCommand.Progress.init(data:)();
}

NSData_optional __swiftcall TrajectoryCommand.Progress.encode()()
{
  unint64_t v0 = (objc_class *)TrajectoryCommand.Progress.encode()();
  result.value.super.Class isa = v0;
  result.is_nil = v1;
  return result;
}

uint64_t TrajectoryCommand.Progress.init(nsdata:)()
{
  return TrajectoryCommand.Progress.init(nsdata:)();
}

uint64_t type metadata accessor for TrajectoryCommand.Progress()
{
  return type metadata accessor for TrajectoryCommand.Progress();
}

uint64_t type metadata accessor for TrajectoryCommand.Animation()
{
  return type metadata accessor for TrajectoryCommand.Animation();
}

uint64_t type metadata accessor for TrajectoryCommand()
{
  return type metadata accessor for TrajectoryCommand();
}

uint64_t ActuatorOccurrence.rawValue.getter()
{
  return ActuatorOccurrence.rawValue.getter();
}

uint64_t static DeviceNotification.trackingButtonNotificationName.getter()
{
  return static DeviceNotification.trackingButtonNotificationName.getter();
}

uint64_t static DeviceNotification.configNotificationName.getter()
{
  return static DeviceNotification.configNotificationName.getter();
}

uint64_t static DeviceNotification.connectedNotificationName.getter()
{
  return static DeviceNotification.connectedNotificationName.getter();
}

uint64_t DeviceNotification.init(name:)()
{
  return DeviceNotification.init(name:)();
}

uint64_t DeviceNotification.state.getter()
{
  return DeviceNotification.state.getter();
}

uint64_t DeviceNotification.state.setter()
{
  return DeviceNotification.state.setter();
}

uint64_t type metadata accessor for DeviceNotification()
{
  return type metadata accessor for DeviceNotification();
}

uint64_t dispatch thunk of SensorTrackerState.state.getter()
{
  return dispatch thunk of SensorTrackerState.state.getter();
}

uint64_t type metadata accessor for SensorTrackerState()
{
  return type metadata accessor for SensorTrackerState();
}

uint64_t ActuationController.getActuatorLimits()()
{
  return ActuationController.getActuatorLimits()();
}

uint64_t ActuationController.init(accessory:id:motionModel:name:actuators:)()
{
  return ActuationController.init(accessory:id:motionModel:name:actuators:)();
}

uint64_t type metadata accessor for ActuationController()
{
  return type metadata accessor for ActuationController();
}

uint64_t PairingRequestState.rawValue.getter()
{
  return PairingRequestState.rawValue.getter();
}

uint64_t TrackingButtonState.init(rawValue:)()
{
  return TrackingButtonState.init(rawValue:)();
}

uint64_t TrackingButtonState.rawValue.getter()
{
  return TrackingButtonState.rawValue.getter();
}

uint64_t static AccessorySystemEvent.kHeaderEventRelease.getter()
{
  return static AccessorySystemEvent.kHeaderEventRelease.getter();
}

uint64_t static AccessorySystemEvent.kHeaderCameraFlip.getter()
{
  return static AccessorySystemEvent.kHeaderCameraFlip.getter();
}

uint64_t static AccessorySystemEvent.kHeaderCameraShutter.getter()
{
  return static AccessorySystemEvent.kHeaderCameraShutter.getter();
}

uint64_t AccessorySystemEvent.init(data:name:)()
{
  return AccessorySystemEvent.init(data:name:)();
}

uint64_t AccessorySystemEvent.init(name:payload:)()
{
  return AccessorySystemEvent.init(name:payload:)();
}

uint64_t AccessorySystemEvent.header.getter()
{
  return AccessorySystemEvent.header.getter();
}

uint64_t AccessorySystemEvent.payload.getter()
{
  return AccessorySystemEvent.payload.getter();
}

uint64_t type metadata accessor for AccessorySystemEvent()
{
  return type metadata accessor for AccessorySystemEvent();
}

uint64_t DKIDSMessagingCenter.init(serviceName:delegate:queue:)()
{
  return DKIDSMessagingCenter.init(serviceName:delegate:queue:)();
}

uint64_t DKIDSMessagingCenter.send(_:)()
{
  return DKIDSMessagingCenter.send(_:)();
}

uint64_t DKIDSMessagingCenter.service.getter()
{
  return DKIDSMessagingCenter.service.getter();
}

uint64_t type metadata accessor for DKIDSMessagingCenter()
{
  return type metadata accessor for DKIDSMessagingCenter();
}

uint64_t AccessoryBatteryState.lowBattery.getter()
{
  return AccessoryBatteryState.lowBattery.getter();
}

uint64_t AccessoryBatteryState.chargeState.getter()
{
  return AccessoryBatteryState.chargeState.getter();
}

uint64_t AccessoryBatteryState.batteryPercent.getter()
{
  return AccessoryBatteryState.batteryPercent.getter();
}

uint64_t AccessoryBatteryState.init(data:name:)()
{
  return AccessoryBatteryState.init(data:name:)();
}

uint64_t type metadata accessor for AccessoryBatteryState()
{
  return type metadata accessor for AccessoryBatteryState();
}

Swift::Void __swiftcall DKFirmwareUpdateMetric.send()()
{
}

uint64_t DKFirmwareUpdateMetric.init(duration:startPercent:endPercent:fromFirmwareVersion:toFirmwareVersion:hardwareVersion:make:hardwareModel:success:error:)()
{
  return DKFirmwareUpdateMetric.init(duration:startPercent:endPercent:fromFirmwareVersion:toFirmwareVersion:hardwareVersion:make:hardwareModel:success:error:)();
}

uint64_t type metadata accessor for DKFirmwareUpdateMetric()
{
  return type metadata accessor for DKFirmwareUpdateMetric();
}

uint64_t dispatch thunk of TrackedSubjectInternal.identifier.getter()
{
  return dispatch thunk of TrackedSubjectInternal.identifier.getter();
}

uint64_t TrackedSubjectInternal.init(identifier:type:rect:saliencyRank:speakingConfidence:lookingAtCameraConfidence:)()
{
  return TrackedSubjectInternal.init(identifier:type:rect:saliencyRank:speakingConfidence:lookingAtCameraConfidence:)();
}

uint64_t dispatch thunk of TrackedSubjectInternal.saliencyRank.getter()
{
  return dispatch thunk of TrackedSubjectInternal.saliencyRank.getter();
}

uint64_t dispatch thunk of TrackedSubjectInternal.rect.getter()
{
  return dispatch thunk of TrackedSubjectInternal.rect.getter();
}

uint64_t type metadata accessor for TrackedSubjectInternal()
{
  return type metadata accessor for TrackedSubjectInternal();
}

uint64_t dispatch thunk of TrackingSummaryInternal.orientation.getter()
{
  return dispatch thunk of TrackingSummaryInternal.orientation.getter();
}

uint64_t TrackingSummaryInternal.init(time:subjects:orientation:)()
{
  return TrackingSummaryInternal.init(time:subjects:orientation:)();
}

uint64_t static TrackingSummaryInternal.decode(data:)()
{
  return static TrackingSummaryInternal.decode(data:)();
}

uint64_t dispatch thunk of TrackingSummaryInternal.encode()()
{
  return dispatch thunk of TrackingSummaryInternal.encode()();
}

uint64_t dispatch thunk of TrackingSummaryInternal.subjects.getter()
{
  return dispatch thunk of TrackingSummaryInternal.subjects.getter();
}

uint64_t type metadata accessor for TrackingSummaryInternal()
{
  return type metadata accessor for TrackingSummaryInternal();
}

uint64_t CameraSessionInformation.cameraType.getter()
{
  return CameraSessionInformation.cameraType.getter();
}

uint64_t CameraSessionInformation.appId.getter()
{
  return CameraSessionInformation.appId.getter();
}

uint64_t CameraSessionInformation.endTime.setter()
{
  return CameraSessionInformation.endTime.setter();
}

uint64_t type metadata accessor for CameraSessionInformation()
{
  return type metadata accessor for CameraSessionInformation();
}

uint64_t CameraOrientationInternal.init(rawValue:)()
{
  return CameraOrientationInternal.init(rawValue:)();
}

uint64_t type metadata accessor for CameraOrientationInternal()
{
  return type metadata accessor for CameraOrientationInternal();
}

uint64_t type metadata accessor for TrackedSubjectTypeInternal()
{
  return type metadata accessor for TrackedSubjectTypeInternal();
}

uint64_t currentSupportedAccessoryVersion.getter()
{
  return currentSupportedAccessoryVersion.getter();
}

uint64_t type metadata accessor for Errors()
{
  return type metadata accessor for Errors();
}

uint64_t System.name.getter()
{
  return System.name.getter();
}

uint64_t System.type.getter()
{
  return System.type.getter();
}

uint64_t Actuator.homePosition.getter()
{
  return Actuator.homePosition.getter();
}

uint64_t Actuator.init(id:type:name:minPosition:maxPosition:maxSpeed:maxAcceleration:homePosition:controlParams:cameraLimits:)()
{
  return Actuator.init(id:type:name:minPosition:maxPosition:maxSpeed:maxAcceleration:homePosition:controlParams:cameraLimits:)();
}

uint64_t static Actuator.Yaw.getter()
{
  return static Actuator.Yaw.getter();
}

uint64_t static Actuator.Roll.getter()
{
  return static Actuator.Roll.getter();
}

uint64_t static Actuator.Pitch.getter()
{
  return static Actuator.Pitch.getter();
}

uint64_t type metadata accessor for Actuator()
{
  return type metadata accessor for Actuator();
}

uint64_t dispatch thunk of Component.id.getter()
{
  return dispatch thunk of Component.id.getter();
}

uint64_t SensorLED.init(id:name:state:)()
{
  return SensorLED.init(id:name:state:)();
}

uint64_t type metadata accessor for SensorLED()
{
  return type metadata accessor for SensorLED();
}

NSNumber __swiftcall CGFloat._bridgeToObjectiveC()()
{
  return (NSNumber)CGFloat._bridgeToObjectiveC()();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)()
{
  return SymmetricKey.withUnsafeBytes<A>(_:)();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return type metadata accessor for SymmetricKey();
}

uint64_t type metadata accessor for SPAKE2.CipherSuite()
{
  return type metadata accessor for SPAKE2.CipherSuite();
}

uint64_t SPAKE2.Prover.processPeerVerificationTagAndGenerateKey(peerVerificationTag:)()
{
  return SPAKE2.Prover.processPeerVerificationTagAndGenerateKey(peerVerificationTag:)();
}

uint64_t SPAKE2.Prover.processPeerShareAndGenerateVerificationTag(peerShare:)()
{
  return SPAKE2.Prover.processPeerShareAndGenerateVerificationTag(peerShare:)();
}

uint64_t SPAKE2.Prover.init(seed:salt:info:context:verifierID:proverID:cipherSuite:)()
{
  return SPAKE2.Prover.init(seed:salt:info:context:verifierID:proverID:cipherSuite:)();
}

uint64_t SPAKE2.Prover.getShare()()
{
  return SPAKE2.Prover.getShare()();
}

uint64_t type metadata accessor for SPAKE2.Prover()
{
  return type metadata accessor for SPAKE2.Prover();
}

uint64_t dispatch thunk of DKIntelligentTrackingState.trackedPeople.getter()
{
  return dispatch thunk of DKIntelligentTrackingState.trackedPeople.getter();
}

uint64_t dispatch thunk of DKIntelligentTrackingState.time.getter()
{
  return dispatch thunk of DKIntelligentTrackingState.time.getter();
}

uint64_t dispatch thunk of DKIntelligentTrackingState.camera.getter()
{
  return dispatch thunk of DKIntelligentTrackingState.camera.getter();
}

uint64_t static DKIntelligentTrackingState.decode(nsdata:)()
{
  return static DKIntelligentTrackingState.decode(nsdata:)();
}

uint64_t type metadata accessor for DKIntelligentTrackingState()
{
  return type metadata accessor for DKIntelligentTrackingState();
}

uint64_t DKThreadSafe.init(wrappedValue:)()
{
  return DKThreadSafe.init(wrappedValue:)();
}

uint64_t DKThreadSafe.wrappedValue.getter()
{
  return DKThreadSafe.wrappedValue.getter();
}

uint64_t DKThreadSafe.wrappedValue.setter()
{
  return DKThreadSafe.wrappedValue.setter();
}

uint64_t type metadata accessor for DKThreadSafe()
{
  return type metadata accessor for DKThreadSafe();
}

uint64_t static DKObservationType.== infix(_:_:)()
{
  return static DKObservationType.== infix(_:_:)();
}

uint64_t type metadata accessor for DKObservationType()
{
  return type metadata accessor for DKObservationType();
}

uint64_t dispatch thunk of DKProbabilityValue.probability.getter()
{
  return dispatch thunk of DKProbabilityValue.probability.getter();
}

uint64_t dispatch thunk of DKProbabilityValue.variable.getter()
{
  return dispatch thunk of DKProbabilityValue.variable.getter();
}

uint64_t DKCameraOrientation.rawValue.getter()
{
  return DKCameraOrientation.rawValue.getter();
}

uint64_t type metadata accessor for DKCameraOrientation()
{
  return type metadata accessor for DKCameraOrientation();
}

uint64_t dispatch thunk of DKPersonTrackerState.rankConfidence.getter()
{
  return dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
}

uint64_t dispatch thunk of DKPersonTrackerState.lookingConfidence.getter()
{
  return dispatch thunk of DKPersonTrackerState.lookingConfidence.getter();
}

uint64_t dispatch thunk of DKPersonTrackerState.speakingConfidence.getter()
{
  return dispatch thunk of DKPersonTrackerState.speakingConfidence.getter();
}

uint64_t dispatch thunk of DKPersonTrackerState.rect.getter()
{
  return dispatch thunk of DKPersonTrackerState.rect.getter();
}

uint64_t dispatch thunk of DKPersonTrackerState.type.getter()
{
  return dispatch thunk of DKPersonTrackerState.type.getter();
}

uint64_t dispatch thunk of DKPersonTrackerState.uuid.getter()
{
  return dispatch thunk of DKPersonTrackerState.uuid.getter();
}

uint64_t type metadata accessor for DKPersonTrackerState()
{
  return type metadata accessor for DKPersonTrackerState();
}

uint64_t DKCamera.orientation.getter()
{
  return DKCamera.orientation.getter();
}

uint64_t type metadata accessor for DKCamera()
{
  return type metadata accessor for DKCamera();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t XPC_TYPE_STRING.getter()
{
  return XPC_TYPE_STRING.getter();
}

uint64_t XPC_ARRAY_APPEND.getter()
{
  return XPC_ARRAY_APPEND.getter();
}

uint64_t XPC_TYPE_DICTIONARY.getter()
{
  return XPC_TYPE_DICTIONARY.getter();
}

uint64_t SIG_IGN.getter()
{
  return SIG_IGN.getter();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t static DispatchTimeoutResult.== infix(_:_:)()
{
  return static DispatchTimeoutResult.== infix(_:_:)();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return dispatch thunk of HashFunction.finalize()();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return dispatch thunk of HashFunction.init()();
}

uint64_t type metadata accessor for SHA512Digest()
{
  return type metadata accessor for SHA512Digest();
}

uint64_t type metadata accessor for SHA512()
{
  return type metadata accessor for SHA512();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t Character._isSingleScalar.getter()
{
  return Character._isSingleScalar.getter();
}

uint64_t Character.isLetter.getter()
{
  return Character.isLetter.getter();
}

uint64_t Character.isNumber.getter()
{
  return Character.isNumber.getter();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Comparable.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t String.init(contentsOf:encoding:)()
{
  return String.init(contentsOf:encoding:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t String.init<A>(bytes:encoding:)()
{
  return String.init<A>(bytes:encoding:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0 = String.uppercased()();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._fromUTF8Repairing(_:)()
{
  return static String._fromUTF8Repairing(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

uint64_t String.index(_:offsetBy:)()
{
  return String.index(_:offsetBy:)();
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

{
  String.append(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

{
  return String.init(cString:)();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = String.Iterator.next()();
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return String.UTF8View._foreignDistance(from:to:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::String __swiftcall String.init(repeating:count:)(Swift::String repeating, Swift::Int count)
{
  uint64_t v2 = String.init(repeating:count:)(repeating._countAndFlagsBits, repeating._object, count);
  result._object = v3;
  result._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t String.init<A>(_:radix:uppercase:)()
{
  return String.init<A>(_:radix:uppercase:)();
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return static Task<>.isCancelled.getter();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._forceBridgeFromObjectiveC(_:result:)()
{
  return static Set._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static Set._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Set._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t static Int._forceBridgeFromObjectiveC(_:result:)()
{
  return static Int._forceBridgeFromObjectiveC(_:result:)();
}

void __swiftcall simd_quatd.init(_:)(simd_quatd *__return_ptr retstr, CMQuaternion a2)
{
}

uint64_t NSFileHandle.write<A>(contentsOf:)()
{
  return NSFileHandle.write<A>(contentsOf:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t OS_dispatch_group.wait(timeout:)()
{
  return OS_dispatch_group.wait(timeout:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t static OS_dispatch_source.makeSignalSource(signal:queue:)()
{
  return static OS_dispatch_source.makeSignalSource(signal:queue:)();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return OS_dispatch_semaphore.wait(timeout:)();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t NSSet.init(objects:)()
{
  return NSSet.init(objects:)();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hash(into:)()
{
  return NSObject.hash(into:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t Optional.debugDescription.getter()
{
  return Optional.debugDescription.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return Substring.index(_:offsetBy:limitedBy:)();
}

uint64_t Substring.distance(from:to:)()
{
  return Substring.distance(from:to:)();
}

uint64_t Substring.subscript.getter()
{
  return Substring.subscript.getter();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return StringProtocol.trimmingCharacters(in:)();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.insert(_:)()
{
  return dispatch thunk of SetAlgebra.insert(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init()()
{
  return dispatch thunk of SetAlgebra.init()();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

uint64_t _StringGuts.foreignErrorCorrectedScalar(startingAt:)()
{
  return _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t _decodeScalar(_:startingAt:)()
{
  return _decodeScalar(_:startingAt:)();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t static ContinuousClock.Instant.now.getter()
{
  return static ContinuousClock.Instant.now.getter();
}

uint64_t ContinuousClock.Instant.advanced(by:)()
{
  return ContinuousClock.Instant.advanced(by:)();
}

uint64_t type metadata accessor for ContinuousClock.Instant()
{
  return type metadata accessor for ContinuousClock.Instant();
}

uint64_t ContinuousClock.init()()
{
  return ContinuousClock.init()();
}

uint64_t type metadata accessor for ContinuousClock()
{
  return type metadata accessor for ContinuousClock();
}

uint64_t dispatch thunk of InstantProtocol.advanced(by:)()
{
  return dispatch thunk of InstantProtocol.advanced(by:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.lookup(_:)()
{
  return __CocoaDictionary.lookup(_:)();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t __CocoaDictionary.Iterator.nextKey()()
{
  return __CocoaDictionary.Iterator.nextKey()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return _CocoaArrayWrapper.subscript.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter()
{
  return dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return type metadata accessor for __ContiguousArrayStorageBase();
}

NSNumber __swiftcall Int8._bridgeToObjectiveC()()
{
  return (NSNumber)Int8._bridgeToObjectiveC()();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t dispatch thunk of Clock.now.getter()
{
  return dispatch thunk of Clock.now.getter();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t dispatch thunk of Error._code.getter()
{
  return dispatch thunk of Error._code.getter();
}

uint64_t dispatch thunk of Error._domain.getter()
{
  return dispatch thunk of Error._domain.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t print(_:separator:terminator:)()
{
  return print(_:separator:terminator:)();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return static Hasher._hash(seed:bytes:count:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t static Duration.seconds(_:)()
{
  return static Duration.seconds(_:)();
}

uint64_t AsyncConnection_Connect()
{
  return _AsyncConnection_Connect();
}

uint64_t AsyncConnection_Release()
{
  return _AsyncConnection_Release();
}

void AudioServicesPlaySystemSoundWithCompletion(SystemSoundID inSystemSoundID, void *inCompletionBlock)
{
}

unsigned __int8 *__cdecl CC_SHA512(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA512(data, len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return _CFNumberIsFloatType(number);
}

void CFRelease(CFTypeRef cf)
{
}

void CFRunLoopRun(void)
{
}

uint64_t CryptoHKDF()
{
  return _CryptoHKDF();
}

uint64_t DebugGetErrorString()
{
  return _DebugGetErrorString();
}

uint64_t HMFBooleanToString()
{
  return _HMFBooleanToString();
}

uint64_t HMFCreateOSLogHandle()
{
  return _HMFCreateOSLogHandle();
}

uint64_t HMFEqualObjects()
{
  return _HMFEqualObjects();
}

uint64_t HMFGetLogIdentifier()
{
  return _HMFGetLogIdentifier();
}

uint64_t HMFGetOSLogHandle()
{
  return _HMFGetOSLogHandle();
}

uint64_t HMFMethodDescription()
{
  return _HMFMethodDescription();
}

uint64_t HardwareAddressToCString()
{
  return _HardwareAddressToCString();
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return _IOAllowPowerChange(kernelPort, notificationID);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return _IODeregisterForSystemPower(notifier);
}

IOReturn IOHIDDeviceGetReport(IOHIDDeviceRef device, IOHIDReportType reportType, CFIndex reportID, uint8_t *report, CFIndex *pReportLength)
{
  return _IOHIDDeviceGetReport(device, reportType, reportID, report, pReportLength);
}

IOReturn IOHIDManagerClose(IOHIDManagerRef manager, IOOptionBits options)
{
  return _IOHIDManagerClose(manager, options);
}

CFSetRef IOHIDManagerCopyDevices(IOHIDManagerRef manager)
{
  return _IOHIDManagerCopyDevices(manager);
}

IOHIDManagerRef IOHIDManagerCreate(CFAllocatorRef allocator, IOOptionBits options)
{
  return _IOHIDManagerCreate(allocator, options);
}

IOReturn IOHIDManagerOpen(IOHIDManagerRef manager, IOOptionBits options)
{
  return _IOHIDManagerOpen(manager, options);
}

void IOHIDManagerSetDeviceMatching(IOHIDManagerRef manager, CFDictionaryRef matching)
{
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return _IORegisterForSystemPower(refcon, thePortRef, callback, notifier);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

uint64_t NormalizeUUIDString()
{
  return _NormalizeUUIDString();
}

uint64_t OPACKDecodeBytes()
{
  return _OPACKDecodeBytes();
}

uint64_t OPACKEncoderCreateData()
{
  return _OPACKEncoderCreateData();
}

uint64_t PairingSessionCreate()
{
  return _PairingSessionCreate();
}

uint64_t PairingSessionDeriveKey()
{
  return _PairingSessionDeriveKey();
}

uint64_t PairingSessionExchange()
{
  return _PairingSessionExchange();
}

uint64_t PairingSessionGetResumeInfo()
{
  return _PairingSessionGetResumeInfo();
}

uint64_t PairingSessionSetFlags()
{
  return _PairingSessionSetFlags();
}

uint64_t PairingSessionSetResumeInfo()
{
  return _PairingSessionSetResumeInfo();
}

uint64_t SBSCreateOpenApplicationService()
{
  return _SBSCreateOpenApplicationService();
}

uint64_t SBSGetScreenLockStatus()
{
  return _SBSGetScreenLockStatus();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return _SecCopyErrorMessageString(status, reserved);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return _SecItemUpdate(query, attributesToUpdate);
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return _SecRandomCopyBytes(rnd, count, bytes);
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return _SecTaskCopySigningIdentifier(task, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

uint64_t TCCAccessPreflightWithAuditToken()
{
  return _TCCAccessPreflightWithAuditToken();
}

uint64_t TLV8BufferAppend()
{
  return _TLV8BufferAppend();
}

uint64_t TLV8BufferAppendUInt64()
{
  return _TLV8BufferAppendUInt64();
}

uint64_t TLV8BufferDetach()
{
  return _TLV8BufferDetach();
}

uint64_t TLV8BufferFree()
{
  return _TLV8BufferFree();
}

uint64_t TLV8BufferInit()
{
  return _TLV8BufferInit();
}

uint64_t TLV8Get()
{
  return _TLV8Get();
}

uint64_t TLV8GetNext()
{
  return _TLV8GetNext();
}

uint64_t TLV8GetOrCopyCoalesced()
{
  return _TLV8GetOrCopyCoalesced();
}

uint64_t TLV8GetUInt64()
{
  return _TLV8GetUInt64();
}

uint64_t TextToHardwareAddress()
{
  return _TextToHardwareAddress();
}

uint64_t UpTicksToMilliseconds()
{
  return _UpTicksToMilliseconds();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _HMFPreconditionFailure()
{
  return __HMFPreconditionFailure();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t __HMFActivityScopeLeave()
{
  return ___HMFActivityScopeLeave();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return __swift_stdlib_strtod_clocale();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

long double atan2(long double __y, long double __x)
{
  return _atan2(__y, __x);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t cced25519_sign()
{
  return _cced25519_sign();
}

uint64_t cced25519_verify()
{
  return _cced25519_verify();
}

uint64_t ccsha512_di()
{
  return _ccsha512_di();
}

uint64_t chacha20_poly1305_decrypt_all_64x64()
{
  return _chacha20_poly1305_decrypt_all_64x64();
}

uint64_t chacha20_poly1305_encrypt_all_64x64()
{
  return _chacha20_poly1305_encrypt_all_64x64();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return _dispatch_data_create(buffer, size, queue, destructor);
}

dispatch_data_t dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2)
{
  return _dispatch_data_create_concat(data1, data2);
}

dispatch_data_t dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr)
{
  return _dispatch_data_create_map(data, buffer_ptr, size_ptr);
}

dispatch_data_t dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length)
{
  return _dispatch_data_create_subrange(data, offset, length);
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return _dispatch_data_get_size(data);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

void exit(int a1)
{
}

void free(void *a1)
{
}

pid_t getpid(void)
{
  return _getpid();
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

uint64_t mach_continuous_time(void)
{
  return _mach_continuous_time();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return _memchr(__s, __c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return _memset_s(__s, __smax, __c, __n);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_state_add_handler()
{
  return _os_state_add_handler();
}

uint64_t os_state_remove_handler()
{
  return _os_state_remove_handler();
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_lock_lock_with_options()
{
  return _os_unfair_lock_lock_with_options();
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t sandbox_extension_consume()
{
  return _sandbox_extension_consume();
}

uint64_t sandbox_extension_release()
{
  return _sandbox_extension_release();
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

int sqlite3_bind_parameter_count(sqlite3_stmt *a1)
{
  return _sqlite3_bind_parameter_count(a1);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return _sqlite3_close_v2(a1);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return _sqlite3_open_v2(filename, ppDb, flags, zVfs);
}

int sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare(db, zSql, nByte, ppStmt, pzTail);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return _strlcpy(__dst, __source, __size);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_dynamicCastObjCProtocolUnconditional()
{
  return _swift_dynamicCastObjCProtocolUnconditional();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakAssign()
{
  return _swift_weakAssign();
}

uint64_t swift_weakCopyAssign()
{
  return _swift_weakCopyAssign();
}

uint64_t swift_weakCopyInit()
{
  return _swift_weakCopyInit();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_weakTakeAssign()
{
  return _swift_weakTakeAssign();
}

uint64_t swift_weakTakeInit()
{
  return _swift_weakTakeInit();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

xpc_object_t xpc_array_create_empty(void)
{
  return _xpc_array_create_empty();
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return _xpc_dictionary_apply(xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

uint64_t xpc_set_event()
{
  return _xpc_set_event();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}

id objc_msgSend_HAPInstanceID(void *a1, const char *a2, ...)
{
  return _[a1 HAPInstanceID];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend_UUIDWithNSUUID_(void *a1, const char *a2, ...)
{
  return [a1 UUIDWithNSUUID:];
}

id objc_msgSend_UUIDWithString_(void *a1, const char *a2, ...)
{
  return [a1 UUIDWithString:];
}

id objc_msgSend___addFragmentationPacket_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "__addFragmentationPacket:");
}

id objc_msgSend___filteredPacketsWithTransactionIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "__filteredPacketsWithTransactionIdentifier:");
}

id objc_msgSend___isTransactionCompleteWithTransactionIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "__isTransactionCompleteWithTransactionIdentifier:");
}

id objc_msgSend___removeAllPendingPacketsWithTransactionIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "__removeAllPendingPacketsWithTransactionIdentifier:");
}

id objc_msgSend___transactionDataWithTransactionIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "__transactionDataWithTransactionIdentifier:");
}

id objc_msgSend__broadcastInfo(void *a1, const char *a2, ...)
{
  return _[a1 _broadcastInfo];
}

id objc_msgSend__buildWriteRequestWithError_shouldForceClose_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_buildWriteRequestWithError:shouldForceClose:");
}

id objc_msgSend__cacheServices_(void *a1, const char *a2, ...)
{
  return [a1 _cacheServices:];
}

id objc_msgSend__cancelAllPendingWritesWithError_(void *a1, const char *a2, ...)
{
  return [a1 _cancelAllPendingWritesWithError:];
}

id objc_msgSend__cancelAllQueuedOperationsWithError_(void *a1, const char *a2, ...)
{
  return [a1 _cancelAllQueuedOperationsWithError:];
}

id objc_msgSend__cancelConnectionWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_cancelConnectionWithError:");
}

id objc_msgSend__cancelDiscoveryWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_cancelDiscoveryWithError:");
}

id objc_msgSend__cancelStreamTransportWithError_(void *a1, const char *a2, ...)
{
  return [a1 _cancelStreamTransportWithError:];
}

id objc_msgSend__characteristicForCBCharacteristic_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_characteristicForCBCharacteristic:");
}

id objc_msgSend__checkForAuthPrompt_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_checkForAuthPrompt:");
}

id objc_msgSend__clearPendingBulkSendListeners(void *a1, const char *a2, ...)
{
  return _[a1 _clearPendingBulkSendListeners];
}

id objc_msgSend__closeAllSessionsWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_closeAllSessionsWithError:");
}

id objc_msgSend__closeConnection(void *a1, const char *a2, ...)
{
  return _[a1 _closeConnection];
}

id objc_msgSend__closeSession(void *a1, const char *a2, ...)
{
  return _[a1 _closeSession];
}

id objc_msgSend__closeWithError_(void *a1, const char *a2, ...)
{
  return [a1 _closeWithError:];
}

id objc_msgSend__configureBroadcastKeyGeneration_service_withCompletion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_configureBroadcastKeyGeneration:service:withCompletion:");
}

id objc_msgSend__configureCharacteristics_queue_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_configureCharacteristics:queue:withCompletionHandler:");
}

id objc_msgSend__createBulkStreamProtocol(void *a1, const char *a2, ...)
{
  return _[a1 _createBulkStreamProtocol];
}

id objc_msgSend__createPrimaryAccessoryFromAdvertisementData(void *a1, const char *a2, ...)
{
  return _[a1 _createPrimaryAccessoryFromAdvertisementData];
}

id objc_msgSend__createSessionCandidateWithRequestHeader_metadata_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_createSessionCandidateWithRequestHeader:metadata:");
}

id objc_msgSend__createSessionFromCandidate_queue_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_createSessionFromCandidate:queue:");
}

id objc_msgSend__createSessionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 _createSessionIdentifier];
}

id objc_msgSend__createStreamSocketWithStreamProtocol_applicationProtocolName_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_createStreamSocketWithStreamProtocol:applicationProtocolName:completion:");
}

id objc_msgSend__decodeOPACKFrame_receivedHeader_receivedPayload_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_decodeOPACKFrame:receivedHeader:receivedPayload:error:");
}

id objc_msgSend__decryptData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_decryptData:error:");
}

id objc_msgSend__delegateRespondsToSelector_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_delegateRespondsToSelector:");
}

id objc_msgSend__deregisterForMessages(void *a1, const char *a2, ...)
{
  return _[a1 _deregisterForMessages];
}

id objc_msgSend__deserializeHeaderBodyLengthWithData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_deserializeHeaderBodyLengthWithData:error:");
}

id objc_msgSend__deserializeHeaderWithData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_deserializeHeaderWithData:error:");
}

id objc_msgSend__discoverCharacteristic_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_discoverCharacteristic:");
}

id objc_msgSend__discoverCharacteristicsForService_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_discoverCharacteristicsForService:");
}

id objc_msgSend__discoverServices(void *a1, const char *a2, ...)
{
  return _[a1 _discoverServices];
}

id objc_msgSend__discoverWithType_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_discoverWithType:completionHandler:");
}

id objc_msgSend__doNextWriteOperation(void *a1, const char *a2, ...)
{
  return _[a1 _doNextWriteOperation];
}

id objc_msgSend__enableBroadcastEvent_interval_forCharacteristic_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_enableBroadcastEvent:interval:forCharacteristic:completionHandler:");
}

id objc_msgSend__enableEvent_forCharacteristic_withCompletionHandler_queue_(void *a1, const char *a2, ...)
{
  return [a1 _enableEvent:forCharacteristic:withCompletionHandler:queue:];
}

id objc_msgSend__enableEvent_toCharacteristic_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_enableEvent:toCharacteristic:completionHandler:");
}

id objc_msgSend__encodeOPACKHeader_payload_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_encodeOPACKHeader:payload:error:");
}

id objc_msgSend__encryptDataAndGenerateAuthTag_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_encryptDataAndGenerateAuthTag:error:")];
}

id objc_msgSend__enqueueRequest_shouldPrioritize_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_enqueueRequest:shouldPrioritize:");
}

id objc_msgSend__establishSecureSession(void *a1, const char *a2, ...)
{
  return _[a1 _establishSecureSession];
}

id objc_msgSend__failPendingMessagesWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_failPendingMessagesWithError:");
}

id objc_msgSend__failPendingSocketRequestsWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_failPendingSocketRequestsWithError:");
}

id objc_msgSend__generateBroadcastKey_queue_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 _generateBroadcastKey:x0 queue:x1 withCompletionHandler:x2];
}

id objc_msgSend__generateValidConstraints_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_generateValidConstraints:");
}

id objc_msgSend__generateValidMetadata_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_generateValidMetadata:");
}

id objc_msgSend__getActiveProtocolWithName_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getActiveProtocolWithName:");
}

id objc_msgSend__getBulkSendSessionForSessionIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getBulkSendSessionForSessionIdentifier:")];
}

id objc_msgSend__getCBCharacteristic_instanceId_service_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getCBCharacteristic:instanceId:service:");
}

id objc_msgSend__getCBService_instanceOrder_(void *a1, const char *a2, ...)
{
  return [a1 _getCBService:instanceOrder:];
}

id objc_msgSend__getCachedService_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getCachedService:");
}

id objc_msgSend__getCharacteristicInstanceID_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getCharacteristicInstanceID:error:")];
}

id objc_msgSend__getCurrentFrameSize(void *a1, const char *a2, ...)
{
  return _[a1 _getCurrentFrameSize];
}

id objc_msgSend__getPairSetupType(void *a1, const char *a2, ...)
{
  return _[a1 _getPairSetupType];
}

id objc_msgSend__getPairingFeaturesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getPairingFeaturesWithCompletionHandler:");
}

id objc_msgSend__getPendingWritesUpToLength_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getPendingWritesUpToLength:")];
}

id objc_msgSend__getProtocolInfoService(void *a1, const char *a2, ...)
{
  return _[a1 _getProtocolInfoService];
}

id objc_msgSend__getServiceInstanceID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getServiceInstanceID:");
}

id objc_msgSend__getStreamProtocol(void *a1, const char *a2, ...)
{
  return _[a1 _getStreamProtocol];
}

id objc_msgSend__handleAccessoryConnected(void *a1, const char *a2, ...)
{
  return _[a1 _handleAccessoryConnected];
}

id objc_msgSend__handleCloseMessage_(void *a1, const char *a2, ...)
{
  return [a1 _handleCloseMessage:];
}

id objc_msgSend__handleCompletedDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 _handleCompletedDiscovery];
}

id objc_msgSend__handleCompletionWithResponseTuples_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleCompletionWithResponseTuples:");
}

id objc_msgSend__handleConnectionIdleTimeout(void *a1, const char *a2, ...)
{
  return _[a1 _handleConnectionIdleTimeout];
}

id objc_msgSend__handleDataMessage_(void *a1, const char *a2, ...)
{
  return [a1 _handleDataMessage:];
}

id objc_msgSend__handleDiscoveredDescriptors_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleDiscoveredDescriptors:");
}

id objc_msgSend__handleEventIndicationForCharacteristic_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleEventIndicationForCharacteristic:");
}

id objc_msgSend__handleHAPNotificationStateUpdateForCharacteristic_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleHAPNotificationStateUpdateForCharacteristic:error:");
}

id objc_msgSend__handleInterruptCharacteristicValue_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleInterruptCharacteristicValue:");
}

id objc_msgSend__handleLocalPairingIdentityRequestWithStatus_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleLocalPairingIdentityRequestWithStatus:");
}

id objc_msgSend__handleOpenWithRequestHeader_payload_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleOpenWithRequestHeader:payload:");
}

id objc_msgSend__handlePairSetupSessionExchangeData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handlePairSetupSessionExchangeData:");
}

id objc_msgSend__handlePairingSetupCodeRequestWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handlePairingSetupCodeRequestWithCompletionHandler:");
}

id objc_msgSend__handlePeerPairingIdentityRequestWithIdentifier_status_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handlePeerPairingIdentityRequestWithIdentifier:status:");
}

id objc_msgSend__handlePendingEvents(void *a1, const char *a2, ...)
{
  return _[a1 _handlePendingEvents];
}

id objc_msgSend__handlePendingRequests(void *a1, const char *a2, ...)
{
  return _[a1 _handlePendingRequests];
}

id objc_msgSend__handleRawResponseData_fromCharacteristic_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleRawResponseData:fromCharacteristic:error:");
}

id objc_msgSend__handleReadCharacteristicSignature_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleReadCharacteristicSignature:error:");
}

id objc_msgSend__handleReadCharacteristicValue_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleReadCharacteristicValue:error:");
}

id objc_msgSend__handleReadServiceInstanceId_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleReadServiceInstanceId:");
}

id objc_msgSend__handleReadServiceSignature_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleReadServiceSignature:error:");
}

id objc_msgSend__handleReceivedData_(void *a1, const char *a2, ...)
{
  return [a1 _handleReceivedData:];
}

id objc_msgSend__handleResponseData_fromCharacteristic_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleResponseData:fromCharacteristic:error:");
}

id objc_msgSend__handleSecuritySessionSetupExchangeData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleSecuritySessionSetupExchangeData:");
}

id objc_msgSend__handleSetupExchangeComplete(void *a1, const char *a2, ...)
{
  return _[a1 _handleSetupExchangeComplete];
}

id objc_msgSend__handleTokenResponse_withHeader_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleTokenResponse:withHeader:");
}

id objc_msgSend__handleTokenUpdateResponse_withHeader_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleTokenUpdateResponse:withHeader:");
}

id objc_msgSend__handleWriteCompletionForCharacteristic_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_handleWriteCompletionForCharacteristic:error:");
}

id objc_msgSend__hapServicesFromCache(void *a1, const char *a2, ...)
{
  return _[a1 _hapServicesFromCache];
}

id objc_msgSend__initWithCharacteristic_requestType_bodyData_shouldEncrypt_timeoutInterval_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_initWithCharacteristic:requestType:bodyData:shouldEncrypt:timeoutInterval:");
}

id objc_msgSend__initializeSetupSession_(void *a1, const char *a2, ...)
{
  return [a1 _initializeSetupSession:];
}

id objc_msgSend__initiateStreamSetup(void *a1, const char *a2, ...)
{
  return _[a1 _initiateStreamSetup];
}

id objc_msgSend__inputInfo(void *a1, const char *a2, ...)
{
  return _[a1 _inputInfo];
}

id objc_msgSend__internalBody(void *a1, const char *a2, ...)
{
  return _[a1 _internalBody];
}

id objc_msgSend__isDataStreamCapable(void *a1, const char *a2, ...)
{
  return _[a1 _isDataStreamCapable];
}

id objc_msgSend__isDataStreamConfigurationValid(void *a1, const char *a2, ...)
{
  return _[a1 _isDataStreamConfigurationValid];
}

id objc_msgSend__isRunning(void *a1, const char *a2, ...)
{
  return _[a1 _isRunning];
}

id objc_msgSend__kickConnectionIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 _kickConnectionIdleTimer];
}

id objc_msgSend__maximumControlWriteLengthForRequest_(void *a1, const char *a2, ...)
{
  return [a1 _maximumControlWriteLengthForRequest:];
}

id objc_msgSend__maybeSubmitMetricForDroppedOpenRequestOfType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_maybeSubmitMetricForDroppedOpenRequestOfType:");
}

id objc_msgSend__nextPacketWithMaximumLength_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_nextPacketWithMaximumLength:error:");
}

id objc_msgSend__notifyActiveStatusChangedFromPreviousValue_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_notifyActiveStatusChangedFromPreviousValue:");
}

id objc_msgSend__notifyDelegateDidClose(void *a1, const char *a2, ...)
{
  return _[a1 _notifyDelegateDidClose];
}

id objc_msgSend__notifyDelegateDidFailWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_notifyDelegateDidFailWithError:");
}

id objc_msgSend__notifyDelegateDidOpen(void *a1, const char *a2, ...)
{
  return _[a1 _notifyDelegateDidOpen];
}

id objc_msgSend__notifyDelegateDidReceiveFrame_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_notifyDelegateDidReceiveFrame:");
}

id objc_msgSend__notifyDelegatesPairingStopped_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_notifyDelegatesPairingStopped:");
}

id objc_msgSend__notifyOpened(void *a1, const char *a2, ...)
{
  return _[a1 _notifyOpened];
}

id objc_msgSend__notifyOpening(void *a1, const char *a2, ...)
{
  return _[a1 _notifyOpening];
}

id objc_msgSend__notifyWriteOperation_didCompleteWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_notifyWriteOperation:didCompleteWithError:");
}

id objc_msgSend__outputInfo(void *a1, const char *a2, ...)
{
  return _[a1 _outputInfo];
}

id objc_msgSend__outstandingRequests(void *a1, const char *a2, ...)
{
  return _[a1 _outstandingRequests];
}

id objc_msgSend__pairingCompletedWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_pairingCompletedWithError:");
}

id objc_msgSend__parseArray_result_objectCreator_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_parseArray:result:objectCreator:");
}

id objc_msgSend__parseCharacteristic_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_parseCharacteristic:error:");
}

id objc_msgSend__parseEmptyResponse_expectedTID_withHeader_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_parseEmptyResponse:expectedTID:withHeader:");
}

id objc_msgSend__parseFields_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_parseFields:");
}

id objc_msgSend__parseFromData_length_status_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_parseFromData:length:status:");
}

id objc_msgSend__parseFromTLVData(void *a1, const char *a2, ...)
{
  return _[a1 _parseFromTLVData];
}

id objc_msgSend__parsePairingFeaturesCharacteristic_authMethod_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_parsePairingFeaturesCharacteristic:authMethod:error:");
}

id objc_msgSend__parseService_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_parseService:error:");
}

id objc_msgSend__pendingRequestForCharacteristic_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_pendingRequestForCharacteristic:");
}

id objc_msgSend__pendingResponseForRequest_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_pendingResponseForRequest:");
}

id objc_msgSend__performEnableEvent_toCharacteristic_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_performEnableEvent:toCharacteristic:completionHandler:");
}

id objc_msgSend__performTimedWriteExecuteForCharacteristic_value_options_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_performTimedWriteExecuteForCharacteristic:value:options:completionHandler:");
}

id objc_msgSend__performTimedWritePrepareWithValue_toCharacteristic_authorizationData_contextData_options_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_performTimedWritePrepareWithValue:toCharacteristic:authorizationData:contextData:options:completionHandler:");
}

id objc_msgSend__performTimedWriteValue_toCharacteristic_authorizationData_contextData_options_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_performTimedWriteValue:toCharacteristic:authorizationData:contextData:options:completionHandler:");
}

id objc_msgSend__performWriteValue_toCharacteristic_authorizationData_contextData_options_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_performWriteValue:toCharacteristic:authorizationData:contextData:options:completionHandler:");
}

id objc_msgSend__populateBagWithPairingIdentitiesForAccessory_fromStore_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_populateBagWithPairingIdentitiesForAccessory:fromStore:");
}

id objc_msgSend__processPendingSocketRequests(void *a1, const char *a2, ...)
{
  return _[a1 _processPendingSocketRequests];
}

id objc_msgSend__processSetupExchangeData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_processSetupExchangeData:error:");
}

id objc_msgSend__pumpMessage_session_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_pumpMessage:session:");
}

id objc_msgSend__pumpReadDataIfPossible(void *a1, const char *a2, ...)
{
  return _[a1 _pumpReadDataIfPossible];
}

id objc_msgSend__pumpReceiveFailure_session_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_pumpReceiveFailure:session:");
}

id objc_msgSend__readCharacteristicSignature_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_readCharacteristicSignature:");
}

id objc_msgSend__readCharacteristicSignatures(void *a1, const char *a2, ...)
{
  return _[a1 _readCharacteristicSignatures];
}

id objc_msgSend__readCharacteristicValue_(void *a1, const char *a2, ...)
{
  return [a1 _readCharacteristicValue:];
}

id objc_msgSend__readCharacteristicValues_queue_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_readCharacteristicValues:queue:completionHandler:");
}

id objc_msgSend__readDescriptorValue_(void *a1, const char *a2, ...)
{
  return [a1 _readDescriptorValue:];
}

id objc_msgSend__readFrameHeaderIfPossible(void *a1, const char *a2, ...)
{
  return _[a1 _readFrameHeaderIfPossible];
}

id objc_msgSend__readPendingDiscoveredCharacteritiscTypesWithCompletion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_readPendingDiscoveredCharacteritiscTypesWithCompletion:");
}

id objc_msgSend__readRequiredTransportCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 _readRequiredTransportCharacteristics];
}

id objc_msgSend__readRequiredTransportCharacteristicsIfNeededWithCompletion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_readRequiredTransportCharacteristicsIfNeededWithCompletion:");
}

id objc_msgSend__readServiceSignature_(void *a1, const char *a2, ...)
{
  return [a1 _readServiceSignature:];
}

id objc_msgSend__readValueForCharacteristic_options_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_readValueForCharacteristic:options:completionHandler:");
}

id objc_msgSend__reallySendRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 _reallySendRequest:completionHandler:];
}

id objc_msgSend__reevaluateTrafficClassForDataStream(void *a1, const char *a2, ...)
{
  return _[a1 _reevaluateTrafficClassForDataStream];
}

id objc_msgSend__registerForMessages(void *a1, const char *a2, ...)
{
  return _[a1 _registerForMessages];
}

id objc_msgSend__remainingBodyLength(void *a1, const char *a2, ...)
{
  return _[a1 _remainingBodyLength];
}

id objc_msgSend__removeAndMarkCompleteAllCompletedWrites(void *a1, const char *a2, ...)
{
  return _[a1 _removeAndMarkCompleteAllCompletedWrites];
}

id objc_msgSend__removeBulkSendSessionForSessionIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_removeBulkSendSessionForSessionIdentifier:");
}

id objc_msgSend__removePairingOfAccessoryServerCancelledMidPairing(void *a1, const char *a2, ...)
{
  return _[a1 _removePairingOfAccessoryServerCancelledMidPairing];
}

id objc_msgSend__reportAuthFailure(void *a1, const char *a2, ...)
{
  return _[a1 _reportAuthFailure];
}

id objc_msgSend__requestResponseForRequest_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_requestResponseForRequest:");
}

id objc_msgSend__resetDefaultDataStream(void *a1, const char *a2, ...)
{
  return _[a1 _resetDefaultDataStream];
}

id objc_msgSend__resetSession(void *a1, const char *a2, ...)
{
  return _[a1 _resetSession];
}

id objc_msgSend__resetTransportInfo(void *a1, const char *a2, ...)
{
  return _[a1 _resetTransportInfo];
}

id objc_msgSend__resetWithError_(void *a1, const char *a2, ...)
{
  return [a1 _resetWithError:];
}

id objc_msgSend__restartConnectionIdleTimer_(void *a1, const char *a2, ...)
{
  return [a1 _restartConnectionIdleTimer:];
}

id objc_msgSend__resumeAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 _resumeAllOperations];
}

id objc_msgSend__resumeConnectionIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 _resumeConnectionIdleTimer];
}

id objc_msgSend__retryDiscovery(void *a1, const char *a2, ...)
{
  return _[a1 _retryDiscovery];
}

id objc_msgSend__sendAckMessageWithIdentifier_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendAckMessageWithIdentifier:completion:");
}

id objc_msgSend__sendCloseMessageWithIdentifier_reason_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendCloseMessageWithIdentifier:reason:completion:");
}

id objc_msgSend__sendControlPacket_forRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 _sendControlPacket:x0 forRequest:x1 completionHandler:x2];
}

id objc_msgSend__sendData_toCharacteristic_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendData:toCharacteristic:completionHandler:");
}

id objc_msgSend__sendHelloMessageOnDataStream_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendHelloMessageOnDataStream:");
}

id objc_msgSend__sendMessageWithHeader_payload_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendMessageWithHeader:payload:completion:");
}

id objc_msgSend__sendNextPayloadFragmentWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendNextPayloadFragmentWithCompletionHandler:");
}

id objc_msgSend__sendOpenResponseWithRequestHeader_bulkSendStatus_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendOpenResponseWithRequestHeader:bulkSendStatus:");
}

id objc_msgSend__sendOpenResponseWithRequestHeader_payload_status_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendOpenResponseWithRequestHeader:payload:status:");
}

id objc_msgSend__sendOpenResponseWithRequestHeader_status_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendOpenResponseWithRequestHeader:status:)];
}

id objc_msgSend__sendOpenResponseWithRequestHeader_streamIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendOpenResponseWithRequestHeader:streamIdentifier:");
}

id objc_msgSend__sendPairingRequestData_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendPairingRequestData:completionHandler:");
}

id objc_msgSend__sendProtocolInfoServiceExchangeData_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendProtocolInfoServiceExchangeData:completion:");
}

id objc_msgSend__sendRequest_shouldPrioritize_responseHandler_(void *a1, const char *a2, ...)
{
  return [a1 _sendRequest:x0 shouldPrioritize:x1 responseHandler:x2];
}

id objc_msgSend__sendTokenRequest(void *a1, const char *a2, ...)
{
  return _[a1 _sendTokenRequest];
}

id objc_msgSend__sendVersionRequestOnDataStream_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_sendVersionRequestOnDataStream:");
}

id objc_msgSend__serialize(void *a1, const char *a2, ...)
{
  return _[a1 _serialize];
}

id objc_msgSend__serializeHeader(void *a1, const char *a2, ...)
{
  return _[a1 _serializeHeader];
}

id objc_msgSend__serviceCacheFromHAPService_serviceOrder_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_serviceCacheFromHAPService:serviceOrder:");
}

id objc_msgSend__serviceForCBService_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_serviceForCBService:");
}

id objc_msgSend__setInternalBody_(void *a1, const char *a2, ...)
{
  return [a1 _setInternalBody:];
}

id objc_msgSend__shouldIgnoreRetryDiscoveryError_(void *a1, const char *a2, ...)
{
  return [a1 _shouldIgnoreRetryDiscoveryError:];
}

id objc_msgSend__shouldResumeConnectionIdletimer(void *a1, const char *a2, ...)
{
  return _[a1 _shouldResumeConnectionIdletimer];
}

id objc_msgSend__stopIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 _stopIdleTimer];
}

id objc_msgSend__stopTransportForWriteFailureError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_stopTransportForWriteFailureError:");
}

id objc_msgSend__stopWithError_(void *a1, const char *a2, ...)
{
  return [a1 _stopWithError:];
}

id objc_msgSend__suspendAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 _suspendAllOperations];
}

id objc_msgSend__suspendConnectionIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 _suspendConnectionIdleTimer];
}

id objc_msgSend__teardownSessionWithError_(void *a1, const char *a2, ...)
{
  return [a1 _teardownSessionWithError:];
}

id objc_msgSend__updateAndValidateServices(void *a1, const char *a2, ...)
{
  return _[a1 _updateAndValidateServices];
}

id objc_msgSend__updateCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 _updateCharacteristic:];
}

id objc_msgSend__updateConnectionIdleTime_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_updateConnectionIdleTime:");
}

id objc_msgSend__updateMetadata_withProvidedMetadata_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_updateMetadata:withProvidedMetadata:");
}

id objc_msgSend__updatePropertiesFromCharacteristic_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_updatePropertiesFromCharacteristic:");
}

id objc_msgSend__updateService_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_updateService:");
}

id objc_msgSend__validateCharacteristicValues(void *a1, const char *a2, ...)
{
  return _[a1 _validateCharacteristicValues];
}

id objc_msgSend__validateGeneratedBroadcastKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_validateGeneratedBroadcastKey:");
}

id objc_msgSend__validateMandatoryCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 _validateMandatoryCharacteristics];
}

id objc_msgSend__validateProtocolInfo_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_validateProtocolInfo:");
}

id objc_msgSend__validateServiceCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 _validateServiceCharacteristics];
}

id objc_msgSend__wakeWithTuple_dnsName_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_wakeWithTuple:dnsName:");
}

id objc_msgSend__writeCharacteristicRequests_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_writeCharacteristicRequests:completion:");
}

id objc_msgSend__writeData_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_writeData:completion:");
}

id objc_msgSend__writeValue_toCharacteristic_authorizationData_contextData_options_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_writeValue:toCharacteristic:authorizationData:contextData:options:completionHandler:");
}

id objc_msgSend_abnormalReasons(void *a1, const char *a2, ...)
{
  return _[a1 abnormalReasons];
}

id objc_msgSend_accessories(void *a1, const char *a2, ...)
{
  return _[a1 accessories];
}

id objc_msgSend_accessory(void *a1, const char *a2, ...)
{
  return _[a1 accessory];
}

id objc_msgSend_accessory_didReceiveBulkSessionCandidate_(void *a1, const char *a2, ...)
{
  return [a1 accessory:didReceiveBulkSessionCandidate:];
}

id objc_msgSend_accessory_didUpdateConnectionState_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessory:didUpdateConnectionState:");
}

id objc_msgSend_accessory_didUpdateReachabilityState_(void *a1, const char *a2, ...)
{
  return [a1 accessory:didUpdateReachabilityState:];
}

id objc_msgSend_accessoryCache(void *a1, const char *a2, ...)
{
  return _[a1 accessoryCache];
}

id objc_msgSend_accessoryDidCloseDataStream_(void *a1, const char *a2, ...)
{
  return [a1 accessoryDidCloseDataStream:];
}

id objc_msgSend_accessoryDidStartListening_(void *a1, const char *a2, ...)
{
  return [a1 accessoryDidStartListening:];
}

id objc_msgSend_accessoryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 accessoryIdentifier];
}

id objc_msgSend_accessoryKeySalt(void *a1, const char *a2, ...)
{
  return _[a1 accessoryKeySalt];
}

id objc_msgSend_accessoryMetadata(void *a1, const char *a2, ...)
{
  return _[a1 accessoryMetadata];
}

id objc_msgSend_accessoryName(void *a1, const char *a2, ...)
{
  return _[a1 accessoryName];
}

id objc_msgSend_accessoryRequestToSend(void *a1, const char *a2, ...)
{
  return _[a1 accessoryRequestToSend];
}

id objc_msgSend_accessoryServer_authenticateUUID_token_(void *a1, const char *a2, ...)
{
  return [a1 accessoryServer:a2 authenticateUUID:a3 token:a4];
}

id objc_msgSend_accessoryServer_confirmUUID_token_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessoryServer:confirmUUID:token:");
}

id objc_msgSend_accessoryServer_didDiscoverAccessories_transaction_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessoryServer:didDiscoverAccessories:transaction:error:")];
}

id objc_msgSend_accessoryServer_didFinishAuth_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessoryServer:didFinishAuth:");
}

id objc_msgSend_accessoryServer_didReceiveBadPasswordThrottleAttemptsWithDelay_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessoryServer:didReceiveBadPasswordThrottleAttemptsWithDelay:");
}

id objc_msgSend_accessoryServer_didStopPairingWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessoryServer:didStopPairingWithError:");
}

id objc_msgSend_accessoryServer_didUpdateValuesForCharacteristic_value_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessoryServer:didUpdateValuesForCharacteristic:value:");
}

id objc_msgSend_accessoryServer_didUpdateValuesForCharacteristics_stateNumber_broadcast_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:");
}

id objc_msgSend_accessoryServer_promptUserForPasswordWithType_(void *a1, const char *a2, ...)
{
  return [a1 accessoryServer:promptUserForPasswordWithType:];
}

id objc_msgSend_accessoryServer_requestUserPermission_accessoryInfo_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessoryServer:requestUserPermission:accessoryInfo:error:");
}

id objc_msgSend_accessoryServer_validateCert_model_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessoryServer:validateCert:model:");
}

id objc_msgSend_accessoryServer_validateUUID_token_model_(void *a1, const char *a2, ...)
{
  return [a1 accessoryServer:v1 validateUUID:v2 token:v3 model:v4];
}

id objc_msgSend_accessoryServerBTLE_didReceiveEncryptedAndAuthenticatedPayload_forCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 accessoryServerBTLE:didReceiveEncryptedAndAuthenticatedPayload:forCharacteristic:];
}

id objc_msgSend_accessoryServerBTLE_didReceivePlaintextPayload_forCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 accessoryServerBTLE:didReceivePlaintextPayload:forCharacteristic:];
}

id objc_msgSend_accessoryServerBTLE_willSendEncryptedAndAuthenticatedPayload_forCharacteristic_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessoryServerBTLE:willSendEncryptedAndAuthenticatedPayload:forCharacteristic:");
}

id objc_msgSend_accessoryServerBTLE_willSendPlaintextPayload_forCharacteristic_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accessoryServerBTLE:willSendPlaintextPayload:forCharacteristic:");
}

id objc_msgSend_activeBulkSendSessions(void *a1, const char *a2, ...)
{
  return _[a1 activeBulkSendSessions];
}

id objc_msgSend_activeReadHandler(void *a1, const char *a2, ...)
{
  return _[a1 activeReadHandler];
}

id objc_msgSend_activeTransitionContexts(void *a1, const char *a2, ...)
{
  return _[a1 activeTransitionContexts];
}

id objc_msgSend_addBulkSendListener_fileType_(void *a1, const char *a2, ...)
{
  return [a1 addBulkSendListener:fileType:];
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addExecutionBlock_(void *a1, const char *a2, ...)
{
  return [a1 addExecutionBlock:];
}

id objc_msgSend_addListener_fileType_(void *a1, const char *a2, ...)
{
  return [a1 addListener:fileType:];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 addObjectsFromArray:];
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return [a1 addOperation:];
}

id objc_msgSend_addProtocol_name_(void *a1, const char *a2, ...)
{
  return [a1 addProtocol:name:];
}

id objc_msgSend_addTLV_data_(void *a1, const char *a2, ...)
{
  return [a1 addTLV:data:];
}

id objc_msgSend_advertisedProtocolVersion(void *a1, const char *a2, ...)
{
  return _[a1 advertisedProtocolVersion];
}

id objc_msgSend_allAccessoryPairingKeys(void *a1, const char *a2, ...)
{
  return _[a1 allAccessoryPairingKeys];
}

id objc_msgSend_allNumbersIntervalString(void *a1, const char *a2, ...)
{
  return _[a1 allNumbersIntervalString];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return [a1 allocWithZone:];
}

id objc_msgSend_allowAssociatedService(void *a1, const char *a2, ...)
{
  return _[a1 allowAssociatedService];
}

id objc_msgSend_allowsKeyedCoding(void *a1, const char *a2, ...)
{
  return _[a1 allowsKeyedCoding];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 appendBytes:x0 length:x1];
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return [a1 appendData:];
}

id objc_msgSend_appendData_error_(void *a1, const char *a2, ...)
{
  return [a1 appendData:error:];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return [a1 appendFormat:];
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return [a1 appendString:];
}

id objc_msgSend_applicationProtocolName(void *a1, const char *a2, ...)
{
  return _[a1 applicationProtocolName];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithArray:];
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithCapacity:];
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObject:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:];
}

id objc_msgSend_assembledFragment(void *a1, const char *a2, ...)
{
  return _[a1 assembledFragment];
}

id objc_msgSend_associateAccessoryWithControllerKey_usingAccessoryPublicKey_(void *a1, const char *a2, ...)
{
  return [a1 associateAccessoryWithControllerKey:usingAccessoryPublicKey:];
}

id objc_msgSend_associateAccessoryWithControllerKeyUsingAccessoryIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 associateAccessoryWithControllerKeyUsingAccessoryIdentifier:];
}

id objc_msgSend_associateAccessoryWithControllerKeyUsingAccessoryPublicKey_(void *a1, const char *a2, ...)
{
  return [a1 associateAccessoryWithControllerKeyUsingAccessoryPublicKey:];
}

id objc_msgSend_asyncBulkSendSessionCandidate_didAcceptOnQueue_callback_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "asyncBulkSendSessionCandidate:didAcceptOnQueue:callback:");
}

id objc_msgSend_asyncBulkSendSessionCandidate_didRejectWithStatus_(void *a1, const char *a2, ...)
{
  return [a1 asyncBulkSendSessionCandidate:didRejectWithStatus:];
}

id objc_msgSend_asyncBulkSendSessionDidCancelSessionWithIdentifier_reason_hadReceivedEof_completion_(void *a1, const char *a2, ...)
{
  return [a1 asyncBulkSendSessionDidCancelSessionWithIdentifier:reason:hadReceivedEof:completion:];
}

id objc_msgSend_asyncHandleIncomingPackets_isEof_(void *a1, const char *a2, ...)
{
  return [a1 asyncHandleIncomingPackets:x0 isEof:x1];
}

id objc_msgSend_asyncHandleRemoteCloseWithError_(void *a1, const char *a2, ...)
{
  return [a1 asyncHandleRemoteCloseWithError:];
}

id objc_msgSend_atvState(void *a1, const char *a2, ...)
{
  return _[a1 atvState];
}

id objc_msgSend_atvState2String_(void *a1, const char *a2, ...)
{
  return [a1 atvState2String:];
}

id objc_msgSend_audioDiagnostics(void *a1, const char *a2, ...)
{
  return _[a1 audioDiagnostics];
}

id objc_msgSend_authMethod(void *a1, const char *a2, ...)
{
  return _[a1 authMethod];
}

id objc_msgSend_authSession(void *a1, const char *a2, ...)
{
  return _[a1 authSession];
}

id objc_msgSend_authSession_authComplete_(void *a1, const char *a2, ...)
{
  return [a1 authSession:authComplete:];
}

id objc_msgSend_authSession_authenticateUUID_token_(void *a1, const char *a2, ...)
{
  return [a1 authSession:authenticateUUID:token:];
}

id objc_msgSend_authSession_confirmUUID_token_(void *a1, const char *a2, ...)
{
  return [a1 authSession:confirmUUID:token:];
}

id objc_msgSend_authSession_sendAuthExchangeData_(void *a1, const char *a2, ...)
{
  return [a1 authSession:sendAuthExchangeData:];
}

id objc_msgSend_authSession_validateUUID_token_(void *a1, const char *a2, ...)
{
  return [a1 authSession:validateUUID:token:];
}

id objc_msgSend_authenticateAccessory(void *a1, const char *a2, ...)
{
  return _[a1 authenticateAccessory];
}

id objc_msgSend_authenticated(void *a1, const char *a2, ...)
{
  return _[a1 authenticated];
}

id objc_msgSend_authenticatedProtocolInfo(void *a1, const char *a2, ...)
{
  return _[a1 authenticatedProtocolInfo];
}

id objc_msgSend_authorizationData(void *a1, const char *a2, ...)
{
  return _[a1 authorizationData];
}

id objc_msgSend_availableKeysToTry(void *a1, const char *a2, ...)
{
  return _[a1 availableKeysToTry];
}

id objc_msgSend_bandwidthFromATVState_MinBandwidth_MaxBandwidth_(void *a1, const char *a2, ...)
{
  return [a1 bandwidthFromATVState:MinBandwidth:MaxBandwidth:];
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _[a1 begin];
}

id objc_msgSend_bitPosition(void *a1, const char *a2, ...)
{
  return _[a1 bitPosition];
}

id objc_msgSend_blePeripheral(void *a1, const char *a2, ...)
{
  return _[a1 blePeripheral];
}

id objc_msgSend_body(void *a1, const char *a2, ...)
{
  return _[a1 body];
}

id objc_msgSend_bodyLength(void *a1, const char *a2, ...)
{
  return _[a1 bodyLength];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_broadcastEnable(void *a1, const char *a2, ...)
{
  return _[a1 broadcastEnable];
}

id objc_msgSend_broadcastInterval(void *a1, const char *a2, ...)
{
  return _[a1 broadcastInterval];
}

id objc_msgSend_broadcastKey(void *a1, const char *a2, ...)
{
  return _[a1 broadcastKey];
}

id objc_msgSend_browser(void *a1, const char *a2, ...)
{
  return _[a1 browser];
}

id objc_msgSend_btleToServiceType_(void *a1, const char *a2, ...)
{
  return [a1 btleToServiceType:];
}

id objc_msgSend_btleuuidStr(void *a1, const char *a2, ...)
{
  return _[a1 btleuuidStr];
}

id objc_msgSend_buildUnencryptedOPACKHeader_payload_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "buildUnencryptedOPACKHeader:payload:error:");
}

id objc_msgSend_bulkSendProtocol(void *a1, const char *a2, ...)
{
  return _[a1 bulkSendProtocol];
}

id objc_msgSend_bulkSendSessionContextFactory(void *a1, const char *a2, ...)
{
  return _[a1 bulkSendSessionContextFactory];
}

id objc_msgSend_byteReader(void *a1, const char *a2, ...)
{
  return _[a1 byteReader];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_bytesNeededForCurrentFrame(void *a1, const char *a2, ...)
{
  return _[a1 bytesNeededForCurrentFrame];
}

id objc_msgSend_bytesWritten(void *a1, const char *a2, ...)
{
  return _[a1 bytesWritten];
}

id objc_msgSend_cachedAccessoryForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 cachedAccessoryForIdentifier:];
}

id objc_msgSend_cachedCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 cachedCharacteristics];
}

id objc_msgSend_cachedServices(void *a1, const char *a2, ...)
{
  return _[a1 cachedServices];
}

id objc_msgSend_callback(void *a1, const char *a2, ...)
{
  return _[a1 callback];
}

id objc_msgSend_canAcceptBulkSendListeners(void *a1, const char *a2, ...)
{
  return _[a1 canAcceptBulkSendListeners];
}

id objc_msgSend_cancelAllOperationsWithError_(void *a1, const char *a2, ...)
{
  return [a1 cancelAllOperationsWithError:];
}

id objc_msgSend_cancelSetup(void *a1, const char *a2, ...)
{
  return _[a1 cancelSetup];
}

id objc_msgSend_cancelWithError_(void *a1, const char *a2, ...)
{
  return [a1 cancelWithError:];
}

id objc_msgSend_cancelWithReason_completion_(void *a1, const char *a2, ...)
{
  return [a1 cancelWithReason:completion:];
}

id objc_msgSend_category(void *a1, const char *a2, ...)
{
  return _[a1 category];
}

id objc_msgSend_categoryIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 categoryIdentifier];
}

id objc_msgSend_cbCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 cbCharacteristic];
}

id objc_msgSend_cbPeripheral(void *a1, const char *a2, ...)
{
  return _[a1 cbPeripheral];
}

id objc_msgSend_cbService(void *a1, const char *a2, ...)
{
  return _[a1 cbService];
}

id objc_msgSend_certificationStatus(void *a1, const char *a2, ...)
{
  return _[a1 certificationStatus];
}

id objc_msgSend_charValue(void *a1, const char *a2, ...)
{
  return _[a1 charValue];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 characterAtIndex:];
}

id objc_msgSend_characteristic(void *a1, const char *a2, ...)
{
  return _[a1 characteristic];
}

id objc_msgSend_characteristicEnableEventCompletionHandlers(void *a1, const char *a2, ...)
{
  return _[a1 characteristicEnableEventCompletionHandlers];
}

id objc_msgSend_characteristicInstanceId(void *a1, const char *a2, ...)
{
  return _[a1 characteristicInstanceId];
}

id objc_msgSend_characteristicMetadata(void *a1, const char *a2, ...)
{
  return _[a1 characteristicMetadata];
}

id objc_msgSend_characteristicOfType_serviceType_(void *a1, const char *a2, ...)
{
  return [a1 characteristicOfType:serviceType:];
}

id objc_msgSend_characteristicProperties(void *a1, const char *a2, ...)
{
  return _[a1 characteristicProperties];
}

id objc_msgSend_characteristicSignatures(void *a1, const char *a2, ...)
{
  return _[a1 characteristicSignatures];
}

id objc_msgSend_characteristicType(void *a1, const char *a2, ...)
{
  return _[a1 characteristicType];
}

id objc_msgSend_characteristicTypeFromUTI_(void *a1, const char *a2, ...)
{
  return [a1 characteristicTypeFromUTI:];
}

id objc_msgSend_characteristicUTIFromType_(void *a1, const char *a2, ...)
{
  return [a1 characteristicUTIFromType:];
}

id objc_msgSend_characteristicUUID(void *a1, const char *a2, ...)
{
  return _[a1 characteristicUUID];
}

id objc_msgSend_characteristicWriteCompletionHandlers(void *a1, const char *a2, ...)
{
  return _[a1 characteristicWriteCompletionHandlers];
}

id objc_msgSend_characteristics(void *a1, const char *a2, ...)
{
  return _[a1 characteristics];
}

id objc_msgSend_characteristicsOfType_(void *a1, const char *a2, ...)
{
  return [a1 characteristicsOfType:];
}

id objc_msgSend_chipFabricIndex(void *a1, const char *a2, ...)
{
  return _[a1 chipFabricIndex];
}

id objc_msgSend_chrDescription(void *a1, const char *a2, ...)
{
  return _[a1 chrDescription];
}

id objc_msgSend_clientQueue(void *a1, const char *a2, ...)
{
  return _[a1 clientQueue];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_closeInitiated(void *a1, const char *a2, ...)
{
  return _[a1 closeInitiated];
}

id objc_msgSend_closeWithError_(void *a1, const char *a2, ...)
{
  return [a1 closeWithError:];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_command(void *a1, const char *a2, ...)
{
  return _[a1 command];
}

id objc_msgSend_communicationProtocol(void *a1, const char *a2, ...)
{
  return _[a1 communicationProtocol];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return [a1 compare:];
}

id objc_msgSend_comparisonBlock(void *a1, const char *a2, ...)
{
  return _[a1 comparisonBlock];
}

id objc_msgSend_completion(void *a1, const char *a2, ...)
{
  return _[a1 completion];
}

id objc_msgSend_completionHandler(void *a1, const char *a2, ...)
{
  return _[a1 completionHandler];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_configNumber(void *a1, const char *a2, ...)
{
  return _[a1 configNumber];
}

id objc_msgSend_configurationRequestForCharacteristic_isBroadcasted_interval_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "configurationRequestForCharacteristic:isBroadcasted:interval:error:")];
}

id objc_msgSend_configurationRequestForService_configRequestType_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "configurationRequestForService:configRequestType:error:");
}

id objc_msgSend_configurations(void *a1, const char *a2, ...)
{
  return _[a1 configurations];
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return [a1 conformsToProtocol:];
}

id objc_msgSend_connect(void *a1, const char *a2, ...)
{
  return _[a1 connect];
}

id objc_msgSend_connectReason(void *a1, const char *a2, ...)
{
  return _[a1 connectReason];
}

id objc_msgSend_connectToBTLEAccessoryServer_(void *a1, const char *a2, ...)
{
  return [a1 connectToBTLEAccessoryServer:];
}

id objc_msgSend_connectWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 connectWithCompletionHandler:];
}

id objc_msgSend_connectionCompletionHandler(void *a1, const char *a2, ...)
{
  return _[a1 connectionCompletionHandler];
}

id objc_msgSend_connectionIdleTime(void *a1, const char *a2, ...)
{
  return _[a1 connectionIdleTime];
}

id objc_msgSend_connectionIdleTimer(void *a1, const char *a2, ...)
{
  return _[a1 connectionIdleTimer];
}

id objc_msgSend_connectionStartTime(void *a1, const char *a2, ...)
{
  return _[a1 connectionStartTime];
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return _[a1 connectionState];
}

id objc_msgSend_connectionTimer(void *a1, const char *a2, ...)
{
  return _[a1 connectionTimer];
}

id objc_msgSend_constraints(void *a1, const char *a2, ...)
{
  return _[a1 constraints];
}

id objc_msgSend_constructInfoRequest_outTID_(void *a1, const char *a2, ...)
{
  return [a1 constructInfoRequest:outTID:];
}

id objc_msgSend_constructRequestHeaderFor_instanceID_outTID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "constructRequestHeaderFor:instanceID:outTID:");
}

id objc_msgSend_constructTokenRequest_outTID_(void *a1, const char *a2, ...)
{
  return [a1 constructTokenRequest:outTID:];
}

id objc_msgSend_constructTokenUpdateRequest_token_outTID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "constructTokenUpdateRequest:token:outTID:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return [a1 containsObject:];
}

id objc_msgSend_contextData(void *a1, const char *a2, ...)
{
  return _[a1 contextData];
}

id objc_msgSend_continueAuthAfterValidation_(void *a1, const char *a2, ...)
{
  return [a1 continueAuthAfterValidation:];
}

id objc_msgSend_continuePairingAfterAuthPrompt(void *a1, const char *a2, ...)
{
  return _[a1 continuePairingAfterAuthPrompt];
}

id objc_msgSend_continueStreamSetupWithResponse_(void *a1, const char *a2, ...)
{
  return [a1 continueStreamSetupWithResponse:];
}

id objc_msgSend_controlOutputStream(void *a1, const char *a2, ...)
{
  return _[a1 controlOutputStream];
}

id objc_msgSend_controlOutputStream_didCloseWithError_(void *a1, const char *a2, ...)
{
  return [a1 controlOutputStream:didCloseWithError:];
}

id objc_msgSend_controlOutputStream_didReceiveRequestToSendControlPacket_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "controlOutputStream:didReceiveRequestToSendControlPacket:completionHandler:")];
}

id objc_msgSend_controlOutputStreamDidComplete_(void *a1, const char *a2, ...)
{
  return [a1 controlOutputStreamDidComplete:];
}

id objc_msgSend_controlOutputStreamDidOpen_(void *a1, const char *a2, ...)
{
  return [a1 controlOutputStreamDidOpen:];
}

id objc_msgSend_controlPayloadWrittenLength(void *a1, const char *a2, ...)
{
  return _[a1 controlPayloadWrittenLength];
}

id objc_msgSend_controlProtocol(void *a1, const char *a2, ...)
{
  return _[a1 controlProtocol];
}

id objc_msgSend_controllerContext(void *a1, const char *a2, ...)
{
  return _[a1 controllerContext];
}

id objc_msgSend_controllerKeyIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 controllerKeyIdentifier];
}

id objc_msgSend_controllerKeySalt(void *a1, const char *a2, ...)
{
  return _[a1 controllerKeySalt];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return [a1 copyWithZone:];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createAddPairingRequestForPairingIdentity_error_(void *a1, const char *a2, ...)
{
  return [a1 createAddPairingRequestForPairingIdentity:error];
}

id objc_msgSend_createListPairingsRequest_(void *a1, const char *a2, ...)
{
  return [a1 createListPairingsRequest:];
}

id objc_msgSend_createRemovePairingRequestForPairingIdentity_error_(void *a1, const char *a2, ...)
{
  return [a1 createRemovePairingRequestForPairingIdentity:error];
}

id objc_msgSend_createRequestIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 createRequestIdentifier];
}

id objc_msgSend_creationBlock(void *a1, const char *a2, ...)
{
  return _[a1 creationBlock];
}

id objc_msgSend_currentChunkSequenceNumber(void *a1, const char *a2, ...)
{
  return _[a1 currentChunkSequenceNumber];
}

id objc_msgSend_currentDiscoveryVersion(void *a1, const char *a2, ...)
{
  return _[a1 currentDiscoveryVersion];
}

id objc_msgSend_currentIdentity(void *a1, const char *a2, ...)
{
  return _[a1 currentIdentity];
}

id objc_msgSend_currentIndexInBag(void *a1, const char *a2, ...)
{
  return _[a1 currentIndexInBag];
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _[a1 currentLocale];
}

id objc_msgSend_currentPacketTransactionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 currentPacketTransactionIdentifier];
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _[a1 currentState];
}

id objc_msgSend_currentTID(void *a1, const char *a2, ...)
{
  return _[a1 currentTID];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataStream(void *a1, const char *a2, ...)
{
  return _[a1 dataStream];
}

id objc_msgSend_dataStream_didFailWithError_(void *a1, const char *a2, ...)
{
  return [a1 dataStream:didFailWithError:];
}

id objc_msgSend_dataStream_didReceiveEvent_header_payload_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dataStream:didReceiveEvent:header:payload:");
}

id objc_msgSend_dataStream_didReceiveRequest_header_payload_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dataStream:didReceiveRequest:header:payload:");
}

id objc_msgSend_dataStream_didReceiveResponse_header_payload_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dataStream:didReceiveResponse:header:payload:");
}

id objc_msgSend_dataStreamDidClose_(void *a1, const char *a2, ...)
{
  return [a1 dataStreamDidClose:];
}

id objc_msgSend_dataStreamDidOpen_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dataStreamDidOpen:");
}

id objc_msgSend_dataStreamDidReceiveRawFrame_(void *a1, const char *a2, ...)
{
  return [a1 dataStreamDidReceiveRawFrame:];
}

id objc_msgSend_dataStreamDidUpdateActiveStatus_(void *a1, const char *a2, ...)
{
  return [a1 dataStreamDidUpdateActiveStatus:];
}

id objc_msgSend_dataStreamFactory(void *a1, const char *a2, ...)
{
  return _[a1 dataStreamFactory];
}

id objc_msgSend_dataStreamInitializationSetupOperation_didCompleteSupportReadWithStatus_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dataStreamInitializationSetupOperation:didCompleteSupportReadWithStatus:");
}

id objc_msgSend_dataStreamInitiatedClose_(void *a1, const char *a2, ...)
{
  return [a1 dataStreamInitiatedClose:];
}

id objc_msgSend_dataStreamSetupOperation_didFailWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dataStreamSetupOperation:didFailWithError:");
}

id objc_msgSend_dataStreamSetupOperation_didSucceedWithTransport_sessionEncryption_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dataStreamSetupOperation:didSucceedWithTransport:sessionEncryption:");
}

id objc_msgSend_dataStreamTransportInterruptSequenceNumber(void *a1, const char *a2, ...)
{
  return _[a1 dataStreamTransportInterruptSequenceNumber];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return [a1 dataUsingEncoding:];
}

id objc_msgSend_dataUsingEncoding_allowLossyConversion_(void *a1, const char *a2, ...)
{
  return [a1 dataUsingEncoding:x0 allowLossyConversion:x1];
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 dataWithBytes:length:];
}

id objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return [a1 dataWithBytesNoCopy:x0 length:x1 freeWhenDone:x2];
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dataWithCapacity:];
}

id objc_msgSend_dataWithData_(void *a1, const char *a2, ...)
{
  return [a1 dataWithData:];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSinceReferenceDate:];
}

id objc_msgSend_deRegisterAccessoryWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 deRegisterAccessoryWithIdentifier:];
}

id objc_msgSend_decodeArrayOfObjectsOfClass_forKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeArrayOfObjectsOfClass:forKey:];
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeDoubleForKey:];
}

id objc_msgSend_decodeInt64ForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeInt64ForKey:];
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeIntegerForKey:];
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeObjectOfClass:forKey:];
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decodeObjectOfClasses:forKey:");
}

id objc_msgSend_decrypt_additionalAuthenticatedData_error_(void *a1, const char *a2, ...)
{
  return [a1 decrypt:x0 additionalAuthenticatedData:x1 error:x2];
}

id objc_msgSend_decrypt_length_additionalAuthData_additionalAuthDataLength_authTagData_authTagDataLength_counterData_counterDataLength_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decrypt:length:additionalAuthData:additionalAuthDataLength:authTagData:authTagDataLength:counterData:counterDataLength:error:");
}

id objc_msgSend_decryptData_additionalAuthenticatedData_error_(void *a1, const char *a2, ...)
{
  return [a1 decryptData:x0 additionalAuthenticatedData:x1 error:x2];
}

id objc_msgSend_decryptEncryptedOPACKFrame_sessionEncryption_receivedHeader_receivedPayload_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decryptEncryptedOPACKFrame:sessionEncryption:receivedHeader:receivedPayload:error:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultDataStream(void *a1, const char *a2, ...)
{
  return _[a1 defaultDataStream];
}

id objc_msgSend_defaultDataValueTransformer(void *a1, const char *a2, ...)
{
  return _[a1 defaultDataValueTransformer];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_delegateQueue(void *a1, const char *a2, ...)
{
  return _[a1 delegateQueue];
}

id objc_msgSend_delegatesMap(void *a1, const char *a2, ...)
{
  return _[a1 delegatesMap];
}

id objc_msgSend_deletePeripheralIdentifierForAccessoryIdentifier_error_(void *a1, const char *a2, ...)
{
  return [a1 deletePeripheralIdentifierForAccessoryIdentifier:error:];
}

id objc_msgSend_denylisted(void *a1, const char *a2, ...)
{
  return _[a1 denylisted];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_description_indent_(void *a1, const char *a2, ...)
{
  return [a1 description:indent:];
}

id objc_msgSend_descriptionWithIndent_(void *a1, const char *a2, ...)
{
  return [a1 descriptionWithIndent:];
}

id objc_msgSend_descriptors(void *a1, const char *a2, ...)
{
  return _[a1 descriptors];
}

id objc_msgSend_deviceIDString(void *a1, const char *a2, ...)
{
  return _[a1 deviceIDString];
}

id objc_msgSend_deviceIdentifer(void *a1, const char *a2, ...)
{
  return _[a1 deviceIdentifer];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithCapacity:];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjects:forKeys:count:];
}

id objc_msgSend_disassociateAccessoryWithControllerKeyUsingAccessoryIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 disassociateAccessoryWithControllerKeyUsingAccessoryIdentifier:];
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return _[a1 disconnect];
}

id objc_msgSend_disconnectFromBTLEAccessoryServer_(void *a1, const char *a2, ...)
{
  return [a1 disconnectFromBTLEAccessoryServer:];
}

id objc_msgSend_disconnectWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 disconnectWithCompletionHandler:];
}

id objc_msgSend_disconnectWithCompletionHandler_disconnectionError_(void *a1, const char *a2, ...)
{
  return [a1 disconnectWithCompletionHandler:disconnectionError:];
}

id objc_msgSend_discoverAccessoriesAndReadCharacteristicTypes_(void *a1, const char *a2, ...)
{
  return [a1 discoverAccessoriesAndReadCharacteristicTypes:];
}

id objc_msgSend_discoverCharacteristics_forService_(void *a1, const char *a2, ...)
{
  return [a1 discoverCharacteristics:forService:];
}

id objc_msgSend_discoverDescriptorsForCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 discoverDescriptorsForCharacteristic:];
}

id objc_msgSend_discoverServices_(void *a1, const char *a2, ...)
{
  return [a1 discoverServices:];
}

id objc_msgSend_discoveredAccessoryCharacteriticsPendingRead(void *a1, const char *a2, ...)
{
  return _[a1 discoveredAccessoryCharacteriticsPendingRead];
}

id objc_msgSend_discoveringCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 discoveringCharacteristics];
}

id objc_msgSend_discoveringDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 discoveringDescriptors];
}

id objc_msgSend_discoveringServices(void *a1, const char *a2, ...)
{
  return _[a1 discoveringServices];
}

id objc_msgSend_discoveryContext(void *a1, const char *a2, ...)
{
  return _[a1 discoveryContext];
}

id objc_msgSend_discoveryRetries(void *a1, const char *a2, ...)
{
  return _[a1 discoveryRetries];
}

id objc_msgSend_discoveryType(void *a1, const char *a2, ...)
{
  return _[a1 discoveryType];
}

id objc_msgSend_discoveryVersion(void *a1, const char *a2, ...)
{
  return _[a1 discoveryVersion];
}

id objc_msgSend_distantPast(void *a1, const char *a2, ...)
{
  return _[a1 distantPast];
}

id objc_msgSend_dkErrorWithCode_(void *a1, const char *a2, ...)
{
  return [a1 dkErrorWithCode:];
}

id objc_msgSend_dnsName(void *a1, const char *a2, ...)
{
  return _[a1 dnsName];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_durationInMS(void *a1, const char *a2, ...)
{
  return _[a1 durationInMS];
}

id objc_msgSend_enableEvents_forCharacteristics_withCompletionHandler_queue_(void *a1, const char *a2, ...)
{
  return [a1 enableEvents:x0 forCharacteristics:x1 withCompletionHandler:x2 queue:x3];
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeDouble:forKey:];
}

id objc_msgSend_encodeInt64_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeInt64:x0 forKey:x1];
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeInteger:forKey:];
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeObject:forKey:];
}

id objc_msgSend_encrypt_additionalAuthenticatedData_(void *a1, const char *a2, ...)
{
  return [a1 encrypt:additionalAuthenticatedData:];
}

id objc_msgSend_encryptData_additionalAuthenticatedData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "encryptData:additionalAuthenticatedData:error:");
}

id objc_msgSend_encryptEncryptedOPACKHeader_payload_sessionEncryption_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "encryptEncryptedOPACKHeader:payload:sessionEncryption:error:");
}

id objc_msgSend_encryption(void *a1, const char *a2, ...)
{
  return _[a1 encryption];
}

id objc_msgSend_end(void *a1, const char *a2, ...)
{
  return _[a1 end];
}

id objc_msgSend_endBehavior(void *a1, const char *a2, ...)
{
  return _[a1 endBehavior];
}

id objc_msgSend_endDate(void *a1, const char *a2, ...)
{
  return _[a1 endDate];
}

id objc_msgSend_enhancedEncryption(void *a1, const char *a2, ...)
{
  return _[a1 enhancedEncryption];
}

id objc_msgSend_enterTrackingMode(void *a1, const char *a2, ...)
{
  return _[a1 enterTrackingMode];
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsUsingBlock:];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:code:userInfo:];
}

id objc_msgSend_errorWithOSStatus_(void *a1, const char *a2, ...)
{
  return [a1 errorWithOSStatus:];
}

id objc_msgSend_establishRelationshipBetweenAccessoryAndControllerKey_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "establishRelationshipBetweenAccessoryAndControllerKey:error:")
}

id objc_msgSend_evaluateOptionsForSocket_(void *a1, const char *a2, ...)
{
  return [a1 evaluateOptionsForSocket:];
}

id objc_msgSend_eventHeaderForProtocol_topic_(void *a1, const char *a2, ...)
{
  return [a1 eventHeaderForProtocol:topic:];
}

id objc_msgSend_eventNotificationsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 eventNotificationsEnabled];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 exceptionWithName:reason:userInfo:];
}

id objc_msgSend_executeWriteRequestForCharacteristic_options_error_(void *a1, const char *a2, ...)
{
  return [a1 executeWriteRequestForCharacteristic:options:error:];
}

id objc_msgSend_expectedClassForFormat_(void *a1, const char *a2, ...)
{
  return [a1 expectedClassForFormat:];
}

id objc_msgSend_expectedTransformedClassForFormat_(void *a1, const char *a2, ...)
{
  return [a1 expectedTransformedClassForFormat:];
}

id objc_msgSend_extractNotificationContextFromBodyData_error_(void *a1, const char *a2, ...)
{
  return [a1 extractNotificationContextFromBodyData:error:];
}

id objc_msgSend_extractSerializedRequestValueFromBodyData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "extractSerializedRequestValueFromBodyData:error:");
}

id objc_msgSend_featureFlags(void *a1, const char *a2, ...)
{
  return _[a1 featureFlags];
}

id objc_msgSend_fileType(void *a1, const char *a2, ...)
{
  return _[a1 fileType];
}

id objc_msgSend_filteredOrderedSetUsingPredicate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "filteredOrderedSetUsingPredicate:");
}

id objc_msgSend_finish(void *a1, const char *a2, ...)
{
  return _[a1 finish];
}

id objc_msgSend_firmwareVersion(void *a1, const char *a2, ...)
{
  return _[a1 firmwareVersion];
}

id objc_msgSend_firstMessageReceived(void *a1, const char *a2, ...)
{
  return _[a1 firstMessageReceived];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_forceClose(void *a1, const char *a2, ...)
{
  return _[a1 forceClose];
}

id objc_msgSend_format(void *a1, const char *a2, ...)
{
  return _[a1 format];
}

id objc_msgSend_fragmentSequenceNumber(void *a1, const char *a2, ...)
{
  return _[a1 fragmentSequenceNumber];
}

id objc_msgSend_fragmentationStream_didCloseWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fragmentationStream:didCloseWithError:");
}

id objc_msgSend_fragmentationStream_didReceiveData_transactionIdentifier_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fragmentationStream:didReceiveData:transactionIdentifier:error:");
}

id objc_msgSend_fulfillPendingRequestWithResponseHeader_payload_(void *a1, const char *a2, ...)
{
  return [a1 fulfillPendingRequestWithResponseHeader:payload:];
}

id objc_msgSend_generateDictionary(void *a1, const char *a2, ...)
{
  return _[a1 generateDictionary];
}

id objc_msgSend_generateDictionary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "generateDictionary:");
}

id objc_msgSend_generateDictionary_metadata_(void *a1, const char *a2, ...)
{
  return [a1 generateDictionary:metadata];
}

id objc_msgSend_generateHAPMetadataTuplesDictionary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "generateHAPMetadataTuplesDictionary:");
}

id objc_msgSend_generateSessionKeys(void *a1, const char *a2, ...)
{
  return _[a1 generateSessionKeys];
}

id objc_msgSend_getAccessoryInfo_(void *a1, const char *a2, ...)
{
  return [a1 getAccessoryInfo:];
}

id objc_msgSend_getAssociatedControllerKeyForAccessory_(void *a1, const char *a2, ...)
{
  return [a1 getAssociatedControllerKeyForAccessory:];
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 getBytes:length:];
}

id objc_msgSend_getBytes_range_(void *a1, const char *a2, ...)
{
  return [a1 getBytes:x0 range:x1];
}

id objc_msgSend_getCertificate(void *a1, const char *a2, ...)
{
  return _[a1 getCertificate];
}

id objc_msgSend_getControllerPublicKey_secretKey_username_allowCreation_forAccessory_error_(void *a1, const char *a2, ...)
{
  return [a1 getControllerPublicKey:x0 secretKey:x1 username:x2 allowCreation:x3 forAccessory:x4 error:x5];
}

id objc_msgSend_getCurrentIndexInBag(void *a1, const char *a2, ...)
{
  return _[a1 getCurrentIndexInBag];
}

id objc_msgSend_getDefaultCharacteristicMetadata_(void *a1, const char *a2, ...)
{
  return [a1 getDefaultCharacteristicMetadata:];
}

id objc_msgSend_getDefaultCharacteristicProperties_(void *a1, const char *a2, ...)
{
  return [a1 getDefaultCharacteristicProperties:];
}

id objc_msgSend_getDefaultServiceProperties_(void *a1, const char *a2, ...)
{
  return [a1 getDefaultServiceProperties:];
}

id objc_msgSend_getLocalPairingIdentityWithError_(void *a1, const char *a2, ...)
{
  return [a1 getLocalPairingIdentityWithError:];
}

id objc_msgSend_getSharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 getSharedInstance];
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return [a1 getUUIDBytes:];
}

id objc_msgSend_handleAuthExchangeData_withHeader_(void *a1, const char *a2, ...)
{
  return [a1 handleAuthExchangeData:withHeader:];
}

id objc_msgSend_handleFirstMessageReceivedOnDataStream_payload_(void *a1, const char *a2, ...)
{
  return [a1 handleFirstMessageReceivedOnDataStream:payload:];
}

id objc_msgSend_handleIncomingData_(void *a1, const char *a2, ...)
{
  return [a1 handleIncomingData:];
}

id objc_msgSend_handleOpenRequestResponseTimer(void *a1, const char *a2, ...)
{
  return _[a1 handleOpenRequestResponseTimer];
}

id objc_msgSend_hapBLEProtocolVersion(void *a1, const char *a2, ...)
{
  return _[a1 hapBLEProtocolVersion];
}

id objc_msgSend_hapBaseUUIDSuffix(void *a1, const char *a2, ...)
{
  return _[a1 hapBaseUUIDSuffix];
}

id objc_msgSend_hapCharacteristicFromType_(void *a1, const char *a2, ...)
{
  return [a1 hapCharacteristicFromType:];
}

id objc_msgSend_hapCharacteristicMap(void *a1, const char *a2, ...)
{
  return _[a1 hapCharacteristicMap];
}

id objc_msgSend_hapCharacteristicNameTypeMap(void *a1, const char *a2, ...)
{
  return _[a1 hapCharacteristicNameTypeMap];
}

id objc_msgSend_hapCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 hapCharacteristics];
}

id objc_msgSend_hapErrorWithcode_(void *a1, const char *a2, ...)
{
  return [a1 hapErrorWithcode:];
}

id objc_msgSend_hapErrorWithcode_description_reason_suggestion_underlyingError_(void *a1, const char *a2, ...)
{
  return [a1 hapErrorWithcode:x0 description:x1 reason:x2 suggestion:x3 underlyingError:x4];
}

id objc_msgSend_hapInstanceId(void *a1, const char *a2, ...)
{
  return _[a1 hapInstanceId];
}

id objc_msgSend_hapProperties(void *a1, const char *a2, ...)
{
  return _[a1 hapProperties];
}

id objc_msgSend_hapPropertyMap(void *a1, const char *a2, ...)
{
  return _[a1 hapPropertyMap];
}

id objc_msgSend_hapServiceFromType_(void *a1, const char *a2, ...)
{
  return [a1 hapServiceFromType:];
}

id objc_msgSend_hapServiceMap(void *a1, const char *a2, ...)
{
  return _[a1 hapServiceMap];
}

id objc_msgSend_hapServiceNameTypeMap(void *a1, const char *a2, ...)
{
  return _[a1 hapServiceNameTypeMap];
}

id objc_msgSend_hapServices(void *a1, const char *a2, ...)
{
  return _[a1 hapServices];
}

id objc_msgSend_hapSetupOperationWithAccessory_queue_logIdentifier_transferManagementService_maxControllerTransportMTU_setupOperationReadRequired_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "hapSetupOperationWithAccessory:queue:logIdentifier:transferManagementService:maxControllerTransportMTU:setupOperationReadRequired:");
}

id objc_msgSend_hapSupportsAuthDataSet(void *a1, const char *a2, ...)
{
  return _[a1 hapSupportsAuthDataSet];
}

id objc_msgSend_hapUUIDFromBTLEUUID_(void *a1, const char *a2, ...)
{
  return [a1 hapUUIDFromBTLEUUID:];
}

id objc_msgSend_hapUnitFromName_(void *a1, const char *a2, ...)
{
  return [a1 hapUnitFromName:];
}

id objc_msgSend_hapUnitMap(void *a1, const char *a2, ...)
{
  return _[a1 hapUnitMap];
}

id objc_msgSend_hapValueUnits(void *a1, const char *a2, ...)
{
  return _[a1 hapValueUnits];
}

id objc_msgSend_hap_cacheInstanceForMetadata_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "hap_cacheInstanceForMetadata:");
}

id objc_msgSend_hasCompleteFrame(void *a1, const char *a2, ...)
{
  return _[a1 hasCompleteFrame];
}

id objc_msgSend_hasFailed(void *a1, const char *a2, ...)
{
  return _[a1 hasFailed];
}

id objc_msgSend_hasPairings(void *a1, const char *a2, ...)
{
  return _[a1 hasPairings];
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return [a1 hasSuffix:];
}

id objc_msgSend_hasValidCache(void *a1, const char *a2, ...)
{
  return _[a1 hasValidCache];
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _[a1 hash];
}

id objc_msgSend_hashTableWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 hashTableWithOptions:];
}

id objc_msgSend_helloMessageResponseReceived(void *a1, const char *a2, ...)
{
  return _[a1 helloMessageResponseReceived];
}

id objc_msgSend_helloMessageResponseTimer(void *a1, const char *a2, ...)
{
  return _[a1 helloMessageResponseTimer];
}

id objc_msgSend_hmfErrorWithCode_(void *a1, const char *a2, ...)
{
  return [a1 hmfErrorWithCode:];
}

id objc_msgSend_hmfErrorWithCode_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 hmfErrorWithCode:];
}

id objc_msgSend_hmf_arrayForKey_(void *a1, const char *a2, ...)
{
  return [a1 hmf_arrayForKey:];
}

id objc_msgSend_hmf_BOOLForKey_isPresent_(void *a1, const char *a2, ...)
{
  return [a1 hmf_BOOLForKey:isPresent:];
}

id objc_msgSend_hmf_cachedInstanceForString_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "hmf_cachedInstanceForString:");
}

id objc_msgSend_hmf_dataForKey_(void *a1, const char *a2, ...)
{
  return [a1 hmf_dataForKey:];
}

id objc_msgSend_hmf_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "hmf_dictionaryForKey:");
}

id objc_msgSend_hmf_enqueue_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "hmf_enqueue:");
}

id objc_msgSend_hmf_enqueueMultiple_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "hmf_enqueueMultiple:");
}

id objc_msgSend_hmf_firstObjectWithValue_forKeyPath_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "hmf_firstObjectWithValue:forKeyPath:");
}

id objc_msgSend_hmf_hexadecimalStringWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 hmf_hexadecimalStringWithOptions:];
}

id objc_msgSend_hmf_isEmpty(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "hmf_isEmpty");
}

id objc_msgSend_hmf_localTimeDescription(void *a1, const char *a2, ...)
{
  return [a1 hmf_localTimeDescription];
}

id objc_msgSend_hmf_maybeDequeue(void *a1, const char *a2, ...)
{
  return [a1 hmf_maybeDequeue];
}

id objc_msgSend_hmf_numberForKey_(void *a1, const char *a2, ...)
{
  return [a1 hmf_numberForKey:];
}

id objc_msgSend_hmf_stringForKey_(void *a1, const char *a2, ...)
{
  return [a1 hmf_stringForKey:];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identifyCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 identifyCharacteristic];
}

id objc_msgSend_idleTimer(void *a1, const char *a2, ...)
{
  return _[a1 idleTimer];
}

id objc_msgSend_includeResponseValue(void *a1, const char *a2, ...)
{
  return _[a1 includeResponseValue];
}

id objc_msgSend_incrementHAPBTLEMetricsConnectionCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementHAPBTLEMetricsConnectionCount];
}

id objc_msgSend_incrementHAPBTLEMetricsDiscoveryCount(void *a1, const char *a2, ...)
{
  return _[a1 incrementHAPBTLEMetricsDiscoveryCount];
}

id objc_msgSend_indentation(void *a1, const char *a2, ...)
{
  return _[a1 indentation];
}

id objc_msgSend_indentationByLevels_(void *a1, const char *a2, ...)
{
  return [a1 indentationByLevels:];
}

id objc_msgSend_index(void *a1, const char *a2, ...)
{
  return _[a1 index];
}

id objc_msgSend_indicateNotificationFromServer_notifyType_withDictionary_(void *a1, const char *a2, ...)
{
  return [a1 indicateNotificationFromServer:x0 notifyType:x1 withDictionary:x2];
}

id objc_msgSend_infoData(void *a1, const char *a2, ...)
{
  return _[a1 infoData];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_initFromStart_toEnd_(void *a1, const char *a2, ...)
{
  return [a1 initFromStart:toEnd:];
}

id objc_msgSend_initWithAccessory_forLinkType_durationInMS_reason_pvError_(void *a1, const char *a2, ...)
{
  return [a1 initWithAccessory:forLinkType:durationInMS:reason:pvError:];
}

id objc_msgSend_initWithAccessory_queue_logIdentifier_transferManagementService_maxControllerTransportMTU_setupOperationReadRequired_(void *a1, const char *a2, ...)
{
  return [a1 initWithAccessory:x0 queue:x1 logIdentifier:x2 transferManagementService:x3 maxControllerTransportMTU:x4 setupOperationReadRequired:x5];
}

id objc_msgSend_initWithAccessory_sessionIdentifier_maxControllerTransportMTU_workQueue_logIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithAccessory:x0 sessionIdentifier:x1 maxControllerTransportMTU:x2 workQueue:x3 logIdentifier:x4];
}

id objc_msgSend_initWithAccessoryIdentifier_keyStore_(void *a1, const char *a2, ...)
{
  return [a1 initWithAccessoryIdentifier:keyStore:];
}

id objc_msgSend_initWithAccessoryIdentifier_keyStore_controllerKeyList_(void *a1, const char *a2, ...)
{
  return [a1 initWithAccessoryIdentifier:x0 keyStore:x1 controllerKeyList:x2];
}

id objc_msgSend_initWithActiveTransitionContexts_(void *a1, const char *a2, ...)
{
  return [a1 initWithActiveTransitionContexts:];
}

id objc_msgSend_initWithApplicationProtocolName_completion_(void *a1, const char *a2, ...)
{
  return [a1 initWithApplicationProtocolName:x0 completion:x1];
}

id objc_msgSend_initWithBins_intervalCreationBlock_valueComparisonBlock_(void *a1, const char *a2, ...)
{
  return [a1 initWithBins:x0 intervalCreationBlock:x1 valueComparisonBlock:x2];
}

id objc_msgSend_initWithBufferSize_(void *a1, const char *a2, ...)
{
  return [a1 initWithBufferSize:];
}

id objc_msgSend_initWithBytes_length_encoding_(void *a1, const char *a2, ...)
{
  return [a1 initWithBytes:length:encoding:];
}

id objc_msgSend_initWithBytesNoCopy_length_(void *a1, const char *a2, ...)
{
  return [a1 initWithBytesNoCopy:];
}

id objc_msgSend_initWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return [a1 initWithBytesNoCopy:x0 length:x1 freeWhenDone:x2];
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 initWithCapacity:];
}

id objc_msgSend_initWithCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 initWithCharacteristic:];
}

id objc_msgSend_initWithCharacteristic_requestType_bodyData_shouldEncrypt_timeoutInterval_(void *a1, const char *a2, ...)
{
  return [a1 initWithCharacteristic:x0 requestType:x1 bodyData:x2 shouldEncrypt:x3 timeoutInterval:x4];
}

id objc_msgSend_initWithCharacteristicType_serviceInstanceID_serviceType_characteristicProperties_characteristicMetadata_authenticated_(void *a1, const char *a2, ...)
{
  return [a1 initWithCharacteristicType:x0 serviceInstanceID:x1 serviceType:x2 characteristicProperties:x3 characteristicMetadata:x4 authenticated:x5];
}

id objc_msgSend_initWithCharacteristicType_serviceType_(void *a1, const char *a2, ...)
{
  return [a1 initWithCharacteristicType:serviceType:];
}

id objc_msgSend_initWithCharacteristicUUID_instanceId_characteristicProperties_characteristicMetadata_(void *a1, const char *a2, ...)
{
  return [a1 initWithCharacteristicUUID:x0 instanceId:x1 characteristicProperties:x2 characteristicMetadata:x3];
}

id objc_msgSend_initWithCommand_transportType_controllerKeySalt_(void *a1, const char *a2, ...)
{
  return [a1 initWithCommand:x0 transportType:x1 controllerKeySalt:x2];
}

id objc_msgSend_initWithConfigurations_(void *a1, const char *a2, ...)
{
  return [a1 initWithConfigurations:];
}

id objc_msgSend_initWithConstraints_description_format_units_(void *a1, const char *a2, ...)
{
  return [a1 initWithConstraints:x0 description:x1 format:x2 units:x3];
}

id objc_msgSend_initWithControlType_transactionIdentifier_continuationPacket_packetPayload_maximumLength_(void *a1, const char *a2, ...)
{
  return [a1 initWithControlType:x0 transactionIdentifier:x1 continuationPacket:x2 packetPayload:x3 maximumLength:x4];
}

id objc_msgSend_initWithControlType_transactionIdentifier_controlPayload_mtuLength_timeoutInterval_(void *a1, const char *a2, ...)
{
  return [a1 initWithControlType:transactionIdentifier:controlPayload:mtuLength:timeoutInterval:];
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:];
}

id objc_msgSend_initWithData_completion_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:x0 completion:x1];
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:x0 encoding:x1];
}

id objc_msgSend_initWithData_sequenceNumber_fragmentSequenceNumber_type_isLast_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:x0 sequenceNumber:x1 fragmentSequenceNumber:x2 type:x3 isLast:x4];
}

id objc_msgSend_initWithData_sequenceNumber_type_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:x0 sequenceNumber:x1 type:x2];
}

id objc_msgSend_initWithData_transactionIdentifier_length_offset_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:x0 transactionIdentifier:x1 length:x2 offset:x3];
}

id objc_msgSend_initWithDataStream_(void *a1, const char *a2, ...)
{
  return [a1 initWithDataStream:];
}

id objc_msgSend_initWithDeviceIDData_(void *a1, const char *a2, ...)
{
  return [a1 initWithDeviceIDData:];
}

id objc_msgSend_initWithDeviceIDString_(void *a1, const char *a2, ...)
{
  return [a1 initWithDeviceIDString:];
}

id objc_msgSend_initWithDiscoveryType_(void *a1, const char *a2, ...)
{
  return [a1 initWithDiscoveryType:];
}

id objc_msgSend_initWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 initWithDomain:code:userInfo:];
}

id objc_msgSend_initWithFormat_type_audioDiagnostics_options_(void *a1, const char *a2, ...)
{
  return [a1 initWithFormat:x0 type:x1 audioDiagnostics:x2 options:x3];
}

id objc_msgSend_initWithHAPInstanceID_(void *a1, const char *a2, ...)
{
  return [a1 initWithHAPInstanceID:];
}

id objc_msgSend_initWithHAPInstanceID_controllerContext_endBehavior_linearTransition_linearDerivedTransition_valueUpdateTimeInterval_notifyValueChangeThreshold_notifyTimeIntervalThreshold_(void *a1, const char *a2, ...)
{
  return [a1 initWithHAPInstanceID:x0 controllerContext:x1 endBehavior:x2 linearTransition:x3 linearDerivedTransition:x4 valueUpdateTimeInterval:x5 notifyValueChangeThreshold:x6 notifyTimeIntervalThreshold:x7];
}

id objc_msgSend_initWithHAPInstanceID_controllerContext_timeElapsedSinceStart_(void *a1, const char *a2, ...)
{
  return [a1 initWithHAPInstanceID:x0 controllerContext:x1 timeElapsedSinceStart:x2];
}

id objc_msgSend_initWithHAPInstanceID_transitionTypes_(void *a1, const char *a2, ...)
{
  return [a1 initWithHAPInstanceID:transitionTypes:];
}

id objc_msgSend_initWithIdentifier_controllerKeyIdentifier_publicKey_privateKey_permissions_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 controllerKeyIdentifier:x1 publicKey:x2 privateKey:x3 permissions:x4];
}

id objc_msgSend_initWithIdentifier_currentStateNumber_currentConfigNumber_modelName_protocolVersion_authMethods_statusFlags_categoryIdentifier_setupHash_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 currentStateNumber:x1 currentConfigNumber:x2 modelName:x3 protocolVersion:x4 authMethods:x5 statusFlags:x6 categoryIdentifier:x7 setupHash:x8];
}

id objc_msgSend_initWithIdentifier_protocol_topic_payload_callback_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 protocol:x1 topic:x2 payload:x3 callback:x4];
}

id objc_msgSend_initWithIdentifier_publicKey_privateKey_permissions_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 publicKey:x1 privateKey:x2 permissions:x3];
}

id objc_msgSend_initWithIdentifier_startTime_transitionChecksum_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier:x0 startTime:x1 transitionChecksum:x2];
}

id objc_msgSend_initWithInputKey_outputKey_enhancedEncryption_(void *a1, const char *a2, ...)
{
  return [a1 initWithInputKey:x0 outputKey:x1 enhancedEncryption:x2];
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return [a1 initWithLength:];
}

id objc_msgSend_initWithListener_fileType_(void *a1, const char *a2, ...)
{
  return [a1 initWithListener:x0 fileType:x1];
}

id objc_msgSend_initWithLogIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithLogIdentifier:];
}

id objc_msgSend_initWithLowerBound_upperBound_(void *a1, const char *a2, ...)
{
  return [a1 initWithLowerBound:x0 upperBound:x1];
}

id objc_msgSend_initWithMajorVersion_minorVersion_updateVersion_(void *a1, const char *a2, ...)
{
  return [a1 initWithMajorVersion:minorVersion:updateVersion:];
}

id objc_msgSend_initWithMinLength_maxLength_(void *a1, const char *a2, ...)
{
  return [a1 initWithMinLength:maxLength:];
}

id objc_msgSend_initWithMinValue_maxValue_stepValue_validValues_(void *a1, const char *a2, ...)
{
  return [a1 initWithMinValue:x0 maxValue:x1 stepValue:x2 validValues:x3];
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return [a1 initWithName:];
}

id objc_msgSend_initWithName_description_(void *a1, const char *a2, ...)
{
  return [a1 initWithName:description:];
}

id objc_msgSend_initWithName_manufacturer_modelName_category_certificationStatus_denylisted_ppid_(void *a1, const char *a2, ...)
{
  return [a1 initWithName:x0 manufacturer:x1 modelName:x2 category:x3 certificationStatus:x4 denylisted:x5 ppid:x6];
}

id objc_msgSend_initWithName_uuid_description_format_properties_(void *a1, const char *a2, ...)
{
  return [a1 initWithName:x0 uuid:x1 description:x2 format:x3 properties:x4];
}

id objc_msgSend_initWithName_uuid_description_mandatoryChrTypes_properties_linkedServices_(void *a1, const char *a2, ...)
{
  return [a1 initWithName:x0 uuid:x1 description:x2 mandatoryChrTypes:x3 properties:x4 linkedServices:x5];
}

id objc_msgSend_initWithName_value_(void *a1, const char *a2, ...)
{
  return [a1 initWithName:x0 value:x1];
}

id objc_msgSend_initWithOptions_capacity_(void *a1, const char *a2, ...)
{
  return [a1 initWithOptions:x0 capacity:x1];
}

id objc_msgSend_initWithPairingIdentifier_saveBlock_(void *a1, const char *a2, ...)
{
  return [a1 initWithPairingIdentifier:saveBlock:];
}

id objc_msgSend_initWithPairingKeyData_(void *a1, const char *a2, ...)
{
  return [a1 initWithPairingKeyData:];
}

id objc_msgSend_initWithPayload_forceClose_accessoryRequestToSend_(void *a1, const char *a2, ...)
{
  return [a1 initWithPayload:x0 forceClose:x1 accessoryRequestToSend:x2];
}

id objc_msgSend_initWithPayload_sessionIdentifier_forceClose_(void *a1, const char *a2, ...)
{
  return [a1 initWithPayload:x0 sessionIdentifier:x1 forceClose:x2];
}

id objc_msgSend_initWithPeripheralInfo_advertisedProtocolVersion_previousProtocolVersion_resumeSessionId_lastSeen_statusFlags_stateNumber_configNumber_categoryIdentifier_accessoryName_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "initWithPeripheralInfo:advertisedProtocolVersion:previousProtocolVersion:resumeSessionId:lastSeen:statusFlags:stateNumber:configNumber:categoryIdentifier:accessoryName:");
}

id objc_msgSend_initWithProtocol_requestHeader_metadata_(void *a1, const char *a2, ...)
{
  return [a1 initWithProtocol:x0 requestHeader:x1 metadata:x2];
}

id objc_msgSend_initWithProtocol_sessionIdentifier_queue_logIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithProtocol:x0 sessionIdentifier:x1 queue:x2 logIdentifier:x3];
}

id objc_msgSend_initWithProtocol_topic_payload_completion_(void *a1, const char *a2, ...)
{
  return [a1 initWithProtocol:x0 topic:x1 payload:x2 completion:x3];
}

id objc_msgSend_initWithQueue_accessory_logIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:a2 accessory:a3 logIdentifier:a4];
}

id objc_msgSend_initWithRequest_(void *a1, const char *a2, ...)
{
  return [a1 initWithRequest:];
}

id objc_msgSend_initWithRequestToSendIdentifiers_dataStreamTransportInterruptSequenceNumber_(void *a1, const char *a2, ...)
{
  return [a1 initWithRequestToSendIdentifiers:x0 dataStreamTransportInterruptSequenceNumber:x1];
}

id objc_msgSend_initWithRole_instanceId_delegate_(void *a1, const char *a2, ...)
{
  return [a1 initWithRole:x0 instanceId:x1 delegate:x2];
}

id objc_msgSend_initWithRole_resumeSessionID_enhancedEncryption_delegate_(void *a1, const char *a2, ...)
{
  return [a1 initWithRole:x0 resumeSessionID:x1 enhancedEncryption:x2 delegate:x3];
}

id objc_msgSend_initWithScale_offset_targetCompletionDuration_startDelayDuration_(void *a1, const char *a2, ...)
{
  return [a1 initWithScale:x0 offset:x1 targetCompletionDuration:x2 startDelayDuration:x3];
}

id objc_msgSend_initWithServer_instanceID_(void *a1, const char *a2, ...)
{
  return [a1 initWithServer:instanceID];
}

id objc_msgSend_initWithServiceType_serviceInstanceID_serviceProperties_linkedServices_authenticated_(void *a1, const char *a2, ...)
{
  return [a1 initWithServiceType:x0 serviceInstanceID:x1 serviceProperties:x2 linkedServices:x3 authenticated:x4];
}

id objc_msgSend_initWithServiceUUID_instanceId_instanceOrder_serviceProperties_linkedServices_(void *a1, const char *a2, ...)
{
  return [a1 initWithServiceUUID:x0 instanceId:x1 instanceOrder:x2 serviceProperties:x3 linkedServices:x4];
}

id objc_msgSend_initWithSession_payload_(void *a1, const char *a2, ...)
{
  return [a1 initWithSession:payload:];
}

id objc_msgSend_initWithSessionStartCallback_handleOpenRequestResponseTimer_sendCloseEventTimer_(void *a1, const char *a2, ...)
{
  return [a1 initWithSessionStartCallback:x0 handleOpenRequestResponseTimer:x1 sendCloseEventTimer:x2];
}

id objc_msgSend_initWithStagingNotReadyReasons_updateNotReadyReasons_(void *a1, const char *a2, ...)
{
  return [a1 initWithStagingNotReadyReasons:updateNotReadyReasons:];
}

id objc_msgSend_initWithState_abnormalReasons_(void *a1, const char *a2, ...)
{
  return [a1 initWithState:abnormalReasons:];
}

id objc_msgSend_initWithState_updateDuration_stagedFirmwareVersion_(void *a1, const char *a2, ...)
{
  return [a1 initWithState:x0 updateDuration:x1 stagedFirmwareVersion:x2];
}

id objc_msgSend_initWithStatus_parameters_accessoryKeySalt_(void *a1, const char *a2, ...)
{
  return [a1 initWithStatus:x0 parameters:x1 accessoryKeySalt:x2];
}

id objc_msgSend_initWithStreamProtocol_applicationProtocolName_workQueue_(void *a1, const char *a2, ...)
{
  return [a1 initWithStreamProtocol:x0 applicationProtocolName:x1 workQueue:x2];
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return [a1 initWithString:];
}

id objc_msgSend_initWithTargetValue_targetCompletionDuration_startDelayDuration_(void *a1, const char *a2, ...)
{
  return [a1 initWithTargetValue:x0 targetCompletionDuration:x1 startDelayDuration:x2];
}

id objc_msgSend_initWithTcpListeningPort_sessionIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithTcpListeningPort:x0 sessionIdentifier:x1];
}

id objc_msgSend_initWithTimeInterval_options_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimeInterval:x0 options:x1];
}

id objc_msgSend_initWithTimeout_(void *a1, const char *a2, ...)
{
  return [a1 initWithTimeout:];
}

id objc_msgSend_initWithTlvId_name_(void *a1, const char *a2, ...)
{
  return [a1 initWithTlvId:name:];
}

id objc_msgSend_initWithTransitionFetch_transitionStart_(void *a1, const char *a2, ...)
{
  return [a1 initWithTransitionFetch:transitionFetch transitionStart:transitionStart];
}

id objc_msgSend_initWithTransitionPoints_sourceHAPInstanceID_sourceValueRange_(void *a1, const char *a2, ...)
{
  return [a1 initWithTransitionPoints:x0 sourceHAPInstanceID:x1 sourceValueRange:x2];
}

id objc_msgSend_initWithTransitionPoints_startBehavior_(void *a1, const char *a2, ...)
{
  return [a1 initWithTransitionPoints:startBehavior:];
}

id objc_msgSend_initWithTransitions_(void *a1, const char *a2, ...)
{
  return [a1 initWithTransitions:];
}

id objc_msgSend_initWithTransport_maximumControllerTransportMTU_(void *a1, const char *a2, ...)
{
  return [a1 initWithTransport:x0 maximumControllerTransportMTU:x1];
}

id objc_msgSend_initWithTransport_sessionEncryption_workQueue_logIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithTransport:x0 sessionEncryption:x1 workQueue:x2 logIdentifier:x3];
}

id objc_msgSend_initWithTransport_sessionEncryption_workQueue_logIdentifier_connectionTimer_helloMessageResponseTimer_(void *a1, const char *a2, ...)
{
  return [a1 initWithTransport:x0 sessionEncryption:x1 workQueue:x2 logIdentifier:x3 connectionTimer:x4 helloMessageResponseTimer:x5];
}

id objc_msgSend_initWithType_bitPosition_description_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:x0 bitPosition:x1 description:x2];
}

id objc_msgSend_initWithType_instanceID_parsedCharacteristics_serviceProperties_linkedServices_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:x0 instanceID:x1 parsedCharacteristics:x2 serviceProperties:x3 linkedServices:x4];
}

id objc_msgSend_initWithType_instanceID_value_stateNumber_properties_eventNotificationsEnabled_implicitWriteWithResponse_metadata_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:x0 instanceID:x1 value:x2 stateNumber:x3 properties:x4 eventNotificationsEnabled:x5 implicitWriteWithResponse:x6 metadata:x7];
}

id objc_msgSend_initWithUUIDBytes_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUIDBytes:];
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUIDString:];
}

id objc_msgSend_initWithUnsignedCharValue_(void *a1, const char *a2, ...)
{
  return [a1 initWithUnsignedCharValue:x0];
}

id objc_msgSend_initWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return [a1 initWithUnsignedInt:];
}

id objc_msgSend_initWithUpdateDuration_(void *a1, const char *a2, ...)
{
  return [a1 initWithUpdateDuration:];
}

id objc_msgSend_initWithValue_(void *a1, const char *a2, ...)
{
  return [a1 initWithValue:];
}

id objc_msgSend_initWithValueTransition_transitionState_(void *a1, const char *a2, ...)
{
  return [a1 initWithValueTransition:transitionState:];
}

id objc_msgSend_initWithVersionString_(void *a1, const char *a2, ...)
{
  return [a1 initWithVersionString:];
}

id objc_msgSend_initializeKeyBagIfNecessary(void *a1, const char *a2, ...)
{
  return _[a1 initializeKeyBagIfNecessary];
}

id objc_msgSend_inputKey(void *a1, const char *a2, ...)
{
  return _[a1 inputKey];
}

id objc_msgSend_inputNonce(void *a1, const char *a2, ...)
{
  return _[a1 inputNonce];
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return [a1 insertObject:atIndex:];
}

id objc_msgSend_instanceID(void *a1, const char *a2, ...)
{
  return _[a1 instanceID];
}

id objc_msgSend_instanceId(void *a1, const char *a2, ...)
{
  return _[a1 instanceId];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_internalDelegateQueue(void *a1, const char *a2, ...)
{
  return _[a1 internalDelegateQueue];
}

id objc_msgSend_internalDelegates(void *a1, const char *a2, ...)
{
  return _[a1 internalDelegates];
}

id objc_msgSend_interruptCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 interruptCharacteristic];
}

id objc_msgSend_intersectSet_(void *a1, const char *a2, ...)
{
  return [a1 intersectSet:];
}

id objc_msgSend_intervalIndexForValue_(void *a1, const char *a2, ...)
{
  return [a1 intervalIndexForValue:];
}

id objc_msgSend_intervals(void *a1, const char *a2, ...)
{
  return _[a1 intervals];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_isAccessoryAssociatedWithControllerKey_(void *a1, const char *a2, ...)
{
  return [a1 isAccessoryAssociatedWithControllerKey:];
}

id objc_msgSend_isAccessoryAssociatedWithControllerKey_controllerID_(void *a1, const char *a2, ...)
{
  return [a1 isAccessoryAssociatedWithControllerKey:controllerKey controllerID:controllerID];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAuthenticated(void *a1, const char *a2, ...)
{
  return _[a1 isAuthenticated];
}

id objc_msgSend_isBadSetupCode(void *a1, const char *a2, ...)
{
  return _[a1 isBadSetupCode];
}

id objc_msgSend_isBodyComplete(void *a1, const char *a2, ...)
{
  return _[a1 isBodyComplete];
}

id objc_msgSend_isCached(void *a1, const char *a2, ...)
{
  return _[a1 isCached];
}

id objc_msgSend_isCancelled(void *a1, const char *a2, ...)
{
  return _[a1 isCancelled];
}

id objc_msgSend_isClosed(void *a1, const char *a2, ...)
{
  return _[a1 isClosed];
}

id objc_msgSend_isComplete(void *a1, const char *a2, ...)
{
  return _[a1 isComplete];
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _[a1 isConnected];
}

id objc_msgSend_isContinuationPacket(void *a1, const char *a2, ...)
{
  return _[a1 isContinuationPacket];
}

id objc_msgSend_isDiscovering(void *a1, const char *a2, ...)
{
  return _[a1 isDiscovering];
}

id objc_msgSend_isEmpty(void *a1, const char *a2, ...)
{
  return _[a1 isEmpty];
}

id objc_msgSend_isEncrypted(void *a1, const char *a2, ...)
{
  return _[a1 isEncrypted];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return [a1 isEqual:];
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToArray:];
}

id objc_msgSend_isEqualToCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToCharacteristic:];
}

id objc_msgSend_isEqualToCharacteristicMetadata_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToCharacteristicMetadata:];
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToData:];
}

id objc_msgSend_isEqualToDeviceID_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToDeviceID:];
}

id objc_msgSend_isEqualToMetadataConstraints_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToMetadataConstraints:];
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToNumber:];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToString:];
}

id objc_msgSend_isExpectedHelloControlMessage_header_(void *a1, const char *a2, ...)
{
  return [a1 isExpectedHelloControlMessage:header];
}

id objc_msgSend_isFinished(void *a1, const char *a2, ...)
{
  return _[a1 isFinished];
}

id objc_msgSend_isHAPCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 isHAPCharacteristic:];
}

id objc_msgSend_isHAPDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 isHAPDescriptor:];
}

id objc_msgSend_isHAPError(void *a1, const char *a2, ...)
{
  return _[a1 isHAPError];
}

id objc_msgSend_isHAPService_(void *a1, const char *a2, ...)
{
  return [a1 isHAPService:];
}

id objc_msgSend_isHeaderComplete(void *a1, const char *a2, ...)
{
  return _[a1 isHeaderComplete];
}

id objc_msgSend_isIncompatibleUpdate(void *a1, const char *a2, ...)
{
  return _[a1 isIncompatibleUpdate];
}

id objc_msgSend_isLast(void *a1, const char *a2, ...)
{
  return _[a1 isLast];
}

id objc_msgSend_isOpen(void *a1, const char *a2, ...)
{
  return _[a1 isOpen];
}

id objc_msgSend_isOpening(void *a1, const char *a2, ...)
{
  return _[a1 isOpening];
}

id objc_msgSend_isPaired(void *a1, const char *a2, ...)
{
  return _[a1 isPaired];
}

id objc_msgSend_isPaired_(void *a1, const char *a2, ...)
{
  return [a1 isPaired:];
}

id objc_msgSend_isPairing(void *a1, const char *a2, ...)
{
  return _[a1 isPairing];
}

id objc_msgSend_isPerformingGeneralScan(void *a1, const char *a2, ...)
{
  return _[a1 isPerformingGeneralScan];
}

id objc_msgSend_isPrimary(void *a1, const char *a2, ...)
{
  return _[a1 isPrimary];
}

id objc_msgSend_isSecureSession(void *a1, const char *a2, ...)
{
  return _[a1 isSecureSession];
}

id objc_msgSend_isSecuritySessionOpen(void *a1, const char *a2, ...)
{
  return _[a1 isSecuritySessionOpen];
}

id objc_msgSend_isSubclassOfClass_(void *a1, const char *a2, ...)
{
  return [a1 isSubclassOfClass:];
}

id objc_msgSend_isSubsetOfSet_(void *a1, const char *a2, ...)
{
  return [a1 isSubsetOfSet:];
}

id objc_msgSend_isSuspended(void *a1, const char *a2, ...)
{
  return _[a1 isSuspended];
}

id objc_msgSend_isValid(void *a1, const char *a2, ...)
{
  return _[a1 isValid];
}

id objc_msgSend_isValidFormat_(void *a1, const char *a2, ...)
{
  return [a1 isValidFormat:];
}

id objc_msgSend_isValidIndex_(void *a1, const char *a2, ...)
{
  return [a1 isValidIndex:];
}

id objc_msgSend_isVerified(void *a1, const char *a2, ...)
{
  return _[a1 isVerified];
}

id objc_msgSend_isWriteInProgress(void *a1, const char *a2, ...)
{
  return _[a1 isWriteInProgress];
}

id objc_msgSend_isWriteWithResponseImplicitlySupported(void *a1, const char *a2, ...)
{
  return _[a1 isWriteWithResponseImplicitlySupported];
}

id objc_msgSend_isoCountryCode(void *a1, const char *a2, ...)
{
  return _[a1 isoCountryCode];
}

id objc_msgSend_keyBag(void *a1, const char *a2, ...)
{
  return _[a1 keyBag];
}

id objc_msgSend_keyEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 keyEnumerator];
}

id objc_msgSend_keyStore(void *a1, const char *a2, ...)
{
  return _[a1 keyStore];
}

id objc_msgSend_keyUpdatedStateNumber(void *a1, const char *a2, ...)
{
  return _[a1 keyUpdatedStateNumber];
}

id objc_msgSend_keyUpdatedTime(void *a1, const char *a2, ...)
{
  return _[a1 keyUpdatedTime];
}

id objc_msgSend_kick(void *a1, const char *a2, ...)
{
  return _[a1 kick];
}

id objc_msgSend_lastAccessoryRequestToSendFlag(void *a1, const char *a2, ...)
{
  return _[a1 lastAccessoryRequestToSendFlag];
}

id objc_msgSend_lastKeyBagIdentityIndexFailingPV(void *a1, const char *a2, ...)
{
  return _[a1 lastKeyBagIdentityIndexFailingPV];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_lastSeen(void *a1, const char *a2, ...)
{
  return _[a1 lastSeen];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return [a1 lengthOfBytesUsingEncoding:];
}

id objc_msgSend_linearDerivedTransition(void *a1, const char *a2, ...)
{
  return _[a1 linearDerivedTransition];
}

id objc_msgSend_linearTransition(void *a1, const char *a2, ...)
{
  return _[a1 linearTransition];
}

id objc_msgSend_linkType(void *a1, const char *a2, ...)
{
  return _[a1 linkType];
}

id objc_msgSend_linkedServices(void *a1, const char *a2, ...)
{
  return _[a1 linkedServices];
}

id objc_msgSend_listener(void *a1, const char *a2, ...)
{
  return _[a1 listener];
}

id objc_msgSend_listeners(void *a1, const char *a2, ...)
{
  return _[a1 listeners];
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return [a1 localizedStringForKey:value:table:];
}

id objc_msgSend_logCategory(void *a1, const char *a2, ...)
{
  return _[a1 logCategory];
}

id objc_msgSend_logDispatcher(void *a1, const char *a2, ...)
{
  return _[a1 logDispatcher];
}

id objc_msgSend_logIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 logIdentifier];
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_lowerBound(void *a1, const char *a2, ...)
{
  return _[a1 lowerBound];
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _[a1 mainBundle];
}

id objc_msgSend_majorVersion(void *a1, const char *a2, ...)
{
  return _[a1 majorVersion];
}

id objc_msgSend_makeTupleWithATVState_MaxHAPConnections_MinBandwidth_MaxBandwidth_(void *a1, const char *a2, ...)
{
  return [a1 makeTupleWithATVState:MaxHAPConnections:MinBandwidth:MaxBandwidth:];
}

id objc_msgSend_mandatoryCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 mandatoryCharacteristics];
}

id objc_msgSend_manufacturer(void *a1, const char *a2, ...)
{
  return _[a1 manufacturer];
}

id objc_msgSend_manufacturerDescription(void *a1, const char *a2, ...)
{
  return _[a1 manufacturerDescription];
}

id objc_msgSend_markNotifyingCharacteristicUpdatedForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 markNotifyingCharacteristicUpdatedForIdentifier:];
}

id objc_msgSend_markNotifyingCharacteristicUpdatedforCharacteristic_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "markNotifyingCharacteristicUpdatedforCharacteristic:");
}

id objc_msgSend_markWithReason_(void *a1, const char *a2, ...)
{
  return [a1 markWithReason:];
}

id objc_msgSend_matchesResponseHeader_(void *a1, const char *a2, ...)
{
  return [a1 matchesResponseHeader:];
}

id objc_msgSend_matchesSetupID_(void *a1, const char *a2, ...)
{
  return [a1 matchesSetupID:];
}

id objc_msgSend_maxControllerTransportMTU(void *a1, const char *a2, ...)
{
  return _[a1 maxControllerTransportMTU];
}

id objc_msgSend_maxLength(void *a1, const char *a2, ...)
{
  return _[a1 maxLength];
}

id objc_msgSend_maxValue(void *a1, const char *a2, ...)
{
  return _[a1 maxValue];
}

id objc_msgSend_maximumControllerTransportMTU(void *a1, const char *a2, ...)
{
  return _[a1 maximumControllerTransportMTU];
}

id objc_msgSend_maximumValue(void *a1, const char *a2, ...)
{
  return _[a1 maximumValue];
}

id objc_msgSend_maximumWriteValueLengthForType_(void *a1, const char *a2, ...)
{
  return [a1 maximumWriteValueLengthForType:];
}

id objc_msgSend_member_(void *a1, const char *a2, ...)
{
  return [a1 member:];
}

id objc_msgSend_mergeObject_(void *a1, const char *a2, ...)
{
  return [a1 mergeObject:];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_metadataVersion(void *a1, const char *a2, ...)
{
  return _[a1 metadataVersion];
}

id objc_msgSend_metric_pairVerifyDurationInMS(void *a1, const char *a2, ...)
{
  return [a1 metric_pairVerifyDurationInMS];
}

id objc_msgSend_metric_pairVerifyReason(void *a1, const char *a2, ...)
{
  return [a1 metric_pairVerifyReason];
}

id objc_msgSend_minLength(void *a1, const char *a2, ...)
{
  return _[a1 minLength];
}

id objc_msgSend_minValue(void *a1, const char *a2, ...)
{
  return _[a1 minValue];
}

id objc_msgSend_minimumValue(void *a1, const char *a2, ...)
{
  return _[a1 minimumValue];
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return [a1 minusSet:];
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _[a1 model];
}

id objc_msgSend_modelName(void *a1, const char *a2, ...)
{
  return _[a1 modelName];
}

id objc_msgSend_movePendingBulkSendListenersToBulkSendProtocol_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "movePendingBulkSendListenersToBulkSendProtocol:");
}

id objc_msgSend_mtuLength(void *a1, const char *a2, ...)
{
  return _[a1 mtuLength];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_negativeInfinityIntervalString(void *a1, const char *a2, ...)
{
  return _[a1 negativeInfinityIntervalString];
}

id objc_msgSend_nextIdentity(void *a1, const char *a2, ...)
{
  return _[a1 nextIdentity];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _[a1 nextObject];
}

id objc_msgSend_nextRequestIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 nextRequestIdentifier];
}

id objc_msgSend_nextSessionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 nextSessionIdentifier];
}

id objc_msgSend_notificationContext(void *a1, const char *a2, ...)
{
  return _[a1 notificationContext];
}

id objc_msgSend_notifyTimeIntervalThreshold(void *a1, const char *a2, ...)
{
  return _[a1 notifyTimeIntervalThreshold];
}

id objc_msgSend_notifyValueChangeThreshold(void *a1, const char *a2, ...)
{
  return _[a1 notifyValueChangeThreshold];
}

id objc_msgSend_notifyingCharacteristicUpdated(void *a1, const char *a2, ...)
{
  return _[a1 notifyingCharacteristicUpdated];
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return [a1 numberFromString:];
}

id objc_msgSend_numberValue(void *a1, const char *a2, ...)
{
  return _[a1 numberValue];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return [a1 numberWithBool:];
}

id objc_msgSend_numberWithChar_(void *a1, const char *a2, ...)
{
  return [a1 numberWithChar:];
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return [a1 numberWithDouble:];
}

id objc_msgSend_numberWithFloat_(void *a1, const char *a2, ...)
{
  return [a1 numberWithFloat:];
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInt:];
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInteger:];
}

id objc_msgSend_numberWithLongLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithLongLong:];
}

id objc_msgSend_numberWithShort_(void *a1, const char *a2, ...)
{
  return [a1 numberWithShort:];
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedChar:];
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInt:];
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInteger:];
}

id objc_msgSend_numberWithUnsignedLongLong_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedLongLong:];
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedShort:];
}

id objc_msgSend_objCType(void *a1, const char *a2, ...)
{
  return _[a1 objCType];
}

id objc_msgSend_object(void *a1, const char *a2, ...)
{
  return _[a1 object];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndex:];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndexedSubscript:];
}

id objc_msgSend_objectCreator(void *a1, const char *a2, ...)
{
  return _[a1 objectCreator];
}

id objc_msgSend_objectEnumerator(void *a1, const char *a2, ...)
{
  return _[a1 objectEnumerator];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return [a1 objectForKey:];
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectForKeyedSubscript:];
}

id objc_msgSend_offset(void *a1, const char *a2, ...)
{
  return _[a1 offset];
}

id objc_msgSend_open(void *a1, const char *a2, ...)
{
  return _[a1 open];
}

id objc_msgSend_openClosedIntervalFromStart_toEnd_(void *a1, const char *a2, ...)
{
  return [a1 openClosedIntervalFromStart:toEnd:];
}

id objc_msgSend_openOpenIntervalFromStart_toEnd_(void *a1, const char *a2, ...)
{
  return [a1 openOpenIntervalFromStart:toEnd:];
}

id objc_msgSend_openSessionForFileType_reason_metadata_queue_callback_(void *a1, const char *a2, ...)
{
  return [a1 openSessionForFileType:x0 reason:x1 metadata:x2 queue:x3 callback:x4];
}

id objc_msgSend_operation(void *a1, const char *a2, ...)
{
  return _[a1 operation];
}

id objc_msgSend_operationQueue(void *a1, const char *a2, ...)
{
  return _[a1 operationQueue];
}

id objc_msgSend_operations(void *a1, const char *a2, ...)
{
  return _[a1 operations];
}

id objc_msgSend_optionalCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 optionalCharacteristics];
}

id objc_msgSend_options(void *a1, const char *a2, ...)
{
  return _[a1 options];
}

id objc_msgSend_outputKey(void *a1, const char *a2, ...)
{
  return _[a1 outputKey];
}

id objc_msgSend_outputNonce(void *a1, const char *a2, ...)
{
  return _[a1 outputNonce];
}

id objc_msgSend_ownershipToken(void *a1, const char *a2, ...)
{
  return _[a1 ownershipToken];
}

id objc_msgSend_packetWithSerializedData_error_(void *a1, const char *a2, ...)
{
  return [a1 packetWithSerializedData:x0 error:x1];
}

id objc_msgSend_pairSetupBackoffTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 pairSetupBackoffTimeInterval];
}

id objc_msgSend_pairSetupCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 pairSetupCharacteristic];
}

id objc_msgSend_pairSetupSession(void *a1, const char *a2, ...)
{
  return _[a1 pairSetupSession];
}

id objc_msgSend_pairSetupSession_pairSetupType_enhancedEncryption_(void *a1, const char *a2, ...)
{
  return [a1 pairSetupSession:x0 pairSetupType:x1 enhancedEncryption:x2];
}

id objc_msgSend_pairVerifyCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 pairVerifyCharacteristic];
}

id objc_msgSend_pairVerifyOperationQueue(void *a1, const char *a2, ...)
{
  return _[a1 pairVerifyOperationQueue];
}

id objc_msgSend_pairingActivity(void *a1, const char *a2, ...)
{
  return _[a1 pairingActivity];
}

id objc_msgSend_pairingDisconnectionError(void *a1, const char *a2, ...)
{
  return _[a1 pairingDisconnectionError];
}

id objc_msgSend_pairingFeaturesCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 pairingFeaturesCharacteristic];
}

id objc_msgSend_pairingIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 pairingIdentifier];
}

id objc_msgSend_pairingIdentity(void *a1, const char *a2, ...)
{
  return _[a1 pairingIdentity];
}

id objc_msgSend_pairingRequest(void *a1, const char *a2, ...)
{
  return _[a1 pairingRequest];
}

id objc_msgSend_pairingSession(void *a1, const char *a2, ...)
{
  return _[a1 pairingSession];
}

id objc_msgSend_pairingsCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 pairingsCharacteristic];
}

id objc_msgSend_parameters(void *a1, const char *a2, ...)
{
  return _[a1 parameters];
}

id objc_msgSend_parseAddPairingResponse_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseAddPairingResponse:error:");
}

id objc_msgSend_parseCharacteristicConfigurationResponse_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseCharacteristicConfigurationResponse:error:");
}

id objc_msgSend_parseCharacteristicServiceTuples_(void *a1, const char *a2, ...)
{
  return [a1 parseCharacteristicServiceTuples:];
}

id objc_msgSend_parseCharacteristicValue_(void *a1, const char *a2, ...)
{
  return [a1 parseCharacteristicValue:];
}

id objc_msgSend_parseCharacteristics_(void *a1, const char *a2, ...)
{
  return [a1 parseCharacteristics:];
}

id objc_msgSend_parseFromData_error_(void *a1, const char *a2, ...)
{
  return [a1 parseFromData:error:];
}

id objc_msgSend_parseInfoResponse_expectedTID_withHeader_(void *a1, const char *a2, ...)
{
  return [a1 parseInfoResponse:x0 expectedTID:x1 withHeader:x2];
}

id objc_msgSend_parseListPairingsResponse_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseListPairingsResponse:error:");
}

id objc_msgSend_parseMetadata_(void *a1, const char *a2, ...)
{
  return [a1 parseMetadata:];
}

id objc_msgSend_parseProperties_(void *a1, const char *a2, ...)
{
  return [a1 parseProperties:];
}

id objc_msgSend_parseProtocolConfigurationResponse_key_stateNumber_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseProtocolConfigurationResponse:key:stateNumber:error:");
}

id objc_msgSend_parseReadResponse_value_notificationContext_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseReadResponse:value:notificationContext:error:");
}

id objc_msgSend_parseRemovePairingResponse_error_(void *a1, const char *a2, ...)
{
  return [a1 parseRemovePairingResponse:error];
}

id objc_msgSend_parseResponseForArray_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseResponseForArray:");
}

id objc_msgSend_parseResponseForData_(void *a1, const char *a2, ...)
{
  return [a1 parseResponseForData:];
}

id objc_msgSend_parseResponseForNumber_(void *a1, const char *a2, ...)
{
  return [a1 parseResponseForNumber:];
}

id objc_msgSend_parseResponseForString_(void *a1, const char *a2, ...)
{
  return [a1 parseResponseForString:];
}

id objc_msgSend_parseResponseForUInt16_(void *a1, const char *a2, ...)
{
  return [a1 parseResponseForUInt16:];
}

id objc_msgSend_parseResponseForUInt8_(void *a1, const char *a2, ...)
{
  return [a1 parseResponseForUInt8:];
}

id objc_msgSend_parseResponseForUUID_(void *a1, const char *a2, ...)
{
  return [a1 parseResponseForUUID:];
}

id objc_msgSend_parseServiceCharacteristics_(void *a1, const char *a2, ...)
{
  return [a1 parseServiceCharacteristics:];
}

id objc_msgSend_parseServiceSignatureResponse_serviceInstanceID_serviceType_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseServiceSignatureResponse:serviceInstanceID:serviceType:error:");
}

id objc_msgSend_parseServices_(void *a1, const char *a2, ...)
{
  return [a1 parseServices:];
}

id objc_msgSend_parseSignatureResponse_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseSignatureResponse:error:");
}

id objc_msgSend_parseTokenResponse_expectedTID_withHeader_outToken_outUUID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseTokenResponse:expectedTID:withHeader:outToken:outUUID:");
}

id objc_msgSend_parseTokenUpdateResponse_expectedTID_withHeader_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseTokenUpdateResponse:expectedTID:withHeader:");
}

id objc_msgSend_parseUnits_(void *a1, const char *a2, ...)
{
  return [a1 parseUnits:];
}

id objc_msgSend_parseVersion_(void *a1, const char *a2, ...)
{
  return [a1 parseVersion:];
}

id objc_msgSend_parseWriteResponse_value_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parseWriteResponse:value:error:");
}

id objc_msgSend_parsedFromData_error_(void *a1, const char *a2, ...)
{
  return [a1 parsedFromData:x0 error:x1];
}

id objc_msgSend_parsedUUIDs(void *a1, const char *a2, ...)
{
  return _[a1 parsedUUIDs];
}

id objc_msgSend_parserWithData_(void *a1, const char *a2, ...)
{
  return [a1 parserWithData:];
}

id objc_msgSend_pauseScans(void *a1, const char *a2, ...)
{
  return _[a1 pauseScans];
}

id objc_msgSend_payload(void *a1, const char *a2, ...)
{
  return _[a1 payload];
}

id objc_msgSend_pendingBulkSendListeners(void *a1, const char *a2, ...)
{
  return _[a1 pendingBulkSendListeners];
}

id objc_msgSend_pendingBulkSendSessionContextBySessionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 pendingBulkSendSessionContextBySessionIdentifier];
}

id objc_msgSend_pendingError(void *a1, const char *a2, ...)
{
  return _[a1 pendingError];
}

id objc_msgSend_pendingEvents(void *a1, const char *a2, ...)
{
  return _[a1 pendingEvents];
}

id objc_msgSend_pendingHelloMessageIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 pendingHelloMessageIdentifier];
}

id objc_msgSend_pendingPackets(void *a1, const char *a2, ...)
{
  return _[a1 pendingPackets];
}

id objc_msgSend_pendingReads(void *a1, const char *a2, ...)
{
  return _[a1 pendingReads];
}

id objc_msgSend_pendingRemovePairing(void *a1, const char *a2, ...)
{
  return _[a1 pendingRemovePairing];
}

id objc_msgSend_pendingRequests(void *a1, const char *a2, ...)
{
  return _[a1 pendingRequests];
}

id objc_msgSend_pendingResponses(void *a1, const char *a2, ...)
{
  return _[a1 pendingResponses];
}

id objc_msgSend_pendingSocketRequests(void *a1, const char *a2, ...)
{
  return _[a1 pendingSocketRequests];
}

id objc_msgSend_pendingWrites(void *a1, const char *a2, ...)
{
  return _[a1 pendingWrites];
}

id objc_msgSend_peripheral(void *a1, const char *a2, ...)
{
  return _[a1 peripheral];
}

id objc_msgSend_peripheralInfo(void *a1, const char *a2, ...)
{
  return _[a1 peripheralInfo];
}

id objc_msgSend_peripheralUUID(void *a1, const char *a2, ...)
{
  return _[a1 peripheralUUID];
}

id objc_msgSend_peripheralUUIDs(void *a1, const char *a2, ...)
{
  return _[a1 peripheralUUIDs];
}

id objc_msgSend_permissions(void *a1, const char *a2, ...)
{
  return _[a1 permissions];
}

id objc_msgSend_popNextFrameUpToMaxLength_(void *a1, const char *a2, ...)
{
  return [a1 popNextFrameUpToMaxLength:];
}

id objc_msgSend_popRawFrame(void *a1, const char *a2, ...)
{
  return _[a1 popRawFrame];
}

id objc_msgSend_positiveInfinityEnd(void *a1, const char *a2, ...)
{
  return _[a1 positiveInfinityEnd];
}

id objc_msgSend_positiveInfinityIntervalString(void *a1, const char *a2, ...)
{
  return _[a1 positiveInfinityIntervalString];
}

id objc_msgSend_postDidFailWithError_(void *a1, const char *a2, ...)
{
  return [a1 postDidFailWithError:];
}

id objc_msgSend_postDidSucceedWithTransport_sessionEncryption_(void *a1, const char *a2, ...)
{
  return [a1 postDidSucceedWithTransport:sessionEncryption:];
}

id objc_msgSend_postNotificationName_object_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 postNotificationName:object:userInfo:];
}

id objc_msgSend_ppid(void *a1, const char *a2, ...)
{
  return _[a1 ppid];
}

id objc_msgSend_predicateWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 predicateWithFormat:];
}

id objc_msgSend_preferenceForKey_(void *a1, const char *a2, ...)
{
  return [a1 preferenceForKey:];
}

id objc_msgSend_prepareWriteRequestForCharacteristic_value_authorizationData_contextData_options_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "prepareWriteRequestForCharacteristic:value:authorizationData:contextData:options:error:");
}

id objc_msgSend_previousProtocolVersion(void *a1, const char *a2, ...)
{
  return _[a1 previousProtocolVersion];
}

id objc_msgSend_primaryAccessory(void *a1, const char *a2, ...)
{
  return _[a1 primaryAccessory];
}

id objc_msgSend_privateKey(void *a1, const char *a2, ...)
{
  return _[a1 privateKey];
}

id objc_msgSend_processTransportSetupResponse_(void *a1, const char *a2, ...)
{
  return [a1 processTransportSetupResponse:];
}

id objc_msgSend_productData(void *a1, const char *a2, ...)
{
  return _[a1 productData];
}

id objc_msgSend_productDataStringFromData_(void *a1, const char *a2, ...)
{
  return [a1 productDataStringFromData:];
}

id objc_msgSend_productInfo(void *a1, const char *a2, ...)
{
  return _[a1 productInfo];
}

id objc_msgSend_productVariant(void *a1, const char *a2, ...)
{
  return _[a1 productVariant];
}

id objc_msgSend_prohibitCaching(void *a1, const char *a2, ...)
{
  return _[a1 prohibitCaching];
}

id objc_msgSend_properties(void *a1, const char *a2, ...)
{
  return _[a1 properties];
}

id objc_msgSend_propertiesDescription(void *a1, const char *a2, ...)
{
  return _[a1 propertiesDescription];
}

id objc_msgSend_propertyDescription(void *a1, const char *a2, ...)
{
  return _[a1 propertyDescription];
}

id objc_msgSend_propertyType(void *a1, const char *a2, ...)
{
  return _[a1 propertyType];
}

id objc_msgSend_protocol(void *a1, const char *a2, ...)
{
  return _[a1 protocol];
}

id objc_msgSend_protocolDelegateHandle(void *a1, const char *a2, ...)
{
  return _[a1 protocolDelegateHandle];
}

id objc_msgSend_protocolDidUpdateActiveStatus_(void *a1, const char *a2, ...)
{
  return [a1 protocolDidUpdateActiveStatus:];
}

id objc_msgSend_protocolInfoServiceSignatureCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 protocolInfoServiceSignatureCharacteristics];
}

id objc_msgSend_protocolName(void *a1, const char *a2, ...)
{
  return _[a1 protocolName];
}

id objc_msgSend_protocolVersion(void *a1, const char *a2, ...)
{
  return _[a1 protocolVersion];
}

id objc_msgSend_protocolWithName_(void *a1, const char *a2, ...)
{
  return [a1 protocolWithName:];
}

id objc_msgSend_protocols(void *a1, const char *a2, ...)
{
  return _[a1 protocols];
}

id objc_msgSend_provisionUUID(void *a1, const char *a2, ...)
{
  return _[a1 provisionUUID];
}

id objc_msgSend_psk(void *a1, const char *a2, ...)
{
  return _[a1 psk];
}

id objc_msgSend_publicKey(void *a1, const char *a2, ...)
{
  return _[a1 publicKey];
}

id objc_msgSend_pushFrameData_(void *a1, const char *a2, ...)
{
  return [a1 pushFrameData:];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_randomTransactionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 randomTransactionIdentifier];
}

id objc_msgSend_readCharacteristicValues_timeout_completionQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "readCharacteristicValues:timeout:completionQueue:completionHandler:");
}

id objc_msgSend_readControllerPairingKeyForAccessory_error_(void *a1, const char *a2, ...)
{
  return [a1 readControllerPairingKeyForAccessory:error];
}

id objc_msgSend_readHeaderFromPartialData_frameType_payloadLength_(void *a1, const char *a2, ...)
{
  return [a1 readHeaderFromPartialData:x0 frameType:x1 payloadLength:x2];
}

id objc_msgSend_readPeripheralIdentifierForAccessoryIdentifier_protocolVersion_resumeSessionID_error_(void *a1, const char *a2, ...)
{
  return [a1 readPeripheralIdentifierForAccessoryIdentifier:protocolVersion:resumeSessionID:error:];
}

id objc_msgSend_readPublicKeyForAccessoryName_registeredWithHomeKit_error_(void *a1, const char *a2, ...)
{
  return [a1 readPublicKeyForAccessoryName:registeredWithHomeKit:error];
}

id objc_msgSend_readRequestForCharacteristic_options_error_(void *a1, const char *a2, ...)
{
  return [a1 readRequestForCharacteristic:x0 options:x1 error:x2];
}

id objc_msgSend_readValueForCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 readValueForCharacteristic:];
}

id objc_msgSend_readValueForDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 readValueForDescriptor:];
}

id objc_msgSend_readingCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 readingCharacteristics];
}

id objc_msgSend_readingDescriptors(void *a1, const char *a2, ...)
{
  return _[a1 readingDescriptors];
}

id objc_msgSend_readingSignatureCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 readingSignatureCharacteristics];
}

id objc_msgSend_readingSignatureServices(void *a1, const char *a2, ...)
{
  return _[a1 readingSignatureServices];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_receivedFailure(void *a1, const char *a2, ...)
{
  return _[a1 receivedFailure];
}

id objc_msgSend_receivedSetupExchangeData_error_(void *a1, const char *a2, ...)
{
  return [a1 receivedSetupExchangeData:error];
}

id objc_msgSend_refreshKeyBag(void *a1, const char *a2, ...)
{
  return _[a1 refreshKeyBag];
}

id objc_msgSend_refreshKeys(void *a1, const char *a2, ...)
{
  return _[a1 refreshKeys];
}

id objc_msgSend_registerSocket_(void *a1, const char *a2, ...)
{
  return [a1 registerSocket:];
}

id objc_msgSend_remainingControlPayloadLength(void *a1, const char *a2, ...)
{
  return _[a1 remainingControlPayloadLength];
}

id objc_msgSend_removeAccessoryKeyForName_error_(void *a1, const char *a2, ...)
{
  return [a1 removeAccessoryKeyForName:error:];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeBulkSendListener_(void *a1, const char *a2, ...)
{
  return [a1 removeBulkSendListener:];
}

id objc_msgSend_removeCachedAccessoryWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 removeCachedAccessoryWithIdentifier:];
}

id objc_msgSend_removeListener_(void *a1, const char *a2, ...)
{
  return [a1 removeListener:];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return [a1 removeObject:];
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectForKey:];
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectsInArray:];
}

id objc_msgSend_removeObjectsInRange_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectsInRange:];
}

id objc_msgSend_removeObserver_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:];
}

id objc_msgSend_removePairing_completionQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 removePairing:x0 completionQueue:x1 completionHandler:x2];
}

id objc_msgSend_removePairingForCurrentControllerOnQueue_completion_serverPairingCompletion_(void *a1, const char *a2, ...)
{
  return [a1 removePairingForCurrentControllerOnQueue:completion:serverPairingCompletion:];
}

id objc_msgSend_request(void *a1, const char *a2, ...)
{
  return _[a1 request];
}

id objc_msgSend_requestHeader(void *a1, const char *a2, ...)
{
  return _[a1 requestHeader];
}

id objc_msgSend_requestHeaderForProtocol_topic_identifier_(void *a1, const char *a2, ...)
{
  return [a1 requestHeaderForProtocol:topic:identifier:];
}

id objc_msgSend_requestMetadataForAuthToken_withUUID_requestedLocale_requestInfo_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "requestMetadataForAuthToken:withUUID:requestedLocale:requestInfo:completionHandler:");
}

id objc_msgSend_requestOperationQueue(void *a1, const char *a2, ...)
{
  return _[a1 requestOperationQueue];
}

id objc_msgSend_requestToSendIdentifiers(void *a1, const char *a2, ...)
{
  return _[a1 requestToSendIdentifiers];
}

id objc_msgSend_requiresUserConsent(void *a1, const char *a2, ...)
{
  return _[a1 requiresUserConsent];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_resetBroadcastKeyConfig(void *a1, const char *a2, ...)
{
  return _[a1 resetBroadcastKeyConfig];
}

id objc_msgSend_resetSession(void *a1, const char *a2, ...)
{
  return _[a1 resetSession];
}

id objc_msgSend_responseHeaderForRequestHeader_status_(void *a1, const char *a2, ...)
{
  return [a1 responseHeaderForRequestHeader:status:];
}

id objc_msgSend_responseTimer(void *a1, const char *a2, ...)
{
  return _[a1 responseTimer];
}

id objc_msgSend_responseTupleForCharacteristic_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "responseTupleForCharacteristic:error:")];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_resumeSessionID(void *a1, const char *a2, ...)
{
  return _[a1 resumeSessionID];
}

id objc_msgSend_resumeSessionId(void *a1, const char *a2, ...)
{
  return _[a1 resumeSessionId];
}

id objc_msgSend_reverseTransformedValue_format_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "reverseTransformedValue:format:error:");
}

id objc_msgSend_role(void *a1, const char *a2, ...)
{
  return _[a1 role];
}

id objc_msgSend_saltData(void *a1, const char *a2, ...)
{
  return _[a1 saltData];
}

id objc_msgSend_save(void *a1, const char *a2, ...)
{
  return _[a1 save];
}

id objc_msgSend_saveBlock(void *a1, const char *a2, ...)
{
  return _[a1 saveBlock];
}

id objc_msgSend_saveBroadcastKey_keyUpdatedStateNumber_updatedTime_(void *a1, const char *a2, ...)
{
  return [a1 saveBroadcastKey:x0 keyUpdatedStateNumber:x1 updatedTime:x2];
}

id objc_msgSend_saveCacheToDisk_(void *a1, const char *a2, ...)
{
  return [a1 saveCacheToDisk:];
}

id objc_msgSend_savePublicKey_forAccessoryName_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "savePublicKey:forAccessoryName:error:");
}

id objc_msgSend_scale(void *a1, const char *a2, ...)
{
  return _[a1 scale];
}

id objc_msgSend_schemaVersion(void *a1, const char *a2, ...)
{
  return _[a1 schemaVersion];
}

id objc_msgSend_securitySession(void *a1, const char *a2, ...)
{
  return _[a1 securitySession];
}

id objc_msgSend_securitySession_didCloseWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "securitySession:didCloseWithError:");
}

id objc_msgSend_securitySession_didReceiveLocalPairingIdentityRequestWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "securitySession:didReceiveLocalPairingIdentityRequestWithError:");
}

id objc_msgSend_securitySession_didReceiveRequestForPeerPairingIdentityWithIdentifier_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "securitySession:didReceiveRequestForPeerPairingIdentityWithIdentifier:error:");
}

id objc_msgSend_securitySession_didReceiveSetupExchangeData_(void *a1, const char *a2, ...)
{
  return [a1 securitySession:didReceiveSetupExchangeData:];
}

id objc_msgSend_securitySessionDidOpen_(void *a1, const char *a2, ...)
{
  return [a1 securitySessionDidOpen:];
}

id objc_msgSend_securitySessionDidRequestAdditionalDerivedKeyTuples_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "securitySessionDidRequestAdditionalDerivedKeyTuples:");
}

id objc_msgSend_securitySessionIsOpening_(void *a1, const char *a2, ...)
{
  return [a1 securitySessionIsOpening:];
}

id objc_msgSend_sendCloseEventTimer(void *a1, const char *a2, ...)
{
  return _[a1 sendCloseEventTimer];
}

id objc_msgSend_sendData_socket_completion_(void *a1, const char *a2, ...)
{
  return [a1 sendData:x0 socket:x1 completion:x2];
}

id objc_msgSend_sendEventForProtocol_topic_payload_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendEventForProtocol:topic:payload:completion:");
}

id objc_msgSend_sendRawFrame_completion_(void *a1, const char *a2, ...)
{
  return [a1 sendRawFrame:x0 completion:x1];
}

id objc_msgSend_sendRequestForProtocol_topic_identifier_payload_completion_(void *a1, const char *a2, ...)
{
  return [a1 sendRequestForProtocol:x0 topic:x1 identifier:x2 payload:x3 completion:x4];
}

id objc_msgSend_sendRequestForProtocol_topic_payload_completion_(void *a1, const char *a2, ...)
{
  return [a1 sendRequestForProtocol:x0 topic:x1 payload:x2 completion:x3];
}

id objc_msgSend_sendResponseForRequestHeader_payload_status_completion_(void *a1, const char *a2, ...)
{
  return [a1 sendResponseForRequestHeader:x0 payload:x1 status:x2 completion:x3];
}

id objc_msgSend_sendTargetControlWhoAmIWithIdentifier_dataStreamProtocolDelegate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendTargetControlWhoAmIWithIdentifier:dataStreamProtocolDelegate:");
}

id objc_msgSend_sendTokenUpdateRequest_(void *a1, const char *a2, ...)
{
  return [a1 sendTokenUpdateRequest:];
}

id objc_msgSend_sequenceNumber(void *a1, const char *a2, ...)
{
  return _[a1 sequenceNumber];
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return _[a1 serialNumber];
}

id objc_msgSend_serialize(void *a1, const char *a2, ...)
{
  return _[a1 serialize];
}

id objc_msgSend_serializeWithError_(void *a1, const char *a2, ...)
{
  return [a1 serializeWithError:];
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return _[a1 server];
}

id objc_msgSend_serverIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 serverIdentifier];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _[a1 service];
}

id objc_msgSend_serviceInstanceID(void *a1, const char *a2, ...)
{
  return _[a1 serviceInstanceID];
}

id objc_msgSend_serviceInstanceId(void *a1, const char *a2, ...)
{
  return _[a1 serviceInstanceId];
}

id objc_msgSend_serviceInstanceOrder(void *a1, const char *a2, ...)
{
  return _[a1 serviceInstanceOrder];
}

id objc_msgSend_serviceProperties(void *a1, const char *a2, ...)
{
  return _[a1 serviceProperties];
}

id objc_msgSend_serviceSignatures(void *a1, const char *a2, ...)
{
  return _[a1 serviceSignatures];
}

id objc_msgSend_serviceType(void *a1, const char *a2, ...)
{
  return _[a1 serviceType];
}

id objc_msgSend_serviceTypeFromUTI_(void *a1, const char *a2, ...)
{
  return [a1 serviceTypeFromUTI:];
}

id objc_msgSend_serviceUTIFromType_(void *a1, const char *a2, ...)
{
  return [a1 serviceUTIFromType:];
}

id objc_msgSend_serviceUUID(void *a1, const char *a2, ...)
{
  return _[a1 serviceUUID];
}

id objc_msgSend_services(void *a1, const char *a2, ...)
{
  return _[a1 services];
}

id objc_msgSend_servicesOfType_(void *a1, const char *a2, ...)
{
  return [a1 servicesOfType:];
}

id objc_msgSend_session(void *a1, const char *a2, ...)
{
  return _[a1 session];
}

id objc_msgSend_sessionEncryption(void *a1, const char *a2, ...)
{
  return _[a1 sessionEncryption];
}

id objc_msgSend_sessionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sessionIdentifier];
}

id objc_msgSend_sessionStartCallback(void *a1, const char *a2, ...)
{
  return _[a1 sessionStartCallback];
}

id objc_msgSend_sessionStartTime(void *a1, const char *a2, ...)
{
  return _[a1 sessionStartTime];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAbnormalReasons_(void *a1, const char *a2, ...)
{
  return [a1 setAbnormalReasons:];
}

id objc_msgSend_setAccessories_(void *a1, const char *a2, ...)
{
  return [a1 setAccessories:];
}

id objc_msgSend_setAccessory_(void *a1, const char *a2, ...)
{
  return [a1 setAccessory:];
}

id objc_msgSend_setAccessoryKeySalt_(void *a1, const char *a2, ...)
{
  return [a1 setAccessoryKeySalt:];
}

id objc_msgSend_setAccessoryName_(void *a1, const char *a2, ...)
{
  return [a1 setAccessoryName:];
}

id objc_msgSend_setAccessoryRequestToSend_(void *a1, const char *a2, ...)
{
  return [a1 setAccessoryRequestToSend:];
}

id objc_msgSend_setActive_(void *a1, const char *a2, ...)
{
  return [a1 setActive:];
}

id objc_msgSend_setActiveReadHandler_(void *a1, const char *a2, ...)
{
  return [a1 setActiveReadHandler:];
}

id objc_msgSend_setActiveTransitionContexts_(void *a1, const char *a2, ...)
{
  return [a1 setActiveTransitionContexts:];
}

id objc_msgSend_setAdditionalDerivedKeys_(void *a1, const char *a2, ...)
{
  return [a1 setAdditionalDerivedKeys:];
}

id objc_msgSend_setAllowAssociatedService_(void *a1, const char *a2, ...)
{
  return [a1 setAllowAssociatedService:];
}

id objc_msgSend_setAssembledFragment_(void *a1, const char *a2, ...)
{
  return [a1 setAssembledFragment:];
}

id objc_msgSend_setAtvState_(void *a1, const char *a2, ...)
{
  return [a1 setAtvState:];
}

id objc_msgSend_setAudioDiagnostics_(void *a1, const char *a2, ...)
{
  return [a1 setAudioDiagnostics:];
}

id objc_msgSend_setAuthMethod_(void *a1, const char *a2, ...)
{
  return [a1 setAuthMethod:];
}

id objc_msgSend_setAuthSession_(void *a1, const char *a2, ...)
{
  return [a1 setAuthSession:];
}

id objc_msgSend_setAuthenticated_(void *a1, const char *a2, ...)
{
  return [a1 setAuthenticated:];
}

id objc_msgSend_setAuthenticatedProtocolInfo_(void *a1, const char *a2, ...)
{
  return [a1 setAuthenticatedProtocolInfo:];
}

id objc_msgSend_setAuthorizationData_(void *a1, const char *a2, ...)
{
  return [a1 setAuthorizationData:];
}

id objc_msgSend_setBadPairSetupCode_(void *a1, const char *a2, ...)
{
  return [a1 setBadPairSetupCode:];
}

id objc_msgSend_setBody_(void *a1, const char *a2, ...)
{
  return [a1 setBody:];
}

id objc_msgSend_setBroadcastEnable_(void *a1, const char *a2, ...)
{
  return [a1 setBroadcastEnable:];
}

id objc_msgSend_setBroadcastInterval_(void *a1, const char *a2, ...)
{
  return [a1 setBroadcastInterval:];
}

id objc_msgSend_setBroadcastKey_(void *a1, const char *a2, ...)
{
  return [a1 setBroadcastKey:];
}

id objc_msgSend_setBtleuuidStr_(void *a1, const char *a2, ...)
{
  return [a1 setBtleuuidStr:];
}

id objc_msgSend_setBytesWritten_(void *a1, const char *a2, ...)
{
  return [a1 setBytesWritten:];
}

id objc_msgSend_setCBCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setCBCharacteristic:];
}

id objc_msgSend_setCBService_(void *a1, const char *a2, ...)
{
  return [a1 setCBService:];
}

id objc_msgSend_setCachedCharacteristics_(void *a1, const char *a2, ...)
{
  return [a1 setCachedCharacteristics:];
}

id objc_msgSend_setCategory_(void *a1, const char *a2, ...)
{
  return [a1 setCategory:];
}

id objc_msgSend_setCbPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 setCbPeripheral:];
}

id objc_msgSend_setCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setCharacteristic:];
}

id objc_msgSend_setCharacteristicMetadata_(void *a1, const char *a2, ...)
{
  return [a1 setCharacteristicMetadata:];
}

id objc_msgSend_setCharacteristicProperties_(void *a1, const char *a2, ...)
{
  return [a1 setCharacteristicProperties:];
}

id objc_msgSend_setCharacteristics_(void *a1, const char *a2, ...)
{
  return [a1 setCharacteristics:];
}

id objc_msgSend_setChipFabricIndex_(void *a1, const char *a2, ...)
{
  return [a1 setChipFabricIndex:];
}

id objc_msgSend_setCommand_(void *a1, const char *a2, ...)
{
  return [a1 setCommand:];
}

id objc_msgSend_setComplete_(void *a1, const char *a2, ...)
{
  return [a1 setComplete:];
}

id objc_msgSend_setCompletionBlock_(void *a1, const char *a2, ...)
{
  return [a1 setCompletionBlock:];
}

id objc_msgSend_setCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 setCompletionHandler:];
}

id objc_msgSend_setCompletionQueue_(void *a1, const char *a2, ...)
{
  return [a1 setCompletionQueue:];
}

id objc_msgSend_setConfigNumber_(void *a1, const char *a2, ...)
{
  return [a1 setConfigNumber:];
}

id objc_msgSend_setConfigurations_(void *a1, const char *a2, ...)
{
  return [a1 setConfigurations:];
}

id objc_msgSend_setConnectionCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionCompletionHandler:];
}

id objc_msgSend_setConnectionIdleTime_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionIdleTime:];
}

id objc_msgSend_setConnectionIdleTimer_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionIdleTimer:];
}

id objc_msgSend_setConnectionLatency_forPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionLatency:forPeripheral:];
}

id objc_msgSend_setConnectionStartTime_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionStartTime:];
}

id objc_msgSend_setConnectionState_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionState:];
}

id objc_msgSend_setConnectionTimer_(void *a1, const char *a2, ...)
{
  return [a1 setConnectionTimer:];
}

id objc_msgSend_setConstraints_(void *a1, const char *a2, ...)
{
  return [a1 setConstraints:];
}

id objc_msgSend_setContextData_(void *a1, const char *a2, ...)
{
  return [a1 setContextData:];
}

id objc_msgSend_setControlOutputStream_(void *a1, const char *a2, ...)
{
  return [a1 setControlOutputStream:];
}

id objc_msgSend_setControlPayloadWrittenLength_(void *a1, const char *a2, ...)
{
  return [a1 setControlPayloadWrittenLength:];
}

id objc_msgSend_setControllerContext_(void *a1, const char *a2, ...)
{
  return [a1 setControllerContext:];
}

id objc_msgSend_setControllerKeySalt_(void *a1, const char *a2, ...)
{
  return [a1 setControllerKeySalt:];
}

id objc_msgSend_setCurrentChunkSequenceNumber_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentChunkSequenceNumber:];
}

id objc_msgSend_setCurrentIndexInBag_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentIndexInBag:];
}

id objc_msgSend_setCurrentPacketTransactionIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentPacketTransactionIdentifier:];
}

id objc_msgSend_setCurrentState_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentState:];
}

id objc_msgSend_setCurrentTID_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentTID:];
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return [a1 setData:];
}

id objc_msgSend_setDataStream_(void *a1, const char *a2, ...)
{
  return [a1 setDataStream:];
}

id objc_msgSend_setDataStreamTransportInterruptSequenceNumber_(void *a1, const char *a2, ...)
{
  return [a1 setDataStreamTransportInterruptSequenceNumber:];
}

id objc_msgSend_setDefaultDataStream_(void *a1, const char *a2, ...)
{
  return [a1 setDefaultDataStream:];
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setDelegate:];
}

id objc_msgSend_setDelegateQueue_(void *a1, const char *a2, ...)
{
  return [a1 setDelegateQueue:];
}

id objc_msgSend_setDiscovering_(void *a1, const char *a2, ...)
{
  return [a1 setDiscovering:];
}

id objc_msgSend_setDiscoveryContext_(void *a1, const char *a2, ...)
{
  return [a1 setDiscoveryContext:];
}

id objc_msgSend_setDiscoveryRetries_(void *a1, const char *a2, ...)
{
  return [a1 setDiscoveryRetries:];
}

id objc_msgSend_setDiscoveryVersion_(void *a1, const char *a2, ...)
{
  return [a1 setDiscoveryVersion:];
}

id objc_msgSend_setEncryption_(void *a1, const char *a2, ...)
{
  return [a1 setEncryption:];
}

id objc_msgSend_setEndBehavior_(void *a1, const char *a2, ...)
{
  return [a1 setEndBehavior:];
}

id objc_msgSend_setEndDate_(void *a1, const char *a2, ...)
{
  return [a1 setEndDate:];
}

id objc_msgSend_setError_(void *a1, const char *a2, ...)
{
  return [a1 setError:];
}

id objc_msgSend_setEventNotificationsEnabled_(void *a1, const char *a2, ...)
{
  return [a1 setEventNotificationsEnabled:];
}

id objc_msgSend_setFeatureFlags_(void *a1, const char *a2, ...)
{
  return [a1 setFeatureFlags:];
}

id objc_msgSend_setField_(void *a1, const char *a2, ...)
{
  return [a1 setField:];
}

id objc_msgSend_setFirmwareVersion_(void *a1, const char *a2, ...)
{
  return [a1 setFirmwareVersion:];
}

id objc_msgSend_setFirstMessageReceived_(void *a1, const char *a2, ...)
{
  return [a1 setFirstMessageReceived:];
}

id objc_msgSend_setForceClose_(void *a1, const char *a2, ...)
{
  return [a1 setForceClose:];
}

id objc_msgSend_setFormat_(void *a1, const char *a2, ...)
{
  return [a1 setFormat:];
}

id objc_msgSend_setHAPInstanceID_(void *a1, const char *a2, ...)
{
  return [a1 setHAPInstanceID:];
}

id objc_msgSend_setHandleOpenRequestResponseTimer_(void *a1, const char *a2, ...)
{
  return [a1 setHandleOpenRequestResponseTimer:];
}

id objc_msgSend_setHandler_(void *a1, const char *a2, ...)
{
  return [a1 setHandler:];
}

id objc_msgSend_setHapBaseUUIDSuffix_(void *a1, const char *a2, ...)
{
  return [a1 setHapBaseUUIDSuffix:];
}

id objc_msgSend_setHapCharacteristicMap_(void *a1, const char *a2, ...)
{
  return [a1 setHapCharacteristicMap:];
}

id objc_msgSend_setHapCharacteristicNameTypeMap_(void *a1, const char *a2, ...)
{
  return [a1 setHapCharacteristicNameTypeMap:];
}

id objc_msgSend_setHapPropertyMap_(void *a1, const char *a2, ...)
{
  return [a1 setHapPropertyMap:];
}

id objc_msgSend_setHapServiceMap_(void *a1, const char *a2, ...)
{
  return [a1 setHapServiceMap:];
}

id objc_msgSend_setHapServiceNameTypeMap_(void *a1, const char *a2, ...)
{
  return [a1 setHapServiceNameTypeMap:];
}

id objc_msgSend_setHapSupportsAuthDataSet_(void *a1, const char *a2, ...)
{
  return [a1 setHapSupportsAuthDataSet:];
}

id objc_msgSend_setHapUnitMap_(void *a1, const char *a2, ...)
{
  return [a1 setHapUnitMap:];
}

id objc_msgSend_setHasBeenDiscovered_(void *a1, const char *a2, ...)
{
  return [a1 setHasBeenDiscovered:];
}

id objc_msgSend_setHasPairings_(void *a1, const char *a2, ...)
{
  return [a1 setHasPairings:];
}

id objc_msgSend_setHasValidCache_(void *a1, const char *a2, ...)
{
  return [a1 setHasValidCache:];
}

id objc_msgSend_setHeaderComplete_(void *a1, const char *a2, ...)
{
  return [a1 setHeaderComplete:];
}

id objc_msgSend_setHelloMessageResponseReceived_(void *a1, const char *a2, ...)
{
  return [a1 setHelloMessageResponseReceived:];
}

id objc_msgSend_setHelloMessageResponseTimer_(void *a1, const char *a2, ...)
{
  return [a1 setHelloMessageResponseTimer:];
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setIdentifier:];
}

id objc_msgSend_setIdleTimer_(void *a1, const char *a2, ...)
{
  return [a1 setIdleTimer:];
}

id objc_msgSend_setIncludeResponseValue_(void *a1, const char *a2, ...)
{
  return [a1 setIncludeResponseValue:];
}

id objc_msgSend_setIncompatibleUpdate_(void *a1, const char *a2, ...)
{
  return [a1 setIncompatibleUpdate:];
}

id objc_msgSend_setInterruptCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setInterruptCharacteristic:];
}

id objc_msgSend_setIsCached_(void *a1, const char *a2, ...)
{
  return [a1 setIsCached:];
}

id objc_msgSend_setIsConnected_(void *a1, const char *a2, ...)
{
  return [a1 setIsConnected:];
}

id objc_msgSend_setIsWriteInProgress_(void *a1, const char *a2, ...)
{
  return [a1 setIsWriteInProgress:];
}

id objc_msgSend_setIsoCountryCode_(void *a1, const char *a2, ...)
{
  return [a1 setIsoCountryCode:];
}

id objc_msgSend_setKeyUpdatedStateNumber_(void *a1, const char *a2, ...)
{
  return [a1 setKeyUpdatedStateNumber:];
}

id objc_msgSend_setKeyUpdatedTime_(void *a1, const char *a2, ...)
{
  return [a1 setKeyUpdatedTime:];
}

id objc_msgSend_setLastAccessoryRequestToSendFlag_(void *a1, const char *a2, ...)
{
  return [a1 setLastAccessoryRequestToSendFlag:];
}

id objc_msgSend_setLastKeyBagIdentityIndexFailingPV_(void *a1, const char *a2, ...)
{
  return [a1 setLastKeyBagIdentityIndexFailingPV:];
}

id objc_msgSend_setLastSeen_(void *a1, const char *a2, ...)
{
  return [a1 setLastSeen:];
}

id objc_msgSend_setLinearDerivedTransition_(void *a1, const char *a2, ...)
{
  return [a1 setLinearDerivedTransition:];
}

id objc_msgSend_setLinearTransition_(void *a1, const char *a2, ...)
{
  return [a1 setLinearTransition:];
}

id objc_msgSend_setLinkedServices_(void *a1, const char *a2, ...)
{
  return [a1 setLinkedServices:];
}

id objc_msgSend_setLowerBound_(void *a1, const char *a2, ...)
{
  return [a1 setLowerBound:];
}

id objc_msgSend_setManufacturer_(void *a1, const char *a2, ...)
{
  return [a1 setManufacturer:];
}

id objc_msgSend_setManufacturerDescription_(void *a1, const char *a2, ...)
{
  return [a1 setManufacturerDescription:];
}

id objc_msgSend_setMaxBandwidth_(void *a1, const char *a2, ...)
{
  return [a1 setMaxBandwidth:];
}

id objc_msgSend_setMaxConcurrentOperationCount_(void *a1, const char *a2, ...)
{
  return [a1 setMaxConcurrentOperationCount:];
}

id objc_msgSend_setMaxControllerTransportMTU_(void *a1, const char *a2, ...)
{
  return [a1 setMaxControllerTransportMTU:];
}

id objc_msgSend_setMaxHAPConnections_(void *a1, const char *a2, ...)
{
  return [a1 setMaxHAPConnections:];
}

id objc_msgSend_setMaxLength_(void *a1, const char *a2, ...)
{
  return [a1 setMaxLength:];
}

id objc_msgSend_setMaximumControllerTransportMTU_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumControllerTransportMTU:];
}

id objc_msgSend_setMaximumValue_(void *a1, const char *a2, ...)
{
  return [a1 setMaximumValue:];
}

id objc_msgSend_setMetadata_(void *a1, const char *a2, ...)
{
  return [a1 setMetadata:];
}

id objc_msgSend_setMetric_pairVerifyDurationInMS_(void *a1, const char *a2, ...)
{
  return [a1 setMetric_pairVerifyDurationInMS:];
}

id objc_msgSend_setMetric_pairVerifyReason_(void *a1, const char *a2, ...)
{
  return [a1 setMetric_pairVerifyReason:];
}

id objc_msgSend_setMinBandwidth_(void *a1, const char *a2, ...)
{
  return [a1 setMinBandwidth:];
}

id objc_msgSend_setMinLength_(void *a1, const char *a2, ...)
{
  return [a1 setMinLength:];
}

id objc_msgSend_setMinimumValue_(void *a1, const char *a2, ...)
{
  return [a1 setMinimumValue:];
}

id objc_msgSend_setModel_(void *a1, const char *a2, ...)
{
  return [a1 setModel:];
}

id objc_msgSend_setName_(void *a1, const char *a2, ...)
{
  return [a1 setName:];
}

id objc_msgSend_setNextRequestIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setNextRequestIdentifier:];
}

id objc_msgSend_setNextSessionIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setNextSessionIdentifier:];
}

id objc_msgSend_setNotificationContext_(void *a1, const char *a2, ...)
{
  return [a1 setNotificationContext:];
}

id objc_msgSend_setNotifyTimeIntervalThreshold_(void *a1, const char *a2, ...)
{
  return [a1 setNotifyTimeIntervalThreshold:];
}

id objc_msgSend_setNotifyValue_forCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setNotifyValue:forCharacteristic:];
}

id objc_msgSend_setNotifyValueChangeThreshold_(void *a1, const char *a2, ...)
{
  return [a1 setNotifyValueChangeThreshold:];
}

id objc_msgSend_setNotifyingCharacteristicUpdated_(void *a1, const char *a2, ...)
{
  return [a1 setNotifyingCharacteristicUpdated:];
}

id objc_msgSend_setNumberStyle_(void *a1, const char *a2, ...)
{
  return [a1 setNumberStyle:];
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKey:];
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKeyedSubscript:];
}

id objc_msgSend_setObjectCreator_(void *a1, const char *a2, ...)
{
  return [a1 setObjectCreator:];
}

id objc_msgSend_setOffset_(void *a1, const char *a2, ...)
{
  return [a1 setOffset:];
}

id objc_msgSend_setOpen_(void *a1, const char *a2, ...)
{
  return [a1 setOpen:];
}

id objc_msgSend_setOperation_(void *a1, const char *a2, ...)
{
  return [a1 setOperation:];
}

id objc_msgSend_setOptionalCharacteristics_(void *a1, const char *a2, ...)
{
  return [a1 setOptionalCharacteristics:];
}

id objc_msgSend_setOptions_(void *a1, const char *a2, ...)
{
  return [a1 setOptions:];
}

id objc_msgSend_setOwnershipToken_(void *a1, const char *a2, ...)
{
  return [a1 setOwnershipToken:];
}

id objc_msgSend_setPairSetupBackoffTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 setPairSetupBackoffTimeInterval:];
}

id objc_msgSend_setPairSetupSession_(void *a1, const char *a2, ...)
{
  return [a1 setPairSetupSession:];
}

id objc_msgSend_setPairing_(void *a1, const char *a2, ...)
{
  return [a1 setPairing:];
}

id objc_msgSend_setPairingActivity_(void *a1, const char *a2, ...)
{
  return [a1 setPairingActivity:];
}

id objc_msgSend_setPairingDisconnectionError_(void *a1, const char *a2, ...)
{
  return [a1 setPairingDisconnectionError:];
}

id objc_msgSend_setPairingIdentity_(void *a1, const char *a2, ...)
{
  return [a1 setPairingIdentity:];
}

id objc_msgSend_setPairingRequest_(void *a1, const char *a2, ...)
{
  return [a1 setPairingRequest:];
}

id objc_msgSend_setParameters_(void *a1, const char *a2, ...)
{
  return [a1 setParameters:];
}

id objc_msgSend_setParsedUUIDs_(void *a1, const char *a2, ...)
{
  return [a1 setParsedUUIDs:];
}

id objc_msgSend_setPayload_(void *a1, const char *a2, ...)
{
  return [a1 setPayload:];
}

id objc_msgSend_setPendingError_(void *a1, const char *a2, ...)
{
  return [a1 setPendingError:];
}

id objc_msgSend_setPendingHelloMessageIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setPendingHelloMessageIdentifier];
}

id objc_msgSend_setPendingRemovePairing_(void *a1, const char *a2, ...)
{
  return [a1 setPendingRemovePairing];
}

id objc_msgSend_setPeripheralInfo_(void *a1, const char *a2, ...)
{
  return [a1 setPeripheralInfo:];
}

id objc_msgSend_setPreviousProtocolVersion_(void *a1, const char *a2, ...)
{
  return [a1 setPreviousProtocolVersion:];
}

id objc_msgSend_setPrimaryAccessory_(void *a1, const char *a2, ...)
{
  return [a1 setPrimaryAccessory:];
}

id objc_msgSend_setProductData_(void *a1, const char *a2, ...)
{
  return [a1 setProductData:];
}

id objc_msgSend_setProhibitCaching_(void *a1, const char *a2, ...)
{
  return [a1 setProhibitCaching:];
}

id objc_msgSend_setProvisionUUID_(void *a1, const char *a2, ...)
{
  return [a1 setProvisionUUID:];
}

id objc_msgSend_setPsk_(void *a1, const char *a2, ...)
{
  return [a1 setPsk:];
}

id objc_msgSend_setQualityOfService_(void *a1, const char *a2, ...)
{
  return [a1 setQualityOfService:];
}

id objc_msgSend_setQueuePriority_(void *a1, const char *a2, ...)
{
  return [a1 setQueuePriority:];
}

id objc_msgSend_setReachable_(void *a1, const char *a2, ...)
{
  return [a1 setReachable:];
}

id objc_msgSend_setRequestToSendIdentifiers_(void *a1, const char *a2, ...)
{
  return [a1 setRequestToSendIdentifiers:];
}

id objc_msgSend_setRequiresUserConsent_(void *a1, const char *a2, ...)
{
  return [a1 setRequiresUserConsent:];
}

id objc_msgSend_setResponseTimer_(void *a1, const char *a2, ...)
{
  return [a1 setResponseTimer:];
}

id objc_msgSend_setResumeSessionID_(void *a1, const char *a2, ...)
{
  return [a1 setResumeSessionID:];
}

id objc_msgSend_setScale_(void *a1, const char *a2, ...)
{
  return [a1 setScale:];
}

id objc_msgSend_setSchemaVersion_(void *a1, const char *a2, ...)
{
  return [a1 setSchemaVersion:];
}

id objc_msgSend_setSecuritySession_(void *a1, const char *a2, ...)
{
  return [a1 setSecuritySession:];
}

id objc_msgSend_setSendCloseEventTimer_(void *a1, const char *a2, ...)
{
  return [a1 setSendCloseEventTimer:];
}

id objc_msgSend_setSerialNumber_(void *a1, const char *a2, ...)
{
  return [a1 setSerialNumber:];
}

id objc_msgSend_setServerIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setServerIdentifier:];
}

id objc_msgSend_setService_(void *a1, const char *a2, ...)
{
  return [a1 setService:];
}

id objc_msgSend_setServiceInstanceOrder_(void *a1, const char *a2, ...)
{
  return [a1 setServiceInstanceOrder:];
}

id objc_msgSend_setServiceProperties_(void *a1, const char *a2, ...)
{
  return [a1 setServiceProperties:];
}

id objc_msgSend_setServices_(void *a1, const char *a2, ...)
{
  return [a1 setServices:];
}

id objc_msgSend_setSessionIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setSessionIdentifier:];
}

id objc_msgSend_setSetupCodeCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 setSetupCodeCompletionHandler:];
}

id objc_msgSend_setSetupHash_(void *a1, const char *a2, ...)
{
  return [a1 setSetupHash:];
}

id objc_msgSend_setSetupInProgress_(void *a1, const char *a2, ...)
{
  return [a1 setSetupInProgress:];
}

id objc_msgSend_setShouldValidateValueAfterReading_(void *a1, const char *a2, ...)
{
  return [a1 setShouldValidateValueAfterReading:];
}

id objc_msgSend_setSourceHAPInstanceID_(void *a1, const char *a2, ...)
{
  return [a1 setSourceHAPInstanceID:];
}

id objc_msgSend_setSourceValueRange_(void *a1, const char *a2, ...)
{
  return [a1 setSourceValueRange:];
}

id objc_msgSend_setSsid_(void *a1, const char *a2, ...)
{
  return [a1 setSsid:];
}

id objc_msgSend_setStagedFirmwareVersion_(void *a1, const char *a2, ...)
{
  return [a1 setStagedFirmwareVersion:];
}

id objc_msgSend_setStagingNotReadyReasons_(void *a1, const char *a2, ...)
{
  return [a1 setStagingNotReadyReasons:];
}

id objc_msgSend_setStartBehavior_(void *a1, const char *a2, ...)
{
  return [a1 setStartBehavior:];
}

id objc_msgSend_setStartDelayDuration_(void *a1, const char *a2, ...)
{
  return [a1 setStartDelayDuration:];
}

id objc_msgSend_setStartTime_(void *a1, const char *a2, ...)
{
  return [a1 setStartTime:];
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return [a1 setState:];
}

id objc_msgSend_setStateNumber_(void *a1, const char *a2, ...)
{
  return [a1 setStateNumber:];
}

id objc_msgSend_setStatus_(void *a1, const char *a2, ...)
{
  return [a1 setStatus:];
}

id objc_msgSend_setStepValue_(void *a1, const char *a2, ...)
{
  return [a1 setStepValue:];
}

id objc_msgSend_setSubmitted_(void *a1, const char *a2, ...)
{
  return [a1 setSubmitted:];
}

id objc_msgSend_setSupportsDataStreamOverHAP_(void *a1, const char *a2, ...)
{
  return [a1 setSupportsDataStreamOverHAP:];
}

id objc_msgSend_setSuspended_(void *a1, const char *a2, ...)
{
  return [a1 setSuspended:];
}

id objc_msgSend_setTargetCompletionDuration_(void *a1, const char *a2, ...)
{
  return [a1 setTargetCompletionDuration:];
}

id objc_msgSend_setTargetValue_(void *a1, const char *a2, ...)
{
  return [a1 setTargetValue:];
}

id objc_msgSend_setTcpListeningPort_(void *a1, const char *a2, ...)
{
  return [a1 setTcpListeningPort:];
}

id objc_msgSend_setTimeElapsedSinceStart_(void *a1, const char *a2, ...)
{
  return [a1 setTimeElapsedSinceStart:];
}

id objc_msgSend_setTimedWrite_(void *a1, const char *a2, ...)
{
  return [a1 setTimedWrite:];
}

id objc_msgSend_setToken1_(void *a1, const char *a2, ...)
{
  return [a1 setToken1:];
}

id objc_msgSend_setToken2_(void *a1, const char *a2, ...)
{
  return [a1 setToken2:];
}

id objc_msgSend_setTrafficClass_(void *a1, const char *a2, ...)
{
  return [a1 setTrafficClass:];
}

id objc_msgSend_setTransitionChecksum_(void *a1, const char *a2, ...)
{
  return [a1 setTransitionChecksum:];
}

id objc_msgSend_setTransitionFetch_(void *a1, const char *a2, ...)
{
  return [a1 setTransitionFetch:];
}

id objc_msgSend_setTransitionPoints_(void *a1, const char *a2, ...)
{
  return [a1 setTransitionPoints:];
}

id objc_msgSend_setTransitionStart_(void *a1, const char *a2, ...)
{
  return [a1 setTransitionStart:];
}

id objc_msgSend_setTransitionState_(void *a1, const char *a2, ...)
{
  return [a1 setTransitionState:];
}

id objc_msgSend_setTransitionTypes_(void *a1, const char *a2, ...)
{
  return [a1 setTransitionTypes:];
}

id objc_msgSend_setTransitions_(void *a1, const char *a2, ...)
{
  return [a1 setTransitions:];
}

id objc_msgSend_setTransport_(void *a1, const char *a2, ...)
{
  return [a1 setTransport:];
}

id objc_msgSend_setTransportCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 setTransportCharacteristic:];
}

id objc_msgSend_setTransportType_(void *a1, const char *a2, ...)
{
  return [a1 setTransportType:];
}

id objc_msgSend_setType_(void *a1, const char *a2, ...)
{
  return [a1 setType:];
}

id objc_msgSend_setUnits_(void *a1, const char *a2, ...)
{
  return [a1 setUnits:];
}

id objc_msgSend_setUpdateDuration_(void *a1, const char *a2, ...)
{
  return [a1 setUpdateDuration:];
}

id objc_msgSend_setUpdateNotReadyReasons_(void *a1, const char *a2, ...)
{
  return [a1 setUpdateNotReadyReasons:];
}

id objc_msgSend_setUpperBound_(void *a1, const char *a2, ...)
{
  return [a1 setUpperBound:];
}

id objc_msgSend_setValidValues_(void *a1, const char *a2, ...)
{
  return [a1 setValidValues:];
}

id objc_msgSend_setValue_(void *a1, const char *a2, ...)
{
  return [a1 setValue:];
}

id objc_msgSend_setValueMetadata_(void *a1, const char *a2, ...)
{
  return [a1 setValueMetadata:];
}

id objc_msgSend_setValueTransition_(void *a1, const char *a2, ...)
{
  return [a1 setValueTransition:];
}

id objc_msgSend_setValueUpdateTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 setValueUpdateTimeInterval:];
}

id objc_msgSend_setValueUpdatedTime_(void *a1, const char *a2, ...)
{
  return [a1 setValueUpdatedTime:];
}

id objc_msgSend_setVerified_(void *a1, const char *a2, ...)
{
  return [a1 setVerified:];
}

id objc_msgSend_setVersion_(void *a1, const char *a2, ...)
{
  return [a1 setVersion:];
}

id objc_msgSend_setWaitingForAuth_(void *a1, const char *a2, ...)
{
  return [a1 setWaitingForAuth:];
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return [a1 setWithArray:];
}

id objc_msgSend_setWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 setWithCapacity:];
}

id objc_msgSend_setWriteType_(void *a1, const char *a2, ...)
{
  return [a1 setWriteType:];
}

id objc_msgSend_setupCodeCompletionHandler(void *a1, const char *a2, ...)
{
  return _[a1 setupCodeCompletionHandler];
}

id objc_msgSend_setupHash(void *a1, const char *a2, ...)
{
  return _[a1 setupHash];
}

id objc_msgSend_setupInProgress(void *a1, const char *a2, ...)
{
  return _[a1 setupInProgress];
}

id objc_msgSend_setupRequiresCharactertisticReads(void *a1, const char *a2, ...)
{
  return _[a1 setupRequiresCharactertisticReads];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedPreferences(void *a1, const char *a2, ...)
{
  return _[a1 sharedPreferences];
}

id objc_msgSend_shortDescription(void *a1, const char *a2, ...)
{
  return _[a1 shortDescription];
}

id objc_msgSend_shortValue(void *a1, const char *a2, ...)
{
  return _[a1 shortValue];
}

id objc_msgSend_shortenHAPType_baseUUIDSuffix_(void *a1, const char *a2, ...)
{
  return [a1 shortenHAPType:x0 baseUUIDSuffix:x1];
}

id objc_msgSend_shouldCloseSessionWithTimeoutReason(void *a1, const char *a2, ...)
{
  return _[a1 shouldCloseSessionWithTimeoutReason];
}

id objc_msgSend_shouldMergeObject_(void *a1, const char *a2, ...)
{
  return [a1 shouldMergeObject:];
}

id objc_msgSend_shouldRetryPVDueToAuthenticationError_(void *a1, const char *a2, ...)
{
  return [a1 shouldRetryPVDueToAuthenticationError:];
}

id objc_msgSend_shouldValidateValueAfterReading(void *a1, const char *a2, ...)
{
  return _[a1 shouldValidateValueAfterReading];
}

id objc_msgSend_shouldVerifyHAPCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 shouldVerifyHAPCharacteristic:];
}

id objc_msgSend_shouldVerifyHAPService_(void *a1, const char *a2, ...)
{
  return [a1 shouldVerifyHAPService:];
}

id objc_msgSend_signatureRequestForCharacteristic_requiresAuthentication_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "signatureRequestForCharacteristic:requiresAuthentication:error:");
}

id objc_msgSend_signatureRequestForService_characteristic_requiresAuthentication_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "signatureRequestForService:characteristic:requiresAuthentication:error:");
}

id objc_msgSend_socket_didFailWithError_(void *a1, const char *a2, ...)
{
  return [a1 socket:didFailWithError:];
}

id objc_msgSend_socketDidClose_(void *a1, const char *a2, ...)
{
  return [a1 socketDidClose:];
}

id objc_msgSend_socketDidReceiveData_(void *a1, const char *a2, ...)
{
  return [a1 socketDidReceiveData:];
}

id objc_msgSend_sockets(void *a1, const char *a2, ...)
{
  return _[a1 sockets];
}

id objc_msgSend_sortUsingComparator_(void *a1, const char *a2, ...)
{
  return [a1 sortUsingComparator:];
}

id objc_msgSend_sourceHAPInstanceID(void *a1, const char *a2, ...)
{
  return _[a1 sourceHAPInstanceID];
}

id objc_msgSend_sourceValueRange(void *a1, const char *a2, ...)
{
  return _[a1 sourceValueRange];
}

id objc_msgSend_ssid(void *a1, const char *a2, ...)
{
  return _[a1 ssid];
}

id objc_msgSend_stagedFirmwareVersion(void *a1, const char *a2, ...)
{
  return _[a1 stagedFirmwareVersion];
}

id objc_msgSend_stagingNotReadyReasons(void *a1, const char *a2, ...)
{
  return _[a1 stagingNotReadyReasons];
}

id objc_msgSend_standardIntervalString(void *a1, const char *a2, ...)
{
  return _[a1 standardIntervalString];
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startBehavior(void *a1, const char *a2, ...)
{
  return _[a1 startBehavior];
}

id objc_msgSend_startConnectionTimer(void *a1, const char *a2, ...)
{
  return _[a1 startConnectionTimer];
}

id objc_msgSend_startDate(void *a1, const char *a2, ...)
{
  return _[a1 startDate];
}

id objc_msgSend_startDelayDuration(void *a1, const char *a2, ...)
{
  return _[a1 startDelayDuration];
}

id objc_msgSend_startHelloMessageResponseTimer(void *a1, const char *a2, ...)
{
  return _[a1 startHelloMessageResponseTimer];
}

id objc_msgSend_startSetup(void *a1, const char *a2, ...)
{
  return _[a1 startSetup];
}

id objc_msgSend_startTime(void *a1, const char *a2, ...)
{
  return _[a1 startTime];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_state2String_(void *a1, const char *a2, ...)
{
  return [a1 state2String:];
}

id objc_msgSend_stateChanged(void *a1, const char *a2, ...)
{
  return _[a1 stateChanged];
}

id objc_msgSend_stateNumber(void *a1, const char *a2, ...)
{
  return _[a1 stateNumber];
}

id objc_msgSend_status(void *a1, const char *a2, ...)
{
  return _[a1 status];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _[a1 statusCode];
}

id objc_msgSend_statusFlags(void *a1, const char *a2, ...)
{
  return _[a1 statusFlags];
}

id objc_msgSend_stepValue(void *a1, const char *a2, ...)
{
  return _[a1 stepValue];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stopDiscoveringAccessoryServers(void *a1, const char *a2, ...)
{
  return _[a1 stopDiscoveringAccessoryServers];
}

id objc_msgSend_stopWithError_(void *a1, const char *a2, ...)
{
  return [a1 stopWithError:];
}

id objc_msgSend_streamProtocol(void *a1, const char *a2, ...)
{
  return _[a1 streamProtocol];
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingFormat:];
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingString:];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return [a1 stringByReplacingOccurrencesOfString:withString:];
}

id objc_msgSend_stringValue(void *a1, const char *a2, ...)
{
  return _[a1 stringValue];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringWithFormat:];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 stringWithUTF8String:];
}

id objc_msgSend_stringWithValidatedFormat_validFormatSpecifiers_error_(void *a1, const char *a2, ...)
{
  return [a1 stringWithValidatedFormat:x0 validFormatSpecifiers:x1 error:x2];
}

id objc_msgSend_strongToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToStrongObjectsMapTable];
}

id objc_msgSend_strongToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToWeakObjectsMapTable];
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "subdataWithRange:");
}

id objc_msgSend_submitLogEvent_(void *a1, const char *a2, ...)
{
  return [a1 submitLogEvent:];
}

id objc_msgSend_submitPairVerifyMetricWithError_(void *a1, const char *a2, ...)
{
  return [a1 submitPairVerifyMetricWithError:];
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return [a1 substringToIndex:];
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return [a1 substringWithRange:];
}

id objc_msgSend_supportsAdditionalAuthorizationData_forService_(void *a1, const char *a2, ...)
{
  return [a1 supportsAdditionalAuthorizationData:forService:];
}

id objc_msgSend_supportsDataStreamOverHAP(void *a1, const char *a2, ...)
{
  return _[a1 supportsDataStreamOverHAP];
}

id objc_msgSend_supportsEventNotificationContext(void *a1, const char *a2, ...)
{
  return _[a1 supportsEventNotificationContext];
}

id objc_msgSend_supportsTimedWrite(void *a1, const char *a2, ...)
{
  return _[a1 supportsTimedWrite];
}

id objc_msgSend_suspend(void *a1, const char *a2, ...)
{
  return _[a1 suspend];
}

id objc_msgSend_svcDescription(void *a1, const char *a2, ...)
{
  return _[a1 svcDescription];
}

id objc_msgSend_systemPowerChanged_notificationID_(void *a1, const char *a2, ...)
{
  return [a1 systemPowerChanged:notificationID:];
}

id objc_msgSend_systemPowerMgr(void *a1, const char *a2, ...)
{
  return _[a1 systemPowerMgr];
}

id objc_msgSend_systemPowerPort(void *a1, const char *a2, ...)
{
  return _[a1 systemPowerPort];
}

id objc_msgSend_targetCompletionDuration(void *a1, const char *a2, ...)
{
  return _[a1 targetCompletionDuration];
}

id objc_msgSend_targetValue(void *a1, const char *a2, ...)
{
  return _[a1 targetValue];
}

id objc_msgSend_tcpListeningPort(void *a1, const char *a2, ...)
{
  return _[a1 tcpListeningPort];
}

id objc_msgSend_tearDownSessionOnAuthCompletion(void *a1, const char *a2, ...)
{
  return _[a1 tearDownSessionOnAuthCompletion];
}

id objc_msgSend_timeElapsedSinceStart(void *a1, const char *a2, ...)
{
  return _[a1 timeElapsedSinceStart];
}

id objc_msgSend_timeIntervalSinceDate_(void *a1, const char *a2, ...)
{
  return [a1 timeIntervalSinceDate:x0];
}

id objc_msgSend_timedWrite(void *a1, const char *a2, ...)
{
  return _[a1 timedWrite];
}

id objc_msgSend_timeout(void *a1, const char *a2, ...)
{
  return _[a1 timeout];
}

id objc_msgSend_timeoutInterval(void *a1, const char *a2, ...)
{
  return _[a1 timeoutInterval];
}

id objc_msgSend_tlvDatablob(void *a1, const char *a2, ...)
{
  return _[a1 tlvDatablob];
}

id objc_msgSend_tlvid(void *a1, const char *a2, ...)
{
  return _[a1 tlvid];
}

id objc_msgSend_token1(void *a1, const char *a2, ...)
{
  return _[a1 token1];
}

id objc_msgSend_topic(void *a1, const char *a2, ...)
{
  return _[a1 topic];
}

id objc_msgSend_totalIdentities(void *a1, const char *a2, ...)
{
  return _[a1 totalIdentities];
}

id objc_msgSend_trafficClass(void *a1, const char *a2, ...)
{
  return _[a1 trafficClass];
}

id objc_msgSend_transactionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 transactionIdentifier];
}

id objc_msgSend_transferManagementService(void *a1, const char *a2, ...)
{
  return _[a1 transferManagementService];
}

id objc_msgSend_transformedValue_format_error_(void *a1, const char *a2, ...)
{
  return [a1 transformedValue:x0 format:x1 error:x2];
}

id objc_msgSend_transitionChecksum(void *a1, const char *a2, ...)
{
  return _[a1 transitionChecksum];
}

id objc_msgSend_transitionFetch(void *a1, const char *a2, ...)
{
  return _[a1 transitionFetch];
}

id objc_msgSend_transitionPoints(void *a1, const char *a2, ...)
{
  return _[a1 transitionPoints];
}

id objc_msgSend_transitionStart(void *a1, const char *a2, ...)
{
  return _[a1 transitionStart];
}

id objc_msgSend_transitionState(void *a1, const char *a2, ...)
{
  return _[a1 transitionState];
}

id objc_msgSend_transitionTypes(void *a1, const char *a2, ...)
{
  return _[a1 transitionTypes];
}

id objc_msgSend_transitions(void *a1, const char *a2, ...)
{
  return _[a1 transitions];
}

id objc_msgSend_transport(void *a1, const char *a2, ...)
{
  return _[a1 transport];
}

id objc_msgSend_transport_didFailWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "transport:didFailWithError:");
}

id objc_msgSend_transport_didReceiveRawFrame_(void *a1, const char *a2, ...)
{
  return [a1 transport:didReceiveRawFrame:];
}

id objc_msgSend_transportCharacteristic(void *a1, const char *a2, ...)
{
  return _[a1 transportCharacteristic];
}

id objc_msgSend_transportDidClose_(void *a1, const char *a2, ...)
{
  return [a1 transportDidClose:];
}

id objc_msgSend_transportDidOpen_(void *a1, const char *a2, ...)
{
  return [a1 transportDidOpen:];
}

id objc_msgSend_transportType(void *a1, const char *a2, ...)
{
  return _[a1 transportType];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_typeToString_(void *a1, const char *a2, ...)
{
  return [a1 typeToString:];
}

id objc_msgSend_underlyingErrors(void *a1, const char *a2, ...)
{
  return _[a1 underlyingErrors];
}

id objc_msgSend_uniqueBTIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueBTIdentifier];
}

id objc_msgSend_uniqueIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIdentifier];
}

id objc_msgSend_unitDescription(void *a1, const char *a2, ...)
{
  return _[a1 unitDescription];
}

id objc_msgSend_units(void *a1, const char *a2, ...)
{
  return _[a1 units];
}

id objc_msgSend_unpackUnencryptedOPACKFrame_receivedHeader_receivedPayload_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "unpackUnencryptedOPACKFrame:receivedHeader:receivedPayload:error:");
}

id objc_msgSend_unregisterSocket_(void *a1, const char *a2, ...)
{
  return [a1 unregisterSocket:];
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedShortValue];
}

id objc_msgSend_updateAccessoryName_(void *a1, const char *a2, ...)
{
  return [a1 updateAccessoryName:];
}

id objc_msgSend_updateAndValidateCharacteristics(void *a1, const char *a2, ...)
{
  return _[a1 updateAndValidateCharacteristics];
}

id objc_msgSend_updateBroadcastKeyForIdentifer_key_keyUpdatedStateNumber_keyUpdatedTime_(void *a1, const char *a2, ...)
{
  return [a1 updateBroadcastKeyForIdentifer:x0 key:x1 keyUpdatedStateNumber:x2 keyUpdatedTime:x3];
}

id objc_msgSend_updateCachedStateForIdentifier_stateNumber_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updateCachedStateForIdentifier:stateNumber:")];
}

id objc_msgSend_updateDuration(void *a1, const char *a2, ...)
{
  return _[a1 updateDuration];
}

id objc_msgSend_updateForAccessoryInformationService(void *a1, const char *a2, ...)
{
  return _[a1 updateForAccessoryInformationService];
}

id objc_msgSend_updateNotReadyReasons(void *a1, const char *a2, ...)
{
  return _[a1 updateNotReadyReasons];
}

id objc_msgSend_updatePeripheral_(void *a1, const char *a2, ...)
{
  return [a1 updatePeripheral:];
}

id objc_msgSend_updatePeripheralIdentifier_forAccessoryIdentifier_protocolVersion_previousVersion_resumeSessionID_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updatePeripheralIdentifier:forAccessoryIdentifier:protocolVersion:previousVersion:resumeSessionID:error:");
}

id objc_msgSend_updatePeripheralIdentifier_isPairing_(void *a1, const char *a2, ...)
{
  return [a1 updatePeripheralIdentifier:isPairing:];
}

id objc_msgSend_updateRawPlist(void *a1, const char *a2, ...)
{
  return _[a1 updateRawPlist];
}

id objc_msgSend_updateResumeSessionID_(void *a1, const char *a2, ...)
{
  return [a1 updateResumeSessionID:];
}

id objc_msgSend_updateWithCharacteristic_(void *a1, const char *a2, ...)
{
  return [a1 updateWithCharacteristic:];
}

id objc_msgSend_updateWithPeripheralInfo_(void *a1, const char *a2, ...)
{
  return [a1 updateWithPeripheralInfo:];
}

id objc_msgSend_updateWithService_(void *a1, const char *a2, ...)
{
  return [a1 updateWithService:];
}

id objc_msgSend_upperBound(void *a1, const char *a2, ...)
{
  return _[a1 upperBound];
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_useHH2(void *a1, const char *a2, ...)
{
  return _[a1 useHH2];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_uuidForBTLEPeripheral_(void *a1, const char *a2, ...)
{
  return [a1 uuidForBTLEPeripheral:];
}

id objc_msgSend_uuidStr(void *a1, const char *a2, ...)
{
  return _[a1 uuidStr];
}

id objc_msgSend_validValues(void *a1, const char *a2, ...)
{
  return _[a1 validValues];
}

id objc_msgSend_validateMandatoryCharacteristics_forService_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "validateMandatoryCharacteristics:forService:");
}

id objc_msgSend_validateValue_outValue_(void *a1, const char *a2, ...)
{
  return [a1 validateValue:outValue:];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueMetadata(void *a1, const char *a2, ...)
{
  return _[a1 valueMetadata];
}

id objc_msgSend_valueTransition(void *a1, const char *a2, ...)
{
  return _[a1 valueTransition];
}

id objc_msgSend_valueUpdateTimeInterval(void *a1, const char *a2, ...)
{
  return _[a1 valueUpdateTimeInterval];
}

id objc_msgSend_valueUpdatedTime(void *a1, const char *a2, ...)
{
  return _[a1 valueUpdatedTime];
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _[a1 version];
}

id objc_msgSend_waitingForAuth(void *a1, const char *a2, ...)
{
  return _[a1 waitingForAuth];
}

id objc_msgSend_wakeAddress(void *a1, const char *a2, ...)
{
  return _[a1 wakeAddress];
}

id objc_msgSend_wakePattern(void *a1, const char *a2, ...)
{
  return _[a1 wakePattern];
}

id objc_msgSend_wakePort(void *a1, const char *a2, ...)
{
  return _[a1 wakePort];
}

id objc_msgSend_wakeTuples(void *a1, const char *a2, ...)
{
  return _[a1 wakeTuples];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_weakToStrongObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 weakToStrongObjectsMapTable];
}

id objc_msgSend_weakToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 weakToWeakObjectsMapTable];
}

id objc_msgSend_workQueue(void *a1, const char *a2, ...)
{
  return _[a1 workQueue];
}

id objc_msgSend_writeCharacteristicValues_timeout_completionQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 writeCharacteristicValues:x0 timeout:x1 completionQueue:x2 completionHandler:x3];
}

id objc_msgSend_writeRequestForCharacteristic_value_authorizationData_contextData_options_error_(void *a1, const char *a2, ...)
{
  return [a1 writeRequestForCharacteristic:x0 value:x1 authorizationData:x2 contextData:x3 options:x4 error:x5];
}

id objc_msgSend_writeRequestTupleForCharacteristic_value_authorizationData_timedWrite_responseValue_type_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "writeRequestTupleForCharacteristic:value:authorizationData:timedWrite:responseValue:type:");
}

id objc_msgSend_writeRequestTupleForCharacteristic_value_authorizationData_timedWrite_responseValue_type_contextData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "writeRequestTupleForCharacteristic:value:authorizationData:timedWrite:responseValue:type:contextData:");
}

id objc_msgSend_writeType(void *a1, const char *a2, ...)
{
  return _[a1 writeType];
}

id objc_msgSend_writeValue_forCharacteristic_type_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "writeValue:forCharacteristic:type:");
}