void sub_100007D2C(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  char v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  unsigned char v24[128];
  uint64_t vars8;

  v2 = [*(id *)(a1 + 32) wakeTuples];
  v3 = [v2 count];

  if (v3)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v4 = [*(id *)(a1 + 32) wakeTuples];
    v5 = [v4 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v5)
    {
      v6 = v5;
      v7 = 0;
      v8 = 0;
      v9 = *(void *)v21;
      do
      {
        v10 = 0;
        v11 = v7;
        do
        {
          if (*(void *)v21 != v9) {
            objc_enumerationMutation(v4);
          }
          v12 = *(void *)(*((void *)&v20 + 1) + 8 * (void)v10);
          v13 = *(void **)(a1 + 32);
          v14 = [v13 dnsName];
          v7 = [v13 _wakeWithTuple:v12 dnsName:v14];

          v8 |= v7 == 0;
          v10 = (char *)v10 + 1;
          v11 = v7;
        }
        while (v6 != v10);
        v6 = [v4 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v6);

      if ((v8 & 1) == 0) {
        goto LABEL_15;
      }
    }
    else
    {
      v7 = v4;
    }

    v7 = 0;
LABEL_15:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

    return;
  }
  v15 = [*(id *)(a1 + 32) dnsName];

  v16 = *(void *)(a1 + 40);
  if (v15)
  {
    v17 = *(void **)(a1 + 32);
    v19 = [v17 dnsName];
    v18 = [v17 _wakeWithTuple:0 dnsName:];
    (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v18);
  }
  else
  {
    v19 = +[NSError hapErrorWithcode:9];
    (*(void (**)(uint64_t))(v16 + 16))(v16);
  }
}

void sub_1000082F8(id a1)
{
  uint64_t v1 = sub_100083EA4(@"Accessory.LPM", @"com.apple.dockaccessoryd");
  v2 = (void *)qword_1002AD628;
  qword_1002AD628 = v1;
}

void sub_1000097D4(uint64_t a1)
{
  id v3 = +[NSError errorWithDomain:@"HAPErrorDomain" code:-6752 userInfo:0];
  v2 = [*(id *)(a1 + 32) delegate];
  [v2 fragmentationStream:*(void *)(a1 + 32) didCloseWithError:v3];
}

void sub_10000990C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) currentPacketTransactionIdentifier];
  if (v2)
  {
    id v3 = (void *)v2;
    v4 = [*(id *)(a1 + 32) currentPacketTransactionIdentifier];
    unsigned int v5 = [v4 unsignedCharValue];
    unsigned int v6 = [*(id *)(a1 + 40) transactionIdentifier];

    if (v6 != v5)
    {
      v7 = *(void **)(a1 + 32);
      v8 = [v7 currentPacketTransactionIdentifier];
      [v7 __removeAllPendingPacketsWithTransactionIdentifier:[v8 unsignedCharValue]];

      v9 = +[NSError errorWithDomain:@"HAPErrorDomain" code:-6723 userInfo:0];
      v10 = [*(id *)(a1 + 32) delegate];
      v11 = *(void **)(a1 + 32);
      v12 = [v11 currentPacketTransactionIdentifier];
      [v10 fragmentationStream:v11 didReceiveData:0 transactionIdentifier:[v12 unsignedCharValue] error:v9];
    }
  }
  [*(id *)(a1 + 32) __addFragmentationPacket:*(void *)(a1 + 40)];
  unsigned int v13 = [[*(id *)(a1 + 32) __isTransactionCompleteWithTransactionIdentifier:[*(id *)(a1 + 40) transactionIdentifier]];
  v14 = *(void **)(a1 + 32);
  if (v13)
  {
    v15 = [v14 __transactionDataWithTransactionIdentifier:[*(id *)(a1 + 40) transactionIdentifier]];
    if (v15)
    {
      id v17 = 0;
    }
    else
    {
      id v17 = +[NSError errorWithDomain:@"HAPErrorDomain" code:-6732 userInfo:0];
    }
    v16 = [*(id *)(a1 + 32) delegate];
    [v16 fragmentationStream:*(void *)(a1 + 32) didReceiveData:v15 transactionIdentifier:objc_msgSend(*(id *)(a1 + 40), "transactionIdentifier") error:v17];

    [*(id *)(a1 + 32) setCurrentPacketTransactionIdentifier:0];
    [*(id *)(a1 + 32) __removeAllPendingPacketsWithTransactionIdentifier:[*(id *)(a1 + 40) transactionIdentifier]];
  }
  else
  {
    +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [*(id *)(a1 + 40) transactionIdentifier]);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    [v14 setCurrentPacketTransactionIdentifier:];
  }
}

void sub_10000A184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000A19C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  unsigned int v7 = [*(id *)(a1 + 32) transactionIdentifier];
  if (v7 == [v9 transactionIdentifier]
    && (unsigned int v8 = [*(id *)(a1 + 32) offset], v8 < objc_msgSend(v9, "offset")))
  {
    *a4 = 1;
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a3 + 1;
  }
}

__CFString *HAPDiagnosticsSnapshotFormatAsString(uint64_t a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v2 = @"HAPDiagnosticsSnapshotFormatText";
    }
    else
    {
      uint64_t v2 = +[NSString stringWithFormat:@"Unknown HAPDiagnosticsSnapshotFormat %ld", a1];
    }
  }
  else
  {
    uint64_t v2 = @"HAPDiagnosticsSnapshotFormatZip";
  }
  return v2;
}

uint64_t sub_100013134(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  unsigned int v6 = +[HAPMetadata getSharedInstance];
  unsigned int v7 = v6;
  if (!a1)
  {
    id v9 = sub_100083F74();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_100083FD0(0);
      int v16 = 138543362;
      id v17 = v11;
      unsigned int v13 = "%{public}@### Characteristic has nil properties";
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v16, 0xCu);
LABEL_13:
    }
LABEL_14:
    uint64_t v14 = 0;
    goto LABEL_20;
  }
  if ((a1 & 0xF) == 0)
  {
    id v9 = sub_100083F74();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = sub_100083FD0(0);
      int v16 = 138543362;
      id v17 = v11;
      unsigned int v13 = "%{public}@### Characteristic is missing valid properties";
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  unsigned int v8 = [v6 getDefaultCharacteristicProperties:v5];
  id v9 = v8;
  if (!v8) {
    goto LABEL_19;
  }
  unsigned __int8 v10 = [v8 unsignedIntegerValue];
  if ((a1 & 2) == 0 && (v10 & 2) != 0)
  {
    v11 = sub_100083F74();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = sub_100083FD0(0);
      int v16 = 138543618;
      id v17 = v12;
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@### HomeKit Characteristic '%@' does not support secureRead.", (uint8_t *)&v16, 0x16u);
    }
    goto LABEL_13;
  }
  if ((a1 & 0x80) != 0 || (v10 & 0x80) == 0 || (uint64_t v14 = 0, (a1 & 4) != 0) && a2) {
LABEL_19:
  }
    uint64_t v14 = 1;
LABEL_20:

  return v14;
}

id sub_100014018(unint64_t a1)
{
  uint64_t v2 = +[NSMutableData dataWithCapacity:a1];
  if (a1)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v5 = 4;
    do
    {
      if (a1 >= v5) {
        unint64_t v6 = v5;
      }
      else {
        unint64_t v6 = a1;
      }
      uint64_t v7 = v6 + v3;
      uint32_t v9 = 0;
      uint32_t v9 = arc4random();
      v4 += 4;
      [v2 appendBytes:&v9 length:v7];
      v5 += 4;
      v3 -= 4;
    }
    while (v4 < a1);
  }

  return v2;
}

uint64_t sub_1000140C8()
{
  unsigned int bytes = 0;
  if (SecRandomCopyBytes(kSecRandomDefault, 4uLL, &bytes)) {
    return arc4random();
  }
  else {
    return bytes;
  }
}

void sub_10001419C(id a1)
{
  id v3 = [@"hds" stringByReplacingOccurrencesOfString:@"_" withString:@"."];
  uint64_t v1 = HMFCreateOSLogHandle();
  uint64_t v2 = (void *)qword_1002AD640;
  qword_1002AD640 = v1;
}

void sub_1000157B8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
    v3();
  }
  else
  {
    unint64_t v4 = [[DataStreamPendingRequest alloc] initWithIdentifier:*(void *)(a1 + 32) protocol:*(void *)(a1 + 40) topic:*(void *)(a1 + 48) payload:*(void *)(a1 + 56) callback:*(void *)(a1 + 72)];
    unint64_t v5 = [*(id *)(a1 + 64) pendingRequests];
    [v5 addObject:v4];

    id v6 = *(id *)(a1 + 64);
    uint64_t v7 = sub_100083F74();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v8 = sub_100083FD0(v6);
      int v9 = 138543618;
      unsigned __int8 v10 = v8;
      __int16 v11 = 2112;
      v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%{public}@DataStream pending the request: %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

id sub_100017B60(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  unint64_t v5 = (objc_class *)objc_opt_class();
  id v6 = NSStringFromClass(v5);
  if (v3) {
    CFStringRef v7 = @".";
  }
  else {
    CFStringRef v7 = &stru_10027B0E8;
  }
  if (v3) {
    CFStringRef v8 = v3;
  }
  else {
    CFStringRef v8 = &stru_10027B0E8;
  }
  id v9 = [v4 hash];

  unsigned __int8 v10 = +[NSString stringWithFormat:@"com.apple.CoreHAP.%@%@%@.%tu", v6, v7, v8, v9];

  id v11 = v10;
  id v12 = [v11 UTF8String];

  return v12;
}

BOOL sub_100017C38(char a1)
{
  return (a1 & 1) == 0;
}

id sub_100017C44(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  id v7 = 0;
  if (a1 && a2 && v5)
  {
    id v8 = a1;
    id v9 = [a2 uppercaseString];
    unsigned __int8 v10 = [v6 stringByAppendingString:v9];
    [v10 dataUsingEncoding:4];
    id v11 = objc_claimAutoreleasedReturnValue();
    if (CC_SHA512([v11 bytes], (CC_LONG)objc_msgSend(v11, "length"), (unsigned __int8 *)&v14))
    {
      id v12 = +[NSData dataWithBytes:&v14 length:4];
    }
    else
    {
      id v12 = 0;
    }

    id v7 = [v12 isEqual:v8];
  }

  return v7;
}

_UNKNOWN **sub_100017D84()
{
  return &off_100281508;
}

BOOL sub_100017D90()
{
  v0 = +[HMFProductInfo productInfo];
  BOOL v1 = [v0 productVariant] == (id)3;

  return v1;
}

void sub_10001E920(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = sub_100083FD0(v2);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    int v8 = 138543874;
    id v9 = v4;
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Traffic class changed from %lu -> %lu, notifying protocol", (uint8_t *)&v8, 0x20u);
  }
  id v7 = [*(id *)(a1 + 32) streamProtocol];
  [v7 evaluateOptionsForSocket:*(void *)(a1 + 32)];
}

void sub_10001EC4C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) streamProtocol];
  [v2 sendData:*(void *)(a1 + 40) socket:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
}

void sub_10001ED00(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10001EE00(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) streamProtocol];
  [v2 unregisterSocket:*(void *)(a1 + 32)];

  id v3 = [*(id *)(a1 + 32) delegate];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = v3;
  if (*(void *)(a1 + 40)) {
    [v3 socket:v4 didFailWithError:];
  }
  else {
    [v3 socketDidClose:v4];
  }
}

void sub_10001EF40(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10001EF54(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 socketDidReceiveData:*(void *)(a1 + 32)];
}

id sub_10001FE3C(void *a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a1;
  if ((unint64_t)[v7 length] > 2)
  {
    [v7 getBytes:a2 length:1];
    uint64_t v11 = [v7 subdataWithRange:1, (char *)[v7 length] - 1];

    if ((*a2 & 2) != 0)
    {
      [v11 getBytes:a3 length:1];
      v15 = [v11 subdataWithRange:1, [v11 length] - 1];

      [v15 getBytes:a4 length:1];
      int v16 = [v15 subdataWithRange:1, [v15 length] - 1];

      id v7 = v16;
      __int16 v10 = v7;
    }
    else
    {
      __int16 v12 = sub_100083F74();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = sub_100083FD0(0);
        int v14 = *a2;
        int v18 = 138543618;
        id v19 = v13;
        __int16 v20 = 1024;
        LODWORD(v21) = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Unexpected PDU Type in controlfield 0x%02x - expecting a response", (uint8_t *)&v18, 0x12u);
      }
      __int16 v10 = 0;
      id v7 = v11;
    }
  }
  else
  {
    int v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = sub_100083FD0(0);
      int v18 = 138543618;
      id v19 = v9;
      __int16 v20 = 2048;
      id v21 = [v7 length];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Insufficient length %tu - dropping", (uint8_t *)&v18, 0x16u);
    }
    __int16 v10 = 0;
  }

  return v10;
}

void sub_100021370(id a1)
{
  uint64_t v1 = sub_100083EA4(@"HAPHAPProtocolMessages", @"com.apple.dockaccessoryd");
  id v2 = (void *)qword_1002AD650;
  qword_1002AD650 = v1;
}

id sub_100021998(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetSession];
}

id sub_100021A5C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleAuthExchangeData:*(void *)(a1 + 40) withHeader:*(unsigned __int8 *)(a1 + 48)];
}

void sub_100021C84(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 40);
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = [v3 delegate];
    char v5 = objc_opt_respondsToSelector();

    uint64_t v6 = *(void **)(a1 + 32);
    if (v5)
    {
      id v13 = [v6 delegate];
      id v7 = *(void **)(a1 + 32);
      int v8 = [v7 provisionUUID];
      id v9 = [*(id *)(a1 + 32) token1];
      [v13 authSession:v7 authenticateUUID:v8 token:v9];
    }
    else
    {
      id v10 = v6;
      uint64_t v11 = sub_100083F74();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        __int16 v12 = sub_100083FD0(v10);
        *(_DWORD *)buf = 138543362;
        v15 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@Delegate does not implement authenticateUUID:token1:token2:", buf, 0xCu);
      }
      [*(id *)(a1 + 32) _reportAuthFailure];
    }
  }
  else
  {
    [v3 _reportAuthFailure];
  }
}

id sub_100022428(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendTokenUpdateRequest:*(void *)(a1 + 40)];
}

void sub_100022828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100022858(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100022868(uint64_t a1)
{
}

void sub_100022870(void *a1)
{
  *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
}

void sub_100022B70(id a1)
{
  uint64_t v1 = sub_100083EA4(@"HAPAuthSession", @"com.apple.dockaccessoryd");
  int v2 = (void *)qword_1002AD660;
  qword_1002AD660 = v1;
}

CFStringRef sub_100022E44(unint64_t a1)
{
  if (a1 > 6) {
    return @"HAPAuthMethodUnknown";
  }
  else {
    return off_1002731E0[a1];
  }
}

uint64_t sub_100022E68(int a1)
{
  uint64_t v1 = 2;
  uint64_t v2 = 4;
  uint64_t v3 = 5;
  if ((a1 & 0x10) != 0) {
    uint64_t v3 = 6;
  }
  if ((a1 & 8) == 0) {
    uint64_t v2 = v3;
  }
  if ((a1 & 2) == 0) {
    uint64_t v1 = v2;
  }
  uint64_t v4 = 1;
  if ((a1 & 5) == 0) {
    uint64_t v4 = v1;
  }
  if (a1) {
    return v4;
  }
  else {
    return 0;
  }
}

unint64_t sub_10002495C(unsigned __int8 *a1, uint64_t a2, int *a3)
{
  unint64_t result = 0;
  int v5 = -6743;
  switch(a2)
  {
    case 1:
      int v5 = 0;
      unint64_t result = (char)*a1;
      if (a3) {
        goto LABEL_8;
      }
      return result;
    case 2:
      int v5 = 0;
      unint64_t result = (__int16)(a1[1] << 8) | (unint64_t)*a1;
      if (a3) {
        goto LABEL_8;
      }
      return result;
    case 4:
      int v5 = 0;
      unint64_t result = *(int *)a1;
      goto LABEL_7;
    case 8:
      int v5 = 0;
      unint64_t result = *(void *)a1;
      if (!a3) {
        return result;
      }
      goto LABEL_8;
    default:
LABEL_7:
      if (a3) {
LABEL_8:
      }
        *a3 = v5;
      return result;
  }
}

id sub_100024A58(uint64_t a1)
{
  if (a1 == (char)a1)
  {
    LOBYTE(v4) = a1;
    uint64_t v1 = 1;
  }
  else
  {
    uint64_t v4 = a1;
    uint64_t v1 = 8;
  }
  uint64_t v2 = +[NSData dataWithBytes:&v4 length:v1];

  return v2;
}

uint64_t sub_100024C8C(unsigned __int8 *a1, uint64_t a2, int *a3)
{
  uint64_t result = 0;
  int v5 = -6743;
  switch(a2)
  {
    case 1:
      int v5 = 0;
      uint64_t result = *a1;
      if (a3) {
        goto LABEL_8;
      }
      return result;
    case 2:
      int v5 = 0;
      uint64_t result = *(unsigned __int16 *)a1;
      if (a3) {
        goto LABEL_8;
      }
      return result;
    case 4:
      int v5 = 0;
      uint64_t result = *(unsigned int *)a1;
      goto LABEL_7;
    case 8:
      int v5 = 0;
      uint64_t result = *(void *)a1;
      if (!a3) {
        return result;
      }
      goto LABEL_8;
    default:
LABEL_7:
      if (a3) {
LABEL_8:
      }
        *a3 = v5;
      return result;
  }
}

id sub_100024D78(unint64_t a1)
{
  if (a1 > 0xFF)
  {
    if (a1 >> 16)
    {
      int v4 = a1;
      if (HIDWORD(a1))
      {
        char v5 = BYTE4(a1);
        char v6 = BYTE5(a1);
        char v7 = BYTE6(a1);
        char v8 = HIBYTE(a1);
        uint64_t v1 = 8;
      }
      else
      {
        uint64_t v1 = 4;
      }
    }
    else
    {
      LOWORD(v4) = a1;
      uint64_t v1 = 2;
    }
  }
  else
  {
    LOBYTE(v4) = a1;
    uint64_t v1 = 1;
  }
  uint64_t v2 = +[NSData dataWithBytes:&v4 length:v1];

  return v2;
}

id sub_100025088(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t *a4, void *a5)
{
  if (a2 >= a3) {
    goto LABEL_4;
  }
  uint64_t Next = TLV8GetNext();
  if (!Next)
  {
    uint64_t v13 = +[NSError hmfErrorWithCode:3];
    if (v13)
    {
      id v10 = v13;
      if (a5)
      {
        id v12 = v13;
        id v10 = v12;
        goto LABEL_13;
      }
      goto LABEL_15;
    }
LABEL_4:
    *a4 = a2;
    id v9 = 0;
    id v10 = 0;
    goto LABEL_5;
  }
  if (a5)
  {
    sub_100044EEC(Next);
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    id v10 = 0;
LABEL_13:
    id v9 = 0;
    *a5 = v12;
    goto LABEL_5;
  }
  id v10 = 0;
LABEL_15:
  id v9 = 0;
LABEL_5:

  return v9;
}

uint64_t sub_10002546C()
{
  uint64_t result = TLV8BufferAppendUInt64();
  if (!result)
  {
    return TLV8BufferAppendUInt64();
  }
  return result;
}

uint64_t sub_10002551C(void *a1)
{
  id v1 = a1;
  [v1 bytes];
  [v1 length];

  uint64_t result = TLV8Get();
  if (!result) {
    return 4294960553;
  }
  return result;
}

CFStringRef sub_100026C60(int a1)
{
  CFStringRef v1 = @"unknown";
  if (a1 == 1) {
    CFStringRef v1 = @"response";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"request";
  }
}

__CFString *HAPDataStreamTransportCommandAsString(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = +[NSString stringWithFormat:@"Unknown HAPDataStreamTransportCommand %ld", a1];
  }
  else
  {
    uint64_t v2 = @"HAPDataStreamTransportCommandStartSession";
  }
  return v2;
}

__CFString *HAPDataStreamTransportCommandStatusAsString(unint64_t a1)
{
  if (a1 >= 3)
  {
    uint64_t v1 = +[NSString stringWithFormat:@"Unknown HAPDataStreamTransportCommandStatus %ld", a1];
  }
  else
  {
    uint64_t v1 = off_100273288[a1];
  }

  return v1;
}

__CFString *HAPDataStreamTransportProtocolAsString(uint64_t a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v2 = @"HAPDataStreamTransportProtocolHAP";
    }
    else
    {
      uint64_t v2 = +[NSString stringWithFormat:@"Unknown HAPDataStreamTransportProtocol %ld", a1];
    }
  }
  else
  {
    uint64_t v2 = @"HAPDataStreamTransportProtocolTCP";
  }
  return v2;
}

id sub_100029188(__int16 a1)
{
  uint64_t v2 = +[NSMutableString string];
  uint64_t v3 = v2;
  if ((a1 & 0x40) != 0)
  {
    uint64_t v6 = [v2 stringByAppendingString:@": Hidden"];

    uint64_t v3 = (void *)v6;
    if ((a1 & 1) == 0)
    {
LABEL_3:
      if ((a1 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((a1 & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = [v3 stringByAppendingString:@": Notify"];

  uint64_t v3 = (void *)v7;
  if ((a1 & 8) == 0)
  {
LABEL_4:
    if ((a1 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v8 = [v3 stringByAppendingString:@": Broadcast"];

  uint64_t v3 = (void *)v8;
  if ((a1 & 2) == 0)
  {
LABEL_5:
    if ((a1 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t v9 = [v3 stringByAppendingString:@": Read"];

  uint64_t v3 = (void *)v9;
  if ((a1 & 4) == 0)
  {
LABEL_6:
    if ((a1 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v10 = [v3 stringByAppendingString:@": Write"];

  uint64_t v3 = (void *)v10;
  if ((a1 & 0x20) == 0)
  {
LABEL_7:
    if ((a1 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v11 = [v3 stringByAppendingString:@": Timed Write"];

  uint64_t v3 = (void *)v11;
  if ((a1 & 0x10) == 0)
  {
LABEL_8:
    if ((a1 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v12 = [v3 stringByAppendingString:@": AAD"];

  uint64_t v3 = (void *)v12;
  if ((a1 & 0x100) != 0)
  {
LABEL_9:
    uint64_t v4 = [v3 stringByAppendingString:@": ENC"];

    uint64_t v3 = (void *)v4;
  }
LABEL_10:

  return v3;
}

id sub_100029E0C(char a1)
{
  uint64_t v2 = +[NSMutableString string];
  uint64_t v3 = v2;
  if (a1)
  {
    uint64_t v6 = [v2 stringByAppendingString:@": Primary"];

    uint64_t v3 = (void *)v6;
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = [v3 stringByAppendingString:@": Hidden"];

  uint64_t v3 = (void *)v7;
  if ((a1 & 4) != 0)
  {
LABEL_4:
    uint64_t v4 = [v3 stringByAppendingString:@": Configurable"];

    uint64_t v3 = (void *)v4;
  }
LABEL_5:

  return v3;
}

void sub_10002B484(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1002AD668;
  qword_1002AD668 = (uint64_t)v1;
}

uint64_t sub_10002CF28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_10002D000(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v2 = *(id *)(a1 + 32);
    uint64_t v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = sub_100083FD0(v2);
      int v7 = 138543362;
      uint64_t v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Received EOF from accessory.", (uint8_t *)&v7, 0xCu);
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 9) = 1;
  }
  if (*(void *)(a1 + 40))
  {
    char v5 = [*(id *)(a1 + 32) pendingReads];
    [v5 hmf_enqueueMultiple:*(void *)(a1 + 40)];
  }
  return [*(id *)(a1 + 32) _pumpReadDataIfPossible];
}

id sub_10002D1C4(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = sub_100083FD0(v2);
    uint64_t v5 = *(void *)(a1 + 40);
    int v7 = 138543618;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Received remote close with error: %@", (uint8_t *)&v7, 0x16u);
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 9) = 1;
  [*(id *)(a1 + 32) setPendingError:*(void *)(a1 + 40)];
  return [*(id *)(a1 + 32) _pumpReadDataIfPossible];
}

uint64_t sub_10002D38C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10002D500(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10002E698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002E6C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v6 = [WeakRetained workQueue];
    dispatch_assert_queue_V2(v6);

    [v5 _stopWithError:v7];
  }
}

void sub_10002E868(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v9 = *(id *)(a1 + 32);
        uint64_t v10 = sub_100083F74();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          uint64_t v11 = sub_100083FD0(v9);
          *(_DWORD *)buf = 138543362;
          id v19 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%{public}@Handling characteristics value updated", buf, 0xCu);
        }
        uint64_t v12 = *(void **)(a1 + 32);
        uint64_t v13 = [v8 value];
        [v12 _handleInterruptCharacteristicValue:v13];
      }
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
    }
    while (v5);
  }
}

void sub_10002EA90(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transportDidOpen:*(void *)(a1 + 32)];
}

void sub_10002EB6C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transportDidClose:*(void *)(a1 + 32)];
}

void sub_10002EC74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transport:*(void *)(a1 + 32) didFailWithError:*(void *)(a1 + 40)];
}

void sub_10002ED7C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 transport:*(void *)(a1 + 32) didReceiveRawFrame:*(void *)(a1 + 40)];
}

void sub_10002F770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002F79C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    id v5 = [WeakRetained workQueue];
    dispatch_assert_queue_V2(v5);

    [v4 _handleCompletionWithResponseTuples:v6];
  }
}

uint64_t sub_1000300E8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10003144C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 dataStreamSetupOperation:*(void *)(a1 + 32) didFailWithError:*(void *)(a1 + 40)];
}

void sub_100031578(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 dataStreamSetupOperation:*(void *)(a1 + 32) didSucceedWithTransport:*(void *)(a1 + 40) sessionEncryption:*(void *)(a1 + 48)];
}

void sub_100032614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100032640(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) delegate];
  if ([v4 conformsToProtocol:&OBJC_PROTOCOL___DataStreamHAPSetupOperationDelegate])
  {
    id v2 = [*(id *)(a1 + 32) delegate];

    if (!v2) {
      return;
    }
    [v2 dataStreamInitializationSetupOperation:*(void *)(a1 + 32) didCompleteSupportReadWithStatus:0];
    id v3 = v2;
  }
  else
  {
    id v3 = v4;
  }
}

void sub_1000326E0(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained)
  {
    id v7 = WeakRetained;
    id v5 = [WeakRetained delegate];
    if ([v5 conformsToProtocol:&OBJC_PROTOCOL___DataStreamHAPSetupOperationDelegate])
    {
      id v6 = [v7 delegate];

      id v4 = v7;
      if (!v6) {
        goto LABEL_6;
      }
      [v6 dataStreamInitializationSetupOperation:v7 didCompleteSupportReadWithStatus:a2 != 0];
      id v5 = v6;
    }

    id v4 = v7;
  }
LABEL_6:
}

void sub_100032AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100032AFC(uint64_t a1, void *a2)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained continueStreamSetupWithResponse:v5];
  }
}

uint64_t sub_1000339D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

__CFString *HAPStagingNotReadyReasonsAsString(unint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1) {
    goto LABEL_14;
  }
  uint64_t v3 = 1;
  unint64_t v4 = a1;
  do
  {
    if ((v3 & a1) == 0) {
      goto LABEL_11;
    }
    switch(v3)
    {
      case 1:
        CFStringRef v5 = @"HAPStagingNotReadyReasonOther";
        break;
      case 4:
        CFStringRef v5 = @"HAPStagingNotReadyReasonConnectivity";
        break;
      case 2:
        CFStringRef v5 = @"HAPStagingNotReadyReasonLowBattery";
        break;
      default:
        goto LABEL_11;
    }
    v4 &= ~v3;
    [v2 addObject:v5];
LABEL_11:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    id v6 = +[NSString stringWithFormat:@"Unknown options %lu", v4];
    [v2 addObject:v6];
  }
LABEL_14:
  if ([v2 count])
  {
    id v7 = [v2 componentsJoinedByString:@", "];
  }
  else
  {
    id v7 = @"None";
  }

  return v7;
}

__CFString *HAPUpdateNotReadyReasonsAsString(unint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  if (a1)
  {
    uint64_t v3 = 1;
    unint64_t v4 = a1;
    do
    {
      if ((v3 & a1) != 0)
      {
        uint64_t v5 = v3 - 1;
        if (unint64_t)(v3 - 1) <= 7 && ((0x8Bu >> v5))
        {
          v4 &= ~v3;
          [v2 addObject:*(&off_100273480 + v5)];
        }
      }
      v3 *= 2;
    }
    while (v3 - 1 < a1);
    if (v4)
    {
      id v6 = +[NSString stringWithFormat:@"Unknown options %lu", v4];
      [v2 addObject:v6];
    }
  }
  if ([v2 count])
  {
    id v7 = [v2 componentsJoinedByString:@", "];
  }
  else
  {
    id v7 = @"None";
  }

  return v7;
}

void sub_100035800(id a1)
{
  uint64_t v1 = sub_100083EA4(@"hms.transport", @"com.apple.dockaccessoryd");
  id v2 = (void *)qword_1002AD680;
  qword_1002AD680 = v1;
}

__CFString *sub_1000413A4(unsigned int a1)
{
  if (a1 >= 7)
  {
    uint64_t v1 = +[NSString stringWithFormat:@"<unknown status: %d>", a1];
  }
  else
  {
    uint64_t v1 = off_1002735D0[(__int16)a1];
  }

  return v1;
}

__CFString *HAPOperatingStateAsString(unint64_t a1)
{
  if (a1 >= 3)
  {
    uint64_t v1 = +[NSString stringWithFormat:@"Unknown HAPOperatingState %ld", a1];
  }
  else
  {
    uint64_t v1 = off_100273608[a1];
  }

  return v1;
}

uint64_t sub_100041E2C(uint64_t a1, char **a2, void *a3, void *a4, void *a5)
{
  unsigned int v34 = 0;
  id v8 = a5;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v10 = 0;
    goto LABEL_17;
  }
  id v9 = [v8 _handleLocalPairingIdentityRequestWithStatus:&v34];
  uint64_t v10 = v9;
  if (v34) {
    goto LABEL_15;
  }
  if (a2)
  {
    uint64_t v11 = [v9 identifier];
    id v12 = [v11 lengthOfBytesUsingEncoding:4];

    if (!v12) {
      goto LABEL_18;
    }
    size_t v13 = (size_t)v12 + 1;
    long long v14 = (char *)malloc_type_calloc(v13, 1uLL, 0x100004077774924uLL);
    if (!v14)
    {
      int v33 = -6728;
      goto LABEL_20;
    }
    long long v15 = v14;
    id v16 = [v10 identifier];
    strlcpy(v15, (const char *)[v16 UTF8String], v13);

    *a2 = v15;
  }
  if (!a3) {
    goto LABEL_11;
  }
  long long v17 = [v10 publicKey];

  if (!v17) {
    goto LABEL_17;
  }
  int v18 = [v10 publicKey];
  id v19 = [v18 data];
  id v20 = [v19 length];
  id v21 = (id)HMFPairingKeyLength;

  if (v20 != v21)
  {
LABEL_18:
    int v33 = -6743;
    goto LABEL_20;
  }
  v22 = [v10 publicKey];
  id v23 = [v22 data];
  memcpy(a3, [v23 bytes], (size_t)v20);

LABEL_11:
  if (a4)
  {
    v24 = [v10 privateKey];

    if (v24)
    {
      v25 = [v10 privateKey];
      v26 = [v25 data];
      id v27 = [v26 length];
      id v28 = (id)HMFPairingKeyLength;

      if (v27 == v28)
      {
        v29 = [v10 privateKey];
        id v30 = [v29 data];
        memcpy(a4, [v30 bytes], (size_t)v27);

        goto LABEL_15;
      }
      goto LABEL_18;
    }
LABEL_17:
    int v33 = -6727;
LABEL_20:
    unsigned int v34 = v33;
  }
LABEL_15:
  uint64_t v31 = v34;

  return v31;
}

uint64_t sub_100042098(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  unsigned int v23 = 0;
  id v7 = a4;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v10 = 0;
    id v8 = 0;
    goto LABEL_11;
  }
  id v8 = [objc_alloc((Class)NSString) initWithBytes:a1 length:a2 encoding:4];
  if (!v8)
  {
    uint64_t v10 = 0;
    int v22 = -6705;
    goto LABEL_15;
  }
  id v9 = [v7 _handlePeerPairingIdentityRequestWithIdentifier:v8 status:&v23];
  uint64_t v10 = v9;
  if (!v23)
  {
    uint64_t v11 = [v9 identifier];
    unsigned __int8 v12 = [v8 isEqualToString:v11];

    if ((v12 & 1) == 0)
    {
      int v22 = -6748;
      goto LABEL_15;
    }
    if (a3)
    {
      size_t v13 = [v10 publicKey];

      if (v13)
      {
        long long v14 = [v10 publicKey];
        long long v15 = [v14 data];
        id v16 = [v15 length];
        id v17 = (id)HMFPairingKeyLength;

        if (v16 == v17)
        {
          int v18 = [v10 publicKey];
          id v19 = [v18 data];
          memcpy(a3, [v19 bytes], (size_t)v16);

          goto LABEL_9;
        }
        int v22 = -6743;
LABEL_15:
        unsigned int v23 = v22;
        goto LABEL_9;
      }
LABEL_11:
      int v22 = -6727;
      goto LABEL_15;
    }
  }
LABEL_9:
  uint64_t v20 = v23;

  return v20;
}

void sub_100042940(uint64_t a1)
{
  if (*(void *)(a1 + 32) || *(void *)(a1 + 40))
  {
    id v2 = *(id *)(a1 + 48);
    uint64_t v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      unint64_t v4 = sub_100083FD0(v2);
      int v10 = 138543362;
      uint64_t v11 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%{public}@Handling setup exchange data", (uint8_t *)&v10, 0xCu);
    }
    [*(id *)(a1 + 48) _processSetupExchangeData:*(void *)(a1 + 40) error:*(void *)(a1 + 32)];
  }
  else
  {
    id v5 = *(id *)(a1 + 48);
    id v6 = sub_100083F74();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = sub_100083FD0(v5);
      uint64_t v8 = *(void *)(a1 + 40);
      int v10 = 138543618;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@Invalid setup exchange data: %@", (uint8_t *)&v10, 0x16u);
    }
    id v9 = +[NSError errorWithDomain:@"HAPErrorDomain" code:-6705 userInfo:0];
    [*(id *)(a1 + 48) _closeWithError:v9];
  }
}

void sub_100042BC4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] != (id)1)
  {
    id v7 = *(id *)(a1 + 32);
    uint64_t v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = sub_100083FD0(v7);
      unint64_t v10 = (unint64_t)[*(id *)(a1 + 32) state];
      if (v10 > 3) {
        CFStringRef v11 = @"unknown";
      }
      else {
        CFStringRef v11 = off_100273690[v10];
      }
      *(_DWORD *)buf = 138543618;
      uint64_t v20 = v9;
      __int16 v21 = 2112;
      int v22 = (void *)v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Unable to handle setup exchange data in state '%@'", buf, 0x16u);
    }
    goto LABEL_16;
  }
  id v2 = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40))
  {
    id v3 = v2;
    unint64_t v4 = sub_100083F74();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v5 = sub_100083FD0(v3);
      id v6 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v20 = v5;
      __int16 v21 = 2112;
      int v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@Closing security session due to setup exchange error: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 32) _closeWithError:*(void *)(a1 + 40)];
    return;
  }
  [v2 pairingSession];
  [*(id *)(a1 + 48) bytes];
  [*(id *)(a1 + 48) length];
  uint64_t v12 = PairingSessionExchange();
  if (!v12)
  {
    id v7 = [objc_alloc((Class)NSData) initWithBytesNoCopy:0 length:0];
    if (![v7 length]) {
      goto LABEL_17;
    }
    uint64_t v8 = [*(id *)(a1 + 32) delegate];
    [v8 securitySession:*(void *)(a1 + 32) didReceiveSetupExchangeData:v7];
LABEL_16:

LABEL_17:
    return;
  }
  if (v12 != -6767)
  {
    id v7 = +[NSError errorWithOSStatus:v12];
    uint64_t v8 = +[NSError hapErrorWithcode:2 description:@"Operation Cancelled." reason:@"Failed to get the pairing exchange data." suggestion:0 underlyingError:v7];
    id v16 = *(id *)(a1 + 32);
    id v17 = sub_100083F74();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = sub_100083FD0(v16);
      *(_DWORD *)buf = 138543618;
      uint64_t v20 = v18;
      __int16 v21 = 2112;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to process exchange data with error: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 32) _closeWithError:v8];
    goto LABEL_16;
  }
  id v13 = *(id *)(a1 + 32);
  long long v14 = sub_100083F74();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    long long v15 = sub_100083FD0(v13);
    *(_DWORD *)buf = 138543362;
    uint64_t v20 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%{public}@Session lookup failed, reset resumeSessionID, and retrying", buf, 0xCu);
  }
  [*(id *)(a1 + 32) _initializeSetupSession:0];
  [*(id *)(a1 + 32) setState:0];
  [*(id *)(a1 + 32) open];
}

void sub_100043720(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) pairingSession];
  id v4 = [v3 saltData];
  [v4 bytes];
  id v5 = [v3 saltData];
  [v5 length];
  id v6 = [v3 infoData];
  [v6 bytes];
  id v7 = [v3 infoData];
  [v7 length];
  int v8 = PairingSessionDeriveKey();

  if (v8)
  {
    id v9 = *(id *)(a1 + 32);
    unint64_t v10 = sub_100083F74();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v11 = sub_100083FD0(v9);
      uint64_t v12 = [v3 name];
      int v14 = 138543874;
      long long v15 = v11;
      __int16 v16 = 2112;
      id v17 = v12;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to derive addional key '%@' with error: %ld", (uint8_t *)&v14, 0x20u);
    }
  }
  else
  {
    id v9 = +[NSData dataWithBytes:v20 length:32];
    id v13 = *(void **)(a1 + 40);
    unint64_t v10 = [v3 name];
    [v13 setObject:v9 forKeyedSubscript:v10];
  }
}

id sub_100043B64(uint64_t a1)
{
  mach_absolute_time();
  *(void *)(*(void *)(a1 + 32) + 48) = UpTicksToMilliseconds();
  id result = [*(id *)(a1 + 32) role];
  if (result == (id)1)
  {
    id v4 = *(void **)(a1 + 32);
    return [v4 _notifyOpening];
  }
  else if (!result)
  {
    id v3 = *(void **)(a1 + 32);
    return _[v3 _initiateClientSessionSetupExchange];
  }
  return result;
}

id sub_100043DA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _closeWithError:0];
}

id sub_100043E60(uint64_t a1)
{
  return [*(id *)(a1 + 32) _closeWithError:*(void *)(a1 + 40)];
}

void sub_100043F98(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100044148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100044160(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100044170(uint64_t a1)
{
}

void sub_100044178(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == (id)2)
  {
    id v5 = [*(id *)(a1 + 32) encryption];
    uint64_t v2 = [v5 encrypt:*(void *)(a1 + 40) additionalAuthenticatedData:*(void *)(a1 + 48)];
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }
  else if (*(void *)(a1 + 64))
  {
    **(void **)(a1 + 64) = +[NSError errorWithDomain:@"HAPErrorDomain" code:-6709 userInfo:0];
  }
}

void sub_1000444D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000444F8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == (id)2)
  {
    uint64_t v2 = [*(id *)(a1 + 32) encryption];
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    id v9 = 0;
    uint64_t v5 = [v2 decrypt:v3 additionalAuthenticatedData:v4 error:&v9];
    id v6 = v9;
    uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
    int v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v5;

    if (v6 && [v6 code] != (id)-6764)
    {
      if (*(void *)(a1 + 64)) {
        **(void **)(a1 + 64) = v6;
      }
      [*(id *)(a1 + 32) _closeWithError:v6];
    }
  }
  else if (*(void *)(a1 + 64))
  {
    **(void **)(a1 + 64) = +[NSError errorWithDomain:@"HAPErrorDomain" code:-6709 userInfo:0];
  }
}

void sub_100044654(id a1)
{
  uint64_t v1 = sub_100083EA4(@"Security.Session", @"com.apple.dockaccessoryd");
  uint64_t v2 = (void *)qword_1002AD690;
  qword_1002AD690 = v1;
}

id sub_100044EEC(uint64_t a1)
{
  if (a1)
  {
    int v19 = 0;
    memset(v18, 0, sizeof(v18));
    DebugGetErrorString();
    v16[0] = NSLocalizedDescriptionKey;
    uint64_t v2 = +[NSString stringWithFormat:@"Failed with OSStatus code %d (%s)", a1, v18];
    v17[0] = v2;
    v16[1] = NSUnderlyingErrorKey;
    uint64_t v3 = +[NSError errorWithOSStatus:a1];
    v17[1] = v3;
    uint64_t v4 = 2;
    uint64_t v5 = +[NSDictionary dictionaryWithObjects:v17 forKeys:v16 count:2];

    if ((int)a1 > -6761)
    {
      switch(a1)
      {
        case 0xFFFFE598:
        case 0xFFFFE599:
        case 0xFFFFE59A:
        case 0xFFFFE59F:
        case 0xFFFFE5A0:
        case 0xFFFFE5BB:
        case 0xFFFFE5BC:
        case 0xFFFFE5BD:
        case 0xFFFFE5BE:
          uint64_t v4 = 33;
          break;
        case 0xFFFFE59B:
        case 0xFFFFE59C:
        case 0xFFFFE59D:
        case 0xFFFFE5A3:
        case 0xFFFFE5A5:
        case 0xFFFFE5A6:
        case 0xFFFFE5A7:
        case 0xFFFFE5A8:
        case 0xFFFFE5AA:
        case 0xFFFFE5AB:
        case 0xFFFFE5AC:
        case 0xFFFFE5AD:
        case 0xFFFFE5AE:
        case 0xFFFFE5AF:
        case 0xFFFFE5B0:
        case 0xFFFFE5B1:
        case 0xFFFFE5B4:
        case 0xFFFFE5B5:
        case 0xFFFFE5B6:
        case 0xFFFFE5B7:
        case 0xFFFFE5B8:
        case 0xFFFFE5B9:
        case 0xFFFFE5BA:
        case 0xFFFFE5BF:
        case 0xFFFFE5C0:
        case 0xFFFFE5C1:
        case 0xFFFFE5C2:
        case 0xFFFFE5C3:
        case 0xFFFFE5C5:
        case 0xFFFFE5C6:
        case 0xFFFFE5C8:
        case 0xFFFFE5C9:
        case 0xFFFFE5CD:
        case 0xFFFFE5CE:
        case 0xFFFFE5D1:
          goto LABEL_15;
        case 0xFFFFE59E:
          uint64_t v4 = 37;
          break;
        case 0xFFFFE5A1:
        case 0xFFFFE5A2:
        case 0xFFFFE5A9:
          uint64_t v4 = 44;
          break;
        case 0xFFFFE5A4:
        case 0xFFFFE5B3:
        case 0xFFFFE5C4:
        case 0xFFFFE5C7:
        case 0xFFFFE5CC:
          goto LABEL_6;
        case 0xFFFFE5B2:
          uint64_t v4 = 32;
          break;
        case 0xFFFFE5CA:
        case 0xFFFFE5CF:
        case 0xFFFFE5D0:
          break;
        case 0xFFFFE5CB:
          goto LABEL_14;
        case 0xFFFFE5D2:
          uint64_t v4 = 4;
          break;
        default:
          if ((a1 - 35) > 0x1E || ((1 << (a1 - 35)) & 0x42010001) == 0) {
            goto LABEL_15;
          }
LABEL_14:
          uint64_t v4 = 30;
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 0xFFFEEA18:
          uint64_t v4 = 43;
          break;
        case 0xFFFFE58B:
          uint64_t v4 = 41;
          break;
        case 0xFFFFE590:
LABEL_6:
          uint64_t v4 = 42;
          break;
        default:
LABEL_15:
          if ((a1 - 200400) >= 0x64)
          {
            if ((a1 - 200500) >= 0x64)
            {
              if ((a1 + 25298) <= 0xFFFFFFFD)
              {
                uint64_t v7 = sub_100083F74();
                if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
                {
                  int v8 = sub_100083FD0(0);
                  *(_DWORD *)buf = 138543874;
                  CFStringRef v11 = v8;
                  __int16 v12 = 1024;
                  int v13 = a1;
                  __int16 v14 = 2080;
                  long long v15 = v18;
                  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@Treating OSStatus %d (%s) as Generic error", buf, 0x1Cu);
                }
              }
              uint64_t v4 = 10;
            }
            else
            {
              uint64_t v4 = 46;
            }
          }
          else
          {
            uint64_t v4 = 45;
          }
          break;
      }
    }
    id v6 = +[NSError errorWithDomain:@"DKErrorDomain" code:v4 userInfo:v5];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

uint64_t sub_100046584(uint64_t result)
{
  id result = result;
  uint64_t v1 = 3;
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
    case 6:
      return v1;
    case 2:
      return 5;
    case 3:
      return 16;
    case 4:
      return 9;
    case 5:
      return 17;
    default:
      return 1;
  }
}

__CFString *HAPOperatingStateAbnormalReasonsAsString(unint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1) {
    goto LABEL_14;
  }
  uint64_t v3 = 1;
  unint64_t v4 = a1;
  do
  {
    if ((v3 & a1) == 0) {
      goto LABEL_11;
    }
    switch(v3)
    {
      case 1:
        CFStringRef v5 = @"HAPOperatingStateAbnormalReasonOther";
        break;
      case 4:
        CFStringRef v5 = @"HAPOperatingStateAbnormalReasonHighTemperature";
        break;
      case 2:
        CFStringRef v5 = @"HAPOperatingStateAbnormalReasonLowTemperature";
        break;
      default:
        goto LABEL_11;
    }
    v4 &= ~v3;
    [v2 addObject:v5];
LABEL_11:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    id v6 = +[NSString stringWithFormat:@"Unknown options %lu", v4];
    [v2 addObject:v6];
  }
LABEL_14:
  if ([v2 count])
  {
    uint64_t v7 = [v2 componentsJoinedByString:@", "];
  }
  else
  {
    uint64_t v7 = @"None";
  }

  return v7;
}

id sub_100047C28(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isOpen];
  if ((result & 1) == 0)
  {
    [*(id *)(a1 + 32) setOpen:1];
    uint64_t v3 = [*(id *)(a1 + 32) delegate];
    [v3 controlOutputStreamDidOpen:*(void *)(a1 + 32)];

    unint64_t v4 = *(void **)(a1 + 32);
    return _[v4 sendNextPayloadFragment];
  }
  return result;
}

id sub_100047D24(uint64_t a1)
{
  return [*(id *)(a1 + 32) _closeWithError:0];
}

void sub_100047F7C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_100047FAC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained && ([WeakRetained isCancelled] & 1) == 0)
  {
    unint64_t v4 = *(void **)(a1 + 32);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100048058;
    v5[3] = &unk_1002736C0;
    id v6 = v3;
    [v4 _sendNextPayloadFragmentWithCompletionHandler:v5];
  }
}

id sub_100048058(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  if (a2) {
    return [v2 cancelWithError:a2];
  }
  else {
    return [v2 finish];
  }
}

void sub_10004806C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = [*(id *)(a1 + 32) clientQueue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100048128;
  v6[3] = &unk_100273040;
  uint64_t v4 = *(void *)(a1 + 32);
  id v7 = WeakRetained;
  uint64_t v8 = v4;
  id v5 = WeakRetained;
  dispatch_async(v3, v6);
}

void sub_100048128(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) error];

  uint64_t v3 = *(void **)(a1 + 40);
  if (v2)
  {
    id v6 = [*(id *)(a1 + 32) error];
    [v3 _closeWithError:v6];
  }
  else
  {
    id v4 = [*(id *)(a1 + 40) remainingControlPayloadLength];
    id v5 = *(void **)(a1 + 40);
    if (v4)
    {
      _[v5 sendNextPayloadFragment];
    }
    else
    {
      _[v5 _complete];
    }
  }
}

void sub_1000482B4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v18 = 0;
  uint64_t v3 = [v2 _nextPacketWithMaximumLength:[v2 mtuLength] error:&v18];
  id v4 = v18;
  if (v3)
  {
    id v5 = [*(id *)(a1 + 32) delegate];
    if (v5)
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_100048568;
      v16[3] = &unk_100273710;
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = *(id *)(a1 + 40);
      v16[4] = *(void *)(a1 + 32);
      id v17 = v7;
      [v5 controlOutputStream:v6 didReceiveRequestToSendControlPacket:v3 completionHandler:v16];
      uint64_t v8 = v17;
    }
    else
    {
      int v13 = sub_100083F74();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v14 = sub_100083FD0(0);
        long long v15 = [*(id *)(a1 + 32) shortDescription];
        *(_DWORD *)buf = 138543618;
        uint64_t v20 = v14;
        __int16 v21 = 2112;
        int v22 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%{public}@[%@] The stream delegate is missing, closing session", buf, 0x16u);
      }
      if (!*(void *)(a1 + 40)) {
        goto LABEL_13;
      }
      uint64_t v8 = +[NSError hapErrorWithcode:3 description:@"Operation not supported." reason:@"The stream delegate is missing." suggestion:0 underlyingError:0];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }

LABEL_13:
    goto LABEL_14;
  }
  id v9 = sub_100083F74();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    unint64_t v10 = sub_100083FD0(0);
    CFStringRef v11 = [*(id *)(a1 + 32) shortDescription];
    *(_DWORD *)buf = 138543874;
    uint64_t v20 = v10;
    __int16 v21 = 2112;
    int v22 = v11;
    __int16 v23 = 2112;
    id v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@[%@] Failed to get the next control packet with error: %@", buf, 0x20u);
  }
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12) {
    (*(void (**)(uint64_t, id))(v12 + 16))(v12, v4);
  }
LABEL_14:
}

void sub_100048568(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(void *)(a1 + 40))
  {
    id v4 = [*(id *)(a1 + 32) clientQueue];
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100048634;
    v5[3] = &unk_1002733F0;
    id v7 = *(id *)(a1 + 40);
    id v6 = v3;
    dispatch_async(v4, v5);
  }
}

uint64_t sub_100048634(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

DataStreamBulkSendPendingSessionContext *__cdecl sub_100048CA8(id a1, id a2)
{
  id v2 = a2;
  id v3 = [objc_alloc((Class)HMFTimer) initWithTimeInterval:0 options:5.0];
  id v4 = [objc_alloc((Class)HMFTimer) initWithTimeInterval:0 options:10.0];
  id v5 = [[DataStreamBulkSendPendingSessionContext alloc] initWithSessionStartCallback:v2 handleOpenRequestResponseTimer:v3 sendCloseEventTimer:v4];

  return v5;
}

id sub_100049ED0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startSessionCandidate:*(void *)(a1 + 40) queue:*(void *)(a1 + 48) callback:*(void *)(a1 + 56)];
}

id sub_100049F9C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _rejectSessionCandidate:*(void *)(a1 + 40) status:*(unsigned __int16 *)(a1 + 48)];
}

id sub_10004A09C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cancelSessionWithIdentifier:*(void *)(a1 + 40) reason:*(unsigned __int16 *)(a1 + 56) hadReceivedEof:*(unsigned __int8 *)(a1 + 58) completion:*(void *)(a1 + 48)];
}

void sub_10004A6D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  id v5 = sub_100083F74();
  id v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v7 = sub_100083FD0(v4);
      int v12 = 138543618;
      int v13 = v7;
      __int16 v14 = 2112;
      id v15 = v3;
      uint64_t v8 = "%{public}@Failed to send open response: %@";
      id v9 = v6;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      uint32_t v11 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v12, v11);
    }
  }
  else if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v7 = sub_100083FD0(v4);
    int v12 = 138543362;
    int v13 = v7;
    uint64_t v8 = "%{public}@Sent open response";
    id v9 = v6;
    os_log_type_t v10 = OS_LOG_TYPE_INFO;
    uint32_t v11 = 12;
    goto LABEL_6;
  }
}

uint64_t sub_10004AA7C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

id sub_10004BCF4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _openSessionForFileType:*(void *)(a1 + 40) reason:*(void *)(a1 + 48) metadata:*(void *)(a1 + 56) queue:*(void *)(a1 + 64) callback:*(void *)(a1 + 72)];
}

void sub_10004C100(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_log_type_t v10 = [*(id *)(a1 + 32) queue];
  dispatch_assert_queue_V2(v10);

  uint32_t v11 = [*(id *)(a1 + 32) pendingBulkSendSessionContextBySessionIdentifier];
  int v12 = [v11 objectForKey:*(void *)(a1 + 40)];

  id v13 = *(id *)(a1 + 32);
  __int16 v14 = sub_100083F74();
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_INFO);
  if (v12)
  {
    if (v15)
    {
      __int16 v16 = sub_100083FD0(v13);
      id v17 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543874;
      v52 = v16;
      __int16 v53 = 2112;
      v54 = v17;
      __int16 v55 = 2112;
      v56 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%{public}@Received bulk send open response for session with identifier: %@ error: %@", buf, 0x20u);
    }
    id v18 = [*(id *)(a1 + 32) pendingBulkSendSessionContextBySessionIdentifier];
    [v18 removeObjectForKey:*(void *)(a1 + 40)];

    if ([v12 shouldCloseSessionWithTimeoutReason])
    {
      id v19 = *(id *)(a1 + 32);
      uint64_t v20 = sub_100083F74();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        __int16 v21 = sub_100083FD0(v19);
        int v22 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        v52 = v21;
        __int16 v53 = 2112;
        v54 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "%{public}@Session with identifier: %@ has timed out, sending close event to accessory", buf, 0x16u);
      }
      [*(id *)(a1 + 32) _sendCloseMessageWithIdentifier:*(void *)(a1 + 40) reason:6 completion:&stru_100273830];
      __int16 v23 = +[NSError errorWithDomain:@"DKErrorDomain" code:12 userInfo:0];
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
    else if (v7)
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
    else
    {
      v26 = [v8 hmf_numberForKey:@"status"];
      id v27 = v26;
      if (v26)
      {
        v50 = v26;
        unsigned __int16 v28 = (unsigned __int16)[v26 integerValue];
        if (v28)
        {
          unsigned __int16 v29 = v28;
          [v9 hmf_numberForKey:@"status"];
          id v30 = (DataStreamBulkSendSession *)objc_claimAutoreleasedReturnValue();
          uint64_t v31 = v30;
          if (v30)
          {
            if ([(DataStreamBulkSendSession *)v30 integerValue] == (id)2) {
              uint64_t v32 = 29;
            }
            else {
              uint64_t v32 = 11;
            }
            if ([(DataStreamBulkSendSession *)v31 integerValue] == (id)9) {
              uint64_t v33 = 3;
            }
            else {
              uint64_t v33 = v32;
            }
          }
          else
          {
            uint64_t v33 = 11;
          }
          v44 = +[NSError errorWithDomain:@"DKErrorDomain" code:v33 userInfo:0];
          id v45 = *(id *)(a1 + 32);
          v46 = sub_100083F74();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            sub_100083FD0(v45);
            v47 = v49 = v44;
            v48 = sub_1000413A4(v29);
            *(_DWORD *)buf = 138544130;
            v52 = v47;
            __int16 v53 = 2112;
            v54 = v48;
            __int16 v55 = 2112;
            v56 = v31;
            __int16 v57 = 2112;
            v58 = v49;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "%{public}@Received non-success status in header: %@ payload status: %@. Mapped to error: %@", buf, 0x2Au);

            v44 = v49;
          }

          (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        }
        else
        {
          v37 = [DataStreamBulkSendSession alloc];
          v38 = *(void **)(a1 + 32);
          uint64_t v39 = *(void *)(a1 + 40);
          uint64_t v40 = *(void *)(a1 + 48);
          v41 = [v38 logIdentifier];
          uint64_t v31 = [(DataStreamBulkSendSession *)v37 initWithProtocol:v38 sessionIdentifier:v39 queue:v40 logIdentifier:v41];

          v42 = [*(id *)(a1 + 32) activeBulkSendSessions];
          [v42 setObject:v31 forKey:*(void *)(a1 + 40)];

          v43 = [[DataStreamBulkSendOpenSessionResult alloc] initWithSession:v31 payload:v9];
          (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        }
        id v27 = v50;
      }
      else
      {
        id v34 = *(id *)(a1 + 32);
        v35 = sub_100083F74();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          v36 = sub_100083FD0(v34);
          *(_DWORD *)buf = 138543362;
          v52 = v36;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "%{public}@Could not find a status in header", buf, 0xCu);
        }
        uint64_t v31 = +[NSError errorWithDomain:@"DKErrorDomain" code:24 userInfo:0];
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      }
    }
  }
  else
  {
    if (v15)
    {
      id v24 = sub_100083FD0(v13);
      v25 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      v52 = v24;
      __int16 v53 = 2112;
      v54 = v25;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%{public}@Could not find pending bulk send session context for session identifier: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 32) _sendCloseMessageWithIdentifier:*(void *)(a1 + 40) reason:6 completion:&stru_100273810];
  }
}

void sub_10004E37C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_10004E3A0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained browser];
  uint64_t v2 = [WeakRetained accessoryCache];
  [v1 saveCacheToDisk:v2];
}

void sub_10004F284(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  id v5 = sub_100083F74();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    id v6 = sub_100083FD0(v4);
    int v10 = 138543618;
    uint32_t v11 = v6;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Removed accessory server that its pairing was cancelled post pair-setup with error %@", (uint8_t *)&v10, 0x16u);
  }
  [*(id *)(a1 + 32) setPendingRemovePairing:2];
  id v7 = [*(id *)(a1 + 32) browser];
  unsigned __int8 v8 = [v7 isPerformingGeneralScan];

  if ((v8 & 1) == 0)
  {
    id v9 = [*(id *)(a1 + 32) browser];
    [v9 stopDiscoveringAccessoryServers];
  }
}

uint64_t sub_10004F3B8(uint64_t result, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
  }
  return result;
}

void sub_10004F48C(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  objc_initWeak(&location, *(id *)(a1 + 32));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10004F874;
  v23[3] = &unk_1002738A8;
  objc_copyWeak(&v24, &location);
  id v3 = objc_retainBlock(v23);
  if ([*v2 isPaired])
  {
    if (*(void *)(a1 + 40))
    {
      id v4 = [*(id *)(a1 + 32) discoveredAccessoryCharacteriticsPendingRead];
      [v4 addObjectsFromArray:*(void *)(a1 + 40)];
    }
    id v5 = [*(id *)(a1 + 32) discoveryContext];
    unsigned int v6 = [v5 isDiscovering];

    id v7 = *(void **)(a1 + 32);
    if (v6)
    {
      id v8 = v7;
      sub_100083F74();
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        sub_100083FD0(v8);
        id v10 = (id)objc_claimAutoreleasedReturnValue();
        uint32_t v11 = [*(id *)(a1 + 32) discoveryContext];
        +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v11 discoveryType]);
        __int16 v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
        uint64_t v13 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138543874;
        id v27 = v10;
        __int16 v28 = 2112;
        CFStringRef v29 = v12;
        __int16 v30 = 2112;
        uint64_t v31 = v13;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%{public}@Discovering in progress for type: %@. Pending characteristic types to read: %@", buf, 0x20u);
      }
    }
    else
    {
      unsigned int v18 = [v7 connectReason];
      id v19 = *(void **)(a1 + 32);
      if (v18 == 2)
      {
        [*(id *)(a1 + 32) setHasBeenDiscovered:1];
        [*(id *)(a1 + 32) _discoverWithType:3 completionHandler:0];
      }
      else
      {
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_10004FA38;
        v20[3] = &unk_1002738F8;
        objc_copyWeak(&v22, &location);
        __int16 v21 = v3;
        [v19 _discoverWithType:2 completionHandler:v20];

        objc_destroyWeak(&v22);
      }
    }
  }
  else
  {
    id v14 = *(id *)(a1 + 32);
    sub_100083F74();
    BOOL v15 = (id)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v16 = sub_100083FD0(v14);
      *(_DWORD *)buf = 138543618;
      id v27 = v16;
      __int16 v28 = 2112;
      CFStringRef v29 = @"Discovery on an unpaired accessory is not allowed";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@%@", buf, 0x16u);
    }
    id v17 = +[NSError hapErrorWithcode:3 description:@"Discovery on an unpaired accessory is not allowed" reason:0 suggestion:0 underlyingError:0];
    ((void (*)(void *, void, void *))v3[2])(v3, 0, v17);
  }
  objc_destroyWeak(&v24);
  objc_destroyWeak(&location);
}

void sub_10004F82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004F874(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained pendingRemovePairing] == (id)1)
  {
    [WeakRetained _removePairingOfAccessoryServerCancelledMidPairing];
  }
  else
  {
    [WeakRetained setHasBeenDiscovered:v5 == 0];
    if ([WeakRetained _delegateRespondsToSelector:"accessoryServer:didDiscoverAccessories:transaction:error:"])
    {
      id v7 = [WeakRetained delegateQueue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10004F97C;
      block[3] = &unk_100273150;
      char v10 = a2;
      block[4] = WeakRetained;
      id v9 = v5;
      dispatch_async(v7, block);
    }
  }
}

void sub_10004F97C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = [*(id *)(a1 + 32) delegate];
    [v2 accessoryServer:*(void *)(a1 + 32) didDiscoverAccessories:0 transaction:0 error:*(void *)(a1 + 40)];
  }
  id v6 = [*(id *)(a1 + 32) delegate];
  id v3 = *(void **)(a1 + 32);
  id v4 = [v3 accessories];
  id v5 = [v4 copy];
  [v6 accessoryServer:v3 didDiscoverAccessories:v5 transaction:0 error:*(void *)(a1 + 40)];
}

void sub_10004FA38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    id v5 = +[NSError hapErrorWithcode:1 description:@"Discovery failed" reason:0 suggestion:0 underlyingError:v3];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10004FB74;
    v6[3] = &unk_1002738F8;
    objc_copyWeak(&v8, (id *)(a1 + 40));
    id v7 = *(id *)(a1 + 32);
    [WeakRetained _discoverWithType:0 completionHandler:v6];

    objc_destroyWeak(&v8);
  }
}

void sub_10004FB60(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10004FB74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v3)
  {
    id v5 = +[NSError hapErrorWithcode:1 description:@"Discovery failed" reason:0 suggestion:0 underlyingError:v3];
    (*(void (**)(void, id, void *))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [WeakRetained isIncompatibleUpdate], v5);
  }
  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10004FCC0;
    v7[3] = &unk_1002738D0;
    objc_copyWeak(&v10, (id *)(a1 + 40));
    id v6 = *(id *)(a1 + 32);
    id v8 = 0;
    id v9 = v6;
    [WeakRetained _readPendingDiscoveredCharacteritiscTypesWithCompletion:v7];

    objc_destroyWeak(&v10);
  }
}

void sub_10004FCAC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10004FCC0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v2 = [WeakRetained primaryAccessory];
  [v2 updateForAccessoryInformationService];

  (*(void (**)(void, id, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), [WeakRetained isIncompatibleUpdate], *(void *)(a1 + 32));
}

id sub_100050104(uint64_t a1)
{
  [*(id *)(a1 + 32) removeObject:*(void *)(a1 + 40)];
  id result = [*(id *)(a1 + 32) count];
  if (!result)
  {
    id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return (id)v3();
  }
  return result;
}

void sub_100050460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100050490(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = +[NSDate date];
  [v5 timeIntervalSinceDate:*(void *)(a1 + 32)];
  uint64_t v7 = v6;

  id v8 = [v3 userInfo];
  id v9 = [v8 objectForKeyedSubscript:NSUnderlyingErrorKey];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v10 = v9;
  }
  else {
    id v10 = 0;
  }
  id v11 = v10;

  if (!v11) {
    id v9 = v3;
  }
  id v17 = _NSConcreteStackBlock;
  uint64_t v18 = 3221225472;
  id v19 = sub_100050638;
  uint64_t v20 = &unk_100273948;
  uint64_t v12 = *(void *)(a1 + 56);
  id v21 = WeakRetained;
  uint64_t v23 = v12;
  uint64_t v24 = v7;
  id v13 = v9;
  id v22 = v13;
  sub_100050638((uint64_t)&v17);
  id v14 = [WeakRetained discoveryContext:v17, v18];
  [v14 setDiscovering:0];

  id v15 = objc_retainBlock(*(id *)(a1 + 40));
  __int16 v16 = v15;
  if (v15) {
    (*((void (**)(id, id))v15 + 2))(v15, v3);
  }

  [WeakRetained incrementHAPBTLEMetricsDiscoveryCount];
}

void sub_100050638(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = sub_100083FD0(0);
      id v5 = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
      uint64_t v6 = +[NSNumber numberWithDouble:*(double *)(a1 + 56)];
      uint64_t v7 = [*(id *)(a1 + 40) domain];
      id v8 = [*(id *)(a1 + 40) code];
      int v9 = 138544386;
      id v10 = v4;
      __int16 v11 = 2112;
      uint64_t v12 = v5;
      __int16 v13 = 2112;
      id v14 = v6;
      __int16 v15 = 2112;
      __int16 v16 = v7;
      __int16 v17 = 2048;
      id v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Discovered BTLE accessory with type: %{key:discoveryType}@,                                              %{key:duration}@, error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v9, 0x34u);
    }
  }
}

void sub_10005079C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v3)
  {
    id v5 = v4;
    uint64_t v6 = sub_100083F74();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = sub_100083FD0(v5);
      id v8 = +[NSNumber numberWithInteger:*(void *)(a1 + 48)];
      *(_DWORD *)buf = 138543874;
      id v22 = v7;
      __int16 v23 = 2112;
      uint64_t v24 = v8;
      __int16 v25 = 2112;
      id v26 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@Failed to connect to the accessory during discovery type: %@ with error: %@", buf, 0x20u);
    }
    int v9 = [*(id *)(a1 + 40) completionHandler];
    if (v9)
    {
      id v10 = [*(id *)(a1 + 32) clientQueue];
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_100050A64;
      v18[3] = &unk_100272F38;
      id v19 = v3;
      id v20 = v9;
      dispatch_async(v10, v18);
    }
  }
  else
  {
    [v4 setDiscoveryContext:*(void *)(a1 + 40)];
    uint64_t v11 = *(void *)(a1 + 48);
    id v12 = *(id *)(a1 + 32);
    __int16 v13 = sub_100083F74();
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
    if (v11 == 3)
    {
      if (v14)
      {
        __int16 v15 = sub_100083FD0(v12);
        *(_DWORD *)buf = 138543362;
        id v22 = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%{public}@Ack-ed accessory notification", buf, 0xCu);
      }
      [*(id *)(a1 + 32) _cancelDiscoveryWithError:0];
      [*(id *)(a1 + 32) disconnectWithCompletionHandler:0];
    }
    else
    {
      if (v14)
      {
        __int16 v16 = sub_100083FD0(v12);
        __int16 v17 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        id v22 = v16;
        __int16 v23 = 2048;
        uint64_t v24 = v17;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%{public}@Starting attribute database discovery type: %tu", buf, 0x16u);
      }
      [*(id *)(a1 + 32) _discoverServices];
    }
  }
}

void sub_100050A64(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:8 description:@"Discovery failed." reason:@"Failed to connect." suggestion:0 underlyingError:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100050F20(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100051074(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = sub_100083FD0(0);
      id v5 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [*(id *)(a1 + 32) discoveryRetries]);
      int v6 = 138543618;
      uint64_t v7 = v4;
      __int16 v8 = 2112;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Rediscovering BTLE accessory with retries: %{key:retries}@", (uint8_t *)&v6, 0x16u);
    }
  }
}

uint64_t sub_100051DFC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100053728(void *a1)
{
  id v1 = a1;
  id v2 = [v1 UUID];
  id v3 = +[CBUUID UUIDWithString:@"E604E95D-A759-4817-87D3-AA005083A0D1"];
  if ([v2 isEqual:v3])
  {
    uint64_t v4 = 1;
  }
  else
  {
    id v5 = [v1 UUID];
    int v6 = +[CBUUID UUIDWithString:@"00000051-0000-1000-8000-4D69736D6574"];
    uint64_t v4 = (uint64_t)[v5 isEqual:v6];
  }
  return v4;
}

id sub_1000548F4(void *a1)
{
  id v1 = [a1 UUID];
  id v2 = +[CBUUID UUIDWithString:@"000000A5-0000-1000-8000-4D69736D6574"];
  id v3 = [v1 isEqual:v2];

  return v3;
}

id sub_100054B2C(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = +[HAPDataValueTransformer defaultDataValueTransformer];
  id v5 = [v3 value];

  id v9 = 0;
  int v6 = [v4 reverseTransformedValue:v5 format:2 error:&v9];
  id v7 = v9;

  if (a2 && !v6)
  {
    *a2 = +[NSError hapErrorWithcode:12 description:@"Invalid Characteristic Instance ID value." reason:0 suggestion:0 underlyingError:v7];
  }

  return v6;
}

id sub_100054DE0(void *a1, void *a2)
{
  id v3 = a1;
  uint64_t v4 = +[HAPDataValueTransformer defaultDataValueTransformer];
  id v5 = [v3 value];

  id v9 = 0;
  int v6 = [v4 reverseTransformedValue:v5 format:2 error:&v9];
  id v7 = v9;

  if (a2 && !v6)
  {
    *a2 = +[NSError hapErrorWithcode:12 description:@"Invalid Service Instance ID value." reason:0 suggestion:0 underlyingError:v7];
  }

  return v6;
}

void sub_100055A58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = *(id *)(a1 + 32);
    __int16 v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = sub_100083FD0(v7);
      *(_DWORD *)buf = 138543618;
      __int16 v23 = v9;
      __int16 v24 = 2112;
      id v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to get signature from characteristic with error: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 32) _handleReadCharacteristicSignature:*(void *)(a1 + 40) error:v6];
  }
  else
  {
    id v21 = 0;
    id v10 = [(id)objc_opt_class() parseSignatureResponse:v5 error:&v21];
    id v11 = v21;
    id v12 = *(void **)(a1 + 32);
    if (v10)
    {
      __int16 v13 = [v12 discoveryContext];
      BOOL v14 = [v13 characteristicSignatures];
      [v14 setObject:v10 forKey:*(void *)(a1 + 40)];

      __int16 v15 = *(void **)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      id v17 = 0;
    }
    else
    {
      id v18 = v12;
      id v19 = sub_100083F74();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        id v20 = sub_100083FD0(v18);
        *(_DWORD *)buf = 138543618;
        __int16 v23 = v20;
        __int16 v24 = 2112;
        id v25 = v11;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse characteristic signature response with error: %@", buf, 0x16u);
      }
      __int16 v15 = *(void **)(a1 + 32);
      uint64_t v16 = *(void *)(a1 + 40);
      id v17 = v11;
    }
    [v15 _handleReadCharacteristicSignature:v16 error:v17];
  }
}

void sub_10005688C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 && *(void *)(a1 + 32))
  {
    id v7 = *(id *)(a1 + 40);
    __int16 v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = sub_100083FD0(v7);
      *(_DWORD *)buf = 138543618;
      id v25 = v9;
      __int16 v26 = 2112;
      id v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to get signature from service with error: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 40) _handleReadServiceSignature:*(void *)(a1 + 32) error:v6];
  }
  else
  {
    id v10 = objc_opt_class();
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 56);
    id v23 = 0;
    __int16 v13 = [v10 parseServiceSignatureResponse:v5 serviceInstanceID:v11 serviceType:v12 error:&v23];
    id v14 = v23;
    if (v13 || !*(void *)(a1 + 32))
    {
      id v15 = *(id *)(a1 + 40);
      uint64_t v16 = sub_100083F74();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        id v17 = sub_100083FD0(v15);
        id v18 = [v13 description];
        *(_DWORD *)buf = 138543618;
        id v25 = v17;
        __int16 v26 = 2112;
        id v27 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%{public}@%@", buf, 0x16u);
      }
      id v19 = [*(id *)(a1 + 40) discoveryContext];
      id v20 = [v19 serviceSignatures];
      [v20 setObject:v13 forKey:*(void *)(a1 + 32)];
      id v21 = 0;
    }
    else
    {
      id v19 = *(id *)(a1 + 40);
      id v20 = sub_100083F74();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        id v22 = sub_100083FD0(v19);
        *(_DWORD *)buf = 138543618;
        id v25 = v22;
        __int16 v26 = 2112;
        id v27 = v14;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse service signature response with error: %@", buf, 0x16u);
      }
      id v21 = v14;
    }

    [*(id *)(a1 + 40) _handleReadServiceSignature:*(void *)(a1 + 32) error:v21];
  }
}

uint64_t sub_10005767C(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  if ((unint64_t)[v5 length] > 6)
  {
    if (!a2) {
      goto LABEL_11;
    }
    [v5 getBytes:&v11 length:7];
    *(unsigned char *)a2 = v11;
    int v7 = v12;
    *(unsigned char *)(a2 + 1) = v12;
    *(_WORD *)(a2 + 2) = v13;
    int v8 = v14;
    *(unsigned char *)(a2 + 4) = v14;
    int v9 = v15;
    *(_WORD *)(a2 + 6) = v15;
    if (!v7 && v8 == 1 && !v9)
    {
LABEL_11:
      uint64_t v6 = 1;
      goto LABEL_12;
    }
    if (a3)
    {
      *a3 = +[NSError hapErrorWithcode:12 description:@"Invalid characteristic format descriptor value." reason:0 suggestion:0 underlyingError:0];
    }
    goto LABEL_8;
  }
  if (!a3)
  {
LABEL_8:
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  +[NSError hapErrorWithcode:12 description:@"Invalid characteristic format descriptor value length." reason:0 suggestion:0 underlyingError:0];
  uint64_t v6 = 0;
  *a3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_12:

  return v6;
}

uint64_t sub_100057794(unsigned __int8 a1, void *a2, void *a3)
{
  char v4 = a1 - 1;
  if (a1 - 1) < 0x1Bu && ((0x50AAAA9u >> v4))
  {
    if (a2) {
      *a2 = qword_10023FA50[v4];
    }
    return 1;
  }
  else
  {
    if (a3)
    {
      id v5 = +[NSString stringWithFormat:@"Invalid characteristic format type, %u", a1];
      *a3 = +[NSError hapErrorWithcode:12 description:v5 reason:0 suggestion:0 underlyingError:0];
    }
    return 0;
  }
}

uint64_t sub_100057858(int a1, uint64_t *a2, void *a3)
{
  if (HIWORD(a1) > 0x2730u)
  {
    switch(HIWORD(a1))
    {
      case 0x2731u:
        uint64_t v4 = 5;
        if (!a2) {
          return 1;
        }
        break;
      case 0x2763u:
        uint64_t v4 = 2;
        if (!a2) {
          return 1;
        }
        break;
      case 0x27ADu:
        uint64_t v4 = 4;
        if (!a2) {
          return 1;
        }
        break;
      default:
        goto LABEL_21;
    }
LABEL_19:
    *a2 = v4;
    return 1;
  }
  switch(HIWORD(a1))
  {
    case 0x2700u:
      uint64_t v4 = 0;
      if (!a2) {
        return 1;
      }
      goto LABEL_19;
    case 0x2703u:
      uint64_t v4 = 1;
      if (!a2) {
        return 1;
      }
      goto LABEL_19;
    case 0x272Fu:
      uint64_t v4 = 3;
      if (!a2) {
        return 1;
      }
      goto LABEL_19;
  }
LABEL_21:
  if (a3)
  {
    uint64_t v6 = +[NSString stringWithFormat:@"Invalid characteristic unit type, %04x", HIWORD(a1)];
    *a3 = +[NSError hapErrorWithcode:12 description:v6 reason:0 suggestion:0 underlyingError:0];
  }
  return 0;
}

BOOL sub_100057980(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  if (![v7 length] || (objc_msgSend(v7, "length") & 1) != 0)
  {
    if (a4)
    {
      +[NSError hapErrorWithcode:12 description:@"The characteristic valid range value length must be a multiple of 2." reason:0 suggestion:0 underlyingError:0];
      BOOL v11 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_9;
    }
LABEL_8:
    BOOL v11 = 0;
    goto LABEL_9;
  }
  if ((unint64_t)(a2 - 12) < 4 || a2 == 9)
  {
    if (a4)
    {
      int v9 = sub_10007ACE0(a2);
      id v10 = +[NSString stringWithFormat:@"Characteristics with format type '%@' do not support valid ranges", v9];

      *a4 = +[NSError hapErrorWithcode:12 description:v10 reason:0 suggestion:0 underlyingError:0];
    }
    goto LABEL_8;
  }
  unint64_t v13 = (unint64_t)[v7 length] >> 1;
  unint64_t v14 = (unint64_t)[v7 length] >> 1;
  unsigned __int16 v15 = [v7 subdataWithRange:0, v13];
  uint64_t v16 = [v7 subdataWithRange:v13, v14];
  unint64_t v30 = a2 - 11;
  if ((unint64_t)(a2 - 11) >= 3) {
    uint64_t v17 = a2;
  }
  else {
    uint64_t v17 = 2;
  }
  id v18 = +[HAPDataValueTransformer defaultDataValueTransformer];
  id v33 = 0;
  uint64_t v19 = [v18 reverseTransformedValue:v15 format:v17 error:&v33];
  id v20 = v33;

  uint64_t v31 = (void *)v19;
  if (v19)
  {
    id v21 = +[HAPDataValueTransformer defaultDataValueTransformer];
    id v32 = v20;
    CFStringRef v29 = v16;
    id v22 = [v21 reverseTransformedValue:v16 format:v17 error:&v32];
    id v23 = v32;

    BOOL v11 = v22 != 0;
    if (v22)
    {
      __int16 v24 = v31;
      if (v30 > 2)
      {
        [v8 setMinimumValue:v31];
        [v8 setMaximumValue:v22];
      }
      else
      {
        if ((uint64_t)[v31 longLongValue] >= 1) {
          [v8 setMinLength:v31];
        }
        [v8 setMaxLength:v22];
      }
    }
    else
    {
      id v27 = sub_100083F74();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v28 = sub_100083FD0(0);
        *(_DWORD *)buf = 138543618;
        v35 = v28;
        __int16 v36 = 2112;
        id v37 = v23;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to transform upper value with error: %@", buf, 0x16u);
      }
      uint64_t v16 = v29;
      __int16 v24 = v31;
      if (a4)
      {
        *a4 = +[NSError hapErrorWithcode:12 description:@"Failed to parse upper value" reason:0 suggestion:0 underlyingError:v23];
      }
    }
  }
  else
  {
    id v25 = sub_100083F74();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v26 = sub_100083FD0(0);
      *(_DWORD *)buf = 138543618;
      v35 = v26;
      __int16 v36 = 2112;
      id v37 = v20;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to transform lower value with error: %@", buf, 0x16u);
    }
    __int16 v24 = 0;
    if (a4)
    {
      +[NSError hapErrorWithcode:12 description:@"Failed to parse lower value" reason:0 suggestion:0 underlyingError:v20];
      BOOL v11 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      BOOL v11 = 0;
    }
    id v23 = v20;
  }

LABEL_9:
  return v11;
}

BOOL sub_100057DD0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  if (![v7 length])
  {
    if (a4)
    {
      +[NSError hapErrorWithcode:12 description:@"The characteristic step value length must be greater than 0." reason:0 suggestion:0 underlyingError:0];
      BOOL v11 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_8;
    }
LABEL_7:
    BOOL v11 = 0;
    goto LABEL_8;
  }
  if ((unint64_t)(a2 - 11) < 5 || a2 == 9)
  {
    if (a4)
    {
      int v9 = sub_10007ACE0(a2);
      id v10 = +[NSString stringWithFormat:@"Characteristics with format type '%@' do not support step value", v9];

      *a4 = +[NSError hapErrorWithcode:12 description:v10 reason:0 suggestion:0 underlyingError:0];
    }
    goto LABEL_7;
  }
  unint64_t v13 = +[HAPDataValueTransformer defaultDataValueTransformer];
  id v18 = 0;
  unint64_t v14 = [v13 reverseTransformedValue:v7 format:a2 error:&v18];
  id v15 = v18;

  BOOL v11 = v14 != 0;
  if (v14)
  {
    [v8 setStepValue:v14];
  }
  else
  {
    uint64_t v16 = sub_100083F74();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = sub_100083FD0(0);
      *(_DWORD *)buf = 138543618;
      id v20 = v17;
      __int16 v21 = 2112;
      id v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to transform step value with error: %@", buf, 0x16u);
    }
    if (a4)
    {
      *a4 = +[NSError hapErrorWithcode:12 description:@"Failed to parse step value" reason:0 suggestion:0 underlyingError:v15];
    }
  }

LABEL_8:
  return v11;
}

BOOL sub_100058040(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  if (![v7 length])
  {
    if (a4)
    {
      CFStringRef v10 = @"The characteristic valid values length must be greater than 0.";
      CFStringRef v11 = 0;
LABEL_15:
      +[NSError hapErrorWithcode:12 description:v10 reason:v11 suggestion:0 underlyingError:0];
      BOOL v16 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_17;
    }
LABEL_16:
    BOOL v16 = 0;
    goto LABEL_17;
  }
  if ((unint64_t)(a2 - 16) >= 0xFFFFFFFFFFFFFFF5)
  {
    if (a4)
    {
      unsigned __int8 v12 = sub_10007ACE0(a2);
      unint64_t v13 = +[NSString stringWithFormat:@"Characteristics with format type '%@' do not support valid values", v12];

      *a4 = +[NSError hapErrorWithcode:12 description:v13 reason:0 suggestion:0 underlyingError:0];
    }
    goto LABEL_16;
  }
  if ((unint64_t)(a2 - 1) > 3) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = qword_10023FB28[a2 - 1];
  }
  if (((unint64_t)[v7 length] & v9) != 0)
  {
    unint64_t v14 = sub_100083F74();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = sub_100083FD0(0);
      *(_DWORD *)buf = 138543362;
      id v25 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to extract valid values, total size is not a multiple of the format size", buf, 0xCu);
    }
    if (a4)
    {
      CFStringRef v10 = @"Failed to extract valid values";
      CFStringRef v11 = @"Total size is not a multiple of the format's size";
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  id v18 = sub_10005B518(v7, a2);
  id v19 = [v18 count];
  BOOL v16 = v19 != 0;
  if (v19)
  {
    [v18 sortUsingComparator:&stru_100273A28];
    id v20 = sub_100083F74();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      __int16 v21 = sub_100083FD0(0);
      *(_DWORD *)buf = 138543618;
      id v25 = v21;
      __int16 v26 = 2112;
      id v27 = v18;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%{public}@[HAPBTLE] Setting valid values to : %@", buf, 0x16u);
    }
    [v8 setValidValues:v18];
  }
  else
  {
    id v22 = sub_100083F74();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = sub_100083FD0(0);
      *(_DWORD *)buf = 138543362;
      id v25 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to extract valid values", buf, 0xCu);
    }
    if (a4)
    {
      *a4 = +[NSError hapErrorWithcode:12 description:@"Failed to extract valid values" reason:0 suggestion:0 underlyingError:0];
    }
  }

LABEL_17:
  return v16;
}

uint64_t sub_1000583AC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a3;
  if ([v7 length] && (objc_msgSend(v7, "length") & 1) == 0)
  {
    if ((unint64_t)(a2 - 16) < 0xFFFFFFFFFFFFFFF5)
    {
      uint64_t v9 = [v8 validValues];
      CFStringRef v10 = +[NSMutableArray arrayWithArray:v9];

      if ((unint64_t)(a2 - 1) > 3) {
        uint64_t v11 = -1;
      }
      else {
        uint64_t v11 = qword_10023FB28[a2 - 1];
      }
      if (((unint64_t)[v7 length] & v11) != 0)
      {
        id v15 = sub_100083F74();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v16 = sub_100083FD0(0);
          *(_DWORD *)buf = 138543362;
          __int16 v36 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to extract valid value range, total size is not a multiple of the format's size", buf, 0xCu);
        }
        if (a4)
        {
          +[NSError hapErrorWithcode:12 description:@"Failed to extract valid value range" reason:@"Total size is not a multiple of the format's size" suggestion:0 underlyingError:0];
          uint64_t v12 = 0;
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          uint64_t v12 = 0;
        }
        goto LABEL_40;
      }
      uint64_t v17 = sub_10005B518(v7, a2);
      if ([v17 count])
      {
        __int16 v28 = sub_100083F74();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v29 = sub_100083FD0(0);
          *(_DWORD *)buf = 138543362;
          __int16 v36 = v29;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to extract valid value range, valid value ranges are not pairs", buf, 0xCu);
        }
        if (a4)
        {
          +[NSError hapErrorWithcode:12 description:@"Failed to extract valid value range" reason:@"Valid value ranges are not pairs" suggestion:0 underlyingError:0];
          uint64_t v12 = 0;
          *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_39:

LABEL_40:
          goto LABEL_41;
        }
      }
      else
      {
        id v33 = a4;
        id v34 = v8;
        if ([v17 count])
        {
          unint64_t v18 = 0;
          do
          {
            id v19 = [v17 objectAtIndex:v18];
            id v20 = [v17 objectAtIndex:v18 | 1];
            __int16 v21 = (char *)[v19 integerValue];
            if ((uint64_t)v21 <= (uint64_t)[v20 integerValue])
            {
              do
              {
                id v22 = +[NSNumber numberWithInteger:v21];
                unsigned __int8 v23 = [v10 containsObject:v22];

                if ((v23 & 1) == 0)
                {
                  __int16 v24 = +[NSNumber numberWithInteger:v21];
                  [v10 addObject:v24];
                }
              }
              while ((uint64_t)v21++ < (uint64_t)[v20 integerValue]);
            }

            v18 += 2;
          }
          while (v18 < (unint64_t)[v17 count]);
        }
        if ([v10 count])
        {
          [v10 sortUsingComparator:&stru_1002741E8];
          __int16 v26 = sub_100083F74();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            id v27 = sub_100083FD0(0);
            *(_DWORD *)buf = 138543618;
            __int16 v36 = v27;
            __int16 v37 = 2112;
            v38 = v10;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "%{public}@[HAPBTLE] Setting valid values to : %@", buf, 0x16u);
          }
          id v8 = v34;
          [v34 setValidValues:v10];
          uint64_t v12 = 1;
          goto LABEL_39;
        }
        unint64_t v30 = sub_100083F74();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = sub_100083FD0(0);
          *(_DWORD *)buf = 138543362;
          __int16 v36 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}@[HAPBTLE] Failed to extract valid values", buf, 0xCu);
        }
        if (v33)
        {
          +[NSError hapErrorWithcode:12 description:@"Failed to extract valid values" reason:0 suggestion:0 underlyingError:0];
          uint64_t v12 = 0;
          *id v33 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_39;
        }
      }
      uint64_t v12 = 0;
      goto LABEL_39;
    }
    if (a4)
    {
      unint64_t v13 = sub_10007ACE0(a2);
      unint64_t v14 = +[NSString stringWithFormat:@"Characteristics with format type '%@' do not support valid values", v13];

      *a4 = +[NSError hapErrorWithcode:12 description:v14 reason:0 suggestion:0 underlyingError:0];
    }
    goto LABEL_10;
  }
  if (!a4)
  {
LABEL_10:
    uint64_t v12 = 0;
    goto LABEL_41;
  }
  +[NSError hapErrorWithcode:12 description:@"The characteristic valid values range length must be even" reason:0 suggestion:0 underlyingError:0];
  uint64_t v12 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_41:

  return v12;
}

BOOL sub_100058C44(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = [v5 length];
  if ((unint64_t)v6 <= 1)
  {
    if (a3)
    {
      *a3 = +[NSError hapErrorWithcode:12 description:@"The service properties value is missing." reason:0 suggestion:0 underlyingError:0];
    }
  }
  else
  {
    __int16 v8 = 0;
    [v5 getBytes:&v8 length:2];
    if (a2) {
      *a2 = v8 & 7;
    }
  }

  return (unint64_t)v6 > 1;
}

uint64_t sub_100058CFC(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  if (unint64_t)[v5 length] < 2 || (objc_msgSend(v5, "length"))
  {
    if (a3)
    {
      +[NSError hapErrorWithcode:12 description:@"Linked services has invalid value field." reason:0 suggestion:0 underlyingError:0];
      uint64_t v9 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    if ((unint64_t)[v5 length] >= 2)
    {
      do
      {
        id v7 = v5;
        unsigned __int16 v11 = 0;
        [v5 getBytes:&v11 length:2];
        __int16 v8 = +[NSNumber numberWithUnsignedShort:v11];
        [v6 addObject:v8];

        [v7 subdataWithRange:2, (char *)[v7 length] - 2];
        id v5 = (id)objc_claimAutoreleasedReturnValue();
      }
      while ((unint64_t)[v5 length] > 1);
    }
    uint64_t v9 = 1;
  }

  return v9;
}

void sub_100058F78(id *a1)
{
  id v2 = [a1[4] pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = sub_100083FD0(0);
      id v5 = [a1[5] UUID];
      id v6 = [v5 UUIDString];
      id v7 = [a1[6] domain];
      id v8 = [a1[6] code];
      int v9 = 138544130;
      CFStringRef v10 = v4;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      unint64_t v14 = v7;
      __int16 v15 = 2048;
      id v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to read characteristic signature: %{key:type}@,                                              error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v9, 0x2Au);
    }
  }
}

void sub_100059208(id *a1)
{
  id v2 = [a1[4] pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = sub_100083FD0(0);
      id v5 = [a1[5] UUID];
      id v6 = [v5 UUIDString];
      id v7 = [a1[6] domain];
      id v8 = [a1[6] code];
      int v9 = 138544130;
      CFStringRef v10 = v4;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      unint64_t v14 = v7;
      __int16 v15 = 2048;
      id v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to read service signature: %{key:type}@,                                              error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v9, 0x2Au);
    }
  }
}

id sub_10005B518(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v3 length]);
  if ((unint64_t)(a2 - 1) > 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = qword_10023FB48[a2 - 1];
  }
  if ([v3 length])
  {
    unint64_t v6 = 0;
    do
    {
      id v7 = [v3 subdataWithRange:v6, v5];
      id v8 = +[HAPDataValueTransformer defaultDataValueTransformer];
      uint64_t v12 = 0;
      int v9 = [v8 reverseTransformedValue:v7 format:a2 error:&v12];
      uint64_t v10 = v12;

      if (!v10 && ([v4 containsObject:v9] & 1) == 0) {
        [v4 addObject:v9];
      }

      v6 += v5;
    }
    while (v6 < (unint64_t)[v3 length]);
  }

  return v4;
}

int64_t sub_10005B65C(id a1, NSNumber *a2, NSNumber *a3)
{
  return [(NSNumber *)a2 compare:a3];
}

void sub_10005B808(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  id v3 = +[NSMutableSet setWithCapacity:](NSMutableSet, "setWithCapacity:", [*(id *)(a1 + 32) count]);
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v4 = *v2;
  id v5 = [v4 countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v26;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void *)(*((void *)&v25 + 1) + 8 * i);
        if ([v3 containsObject:v8])
        {
          id v16 = *(id *)(a1 + 40);
          uint64_t v17 = sub_100083F74();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            unint64_t v18 = sub_100083FD0(v16);
            *(_DWORD *)buf = 138543618;
            unint64_t v30 = v18;
            __int16 v31 = 2112;
            uint64_t v32 = v8;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@Not sending requests due to duplicate characteristic: %@", buf, 0x16u);
          }
          [*(id *)(a1 + 48) markWithReason:@"Calling completion handler"];
          if (*(void *)(a1 + 64))
          {
            id v19 = +[NSString stringWithFormat:@"Duplicate characteristic read of %@.", v8];
            id v20 = +[NSError hapErrorWithcode:11 description:v19 reason:@"Client requested to read characteristic twice." suggestion:0 underlyingError:0];

            (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
          }
          [*(id *)(a1 + 48) end];
          [*(id *)(a1 + 48) invalidate];

          goto LABEL_19;
        }
        [v3 addObject:v8];
      }
      id v5 = [v4 countByEnumeratingWithState:&v25 objects:v33 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  if (*(double *)(a1 + 72) > 0.0)
  {
    id v9 = *(id *)(a1 + 40);
    uint64_t v10 = sub_100083F74();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      __int16 v11 = sub_100083FD0(v9);
      uint64_t v12 = *(void *)(a1 + 72);
      *(_DWORD *)buf = 138543618;
      unint64_t v30 = v11;
      __int16 v31 = 2048;
      uint64_t v32 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%{public}@Request timeouts are not supported, request may not timeout within %f seconds", buf, 0x16u);
    }
  }
  objc_initWeak((id *)buf, *(id *)(a1 + 40));
  __int16 v13 = *(void **)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 32);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10005BBDC;
  v21[3] = &unk_100273A50;
  uint64_t v15 = *(void *)(a1 + 56);
  id v22 = *(id *)(a1 + 48);
  objc_copyWeak(&v24, (id *)buf);
  id v23 = *(id *)(a1 + 64);
  [v13 _readCharacteristicValues:v14 queue:v15 completionHandler:v21];

  objc_destroyWeak(&v24);
  objc_destroyWeak((id *)buf);
LABEL_19:
}

void sub_10005BBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005BBDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v22 = a3;
  [*(id *)(a1 + 32) begin];
  uint64_t v23 = a1;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v25 objects:v35 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v26;
    id v24 = v7;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v26 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        __int16 v13 = [v12 error];

        if (!v13)
        {
          id v14 = WeakRetained;
          uint64_t v15 = sub_100083F74();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            id v16 = sub_100083FD0(v14);
            uint64_t v17 = [v12 characteristic];
            [v17 value];
            v19 = id v18 = WeakRetained;
            id v20 = [v12 characteristic];
            *(_DWORD *)buf = 138543874;
            unint64_t v30 = v16;
            __int16 v31 = 2112;
            uint64_t v32 = v19;
            __int16 v33 = 2112;
            id v34 = v20;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%{public}@Read value '%@' for characteristic %@", buf, 0x20u);

            id WeakRetained = v18;
            id v7 = v24;
          }
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v25 objects:v35 count:16];
    }
    while (v9);
  }

  [*(id *)(v23 + 32) markWithReason:@"Calling completion handler"];
  uint64_t v21 = *(void *)(v23 + 40);
  if (v21) {
    (*(void (**)(uint64_t, id, id))(v21 + 16))(v21, v7, v22);
  }
  [*(id *)(v23 + 32) end];
  [*(id *)(v23 + 32) invalidate];
}

void sub_10005C198(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = *(id *)(a1 + 32);
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = sub_100083FD0(v7);
      uint64_t v10 = [v5 instanceID];
      __int16 v11 = [v5 type];
      int v13 = 138544130;
      id v14 = v9;
      __int16 v15 = 2112;
      id v16 = v10;
      __int16 v17 = 2112;
      id v18 = v11;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Read response for characteristic %@/%@ with error: %@", (uint8_t *)&v13, 0x2Au);
    }
  }
  uint64_t v12 = +[HAPCharacteristicResponseTuple responseTupleForCharacteristic:v5 error:v6];
  [*(id *)(a1 + 40) addObject:v12];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_10005C310(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = sub_100083FD0(v2);
    *(_DWORD *)buf = 138543362;
    __int16 v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%{public}@Completed multiple read requests", buf, 0xCu);
  }
  id v5 = *(NSObject **)(a1 + 40);
  if (v5)
  {
    id v6 = *(void **)(a1 + 56);
    if (v6)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_10005C464;
      v7[3] = &unk_1002733F0;
      id v9 = v6;
      id v8 = *(id *)(a1 + 48);
      dispatch_async(v5, v7);
    }
  }
}

uint64_t sub_10005C464(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10005C904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,char a21)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  __HMFActivityScopeLeave();
  _Unwind_Resume(a1);
}

void sub_10005C938(void *a1, void *a2, int a3, void *a4, void *a5)
{
  id v17 = a1;
  id v9 = a2;
  unint64_t v10 = a4;
  unint64_t v11 = a5;
  uint64_t v12 = (void *)v11;
  if (v9)
  {
    if (v10 | v11)
    {
      char v13 = a3 - 1;
      if ((a3 - 1) > 2)
      {
        __int16 v15 = 0;
        uint64_t v14 = 1;
      }
      else
      {
        uint64_t v14 = qword_10023FB68[v13];
        __int16 v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", off_100274208[v13], v17);
      }
      id v16 = +[NSError hapErrorWithcode:v14 description:v15 reason:v12 suggestion:0 underlyingError:v10];
    }
    else
    {
      id v16 = 0;
    }
    v9[2](v9, v17, v16);
  }
}

void sub_10005CA68(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (v6)
  {
    [a1[4] setValue:0];
    id v8 = WeakRetained;
    id v9 = sub_100083F74();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      unint64_t v10 = sub_100083FD0(v8);
      *(_DWORD *)buf = 138543618;
      v44 = v10;
      __int16 v45 = 2112;
      id v46 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to read from characteristic with error: %@", buf, 0x16u);
    }
    unint64_t v11 = sub_100083F74();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = sub_100083FD0(0);
      char v13 = [a1[4] instanceID];
      uint64_t v14 = [v6 domain];
      id v15 = [v6 code];
      *(_DWORD *)buf = 138544130;
      v44 = v12;
      __int16 v45 = 2112;
      id v46 = v13;
      __int16 v47 = 2112;
      unint64_t v48 = (unint64_t)v14;
      __int16 v49 = 2048;
      id v50 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%{public}@Read failed for characteristic %{key:characteristicId}@ with error: %{key:errorDomain}@ %{key:errorCode}ld", buf, 0x2Au);
    }
    sub_10005C938(a1[4], a1[5], 1, v6, @"Read request failed.");
  }
  else
  {
    id v41 = 0;
    id v42 = 0;
    id v40 = 0;
    unsigned __int8 v16 = [(id)objc_opt_class() parseReadResponse:v5 value:&v42 notificationContext:&v41 error:&v40];
    id v17 = v42;
    id v18 = v41;
    id v19 = v40;
    id v20 = a1[4];
    if (v16)
    {
      [v20 setValue:v17];
      [a1[4] setNotificationContext:v18];
      uint64_t v21 = sub_100083F74();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        sub_100083FD0(0);
        uint64_t v23 = v22 = v17;
        id v24 = [a1[4] instanceID];
        unsigned int v25 = [v5 statusCode];
        *(_DWORD *)buf = 138543874;
        v44 = v23;
        __int16 v45 = 2112;
        id v46 = v24;
        __int16 v47 = 2048;
        unint64_t v48 = v25;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%{public}@Received response for characteristic %{key:characteristicId}@: status %{key:hapStatusCode}lu", buf, 0x20u);

        id v17 = v22;
      }

      [WeakRetained _updatePropertiesFromCharacteristic:a1[4]];
      id v26 = a1[4];
      id v27 = a1[5];
      long long v28 = 0;
      CFStringRef v29 = 0;
    }
    else
    {
      [v20 setValue:0];
      [a1[4] setNotificationContext:0];
      id v30 = WeakRetained;
      __int16 v31 = sub_100083F74();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        uint64_t v32 = sub_100083FD0(v30);
        *(_DWORD *)buf = 138543618;
        v44 = v32;
        __int16 v45 = 2112;
        id v46 = v19;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse characteristic read response with error: %@", buf, 0x16u);
      }
      __int16 v33 = sub_100083F74();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        id v34 = sub_100083FD0(0);
        v35 = [a1[4] instanceID];
        [v19 domain];
        id v39 = v18;
        v37 = id v36 = v17;
        id v38 = [v19 code];
        *(_DWORD *)buf = 138544130;
        v44 = v34;
        __int16 v45 = 2112;
        id v46 = v35;
        __int16 v47 = 2112;
        unint64_t v48 = (unint64_t)v37;
        __int16 v49 = 2048;
        id v50 = v38;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to parse response for characteristic %{key:characteristicId}@ with error: %{key:errorDomain}@ %{key:errorCode}ld", buf, 0x2Au);

        id v17 = v36;
        id v18 = v39;
      }
      id v26 = a1[4];
      id v27 = a1[5];
      CFStringRef v29 = @"Read response invalid.";
      long long v28 = v19;
    }
    sub_10005C938(v26, v27, 1, v28, v29);
  }
}

void sub_10005D804(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(double *)(a1 + 72) > 0.0)
  {
    id v2 = *(id *)(a1 + 32);
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id v4 = sub_100083FD0(v2);
      id v5 = *(void **)(v1 + 72);
      *(_DWORD *)buf = 138543618;
      id v50 = v4;
      __int16 v51 = 2048;
      v52 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%{public}@Request timeouts are not supported, request may not timeout within %f seconds", buf, 0x16u);
    }
  }
  __int16 v31 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [*(id *)(v1 + 40) count]);
  group = dispatch_group_create();
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id obj = *(id *)(v1 + 40);
  id v32 = [obj countByEnumeratingWithState:&v44 objects:v48 count:16];
  char v7 = 0;
  if (v32)
  {
    uint64_t v30 = *(void *)v45;
    *(void *)&long long v6 = 138543618;
    long long v28 = v6;
    do
    {
      for (i = 0; i != v32; i = (char *)i + 1)
      {
        uint64_t v9 = v1;
        if (*(void *)v45 != v30) {
          objc_enumerationMutation(obj);
        }
        unint64_t v10 = *(void **)(*((void *)&v44 + 1) + 8 * i);
        dispatch_group_enter(group);
        BOOL v11 = [v10 writeType] == (id)1;
        if ([v10 includeResponseValue]) {
          uint64_t v12 = 3;
        }
        else {
          uint64_t v12 = 1;
        }
        if (objc_msgSend(v10, "timedWrite", v28)) {
          uint64_t v13 = v12 | 4;
        }
        else {
          uint64_t v13 = v12;
        }
        uint64_t v14 = sub_100083F74();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          id v15 = sub_100083FD0(0);
          unsigned __int8 v16 = [v10 characteristic];
          id v17 = [v16 instanceID];
          *(_DWORD *)buf = v28;
          id v50 = v15;
          __int16 v51 = 2112;
          v52 = v17;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%{public}@Sending write for characteristic %{key:characteristicId}@", buf, 0x16u);
        }
        v7 |= v11;

        uint64_t v1 = v9;
        id v18 = *(void **)(v9 + 32);
        id v19 = [v10 value];
        id v20 = [v10 characteristic];
        uint64_t v21 = [v10 authorizationData];
        id v22 = [v10 contextData];
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472;
        v41[2] = sub_10005DC90;
        v41[3] = &unk_100273AA0;
        v41[4] = *(void *)(v9 + 32);
        id v42 = v31;
        v43 = group;
        [v18 _writeValue:v19 toCharacteristic:v20 authorizationData:v21 contextData:v22 options:v13 completionHandler:v41];
      }
      id v32 = [obj countByEnumeratingWithState:&v44 objects:v48 count:16];
    }
    while (v32);
  }

  uint64_t v23 = [*(id *)(v1 + 32) clientQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005DE08;
  block[3] = &unk_100273B18;
  id v24 = *(id *)(v1 + 48);
  uint64_t v25 = *(void *)(v1 + 32);
  id v35 = v24;
  uint64_t v36 = v25;
  id v37 = *(id *)(v1 + 56);
  id v26 = *(id *)(v1 + 64);
  id v38 = v31;
  id v39 = v26;
  char v40 = v7 & 1;
  id v27 = v31;
  dispatch_group_notify(group, v23, block);
}

void sub_10005DC90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = *(id *)(a1 + 32);
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = sub_100083FD0(v7);
      unint64_t v10 = [v5 instanceID];
      BOOL v11 = [v5 type];
      int v13 = 138544130;
      uint64_t v14 = v9;
      __int16 v15 = 2112;
      unsigned __int8 v16 = v10;
      __int16 v17 = 2112;
      id v18 = v11;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Write response for characteristic %@/%@ with error: %@", (uint8_t *)&v13, 0x2Au);
    }
  }
  uint64_t v12 = +[HAPCharacteristicResponseTuple responseTupleForCharacteristic:v5 error:v6];
  [*(id *)(a1 + 40) addObject:v12];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id sub_10005DE08(uint64_t a1)
{
  [*(id *)(a1 + 32) begin];
  id v2 = *(id *)(a1 + 40);
  id v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = sub_100083FD0(v2);
    *(_DWORD *)buf = 138543362;
    id v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%{public}@Completed multiple write requests", buf, 0xCu);
  }
  [*(id *)(a1 + 32) markWithReason:@"Calling completion handler"];
  id v5 = *(NSObject **)(a1 + 48);
  if (v5)
  {
    id v6 = *(void **)(a1 + 64);
    if (v6)
    {
      BOOL v11 = _NSConcreteStackBlock;
      uint64_t v12 = 3221225472;
      int v13 = sub_10005E020;
      uint64_t v14 = &unk_1002733F0;
      id v16 = v6;
      id v15 = *(id *)(a1 + 56);
      dispatch_async(v5, &v11);
    }
  }
  if (*(unsigned char *)(a1 + 72))
  {
    [*(id *)(a1 + 32) markWithReason:@"Disconnecting"];
    id v7 = *(id *)(a1 + 40);
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = sub_100083FD0(v7);
      *(_DWORD *)buf = 138543362;
      id v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%{public}@Finished writes for short action, Disconnecting", buf, 0xCu);
    }
    [*(id *)(a1 + 40) _suspendConnectionIdleTimer];
    [*(id *)(a1 + 40) _handleConnectionIdleTimeout];
  }
  [*(id *)(a1 + 32) end:v11, v12, v13, v14];
  return [*(id *)(a1 + 32) invalidate];
}

uint64_t sub_10005E020(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_10005E68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location,char a26)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  __HMFActivityScopeLeave();
  _Unwind_Resume(a1);
}

void sub_10005E6C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = WeakRetained;
  if (!v6)
  {
    id v17 = *(id *)(a1 + 40);
    id v18 = v17;
    if ((*(unsigned char *)(a1 + 64) & 2) != 0)
    {
      id v35 = 0;
      id v36 = v17;
      unsigned __int8 v20 = [(id)objc_opt_class() parseWriteResponse:v5 value:&v36 error:&v35];
      id v19 = v36;

      id v21 = v35;
      id v22 = v21;
      if ((v20 & 1) == 0)
      {
        id v27 = v8;
        long long v28 = sub_100083F74();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v29 = sub_100083FD0(v27);
          *(_DWORD *)buf = 138543618;
          id v38 = v29;
          __int16 v39 = 2112;
          id v40 = v22;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse characteristic write response with error: %@", buf, 0x16u);
        }
        uint64_t v30 = sub_100083F74();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v31 = sub_100083FD0(0);
          id v32 = [*(id *)(a1 + 32) instanceID];
          __int16 v33 = [v22 domain];
          id v34 = [v22 code];
          *(_DWORD *)buf = 138544130;
          id v38 = v31;
          __int16 v39 = 2112;
          id v40 = v32;
          __int16 v41 = 2112;
          unint64_t v42 = (unint64_t)v33;
          __int16 v43 = 2048;
          id v44 = v34;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to parse response for characteristic %{key:characteristicId}@ with error: %{key:errorDomain}@ %{key:errorCode}ld", buf, 0x2Au);
        }
        sub_10005C938(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, v22, @"Write response failed.");

        goto LABEL_19;
      }
    }
    else
    {
      id v19 = v17;
    }
    [*(id *)(a1 + 32) setValue:v19];
    uint64_t v23 = sub_100083F74();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = sub_100083FD0(0);
      uint64_t v25 = [*(id *)(a1 + 32) instanceID];
      unsigned int v26 = [v5 statusCode];
      *(_DWORD *)buf = 138543874;
      id v38 = v24;
      __int16 v39 = 2112;
      id v40 = v25;
      __int16 v41 = 2048;
      unint64_t v42 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%{public}@Received response for characteristic %{key:characteristicId}@: status %{key:hapStatusCode}lu", buf, 0x20u);
    }
    sub_10005C938(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, 0, 0);
LABEL_19:

    goto LABEL_20;
  }
  id v9 = WeakRetained;
  unint64_t v10 = sub_100083F74();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    BOOL v11 = sub_100083FD0(v9);
    *(_DWORD *)buf = 138543618;
    id v38 = v11;
    __int16 v39 = 2112;
    id v40 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to write to characteristic with error: %@", buf, 0x16u);
  }
  uint64_t v12 = sub_100083F74();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = sub_100083FD0(0);
    uint64_t v14 = [*(id *)(a1 + 32) instanceID];
    id v15 = [v6 domain];
    id v16 = [v6 code];
    *(_DWORD *)buf = 138544130;
    id v38 = v13;
    __int16 v39 = 2112;
    id v40 = v14;
    __int16 v41 = 2112;
    unint64_t v42 = (unint64_t)v15;
    __int16 v43 = 2048;
    id v44 = v16;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Write failed for characteristic %{key:characteristicId}@ with error: %{key:errorDomain}@ %{key:errorCode}ld", buf, 0x2Au);
  }
  sub_10005C938(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, v6, @"Write request failed.");
LABEL_20:
}

void sub_10005EC80(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) clientQueue];
  dispatch_assert_queue_V2(v6);

  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7) {
      (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, *(void *)(a1 + 40), v5);
    }
  }
  else
  {
    [*(id *)(a1 + 32) _performTimedWriteExecuteForCharacteristic:v10 value:*(void *)(a1 + 48) options:*(void *)(a1 + 64) completionHandler:*(void *)(a1 + 56)];
  }
  id v8 = [*(id *)(a1 + 32) requestOperationQueue];
  unsigned int v9 = [v8 isSuspended];

  if (v9) {
    [*(id *)(a1 + 32) _resumeAllOperations];
  }
}

void sub_10005F0E0(_Unwind_Exception *a1)
{
}

void sub_10005F10C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = *(id *)(a1 + 32);
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v9 = sub_100083FD0(v7);
      int v29 = 138543618;
      uint64_t v30 = v9;
      __int16 v31 = 2112;
      id v32 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to prepare timed write to characteristic with error: %@", (uint8_t *)&v29, 0x16u);
    }
    id v10 = sub_100083F74();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v11 = sub_100083FD0(0);
      uint64_t v12 = [*(id *)(a1 + 40) instanceID];
      int v13 = [v6 domain];
      id v14 = [v6 code];
      int v29 = 138544130;
      uint64_t v30 = v11;
      __int16 v31 = 2112;
      id v32 = v12;
      __int16 v33 = 2112;
      unint64_t v34 = (unint64_t)v13;
      __int16 v35 = 2048;
      id v36 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Prepare timed write for characteristic %{key:characteristicId}@, failed with error: %{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v29, 0x2Au);
    }
    id v15 = *(void **)(a1 + 40);
    id v16 = *(void **)(a1 + 48);
    id v17 = @"Prepare timed write request failed.";
    id v18 = v6;
    goto LABEL_7;
  }
  if (![v5 statusCode])
  {
    id v15 = *(void **)(a1 + 40);
    id v16 = *(void **)(a1 + 48);
    id v18 = 0;
    id v17 = 0;
LABEL_7:
    sub_10005C938(v15, v16, 2, v18, v17);
    goto LABEL_14;
  }
  id v19 = *(id *)(a1 + 32);
  unsigned __int8 v20 = sub_100083F74();
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    id v21 = sub_100083FD0(v19);
    int v29 = 138543618;
    uint64_t v30 = v21;
    __int16 v31 = 1024;
    LODWORD(v32) = [v5 statusCode];
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "%{public}@Received response to prepare write with status code: 0x%02x", (uint8_t *)&v29, 0x12u);
  }
  id v22 = sub_100083F74();
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = sub_100083FD0(0);
    id v24 = [*(id *)(a1 + 40) instanceID];
    unsigned int v25 = [v5 statusCode];
    int v29 = 138543874;
    uint64_t v30 = v23;
    __int16 v31 = 2112;
    id v32 = v24;
    __int16 v33 = 2048;
    unint64_t v34 = v25;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "%{public}@Prepare timed write for characteristic %{key:characteristicId}@, failed with HAP error: %{key:errorCode}lu", (uint8_t *)&v29, 0x20u);
  }
  id v27 = *(void **)(a1 + 40);
  unsigned int v26 = *(void **)(a1 + 48);
  long long v28 = +[NSError hapErrorWithcode:](NSError, "hapErrorWithcode:", sub_100046584((uint64_t)[v5 statusCode]));
  sub_10005C938(v27, v26, 2, v28, @"Prepare timed write response returned non-zero status code.");

LABEL_14:
}

void sub_10005F750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  __HMFActivityScopeLeave();
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005F78C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v8 = WeakRetained;
  if (v6)
  {
    id v9 = WeakRetained;
    id v10 = sub_100083F74();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      BOOL v11 = sub_100083FD0(v9);
      *(_DWORD *)buf = 138543618;
      id v44 = v11;
      __int16 v45 = 2112;
      id v46 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to execute write to characteristic with error: %@", buf, 0x16u);
    }
    uint64_t v12 = sub_100083F74();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = sub_100083FD0(0);
      id v14 = [*(id *)(a1 + 32) instanceID];
      id v15 = [v6 domain];
      id v16 = [v6 code];
      *(_DWORD *)buf = 138544130;
      id v44 = v13;
      __int16 v45 = 2112;
      id v46 = v14;
      __int16 v47 = 2112;
      unint64_t v48 = (unint64_t)v15;
      __int16 v49 = 2048;
      id v50 = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@Timed write for characteristic %{key:characteristicId}@, failed with error: %{key:errorDomain}@, %{key:errorCode}ld", buf, 0x2Au);
    }
    sub_10005C938(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, v6, @"Execute timed write request failed.");
    goto LABEL_24;
  }
  if (![v5 statusCode])
  {
    id v23 = *(id *)(a1 + 40);
    id v24 = v23;
    if ((*(unsigned char *)(a1 + 64) & 2) != 0)
    {
      id v41 = 0;
      id v42 = v23;
      unsigned __int8 v26 = [(id)objc_opt_class() parseWriteResponse:v5 value:&v42 error:&v41];
      id v25 = v42;

      id v27 = v41;
      long long v28 = v27;
      if ((v26 & 1) == 0)
      {
        id v33 = v8;
        unint64_t v34 = sub_100083F74();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          __int16 v35 = sub_100083FD0(v33);
          *(_DWORD *)buf = 138543618;
          id v44 = v35;
          __int16 v45 = 2112;
          id v46 = v28;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse characteristic execute response with error: %@", buf, 0x16u);
        }
        id v36 = sub_100083F74();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          id v37 = sub_100083FD0(0);
          id v38 = [*(id *)(a1 + 32) instanceID];
          __int16 v39 = [v28 domain];
          id v40 = [v28 code];
          *(_DWORD *)buf = 138544130;
          id v44 = v37;
          __int16 v45 = 2112;
          id v46 = v38;
          __int16 v47 = 2112;
          unint64_t v48 = (unint64_t)v39;
          __int16 v49 = 2048;
          id v50 = v40;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to parse response for characteristic %{key:characteristicId}@ with error: %{key:errorDomain}@ %{key:errorCode}ld", buf, 0x2Au);
        }
        sub_10005C938(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, v28, @"Execute timed write response invalid.");

        goto LABEL_23;
      }
    }
    else
    {
      id v25 = v23;
    }
    [*(id *)(a1 + 32) setValue:v25];
    int v29 = sub_100083F74();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = sub_100083FD0(0);
      __int16 v31 = [*(id *)(a1 + 32) instanceID];
      unsigned int v32 = [v5 statusCode];
      *(_DWORD *)buf = 138543874;
      id v44 = v30;
      __int16 v45 = 2112;
      id v46 = v31;
      __int16 v47 = 2048;
      unint64_t v48 = v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%{public}@Received response for characteristic %{key:characteristicId}@: status %{key:hapStatusCode}lu", buf, 0x20u);
    }
    sub_10005C938(*(void **)(a1 + 32), *(void **)(a1 + 48), 2, 0, 0);
LABEL_23:

    goto LABEL_24;
  }
  id v17 = sub_100083F74();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    id v18 = sub_100083FD0(0);
    id v19 = [*(id *)(a1 + 32) instanceID];
    *(_DWORD *)buf = 138543874;
    id v44 = v18;
    __int16 v45 = 2112;
    id v46 = v19;
    __int16 v47 = 2048;
    unint64_t v48 = [v5 statusCode];
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}@Prepare timed write for characteristic %{key:characteristicId}@, failed with HAP error: %{key:errorCode}lu", buf, 0x20u);
  }
  unsigned __int8 v20 = *(void **)(a1 + 32);
  id v21 = *(void **)(a1 + 48);
  id v22 = +[NSError hapErrorWithcode:](NSError, "hapErrorWithcode:", sub_100046584((uint64_t)[v5 statusCode]));
  sub_10005C938(v20, v21, 2, v22, @"Execute response returned non-zero status code.");

LABEL_24:
}

id sub_10005FF64(void *a1, uint64_t a2, void *a3, int a4, void *a5, void *a6, double a7)
{
  id v13 = a3;
  id v14 = a5;
  id v15 = a1;
  TLV8BufferInit();
  id v16 = +[HAPDataValueTransformer defaultDataValueTransformer];
  id v17 = [v16 transformedValue:v15 format:a2 error:a6];

  if (!v17)
  {
    id v21 = 0;
LABEL_20:
    uint64_t v20 = 0;
    goto LABEL_4;
  }
  id v18 = v17;
  [v18 bytes];
  [v18 length];
  uint64_t appended = TLV8BufferAppend();
  if (!appended)
  {
    if (!v13
      || (id v24 = v13,
          [v24 bytes],
          [v24 length],
          uint64_t appended = TLV8BufferAppend(),
          !appended))
    {
      if (a7 <= 0.0) {
        goto LABEL_26;
      }
      if (!(unint64_t)(a7 * 10.0))
      {
        id v21 = 0;
        uint64_t v20 = 4294960559;
        goto LABEL_4;
      }
      uint64_t appended = TLV8BufferAppendUInt64();
      if (!appended)
      {
LABEL_26:
        if (!a4 || (uint64_t appended = TLV8BufferAppendUInt64(), !appended))
        {
          if (!objc_msgSend(v14, "length", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0)
            || (id v25 = v14,
                [v25 bytes],
                [v25 length],
                uint64_t appended = TLV8BufferAppend(),
                !appended))
          {
            id v21 = +[NSData dataWithBytes:v26 length:v27];
            if (!v21)
            {
              uint64_t v20 = 4294960568;
              goto LABEL_4;
            }
            goto LABEL_20;
          }
        }
      }
    }
  }
  uint64_t v20 = appended;
  id v21 = 0;
LABEL_4:
  TLV8BufferFree();
  if (a6 && v20)
  {
    id v22 = +[NSError errorWithOSStatus:v20];
    *a6 = +[NSError hapErrorWithcode:12 description:@"Write failed." reason:@"Failed to create write request body." suggestion:0 underlyingError:v22];
  }

  return v21;
}

id sub_100060B90(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _enableEvents:*(unsigned __int8 *)(a1 + 64) forCharacteristics:*(void *)(a1 + 40) withCompletionHandler:*(void *)(a1 + 56) queue:*(void *)(a1 + 48)];
}

id sub_100060BA4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _enableEvents:*(unsigned __int8 *)(a1 + 64) forCharacteristics:*(void *)(a1 + 40) withCompletionHandler:*(void *)(a1 + 56) queue:*(void *)(a1 + 48)];
}

void sub_100061770(_Unwind_Exception *a1)
{
}

uint64_t sub_1000617D4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1000617EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000617FC(uint64_t a1)
{
}

void sub_100061804(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    [v5 setEventNotificationsEnabled:*(unsigned char *)(a1 + 56) == 0];
    id v7 = [v5 service];
    id v8 = [v7 accessory];

    id v9 = *(id *)(a1 + 32);
    id v10 = sub_100083F74();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v11 = sub_100083FD0(v9);
      uint64_t v12 = [v8 instanceID];
      id v13 = [v5 instanceID];
      id v14 = [v5 type];
      int v16 = 138544386;
      id v17 = v11;
      __int16 v18 = 2112;
      id v19 = v12;
      __int16 v20 = 2112;
      id v21 = v13;
      __int16 v22 = 2112;
      id v23 = v14;
      __int16 v24 = 2112;
      id v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}@Enable event response for characteristic %@/%@/%@ with error: %@", (uint8_t *)&v16, 0x34u);
    }
  }
  id v15 = +[HAPCharacteristicResponseTuple responseTupleForCharacteristic:v5 error:v6];
  if (v15) {
    [*(id *)(a1 + 40) addObject:v15];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1000619DC(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100061AC8;
  v5[3] = &unk_100273C30;
  uint64_t v10 = *(void *)(a1 + 72);
  void v5[4] = v3;
  id v6 = v2;
  id v9 = *(id *)(a1 + 64);
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  [v3 _readCharacteristicValues:v6 queue:v4 completionHandler:v5];
}

void sub_100061AC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a3);
  }
  else
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v12 = [v5 countByEnumeratingWithState:&v40 objects:v50 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v41;
      uint64_t v34 = a1;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v41 != v14) {
            objc_enumerationMutation(v5);
          }
          int v16 = *(void **)(*((void *)&v40 + 1) + 8 * i);
          id v17 = [v16 error];

          if (v17)
          {
            id v18 = *(id *)(a1 + 32);
            id v19 = sub_100083F74();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              sub_100083FD0(v18);
              v21 = id v20 = v5;
              [v16 characteristic];
              id v23 = v22 = v14;
              __int16 v24 = [v16 error];
              *(_DWORD *)buf = 138543874;
              __int16 v45 = v21;
              __int16 v46 = 2112;
              id v47 = v23;
              __int16 v48 = 2112;
              __int16 v49 = v24;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}@Failed to read value for characteristic, %@, with error: %@", buf, 0x20u);

              uint64_t v14 = v22;
              id v5 = v20;
              a1 = v34;
            }

            uint64_t v25 = [v16 error];
            uint64_t v26 = *(void *)(*(void *)(a1 + 72) + 8);
            uint64_t v27 = *(void **)(v26 + 40);
            *(void *)(v26 + 40) = v25;
          }
        }
        id v13 = [v5 countByEnumeratingWithState:&v40 objects:v50 count:16];
      }
      while (v13);
    }
    id v28 = *(id *)(a1 + 32);
    int v29 = sub_100083F74();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      uint64_t v30 = sub_100083FD0(v28);
      id v31 = [v5 count];
      *(_DWORD *)buf = 138543618;
      __int16 v45 = v30;
      __int16 v46 = 2048;
      id v47 = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "%{public}@Read values for %lu Characteristics supporting Events", buf, 0x16u);
    }
    id v6 = 0;
    if ([*(id *)(a1 + 40) count]
      && [*(id *)(a1 + 32) _delegateRespondsToSelector:"accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:"])
    {
      unsigned int v32 = [*(id *)(a1 + 32) delegateQueue];
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472;
      v38[2] = sub_100061F28;
      v38[3] = &unk_100273040;
      id v33 = *(void **)(a1 + 40);
      v38[4] = *(void *)(a1 + 32);
      id v39 = v33;
      dispatch_async(v32, v38);
    }
  }
  id v7 = *(id *)(a1 + 32);
  id v8 = sub_100083F74();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = sub_100083FD0(v7);
    *(_DWORD *)buf = 138543362;
    __int16 v45 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%{public}@Completed multiple enable event requests", buf, 0xCu);
  }
  uint64_t v10 = *(void **)(a1 + 64);
  if (v10)
  {
    BOOL v11 = *(NSObject **)(a1 + 48);
    if (v11)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100061FB4;
      block[3] = &unk_1002733F0;
      id v37 = v10;
      id v36 = *(id *)(a1 + 56);
      dispatch_async(v11, block);
    }
  }
}

id sub_100061F28(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [v3 stateNumber];
  [v2 accessoryServer:v3 didUpdateValuesForCharacteristics:v4 stateNumber:v5 broadcast:0];

  id v6 = *(void **)(a1 + 32);

  return _[v6 setStateChanged:0];
}

uint64_t sub_100061FB4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_100061FCC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_100061FE4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16))(a1[5], a1[4], *(void *)(*(void *)(a1[6] + 8) + 40));
}

uint64_t sub_1000624A4(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1000624BC(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1000624D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = *(id *)(a1 + 32);
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = sub_100083FD0(v7);
      *(_DWORD *)buf = 138543618;
      id v17 = v9;
      __int16 v18 = 2112;
      id v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to enable events on characteristic with error %@", buf, 0x16u);
    }
  }
  else
  {
    [v5 setEventNotificationsEnabled:*(unsigned __int8 *)(a1 + 56)];
  }
  uint64_t v10 = *(void **)(a1 + 48);
  if (v10)
  {
    BOOL v11 = *(NSObject **)(a1 + 40);
    if (v11)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100062678;
      block[3] = &unk_100273378;
      id v15 = v10;
      id v13 = v5;
      id v14 = v6;
      dispatch_async(v11, block);
    }
  }
}

uint64_t sub_100062678(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1000627C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, *(void *)(a1 + 32), a2);
  }
  return result;
}

void sub_100062CA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSMutableArray array];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v17;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        BOOL v11 = [v10 error];

        if (!v11)
        {
          id v12 = [v10 characteristic];
          [v4 addObject:v12];
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v7);
  }

  if ([v4 count]
    && [*(id *)(a1 + 32) _delegateRespondsToSelector:"accessoryServer:didUpdateValuesForCharacteristics:stateNumber:broadcast:"])
  {
    id v13 = [*(id *)(a1 + 32) delegateQueue];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100062E90;
    v14[3] = &unk_100273040;
    v14[4] = *(void *)(a1 + 32);
    id v15 = v4;
    dispatch_async(v13, v14);
  }
}

void sub_100062E90(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) delegate];
  id v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v4 = [v3 stateNumber];
  [v5 accessoryServer:v3 didUpdateValuesForCharacteristics:v2 stateNumber:v4 broadcast:0];
}

void sub_100063A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100063AAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v8 = sub_100083F74();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = sub_100083FD0(v7);
    uint64_t v10 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 56)];
    *(_DWORD *)buf = 138543874;
    uint64_t v34 = v9;
    __int16 v35 = 2112;
    id v36 = v10;
    __int16 v37 = 2112;
    id v38 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%{public}@Did configure for broadcast key generation type: %@ with error: %@", buf, 0x20u);
  }
  if (v6)
  {
    if (*(void *)(a1 + 40))
    {
      BOOL v11 = +[NSString stringWithFormat:@"Failed to configure for broadcast key"];
      CFStringRef v12 = @"Protocol config request failed.";
      id v13 = v11;
      id v14 = v6;
LABEL_11:
      id v19 = +[NSError hapErrorWithcode:1 description:v13 reason:v12 suggestion:0 underlyingError:v14];

      (*(void (**)(double))(*(void *)(a1 + 40) + 16))(0.0);
LABEL_20:
    }
  }
  else
  {
    if (![v5 statusCode])
    {
      id v31 = 0;
      id v32 = 0;
      id v30 = 0;
      unsigned __int8 v20 = [(id)objc_opt_class() parseProtocolConfigurationResponse:v5 key:&v32 stateNumber:&v31 error:&v30];
      id v21 = v32;
      id v22 = v31;
      id v19 = v30;
      if (v20)
      {
        uint64_t v23 = *(void *)(a1 + 40);
        if (v23)
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          (*(void (**)(uint64_t, id, id, uint64_t, void, CFAbsoluteTime))(v23 + 16))(v23, v21, v22, 1, 0, Current);
        }
      }
      else
      {
        id v25 = v7;
        uint64_t v26 = sub_100083F74();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          uint64_t v27 = sub_100083FD0(v25);
          *(_DWORD *)buf = 138543618;
          uint64_t v34 = v27;
          __int16 v35 = 2112;
          id v36 = v19;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse protocol configuration response with error: %@", buf, 0x16u);
        }
        if (*(void *)(a1 + 40))
        {
          id v28 = +[NSString stringWithFormat:@"Failed to configure service %@.", *(void *)(a1 + 32)];
          int v29 = +[NSError hapErrorWithcode:12 description:v28 reason:@"Protocol config response was invalid." suggestion:0 underlyingError:v19];

          (*(void (**)(double))(*(void *)(a1 + 40) + 16))(0.0);
        }
      }

      goto LABEL_20;
    }
    id v15 = v7;
    long long v16 = sub_100083F74();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      long long v17 = sub_100083FD0(v15);
      unsigned int v18 = [v5 statusCode];
      *(_DWORD *)buf = 138543618;
      uint64_t v34 = v17;
      __int16 v35 = 1024;
      LODWORD(v36) = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}@Protocol Config failed with status: %d", buf, 0x12u);
    }
    if (*(void *)(a1 + 40))
    {
      BOOL v11 = +[NSString stringWithFormat:@"Protocol Config failed"];
      CFStringRef v12 = @"Response with failure status code";
      id v13 = v11;
      id v14 = 0;
      goto LABEL_11;
    }
  }
}

void sub_1000644E0(uint64_t a1)
{
  objc_initWeak(&location, *(id *)(a1 + 32));
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000645D4;
  v5[3] = &unk_100273CF8;
  objc_copyWeak(&v7, &location);
  id v6 = *(id *)(a1 + 56);
  [v2 _configureCharacteristics:v3 queue:v4 withCompletionHandler:v5];

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void sub_1000645B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000645D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v19 = a1;
  id v20 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v22;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        CFStringRef v12 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        id v13 = [v12 error:v19];

        if (!v13)
        {
          id v14 = WeakRetained;
          id v15 = sub_100083F74();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            long long v16 = sub_100083FD0(v14);
            long long v17 = [v12 characteristic];
            *(_DWORD *)buf = 138543618;
            uint64_t v26 = v16;
            __int16 v27 = 2112;
            id v28 = v17;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "%{public}@Configured characteristic %@", buf, 0x16u);
          }
        }
      }
      id v9 = [v7 countByEnumeratingWithState:&v21 objects:v29 count:16];
    }
    while (v9);
  }

  uint64_t v18 = *(void *)(v19 + 32);
  if (v18) {
    (*(void (**)(uint64_t, id, id))(v18 + 16))(v18, v7, v20);
  }
}

void sub_100064BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id location)
{
}

void sub_100064BC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = *(id *)(a1 + 32);
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = sub_100083FD0(v7);
      uint64_t v10 = [v5 instanceID];
      BOOL v11 = [v5 type];
      int v13 = 138544130;
      id v14 = v9;
      __int16 v15 = 2112;
      long long v16 = v10;
      __int16 v17 = 2112;
      uint64_t v18 = v11;
      __int16 v19 = 2112;
      id v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%{public}@Enable event response for characteristic %@/%@ with error: %@", (uint8_t *)&v13, 0x2Au);
    }
  }
  CFStringRef v12 = +[HAPCharacteristicResponseTuple responseTupleForCharacteristic:v5 error:v6];
  [*(id *)(a1 + 40) addObject:v12];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_100064D40(uint64_t a1)
{
  id v2 = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = sub_100083FD0(v2);
    *(_DWORD *)buf = 138543362;
    BOOL v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%{public}@Completed multiple broadcast enable requests", buf, 0xCu);
  }
  id v5 = *(NSObject **)(a1 + 32);
  if (v5)
  {
    id v6 = *(void **)(a1 + 48);
    if (v6)
    {
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_100064E9C;
      v7[3] = &unk_1002733F0;
      id v9 = v6;
      id v8 = *(id *)(a1 + 40);
      dispatch_async(v5, v7);
    }
  }
}

uint64_t sub_100064E9C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

void sub_1000651E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
}

void sub_100065214(void **a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v8 = WeakRetained;
  if (v6)
  {
    id v9 = WeakRetained;
    uint64_t v10 = sub_100083F74();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      BOOL v11 = sub_100083FD0(v9);
      *(_DWORD *)buf = 138543618;
      id v28 = v11;
      __int16 v29 = 2112;
      id v30 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to configure characteristic with error: %@", buf, 0x16u);
    }
    sub_10005C938(a1[4], a1[5], 3, v6, @"Configure Characteristic request failed.");
  }
  else if ([v5 statusCode])
  {
    id v12 = v8;
    int v13 = sub_100083F74();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id v14 = sub_100083FD0(v12);
      *(_DWORD *)buf = 138543618;
      id v28 = v14;
      __int16 v29 = 1024;
      LODWORD(v30) = [v5 statusCode];
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@Configure characteristic failed with status: %d", buf, 0x12u);
    }
    long long v16 = a1[4];
    __int16 v15 = a1[5];
    __int16 v17 = +[NSError hapErrorWithcode:](NSError, "hapErrorWithcode:", sub_100046584((uint64_t)[v5 statusCode]));
    sub_10005C938(v16, v15, 3, v17, @"Response with failure status code");
  }
  else
  {
    id v26 = 0;
    unsigned __int8 v18 = [(id)objc_opt_class() parseCharacteristicConfigurationResponse:v5 error:&v26];
    id v19 = v26;
    if (v18)
    {
      sub_10005C938(a1[4], a1[5], 3, 0, 0);
    }
    else
    {
      id v20 = v8;
      long long v21 = sub_100083F74();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        long long v22 = sub_100083FD0(v20);
        *(_DWORD *)buf = 138543618;
        id v28 = v22;
        __int16 v29 = 2112;
        id v30 = v19;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%{public}@Failed to parse characteristic configuration response with error: %@", buf, 0x16u);
      }
      long long v24 = a1[4];
      long long v23 = a1[5];
      id v25 = +[NSError hapErrorWithcode:12];
      sub_10005C938(v24, v23, 3, v25, @"Configure characteristic response invalid.");
    }
  }
}

void sub_100065670(uint64_t a1)
{
  [*(id *)(a1 + 32) setPairingActivity:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setPairingRequest:*(void *)(a1 + 48)];
  if ([*(id *)(a1 + 32) isPaired])
  {
    CFStringRef v2 = @"Pairing not supported on paired accessory.";
    uint64_t v3 = +[NSError hapErrorWithcode:18 description:@"Pairing not supported on paired accessory." reason:0 suggestion:0 underlyingError:0];
  }
  else
  {
    uint64_t v3 = 0;
    CFStringRef v2 = 0;
  }
  if ([*(id *)(a1 + 32) isPairing])
  {
    CFStringRef v2 = @"An existing pairing session is already in progress.";
    uint64_t v4 = +[NSError hapErrorWithcode:4 description:@"An existing pairing session is already in progress." reason:0 suggestion:0 underlyingError:0];

    uint64_t v3 = (void *)v4;
  }
  id v5 = *(id *)(a1 + 32);
  id v6 = sub_100083F74();
  id v7 = v6;
  if (v3)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = sub_100083FD0(v5);
      *(_DWORD *)buf = 138543618;
      __int16 v17 = v8;
      __int16 v18 = 2112;
      CFStringRef v19 = v2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}@%@", buf, 0x16u);
    }
    [*(id *)(a1 + 32) _notifyDelegatesPairingStopped:v3];
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v9 = sub_100083FD0(v5);
      *(_DWORD *)buf = 138543362;
      __int16 v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}@Starting Pair Setup", buf, 0xCu);
    }
    uint64_t v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472;
    id v12 = sub_100065900;
    int v13 = &unk_100273040;
    uint64_t v14 = *(void *)(a1 + 32);
    id v15 = *(id *)(a1 + 48);
    sub_100065900((uint64_t)&v10);
    [*(id *)(a1 + 32) setPairingDisconnectionError:0, v10, v11];
    [*(id *)(a1 + 32) setPairing:1];
    [*(id *)(a1 + 32) _checkForAuthPrompt:[*(id *)(a1 + 48) requiresUserConsent]];
  }
}

void sub_100065900(uint64_t a1)
{
  CFStringRef v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    uint64_t v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = sub_100083FD0(0);
      [*(id *)(a1 + 40) requiresUserConsent];
      id v5 = HMFBooleanToString();
      int v6 = 138543874;
      id v7 = v4;
      __int16 v8 = 2112;
      id v9 = v5;
      __int16 v10 = 2048;
      uint64_t v11 = 2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Start pairing with BTLE accessory that needsConsent: %{key:needsConsent}@, protocolVersion: %{key:protocolVersion}ld", (uint8_t *)&v6, 0x20u);
    }
  }
}

void sub_100065A84(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  id v5 = sub_100083F74();
  int v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v7 = sub_100083FD0(v4);
      *(_DWORD *)buf = 138543618;
      id v15 = v7;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@Pairing failed, failed to discover the accessory with error: %@", buf, 0x16u);
    }
    __int16 v8 = +[NSError hapErrorWithcode:2 description:@"Pairing Failed." reason:@"Failed to discovery the accessory." suggestion:0 underlyingError:v3];
    [*(id *)(a1 + 32) _pairingCompletedWithError:v8];
  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v9 = sub_100083FD0(v4);
      __int16 v10 = HMFBooleanToString();
      *(_DWORD *)buf = 138543618;
      id v15 = v9;
      __int16 v16 = 2112;
      id v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "%{public}@Determining if MFi Pair Setup is supported, consentRequired: %@", buf, 0x16u);
    }
    uint64_t v11 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100065C94;
    v12[3] = &unk_100273D70;
    v12[4] = v11;
    char v13 = *(unsigned char *)(a1 + 40);
    [v11 _getPairingFeaturesWithCompletionHandler:v12];
  }
}

void sub_100065C94(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = *(id *)(a1 + 32);
    id v7 = sub_100083F74();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      __int16 v8 = sub_100083FD0(v6);
      *(_DWORD *)buf = 138543618;
      id v44 = v8;
      __int16 v45 = 2112;
      id v46 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@Pairing failed, failed to get the pairing features with error: %@", buf, 0x16u);
    }
    CFStringRef v9 = @"Failed to get the pairing features.";
    uint64_t v10 = 2;
    id v11 = v5;
    goto LABEL_5;
  }
  if (a2 != 5 && a2)
  {
    id v25 = *(void **)(a1 + 32);
    if (a2 != 1 || !*(unsigned char *)(a1 + 40))
    {
      [v25 continuePairingAfterAuthPrompt];
      goto LABEL_6;
    }
    if ([v25 _delegateRespondsToSelector:"accessoryServer:requestUserPermission:accessoryInfo:error:"])
    {
      id v26 = [HAPAccessoryInfo alloc];
      __int16 v27 = [*(id *)(a1 + 32) name];
      id v28 = [*(id *)(a1 + 32) category];
      __int16 v29 = [(HAPAccessoryInfo *)v26 initWithName:v27 manufacturer:0 modelName:0 category:v28 certificationStatus:0 denylisted:0 ppid:0];

      id v30 = [*(id *)(a1 + 32) delegateQueue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100066258;
      block[3] = &unk_100273040;
      void block[4] = *(void *)(a1 + 32);
      id v39 = v29;
      id v31 = v29;
      dispatch_async(v30, block);

      id v32 = v39;
LABEL_27:

      goto LABEL_6;
    }
    id v22 = *(id *)(a1 + 32);
    long long v23 = sub_100083F74();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      long long v24 = sub_100083FD0(v22);
      *(_DWORD *)buf = 138543362;
      id v44 = v24;
      goto LABEL_16;
    }
  }
  else
  {
    id v13 = *(id *)(a1 + 32);
    uint64_t v14 = sub_100083F74();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = sub_100083FD0(v13);
      __int16 v16 = sub_100022E44(a2);
      *(_DWORD *)buf = 138543618;
      id v44 = v15;
      __int16 v45 = 2112;
      id v46 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "%{public}@Incompatible auth %@, prompting user", buf, 0x16u);
    }
    if ([*(id *)(a1 + 32) _delegateRespondsToSelector:"accessoryServer:requestUserPermission:accessoryInfo:error:"])
    {
      id v17 = [HAPAccessoryInfo alloc];
      __int16 v18 = [*(id *)(a1 + 32) name];
      CFStringRef v19 = [*(id *)(a1 + 32) category];
      id v20 = [(HAPAccessoryInfo *)v17 initWithName:v18 manufacturer:0 modelName:0 category:v19 certificationStatus:0 denylisted:0 ppid:0];

      if (a2)
      {
        uint64_t v21 = 4;
      }
      else
      {
        id v33 = *(id *)(a1 + 32);
        uint64_t v34 = sub_100083F74();
        if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
        {
          __int16 v35 = sub_100083FD0(v33);
          *(_DWORD *)buf = 138543362;
          id v44 = v35;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%{public}@The accessory does not support pair setup auth, prompting for user permission to pair the accessory", buf, 0xCu);
        }
        uint64_t v21 = 0;
      }
      [*(id *)(a1 + 32) setWaitingForAuth:1];
      id v36 = [*(id *)(a1 + 32) delegateQueue];
      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472;
      v40[2] = sub_1000661FC;
      v40[3] = &unk_100273D48;
      uint64_t v37 = *(void *)(a1 + 32);
      long long v41 = v20;
      uint64_t v42 = v21;
      v40[4] = v37;
      id v31 = v20;
      dispatch_async(v36, v40);

      id v32 = v41;
      goto LABEL_27;
    }
    id v22 = *(id *)(a1 + 32);
    long long v23 = sub_100083F74();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      long long v24 = sub_100083FD0(v22);
      *(_DWORD *)buf = 138543362;
      id v44 = v24;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}@Pairing failed, the pairing requires additional authentication and the delegate does not support additional authentication requests", buf, 0xCu);
    }
  }

  CFStringRef v9 = @"The delegate is missing.";
  uint64_t v10 = 9;
  id v11 = 0;
LABEL_5:
  id v12 = +[NSError hapErrorWithcode:v10 description:@"Pairing Failed." reason:v9 suggestion:0 underlyingError:v11];
  [*(id *)(a1 + 32) _pairingCompletedWithError:v12];

LABEL_6:
}

void sub_1000661FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServer:*(void *)(a1 + 32) requestUserPermission:*(void *)(a1 + 48) accessoryInfo:*(void *)(a1 + 40) error:0];
}

void sub_100066258(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServer:*(void *)(a1 + 32) requestUserPermission:3 accessoryInfo:*(void *)(a1 + 40) error:0];
}

void sub_100066548(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [v5 userInfo];
  id v7 = [v6 objectForKeyedSubscript:NSUnderlyingErrorKey];

  if (!v7) {
    id v7 = v5;
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100066654;
  v10[3] = &unk_100273D48;
  v10[4] = *(void *)(a1 + 32);
  uint64_t v12 = a2;
  id v8 = v7;
  id v11 = v8;
  sub_100066654((uint64_t)v10);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v5);
  }
}

void sub_100066654(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = sub_100083FD0(0);
      id v5 = sub_100022E44(*(void *)(a1 + 48));
      id v6 = [*(id *)(a1 + 40) domain];
      id v7 = [*(id *)(a1 + 40) code];
      int v8 = 138544130;
      uint64_t v9 = v4;
      __int16 v10 = 2112;
      id v11 = v5;
      __int16 v12 = 2112;
      id v13 = v6;
      __int16 v14 = 2048;
      id v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Received pairing features of BTLE accessory with authMethod: %{key:authMethod}@,                                              error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v8, 0x2Au);
    }
  }
}

void sub_100066788(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = *(id *)(a1 + 32);
    id v6 = sub_100083F74();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = sub_100083FD0(v5);
      *(_DWORD *)buf = 138543362;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@Pairing failed, failed to read the Pairing Features characteristic", buf, 0xCu);
    }
    id v8 = +[NSError hapErrorWithcode:1 description:@"Pairing Failed." reason:@"Failed to read the Pairing Features characteristic" suggestion:0 underlyingError:v4];
    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  else
  {
    id v10 = 0;
    *(void *)buf = 0;
    [*(id *)(a1 + 32) _parsePairingFeaturesCharacteristic:*(void *)(a1 + 40) authMethod:buf error:&v10];
    id v8 = v10;
    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  v9();
}

id sub_100066B20(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100066B90;
  v3[3] = &unk_1002736C0;
  v3[4] = v1;
  return [v1 connectWithCompletionHandler:v3];
}

void sub_100066B90(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  if (v3)
  {
    id v5 = v4;
    id v6 = sub_100083F74();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      id v7 = sub_100083FD0(v5);
      *(_DWORD *)buf = 138543618;
      __int16 v18 = v7;
      __int16 v19 = 2112;
      id v20 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "%{public}@Pairing failed, failed to connect to the accessory with error: %@", buf, 0x16u);
    }
    id v8 = +[NSError hapErrorWithcode:2 description:@"Failed to connect to accessory." reason:0 suggestion:0 underlyingError:v3];
    [*(id *)(a1 + 32) _pairingCompletedWithError:v8];
  }
  else
  {
    [v4 setWaitingForAuth:0];
    id v9 = *(id *)(a1 + 32);
    id v10 = sub_100083F74();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = sub_100083FD0(v9);
      __int16 v12 = sub_100022E44((unint64_t)[*(id *)(a1 + 32) authMethod]);
      *(_DWORD *)buf = 138543618;
      __int16 v18 = v11;
      __int16 v19 = 2112;
      id v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%{public}@Starting the Pair Setup session with authMethods: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 32) setBadPairSetupCode:0];
    id v13 = [*(id *)(a1 + 32) _getPairSetupType];
    __int16 v14 = [*(id *)(a1 + 32) browser];
    id v8 = [v14 pairSetupSession:*(void *)(a1 + 32) pairSetupType:v13 enhancedEncryption:[*(id *)(a1 + 32) enhancedEncryption]];

    id v15 = [*(id *)(a1 + 32) browser];
    [v15 pauseScans];

    [*(id *)(a1 + 32) setPairSetupSession:v8];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_100066E38;
    v16[3] = &unk_100273018;
    v16[4] = *(void *)(a1 + 32);
    sub_100066E38((uint64_t)v16);
    [v8 start];
  }
}

void sub_100066E38(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = sub_100083FD0(0);
      id v5 = [*(id *)(a1 + 32) _getPairSetupType];
      int v6 = 138543618;
      id v7 = v4;
      __int16 v8 = 2048;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Starting pair setup session with BTLE accessory pairSetupType: %{key:pairSetupType}ld", (uint8_t *)&v6, 0x16u);
    }
  }
}

void sub_100066FB4(uint64_t a1)
{
  [*(id *)(a1 + 32) setWaitingForAuth:0];
  if ([*(id *)(a1 + 32) isPairing])
  {
    id v12 = +[NSError hapErrorWithcode:2 description:@"Pairing cancelled." reason:0 suggestion:0 underlyingError:0];
    id v2 = [*(id *)(a1 + 32) pairSetupSession];

    id v3 = *(void **)(a1 + 32);
    if (v2)
    {
      id v4 = [v3 pairSetupSession];
      [v4 stopWithError:v12];
    }
    else
    {
      [v3 _pairingCompletedWithError:v12];
    }
  }
  else if (![*(id *)(a1 + 32) pendingRemovePairing])
  {
    if ([*(id *)(a1 + 32) isPaired]) {
      goto LABEL_12;
    }
    id v5 = [*(id *)(a1 + 32) keyStore];
    int v6 = [*(id *)(a1 + 32) identifier];
    id v7 = [v5 readControllerPairingKeyForAccessory:v6 error:0];

    if (v7)
    {
LABEL_12:
      [*(id *)(a1 + 32) setPendingRemovePairing:1];
      uint64_t v8 = [*(id *)(a1 + 32) discoveryContext];
      if (!v8
        || (id v9 = (void *)v8,
            unsigned int v10 = [*(id *)(a1 + 32) isSecuritySessionOpen],
            v9,
            v10))
      {
        id v11 = *(void **)(a1 + 32);
        [v11 _removePairingOfAccessoryServerCancelledMidPairing];
      }
    }
  }
}

void sub_10006739C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10008CFD4(*(void **)(a1 + 32));
  id v5 = [v3 userInfo];
  id v6 = [v5 objectForKeyedSubscript:NSUnderlyingErrorKey];

  if (!v6) {
    id v6 = v3;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000674AC;
  v9[3] = &unk_100273418;
  v9[4] = *(void *)(a1 + 40);
  id v10 = v4;
  id v11 = v6;
  id v7 = v6;
  id v8 = v4;
  sub_1000674AC((uint64_t)v9);
}

void sub_1000674AC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = sub_100083FD0(0);
      uint64_t v5 = *(void *)(a1 + 40);
      id v6 = [*(id *)(a1 + 48) domain];
      id v7 = [*(id *)(a1 + 48) code];
      int v8 = 138544130;
      id v9 = v4;
      __int16 v10 = 2112;
      uint64_t v11 = v5;
      __int16 v12 = 2112;
      id v13 = v6;
      __int16 v14 = 2048;
      id v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Pair Setup operation failed for accessory in state: %{key:pairingState}@                                              with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v8, 0x2Au);
    }
  }
}

void sub_1000675CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 value];
  if (v5)
  {
    id v7 = *(id *)(a1 + 32);
    int v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = sub_100083FD0(v7);
      int v15 = 138543618;
      __int16 v16 = v9;
      __int16 v17 = 2112;
      id v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to send Pair Setup exchange data with error: %@", (uint8_t *)&v15, 0x16u);
    }
    id v10 = v5;
LABEL_5:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_11;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v10 = 0;
    goto LABEL_11;
  }
  id v11 = *(id *)(a1 + 32);
  __int16 v12 = sub_100083F74();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    id v13 = sub_100083FD0(v11);
    int v15 = 138543618;
    __int16 v16 = v13;
    __int16 v17 = 2112;
    id v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@The Pair Setup exchange response value, %@, is invalid", (uint8_t *)&v15, 0x16u);
  }
  id v10 = +[NSError hapErrorWithcode:12 description:@"Pairing Failed." reason:@"Invalid Pair Setup exchange response." suggestion:0 underlyingError:0];
  if (v10) {
    goto LABEL_5;
  }
LABEL_11:
  __int16 v14 = [*(id *)(a1 + 32) pairSetupSession];
  [v14 receivedSetupExchangeData:v6 error:v10];

  [*(id *)(a1 + 40) setValue:0];
}

void sub_100067A50(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) delegate];
  id v2 = *(void **)(a1 + 32);
  [v2 pairSetupBackoffTimeInterval];
  [v4 accessoryServer:v2 didReceiveBadPasswordThrottleAttemptsWithDelay:(uint64_t)v3];
}

void sub_100067AB8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServer:*(void *)(a1 + 32) promptUserForPasswordWithType:1];
}

void sub_100067BC8(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) setupCodeCompletionHandler];
  if (v4)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    if (v2)
    {
      double v3 = 0;
    }
    else
    {
      double v3 = +[NSError hapErrorWithcode:9 description:@"Invalid setup code." reason:@"The setup code is nil" suggestion:0 underlyingError:0];
      uint64_t v2 = *(void *)(a1 + 40);
    }
    v4[2](v4, v2, v3);
    [*(id *)(a1 + 32) setSetupCodeCompletionHandler:0];
  }
  [*(id *)(a1 + 32) _resumeConnectionIdleTimer];
}

void sub_100067FD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSDate date];
  [v4 timeIntervalSinceDate:*(void *)(a1 + 32)];
  uint64_t v6 = v5;

  id v7 = v3;
  int v8 = [v7 userInfo];
  id v9 = [v8 objectForKeyedSubscript:NSUnderlyingErrorKey];

  id v10 = v7;
  if (v9)
  {
    id v11 = [v7 userInfo];
    id v10 = [v11 objectForKeyedSubscript:NSUnderlyingErrorKey];
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100068158;
  v15[3] = &unk_100273D48;
  v15[4] = *(void *)(a1 + 40);
  uint64_t v17 = v6;
  id v12 = v10;
  id v16 = v12;
  sub_100068158((uint64_t)v15);
  id v13 = *(void **)(a1 + 40);
  if (v7)
  {
    __int16 v14 = [v13 authSession];
    [v13 authSession:v14 authComplete:v7];
  }
  else
  {
    [v13 authenticateAccessory];
  }
}

void sub_100068158(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = sub_100083FD0(0);
      uint64_t v5 = +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
      uint64_t v6 = [*(id *)(a1 + 40) domain];
      id v7 = [*(id *)(a1 + 40) code];
      int v8 = 138544130;
      id v9 = v4;
      __int16 v10 = 2112;
      id v11 = v5;
      __int16 v12 = 2112;
      id v13 = v6;
      __int16 v14 = 2048;
      id v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Received accessory info for accessory with duration: %{key:duration}@,                                                  error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v8, 0x2Au);
    }
  }
}

void sub_100068294(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) delegate];
  id v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [v3 authenticatedProtocolInfo];
  uint64_t v5 = [v4 modelName];
  [v6 accessoryServer:v3 validateCert:v2 model:v5];
}

void sub_1000686B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v22 = 0;
  id v3 = +[HAPPairingUtilities createAddPairingRequestForPairingIdentity:v2 error:&v22];
  id v4 = v22;
  if (v3)
  {
    __int16 v12 = _NSConcreteStackBlock;
    uint64_t v13 = 3221225472;
    __int16 v14 = sub_100068968;
    id v15 = &unk_100273E38;
    uint64_t v5 = *(void **)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 40);
    id v17 = v5;
    id v18 = *(id *)(a1 + 56);
    id v6 = objc_retainBlock(&v12);
    [*(id *)(a1 + 40) _sendPairingRequestData:v3 completionHandler:v6, v12, v13, v14, v15, v16];

    id v7 = v17;
LABEL_3:

    goto LABEL_4;
  }
  id v8 = *(id *)(a1 + 40);
  id v9 = sub_100083F74();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    __int16 v10 = sub_100083FD0(v8);
    *(_DWORD *)buf = 138543618;
    long long v24 = v10;
    __int16 v25 = 2112;
    id v26 = v4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@Failed to create add pairing request payload with error: %@", buf, 0x16u);
  }
  id v11 = *(NSObject **)(a1 + 48);
  if (v11 && *(void *)(a1 + 56))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000688E8;
    block[3] = &unk_100272F38;
    id v20 = v4;
    id v21 = *(id *)(a1 + 56);
    dispatch_async(v11, block);

    id v7 = v20;
    goto LABEL_3;
  }
LABEL_4:
}

void sub_1000688E8(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:12 description:@"Add pairing failed." reason:@"Failed to create add pairing request payload." suggestion:0 underlyingError:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100068968(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    id v25 = 0;
    unsigned __int8 v12 = +[HAPPairingUtilities parseAddPairingResponse:v5 error:&v25];
    id v11 = v25;
    if (v12)
    {
      uint64_t v13 = *(NSObject **)(a1 + 40);
      if (!v13) {
        goto LABEL_17;
      }
      __int16 v14 = *(void **)(a1 + 48);
      if (!v14) {
        goto LABEL_17;
      }
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100068DAC;
      v20[3] = &unk_100273330;
      id v15 = &v21;
      id v21 = v14;
      dispatch_async(v13, v20);
    }
    else
    {
      id v16 = *(id *)(a1 + 32);
      id v17 = sub_100083F74();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        id v18 = sub_100083FD0(v16);
        *(_DWORD *)buf = 138543618;
        id v30 = v18;
        __int16 v31 = 2112;
        id v32 = v11;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to add pairing, peer responded with error: %@", buf, 0x16u);
      }
      __int16 v19 = *(NSObject **)(a1 + 40);
      if (!v19 || !*(void *)(a1 + 48)) {
        goto LABEL_17;
      }
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100068D2C;
      v22[3] = &unk_100272F38;
      id v15 = &v23;
      id v23 = v11;
      id v24 = *(id *)(a1 + 48);
      dispatch_async(v19, v22);
    }
LABEL_17:

    goto LABEL_18;
  }
  id v7 = *(id *)(a1 + 32);
  id v8 = sub_100083F74();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    id v9 = sub_100083FD0(v7);
    *(_DWORD *)buf = 138543618;
    id v30 = v9;
    __int16 v31 = 2112;
    id v32 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to add pairing with error: %@", buf, 0x16u);
  }
  __int16 v10 = *(NSObject **)(a1 + 40);
  if (v10 && *(void *)(a1 + 48))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100068CAC;
    block[3] = &unk_100272F38;
    id v27 = v6;
    id v28 = *(id *)(a1 + 48);
    dispatch_async(v10, block);

    id v11 = v27;
    goto LABEL_17;
  }
LABEL_18:
}

void sub_100068CAC(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:12 description:@"Add pairing failed." reason:@"Add pairing write failed." suggestion:0 underlyingError:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100068D2C(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:12 description:@"Add pairing failed." reason:@"The peer failed to add the pairing." suggestion:0 underlyingError:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_100068DAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100068EC0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accessoryCache];
  id v3 = [v2 peripheralInfo];
  [v3 resetBroadcastKeyConfig];

  uint64_t v4 = *(void *)(a1 + 40);
  id v23 = 0;
  id v5 = +[HAPPairingUtilities createRemovePairingRequestForPairingIdentity:v4 error:&v23];
  id v6 = v23;
  if (v5)
  {
    uint64_t v13 = _NSConcreteStackBlock;
    uint64_t v14 = 3221225472;
    id v15 = sub_10006919C;
    id v16 = &unk_100273E38;
    uint64_t v17 = *(void *)(a1 + 32);
    id v18 = *(id *)(a1 + 48);
    id v19 = *(id *)(a1 + 56);
    id v7 = objc_retainBlock(&v13);
    [*(id *)(a1 + 32) _sendPairingRequestData:v5 completionHandler:v7 v13 v14 v15 v16 v17];

    id v8 = v18;
LABEL_3:

    goto LABEL_4;
  }
  id v9 = *(id *)(a1 + 32);
  __int16 v10 = sub_100083F74();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    id v11 = sub_100083FD0(v9);
    *(_DWORD *)buf = 138543618;
    id v25 = v11;
    __int16 v26 = 2112;
    id v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to create remove pairing request payload with error: %@", buf, 0x16u);
  }
  unsigned __int8 v12 = *(NSObject **)(a1 + 48);
  if (v12 && *(void *)(a1 + 56))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006911C;
    block[3] = &unk_100272F38;
    id v21 = v6;
    id v22 = *(id *)(a1 + 56);
    dispatch_async(v12, block);

    id v8 = v21;
    goto LABEL_3;
  }
LABEL_4:
}

void sub_10006911C(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:12 description:@"Remove pairing failed." reason:@"Failed to create remove pairing request payload." suggestion:0 underlyingError:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10006919C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    id v25 = 0;
    unsigned __int8 v12 = +[HAPPairingUtilities parseRemovePairingResponse:v5 error:&v25];
    id v11 = v25;
    if (v12)
    {
      uint64_t v13 = *(NSObject **)(a1 + 40);
      if (!v13) {
        goto LABEL_17;
      }
      uint64_t v14 = *(void **)(a1 + 48);
      if (!v14) {
        goto LABEL_17;
      }
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_1000695E0;
      v20[3] = &unk_100273330;
      id v15 = &v21;
      id v21 = v14;
      dispatch_async(v13, v20);
    }
    else
    {
      id v16 = *(id *)(a1 + 32);
      uint64_t v17 = sub_100083F74();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        id v18 = sub_100083FD0(v16);
        *(_DWORD *)buf = 138543618;
        id v30 = v18;
        __int16 v31 = 2112;
        id v32 = v11;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove pairing, peer responded with error: %@", buf, 0x16u);
      }
      id v19 = *(NSObject **)(a1 + 40);
      if (!v19 || !*(void *)(a1 + 48)) {
        goto LABEL_17;
      }
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100069560;
      v22[3] = &unk_100272F38;
      id v15 = &v23;
      id v23 = v11;
      id v24 = *(id *)(a1 + 48);
      dispatch_async(v19, v22);
    }
LABEL_17:

    goto LABEL_18;
  }
  id v7 = *(id *)(a1 + 32);
  id v8 = sub_100083F74();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    id v9 = sub_100083FD0(v7);
    *(_DWORD *)buf = 138543618;
    id v30 = v9;
    __int16 v31 = 2112;
    id v32 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to remove pairing with error: %@", buf, 0x16u);
  }
  __int16 v10 = *(NSObject **)(a1 + 40);
  if (v10 && *(void *)(a1 + 48))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000694E0;
    block[3] = &unk_100272F38;
    id v27 = v6;
    id v28 = *(id *)(a1 + 48);
    dispatch_async(v10, block);

    id v11 = v27;
    goto LABEL_17;
  }
LABEL_18:
}

void sub_1000694E0(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:12 description:@"Remove pairing failed." reason:@"Remove pairing write failed." suggestion:0 underlyingError:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100069560(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:12 description:@"Remove pairing failed." reason:@"The peer failed to remove the pairing." suggestion:0 underlyingError:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1000695E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100069930(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_10006996C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100069980(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = sub_100083F74();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id v6 = sub_100083FD0(v4);
    *(_DWORD *)buf = 138543618;
    id v38 = v6;
    __int16 v39 = 2112;
    id v40 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%{public}@Request to remove current controller completed with error %@", buf, 0x16u);
  }
  id v7 = v3;
  id v8 = [v4 browser];
  id v9 = [v4 identifier];
  [v8 deRegisterAccessoryWithIdentifier:v9];

  __int16 v10 = [v4 keyStore];
  id v11 = [v4 identifier];
  id v36 = 0;
  unsigned __int8 v12 = [v10 removeAccessoryKeyForName:v11 error:&v36];
  id v13 = v36;

  if ((v12 & 1) == 0)
  {
    id v14 = v4;
    id v15 = sub_100083F74();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      id v16 = sub_100083FD0(v14);
      *(_DWORD *)buf = 138543618;
      id v38 = v16;
      __int16 v39 = 2112;
      id v40 = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%{public}@Failed to remove the current controller keychain entry with error: %@", buf, 0x16u);
    }
  }
  uint64_t v17 = [v4 keyStore];
  id v18 = [v4 identifier];
  id v35 = v13;
  unsigned __int8 v19 = [v17 deletePeripheralIdentifierForAccessoryIdentifier:v18 error:&v35];
  id v20 = v35;

  if ((v19 & 1) == 0)
  {
    id v21 = v4;
    id v22 = sub_100083F74();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      id v23 = sub_100083FD0(v21);
      id v24 = [v21 identifier];
      *(_DWORD *)buf = 138543874;
      id v38 = v23;
      __int16 v39 = 2112;
      id v40 = v24;
      __int16 v41 = 2112;
      id v42 = v20;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "%{public}@Failed to remove the peripheral keychain entry for %@ with error: %@", buf, 0x20u);
    }
  }
  id v25 = *(NSObject **)(a1 + 32);
  if (v25)
  {
    __int16 v26 = *(void **)(a1 + 40);
    if (v26)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100069D70;
      block[3] = &unk_100273330;
      id v34 = v26;
      dispatch_async(v25, block);

      id v25 = *(NSObject **)(a1 + 32);
    }
  }
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  v29[2] = sub_100069D84;
  v29[3] = &unk_100273E60;
  id v30 = v25;
  id v27 = *(id *)(a1 + 48);
  id v31 = v7;
  id v32 = v27;
  id v28 = v7;
  [v4 disconnectWithCompletionHandler:v29];
}

uint64_t sub_100069D70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100069D84(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 32);
  if (v1)
  {
    id v3 = *(void **)(a1 + 48);
    if (v3)
    {
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      v4[2] = sub_100069E30;
      v4[3] = &unk_1002733F0;
      id v6 = v3;
      id v5 = *(id *)(a1 + 40);
      dispatch_async(v1, v4);
    }
  }
}

uint64_t sub_100069E30(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_100069F1C(id *a1)
{
  id v21 = 0;
  uint64_t v2 = +[HAPPairingUtilities createListPairingsRequest:&v21];
  id v3 = v21;
  if (v2)
  {
    id v4 = a1 + 4;
    objc_initWeak((id *)location, a1[4]);
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    id v13 = sub_10006A1B4;
    id v14 = &unk_100273EB0;
    objc_copyWeak(&v17, (id *)location);
    id v15 = a1[5];
    id v16 = a1[6];
    id v5 = objc_retainBlock(&v11);
    [*v4 _sendPairingRequestData:v2 completionHandler:v5, v11, v12, v13, v14];

    objc_destroyWeak(&v17);
    objc_destroyWeak((id *)location);
  }
  else
  {
    id v6 = a1[4];
    id v7 = sub_100083F74();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v8 = sub_100083FD0(v6);
      *(_DWORD *)id location = 138543618;
      *(void *)&location[4] = v8;
      __int16 v23 = 2112;
      id v24 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@Failed to create list pairings request payload with error: %@", location, 0x16u);
    }
    id v9 = a1[5];
    if (v9)
    {
      id v10 = a1[6];
      if (v10)
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10006A19C;
        block[3] = &unk_1002733F0;
        id v20 = v10;
        id v19 = v3;
        dispatch_async(v9, block);
      }
    }
  }
}

void sub_10006A178(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_10006A19C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_10006A1B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v8 = WeakRetained;
  if (!v6)
  {
    id v24 = 0;
    id v14 = +[HAPPairingUtilities parseListPairingsResponse:v5 error:&v24];
    id v13 = v24;
    if (!v14)
    {
      id v15 = v8;
      id v16 = sub_100083F74();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v17 = sub_100083FD0(v15);
        *(_DWORD *)buf = 138543618;
        __int16 v29 = v17;
        __int16 v30 = 2112;
        id v31 = v13;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}@Failed to list pairings, peer responded with error: %@", buf, 0x16u);
      }
    }
    id v18 = *(NSObject **)(a1 + 32);
    if (v18)
    {
      id v19 = *(void **)(a1 + 40);
      if (v19)
      {
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_10006A520;
        v20[3] = &unk_100273378;
        id v23 = v19;
        id v21 = v14;
        id v22 = v13;
        dispatch_async(v18, v20);
      }
    }

    goto LABEL_15;
  }
  id v9 = WeakRetained;
  id v10 = sub_100083F74();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    id v11 = sub_100083FD0(v9);
    *(_DWORD *)buf = 138543618;
    __int16 v29 = v11;
    __int16 v30 = 2112;
    id v31 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to get pairings with error: %@", buf, 0x16u);
  }
  uint64_t v12 = *(NSObject **)(a1 + 32);
  if (v12 && *(void *)(a1 + 40))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006A49C;
    block[3] = &unk_100272F38;
    id v26 = v6;
    id v27 = *(id *)(a1 + 40);
    dispatch_async(v12, block);

    id v13 = v26;
LABEL_15:
  }
}

void sub_10006A49C(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:12 description:@"List pairings failed." reason:@"List pairings write failed." suggestion:0 underlyingError:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_10006A520(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10006A744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006A768(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = WeakRetained;
  if (!v6)
  {
    uint64_t v12 = [v5 value];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v15 = v8;
      id v16 = sub_100083F74();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        id v17 = sub_100083FD0(v15);
        int v19 = 138543362;
        id v20 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "%{public}@Pairing operation failed, the response value is invalid", (uint8_t *)&v19, 0xCu);
      }
      if (*(void *)(a1 + 32))
      {
        id v18 = +[NSError hapErrorWithcode:12 description:@"Pairing operation failed." reason:@"Pairing response is invalid." suggestion:0 underlyingError:0];
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      }
      goto LABEL_10;
    }
    uint64_t v14 = *(void *)(a1 + 32);
    if (!v14)
    {
LABEL_10:

      goto LABEL_11;
    }
    id v13 = *(void (**)(void))(v14 + 16);
LABEL_9:
    v13();
    goto LABEL_10;
  }
  id v9 = WeakRetained;
  id v10 = sub_100083F74();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    id v11 = sub_100083FD0(v9);
    int v19 = 138543618;
    id v20 = v11;
    __int16 v21 = 2112;
    id v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to write pairing request data with error: %@", (uint8_t *)&v19, 0x16u);
  }
  if (*(void *)(a1 + 32))
  {
    uint64_t v12 = +[NSError hapErrorWithcode:12 description:@"Pairing operation failed." reason:@"Pairing write failed." suggestion:0 underlyingError:v6];
    id v13 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    goto LABEL_9;
  }
LABEL_11:
}

void sub_10006AB98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006ABB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = WeakRetained;
  if (!v3)
  {
    id v10 = [WeakRetained identifyCharacteristic];
    if (v10)
    {
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_10006AFF0;
      v18[3] = &unk_100273F00;
      id v11 = &v19;
      id v12 = *(id *)(a1 + 32);
      void v18[4] = v5;
      id v19 = v12;
      id v13 = objc_retainBlock(v18);
      [v5 _writeValue:&__kCFBooleanTrue toCharacteristic:v10 authorizationData:0 contextData:0 options:0 completionHandler:v13];
    }
    else
    {
      id v14 = v5;
      id v15 = sub_100083F74();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        id v16 = sub_100083FD0(v14);
        *(_DWORD *)buf = 138543362;
        id v26 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}@Identify failed, missing the Identify characteristic", buf, 0xCu);
      }
      if (!*(void *)(a1 + 32)) {
        goto LABEL_13;
      }
      id v17 = [v14 clientQueue];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10006AF70;
      v20[3] = &unk_100273330;
      id v11 = &v21;
      id v21 = *(id *)(a1 + 32);
      dispatch_async(v17, v20);
    }
LABEL_13:

    goto LABEL_14;
  }
  id v6 = WeakRetained;
  id v7 = sub_100083F74();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    id v8 = sub_100083FD0(v6);
    *(_DWORD *)buf = 138543618;
    id v26 = v8;
    __int16 v27 = 2112;
    id v28 = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@Cancelling operation, identity discovery failed with error: %@", buf, 0x16u);
  }
  if (*(void *)(a1 + 32))
  {
    id v9 = [v6 clientQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006AEF0;
    block[3] = &unk_100272F38;
    id v23 = v3;
    id v24 = *(id *)(a1 + 32);
    dispatch_async(v9, block);

    id v10 = v23;
    goto LABEL_13;
  }
LABEL_14:
}

void sub_10006AEF0(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:2 description:@"Identify failed." reason:@"Discovery of the Identify characteristic failed." suggestion:0 underlyingError:*(void *)(a1 + 32)];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10006AF70(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:9 description:@"Identify failed." reason:@"Missing Identify characteristic." suggestion:0 underlyingError:0];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10006AFF0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (*(void *)(a1 + 40))
  {
    id v5 = [*(id *)(a1 + 32) clientQueue];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10006B0BC;
    v6[3] = &unk_1002733F0;
    id v8 = *(id *)(a1 + 40);
    id v7 = v4;
    dispatch_async(v5, v6);
  }
}

uint64_t sub_10006B0BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10006B6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)(v30 - 128));
  _Unwind_Resume(a1);
}

void sub_10006B748(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v3 = WeakRetained;
  if (WeakRetained && ([WeakRetained isCancelled] & 1) == 0)
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10006B848;
    v6[3] = &unk_100273F28;
    objc_copyWeak(&v9, (id *)(a1 + 56));
    id v7 = v3;
    id v8 = *(id *)(a1 + 40);
    [v4 _reallySendRequest:v5 completionHandler:v6];

    objc_destroyWeak(&v9);
  }
}

void sub_10006B834(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10006B848(id *a1, void *a2)
{
  id v7 = a2;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (v7)
  {
    [a1[4] cancelWithError:v7];
  }
  else
  {
    id v4 = objc_alloc((Class)HMFTimer);
    [a1[5] timeoutInterval];
    id v5 = [v4 initWithTimeInterval:1 options:];
    [v5 setDelegate:WeakRetained];
    id v6 = [WeakRetained clientQueue];
    [v5 setDelegateQueue:v6];

    [a1[5] setResponseTimer:v5];
    [WeakRetained _requestResponseForRequest:a1[5]];
  }
}

void sub_10006B928(id *a1)
{
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  id v3 = objc_loadWeakRetained(a1 + 7);
  id v4 = [WeakRetained clientQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10006BA18;
  v7[3] = &unk_100273AC8;
  void v7[4] = WeakRetained;
  id v8 = a1[4];
  id v5 = a1[5];
  id v9 = v3;
  id v10 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_10006BA18(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _pendingResponseForRequest:*(void *)(a1 + 40)];
  id v3 = [*(id *)(a1 + 32) pendingRequests];
  [v3 removeObject:*(void *)(a1 + 40)];

  id v4 = [*(id *)(a1 + 32) pendingResponses];
  [v4 removeObject:v2];

  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    id v6 = [*(id *)(a1 + 48) error];
    (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v2, v6);
  }
  if (![*(id *)(a1 + 32) _outstandingRequests])
  {
    id v7 = *(id *)(a1 + 32);
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      id v9 = sub_100083FD0(v7);
      *(_DWORD *)buf = 138543362;
      id v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%{public}@Resuming connection idle timer as there are no outstanding requests", buf, 0xCu);
    }
    [*(id *)(a1 + 32) _resumeConnectionIdleTimer];
  }
  id v10 = [*(id *)(a1 + 48) error];
  if (v10 && ([*(id *)(a1 + 32) _shouldIgnoreRetryDiscoveryError:v10] & 1) == 0)
  {
    id v11 = *(void **)(a1 + 32);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10006BC1C;
    v12[3] = &unk_100273E10;
    v12[4] = v11;
    id v13 = *(id *)(a1 + 48);
    [v11 disconnectWithCompletionHandler:v12];
  }
}

void sub_10006BC1C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(id *)(a1 + 32);
    id v4 = sub_100083F74();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = sub_100083FD0(v3);
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@Failed to disconnect from the accessory, resetting the server", (uint8_t *)&v8, 0xCu);
    }
    id v6 = *(void **)(a1 + 32);
    id v7 = [*(id *)(a1 + 40) error];
    [v6 _resetWithError:v7];
  }
}

void sub_10006BDE8(id *a1)
{
  id v2 = a1[4];
  id v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    id v4 = sub_100083FD0(v2);
    id v5 = a1[5];
    *(_DWORD *)buf = 138543618;
    id v33 = v4;
    __int16 v34 = 2112;
    id v35 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%{public}@Sending request: %@", buf, 0x16u);
  }
  id v6 = a1[4];
  id v7 = sub_100083F74();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v8 = sub_100083FD0(v6);
    id v9 = [a1[5] characteristic];
    id v10 = [v9 type];
    id v11 = [a1[5] characteristic];
    id v12 = [v11 instanceID];
    id v13 = [a1[5] serialize];
    *(_DWORD *)buf = 138544130;
    id v33 = v8;
    __int16 v34 = 2112;
    id v35 = v10;
    __int16 v36 = 2112;
    uint64_t v37 = v12;
    __int16 v38 = 2112;
    __int16 v39 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}@Serialized Request '%@/%@' -> %@", buf, 0x2Au);
  }
  id v14 = [a1[4] _maximumControlWriteLengthForRequest:a1[5]];
  if (v14)
  {
    id v15 = v14;
    id v16 = [HAPBTLETransactionIdentifier alloc];
    id v17 = [a1[5] identifier];
    id v18 = -[HAPBTLETransactionIdentifier initWithUnsignedCharValue:](v16, "initWithUnsignedCharValue:", [v17 unsignedCharValue]);

    id v19 = [HAPBTLEControlOutputStream alloc];
    id v20 = [a1[5] serialize];
    id v21 = [(HAPBTLEControlOutputStream *)v19 initWithControlType:0 transactionIdentifier:v18 controlPayload:v20 mtuLength:v15 timeoutInterval:4.0];

    [(HAPBTLEControlOutputStream *)v21 setDelegate:a1[4]];
    id v26 = _NSConcreteStackBlock;
    uint64_t v27 = 3221225472;
    id v28 = sub_10006C1D4;
    __int16 v29 = &unk_100273FA0;
    id v30 = a1[4];
    id v31 = a1[6];
    [(HAPBTLEControlOutputStream *)v21 setCompletionHandler:&v26];
    [a1[4] _suspendConnectionIdleTimer:v26, v27, v28, v29, v30];
    [a1[5] setControlOutputStream:v21];
    id v22 = [a1[4] pendingRequests];
    [v22 addObject:a1[5]];

    [(HAPBTLEControlOutputStream *)v21 open];
LABEL_11:

    return;
  }
  id v23 = a1[4];
  id v24 = sub_100083F74();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    id v25 = sub_100083FD0(v23);
    *(_DWORD *)buf = 138543362;
    id v33 = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%{public}@Unable to determine the control write length", buf, 0xCu);
  }
  if (a1[6])
  {
    id v18 = +[NSError hapErrorWithcode:1 description:@"Control write failed." reason:@"Failed to determine the control write length" suggestion:0 underlyingError:0];
    (*((void (**)(void))a1[6] + 2))();
    goto LABEL_11;
  }
}

void sub_10006C1D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) clientQueue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10006C298;
  v7[3] = &unk_1002733F0;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_10006C298(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10006C684(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v13 = 0;
  id v4 = [v2 _encryptDataAndGenerateAuthTag:v3 error:&v13];
  id v5 = v13;
  if (v4)
  {
    id v6 = [*(id *)(a1 + 48) cbCharacteristic];
    id v7 = *(void **)(a1 + 32);
    if (v6)
    {
      id v8 = [v7 peripheral];
      [v8 writeValue:v4 forCharacteristic:v6 type:1];
    }
    else
    {
      id v8 = v7;
      id v10 = sub_100083F74();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        id v11 = sub_100083FD0(v8);
        id v12 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138543618;
        id v15 = v11;
        __int16 v16 = 2112;
        id v17 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Missing mapped characteristic for characteristic: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    id v6 = *(id *)(a1 + 32);
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = sub_100083FD0(v6);
      *(_DWORD *)buf = 138543618;
      id v15 = v9;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to encrypt raw data payload with error: %@", buf, 0x16u);
    }
  }
}

void sub_10006D8B4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServer:*(void *)(a1 + 32) didUpdateValuesForCharacteristic:*(void *)(a1 + 40) value:*(void *)(a1 + 48)];
}

void sub_10006E7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006E7F0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = WeakRetained;
  if (v6)
  {
    id v9 = WeakRetained;
    id v10 = sub_100083F74();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = sub_100083FD0(v9);
      int v18 = 138543618;
      id v19 = v11;
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to send Protocol Exchange error: %@", (uint8_t *)&v18, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    if ([v5 statusCode])
    {
      id v12 = v8;
      id v13 = sub_100083F74();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        id v14 = sub_100083FD0(v12);
        int v18 = 138543618;
        id v19 = v14;
        __int16 v20 = 1024;
        LODWORD(v21) = [v5 statusCode];
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "%{public}@Protocol Exchange failed with status: %d", (uint8_t *)&v18, 0x12u);
      }
      uint64_t v15 = *(void *)(a1 + 32);
      __int16 v16 = +[NSError errorWithDomain:@"HAPErrorDomain" code:8 userInfo:0];
      (*(void (**)(uint64_t, void *, void))(v15 + 16))(v15, v16, 0);
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 32);
      __int16 v16 = [v5 body];
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v16);
    }
  }
}

void sub_10006F800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10006F824(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = [v6 value];

  if (v5)
  {
    id v9 = WeakRetained;
    id v10 = sub_100083F74();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v11 = sub_100083FD0(v9);
      int v18 = 138543618;
      id v19 = v11;
      __int16 v20 = 2112;
      id v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%{public}@Failed to send security session exchange data with error: %@", (uint8_t *)&v18, 0x16u);
    }
    id v12 = v5;
LABEL_10:
    id v13 = v12;
    goto LABEL_11;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v14 = WeakRetained;
    uint64_t v15 = sub_100083F74();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      __int16 v16 = sub_100083FD0(v14);
      int v18 = 138543618;
      id v19 = v16;
      __int16 v20 = 2112;
      id v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}@The security session exchange response value, %@, is invalid", (uint8_t *)&v18, 0x16u);
    }
    id v12 = +[NSError hapErrorWithcode:12 description:@"Security session setup exchange failed." reason:@"Invalid Pair Verify exchange response." suggestion:0 underlyingError:0];
    goto LABEL_10;
  }
  id v13 = 0;
LABEL_11:
  uint64_t v17 = [WeakRetained securitySession];
  [v17 receivedSetupExchangeData:v8 error:v13];

  [*(id *)(a1 + 32) setValue:0];
}

void sub_10007000C(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) connectionState];
  +[NSDate date];
  int v18 = _NSConcreteStackBlock;
  uint64_t v19 = 3221225472;
  __int16 v20 = sub_100070328;
  id v21 = &unk_100274018;
  unint64_t v25 = v2;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v22 = v3;
  uint64_t v23 = v4;
  id v24 = v5;
  id v6 = objc_retainBlock(&v18);
  if (v2)
  {
    if ((v2 & 0xFFFFFFFFFFFFFFFDLL) == 1)
    {
      id v7 = *(id *)(a1 + 32);
      id v8 = sub_100083F74();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id v9 = sub_100083FD0(v7);
        *(_DWORD *)buf = 138543874;
        uint64_t v27 = v9;
        __int16 v28 = 2112;
        CFStringRef v29 = @"Trying to connect but a connection is already in progress";
        __int16 v30 = 2048;
        unint64_t v31 = v2;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@%@ %ld", buf, 0x20u);
      }
      id v10 = +[NSError hapErrorWithcode:4, @"Trying to connect but a connection is already in progress", 0, 0, 0, v18, v19, v20, v21, v22, v23 description reason suggestion underlyingError];
    }
    else
    {
      id v10 = 0;
    }
    ((void (*)(void ***, void *))v6[2])(v6, v10);
  }
  else
  {
    [*(id *)(a1 + 32) setConnectionCompletionHandler:v6, v18, v19, v20, v21, v22, v23];
    id v11 = *(id *)(a1 + 32);
    id v12 = sub_100083F74();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = sub_100083FD0(v11);
      id v14 = [*(id *)(a1 + 32) blePeripheral];
      uint64_t v15 = [v14 shortDescription];
      __int16 v16 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", [*(id *)(a1 + 32) connectReason]);
      *(_DWORD *)buf = 138543874;
      uint64_t v27 = v13;
      __int16 v28 = 2112;
      CFStringRef v29 = v15;
      __int16 v30 = 2112;
      unint64_t v31 = (unint64_t)v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%{public}@Connecting to the peripheral: %@. Connection Reason: %@", buf, 0x20u);
    }
    uint64_t v17 = [*(id *)(a1 + 32) browser];
    [v17 connectToBTLEAccessoryServer:*(void *)(a1 + 32)];

    [*(id *)(a1 + 32) _restartConnectionIdleTimer:2.0];
    [*(id *)(a1 + 32) setConnectionState:1];
  }
}

void sub_100070328(void *a1, void *a2)
{
  id v3 = a2;
  if (a1[7] != 2)
  {
    uint64_t v4 = +[NSDate date];
    [v4 timeIntervalSinceDate:a1[4]];
    uint64_t v6 = v5;

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100070420;
    v8[3] = &unk_100273D48;
    v8[4] = a1[5];
    uint64_t v10 = v6;
    id v9 = v3;
    sub_100070420((uint64_t)v8);
  }
  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
  }
}

void sub_100070420(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = sub_100083FD0(0);
      uint64_t v5 = +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
      uint64_t v6 = [*(id *)(a1 + 40) domain];
      id v7 = [*(id *)(a1 + 40) code];
      int v8 = 138544130;
      id v9 = v4;
      __int16 v10 = 2112;
      id v11 = v5;
      __int16 v12 = 2112;
      id v13 = v6;
      __int16 v14 = 2048;
      id v15 = v7;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Connected to BTLE accessory with duration: %{key:duration}@,                                                      error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v8, 0x2Au);
    }
  }
}

void sub_1000707C8(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = sub_100083FD0(0);
      uint64_t v5 = [*(id *)(a1 + 40) domain];
      id v6 = [*(id *)(a1 + 40) code];
      int v7 = 138543874;
      int v8 = v4;
      __int16 v9 = 2112;
      __int16 v10 = v5;
      __int16 v11 = 2048;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Disconnecting from BTLE accessory with duration:                                              error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v7, 0x20u);
    }
  }
}

void sub_1000709C0(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) connectionState];
  if (v2 == 2)
  {
    [*(id *)(a1 + 32) setConnectionCompletionHandler:*(void *)(a1 + 48)];
    id v3 = *(id *)(a1 + 32);
    uint64_t v4 = sub_100083F74();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = sub_100083FD0(v3);
      id v6 = [*(id *)(a1 + 32) blePeripheral];
      int v7 = [v6 shortDescription];
      *(_DWORD *)buf = 138543618;
      id v22 = v5;
      __int16 v23 = 2112;
      CFStringRef v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%{public}@Disconnecting from the peripheral: %@", buf, 0x16u);
    }
    id v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472;
    uint64_t v17 = sub_100070C64;
    int v18 = &unk_100273040;
    int v8 = *(void **)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 32);
    id v20 = v8;
    sub_100070C64((uint64_t)&v15);
    [*(id *)(a1 + 32) _suspendConnectionIdleTimer:v15, v16];
    __int16 v9 = [*(id *)(a1 + 32) browser];
    [v9 disconnectFromBTLEAccessoryServer:*(void *)(a1 + 32)];

    [*(id *)(a1 + 32) setConnectionState:3];
  }
  else
  {
    if ((v2 & 0xFFFFFFFFFFFFFFFDLL) == 1)
    {
      id v10 = *(id *)(a1 + 32);
      __int16 v11 = sub_100083F74();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        id v12 = sub_100083FD0(v10);
        *(_DWORD *)buf = 138543618;
        id v22 = v12;
        __int16 v23 = 2112;
        CFStringRef v24 = @"Trying to disconnect but a connection is already in progress";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%{public}@%@", buf, 0x16u);
      }
      id v13 = +[NSError hapErrorWithcode:4 description:@"Trying to disconnect but a connection is already in progress" reason:0 suggestion:0 underlyingError:0];
    }
    else
    {
      id v13 = 0;
    }
    uint64_t v14 = *(void *)(a1 + 48);
    if (v14) {
      (*(void (**)(uint64_t, void *))(v14 + 16))(v14, v13);
    }
  }
}

void sub_100070C64(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = sub_100083FD0(0);
      uint64_t v5 = [*(id *)(a1 + 40) domain];
      id v6 = [*(id *)(a1 + 40) code];
      int v7 = 138543874;
      int v8 = v4;
      __int16 v9 = 2112;
      id v10 = v5;
      __int16 v11 = 2048;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Disconnecting from BTLE accessory with duration:                                              error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v7, 0x20u);
    }
  }
}

id sub_100070E14(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateConnectionIdleTime:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1000710D0(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) peripheral];
  [v2 setDelegate:0];

  [*(id *)(a1 + 32) updatePeripheral:*(void *)(a1 + 40)];
  id v3 = [*(id *)(a1 + 32) peripheral];
  [v3 setDelegate:*(void *)(a1 + 32)];

  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);

  return _[v4 _handleConnectionWithError:v5];
}

void sub_100071438(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = sub_100083F74();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = sub_100083FD0(v3);
    uint64_t v6 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 138543874;
    CFStringRef v29 = v5;
    __int16 v30 = 2112;
    id v31 = v2;
    __int16 v32 = 2048;
    uint64_t v33 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "%{public}@The connection disconnected with error = %@ duration = %.3f seconds", buf, 0x20u);
  }
  if ([*(id *)(a1 + 40) connectionState] == (id)1 && !v2)
  {
    id v7 = *(id *)(a1 + 40);
    int v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      __int16 v9 = sub_100083FD0(v7);
      *(_DWORD *)buf = 138543362;
      CFStringRef v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%{public}@Received a disconnection while a connection was in progress", buf, 0xCu);
    }
    id v2 = +[NSError hapErrorWithcode:2 description:@"Connection failed." reason:@"Connection was cancelled." suggestion:0 underlyingError:0];
  }
  [*(id *)(a1 + 40) setConnectionState:0];
  __int16 v23 = _NSConcreteStackBlock;
  uint64_t v24 = 3221225472;
  unint64_t v25 = sub_1000717B0;
  id v26 = &unk_100273040;
  int8x16_t v22 = *(int8x16_t *)(a1 + 32);
  id v10 = (id)v22.i64[0];
  int8x16_t v27 = vextq_s8(v22, v22, 8uLL);
  sub_1000717B0((uint64_t)&v23);
  __int16 v11 = [*(id *)(a1 + 40) connectionCompletionHandler];
  id v12 = objc_retainBlock(v11);
  id v13 = v12;
  if (v12) {
    (*((void (**)(id, id))v12 + 2))(v12, v2);
  }

  [*(id *)(a1 + 40) setConnectionCompletionHandler:0];
  uint64_t v14 = [*(id *)(a1 + 40) discoveryContext];

  id v15 = *(void **)(a1 + 40);
  if (v14)
  {
    if ([v15 _cancelDiscoveryWithError:v2])
    {
      uint64_t v16 = 0;
      goto LABEL_17;
    }
  }
  else if (([v15 isPaired] & 1) == 0 {
         && ([*(id *)(a1 + 40) isPairing] & 1) == 0)
  }
  {
    id v19 = *(id *)(a1 + 40);
    id v20 = sub_100083F74();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      id v21 = sub_100083FD0(v19);
      *(_DWORD *)buf = 138543362;
      CFStringRef v29 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%{public}@The accessory is unpaired and no pairing operation is in progress, not removing server on disconnection", buf, 0xCu);
    }
    uint64_t v16 = 0;
    goto LABEL_16;
  }
  uint64_t v16 = 1;
LABEL_16:
  [*(id *)(a1 + 40) _resetWithError:v2 *(_OWORD *)&v22 v23 v24];
LABEL_17:
  id v17 = objc_retainBlock(*(id *)(a1 + 48));
  int v18 = v17;
  if (v17) {
    (*((void (**)(id, uint64_t))v17 + 2))(v17, v16);
  }
}

void sub_1000717B0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = sub_100083FD0(0);
      uint64_t v5 = [*(id *)(a1 + 40) domain];
      id v6 = [*(id *)(a1 + 40) code];
      int v7 = 138543874;
      int v8 = v4;
      __int16 v9 = 2112;
      id v10 = v5;
      __int16 v11 = 2048;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Disconnected from BTLE accessory with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v7, 0x20u);
    }
  }
}

void sub_100071E0C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _getProtocolInfoService];
  if (([v2 serviceProperties] & 4) != 0)
  {
    BOOL v5 = *(unsigned char *)(a1 + 56) == 2;
    id v6 = [*(id *)(a1 + 32) accessoryCache];
    int v7 = [v6 peripheralInfo];
    uint64_t v4 = [v7 broadcastKey];

    int v8 = [*(id *)(a1 + 32) accessoryCache];
    __int16 v9 = [v8 peripheralInfo];
    id v10 = [v9 keyUpdatedStateNumber];

    __int16 v11 = [*(id *)(a1 + 32) accessoryCache];
    id v12 = [v11 peripheralInfo];
    [v12 keyUpdatedTime];
    double v14 = v13;

    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int v16 = 0;
    double v17 = Current - v14;
    if (!*(unsigned char *)(a1 + 56) && v14 > 0.0 && v17 <= 604800.0)
    {
      if ([*(id *)(a1 + 32) connectReason] == 3)
      {
        int v16 = 0;
      }
      else
      {
        BOOL v5 = v4 == 0;
        id v18 = *(id *)(a1 + 32);
        id v19 = sub_100083F74();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          id v20 = sub_100083FD0(v18);
          id v21 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v4 length]);
          *(_DWORD *)buf = 138544130;
          __int16 v36 = v20;
          __int16 v37 = 2112;
          __int16 v38 = v21;
          __int16 v39 = 2112;
          id v40 = v10;
          __int16 v41 = 2048;
          double v42 = v17;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "%{public}@Rate limiting BC key generation. BC Key Info: %@ / %@ / %.2fs", buf, 0x2Au);
        }
        int v16 = 1;
      }
    }
    if (*(unsigned char *)(a1 + 56) == 1 && v14 > 0.0 && v17 <= 86400.0)
    {
      BOOL v5 = v4 == 0;
      id v22 = *(id *)(a1 + 32);
      __int16 v23 = sub_100083F74();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v24 = sub_100083FD0(v22);
        unint64_t v25 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v4 length]);
        *(_DWORD *)buf = 138544130;
        __int16 v36 = v24;
        __int16 v37 = 2112;
        __int16 v38 = v25;
        __int16 v39 = 2112;
        id v40 = v10;
        __int16 v41 = 2048;
        double v42 = v17;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "%{public}@Rate limiting BC key refresh. BC Key Info: %@ / %@ / %.2fs", buf, 0x2Au);
      }
      int v16 = 1;
    }
    if (!v16 || v5)
    {
      if (v5) {
        uint64_t v27 = 2;
      }
      else {
        uint64_t v27 = *(unsigned __int8 *)(a1 + 56);
      }
      [*(id *)(a1 + 32) _generateBroadcastKey:v27 queue:*(void *)(a1 + 40) withCompletionHandler:*(void *)(a1 + 48)];
    }
    else
    {
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_100072278;
      v28[3] = &unk_100274090;
      id v26 = *(NSObject **)(a1 + 40);
      id v31 = *(id *)(a1 + 48);
      id v29 = v4;
      id v30 = v10;
      double v32 = v14;
      dispatch_async(v26, v28);
    }
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100072254;
    block[3] = &unk_100273330;
    id v3 = *(NSObject **)(a1 + 40);
    id v34 = *(id *)(a1 + 48);
    dispatch_async(v3, block);
    uint64_t v4 = v34;
  }
}

uint64_t sub_100072254(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16))(0.0);
}

void sub_100072278(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:28 description:@"Not generating BC Keys" reason:@"Key generated in recent past" suggestion:@"Report the faulty accessory" underlyingError:0];
  (*(void (**)(double))(*(void *)(a1 + 48) + 16))(*(double *)(a1 + 56));
}

void sub_1000723F8(uint64_t a1, void *a2, void *a3, double a4, uint64_t a5, void *a6)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a6;
  double v13 = v12;
  if (!v12)
  {
    if (v11)
    {
      [*(id *)(a1 + 32) setStateNumber:v11];
      id v18 = [*(id *)(a1 + 32) browser];
      id v19 = [*(id *)(a1 + 32) identifier];
      [v18 updateCachedStateForIdentifier:v19 stateNumber:v11];
    }
    if (v10)
    {
      id v20 = *(void **)(a1 + 32);
      if (*(unsigned char *)(a1 + 56) == 2)
      {
        id v21 = [v20 accessoryCache];
        id v22 = [v21 peripheralInfo];
        [v22 keyUpdatedTime];
        double v24 = v23;

        double Current = 1.0;
        if (v24 <= 0.0) {
          double Current = CFAbsoluteTimeGetCurrent();
        }
        id v26 = [*(id *)(a1 + 32) browser];
        uint64_t v27 = [*(id *)(a1 + 32) identifier];
        [v26 updateBroadcastKeyForIdentifer:v27 key:v10 keyUpdatedStateNumber:v11 keyUpdatedTime:Current];

        id v14 = *(id *)(a1 + 32);
        id v15 = sub_100083F74();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          __int16 v28 = sub_100083FD0(v14);
          *(_DWORD *)buf = 138544130;
          id v47 = v28;
          __int16 v48 = 2112;
          id v49 = v10;
          __int16 v50 = 2112;
          id v51 = v11;
          __int16 v52 = 2048;
          double v53 = Current;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%{public}@Saving the read broadcast key: %@, S#: %@ time: %f", buf, 0x2Au);
        }
        double v13 = 0;
        goto LABEL_13;
      }
      if ([v20 _validateGeneratedBroadcastKey:v10])
      {
        double v35 = CFAbsoluteTimeGetCurrent();
        __int16 v36 = [*(id *)(a1 + 32) browser];
        __int16 v37 = [*(id *)(a1 + 32) identifier];
        [v36 updateBroadcastKeyForIdentifer:v37 key:v10 keyUpdatedStateNumber:v11 keyUpdatedTime:v35];

        id v14 = *(id *)(a1 + 32);
        id v15 = sub_100083F74();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          __int16 v38 = sub_100083FD0(v14);
          *(_DWORD *)buf = 138544130;
          id v47 = v38;
          __int16 v48 = 2112;
          id v49 = v10;
          __int16 v50 = 2112;
          id v51 = v11;
          __int16 v52 = 2048;
          double v53 = v35;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "%{public}@Saving the read broadcast key: %@, S#: %@ time: %f", buf, 0x2Au);
        }
        double v13 = 0;
        char v29 = 1;
        goto LABEL_14;
      }
    }
    double v13 = +[NSError hapErrorWithcode:9];
    if (!v13)
    {
      char v29 = 0;
      goto LABEL_15;
    }
  }
  id v14 = *(id *)(a1 + 32);
  id v15 = sub_100083F74();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    int v16 = sub_100083FD0(v14);
    double v17 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 56)];
    *(_DWORD *)buf = 138543874;
    id v47 = v16;
    __int16 v48 = 2112;
    id v49 = v17;
    __int16 v50 = 2112;
    id v51 = v13;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}@Failed to generate broadcast key with type: %@. Error: %@", buf, 0x20u);
  }
LABEL_13:
  char v29 = 0;
LABEL_14:

LABEL_15:
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_100072880;
  v39[3] = &unk_1002740E0;
  id v30 = *(NSObject **)(a1 + 40);
  id v31 = *(id *)(a1 + 48);
  id v40 = v10;
  id v41 = v11;
  double v44 = a4;
  char v45 = v29;
  id v42 = v13;
  id v43 = v31;
  id v32 = v10;
  id v33 = v11;
  id v34 = v13;
  dispatch_async(v30, v39);
}

uint64_t sub_100072880(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, double))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 72), *(void *)(a1 + 48), *(double *)(a1 + 64));
}

void sub_100072C6C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServerBTLE:*(void *)(a1 + 32) didReceiveEncryptedAndAuthenticatedPayload:*(void *)(a1 + 40) forCharacteristic:*(void *)(a1 + 48)];
}

void sub_100072DE4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServerBTLE:*(void *)(a1 + 32) didReceivePlaintextPayload:*(void *)(a1 + 40) forCharacteristic:*(void *)(a1 + 48)];
}

void sub_100072F5C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServerBTLE:*(void *)(a1 + 32) willSendEncryptedAndAuthenticatedPayload:*(void *)(a1 + 40) forCharacteristic:*(void *)(a1 + 48)];
}

void sub_1000730D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServerBTLE:*(void *)(a1 + 32) willSendPlaintextPayload:*(void *)(a1 + 40) forCharacteristic:*(void *)(a1 + 48)];
}

id sub_1000732E4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) state];
  if (result == (id)2)
  {
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    return _[v3 _handleDiscoveredServices:v4 error:v5];
  }
  return result;
}

id sub_100073410(id *a1)
{
  id result = [a1[4] state];
  if (result == (id)2)
  {
    id result = [a1[5] count];
    if (result)
    {
      id v3 = a1[6];
      uint64_t v4 = sub_100083F74();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = sub_100083FD0(v3);
        id v6 = a1[5];
        *(_DWORD *)buf = 138543618;
        int v16 = v5;
        __int16 v17 = 2112;
        id v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%{public}@Disconnecting on services changed: %@", buf, 0x16u);
      }
      if ([a1[6] isPairing])
      {
        int v7 = +[NSError errorWithDomain:@"HAPErrorDomain" code:24 userInfo:0];
        __int16 v9 = _NSConcreteStackBlock;
        uint64_t v10 = 3221225472;
        id v11 = sub_1000735C4;
        id v12 = &unk_100273040;
        id v13 = a1[6];
        id v14 = v7;
        id v8 = v7;
        sub_1000735C4((uint64_t)&v9);
        [a1[6] setPairingDisconnectionError:v8, v9, v10, v11, v12, v13];
      }
      return [a1[6] disconnectWithCompletionHandler:0 disconnectionError:0];
    }
  }
  return result;
}

void sub_1000735C4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = sub_100083FD0(0);
      uint64_t v5 = [*(id *)(a1 + 40) domain];
      id v6 = [*(id *)(a1 + 40) code];
      int v7 = 138543874;
      id v8 = v4;
      __int16 v9 = 2112;
      uint64_t v10 = v5;
      __int16 v11 = 2048;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@BTLE accessory modified its services with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v7, 0x20u);
    }
  }
}

id sub_1000737DC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) state];
  if (result == (id)2)
  {
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    return _[v3 _handleDiscoveredCharacteristicsForService:v4 error:v5];
  }
  return result;
}

id sub_100073930(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) state];
  if (result == (id)2)
  {
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    return _[v3 _handleDiscoveredCharactersitic:v4 error:v5];
  }
  return result;
}

id sub_100073A84(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) state];
  if (result == (id)2)
  {
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    return _[v3 _handleReadDescriptorValue:v4 error:v5];
  }
  return result;
}

id sub_100073BD8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) state];
  if (result == (id)2)
  {
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    return _[v3 _handleUpdateValueForCharacteristic:v4 error:v5];
  }
  return result;
}

void sub_100073D2C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == (id)2)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    [*(id *)(a1 + 40) characteristicWriteCompletionHandlers];
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    id v3 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v18;
      while (2)
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(void *)v18 != v5) {
            objc_enumerationMutation(v2);
          }
          int v7 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          id v8 = [v7 cbCharacteristic];
          unsigned __int8 v9 = [v8 isEqual:*(void *)(a1 + 48)];

          if (v9)
          {
            [*(id *)(a1 + 40) _handleWriteCompletionForCharacteristic:v7 error:*(void *)(a1 + 56)];
            goto LABEL_17;
          }
        }
        id v4 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }

    id v2 = *(id *)(a1 + 40);
    uint64_t v10 = sub_100083F74();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      __int16 v11 = sub_100083FD0(v2);
      uint64_t v12 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      double v23 = v11;
      __int16 v24 = 2112;
      uint64_t v25 = v12;
      id v13 = "%{public}@Received characteristic write confirmation from unmapped characteristic: %@";
      id v14 = v10;
      os_log_type_t v15 = OS_LOG_TYPE_INFO;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, buf, 0x16u);
    }
  }
  else
  {
    id v2 = *(id *)(a1 + 40);
    uint64_t v10 = sub_100083F74();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      __int16 v11 = sub_100083FD0(v2);
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      double v23 = v11;
      __int16 v24 = 2112;
      uint64_t v25 = v16;
      id v13 = "%{public}@Received characteristic write for invalid peripheral: %@";
      id v14 = v10;
      os_log_type_t v15 = OS_LOG_TYPE_DEBUG;
      goto LABEL_14;
    }
  }

LABEL_17:
}

void sub_100074070(uint64_t a1)
{
  if ([*(id *)(a1 + 32) state] == (id)2)
  {
    id v2 = *(id *)(a1 + 40);
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id v4 = sub_100083FD0(v2);
      uint64_t v5 = *(void *)(a1 + 48);
      int v11 = 138543618;
      uint64_t v12 = v4;
      __int16 v13 = 2112;
      uint64_t v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "%{public}@Received Notification updated confirmation for characteristics %@", (uint8_t *)&v11, 0x16u);
    }
    if (*(void *)(a1 + 56))
    {
      id v6 = *(id *)(a1 + 40);
      int v7 = sub_100083F74();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        id v8 = sub_100083FD0(v6);
        uint64_t v9 = *(void *)(a1 + 56);
        int v11 = 138543618;
        uint64_t v12 = v8;
        __int16 v13 = 2112;
        uint64_t v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "%{public}@Notification Update failed with error: %@", (uint8_t *)&v11, 0x16u);
      }
    }
    uint64_t v10 = [*(id *)(a1 + 40) _characteristicForCBCharacteristic:*(void *)(a1 + 48)];
    if (v10) {
      [*(id *)(a1 + 40) _handleHAPNotificationStateUpdateForCharacteristic:v10 error:*(void *)(a1 + 56)];
    }
  }
}

void sub_100074314(uint64_t a1)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = [*(id *)(a1 + 32) pendingRequests];
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v22 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v2);
        }
        int v7 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v8 = *(void **)(a1 + 40);
        uint64_t v9 = [v7 controlOutputStream];

        if (v8 == v9)
        {
          [*(id *)(a1 + 32) _sendControlPacket:*(void *)(a1 + 48) forRequest:v7 completionHandler:*(void *)(a1 + 56)];
          goto LABEL_14;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v14 objects:v22 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  id v10 = *(id *)(a1 + 32);
  int v11 = sub_100083F74();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    uint64_t v12 = sub_100083FD0(v10);
    uint64_t v13 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    long long v19 = v12;
    __int16 v20 = 2112;
    uint64_t v21 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%{public}@No matching request for control output stream: %@", buf, 0x16u);
  }
  if (*(void *)(a1 + 56))
  {
    id v2 = +[NSError hapErrorWithcode:9 description:@"Invalid parameter." reason:@"No matching request for control output stream." suggestion:0 underlyingError:0];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_14:
  }
}

void sub_1000745F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) completionHandler];
  if (v2)
  {
    id v3 = v2;
    v2[2](v2, *(void *)(a1 + 40));
    [*(id *)(a1 + 32) setCompletionHandler:0];
    id v2 = (void (**)(void, void))v3;
  }
}

void sub_10007470C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) completionHandler];
  if (v2)
  {
    id v3 = v2;
    v2[2](v2, 0);
    [*(id *)(a1 + 32) setCompletionHandler:0];
    id v2 = (void (**)(void, void))v3;
  }
}

void sub_100074850(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) pairSetupSession];

  if (v2 == v3)
  {
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = sub_100083F74();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      id v6 = sub_100083FD0(v4);
      int v7 = 138543362;
      id v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%{public}@Request to send Pair Setup session setup exchange", (uint8_t *)&v7, 0xCu);
    }
    [*(id *)(a1 + 40) _handlePairSetupSessionExchangeData:*(void *)(a1 + 48)];
  }
}

void sub_100074FA4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) pairSetupSession];

  if (v2 == v3)
  {
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    [v4 _pairingCompletedWithError:v5];
  }
}

void sub_1000750E4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) pairSetupSession];

  if (v2 == v3)
  {
    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    [v4 setProductData:v5];
  }
}

void sub_100075224(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) pairSetupSession];

  if (v2 == v3)
  {
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = sub_100083F74();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = sub_100083FD0(v4);
      int v7 = 138543362;
      id v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Request to get the pairing peer setup code", (uint8_t *)&v7, 0xCu);
    }
    [*(id *)(a1 + 40) _handlePairingSetupCodeRequestWithCompletionHandler:*(void *)(a1 + 48)];
  }
}

void sub_1000753CC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) pairSetupSession];

  if (v2 == v3)
  {
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = sub_100083F74();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = sub_100083FD0(v4);
      int v7 = 138543362;
      id v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Pair Setup session invalid setup code", (uint8_t *)&v7, 0xCu);
    }
    [*(id *)(a1 + 40) setBadPairSetupCode:1];
    [*(id *)(a1 + 40) setPairSetupBackoffTimeInterval:0.0];
  }
}

void sub_100075598(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) pairSetupSession];

  if (v2 == v3)
  {
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = sub_100083F74();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = sub_100083FD0(v4);
      uint64_t v7 = *(void *)(a1 + 48);
      int v8 = 138543618;
      uint64_t v9 = v6;
      __int16 v10 = 2048;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Pair Setup session request to backoff for %g seconds", (uint8_t *)&v8, 0x16u);
    }
    [*(id *)(a1 + 40) setBadPairSetupCode:1];
    [*(id *)(a1 + 40) setPairSetupBackoffTimeInterval:*(double *)(a1 + 48)];
  }
}

void sub_100075788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000757A0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) protocolInfoServiceSignatureCharacteristics];
  id v3 = [v2 instanceID];
  id v4 = +[HAPProtocolMessages constructInfoRequest:v3 outTID:*(void *)(*(void *)(a1 + 48) + 8) + 24];

  if (v4)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000758E0;
    v9[3] = &unk_100274158;
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = *(id *)(a1 + 40);
    v9[4] = *(void *)(a1 + 32);
    id v10 = v6;
    uint64_t v11 = *(void *)(a1 + 48);
    [v5 _sendProtocolInfoServiceExchangeData:v4 completion:v9];
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = +[NSError errorWithDomain:@"HAPErrorDomain" code:1 userInfo:0];
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
}

void sub_1000758E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    id v4 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_5:
    v4();
    return;
  }
  uint64_t v5 = +[HAPProtocolMessages parseInfoResponse:a3 expectedTID:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) withHeader:0];
  [*(id *)(a1 + 32) setAuthenticatedProtocolInfo:v5];

  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = [v6 authenticatedProtocolInfo];
  LODWORD(v6) = [v6 _validateProtocolInfo:v7];

  int v8 = *(void **)(a1 + 32);
  if (v6)
  {
    uint64_t v9 = [v8 authenticatedProtocolInfo];
    id v10 = [v9 protocolVersion];
    [*(id *)(a1 + 32) setVersion:v10];

    id v4 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    goto LABEL_5;
  }
  id v11 = v8;
  uint64_t v12 = sub_100083F74();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    uint64_t v13 = sub_100083FD0(v11);
    long long v14 = [*(id *)(a1 + 32) authenticatedProtocolInfo];
    int v17 = 138543618;
    long long v18 = v13;
    __int16 v19 = 2112;
    __int16 v20 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%{public}@Protocol Info does not match: %@ Accessory out of compliance", (uint8_t *)&v17, 0x16u);
  }
  uint64_t v15 = *(void *)(a1 + 40);
  long long v16 = +[NSError errorWithDomain:@"HAPErrorDomain" code:7 userInfo:0];
  (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
}

void sub_100075DE8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) authSession];
  [v1 handleAuthExchangeData:0 withHeader:0];
}

void sub_100075F94(uint64_t a1)
{
  [*(id *)(a1 + 32) setWaitingForAuth:0];
  if ([*(id *)(a1 + 32) authMethod] == (id)2)
  {
    id v6 = [*(id *)(a1 + 32) authSession];
    [v6 continueAuthAfterValidation:*(unsigned __int8 *)(a1 + 40)];

    return;
  }
  if (!*(unsigned char *)(a1 + 40)) {
    goto LABEL_14;
  }
  if ([*(id *)(a1 + 32) authMethod] == (id)4)
  {
    id v2 = *(void **)(a1 + 32);
    _[v2 _continuePairingAfterMFiCertValidation];
    return;
  }
  if (!*(unsigned char *)(a1 + 40))
  {
LABEL_14:
    id v4 = +[NSError hapErrorWithcode:16 description:@"Pairing Failed." reason:@"User cancelled pairing" suggestion:0 underlyingError:0];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_100076134;
    v7[3] = &unk_100273040;
    void v7[4] = *(void *)(a1 + 32);
    id v8 = v4;
    id v5 = v4;
    sub_100076134((uint64_t)v7);
    [*(id *)(a1 + 32) _pairingCompletedWithError:v5];

    return;
  }
  id v3 = *(void **)(a1 + 32);

  [v3 continuePairingAfterAuthPrompt];
}

void sub_100076134(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = sub_100083FD0(0);
      id v5 = [*(id *)(a1 + 40) domain];
      id v6 = [*(id *)(a1 + 40) code];
      int v7 = 138543874;
      id v8 = v4;
      __int16 v9 = 2112;
      id v10 = v5;
      __int16 v11 = 2048;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to authenticate accessory with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v7, 0x20u);
    }
  }
}

void sub_1000763A8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) authSession];
  [v2 sendTokenUpdateRequest:*(void *)(a1 + 40)];
}

void sub_100076484(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) authSession];
  [v2 resetSession];

  [*(id *)(a1 + 32) setAuthenticated:1];
  [*(id *)(a1 + 32) setPairing:0];
  id v3 = [*(id *)(a1 + 32) _getPairSetupType];
  id v4 = [*(id *)(a1 + 32) browser];
  [v4 pairSetupSession:*(void *)(a1 + 32) pairSetupType:v3 enhancedEncryption:[*(id *)(a1 + 32) enhancedEncryption]];
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  [*(id *)(a1 + 32) setPairSetupSession:v5];
}

void sub_10007667C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:NSUnderlyingErrorKey];

  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    id v4 = v3;
  }
  else {
    id v4 = 0;
  }
  id v9 = v4;

  id v5 = *(id *)(a1 + 32);
  if ([v9 isHAPError] && objc_msgSend(v9, "code") == (id)1)
  {
    id v6 = [*(id *)(a1 + 32) domain];
    uint64_t v7 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v6, [*(id *)(a1 + 32) code], 0);

    id v5 = (id)v7;
  }
  id v8 = [*(id *)(a1 + 40) delegate];
  [v8 accessoryServer:*(void *)(a1 + 40) didStopPairingWithError:v5];
}

id sub_10007685C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000768D0;
  v4[3] = &unk_1002741A8;
  void v4[4] = v2;
  return [v2 _sendProtocolInfoServiceExchangeData:v1 completion:v4];
}

void sub_1000768D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  if (v5)
  {
    id v8 = v7;
    id v9 = sub_100083F74();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      id v10 = sub_100083FD0(v8);
      *(_DWORD *)buf = 138543618;
      uint64_t v25 = v10;
      __int16 v26 = 2112;
      id v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@SW Auth failed, sending auth exchange with error: %@", buf, 0x16u);
    }
    id v11 = v5;
    id v12 = [v11 userInfo];
    uint64_t v13 = [v12 objectForKeyedSubscript:NSUnderlyingErrorKey];

    long long v14 = v11;
    if (v13)
    {
      uint64_t v15 = [v11 userInfo];
      long long v14 = [v15 objectForKeyedSubscript:NSUnderlyingErrorKey];
    }
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100076B74;
    v22[3] = &unk_100273040;
    void v22[4] = *(void *)(a1 + 32);
    id v16 = v14;
    id v23 = v16;
    sub_100076B74((uint64_t)v22);
    int v17 = [*(id *)(a1 + 32) authSession];
    [v17 resetSession];

    if ([*(id *)(a1 + 32) _delegateRespondsToSelector:"accessoryServer:didFinishAuth:"])
    {
      long long v18 = [*(id *)(a1 + 32) delegateQueue];
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_100076C8C;
      v20[3] = &unk_100273040;
      void v20[4] = *(void *)(a1 + 32);
      id v21 = v11;
      dispatch_async(v18, v20);
    }
  }
  else
  {
    __int16 v19 = [v7 authSession];
    [v19 handleAuthExchangeData:v6 withHeader:0];
  }
}

void sub_100076B74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = sub_100083FD0(0);
      id v5 = [*(id *)(a1 + 40) domain];
      id v6 = [*(id *)(a1 + 40) code];
      int v7 = 138543874;
      id v8 = v4;
      __int16 v9 = 2112;
      id v10 = v5;
      __int16 v11 = 2048;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Failed to send auth data to accessory with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v7, 0x20u);
    }
  }
}

void sub_100076C8C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServer:*(void *)(a1 + 32) didFinishAuth:*(void *)(a1 + 40)];
}

void sub_100076DE0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  char v3 = objc_opt_respondsToSelector();

  id v4 = *(void **)(a1 + 32);
  if (v3)
  {
    [v4 _suspendConnectionIdleTimer];
    [*(id *)(a1 + 32) setWaitingForAuth:1];
    id v5 = [*(id *)(a1 + 32) delegateQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100076FC0;
    block[3] = &unk_100273418;
    id v6 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v14 = v6;
    id v15 = *(id *)(a1 + 48);
    dispatch_async(v5, block);
  }
  else
  {
    id v7 = v4;
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      __int16 v9 = sub_100083FD0(v7);
      *(_DWORD *)buf = 138543362;
      int v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Delegate does not implement validateUUID:token1:token2:", buf, 0xCu);
    }
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    id v12 = +[NSError errorWithDomain:@"HAPErrorDomain" code:1 userInfo:0];
    [v10 authSession:v11 authComplete:v12];
  }
}

void sub_100076FC0(uint64_t a1)
{
  id v7 = [*(id *)(a1 + 32) delegate];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = [v2 authenticatedProtocolInfo];
  id v6 = [v5 modelName];
  [v7 accessoryServer:v2 validateUUID:v3 token:v4 model:v6];
}

void sub_100077160(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  char v3 = objc_opt_respondsToSelector();

  uint64_t v4 = *(void **)(a1 + 32);
  if (v3)
  {
    id v5 = [v4 delegateQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007732C;
    block[3] = &unk_100273418;
    id v6 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v14 = v6;
    id v15 = *(id *)(a1 + 48);
    dispatch_async(v5, block);
  }
  else
  {
    id v7 = v4;
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      __int16 v9 = sub_100083FD0(v7);
      *(_DWORD *)buf = 138543362;
      int v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Delegate does not implement accessoryServer:authenticateUUID:token:", buf, 0xCu);
    }
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    id v12 = +[NSError errorWithDomain:@"HAPErrorDomain" code:1 userInfo:0];
    [v10 authSession:v11 authComplete:v12];
  }
}

void sub_10007732C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServer:*(void *)(a1 + 32) authenticateUUID:*(void *)(a1 + 40) token:*(void *)(a1 + 48)];
}

void sub_100077484(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  char v3 = objc_opt_respondsToSelector();

  uint64_t v4 = *(void **)(a1 + 32);
  if (v3)
  {
    id v5 = [v4 delegateQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100077650;
    block[3] = &unk_100273418;
    id v6 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    id v14 = v6;
    id v15 = *(id *)(a1 + 48);
    dispatch_async(v5, block);
  }
  else
  {
    id v7 = v4;
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      __int16 v9 = sub_100083FD0(v7);
      *(_DWORD *)buf = 138543362;
      int v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Delegate does not implement accessoryServer:confirmUUID:token:)", buf, 0xCu);
    }
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 56);
    id v12 = +[NSError errorWithDomain:@"HAPErrorDomain" code:1 userInfo:0];
    [v10 authSession:v11 authComplete:v12];
  }
}

void sub_100077650(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServer:*(void *)(a1 + 32) confirmUUID:*(void *)(a1 + 40) token:*(void *)(a1 + 48)];
}

void sub_10007775C(uint64_t a1)
{
  id v2 = *(id *)(a1 + 32);
  char v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = sub_100083FD0(v2);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    id v22 = v4;
    __int16 v23 = 2112;
    uint64_t v24 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "%{public}@Auth Complete with status: %@", buf, 0x16u);
  }
  id v6 = [*(id *)(a1 + 40) userInfo];
  id v7 = [v6 objectForKeyedSubscript:NSUnderlyingErrorKey];

  if (!v7) {
    id v7 = *(id *)(a1 + 40);
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100077A00;
  v19[3] = &unk_100273040;
  v19[4] = *(void *)(a1 + 32);
  id v8 = v7;
  id v20 = v8;
  sub_100077A00((uint64_t)v19);
  __int16 v9 = [*(id *)(a1 + 32) delegate];
  char v10 = objc_opt_respondsToSelector();

  uint64_t v11 = *(void **)(a1 + 32);
  if (v10)
  {
    id v12 = [v11 delegateQueue];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_100077B18;
    v17[3] = &unk_100273040;
    uint64_t v13 = *(void **)(a1 + 40);
    v17[4] = *(void *)(a1 + 32);
    id v18 = v13;
    dispatch_async(v12, v17);
  }
  else
  {
    id v14 = v11;
    id v15 = sub_100083F74();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v16 = sub_100083FD0(v14);
      *(_DWORD *)buf = 138543362;
      id v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}@Delegate does not implement accessoryServer:didFinishAuth:", buf, 0xCu);
    }
  }
}

void sub_100077A00(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) pairingActivity];
  if (v2)
  {
    char v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = sub_100083FD0(0);
      uint64_t v5 = [*(id *)(a1 + 40) domain];
      id v6 = [*(id *)(a1 + 40) code];
      int v7 = 138543874;
      id v8 = v4;
      __int16 v9 = 2112;
      char v10 = v5;
      __int16 v11 = 2048;
      id v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@Authenticating accessory with error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v7, 0x20u);
    }
  }
}

void sub_100077B18(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 accessoryServer:*(void *)(a1 + 32) didFinishAuth:*(void *)(a1 + 40)];
}

void sub_10007814C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  char v3 = [*(id *)(a1 + 40) securitySession];

  if (v2 == v3)
  {
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = sub_100083F74();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = sub_100083FD0(v4);
      int v7 = 138543362;
      id v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Request to send security session setup exchange", (uint8_t *)&v7, 0xCu);
    }
    [*(id *)(a1 + 40) _handleSecuritySessionSetupExchangeData:*(void *)(a1 + 48)];
  }
}

void sub_1000782F4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  char v3 = [*(id *)(a1 + 40) securitySession];

  if (v2 == v3)
  {
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = sub_100083F74();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = sub_100083FD0(v4);
      int v7 = 138543362;
      id v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Security session is opening", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_100078494(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  char v3 = [*(id *)(a1 + 40) securitySession];

  if (v2 == v3)
  {
    id v4 = [*(id *)(a1 + 40) accessoryCache];
    [v4 setLastKeyBagIdentityIndexFailingPV:0];

    uint64_t v5 = *(void **)(a1 + 40);
    id v6 = [v5 identifier];
    [v5 associateAccessoryWithControllerKeyUsingAccessoryIdentifier:v6];

    id v7 = *(id *)(a1 + 40);
    id v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v9 = sub_100083FD0(v7);
      id v10 = [*(id *)(a1 + 32) resumeSessionID];
      int v11 = 138543618;
      id v12 = v9;
      __int16 v13 = 2048;
      id v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%{public}@Security session is open with resumeSessionID %llu", (uint8_t *)&v11, 0x16u);
    }
    [*(id *)(a1 + 40) submitPairVerifyMetricWithError:0];
    [*(id *)(a1 + 40) updateResumeSessionID:[*(id *)(a1 + 32) resumeSessionID]];
    [*(id *)(a1 + 40) _resumeAllOperations];
  }
}

void sub_10007876C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  char v3 = [*(id *)(a1 + 40) securitySession];

  if (v2 == v3)
  {
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = sub_100083F74();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = sub_100083FD0(v4);
      uint64_t v7 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138543618;
      int v17 = v6;
      __int16 v18 = 2112;
      uint64_t v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "%{public}@Security session did close with error: %@", buf, 0x16u);
    }
    [*(id *)(a1 + 40) submitPairVerifyMetricWithError:*(void *)(a1 + 48)];
    [*(id *)(a1 + 40) setSecuritySession:0];
    if (([*(id *)(a1 + 40) _shouldIgnoreRetryDiscoveryError:*(void *)(a1 + 48)] & 1) == 0)
    {
      id v8 = [*(id *)(a1 + 40) keyBag];
      id v9 = [v8 getCurrentIndexInBag];

      unsigned int v10 = [*(id *)(a1 + 40) shouldRetryPVDueToAuthenticationError:*(void *)(a1 + 48)];
      int v11 = *(void **)(a1 + 40);
      if (v10)
      {
        id v12 = [v11 accessoryCache];
        __int16 v13 = +[NSNumber numberWithInteger:v9];
        [v12 setLastKeyBagIdentityIndexFailingPV:v13];

        id v14 = [*(id *)(a1 + 40) clientQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100078988;
        block[3] = &unk_100273018;
        void block[4] = *(void *)(a1 + 40);
        dispatch_async(v14, block);
      }
      else
      {
        [v11 disconnectWithCompletionHandler:0];
        if (*(void *)(a1 + 48))
        {
          [*(id *)(a1 + 40) _cancelAllQueuedOperationsWithError:];
          [*(id *)(a1 + 40) _resumeAllOperations];
          [*(id *)(a1 + 40) updateResumeSessionID:0];
        }
      }
    }
  }
}

id sub_100078988(uint64_t a1)
{
  return [*(id *)(a1 + 32) _establishSecureSession];
}

void sub_100078C08(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 32) pairingActivity];
  if (v1)
  {
    id v2 = sub_100083F74();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      char v3 = sub_100083FD0(0);
      int v4 = 138543874;
      uint64_t v5 = v3;
      __int16 v6 = 2112;
      CFStringRef v7 = @"HAPErrorDomain";
      __int16 v8 = 2048;
      uint64_t v9 = 24;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}@Disconnecting from accessory due to connection timeout with                                             error: %{key:errorDomain}@ %{key:errorCode}ld", (uint8_t *)&v4, 0x20u);
    }
  }
}

void sub_100078E30(id a1)
{
  uint64_t v1 = sub_100083EA4(@"BLEServer2x", @"com.apple.dockaccessoryd");
  id v2 = (void *)qword_1002AD6A8;
  qword_1002AD6A8 = v1;
}

int64_t sub_1000793C8(id a1, NSNumber *a2, NSNumber *a3)
{
  return [(NSNumber *)a2 compare:a3];
}

void sub_10007983C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100079E40(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100079F08(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10007ACBC(_Unwind_Exception *a1)
{
}

__CFString *sub_10007ACE0(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE)
  {
    id v2 = 0;
  }
  else
  {
    id v2 = *off_100274220[a1 - 1];
  }
  return v2;
}

uint64_t sub_10007AD38(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:@"uint8"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:@"uint16"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:@"uint32"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:@"uint64"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:@"int8"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqualToString:@"int16"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqualToString:@"int"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqualToString:@"int64"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqualToString:@"BOOL"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqualToString:@"float"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqualToString:@"string"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqualToString:@"data"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqualToString:@"tlv8"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqualToString:@"array"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqualToString:@"dict"])
  {
    uint64_t v2 = 15;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

__CFString *sub_10007AF40(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = *off_100274298[a1 - 1];
  }
  return v2;
}

void sub_10007C8A0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10007CE70(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:9 description:@"Invalid parameter." reason:@"Characteristic is a required paramter." suggestion:0 underlyingError:0];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10007CEF0(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:9 description:@"Invalid parameter." reason:@"The timeout must not be negative." suggestion:0 underlyingError:0];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10007CF70(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:14 description:@"Read failed." reason:@"There is no server present for the accessory." suggestion:0 underlyingError:0];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10007CFF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 40))
  {
    id v11 = v5;
    __int16 v6 = [a2 firstObject];
    CFStringRef v7 = [v6 characteristic];
    if ([v7 isEqual:*(void *)(a1 + 32)])
    {
      __int16 v8 = [v6 error];

      if (v8)
      {
        id v9 = [v6 error];
LABEL_7:
        unsigned int v10 = v9;
        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

        id v5 = v11;
        goto LABEL_8;
      }
    }
    else
    {
    }
    id v9 = v11;
    goto LABEL_7;
  }
LABEL_8:
}

void sub_10007D448(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:9 description:@"Invalid parameter." reason:@"One or more target characteristics are required." suggestion:0 underlyingError:0];
  char v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = sub_100083FD0(0);
    id v5 = [v2 domain];
    int v6 = 138543874;
    CFStringRef v7 = v4;
    __int16 v8 = 2112;
    id v9 = v5;
    __int16 v10 = 2048;
    id v11 = [v2 code];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v6, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007D594(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:9 description:@"Invalid parameter." reason:@"The timeout must not be negative." suggestion:0 underlyingError:0];
  char v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = sub_100083FD0(0);
    id v5 = [v2 domain];
    int v6 = 138543874;
    CFStringRef v7 = v4;
    __int16 v8 = 2112;
    id v9 = v5;
    __int16 v10 = 2048;
    id v11 = [v2 code];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v6, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007D6E0(uint64_t a1)
{
  id v2 = +[NSError hapErrorWithcode:14 description:@"Read failed." reason:@"There is no server present for the accessory." suggestion:0 underlyingError:0];
  char v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = sub_100083FD0(0);
    id v5 = [v2 domain];
    int v6 = 138543874;
    CFStringRef v7 = v4;
    __int16 v8 = 2112;
    id v9 = v5;
    __int16 v10 = 2048;
    id v11 = [v2 code];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v6, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007DC74(uint64_t a1)
{
  id v4 = +[NSError hapErrorWithcode:9 description:@"Invalid parameter." reason:@"Characteristic write request is a required paramter." suggestion:0 underlyingError:0];
  uint64_t v2 = *(void *)(a1 + 40);
  char v3 = [*(id *)(a1 + 32) characteristic];
  (*(void (**)(uint64_t, void *, id))(v2 + 16))(v2, v3, v4);
}

void sub_10007DD0C(uint64_t a1)
{
  id v4 = +[NSError hapErrorWithcode:9 description:@"Invalid parameter." reason:@"The timeout must not be negative." suggestion:0 underlyingError:0];
  uint64_t v2 = *(void *)(a1 + 40);
  char v3 = [*(id *)(a1 + 32) characteristic];
  (*(void (**)(uint64_t, void *, id))(v2 + 16))(v2, v3, v4);
}

void sub_10007DDA4(uint64_t a1)
{
  id v4 = +[NSError hapErrorWithcode:13 description:@"Write failed." reason:@"There is no server present for the accessory." suggestion:0 underlyingError:0];
  uint64_t v2 = *(void *)(a1 + 40);
  char v3 = [*(id *)(a1 + 32) characteristic];
  (*(void (**)(uint64_t, void *, id))(v2 + 16))(v2, v3, v4);
}

void sub_10007DE3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 40))
  {
    id v14 = v5;
    int v6 = [a2 firstObject];
    CFStringRef v7 = [v6 characteristic];
    __int16 v8 = [*(id *)(a1 + 32) characteristic];
    if ([v7 isEqual:v8])
    {
      id v9 = [v6 error];

      if (v9)
      {
        id v10 = [v6 error];
LABEL_7:
        id v11 = v10;
        uint64_t v12 = *(void *)(a1 + 40);
        __int16 v13 = [*(id *)(a1 + 32) characteristic];
        (*(void (**)(uint64_t, void *, void *))(v12 + 16))(v12, v13, v11);

        id v5 = v14;
        goto LABEL_8;
      }
    }
    else
    {
    }
    id v10 = v14;
    goto LABEL_7;
  }
LABEL_8:
}

void sub_10007E2D0(uint64_t a1)
{
  uint64_t v2 = +[NSError hapErrorWithcode:9 description:@"Invalid parameter." reason:@"One or more target characteristic writes are required." suggestion:0 underlyingError:0];
  char v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = sub_100083FD0(0);
    id v5 = [v2 domain];
    int v6 = 138543874;
    CFStringRef v7 = v4;
    __int16 v8 = 2112;
    id v9 = v5;
    __int16 v10 = 2048;
    id v11 = [v2 code];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v6, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007E41C(uint64_t a1)
{
  uint64_t v2 = +[NSError hapErrorWithcode:9 description:@"Invalid parameter." reason:@"The timeout must not be negative." suggestion:0 underlyingError:0];
  char v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = sub_100083FD0(0);
    id v5 = [v2 domain];
    int v6 = 138543874;
    CFStringRef v7 = v4;
    __int16 v8 = 2112;
    id v9 = v5;
    __int16 v10 = 2048;
    id v11 = [v2 code];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v6, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10007E568(uint64_t a1)
{
  uint64_t v2 = +[NSError hapErrorWithcode:13 description:@"Write failed." reason:@"There is no server present for the accessory." suggestion:0 underlyingError:0];
  char v3 = sub_100083F74();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = sub_100083FD0(0);
    id v5 = [v2 domain];
    int v6 = 138543874;
    CFStringRef v7 = v4;
    __int16 v8 = 2112;
    id v9 = v5;
    __int16 v10 = 2048;
    id v11 = [v2 code];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%{public}@%{key:errorDomain}@, %{key:errorCode}ld", (uint8_t *)&v6, 0x20u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000803AC(id a1)
{
  uint64_t v1 = sub_100083EA4(@"HAPAccessory", @"com.apple.dockaccessoryd");
  uint64_t v2 = (void *)qword_1002AD6C8;
  qword_1002AD6C8 = v1;
}

void sub_10008084C(id a1)
{
  uint64_t v1 = objc_alloc_init(HAPPowerManager);
  uint64_t v2 = (void *)qword_1002AD6D0;
  qword_1002AD6D0 = (uint64_t)v1;
}

void sub_100080D6C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) delegatesMap];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];

  id v3 = [*(id *)(a1 + 32) delegatesMap];
  [v3 setObject:*(void *)(a1 + 48) forKey:*(void *)(a1 + 40)];
}

void sub_100080E74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegatesMap];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

id sub_1000811BC(uint64_t a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 + 536870288;
  unsigned int v1 = v2 >> 4;
  if (v1 < 0xC && ((0xA07u >> v1) & 1) != 0)
  {
    id v3 = *(&off_100274370 + (int)v1);
  }
  else
  {
    id v3 = +[NSString stringWithFormat:@"Missing string for IOSystemMessage: 0x%X", a1];
  }

  return v3;
}

id sub_10008123C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) devicePowerStateChanged:*(void *)(a1 + 40)];
}

void sub_10008129C(id a1)
{
  uint64_t v1 = sub_100083EA4(@"HAPPowerManager", @"com.apple.dockaccessoryd");
  unint64_t v2 = (void *)qword_1002AD6E8;
  qword_1002AD6E8 = v1;
}

void sub_100081990(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_1000819A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) accessoryServerDidUpdateStateNumber:*(void *)(a1 + 40)];
}

void sub_100082A28(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100082A44(void *a1)
{
  id v1 = a1;
  if (!v1)
  {
    id v3 = sub_100083F74();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    id v4 = sub_100083FD0(0);
    int v7 = 138543362;
    __int16 v8 = v4;
    id v5 = "%{public}@### Type name is nil";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v7, 0xCu);

    goto LABEL_12;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v3 = sub_100083F74();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      goto LABEL_12;
    }
    id v4 = sub_100083FD0(0);
    int v7 = 138543362;
    __int16 v8 = v4;
    id v5 = "%{public}@### Type name is not a string";
    goto LABEL_11;
  }
  if (![v1 length])
  {
    id v3 = sub_100083F74();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      id v4 = sub_100083FD0(0);
      int v7 = 138543362;
      __int16 v8 = v4;
      id v5 = "%{public}@### Type name is an empty string";
      goto LABEL_11;
    }
LABEL_12:

    uint64_t v2 = 0;
    goto LABEL_13;
  }
  uint64_t v2 = 1;
LABEL_13:

  return v2;
}

id sub_100082BE4(void *a1)
{
  id v1 = a1;
  id v2 = [objc_alloc((Class)NSUUID) initWithUUIDString:v1];
  if (v2)
  {
    id v3 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"00000000-0000-1000-8000-4D69736D6574"];
    unsigned int v4 = [v2 isEqual:v3];

    if (v4)
    {
      id v5 = sub_100083F74();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v6 = sub_100083FD0(0);
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v6;
        int v7 = "%{public}@### UUID type is using the HAP Base UUID";
        __int16 v8 = v5;
        uint32_t v9 = 12;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v7, buf, v9);

        goto LABEL_9;
      }
      goto LABEL_9;
    }
    __int16 v10 = [v2 UUIDString];
  }
  else
  {
    if ([v1 characterAtIndex:0] == 48)
    {
      id v5 = sub_100083F74();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v6 = sub_100083FD0(0);
        *(_DWORD *)buf = 138543618;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v1;
        int v7 = "%{public}@### UUID type %@ starts with a '0'";
        __int16 v8 = v5;
        uint32_t v9 = 22;
        goto LABEL_8;
      }
LABEL_9:

LABEL_10:
      __int16 v10 = 0;
      goto LABEL_12;
    }
    memset(v32, 0, sizeof(v32));
    id v12 = v1;
    [v12 UTF8String];
    int v13 = NormalizeUUIDString();
    if (v13)
    {
      int v14 = v13;
      int v31 = 0;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      memset(buf, 0, sizeof(buf));
      DebugGetErrorString();
      id v15 = sub_100083F74();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        id v16 = sub_100083FD0(0);
        int v18 = 138544130;
        uint64_t v19 = v16;
        __int16 v20 = 1024;
        int v21 = v14;
        __int16 v22 = 2080;
        __int16 v23 = buf;
        __int16 v24 = 2112;
        id v25 = v12;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "%{public}@### Error: %d(%s) creating UUID string from type: %@.", (uint8_t *)&v18, 0x26u);
      }
      goto LABEL_10;
    }
    int v17 = +[NSString stringWithUTF8String:v32];
    __int16 v10 = [v17 uppercaseString];
  }
LABEL_12:

  return v10;
}

uint64_t sub_100082EDC(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v1 doubleValue];
      double v3 = floor(v2);
      [v1 doubleValue];
      if (v3 == ceil(v4))
      {
        if ([v1 unsignedLongLongValue])
        {
          uint64_t v8 = 1;
          goto LABEL_12;
        }
        id v5 = sub_100083F74();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          int v6 = sub_100083FD0(0);
          int v10 = 138543362;
          id v11 = v6;
          int v7 = "%{public}@### instance ID is not > 0";
          goto LABEL_10;
        }
      }
      else
      {
        id v5 = sub_100083F74();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          int v6 = sub_100083FD0(0);
          int v10 = 138543362;
          id v11 = v6;
          int v7 = "%{public}@### instance ID is not an integer";
LABEL_10:
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, v7, (uint8_t *)&v10, 0xCu);
        }
      }
    }
    else
    {
      id v5 = sub_100083F74();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        int v6 = sub_100083FD0(0);
        int v10 = 138543362;
        id v11 = v6;
        int v7 = "%{public}@### instance ID is not a number";
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v5 = sub_100083F74();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = sub_100083FD0(0);
      int v10 = 138543362;
      id v11 = v6;
      int v7 = "%{public}@### nil instance ID";
      goto LABEL_10;
    }
  }

  uint64_t v8 = 0;
LABEL_12:

  return v8;
}

uint64_t sub_1000830F4(unint64_t a1, uint64_t a2)
{
  if (a1 | a2) {
    return [(id)a1 isEqualToString:a2] ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100083128(void *a1, void *a2)
{
  unint64_t v3 = a1;
  unint64_t v4 = a2;
  id v5 = (void *)v4;
  if (v3 | v4)
  {
    uint64_t v6 = 1;
    if (v3 && v4)
    {
      if (CFNumberIsFloatType((CFNumberRef)v3) || CFNumberIsFloatType((CFNumberRef)v5))
      {
        [(id)v3 floatValue];
        float v8 = v7;
        [v5 floatValue];
        uint64_t v6 = vabds_f32(v8, v9) >= 0.00000011921;
      }
      else
      {
        uint64_t v6 = [(id)v3 isEqualToNumber:v5] ^ 1;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t sub_1000831E0(unint64_t a1, uint64_t a2)
{
  if (a1 | a2) {
    return [(id)a1 isEqualToArray:a2] ^ 1;
  }
  else {
    return 0;
  }
}

os_log_t sub_100083EA4(void *a1, id a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = (const char *)[v3 UTF8String];
  id v6 = v4;
  float v7 = (const char *)[v6 UTF8String];

  os_log_t v8 = os_log_create(v5, v7);

  return v8;
}

os_log_t sub_100083F20()
{
  os_log_t v0 = os_log_create((const char *)[@"com.apple.dockaccessoryd" UTF8String], (const char *)[@"HAP" UTF8String]);

  return v0;
}

id sub_100083F74()
{
  os_log_t v0 = objc_opt_class();
  if (objc_opt_respondsToSelector()) {
    [v0 logCategory];
  }
  else {
  id v1 = sub_100083F20();
  }

  return v1;
}

__CFString *sub_100083FD0(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector())
  {
    double v2 = [v1 logIdentifier];
    id v3 = +[NSString stringWithFormat:@"[%@] ", v2];
  }
  else
  {
    id v3 = &stru_10027B0E8;
  }

  return v3;
}

DKMInterval *__cdecl sub_100086890(id a1, NSNumber *a2, NSNumber *a3)
{
  id v4 = a3;
  id v5 = a2;
  id v6 = +[DKMInterval positiveInfinityEnd];
  unsigned int v7 = [(NSNumber *)v4 isEqual:v6];

  if (v7) {
    +[DKMInterval openOpenIntervalFromStart:v5 toEnd:v4];
  }
  else {
  os_log_t v8 = +[DKMInterval openClosedIntervalFromStart:v5 toEnd:v4];
  }

  return (DKMInterval *)v8;
}

int sub_100086940(id a1, unint64_t a2, NSNumber *a3)
{
  return [(NSNumber *)a3 unsignedIntValue] >= a2;
}

DKMInterval *__cdecl sub_1000869DC(id a1, NSNumber *a2, NSNumber *a3)
{
  return (DKMInterval *)+[DKMInterval closedOpenIntervalFromStart:a2 toEnd:a3];
}

int sub_1000869F0(id a1, unint64_t a2, NSNumber *a3)
{
  return [(NSNumber *)a3 unsignedIntValue] > a2;
}

__CFString *HAPCharacteristicValueTransitionTypesAsString(unint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1) {
    goto LABEL_12;
  }
  uint64_t v3 = 1;
  unint64_t v4 = a1;
  do
  {
    if ((v3 & a1) == 0) {
      goto LABEL_9;
    }
    if (v3 == 1)
    {
      CFStringRef v5 = @"HAPCharacteristicValueTransitionTypeLinear";
    }
    else
    {
      if (v3 != 2) {
        goto LABEL_9;
      }
      CFStringRef v5 = @"HAPCharacteristicValueTransitionTypeLinearDerived";
    }
    v4 &= ~v3;
    [v2 addObject:v5];
LABEL_9:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    id v6 = +[NSString stringWithFormat:@"Unknown options %lu", v4];
    [v2 addObject:v6];
  }
LABEL_12:
  if ([v2 count])
  {
    unsigned int v7 = [v2 componentsJoinedByString:@", "];
  }
  else
  {
    unsigned int v7 = @"None";
  }

  return v7;
}

void sub_10008977C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(id *)(a1 + 32);
    CFStringRef v5 = sub_100083F74();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = sub_100083FD0(v4);
      int v7 = 138543618;
      os_log_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@Failed to send hello control message (%@)", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_1000899A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(id *)(a1 + 32);
    CFStringRef v5 = sub_100083F74();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v6 = sub_100083FD0(v4);
      int v7 = 138543618;
      os_log_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "%{public}@Failed to send version control message (%@)", (uint8_t *)&v7, 0x16u);
    }
  }
}

__CFString *HAPCharacteristicValueTransitionEndBehaviorAsString(uint64_t a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      id v2 = @"HAPCharacteristicValueTransitionEndBehaviorLoop";
    }
    else
    {
      id v2 = +[NSString stringWithFormat:@"Unknown HAPCharacteristicValueTransitionEndBehavior %ld", a1];
    }
  }
  else
  {
    id v2 = @"HAPCharacteristicValueTransitionEndBehaviorNoChange";
  }
  return v2;
}

__CFString *HAPCharacteristicValueTransitionLinearStartConditionAsString(unint64_t a1)
{
  if (a1 >= 3)
  {
    uint64_t v1 = +[NSString stringWithFormat:@"Unknown HAPCharacteristicValueTransitionLinearStartCondition %ld", a1];
  }
  else
  {
    uint64_t v1 = off_100274648[a1];
  }

  return v1;
}

__CFString *HAPFirmwareUpdateStateAsString(unint64_t a1)
{
  if (a1 >= 5)
  {
    uint64_t v1 = +[NSString stringWithFormat:@"Unknown HAPFirmwareUpdateState %ld", a1];
  }
  else
  {
    uint64_t v1 = off_100274660[a1];
  }

  return v1;
}

void sub_10008A43C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_10008A8AC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) accessoryServer:*(void *)(a1 + 40) didUpdateHasPairings:*(unsigned __int8 *)(a1 + 48)];
}

void sub_10008AA0C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10008AB08(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10008AD90(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_10008ADA4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) accessoryServer:*(void *)(a1 + 40) didUpdateName:*(void *)(a1 + 48)];
}

void sub_10008AF6C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_10008AF80(uint64_t a1)
{
  return _[*(id *)(a1 + 32) accessoryServer:*(void *)(a1 + 40) didUpdateCategory:*(void *)(a1 + 48)];
}

void sub_10008B410(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10008C500(uint64_t a1, void *a2)
{
  id v5 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v5);
  }
  id v4 = v5;
  if (!v5 && *(unsigned char *)(a1 + 56))
  {
    [*(id *)(a1 + 40) disconnect];
    [*(id *)(a1 + 40) refreshKeyBag];
    id v4 = 0;
  }
}

void sub_10008CC50(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) internalDelegates];
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_10008CD58(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) internalDelegates];
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_10008CE60(uint64_t a1)
{
  char v15 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = [*(id *)(a1 + 32) internalDelegates];
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v16 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v11;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v2);
        }
        objc_initWeak(&location, *(id *)(*((void *)&v10 + 1) + 8 * (void)v5));
        if (!v15)
        {
          id v6 = objc_loadWeakRetained(&location);
          BOOL v7 = v6 == 0;

          if (!v7)
          {
            uint64_t v8 = *(void *)(a1 + 40);
            id v9 = objc_loadWeakRetained(&location);
            (*(void (**)(uint64_t, id, char *))(v8 + 16))(v8, v9, &v15);
          }
        }
        objc_destroyWeak(&location);
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v10 objects:v16 count:16];
    }
    while (v3);
  }
}

void sub_10008CFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

id sub_10008CFD4(void *a1)
{
  id v1 = a1;
  [v1 bytes];
  [v1 length];

  TLV8Get();

  return 0;
}

void sub_10008D350(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10008D488(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10008D87C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10008DC54(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10008E1E4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

__CFString *HAPDiagnosticsSnapshotAudioAsString(unint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1) {
    goto LABEL_12;
  }
  uint64_t v3 = 1;
  unint64_t v4 = a1;
  do
  {
    if ((v3 & a1) == 0) {
      goto LABEL_9;
    }
    if (v3 == 1)
    {
      CFStringRef v5 = @"HAPDiagnosticsSnapshotAudioAudioRecording";
    }
    else
    {
      if (v3 != 2) {
        goto LABEL_9;
      }
      CFStringRef v5 = @"HAPDiagnosticsSnapshotAudioAudioClips";
    }
    v4 &= ~v3;
    [v2 addObject:v5];
LABEL_9:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    id v6 = +[NSString stringWithFormat:@"Unknown options %lu", v4];
    [v2 addObject:v6];
  }
LABEL_12:
  if ([v2 count])
  {
    BOOL v7 = [v2 componentsJoinedByString:@", "];
  }
  else
  {
    BOOL v7 = @"None";
  }

  return v7;
}

__CFString *HAPDiagnosticsSnapshotOptionsAsString(unint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1) {
    goto LABEL_12;
  }
  uint64_t v3 = 1;
  unint64_t v4 = a1;
  do
  {
    if ((v3 & a1) == 0) {
      goto LABEL_9;
    }
    if (v3 == 1)
    {
      CFStringRef v5 = @"HAPDiagnosticsSnapshotOptionDelay";
    }
    else
    {
      if (v3 != 2) {
        goto LABEL_9;
      }
      CFStringRef v5 = @"HAPDiagnosticsSnapshotOptionConfigurableMaxSize";
    }
    v4 &= ~v3;
    [v2 addObject:v5];
LABEL_9:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    id v6 = +[NSString stringWithFormat:@"Unknown options %lu", v4];
    [v2 addObject:v6];
  }
LABEL_12:
  if ([v2 count])
  {
    BOOL v7 = [v2 componentsJoinedByString:@", "];
  }
  else
  {
    BOOL v7 = @"None";
  }

  return v7;
}

__CFString *HAPDiagnosticsSnapshotTypeAsString(unint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  if (!a1) {
    goto LABEL_12;
  }
  uint64_t v3 = 1;
  unint64_t v4 = a1;
  do
  {
    if ((v3 & a1) == 0) {
      goto LABEL_9;
    }
    if (v3 == 1)
    {
      CFStringRef v5 = @"HAPDiagnosticsSnapshotTypeManufacturerSnapshot";
    }
    else
    {
      if (v3 != 2) {
        goto LABEL_9;
      }
      CFStringRef v5 = @"HAPDiagnosticsSnapshotTypeADKSnapshot";
    }
    v4 &= ~v3;
    [v2 addObject:v5];
LABEL_9:
    v3 *= 2;
  }
  while (v3 - 1 < a1);
  if (v4)
  {
    id v6 = +[NSString stringWithFormat:@"Unknown options %lu", v4];
    [v2 addObject:v6];
  }
LABEL_12:
  if ([v2 count])
  {
    BOOL v7 = [v2 componentsJoinedByString:@", "];
  }
  else
  {
    BOOL v7 = @"None";
  }

  return v7;
}

DataStream *__cdecl sub_10008F7CC(id a1, DataStreamTransport *a2, HAPSecuritySessionEncryption *a3, OS_dispatch_queue *a4, NSString *a5)
{
  uint64_t v8 = a5;
  id v9 = a4;
  long long v10 = a3;
  long long v11 = a2;
  long long v12 = [[DataStream alloc] initWithTransport:v11 sessionEncryption:v10 workQueue:v9 logIdentifier:v8];

  return v12;
}

id sub_10008FA90(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10008FB00;
  v3[3] = &unk_1002733C8;
  v3[4] = v1;
  return [v1 _readRequiredTransportCharacteristicsIfNeededWithCompletion:v3];
}

void sub_10008FB00(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  CFStringRef v5 = [*(id *)(a1 + 32) workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = *(void **)(a1 + 32);
  if (v4)
  {
    id v7 = v6;
    uint64_t v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = sub_100083FD0(v7);
      long long v10 = [*(id *)(a1 + 32) accessory];
      long long v11 = [v10 identifier];
      int v12 = 138543874;
      long long v13 = v9;
      __int16 v14 = 2112;
      char v15 = v11;
      __int16 v16 = 2112;
      id v17 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to read the required transport characteristics for: %@ with error: %@", (uint8_t *)&v12, 0x20u);
    }
  }
  else
  {
    [v6 _handleAccessoryConnected];
  }
}

void sub_10008FCAC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  CFStringRef v5 = [*(id *)(a1 + 32) workQueue];
  dispatch_assert_queue_V2(v5);

  id v6 = *(void **)(a1 + 32);
  if (v4)
  {
    id v7 = v6;
    uint64_t v8 = sub_100083F74();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v9 = sub_100083FD0(v7);
      long long v10 = [*(id *)(a1 + 32) accessory];
      long long v11 = [v10 identifier];
      int v12 = 138543874;
      long long v13 = v9;
      __int16 v14 = 2112;
      char v15 = v11;
      __int16 v16 = 2112;
      id v17 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "%{public}@Failed to read the required transport characteristics for: %@ with error: %@", (uint8_t *)&v12, 0x20u);
    }
  }
  else
  {
    [v6 _handleAccessoryConnected];
  }
}

uint64_t sub_100090340(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10009062C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100090860(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) object];
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = v3;

  CFStringRef v5 = [*(id *)(a1 + 40) accessory];
  unsigned int v6 = [v4 isEqual:v5];

  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = sub_100083F74();
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      long long v10 = sub_100083FD0(v7);
      long long v11 = [v4 shortDescription];
      int v15 = 138543618;
      __int16 v16 = v10;
      __int16 v17 = 2112;
      id v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%{public}@Accessory with HDS service is no longer connected: %@. Removing any transports that were active", (uint8_t *)&v15, 0x16u);
    }
    int v12 = *(void **)(a1 + 40);
    id v7 = +[NSError dkErrorWithCode:30];
    [v12 _cancelStreamTransportWithError:v7];
  }
  else
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      long long v13 = sub_100083FD0(v7);
      __int16 v14 = [*(id *)(a1 + 40) accessory];
      int v15 = 138543874;
      __int16 v16 = v13;
      __int16 v17 = 2112;
      id v18 = v4;
      __int16 v19 = 2112;
      __int16 v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%{public}@Disconnected accessory: %@ did not match self.accessory :%@", (uint8_t *)&v15, 0x20u);
    }
  }
}

void sub_1000913B0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) defaultDataStream];

  if (v2
    || ([*(id *)(a1 + 32) _initiateStreamSetup],
        [*(id *)(a1 + 32) setupInProgress],
        uint64_t v3 = objc_claimAutoreleasedReturnValue(),
        v3,
        v3))
  {
    id v4 = [*(id *)(a1 + 32) pendingSocketRequests];
    CFStringRef v5 = [[DKPendingSocketRequest alloc] initWithApplicationProtocolName:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
    [v4 addObject:v5];

    unsigned int v6 = [*(id *)(a1 + 32) setupInProgress];

    id v7 = *(void **)(a1 + 32);
    if (v6)
    {
      id v8 = v7;
      id v9 = sub_100083F74();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        long long v10 = sub_100083FD0(v8);
        *(_DWORD *)buf = 138543362;
        __int16 v14 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%{public}@Waiting for DataStream setup before processing stream socket request", buf, 0xCu);
      }
    }
    else
    {
      [v7 _processPendingSocketRequests];
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 48);
    id v12 = +[NSError dkErrorWithCode:4];
    (*(void (**)(uint64_t, void))(v11 + 16))(v11, 0);
  }
}

void sub_100092BBC(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[DataStreamBulkSendProtocol protocolName];
  id v4 = [v2 _getActiveProtocolWithName:v3];

  id v5 = v4;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = 0;
  }
  id v7 = v6;

  if (v7)
  {
    [v7 openSessionForFileType:*(void *)(a1 + 40) reason:*(void *)(a1 + 48) metadata:*(void *)(a1 + 56) queue:*(void *)(a1 + 64) callback:*(void *)(a1 + 72)];
  }
  else
  {
    id v8 = *(id *)(a1 + 32);
    id v9 = sub_100083F74();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      long long v10 = sub_100083FD0(v8);
      int v12 = 138543362;
      long long v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%{public}@DataStreamBulkSendProtocol not registered; cannot start bulk send session",
        (uint8_t *)&v12,
        0xCu);
    }
    uint64_t v11 = +[NSError dkErrorWithCode:1];
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_100092DD8(uint64_t a1)
{
  id v2 = +[NSError errorWithDomain:HMFErrorDomain code:2 userInfo:&off_100281828];
  [*(id *)(a1 + 32) _cancelStreamTransportWithError:v2];
}

uint64_t sub_100093648(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100095500(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100095C5C(id a1)
{
  uint64_t v1 = sub_100083EA4(@"HAPKeyBag", @"com.apple.dockaccessoryd");
  id v2 = (void *)qword_1002AD708;
  qword_1002AD708 = v1;
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  v100 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v101 = (char *)&v99 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  v105 = (char *)&v99 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  long long v13 = (char *)&v99 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  v104 = (char *)&v99 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  id v18 = (char *)&v99 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  int v21 = (char *)&v99 - v20;
  qword_1002B1310 = 0x302E313632;
  *(void *)algn_1002B1318 = 0xE500000000000000;
  sub_100096F00(v19, qword_1002A7B20);
  __int16 v22 = (uint8_t *)sub_100096F64(v3, (uint64_t)qword_1002A7B20);
  v102 = "PrimaryUsagePage";
  Logger.init(subsystem:category:)();
  type metadata accessor for DockCoreManager();
  char v23 = static DockCoreManager.debugAllowed.getter() & 1;
  byte_1002B1320 = v23;
  __int16 v24 = (objc_class *)type metadata accessor for ServiceDelegate();
  id v25 = objc_allocWithZone(v24);
  v25[OBJC_IVAR____TtC14dockaccessoryd15ServiceDelegate_debugAllowed] = v23;
  v108.receiver = v25;
  v108.super_class = v24;
  qword_1002B1328 = (uint64_t)[super init];
  qword_1002B1330 = 0;
  v106 = v22;
  if (byte_1002B1320 == 1)
  {
    id v26 = [objc_allocWithZone((Class)type metadata accessor for DebugServiceDelegate()) init];
    long long v27 = (void *)qword_1002B1330;
    qword_1002B1330 = (uint64_t)v26;

    v107 = *(void (**)(char *, uint8_t *, uint64_t))(v4 + 16);
    v107(v21, v22, v3);
    long long v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    long long v30 = v22;
    if (os_log_type_enabled(v28, v29))
    {
      int v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "dockaccesoryd: debug allowed, creating debug port", v31, 2u);
      long long v30 = v106;
      swift_slowDealloc();
    }

    id v32 = v21;
    id v33 = *(void (**)(char *, uint64_t))(v4 + 8);
    v33(v32, v3);
  }
  else
  {
    v107 = *(void (**)(char *, uint8_t *, uint64_t))(v4 + 16);
    v107(v18, v22, v3);
    id v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    long long v30 = v22;
    if (v36)
    {
      __int16 v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__int16 v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "dockaccesoryd: debug not allowed", v37, 2u);
      long long v30 = v106;
      swift_slowDealloc();
    }

    id v33 = *(void (**)(char *, uint64_t))(v4 + 8);
    v33(v18, v3);
  }
  qword_1002B1338 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for PairingServiceDelegate()) init];
  qword_1002B1340 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for CertificationServiceDelegate()) init];
  qword_1002B1348 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for CameraCaptureServiceDelegate()) init];
  uint64_t v38 = type metadata accessor for DockKitFeatures();
  v112 = (void *)v38;
  v113 = (_UNKNOWN **)sub_100099B3C(&qword_1002A7C30, (void (*)(uint64_t))&type metadata accessor for DockKitFeatures);
  __int16 v39 = sub_100096F9C((uint64_t *)&aBlock);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v38 - 8) + 104))(v39, enum case for DockKitFeatures.Daemon(_:), v38);
  LOBYTE(v3_Block_object_dispose(&STACK[0x3D0], 8) = isFeatureEnabled(_:)();
  sub_100099BCC((uint64_t)&aBlock);
  uint64_t v103 = v4;
  id v40 = (char *)(v4 + 16);
  if ((v38 & 1) == 0)
  {
    v107(v104, v30, v3);
    v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v96, v97))
    {
      v98 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v98 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "dockaccessoryd: daemon features disabled", v98, 2u);
      swift_slowDealloc();
    }

    v33(v104, v3);
    exit(-1);
  }
  v107(v13, v30, v3);
  id v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  v104 = v40;
  if (v43)
  {
    double v44 = (uint8_t *)swift_slowAlloc();
    id aBlock = (id)swift_slowAlloc();
    *(_DWORD *)double v44 = 136315138;
    v99 = v13;
    uint64_t v45 = qword_1002B1310;
    unint64_t v46 = *(void *)algn_1002B1318;
    swift_bridgeObjectRetain();
    v115[0] = sub_1000993AC(v45, v46, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "dockaccessoryd: starting up, dockaccessoryd version %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    long long v30 = v106;
    swift_slowDealloc();

    uint64_t v47 = v103;
    v33(v99, v3);
  }
  else
  {

    uint64_t v47 = v103;
    v33(v13, v3);
  }
  __int16 v48 = v105;
  v107(v105, v30, v3);
  id v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    id v51 = (uint8_t *)swift_slowAlloc();
    id aBlock = (id)swift_slowAlloc();
    *(_DWORD *)id v51 = 136315138;
    v115[0] = sub_1000993AC(0x302E313632, 0xE500000000000000, (uint64_t *)&aBlock);
    long long v30 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "dockkit core version: %s", v51, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v33(v105, v3);
  }
  else
  {

    v33(v48, v3);
  }
  if (qword_1002A7B90 != -1) {
    swift_once();
  }
  if (sub_100151890())
  {
    v107(v101, v30, v3);
    __int16 v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Database path exists - checking if we need to migrate data", v54, 2u);
      swift_slowDealloc();
    }

    v33(v101, v3);
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v55 = sub_1000FE93C();
    if (v55)
    {
      v56 = (void *)v55;
      v107(v100, v30, v3);
      __int16 v57 = v56;
      v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc();
        v61 = (void *)swift_slowAlloc();
        v107 = (void (*)(char *, uint8_t *, uint64_t))(v47 + 8);
        v106 = v60;
        *(_DWORD *)v60 = 138412290;
        id aBlock = v57;
        __int16 v57 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v61 = v56;

        _os_log_impl((void *)&_mh_execute_header, v58, v59, "FAILED data migration: %@", v106, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        v58 = v57;
      }

      v33(v100, v3);
    }
  }
  id v62 = objc_allocWithZone((Class)NSXPCListener);
  NSString v63 = String._bridgeToObjectiveC()();
  id v64 = [v62 initWithMachServiceName:v63];

  qword_1002B1350 = (uint64_t)v64;
  [v64 setDelegate:qword_1002B1328];
  id v65 = objc_allocWithZone((Class)NSXPCListener);
  NSString v66 = String._bridgeToObjectiveC()();
  id v67 = [v65 initWithMachServiceName:v66];

  qword_1002B1358 = (uint64_t)v67;
  [v67 setDelegate:qword_1002B1338];
  id v68 = objc_allocWithZone((Class)NSXPCListener);
  NSString v69 = String._bridgeToObjectiveC()();
  id v70 = [v68 initWithMachServiceName:v69];

  qword_1002B1360 = (uint64_t)v70;
  [v70 setDelegate:qword_1002B1340];
  id v71 = objc_allocWithZone((Class)NSXPCListener);
  NSString v72 = String._bridgeToObjectiveC()();
  id v73 = [v71 initWithMachServiceName:v72];

  qword_1002B1368 = (uint64_t)v73;
  [v73 setDelegate:qword_1002B1348];
  qword_1002B1370 = 0;
  if (byte_1002B1320 == 1)
  {
    id v74 = objc_allocWithZone((Class)NSXPCListener);
    NSString v75 = String._bridgeToObjectiveC()();
    id v76 = [v74 initWithMachServiceName:v75];

    v77 = (void *)qword_1002B1370;
    qword_1002B1370 = (uint64_t)v76;

    if (qword_1002B1370) {
      [(id)qword_1002B1370 setDelegate:qword_1002B1330];
    }
  }
  if (qword_1002A7C20 != -1) {
    swift_once();
  }
  uint64_t v78 = qword_1002B17A0;
  uint64_t v79 = *(void *)(qword_1002B17A0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan);
  if (v79)
  {
    uint64_t v80 = qword_1002A7C00;
    swift_retain();
    if (v80 != -1) {
      swift_once();
    }
    v81 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v112 = (void *)type metadata accessor for AccessoryManager();
    v113 = &off_1002762C0;
    id aBlock = v81;
    sub_100099280((uint64_t)&aBlock, (uint64_t)v115);
    swift_beginAccess();
    id v82 = v81;
    sub_10009932C((uint64_t)v115, v79 + 80);
    swift_endAccess();
    swift_release();
    uint64_t v78 = qword_1002B17A0;
    if (*(void *)(qword_1002B17A0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan))
    {
      swift_retain();
      sub_1000F11F4(1);
      swift_release();
      uint64_t v78 = qword_1002B17A0;
    }
  }
  v83 = *(void **)(v78 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue);
  v113 = (_UNKNOWN **)sub_100097000;
  uint64_t v114 = 0;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v110 = 1107296256;
  v111 = sub_1000972C8;
  v112 = &unk_100274D58;
  v84 = _Block_copy(&aBlock);
  v85 = v83;
  xpc_set_event_stream_handler("com.apple.bluetooth.discovery", v85, v84);
  _Block_release(v84);

  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  v86 = *(void **)(*(void *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue);
  v113 = (_UNKNOWN **)sub_100097328;
  uint64_t v114 = 0;
  id aBlock = _NSConcreteStackBlock;
  uint64_t v110 = 1107296256;
  v111 = sub_1000972C8;
  v112 = &unk_100274D80;
  v87 = _Block_copy(&aBlock);
  v88 = v86;
  xpc_set_event_stream_handler("com.apple.dockaccessoryd.pairsetup", v88, v87);
  _Block_release(v87);

  v89 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  id aBlock = 0;
  id v90 = [v89 getOrCreateLocalPairingIdentity:&aBlock];
  if (v90)
  {
    v91 = v90;
    id v92 = aBlock;
  }
  else
  {
    id v93 = aBlock;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  if (qword_1002A7B70 != -1) {
    swift_once();
  }
  qword_1002B1378 = qword_1002B14D0;
  char v94 = *(unsigned char *)(qword_1002B14D0 + 24);
  swift_retain();
  if (v94)
  {
    sub_100136708();
  }
  else
  {
    sub_100136F60();
    sub_100136708();
    sub_1001376E0();
  }
  qword_1002B1380 = sub_100097E24();
  if (qword_1002B1370) {
    [(id)qword_1002B1370 resume];
  }
  [(id)qword_1002B1350 resume];
  [(id)qword_1002B1358 resume];
  [(id)qword_1002B1360 resume];
  [(id)qword_1002B1368 resume];
  CFRunLoopRun();
  return 0;
}

uint64_t *sub_100096F00(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_100096F64(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *sub_100096F9C(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

const char *sub_100097000(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin();
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100096F64(v4, (uint64_t)&unk_1002A7B20);
  id result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    uint64_t v10 = String.init(cString:)();
    unint64_t v11 = v9;
    if (v10 == 0xD000000000000010 && v9 == 0x80000001002343A0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      return (const char *)swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
      swift_bridgeObjectRetain();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136315138;
        v15[1] = v14 + 4;
        swift_bridgeObjectRetain();
        v15[2] = sub_1000993AC(v10, v11, &v16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      return (const char *)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
  }
  return result;
}

uint64_t sub_1000972C8(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

const char *sub_100097328(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v59 = *(void *)(v2 - 8);
  uint64_t v60 = v2;
  __chkstk_darwin(v2);
  __int16 v57 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for DispatchQoS();
  uint64_t v56 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v55 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v5 - 8);
  v61 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v62 = *(void *)(v7 - 8);
  uint64_t v63 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  v54 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v9;
  __chkstk_darwin(v8);
  id v64 = (char *)&v51 - v10;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)&v51 - v17;
  uint64_t v19 = sub_100096F64(v16, (uint64_t)&unk_1002A7B20);
  id v65 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v65(v18, v19, v11);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    __int16 v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)__int16 v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "NFC XPC event!", v22, 2u);
    swift_slowDealloc();
  }

  id v25 = *(void (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))(v12 + 8);
  uint64_t v24 = v12 + 8;
  char v23 = v25;
  v25((void (*)(char *, uint64_t, uint64_t))v18, v11);
  id result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    v65(v15, v19, v11);
    long long v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v65 = (void (*)(char *, uint64_t, uint64_t))v15;
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      long long v30 = (void **)swift_slowAlloc();
      __int16 v52 = v23;
      id aBlock = v30;
      *(_DWORD *)os_log_type_t v29 = 136315138;
      uint64_t v31 = String.init(cString:)();
      unint64_t v73 = sub_1000993AC(v31, v32, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v52(v65, v11);
    }
    else
    {

      v23((void (*)(char *, uint64_t, uint64_t))v15, v11);
    }
    unint64_t v73 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
    xpc_type_t type = xpc_get_type(a1);
    if (type != (xpc_type_t)XPC_TYPE_DICTIONARY.getter()) {
      return (const char *)swift_bridgeObjectRelease();
    }
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = &v73;
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = sub_100099D6C;
    *(void *)(v35 + 24) = v34;
    id v71 = sub_100099D84;
    uint64_t v72 = v35;
    id aBlock = _NSConcreteStackBlock;
    uint64_t v68 = 1107296256;
    NSString v69 = sub_100097DCC;
    id v70 = &unk_100275010;
    BOOL v36 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    xpc_dictionary_apply(a1, v36);
    _Block_release(v36);
    LOBYTE(v36) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v36)
    {
      __break(1u);
    }
    else
    {
      if (!*(void *)(v73 + 16)) {
        goto LABEL_19;
      }
      sub_10016DB60(7107189, 0xE300000000000000);
      if ((v37 & 1) == 0) {
        goto LABEL_19;
      }
      swift_bridgeObjectRetain();
      uint64_t v38 = (uint64_t)v61;
      URL.init(string:)();
      swift_bridgeObjectRelease();
      uint64_t v35 = v62;
      uint64_t v24 = v63;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v38, 1, v63) == 1)
      {
        sub_100099DB0(v38);
LABEL_19:
        swift_release();
        return (const char *)swift_bridgeObjectRelease();
      }
      id v65 = (void (*)(char *, uint64_t, uint64_t))v34;
      uint64_t v34 = *(void *)(v35 + 32);
      ((void (*)(char *, uint64_t, uint64_t))v34)(v64, v38, v24);
      if (qword_1002A7C20 == -1)
      {
LABEL_14:
        if (*(void *)(qword_1002B17A0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan))
        {
          swift_retain();
          sub_1000F11F4(5);
          swift_release();
        }
        if (qword_1002A7C00 != -1) {
          swift_once();
        }
        __int16 v39 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
        id v40 = *(void **)&v39[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
        id v41 = v54;
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v54, v64, v24);
        unint64_t v42 = (*(unsigned __int8 *)(v35 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
        uint64_t v43 = v35;
        uint64_t v44 = swift_allocObject();
        *(void *)(v44 + 16) = v39;
        ((void (*)(unint64_t, char *, uint64_t))v34)(v44 + v42, v41, v24);
        id v71 = sub_100099EDC;
        uint64_t v72 = v44;
        id aBlock = _NSConcreteStackBlock;
        uint64_t v68 = 1107296256;
        NSString v69 = sub_1001468DC;
        id v70 = &unk_100275060;
        uint64_t v45 = _Block_copy(&aBlock);
        unint64_t v46 = v39;
        id v47 = v40;
        __int16 v48 = v55;
        static DispatchQoS.unspecified.getter();
        NSString v66 = _swiftEmptyArrayStorage;
        sub_100099B3C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_1000992E8((uint64_t *)&unk_1002A7F60);
        sub_100099CB8();
        id v49 = v57;
        uint64_t v50 = v60;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v45);

        (*(void (**)(char *, uint64_t))(v59 + 8))(v49, v50);
        (*(void (**)(char *, uint64_t))(v56 + 8))(v48, v58);
        (*(void (**)(char *, uint64_t))(v43 + 8))(v64, v24);
        swift_release();
        goto LABEL_19;
      }
    }
    swift_once();
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_100097CF0(int a1, xpc_object_t object, uint64_t *a3)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)XPC_TYPE_STRING.getter() && xpc_string_get_string_ptr(object))
  {
    uint64_t v6 = String.init(cString:)();
    uint64_t v8 = v7;
    uint64_t v9 = String.init(cString:)();
    uint64_t v11 = v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *a3;
    *a3 = 0x8000000000000000;
    sub_1001F42C4(v9, v11, v6, v8, isUniquelyReferenced_nonNull_native);
    *a3 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t sub_100097DCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

uint64_t sub_100097E24()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void (__cdecl *)(int))SIG_IGN.getter();
  signal(15, v8);
  sub_100099C7C(0, &qword_1002A7F48);
  sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  uint64_t v9 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v10 = static OS_dispatch_source.makeSignalSource(signal:queue:)();

  swift_getObjectType();
  aBlock[4] = sub_10009809C;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001468DC;
  aBlock[3] = &unk_100274F98;
  uint64_t v11 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  sub_100098238();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  OS_dispatch_source.resume()();
  return v10;
}

uint64_t sub_10009809C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100096F64(v2, (uint64_t)&unk_1002A7B20);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v5, v0);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Asked to terminate, cleaning up transactions", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_100191FAC();
  sub_10019A168();
  return sub_10018617C();
}

uint64_t sub_100098238()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t variable initialization expression of MotionValidator._timer()
{
  return 0;
}

double variable initialization expression of MotionFeedback.Velocity.value()
{
  return 0.0;
}

void *variable initialization expression of MotionValidator._angleStampedBufferImu()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of MotionValidator.logger()
{
  return Logger.init(subsystem:category:)();
}

double variable initialization expression of MotionValidator._startupConstants@<D0>(uint64_t a1@<X8>)
{
  sub_1000992E8(&qword_1002A7C48);
  uint64_t v2 = (_OWORD *)swift_allocObject();
  v2[1] = xmmword_10023FD30;
  v2[2] = xmmword_10023FD40;
  v2[3] = xmmword_10023FD50;
  *(_OWORD *)a1 = xmmword_10023FD60;
  *(void *)(a1 + 16) = 0x3FC3333333333333;
  *(void *)(a1 + 24) = 5;
  *(void *)(a1 + 32) = 0x3FC3333333333333;
  *(void *)(a1 + 40) = v2;
  double result = 0.1;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = xmmword_10023FD70;
  return result;
}

uint64_t variable initialization expression of MotionValidator._calibrationCallback()
{
  return 0;
}

double variable initialization expression of MotionValidator._expiry()
{
  return 1.0;
}

double variable initialization expression of MotionValidator._startupTimeout()
{
  return 15.0;
}

id variable initialization expression of DockDetector.startupValidator()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for MotionValidator());
  return MotionValidator.init(type:interval:)(0, 0.1);
}

uint64_t variable initialization expression of DockDetector.logger()
{
  return Logger.init(subsystem:category:)();
}

IOHIDManagerRef variable initialization expression of DockDetector.hidManager()
{
  return IOHIDManagerCreate(kCFAllocatorDefault, 0);
}

double variable initialization expression of DockDetector.jarvisInterval()
{
  return 0.2;
}

double variable initialization expression of DockDetector.jarvisLastDockedTimeout()
{
  return 2.0;
}

double variable initialization expression of DockDetector.jarvisLastUndockedTimeout()
{
  return 5.0;
}

double variable initialization expression of DockDetector.jarvisTimeThreshold()
{
  return 60.0;
}

uint64_t variable initialization expression of DockDetector.dockStatus@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for DockStatus.Undocked(_:);
  uint64_t v3 = type metadata accessor for DockStatus();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t variable initialization expression of DockDetector.jarvisReportLength()
{
  return 91;
}

uint64_t variable initialization expression of DockDetector.kJarvisReportID()
{
  return 2;
}

_DWORD *sub_100098514@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_100098524(uint64_t a1, uint64_t a2)
{
  return sub_1000990E8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void sub_100098550(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10009855C()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_1000985A8()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_100098600()
{
  return Hasher._finalize()();
}

uint64_t sub_100098668(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_1000986E0(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100098760@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

id sub_1000987A4()
{
  return *v0;
}

uint64_t sub_1000987AC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

BOOL sub_1000987B4(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000987CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100098838()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100098848()
{
  sub_100099B3C(&qword_1002A8118, type metadata accessor for MFAAError);

  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t sub_1000988B4(uint64_t a1)
{
  uint64_t v2 = sub_100099B3C(&qword_1002A8118, type metadata accessor for MFAAError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100098920(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100099B3C(&qword_1002A8118, type metadata accessor for MFAAError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_1000989B0()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000989E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100099B3C(&qword_1002A8118, type metadata accessor for MFAAError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100098A64()
{
  return Hasher._finalize()();
}

void *sub_100098AC4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
  return result;
}

void sub_100098AD4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100098AE4(uint64_t a1)
{
  uint64_t v2 = sub_100099B3C((unint64_t *)&qword_1002A8130, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_100099B3C(&qword_1002A8138, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100098BA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100098BCC(uint64_t a1)
{
  uint64_t v2 = sub_100099B3C(&qword_1002A8120, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_100099B3C(&qword_1002A8128, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100098C88(uint64_t a1)
{
  uint64_t v2 = sub_100099B3C((unint64_t *)&qword_1002A8160, type metadata accessor for Key);
  uint64_t v3 = sub_100099B3C(&qword_1002A8168, type metadata accessor for Key);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100098D44(uint64_t a1)
{
  uint64_t v2 = sub_100099B3C(&qword_1002A8150, type metadata accessor for EventType);
  uint64_t v3 = sub_100099B3C(&qword_1002A8158, type metadata accessor for EventType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100098E00@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100098E48(uint64_t a1)
{
  uint64_t v2 = sub_100099B3C(&qword_1002A8140, type metadata accessor for ID);
  uint64_t v3 = sub_100099B3C(&qword_1002A8148, type metadata accessor for ID);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100098F04(uint64_t a1)
{
  uint64_t v2 = sub_100099B3C(&qword_1002A80E0, type metadata accessor for MFAAError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100098F70(uint64_t a1)
{
  uint64_t v2 = sub_100099B3C(&qword_1002A80E0, type metadata accessor for MFAAError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100098FE0(uint64_t a1)
{
  uint64_t v2 = sub_100099B3C(&qword_1002A8118, type metadata accessor for MFAAError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10009904C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100099B3C(&qword_1002A8118, type metadata accessor for MFAAError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000990D0(uint64_t a1, uint64_t a2)
{
  return sub_1000990E8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000990E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10009912C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100099180()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000991F4()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_100099280(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002A7C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000992E8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10009932C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002A7C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100099394(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000993A4()
{
  return swift_release();
}

uint64_t sub_1000993AC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_100099480(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100099C1C((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100099C1C((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_100099BCC((uint64_t)v12);
  return v7;
}

uint64_t sub_100099480(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10009963C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10009963C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1000996D4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10009984C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10009984C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1000996D4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1001EC3B4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_10009984C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1000992E8(&qword_1002A7F40);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

__n128 initializeWithTake for SensorInfo(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Angle2DStamped(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Angle2DStamped(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for CMRotationRate(uint64_t a1)
{
}

void *sub_100099A14(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t sub_100099A20(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100099A40(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + _Block_object_dispose(&STACK[0x3D0], 8) = v3;
  return result;
}

void type metadata accessor for mach_timebase_info(uint64_t a1)
{
}

void type metadata accessor for IOHIDDevice(uint64_t a1)
{
}

void type metadata accessor for IOHIDManager(uint64_t a1)
{
}

void type metadata accessor for HAPFirmwareUpdateState(uint64_t a1)
{
}

void type metadata accessor for HAPDiagnosticsSnapshotType(uint64_t a1)
{
}

void type metadata accessor for HAPAccessoryServerPairSetupType(uint64_t a1)
{
}

void type metadata accessor for HAPPairSetupSessionRole(uint64_t a1)
{
}

uint64_t sub_100099AF4()
{
  return sub_100099B3C(&qword_1002A7F30, type metadata accessor for IOHIDDevice);
}

uint64_t sub_100099B3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100099B84()
{
  return sub_100099B3C(&qword_1002A7F38, type metadata accessor for IOHIDDevice);
}

uint64_t sub_100099BCC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100099C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100099C7C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_100099CB8()
{
  unint64_t result = qword_1002A8580;
  if (!qword_1002A8580)
  {
    sub_100099D14((uint64_t *)&unk_1002A7F60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8580);
  }
  return result;
}

uint64_t sub_100099D14(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100099D5C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100099D6C(int a1, void *a2)
{
  return sub_100097CF0(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_100099D74()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100099D84()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_100099DB0(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002A7F70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100099E10()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100099EDC()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  return sub_1000DC2D4((void (*)(char *, uint64_t))(v0
                                                            + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))));
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for ACCEndpoint_TransportType_t(uint64_t a1)
{
}

void type metadata accessor for UARPFirmwareStagingCompletionStatus(uint64_t a1)
{
}

void type metadata accessor for UARPFirmwareApplicationStatus(uint64_t a1)
{
}

void type metadata accessor for CBManagerState(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for ID(uint64_t a1)
{
}

void type metadata accessor for EventType(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

void type metadata accessor for MFAAError(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for SetupPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_10009A050(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for RotationErrorStamped(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RotationErrorStamped(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for Vector3D(uint64_t a1)
{
}

__n128 initializeWithTake for FeedbackRule(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

__n128 initializeWithTake for MACAddress(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CBCentralManagerConnectionLatency(uint64_t a1)
{
}

uint64_t sub_10009A124()
{
  return sub_100099B3C(&qword_1002A8058, type metadata accessor for MFAAError);
}

uint64_t sub_10009A16C()
{
  return sub_100099B3C(&qword_1002A8060, type metadata accessor for MFAAError);
}

uint64_t sub_10009A1B4()
{
  return sub_100099B3C(&qword_1002A8068, type metadata accessor for Key);
}

uint64_t sub_10009A1FC()
{
  return sub_100099B3C(&qword_1002A8070, type metadata accessor for Key);
}

uint64_t sub_10009A244()
{
  return sub_100099B3C(&qword_1002A8078, type metadata accessor for EventType);
}

uint64_t sub_10009A28C()
{
  return sub_100099B3C(&qword_1002A8080, type metadata accessor for EventType);
}

uint64_t sub_10009A2D4()
{
  return sub_100099B3C(&qword_1002A8088, type metadata accessor for EventType);
}

uint64_t sub_10009A31C()
{
  return sub_100099B3C(&qword_1002A8090, type metadata accessor for ID);
}

uint64_t sub_10009A364()
{
  return sub_100099B3C(&qword_1002A8098, type metadata accessor for ID);
}

uint64_t sub_10009A3AC()
{
  return sub_100099B3C(&qword_1002A80A0, type metadata accessor for ID);
}

uint64_t sub_10009A3F4()
{
  return sub_100099B3C(&qword_1002A80A8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10009A43C()
{
  return sub_100099B3C(&qword_1002A80B0, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10009A484()
{
  return sub_100099B3C(&qword_1002A80B8, type metadata accessor for URLResourceKey);
}

uint64_t sub_10009A4CC()
{
  return sub_100099B3C(&qword_1002A80C0, type metadata accessor for URLResourceKey);
}

uint64_t sub_10009A514()
{
  return sub_100099B3C(&qword_1002A80C8, type metadata accessor for URLResourceKey);
}

uint64_t sub_10009A55C()
{
  return sub_100099B3C(&qword_1002A80D0, type metadata accessor for FileAttributeKey);
}

uint64_t sub_10009A5A4()
{
  return sub_100099B3C(&qword_1002A80D8, type metadata accessor for Key);
}

uint64_t sub_10009A5EC()
{
  return sub_100099B3C(&qword_1002A80E0, type metadata accessor for MFAAError);
}

uint64_t sub_10009A634()
{
  return sub_100099B3C(&qword_1002A80E8, type metadata accessor for MFAAError);
}

uint64_t sub_10009A67C()
{
  return sub_100099B3C(&qword_1002A80F0, type metadata accessor for MFAAError);
}

uint64_t sub_10009A6C4()
{
  return sub_100099B3C(&qword_1002A80F8, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_10009A720()
{
  return sub_100099B3C(&qword_1002A8100, type metadata accessor for Code);
}

unint64_t sub_10009A76C()
{
  unint64_t result = qword_1002A8108;
  if (!qword_1002A8108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8108);
  }
  return result;
}

uint64_t sub_10009A7C0()
{
  return sub_100099B3C(&qword_1002A8110, type metadata accessor for Code);
}

uint64_t sub_10009A808()
{
  return sub_100099B3C(&qword_1002A8118, type metadata accessor for MFAAError);
}

uint64_t getEnumTagSinglePayload for InvalalidAngle(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for InvalalidAngle(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void sub_10009A8AC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10009A93C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002A8240);
  sub_100096F64(v0, (uint64_t)qword_1002A8240);
  return Logger.init(subsystem:category:)();
}

id sub_10009A9C0()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = &v0[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger];
  uint64_t v6 = v0;
  Logger.init(subsystem:category:)();
  int64_t v7 = &v6[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy];
  *(void *)int64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  *((_DWORD *)v7 + 4) = 0;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateTimer] = 0;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_MANUAL_FWUP_TIMEOUT] = 0x408F400000000000;
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v5, v1);
  int64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "cert interface open", v10, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  size_t v11 = (objc_class *)type metadata accessor for dockCertHandler();
  v13.receiver = v6;
  v13.super_class = v11;
  return [super init];
}

uint64_t sub_10009ABFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 72) = v15;
  *(_DWORD *)(v8 + 200) = v14;
  *(void *)(v8 + 4_Block_object_dispose(&STACK[0x3D0], 8) = a7;
  *(void *)(v8 + 56) = a8;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 40) = a6;
  *(void *)(v8 + 24) = a4;
  uint64_t v9 = type metadata accessor for Errors();
  *(void *)(v8 + 80) = v9;
  *(void *)(v8 + 8_Block_object_dispose(&STACK[0x3D0], 8) = *(void *)(v9 - 8);
  *(void *)(v8 + 96) = swift_task_alloc();
  *(void *)(v8 + 104) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v8 + 112) = v10;
  *(void *)(v8 + 120) = *(void *)(v10 - 8);
  *(void *)(v8 + 12_Block_object_dispose(&STACK[0x3D0], 8) = swift_task_alloc();
  *(void *)(v8 + 136) = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10009AD58, 0, 0);
}

uint64_t sub_10009AD58()
{
  sub_1000A9C64();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10009ADF0;
  return sub_1000F67F0();
}

uint64_t sub_10009ADF0()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10009AEEC, 0, 0);
}

uint64_t sub_10009AEEC()
{
  uint64_t v1 = *(void *)(v0[3] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager);
  v0[19] = v1;
  if (v1)
  {
    type metadata accessor for AccessoryDiagnosticsOptions();
    swift_allocObject();
    swift_retain();
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = sub_100106C40(v2);
    v0[20] = v3;
    uint64_t v4 = (void *)swift_task_alloc();
    v0[21] = v4;
    void *v4 = v0;
    v4[1] = sub_10009B238;
    return sub_1000CD1E4(v3);
  }
  else
  {
    (*(void (**)(void, uint64_t, void))(v0[15] + 16))(v0[17], v0[4] + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v0[14]);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Diagnostics manager is nil", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = v0[17];
    uint64_t v10 = v0[14];
    uint64_t v11 = v0[15];
    uint64_t v13 = v0[12];
    uint64_t v12 = (void *)v0[13];
    uint64_t v14 = v0[10];
    uint64_t v15 = v0[11];
    uint64_t v19 = (void (*)(uint64_t, void *))v0[5];

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    void *v12 = 0xD00000000000001ALL;
    v12[1] = 0x8000000100234D00;
    (*(void (**)(void *, void, uint64_t))(v15 + 104))(v12, enum case for Errors.NotFound(_:), v14);
    (*(void (**)(uint64_t, void *, uint64_t))(v15 + 16))(v13, v12, v14);
    sub_1000A696C((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v16, v13, v14);
    uint64_t v17 = (void *)_convertErrorToNSError(_:)();
    v19(0xFFFFFFFFLL, v17);

    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
}

uint64_t sub_10009B238(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 176) = v2;
  swift_task_dealloc();
  if (v2)
  {
    os_log_type_t v7 = sub_10009B458;
  }
  else
  {
    *(void *)(v6 + 184) = a2;
    *(void *)(v6 + 192) = a1;
    os_log_type_t v7 = sub_10009B36C;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v7, 0, 0);
}

uint64_t sub_10009B36C()
{
  uint64_t v1 = *(unsigned int *)(v0 + 200);
  uint64_t v3 = *(void **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v3 diagnosticsFeedbackWithProcessID:v1 info:v2 path:v4 err:0];
  swift_release();
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10009B458()
{
  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 120) + 16))(*(void *)(v0 + 128), *(void *)(v0 + 32) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(void *)(v0 + 112));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    NSString v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Diagnostics transfer failed: %@", v3, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = *(unsigned int *)(v0 + 200);
  uint64_t v8 = *(void **)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
  uint64_t v9 = (void *)_convertErrorToNSError(_:)();
  [v8 diagnosticsFeedbackWithProcessID:v6 info:v7 path:0 err:v9];
  swift_release();
  swift_release();

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

void sub_10009B77C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    os_log_type_t v2 = *(void **)(Strong + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy);
    uint64_t v3 = *(void **)(Strong + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy + 8);
    uint64_t v4 = *(unsigned int *)(Strong + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy + 16);
    sub_10009EFC4(v2, v3);

    if (v2)
    {
      swift_unknownObjectRetain();
      NSString v5 = String._bridgeToObjectiveC()();
      sub_1000A6750();
      swift_allocError();
      *(void *)uint64_t v6 = 0xD000000000000020;
      *(void *)(v6 + _Block_object_dispose(&STACK[0x3D0], 8) = 0x8000000100234D80;
      *(unsigned char *)(v6 + 16) = 7;
      uint64_t v7 = (void *)_convertErrorToNSError(_:)();
      swift_errorRelease();
      [v2 fwUpdateFeedbackWithProcessID:v4 info:v3 message:v5 complete:1 err:v7];

      swift_unknownObjectRelease_n();
    }
  }
  swift_beginAccess();
  uint64_t v8 = swift_unknownObjectWeakLoadStrong();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    uint64_t v10 = v8 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy;
    uint64_t v11 = *(void *)(v8 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy);
    uint64_t v12 = *(void **)(v10 + 8);
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
    *(_DWORD *)(v10 + 16) = 0;
    sub_10009EF84(v11, v12);
  }
}

uint64_t sub_10009B9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(_DWORD *)(v6 + 344) = a6;
  *(void *)(v6 + 224) = a4;
  *(void *)(v6 + 232) = a5;
  *(void *)(v6 + 20_Block_object_dispose(&STACK[0x3D0], 8) = a2;
  *(void *)(v6 + 216) = a3;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v6 + 240) = v7;
  *(void *)(v6 + 24_Block_object_dispose(&STACK[0x3D0], 8) = *(void *)(v7 - 8);
  *(void *)(v6 + 256) = swift_task_alloc();
  *(void *)(v6 + 264) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v6 + 272) = v8;
  *(void *)(v6 + 280) = *(void *)(v8 - 8);
  *(void *)(v6 + 28_Block_object_dispose(&STACK[0x3D0], 8) = swift_task_alloc();
  *(void *)(v6 + 296) = swift_task_alloc();
  *(void *)(v6 + 304) = swift_task_alloc();
  *(void *)(v6 + 312) = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10009BB28, 0, 0);
}

uint64_t sub_10009BB28()
{
  uint64_t v61 = v0;
  id v1 = [*(id *)(v0 + 216) remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1000992E8(&qword_1002A8300);
  if ((swift_dynamicCast() & 1) == 0)
  {
    (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 280) + 16))(*(void *)(v0 + 312), *(void *)(v0 + 224) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(void *)(v0 + 272));
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "nsxpc proxy is nil", v34, 2u);
      swift_slowDealloc();
    }
    uint64_t v35 = *(void *)(v0 + 312);
    uint64_t v36 = *(void *)(v0 + 272);
    uint64_t v37 = *(void *)(v0 + 280);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
    goto LABEL_25;
  }
  os_log_type_t v2 = *(void **)(v0 + 192);
  *(void *)(v0 + 320) = v2;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v3 = v0 + 16;
  uint64_t v4 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  uint64_t v6 = *(void **)&v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v7 = v4;
  id v8 = v6;
  OS_dispatch_semaphore.wait()();

  uint64_t v9 = &v7[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v10 = *(void *)(*(void *)v9 + 16);
  if (v10)
  {
    uint64_t v54 = v5;
    uint64_t v55 = v4;
    uint64_t v56 = v7;
    uint64_t v59 = v2;
    uint64_t v11 = *(void *)v9 + 32;
    uint64_t v12 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 248) + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v14 = *(void *)(v0 + 256);
      uint64_t v13 = *(void *)(v0 + 264);
      uint64_t v15 = *(void *)(v0 + 240);
      sub_1000A5D40(v11, v0 + 56);
      id v16 = *(id *)(*sub_1000A5DA4((void *)(v0 + 56), *(void *)(v0 + 80)) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v16) = static UUID.== infix(_:_:)();
      uint64_t v17 = *v12;
      (*v12)(v14, v15);
      v17(v13, v15);
      if (v16) {
        break;
      }
      sub_100099BCC(v0 + 56);
      v11 += 40;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v0 + 16;
        os_log_type_t v2 = v59;
        uint64_t v4 = v55;
        uint64_t v7 = v56;
        uint64_t v5 = v54;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    id v38 = *(id *)&v55[v54];
    OS_dispatch_semaphore.signal()();

    uint64_t v3 = v0 + 16;
    sub_1000A5D40(v0 + 56, v0 + 16);
    sub_100099BCC(v0 + 56);

    os_log_type_t v2 = v59;
    if (!*(void *)(v0 + 40)) {
      goto LABEL_19;
    }
  }
  else
  {
LABEL_9:
    id v18 = *(id *)&v4[v5];
    OS_dispatch_semaphore.signal()();

    *(void *)(v3 + 32) = 0;
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;

    if (!*(void *)(v0 + 40))
    {
LABEL_19:
      sub_1000A61E4(v3, (uint64_t *)&unk_1002AAA30);
      goto LABEL_21;
    }
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_21:
    (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 280) + 16))(*(void *)(v0 + 288), *(void *)(v0 + 224) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(void *)(v0 + 272));
    __int16 v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Accessory record not found", v41, 2u);
      swift_slowDealloc();

      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
    (*(void (**)(void, void))(*(void *)(v0 + 280) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 272));
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(v0 + 176);
  *(void *)(v0 + 32_Block_object_dispose(&STACK[0x3D0], 8) = v19;
  if (*(unsigned char *)(v19 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) != 2)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v20 = *(void *)(v0 + 272);
  uint64_t v21 = *(void *)(v0 + 280);
  uint64_t v22 = *(void *)(v0 + 224);
  if (*(void *)(v0 + 208))
  {
    (*(void (**)(void, uint64_t, uint64_t))(v21 + 16))(*(void *)(v0 + 296), v22 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v20);
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    char v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 296);
    uint64_t v27 = *(void *)(v0 + 272);
    uint64_t v28 = *(void *)(v0 + 280);
    if (v25)
    {
      uint64_t v58 = *(void *)(v0 + 296);
      uint64_t v57 = *(void *)(v0 + 272);
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v29 = 136315138;
      swift_getErrorValue();
      uint64_t v30 = Error.localizedDescription.getter();
      *(void *)(v0 + 200) = sub_1000993AC(v30, v31, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Device connection failed: %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v58, v57);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    }
    uint64_t v51 = *(unsigned int *)(v0 + 344);
    uint64_t v52 = *(void *)(v0 + 232);
    uint64_t v53 = (void *)_convertErrorToNSError(_:)();
    [v2 haltFeedbackWithProcessID:v51 info:v52 success:0 complete:1 err:v53];
    swift_unknownObjectRelease();
    swift_release();

    swift_errorRelease();
LABEL_25:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
    return v42();
  }
  (*(void (**)(void, uint64_t, uint64_t))(v21 + 16))(*(void *)(v0 + 304), v22 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v20);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v44, v45))
  {
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Device connected, initiating halt request", v46, 2u);
    swift_slowDealloc();
  }
  uint64_t v47 = *(void *)(v0 + 304);
  uint64_t v48 = *(void *)(v0 + 272);
  uint64_t v49 = *(void *)(v0 + 280);

  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
  uint64_t v50 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v50;
  void *v50 = v0;
  v50[1] = sub_10009C3B4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 348, 0, 0, 0x2928746C6168, 0xE600000000000000, sub_1000A6740, v19, &type metadata for Bool);
}

uint64_t sub_10009C3B4()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10009C4B0, 0, 0);
}

uint64_t sub_10009C4B0()
{
  [*(id *)(v0 + 320) haltFeedbackWithProcessID:*(unsigned int *)(v0 + 344) info:*(void *)(v0 + 232) success:*(unsigned __int8 *)(v0 + 348) complete:1 err:0];
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10009C588(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (int *)((char *)a4 + *a4);
  id v8 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v8;
  void *v8 = v6;
  v8[1] = sub_1000A69C4;
  return ((uint64_t (*)(uint64_t, void))v10)(a6, 0);
}

uint64_t sub_10009C680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(_DWORD *)(v6 + 344) = a6;
  *(void *)(v6 + 224) = a4;
  *(void *)(v6 + 232) = a5;
  *(void *)(v6 + 20_Block_object_dispose(&STACK[0x3D0], 8) = a2;
  *(void *)(v6 + 216) = a3;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v6 + 240) = v7;
  *(void *)(v6 + 24_Block_object_dispose(&STACK[0x3D0], 8) = *(void *)(v7 - 8);
  *(void *)(v6 + 256) = swift_task_alloc();
  *(void *)(v6 + 264) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v6 + 272) = v8;
  *(void *)(v6 + 280) = *(void *)(v8 - 8);
  *(void *)(v6 + 28_Block_object_dispose(&STACK[0x3D0], 8) = swift_task_alloc();
  *(void *)(v6 + 296) = swift_task_alloc();
  *(void *)(v6 + 304) = swift_task_alloc();
  *(void *)(v6 + 312) = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10009C7DC, 0, 0);
}

uint64_t sub_10009C7DC()
{
  uint64_t v61 = v0;
  id v1 = [*(id *)(v0 + 216) remoteObjectProxy];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_1000992E8(&qword_1002A8300);
  if ((swift_dynamicCast() & 1) == 0)
  {
    (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 280) + 16))(*(void *)(v0 + 312), *(void *)(v0 + 224) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(void *)(v0 + 272));
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "nsxpc proxy is nil", v34, 2u);
      swift_slowDealloc();
    }
    uint64_t v35 = *(void *)(v0 + 312);
    uint64_t v36 = *(void *)(v0 + 272);
    uint64_t v37 = *(void *)(v0 + 280);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
    goto LABEL_25;
  }
  os_log_type_t v2 = *(void **)(v0 + 192);
  *(void *)(v0 + 320) = v2;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v3 = v0 + 16;
  uint64_t v4 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  uint64_t v6 = *(void **)&v4[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v7 = v4;
  id v8 = v6;
  OS_dispatch_semaphore.wait()();

  uint64_t v9 = &v7[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v10 = *(void *)(*(void *)v9 + 16);
  if (v10)
  {
    uint64_t v54 = v5;
    uint64_t v55 = v4;
    uint64_t v56 = v7;
    uint64_t v59 = v2;
    uint64_t v11 = *(void *)v9 + 32;
    uint64_t v12 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 248) + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v14 = *(void *)(v0 + 256);
      uint64_t v13 = *(void *)(v0 + 264);
      uint64_t v15 = *(void *)(v0 + 240);
      sub_1000A5D40(v11, v0 + 56);
      id v16 = *(id *)(*sub_1000A5DA4((void *)(v0 + 56), *(void *)(v0 + 80)) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v16) = static UUID.== infix(_:_:)();
      uint64_t v17 = *v12;
      (*v12)(v14, v15);
      v17(v13, v15);
      if (v16) {
        break;
      }
      sub_100099BCC(v0 + 56);
      v11 += 40;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v0 + 16;
        os_log_type_t v2 = v59;
        uint64_t v4 = v55;
        uint64_t v7 = v56;
        uint64_t v5 = v54;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    id v38 = *(id *)&v55[v54];
    OS_dispatch_semaphore.signal()();

    uint64_t v3 = v0 + 16;
    sub_1000A5D40(v0 + 56, v0 + 16);
    sub_100099BCC(v0 + 56);

    os_log_type_t v2 = v59;
    if (!*(void *)(v0 + 40)) {
      goto LABEL_19;
    }
  }
  else
  {
LABEL_9:
    id v18 = *(id *)&v4[v5];
    OS_dispatch_semaphore.signal()();

    *(void *)(v3 + 32) = 0;
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;

    if (!*(void *)(v0 + 40))
    {
LABEL_19:
      sub_1000A61E4(v3, (uint64_t *)&unk_1002AAA30);
      goto LABEL_21;
    }
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_21:
    (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 280) + 16))(*(void *)(v0 + 288), *(void *)(v0 + 224) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(void *)(v0 + 272));
    __int16 v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      id v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Accessory record not found", v41, 2u);
      swift_slowDealloc();

      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
    (*(void (**)(void, void))(*(void *)(v0 + 280) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 272));
    goto LABEL_25;
  }
  uint64_t v19 = *(void *)(v0 + 176);
  *(void *)(v0 + 32_Block_object_dispose(&STACK[0x3D0], 8) = v19;
  if (*(unsigned char *)(v19 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) != 2)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v20 = *(void *)(v0 + 272);
  uint64_t v21 = *(void *)(v0 + 280);
  uint64_t v22 = *(void *)(v0 + 224);
  if (*(void *)(v0 + 208))
  {
    (*(void (**)(void, uint64_t, uint64_t))(v21 + 16))(*(void *)(v0 + 296), v22 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v20);
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    char v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v0 + 296);
    uint64_t v27 = *(void *)(v0 + 272);
    uint64_t v28 = *(void *)(v0 + 280);
    if (v25)
    {
      uint64_t v58 = *(void *)(v0 + 296);
      uint64_t v57 = *(void *)(v0 + 272);
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v29 = 136315138;
      swift_getErrorValue();
      uint64_t v30 = Error.localizedDescription.getter();
      *(void *)(v0 + 200) = sub_1000993AC(v30, v31, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Device connection failed: %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v58, v57);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    }
    uint64_t v51 = *(unsigned int *)(v0 + 344);
    uint64_t v52 = *(void *)(v0 + 232);
    uint64_t v53 = (void *)_convertErrorToNSError(_:)();
    [v2 rebootFeedbackWithProcessID:v51 info:v52 success:0 complete:1 err:v53];
    swift_unknownObjectRelease();
    swift_release();

    swift_errorRelease();
LABEL_25:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
    return v42();
  }
  (*(void (**)(void, uint64_t, uint64_t))(v21 + 16))(*(void *)(v0 + 304), v22 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v20);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v44, v45))
  {
    unint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v46 = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Device connected, initiating reboot request", v46, 2u);
    swift_slowDealloc();
  }
  uint64_t v47 = *(void *)(v0 + 304);
  uint64_t v48 = *(void *)(v0 + 272);
  uint64_t v49 = *(void *)(v0 + 280);

  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
  uint64_t v50 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v50;
  void *v50 = v0;
  v50[1] = sub_10009D06C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 348, 0, 0, 0x2928746F6F626572, 0xE800000000000000, sub_1000A64AC, v19, &type metadata for Bool);
}

uint64_t sub_10009D06C()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10009D168, 0, 0);
}

uint64_t sub_10009D168()
{
  [*(id *)(v0 + 320) rebootFeedbackWithProcessID:*(unsigned int *)(v0 + 344) info:*(void *)(v0 + 232) success:*(unsigned __int8 *)(v0 + 348) complete:1 err:0];
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_10009D258(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  id v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
  _Block_release(v8);
}

uint64_t sub_10009D380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_DWORD *)(v8 + 304) = v13;
  *(void *)(v8 + 176) = a8;
  *(void *)(v8 + 184) = v14;
  *(void *)(v8 + 160) = a6;
  *(void *)(v8 + 16_Block_object_dispose(&STACK[0x3D0], 8) = a7;
  *(void *)(v8 + 144) = a4;
  *(void *)(v8 + 152) = a5;
  uint64_t v9 = type metadata accessor for Errors();
  *(void *)(v8 + 192) = v9;
  *(void *)(v8 + 200) = *(void *)(v9 - 8);
  *(void *)(v8 + 20_Block_object_dispose(&STACK[0x3D0], 8) = swift_task_alloc();
  *(void *)(v8 + 216) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v8 + 224) = v10;
  *(void *)(v8 + 232) = *(void *)(v10 - 8);
  *(void *)(v8 + 240) = swift_task_alloc();
  *(void *)(v8 + 24_Block_object_dispose(&STACK[0x3D0], 8) = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10009D500, 0, 0);
}

uint64_t sub_10009D500()
{
  sub_1000A9C64();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10009D5C4;
  return sub_1000F9954();
}

uint64_t sub_10009D5C4()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10009D6EC, 0, 0);
}

uint64_t sub_10009D6EC()
{
  uint64_t v1 = *(void *)(v0[18] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager);
  v0[33] = v1;
  if (v1)
  {
    swift_retain();
    os_log_type_t v2 = (void *)swift_task_alloc();
    v0[34] = v2;
    void *v2 = v0;
    v2[1] = sub_10009DA48;
    return sub_1000EC204();
  }
  else
  {
    (*(void (**)(void, uint64_t, void))(v0[29] + 16))(v0[31], v0[19] + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v0[28]);
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, (os_log_type_t)v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, (os_log_type_t)v5, "Accessory description manager is nil", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[31];
    uint64_t v8 = v0[28];
    uint64_t v9 = v0[29];
    uint64_t v11 = v0[26];
    uint64_t v10 = (void *)v0[27];
    uint64_t v12 = v0[24];
    uint64_t v13 = v0[25];
    uint64_t v17 = (void (*)(uint64_t, void, void *))v0[20];

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    void *v10 = 0xD00000000000001ALL;
    v10[1] = 0x8000000100234D00;
    (*(void (**)(void *, void, uint64_t))(v13 + 104))(v10, enum case for Errors.NotFound(_:), v12);
    (*(void (**)(uint64_t, void *, uint64_t))(v13 + 16))(v11, v10, v12);
    sub_1000A696C((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v14, v11, v12);
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    v17(0xFFFFFFFFLL, 0, v15);

    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_10009DA48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[35] = a1;
  v4[36] = a2;
  v4[37] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_10009E00C;
  }
  else {
    uint64_t v5 = sub_10009DB8C;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v5, 0, 0);
}

uint64_t sub_10009DB8C()
{
  uint64_t v29 = v0;
  unint64_t v1 = *(void *)(v0 + 288);
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v5 = *(void *)(v0 + 280);
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      uint64_t v27 = (void *)(v0 + 16);
      uint64_t v6 = *(void *)(v0 + 296);
      sub_1000A618C(v5, v1);
      swift_retain();
      sub_100161F9C((int)v5, v5 >> 32, v1 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100162354);
      uint64_t v8 = v7;
      uint64_t result = sub_1000A6240(v5, v1);
      if (!v6) {
        goto LABEL_7;
      }
      break;
    case 2uLL:
      uint64_t v27 = (void *)(v0 + 16);
      uint64_t v10 = *(void *)(v0 + 296);
      uint64_t v11 = *(void *)(v0 + 280);
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = *(void *)(v11 + 24);
      sub_1000A618C(v11, v1);
      swift_retain();
      swift_retain();
      sub_100161F9C(v12, v13, v1 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100162354);
      uint64_t v8 = v14;
      swift_release();
      uint64_t result = swift_release();
      if (!v10)
      {
LABEL_7:
        uint64_t v3 = *(void *)(v0 + 280);
        unint64_t v4 = *(void *)(v0 + 288);
        if (v8) {
          goto LABEL_17;
        }
        *(void *)(v0 + 112) = v3;
        *(void *)(v0 + 120) = v4;
        sub_1000A618C(v3, v4);
        sub_1000992E8(&qword_1002A8320);
        if (swift_dynamicCast())
        {
          sub_1000A6298((long long *)(v0 + 56), (uint64_t)v27);
          sub_1000A5DA4(v27, *(void *)(v0 + 40));
          if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
          {
            uint64_t v16 = *(void *)(v0 + 280);
            unint64_t v15 = *(void *)(v0 + 288);
            sub_1000A5DA4(v27, *(void *)(v0 + 40));
            dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
            sub_1000A6240(v16, v15);
            sub_100099BCC((uint64_t)v27);
            goto LABEL_18;
          }
          sub_100099BCC((uint64_t)v27);
        }
        else
        {
          *(void *)(v0 + 8_Block_object_dispose(&STACK[0x3D0], 8) = 0;
          *(_OWORD *)(v0 + 56) = 0u;
          *(_OWORD *)(v0 + 72) = 0u;
          sub_1000A61E4(v0 + 56, &qword_1002A8328);
        }
        uint64_t v18 = *(void *)(v0 + 280);
        unint64_t v19 = *(void *)(v0 + 288);
        sub_100161EE8(v18, v19);
        uint64_t v3 = v18;
        unint64_t v4 = v19;
        goto LABEL_17;
      }
      break;
    case 3uLL:
      uint64_t v17 = *(void *)(v0 + 296);
      *(void *)(v0 + 30_Block_object_dispose(&STACK[0x3D0], 8) = 0;
      *(void *)(v0 + 314) = 0;
      uint64_t result = sub_100162354(&v28);
      if (!v17)
      {
        sub_1000A6240(*(void *)(v0 + 280), *(void *)(v0 + 288));
        goto LABEL_18;
      }
      break;
    default:
      uint64_t v2 = *(void *)(v0 + 280);
      *(void *)(v0 + 322) = v2;
      *(_WORD *)(v0 + 330) = v1;
      *(unsigned char *)(v0 + 332) = BYTE2(v1);
      *(unsigned char *)(v0 + 333) = BYTE3(v1);
      *(unsigned char *)(v0 + 334) = BYTE4(v1);
      *(unsigned char *)(v0 + 335) = BYTE5(v1);
      static String._fromUTF8Repairing(_:)();
      uint64_t v3 = v2;
      unint64_t v4 = v1;
LABEL_17:
      sub_1000A6240(v3, v4);
LABEL_18:
      uint64_t v20 = *(void *)(v0 + 280);
      unint64_t v21 = *(void *)(v0 + 288);
      uint64_t v22 = *(unsigned int *)(v0 + 304);
      os_log_type_t v24 = *(void **)(v0 + 176);
      uint64_t v23 = *(void *)(v0 + 184);
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v24 accessoryDescriptionFeedbackWithProcessID:v22 info:v23 accessoryDescription:v25 err:0];
      swift_release();

      sub_1000A6240(v20, v21);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v26();
      break;
  }
  return result;
}

uint64_t sub_10009E00C()
{
  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 232) + 16))(*(void *)(v0 + 240), *(void *)(v0 + 152) + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, *(void *)(v0 + 224));
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    unint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 12_Block_object_dispose(&STACK[0x3D0], 8) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Accessory Description transfer request failed with %@", v3, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = *(unsigned int *)(v0 + 304);
  uint64_t v8 = *(void **)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 184);
  (*(void (**)(void, void))(*(void *)(v0 + 232) + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
  uint64_t v9 = (void *)_convertErrorToNSError(_:)();
  [v8 accessoryDescriptionFeedbackWithProcessID:v6 info:v7 accessoryDescription:0 err:v9];
  swift_release();

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10009E2B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10009E2D0, 0, 0);
}

uint64_t sub_10009E2D0()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = 1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10009E3D4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 6, 0, 0, 0xD000000000000010, 0x8000000100234C40, sub_1000A5FCC, v2, &type metadata for Bool);
}

uint64_t sub_10009E3D4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10009E4EC, 0, 0);
}

uint64_t sub_10009E4EC()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10009E524(void *a1, int a2, void *a3, void *aBlock, void (*a5)(void *, id, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(a3, v10, v8);
  _Block_release(v8);
  _Block_release(v8);
}

id sub_10009E5C0()
{
  return sub_10009ED54(0, type metadata accessor for dockCertHandler);
}

uint64_t sub_10009E674()
{
  return type metadata accessor for dockCertHandler();
}

uint64_t type metadata accessor for dockCertHandler()
{
  uint64_t result = qword_1002A8280;
  if (!qword_1002A8280) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10009E6C8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_10009E778(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  uint64_t v6 = v4 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy;
  uint64_t v7 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy);
  if (v7)
  {
    uint64_t v9 = *(unsigned int *)(v6 + 16);
    id v10 = *(void **)(v6 + 8);
    uint64_t v11 = (void *)swift_unknownObjectRetain();
    sub_10009EFC4(v11, v10);
    NSString v12 = String._bridgeToObjectiveC()();
    if (a4) {
      a4 = (void *)_convertErrorToNSError(_:)();
    }
    [v7 fwUpdateFeedbackWithProcessID:v9 info:v10 message:v12 complete:a3 & 1 err:a4];

    swift_unknownObjectRelease_n();
  }
  if (a3)
  {
    uint64_t v13 = *(void *)v6;
    uint64_t v14 = *(void **)(v6 + 8);
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
    *(_DWORD *)(v6 + 16) = 0;
    sub_10009EF84(v13, v14);
  }
}

void sub_10009E884(uint64_t a1, uint64_t a2, char a3, void *a4)
{
}

void sub_10009E8A8(char a1)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = *(void **)(*v1 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateTimer);
    *(void *)(*v1 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateTimer) = 0;

    uint64_t v5 = v3 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy;
    uint64_t v6 = *(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy);
    uint64_t v7 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy + 8);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
    *(_DWORD *)(v5 + 16) = 0;
    sub_10009EF84(v6, v7);
  }
}

uint64_t sub_10009E910(int a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7B38 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100096F64(v10, (uint64_t)qword_1002A8240);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_bridgeObjectRetain_n();
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  int v33 = a1;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    unint64_t v31 = a5;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v32 = a4;
    v34[0] = v20;
    *(_DWORD *)uint64_t v19 = 67109378;
    LODWORD(v35) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + _Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    uint64_t v35 = a2;
    uint64_t v36 = a3;
    swift_bridgeObjectRetain();
    sub_1000992E8((uint64_t *)&unk_1002A82C0);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v35 = sub_1000993AC(v21, v22, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v31, (uint8_t *)v19, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1002B1628;
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v25 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v26 = *(os_unfair_lock_s **)(v23 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v26 + 4);
  swift_release();
  swift_beginAccess();
  uint64_t v27 = (void *)sub_1001ED0B8(v33);
  swift_endAccess();

  uint64_t v28 = *(os_unfair_lock_s **)(v23 + v25);
  swift_retain();
  os_unfair_lock_unlock(v28 + 4);

  return swift_release();
}

id sub_10009ED3C(uint64_t a1)
{
  return sub_10009ED54(a1, type metadata accessor for CertificationServiceDelegate);
}

id sub_10009ED54(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t type metadata accessor for CertificationServiceDelegate()
{
  return self;
}

void destroy for ProxyContainer(uint64_t a1)
{
  swift_unknownObjectRelease();
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t _s14dockaccessoryd14ProxyContainerVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x3D0], 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ProxyContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  id v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x3D0], 8) = v4;
  id v6 = v4;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 initializeWithTake for ProxyContainer(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for ProxyContainer(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProxyContainer(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 20)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProxyContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 20) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProxyContainer()
{
  return &type metadata for ProxyContainer;
}

void sub_10009EF84(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_unknownObjectRelease();
  }
}

id sub_10009EFC4(id result, void *a2)
{
  if (result)
  {
    swift_unknownObjectRetain();
    return a2;
  }
  return result;
}

void sub_10009F004(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for Logger();
  __chkstk_darwin(v6);
  if (a1)
  {
    uint64_t v7 = qword_1002A7C00;
    id v8 = a1;
    if (v7 != -1) {
      swift_once();
    }
    id v9 = *(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    sub_1000D38F8(v8);

    id v15 = 0;
    (*(void (**)(uint64_t, uint64_t, void))(a3 + 16))(a3, 1, 0);
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v11;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x8000000100234C00;
    sub_1001E9E0C(inited);
    id v12 = objc_allocWithZone((Class)NSError);
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v15 = [v12 initWithDomain:v13 code:72 userInfo:isa];

    (*(void (**)(uint64_t, void, id))(a3 + 16))(a3, 0, v15);
  }
}

void sub_10009F730(void *a1, uint64_t a2, void *a3, void (**a4)(const void *, uint64_t, void *))
{
  v151 = a3;
  uint64_t v136 = a2;
  v146 = a1;
  v152 = (void *)type metadata accessor for UUID();
  uint64_t v137 = *(v152 - 1);
  uint64_t v5 = __chkstk_darwin(v152);
  uint64_t v7 = &v133[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  id v9 = &v133[-v8];
  uint64_t v10 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v10 - 8);
  v135 = &v133[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for Errors();
  uint64_t v149 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  v147 = &v133[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v148 = &v133[-v15];
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  v139 = &v133[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = __chkstk_darwin(v18);
  v138 = &v133[-v21];
  uint64_t v22 = __chkstk_darwin(v20);
  v141 = &v133[-v23];
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = &v133[-v25];
  __chkstk_darwin(v24);
  uint64_t v28 = &v133[-v27];
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = a4;
  uint64_t v30 = self;
  v150 = a4;
  _Block_copy(a4);
  unint64_t v31 = [v30 currentConnection];
  if (v31)
  {
    uint64_t v142 = v17;
    uint64_t v143 = v16;
    uint64_t v140 = v12;
    uint64_t v144 = v29;
    v145 = v31;
    unsigned int v32 = [v31 processIdentifier];
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v33 = qword_1002B1628;
    uint64_t v34 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v35 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v35 + 4);
    swift_release();
    uint64_t v36 = *(void **)(v33 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    uint64_t v37 = *(os_unfair_lock_s **)(v33 + v34);
    id v38 = v36;
    swift_retain();
    os_unfair_lock_unlock(v37 + 4);
    swift_release();
    if (!v36)
    {
      uint64_t v66 = v142;
      uint64_t v67 = v143;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v142 + 16))(v26, (uint64_t)v151 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v143);
      uint64_t v68 = Logger.logObject.getter();
      os_log_type_t v69 = static os_log_type_t.error.getter();
      BOOL v70 = os_log_type_enabled(v68, v69);
      id v71 = v145;
      if (v70)
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v72 = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "No accessory connected. Cannot initiate accessory diagnostics", v72, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(unsigned char *, uint64_t))(v66 + 8))(v26, v67);
      unint64_t v73 = v148;
      void *v148 = 0xD000000000000016;
      v73[1] = 0x8000000100234C90;
      uint64_t v74 = v149;
      uint64_t v75 = v140;
      (*(void (**)(void *, void, uint64_t))(v149 + 104))(v73, enum case for Errors.AccessoryNotReachable(_:), v140);
      id v76 = v147;
      (*(void (**)(unsigned char *, void *, uint64_t))(v74 + 16))(v147, v73, v75);
      sub_1000A696C((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v74 + 32))(v77, v76, v75);
      uint64_t v78 = (void *)_convertErrorToNSError(_:)();
      v150[2](v150, 0xFFFFFFFFLL, v78);

      (*(void (**)(void *, uint64_t))(v74 + 8))(v73, v75);
      swift_errorRelease();
      goto LABEL_46;
    }
    v153 = dispatch thunk of DockCoreAccessory.info.getter();

    uint64_t v39 = v144;
    os_log_type_t v40 = v145;
    id v41 = v146;
    if (v146)
    {
      type metadata accessor for DockCoreInfo();
      id v42 = v41;
      if ((static NSObject.== infix(_:_:)() & 1) == 0)
      {
        uint64_t v86 = v142;
        uint64_t v87 = v143;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v142 + 16))(v141, (uint64_t)v151 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v143);
        v88 = v42;
        v89 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v89, v90))
        {
          v91 = (uint8_t *)swift_slowAlloc();
          id v92 = (void *)swift_slowAlloc();
          *(_DWORD *)v91 = 138412290;
          *(void *)&long long v155 = v88;
          id v93 = v88;
          uint64_t v86 = v142;
          os_log_type_t v40 = v145;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v92 = v146;

          _os_log_impl((void *)&_mh_execute_header, v89, v90, "%@ is not connected", v91, 0xCu);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          uint64_t v87 = v143;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          v89 = v88;
        }

        (*(void (**)(unsigned char *, uint64_t))(v86 + 8))(v141, v87);
        *(void *)&long long v155 = 0;
        *((void *)&v155 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(19);
        id v94 = [v88 description];
        uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v97 = v96;
        swift_bridgeObjectRelease();

        *(void *)&long long v155 = v95;
        *((void *)&v155 + 1) = v97;
        v98._object = (void *)0x8000000100234CE0;
        v98._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v98);
        uint64_t v99 = *((void *)&v155 + 1);
        v100 = v148;
        void *v148 = v155;
        v100[1] = v99;
        uint64_t v101 = v149;
        uint64_t v102 = v140;
        (*(void (**)(void *, void, uint64_t))(v149 + 104))(v100, enum case for Errors.AccessoryNotReachable(_:), v140);
        uint64_t v103 = v147;
        (*(void (**)(unsigned char *, void *, uint64_t))(v101 + 16))(v147, v100, v102);
        sub_1000A696C((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
        swift_allocError();
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(v101 + 32))(v104, v103, v102);
        v105 = (void *)_convertErrorToNSError(_:)();
        v150[2](v150, 0xFFFFFFFFLL, v105);

        (*(void (**)(void *, uint64_t))(v101 + 8))(v100, v102);
        goto LABEL_45;
      }
    }
    id v43 = [v40 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000992E8(&qword_1002A8300);
    if (!swift_dynamicCast())
    {
      uint64_t v79 = v142;
      uint64_t v80 = v138;
      uint64_t v81 = v143;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v142 + 16))(v138, (uint64_t)v151 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v143);
      id v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v84 = 0;
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "nsxpc proxy is nil", v84, 2u);
        swift_slowDealloc();
        v85 = v153;
      }
      else
      {
        v85 = v82;
        id v82 = v40;
        os_log_type_t v40 = v153;
      }

      (*(void (**)(unsigned char *, uint64_t))(v79 + 8))(v80, v81);
      goto LABEL_46;
    }
    v146 = (void *)v154[0];
    uint64_t v44 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    v141 = (unsigned char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    os_log_type_t v45 = *(void **)((char *)v44 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
    unint64_t v46 = v44;
    id v47 = v45;
    OS_dispatch_semaphore.wait()();

    uint64_t v48 = &v46[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v49 = *(void *)v48;
    uint64_t v50 = *(void *)(*(void *)v48 + 16);
    unsigned int v134 = v32;
    if (v50)
    {
      v138 = v46;
      uint64_t v51 = v49 + 32;
      uint64_t v52 = (void (**)(unsigned char *, void *))(v137 + 8);
      swift_bridgeObjectRetain();
      uint64_t v53 = v152;
      while (1)
      {
        sub_1000A5D40(v51, (uint64_t)v154);
        id v54 = *(id *)(*sub_1000A5DA4(v154, v154[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v54) = static UUID.== infix(_:_:)();
        uint64_t v55 = *v52;
        (*v52)(v7, v53);
        v55(v9, v53);
        if (v54) {
          break;
        }
        sub_100099BCC((uint64_t)v154);
        v51 += 40;
        if (!--v50)
        {
          swift_bridgeObjectRelease();
          uint64_t v39 = v144;
          unint64_t v46 = v138;
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease();
      id v106 = *(id *)&v141[(void)v44];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v154, (uint64_t)&v155);
      sub_100099BCC((uint64_t)v154);

      uint64_t v39 = v144;
    }
    else
    {
LABEL_14:
      id v56 = *(id *)&v141[(void)v44];
      OS_dispatch_semaphore.signal()();

      uint64_t v157 = 0;
      long long v155 = 0u;
      long long v156 = 0u;
    }
    v107 = v145;
    uint64_t v108 = v140;
    uint64_t v109 = v143;
    uint64_t v110 = v142;
    v111 = v139;
    if (*((void *)&v156 + 1))
    {
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      if (swift_dynamicCast())
      {
        uint64_t v112 = v154[0];
        if (*(unsigned char *)(v154[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2
          && (v113 = *(char **)(v154[0] + 16)) != 0)
        {
          uint64_t v114 = *(void **)&v113[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
          if (v114)
          {
            v115 = v113;
            if ([v114 state] == (id)2)
            {
              uint64_t v116 = type metadata accessor for TaskPriority();
              uint64_t v117 = (uint64_t)v135;
              (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v135, 1, 1, v116);
              uint64_t v118 = swift_allocObject();
              *(void *)(v118 + 16) = 0;
              *(void *)(v118 + 24) = 0;
              v119 = v151;
              *(void *)(v118 + 32) = v112;
              *(void *)(v118 + 40) = v119;
              *(void *)(v118 + 4_Block_object_dispose(&STACK[0x3D0], 8) = sub_1000A67E4;
              *(void *)(v118 + 56) = v39;
              v120 = v146;
              *(void *)(v118 + 64) = v136;
              *(void *)(v118 + 72) = v120;
              v152 = v115;
              uint64_t v121 = v134;
              *(_DWORD *)(v118 + 80) = v134;
              v122 = v153;
              *(void *)(v118 + 8_Block_object_dispose(&STACK[0x3D0], 8) = v153;
              swift_retain();
              id v123 = v119;
              swift_retain();
              swift_bridgeObjectRetain();
              swift_unknownObjectRetain();
              v124 = v122;
              sub_1001BC1A8(v117, (uint64_t)&unk_1002A8390, v118);
              swift_release();

              swift_release();
              v150[2](v150, v121, 0);
              swift_release();

              swift_unknownObjectRelease();
              return;
            }
            swift_release();
          }
          else
          {
            swift_release();
          }
          uint64_t v108 = v140;
        }
        else
        {
          swift_release();
        }
      }
    }
    else
    {
      sub_1000A61E4((uint64_t)&v155, (uint64_t *)&unk_1002AAA30);
    }
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v110 + 16))(v111, (uint64_t)v151 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v109);
    v125 = Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v125, v126))
    {
      v127 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v127 = 0;
      _os_log_impl((void *)&_mh_execute_header, v125, v126, "accessory does not exist and/or is not paired", v127, 2u);
      uint64_t v108 = v140;
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v110 + 8))(v111, v109);
    v128 = v148;
    void *v148 = 0xD00000000000002DLL;
    v128[1] = 0x8000000100234CB0;
    uint64_t v129 = v149;
    (*(void (**)(void *, void, uint64_t))(v149 + 104))(v128, enum case for Errors.NotFound(_:), v108);
    v130 = v147;
    (*(void (**)(unsigned char *, void *, uint64_t))(v129 + 16))(v147, v128, v108);
    sub_1000A696C((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v129 + 32))(v131, v130, v108);
    v132 = (void *)_convertErrorToNSError(_:)();
    v150[2](v150, 0xFFFFFFFFLL, v132);
    swift_unknownObjectRelease();

    (*(void (**)(void *, uint64_t))(v129 + 8))(v128, v108);
LABEL_45:
    swift_errorRelease();
LABEL_46:
    swift_release();
    return;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v17 + 16))(v28, (uint64_t)v151 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v16);
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Failed fetching current NSXPCConnection, cannot construct client", v59, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(unsigned char *, uint64_t))(v17 + 8))(v28, v16);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v61;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD000000000000029;
  *(void *)(inited + 56) = 0x8000000100234C60;
  sub_1001E9E0C(inited);
  id v62 = objc_allocWithZone((Class)NSError);
  NSString v63 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v65 = [v62 initWithDomain:v63 code:100 userInfo:isa];

  v150[2](v150, 0xFFFFFFFFLL, v65);
  swift_release();
}

void sub_1000A0AA0(NSObject *a1, void *a2, void (*a3)(char *, uint64_t), char *a4, char *a5, uint64_t a6)
{
  v150 = a4;
  uint64_t v149 = a3;
  v148 = a2;
  os_log_t v147 = a1;
  uint64_t v8 = type metadata accessor for UUID();
  v151 = *(char **)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v132 - v12;
  long long v155 = (void *)type metadata accessor for Errors();
  v154 = (char *)*(v155 - 1);
  uint64_t v14 = __chkstk_darwin(v155);
  v152 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v153 = (char *)&v132 - v16;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v20 = __chkstk_darwin(v19);
  __chkstk_darwin(v20);
  uint64_t v22 = __chkstk_darwin((char *)&v132 - v21);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v132 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v132 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v34 = (char *)&v132 - v30;
  uint64_t v35 = *(void *)&a5[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy];
  uint64_t v156 = a6;
  if (v35 || *(void *)&a5[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateTimer])
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))((char *)&v132 - v30, &a5[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger], v17);
    uint64_t v36 = v17;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v158 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315138;
      v157[0] = sub_1000993AC(0xD00000000000003FLL, 0x8000000100234D20, (uint64_t *)&v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v34, v36);
    os_log_type_t v40 = v155;
    id v41 = v154;
    id v42 = v153;
    id v43 = v152;
    *(void *)v153 = 0xD00000000000003FLL;
    *((void *)v42 + 1) = 0x8000000100234D20;
    (*((void (**)(char *, void, void *))v41 + 13))(v42, enum case for Errors.OperationInProgress(_:), v40);
    (*((void (**)(char *, char *, void *))v41 + 2))(v43, v42, v40);
    sub_1000A696C((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*((void (**)(uint64_t, char *, void *))v41 + 4))(v44, v43, v40);
    os_log_type_t v45 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, uint64_t, void *))(v156 + 16))(v156, 0xFFFFFFFFLL, v45);

    (*((void (**)(char *, void *))v41 + 1))(v42, v40);
LABEL_6:
    swift_errorRelease();
    return;
  }
  uint64_t v143 = v29;
  uint64_t v144 = v33;
  uint64_t v141 = v32;
  v139 = (uint64_t *)&a5[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateProxy];
  uint64_t v140 = OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_fwUpdateTimer;
  uint64_t v142 = v31;
  v145 = a5;
  id v46 = [self currentConnection];
  if (v46)
  {
    id v47 = v46;
    id v48 = [v46 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000992E8(&qword_1002A8300);
    if (swift_dynamicCast())
    {
      uint64_t v138 = v157[0];
      unsigned int v135 = [v47 processIdentifier];
      if (qword_1002A7C00 != -1) {
        swift_once();
      }
      uint64_t v49 = qword_1002B1628;
      uint64_t v50 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      uint64_t v51 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain();
      os_unfair_lock_lock(v51 + 4);
      swift_release();
      uint64_t v52 = *(void **)(v49 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
      uint64_t v53 = *(os_unfair_lock_s **)(v49 + v50);
      id v54 = v52;
      swift_retain();
      os_unfair_lock_unlock(v53 + 4);
      swift_release();
      if (v52)
      {
        uint64_t v55 = (char *)objc_retain(*(id *)(qword_1002B1628
                                        + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager));
        id v146 = (id)dispatch thunk of DockCoreAccessory.info.getter();
        uint64_t v136 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        id v56 = *(id *)&v55[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
        OS_dispatch_semaphore.wait()();

        uint64_t v137 = v55;
        uint64_t v57 = &v55[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
        swift_beginAccess();
        uint64_t v58 = *(void *)v57;
        uint64_t v59 = *(void *)(*(void *)v57 + 16);
        uint64_t v60 = (void *)&unk_1002B1000;
        if (v59)
        {
          id v134 = v54;
          id v133 = v47;
          uint64_t v132 = v18;
          uint64_t v61 = v58 + 32;
          id v62 = (void (**)(char *, uint64_t))(v151 + 8);
          swift_bridgeObjectRetain();
          while (1)
          {
            sub_1000A5D40(v61, (uint64_t)v157);
            id v63 = *(id *)(*sub_1000A5DA4(v157, v157[3]) + 24);
            DockCoreInfo.identifier.getter();

            DockCoreInfo.identifier.getter();
            LOBYTE(v63) = static UUID.== infix(_:_:)();
            id v64 = *v62;
            (*v62)(v11, v8);
            v64(v13, v8);
            if (v63) {
              break;
            }
            sub_100099BCC((uint64_t)v157);
            v61 += 40;
            if (!--v59)
            {
              swift_bridgeObjectRelease();
              uint64_t v18 = v132;
              id v47 = v133;
              id v54 = v134;
              uint64_t v60 = (void *)&unk_1002B1000;
              goto LABEL_17;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v81 = v137;
          id v82 = *(id *)&v137[v136];
          OS_dispatch_semaphore.signal()();

          sub_1000A5D40((uint64_t)v157, (uint64_t)&v158);
          sub_100099BCC((uint64_t)v157);

          uint64_t v18 = v132;
          id v47 = v133;
          id v54 = v134;
          uint64_t v60 = &unk_1002B1000;
        }
        else
        {
LABEL_17:
          id v65 = v137;
          id v66 = *(id *)&v137[v136];
          OS_dispatch_semaphore.signal()();

          v160 = 0;
          long long v158 = 0u;
          long long v159 = 0u;
        }
        if (*((void *)&v159 + 1))
        {
          sub_1000992E8(&qword_1002A82E0);
          type metadata accessor for DaemonAccessory();
          if (swift_dynamicCast())
          {
            unint64_t v83 = v157[0];
            uint64_t v84 = *(void *)(v157[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData + 8);
            if (v84
              && (v85 = *(char **)(v157[0] + 16)) != 0
              && (uint64_t v86 = *(void **)&v85[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
            {
              id v134 = v54;
              uint64_t v87 = *(void *)(v157[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_productData);
              swift_bridgeObjectRetain();
              v88 = v85;
              if ([v86 state] == (id)2)
              {
                v152 = v88;
                id v133 = v47;
                v89 = *(char **)(v18 + 16);
                v154 = &v145[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger];
                v153 = v89;
                ((void (*)(uint64_t))v89)(v143);
                os_log_type_t v90 = Logger.logObject.getter();
                os_log_type_t v91 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v90, v91))
                {
                  id v92 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)id v92 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v90, v91, "Device is connected, now initiating firmware update", v92, 2u);
                  swift_slowDealloc();
                }

                id v94 = *(void **)(v18 + 8);
                uint64_t v93 = v18 + 8;
                long long v155 = v94;
                ((void (*)(uint64_t, uint64_t))v94)(v143, v17);
                uint64_t v95 = (char *)objc_retain(*(id *)(*(void *)(v60[197]
                                                            + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager)
                                                + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager));
                uint64_t v96 = (void (*)(char *, uint64_t))sub_10014A4E4((uint64_t)v147, v148, (uint64_t)v149, v150, v87, v84);
                v151 = v95;
                uint64_t v109 = v108;
                uint64_t v149 = v96;
                swift_bridgeObjectRelease();
                ((void (*)(uint64_t, char *, uint64_t))v153)(v141, v154, v17);
                uint64_t v110 = v95;
                swift_retain_n();
                v150 = v110;
                v111 = Logger.logObject.getter();
                os_log_type_t v112 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v111, v112))
                {
                  uint64_t v113 = swift_slowAlloc();
                  v148 = v109;
                  uint64_t v114 = v113;
                  uint64_t v144 = (void *)swift_slowAlloc();
                  *(_DWORD *)uint64_t v114 = 138412546;
                  os_log_t v147 = v111;
                  unint64_t v115 = v83;
                  uint64_t v116 = *(void **)(v83 + 24);
                  *(void *)&long long v158 = v116;
                  uint64_t v132 = v93;
                  id v117 = v116;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *uint64_t v144 = v116;
                  unint64_t v83 = v115;
                  swift_release_n();
                  *(_WORD *)(v114 + 12) = 2048;
                  *(void *)&long long v158 = 0x404E000000000000;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  uint64_t v118 = v150;

                  os_log_t v119 = v147;
                  _os_log_impl((void *)&_mh_execute_header, v147, v112, "Setting accessory reachable %@ after %f secs", (uint8_t *)v114, 0x16u);
                  sub_1000992E8(&qword_1002A7C40);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  uint64_t v109 = v148;
                  swift_slowDealloc();
                }
                else
                {

                  v120 = v150;
                  swift_release_n();
                }
                ((void (*)(uint64_t, uint64_t))v155)(v141, v17);
                sub_10014A068(v83, 1, v149, (unint64_t)v109, 0.0);
                swift_bridgeObjectRelease();
                *((void *)&v159 + 1) = type metadata accessor for dockCertHandler();
                v160 = &off_100275518;
                uint64_t v121 = v145;
                *(void *)&long long v158 = v145;
                v122 = v145;
                sub_10014A714((uint64_t)&v158, v83);
                sub_100099BCC((uint64_t)&v158);
                id v123 = *(void **)(v83 + 24);
                v124 = v139;
                uint64_t v125 = *v139;
                os_log_type_t v126 = (void *)v139[1];
                uint64_t *v139 = v138;
                v124[1] = (uint64_t)v123;
                uint64_t v127 = v135;
                *((_DWORD *)v124 + 4) = v135;
                swift_unknownObjectRetain();
                id v128 = v123;
                sub_10009EF84(v125, v126);
                swift_allocObject();
                swift_unknownObjectWeakInit();
                id v129 = objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
                swift_retain();
                uint64_t v130 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
                uint64_t v131 = *(void **)&v121[v140];
                *(void *)&v121[v140] = v130;
                swift_release();
                swift_release();

                (*(void (**)(uint64_t, uint64_t, void))(v156 + 16))(v156, v127, 0);
                swift_unknownObjectRelease();
                return;
              }

              swift_release();
              swift_bridgeObjectRelease();
            }
            else
            {

              swift_release();
            }
          }
          else
          {
          }
        }
        else
        {

          sub_1000A61E4((uint64_t)&v158, (uint64_t *)&unk_1002AAA30);
        }
      }
      uint64_t v97 = v47;
      uint64_t v98 = v18;
      (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v144, &v145[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger], v17);
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v101 = 0;
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "No accessory connected, try again", v101, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(void *, uint64_t))(v98 + 8))(v144, v17);
      uint64_t v102 = v153;
      *(void *)v153 = 0xD000000000000016;
      *((void *)v102 + 1) = 0x8000000100234C90;
      uint64_t v103 = v154;
      uint64_t v104 = v155;
      (*((void (**)(char *, void, void *))v154 + 13))(v102, enum case for Errors.AccessoryNotReachable(_:), v155);
      v105 = v152;
      (*((void (**)(char *, char *, void *))v103 + 2))(v152, v102, v104);
      sub_1000A696C((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      (*((void (**)(uint64_t, char *, void *))v103 + 4))(v106, v105, v104);
      v107 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, uint64_t, void *))(v156 + 16))(v156, 0xFFFFFFFFLL, v107);
      swift_unknownObjectRelease();

      (*((void (**)(char *, void *))v103 + 1))(v102, v104);
      goto LABEL_6;
    }
    uint64_t v77 = v18;
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v25, &v145[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger], v17);
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v80 = 0;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "nsxpc proxy is nil", v80, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v77 + 8))(v25, v17);
  }
  else
  {
    uint64_t v67 = v18;
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v28, &v145[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger], v17);
    uint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      BOOL v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Failed fetching current NSXPCConnection, cannot construct client", v70, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v67 + 8))(v28, v17);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v72;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD000000000000029;
    *(void *)(inited + 56) = 0x8000000100234C60;
    sub_1001E9E0C(inited);
    id v73 = objc_allocWithZone((Class)NSError);
    NSString v74 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v76 = [v73 initWithDomain:v74 code:100 userInfo:isa];

    (*(void (**)(uint64_t, uint64_t, id))(a6 + 16))(a6, 0xFFFFFFFFLL, v76);
  }
}

void sub_1000A20A4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  os_log_type_t v90 = *(void **)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v80 - v10;
  uint64_t v12 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v12 - 8);
  uint64_t v81 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v84 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v93 = (char *)&v80 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v80 - v20;
  id v22 = [self currentConnection];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v91 = v15;
    uint64_t v92 = v14;
    unsigned int v24 = [v22 processIdentifier];
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v23;
    *(void *)(v25 + 24) = a2;
    *(void *)(v25 + 32) = a1;
    unsigned int v82 = v24;
    *(_DWORD *)(v25 + 40) = v24;
    uint64_t v26 = qword_1002A7C00;
    id v86 = v23;
    v85 = a2;
    id v27 = a1;
    if (v26 != -1) {
      swift_once();
    }
    uint64_t v28 = &unk_1002B1000;
    uint64_t v29 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    uint64_t v87 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    uint64_t v30 = *(void **)&v29[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    v88 = v29;
    uint64_t v31 = v29;
    id v32 = v30;
    OS_dispatch_semaphore.wait()();

    v89 = v31;
    uint64_t v33 = &v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(void *)(*(void *)v33 + 16);
    uint64_t v83 = a3;
    if (v35)
    {
      uint64_t v80 = v25;
      uint64_t v36 = v34 + 32;
      uint64_t v37 = (void (**)(char *, uint64_t))(v90 + 1);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000A5D40(v36, (uint64_t)v94);
        id v38 = *(id *)(*sub_1000A5DA4(v94, v94[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v3_Block_object_dispose(&STACK[0x3D0], 8) = static UUID.== infix(_:_:)();
        uint64_t v39 = *v37;
        (*v37)(v9, v6);
        v39(v11, v6);
        if (v38) {
          break;
        }
        sub_100099BCC((uint64_t)v94);
        v36 += 40;
        if (!--v35)
        {
          swift_bridgeObjectRelease();
          a3 = v83;
          uint64_t v25 = v80;
          uint64_t v28 = (void *)&unk_1002B1000;
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease();
      id v50 = *(id *)&v88[v87];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v94, (uint64_t)&v95);
      sub_100099BCC((uint64_t)v94);

      a3 = v83;
      uint64_t v25 = v80;
      uint64_t v28 = &unk_1002B1000;
    }
    else
    {
LABEL_9:
      id v40 = *(id *)&v88[v87];
      OS_dispatch_semaphore.signal()();

      uint64_t v97 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
    }
    uint64_t v51 = v91;
    if (*((void *)&v96 + 1))
    {
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      if (swift_dynamicCast())
      {
        if (*(unsigned char *)(v94[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2
          && (uint64_t v52 = *(char **)(v94[0] + 16)) != 0
          && (uint64_t v53 = *(void **)&v52[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
        {
          id v54 = v52;
          if ([v53 state] == (id)2)
          {
            uint64_t v55 = type metadata accessor for TaskPriority();
            uint64_t v56 = (uint64_t)v81;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v81, 1, 1, v55);
            uint64_t v57 = (void *)swift_allocObject();
            v57[2] = 0;
            v57[3] = 0;
            v57[4] = &unk_1002A8360;
            v57[5] = v25;
            v57[6] = v54;
            uint64_t v58 = v54;
            swift_retain();
            sub_1001BC1A8(v56, (uint64_t)&unk_1002A8370, (uint64_t)v57);
            swift_release();

            id v59 = v86;
            uint64_t v60 = v82;
            goto LABEL_31;
          }
          swift_release();
        }
        else
        {
          swift_release();
        }
      }
    }
    else
    {
      sub_1000A61E4((uint64_t)&v95, (uint64_t *)&unk_1002AAA30);
    }
    sub_1001891D0(v27);
    id v62 = v61;

    id v63 = &v85[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger];
    id v64 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
    if (!v62)
    {
      BOOL v70 = v84;
      uint64_t v71 = v92;
      v64(v84, v63, v92);
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        NSString v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)NSString v74 = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "accessory does not exist and/or is not paired ", v74, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v51 + 8))(v70, v71);
      (*(void (**)(uint64_t, uint64_t, void, void))(a3 + 16))(a3, 0xFFFFFFFFLL, 0, 0);

      goto LABEL_32;
    }
    v64(v93, v63, v92);
    id v65 = v27;
    id v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v90 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v68 = 138412290;
      *(void *)&long long v95 = v65;
      os_log_type_t v69 = v65;
      a3 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v90 = v65;

      _os_log_impl((void *)&_mh_execute_header, v66, v67, "%@ not connected, connecting and deferring callback for later", v68, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      uint64_t v51 = v91;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v66 = v65;
    }
    id v59 = v86;
    uint64_t v60 = v82;

    (*(void (**)(char *, uint64_t))(v51 + 8))(v93, v92);
    uint64_t v75 = *(void **)(v28[197] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    sub_1000992E8(&qword_1002A8340);
    uint64_t v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = xmmword_100240BF0;
    *(void *)(v76 + 32) = v65;
    *(void *)&long long v95 = v76;
    specialized Array._endMutation()();
    uint64_t v77 = v95;
    uint64_t v78 = v65;
    swift_retain();
    id v79 = v75;
    sub_1000D4560(v77, (uint64_t)&unk_1002A8360, v25);

    swift_bridgeObjectRelease();
LABEL_31:
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(a3 + 16))(a3, v60, 1, 0);

LABEL_32:
    swift_release();
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v21, (uint64_t)a2 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v14);
  id v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    id v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed fetching current NSXPCConnection, cannot construct client", v43, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v45;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD000000000000029;
  *(void *)(inited + 56) = 0x8000000100234C60;
  sub_1001E9E0C(inited);
  id v46 = objc_allocWithZone((Class)NSError);
  NSString v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v49 = [v46 initWithDomain:v47 code:100 userInfo:isa];

  (*(void (**)(uint64_t, uint64_t, void, id))(a3 + 16))(a3, 0xFFFFFFFFLL, 0, v49);
}

void sub_1000A2C2C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  os_log_type_t v90 = *(void **)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v80 - v10;
  uint64_t v12 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v12 - 8);
  uint64_t v81 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v84 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v93 = (char *)&v80 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v80 - v20;
  id v22 = [self currentConnection];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v91 = v15;
    uint64_t v92 = v14;
    unsigned int v24 = [v22 processIdentifier];
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v23;
    *(void *)(v25 + 24) = a2;
    *(void *)(v25 + 32) = a1;
    unsigned int v82 = v24;
    *(_DWORD *)(v25 + 40) = v24;
    uint64_t v26 = qword_1002A7C00;
    id v86 = v23;
    v85 = a2;
    id v27 = a1;
    if (v26 != -1) {
      swift_once();
    }
    uint64_t v28 = &unk_1002B1000;
    uint64_t v29 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    uint64_t v87 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    uint64_t v30 = *(void **)&v29[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    v88 = v29;
    uint64_t v31 = v29;
    id v32 = v30;
    OS_dispatch_semaphore.wait()();

    v89 = v31;
    uint64_t v33 = &v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(void *)(*(void *)v33 + 16);
    uint64_t v83 = a3;
    if (v35)
    {
      uint64_t v80 = v25;
      uint64_t v36 = v34 + 32;
      uint64_t v37 = (void (**)(char *, uint64_t))(v90 + 1);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000A5D40(v36, (uint64_t)v94);
        id v38 = *(id *)(*sub_1000A5DA4(v94, v94[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v3_Block_object_dispose(&STACK[0x3D0], 8) = static UUID.== infix(_:_:)();
        uint64_t v39 = *v37;
        (*v37)(v9, v6);
        v39(v11, v6);
        if (v38) {
          break;
        }
        sub_100099BCC((uint64_t)v94);
        v36 += 40;
        if (!--v35)
        {
          swift_bridgeObjectRelease();
          a3 = v83;
          uint64_t v25 = v80;
          uint64_t v28 = (void *)&unk_1002B1000;
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease();
      id v50 = *(id *)&v88[v87];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v94, (uint64_t)&v95);
      sub_100099BCC((uint64_t)v94);

      a3 = v83;
      uint64_t v25 = v80;
      uint64_t v28 = &unk_1002B1000;
    }
    else
    {
LABEL_9:
      id v40 = *(id *)&v88[v87];
      OS_dispatch_semaphore.signal()();

      uint64_t v97 = 0;
      long long v95 = 0u;
      long long v96 = 0u;
    }
    uint64_t v51 = v91;
    if (*((void *)&v96 + 1))
    {
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      if (swift_dynamicCast())
      {
        if (*(unsigned char *)(v94[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2
          && (uint64_t v52 = *(char **)(v94[0] + 16)) != 0
          && (uint64_t v53 = *(void **)&v52[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
        {
          id v54 = v52;
          if ([v53 state] == (id)2)
          {
            uint64_t v55 = type metadata accessor for TaskPriority();
            uint64_t v56 = (uint64_t)v81;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v81, 1, 1, v55);
            uint64_t v57 = (void *)swift_allocObject();
            v57[2] = 0;
            v57[3] = 0;
            v57[4] = &unk_1002A8338;
            v57[5] = v25;
            v57[6] = v54;
            uint64_t v58 = v54;
            swift_retain();
            sub_1001BC1A8(v56, (uint64_t)&unk_1002A8350, (uint64_t)v57);
            swift_release();

            id v59 = v86;
            uint64_t v60 = v82;
            goto LABEL_31;
          }
          swift_release();
        }
        else
        {
          swift_release();
        }
      }
    }
    else
    {
      sub_1000A61E4((uint64_t)&v95, (uint64_t *)&unk_1002AAA30);
    }
    sub_1001891D0(v27);
    id v62 = v61;

    id v63 = &v85[OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger];
    id v64 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
    if (!v62)
    {
      BOOL v70 = v84;
      uint64_t v71 = v92;
      v64(v84, v63, v92);
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        NSString v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)NSString v74 = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "accessory does not exist and/or is not paired ", v74, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v51 + 8))(v70, v71);
      (*(void (**)(uint64_t, uint64_t, void, void))(a3 + 16))(a3, 0xFFFFFFFFLL, 0, 0);

      goto LABEL_32;
    }
    v64(v93, v63, v92);
    id v65 = v27;
    id v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v90 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v68 = 138412290;
      *(void *)&long long v95 = v65;
      os_log_type_t v69 = v65;
      a3 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v90 = v65;

      _os_log_impl((void *)&_mh_execute_header, v66, v67, "%@ not connected, connecting and deferring callback for later", v68, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      uint64_t v51 = v91;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v66 = v65;
    }
    id v59 = v86;
    uint64_t v60 = v82;

    (*(void (**)(char *, uint64_t))(v51 + 8))(v93, v92);
    uint64_t v75 = *(void **)(v28[197] + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    sub_1000992E8(&qword_1002A8340);
    uint64_t v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = xmmword_100240BF0;
    *(void *)(v76 + 32) = v65;
    *(void *)&long long v95 = v76;
    specialized Array._endMutation()();
    uint64_t v77 = v95;
    uint64_t v78 = v65;
    swift_retain();
    id v79 = v75;
    sub_1000D4560(v77, (uint64_t)&unk_1002A8338, v25);

    swift_bridgeObjectRelease();
LABEL_31:
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(a3 + 16))(a3, v60, 1, 0);

LABEL_32:
    swift_release();
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v21, (uint64_t)a2 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v14);
  id v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    id v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed fetching current NSXPCConnection, cannot construct client", v43, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v45;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD000000000000029;
  *(void *)(inited + 56) = 0x8000000100234C60;
  sub_1001E9E0C(inited);
  id v46 = objc_allocWithZone((Class)NSError);
  NSString v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v49 = [v46 initWithDomain:v47 code:100 userInfo:isa];

  (*(void (**)(uint64_t, uint64_t, void, id))(a3 + 16))(a3, 0xFFFFFFFFLL, 0, v49);
}

void sub_1000A37B4(void *a1, void *a2, void (**a3)(const void *, uint64_t, void, void *))
{
  v148 = a2;
  uint64_t v143 = a1;
  uint64_t v149 = type metadata accessor for UUID();
  uint64_t v134 = *(void *)(v149 - 8);
  uint64_t v4 = __chkstk_darwin(v149);
  uint64_t v6 = &v131[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v131[-v7];
  uint64_t v9 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v9 - 8);
  id v133 = &v131[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for Errors();
  uint64_t v146 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v144 = &v131[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  v145 = &v131[-v14];
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v136 = &v131[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = __chkstk_darwin(v17);
  unsigned int v135 = &v131[-v20];
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v138 = &v131[-v22];
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = &v131[-v24];
  __chkstk_darwin(v23);
  id v27 = &v131[-v26];
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = a3;
  uint64_t v29 = self;
  os_log_t v147 = a3;
  _Block_copy(a3);
  uint64_t v30 = [v29 currentConnection];
  if (v30)
  {
    uint64_t v139 = v16;
    uint64_t v140 = v15;
    uint64_t v137 = v11;
    uint64_t v141 = v28;
    uint64_t v142 = v30;
    unsigned int v31 = [v30 processIdentifier];
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v32 = qword_1002B1628;
    uint64_t v33 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v34 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v34 + 4);
    swift_release();
    uint64_t v35 = *(void **)(v32 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    uint64_t v36 = *(os_unfair_lock_s **)(v32 + v33);
    id v37 = v35;
    swift_retain();
    os_unfair_lock_unlock(v36 + 4);
    swift_release();
    if (!v35)
    {
      uint64_t v65 = v139;
      uint64_t v66 = v140;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v139 + 16))(v25, (uint64_t)v148 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v140);
      os_log_type_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.error.getter();
      BOOL v69 = os_log_type_enabled(v67, v68);
      BOOL v70 = v142;
      if (v69)
      {
        uint64_t v71 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v71 = 0;
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "No accessory connected. Cannot initiate accessory description transfer", v71, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(unsigned char *, uint64_t))(v65 + 8))(v25, v66);
      uint64_t v72 = v145;
      void *v145 = 0xD000000000000016;
      v72[1] = 0x8000000100234C90;
      uint64_t v73 = v146;
      uint64_t v74 = v137;
      (*(void (**)(void *, void, uint64_t))(v146 + 104))(v72, enum case for Errors.AccessoryNotReachable(_:), v137);
      uint64_t v75 = v144;
      (*(void (**)(unsigned char *, void *, uint64_t))(v73 + 16))(v144, v72, v74);
      sub_1000A696C((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v73 + 32))(v76, v75, v74);
      uint64_t v77 = (void *)_convertErrorToNSError(_:)();
      v147[2](v147, 0xFFFFFFFFLL, 0, v77);

      (*(void (**)(void *, uint64_t))(v73 + 8))(v72, v74);
      swift_errorRelease();
      goto LABEL_46;
    }
    v150 = dispatch thunk of DockCoreAccessory.info.getter();

    uint64_t v38 = v141;
    uint64_t v39 = v142;
    id v40 = v143;
    if (v143)
    {
      type metadata accessor for DockCoreInfo();
      id v41 = v40;
      if ((static NSObject.== infix(_:_:)() & 1) == 0)
      {
        uint64_t v85 = v139;
        uint64_t v86 = v140;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v139 + 16))(v138, (uint64_t)v148 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v140);
        uint64_t v87 = v41;
        v88 = Logger.logObject.getter();
        os_log_type_t v89 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v88, v89))
        {
          os_log_type_t v90 = (uint8_t *)swift_slowAlloc();
          uint64_t v91 = (void *)swift_slowAlloc();
          *(_DWORD *)os_log_type_t v90 = 138412290;
          *(void *)&long long v152 = v87;
          uint64_t v92 = v87;
          uint64_t v85 = v139;
          uint64_t v39 = v142;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v91 = v143;

          _os_log_impl((void *)&_mh_execute_header, v88, v89, "%@ is not connected", v90, 0xCu);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          uint64_t v86 = v140;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          v88 = v87;
        }

        (*(void (**)(unsigned char *, uint64_t))(v85 + 8))(v138, v86);
        *(void *)&long long v152 = 0;
        *((void *)&v152 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(19);
        id v93 = [v87 description];
        uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v96 = v95;
        swift_bridgeObjectRelease();

        *(void *)&long long v152 = v94;
        *((void *)&v152 + 1) = v96;
        v97._object = (void *)0x8000000100234CE0;
        v97._countAndFlagsBits = 0xD000000000000011;
        String.append(_:)(v97);
        uint64_t v98 = *((void *)&v152 + 1);
        uint64_t v99 = v145;
        void *v145 = v152;
        v99[1] = v98;
        uint64_t v100 = v146;
        uint64_t v101 = v137;
        (*(void (**)(void *, void, uint64_t))(v146 + 104))(v99, enum case for Errors.AccessoryNotReachable(_:), v137);
        uint64_t v102 = v144;
        (*(void (**)(unsigned char *, void *, uint64_t))(v100 + 16))(v144, v99, v101);
        sub_1000A696C((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
        swift_allocError();
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(v100 + 32))(v103, v102, v101);
        uint64_t v104 = (void *)_convertErrorToNSError(_:)();
        v147[2](v147, 0xFFFFFFFFLL, 0, v104);

        (*(void (**)(void *, uint64_t))(v100 + 8))(v99, v101);
        goto LABEL_45;
      }
    }
    id v42 = [v39 remoteObjectProxy];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000992E8(&qword_1002A8300);
    if (!swift_dynamicCast())
    {
      uint64_t v78 = v139;
      id v79 = v135;
      uint64_t v80 = v140;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v139 + 16))(v135, (uint64_t)v148 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v140);
      uint64_t v81 = Logger.logObject.getter();
      os_log_type_t v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v83 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v83 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "nsxpc proxy is nil", v83, 2u);
        swift_slowDealloc();
        uint64_t v84 = v150;
      }
      else
      {
        uint64_t v84 = v81;
        uint64_t v81 = v39;
        uint64_t v39 = v150;
      }

      (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v79, v80);
      goto LABEL_46;
    }
    uint64_t v143 = (void *)v151[0];
    id v43 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    uint64_t v138 = (unsigned char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    uint64_t v44 = *(void **)((char *)v43 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
    uint64_t v45 = v43;
    id v46 = v44;
    OS_dispatch_semaphore.wait()();

    NSString v47 = &v45[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v48 = *(void *)v47;
    uint64_t v49 = *(void *)(*(void *)v47 + 16);
    unsigned int v132 = v31;
    if (v49)
    {
      unsigned int v135 = v45;
      uint64_t v50 = v48 + 32;
      uint64_t v51 = (void (**)(unsigned char *, uint64_t))(v134 + 8);
      swift_bridgeObjectRetain();
      uint64_t v52 = v149;
      while (1)
      {
        sub_1000A5D40(v50, (uint64_t)v151);
        id v53 = *(id *)(*sub_1000A5DA4(v151, v151[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v53) = static UUID.== infix(_:_:)();
        id v54 = *v51;
        (*v51)(v6, v52);
        v54(v8, v52);
        if (v53) {
          break;
        }
        sub_100099BCC((uint64_t)v151);
        v50 += 40;
        if (!--v49)
        {
          swift_bridgeObjectRelease();
          uint64_t v38 = v141;
          uint64_t v45 = v135;
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease();
      id v105 = *(id *)&v138[(void)v43];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v151, (uint64_t)&v152);
      sub_100099BCC((uint64_t)v151);

      uint64_t v38 = v141;
    }
    else
    {
LABEL_14:
      id v55 = *(id *)&v138[(void)v43];
      OS_dispatch_semaphore.signal()();

      uint64_t v154 = 0;
      long long v152 = 0u;
      long long v153 = 0u;
    }
    uint64_t v106 = v142;
    uint64_t v107 = v137;
    uint64_t v108 = v140;
    uint64_t v109 = v139;
    uint64_t v110 = v136;
    if (*((void *)&v153 + 1))
    {
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      if (swift_dynamicCast())
      {
        uint64_t v111 = v151[0];
        if (*(unsigned char *)(v151[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2
          && (os_log_type_t v112 = *(char **)(v151[0] + 16)) != 0)
        {
          uint64_t v113 = *(void **)&v112[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
          if (v113)
          {
            uint64_t v114 = v112;
            if ([v113 state] == (id)2)
            {
              uint64_t v115 = type metadata accessor for TaskPriority();
              uint64_t v116 = (uint64_t)v133;
              (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56))(v133, 1, 1, v115);
              uint64_t v117 = swift_allocObject();
              *(void *)(v117 + 16) = 0;
              *(void *)(v117 + 24) = 0;
              uint64_t v118 = v148;
              *(void *)(v117 + 32) = v111;
              *(void *)(v117 + 40) = v118;
              *(void *)(v117 + 4_Block_object_dispose(&STACK[0x3D0], 8) = sub_1000A6010;
              *(void *)(v117 + 56) = v38;
              *(void *)(v117 + 64) = v143;
              uint64_t v119 = v132;
              *(_DWORD *)(v117 + 72) = v132;
              v120 = v150;
              *(void *)(v117 + 80) = v150;
              swift_retain();
              id v121 = v118;
              swift_retain();
              swift_unknownObjectRetain();
              v122 = v120;
              sub_1001BC1A8(v116, (uint64_t)&unk_1002A8310, v117);
              swift_release();

              swift_release();
              v147[2](v147, v119, 1, 0);
              swift_release();

              swift_unknownObjectRelease();
              return;
            }
            swift_release();
          }
          else
          {
            swift_release();
          }
          uint64_t v107 = v137;
        }
        else
        {
          swift_release();
        }
      }
    }
    else
    {
      sub_1000A61E4((uint64_t)&v152, (uint64_t *)&unk_1002AAA30);
    }
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v109 + 16))(v110, (uint64_t)v148 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v108);
    id v123 = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v123, v124))
    {
      uint64_t v125 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v125 = 0;
      _os_log_impl((void *)&_mh_execute_header, v123, v124, "accessory does not exist and/or is not paired", v125, 2u);
      uint64_t v107 = v137;
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v109 + 8))(v110, v108);
    os_log_type_t v126 = v145;
    void *v145 = 0xD00000000000002DLL;
    v126[1] = 0x8000000100234CB0;
    uint64_t v127 = v146;
    (*(void (**)(void *, void, uint64_t))(v146 + 104))(v126, enum case for Errors.NotFound(_:), v107);
    id v128 = v144;
    (*(void (**)(unsigned char *, void *, uint64_t))(v127 + 16))(v144, v126, v107);
    sub_1000A696C((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v127 + 32))(v129, v128, v107);
    uint64_t v130 = (void *)_convertErrorToNSError(_:)();
    v147[2](v147, 0xFFFFFFFFLL, 0, v130);
    swift_unknownObjectRelease();

    (*(void (**)(void *, uint64_t))(v127 + 8))(v126, v107);
LABEL_45:
    swift_errorRelease();
LABEL_46:
    swift_release();
    return;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v16 + 16))(v27, (uint64_t)v148 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v15);
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed fetching current NSXPCConnection, cannot construct client", v58, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v27, v15);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v60;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD000000000000029;
  *(void *)(inited + 56) = 0x8000000100234C60;
  sub_1001E9E0C(inited);
  id v61 = objc_allocWithZone((Class)NSError);
  NSString v62 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v64 = [v61 initWithDomain:v62 code:100 userInfo:isa];

  v147[2](v147, 0xFFFFFFFFLL, 0, v64);
  swift_release();
}

void sub_1000A4B10(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v54 - v11;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v64 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v33;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x8000000100234C00;
    sub_1001E9E0C(inited);
    id v34 = objc_allocWithZone((Class)NSError);
    NSString v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v37 = [v34 initWithDomain:v35 code:72 userInfo:isa];

    (*(void (**)(uint64_t, void, id))(a3 + 16))(a3, 0, v37);
    return;
  }
  uint64_t v59 = v7;
  id v55 = v18;
  uint64_t v63 = a2;
  uint64_t v19 = qword_1002A7C00;
  id v65 = a1;
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v20 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v60 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v61 = v20;
  uint64_t v21 = *(void **)&v20[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v22 = v20;
  id v23 = v21;
  OS_dispatch_semaphore.wait()();

  NSString v62 = v22;
  uint64_t v24 = &v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v25 = *(void *)v24;
  uint64_t v26 = *(void *)(*(void *)v24 + 16);
  if (v26)
  {
    uint64_t v56 = v14;
    uint64_t v57 = v13;
    uint64_t v58 = a3;
    uint64_t v27 = v25 + 32;
    uint64_t v28 = (void (**)(char *, uint64_t))(v59 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v27, (uint64_t)v66);
      id v29 = *(id *)(*sub_1000A5DA4(v66, v66[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v29) = static UUID.== infix(_:_:)();
      uint64_t v30 = *v28;
      (*v28)(v10, v6);
      v30(v12, v6);
      if (v29) {
        break;
      }
      sub_100099BCC((uint64_t)v66);
      v27 += 40;
      if (!--v26)
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = v57;
        a3 = v58;
        uint64_t v14 = v56;
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    id v38 = *(id *)&v61[v60];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v66, (uint64_t)&v67);
    sub_100099BCC((uint64_t)v66);

    uint64_t v13 = v57;
    a3 = v58;
    uint64_t v14 = v56;
  }
  else
  {
LABEL_9:
    id v31 = *(id *)&v61[v60];
    OS_dispatch_semaphore.signal()();

    uint64_t v69 = 0;
    long long v67 = 0u;
    long long v68 = 0u;
  }
  uint64_t v39 = v63;
  id v40 = v64;
  if (*((void *)&v68 + 1))
  {
    sub_1000992E8(&qword_1002A82E0);
    type metadata accessor for DaemonAccessory();
    if (swift_dynamicCast())
    {
      uint64_t v41 = v66[0];
      if (*(unsigned char *)(v66[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2)
      {
        uint64_t v42 = type metadata accessor for TaskPriority();
        uint64_t v43 = (uint64_t)v55;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v55, 1, 1, v42);
        uint64_t v44 = (void *)swift_allocObject();
        v44[2] = 0;
        v44[3] = 0;
        v44[4] = v41;
        swift_retain();
        sub_1001BC1D4(v43, (uint64_t)&unk_1002A82F0, (uint64_t)v44);
        swift_release();
        (*(void (**)(uint64_t, uint64_t, void))(a3 + 16))(a3, 1, 0);

        swift_release();
        return;
      }
      swift_release();
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&v67, (uint64_t *)&unk_1002AAA30);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v40, v39 + OBJC_IVAR____TtC14dockaccessoryd15dockCertHandler_logger, v13);
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    NSString v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Accessory record not found", v47, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v40, v13);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000992E8((uint64_t *)&unk_1002A82D0);
  uint64_t v48 = swift_initStackObject();
  *(_OWORD *)(v48 + 16) = xmmword_100240BE0;
  *(void *)(v48 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v48 + 40) = v49;
  *(void *)(v48 + 72) = &type metadata for String;
  *(void *)(v48 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD00000000000001ALL;
  *(void *)(v48 + 56) = 0x8000000100234C20;
  sub_1001E9E0C(v48);
  id v50 = objc_allocWithZone((Class)NSError);
  NSString v51 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v52 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v53 = [v50 initWithDomain:v51 code:19 userInfo:v52];

  (*(void (**)(uint64_t, void, id))(a3 + 16))(a3, 0, v53);
}

uint64_t sub_1000A52D8(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v48 - v7;
  unsigned int v59 = [a1 processIdentifier];
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [a1 valueForEntitlement:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v68 = 0u;
    long long v69 = 0u;
  }
  sub_1000A5BE8((uint64_t)&v68, (uint64_t)&aBlock);
  if (v65)
  {
    int v11 = swift_dynamicCast();
    uint64_t v12 = v60;
    if (!v11) {
      uint64_t v12 = 0;
    }
    uint64_t v54 = v12;
    if (v11) {
      uint64_t v13 = v61;
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&aBlock, &qword_1002AA5F0);
    uint64_t v54 = 0;
    uint64_t v13 = 0;
  }
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v58 = v6;
  uint64_t v14 = sub_10019AE8C(a1);
  uint64_t v16 = v15;
  if (qword_1002A7B38 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_100096F64(v2, (uint64_t)qword_1002A8240);
  uint64_t v18 = *(void (**)(id, uint64_t, uint64_t))(v3 + 16);
  uint64_t v56 = v17;
  uint64_t v57 = v3 + 16;
  id v55 = v18;
  ((void (*)(char *))v18)(v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  uint64_t v19 = Logger.logObject.getter();
  uint64_t v20 = v3;
  os_log_type_t v21 = static os_log_type_t.default.getter();
  uint64_t v22 = v8;
  if (os_log_type_enabled(v19, v21))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    id v53 = a1;
    uint64_t v50 = v24;
    *(void *)&long long v68 = v24;
    *(_DWORD *)uint64_t v23 = 67109634;
    LODWORD(aBlock) = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + _Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    NSString v51 = v22;
    uint64_t aBlock = v54;
    uint64_t v63 = v13;
    swift_bridgeObjectRetain();
    sub_1000992E8((uint64_t *)&unk_1002A82C0);
    uint64_t v49 = v20;
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v52 = v2;
    uint64_t aBlock = sub_1000993AC(v25, v26, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 1_Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    uint64_t aBlock = v14;
    uint64_t v63 = v16;
    swift_bridgeObjectRetain();
    uint64_t v27 = String.init<A>(describing:)();
    uint64_t aBlock = sub_1000993AC(v27, v28, (uint64_t *)&v68);
    uint64_t v2 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v21, "new connection from pid %d, appID entitlement %s, appID %s", (uint8_t *)v23, 0x1Cu);
    swift_arrayDestroy();
    a1 = v53;
    swift_slowDealloc();
    swift_slowDealloc();

    id v29 = *(void (**)(char *, uint64_t))(v49 + 8);
    v29(v51, v2);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    id v29 = *(void (**)(char *, uint64_t))(v20 + 8);
    v29(v22, v2);
  }
  id v30 = v58;
  NSString v31 = String._bridgeToObjectiveC()();
  id v32 = [a1 valueForEntitlement:v31];

  if (v32)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v68 = 0u;
    long long v69 = 0u;
  }
  sub_1000A5BE8((uint64_t)&v68, (uint64_t)&aBlock);
  if (v65)
  {
    if (swift_dynamicCast() & 1) != 0 && (v60)
    {
      uint64_t v33 = self;
      id v58 = [v33 interfaceWithProtocol:&OBJC_PROTOCOL____TtP11DockKitCore22DockDaemonCertProtocol_];
      uint64_t v34 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v35 = swift_allocObject();
      unsigned int v36 = v59;
      *(_DWORD *)(v35 + 16) = v59;
      uint64_t v37 = v54;
      *(void *)(v35 + 24) = v54;
      *(void *)(v35 + 32) = v13;
      *(void *)(v35 + 40) = v34;
      uint64_t v66 = sub_1000A5C8C;
      uint64_t v67 = v35;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v63 = 1107296256;
      id v64 = sub_1001468DC;
      id v65 = &unk_100275580;
      id v38 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      [a1 setInvalidationHandler:v38];
      _Block_release(v38);
      uint64_t v39 = swift_allocObject();
      *(_DWORD *)(v39 + 16) = v36;
      *(void *)(v39 + 24) = v37;
      *(void *)(v39 + 32) = v13;
      *(void *)(v39 + 40) = v34;
      uint64_t v66 = sub_1000A5D14;
      uint64_t v67 = v39;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v63 = 1107296256;
      id v64 = sub_1001468DC;
      id v65 = &unk_1002755D0;
      id v40 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [a1 setInterruptionHandler:v40];
      _Block_release(v40);
      uint64_t v41 = v58;
      [a1 setExportedInterface:v58];
      id v42 = [v33 interfaceWithProtocol:&OBJC_PROTOCOL____TtP11DockKitCore22DockClientCertProtocol_];
      [a1 setRemoteObjectInterface:v42];
      id v43 = [objc_allocWithZone((Class)type metadata accessor for dockCertHandler()) init];
      [a1 setExportedObject:v43];
      [a1 resume];
      swift_release();

      return 1;
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&aBlock, &qword_1002AA5F0);
  }
  swift_bridgeObjectRelease();
  v55(v30, v56, v2);
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    NSString v47 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)NSString v47 = 67109120;
    LODWORD(aBlock) = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "process %d is not entitled for certification. Add entitlements and try again", v47, 8u);
    swift_slowDealloc();
  }

  v29((char *)v30, v2);
  [a1 invalidate];
  return 0;
}

uint64_t sub_1000A5BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002AA5F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A5C50()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A5C8C()
{
  return sub_10009E910(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been invalidated");
}

uint64_t sub_1000A5CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000A5CC8()
{
  return swift_release();
}

uint64_t sub_1000A5CD4()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000A5D14()
{
  return sub_10009E910(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been interrupted");
}

uint64_t sub_1000A5D40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void *sub_1000A5DA4(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1000A5DE8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000A5E28(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_1000A5ED8;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10009E2D0, 0, 0);
}

uint64_t sub_1000A5ED8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000A5FCC(uint64_t a1)
{
  return sub_1001AE338(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_1000A5FD8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A6010()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1000A6030()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000A6090(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  id v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_1000A69C4;
  return sub_10009D380(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1000A618C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1000A61E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000992E8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000A6240(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1000A6298(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1000A62B4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  int v9 = *(_DWORD *)(v2 + 40);
  id v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  void *v10 = v3;
  v10[1] = sub_1000A69C4;
  return sub_10009C680(a1, a2, v6, v7, v8, v9);
}

uint64_t sub_1000A6380()
{
  uint64_t v2 = *(int **)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1000A69C4;
  uint64_t v7 = (int *)((char *)v2 + *v2);
  uint64_t v5 = (void *)swift_task_alloc();
  v4[2] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1000A69C4;
  return ((uint64_t (*)(uint64_t, void))v7)(v3, 0);
}

uint64_t sub_1000A64AC(uint64_t a1)
{
  return sub_1001AEEDC(a1, v1);
}

uint64_t sub_1000A64B8()
{
  return _swift_deallocObject(v0, 44, 7);
}

uint64_t sub_1000A6500(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  int v9 = *(_DWORD *)(v2 + 40);
  id v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  void *v10 = v3;
  v10[1] = sub_1000A69C4;
  return sub_10009B9CC(a1, a2, v6, v7, v8, v9);
}

uint64_t sub_1000A65CC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000A6614()
{
  uint64_t v2 = *(int **)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[1] = sub_1000A69C4;
  uint64_t v7 = (int *)((char *)v2 + *v2);
  uint64_t v5 = (void *)swift_task_alloc();
  v4[2] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1000A69C4;
  return ((uint64_t (*)(uint64_t, void))v7)(v3, 0);
}

uint64_t sub_1000A6740(uint64_t a1)
{
  return sub_1001AF1C4(a1, v1);
}

void sub_1000A6748()
{
}

unint64_t sub_1000A6750()
{
  unint64_t result = qword_1002A87C0;
  if (!qword_1002A87C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A87C0);
  }
  return result;
}

unint64_t sub_1000A67A4()
{
  unint64_t result = qword_1002A8380;
  if (!qword_1002A8380)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_1002A8380);
  }
  return result;
}

uint64_t sub_1000A67E4()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1000A67FC()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000A6864(uint64_t a1)
{
  uint64_t v13 = v1[2];
  uint64_t v4 = v1[4];
  uint64_t v11 = v1[3];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = v1[8];
  int v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_1000A69C4;
  return sub_10009ABFC(a1, v13, v11, v4, v5, v6, v7, v8);
}

uint64_t sub_1000A696C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000A69C8(uint64_t a1, unint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8 = v7;
  unint64_t v43 = a2;
  uint64_t v44 = a5;
  uint64_t v42 = a1;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 != 12 || !a7) {
    return;
  }
  uint64_t v17 = (uint64_t *)(v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID);
  BOOL v18 = *(void *)(v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID) == a6
     && *(void *)(v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID + 8) == a7;
  if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return;
  }
  uint64_t v41 = a6;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_logger, v13);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v19 = v43;
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  int v40 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v20, (os_log_type_t)v40))
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v25 = v41;
    goto LABEL_13;
  }
  os_log_t v37 = v20;
  uint64_t v38 = v14;
  unsigned int v39 = a4;
  unint64_t v21 = v19;
  uint64_t v22 = swift_slowAlloc();
  uint64_t v36 = swift_slowAlloc();
  uint64_t v46 = v36;
  *(_DWORD *)uint64_t v22 = 136316162;
  if (!v21)
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t v45 = sub_1000993AC(v42, v21, &v46);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v22 + 12) = 2080;
  uint64_t v35 = (char *)(v22 + 14);
  LODWORD(v45) = 12;
  type metadata accessor for ACCEndpoint_TransportType_t(0);
  uint64_t v23 = String.init<A>(describing:)();
  uint64_t v45 = sub_1000993AC(v23, v24, &v46);
  v34[2] = &v46;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v22 + 22) = 1024;
  LODWORD(v45) = v39;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v22 + 2_Block_object_dispose(&STACK[0x3D0], 8) = 2080;
  uint64_t v25 = v41;
  if (!v44)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
  v34[1] = v22 + 30;
  swift_bridgeObjectRetain();
  uint64_t v35 = (char *)&type metadata for Any + 8;
  uint64_t v26 = Dictionary.description.getter();
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v45 = sub_1000993AC(v26, v28, &v46);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  *(_WORD *)(v22 + 3_Block_object_dispose(&STACK[0x3D0], 8) = 2080;
  swift_bridgeObjectRetain();
  uint64_t v45 = sub_1000993AC(v25, a7, &v46);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  os_log_t v29 = v37;
  _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v40, "Inductive accessory attached: %s, transport %s, protocol %u, properties %s, connection %s", (uint8_t *)v22, 0x30u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v13);
  a4 = v39;
LABEL_13:
  *uint64_t v17 = v25;
  v17[1] = a7;
  swift_bridgeObjectRelease();
  id v30 = *(void **)(v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_connectionDelegate);
  if (v30
    && ([*(id *)(v8 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_connectionDelegate) respondsToSelector:"accessoryEndpointAttached:transportType:protocol:properties:forConnection:"] & 1) != 0)
  {
    swift_unknownObjectRetain();
    if (v43)
    {
      NSString v31 = String._bridgeToObjectiveC()();
      if (v44)
      {
LABEL_17:
        v32.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
LABEL_20:
        NSString v33 = String._bridgeToObjectiveC()();
        [v30 accessoryEndpointAttached:v31 transportType:12 protocol:a4 properties:v32.super.isa forConnection:v33];
        swift_unknownObjectRelease();

        return;
      }
    }
    else
    {
      NSString v31 = 0;
      if (v44) {
        goto LABEL_17;
      }
    }
    v32.super.Class isa = 0;
    goto LABEL_20;
  }
}

void sub_1000A7008(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  int v40 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v10 = (char *)&v32 - v9;
  uint64_t v38 = *(void (**)(char *))(v6 + 16);
  unsigned int v39 = &v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_logger];
  v38((char *)&v32 - v9);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = v2;
  uint64_t v12 = Logger.logObject.getter();
  int v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, (os_log_type_t)v13);
  uint64_t v41 = v11;
  if (v14)
  {
    int v34 = v13;
    uint64_t v35 = v6 + 16;
    uint64_t v36 = v6;
    uint64_t v37 = v5;
    uint64_t v15 = a1;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v43 = v33;
    *(_DWORD *)uint64_t v16 = 136315394;
    if (!a2)
    {

      __break(1u);
      return;
    }
    swift_bridgeObjectRetain();
    uint64_t v32 = v15;
    uint64_t v42 = sub_1000993AC(v15, a2, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v17 = v41;
    uint64_t v18 = *(void *)&v41[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID];
    unint64_t v19 = *(void *)&v41[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID + 8];
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_1000993AC(v18, v19, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v34, "acessory detached %s %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v32;
    swift_slowDealloc();

    uint64_t v6 = v36;
    uint64_t v5 = v37;
    uint64_t v20 = *(void (**)(char *, uint64_t))(v36 + 8);
    v20(v10, v37);
    unint64_t v21 = a2;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20(v10, v5);
    uint64_t v17 = v11;
    unint64_t v21 = a2;
    if (!a2) {
      return;
    }
  }
  uint64_t v22 = &v17[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID];
  if (*(void *)&v17[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID] == a1
    && *(void *)&v17[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID + 8] == v21
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v23 = v40;
    ((void (*)(char *, char *, uint64_t))v38)(v40, v39, v5);
    swift_bridgeObjectRetain_n();
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v36 = v6;
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v37 = v5;
      uint64_t v43 = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v42 = sub_1000993AC(a1, v21, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "acessory detached %s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v28 = v37;
      os_log_t v29 = v40;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      os_log_t v29 = v23;
      uint64_t v28 = v5;
    }
    v20(v29, v28);
    id v30 = *(void **)&v41[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_connectionDelegate];
    if (v30)
    {
      if ([*(id *)&v41[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_connectionDelegate] respondsToSelector:"accessoryConnectionDetached:"])
      {
        swift_unknownObjectRetain();
        NSString v31 = String._bridgeToObjectiveC()();
        [v30 accessoryConnectionDetached:v31];
        swift_unknownObjectRelease();
      }
    }
    *(void *)uint64_t v22 = 0;
    *((void *)v22 + 1) = 0xE000000000000000;
    swift_bridgeObjectRelease();
  }
}

id sub_1000A75B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenConnect;
  if (*(_DWORD *)&v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenConnect] != -1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))((char *)&v19 - v7, &v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_logger], v2);
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "De-registering for MFI4 connection notifications", v12, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    notify_cancel(*(_DWORD *)&v1[v9]);
    *(_DWORD *)&v1[v9] = -1;
  }
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenDisconnect;
  if (*(_DWORD *)&v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenDisconnect] != -1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, &v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_logger], v2);
    BOOL v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "De-registering for MFI4 disconnection notifications", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    notify_cancel(*(_DWORD *)&v1[v13]);
    *(_DWORD *)&v1[v13] = -1;
  }
  uint64_t v17 = (objc_class *)type metadata accessor for AccessoryHandler();
  v19.receiver = v1;
  v19.super_class = v17;
  return [super dealloc];
}

uint64_t sub_1000A793C()
{
  return type metadata accessor for AccessoryHandler();
}

uint64_t type metadata accessor for AccessoryHandler()
{
  uint64_t result = qword_1002A83D8;
  if (!qword_1002A83D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id sub_1000A7990()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_passedMFI4Auth];
  *(void *)uint64_t v1 = 0xD00000000000002FLL;
  *((void *)v1 + 1) = 0x8000000100235120;
  uint64_t v2 = &v0[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_MFI4AccessoryDisconnected];
  *(void *)uint64_t v2 = 0xD00000000000003ALL;
  *((void *)v2 + 1) = 0x8000000100235150;
  uint64_t v3 = v0;
  Logger.init(subsystem:category:)();
  *(_DWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenConnect] = -1;
  *(_DWORD *)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_tokenDisconnect] = -1;
  *(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_connectionDelegate] = 0;
  uint64_t v4 = &v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryHandler_currentInductiveConnectionUUID];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0xE000000000000000;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for AccessoryHandler();
  return [super init];
}

uint64_t sub_1000A7AC8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t destroy for SetupPayload(void *a1)
{
  sub_1000A6240(a1[1], a1[2]);
  uint64_t v2 = a1[4];
  unint64_t v3 = a1[5];

  return sub_1000A6240(v2, v3);
}

uint64_t initializeWithCopy for SetupPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 16);
  sub_1000A618C(v4, v5);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x3D0], 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  uint64_t v6 = *(void *)(a2 + 32);
  unint64_t v7 = *(void *)(a2 + 40);
  sub_1000A618C(v6, v7);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithCopy for SetupPayload(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_1000A618C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x3D0], 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_1000A6240(v6, v7);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  sub_1000A618C(v8, v9);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  sub_1000A6240(v10, v11);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = *(void *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for SetupPayload(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SetupPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  sub_1000A6240(v5, v6);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  uint64_t v7 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_1000A6240(v7, v8);
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for SetupPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SetupPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x3D0], 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SetupPayload()
{
  return &type metadata for SetupPayload;
}

uint64_t sub_1000A7E24()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002A83F0);
  sub_100096F64(v0, (uint64_t)qword_1002A83F0);
  return Logger.init(subsystem:category:)();
}

BOOL sub_1000A7E98(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1000A7EB0()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000A7EF8()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000A7F24()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned char *sub_1000A7F68@<X0>(unsigned char *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void sub_1000A7F88(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000A7F94(unint64_t a1)
{
  uint64_t result = DockCoreAccessoryType.init(rawValue:)();
  if (v3) {
    return 0;
  }
  if (a1 >= 0x8000)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if ((a1 & 0x7F80) != 0)
  {
    return 0;
  }
  return result;
}

uint64_t sub_1000A8048(uint64_t a1, void *a2)
{
  v52._uint64_t countAndFlagsBits = a1;
  v52._object = a2;
  swift_bridgeObjectRetain();
  uint64_t result = String.init<A>(_:)();
  unint64_t v4 = v3;
  uint64_t v5 = HIBYTE(v3) & 0xF;
  uint64_t v6 = result & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = result & 0xFFFFFFFFFFFFLL;
  }
  if (!v7) {
    goto LABEL_70;
  }
  if ((v4 & 0x1000000000000000) != 0)
  {
LABEL_76:
    uint64_t v9 = sub_10017D104();
    char v11 = v51;
    goto LABEL_49;
  }
  if ((v4 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0) {
      unint64_t v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v9 = (uint64_t)sub_10017CF10(v8, v6, 36);
    char v11 = v10 & 1;
    goto LABEL_49;
  }
  v52._uint64_t countAndFlagsBits = result;
  v52._object = (void *)(v4 & 0xFFFFFFFFFFFFFFLL);
  if (result == 43)
  {
    if (v5)
    {
      uint64_t v17 = v5 - 1;
      if (v17)
      {
        uint64_t v9 = 0;
        uint64_t v18 = (unsigned __int8 *)&v52._countAndFlagsBits + 1;
        while (1)
        {
          int v19 = *v18;
          unsigned __int8 v20 = v19 - 48;
          if ((v19 - 48) >= 0xA)
          {
            if ((v19 - 65) < 0x1A)
            {
              unsigned __int8 v20 = v19 - 55;
            }
            else
            {
              if ((v19 - 97) > 0x19) {
                goto LABEL_48;
              }
              unsigned __int8 v20 = v19 - 87;
            }
          }
          if (!is_mul_ok(v9, 0x24uLL)) {
            break;
          }
          BOOL v16 = __CFADD__(36 * v9, v20);
          uint64_t v9 = 36 * v9 + v20;
          if (v16) {
            break;
          }
          ++v18;
          if (!--v17)
          {
LABEL_47:
            char v11 = 0;
            goto LABEL_49;
          }
        }
      }
      goto LABEL_48;
    }
LABEL_79:
    __break(1u);
    goto LABEL_80;
  }
  if (result != 45)
  {
    if (v5)
    {
      uint64_t v9 = 0;
      unint64_t v21 = &v52;
      while (1)
      {
        int countAndFlagsBits_low = LOBYTE(v21->_countAndFlagsBits);
        unsigned __int8 v23 = countAndFlagsBits_low - 48;
        if ((countAndFlagsBits_low - 48) >= 0xA)
        {
          if ((countAndFlagsBits_low - 65) < 0x1A)
          {
            unsigned __int8 v23 = countAndFlagsBits_low - 55;
          }
          else
          {
            if ((countAndFlagsBits_low - 97) > 0x19) {
              goto LABEL_48;
            }
            unsigned __int8 v23 = countAndFlagsBits_low - 87;
          }
        }
        if (!is_mul_ok(v9, 0x24uLL)) {
          break;
        }
        BOOL v16 = __CFADD__(36 * v9, v23);
        uint64_t v9 = 36 * v9 + v23;
        if (v16) {
          break;
        }
        unint64_t v21 = (Swift::String *)((char *)v21 + 1);
        if (!--v5) {
          goto LABEL_47;
        }
      }
    }
    goto LABEL_48;
  }
  if (!v5)
  {
    __break(1u);
    goto LABEL_79;
  }
  uint64_t v12 = v5 - 1;
  if (v12)
  {
    uint64_t v9 = 0;
    uint64_t v13 = (unsigned __int8 *)&v52._countAndFlagsBits + 1;
    while (1)
    {
      int v14 = *v13;
      unsigned __int8 v15 = v14 - 48;
      if ((v14 - 48) >= 0xA)
      {
        if ((v14 - 65) < 0x1A)
        {
          unsigned __int8 v15 = v14 - 55;
        }
        else
        {
          if ((v14 - 97) > 0x19) {
            break;
          }
          unsigned __int8 v15 = v14 - 87;
        }
      }
      if (!is_mul_ok(v9, 0x24uLL)) {
        break;
      }
      BOOL v16 = 36 * v9 >= (unint64_t)v15;
      uint64_t v9 = 36 * v9 - v15;
      if (!v16) {
        break;
      }
      ++v13;
      if (!--v12) {
        goto LABEL_47;
      }
    }
  }
LABEL_48:
  uint64_t v9 = 0;
  char v11 = 1;
LABEL_49:
  swift_bridgeObjectRelease();
  if (v11) {
    return 0;
  }
  v52._uint64_t countAndFlagsBits = v9;
  sub_1000A9A00();
  uint64_t v24 = String.init<A>(_:radix:uppercase:)();
  object = (void *)v25;
  uint64_t v55 = 0;
  unint64_t v56 = 0xE000000000000000;
  uint64_t v27 = v25 & 0x2000000000000000;
  unint64_t v28 = HIBYTE(v25) & 0xF;
  uint64_t v29 = v24 & 0xFFFFFFFFFFFFLL;
  if ((v25 & 0x2000000000000000) != 0) {
    uint64_t v30 = HIBYTE(v25) & 0xF;
  }
  else {
    uint64_t v30 = v24 & 0xFFFFFFFFFFFFLL;
  }
  if (v30)
  {
    uint64_t countAndFlagsBits = v24;
    if (String.count.getter() > 11) {
      goto LABEL_57;
    }
    uint64_t result = String.count.getter();
    Swift::Int v32 = 12 - result;
    if (!__OFSUB__(12, result))
    {
      v33._uint64_t countAndFlagsBits = 48;
      v33._object = (void *)0xE100000000000000;
      Swift::String v52 = String.init(repeating:count:)(v33, v32);
      swift_bridgeObjectRetain();
      v34._uint64_t countAndFlagsBits = countAndFlagsBits;
      v34._object = object;
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      object = v52._object;
      uint64_t countAndFlagsBits = v52._countAndFlagsBits;
      uint64_t v27 = (uint64_t)v52._object & 0x2000000000000000;
      unint64_t v28 = ((unint64_t)v52._object >> 56) & 0xF;
      uint64_t v29 = v52._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
LABEL_57:
      uint64_t v35 = 0;
      if (v27) {
        unint64_t v36 = v28;
      }
      else {
        unint64_t v36 = v29;
      }
      v52._uint64_t countAndFlagsBits = countAndFlagsBits;
      v52._object = object;
      uint64_t v53 = 0;
      unint64_t v54 = v36;
      while (1)
      {
        Swift::String_optional v38 = String.Iterator.next()();
        if (!v38.value._object) {
          break;
        }
        if ((v35 & 1) == 0)
        {
          uint64_t v39 = v55 & 0xFFFFFFFFFFFFLL;
          if ((v56 & 0x2000000000000000) != 0) {
            uint64_t v39 = HIBYTE(v56) & 0xF;
          }
          if (v39)
          {
            v40._uint64_t countAndFlagsBits = 58;
            v40._object = (void *)0xE100000000000000;
            String.append(_:)(v40);
          }
        }
        String.append(_:)(v38.value);
        swift_bridgeObjectRelease();
        if (__OFADD__(v35++, 1))
        {
          __break(1u);
          goto LABEL_76;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v41 = v55;
      unint64_t v42 = v56;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_10013EE90(v41, v42);
      uint64_t v45 = v43;
      unint64_t v46 = v44;
      if (v44 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        return v45;
      }
      sub_1000A618C(v43, v44);
      uint64_t v47 = sub_1000FFF70(v45, v46);
      uint64_t result = sub_10013F238(v47, v48);
      if (v49 >> 60 != 15)
      {
        uint64_t v50 = result;
        sub_1000A9990(v45, v46);
        swift_bridgeObjectRelease();
        return v50;
      }
      goto LABEL_81;
    }
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
    return result;
  }
LABEL_70:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1000A84A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_allocWithZone((Class)NSURLComponents);
  URL._bridgeToObjectiveC()(v9);
  char v11 = v10;
  id v12 = [v8 initWithURL:v10 resolvingAgainstBaseURL:1];

  if (!v12)
  {
    if (qword_1002A7B40 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100096F64(v24, (uint64_t)qword_1002A83F0);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v25, v26))
    {

LABEL_61:
      uint64_t v105 = type metadata accessor for URL();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v105 - 8) + 8))(a1, v105);
      goto LABEL_62;
    }
    uint64_t v27 = 2;
    unint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to parse setup URI: Invalid URI format", v28, 2u);
    swift_slowDealloc();

LABEL_18:
    uint64_t v33 = type metadata accessor for URL();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(a1, v33);
LABEL_19:
    uint64_t v15 = 0;
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    uint64_t v37 = 0;
    unint64_t v38 = 0;
    uint64_t v39 = 0;
    goto LABEL_63;
  }
  id v13 = [v12 scheme];
  if (!v13) {
    goto LABEL_13;
  }
  int v14 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  id v18 = [v12 host];
  if (!v18)
  {
    swift_bridgeObjectRelease();
LABEL_13:
    if (qword_1002A7B40 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100096F64(v29, (uint64_t)qword_1002A83F0);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v30, v31)) {
      goto LABEL_60;
    }
    uint64_t v27 = 2;
    Swift::Int v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::Int v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unable to parse setup URI: Invalid URI format", v32, 2u);
    swift_slowDealloc();
LABEL_17:

    goto LABEL_18;
  }
  int v19 = v18;
  uint64_t v157 = v5;
  id v159 = v12;
  uint64_t v160 = a1;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v22 = v21;

  Swift::String v23 = String.lowercased()();
  if (v23._countAndFlagsBits == 1801727352 && v23._object == (void *)0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v23._countAndFlagsBits == 0x2D74696B6B636F64 && v23._object == (void *)0xED00007075746573)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v48 = v160;
      if (qword_1002A7B40 == -1)
      {
LABEL_65:
        uint64_t v106 = type metadata accessor for Logger();
        sub_100096F64(v106, (uint64_t)qword_1002A83F0);
        swift_bridgeObjectRetain();
        uint64_t v107 = Logger.logObject.getter();
        os_log_type_t v108 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v107, v108))
        {
          uint64_t v109 = (uint8_t *)swift_slowAlloc();
          v165[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v109 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)&long long v166 = sub_1000993AC(v15, v17, v165);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v107, v108, "Unable to parse setup URI: %s not a DockKit URI", v109, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v110 = type metadata accessor for URL();
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(v48, v110);
          goto LABEL_62;
        }
        uint64_t v27 = 2;
        swift_bridgeObjectRelease_n();

        uint64_t v111 = type metadata accessor for URL();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v111 - 8) + 8))(v48, v111);
        goto LABEL_19;
      }
LABEL_107:
      swift_once();
      goto LABEL_65;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10016238C(2);
  swift_bridgeObjectRelease();
  unint64_t v41 = static String._fromSubstring(_:)();
  unint64_t v43 = v42;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v44 = sub_10013A038(2uLL, v20, v22);
  unint64_t v17 = v45;
  uint64_t v158 = v46;
  uint64_t v48 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  unint64_t v49 = sub_100172184(v41, v43, 36);
  if (v50)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1002A7B40 != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    sub_100096F64(v61, (uint64_t)qword_1002A83F0);
    swift_bridgeObjectRetain();
    NSString v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    BOOL v64 = os_log_type_enabled(v62, v63);
    id v66 = v159;
    uint64_t v65 = v160;
    if (v64)
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      v165[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v166 = sub_1000993AC(v41, v43, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Unable to parse setup URI: Invalid setup header encoding %s", v67, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v68 = type metadata accessor for URL();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8))(v160, v68);
      goto LABEL_62;
    }
    uint64_t v27 = 2;
    swift_bridgeObjectRelease_n();

    uint64_t v79 = type metadata accessor for URL();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v79 - 8) + 8))(v65, v79);
    goto LABEL_19;
  }
  unint64_t v156 = v41;
  uint64_t v51 = sub_1000A7F94(v49);
  if (v52 == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1002A7B40 != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    sub_100096F64(v53, (uint64_t)qword_1002A83F0);
    swift_bridgeObjectRetain();
    unint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    BOOL v56 = os_log_type_enabled(v54, v55);
    id v58 = v159;
    uint64_t v57 = v160;
    if (v56)
    {
      unsigned int v59 = (uint8_t *)swift_slowAlloc();
      v165[0] = swift_slowAlloc();
      *(_DWORD *)unsigned int v59 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v166 = sub_1000993AC(v156, v43, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Unable to parse setup URI: Invalid setup header encoding %s", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v60 = type metadata accessor for URL();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(v57, v60);
LABEL_62:
      uint64_t v15 = 0;
      uint64_t v35 = 0;
      unint64_t v36 = 0;
      uint64_t v37 = 0;
      unint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v27 = 2;
      goto LABEL_63;
    }
    uint64_t v27 = 2;
    swift_bridgeObjectRelease_n();

    uint64_t v80 = type metadata accessor for URL();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v57, v80);
    goto LABEL_19;
  }
  uint64_t v15 = v51;
  int v153 = v52;
  swift_bridgeObjectRelease();
  uint64_t v69 = String.count.getter();
  swift_bridgeObjectRelease();
  uint64_t v70 = v69 - 2;
  if (__OFSUB__(v69, 2))
  {
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    swift_once();
LABEL_44:
    uint64_t v81 = type metadata accessor for Logger();
    sub_100096F64(v81, (uint64_t)qword_1002A83F0);
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    BOOL v82 = os_log_type_enabled(v72, v73);
    id v76 = v159;
    uint64_t v75 = v160;
    if (v82)
    {
      uint64_t v27 = 2;
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v77 = 0;
      uint64_t v78 = "Unable to parse setup URI: Invalid setup payload length";
      goto LABEL_46;
    }
LABEL_47:

    uint64_t v84 = type metadata accessor for URL();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(v75, v84);
    goto LABEL_62;
  }
  if (v70 < 1)
  {
    swift_bridgeObjectRelease();
    if (qword_1002A7B40 == -1) {
      goto LABEL_44;
    }
    goto LABEL_102;
  }
  if ((unint64_t)v70 < 0xA)
  {
    swift_bridgeObjectRelease();
    if (qword_1002A7B40 != -1) {
LABEL_104:
    }
      swift_once();
    uint64_t v71 = type metadata accessor for Logger();
    sub_100096F64(v71, (uint64_t)qword_1002A83F0);
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    BOOL v74 = os_log_type_enabled(v72, v73);
    id v76 = v159;
    uint64_t v75 = v160;
    if (v74)
    {
      uint64_t v27 = 2;
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v77 = 0;
      uint64_t v78 = "Unable to parse setup URI: Invalid address encoding length";
LABEL_46:
      _os_log_impl((void *)&_mh_execute_header, v72, v73, v78, v77, 2u);
      swift_slowDealloc();

      uint64_t v83 = type metadata accessor for URL();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8))(v75, v83);
      goto LABEL_19;
    }
    goto LABEL_47;
  }
  swift_bridgeObjectRetain();
  uint64_t v85 = Substring.index(_:offsetBy:limitedBy:)();
  if (v86) {
    unint64_t v87 = v17;
  }
  else {
    unint64_t v87 = v85;
  }
  if (v87 >> 14 < v44 >> 14)
  {
    __break(1u);
LABEL_106:
    __break(1u);
    goto LABEL_107;
  }
  unint64_t v156 = Substring.subscript.getter();
  swift_bridgeObjectRelease();
  unint64_t v88 = static String._fromSubstring(_:)();
  os_log_type_t v90 = v89;
  swift_bridgeObjectRelease();
  unint64_t v91 = Substring.index(_:offsetBy:limitedBy:)();
  if (v92) {
    unint64_t v91 = v17;
  }
  if (v17 >> 14 < v91 >> 14) {
    goto LABEL_106;
  }
  unint64_t v93 = Substring.subscript.getter();
  unint64_t v95 = v94;
  uint64_t v158 = v96;
  uint64_t v98 = v97;
  swift_bridgeObjectRelease();
  unint64_t v156 = v88;
  uint64_t v99 = sub_1000A8048(v88, v90);
  unint64_t v101 = (unint64_t)v90;
  if (v100 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    id v12 = v159;
    a1 = v160;
    if (qword_1002A7B40 != -1) {
      swift_once();
    }
    uint64_t v102 = type metadata accessor for Logger();
    sub_100096F64(v102, (uint64_t)qword_1002A83F0);
    swift_bridgeObjectRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v103))
    {
      uint64_t v104 = (uint8_t *)swift_slowAlloc();
      v165[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v104 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v166 = sub_1000993AC(v156, v101, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v103, "Unable to parse setup URI: Invalid address encoding %s", v104, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_60:

      goto LABEL_61;
    }
    uint64_t v27 = 2;
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  uint64_t v37 = v99;
  unint64_t v38 = v100;
  swift_bridgeObjectRelease();
  long long v166 = xmmword_100240D00;
  if (v93 >> 14 != v95 >> 14)
  {
    unint64_t v156 = v93 >> 14;
    uint64_t v149 = v4;
    swift_bridgeObjectRetain();
    unint64_t v112 = v93;
    uint64_t v113 = Substring.distance(from:to:)();
    swift_bridgeObjectRelease();
    if (v113 < 13)
    {
LABEL_92:
      swift_bridgeObjectRelease();
      uint64_t v4 = v149;
      goto LABEL_93;
    }
    unint64_t v152 = v95 >> 14;
    long long v150 = xmmword_100240D10;
    uint64_t v114 = v158;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v115 = Substring.index(_:offsetBy:limitedBy:)();
      unint64_t v117 = (v116 & 1) != 0 ? v95 : v115;
      if (v156 > v117 >> 14) {
        goto LABEL_101;
      }
      unint64_t v155 = v95;
      unint64_t v156 = v112;
      uint64_t v158 = v114;
      Substring.subscript.getter();
      uint64_t v154 = v98;
      swift_bridgeObjectRelease();
      uint64_t v118 = static String._fromSubstring(_:)();
      uint64_t v120 = v119;
      swift_bridgeObjectRelease();
      uint64_t v121 = sub_100172184(v118, v120, 36);
      if (v122)
      {
        unint64_t v95 = v155;
        unint64_t v112 = v156;
        uint64_t v98 = v154;
      }
      else
      {
        uint64_t v123 = v121;
        sub_1000992E8(&qword_1002A7F40);
        uint64_t v124 = swift_allocObject();
        *(_OWORD *)(v124 + 16) = v150;
        *(void *)(v124 + 32) = v123;
        uint64_t v125 = sub_1000992E8((uint64_t *)&unk_1002AAA80);
        v165[3] = v125;
        v165[4] = sub_1000A99A4();
        v165[0] = v124;
        os_log_type_t v126 = sub_1000A5DA4(v165, v125);
        uint64_t v127 = *v126;
        size_t v128 = *(void *)(*v126 + 16);
        if (v128)
        {
          if (v128 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v164 = v128;
            memcpy(__dst, (const void *)(v127 + 32), v128);
            uint64_t v131 = *(void *)__dst;
            unint64_t v132 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v164 << 48);
            swift_bridgeObjectRetain();
          }
          else
          {
            type metadata accessor for __DataStorage();
            swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v129 = __DataStorage.init(bytes:length:)();
            uint64_t v130 = v129;
            if (v128 >= 0x7FFFFFFF)
            {
              type metadata accessor for Data.RangeReference();
              uint64_t v131 = swift_allocObject();
              *(void *)(v131 + 16) = 0;
              *(void *)(v131 + 24) = v128;
              unint64_t v132 = v130 | 0x8000000000000000;
            }
            else
            {
              uint64_t v131 = v128 << 32;
              unint64_t v132 = v129 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v131 = 0;
          unint64_t v132 = 0xC000000000000000;
        }
        swift_bridgeObjectRelease();
        sub_100099BCC((uint64_t)v165);
        unint64_t v151 = v132;
        Data.append(_:)();
        unint64_t v133 = v155;
        unint64_t v134 = Substring.index(_:offsetBy:limitedBy:)();
        if (v135) {
          unint64_t v134 = v133;
        }
        if (v152 < v134 >> 14)
        {
          __break(1u);
          goto LABEL_104;
        }
        uint64_t v136 = Substring.subscript.getter();
        unint64_t v95 = v137;
        uint64_t v158 = v138;
        uint64_t v140 = v139;
        swift_bridgeObjectRelease();
        sub_1000A6240(v131, v151);
        uint64_t v98 = v140;
        unint64_t v112 = v136;
      }
      if (v112 >> 14 != v95 >> 14)
      {
        unint64_t v156 = v112 >> 14;
        unint64_t v152 = v95 >> 14;
        swift_bridgeObjectRetain();
        uint64_t v114 = v158;
        uint64_t v141 = Substring.distance(from:to:)();
        swift_bridgeObjectRelease();
        if (v141 > 12) {
          continue;
        }
      }
      goto LABEL_92;
    }
  }
  swift_bridgeObjectRelease();
LABEL_93:
  unint64_t v36 = *((void *)&v166 + 1);
  uint64_t v35 = v166;
  LOBYTE(v165[0]) = v153 & 1;
  __dst[0] = BYTE1(v153) & 1;
  char v162 = BYTE2(v153) & 1;
  char v161 = HIBYTE(v153) & 1;
  sub_1000A997C(v37, v38);
  sub_1000A618C(v35, v36);
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  uint64_t v39 = v142;

  sub_1000A9990(v37, v38);
  uint64_t v143 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v143 - 8) + 8))(v160, v143);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v7, v4);
  uint64_t result = sub_1000A6240(v166, *((unint64_t *)&v166 + 1));
  uint64_t v144 = 256;
  if (!__dst[0]) {
    uint64_t v144 = 0;
  }
  uint64_t v145 = v144 | LOBYTE(v165[0]);
  uint64_t v146 = 0x10000;
  if (!v162) {
    uint64_t v146 = 0;
  }
  uint64_t v147 = 0x1000000;
  if (!v161) {
    uint64_t v147 = 0;
  }
  uint64_t v27 = v145 | v146 | v147;
LABEL_63:
  *a2 = v15;
  a2[1] = v35;
  a2[2] = v36;
  a2[3] = v27;
  a2[4] = v37;
  a2[5] = v38;
  a2[6] = v39;
  return result;
}

uint64_t sub_1000A997C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000A618C(a1, a2);
  }
  return a1;
}

uint64_t sub_1000A9990(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000A6240(a1, a2);
  }
  return a1;
}

unint64_t sub_1000A99A4()
{
  unint64_t result = qword_1002A8FE0;
  if (!qword_1002A8FE0)
  {
    sub_100099D14((uint64_t *)&unk_1002AAA80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8FE0);
  }
  return result;
}

unint64_t sub_1000A9A00()
{
  unint64_t result = qword_1002A8408;
  if (!qword_1002A8408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8408);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for SetupPayload.Version(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for SetupPayload.Version(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SetupPayload.Version(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A9BBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1000A9BE4(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000A9BF0(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SetupPayload.Version()
{
  return &type metadata for SetupPayload.Version;
}

unint64_t sub_1000A9C10()
{
  unint64_t result = qword_1002A8410;
  if (!qword_1002A8410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8410);
  }
  return result;
}

void sub_1000A9C64()
{
  Swift::UInt8 v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = [v1 primaryAccessory];
    if (v2)
    {
      uint64_t v3 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController;
      if (!*(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController))
      {
        id v16 = v2;
        unsigned int v4 = self;
        sub_1000992E8((uint64_t *)&unk_1002A9F50);
        uint64_t v5 = swift_allocObject();
        *(_OWORD *)(v5 + 16) = xmmword_100240BE0;
        *(void *)(v5 + 56) = &type metadata for UInt32;
        *(void *)(v5 + 64) = &protocol witness table for UInt32;
        *(_DWORD *)(v5 + 32) = 297;
        String.init(format:_:)();
        NSString v6 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v7 = [v4 UUIDWithString:v6];

        NSString v8 = [v7 UUIDString];
        if (!v8)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          NSString v8 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        id v9 = [v16 servicesOfType:v8];

        if (v9
          && (uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
              v9,
              unint64_t v11 = (unint64_t)sub_1000AACC8(v10),
              swift_bridgeObjectRelease(),
              v11))
        {
          if ((v11 & 0xC000000000000001) != 0)
          {
            id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              return;
            }
            id v12 = *(id *)(v11 + 32);
          }
          id v13 = v12;
          swift_bridgeObjectRelease();
          id v14 = [objc_allocWithZone((Class)DataStreamController) initWithAccessory:v16 service:v13 workQueue:*(void *)(v0 + 40)];
        }
        else
        {
          [*(id *)(v0 + v3) deRegisterFromNotifications];
          id v15 = *(id *)(v0 + v3);
          [v15 invalidate];

          id v14 = 0;
        }
        id v2 = *(id *)(v0 + v3);
        *(void *)(v0 + v3) = v14;
      }
    }
  }
}

void sub_1000A9EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v8 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  if (v8)
  {
    id v9 = v8;
    uint64_t v20 = (uint64_t)String._bridgeToObjectiveC()();
    [v9 addBulkSendListener:a2 fileType:v20];

    uint64_t v10 = (void *)v20;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v4);
    swift_retain_n();
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v22 = v20;
      *(_DWORD *)id v13 = 136315138;
      v18[1] = v13 + 4;
      int v19 = v13;
      id v14 = *(id *)(a1 + 24);
      uint64_t v15 = DockCoreInfo.description.getter();
      unint64_t v17 = v16;

      uint64_t v21 = sub_1000993AC(v15, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cancelling listener registration due to no active data stream %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

id sub_1000AA1C8(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v8 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  if (v8)
  {
    return [v8 removeBulkSendListener:a2];
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v4);
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v20 = a2;
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v22 = v19;
      *(_DWORD *)os_log_type_t v12 = 136315138;
      unint64_t v17 = v12 + 4;
      id v18 = v12;
      id v13 = *(id *)(a1 + 24);
      uint64_t v14 = DockCoreInfo.description.getter();
      unint64_t v16 = v15;

      uint64_t v21 = sub_1000993AC(v14, v16, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      a2 = v20;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Cancelling listener registration due to no active data stream %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return [a2 accessoryDidCloseDataStream:a1];
  }
}

id sub_1000AA484@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  id result = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  if (result) {
    id result = [result setupRequiresCharactertisticReads];
  }
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_1000AA4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[8] = a6;
  v7[9] = v6;
  v7[6] = a4;
  v7[7] = a5;
  void v7[4] = a2;
  void v7[5] = a3;
  v7[3] = a1;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000AA4FC, 0, 0);
}

uint64_t sub_1000AA4FC()
{
  Swift::UInt8 v1 = *(void **)(*(void *)(v0 + 72) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
  *(void *)(v0 + 80) = v1;
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 56);
    uint64_t v2 = *(void *)(v0 + 64);
    long long v12 = *(_OWORD *)(v0 + 24);
    long long v13 = *(_OWORD *)(v0 + 40);
    uint64_t v4 = swift_task_alloc();
    *(void *)(v0 + 8_Block_object_dispose(&STACK[0x3D0], 8) = v4;
    *(void *)(v4 + 16) = v1;
    *(_OWORD *)(v4 + 24) = v12;
    *(_OWORD *)(v4 + 40) = v13;
    *(void *)(v4 + 56) = v3;
    *(void *)(v4 + 64) = v2;
    id v5 = v1;
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v6;
    uint64_t v7 = sub_100099C7C(0, &qword_1002A8428);
    *uint64_t v6 = v0;
    v6[1] = sub_1000AA720;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000037, 0x8000000100235250, sub_1000AAE3C, v4, v7);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    void *v9 = 0xD00000000000003FLL;
    v9[1] = 0x8000000100235210;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v9, enum case for Errors.NotFound(_:), v8);
    swift_willThrow();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_1000AA720()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000AA8A4;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000AA83C;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_1000AA83C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1000AA8A4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000AA910(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Class isa, uint64_t a8)
{
  id v18 = a2;
  uint64_t v19 = a8;
  uint64_t v10 = sub_1000992E8((uint64_t *)&unk_1002A8430);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  NSString v13 = String._bridgeToObjectiveC()();
  NSString v14 = String._bridgeToObjectiveC()();
  if (isa) {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v15, (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_1000AAEE4;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000AAC3C;
  aBlock[3] = &unk_1002758D8;
  unint64_t v17 = _Block_copy(aBlock);
  swift_release();
  [v18 openBulkSendSessionForFileType:v13 reason:v14 metadata:isa queue:v19 callback:v17];
  _Block_release(v17);
}

uint64_t sub_1000AAB38(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
LABEL_3:
    sub_1000992E8((uint64_t *)&unk_1002A8430);
    return CheckedContinuation.resume(throwing:)();
  }
  if (!a1)
  {
    uint64_t v4 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    *id v5 = 0xD000000000000024;
    v5[1] = 0x80000001002352D0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v5, enum case for Errors.CommunicationFailure(_:), v4);
    goto LABEL_3;
  }
  id v3 = a1;
  sub_1000992E8((uint64_t *)&unk_1002A8430);
  return CheckedContinuation.resume(returning:)();
}

void sub_1000AAC3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void *sub_1000AACC8(uint64_t a1)
{
  id v6 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    sub_100099C1C(i, (uint64_t)v5);
    sub_100099C7C(0, &qword_1002A8418);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

unint64_t sub_1000AADE4()
{
  unint64_t result = qword_1002A87F0;
  if (!qword_1002A87F0)
  {
    type metadata accessor for Errors();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A87F0);
  }
  return result;
}

void sub_1000AAE3C(uint64_t a1)
{
  sub_1000AA910(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(Class *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_1000AAE50()
{
  uint64_t v1 = sub_1000992E8((uint64_t *)&unk_1002A8430);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000AAEE4(void *a1, uint64_t a2)
{
  sub_1000992E8((uint64_t *)&unk_1002A8430);

  return sub_1000AAB38(a1, a2);
}

uint64_t sub_1000AAF68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000AAF78()
{
  return swift_release();
}

BOOL sub_1000AAF80(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000AAF94()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000AAFDC()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000AB008()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000AB058(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002A8558);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_1000A618C(a1, a2);
      sub_1000A618C(a1, a2);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)();
  sub_1000A6240(a1, a2);
  type metadata accessor for Data.Iterator();
  sub_1000B9A6C((unint64_t *)&qword_1002A8560, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if ((v17 & 1) == 0)
  {
    uint64_t v7 = 0;
    uint64_t v9 = -7;
    unint64_t v10 = 7;
    do
    {
      uint64_t v8 = v9 + 8;
      if (__OFADD__(v9 + 7, 1))
      {
        __break(1u);
        JUMPOUT(0x1000AB24CLL);
      }
      unint64_t v11 = (unint64_t)v16 << v10;
      if (v10 >= 0x40) {
        unint64_t v11 = 0;
      }
      unint64_t v12 = (unint64_t)v16 >> v9;
      if (v10 <= 0xFFFFFFFFFFFFFFC0) {
        unint64_t v12 = 0;
      }
      if (v9 + 7 >= 8) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = v11;
      }
      if ((unint64_t)(v9 - 65) < 0xFFFFFFFFFFFFFF7FLL) {
        unint64_t v13 = 0;
      }
      v7 |= v13;
      dispatch thunk of IteratorProtocol.next()();
      ++v9;
      --v10;
    }
    while (v17 != 1);
  }
  *(void *)&v6[*(int *)(v4 + 36)] = v8;
  sub_1000A61E4((uint64_t)v6, &qword_1002A8558);
  return v7;
}

uint64_t sub_1000AB25C@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000B80FC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000AB288(int a1, int a2, id a3, void *a4, uint64_t a5, unint64_t a6)
{
  [a3 bytes];
  [a4 bytes];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [(objc_class *)isa bytes];
  unint64_t v10 = isa;
  switch(a6 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a5), a5)) {
        goto LABEL_5;
      }
      __break(1u);
LABEL_7:
      __break(1u);
      JUMPOUT(0x1000AB3D4);
    case 2uLL:
      if (!__OFSUB__(*(void *)(a5 + 24), *(void *)(a5 + 16))) {
        goto LABEL_5;
      }
      goto LABEL_7;
    default:
LABEL_5:
      Class v11 = Data._bridgeToObjectiveC()().super.isa;
      [(objc_class *)v11 bytes];
      unint64_t v12 = v11;
      return chacha20_poly1305_decrypt_all_64x64();
  }
}

uint64_t sub_1000AB3E4()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = *(void *)&v0[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_clientQueue];
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_1000B9DCC;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001468DC;
  aBlock[3] = &unk_100275B78;
  unint64_t v10 = _Block_copy(aBlock);
  Class v11 = v0;
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_1000B9A6C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void *sub_1000AB690(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Starting Pair-setup", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1000B8D98(0, 0xF000000000000000);
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    unint64_t v10 = result;
    if ([result respondsToSelector:"pairSetupSessionDidStart:"]) {
      [v10 pairSetupSessionDidStart:a1];
    }
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000AB8E0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)&v1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_clientQueue];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v1;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_1000B9DC4;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001468DC;
  aBlock[3] = &unk_100275B28;
  unint64_t v12 = _Block_copy(aBlock);
  unint64_t v13 = v1;
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_1000B9A6C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_1000ABB98(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a2;
  uint64_t v3 = sub_1000992E8(&qword_1002A8568);
  __chkstk_darwin(v3 - 8);
  uint64_t v35 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000992E8((uint64_t *)&unk_1002A8590);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (void (*)(char *))((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10);
  NSString v14 = (char *)&v35 - v13;
  unint64_t v36 = *(void (**)(char *))(v9 + 16);
  uint64_t v37 = (void (*)(char *, uint64_t))(a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger);
  v36((char *)&v35 - v13);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    char v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Stopping Pair-setup", v17, 2u);
    swift_slowDealloc();
  }

  id v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v14, v8);
  if (*(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_type) != 3)
  {
    uint64_t v19 = type metadata accessor for SPAKE2.Prover();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v7, 1, 1, v19);
    uint64_t v20 = a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_prover;
    swift_beginAccess();
    sub_1000B9C4C((uint64_t)v7, v20, (uint64_t *)&unk_1002A8590);
    swift_endAccess();
    uint64_t v21 = type metadata accessor for SymmetricKey();
    uint64_t v22 = (uint64_t)v35;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v35, 1, 1, v21);
    uint64_t v23 = a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret;
    swift_beginAccess();
    sub_1000B9C4C(v22, v23, &qword_1002A8568);
    swift_endAccess();
  }
  uint64_t v24 = v38;
  if (v38)
  {
    ((void (*)(void (*)(char *), void (*)(char *, uint64_t), uint64_t))v36)(v12, v37, v8);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v25 = v12;
    os_log_type_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v37 = v18;
      uint64_t v29 = (uint8_t *)v28;
      v40[0] = swift_slowAlloc();
      unint64_t v36 = v25;
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_getErrorValue();
      uint64_t v30 = Error.localizedDescription.getter();
      uint64_t v39 = sub_1000993AC(v30, v31, v40);
      uint64_t v24 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Pair-setup failed: %s", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v37((char *)v36, v8);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      v18((char *)v25, v8);
    }
  }
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v33 = Strong;
    if ([Strong respondsToSelector:"pairSetupSession:didStopWithError:"])
    {
      if (v24) {
        Swift::String v34 = (void *)_convertErrorToNSError(_:)();
      }
      else {
        Swift::String v34 = 0;
      }
      [v33 pairSetupSession:a1 didStopWithError:v34];
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void sub_1000AC150()
{
  uint64_t v1 = type metadata accessor for Data.Deallocator();
  uint64_t v33 = *(void *)(v1 - 8);
  uint64_t v34 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = v0;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v0 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Pair-setup: M1", v10, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  long long v56 = 0u;
  memset(v57, 0, sizeof(v57));
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  TLV8BufferInit();
  TLV8BufferAppendUInt64();
  sub_1000992E8(&qword_1002A7F40);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_100240BE0;
  uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state;
  uint64_t v13 = v35;
  *(unsigned char *)(v11 + 32) = *(unsigned char *)(v35 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state);
  uint64_t v14 = sub_1001038B0(v11);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A6240(v14, v16);
  id v18 = isa;
  [(objc_class *)v18 bytes];
  [(objc_class *)v18 length];
  TLV8BufferAppend();
  LODWORD(v37) = *(_DWORD *)(v13 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_flags);
  TLV8BufferAppend();
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  TLV8BufferDetach();
  if (v37 && (uint64_t v19 = v36, v36 >= 1))
  {
    uint64_t v32 = v12;
    uint64_t v21 = v33;
    uint64_t v20 = v34;
    (*(void (**)(char *, void, uint64_t))(v33 + 104))(v3, enum case for Data.Deallocator.free(_:), v34);
    Data.Deallocator._deallocator.getter();
    type metadata accessor for __DataStorage();
    swift_allocObject();
    swift_retain();
    uint64_t v22 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
    uint64_t v23 = sub_1000B86D0(v22, v19);
    unint64_t v25 = v24;
    swift_release();
    (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v20);
    uint64_t v26 = v35;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v28 = (void *)Strong;
      Class v29 = Data._bridgeToObjectiveC()().super.isa;
      [v28 pairSetupSession:v26 didReceiveSetupExchangeData:v29];
      sub_1000A6240(v23, v25);

      swift_unknownObjectRelease();
    }
    else
    {
      sub_1000A6240(v23, v25);
    }
    *(unsigned char *)(v26 + v32) = 2;
    TLV8BufferFree();
  }
  else
  {
    sub_1000B9968();
    swift_allocError();
    *uint64_t v30 = 0;
    swift_willThrow();
  }
}

uint64_t sub_1000AC628(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)&v4[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_clientQueue];
  unint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a1;
  void v15[3] = a2;
  v15[4] = v4;
  void v15[5] = a3;
  v15[6] = a4;
  aBlock[4] = sub_1000B9D74;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001468DC;
  aBlock[3] = &unk_100275AD8;
  unint64_t v16 = _Block_copy(aBlock);
  sub_1000A997C(a1, a2);
  char v17 = v4;
  sub_1000A618C(a3, a4);
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_1000B9A6C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  return swift_release();
}

void *sub_1000AC908(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = a3 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger;
  id v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  if (a2 >> 60 == 15)
  {
    v18((char *)&v30 - v15, v17, v10);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "M2: Cannot get Setup Code from user!", v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    uint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v23 = result;
      if ([result respondsToSelector:"pairSetupSessionDidReceiveInvalidSetupCode:"]) {
        [v23 pairSetupSessionDidReceiveInvalidSetupCode:a3];
      }
      return (void *)swift_unknownObjectRelease();
    }
  }
  else
  {
    v18(v14, v17, v10);
    sub_1000A997C(a1, a2);
    sub_1000A618C(a1, a2);
    sub_1000A618C(a1, a2);
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v33 = a5;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v34 = a3;
      os_log_type_t v27 = (uint8_t *)v26;
      uint64_t v31 = swift_slowAlloc();
      uint64_t v36 = v31;
      uint64_t v32 = a4;
      *(_DWORD *)os_log_type_t v27 = 136380675;
      uint64_t v30 = v27 + 4;
      uint64_t v28 = sub_100139704(a1, a2);
      uint64_t v35 = sub_1000993AC(v28, v29, &v36);
      a4 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a5 = v33;
      swift_bridgeObjectRelease();
      sub_1000A9990(a1, a2);
      sub_1000A9990(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "M2: Got Setup Code from user: %{private}s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000A9990(a1, a2);
      sub_1000A9990(a1, a2);
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    sub_1000AD2EC(a1, a2, a4, a5);
    return (void *)sub_1000A9990(a1, a2);
  }
  return result;
}

void sub_1000ACCFC(uint64_t a1, unint64_t a2)
{
  uint64_t v53 = a1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  long long v50 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v42 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v42 - v11;
  long long v49 = v2;
  long long v51 = *(void (**)(char *))(v5 + 16);
  uint64_t v52 = (uint64_t)v2 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger;
  v51((char *)&v42 - v11);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Pair-setup: M2", v15, 2u);
    swift_slowDealloc();
  }

  unint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v12, v4);
  if (a2 >> 60 != 15)
  {
    long long v48 = v16;
    sub_1000A997C(v53, a2);
    uint64_t v17 = sub_1000B886C();
    unint64_t v19 = v18;
    ((void (*)(char *, uint64_t, uint64_t))v51)(v10, v52, v4);
    sub_1000A618C(v17, v19);
    sub_1000A618C(v17, v19);
    os_log_type_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v46 = v17;
    unint64_t v47 = v19;
    if (v22)
    {
      unint64_t v45 = a2;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      aBlock[0] = v44;
      long long v43 = v23;
      *(_DWORD *)uint64_t v23 = 136380675;
      long long v42 = v23 + 4;
      uint64_t v24 = sub_100139704(v17, v19);
      uint64_t v54 = sub_1000993AC(v24, v25, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a2 = v45;
      swift_bridgeObjectRelease();
      sub_1000A6240(v17, v19);
      sub_1000A6240(v17, v19);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "M2: shareV %{private}s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000A6240(v17, v19);
      sub_1000A6240(v17, v19);
    }

    uint64_t v26 = v48;
    v48(v10, v4);
    os_log_type_t v27 = v50;
    uint64_t v28 = Data._bridgeToObjectiveC()().super.isa;
    [(objc_class *)v28 bytes];
    [(objc_class *)v28 length];
    unint64_t v29 = v28;
    [(objc_class *)v29 bytes];
    uint64_t UInt64 = TLV8GetUInt64();
    ((void (*)(char *, uint64_t, uint64_t))v51)(v27, v52, v4);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 134217984;
      os_log_type_t v27 = v50;
      aBlock[0] = UInt64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "M2: flags %llu", v33, 0xCu);
      uint64_t v26 = v48;
      swift_slowDealloc();
    }

    v26(v27, v4);
    uint64_t v34 = v49;
    *((unsigned char *)v49 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state) = 3;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v36 = (void *)Strong;
      uint64_t v37 = (void *)swift_allocObject();
      uint64_t v39 = v46;
      unint64_t v38 = v47;
      v37[2] = v34;
      v37[3] = v39;
      v37[4] = v38;
      aBlock[4] = (uint64_t)sub_1000B9CF0;
      aBlock[5] = (uint64_t)v37;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1001B810C;
      aBlock[3] = (uint64_t)&unk_100275A88;
      long long v40 = _Block_copy(aBlock);
      sub_1000A618C(v39, v38);
      id v41 = v34;
      swift_release();
      [v36 pairSetupSession:v41 didReceiveSetupCodeRequestWithCompletionHandler:v40];
      sub_1000A6240(v39, v38);
      swift_unknownObjectRelease();

      sub_1000A9990(v53, a2);
      _Block_release(v40);
    }
    else
    {
      sub_1000A6240(v46, v47);

      sub_1000A9990(v53, a2);
    }
  }
}

uint64_t sub_1000AD2EC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v151 = a3;
  uint64_t v152 = a4;
  uint64_t v179 = a1;
  unint64_t v180 = a2;
  uint64_t v6 = type metadata accessor for Data.Deallocator();
  uint64_t v148 = *(void *)(v6 - 8);
  uint64_t v149 = v6;
  __chkstk_darwin(v6);
  uint64_t v147 = (char *)&v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SPAKE2.CipherSuite();
  uint64_t v159 = *(void *)(v8 - 8);
  uint64_t v160 = v8;
  __chkstk_darwin(v8);
  v178 = (char *)&v147 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1000992E8((uint64_t *)&unk_1002A8590);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v156 = (uint64_t)&v147 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v161 = ((char *)&v147 - v13);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  long long v150 = (char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v155 = (char *)&v147 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v158 = (char *)&v147 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  int v153 = (char *)&v147 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v154 = (char *)&v147 - v25;
  __chkstk_darwin(v24);
  os_log_type_t v27 = (char *)&v147 - v26;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v166 = v5 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger;
  v167 = v28;
  uint64_t v168 = v15 + 16;
  ((void (*)(char *))v28)((char *)&v147 - v26);
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Pair-setup: M3", v31, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v32 = *(void (**)(char *, uint64_t))(v15 + 8);
  uint64_t v165 = v15 + 8;
  v169 = v32;
  v32(v27, v14);
  v183[0] = 0;
  v183[1] = 0xE000000000000000;
  uint64_t v33 = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_enhancedEncryption;
  if (*(unsigned char *)(v5 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_enhancedEncryption)) {
    uint64_t v34 = 0x74694B6B636F44;
  }
  else {
    uint64_t v34 = 0x72696173726F43;
  }
  unint64_t v35 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v34);
  swift_bridgeObjectRelease();
  v36._uint64_t countAndFlagsBits = 0x676E69726961502DLL;
  v36._object = (void *)0xED00006F666E492DLL;
  String.append(_:)(v36);
  uint64_t v176 = sub_100100590(v183[0], v183[1]);
  unint64_t v177 = v37;
  v183[0] = 0;
  v183[1] = 0xE000000000000000;
  if (*(unsigned char *)(v5 + v33)) {
    uint64_t v38 = 0x74694B6B636F44;
  }
  else {
    uint64_t v38 = 0x72696173726F43;
  }
  unint64_t v39 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v38);
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = 0x676E69726961502DLL;
  v40._object = (void *)0xED0000746C61532DLL;
  String.append(_:)(v40);
  uint64_t v41 = sub_100100590(v183[0], v183[1]);
  uint64_t v172 = v41;
  unint64_t v173 = v42;
  v183[0] = 0;
  v183[1] = 0xE000000000000000;
  if (*(unsigned char *)(v5 + v33)) {
    uint64_t v43 = 0x74694B6B636F44;
  }
  else {
    uint64_t v43 = 0x72696173726F43;
  }
  unint64_t v44 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v43);
  swift_bridgeObjectRelease();
  v45._uint64_t countAndFlagsBits = 0x7265766F72502DLL;
  v45._object = (void *)0xE700000000000000;
  String.append(_:)(v45);
  uint64_t v174 = sub_100100590(v183[0], v183[1]);
  unint64_t v175 = v46;
  v183[0] = 0;
  v183[1] = 0xE000000000000000;
  if (*(unsigned char *)(v5 + v33)) {
    uint64_t v47 = 0x74694B6B636F44;
  }
  else {
    uint64_t v47 = 0x72696173726F43;
  }
  unint64_t v48 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v47);
  v49._uint64_t countAndFlagsBits = 0x656966697265562DLL;
  v49._object = (void *)0xE900000000000072;
  String.append(_:)(v49);
  uint64_t v50 = sub_100100590(v183[0], v183[1]);
  uint64_t v171 = v14;
  uint64_t v51 = v50;
  unint64_t v53 = v52;
  v183[0] = 0;
  v183[1] = 0xE000000000000000;
  uint64_t v157 = v5;
  if (*(unsigned char *)(v5 + v33)) {
    uint64_t v54 = 0x74694B6B636F44;
  }
  else {
    uint64_t v54 = 0x72696173726F43;
  }
  unint64_t v55 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v54);
  v56._uint64_t countAndFlagsBits = 0x65532D726961502DLL;
  v56._object = (void *)0xEB00000000707574;
  String.append(_:)(v56);
  unint64_t v57 = sub_100100590(v183[0], v183[1]);
  unint64_t v59 = v58;
  unint64_t v170 = v58;
  (*(void (**)(char *, void, uint64_t))(v159 + 104))(v178, enum case for SPAKE2.CipherSuite.P256_SHA256_HKDF_SHA256_HMAC_SHA256(_:), v160);
  sub_1000A618C(v179, v180);
  sub_1000A618C(v41, v173);
  sub_1000A618C(v176, v177);
  sub_1000A618C(v57, v59);
  sub_1000A618C(v51, v53);
  sub_1000A618C(v174, v175);
  unint64_t v164 = v53;
  uint64_t v163 = v51;
  uint64_t v61 = v161;
  uint64_t v60 = v162;
  unint64_t v62 = v170;
  unint64_t v180 = v57;
  SPAKE2.Prover.init(seed:salt:info:context:verifierID:proverID:cipherSuite:)();
  if (v60)
  {
    os_log_type_t v63 = v158;
    uint64_t v64 = v171;
    v167(v158, v166, v171);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      v183[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136315138;
      swift_getErrorValue();
      uint64_t v68 = Error.localizedDescription.getter();
      v182[0] = sub_1000993AC(v68, v69, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Unable to create Spake2+ prover: %s", v67, 0xCu);
      swift_arrayDestroy();
      unint64_t v62 = v170;
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v70 = v158;
      uint64_t v71 = v171;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      uint64_t v70 = v63;
      uint64_t v71 = v64;
    }
    v169(v70, v71);
    sub_1000B9968();
    swift_allocError();
    unsigned char *v83 = 1;
    swift_willThrow();
    swift_errorRelease();
    sub_1000A6240(v180, v62);
    sub_1000A6240(v163, v164);
    sub_1000A6240(v174, v175);
    sub_1000A6240(v172, v173);
    uint64_t v84 = v176;
    unint64_t v85 = v177;
    return sub_1000A6240(v84, v85);
  }
  uint64_t v72 = type metadata accessor for SPAKE2.Prover();
  uint64_t v73 = *(void *)(v72 - 8);
  (*(void (**)(NSObject *, void, uint64_t, uint64_t))(v73 + 56))(v61, 0, 1, v72);
  uint64_t v74 = (uint64_t)v61;
  uint64_t v75 = v157;
  uint64_t v76 = v157 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_prover;
  swift_beginAccess();
  sub_1000B9C4C(v74, v76, (uint64_t *)&unk_1002A8590);
  swift_endAccess();
  memset(v183, 0, 332);
  TLV8BufferInit();
  uint64_t v77 = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state;
  LOBYTE(v182[0]) = *(unsigned char *)(v75 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state);
  TLV8BufferAppend();
  uint64_t v179 = v76;
  uint64_t v78 = v76;
  uint64_t v79 = v156;
  sub_1000B9BD4(v78, v156, (uint64_t *)&unk_1002A8590);
  v178 = *(char **)(v73 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v178)(v79, 1, v72) == 1)
  {
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v81 = SPAKE2.Prover.getShare()();
  uint64_t v82 = v79;
  unint64_t v87 = v80;
  uint64_t v162 = 0;
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v82, v72);
  uint64_t v160 = v77;
  switch(v87 >> 62)
  {
    case 1uLL:
      if (v81 >> 32 < (int)v81)
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
      }
      sub_1000A618C(v81, v87);
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v81, __DataStorage._offset.getter())) {
        goto LABEL_75;
      }
      unint64_t v88 = v154;
      __DataStorage._length.getter();
      TLV8BufferAppend();
      sub_1000A6240(v81, v87);
LABEL_39:
      uint64_t v91 = v171;
      v167(v88, v166, v171);
      sub_1000A618C(v81, v87);
      sub_1000A618C(v81, v87);
      char v92 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.default.getter();
      int v94 = v93;
      char v161 = v92;
      if (os_log_type_enabled(v92, v93))
      {
        unint64_t v95 = (uint8_t *)swift_slowAlloc();
        v182[0] = swift_slowAlloc();
        LODWORD(v159) = v94;
        *(_DWORD *)unint64_t v95 = 136380675;
        uint64_t v158 = (char *)(v95 + 4);
        uint64_t v96 = sub_100139704(v81, v87);
        uint64_t v181 = sub_1000993AC(v96, v97, v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000A6240(v81, v87);
        sub_1000A6240(v81, v87);
        uint64_t v98 = v161;
        _os_log_impl((void *)&_mh_execute_header, v161, (os_log_type_t)v159, "M3: shareP %{private}s", v95, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000A6240(v81, v87);
        uint64_t v99 = v154;
        uint64_t v100 = v171;
      }
      else
      {
        sub_1000A6240(v81, v87);
        sub_1000A6240(v81, v87);
        sub_1000A6240(v81, v87);

        uint64_t v99 = v88;
        uint64_t v100 = v91;
      }
      v169(v99, v100);
      uint64_t v101 = v179;
      swift_beginAccess();
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v178)(v101, 1, v72) == 1)
      {
LABEL_81:
        __break(1u);
        JUMPOUT(0x1000AEB00);
      }
      uint64_t v102 = v162;
      uint64_t v103 = SPAKE2.Prover.processPeerShareAndGenerateVerificationTag(peerShare:)();
      uint64_t v105 = v171;
      uint64_t v106 = v153;
      if (!v102)
      {
        uint64_t v114 = v103;
        unint64_t v115 = v104;
        swift_endAccess();
        switch(v115 >> 62)
        {
          case 1uLL:
            if (v114 >> 32 < (int)v114) {
              goto LABEL_76;
            }
            sub_1000A618C(v114, v115);
            if (__DataStorage._bytes.getter() && __OFSUB__((int)v114, __DataStorage._offset.getter())) {
              goto LABEL_78;
            }
            __DataStorage._length.getter();
            TLV8BufferAppend();
            sub_1000A6240(v114, v115);
            break;
          case 2uLL:
            uint64_t v121 = *(void *)(v114 + 16);
            uint64_t v122 = *(void *)(v114 + 24);
            swift_retain();
            swift_retain();
            if (__DataStorage._bytes.getter() && __OFSUB__(v121, __DataStorage._offset.getter())) {
              goto LABEL_79;
            }
            if (__OFSUB__(v122, v121)) {
              goto LABEL_77;
            }
            __DataStorage._length.getter();
            TLV8BufferAppend();
            swift_release();
            swift_release();
            break;
          case 3uLL:
            memset(v182, 0, 14);
            goto LABEL_60;
          default:
            v182[0] = v114;
            LOWORD(v182[1]) = v115;
            BYTE2(v182[1]) = BYTE2(v115);
            BYTE3(v182[1]) = BYTE3(v115);
            BYTE4(v182[1]) = BYTE4(v115);
            BYTE5(v182[1]) = BYTE5(v115);
LABEL_60:
            TLV8BufferAppend();
            goto LABEL_61;
        }
        uint64_t v105 = v171;
LABEL_61:
        v167(v106, v166, v105);
        sub_1000A618C(v114, v115);
        sub_1000A618C(v114, v115);
        uint64_t v123 = Logger.logObject.getter();
        os_log_type_t v124 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v123, v124))
        {
          uint64_t v125 = (uint8_t *)swift_slowAlloc();
          uint64_t v179 = swift_slowAlloc();
          v182[0] = v179;
          *(_DWORD *)uint64_t v125 = 136380675;
          v178 = (char *)(v125 + 4);
          uint64_t v126 = sub_100139704(v114, v115);
          uint64_t v181 = sub_1000993AC(v126, v127, v182);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000A6240(v114, v115);
          sub_1000A6240(v114, v115);
          _os_log_impl((void *)&_mh_execute_header, v123, v124, "M3: confirmP %{private}s", v125, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_1000A6240(v114, v115);
          v169(v153, v171);
        }
        else
        {
          sub_1000A6240(v114, v115);
          sub_1000A6240(v114, v115);
          sub_1000A6240(v114, v115);

          v169(v106, v105);
        }
        uint64_t v129 = v163;
        unint64_t v128 = v164;
        unint64_t v130 = v170;
        v182[0] = 0;
        uint64_t v181 = 0;
        TLV8BufferDetach();
        if (v182[0] && (uint64_t v131 = v181, v181 >= 1))
        {
          unint64_t v133 = v147;
          uint64_t v132 = v148;
          uint64_t v134 = v149;
          (*(void (**)(char *, void, uint64_t))(v148 + 104))(v147, enum case for Data.Deallocator.free(_:), v149);
          Data.Deallocator._deallocator.getter();
          type metadata accessor for __DataStorage();
          swift_allocObject();
          swift_retain();
          uint64_t v135 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
          uint64_t v136 = sub_1000B86D0(v135, v131);
          unint64_t v138 = v137;
          swift_release();
          (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v134);
          uint64_t v139 = v157;
          uint64_t Strong = swift_unknownObjectWeakLoadStrong();
          if (Strong)
          {
            uint64_t v141 = (void *)Strong;
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            [v141 pairSetupSession:v157 didReceiveSetupExchangeData:isa];
            sub_1000A6240(v136, v138);

            uint64_t v139 = v157;
            swift_unknownObjectRelease();
          }
          else
          {
            sub_1000A6240(v136, v138);
          }
          unint64_t v146 = v170;
          *(unsigned char *)(v139 + v160) = 4;
          TLV8BufferFree();
          sub_1000A6240(v172, v173);
          sub_1000A6240(v176, v177);
          sub_1000A6240(v180, v146);
          uint64_t v144 = v163;
          unint64_t v145 = v164;
        }
        else
        {
          sub_1000B9968();
          swift_allocError();
          *uint64_t v143 = 0;
          swift_willThrow();
          sub_1000A6240(v172, v173);
          sub_1000A6240(v176, v177);
          sub_1000A6240(v180, v130);
          uint64_t v144 = v129;
          unint64_t v145 = v128;
        }
        sub_1000A6240(v144, v145);
        uint64_t v84 = v174;
        unint64_t v85 = v175;
        return sub_1000A6240(v84, v85);
      }
      swift_endAccess();
      uint64_t v107 = v150;
      v167(v150, v166, v105);
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v108 = Logger.logObject.getter();
      uint64_t v109 = v105;
      os_log_type_t v110 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v108, v110))
      {
        uint64_t v111 = (uint8_t *)swift_slowAlloc();
        v182[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v111 = 136315138;
        swift_getErrorValue();
        uint64_t v112 = Error.localizedDescription.getter();
        uint64_t v181 = sub_1000993AC(v112, v113, v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v108, v110, "Unable to verify peer key: %s", v111, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v169(v150, v171);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();

        v169(v107, v109);
      }
      uint64_t v117 = v163;
      unint64_t v116 = v164;
      unint64_t v118 = v170;
      uint64_t v119 = v180;
      sub_1000B9968();
      swift_allocError();
      unsigned char *v120 = 2;
      swift_willThrow();
      sub_1000A6240(v172, v173);
      sub_1000A6240(v176, v177);
      sub_1000A6240(v119, v118);
      sub_1000A6240(v117, v116);
      sub_1000A6240(v174, v175);
      return swift_errorRelease();
    case 2uLL:
      uint64_t v89 = *(void *)(v81 + 16);
      uint64_t v90 = *(void *)(v81 + 24);
      swift_retain();
      swift_retain();
      if (__DataStorage._bytes.getter() && __OFSUB__(v89, __DataStorage._offset.getter())) {
        goto LABEL_74;
      }
      if (__OFSUB__(v90, v89)) {
        goto LABEL_73;
      }
      __DataStorage._length.getter();
      TLV8BufferAppend();
      swift_release();
      swift_release();
LABEL_38:
      unint64_t v88 = v154;
      goto LABEL_39;
    case 3uLL:
      memset(v182, 0, 14);
      goto LABEL_37;
    default:
      v182[0] = v81;
      LOWORD(v182[1]) = v87;
      BYTE2(v182[1]) = BYTE2(v87);
      BYTE3(v182[1]) = BYTE3(v87);
      BYTE4(v182[1]) = BYTE4(v87);
      BYTE5(v182[1]) = BYTE5(v87);
LABEL_37:
      TLV8BufferAppend();
      goto LABEL_38;
  }
}

uint64_t sub_1000AEB20(uint64_t a1, unint64_t a2)
{
  uint64_t v138 = a1;
  uint64_t v3 = v2;
  unint64_t v139 = a2;
  uint64_t v4 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v4 - 8);
  uint64_t v122 = (char *)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for SymmetricKey();
  uint64_t v128 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  os_log_type_t v124 = (char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000992E8(&qword_1002A8568);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v126 = (uint64_t)&v115 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v125 = (uint64_t)&v115 - v11;
  __chkstk_darwin(v10);
  unint64_t v130 = (char *)&v115 - v12;
  uint64_t v13 = sub_1000992E8((uint64_t *)&unk_1002A8590);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v129 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  Class isa = (Class)((char *)&v115 - v21);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v115 - v22;
  uint64_t v134 = *(void (**)(char *))(v17 + 16);
  Class v135 = (Class)&v3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger];
  v134((char *)&v115 - v22);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Pair-setup: M4", v26, 2u);
    swift_slowDealloc();
  }

  os_log_type_t v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v23, v16);
  unint64_t v133 = v3;
  uint64_t v28 = (uint64_t)&v3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_prover];
  swift_beginAccess();
  sub_1000B9BD4(v28, (uint64_t)v15, (uint64_t *)&unk_1002A8590);
  uint64_t v29 = type metadata accessor for SPAKE2.Prover();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v132 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  uint64_t v131 = v30 + 48;
  int v31 = v132(v15, 1, v29);
  uint64_t result = sub_1000A61E4((uint64_t)v15, (uint64_t *)&unk_1002A8590);
  if (v31 != 1 && v139 >> 60 != 15)
  {
    uint64_t v123 = (void (*)(Class))v27;
    sub_1000A618C(v138, v139);
    uint64_t v33 = Data._bridgeToObjectiveC()().super.isa;
    [(objc_class *)v33 bytes];
    [(objc_class *)v33 length];
    uint64_t v143 = 0;
    uint64_t v140 = 0;
    uint64_t v34 = v33;
    [(objc_class *)v34 bytes];
    TLV8Get();
    if (v143 && *v143 == 2)
    {
      unint64_t v35 = v133;
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        unint64_t v37 = Strong;
        if ([Strong respondsToSelector:"pairSetupSessionDidReceiveInvalidSetupCode:"]) {
          [v37 pairSetupSessionDidReceiveInvalidSetupCode:v35];
        }
        swift_unknownObjectRelease();
      }
      sub_1000B9968();
      swift_allocError();
      unsigned char *v38 = 2;
      swift_willThrow();

      return sub_1000A9990(v138, v139);
    }
    uint64_t v39 = sub_1000B886C();
    uint64_t v40 = v16;
    uint64_t v41 = v39;
    unint64_t v43 = v42;
    uint64_t v120 = v40;
    ((void (*)(Class, Class))v134)(isa, v135);
    sub_1000A618C(v41, v43);
    sub_1000A618C(v41, v43);
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    uint64_t v121 = v44;
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v119 = v34;
    if (v46)
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v117 = swift_slowAlloc();
      uint64_t v142 = v117;
      unint64_t v48 = v43;
      unint64_t v116 = v47;
      *(_DWORD *)uint64_t v47 = 136380675;
      unint64_t v115 = v47 + 4;
      uint64_t v49 = sub_100139704(v41, v43);
      uint64_t v141 = sub_1000993AC(v49, v50, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000A6240(v41, v43);
      sub_1000A6240(v41, v43);
      uint64_t v51 = v121;
      _os_log_impl((void *)&_mh_execute_header, v121, v45, "M4: confirmV %{private}s", v116, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v43 = v48;
    }
    else
    {
      sub_1000A6240(v41, v43);
      sub_1000A6240(v41, v43);
    }
    uint64_t v52 = v120;
    v123(isa);
    swift_beginAccess();
    if (v132((char *)v28, 1, v29) == 1)
    {
      __break(1u);
    }
    else
    {
      unint64_t v53 = v130;
      unint64_t v54 = v137;
      SPAKE2.Prover.processPeerVerificationTagAndGenerateKey(peerVerificationTag:)();
      uint64_t v118 = v41;
      if (v54)
      {
        swift_endAccess();
        unint64_t v55 = v129;
        ((void (*)(char *, Class, uint64_t))v134)(v129, v135, v52);
        swift_errorRetain();
        swift_errorRetain();
        Swift::String v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = swift_slowAlloc();
          unint64_t v137 = v43;
          unint64_t v59 = (uint8_t *)v58;
          uint64_t v142 = swift_slowAlloc();
          *(_DWORD *)unint64_t v59 = 136315138;
          Class isa = (Class)(v59 + 4);
          swift_getErrorValue();
          uint64_t v60 = Error.localizedDescription.getter();
          uint64_t v141 = sub_1000993AC(v60, v61, &v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unable to verify confirmV and generate shared secret: %s", v59, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          unint64_t v43 = v137;
          swift_slowDealloc();

          unint64_t v62 = v129;
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();

          unint64_t v62 = v55;
        }
        ((void (*)(char *, uint64_t))v123)(v62, v52);
        unint64_t v69 = v139;
        sub_1000B9968();
        swift_allocError();
        *uint64_t v70 = 2;
        swift_willThrow();

        sub_1000A9990(v138, v69);
        swift_errorRelease();
        return sub_1000A6240(v118, v43);
      }
      unint64_t v137 = v43;
      swift_endAccess();
      uint64_t v63 = v128;
      uint64_t v64 = v127;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v53, 0, 1, v127);
      uint64_t v65 = v133;
      uint64_t v66 = (uint64_t)v53;
      uint64_t v67 = (uint64_t)&v133[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret];
      swift_beginAccess();
      sub_1000B9C4C(v66, v67, &qword_1002A8568);
      swift_endAccess();
      uint64_t v68 = v125;
      sub_1000B9BD4(v67, v125, &qword_1002A8568);
      uint64_t v134 = *(void (**)(char *))(v63 + 48);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v134)(v68, 1, v64))
      {
        sub_1000A61E4(v68, &qword_1002A8568);
      }
      else
      {
        uint64_t v71 = v68;
        uint64_t v72 = v124;
        (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v124, v71, v64);
        uint64_t v73 = sub_1000A61E4(v71, &qword_1002A8568);
        Class isa = (Class)&v115;
        uint64_t v74 = __chkstk_darwin(v73);
        *(&v115 - 2) = v65;
        __chkstk_darwin(v74);
        *(&v115 - 2) = (uint8_t *)sub_1000B9C44;
        *(&v115 - 1) = v75;
        sub_1000992E8(&qword_1002A8588);
        SymmetricKey.withUnsafeBytes<A>(_:)();
        (*(void (**)(char *, uint64_t))(v128 + 8))(v72, v64);
      }
      uint64_t v76 = sub_100100590(0xD000000000000017, 0x80000001002354B0);
      unint64_t v78 = v77;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A6240(v76, v78);
      uint64_t v79 = sub_100100590(0xD000000000000017, 0x80000001002354D0);
      unint64_t v81 = v80;
      Class v135 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A6240(v79, v81);
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v82 = __DataStorage.init(length:)() | 0x4000000000000000;
      uint64_t v83 = &v65[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sessionKey];
      swift_beginAccess();
      uint64_t v84 = *(void *)v83;
      unint64_t v85 = *((void *)v83 + 1);
      *(void *)uint64_t v83 = 0x2000000000;
      *((void *)v83 + 1) = v82;
      sub_1000A9990(v84, v85);
      uint64_t v86 = v67;
      uint64_t v87 = v126;
      sub_1000B9BD4(v86, v126, &qword_1002A8568);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v134)(v87, 1, v64))
      {
        sub_1000A61E4(v87, &qword_1002A8568);
      }
      else
      {
        uint64_t v88 = v128;
        uint64_t v89 = v124;
        (*(void (**)(char *, uint64_t, uint64_t))(v128 + 16))(v124, v87, v64);
        uint64_t v90 = sub_1000A61E4(v87, &qword_1002A8568);
        uint64_t v91 = __chkstk_darwin(v90);
        Class v92 = isa;
        *(&v115 - 4) = v93;
        *(&v115 - 3) = (uint8_t *)v92;
        *(&v115 - 2) = (uint8_t *)v135;
        __chkstk_darwin(v91);
        *(&v115 - 2) = (uint8_t *)sub_1000B9C38;
        *(&v115 - 1) = v94;
        sub_1000992E8(&qword_1002A8588);
        SymmetricKey.withUnsafeBytes<A>(_:)();
        (*(void (**)(char *, uint64_t))(v88 + 8))(v89, v64);
      }
      uint64_t v95 = sub_1000B886C();
      unint64_t v97 = *((void *)v83 + 1);
      if (v97 >> 60 != 15)
      {
        uint64_t v98 = v95;
        unint64_t v99 = v96;
        uint64_t v100 = *(void *)v83;
        sub_1000A997C(*(void *)v83, *((void *)v83 + 1));
        uint64_t v101 = sub_1000B8AFC(v98, v99);
        unint64_t v103 = v102;
        sub_1000A9990(v100, v97);
        uint64_t v104 = sub_1000B886C();
        uint64_t v106 = v104;
        unint64_t v107 = v105;
        if ((*(void *)&v133[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_type] & 0xFFFFFFFFFFFFFFFELL) == 2)
        {
          v133[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state] = 7;
          sub_1000AB8E0(0);

          sub_1000A9990(v138, v139);
          sub_1000A6240(v106, v107);
          sub_1000A6240(v101, v103);
          sub_1000A6240(v98, v99);

          return sub_1000A6240(v118, v137);
        }
        else
        {
          v133[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state] = 5;
          unint64_t v108 = v137;
          switch(v105 >> 62)
          {
            case 1uLL:
              uint64_t v109 = (int)v104;
              uint64_t v110 = v104 >> 32;
              goto LABEL_36;
            case 2uLL:
              uint64_t v109 = *(void *)(v104 + 16);
              uint64_t v110 = *(void *)(v104 + 24);
LABEL_36:
              if (v109 != v110) {
                goto LABEL_37;
              }
              goto LABEL_44;
            case 3uLL:
              goto LABEL_44;
            default:
              if ((v105 & 0xFF000000000000) == 0) {
                goto LABEL_44;
              }
LABEL_37:
              static String.Encoding.utf8.getter();
              uint64_t v111 = (void (*)(char *))String.init(data:encoding:)();
              if (v112)
              {
                uint64_t v134 = v111;
                unint64_t v113 = (void *)swift_unknownObjectWeakLoadStrong();
                if (v113)
                {
                  uint64_t v114 = v113;
                  if ([v113 respondsToSelector:"pairSetupSession:didReceiveProductData:"])
                  {
                    uint64_t v134 = (void (*)(char *))String._bridgeToObjectiveC()();
                    [v114 pairSetupSession:v133 didReceiveProductData:v134];
                    swift_bridgeObjectRelease();
                    swift_unknownObjectRelease();
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    swift_unknownObjectRelease();
                  }
                }
                else
                {
                  swift_bridgeObjectRelease();
                }
                unint64_t v108 = v137;
              }
LABEL_44:
              sub_1000B0A4C();

              sub_1000A9990(v138, v139);
              sub_1000A6240(v106, v107);
              sub_1000A6240(v101, v103);
              sub_1000A6240(v98, v99);

              uint64_t result = sub_1000A6240(v118, v108);
              break;
          }
        }
        return result;
      }
    }
    __break(1u);
    JUMPOUT(0x1000AFBE4);
  }
  return result;
}

uint64_t sub_1000AFBF4(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v11 = sub_1000B87B8(a1, a2 - (void)a1);
    unint64_t v13 = v12;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a3 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger, v6);
    sub_1000A618C(v11, v13);
    sub_1000A618C(v11, v13);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v22 = v20;
      *(_DWORD *)uint64_t v16 = 136380675;
      uint64_t v19 = v16 + 4;
      uint64_t v17 = sub_100139704(v11, v13);
      uint64_t v21 = sub_1000993AC(v17, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000A6240(v11, v13);
      sub_1000A6240(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "M4: Spake2+ Secret %{private}s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000A6240(v11, v13);
    }
    else
    {
      sub_1000A6240(v11, v13);
      sub_1000A6240(v11, v13);
      sub_1000A6240(v11, v13);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return result;
}

void sub_1000AFE7C(uint64_t a1, uint64_t a2, char *a3, void *a4, void *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)&a3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sessionKey];
  swift_beginAccess();
  if ((unint64_t)v14[1] >> 60 == 15)
  {
    __break(1u);
LABEL_8:

    __break(1u);
    return;
  }
  sub_1000B6B6C(v14, a1, a2, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, id, void *))sub_1000B421C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))sub_1000B421C);
  swift_endAccess();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &a3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger], v10);
  a3 = a3;
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v24 = v11;
    uint64_t v25 = v10;
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    v27[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136380675;
    unint64_t v18 = v14[1];
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v14;
      uint64_t v23 = v17 + 4;
      sub_1000A618C(v19, v18);
      uint64_t v20 = sub_100139704(v19, v18);
      unint64_t v22 = v21;
      sub_1000A9990(v19, v18);
      uint64_t v26 = sub_1000993AC(v20, v22, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "M4: SessionKey %{private}s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v25);
      return;
    }
    goto LABEL_8;
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1000B018C(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v42 = a3;
  uint64_t v43 = a2;
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v66 = 0u;
  memset(v67, 0, sizeof(v67));
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  TLV8BufferInit();
  id v8 = [a1 identifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static String.Encoding.utf8.getter();
  uint64_t v9 = String.data(using:allowLossyConversion:)();
  unint64_t v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v41 = v4;
  v40(v7, v4);
  if (v11 >> 60 != 15)
  {
    switch(v11 >> 62)
    {
      case 1uLL:
        if (v9 >> 32 < (int)v9) {
          goto LABEL_49;
        }
        sub_1000A618C(v9, v11);
        if (__DataStorage._bytes.getter() && __OFSUB__((int)v9, __DataStorage._offset.getter())) {
          goto LABEL_51;
        }
        __DataStorage._length.getter();
        TLV8BufferAppend();
        sub_1000A9990(v9, v11);
        break;
      case 2uLL:
        uint64_t v12 = *(void *)(v9 + 16);
        uint64_t v13 = *(void *)(v9 + 24);
        swift_retain();
        swift_retain();
        if (__DataStorage._bytes.getter() && __OFSUB__(v12, __DataStorage._offset.getter())) {
          goto LABEL_52;
        }
        if (__OFSUB__(v13, v12)) {
          goto LABEL_50;
        }
        __DataStorage._length.getter();
        TLV8BufferAppend();
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v47, 0, 14);
        goto LABEL_13;
      default:
        v47[0] = v9;
        LOWORD(v47[1]) = v11;
        BYTE2(v47[1]) = BYTE2(v11);
        BYTE3(v47[1]) = BYTE3(v11);
        BYTE4(v47[1]) = BYTE4(v11);
        BYTE5(v47[1]) = BYTE5(v11);
LABEL_13:
        TLV8BufferAppend();
        break;
    }
    sub_1000A9990(v9, v11);
  }
  id v14 = [a1 publicKey];
  id v15 = [v14 data];

  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v18 = v17;

  switch(v18 >> 62)
  {
    case 1uLL:
      if (v16 >> 32 < (int)v16)
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
      }
      sub_1000A618C(v16, v18);
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v16, __DataStorage._offset.getter())) {
        goto LABEL_45;
      }
      unint64_t v20 = v42;
      uint64_t v19 = v43;
      __DataStorage._length.getter();
      TLV8BufferAppend();
      sub_1000A6240(v16, v18);
      sub_1000A6240(v16, v18);
LABEL_28:
      switch(v20 >> 62)
      {
        case 1uLL:
          if ((int)v19 > v19 >> 32) {
            goto LABEL_44;
          }
          sub_1000A618C(v19, v20);
          if (__DataStorage._bytes.getter() && __OFSUB__((int)v19, __DataStorage._offset.getter())) {
            goto LABEL_48;
          }
          __DataStorage._length.getter();
          TLV8BufferAppend();
          sub_1000A6240(v19, v20);
LABEL_39:
          static String.Encoding.utf8.getter();
          uint64_t v24 = String.data(using:allowLossyConversion:)();
          unint64_t v26 = v25;
          v40(v7, v41);
          if (v26 >> 60 == 15) {
            goto LABEL_53;
          }
          v27.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A9990(v24, v26);
          uint64_t v28 = (uint64_t *)(v39[1] + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sessionKey);
          swift_beginAccess();
          unint64_t v29 = v28[1];
          if (v29 >> 60 == 15) {
            goto LABEL_54;
          }
          uint64_t v30 = *v28;
          sub_1000A618C(v30, v29);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A9990(v30, v29);
          v46[0] = sub_1000B805C(*((uint64_t *)&v48 + 1));
          v46[1] = v32;
          type metadata accessor for __DataStorage();
          swift_allocObject();
          uint64_t v33 = __DataStorage.init(length:)();
          uint64_t v44 = 0x1000000000;
          unint64_t v45 = v33 | 0x4000000000000000;
          uint64_t v34 = isa;
          unint64_t v35 = v27.super.isa;
          sub_1000B64D8(v46, &v44, v34, v35);
          uint64_t v36 = v44;
          unint64_t v37 = v45;
          sub_1000A618C(v44, v45);
          Data.append(_:)();
          sub_1000A6240(v36, v37);
          TLV8BufferFree();

          sub_1000A6240(v36, v37);
          return v46[0];
        case 2uLL:
          uint64_t v23 = *(void *)(v19 + 16);
          swift_retain();
          swift_retain();
          if (__DataStorage._bytes.getter() && __OFSUB__(v23, __DataStorage._offset.getter())) {
            goto LABEL_47;
          }
          __DataStorage._length.getter();
          TLV8BufferAppend();
          swift_release();
          swift_release();
          goto LABEL_39;
        case 3uLL:
          memset(v47, 0, 14);
          goto LABEL_38;
        default:
          v47[0] = v19;
          LOWORD(v47[1]) = v20;
          BYTE2(v47[1]) = BYTE2(v20);
          BYTE3(v47[1]) = BYTE3(v20);
          BYTE4(v47[1]) = BYTE4(v20);
          BYTE5(v47[1]) = BYTE5(v20);
LABEL_38:
          TLV8BufferAppend();
          goto LABEL_39;
      }
    case 2uLL:
      uint64_t v21 = *(void *)(v16 + 16);
      uint64_t v22 = *(void *)(v16 + 24);
      swift_retain();
      swift_retain();
      if (__DataStorage._bytes.getter() && __OFSUB__(v21, __DataStorage._offset.getter())) {
        goto LABEL_46;
      }
      if (__OFSUB__(v22, v21)) {
        goto LABEL_43;
      }
      __DataStorage._length.getter();
      TLV8BufferAppend();
      swift_release();
      swift_release();
LABEL_27:
      sub_1000A6240(v16, v18);
      unint64_t v20 = v42;
      uint64_t v19 = v43;
      goto LABEL_28;
    case 3uLL:
      memset(v47, 0, 14);
      goto LABEL_26;
    default:
      v47[0] = v16;
      LOWORD(v47[1]) = v18;
      BYTE2(v47[1]) = BYTE2(v18);
      BYTE3(v47[1]) = BYTE3(v18);
      BYTE4(v47[1]) = BYTE4(v18);
      BYTE5(v47[1]) = BYTE5(v18);
LABEL_26:
      TLV8BufferAppend();
      goto LABEL_27;
  }
}

uint64_t sub_1000B0A4C()
{
  uint64_t v1 = type metadata accessor for Data.Deallocator();
  uint64_t v111 = *(void *)(v1 - 8);
  uint64_t v112 = v1;
  __chkstk_darwin(v1);
  uint64_t v110 = (char *)v107 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for SymmetricKey();
  uint64_t v123 = *(objc_class **)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v109 = (char *)v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (objc_class *)type metadata accessor for String.Encoding();
  Class isa = (Class)*((void *)v4 - 1);
  Class v118 = v4;
  __chkstk_darwin(v4);
  unint64_t v116 = (char *)v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000992E8(&qword_1002A8568);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v115 = (uint64_t)v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)v107 - v9;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (char *)v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v120 = (char *)v107 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v113 = (char *)v107 - v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v107 - v20;
  uint64_t v129 = v0;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v124 = v0 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger;
  uint64_t v125 = v22;
  uint64_t v122 = v12 + 16;
  ((void (*)(char *))v22)((char *)v107 - v20);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Pair-setup: M5", v25, 2u);
    swift_slowDealloc();
  }
  uint64_t v121 = v15;

  unint64_t v26 = *(void (**)(char *, uint64_t))(v12 + 8);
  id v127 = (id)(v12 + 8);
  v26(v21, v11);
  uint64_t v27 = v129;
  uint64_t v28 = v129 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret;
  swift_beginAccess();
  sub_1000B9BD4(v28, (uint64_t)v10, &qword_1002A8568);
  uint64_t v114 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v123 + 6);
  int v29 = v114(v10, 1, v128);
  sub_1000A61E4((uint64_t)v10, &qword_1002A8568);
  if (v29 == 1)
  {
    uint64_t v30 = v120;
    v125(v120, v124, v11);
    int v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Unable to retreive shared secret key!", v33, 2u);
      swift_slowDealloc();
    }

    return ((uint64_t (*)(char *, uint64_t))v26)(v30, v11);
  }
  uint64_t v119 = v11;
  uint64_t v35 = v27 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate;
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    long long v55 = v113;
    uint64_t v56 = v119;
    v125(v113, v124, v119);
    long long v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      long long v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Unable to retrieve pair-setup identifier from accessory server!", v59, 2u);
      swift_slowDealloc();
    }

    v26(v55, v56);
    sub_1000B9968();
    swift_allocError();
    unsigned char *v60 = 1;
    swift_willThrow();
    uint64_t v61 = v56;
    goto LABEL_35;
  }
  *(void *)&v132[0] = 0;
  id v37 = [Strong pairSetupSession:v27 didReceiveLocalPairingIdentityRequestWithError:v132];
  swift_unknownObjectRelease();
  uint64_t v38 = *(void **)&v132[0];
  if (!v37)
  {
    id v62 = *(id *)&v132[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v61 = v119;
    goto LABEL_35;
  }
  v107[1] = v35;
  id v108 = v37;
  uint64_t v120 = (char *)v26;
  unint64_t v113 = (char *)type metadata accessor for __DataStorage();
  swift_allocObject();
  id v39 = v38;
  uint64_t v40 = __DataStorage.init(length:)();
  uint64_t v133 = 0x2000000000;
  unint64_t v134 = v40 | 0x4000000000000000;
  uint64_t v41 = v116;
  static String.Encoding.utf8.getter();
  uint64_t v42 = String.data(using:allowLossyConversion:)();
  unint64_t v44 = v43;
  Class v45 = v118;
  BOOL v46 = (void (*)(char *, Class))*((void *)isa + 1);
  v46(v41, v118);
  if (v44 >> 60 == 15)
  {
    __break(1u);
    goto LABEL_45;
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A9990(v42, v44);
  static String.Encoding.utf8.getter();
  uint64_t v47 = String.data(using:allowLossyConversion:)();
  unint64_t v49 = v48;
  v46(v41, v45);
  if (v49 >> 60 == 15)
  {
LABEL_45:
    __break(1u);
    JUMPOUT(0x1000B1A24);
  }
  v50.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A9990(v47, v49);
  uint64_t v51 = v115;
  sub_1000B9BD4(v28, v115, &qword_1002A8568);
  uint64_t v52 = v128;
  int v53 = v114((char *)v51, 1, v128);
  Class v118 = v50.super.isa;
  if (v53)
  {
    sub_1000A61E4(v51, &qword_1002A8568);
    long long v54 = v108;
  }
  else
  {
    long long v63 = v123;
    long long v64 = v109;
    (*((void (**)(char *, uint64_t, uint64_t))v123 + 2))(v109, v51, v52);
    uint64_t v65 = sub_1000A61E4(v51, &qword_1002A8568);
    uint64_t v66 = __chkstk_darwin(v65);
    v107[-4] = &v133;
    v107[-3] = isa;
    v107[-2] = v50.super.isa;
    long long v54 = v108;
    v107[-1] = v108;
    __chkstk_darwin(v66);
    v107[-2] = sub_1000B9BC8;
    v107[-1] = v67;
    sub_1000992E8(&qword_1002A8588);
    SymmetricKey.withUnsafeBytes<A>(_:)();
    (*((void (**)(char *, uint64_t))v63 + 1))(v64, v52);
  }
  swift_allocObject();
  uint64_t v68 = __DataStorage.init(length:)();
  uint64_t v69 = v133;
  unint64_t v70 = v134;
  sub_1000A618C(v133, v134);
  Class v71 = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A6240(v69, v70);
  *(void *)&v132[0] = 0x4000000000;
  *((void *)&v132[0] + 1) = v68;
  uint64_t v72 = v71;
  id v73 = v54;
  uint64_t v123 = v72;
  sub_1000B7B20((int *)v132, v72, v73);
  unint64_t v75 = *((void *)&v132[0] + 1);
  uint64_t v74 = *(void *)&v132[0];
  memset(v132, 0, 332);
  TLV8BufferInit();
  sub_1000A618C(v74, v75 | 0x4000000000000000);
  uint64_t v76 = v74;
  uint64_t v77 = v129;
  uint64_t v78 = sub_1000B018C(v73, v76, v75 | 0x4000000000000000);
  unint64_t v80 = v79;
  swift_release();
  unint64_t v116 = (char *)OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state;
  LOBYTE(v131[0]) = *(unsigned char *)(v77 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state);
  TLV8BufferAppend();
  unint64_t v126 = v80;
  uint64_t v128 = v78;
  switch(v80 >> 62)
  {
    case 1uLL:
      if (v78 >> 32 < (int)v78)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
      }
      sub_1000A618C(v78, v80);
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v78, __DataStorage._offset.getter())) {
        goto LABEL_43;
      }
      __DataStorage._length.getter();
      TLV8BufferAppend();
      sub_1000A6240(v128, v126);
LABEL_30:
      v131[0] = 0;
      uint64_t v130 = 0;
      TLV8BufferDetach();
      if (!v131[0] || (uint64_t v85 = v130, v130 < 1))
      {
        sub_1000B9968();
        swift_allocError();
        *unint64_t v97 = 0;
        swift_willThrow();

        sub_1000A6240(v128, v126);
        swift_release();

        sub_1000A6240(v133, v134);
        uint64_t v61 = v119;
        unint64_t v26 = (void (*)(char *, uint64_t))v120;
LABEL_35:
        uint64_t v98 = v121;
        v125(v121, v124, v61);
        swift_errorRetain();
        swift_errorRetain();
        unint64_t v99 = Logger.logObject.getter();
        os_log_type_t v100 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v99, v100))
        {
          uint64_t v101 = swift_slowAlloc();
          uint64_t v120 = (char *)v26;
          unint64_t v102 = (uint8_t *)v101;
          *(void *)&v132[0] = swift_slowAlloc();
          unint64_t v126 = 0;
          *(_DWORD *)unint64_t v102 = 136315138;
          swift_getErrorValue();
          uint64_t v103 = Error.localizedDescription.getter();
          uint64_t v133 = sub_1000993AC(v103, v104, (uint64_t *)v132);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v99, v100, "Pair-setup: M5: Unable to retrieve pairing identity: %s", v102, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          return ((uint64_t (*)(char *, uint64_t))v120)(v121, v119);
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          return ((uint64_t (*)(char *, uint64_t))v26)(v98, v119);
        }
      }
      uint64_t v125 = (void (*)(char *, uint64_t, uint64_t))v75;
      id v127 = v73;
      uint64_t v86 = v110;
      uint64_t v87 = v111;
      uint64_t v88 = v112;
      (*(void (**)(char *, void, uint64_t))(v111 + 104))(v110, enum case for Data.Deallocator.free(_:), v112);
      Data.Deallocator._deallocator.getter();
      swift_allocObject();
      swift_retain();
      uint64_t v89 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      uint64_t v90 = sub_1000B86D0(v89, v85);
      unint64_t v92 = v91;
      swift_release();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v86, v88);
      uint64_t v93 = swift_unknownObjectWeakLoadStrong();
      if (v93)
      {
        int v94 = (void *)v93;
        Class v95 = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v96 = v129;
        [v94 pairSetupSession:v129 didReceiveSetupExchangeData:v95];
        sub_1000A6240(v90, v92);

        swift_unknownObjectRelease();
      }
      else
      {
        sub_1000A6240(v90, v92);
        uint64_t v96 = v129;
      }
      Class v105 = isa;
      uint64_t v106 = v123;
      v116[v96] = 6;
      TLV8BufferFree();

      sub_1000A6240(v128, v126);
      swift_release();

      return sub_1000A6240(v133, v134);
    case 2uLL:
      unint64_t v81 = (void (*)(void, void, void))v75;
      uint64_t v82 = v78;
      uint64_t v83 = *(void *)(v78 + 16);
      uint64_t v84 = *(void *)(v82 + 24);
      swift_retain();
      swift_retain();
      if (__DataStorage._bytes.getter() && __OFSUB__(v83, __DataStorage._offset.getter())) {
        goto LABEL_42;
      }
      if (__OFSUB__(v84, v83)) {
        goto LABEL_41;
      }
      __DataStorage._length.getter();
      TLV8BufferAppend();
      swift_release();
      swift_release();
      unint64_t v75 = (unint64_t)v81;
      goto LABEL_30;
    case 3uLL:
      memset(v131, 0, 14);
      goto LABEL_29;
    default:
      v131[0] = v78;
      LOWORD(v131[1]) = v80;
      BYTE2(v131[1]) = BYTE2(v80);
      BYTE3(v131[1]) = BYTE3(v80);
      BYTE4(v131[1]) = BYTE4(v80);
      BYTE5(v131[1]) = BYTE5(v80);
LABEL_29:
      TLV8BufferAppend();
      goto LABEL_30;
  }
}

uint64_t sub_1000B1A34(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v12 = type metadata accessor for String.Encoding();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B6B6C(a3, a1, a2, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, id, void *))sub_1000B3190, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))sub_1000B3190);
  id v16 = [a6 identifier];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  static String.Encoding.utf8.getter();
  uint64_t v17 = String.data(using:allowLossyConversion:)();
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v19 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    Data.append(_:)();
    sub_1000A9990(v17, v19);
    id v21 = [a6 publicKey];
    id v22 = [v21 data];

    uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    Data.append(_:)();
    return sub_1000A6240(v23, v25);
  }
  return result;
}

void sub_1000B1C54(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a1)
  {
    if (ccsha512_di())
    {
      [a3 length];
      [a3 bytes];
      id v6 = [a4 publicKey];
      id v7 = [v6 data];

      if (v7)
      {
        [v7 bytes];
        id v8 = v7;
        id v9 = [a4 privateKey];
        if (v9)
        {
          unint64_t v10 = v9;
          id v11 = [v9 data];

          if (v11)
          {
            [v11 bytes];
            id v12 = v11;
            cced25519_sign();
            return;
          }
LABEL_11:
          __break(1u);
          return;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
}

uint64_t sub_1000B1DB4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v5 - 8);
  char v161 = (char *)&v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (objc_class *)type metadata accessor for SymmetricKey();
  uint64_t v168 = *((void *)v7 - 1);
  v169 = v7;
  __chkstk_darwin(v7);
  uint64_t v165 = (char *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000992E8(&qword_1002A8568);
  __chkstk_darwin(v9 - 8);
  v167 = (uint64_t *)((char *)&v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v172 = (char *)&v148 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v164 = (char *)&v148 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v171 = (char *)&v148 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v170 = (char *)&v148 - v19;
  __chkstk_darwin(v18);
  id v21 = (char *)&v148 - v20;
  uint64_t v23 = v22;
  uint64_t v25 = v22 + 16;
  unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v173 = v2;
  uint64_t v174 = v2 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger;
  unint64_t v175 = v24;
  ((void (*)(char *))v24)((char *)&v148 - v20);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Pair-setup: M6", v28, 2u);
    swift_slowDealloc();
  }

  int v31 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v30 = v23 + 8;
  int v29 = v31;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v31)(v21, v11);
  if (a2 >> 60 != 15)
  {
    uint64_t v162 = v29;
    uint64_t v163 = v30;
    sub_1000A618C(a1, a2);
    unint64_t v166 = a2;
    uint64_t v33 = Data._bridgeToObjectiveC()().super.isa;
    [(objc_class *)v33 bytes];
    [(objc_class *)v33 length];
    v183 = 0;
    uint64_t v177 = 0;
    uint64_t v34 = v33;
    [(objc_class *)v34 bytes];
    TLV8Get();
    uint64_t v35 = v183;
    if (v183 && *v183)
    {
      uint64_t v36 = v170;
      v175(v170, v174, v11);
      id v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        id v39 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v39 = 16777472;
        LOBYTE(v182) = *v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Pair-setup M6 bad status %hhu", v39, 5u);
        swift_slowDealloc();
      }

      v162(v36, v11);
      sub_1000B9968();
      uint64_t v40 = swift_allocError();
      unsigned char *v41 = 1;
      uint64_t v176 = v40;
      swift_willThrow();

      return sub_1000A9990(a1, v166);
    }
    unint64_t v170 = (char *)v11;
    unint64_t v42 = v166;
    uint64_t v43 = sub_1000B886C();
    unint64_t v45 = v44 >> 62;
    uint64_t v46 = v43;
    unint64_t v47 = v44;
    uint64_t v160 = v43;
    uint64_t v48 = (uint64_t)v172;
    switch(v44 >> 62)
    {
      case 1uLL:
        LODWORD(v49) = HIDWORD(v43) - v43;
        if (__OFSUB__(HIDWORD(v43), v43))
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
        }
        uint64_t v49 = (int)v49;
LABEL_14:
        if (v49 < 16)
        {
LABEL_15:
          v175(v172, v174, (uint64_t)v170);
          int v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v53, v54))
          {
            unint64_t v55 = v47;
            uint64_t v56 = a1;
            long long v57 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)long long v57 = 134217984;
            os_log_type_t v58 = v57;
            uint64_t v59 = 0;
            switch((int)v45)
            {
              case 0:
                uint64_t v59 = BYTE6(v55);
                goto LABEL_39;
              case 1:
                LODWORD(v59) = HIDWORD(v160) - v160;
                if (__OFSUB__(HIDWORD(v160), v160)) {
                  goto LABEL_51;
                }
                uint64_t v59 = (int)v59;
LABEL_39:
                uint64_t v182 = v59;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl((void *)&_mh_execute_header, v53, v54, "Pair-setup M6 invalid encrypted data length: %ld", v58, 0xCu);
                swift_slowDealloc();
                a1 = v56;
                unint64_t v47 = v55;
                break;
              case 2:
                uint64_t v143 = *(void *)(v160 + 16);
                uint64_t v142 = *(void *)(v160 + 24);
                BOOL v52 = __OFSUB__(v142, v143);
                uint64_t v59 = v142 - v143;
                if (!v52) {
                  goto LABEL_39;
                }
                goto LABEL_52;
              case 3:
                goto LABEL_39;
              default:
                JUMPOUT(0);
            }
          }

          v162((char *)v48, (uint64_t)v170);
          sub_1000B9968();
          uint64_t v144 = swift_allocError();
          unsigned char *v145 = 2;
          uint64_t v176 = v144;
          swift_willThrow();

          sub_1000A9990(a1, v42);
          uint64_t v117 = v160;
          unint64_t v118 = v47;
          return sub_1000A6240(v117, v118);
        }
        unint64_t v155 = v34;
        uint64_t v158 = v25;
        long long v60 = (uint64_t *)(v173 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sessionKey);
        swift_beginAccess();
        unint64_t v61 = v60[1];
        if (v61 >> 60 == 15)
        {
          __break(1u);
        }
        else
        {
          uint64_t v62 = *v60;
          sub_1000A997C(v62, v61);
          unint64_t v153 = v47;
          uint64_t v63 = sub_1000B8AFC(v46, v47);
          unint64_t v65 = v64;
          sub_1000A9990(v62, v61);
          uint64_t v66 = sub_1000B886C();
          unint64_t v68 = v67;
          uint64_t v69 = sub_1000B886C();
          unint64_t v71 = v70;
          uint64_t v151 = v63;
          uint64_t v72 = sub_1000B886C();
          unint64_t v74 = v73;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A6240(v72, v74);
          v175(v171, v174, (uint64_t)v170);
          sub_1000A618C(v66, v68);
          sub_1000A618C(v69, v71);
          sub_1000A618C(v66, v68);
          uint64_t v172 = (char *)v69;
          unint64_t v159 = v71;
          sub_1000A618C(v69, v71);
          unint64_t v75 = Logger.logObject.getter();
          os_log_type_t v76 = static os_log_type_t.default.getter();
          BOOL v77 = os_log_type_enabled(v75, v76);
          unint64_t v152 = v65;
          uint64_t v157 = v68;
          uint64_t v156 = v66;
          if (v77)
          {
            uint64_t v78 = swift_slowAlloc();
            id v150 = (id)swift_slowAlloc();
            v179[0] = (uint64_t)v150;
            *(_DWORD *)uint64_t v78 = 136380931;
            uint64_t v79 = sub_100139704(v66, v68);
            uint64_t v180 = sub_1000993AC(v79, v80, v179);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000A6240(v66, v68);
            sub_1000A6240(v66, v68);
            *(_WORD *)(v78 + 12) = 2081;
            uint64_t v81 = (uint64_t)v172;
            unint64_t v82 = v159;
            uint64_t v83 = sub_100139704((uint64_t)v172, v159);
            uint64_t v180 = sub_1000993AC(v83, v84, v179);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v85 = v173;
            swift_bridgeObjectRelease();
            sub_1000A6240(v81, v82);
            sub_1000A6240(v81, v82);
            _os_log_impl((void *)&_mh_execute_header, v75, v76, "Pair-setup M6 [identifier= %{private}s publicKey=%{private}s]", (uint8_t *)v78, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v162(v171, (uint64_t)v170);
            uint64_t v86 = v81;
          }
          else
          {
            sub_1000A6240(v66, v68);
            sub_1000A6240(v66, v68);
            uint64_t v86 = (uint64_t)v172;
            unint64_t v82 = v159;
            sub_1000A6240((uint64_t)v172, v159);
            sub_1000A6240(v86, v82);

            v162(v171, (uint64_t)v170);
            uint64_t v85 = v173;
          }
          uint64_t v171 = (char *)a1;
          type metadata accessor for __DataStorage();
          swift_allocObject();
          uint64_t v87 = __DataStorage.init(length:)();
          uint64_t v180 = 0x2000000000;
          unint64_t v181 = v87 | 0x4000000000000000;
          uint64_t v88 = sub_100100590(0xD00000000000001ELL, 0x8000000100235430);
          unint64_t v90 = v89;
          v91.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A6240(v88, v90);
          uint64_t v92 = sub_100100590(0xD00000000000001ELL, 0x8000000100235450);
          unint64_t v94 = v93;
          v95.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A6240(v92, v94);
          uint64_t v96 = v85 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret;
          swift_beginAccess();
          uint64_t v97 = v96;
          uint64_t v98 = (uint64_t)v167;
          sub_1000B9BD4(v97, (uint64_t)v167, &qword_1002A8568);
          uint64_t v100 = v168;
          unint64_t v99 = v169;
          int v101 = (*(uint64_t (**)(uint64_t, uint64_t, objc_class *))(v168 + 48))(v98, 1, v169);
          id v150 = v91.super.isa;
          Class v149 = v95.super.isa;
          if (v101)
          {
            sub_1000A61E4(v98, &qword_1002A8568);
            uint64_t v102 = v156;
          }
          else
          {
            uint64_t v103 = v165;
            (*(void (**)(char *, uint64_t, objc_class *))(v100 + 16))(v165, v98, v99);
            uint64_t v104 = sub_1000A61E4(v98, &qword_1002A8568);
            v167 = &v148;
            uint64_t v105 = __chkstk_darwin(v104);
            *(&v148 - _Block_object_dispose(&STACK[0x3D0], 8) = (uint64_t)&v180;
            *(&v148 - 7) = (uint64_t)v91.super.isa;
            uint64_t v102 = v156;
            *(&v148 - 6) = (uint64_t)v95.super.isa;
            *(&v148 - 5) = v102;
            *(&v148 - 4) = v157;
            *(&v148 - 3) = v86;
            *(&v148 - 2) = v82;
            __chkstk_darwin(v105);
            *(&v148 - 2) = (uint64_t)sub_1000B9B94;
            *(&v148 - 1) = v106;
            sub_1000992E8(&qword_1002A8588);
            uint64_t v107 = v176;
            SymmetricKey.withUnsafeBytes<A>(_:)();
            uint64_t v176 = v107;
            (*(void (**)(char *, objc_class *))(v100 + 8))(v103, v99);
          }
          v108.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v109 = v180;
          unint64_t v110 = v181;
          sub_1000A618C(v180, v181);
          v111.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A6240(v109, v110);
          if (ccsha512_di())
          {
            [(objc_class *)v111.super.isa length];
            uint64_t v112 = v111.super.isa;
            [(objc_class *)v112 bytes];
            unint64_t v113 = isa;
            [(objc_class *)v113 bytes];
            uint64_t v114 = v108.super.isa;
            [(objc_class *)v114 bytes];
            if (cced25519_verify())
            {
              sub_1000B9968();
              uint64_t v115 = swift_allocError();
              *unint64_t v116 = 2;
              uint64_t v176 = v115;
              swift_willThrow();

              sub_1000A6240(v102, v157);
              sub_1000A6240((uint64_t)v172, v159);

              sub_1000A6240(v151, v152);
              sub_1000A6240(v160, v153);
              sub_1000A9990((uint64_t)v171, v166);
            }
            else
            {
              v169 = v114;
              uint64_t v119 = v164;
              v175(v164, v174, (uint64_t)v170);
              uint64_t v120 = Logger.logObject.getter();
              os_log_type_t v121 = static os_log_type_t.default.getter();
              BOOL v122 = os_log_type_enabled(v120, v121);
              uint64_t v123 = v155;
              unint64_t v124 = v159;
              if (v122)
              {
                uint64_t v125 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v125 = 0;
                _os_log_impl((void *)&_mh_execute_header, v120, v121, "Pair-setup M6 pairing complete!", v125, 2u);
                swift_slowDealloc();
              }

              v162(v119, (uint64_t)v170);
              *(unsigned char *)(v173 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state) = 7;
              id v126 = objc_allocWithZone((Class)HMFPairingKey);
              uint64_t v127 = (uint64_t)v172;
              sub_1000A618C((uint64_t)v172, v124);
              Class v128 = Data._bridgeToObjectiveC()().super.isa;
              id v129 = [v126 initWithPairingKeyData:v128];
              sub_1000A6240(v127, v124);

              if (v129)
              {
                static String.Encoding.utf8.getter();
                uint64_t v130 = v102;
                unint64_t v131 = v157;
                String.init(data:encoding:)();
                if (v132)
                {
                  id v133 = objc_allocWithZone((Class)HAPPairingIdentity);
                  id v134 = v129;
                  NSString v135 = String._bridgeToObjectiveC()();
                  swift_bridgeObjectRelease();
                  id v136 = [v133 initWithIdentifier:v135 publicKey:v134 privateKey:0];

                  uint64_t v137 = v173;
                  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
                  if (Strong)
                  {
                    id v178 = 0;
                    unsigned int v139 = [Strong pairSetupSession:v137 didPairWithPeer:v136 error:&v178];
                    swift_unknownObjectRelease();
                    uint64_t v140 = (uint64_t)v172;
                    if (v139)
                    {
                      id v141 = v178;
                    }
                    else
                    {
                      id v147 = v178;
                      _convertNSErrorToError(_:)();

                      swift_willThrow();
                      swift_errorRelease();
                      uint64_t v176 = 0;
                    }
                    unint64_t v146 = v159;
                  }
                  else
                  {
                    unint64_t v146 = v159;
                    uint64_t v140 = (uint64_t)v172;
                  }
                  sub_1000AB8E0(0);

                  sub_1000A6240(v156, v131);
                  sub_1000A6240(v140, v146);

                  sub_1000A6240(v151, v152);
                  sub_1000A6240(v160, v153);
                  sub_1000A9990((uint64_t)v171, v166);
                }
                else
                {

                  sub_1000A6240(v130, v131);
                  sub_1000A6240((uint64_t)v172, v124);

                  sub_1000A6240(v151, v152);
                  sub_1000A6240(v160, v153);
                  sub_1000A9990((uint64_t)v171, v166);
                }
              }
              else
              {

                sub_1000A6240(v102, v157);
                sub_1000A6240(v127, v124);

                sub_1000A6240(v151, v152);
                sub_1000A6240(v160, v153);
                sub_1000A9990((uint64_t)v171, v166);
              }
            }
            uint64_t v117 = v180;
            unint64_t v118 = v181;
            return sub_1000A6240(v117, v118);
          }
        }
        __break(1u);
        JUMPOUT(0x1000B30A4);
      case 2uLL:
        uint64_t v51 = *(void *)(v43 + 16);
        uint64_t v50 = *(void *)(v43 + 24);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v49 = v50 - v51;
        if (!v52) {
          goto LABEL_14;
        }
        goto LABEL_50;
      case 3uLL:
        goto LABEL_15;
      default:
        uint64_t v49 = BYTE6(v44);
        goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_1000B30C4(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  return Data.append(_:)();
}

uint64_t sub_1000B3190(int a1, int a2, int a3, int a4, id a5, void *a6)
{
  id v7 = a5;
  [v7 bytes];
  [v7 length];
  id v8 = a6;
  [v8 bytes];
  [v8 length];
  return CryptoHKDF();
}

void sub_1000B3274(unsigned char *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state;
  int v11 = a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state];
  if (!a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state])
  {
    int v11 = 1;
    a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state] = 1;
  }
  if (a3 >> 60 == 15) {
    goto LABEL_7;
  }
  uint64_t v12 = Data._bridgeToObjectiveC()().super.isa;
  [(objc_class *)v12 bytes];
  [(objc_class *)v12 length];
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  uint64_t v13 = v12;
  [(objc_class *)v13 bytes];
  TLV8Get();
  if (!v20 || *v20 == a1[v10])
  {

    int v11 = a1[v10];
LABEL_7:
    switch(v11)
    {
      case 1:
        sub_1000AC150();
        break;
      case 2:
        sub_1000ACCFC(a2, a3);
        break;
      case 4:
        sub_1000AEB20(a2, a3);
        break;
      case 6:
        sub_1000B1DB4(a2, a3);
        break;
      default:
        return;
    }
    return;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v9, &a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger], v6);
  uint64_t v14 = a1;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 16777472;
    v18[15] = a1[v10];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Exchange data received in invalid state: %hhu", v17, 5u);
    swift_slowDealloc();
    uint64_t v14 = v13;
  }
  else
  {

    uint64_t v15 = v13;
  }

  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000B368C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v2 - 8);
  uint64_t v28 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000992E8(&qword_1002A8568);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger, v11);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Split pair setup done.", v17, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v18 = (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret;
  swift_beginAccess();
  sub_1000B9BD4(v18, (uint64_t)v10, &qword_1002A8568);
  uint64_t v19 = type metadata accessor for SymmetricKey();
  LODWORD(v1_Block_object_dispose(&STACK[0x3D0], 8) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v10, 1, v19);
  uint64_t result = sub_1000A61E4((uint64_t)v10, &qword_1002A8568);
  if (v18 != 1)
  {
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v1;
    aBlock[4] = sub_1000B9A4C;
    aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001468DC;
    aBlock[3] = &unk_100275A38;
    uint64_t v22 = _Block_copy(aBlock);
    id v23 = v1;
    static DispatchQoS.unspecified.getter();
    int v29 = _swiftEmptyArrayStorage;
    sub_1000B9A6C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000992E8((uint64_t *)&unk_1002A7F60);
    sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
    uint64_t v24 = v28;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v24);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
    return swift_release();
  }
  return result;
}

void sub_1000B3B30(uint64_t a1)
{
  os_log_type_t v54 = 0;
  uint64_t v2 = type metadata accessor for SymmetricKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v53 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000992E8(&qword_1002A8568);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v51 - v9;
  uint64_t v11 = sub_100100590(0x74655374696C7053uLL, 0xEE00746C61537075);
  unint64_t v13 = v12;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A6240(v11, v13);
  uint64_t v14 = sub_100100590(0xD000000000000018, 0x80000001002353F0);
  unint64_t v16 = v15;
  v17.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A6240(v14, v16);
  uint64_t v18 = sub_100100590(0xD000000000000019, 0x8000000100235410);
  unint64_t v20 = v19;
  Class v56 = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A6240(v18, v20);
  uint64_t v21 = a1;
  uint64_t v22 = a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret;
  swift_beginAccess();
  sub_1000B9BD4(v22, (uint64_t)v10, &qword_1002A8568);
  uint64_t v23 = v3;
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  uint64_t v25 = v2;
  int v26 = v24(v10, 1, v2);
  Class v57 = v17.super.isa;
  uint64_t v55 = v21;
  if (v26)
  {
    sub_1000A61E4((uint64_t)v10, &qword_1002A8568);
    uint64_t v27 = v53;
    uint64_t v28 = v23;
  }
  else
  {
    uint64_t v52 = v23;
    int v29 = v53;
    (*(void (**)(void))(v23 + 16))();
    uint64_t v30 = sub_1000A61E4((uint64_t)v10, &qword_1002A8568);
    uint64_t v51 = (uint64_t)&v51;
    uint64_t v31 = __chkstk_darwin(v30);
    Class v32 = isa;
    *(&v51 - 4) = v21;
    *(&v51 - 3) = (uint64_t)v32;
    *(&v51 - 2) = (uint64_t)v17.super.isa;
    __chkstk_darwin(v31);
    *(&v51 - 2) = (uint64_t)sub_1000B9B6C;
    *(&v51 - 1) = v33;
    sub_1000992E8(&qword_1002A8588);
    uint64_t v27 = v29;
    SymmetricKey.withUnsafeBytes<A>(_:)();
    uint64_t v28 = v52;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v29, v25);
  }
  sub_1000B9BD4(v22, (uint64_t)v8, &qword_1002A8568);
  if (v24(v8, 1, v25))
  {
    sub_1000A61E4((uint64_t)v8, &qword_1002A8568);
    uint64_t v34 = v55;
    Class v35 = v56;
    Class v36 = v57;
    Class v37 = isa;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v27, v8, v25);
    uint64_t v38 = sub_1000A61E4((uint64_t)v8, &qword_1002A8568);
    os_log_type_t v54 = &v51;
    uint64_t v39 = __chkstk_darwin(v38);
    uint64_t v34 = v55;
    Class v35 = v56;
    Class v37 = isa;
    *(&v51 - 4) = v55;
    *(&v51 - 3) = (uint64_t)v37;
    *(&v51 - 2) = (uint64_t)v35;
    __chkstk_darwin(v39);
    *(&v51 - 2) = (uint64_t)sub_1000B9B04;
    *(&v51 - 1) = v40;
    sub_1000992E8(&qword_1002A8588);
    SymmetricKey.withUnsafeBytes<A>(_:)();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v25);
    Class v36 = v57;
  }
  memset(__s, 0, sizeof(__s));
  unsigned __int8 v62 = 8;
  memset_s(__s, 8uLL, 0, 8uLL);
  uint64_t v41 = *(void *)__s;
  unint64_t v42 = *(unsigned int *)&__s[8] | ((unint64_t)__s[12] << 32) | ((unint64_t)__s[13] << 40) | ((unint64_t)v62 << 48);
  uint64_t v43 = (uint64_t *)(v34 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readNonce);
  swift_beginAccess();
  uint64_t v44 = *v43;
  unint64_t v45 = v43[1];
  uint64_t *v43 = v41;
  v43[1] = v42;
  sub_1000A6240(v44, v45);
  memset(v59, 0, sizeof(v59));
  unsigned __int8 v60 = 8;
  memset_s(v59, 8uLL, 0, 8uLL);
  uint64_t v46 = *(void *)v59;
  unint64_t v47 = *(unsigned int *)&v59[8] | ((unint64_t)v59[12] << 32) | ((unint64_t)v59[13] << 40) | ((unint64_t)v60 << 48);
  uint64_t v48 = (uint64_t *)(v34 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce);
  swift_beginAccess();
  uint64_t v49 = *v48;
  unint64_t v50 = v48[1];
  uint64_t *v48 = v46;
  v48[1] = v47;
  sub_1000A6240(v49, v50);
}

uint64_t sub_1000B40F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v12 = __DataStorage.init(length:)() | 0x4000000000000000;
  unint64_t v13 = (uint64_t *)(a3 + *a6);
  swift_beginAccess();
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  *unint64_t v13 = 0x2000000000;
  v13[1] = v12;
  sub_1000A9990(v14, v15);
  uint64_t result = swift_beginAccess();
  if ((unint64_t)v13[1] >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    sub_1000B6B6C(v13, a1, a2, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, id, void *))sub_1000B421C, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))sub_1000B421C);
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1000B421C(int a1, int a2, int a3, int a4, id a5, void *a6)
{
  id v7 = a5;
  [v7 bytes];
  [v7 length];
  id v8 = a6;
  [v8 bytes];
  [v8 length];
  return CryptoHKDF();
}

uint64_t sub_1000B4358@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey;
  uint64_t result = swift_beginAccess();
  if (*(void *)(v4 + 8) >> 60 == 15)
  {
    BOOL v6 = 0;
  }
  else
  {
    uint64_t v7 = a1 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readKey;
    uint64_t result = swift_beginAccess();
    BOOL v6 = *(void *)(v7 + 8) >> 60 != 15;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000B44A8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey;
  uint64_t v6 = swift_beginAccess();
  if (*(void *)(v5 + 8) >> 60 == 15)
  {
    char v7 = 3;
LABEL_9:
    sub_1000B8650();
    swift_allocError();
    char *v9 = v7;
    return swift_willThrow();
  }
  else
  {
    char v7 = 2;
    switch(a2 >> 62)
    {
      case 1uLL:
        if ((int)a1 == a1 >> 32) {
          goto LABEL_9;
        }
        break;
      case 2uLL:
        if (*(void *)(a1 + 16) == *(void *)(a1 + 24)) {
          goto LABEL_9;
        }
        break;
      case 3uLL:
        goto LABEL_9;
      default:
        if ((a2 & 0xFF000000000000) == 0) {
          goto LABEL_9;
        }
        break;
    }
    __chkstk_darwin(v6);
    OS_dispatch_queue.sync<A>(execute:)();
    return v10;
  }
}

double sub_1000B4638@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v11 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_11:
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x1000B48B8);
      }
      uint64_t v11 = HIDWORD(a1) - (int)a1;
LABEL_6:
      uint64_t v31 = a6;
      *(void *)&long long v30 = sub_1000B805C(v11);
      *((void *)&v30 + 1) = v14;
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v28 = 0x1000000000;
      unint64_t v29 = __DataStorage.init(length:)() | 0x4000000000000000;
      unint64_t v15 = (uint64_t *)&a3[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey];
      swift_beginAccess();
      unint64_t v16 = v15[1];
      if (v16 >> 60 == 15) {
        goto LABEL_12;
      }
      uint64_t v17 = *v15;
      sub_1000A618C(v17, v16);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A9990(v17, v16);
      unint64_t v19 = isa;
      unint64_t v20 = a3;
      sub_1000A997C(a4, a5);
      sub_1000A618C(a1, a2);
      sub_1000B6E50(&v30, &v28, v19, v20, a4, a5, a1, a2);
      uint64_t v21 = v28;
      unint64_t v22 = v29;
      sub_1000A618C(v28, v29);
      Data.append(_:)();
      sub_1000A6240(v21, v22);
      if (v20[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_enhancedEncryption] == 1)
      {
        uint64_t v23 = (uint64_t *)&v20[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce];
        swift_beginAccess();
        uint64_t v25 = *v23;
        unint64_t v24 = v23[1];
        sub_1000A618C(v25, v24);
        Data.append(_:)();
        sub_1000A6240(v25, v24);
      }
      int v26 = (uint64_t *)&v20[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce];
      swift_beginAccess();
      sub_1000B72F4(v26);
      swift_endAccess();

      sub_1000A6240(v21, v22);
      double result = *(double *)&v30;
      *uint64_t v31 = v30;
      return result;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v13 = *(void *)(a1 + 24);
      uint64_t v11 = v13 - v12;
      if (!__OFSUB__(v13, v12)) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v11 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1000B48C8(int a1, int a2, id a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  [a3 bytes];
  uint64_t v14 = (uint64_t *)(a4 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce);
  swift_beginAccess();
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_1000A618C(*v14, v16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [(objc_class *)isa bytes];
  uint64_t v18 = isa;
  sub_1000A6240(v15, v16);
  if (a6 >> 60 != 15)
  {
    Class v19 = Data._bridgeToObjectiveC()().super.isa;
    [(objc_class *)v19 bytes];
    unint64_t v20 = v19;
    switch(a6 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(a5), a5)) {
          break;
        }
        goto LABEL_13;
      case 2uLL:
        if (!__OFSUB__(*(void *)(a5 + 24), *(void *)(a5 + 16))) {
          break;
        }
        goto LABEL_14;
      default:
        break;
    }
  }
  Class v21 = Data._bridgeToObjectiveC()().super.isa;
  [(objc_class *)v21 bytes];
  unint64_t v22 = v21;
  switch(a8 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a7), a7)) {
        return chacha20_poly1305_encrypt_all_64x64();
      }
      __break(1u);
LABEL_12:
      __break(1u);
      break;
    case 2uLL:
      if (!__OFSUB__(*(void *)(a7 + 24), *(void *)(a7 + 16))) {
        return chacha20_poly1305_encrypt_all_64x64();
      }
      goto LABEL_12;
    default:
      return chacha20_poly1305_encrypt_all_64x64();
  }
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  JUMPOUT(0x1000B4ACCLL);
}

uint64_t sub_1000B4B04(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = v2 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readKey;
  uint64_t v7 = swift_beginAccess();
  if (*(void *)(v6 + 8) >> 60 == 15)
  {
    sub_1000B8650();
    swift_allocError();
    char v9 = 3;
LABEL_11:
    char *v8 = v9;
    return swift_willThrow();
  }
  else
  {
    switch(a2 >> 62)
    {
      case 1uLL:
        if ((int)a1 != a1 >> 32) {
          goto LABEL_5;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(a1 + 16) == *(void *)(a1 + 24)) {
          goto LABEL_10;
        }
        goto LABEL_5;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((a2 & 0xFF000000000000) == 0)
        {
LABEL_10:
          sub_1000B8650();
          swift_allocError();
          char v9 = 2;
          goto LABEL_11;
        }
LABEL_5:
        __chkstk_darwin(v7);
        uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
        if (!v3) {
          uint64_t result = v11;
        }
        break;
    }
  }
  return result;
}

double sub_1000B4CB8@<D0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, objc_class *a5@<X4>, _OWORD *a6@<X8>)
{
  BOOL v77 = a6;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v78 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_type_t v76 = (char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_enhancedEncryption;
  if (a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_enhancedEncryption]) {
    uint64_t v14 = 8;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_35;
      }
      uint64_t v15 = HIDWORD(a2) - (int)a2;
LABEL_9:
      sub_1000A618C(a2, a3);
LABEL_10:
      uint64_t v18 = v15 - 16;
      if (__OFSUB__(v15, 16))
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1000B541CLL);
      }
      if (__OFSUB__(v18, v14)) {
        goto LABEL_34;
      }
      uint64_t v81 = a4;
      unint64_t v82 = a5;
      sub_100152FDC(v18 - v14, a2, a3, &v85);
      unint64_t v19 = sub_100100AB8(v85, v86);
      unint64_t v21 = v20;
      sub_1000A618C(a2, a3);
      sub_1000B543C(v14, a2, a3, v84);
      sub_1001A6570(16, v84[0], v84[1], &v85);
      uint64_t v23 = sub_100100AB8(v85, v86);
      uint64_t v24 = 0;
      switch(v21 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v19), v19)) {
            goto LABEL_37;
          }
          uint64_t v24 = HIDWORD(v19) - (int)v19;
LABEL_17:
          unint64_t v88 = v22;
          *(void *)&long long v87 = sub_1000B805C(v24);
          *((void *)&v87 + 1) = v27;
          if (a1[v13] != 1) {
            goto LABEL_27;
          }
          uint64_t v75 = v11;
          sub_1000A618C(a2, a3);
          sub_1001A6570(8, a2, a3, &v85);
          uint64_t v28 = sub_100100AB8(v85, v86);
          sub_100152FDC(8, v28, v29, &v85);
          unint64_t v79 = v86;
          uint64_t v80 = v85;
          unint64_t v30 = sub_1000AB058(v85, v86);
          uint64_t v31 = (uint64_t *)&a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readNonce];
          swift_beginAccess();
          uint64_t v33 = *v31;
          unint64_t v32 = v31[1];
          sub_1000A618C(*v31, v32);
          unint64_t v34 = sub_1000AB058(v33, v32);
          sub_1000A6240(v33, v32);
          if (v30 < v34)
          {
            sub_1000B9968();
            swift_allocError();
            unsigned char *v35 = 2;
            swift_willThrow();
            sub_1000A6240(v23, v88);
            sub_1000A6240(v19, v21);
            sub_1000A6240(v80, v79);
LABEL_30:
            sub_1000A6240(v87, *((unint64_t *)&v87 + 1));
            return result;
          }
          unint64_t v36 = sub_1000AB058(v80, v79);
          uint64_t v37 = *v31;
          unint64_t v38 = v31[1];
          sub_1000A618C(*v31, v38);
          unint64_t v39 = sub_1000AB058(v37, v38);
          sub_1000A6240(v37, v38);
          if (v39 >= v36)
          {
            unint64_t v54 = v79;
            uint64_t v53 = v80;
          }
          else
          {
            uint64_t v40 = v78;
            uint64_t v41 = v76;
            (*(void (**)(char *, unsigned char *, uint64_t))(v78 + 16))(v76, &a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_logger], v75);
            unint64_t v74 = a1;
            sub_1000A618C(v80, v79);
            unint64_t v42 = Logger.logObject.getter();
            os_log_type_t v43 = static os_log_type_t.error.getter();
            int v44 = v43;
            if (os_log_type_enabled(v42, v43))
            {
              unint64_t v45 = (_DWORD *)swift_slowAlloc();
              int v72 = v44;
              uint64_t v46 = v45;
              *unint64_t v45 = 134218240;
              unint64_t v71 = v45 + 1;
              unint64_t v73 = v42;
              uint64_t v47 = *v31;
              unint64_t v48 = v31[1];
              sub_1000A618C(*v31, v48);
              uint64_t v49 = sub_1000AB058(v47, v48);
              sub_1000A6240(v47, v48);
              uint64_t v85 = v49;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              *((_WORD *)v46 + 6) = 2048;
              unint64_t v50 = v79;
              uint64_t v85 = sub_1000AB058(v80, v79);
              uint64_t v40 = v78;
              uint64_t v41 = v76;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              unint64_t v51 = v50;
              unint64_t v42 = v73;
              sub_1000A6240(v80, v51);
              _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v72, "Detected potential packet drop while decrypting message: %llu != %llu", (uint8_t *)v46, 0x16u);
              uint64_t v52 = v75;
              swift_slowDealloc();
            }
            else
            {

              sub_1000A6240(v80, v79);
              uint64_t v52 = v75;
            }

            (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v52);
            uint64_t v53 = *v31;
            unint64_t v54 = v31[1];
            unint64_t v55 = v79;
            *uint64_t v31 = v80;
            v31[1] = v55;
          }
          sub_1000A6240(v53, v54);
LABEL_27:
          Class v56 = (uint64_t *)&a1[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readKey];
          swift_beginAccess();
          unint64_t v57 = v56[1];
          if (v57 >> 60 == 15) {
            goto LABEL_39;
          }
          uint64_t v58 = *v56;
          sub_1000A618C(v58, v57);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000A9990(v58, v57);
          unsigned __int8 v60 = a1;
          unint64_t v61 = isa;
          uint64_t v63 = v81;
          unint64_t v62 = (unint64_t)v82;
          sub_1000A997C(v81, (unint64_t)v82);
          sub_1000A618C(v19, v21);
          unint64_t v64 = v88;
          sub_1000A618C(v23, v88);
          uint64_t v65 = v83;
          int v66 = sub_1000B913C((uint64_t *)&v87, v61, v60, v63, v62, v19, v21, v23, v64);
          uint64_t v83 = v65;
          uint64_t v78 = v23;
          sub_1000A6240(v23, v64);
          unint64_t v79 = v19;
          uint64_t v80 = v21;
          sub_1000A6240(v19, v21);
          sub_1000A9990(v63, v62);
          unint64_t v82 = v61;

          unint64_t v67 = (uint64_t *)&v60[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readNonce];
          swift_beginAccess();
          sub_1000B72F4(v67);
          swift_endAccess();
          if (v66)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)();
            id v68 = objc_allocWithZone((Class)NSError);
            NSString v69 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v68 initWithDomain:v69 code:v66 userInfo:0];

            swift_willThrow();
            sub_1000A6240(v78, v64);
            sub_1000A6240(v79, v80);

            goto LABEL_30;
          }

          sub_1000A6240(v78, v64);
          sub_1000A6240(v79, v80);
          double result = *(double *)&v87;
          _OWORD *v77 = v87;
          return result;
        case 2uLL:
          uint64_t v26 = *(void *)(v19 + 16);
          uint64_t v25 = *(void *)(v19 + 24);
          uint64_t v24 = v25 - v26;
          if (!__OFSUB__(v25, v26)) {
            goto LABEL_17;
          }
          goto LABEL_38;
        case 3uLL:
          goto LABEL_17;
        default:
          uint64_t v24 = BYTE6(v21);
          goto LABEL_17;
      }
    case 2uLL:
      uint64_t v17 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      uint64_t v15 = v16 - v17;
      if (!__OFSUB__(v16, v17)) {
        goto LABEL_9;
      }
      goto LABEL_36;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v15 = BYTE6(a3);
      goto LABEL_10;
  }
}

uint64_t sub_1000B543C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x1000B55ACLL);
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = a2 >> 32;
      uint64_t v8 = (int)a2;
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v10 = -a1;
  uint64_t v11 = sub_1001B0B44(v9, v8, a2, a3);
  if (v11 > 0 || v11 <= v10)
  {
    uint64_t v12 = sub_1001B0AC8(v9, v10, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = (int)a2;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 16);
        break;
      default:
        break;
    }
    if (v12 < v13)
    {
      __break(1u);
      goto LABEL_14;
    }
  }
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_1000A6240(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_1000B55DC@<X0>(id a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, unint64_t a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, _DWORD *a7@<X8>, uint64_t a8, uint64_t a9)
{
  [a1 bytes];
  uint64_t v14 = (uint64_t *)(a2 + OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readNonce);
  swift_beginAccess();
  uint64_t v16 = *v14;
  unint64_t v15 = v14[1];
  sub_1000A618C(v16, v15);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [(objc_class *)isa bytes];
  uint64_t v18 = isa;
  sub_1000A6240(v16, v15);
  if (a4 >> 60 != 15)
  {
    Class v19 = Data._bridgeToObjectiveC()().super.isa;
    [(objc_class *)v19 bytes];
    unint64_t v20 = v19;
    switch(a4 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(a3), a3)) {
          break;
        }
        goto LABEL_13;
      case 2uLL:
        if (!__OFSUB__(*(void *)(a3 + 24), *(void *)(a3 + 16))) {
          break;
        }
        goto LABEL_14;
      default:
        break;
    }
  }
  Class v21 = Data._bridgeToObjectiveC()().super.isa;
  [(objc_class *)v21 bytes];
  unint64_t v22 = v21;
  switch(a6 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a5), a5)) {
        goto LABEL_10;
      }
      __break(1u);
LABEL_12:
      __break(1u);
      break;
    case 2uLL:
      if (!__OFSUB__(*(void *)(a5 + 24), *(void *)(a5 + 16))) {
        goto LABEL_10;
      }
      goto LABEL_12;
    default:
LABEL_10:
      Class v23 = Data._bridgeToObjectiveC()().super.isa;
      [(objc_class *)v23 bytes];
      uint64_t v24 = v23;
      uint64_t result = chacha20_poly1305_decrypt_all_64x64();
      *a7 = result;
      return result;
  }
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  JUMPOUT(0x1000B5810);
}

Class sub_1000B5848(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t (*a6)(uint64_t, unint64_t, uint64_t, unint64_t))
{
  id v9 = a3;
  id v10 = a1;
  id v11 = a4;
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  if (v11)
  {
    uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    unint64_t v17 = 0xF000000000000000;
  }
  uint64_t v18 = a6(v12, v14, v15, v17);
  unint64_t v20 = v19;

  sub_1000A9990(v15, v17);
  sub_1000A6240(v12, v14);
  v21.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A6240(v18, v20);

  return v21.super.isa;
}

id sub_1000B59E0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DKPairSetupSession();
  return [super dealloc];
}

uint64_t sub_1000B5B3C()
{
  return type metadata accessor for DKPairSetupSession();
}

uint64_t type metadata accessor for DKPairSetupSession()
{
  uint64_t result = qword_1002A8500;
  if (!qword_1002A8500) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000B5B90()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    sub_1000B5D30(319, &qword_1002A8510, (void (*)(uint64_t))&type metadata accessor for SymmetricKey);
    if (v1 <= 0x3F)
    {
      sub_1000B5D30(319, &qword_1002A8518, (void (*)(uint64_t))&type metadata accessor for SPAKE2.Prover);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_1000B5D30(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for MACAddress(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1000A618C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for MACAddress(uint64_t a1)
{
  return sub_1000A6240(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for MACAddress(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1000A618C(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1000A6240(v5, v6);
  return a1;
}

uint64_t *assignWithTake for MACAddress(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000A6240(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MACAddress(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MACAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + _Block_object_dispose(&STACK[0x3D0], 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DKPairSetupNonce()
{
  return &type metadata for DKPairSetupNonce;
}

uint64_t getEnumTagSinglePayload for DKPairSetupSession.PairSetupState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DKPairSetupSession.PairSetupState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B6060);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DKPairSetupSession.PairSetupState()
{
  return &type metadata for DKPairSetupSession.PairSetupState;
}

unint64_t sub_1000B609C()
{
  unint64_t result = qword_1002A8520;
  if (!qword_1002A8520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8520);
  }
  return result;
}

uint64_t sub_1000B60F0(void *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  unint64_t v7 = a1[1];
  unint64_t v8 = a7;
  uint64_t v9 = a6;
  uint64_t v12 = a3;
  unint64_t v13 = a2;
  switch(v7 >> 62)
  {
    case 1uLL:
      *(void *)&long long v48 = *a1;
      *((void *)&v48 + 1) = v7 & 0x3FFFFFFFFFFFFFFFLL;
      id v45 = a3;
      sub_1000A618C(a4, a5);
      sub_1000A618C(v9, v8);
      id v23 = v13;
      sub_1000A618C(a4, a5);
      sub_1000B7944((int *)&v48, v23, v45, a4, a5, v9, v8);
      sub_1000A6240(a4, a5);
      uint64_t v24 = *((void *)&v48 + 1) | 0x4000000000000000;
      *a1 = v48;
      a1[1] = v24;
      goto LABEL_12;
    case 2uLL:
      *(void *)&long long v48 = *a1;
      *((void *)&v48 + 1) = v7 & 0x3FFFFFFFFFFFFFFFLL;
      id v41 = a2;
      uint64_t v37 = v12;
      id v39 = v12;
      sub_1000A618C(a4, a5);
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v25 = *((void *)&v48 + 1);
      uint64_t v27 = *(void *)(v48 + 16);
      uint64_t v26 = *(void *)(v48 + 24);
      uint64_t v28 = __DataStorage._bytes.getter();
      if (!v28)
      {

        sub_1000A6240(a4, a5);
        __break(1u);
        JUMPOUT(0x1000B64C8);
      }
      int v29 = v28;
      uint64_t v30 = __DataStorage._offset.getter();
      int v31 = v27 - v30;
      if (__OFSUB__(v27, v30))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      BOOL v32 = __OFSUB__(v26, v27);
      uint64_t v33 = v26 - v27;
      if (v32) {
        goto LABEL_14;
      }
      uint64_t v34 = __DataStorage._length.getter();
      if (v34 >= v33) {
        int v35 = v33;
      }
      else {
        int v35 = v34;
      }
      uint64_t v9 = a6;
      unint64_t v8 = a7;
      sub_1000AB288(v29 + v31, v29 + v31 + v35, v41, v39, a4, a5);

      sub_1000A6240(a4, a5);
      *a1 = v48;
      a1[1] = v25 | 0x8000000000000000;
      uint64_t v12 = v37;
      unint64_t v13 = a2;
LABEL_12:

      sub_1000A6240(a4, a5);
      return sub_1000A6240(v9, v8);
    case 3uLL:
      *(void *)((char *)&v48 + 7) = 0;
      *(void *)&long long v48 = 0;
      sub_1000A618C(a4, a5);
      sub_1000AB288((int)&v48, (int)&v48, v13, v12, a4, a5);
      sub_1000A6240(a4, a5);
      goto LABEL_12;
    default:
      *(void *)&long long v48 = *a1;
      WORD4(v4_Block_object_dispose(&STACK[0x3D0], 8) = v7;
      BYTE10(v4_Block_object_dispose(&STACK[0x3D0], 8) = BYTE2(v7);
      BYTE11(v4_Block_object_dispose(&STACK[0x3D0], 8) = BYTE3(v7);
      BYTE12(v4_Block_object_dispose(&STACK[0x3D0], 8) = BYTE4(v7);
      BYTE13(v4_Block_object_dispose(&STACK[0x3D0], 8) = BYTE5(v7);
      BYTE14(v4_Block_object_dispose(&STACK[0x3D0], 8) = BYTE6(v7);
      uint64_t v15 = (char *)&v48 + BYTE6(v7);
      sub_1000A618C(a4, a5);
      sub_1000AB288((int)&v48, (int)v15, v13, v12, a4, a5);
      unint64_t v44 = v8;
      uint64_t v47 = v48;
      uint64_t v40 = DWORD2(v48);
      uint64_t v42 = v9;
      unint64_t v16 = v13;
      uint64_t v17 = BYTE12(v48);
      uint64_t v18 = BYTE13(v48);
      unint64_t v19 = v12;
      uint64_t v20 = BYTE14(v48);
      sub_1000A6240(a4, a5);
      uint64_t v21 = v40 | (v17 << 32);
      unint64_t v13 = v16;
      uint64_t v22 = v21 | (v18 << 40) | (v20 << 48);
      uint64_t v12 = v19;
      *a1 = v47;
      a1[1] = v22;
      uint64_t v9 = v42;
      unint64_t v8 = v44;
      goto LABEL_12;
  }
}

void sub_1000B64D8(void *a1, void *a2, void *a3, void *a4)
{
  unint64_t v5 = a1[1];
  unsigned int v6 = a4;
  switch(v5 >> 62)
  {
    case 1uLL:
      *(void *)&long long v28 = *a1;
      *((void *)&v28 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      id v16 = a4;
      id v17 = a3;
      sub_1000B7A4C((int *)&v28, a2, v17, v16);

      uint64_t v18 = *((void *)&v28 + 1) | 0x4000000000000000;
      *a1 = v28;
      a1[1] = v18;
      if (!v4) {
        goto LABEL_10;
      }

      return;
    case 2uLL:
      *(void *)&long long v28 = *a1;
      *((void *)&v28 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      id v26 = a4;
      id v27 = a3;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v19 = *((void *)&v28 + 1);
      uint64_t v20 = *(void *)(v28 + 16);
      uint64_t v21 = *(void *)(v28 + 24);
      if (!__DataStorage._bytes.getter())
      {

        __break(1u);
        JUMPOUT(0x1000B67DCLL);
      }
      if (__OFSUB__(v20, __DataStorage._offset.getter()))
      {
        __break(1u);
LABEL_12:
        __break(1u);
      }
      if (__OFSUB__(v21, v20)) {
        goto LABEL_12;
      }
      __DataStorage._length.getter();
      sub_1000B67EC(a2, v27, v26);

      *a1 = v28;
      a1[1] = v19 | 0x8000000000000000;
      unsigned int v6 = a4;
LABEL_10:

      return;
    case 3uLL:
      *(void *)((char *)&v28 + 7) = 0;
      *(void *)&long long v28 = 0;
      id v22 = a4;
      id v23 = a3;
      sub_1000B67EC(a2, v23, v22);

      goto LABEL_10;
    default:
      *(void *)&long long v28 = *a1;
      WORD4(v2_Block_object_dispose(&STACK[0x3D0], 8) = v5;
      BYTE10(v2_Block_object_dispose(&STACK[0x3D0], 8) = BYTE2(v5);
      BYTE11(v2_Block_object_dispose(&STACK[0x3D0], 8) = BYTE3(v5);
      BYTE12(v2_Block_object_dispose(&STACK[0x3D0], 8) = BYTE4(v5);
      BYTE13(v2_Block_object_dispose(&STACK[0x3D0], 8) = BYTE5(v5);
      BYTE14(v2_Block_object_dispose(&STACK[0x3D0], 8) = BYTE6(v5);
      id v10 = a4;
      id v11 = a3;
      sub_1000B67EC(a2, v11, v10);
      uint64_t v12 = DWORD2(v28);
      uint64_t v13 = BYTE12(v28);
      uint64_t v14 = BYTE13(v28);
      uint64_t v15 = BYTE14(v28);

      *a1 = v28;
      a1[1] = v12 | (v13 << 32) | (v14 << 40) | (v15 << 48);
      goto LABEL_10;
  }
}

void sub_1000B67EC(void *a1, id a2, void *a3)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a3;
  switch(v4 >> 62)
  {
    case 1uLL:
      *(void *)&long long v25 = *a1;
      *((void *)&v25 + 1) = v4 & 0x3FFFFFFFFFFFFFFFLL;
      id v12 = a3;
      id v13 = a2;
      sub_1000B7BE4((int *)&v25, v13, v12);

      uint64_t v14 = *((void *)&v25 + 1) | 0x4000000000000000;
      *a1 = v25;
      a1[1] = v14;
      if (!v3) {
        goto LABEL_9;
      }

      return;
    case 2uLL:
      *(void *)&long long v25 = *a1;
      *((void *)&v25 + 1) = v4 & 0x3FFFFFFFFFFFFFFFLL;
      id v15 = a2;
      id v24 = v5;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v16 = *((void *)&v25 + 1);
      uint64_t v17 = *(void *)(v25 + 16);
      if (!__DataStorage._bytes.getter())
      {

        __break(1u);
        JUMPOUT(0x1000B6B5CLL);
      }
      if (__OFSUB__(v17, __DataStorage._offset.getter())) {
        __break(1u);
      }
      __DataStorage._length.getter();
      id v18 = v15;
      [v18 bytes];
      uint64_t v19 = v5;
      id v20 = v24;
      [v20 bytes];
      chacha20_poly1305_encrypt_all_64x64();

      unint64_t v5 = v19;
      *a1 = v25;
      a1[1] = v16 | 0x8000000000000000;
      goto LABEL_9;
    case 3uLL:
      *(void *)((char *)&v25 + 7) = 0;
      *(void *)&long long v25 = 0;
      id v21 = a2;
      id v22 = v5;
      [v21 bytes];
      id v23 = v22;
      [v23 bytes];
      chacha20_poly1305_encrypt_all_64x64();

      goto LABEL_9;
    default:
      *(void *)&long long v25 = *a1;
      WORD4(v25) = v4;
      BYTE10(v25) = BYTE2(v4);
      BYTE11(v25) = BYTE3(v4);
      BYTE12(v25) = BYTE4(v4);
      BYTE13(v25) = BYTE5(v4);
      BYTE14(v25) = BYTE6(v4);
      id v8 = a2;
      id v9 = v5;
      [v8 bytes];
      id v10 = v9;
      [v10 bytes];
      chacha20_poly1305_encrypt_all_64x64();

      unint64_t v11 = DWORD2(v25) | ((unint64_t)BYTE12(v25) << 32) | ((unint64_t)BYTE13(v25) << 40) | ((unint64_t)BYTE14(v25) << 48);
      *a1 = v25;
      a1[1] = v11;
LABEL_9:

      return;
  }
}

void sub_1000B6B6C(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, id, void *), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))
{
  unint64_t v7 = a1[1];
  id v8 = a5;
  switch(v7 >> 62)
  {
    case 1uLL:
      *(void *)&long long v39 = *a1;
      *((void *)&v39 + 1) = v7 & 0x3FFFFFFFFFFFFFFFLL;
      id v22 = a5;
      id v23 = a4;
      sub_1000B7CD4((int *)&v39, a2, a3, v23, v22, a7);

      uint64_t v24 = *((void *)&v39 + 1) | 0x4000000000000000;
      *a1 = v39;
      a1[1] = v24;
      goto LABEL_13;
    case 2uLL:
      *(void *)&long long v39 = *a1;
      *((void *)&v39 + 1) = v7 & 0x3FFFFFFFFFFFFFFFLL;
      id v38 = a4;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v13 = v39;
      uint64_t v25 = *(void *)(v39 + 16);
      uint64_t v26 = *(void *)(v39 + 24);
      uint64_t v27 = __DataStorage._bytes.getter();
      if (!v27)
      {

        __break(1u);
        JUMPOUT(0x1000B6E40);
      }
      uint64_t v28 = v27;
      uint64_t v29 = __DataStorage._offset.getter();
      uint64_t v30 = v25 - v29;
      if (__OFSUB__(v25, v29))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v31 = __OFSUB__(v26, v25);
      uint64_t v32 = v26 - v25;
      if (v31) {
        goto LABEL_15;
      }
      uint64_t v33 = __DataStorage._length.getter();
      if (v33 >= v32) {
        uint64_t v34 = v32;
      }
      else {
        uint64_t v34 = v33;
      }
      id v8 = a5;
      a6(v28 + v30, v28 + v30 + v34, a2, a3, v38, a5);

      unint64_t v20 = *((void *)&v39 + 1) | 0x8000000000000000;
LABEL_11:
      *a1 = v13;
      a1[1] = v20;
LABEL_13:

      return;
    case 3uLL:
      *(void *)((char *)&v39 + 7) = 0;
      *(void *)&long long v39 = 0;
      a6((uint64_t)&v39, (uint64_t)&v39, a2, a3, a4, a5);

      goto LABEL_13;
    default:
      *(void *)&long long v39 = *a1;
      WORD4(v39) = v7;
      BYTE10(v39) = BYTE2(v7);
      BYTE11(v39) = BYTE3(v7);
      BYTE12(v39) = BYTE4(v7);
      BYTE13(v39) = BYTE5(v7);
      BYTE14(v39) = BYTE6(v7);
      a6((uint64_t)&v39, (uint64_t)&v39 + BYTE6(v7), a2, a3, a4, a5);
      uint64_t v13 = v39;
      uint64_t v14 = v8;
      uint64_t v15 = DWORD2(v39);
      uint64_t v16 = BYTE12(v39);
      uint64_t v17 = BYTE13(v39);
      uint64_t v18 = BYTE14(v39);

      uint64_t v19 = v15 | (v16 << 32);
      id v8 = v14;
      unint64_t v20 = v19 | (v17 << 40) | (v18 << 48);
      goto LABEL_11;
  }
}

uint64_t sub_1000B6E50(void *a1, void *a2, void *a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  unint64_t v9 = a1[1];
  uint64_t v14 = a4;
  switch(v9 >> 62)
  {
    case 1uLL:
      *(void *)&long long v46 = *a1;
      *((void *)&v46 + 1) = v9 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v42 = a4;
      id v25 = a4;
      sub_1000A997C(a5, a6);
      sub_1000A618C(a7, a8);
      sub_1000A997C(a5, a6);
      sub_1000A618C(a7, a8);
      id v26 = a3;
      sub_1000B7E68((int *)&v46, a2, v26, v25, a5, a6, a7, a8);
      sub_1000A9990(a5, a6);
      uint64_t v27 = *((void *)&v46 + 1) | 0x4000000000000000;
      *a1 = v46;
      a1[1] = v27;
      if (!v8) {
        goto LABEL_9;
      }
      sub_1000A6240(a7, a8);

      goto LABEL_12;
    case 2uLL:
      uint64_t v42 = a4;
      *(void *)&long long v46 = *a1;
      *((void *)&v46 + 1) = v9 & 0x3FFFFFFFFFFFFFFFLL;
      id v37 = a4;
      sub_1000A997C(a5, a6);
      sub_1000A618C(a7, a8);
      int v35 = a3;
      id v36 = a3;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v28 = *(void *)(v46 + 16);
      uint64_t v38 = *(void *)(v46 + 24);
      uint64_t v29 = __DataStorage._bytes.getter();
      if (!v29)
      {

        sub_1000A9990(a5, a6);
        sub_1000A6240(a7, a8);
        __break(1u);
        JUMPOUT(0x1000B72E4);
      }
      uint64_t v30 = v29;
      uint64_t v31 = __DataStorage._offset.getter();
      uint64_t v32 = v28 - v31;
      if (__OFSUB__(v28, v31))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      if (__OFSUB__(v38, v28)) {
        goto LABEL_14;
      }
      uint64_t v39 = *((void *)&v46 + 1);
      __DataStorage._length.getter();
      sub_1000A997C(a5, a6);
      sub_1000A618C(a7, a8);
      sub_1000B7528(a2, v36, v37, a5, a6, a7, a8, v30 + v32);
      sub_1000A9990(a5, a6);
      a3 = v35;
      *a1 = v46;
      a1[1] = v39 | 0x8000000000000000;
LABEL_9:
      uint64_t v14 = v42;
LABEL_11:
      sub_1000A6240(a7, a8);

LABEL_12:
      sub_1000A9990(a5, a6);
      return sub_1000A6240(a7, a8);
    case 3uLL:
      *(void *)((char *)&v46 + 7) = 0;
      *(void *)&long long v46 = 0;
      id v33 = a4;
      sub_1000A997C(a5, a6);
      sub_1000A618C(a7, a8);
      sub_1000A997C(a5, a6);
      sub_1000A618C(a7, a8);
      sub_1000B7528(a2, a3, v33, a5, a6, a7, a8, (uint64_t)&v46);
      sub_1000A9990(a5, a6);
      goto LABEL_11;
    default:
      *(void *)&long long v46 = *a1;
      WORD4(v46) = v9;
      BYTE10(v46) = BYTE2(v9);
      BYTE11(v46) = BYTE3(v9);
      BYTE12(v46) = BYTE4(v9);
      BYTE13(v46) = BYTE5(v9);
      BYTE14(v46) = BYTE6(v9);
      id v17 = a4;
      sub_1000A997C(a5, a6);
      sub_1000A618C(a7, a8);
      sub_1000A997C(a5, a6);
      sub_1000A618C(a7, a8);
      sub_1000B7528(a2, a3, v17, a5, a6, a7, a8, (uint64_t)&v46);
      id v41 = v14;
      uint64_t v43 = v46;
      uint64_t v40 = DWORD2(v46);
      uint64_t v18 = BYTE12(v46);
      uint64_t v19 = BYTE13(v46);
      uint64_t v45 = a7;
      unint64_t v20 = a8;
      id v21 = a3;
      uint64_t v22 = BYTE14(v46);
      sub_1000A9990(a5, a6);
      uint64_t v23 = v40 | (v18 << 32);
      uint64_t v14 = v41;
      uint64_t v24 = v23 | (v19 << 40) | (v22 << 48);
      a3 = v21;
      a8 = v20;
      a7 = v45;
      *a1 = v43;
      a1[1] = v24;
      goto LABEL_11;
  }
}

void sub_1000B72F4(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v29 = *a1;
      uint64_t v30 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1000B7DBC((int *)&v29);
      uint64_t v12 = v30 | 0x4000000000000000;
      *a1 = v29;
      a1[1] = v12;
      return;
    case 2uLL:
      uint64_t v29 = *a1;
      uint64_t v30 = v1 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v14 = v29;
      uint64_t v13 = v30;
      uint64_t v15 = *(void *)(v29 + 16);
      uint64_t v16 = *(void *)(v29 + 24);
      uint64_t v17 = __DataStorage._bytes.getter();
      if (!v17)
      {
        __break(1u);
        JUMPOUT(0x1000B7518);
      }
      uint64_t v18 = v17;
      uint64_t v19 = __DataStorage._offset.getter();
      uint64_t v20 = v15 - v19;
      if (__OFSUB__(v15, v19))
      {
        __break(1u);
LABEL_28:
        __break(1u);
      }
      BOOL v21 = __OFSUB__(v16, v15);
      uint64_t v22 = v16 - v15;
      if (v21) {
        goto LABEL_28;
      }
      uint64_t v23 = __DataStorage._length.getter();
      if (v23 >= v22) {
        uint64_t v24 = v22;
      }
      else {
        uint64_t v24 = v23;
      }
      if (v24)
      {
        id v25 = (unsigned char *)(v18 + v20);
        uint64_t v26 = v24 - 1;
        do
        {
          if (++*v25++) {
            BOOL v28 = 1;
          }
          else {
            BOOL v28 = v26 == 0;
          }
          --v26;
        }
        while (!v28);
      }
      *a1 = v14;
      a1[1] = v13 | 0x8000000000000000;
      return;
    case 3uLL:
      return;
    default:
      uint64_t v29 = *a1;
      LOWORD(v30) = v1;
      BYTE2(v30) = BYTE2(v1);
      unint64_t v3 = HIDWORD(v1);
      BYTE3(v30) = BYTE3(v1);
      unint64_t v4 = v1 >> 40;
      BYTE4(v30) = BYTE4(v1);
      unint64_t v5 = HIWORD(v1);
      BYTE5(v30) = BYTE5(v1);
      uint64_t v6 = BYTE6(v1);
      BYTE6(v30) = v5;
      if (v6)
      {
        uint64_t v7 = v6 - 1;
        uint64_t v8 = &v29;
        do
        {
          int v9 = ++*(unsigned char *)v8;
          uint64_t v8 = (uint64_t *)((char *)v8 + 1);
          if (v9) {
            BOOL v10 = 1;
          }
          else {
            BOOL v10 = v7 == 0;
          }
          --v7;
        }
        while (!v10);
        LOBYTE(v3) = BYTE4(v30);
        LOBYTE(v4) = BYTE5(v30);
        LOBYTE(v5) = BYTE6(v30);
      }
      unint64_t v11 = v30 | ((unint64_t)v3 << 32) | ((unint64_t)v4 << 40) | ((unint64_t)v5 << 48);
      *a1 = v29;
      a1[1] = v11;
      return;
  }
}

uint64_t sub_1000B7528(void *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v8 = a1[1];
  uint64_t v10 = a6;
  uint64_t v12 = a3;
  uint64_t v13 = a2;
  switch(v8 >> 62)
  {
    case 1uLL:
      *(void *)&long long v50 = *a1;
      *((void *)&v50 + 1) = v8 & 0x3FFFFFFFFFFFFFFFLL;
      id v45 = a3;
      sub_1000A997C(a4, a5);
      sub_1000A618C(v10, a7);
      id v24 = v13;
      sub_1000A997C(a4, a5);
      sub_1000B7F44((int *)&v50, v24, v45, a4, a5, v10, a7, a8);
      sub_1000A9990(a4, a5);
      uint64_t v25 = *((void *)&v50 + 1) | 0x4000000000000000;
      *a1 = v50;
      a1[1] = v25;
      goto LABEL_12;
    case 2uLL:
      *(void *)&long long v50 = *a1;
      *((void *)&v50 + 1) = v8 & 0x3FFFFFFFFFFFFFFFLL;
      id v26 = a2;
      long long v46 = v12;
      id v41 = v12;
      sub_1000A997C(a4, a5);
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v27 = *((void *)&v50 + 1);
      uint64_t v29 = *(void *)(v50 + 16);
      uint64_t v28 = *(void *)(v50 + 24);
      uint64_t v30 = __DataStorage._bytes.getter();
      if (!v30)
      {

        sub_1000A9990(a4, a5);
        __break(1u);
        JUMPOUT(0x1000B7934);
      }
      int v31 = v30;
      uint64_t v32 = __DataStorage._offset.getter();
      int v33 = v29 - v32;
      if (__OFSUB__(v29, v32))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      BOOL v34 = __OFSUB__(v28, v29);
      uint64_t v35 = v28 - v29;
      if (v34) {
        goto LABEL_14;
      }
      uint64_t v36 = __DataStorage._length.getter();
      if (v36 >= v35) {
        int v37 = v35;
      }
      else {
        int v37 = v36;
      }
      uint64_t v10 = a6;
      sub_1000B48C8(v31 + v33, v31 + v33 + v37, v26, (uint64_t)v41, a4, a5, a6, a7, a8);

      sub_1000A9990(a4, a5);
      *a1 = v50;
      a1[1] = v27 | 0x8000000000000000;
      uint64_t v13 = a2;
      uint64_t v12 = v46;
LABEL_12:

      sub_1000A9990(a4, a5);
      return sub_1000A6240(v10, a7);
    case 3uLL:
      *(void *)((char *)&v50 + 7) = 0;
      *(void *)&long long v50 = 0;
      sub_1000A997C(a4, a5);
      sub_1000B48C8((int)&v50, (int)&v50, v13, (uint64_t)v12, a4, a5, v10, a7, a8);
      sub_1000A9990(a4, a5);
      goto LABEL_12;
    default:
      *(void *)&long long v50 = *a1;
      WORD4(v50) = v8;
      BYTE10(v50) = BYTE2(v8);
      BYTE11(v50) = BYTE3(v8);
      BYTE12(v50) = BYTE4(v8);
      BYTE13(v50) = BYTE5(v8);
      BYTE14(v50) = BYTE6(v8);
      uint64_t v43 = (char *)&v50 + BYTE6(v8);
      sub_1000A997C(a4, a5);
      sub_1000B48C8((int)&v50, (int)v43, v13, (uint64_t)v12, a4, a5, a6, a7, a8);
      uint64_t v17 = v50;
      unint64_t v44 = v12;
      uint64_t v47 = DWORD2(v50);
      uint64_t v18 = BYTE12(v50);
      uint64_t v19 = v13;
      uint64_t v20 = BYTE13(v50);
      uint64_t v21 = BYTE14(v50);
      sub_1000A9990(a4, a5);
      uint64_t v22 = v47 | (v18 << 32);
      uint64_t v10 = a6;
      uint64_t v23 = v22 | (v20 << 40);
      uint64_t v13 = v19;
      uint64_t v12 = v44;
      *a1 = v17;
      a1[1] = v23 | (v21 << 48);
      goto LABEL_12;
  }
}

void sub_1000B7944(int *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v14 = *a1;
  uint64_t v15 = a1[1];
  if ((int)v15 < (int)v14)
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v23 = a5;
  unint64_t v24 = a7;
  uint64_t v16 = __DataStorage._bytes.getter();
  if (!v16)
  {
LABEL_10:
    __break(1u);
    return;
  }
  int v17 = v16;
  uint64_t v18 = __DataStorage._offset.getter();
  int v19 = v14 - v18;
  if (__OFSUB__(v14, v18))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v20 = v15 - v14;
  uint64_t v21 = __DataStorage._length.getter();
  if (v21 >= v20) {
    int v22 = v20;
  }
  else {
    int v22 = v21;
  }
  sub_1000AB288(v17 + v19, v17 + v19 + v22, a2, a3, a4, v23);

  sub_1000A6240(a4, v23);
  sub_1000A6240(a6, v24);
}

void sub_1000B7A4C(int *a1, void *a2, void *a3, void *a4)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v8 = *a1;
  if (a1[1] < (int)v8)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (__DataStorage._bytes.getter())
  {
    if (!__OFSUB__(v8, __DataStorage._offset.getter()))
    {
      __DataStorage._length.getter();
      sub_1000B67EC(a2, a3, a4);
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

void sub_1000B7B20(int *a1, void *a2, void *a3)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  if ((int)v7 < (int)v6)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v8 = __DataStorage._bytes.getter();
  if (!v8)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v9 = v8;
  uint64_t v10 = __DataStorage._offset.getter();
  uint64_t v11 = v6 - v10;
  if (__OFSUB__(v6, v10))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v12 = v7 - v6;
  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_1000B1C54(v9 + v11, v9 + v11 + v14, a2, a3);
}

void sub_1000B7BE4(int *a1, void *a2, void *a3)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v6 = *a1;
  if (a1[1] < (int)v6)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (__DataStorage._bytes.getter())
  {
    if (!__OFSUB__(v6, __DataStorage._offset.getter()))
    {
      __DataStorage._length.getter();
      id v7 = a2;
      [v7 bytes];
      id v8 = a3;
      [v8 bytes];
      chacha20_poly1305_encrypt_all_64x64();

      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

void sub_1000B7CD4(int *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  if ((int)v13 < (int)v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v21 = a4;
  int v22 = a6;
  uint64_t v14 = __DataStorage._bytes.getter();
  if (!v14)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v15 = v14;
  uint64_t v16 = __DataStorage._offset.getter();
  uint64_t v17 = v12 - v16;
  if (__OFSUB__(v12, v16))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v18 = v13 - v12;
  uint64_t v19 = __DataStorage._length.getter();
  if (v19 >= v18) {
    uint64_t v20 = v18;
  }
  else {
    uint64_t v20 = v19;
  }
  v22(v15 + v17, v15 + v17 + v20, a2, a3, v21, a5);
}

void sub_1000B7DBC(int *a1)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v4 = __DataStorage._bytes.getter();
  if (!v4)
  {
LABEL_17:
    __break(1u);
    return;
  }
  uint64_t v5 = v4;
  uint64_t v6 = __DataStorage._offset.getter();
  uint64_t v7 = v2 - v6;
  if (__OFSUB__(v2, v6))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = v3 - v2;
  uint64_t v9 = __DataStorage._length.getter();
  if (v9 >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v9;
  }
  if (v10)
  {
    uint64_t v11 = (unsigned char *)(v5 + v7);
    uint64_t v12 = v10 - 1;
    do
    {
      if (++*v11++) {
        BOOL v14 = 1;
      }
      else {
        BOOL v14 = v12 == 0;
      }
      --v12;
    }
    while (!v14);
  }
}

void sub_1000B7E68(int *a1, void *a2, void *a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v14 = *a1;
  if (a1[1] < (int)v14)
  {
    __break(1u);
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v15 = __DataStorage._bytes.getter();
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = __DataStorage._offset.getter();
    uint64_t v18 = v14 - v17;
    if (!__OFSUB__(v14, v17))
    {
      __DataStorage._length.getter();
      sub_1000B7528(a2, a3, v19, v20, a6, a7, a8, v16 + v18);
      return;
    }
    goto LABEL_6;
  }
LABEL_7:
  __break(1u);
}

void sub_1000B7F44(int *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v16 = *a1;
  uint64_t v15 = a1[1];
  if ((int)v15 < (int)v16)
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v17 = __DataStorage._bytes.getter();
  if (!v17)
  {
LABEL_10:
    __break(1u);
    return;
  }
  int v18 = v17;
  uint64_t v19 = __DataStorage._offset.getter();
  int v20 = v16 - v19;
  if (__OFSUB__(v16, v19))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v21 = v15 - v16;
  uint64_t v22 = __DataStorage._length.getter();
  if (v22 >= v21) {
    int v23 = v21;
  }
  else {
    int v23 = v22;
  }
  sub_1000B48C8(v18 + v20, v18 + v20 + v23, v25, (uint64_t)v24, a4, a5, a6, a7, a8);

  sub_1000A9990(a4, a5);
  sub_1000A6240(a6, a7);
}

uint64_t sub_1000B805C(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        unint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_1000B80FC(uint64_t result)
{
  if ((result & 0xF8) != 0) {
    return 8;
  }
  else {
    return result;
  }
}

id sub_1000B8110(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v28 = a2;
  uint64_t v29 = a4;
  int v30 = a3;
  uint64_t v27 = a1;
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  id v26 = &v4[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_delegate];
  swift_unknownObjectWeakInit();
  v23[0] = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_flags;
  *(_DWORD *)&v4[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_flags] = 0;
  uint64_t v24 = OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_clientQueue;
  v23[1] = sub_1000B8610();
  uint64_t v10 = v4;
  static DispatchQoS.unspecified.getter();
  *(void *)__s = _swiftEmptyArrayStorage;
  sub_1000B9A6C((unint64_t *)&qword_1002A8530, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000992E8(&qword_1002A9000);
  sub_1000B9AB4((unint64_t *)&qword_1002A8540, &qword_1002A9000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v25);
  *(void *)&v4[v24] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  Logger.init(subsystem:category:)();
  v10[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_state] = 1;
  *(_OWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readKey] = xmmword_100240E00;
  *(_OWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey] = xmmword_100240E00;
  *(_OWORD *)&v10[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sessionKey] = xmmword_100240E00;
  uint64_t v11 = &v10[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_sharedSecret];
  uint64_t v12 = type metadata accessor for SymmetricKey();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = &v10[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_prover];
  uint64_t v14 = type metadata accessor for SPAKE2.Prover();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = &v10[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readNonce];
  memset(__s, 0, sizeof(__s));
  unsigned __int8 v33 = 8;
  memset_s(__s, 8uLL, 0, 8uLL);
  unint64_t v16 = *(unsigned int *)&__s[8] | ((unint64_t)__s[12] << 32) | ((unint64_t)__s[13] << 40) | ((unint64_t)v33 << 48);
  *(void *)uint64_t v15 = *(void *)__s;
  *((void *)v15 + 1) = v16;
  uint64_t v17 = &v10[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeNonce];
  memset(__s, 0, sizeof(__s));
  unsigned __int8 v33 = 8;
  memset_s(__s, 8uLL, 0, 8uLL);
  unint64_t v18 = *(unsigned int *)&__s[8] | ((unint64_t)__s[12] << 32) | ((unint64_t)__s[13] << 40) | ((unint64_t)v33 << 48);
  *(void *)uint64_t v17 = *(void *)__s;
  *((void *)v17 + 1) = v18;
  uint64_t v19 = v28;
  *(void *)&v10[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_role] = v27;
  *(void *)&v10[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_type] = v19;
  swift_unknownObjectWeakAssign();
  v10[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_enhancedEncryption] = v30;
  if (v19 == 3)
  {
    int v20 = 16810000;
    goto LABEL_5;
  }
  if (v19 == 4)
  {
    int v20 = 16809984;
LABEL_5:
    *(_DWORD *)&v4[v23[0]] = v20;
  }

  uint64_t v21 = (objc_class *)type metadata accessor for DKPairSetupSession();
  v31.receiver = v10;
  v31.super_class = v21;
  return [super init];
}

unint64_t sub_1000B8610()
{
  unint64_t result = qword_1002A7F50;
  if (!qword_1002A7F50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002A7F50);
  }
  return result;
}

unint64_t sub_1000B8650()
{
  unint64_t result = qword_1002A8FC0;
  if (!qword_1002A8FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1002A8FC0);
  }
  return result;
}

uint64_t sub_1000B86A4()
{
  return sub_1000B99E8((uint64_t (*)(void, void, void, void, void))sub_1000B4CB8);
}

uint64_t sub_1000B86D0(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    type metadata accessor for Data.RangeReference();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (unsigned char *)__DataStorage._bytes.getter();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = __DataStorage._length.getter();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      uint64_t v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = sub_1001B0CBC(v4, v8);
      swift_release();
      return v3;
    }
    unint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000B87B8(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_1001B0CBC(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_1000B886C()
{
  uint64_t v0 = type metadata accessor for Data.Deallocator();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = Data._bridgeToObjectiveC()().super.isa;
  [(objc_class *)v4 bytes];
  [(objc_class *)v4 length];
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  uint64_t v5 = v4;
  [(objc_class *)v5 bytes];
  TLV8GetOrCopyCoalesced();
  uint64_t v6 = v13;
  if (v13)
  {
    uint64_t v7 = v12;
    (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for Data.Deallocator.free(_:), v0);
    Data.Deallocator._deallocator.getter();
    if (v7)
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      swift_retain();
      uint64_t v8 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      uint64_t v9 = sub_1000B86D0(v8, v7);
      swift_release();
    }
    else
    {
      uint64_t v10 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter();
      v10(v6, 0);
      swift_release();
      swift_release();
      uint64_t v9 = 0;
    }
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  else
  {
    if (!v14)
    {

      return 0;
    }
    uint64_t v9 = sub_1000B87B8(v14, v12);
  }

  return v9;
}

uint64_t sub_1000B8AFC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  static String.Encoding.utf8.getter();
  uint64_t v9 = String.data(using:allowLossyConversion:)();
  unint64_t v11 = v10;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v11 >> 60 == 15) {
    goto LABEL_20;
  }
  v12.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A9990(v9, v11);
  uint64_t v13 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_16;
      }
      uint64_t v13 = HIDWORD(a1) - (int)a1;
LABEL_7:
      sub_1000A618C(a1, a2);
LABEL_8:
      if (__OFSUB__(v13, 16))
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x1000B8D78);
      }
      sub_100152FDC(v13 - 16, a1, a2, &v26);
      uint64_t v16 = v26;
      unint64_t v17 = v27;
      sub_1000A618C(a1, a2);
      sub_1001A6570(16, a1, a2, &v26);
      uint64_t v18 = v26;
      unint64_t v19 = v27;
      uint64_t v20 = 0;
      switch(v17 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v16), v16)) {
            goto LABEL_18;
          }
          uint64_t v20 = HIDWORD(v16) - (int)v16;
LABEL_14:
          uint64_t v26 = sub_1000B805C(v20);
          unint64_t v27 = v23;
          sub_1000B60F0(&v26, v8.super.isa, v12.super.isa, v16, v17, v18, v19);
          return v26;
        case 2uLL:
          uint64_t v22 = *(void *)(v16 + 16);
          uint64_t v21 = *(void *)(v16 + 24);
          uint64_t v20 = v21 - v22;
          if (!__OFSUB__(v21, v22)) {
            goto LABEL_14;
          }
          goto LABEL_19;
        case 3uLL:
          goto LABEL_14;
        default:
          uint64_t v20 = BYTE6(v17);
          goto LABEL_14;
      }
    case 2uLL:
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 24);
      uint64_t v13 = v14 - v15;
      if (!__OFSUB__(v14, v15)) {
        goto LABEL_7;
      }
      goto LABEL_17;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v13 = BYTE6(a2);
      goto LABEL_8;
  }
}

uint64_t sub_1000B8D98(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSData v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  NSData v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = *(void *)&v2[OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_clientQueue];
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1000B9E24;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001468DC;
  aBlock[3] = &unk_100275BC8;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v2;
  sub_1000A997C(a1, a2);
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_1000B9A6C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_1000B905C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_9;
  }
  uint64_t result = __DataStorage._offset.getter();
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (__OFSUB__(a2, a1))
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  __DataStorage._length.getter();
  uint64_t result = sub_1000B55DC(a4, a5, a6, a7, a8, a9, &v20, a10, a11);
  if (!v11) {
    return v20;
  }
  return result;
}

unint64_t sub_1000B913C(uint64_t *a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  uint64_t v10 = *a1;
  unint64_t v9 = a1[1];
  unint64_t v11 = a7;
  uint64_t v12 = a6;
  switch(v9 >> 62)
  {
    case 1uLL:
      uint64_t v25 = v9 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_100240D00;
      id v60 = a2;
      id v26 = a3;
      sub_1000A997C(a4, a5);
      sub_1000A618C(v12, v11);
      sub_1000A618C(a8, a9);
      uint64_t v62 = v12;
      uint64_t v27 = v12;
      uint64_t v28 = v25;
      sub_1000A618C(v27, v11);
      sub_1000A618C(a8, a9);
      id v54 = v60;
      id v56 = v26;
      sub_1000A997C(a4, a5);
      uint64_t v29 = v10 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_17;
      }
      if (v29 < (int)v10) {
        goto LABEL_26;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v10, __DataStorage._offset.getter())) {
        goto LABEL_27;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v49 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v28 = v49;
LABEL_17:
      if (v29 < (int)v10)
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
      }
      sub_1000A618C(v62, v11);
      sub_1000A618C(a8, a9);
      id v55 = v54;
      id v50 = v56;
      sub_1000A997C(a4, a5);
      uint64_t v35 = v62;
      uint64_t v58 = v28;
      uint64_t v51 = sub_1000B905C((int)v10, v29, v28, v55, (uint64_t)v50, a4, a5, v62, v11, a8, a9);
      if (v69)
      {
        unint64_t v19 = a8;
        sub_1000A6240(a8, a9);
        sub_1000A6240(v62, v11);
        sub_1000A9990(a4, a5);

        sub_1000A9990(a4, a5);
        sub_1000A6240(v62, v11);
        sub_1000A6240(a8, a9);
        *a1 = v10;
        a1[1] = v28 | 0x4000000000000000;
        goto LABEL_20;
      }
      unint64_t v52 = v51;
      sub_1000A6240(a8, a9);
      sub_1000A6240(v62, v11);
      sub_1000A9990(a4, a5);

      sub_1000A9990(a4, a5);
      sub_1000A6240(v62, v11);
      sub_1000A6240(a8, a9);
      *a1 = v10;
      a1[1] = v58 | 0x4000000000000000;
      unint64_t v19 = v52;
      goto LABEL_23;
    case 2uLL:
      *(void *)&long long v74 = *a1;
      *((void *)&v74 + 1) = v9 & 0x3FFFFFFFFFFFFFFFLL;
      id v30 = a2;
      id v31 = a3;
      sub_1000A997C(a4, a5);
      sub_1000A618C(v12, v11);
      sub_1000A618C(a8, a9);
      sub_1000A618C(v12, v11);
      sub_1000A618C(a8, a9);
      id v32 = v30;
      uint64_t v33 = a4;
      id v34 = v32;
      uint64_t v35 = v12;
      uint64_t v36 = v33;
      id v57 = v31;
      sub_1000A997C(v33, a5);
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v63 = *(void *)(v10 + 16);
      uint64_t v61 = *(void *)(v10 + 24);
      sub_1000A618C(v35, v11);
      sub_1000A618C(a8, a9);
      id v37 = v34;
      id v38 = v57;
      sub_1000A997C(v33, a5);
      uint64_t v39 = v63;
      uint64_t v64 = *((void *)&v74 + 1);
      uint64_t v40 = sub_1000B905C(v39, v61, *((uint64_t *)&v74 + 1), v37, (uint64_t)v38, v33, a5, v35, v11, a8, a9);
      if (!v69)
      {
        unint64_t v19 = v40;
        sub_1000A6240(a8, a9);
        sub_1000A6240(v35, v11);
        sub_1000A9990(v36, a5);

        sub_1000A9990(v36, a5);
        sub_1000A6240(v35, v11);
        sub_1000A6240(a8, a9);
        *a1 = v10;
        a1[1] = v64 | 0x8000000000000000;
        a4 = v36;
        goto LABEL_23;
      }
      unint64_t v19 = a8;
      sub_1000A6240(a8, a9);
      sub_1000A6240(v35, v11);
      sub_1000A9990(v36, a5);

      sub_1000A9990(v36, a5);
      sub_1000A6240(v35, v11);
      sub_1000A6240(a8, a9);
      *a1 = v10;
      a1[1] = v64 | 0x8000000000000000;
      a4 = v36;
LABEL_20:
      uint64_t v12 = v35;
      goto LABEL_21;
    case 3uLL:
      *(void *)((char *)&v74 + 7) = 0;
      *(void *)&long long v74 = 0;
      sub_1000A618C(a6, a7);
      sub_1000A618C(a8, a9);
      sub_1000A618C(a8, a9);
      unint64_t v19 = a2;
      id v41 = a3;
      sub_1000A997C(a4, a5);
      sub_1000B55DC((id)v19, (uint64_t)v41, a4, a5, v12, v11, &v73, a8, a9);
      if (v69)
      {
        sub_1000A6240(a8, a9);
        goto LABEL_21;
      }
      sub_1000A6240(a8, a9);
      uint64_t v35 = v12;
      unint64_t v19 = v73;
      goto LABEL_23;
    default:
      *(void *)&long long v74 = *a1;
      WORD4(v74) = v9;
      BYTE10(v74) = BYTE2(v9);
      BYTE11(v74) = BYTE3(v9);
      BYTE12(v74) = BYTE4(v9);
      BYTE13(v74) = BYTE5(v9);
      BYTE14(v74) = BYTE6(v9);
      sub_1000A618C(a6, a7);
      sub_1000A618C(a8, a9);
      sub_1000A618C(a8, a9);
      id v16 = a2;
      uint64_t v17 = a4;
      id v18 = a3;
      sub_1000A997C(v17, a5);
      unint64_t v19 = v17;
      unint64_t v59 = a5;
      unint64_t v65 = v11;
      sub_1000B55DC(v16, (uint64_t)v18, v17, a5, v12, v11, &v73, a8, a9);
      if (v69)
      {
        uint64_t v20 = v74;
        uint64_t v21 = DWORD2(v74);
        uint64_t v22 = BYTE12(v74);
        uint64_t v23 = BYTE13(v74);
        uint64_t v24 = BYTE14(v74);
        sub_1000A6240(a8, a9);
        *a1 = v20;
        a1[1] = v21 | (v22 << 32) | (v23 << 40) | (v24 << 48);
        a5 = v59;
        a4 = v19;
LABEL_21:

        sub_1000A9990(a4, a5);
        sub_1000A6240(v12, v11);
        sub_1000A6240(a8, a9);
      }
      else
      {
        unint64_t v42 = v73;
        uint64_t v43 = v74;
        uint64_t v44 = DWORD2(v74);
        uint64_t v45 = BYTE12(v74);
        uint64_t v46 = BYTE13(v74);
        uint64_t v47 = BYTE14(v74);
        sub_1000A6240(a8, a9);
        uint64_t v48 = v44 | (v45 << 32) | (v46 << 40) | (v47 << 48);
        unint64_t v11 = v65;
        *a1 = v43;
        a1[1] = v48;
        uint64_t v35 = v12;
        a4 = v19;
        unint64_t v19 = v42;
LABEL_23:

        sub_1000A9990(a4, a5);
        sub_1000A6240(v35, v11);
        sub_1000A6240(a8, a9);
      }
      return v19;
  }
}

unint64_t sub_1000B9968()
{
  unint64_t result = qword_1002A8550;
  if (!qword_1002A8550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8550);
  }
  return result;
}

uint64_t sub_1000B99BC()
{
  return sub_1000B99E8((uint64_t (*)(void, void, void, void, void))sub_1000B4638);
}

uint64_t sub_1000B99E8(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1000B9A14()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B9A4C()
{
  sub_1000B3B30(*(void *)(v0 + 16));
}

uint64_t sub_1000B9A54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B9A64()
{
  return swift_release();
}

uint64_t sub_1000B9A6C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B9AB4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100099D14(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000B9B04(uint64_t a1, uint64_t a2)
{
  return sub_1000B40F8(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), &OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_writeKey);
}

uint64_t sub_1000B9B2C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = 0;
  return result;
}

uint64_t sub_1000B9B6C(uint64_t a1, uint64_t a2)
{
  return sub_1000B40F8(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), &OBJC_IVAR____TtC14dockaccessoryd18DKPairSetupSession_readKey);
}

uint64_t sub_1000B9B94(uint64_t a1, uint64_t a2)
{
  return sub_1000B30C4(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1000B9BC8(uint64_t a1, uint64_t a2)
{
  return sub_1000B1A34(a1, a2, *(void **)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1000B9BD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000992E8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1000B9C38(uint64_t a1, uint64_t a2)
{
  sub_1000AFE7C(a1, a2, *(char **)(v2 + 16), *(void **)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1000B9C44(unsigned char *a1, uint64_t a2)
{
  return sub_1000AFBF4(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000B9C4C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000992E8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000B9CB0()
{
  sub_1000A6240(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B9CF0(uint64_t a1, unint64_t a2)
{
  return sub_1000AC628(a1, a2, *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1000B9D1C()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1 >> 60 != 15) {
    sub_1000A6240(*(void *)(v0 + 16), v1);
  }

  sub_1000A6240(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return _swift_deallocObject(v0, 56, 7);
}

void *sub_1000B9D74()
{
  return sub_1000AC908(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_1000B9D84()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000B9DC4()
{
  sub_1000ABB98(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *sub_1000B9DCC()
{
  return sub_1000AB690(*(void *)(v0 + 16));
}

uint64_t sub_1000B9DD4()
{
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 60 != 15) {
    sub_1000A6240(*(void *)(v0 + 24), v1);
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000B9E24()
{
  sub_1000B3274(*(unsigned char **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000B9E30@<X0>(BOOL *a1@<X8>)
{
  return sub_1000B4358(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000B9E4C(uint64_t a1)
{
  return a1;
}

uint64_t getEnumTagSinglePayload for PairSetupError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PairSetupError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B9FD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *sub_1000B9FF8(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PairSetupError()
{
  return &type metadata for PairSetupError;
}

unint64_t sub_1000BA014()
{
  unint64_t result = qword_1002A85A0;
  if (!qword_1002A85A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A85A0);
  }
  return result;
}

uint64_t sub_1000BA09C@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000B9B2C(a1);
}

uint64_t sub_1000BA0B8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002A8610);
  sub_100096F64(v0, (uint64_t)qword_1002A8610);
  return Logger.init(subsystem:category:)();
}

id sub_1000BA13C()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unsigned int v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = &v0[OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger];
  unsigned int v6 = v0;
  Logger.init(subsystem:category:)();
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, v5, v1);
  BOOL v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "camera capture interface open", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v10 = (objc_class *)type metadata accessor for dockCameraCaptureHandler();
  v12.receiver = v6;
  v12.super_class = v10;
  return [super init];
}

void sub_1000BA420(void *a1, int a2, void *a3, void *aBlock, void (*a5)(id, id, void *))
{
  os_log_type_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(v9, v10, v8);
  _Block_release(v8);
  _Block_release(v8);
}

void sub_1000BA504(void *a1, int a2, void *a3, void *a4, void *aBlock, NSObject *a6, const char *a7, uint64_t a8)
{
  uint64_t v14 = _Block_copy(aBlock);
  _Block_copy(v14);
  id v15 = a3;
  id v16 = a4;
  id v17 = a1;
  sub_1000BD400(a3, a4, (uint64_t)v17, (uint64_t)v14, a6, a7, a8);
  _Block_release(v14);
  _Block_release(v14);
}

void sub_1000BA5F8(void *a1, int a2, void *aBlock, void *a4)
{
  unsigned int v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  sub_1000BE250((uint64_t)v6, a4);
  _Block_release(v6);
  _Block_release(v6);
}

void sub_1000BA71C(void *a1, int a2, void *aBlock, void (*a4)(void *))
{
  unsigned int v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4(v6);
  _Block_release(v6);
  _Block_release(v6);
}

id sub_1000BA798()
{
  return sub_1000BACC4(0, type metadata accessor for dockCameraCaptureHandler);
}

uint64_t sub_1000BA820()
{
  return type metadata accessor for dockCameraCaptureHandler();
}

uint64_t type metadata accessor for dockCameraCaptureHandler()
{
  uint64_t result = qword_1002A8650;
  if (!qword_1002A8650) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000BA874()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_1000BA904(int a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7B48 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100096F64(v10, (uint64_t)qword_1002A8610);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_bridgeObjectRetain_n();
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    v23[0] = a5;
    uint64_t v18 = v17;
    uint64_t v19 = swift_slowAlloc();
    v23[1] = a4;
    uint64_t v24 = v19;
    *(_DWORD *)uint64_t v18 = 67109378;
    LODWORD(v25) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + _Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    uint64_t v25 = a2;
    uint64_t v26 = a3;
    swift_bridgeObjectRetain();
    sub_1000992E8((uint64_t *)&unk_1002A82C0);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v25 = sub_1000993AC(v20, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v23[0], (uint8_t *)v18, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  sub_1001A1514(Strong);
}

id sub_1000BACAC(uint64_t a1)
{
  return sub_1000BACC4(a1, type metadata accessor for CameraCaptureServiceDelegate);
}

id sub_1000BACC4(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t type metadata accessor for CameraCaptureServiceDelegate()
{
  return self;
}

uint64_t sub_1000BAD20(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a3;
  uint64_t v28 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  id v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1002B1628;
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  uint64_t v13 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v13 + 4);
  swift_release();
  uint64_t v14 = (void **)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking);
  swift_beginAccess();
  id v15 = a1;
  int v16 = sub_100183950(v9, v11, *v14) ^ 1;
  uint64_t v17 = *(os_unfair_lock_s **)(v8 + v12);
  swift_retain();
  os_unfair_lock_unlock(v17 + 4);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v27 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v28);
  uint64_t v25 = v15;
  uint64_t v18 = v15;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 138412546;
    uint64_t v29 = v18;
    uint64_t v23 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v22 = v25;

    *(_WORD *)(v21 + 12) = 1024;
    LODWORD(v29) = v16 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "app %@ tracking enabled: %{BOOL}d", (uint8_t *)v21, 0x12u);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v19 = v18;
  }

  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v28);
  return (*(uint64_t (**)(uint64_t, void, void))(v26 + 16))(v26, v16 & 1, 0);
}

void sub_1000BB05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v4 = type metadata accessor for Errors();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (id *)((char *)&v26 - v9);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [self currentConnection];
  if (v15)
  {
    int v16 = v15;
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    [v16 processIdentifier];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;
    id v26 = v16;
    sub_1001A12A0(v17, v19, v16);
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t, void))(v27 + 16))(v27, 1, 0);
    id v20 = v26;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v11);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed fetching current NSXPCConnection, cannot construct client", v23, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    void *v10 = 0xD000000000000017;
    v10[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v5 + 104))(v10, enum case for Errors.XPCNil(_:), v4);
    (*(void (**)(char *, void *, uint64_t))(v5 + 16))(v8, v10, v4);
    sub_1000BF170((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v24, v8, v4);
    uint64_t v25 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v27 + 16))(v27, 0, v25);

    (*(void (**)(void *, uint64_t))(v5 + 8))(v10, v4);
    swift_errorRelease();
  }
}

void sub_1000BB478(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a4;
  LODWORD(isa) = a2;
  uint64_t v6 = type metadata accessor for Errors();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&isa - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (Class *)((char *)&isa - v11);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  int v16 = (char *)&isa - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [self currentConnection];
  if (v17)
  {
    uint64_t v18 = v17;
    int v19 = [v17 processIdentifier];
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v20 = CameraSessionInformation.appId.getter();
    sub_10018BF8C(v19, v20, v21);
    swift_bridgeObjectRelease();
    if (isa)
    {
      sub_10018B878(a1);
      type metadata accessor for CameraSessionInformation();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, Class, void))(v30 + 16))(v30, isa, 0);

      swift_bridgeObjectRelease();
    }
    else
    {
      type metadata accessor for CameraSessionInformation();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, Class, void))(v30 + 16))(v30, isa, 0);
    }
    uint64_t v28 = isa;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v13);
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed fetching current NSXPCConnection, cannot construct client", v24, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    void *v12 = 0xD000000000000017;
    v12[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v12, enum case for Errors.XPCNil(_:), v6);
    (*(void (**)(char *, void *, uint64_t))(v7 + 16))(v10, v12, v6);
    sub_1000BF170((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v25, v10, v6);
    id v26 = (void *)_convertErrorToNSError(_:)();
    type metadata accessor for CameraSessionInformation();
    Class v27 = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, void *))(v30 + 16))(v30, v27, v26);

    (*(void (**)(void *, uint64_t))(v7 + 8))(v12, v6);
    swift_errorRelease();
  }
}

uint64_t sub_1000BB920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a3;
  uint64_t v5 = type metadata accessor for Errors();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v38 - v10);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [self currentConnection];

  if (v16)
  {
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_1002B1628;
    uint64_t v18 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    int v19 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v19 + 4);
    swift_release();
    uint64_t v20 = *(void **)(v17 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    uint64_t v21 = *(os_unfair_lock_s **)(v17 + v18);
    id v22 = v20;
    swift_retain();
    os_unfair_lock_unlock(v21 + 4);
    swift_release();
    uint64_t v23 = v39;
    if (v20)
    {
      uint64_t v24 = (void *)dispatch thunk of DockCoreAccessory.info.getter();

      type metadata accessor for TrackingSummaryInternal();
      uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;
      uint64_t v28 = static TrackingSummaryInternal.decode(data:)();
      sub_1000A6240(v25, v27);
      if (v28)
      {
        uint64_t v29 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
        if (v29)
        {
          id v30 = v29;
          sub_1001C12F8(v28);
        }
        sub_10018C3B0(v28);
        sub_1000BC7C0((uint64_t)v24, a1, (uint64_t)sub_1000BF168, (uint64_t)&unk_100275D48, (SEL *)&selRef_trackingSummaryDataWithInfo_data_);
        (*(void (**)(uint64_t, uint64_t, void))(v23 + 16))(v23, 1, 0);

        swift_release();
      }
      else
      {
      }
    }
    id v37 = *(uint64_t (**)(uint64_t, void, void))(v23 + 16);
    return v37(v23, 0, 0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
    id v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed fetching current NSXPCConnection, cannot construct client", v33, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    void *v11 = 0xD000000000000017;
    v11[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v6 + 104))(v11, enum case for Errors.XPCNil(_:), v5);
    (*(void (**)(char *, void *, uint64_t))(v6 + 16))(v9, v11, v5);
    sub_1000BF170((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v34, v9, v5);
    uint64_t v35 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v39 + 16))(v39, 0, v35);

    (*(void (**)(void *, uint64_t))(v6 + 8))(v11, v5);
    return swift_errorRelease();
  }
}

uint64_t sub_1000BBE24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = type metadata accessor for DKCameraOrientation();
  uint64_t v48 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v47 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000992E8(&qword_1002A86A0);
  __chkstk_darwin(v6 - 8);
  id v50 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1000992E8(&qword_1002A86A8);
  __chkstk_darwin(v8 - 8);
  uint64_t v51 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CameraOrientationInternal();
  uint64_t v53 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v52 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v54 = (char *)v46 - v13;
  uint64_t v14 = type metadata accessor for UUID();
  __chkstk_darwin(v14 - 8);
  int v72 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for DKObservationType();
  uint64_t v16 = *(void *)(v71 - 8);
  uint64_t v17 = __chkstk_darwin(v71);
  unint64_t v70 = (char *)v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v69 = (char *)v46 - v19;
  uint64_t v20 = type metadata accessor for TrackedSubjectTypeInternal();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  id v68 = (char *)v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)v46 - v24;
  unint64_t v26 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v74 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t result = dispatch thunk of DKIntelligentTrackingState.trackedPeople.getter();
  if (result) {
    unint64_t v26 = result;
  }
  if (v26 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v28) {
      goto LABEL_5;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v28) {
    goto LABEL_20;
  }
LABEL_5:
  if (v28 < 1)
  {
    __break(1u);
    return result;
  }
  v46[0] = v10;
  v46[1] = a1;
  void v46[2] = v4;
  uint64_t v29 = 0;
  unint64_t v63 = v26 & 0xC000000000000001;
  unsigned int v62 = enum case for DKObservationType.Object(_:);
  id v60 = (void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v61 = (void (**)(char *, void, uint64_t))(v16 + 104);
  unsigned int v59 = enum case for TrackedSubjectTypeInternal.person(_:);
  uint64_t v58 = (void (**)(char *, uint64_t, uint64_t))(v21 + 104);
  unsigned int v57 = enum case for TrackedSubjectTypeInternal.object(_:);
  id v56 = (void (**)(char *, char *, uint64_t))(v21 + 16);
  id v55 = (void (**)(char *, uint64_t))(v21 + 8);
  int v66 = v25;
  uint64_t v67 = v20;
  uint64_t v64 = v28;
  unint64_t v65 = v26;
  do
  {
    if (v63) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
    dispatch thunk of DKProbabilityValue.variable.getter();
    swift_release();
    if (v73 >= 1)
    {
      dispatch thunk of DKPersonTrackerState.rankConfidence.getter();
      dispatch thunk of DKProbabilityValue.variable.getter();
      swift_release();
    }
    id v30 = v69;
    dispatch thunk of DKPersonTrackerState.type.getter();
    os_log_type_t v32 = v70;
    uint64_t v31 = v71;
    (*v61)(v70, v62, v71);
    char v33 = static DKObservationType.== infix(_:_:)();
    uint64_t v34 = *v60;
    (*v60)(v32, v31);
    v34(v30, v31);
    if (v33) {
      uint64_t v35 = v57;
    }
    else {
      uint64_t v35 = v59;
    }
    uint64_t v36 = v66;
    uint64_t v37 = v67;
    (*v58)(v66, v35, v67);
    dispatch thunk of DKPersonTrackerState.uuid.getter();
    (*v56)(v68, v36, v37);
    dispatch thunk of DKPersonTrackerState.rect.getter();
    dispatch thunk of DKPersonTrackerState.speakingConfidence.getter();
    dispatch thunk of DKProbabilityValue.probability.getter();
    swift_release();
    dispatch thunk of DKPersonTrackerState.lookingConfidence.getter();
    dispatch thunk of DKProbabilityValue.probability.getter();
    swift_release();
    type metadata accessor for TrackedSubjectInternal();
    swift_allocObject();
    TrackedSubjectInternal.init(identifier:type:rect:saliencyRank:speakingConfidence:lookingAtCameraConfidence:)();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    ++v29;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
    (*v55)(v36, v37);
  }
  while (v64 != v29);
  swift_bridgeObjectRelease();
  uint64_t v10 = v46[0];
LABEL_21:
  uint64_t v38 = v54;
  uint64_t v39 = (uint64_t)v50;
  dispatch thunk of DKIntelligentTrackingState.camera.getter();
  uint64_t v40 = type metadata accessor for DKCamera();
  int v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v39, 1, v40);
  uint64_t v42 = v53;
  if (v41)
  {
    sub_1000A61E4(v39, &qword_1002A86A0);
  }
  else
  {
    uint64_t v43 = v47;
    DKCamera.orientation.getter();
    sub_1000A61E4(v39, &qword_1002A86A0);
    DKCameraOrientation.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v43, v49);
  }
  uint64_t v44 = (uint64_t)v51;
  CameraOrientationInternal.init(rawValue:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v44, 1, v10) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v42 + 104))(v38, enum case for CameraOrientationInternal.unknown(_:), v10);
    sub_1000A61E4(v44, &qword_1002A86A8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v38, v44, v10);
  }
  dispatch thunk of DKIntelligentTrackingState.time.getter();
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v52, v38, v10);
  type metadata accessor for TrackingSummaryInternal();
  swift_allocObject();
  uint64_t v45 = TrackingSummaryInternal.init(time:subjects:orientation:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v38, v10);
  return v45;
}

uint64_t sub_1000BC7C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v64 = a5;
  uint64_t v56 = a4;
  uint64_t v55 = a3;
  uint64_t v63 = a2;
  uint64_t v54 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void (***)(char *, uint64_t))(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v53 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(os_unfair_lock_s **)(v52 - 8);
  __chkstk_darwin(v52);
  unint64_t v65 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7C00 != -1) {
LABEL_34:
  }
    swift_once();
  uint64_t v10 = qword_1002B1628;
  sub_1001FBCA8((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v11 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  uint64_t v12 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  swift_release();
  uint64_t v13 = (uint64_t *)(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients);
  swift_beginAccess();
  uint64_t v14 = *v13;
  uint64_t v15 = *(os_unfair_lock_s **)(v10 + v11);
  uint64_t v16 = &unk_1002B1000;
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v15 + 4);
  uint64_t v17 = v14;
  swift_release();
  int64_t v18 = 0;
  uint64_t v19 = v14 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & *(void *)(v14 + 64);
  int64_t v23 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v51 = v70;
  id v50 = v6 + 1;
  uint64_t v49 = (void (**)(char *, uint64_t))&v8[2];
  id v68 = (char *)&type metadata for Any + 8;
  uint64_t v61 = v17;
  uint64_t v62 = a1;
  int64_t v66 = v23;
  uint64_t v67 = v19;
  while (v22)
  {
    unint64_t v24 = __clz(__rbit64(v22));
    v22 &= v22 - 1;
    unint64_t v25 = v24 | (v18 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v17 + 56) + 16 * v25;
    if (*(void *)v29)
    {
      id v30 = *(void **)(v29 + 8);
      uint64_t v6 = (void (**)(char *, uint64_t))*(id *)v29;
      uint64_t v8 = v30;
      id v31 = [v6 remoteObjectProxy];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000992E8(&qword_1002A8688);
      if (swift_dynamicCast())
      {
        os_log_type_t v32 = v71;
        sub_1000BF128();
        char v33 = v8;
        uint64_t v8 = (os_unfair_lock_s *)static NSObject.== infix(_:_:)();

        if (v8)
        {
          uint64_t v34 = v16[197];
          uint64_t v35 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
          uint64_t v36 = *(os_unfair_lock_s **)(v34 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
          swift_retain();
          os_unfair_lock_lock(v36 + 4);
          swift_release();
          uint64_t v37 = *(void *)(v34 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
          if (v37)
          {
            uint64_t v38 = *(void **)(v37 + 24);
            if (v38)
            {
              v70[2] = v55;
              v70[3] = v37;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              v70[0] = sub_1001468DC;
              v70[1] = v56;
              uint64_t v39 = _Block_copy(aBlock);
              unsigned int v59 = v32;
              uint64_t v40 = v39;
              swift_retain_n();
              id v58 = v38;
              static DispatchQoS.unspecified.getter();
              uint64_t v71 = _swiftEmptyArrayStorage;
              uint64_t v57 = sub_1000BF170((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              sub_1000992E8((uint64_t *)&unk_1002A7F60);
              sub_100099CB8();
              uint64_t v60 = v35;
              int v41 = v53;
              uint64_t v42 = v54;
              dispatch thunk of SetAlgebra.init<A>(_:)();
              uint64_t v43 = v58;
              OS_dispatch_queue.async(group:qos:flags:execute:)();
              uint64_t v44 = v40;
              os_log_type_t v32 = v59;
              _Block_release(v44);

              uint64_t v45 = v41;
              uint64_t v35 = v60;
              uint64_t v46 = v42;
              uint64_t v16 = (void *)&unk_1002B1000;
              (*v50)(v45, v46);
              (*v49)(v65, v52);
              swift_release();
              swift_release();
            }
          }
          uint64_t v8 = *(os_unfair_lock_s **)(v34 + v35);
          swift_retain();
          os_unfair_lock_unlock(v8 + 4);
          swift_release();
          a1 = v62;
          [v32 *v64:v62:v63];
          swift_unknownObjectRelease();

          uint64_t v17 = v61;
        }
        else
        {
          swift_unknownObjectRelease();
        }
        int64_t v23 = v66;
        uint64_t v19 = v67;
      }
      else
      {
      }
    }
  }
  int64_t v26 = v18 + 1;
  if (__OFADD__(v18, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (v26 >= v23) {
    return swift_release();
  }
  unint64_t v27 = *(void *)(v19 + 8 * v26);
  ++v18;
  if (v27) {
    goto LABEL_21;
  }
  int64_t v18 = v26 + 1;
  if (v26 + 1 >= v23) {
    return swift_release();
  }
  unint64_t v27 = *(void *)(v19 + 8 * v18);
  if (v27) {
    goto LABEL_21;
  }
  int64_t v18 = v26 + 2;
  if (v26 + 2 >= v23) {
    return swift_release();
  }
  unint64_t v27 = *(void *)(v19 + 8 * v18);
  if (v27)
  {
LABEL_21:
    unint64_t v22 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v18 << 6);
    goto LABEL_22;
  }
  int64_t v28 = v26 + 3;
  if (v28 < v23)
  {
    unint64_t v27 = *(void *)(v19 + 8 * v28);
    if (!v27)
    {
      while (1)
      {
        int64_t v18 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          goto LABEL_33;
        }
        if (v18 >= v23) {
          return swift_release();
        }
        unint64_t v27 = *(void *)(v19 + 8 * v18);
        ++v28;
        if (v27) {
          goto LABEL_21;
        }
      }
    }
    int64_t v18 = v28;
    goto LABEL_21;
  }
  return swift_release();
}

uint64_t sub_1000BCE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v46 = a3;
  uint64_t v5 = type metadata accessor for Errors();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (uint64_t *)((char *)&v45 - v10);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [self currentConnection];

  if (v16)
  {
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_1002B1628;
    uint64_t v18 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v19 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v19 + 4);
    swift_release();
    uint64_t v20 = *(void **)(v17 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
    uint64_t v21 = *(os_unfair_lock_s **)(v17 + v18);
    id v22 = v20;
    swift_retain();
    os_unfair_lock_unlock(v21 + 4);
    swift_release();
    uint64_t v23 = v46;
    if (v20)
    {
      unint64_t v24 = (void *)dispatch thunk of DockCoreAccessory.info.getter();

      type metadata accessor for DKIntelligentTrackingState();
      uint64_t v25 = static DKIntelligentTrackingState.decode(nsdata:)();
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = qword_1002B1628;
        int64_t v28 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_idsServer);
        if (v28)
        {
          id v29 = v28;
          sub_1001C0190(v26);

          uint64_t v27 = qword_1002B1628;
        }
        uint64_t v30 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
        id v31 = *(os_unfair_lock_s **)(v27 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
        swift_retain();
        os_unfair_lock_lock(v31 + 4);
        swift_release();
        *(void *)(v27 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_lastTrackingSummaryDebug) = v26;
        swift_retain();
        swift_release();
        os_log_type_t v32 = *(os_unfair_lock_s **)(v27 + v30);
        swift_retain();
        os_unfair_lock_unlock(v32 + 4);
        swift_release();
        sub_1000BBE24(v26);
        uint64_t v33 = dispatch thunk of TrackingSummaryInternal.encode()();
        if (v34 >> 60 != 15)
        {
          uint64_t v35 = v33;
          unint64_t v36 = v34;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_1000BC7C0((uint64_t)v24, (uint64_t)isa, (uint64_t)sub_1000BF168, (uint64_t)&unk_100275D48, (SEL *)&selRef_trackingSummaryDataWithInfo_data_);

          sub_1000A9990(v35, v36);
        }
        sub_1000BC7C0((uint64_t)v24, a1, (uint64_t)sub_1000BF168, (uint64_t)&unk_100275D70, (SEL *)&selRef_trackingSummaryDataDebugWithInfo_data_);
        (*(void (**)(uint64_t, uint64_t, void))(v23 + 16))(v23, 1, 0);

        swift_release();
        swift_release();
      }
      else
      {
      }
    }
    uint64_t v44 = *(uint64_t (**)(uint64_t, void, void))(v23 + 16);
    return v44(v23, 0, 0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed fetching current NSXPCConnection, cannot construct client", v40, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    void *v11 = 0xD000000000000017;
    v11[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v6 + 104))(v11, enum case for Errors.XPCNil(_:), v5);
    (*(void (**)(char *, void *, uint64_t))(v6 + 16))(v9, v11, v5);
    sub_1000BF170((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v41, v9, v5);
    uint64_t v42 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v46 + 16))(v46, 0, v42);

    (*(void (**)(void *, uint64_t))(v6 + 8))(v11, v5);
    return swift_errorRelease();
  }
}

void sub_1000BD400(void *a1, void *a2, uint64_t a3, uint64_t a4, NSObject *a5, const char *a6, uint64_t a7)
{
  NSData v95 = (char *)a6;
  uint64_t v96 = a7;
  uint64_t v97 = a5;
  uint64_t v105 = a4;
  id v99 = a2;
  int v101 = a1;
  uint64_t v102 = type metadata accessor for Errors();
  uint64_t v104 = *(void (***)(char *, void, uint64_t))(v102 - 8);
  uint64_t v8 = __chkstk_darwin(v102);
  uint64_t v103 = (char *)v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v94 - v10;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  id v16 = (char *)v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)v94 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  id v22 = (char *)v94 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)v94 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)v94 - v26;
  id v28 = [self currentConnection];
  if (!v28)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v27, a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Failed fetching current NSXPCConnection, cannot construct client", v51, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v12);
    *(void *)uint64_t v11 = 0xD000000000000017;
    *((void *)v11 + 1) = 0x8000000100235620;
    uint64_t v52 = v104;
    uint64_t v53 = v102;
    v104[13](v11, enum case for Errors.XPCNil(_:), v102);
    uint64_t v54 = v103;
    ((void (**)(char *, char *, uint64_t))v52)[2](v103, v11, v53);
    sub_1000BF170((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    ((void (**)(char *, char *, uint64_t))v52)[4](v55, v54, v53);
    uint64_t v56 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v105 + 16))(v105, 0, v56);

    goto LABEL_21;
  }
  id v29 = v28;
  uint64_t v100 = v13;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v98 = v29;
  uint64_t v30 = sub_10019AE8C(v29);
  os_log_type_t v32 = v101;
  if (!v31)
  {
    uint64_t v57 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v25, a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
    id v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Failed fetching App ID from connection", v60, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v57 + 8))(v25, v12);
    *(void *)uint64_t v11 = 0xD000000000000026;
    *((void *)v11 + 1) = 0x8000000100235640;
    uint64_t v61 = (unsigned int *)&enum case for Errors.NotFound(_:);
    goto LABEL_19;
  }
  unint64_t v33 = v31;
  if (!v101)
  {
    swift_bridgeObjectRelease();
    uint64_t v62 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v22, a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      unint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "No appID, can't lookup completion", v65, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v62 + 8))(v22, v12);
    strcpy(v11, "missing appID");
    *((_WORD *)v11 + 7) = -4864;
    uint64_t v61 = (unsigned int *)&enum case for Errors.InvalidParameter(_:);
LABEL_19:
    uint64_t v52 = v104;
    uint64_t v53 = v102;
    v104[13](v11, *v61, v102);
    int64_t v66 = v103;
    ((void (**)(char *, char *, uint64_t))v52)[2](v103, v11, v53);
    sub_1000BF170((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    ((void (**)(char *, char *, uint64_t))v52)[4](v67, v66, v53);
    id v68 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v105 + 16))(v105, 0, v68);
LABEL_20:

LABEL_21:
    ((void (*)(char *, uint64_t))v52[1])(v11, v53);
    swift_errorRelease();
    return;
  }
  v94[0] = v30;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v36 = v35;
  id v37 = v32;
  uint64_t v38 = ((uint64_t (*)(uint64_t, uint64_t))v97)(v34, v36);
  v94[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v97 = v38;
  if (!v38)
  {
    uint64_t v69 = a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger;
    uint64_t v70 = v100;
    uint64_t v71 = v16;
    int v72 = v16;
    uint64_t v73 = v12;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v72, v69, v12);
    id v74 = v37;
    swift_bridgeObjectRetain();
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = swift_slowAlloc();
      NSData v95 = (char *)swift_slowAlloc();
      uint64_t v97 = swift_slowAlloc();
      uint64_t v107 = v97;
      *(_DWORD *)uint64_t v77 = 136315394;
      id v99 = v71;
      swift_bridgeObjectRetain();
      uint64_t v106 = sub_1000993AC(v94[0], v33, (uint64_t *)&v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v77 + 12) = 2112;
      uint64_t v106 = (uint64_t)v74;
      id v78 = v74;
      uint64_t v96 = v73;
      id v79 = v74;
      id v80 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)NSData v95 = v101;

      id v74 = v79;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Client %s responded but no completion exists for appID %@", (uint8_t *)v77, 0x16u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(id, uint64_t))(v70 + 8))(v99, v96);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(void *, uint64_t))(v70 + 8))(v71, v73);
    }
    strcpy(v11, "no completion");
    *((_WORD *)v11 + 7) = -4864;
    uint64_t v52 = v104;
    uint64_t v53 = v102;
    v104[13](v11, enum case for Errors.NotFound(_:), v102);
    unint64_t v82 = v103;
    ((void (**)(char *, char *, uint64_t))v52)[2](v103, v11, v53);
    sub_1000BF170((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    ((void (**)(char *, char *, uint64_t))v52)[4](v83, v82, v53);
    id v68 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v105 + 16))(v105, 0, v68);

    goto LABEL_20;
  }
  uint64_t v104 = (void (**)(char *, void, uint64_t))v37;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, void))(v105 + 16))(v105, 1, 0);
  uint64_t v40 = v100;
  uint64_t v41 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v19, a3 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v12);
  id v42 = v99;
  uint64_t v43 = v99;
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 138412290;
    id v42 = v99;
    if (v99)
    {
      uint64_t v107 = v43;
      uint64_t v48 = v43;
      id v42 = v99;
    }
    else
    {
      uint64_t v107 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v81 = v98;
    void *v47 = v42;

    _os_log_impl((void *)&_mh_execute_header, v44, v45, v95, v46, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v41 = v12;
    uint64_t v40 = v100;
  }
  else
  {

    uint64_t v44 = v43;
    id v81 = v98;
  }

  (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v41);
  uint64_t v84 = (uint64_t)v97;
  ((void (*)(BOOL, id))v97)(v42 == 0, v42);
  uint64_t v85 = qword_1002B1628;
  uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v88 = v87;
  uint64_t v89 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  unint64_t v90 = *(os_unfair_lock_s **)(v85 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v90 + 4);
  swift_release();
  swift_beginAccess();
  uint64_t v91 = sub_1001ED1FC(v86, v88);
  swift_endAccess();
  uint64_t v92 = v104;
  if (v91) {
    sub_1000BF118(v91);
  }
  unint64_t v93 = *(os_unfair_lock_s **)(v85 + v89);
  swift_retain();
  os_unfair_lock_unlock(v93 + 4);
  swift_bridgeObjectRelease();
  swift_release();
  sub_1000BF118(v84);
}

void sub_1000BE130(uint64_t a1)
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1002B1628;
  uint64_t v3 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v4 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  swift_beginAccess();
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + v3);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v5 + 4);
  swift_release();
  type metadata accessor for DockCoreAccessory();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, void))(a1 + 16))(a1, isa, 0);
  swift_bridgeObjectRelease();
}

void sub_1000BE250(uint64_t a1, void *a2)
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v4 = qword_1002B1628;
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v6 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v6 + 4);
  swift_release();
  uint64_t v7 = *(void **)(v4 + *a2);
  uint64_t v8 = *(os_unfair_lock_s **)(v4 + v5);
  id v9 = v7;
  swift_retain();
  os_unfair_lock_unlock(v8 + 4);
  swift_release();
  (*(void (**)(uint64_t, id, void))(a1 + 16))(a1, v9, 0);
}

uint64_t sub_1000BE348(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Errors();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v21 - v9);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1 + OBJC_IVAR____TtC14dockaccessoryd24dockCameraCaptureHandler_logger, v11);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    id v22 = v8;
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "getAccessoryDiagnostics unsupported on entitled interface", v17, 2u);
    uint64_t v8 = v22;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  void *v10 = 0xD000000000000021;
  v10[1] = 0x80000001002355F0;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v10, enum case for Errors.OperationNotSupported(_:), v4);
  (*(void (**)(char *, void *, uint64_t))(v5 + 16))(v8, v10, v4);
  sub_1000BF170((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
  swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v18, v8, v4);
  uint64_t v19 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, void *))(a2 + 16))(a2, 0, v19);

  (*(void (**)(void *, uint64_t))(v5 + 8))(v10, v4);
  return swift_errorRelease();
}

uint64_t sub_1000BE678(uint64_t a1)
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1002B1628;
  uint64_t v3 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v4 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState);
  uint64_t v6 = *(os_unfair_lock_s **)(v2 + v3);
  swift_retain();
  os_unfair_lock_unlock(v6 + 4);
  swift_release();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 16);

  return v7(a1, v5, 0);
}

uint64_t sub_1000BE758(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v48 - v7;
  unsigned int v59 = [a1 processIdentifier];
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [a1 valueForEntitlement:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v68 = 0u;
    long long v69 = 0u;
  }
  sub_1000A5BE8((uint64_t)&v68, (uint64_t)&aBlock);
  if (v65)
  {
    int v11 = swift_dynamicCast();
    uint64_t v12 = v60;
    if (!v11) {
      uint64_t v12 = 0;
    }
    uint64_t v54 = v12;
    if (v11) {
      uint64_t v13 = v61;
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&aBlock, &qword_1002AA5F0);
    uint64_t v54 = 0;
    uint64_t v13 = 0;
  }
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v58 = v6;
  uint64_t v14 = sub_10019AE8C(a1);
  uint64_t v16 = v15;
  if (qword_1002A7B48 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_100096F64(v2, (uint64_t)qword_1002A8610);
  uint64_t v18 = *(void (**)(id, uint64_t, uint64_t))(v3 + 16);
  uint64_t v56 = v17;
  uint64_t v57 = v3 + 16;
  uint64_t v55 = v18;
  ((void (*)(char *))v18)(v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  uint64_t v19 = Logger.logObject.getter();
  uint64_t v20 = v3;
  os_log_type_t v21 = static os_log_type_t.default.getter();
  id v22 = v8;
  if (os_log_type_enabled(v19, v21))
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v53 = a1;
    uint64_t v50 = v24;
    *(void *)&long long v68 = v24;
    *(_DWORD *)uint64_t v23 = 67109634;
    LODWORD(aBlock) = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + _Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    uint64_t v51 = v22;
    uint64_t aBlock = v54;
    uint64_t v63 = v13;
    swift_bridgeObjectRetain();
    sub_1000992E8((uint64_t *)&unk_1002A82C0);
    uint64_t v49 = v20;
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v52 = v2;
    uint64_t aBlock = sub_1000993AC(v25, v26, (uint64_t *)&v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 1_Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    uint64_t aBlock = v14;
    uint64_t v63 = v16;
    swift_bridgeObjectRetain();
    uint64_t v27 = String.init<A>(describing:)();
    uint64_t aBlock = sub_1000993AC(v27, v28, (uint64_t *)&v68);
    uint64_t v2 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v21, "new connection from pid %d, appID entitlement %s, appID %s", (uint8_t *)v23, 0x1Cu);
    swift_arrayDestroy();
    a1 = v53;
    swift_slowDealloc();
    swift_slowDealloc();

    id v29 = *(void (**)(char *, uint64_t))(v49 + 8);
    v29(v51, v2);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    id v29 = *(void (**)(char *, uint64_t))(v20 + 8);
    v29(v22, v2);
  }
  id v30 = v58;
  NSString v31 = String._bridgeToObjectiveC()();
  id v32 = [a1 valueForEntitlement:v31];

  if (v32)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v68 = 0u;
    long long v69 = 0u;
  }
  sub_1000A5BE8((uint64_t)&v68, (uint64_t)&aBlock);
  if (v65)
  {
    if (swift_dynamicCast() & 1) != 0 && (v60)
    {
      unint64_t v33 = self;
      id v58 = [v33 interfaceWithProtocol:&OBJC_PROTOCOL____TtP11DockKitCore31DockDaemonCameraCaptureProtocol_];
      uint64_t v34 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v35 = swift_allocObject();
      unsigned int v36 = v59;
      *(_DWORD *)(v35 + 16) = v59;
      uint64_t v37 = v54;
      *(void *)(v35 + 24) = v54;
      *(void *)(v35 + 32) = v13;
      *(void *)(v35 + 40) = v34;
      int64_t v66 = sub_1000BF0A4;
      uint64_t v67 = v35;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v63 = 1107296256;
      os_log_type_t v64 = sub_1001468DC;
      unint64_t v65 = &unk_100275CD0;
      uint64_t v38 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      [a1 setInvalidationHandler:v38];
      _Block_release(v38);
      uint64_t v39 = swift_allocObject();
      *(_DWORD *)(v39 + 16) = v36;
      *(void *)(v39 + 24) = v37;
      *(void *)(v39 + 32) = v13;
      *(void *)(v39 + 40) = v34;
      int64_t v66 = sub_1000BF0EC;
      uint64_t v67 = v39;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v63 = 1107296256;
      os_log_type_t v64 = sub_1001468DC;
      unint64_t v65 = &unk_100275D20;
      uint64_t v40 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [a1 setInterruptionHandler:v40];
      _Block_release(v40);
      uint64_t v41 = v58;
      [a1 setExportedInterface:v58];
      id v42 = [v33 interfaceWithProtocol:&OBJC_PROTOCOL____TtP11DockKitCore31DockClientCameraCaptureProtocol_];
      [a1 setRemoteObjectInterface:v42];
      id v43 = [objc_allocWithZone((Class)type metadata accessor for dockCameraCaptureHandler()) init];
      [a1 setExportedObject:v43];
      [a1 resume];
      swift_release();

      return 1;
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&aBlock, &qword_1002AA5F0);
  }
  swift_bridgeObjectRelease();
  v55(v30, v56, v2);
  os_log_type_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v47 = 67109120;
    LODWORD(aBlock) = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "process %d is not entitled for cameracapture. Add entitlements and try again", v47, 8u);
    swift_slowDealloc();
  }

  v29((char *)v30, v2);
  [a1 invalidate];
  return 0;
}

uint64_t sub_1000BF068()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000BF0A4()
{
  sub_1000BA904(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(const char **)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been invalidated");
}

uint64_t sub_1000BF0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000BF0E0()
{
  return swift_release();
}

void sub_1000BF0EC()
{
  sub_1000BA904(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(const char **)(v0 + 40), "dockaccessoryd: Debug Connection to PID %d (%s) has been interrupted");
}

uint64_t sub_1000BF118(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

unint64_t sub_1000BF128()
{
  unint64_t result = qword_1002A8690;
  if (!qword_1002A8690)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002A8690);
  }
  return result;
}

void sub_1000BF168()
{
  sub_1001067F4(v0);
}

uint64_t sub_1000BF170(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1000BF1D0()
{
  unint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket];
  if (v1) {
    [v1 close];
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for AccessoryFirmwareUpdateSession();
  return [super dealloc];
}

uint64_t sub_1000BF3C4()
{
  return type metadata accessor for AccessoryFirmwareUpdateSession();
}

uint64_t type metadata accessor for AccessoryFirmwareUpdateSession()
{
  uint64_t result = qword_1002A8728;
  if (!qword_1002A8728) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000BF418()
{
  unint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t)&v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback];
  swift_beginAccess();
  sub_1000C8CA8(v8, (uint64_t)aBlock);
  if (v25)
  {
    sub_1000A5D40((uint64_t)aBlock, (uint64_t)v21);
    sub_1000C8D10((uint64_t)aBlock);
    uint64_t v9 = v22;
    uint64_t v10 = v23;
    sub_1000A5DA4(v21, v22);
    (*(void (**)(void, uint64_t, uint64_t))(v10 + 16))(0, v9, v10);
    sub_100099BCC((uint64_t)v21);
  }
  else
  {
    sub_1000C8D10((uint64_t)aBlock);
  }
  int v11 = *(void **)(*(void *)&v1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager]
                 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController);
  uint64_t v12 = *(void **)&v1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v1;
  unint64_t v26 = sub_1000C9034;
  uint64_t v27 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  uint64_t v25 = &unk_100276150;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v11;
  id v16 = v12;
  v1;
  static DispatchQoS.unspecified.getter();
  v21[0] = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v19);
  swift_release();
  sub_1000A6750();
  uint64_t v17 = swift_allocError();
  *(void *)uint64_t v18 = 0xD000000000000033;
  *(void *)(v18 + _Block_object_dispose(&STACK[0x3D0], 8) = 0x8000000100235E20;
  *(unsigned char *)(v18 + 16) = 6;
  sub_1000C008C(v17);
  swift_errorRelease();
}

uint64_t sub_1000BF7D8(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)[a1 accessoryUnreachable:*(void *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_uarpAccessory)];
  if ((result & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v4);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      int v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "UARP accessoryUnreachable failed", v11, 2u);
      swift_slowDealloc();
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  *(unsigned char *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable) = 0;
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state)) {
    *(unsigned char *)(a2 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state) = 0;
  }
  return result;
}

uint64_t sub_1000BF97C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  os_log_type_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = *(id *)&v2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile];
  sub_100138610(a1);

  uint64_t v12 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v2;
  aBlock[4] = sub_1000C8ED8;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_1002760D8;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v12;
  id v16 = v2;
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v18);
  return swift_release();
}

uint64_t sub_1000BFC54(unsigned char *a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1000BFEFC(0, 2, 0);
  if (result != 5)
  {
    a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state] = result;
    switch((char)result)
    {
      case 1:
        sub_1000A6750();
        uint64_t v9 = swift_allocError();
        *(void *)uint64_t v10 = 0xD00000000000002DLL;
        *(void *)(v10 + _Block_object_dispose(&STACK[0x3D0], 8) = 0x8000000100235DF0;
        char v11 = 8;
        goto LABEL_7;
      case 2:
      case 4:
        uint64_t v6 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
        uint64_t v7 = (void *)swift_allocObject();
        v7[2] = 0;
        v7[3] = 0;
        void v7[4] = a1;
        uint64_t v8 = a1;
        sub_1001BC3A0((uint64_t)v4, (uint64_t)&unk_1002A8810, (uint64_t)v7);
        uint64_t result = swift_release();
        break;
      case 3:
        sub_1000A6750();
        uint64_t v9 = swift_allocError();
        *(void *)uint64_t v10 = 0xD00000000000002CLL;
        *(void *)(v10 + _Block_object_dispose(&STACK[0x3D0], 8) = 0x8000000100235DC0;
        char v11 = 9;
LABEL_7:
        *(unsigned char *)(v10 + 16) = v11;
        sub_1000C008C(v9);
        uint64_t result = swift_errorRelease();
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1000BFE6C()
{
  unint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *unint64_t v1 = v0;
  v1[1] = sub_1000A5ED8;
  return sub_1000C05A4();
}

uint64_t sub_1000BFEFC(char a1, char a2, char a3)
{
  if (a3) {
    goto LABEL_13;
  }
  if (a2 != 2)
  {
    *(unsigned char *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable) = a2 & 1;
LABEL_13:
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state)) {
      return 0;
    }
    else {
      return 5;
    }
  }
  if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable) & 1) == 0) {
    goto LABEL_13;
  }
  if (a1 == 2)
  {
    uint64_t v4 = *(void *)(*(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                   + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons);
    int v9 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state);
    if (v9 == 4) {
      unsigned int v6 = 5;
    }
    else {
      unsigned int v6 = 4;
    }
    if (v9 == 3) {
      unsigned int v7 = 5;
    }
    else {
      unsigned int v7 = 3;
    }
    goto LABEL_22;
  }
  if (a1 == 1)
  {
    uint64_t v4 = *(void *)(*(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                   + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons);
    int v5 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state);
    if (v5 == 2) {
      unsigned int v6 = 5;
    }
    else {
      unsigned int v6 = 2;
    }
    if (v5 == 1) {
      unsigned int v7 = 5;
    }
    else {
      unsigned int v7 = 1;
    }
LABEL_22:
    if (v4) {
      return v7;
    }
    else {
      return v6;
    }
  }
  uint64_t result = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state);
  switch(*(unsigned char *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state))
  {
    case 1:
    case 2:
      BOOL v10 = *(void *)(*(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                      + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons) == 0;
      unsigned int v11 = 1;
      goto LABEL_28;
    case 3:
    case 4:
      BOOL v10 = *(void *)(*(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                      + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons) == 0;
      unsigned int v11 = 3;
LABEL_28:
      if (v10) {
        uint64_t result = v11 + 1;
      }
      else {
        uint64_t result = v11;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000C008C(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  swift_release();
  int v5 = *(void **)(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket);
  if (v5) {
    [v5 close];
  }
  unsigned int v6 = *(os_unfair_lock_s **)(v1 + v3);
  swift_retain();
  os_unfair_lock_unlock(v6 + 4);
  uint64_t result = swift_release();
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent;
  if (a1
    && (*(unsigned char *)(v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent + 8) & 1) == 0)
  {
    swift_errorRetain();
    sub_1000C1718(0, 0, a1, 0);
    uint64_t result = swift_errorRelease();
    uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent;
  }
  uint64_t v9 = v1 + v8;
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + _Block_object_dispose(&STACK[0x3D0], 8) = 1;
  return result;
}

uint64_t sub_1000C0170()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[7] = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000C025C;
  return sub_1000C05A4();
}

uint64_t sub_1000C025C()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 8);
    __asm { BRAA            X1, X16 }
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000C0398, 0, 0);
}

uint64_t sub_1000C0398()
{
  (*(void (**)(void, uint64_t, void))(v0[5] + 16))(v0[6], v0[3] + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v0[4]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Registering accessory failed with error %@", v3, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  swift_task_dealloc();
  unsigned int v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000C05A4()
{
  v1[23] = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  v1[24] = v2;
  v1[25] = *(void *)(v2 - 8);
  v1[26] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DispatchQoS();
  v1[27] = v3;
  v1[28] = *(void *)(v3 - 8);
  v1[29] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[30] = v4;
  v1[31] = *(void *)(v4 - 8);
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000C072C, 0, 0);
}

uint64_t sub_1000C072C()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  v0[34] = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + v2);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  swift_release();
  uint64_t v4 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket;
  v0[35] = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket;
  uint64_t v5 = *(void **)(v1 + v4);
  v0[36] = v5;
  uint64_t v6 = *(os_unfair_lock_s **)(v1 + v2);
  swift_unknownObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v6 + 4);
  swift_release();
  if (v5 && ![v5 isClosed])
  {
    swift_unknownObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v7 = v0[23];
    uint64_t v8 = *(void **)(*(void *)(v7 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory)
                  + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController);
    v0[37] = v8;
    if (v8)
    {
      uint64_t v9 = v0[33];
      uint64_t v10 = v0[30];
      uint64_t v11 = v0[31];
      uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger;
      v0[38] = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger;
      uint64_t v13 = v7 + v12;
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
      v0[39] = v14;
      v0[40] = (v11 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v14(v9, v13, v10);
      id v15 = v8;
      id v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Opening HDS connection to accessory", v18, 2u);
        swift_slowDealloc();
      }
      uint64_t v19 = v0[33];
      uint64_t v20 = v0[30];
      uint64_t v21 = v0[31];

      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v0[41] = v22;
      v0[42] = (v21 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v22(v19, v20);
      NSString v23 = String._bridgeToObjectiveC()();
      v0[43] = v23;
      v0[2] = v0;
      v0[7] = v0 + 21;
      v0[3] = sub_1000C0B54;
      uint64_t v24 = swift_continuation_init();
      v0[16] = _NSConcreteStackBlock;
      v0[17] = 0x40000000;
      v0[18] = sub_1000C10D8;
      v0[19] = &unk_100276048;
      v0[20] = v24;
      [v15 openStreamSocketWithApplicationProtocol:v23 completion:v0 + 16];
      return _swift_continuation_await(v0 + 2);
    }
    uint64_t v26 = type metadata accessor for Errors();
    sub_1000C8E10((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    *uint64_t v27 = 0xD00000000000001DLL;
    v27[1] = 0x8000000100235D70;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v27, enum case for Errors.CommunicationFailure(_:), v26);
    swift_willThrow();
    swift_unknownObjectRelease();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
  }
  return v25();
}

uint64_t sub_1000C0B54()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 352) = v1;
  if (v1) {
    uint64_t v2 = sub_1000C1014;
  }
  else {
    uint64_t v2 = sub_1000C0C64;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_1000C0C64()
{
  uint64_t v29 = (void (*)(uint64_t, uint64_t, uint64_t))v0[39];
  uint64_t v2 = v0[34];
  uint64_t v1 = v0[35];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[23];
  uint64_t v6 = v5 + v0[38];
  uint64_t v7 = (void *)v0[21];

  [v7 setDelegate:v5];
  uint64_t v8 = *(os_unfair_lock_s **)(v5 + v2);
  swift_unknownObjectRetain();
  swift_retain();
  os_unfair_lock_lock(v8 + 4);
  swift_release();
  *(void *)(v5 + v1) = v7;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v9 = *(os_unfair_lock_s **)(v5 + v2);
  swift_retain();
  os_unfair_lock_unlock(v9 + 4);
  swift_unknownObjectRelease();
  swift_release();
  v29(v3, v6, v4);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Opened HDS connection to accessory", v12, 2u);
    swift_slowDealloc();
  }
  uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[41];
  uint64_t v14 = v0[32];
  uint64_t v15 = v0[30];
  uint64_t v25 = v0[29];
  unint64_t v28 = (void *)v0[37];
  uint64_t v30 = v0[28];
  uint64_t v31 = v0[27];
  uint64_t v26 = v0[26];
  uint64_t v16 = v0[24];
  uint64_t v27 = v0[25];
  os_log_type_t v17 = (char *)v0[23];

  v13(v14, v15);
  uint64_t v18 = *(void **)&v17[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v17;
  v0[14] = sub_1000C8ED0;
  v0[15] = v19;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256;
  v0[12] = sub_1001468DC;
  v0[13] = &unk_100276088;
  uint64_t v20 = _Block_copy(v0 + 10);
  id v21 = v18;
  uint64_t v22 = v17;
  static DispatchQoS.unspecified.getter();
  v0[22] = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v16);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v25, v31);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v23 = (uint64_t (*)(void))v0[1];
  return v23();
}

uint64_t sub_1000C1014()
{
  uint64_t v1 = (void *)v0[43];
  uint64_t v2 = (void *)v0[37];
  swift_willThrow();
  swift_unknownObjectRelease();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000C10D8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_1000992E8(&qword_1002A8F70);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      swift_unknownObjectRetain();
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return _swift_continuation_throwingResume(a1);
  }
}

uint64_t sub_1000C119C(unsigned char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v36 - v8;
  __chkstk_darwin(v7);
  os_log_type_t v11 = (char *)v36 - v10;
  sub_1000C1660();
  uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_uarpAccessory;
  uint64_t v13 = *(void *)&a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_uarpAccessory];
  id v14 = objc_retain(*(id *)(*(void *)&a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager]
                          + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController));
  if ([v14 accessoryReachable:v13])
  {
    a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable] = 1;
    if (a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state]) {
      a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state] = 0;
    }
    uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory;
    if (*(void *)(*(void *)&a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory]
                   + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion
                   + 8))
    {
      swift_bridgeObjectRetain();
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v16 = 0;
    }
    unsigned __int8 v20 = [v14 updateProperty:4 value:v16 forAccessory:*(void *)&a1[v12]];

    id v21 = &a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger];
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    if (v20)
    {
      v22(v6, v21, v2);
      os_log_type_t v17 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v23, "Notified UARP accessory is reachable", v24, 2u);
        swift_slowDealloc();
      }
      os_log_type_t v11 = v6;
    }
    else
    {
      v22(v9, v21, v2);
      uint64_t v25 = a1;
      os_log_type_t v17 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      int v27 = v26;
      if (os_log_type_enabled(v17, v26))
      {
        uint64_t v28 = swift_slowAlloc();
        int v41 = v27;
        uint64_t v29 = v28;
        uint64_t v38 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 138412546;
        uint64_t v40 = v15;
        uint64_t v30 = *(void **)&a1[v12];
        v36[1] = v29 + 12;
        uint64_t v37 = v29 + 4;
        id v42 = v30;
        uint64_t v39 = &v43;
        id v31 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v32 = v38;
        void *v38 = v30;

        *(_WORD *)(v29 + 12) = 2112;
        uint64_t v37 = v29 + 14;
        unint64_t v33 = *(void **)(*(void *)&a1[v40] + 24);
        id v42 = v33;
        id v34 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v32[1] = v33;

        _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v41, "Failed to update UARP accessory firmware version property for accessory %@ for dock accessory %@", (uint8_t *)v29, 0x16u);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        os_log_type_t v17 = v25;
      }
      os_log_type_t v11 = v9;
    }
  }
  else
  {
    (*(void (**)(char *, unsigned char *, uint64_t))(v3 + 16))(v11, &a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v2);
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "UARP accessoryReachable failed", v19, 2u);
      swift_slowDealloc();
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
}

id sub_1000C1660()
{
  id v1 = [objc_allocWithZone((Class)HMFTimer) initWithTimeInterval:1 options:*(double *)(v0 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_maxSocketIdleDuration)];
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer);
  *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer) = v1;

  uint64_t v4 = *(void **)(v0 + v2);
  if (v4)
  {
    [v4 setDelegate:v0];
    uint64_t v4 = *(void **)(v0 + v2);
    if (v4)
    {
      [v4 setDelegateQueue:*(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue)];
      uint64_t v4 = *(void **)(v0 + v2);
    }
  }

  return [v4 resume];
}

void sub_1000C1718(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  int v58 = a4;
  uint64_t v57 = a3;
  uint64_t v62 = a1;
  uint64_t updated = type metadata accessor for DKFirmwareUpdateMetric();
  uint64_t v60 = *(void *)(updated - 8);
  uint64_t v61 = updated;
  __chkstk_darwin(updated);
  unsigned int v59 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for Date();
  uint64_t v52 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v51 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v55 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  id v14 = (char *)&v51 - v13;
  os_log_type_t v64 = v4;
  uint64_t v15 = &v4[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger];
  NSString v16 = *(void (**)(char *, unsigned char *, uint64_t))(v10 + 16);
  v16((char *)&v51 - v13, &v4[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v9);
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Sending firmware update metrics...", v19, 2u);
    swift_slowDealloc();
  }
  uint64_t v63 = a2;

  unsigned __int8 v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v56 = v9;
  uint64_t v54 = v20;
  v20(v14, v9);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v21 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory;
  uint64_t v22 = v64;
  id v23 = objc_retain(*(id *)(*(void *)&v64[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory]
                          + 24));
  sub_1001891D0(v23);
  uint64_t v25 = v24;

  if (v25)
  {
    uint64_t v26 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_firmwareUpdateInterval;
    double v27 = 0.0;
    if (*(double *)&v22[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_firmwareUpdateInterval] > 0.0)
    {
      uint64_t v28 = v51;
      static Date.now.getter();
      Date.timeIntervalSince1970.getter();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v28, v53);
    }
    if (!v22[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent + 8]) {
      double v27 = *(double *)&v22[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent];
    }
    if ((~*(void *)&v27 & 0x7FF0000000000000) != 0)
    {
      if (v27 > -1.0)
      {
        if (v27 < 1.84467441e19)
        {
          double v29 = *(double *)&v22[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_endPercent];
          if ((~*(void *)&v29 & 0x7FF0000000000000) != 0)
          {
            if (v29 > -1.0)
            {
              if (v29 < 1.84467441e19)
              {
                uint64_t v30 = *(void *)&v22[v21];
                if (*(void *)(v30 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion + 8)) {
                  unint64_t v31 = *(void *)(v30 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_firmwareVersion + 8);
                }
                else {
                  unint64_t v31 = 0xE000000000000000;
                }
                if (v63) {
                  uint64_t v40 = v62;
                }
                else {
                  uint64_t v40 = 0;
                }
                if (v63) {
                  unint64_t v41 = (unint64_t)v63;
                }
                else {
                  unint64_t v41 = 0xE000000000000000;
                }
                id v42 = *(void **)(v30 + 32);
                uint64_t v55 = (char *)v41;
                uint64_t v56 = v26;
                uint64_t v62 = v40;
                uint64_t v63 = (void *)v31;
                if (!v42)
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
LABEL_32:
                  os_log_type_t v46 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
                  DockCoreInfo.type.getter();

                  DockCoreAccessoryType.description.getter();
                  uint64_t v47 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
                  DockCoreInfo.name.getter();

                  if (v57)
                  {
                    swift_getErrorValue();
                    Error.localizedDescription.getter();
                  }
                  uint64_t v48 = v61;
                  uint64_t v49 = v59;
                  DKFirmwareUpdateMetric.init(duration:startPercent:endPercent:fromFirmwareVersion:toFirmwareVersion:hardwareVersion:make:hardwareModel:success:error:)();
                  DKFirmwareUpdateMetric.send()();

                  (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v48);
                  *(void *)&v64[v56] = 0xBFF0000000000000;
                  return;
                }
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                id v43 = [v42 primaryAccessory];
                if (v43)
                {
                  uint64_t v44 = v43;
                  id v45 = [v43 serialNumber];

                  if (v45)
                  {
                    static String._unconditionallyBridgeFromObjectiveC(_:)();
                  }
                  goto LABEL_32;
                }
LABEL_43:
                __break(1u);
                return;
              }
LABEL_42:
              __break(1u);
              goto LABEL_43;
            }
LABEL_41:
            __break(1u);
            goto LABEL_42;
          }
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v32 = v55;
  uint64_t v33 = v56;
  v16(v55, v15, v56);
  id v34 = v22;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v63 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 138412290;
    uint64_t v38 = *(void **)(*(void *)&v22[v21] + 24);
    unint64_t v65 = v38;
    id v39 = v38;
    uint64_t v33 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v63 = v38;

    _os_log_impl((void *)&_mh_execute_header, v35, v36, "No DockAccessory found in database with info %@", v37, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v32 = v55;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v35 = v34;
  }
  uint64_t v50 = v54;

  v50(v32, v33);
}

uint64_t sub_1000C1E84()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_1000C1F8C()
{
  return sub_1000C7E44("Transaction taken");
}

uint64_t sub_1000C1FAC()
{
  return sub_1000C7E44("Transaction released");
}

uint64_t sub_1000C1FCC(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v9 - 8);
  uint64_t v48 = v9;
  __chkstk_darwin(v9);
  os_log_type_t v46 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0xE000000000000000;
  uint64_t v44 = v15;
  id v45 = v2;
  uint64_t v43 = v12;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, &v2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v11);
  id v16 = a2;
  id v17 = a1;
  os_log_type_t v18 = v16;
  id v19 = v17;
  id v42 = v14;
  unsigned __int8 v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v41 = v5;
    uint64_t v24 = (void *)v23;
    *(_DWORD *)uint64_t v22 = 138412802;
    uint64_t v38 = v11;
    id v39 = v8;
    aBlock[0] = v19;
    uint64_t v40 = v6;
    id v25 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v24 = v19;

    *(_WORD *)(v22 + 12) = 2112;
    aBlock[0] = v18;
    uint64_t v26 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v24[1] = v18;

    *(_WORD *)(v22 + 22) = 2048;
    id v27 = [v26 updateAvailabilityStatus];

    aBlock[0] = v27;
    uint64_t v8 = v39;
    uint64_t v6 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v11 = v38;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "assetAvailablityUpdate for %@ %@ status is %ld", (uint8_t *)v22, 0x20u);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    uint64_t v5 = v41;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unsigned __int8 v20 = v18;
  }

  (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v11);
  uint64_t v28 = v45;
  double v29 = *(void **)&v45[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  uint64_t v30 = (void *)swift_allocObject();
  v30[2] = v28;
  v30[3] = v18;
  v30[4] = v44;
  v30[5] = v19;
  aBlock[4] = sub_1000C8EC4;
  aBlock[5] = v30;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100276020;
  unint64_t v31 = _Block_copy(aBlock);
  uint64_t v32 = v18;
  id v33 = v19;
  id v34 = v29;
  id v35 = v28;
  swift_retain();
  os_log_type_t v36 = v46;
  static DispatchQoS.unspecified.getter();
  uint64_t v49 = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v31);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v36, v48);
  swift_release();
  return swift_release();
}

void sub_1000C2550(uint64_t a1, void *a2, uint64_t a3, uint8_t *a4)
{
  uint64_t v156 = a4;
  uint64_t v157 = (void *)type metadata accessor for Date();
  unint64_t v155 = (void (**)(char *, void *))*(v157 - 1);
  __chkstk_darwin(v157);
  uint64_t v154 = (void (*)(char *, uint64_t))((char *)v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v161 = type metadata accessor for Logger();
  uint64_t v160 = *(void *)(v161 - 8);
  uint64_t v8 = __chkstk_darwin(v161);
  uint64_t v10 = (char *)v150 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v150 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  id v16 = (char *)v150 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  id v19 = (char *)v150 - v18;
  __chkstk_darwin(v17);
  unint64_t v159 = (char *)v150 - v20;
  uint64_t v162 = a3 + 16;
  os_log_type_t v21 = *(void **)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_assetID);
  *(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_assetID) = a2;
  id v22 = a2;

  uint64_t v23 = *(void **)(*(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager)
                 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController);
  uint64_t v24 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile;
  id v25 = *(void **)(*(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons);
  if (v25)
  {
    uint64_t v166 = 0;
    unint64_t v167 = 0xE000000000000000;
    uint64_t v157 = v23;
    id v26 = v25;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    uint64_t v166 = 0xD00000000000001BLL;
    unint64_t v167 = 0x8000000100235CB0;
    id v27 = [v26 description];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    v31._uint64_t countAndFlagsBits = v28;
    v31._object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    uint64_t v32 = v166;
    unint64_t v33 = v167;
    swift_beginAccess();
    *(void *)(a3 + 16) = v32;
    *(void *)(a3 + 24) = v33;
    swift_bridgeObjectRelease();
    uint64_t v34 = v160;
    uint64_t v35 = v161;
    (*(void (**)(char *, uint64_t, uint64_t))(v160 + 16))(v159, a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v161);
    swift_retain();
    os_log_type_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v166 = swift_slowAlloc();
      uint64_t v158 = a1;
      *(_DWORD *)uint64_t v38 = 136315138;
      swift_beginAccess();
      uint64_t v40 = *(void *)(a3 + 16);
      unint64_t v39 = *(void *)(a3 + 24);
      swift_bridgeObjectRetain();
      v163[0] = sub_1000993AC(v40, v39, &v166);
      a1 = v158;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v160 + 8))(v159, v161);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v159, v35);
    }
    uint64_t v57 = a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
    swift_beginAccess();
    sub_1000C8CA8(v57, (uint64_t)&v166);
    if (v168)
    {
      sub_1000A5D40((uint64_t)&v166, (uint64_t)v163);
      sub_1000C8D10((uint64_t)&v166);
      uint64_t v58 = v164;
      uint64_t v59 = v165;
      sub_1000A5DA4(v163, v164);
      swift_beginAccess();
      uint64_t v60 = *(void *)(a3 + 16);
      uint64_t v61 = *(void *)(a3 + 24);
      sub_1000A6750();
      uint64_t v62 = swift_allocError();
      *(void *)uint64_t v63 = v60;
      *(void *)(v63 + _Block_object_dispose(&STACK[0x3D0], 8) = v61;
      *(unsigned char *)(v63 + 16) = 6;
      os_log_type_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 8);
      swift_bridgeObjectRetain_n();
      v64(v60, v61, 1, v62, v58, v59);

LABEL_12:
      swift_errorRelease();
      swift_bridgeObjectRelease();
      sub_100099BCC((uint64_t)v163);
      return;
    }

    goto LABEL_14;
  }
  uint64_t v41 = v19;
  unint64_t v152 = v13;
  id v42 = v157;
  uint64_t v153 = (uint64_t)v16;
  uint64_t v158 = a1;
  unint64_t v159 = v23;
  id v43 = [v22 updateAvailabilityStatus];
  if (v43 == (id)1)
  {
LABEL_7:
    swift_beginAccess();
    uint64_t v44 = a3;
    *(void *)(a3 + 16) = 0xD00000000000002BLL;
    *(void *)(a3 + 24) = 0x8000000100235D00;
    swift_bridgeObjectRelease();
    uint64_t v45 = v160;
    os_log_type_t v46 = *(void (**)(void))(v160 + 16);
    uint64_t v47 = v41;
    uint64_t v48 = v41;
    uint64_t v157 = (void *)(v158 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger);
    uint64_t v49 = v161;
    unint64_t v155 = (void (**)(char *, void *))v46;
    v46(v48);
    swift_retain();
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    BOOL v52 = os_log_type_enabled(v50, v51);
    uint64_t v151 = (uint8_t *)v22;
    if (v52)
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      uint64_t v166 = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136315138;
      uint64_t v154 = (void (*)(char *, uint64_t))(v53 + 4);
      swift_beginAccess();
      uint64_t v55 = *(void *)(a3 + 16);
      unint64_t v54 = *(void *)(a3 + 24);
      swift_bridgeObjectRetain();
      v163[0] = sub_1000993AC(v55, v54, &v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v56 = v161;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v154 = *(void (**)(char *, uint64_t))(v160 + 8);
      v154(v47, v56);
    }
    else
    {

      swift_release();
      uint64_t v154 = *(void (**)(char *, uint64_t))(v45 + 8);
      v154(v47, v49);
      uint64_t v56 = v49;
    }
    uint64_t v70 = v158 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
    swift_beginAccess();
    sub_1000C8CA8(v70, (uint64_t)&v166);
    uint64_t v158 = v70;
    if (v168)
    {
      sub_1000A5D40((uint64_t)&v166, (uint64_t)v163);
      sub_1000C8D10((uint64_t)&v166);
      uint64_t v71 = v164;
      uint64_t v72 = v165;
      sub_1000A5DA4(v163, v164);
      swift_beginAccess();
      uint64_t v73 = *(void *)(a3 + 16);
      uint64_t v74 = *(void *)(a3 + 24);
      uint64_t v75 = *(void (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v72 + 8);
      swift_bridgeObjectRetain();
      v75(v73, v74, 0, 0, v71, v72);
      uint64_t v56 = v161;
      swift_bridgeObjectRelease();
      sub_100099BCC((uint64_t)v163);
    }
    else
    {
      sub_1000C8D10((uint64_t)&v166);
    }
    os_log_type_t v76 = v156;
    uint64_t v77 = v151;
    if ([v159 downloadAvailableFirmwareUpdate:v156 assetID:v151 withUserIntent:0])
    {
LABEL_24:

      return;
    }
    uint64_t v166 = 0;
    unint64_t v167 = 0xE000000000000000;
    _StringGuts.grow(_:)(66);
    v78._uint64_t countAndFlagsBits = 0xD000000000000035;
    v78._object = (void *)0x8000000100235D30;
    String.append(_:)(v78);
    id v79 = [(uint8_t *)v76 description];
    uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v82 = v81;

    v83._uint64_t countAndFlagsBits = v80;
    v83._object = v82;
    String.append(_:)(v83);
    swift_bridgeObjectRelease();
    v84._uint64_t countAndFlagsBits = 0x4449746573736120;
    v84._object = (void *)0xE90000000000003ALL;
    String.append(_:)(v84);
    id v85 = [(uint8_t *)v77 description];
    uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v88 = v87;

    v89._uint64_t countAndFlagsBits = v86;
    v89._object = v88;
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    uint64_t v90 = v166;
    unint64_t v91 = v167;
    swift_beginAccess();
    *(void *)(a3 + 16) = v90;
    *(void *)(a3 + 24) = v91;
    swift_bridgeObjectRelease();
    uint64_t v92 = v153;
    ((void (*)(uint64_t, void *, uint64_t))v155)(v153, v157, v56);
    swift_retain();
    unint64_t v93 = Logger.logObject.getter();
    os_log_type_t v94 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v93, v94))
    {
      NSData v95 = (uint8_t *)swift_slowAlloc();
      uint64_t v166 = swift_slowAlloc();
      *(_DWORD *)NSData v95 = 136315138;
      swift_beginAccess();
      uint64_t v96 = *(void *)(a3 + 16);
      unint64_t v97 = *(void *)(a3 + 24);
      swift_bridgeObjectRetain();
      v163[0] = sub_1000993AC(v96, v97, &v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "%s", v95, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v98 = v92;
      uint64_t v99 = v161;
    }
    else
    {

      swift_release();
      uint64_t v98 = v92;
      uint64_t v99 = v56;
    }
    v154((char *)v98, v99);
    sub_1000C8CA8(v158, (uint64_t)&v166);
    if (v168)
    {
      sub_1000A5D40((uint64_t)&v166, (uint64_t)v163);
      sub_1000C8D10((uint64_t)&v166);
      uint64_t v105 = v164;
      uint64_t v106 = v165;
      sub_1000A5DA4(v163, v164);
      swift_beginAccess();
      uint64_t v107 = *(void *)(v44 + 16);
      uint64_t v108 = *(void *)(v44 + 24);
      sub_1000A6750();
      uint64_t v110 = swift_allocError();
      *(void *)uint64_t v109 = v107;
      *(void *)(v109 + _Block_object_dispose(&STACK[0x3D0], 8) = v108;
      char v111 = 3;
LABEL_44:
      *(unsigned char *)(v109 + 16) = v111;
      unint64_t v124 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 8);
      swift_bridgeObjectRetain_n();
      v124(v107, v108, 1, v110, v105, v106);

      goto LABEL_12;
    }
    goto LABEL_45;
  }
  if (v43 == (id)3)
  {
    if (*(unsigned char *)(v158 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable))
    {
      uint64_t v65 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state;
      int v66 = *(unsigned __int8 *)(v158 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state);
      uint64_t v67 = v158;
      if (!*(void *)(*(void *)(v158 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile)
                      + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons))
      {
        if (v66 != 2)
        {
          uint64_t v125 = a3;
          *(unsigned char *)(v158 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state) = 2;
          swift_retain();
          sub_100105BB4();
          swift_release();
          swift_beginAccess();
          *(void *)(a3 + 16) = 0xD000000000000023;
          *(void *)(a3 + 24) = 0x8000000100235CD0;
          swift_bridgeObjectRelease();
          uint64_t v126 = v160;
          uint64_t v127 = v152;
          uint64_t v128 = v161;
          (*(void (**)(char *, uint64_t, uint64_t))(v160 + 16))(v152, v67 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v161);
          swift_retain();
          id v129 = Logger.logObject.getter();
          os_log_type_t v130 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v129, v130))
          {
            unint64_t v131 = (uint8_t *)swift_slowAlloc();
            uint64_t v153 = swift_slowAlloc();
            uint64_t v166 = v153;
            uint64_t v151 = v131;
            *(_DWORD *)unint64_t v131 = 136315138;
            v150[1] = v131 + 4;
            swift_beginAccess();
            uint64_t v133 = *(void *)(a3 + 16);
            unint64_t v132 = *(void *)(a3 + 24);
            swift_bridgeObjectRetain();
            uint64_t v134 = v133;
            uint64_t v67 = v158;
            uint64_t v125 = a3;
            v163[0] = sub_1000993AC(v134, v132, &v166);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v129, v130, "%s", v151, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v126 + 8))(v152, v128);
          }
          else
          {

            swift_release();
            (*(void (**)(char *, uint64_t))(v126 + 8))(v127, v128);
          }
          uint64_t v135 = v67 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
          swift_beginAccess();
          sub_1000C8CA8(v135, (uint64_t)&v166);
          if (v168)
          {
            sub_1000A5D40((uint64_t)&v166, (uint64_t)v163);
            sub_1000C8D10((uint64_t)&v166);
            uint64_t v136 = v164;
            uint64_t v137 = v165;
            sub_1000A5DA4(v163, v164);
            swift_beginAccess();
            uint64_t v138 = *(void *)(v125 + 16);
            uint64_t v139 = *(void *)(v125 + 24);
            uint64_t v140 = *(void (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v137 + 8);
            swift_bridgeObjectRetain();
            v140(v138, v139, 0, 0, v136, v137);
            swift_bridgeObjectRelease();
            sub_100099BCC((uint64_t)v163);
          }
          else
          {
            sub_1000C8D10((uint64_t)&v166);
          }
          id v141 = v156;
          uint64_t v142 = v155;
          uint64_t v143 = (char *)v154;
          uint64_t v144 = v67 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent;
          *(void *)uint64_t v144 = 0;
          *(unsigned char *)(v144 + _Block_object_dispose(&STACK[0x3D0], 8) = 1;
          static Date.now.getter();
          Date.timeIntervalSince1970.getter();
          uint64_t v146 = v145;
          v142[1](v143, v42);
          *(void *)(v67 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_firmwareUpdateInterval) = v146;
          sub_1000992E8(&qword_1002A8340);
          uint64_t v147 = swift_allocObject();
          *(_OWORD *)(v147 + 16) = xmmword_100240BF0;
          *(void *)(v147 + 32) = v141;
          uint64_t v166 = v147;
          specialized Array._endMutation()();
          sub_1000C8DD0();
          uint64_t v148 = v141;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v159 stageFirmwareUpdateOnAccessoryList:isa withUserIntent:1];

          goto LABEL_24;
        }
        goto LABEL_35;
      }
      if (v66 == 1) {
        goto LABEL_35;
      }
      uint64_t v68 = a3;
      char v69 = 1;
    }
    else
    {
      uint64_t v65 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state;
      if (!*(unsigned char *)(v158 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state)) {
        goto LABEL_35;
      }
      uint64_t v68 = a3;
      uint64_t v67 = v158;
      char v69 = 0;
    }
    *(unsigned char *)(v67 + v65) = v69;
    uint64_t v166 = 0;
    unint64_t v167 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    uint64_t v166 = 0xD00000000000001BLL;
    unint64_t v167 = 0x8000000100235CB0;
    uint64_t v100 = *(void **)(*(void *)(v67 + v24)
                    + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_stagingNotReadyReasons);
    if (v100)
    {
      id v101 = [v100 description];
      uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v104 = v103;
    }
    else
    {
      uint64_t v104 = (void *)0xE700000000000000;
      uint64_t v102 = 0x6E776F6E6B6E55;
    }
    uint64_t v113 = v161;
    v114._uint64_t countAndFlagsBits = v102;
    v114._object = v104;
    String.append(_:)(v114);
    swift_bridgeObjectRelease();
    uint64_t v115 = v166;
    unint64_t v116 = v167;
    swift_beginAccess();
    *(void *)(v68 + 16) = v115;
    *(void *)(v68 + 24) = v116;
    swift_bridgeObjectRelease();
    uint64_t v117 = v160;
    (*(void (**)(char *, uint64_t, uint64_t))(v160 + 16))(v10, v67 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v113);
    swift_retain();
    unint64_t v118 = Logger.logObject.getter();
    os_log_type_t v119 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v118, v119))
    {
      uint64_t v157 = v10;
      uint64_t v120 = (uint8_t *)swift_slowAlloc();
      uint64_t v166 = swift_slowAlloc();
      *(_DWORD *)uint64_t v120 = 136315138;
      uint64_t v156 = v120 + 4;
      swift_beginAccess();
      uint64_t v121 = *(void *)(v68 + 16);
      unint64_t v122 = *(void *)(a3 + 24);
      swift_bridgeObjectRetain();
      v163[0] = sub_1000993AC(v121, v122, &v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      uint64_t v67 = v158;
      uint64_t v68 = a3;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v118, v119, "%s", v120, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(void *, uint64_t))(v117 + 8))(v157, v161);
    }
    else
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v117 + 8))(v10, v113);
    }
    uint64_t v123 = v67 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
    swift_beginAccess();
    sub_1000C8CA8(v123, (uint64_t)&v166);
    if (v168)
    {
      sub_1000A5D40((uint64_t)&v166, (uint64_t)v163);
      sub_1000C8D10((uint64_t)&v166);
      uint64_t v105 = v164;
      uint64_t v106 = v165;
      sub_1000A5DA4(v163, v164);
      swift_beginAccess();
      uint64_t v107 = *(void *)(v68 + 16);
      uint64_t v108 = *(void *)(v68 + 24);
      sub_1000A6750();
      uint64_t v110 = swift_allocError();
      *(void *)uint64_t v109 = v107;
      *(void *)(v109 + _Block_object_dispose(&STACK[0x3D0], 8) = v108;
      char v111 = 6;
      goto LABEL_44;
    }
LABEL_45:

LABEL_14:
    sub_1000C8D10((uint64_t)&v166);
    return;
  }
  if (v43 == (id)4) {
    goto LABEL_7;
  }
LABEL_35:
  uint64_t v112 = v159;
}

uint64_t sub_1000C3B10(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v56 = v9;
  __chkstk_darwin(v9);
  uint64_t v53 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for DispatchQoS();
  uint64_t v52 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  os_log_type_t v51 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, &v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v12);
  id v16 = a1;
  sub_1000A618C(a2, a3);
  uint64_t v17 = v16;
  sub_1000A618C(a2, a3);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  LODWORD(v57) = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    id v50 = v4;
    uint64_t v21 = v20;
    uint64_t v44 = (void *)swift_slowAlloc();
    os_log_type_t v46 = (void *)swift_slowAlloc();
    uint64_t v58 = v17;
    aBlock[0] = v46;
    *(_DWORD *)uint64_t v21 = 138412546;
    uint64_t v48 = v12;
    uint64_t v49 = v5;
    uint64_t v47 = v13;
    id v22 = v17;
    os_log_t v45 = v18;
    uint64_t v23 = a2;
    unint64_t v24 = a3;
    id v25 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v44 = v17;

    *(_WORD *)(v21 + 12) = 2080;
    Swift::String v26 = Data.base64EncodedString(options:)(0);
    uint64_t v58 = (void *)sub_1000993AC(v26._countAndFlagsBits, (unint64_t)v26._object, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v5 = v49;
    swift_bridgeObjectRelease();
    sub_1000A6240(v23, v24);
    sub_1000A6240(v23, v24);
    os_log_t v27 = v45;
    _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v57, "sendMessage: %@ msg is %s", (uint8_t *)v21, 0x16u);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v47 + 8))(v15, v48);
  }
  else
  {

    sub_1000A6240(a2, a3);
    sub_1000A6240(a2, a3);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  uint64_t v28 = *(void **)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket];
  if (!v28) {
    goto LABEL_7;
  }
  if ([(id)swift_unknownObjectRetain() isClosed])
  {
    swift_unknownObjectRelease();
LABEL_7:
    uint64_t v29 = type metadata accessor for Errors();
    sub_1000C8E10((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    *uint64_t v30 = 0xD000000000000027;
    v30[1] = 0x8000000100235C80;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v29 - 8) + 104))(v30, enum case for Errors.CommunicationFailure(_:), v29);
    swift_willThrow();
    return swift_willThrow();
  }
  uint64_t v32 = *(void **)&v5[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  unint64_t v33 = (void *)swift_allocObject();
  v33[2] = v5;
  aBlock[4] = sub_1000C8E58;
  aBlock[5] = v33;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100275FD0;
  uint64_t v57 = _Block_copy(aBlock);
  id v50 = v32;
  uint64_t v34 = v5;
  uint64_t v35 = v51;
  static DispatchQoS.unspecified.getter();
  uint64_t v58 = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  os_log_type_t v36 = v53;
  uint64_t v37 = v56;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v38 = v57;
  unint64_t v39 = v50;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v55 + 8))(v36, v37);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v54);
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  aBlock[0] = 0;
  LOBYTE(v39) = [v28 writeData:isa error:aBlock];

  if ((v39 & 1) == 0)
  {
    id v42 = aBlock[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_unknownObjectRelease();
    return swift_willThrow();
  }
  id v41 = aBlock[0];
  return swift_unknownObjectRelease();
}

uint64_t sub_1000C43C4(void *a1, void *a2, uint64_t a3)
{
  os_log_type_t v46 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for DispatchQoS();
  uint64_t v44 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = 0xE000000000000000;
  uint64_t v42 = v13;
  uint64_t v43 = v16;
  os_log_t v45 = v3;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, &v3[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v12);
  uint64_t v17 = a1;
  id v41 = v15;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v36 = v12;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v39 = v7;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v40 = v6;
    uint64_t v23 = (void *)v22;
    uint64_t v38 = v9;
    *(_DWORD *)uint64_t v21 = 138412290;
    aBlock[0] = v17;
    unint64_t v24 = v17;
    uint64_t v37 = v11;
    id v25 = v24;
    uint64_t v12 = v36;
    uint64_t v9 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = v17;

    uint64_t v11 = v37;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "firmwareStagingProgress: %@", v21, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    uint64_t v6 = v40;
    swift_slowDealloc();
    uint64_t v7 = v39;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v18 = v17;
  }

  (*(void (**)(char *, uint64_t))(v42 + 8))(v41, v12);
  Swift::String v26 = v45;
  os_log_t v27 = *(void **)&v45[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = a3;
  v28[3] = v26;
  uint64_t v29 = v46;
  void v28[4] = v17;
  v28[5] = v29;
  v28[6] = v43;
  aBlock[4] = sub_1000C8DC0;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100275F80;
  uint64_t v30 = _Block_copy(aBlock);
  Swift::String v31 = v17;
  id v32 = v27;
  id v33 = v26;
  id v34 = v29;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v47);
  swift_release();
  return swift_release();
}

void sub_1000C48C8(uint64_t a1, uint8_t *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = &v125[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v16 = __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  uint64_t v20 = &v125[-v17];
  uint64_t v135 = a1;
  uint64_t v134 = a5 + 16;
  if (a1)
  {
    unint64_t v141 = 0;
    unint64_t v142 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    swift_bridgeObjectRelease();
    unint64_t v141 = 0xD000000000000019;
    unint64_t v142 = 0x8000000100235C00;
    unint64_t v132 = (void (*)(void, void, void))v14;
    id v131 = a3;
    id v21 = [a3 description];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v136 = v10;
    uint64_t v23 = v22;
    id v25 = v24;

    v26._uint64_t countAndFlagsBits = v23;
    v26._object = v25;
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._uint64_t countAndFlagsBits = 0x207465737361202CLL;
    v27._object = (void *)0xE800000000000000;
    String.append(_:)(v27);
    id v28 = [a4 description];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v31 = v30;

    v32._uint64_t countAndFlagsBits = v29;
    uint64_t v33 = v136;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v34._uint64_t countAndFlagsBits = 0x20727265202CLL;
    v34._object = (void *)0xE600000000000000;
    String.append(_:)(v34);
    v138[0] = v135;
    v35._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v141;
    unint64_t v37 = v142;
    swift_beginAccess();
    *(void *)(a5 + 16) = v36;
    *(void *)(a5 + 24) = v37;
    swift_bridgeObjectRelease();
    uint64_t v137 = a2;
    uint64_t v133 = v11;
    uint64_t v38 = v132;
    (*(void (**)(void, uint8_t *, uint64_t))(v11 + 16))(v132, &a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v33);
    id v39 = v131;
    id v40 = a4;
    id v41 = v39;
    id v42 = v40;
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc();
      os_log_type_t v46 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 138412802;
      unint64_t v141 = (unint64_t)v41;
      uint64_t v130 = a5;
      uint64_t v47 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v46 = v41;

      *(_WORD *)(v45 + 12) = 2112;
      unint64_t v141 = (unint64_t)v42;
      id v48 = v42;
      uint64_t v33 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v46[1] = v42;

      *(_WORD *)(v45 + 22) = 2048;
      unint64_t v141 = v135;
      a5 = v130;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Firmware staging failed: %@, asset %@, err %lu", (uint8_t *)v45, 0x20u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      uint64_t v38 = v132;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v43 = v41;
    }
    uint64_t v64 = v133;

    (*(void (**)(void (*)(void, void, void), uint64_t))(v64 + 8))(v38, v33);
    swift_beginAccess();
    uint64_t v66 = *(void *)(a5 + 16);
    uint64_t v65 = *(void *)(a5 + 24);
    uint64_t v67 = (uint64_t)&v137[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback];
    swift_beginAccess();
    sub_1000C8CA8(v67, (uint64_t)&v141);
    if (v143)
    {
      sub_1000A5D40((uint64_t)&v141, (uint64_t)v138);
      swift_bridgeObjectRetain();
      sub_1000C8D10((uint64_t)&v141);
      uint64_t v68 = v139;
      uint64_t v69 = v140;
      sub_1000A5DA4(v138, v139);
      swift_beginAccess();
      uint64_t v70 = *(void *)(a5 + 16);
      uint64_t v71 = *(void *)(a5 + 24);
      sub_1000A6750();
      uint64_t v72 = swift_allocError();
      *(void *)uint64_t v73 = v66;
      *(void *)(v73 + _Block_object_dispose(&STACK[0x3D0], 8) = v65;
      *(unsigned char *)(v73 + 16) = 4;
      uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v74(v70, v71, 1, v72, v68, v69);
      swift_errorRelease();
      swift_bridgeObjectRelease();
      sub_100099BCC((uint64_t)v138);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1000C8D10((uint64_t)&v141);
    }
    sub_1000A6750();
    uint64_t v75 = swift_allocError();
    *(void *)uint64_t v76 = v66;
    *(void *)(v76 + _Block_object_dispose(&STACK[0x3D0], 8) = v65;
    *(unsigned char *)(v76 + 16) = 4;
    swift_bridgeObjectRetain();
    sub_1000C008C(v75);
    swift_errorRelease();
    uint64_t v77 = swift_allocError();
    *(void *)uint64_t v78 = v66;
    *(void *)(v78 + _Block_object_dispose(&STACK[0x3D0], 8) = v65;
    *(unsigned char *)(v78 + 16) = 4;
    sub_1000C1718(0, 0, v77, 0);
    swift_errorRelease();
  }
  else
  {
    uint64_t v127 = v19;
    uint64_t v128 = v18;
    uint64_t v130 = a5;
    uint64_t v49 = *(void (**)(void))(v11 + 16);
    id v129 = &a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger];
    unint64_t v132 = (void (*)(void, void, void))v49;
    v49(&v125[-v17]);
    id v50 = a3;
    id v51 = a4;
    id v52 = v50;
    id v53 = v51;
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    int v56 = v55;
    BOOL v57 = os_log_type_enabled(v54, v55);
    id v131 = v52;
    uint64_t v135 = v11 + 16;
    if (v57)
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      int v126 = v56;
      uint64_t v60 = (void *)v59;
      *(_DWORD *)uint64_t v58 = 138412546;
      uint64_t v137 = a2;
      unint64_t v141 = (unint64_t)v52;
      uint64_t v133 = v11;
      id v61 = v52;
      uint64_t v136 = v10;
      id v62 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v60 = v52;

      *(_WORD *)(v58 + 12) = 2112;
      unint64_t v141 = (unint64_t)v53;
      id v63 = v53;
      uint64_t v11 = v133;
      uint64_t v10 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v60[1] = v53;

      a2 = v137;
      _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v126, "Firmware staging complete: %@, asset %@", (uint8_t *)v58, 0x16u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v81 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    uint64_t v79 = v11 + 8;
    uint64_t v80 = v81;
    v81((uint64_t)v20, v10);
    unint64_t v82 = *(void **)&a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_stagedAssetID];
    *(void *)&a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_stagedAssetID] = v53;
    id v83 = v53;

    if (a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable])
    {
      int v84 = a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state];
      if (*(void *)(*(void *)&a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile]
                     + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateProfile_updateNotReadyReasons))
      {
        if (v84 != 3)
        {
          a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state] = 3;
          swift_beginAccess();
          uint64_t v85 = v10;
          uint64_t v86 = v130;
          *(void *)(v130 + 16) = 0xD00000000000001CLL;
          *(void *)(v86 + 24) = 0x8000000100235C20;
          swift_bridgeObjectRelease();
          uint64_t v87 = v128;
          v132(v128, v129, v85);
          swift_retain();
          uint64_t v88 = Logger.logObject.getter();
          os_log_type_t v89 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v88, v89))
          {
            uint64_t v133 = v79;
            uint64_t v90 = swift_slowAlloc();
            uint64_t v136 = v85;
            unint64_t v91 = (uint8_t *)v90;
            unint64_t v141 = swift_slowAlloc();
            *(_DWORD *)unint64_t v91 = 136315138;
            uint64_t v137 = v91 + 4;
            swift_beginAccess();
            uint64_t v92 = a2;
            uint64_t v93 = *(void *)(v86 + 16);
            unint64_t v94 = *(void *)(v86 + 24);
            swift_bridgeObjectRetain();
            v138[0] = sub_1000993AC(v93, v94, (uint64_t *)&v141);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            a2 = v92;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v88, v89, "%s", v91, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v80(v128, v136);
          }
          else
          {

            swift_release();
            v80(v87, v85);
          }
          uint64_t v105 = (uint64_t)&a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback];
          swift_beginAccess();
          sub_1000C8CA8(v105, (uint64_t)&v141);
          if (v143)
          {
            sub_1000A5D40((uint64_t)&v141, (uint64_t)v138);
            sub_1000C8D10((uint64_t)&v141);
            uint64_t v106 = v139;
            uint64_t v107 = v140;
            sub_1000A5DA4(v138, v139);
            swift_beginAccess();
            uint64_t v108 = *(void *)(v130 + 16);
            uint64_t v109 = *(void *)(v130 + 24);
            sub_1000A6750();
            uint64_t v110 = swift_allocError();
            *(void *)uint64_t v111 = v108;
            *(void *)(v111 + _Block_object_dispose(&STACK[0x3D0], 8) = v109;
            *(unsigned char *)(v111 + 16) = 6;
            uint64_t v112 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 8);
            swift_bridgeObjectRetain_n();
            v112(v108, v109, 1, v110, v106, v107);
            swift_errorRelease();
            swift_bridgeObjectRelease();
            sub_100099BCC((uint64_t)v138);
          }
          else
          {
            sub_1000C8D10((uint64_t)&v141);
          }
          swift_retain();
          sub_1001060E8();
          swift_release();
        }
      }
      else if (v84 != 4)
      {
        a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state] = 4;
        swift_beginAccess();
        uint64_t v95 = v10;
        uint64_t v96 = v130;
        *(void *)(v130 + 16) = 0xD00000000000001CLL;
        *(void *)(v96 + 24) = 0x8000000100235C40;
        swift_bridgeObjectRelease();
        uint64_t v97 = v127;
        v132(v127, v129, v95);
        swift_retain();
        uint64_t v98 = Logger.logObject.getter();
        os_log_type_t v99 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v98, v99))
        {
          uint64_t v133 = v79;
          uint64_t v100 = swift_slowAlloc();
          uint64_t v136 = v95;
          id v101 = (uint8_t *)v100;
          unint64_t v141 = swift_slowAlloc();
          *(_DWORD *)id v101 = 136315138;
          uint64_t v137 = v101 + 4;
          swift_beginAccess();
          uint64_t v102 = a2;
          uint64_t v103 = *(void *)(v96 + 16);
          unint64_t v104 = *(void *)(v96 + 24);
          swift_bridgeObjectRetain();
          v138[0] = sub_1000993AC(v103, v104, (uint64_t *)&v141);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          a2 = v102;
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v98, v99, "%s", v101, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v80(v127, v136);
        }
        else
        {

          swift_release();
          v80(v97, v95);
        }
        uint64_t v113 = (uint64_t)&a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback];
        swift_beginAccess();
        sub_1000C8CA8(v113, (uint64_t)&v141);
        if (v143)
        {
          sub_1000A5D40((uint64_t)&v141, (uint64_t)v138);
          sub_1000C8D10((uint64_t)&v141);
          uint64_t v114 = v139;
          uint64_t v115 = v140;
          sub_1000A5DA4(v138, v139);
          swift_beginAccess();
          uint64_t v116 = *(void *)(v130 + 16);
          uint64_t v117 = *(void *)(v130 + 24);
          unint64_t v118 = *(void (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v115 + 8);
          swift_bridgeObjectRetain();
          v118(v116, v117, 0, 0, v114, v115);
          swift_bridgeObjectRelease();
          sub_100099BCC((uint64_t)v138);
        }
        else
        {
          sub_1000C8D10((uint64_t)&v141);
        }
        os_log_type_t v119 = *(void **)(*(void *)&a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager]
                        + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController);
        sub_1000992E8(&qword_1002A8340);
        uint64_t v120 = swift_allocObject();
        *(_OWORD *)(v120 + 16) = xmmword_100240BF0;
        id v121 = v131;
        *(void *)(v120 + 32) = v131;
        unint64_t v141 = v120;
        specialized Array._endMutation()();
        sub_1000C8DD0();
        id v122 = v121;
        id v123 = v119;
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v123 applyStagedFirmwareOnAccessoryList:isa withUserIntent:1];
      }
    }
    else if (a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state])
    {
      a2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state] = 0;
    }
  }
}

uint64_t sub_1000C594C(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v45 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0;
  *(void *)(v15 + 24) = 0xE000000000000000;
  uint64_t v41 = v12;
  uint64_t v42 = v15;
  os_log_type_t v44 = v2;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, &v2[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger], v11);
  os_log_type_t v46 = a1;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v38 = v8;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v39 = v6;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v40 = v5;
    Swift::String v35 = (void *)v20;
    uint64_t v36 = a2;
    *(_DWORD *)uint64_t v19 = 138412290;
    id v21 = v46;
    aBlock[0] = v46;
    uint64_t v22 = v46;
    uint64_t v37 = v9;
    uint64_t v23 = v22;
    uint64_t v8 = v38;
    a2 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v35 = v21;

    uint64_t v9 = v37;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "firmwareStagingProgress: %@)", v19, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    uint64_t v5 = v40;
    swift_slowDealloc();
    uint64_t v6 = v39;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v16 = v46;
  }

  (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v11);
  unint64_t v24 = v44;
  swift_retain();
  sub_1001060E8();
  swift_release();
  id v25 = *(void **)&v24[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  Swift::String v26 = (void *)swift_allocObject();
  uint64_t v27 = v42;
  v26[2] = a2;
  v26[3] = v27;
  id v28 = v46;
  v26[4] = v46;
  v26[5] = v24;
  aBlock[4] = sub_1000C8C9C;
  aBlock[5] = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100275F30;
  uint64_t v29 = _Block_copy(aBlock);
  uint64_t v30 = v28;
  id v31 = v25;
  swift_retain();
  Swift::String v32 = v24;
  uint64_t v33 = v45;
  static DispatchQoS.unspecified.getter();
  uint64_t v47 = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v33, v43);
  swift_release();
  return swift_release();
}

uint64_t sub_1000C5E74(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Logger();
  id v129 = *(char **)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v120 - v18;
  uint64_t v20 = (void *)(a2 + 16);
  uint64_t v130 = a4;
  unint64_t v128 = v16;
  if (a1)
  {
    unint64_t v134 = 0;
    unint64_t v135 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    unint64_t v134 = 0xD00000000000001ELL;
    unint64_t v135 = 0x8000000100235BB0;
    uint64_t v127 = (char *)a1;
    v131[0] = a1;
    v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v22 = v11;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 32;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    id v24 = [a3 description];
    id v25 = a3;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v28 = v27;

    v29._uint64_t countAndFlagsBits = v26;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    unint64_t v30 = v134;
    unint64_t v31 = v135;
    swift_beginAccess();
    *(void *)(a2 + 16) = v30;
    *(void *)(a2 + 24) = v31;
    swift_bridgeObjectRelease();
    Swift::String v32 = (void (**)(uint64_t, unint64_t))v129;
    (*((void (**)(char *, uint64_t, uint64_t))v129 + 2))(v14, a4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v22);
    uint64_t v33 = v25;
    Swift::String v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    int v36 = v35;
    uint64_t v37 = (uint64_t)v14;
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v38 = swift_slowAlloc();
      int v126 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 134218242;
      unint64_t v134 = (unint64_t)v127;
      uint64_t v127 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v38 + 12) = 2112;
      unint64_t v134 = (unint64_t)v33;
      uint64_t v39 = v33;
      LODWORD(v125) = v36;
      uint64_t v40 = v39;
      uint64_t v37 = (uint64_t)v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v126 = v33;

      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v125, "Firmware apply failed: status %lu %@", (uint8_t *)v38, 0x16u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      Swift::String v34 = v33;
    }

    v32[1](v37, v128);
    swift_beginAccess();
    uint64_t v57 = *(void *)(a2 + 16);
    uint64_t v58 = *(void *)(a2 + 24);
    sub_1000A6750();
    uint64_t v59 = swift_allocError();
    *(void *)uint64_t v60 = v57;
    *(void *)(v60 + _Block_object_dispose(&STACK[0x3D0], 8) = v58;
    *(unsigned char *)(v60 + 16) = 5;
    uint64_t v61 = v130;
    uint64_t v62 = v130 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
    swift_beginAccess();
    sub_1000C8CA8(v62, (uint64_t)&v134);
    if (v136)
    {
      sub_1000A5D40((uint64_t)&v134, (uint64_t)v131);
      swift_bridgeObjectRetain();
      swift_errorRetain();
      sub_1000C8D10((uint64_t)&v134);
      uint64_t v63 = v132;
      uint64_t v64 = v133;
      sub_1000A5DA4(v131, v132);
      swift_beginAccess();
      uint64_t v65 = *(void *)(a2 + 16);
      uint64_t v66 = *(void *)(a2 + 24);
      uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 8);
      swift_bridgeObjectRetain();
      v67(v65, v66, 1, v59, v63, v64);
      swift_errorRelease();
      swift_bridgeObjectRelease();
      sub_100099BCC((uint64_t)v131);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1000C8D10((uint64_t)&v134);
    }
    goto LABEL_31;
  }
  uint64_t v125 = v17;
  unint64_t v124 = v10;
  unint64_t v134 = 0;
  unint64_t v135 = 0xE000000000000000;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  unint64_t v134 = 0xD00000000000002FLL;
  unint64_t v135 = 0x8000000100235BD0;
  id v41 = [a3 description];
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v127 = (char *)a2;
  os_log_type_t v44 = v43;

  v45._uint64_t countAndFlagsBits = v42;
  v45._object = v44;
  String.append(_:)(v45);
  uint64_t v46 = (uint64_t)v127;
  swift_bridgeObjectRelease();
  uint64_t v47 = a3;
  unint64_t v48 = v134;
  unint64_t v49 = v135;
  int v126 = v20;
  swift_beginAccess();
  *(void *)(v46 + 16) = v48;
  *(void *)(v46 + 24) = v49;
  swift_bridgeObjectRelease();
  id v50 = v129;
  id v51 = (void (*)(uint64_t, uint64_t, unint64_t))*((void *)v129 + 2);
  uint64_t v122 = a4 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger;
  id v123 = v129 + 16;
  id v121 = v51;
  ((void (*)(char *))v51)(v19);
  id v52 = v47;
  id v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v53, v54))
  {
    os_log_type_t v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v120 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v55 = 138412290;
    unint64_t v134 = (unint64_t)v52;
    int v56 = v52;
    id v50 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v120 = v52;

    uint64_t v46 = (uint64_t)v127;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Firmware apply successful, firmware is updated %@", v55, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    id v53 = v52;
  }

  uint64_t v68 = (void (*)(char *, uint64_t))*((void *)v50 + 1);
  v68(v19, v11);
  uint64_t v61 = v130;
  uint64_t v69 = v130 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
  swift_beginAccess();
  sub_1000C8CA8(v69, (uint64_t)&v134);
  if (v136)
  {
    sub_1000A5D40((uint64_t)&v134, (uint64_t)v131);
    sub_1000C8D10((uint64_t)&v134);
    uint64_t v70 = v132;
    uint64_t v71 = v133;
    sub_1000A5DA4(v131, v132);
    swift_beginAccess();
    uint64_t v73 = *(void *)(v46 + 16);
    uint64_t v72 = *(void *)(v46 + 24);
    uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t))(v71 + 8);
    swift_bridgeObjectRetain();
    v74(v73, v72, 1, 0, v70, v71);
    swift_bridgeObjectRelease();
    sub_100099BCC((uint64_t)v131);
  }
  else
  {
    sub_1000C8D10((uint64_t)&v134);
  }
  uint64_t v75 = v125;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v76 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory;
  id v77 = objc_retain(*(id *)(*(void *)(v61 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory)
                          + 24));
  sub_1001891D0(v77);
  uint64_t v79 = v78;

  uint64_t v80 = &unk_1002B1000;
  id v129 = v79;
  if (v79)
  {
    v121(v75, v122, v128);
    id v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v81, v82))
    {
      id v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Updating accessory firmware version", v83, 2u);
      swift_slowDealloc();
    }

    v68((char *)v75, v128);
    id v84 = *(id *)(*(void *)(v61 + v76) + 24);
    uint64_t v85 = (uint64_t)v124;
    DockCoreInfo.identifier.getter();

    uint64_t v86 = sub_10013EDA0(v85);
    unint64_t v128 = v87;
    uint64_t v88 = *(void **)(*(void *)(v61 + v76) + 24);
    os_log_type_t v89 = *(void **)(v61 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_stagedAssetID);
    uint64_t v127 = (char *)v86;
    int v126 = (void *)OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_stagedAssetID;
    uint64_t v125 = qword_1002B1628;
    if (v89)
    {
      id v90 = v88;
      id v91 = [v89 assetVersion];
      if (v91)
      {
        uint64_t v92 = v91;
        uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v95 = v94;

LABEL_24:
        uint64_t v97 = dispatch thunk of DockCoreAccessory.serialNumber.getter();
        uint64_t v99 = v98;
        uint64_t v100 = dispatch thunk of DockCoreAccessory.model.getter();
        uint64_t v102 = v101;
        char v103 = dispatch thunk of DockCoreAccessory.isMagSafe.getter();
        dispatch thunk of DockCoreAccessory.certified.getter();
        sub_10018EEEC(v88, v93, v95, v97, v99, v100, v102, v103 & 1);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v61 = v130;
        *(unsigned char *)(*(void *)(v130 + v76) + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer) = 1;
        id v104 = *(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
        uint64_t v105 = (uint64_t)v127;
        uint64_t v106 = (void *)sub_10013E71C((uint64_t)v127, v128);
        sub_1000DF940(v106, v107);

        swift_bridgeObjectRelease();
        uint64_t v108 = *(void *)(v61 + v76);
        swift_retain();
        unint64_t v109 = sub_1001EA944((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v110 = (unint64_t *)(v108 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_sensorInfoMap);
        swift_beginAccess();
        *uint64_t v110 = v109;
        swift_release();
        swift_bridgeObjectRelease();
        *(void *)(v61 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_endPercent) = 0x4059000000000000;
        uint64_t v111 = *(void **)((char *)v126 + v61);
        if (v111)
        {
          id v112 = [v111 assetVersion];
          uint64_t v80 = &unk_1002B1000;
          if (v112)
          {
            uint64_t v113 = v112;
            uint64_t v114 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v116 = v115;
          }
          else
          {
            uint64_t v114 = 0;
            uint64_t v116 = 0;
          }
        }
        else
        {
          uint64_t v114 = 0;
          uint64_t v116 = 0;
          uint64_t v80 = (void *)&unk_1002B1000;
        }
        sub_1000C1718(v114, v116, 0, 1);
        swift_bridgeObjectRelease();
        sub_1000A6240(v105, v128);

        goto LABEL_30;
      }
    }
    else
    {
      id v96 = v88;
    }
    uint64_t v93 = 0;
    uint64_t v95 = 0;
    goto LABEL_24;
  }
LABEL_30:
  uint64_t v117 = v80[136];
  unint64_t v118 = *(void **)(v61 + v117);
  *(void *)(v61 + v117) = 0;

  uint64_t v59 = 0;
LABEL_31:
  if (*(unsigned char *)(v61 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state)) {
    *(unsigned char *)(v61 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state) = 0;
  }
  sub_1000C008C(v59);
  return swift_errorRelease();
}

uint64_t sub_1000C6C38(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)&v1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = sub_1000C8C14;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100275EB8;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v11;
  uint64_t v15 = v1;
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_1000C6EE8(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v79 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v65 = (char *)&v64 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v64 - v10;
  uint64_t v12 = *(void **)(*(void *)&a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager]
                 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateManager_uarpController);
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger;
  uint64_t v82 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_uarpAccessory;
  uint64_t v69 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory;
  id v14 = v12;
  uint64_t v85 = a2;
  id v15 = [a2 readData];
  if (!v15) {
    goto LABEL_23;
  }
  id v17 = v15;
  unint64_t v87 = &a1[v13];
  uint64_t v86 = (void (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v18 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v74 = &v89;
  *(void *)&long long v16 = 134218242;
  long long v76 = v16;
  uint64_t v73 = (char *)&type metadata for Any + 8;
  *(void *)&long long v16 = 138412802;
  long long v66 = v16;
  uint64_t v78 = (void (**)(char *, uint64_t))(v5 + 8);
  id v81 = v11;
  uint64_t v68 = a1;
  uint64_t v67 = v4;
  id v75 = v14;
  while (1)
  {
    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    id v84 = *v86;
    v84(v11, v87, v4);
    sub_1000A618C(v20, v22);
    sub_1000A618C(v20, v22);
    Swift::String v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      id v90 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = v76;
      uint64_t v26 = 0;
      switch(v22 >> 62)
      {
        case 1uLL:
          LODWORD(v26) = HIDWORD(v20) - v20;
          if (__OFSUB__(HIDWORD(v20), v20))
          {
            __break(1u);
LABEL_25:
            __break(1u);
          }
          uint64_t v26 = (int)v26;
LABEL_12:
          *(void *)(v25 + 4) = v26;
          *(_WORD *)(v25 + 12) = 2080;
          uint64_t v31 = sub_100139704(v20, v22);
          *(void *)(v25 + 14) = sub_1000993AC(v31, v32, (uint64_t *)&v90);
          swift_bridgeObjectRelease();
          sub_1000A6240(v20, v22);
          sub_1000A6240(v20, v22);
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "HDS socket received data of size %ld data is %s", (uint8_t *)v25, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v18 = v78;
          uint64_t v27 = *v78;
          uint64_t v11 = v81;
          break;
        case 2uLL:
          uint64_t v29 = *(void *)(v20 + 16);
          uint64_t v28 = *(void *)(v20 + 24);
          BOOL v30 = __OFSUB__(v28, v29);
          uint64_t v26 = v28 - v29;
          if (!v30) {
            goto LABEL_12;
          }
          goto LABEL_25;
        case 3uLL:
          goto LABEL_12;
        default:
          uint64_t v26 = BYTE6(v22);
          goto LABEL_12;
      }
    }
    else
    {
      sub_1000A6240(v20, v22);
      sub_1000A6240(v20, v22);

      uint64_t v27 = *v18;
    }
    id v83 = v27;
    v27(v11, v4);
    id v33 = *(id *)&a1[v82];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v90 = 0;
    unsigned int v35 = [v14 recvDataFromAccessory:v33 data:isa error:&v90];

    if (!v35) {
      break;
    }
    id v19 = v90;
    sub_1000A6240(v20, v22);
LABEL_4:
    id v17 = [v85 readData];
    if (!v17) {
      goto LABEL_23;
    }
  }
  id v36 = v90;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v37 = v79;
  v84(v79, v87, v4);
  id v38 = v14;
  swift_errorRetain();
  uint64_t v39 = a1;
  id v40 = v38;
  swift_errorRetain();
  id v41 = v39;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  int v77 = v43;
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc();
    Swift::String v45 = (void *)swift_slowAlloc();
    uint64_t v71 = v45;
    uint64_t v72 = (void *)swift_slowAlloc();
    id v90 = v72;
    *(_DWORD *)uint64_t v44 = v66;
    uint64_t v46 = *(void *)&a1[v69];
    uint64_t v80 = v41;
    uint64_t v47 = *(void **)(v46 + 24);
    uint64_t v88 = (uint64_t)v47;
    id v48 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *Swift::String v45 = v47;

    *(_WORD *)(v44 + 12) = 2080;
    id v49 = [v40 description];
    uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    os_log_t v70 = v42;
    uint64_t v51 = v50;
    unint64_t v53 = v52;

    a1 = v68;
    uint64_t v88 = sub_1000993AC(v51, v53, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 22) = 2112;
    swift_errorRetain();
    uint64_t v54 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v88 = v54;
    id v41 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v71[1] = v54;
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v55 = v70;
    _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v77, "Couldn't send data from accessory %@ to controller: %s: error: %@", (uint8_t *)v44, 0x20u);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    uint64_t v18 = v78;
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v4 = v67;
    swift_slowDealloc();

    int v56 = v79;
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();

    int v56 = v37;
  }
  v83(v56, v4);
  unsigned int v57 = [v85 isClosed];
  id v14 = v75;
  if (!v57)
  {
    sub_1000A6240(v20, v22);
    swift_errorRelease();
    uint64_t v11 = v81;
    goto LABEL_4;
  }
  uint64_t v85 = (char *)OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  uint64_t v58 = v41;
  uint64_t v59 = *(os_unfair_lock_s **)&v41[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock];
  swift_retain();
  os_unfair_lock_lock(v59 + 4);
  swift_release();
  *(void *)&v58[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket] = 0;
  swift_unknownObjectRelease();
  uint64_t v60 = *(os_unfair_lock_s **)&v85[(void)v58];
  swift_retain();
  os_unfair_lock_unlock(v60 + 4);
  swift_release();
  v84(v65, v87, v4);
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Socket closed", v63, 2u);
    swift_slowDealloc();

    swift_errorRelease();
    sub_1000A6240(v20, v22);
  }
  else
  {
    sub_1000A6240(v20, v22);
    swift_errorRelease();
  }
  v83(v65, v4);
LABEL_23:
  [*(id *)&a1[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer] resume];
}

uint64_t sub_1000C7864(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer;
  [*(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer) suspend];
  uint64_t v3 = *(void **)(a1 + v2);
  *(void *)(a1 + v2) = 0;

  sub_1000A6750();
  uint64_t v4 = swift_allocError();
  *(void *)uint64_t v5 = 0xD000000000000010;
  *(void *)(v5 + _Block_object_dispose(&STACK[0x3D0], 8) = 0x8000000100235B90;
  *(unsigned char *)(v5 + 16) = 7;
  sub_1000C008C(v4);

  return swift_errorRelease();
}

uint64_t getEnumTagSinglePayload for BTDeviceDiscoveryMode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FirmwareUpdateState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C7AC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FirmwareUpdateState()
{
  return &type metadata for FirmwareUpdateState;
}

unint64_t sub_1000C7AFC()
{
  unint64_t result = qword_1002A87A8;
  if (!qword_1002A87A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A87A8);
  }
  return result;
}

char *sub_1000C7B50(uint64_t a1, void *a2, void *a3)
{
  BOOL v7 = v3;
  Logger.init(subsystem:category:)();
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_txn;
  type metadata accessor for Transaction();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0;
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 16) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v9 + 80) = 0;
  *(unsigned char *)(v9 + 8_Block_object_dispose(&STACK[0x3D0], 8) = 1;
  Logger.init(subsystem:category:)();
  *(void *)(v9 + 64) = 0xD000000000000027;
  *(void *)(v9 + 72) = 0x8000000100235B60;
  *(void *)(v9 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0;
  *(void *)(v9 + 56) = 0x403E000000000000;
  swift_unknownObjectWeakAssign();
  *(void *)&v7[v8] = v9;
  v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_busy] = 0;
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket] = 0;
  uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  sub_1000992E8((uint64_t *)&unk_1002A87B0);
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 16) = 0;
  *(void *)&v7[v10] = v11;
  v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_dataStreamOpenInProgress] = 0;
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_maxSocketIdleDuration] = 0x404E000000000000;
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer] = 0;
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_assetID] = 0;
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_stagedAssetID] = 0;
  uint64_t v12 = &v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback];
  *(_OWORD *)uint64_t v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((void *)v12 + 4) = 0;
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_profile;
  *(void *)&v7[v13] = [objc_allocWithZone((Class)type metadata accessor for AccessoryFirmwareUpdateProfile()) init];
  v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_reachable] = 0;
  id v14 = &v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent];
  *(void *)id v14 = 0;
  v14[8] = 1;
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_endPercent] = 0;
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_firmwareUpdateInterval] = 0xBFF0000000000000;
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory] = a1;
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_uarpAccessory] = a2;
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_manager] = a3;
  id v15 = *(void **)(a1 + 40);
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue] = v15;
  v7[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_state] = 0;
  swift_retain();
  id v16 = a2;
  id v17 = a3;
  id v18 = v15;

  v21.receiver = v7;
  v21.super_class = (Class)type metadata accessor for AccessoryFirmwareUpdateSession();
  id v19 = (char *)[super init];
  *(void *)(*(void *)&v19[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_txn] + 4_Block_object_dispose(&STACK[0x3D0], 8) = &off_100275E28;
  swift_unknownObjectWeakAssign();
  return v19;
}

uint64_t sub_1000C7E44(const char *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v3);
  BOOL v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, a1, v9, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000C7FA4(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    double v10 = (double)a1 / (double)a2 * 100.0;
    uint64_t v11 = v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent;
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_startPercent + 8) == 1
      && v10 > 0.05)
    {
      *(double *)uint64_t v11 = v10;
      *(unsigned char *)(v11 + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
    }
  }
  else
  {
    double v10 = 0.0;
  }
  *(double *)(v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_endPercent) = v10;
  uint64_t v31 = 0;
  unint64_t v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  uint64_t v31 = 0xD000000000000010;
  unint64_t v32 = 0x8000000100235C60;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100240BE0;
  *(void *)(v12 + 56) = &type metadata for Double;
  *(void *)(v12 + 64) = &protocol witness table for Double;
  *(double *)(v12 + 32) = v10;
  v13._uint64_t countAndFlagsBits = String.init(format:_:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 0x656E6F6420;
  v14._object = (void *)0xE500000000000000;
  String.append(_:)(v14);
  uint64_t v16 = v31;
  unint64_t v15 = v32;
  uint64_t v34 = v31;
  unint64_t v35 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v6);
  swift_bridgeObjectRetain_n();
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v27 = v3;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v26 = v6;
    uint64_t v20 = (uint8_t *)v19;
    uint64_t v31 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    v28[0] = sub_1000993AC(v16, v15, &v31);
    uint64_t v3 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v26);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v21 = v3 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_msgFeedback;
  swift_beginAccess();
  sub_1000C8CA8(v21, (uint64_t)&v31);
  if (v33)
  {
    sub_1000A5D40((uint64_t)&v31, (uint64_t)v28);
    sub_1000C8D10((uint64_t)&v31);
    uint64_t v22 = v29;
    uint64_t v23 = v30;
    sub_1000A5DA4(v28, v29);
    swift_beginAccess();
    (*(void (**)(uint64_t, unint64_t, void, void, uint64_t, uint64_t))(v23 + 8))(v34, v35, 0, 0, v22, v23);
    swift_bridgeObjectRelease();
    return sub_100099BCC((uint64_t)v28);
  }
  else
  {
    swift_bridgeObjectRelease();
    return sub_1000C8D10((uint64_t)&v31);
  }
}

uint64_t sub_1000C83C8()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, (uint64_t)v0 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v1);
  uint64_t v5 = v0;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v18 = v1;
    uint64_t v9 = (uint8_t *)v8;
    id v17 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138412290;
    double v10 = (void *)(*(void **)((char *)&v5->isa
                              + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory))[3];
    uint64_t v19 = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v17 = v10;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "HDS socket closed for accessory %@", v9, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v18;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v6 = v5;
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock;
  Swift::String v13 = *(os_unfair_lock_s **)((char *)&v5->isa
                             + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketLock);
  swift_retain();
  os_unfair_lock_lock(v13 + 4);
  swift_release();
  *(Class *)((char *)&v5->isa + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socket) = 0;
  swift_unknownObjectRelease();
  Swift::String v14 = *(os_unfair_lock_s **)((char *)&v5->isa + v12);
  swift_retain();
  os_unfair_lock_unlock(v14 + 4);
  return swift_release();
}

uint64_t sub_1000C8648()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, (uint64_t)v0 + OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_logger, v1);
  id v5 = v0;
  swift_errorRetain();
  uint64_t v6 = (char *)v5;
  swift_errorRetain();
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  int v9 = v8;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v10 = swift_slowAlloc();
    HIDWORD(v1_Block_object_dispose(&STACK[0x3D0], 8) = v9;
    uint64_t v11 = v10;
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138412546;
    uint64_t v13 = *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_accessory];
    uint64_t v19 = v7;
    uint64_t v20 = v1;
    Swift::String v14 = *(void **)(v13 + 24);
    uint64_t v21 = (uint64_t)v14;
    id v15 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v12 = v14;

    *(_WORD *)(v11 + 12) = 2112;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v21 = v16;
    os_log_type_t v7 = v19;
    uint64_t v1 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v12[1] = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, BYTE4(v18), "HDS socket failed for accessory %@ with error %@", (uint8_t *)v11, 0x16u);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_1000C88D8()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_workQueue];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v0;
  aBlock[4] = sub_1000C8BB4;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100275E68;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = v9;
  uint64_t v13 = v0;
  static DispatchQoS.unspecified.getter();
  v15[1] = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_1000C8B7C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C8BB4()
{
  return sub_1000C7864(*(void *)(v0 + 16));
}

uint64_t sub_1000C8BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C8BCC()
{
  return swift_release();
}

uint64_t sub_1000C8BD4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000C8C14()
{
  sub_1000C6EE8(*(char **)(v0 + 16), *(char **)(v0 + 24));
}

uint64_t sub_1000C8C1C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C8C54()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000C8C9C()
{
  return sub_1000C5E74(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000C8CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8((uint64_t *)&unk_1002A87D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C8D10(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8((uint64_t *)&unk_1002A87D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C8D70()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000C8DC0()
{
  sub_1000C48C8(*(void *)(v0 + 16), *(uint8_t **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48));
}

unint64_t sub_1000C8DD0()
{
  unint64_t result = qword_1002A87E0;
  if (!qword_1002A87E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002A87E0);
  }
  return result;
}

uint64_t sub_1000C8E10(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1000C8E58()
{
  return [*(id *)(*(void *)(v0 + 16)+ OBJC_IVAR____TtC14dockaccessoryd30AccessoryFirmwareUpdateSession_socketIdleTimer) resume];
}

uint64_t sub_1000C8E74()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000C8EC4()
{
  sub_1000C2550(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(uint8_t **)(v0 + 40));
}

uint64_t sub_1000C8ED0()
{
  return sub_1000C119C(*(unsigned char **)(v0 + 16));
}

uint64_t sub_1000C8ED8()
{
  return sub_1000BFC54(*(unsigned char **)(v0 + 16));
}

uint64_t sub_1000C8EE0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000C8F20()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000A5ED8;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  void *v2 = v1;
  v2[1] = sub_1000A5ED8;
  return sub_1000C05A4();
}

uint64_t sub_1000C8FF4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C9034()
{
  return sub_1000BF7D8(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_1000C9088()
{
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void **)(v0 + 32);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 23328;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x657269707865205DLL;
  v6._object = (void *)0xEA00000000003D64;
  String.append(_:)(v6);
  if (*(unsigned char *)(v0 + 40)) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 40)) {
    unint64_t v8 = 0xE400000000000000;
  }
  else {
    unint64_t v8 = 0xE500000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  return 0xD00000000000001ALL;
}

uint64_t sub_1000C91BC()
{
  uint64_t v1 = (uint64_t *)(v0 + 80);
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  os_log_t v55 = sub_1001F9418(v2);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v56 = v0;
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v9 = 0;
  int64_t v57 = v8;
  while (v7)
  {
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
LABEL_21:
    id v15 = (void *)*v1;
    if (*(void *)(*v1 + 16))
    {
      uint64_t v16 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      double v19 = *(double *)(*(void *)(v3 + 56) + 8 * v11);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v20 = sub_10016DB60(v18, v17);
      if (v21)
      {
        double v22 = *(double *)(v15[7] + 8 * v20);
        swift_bridgeObjectRelease();
        if (v22 != v19)
        {
          double v23 = *(double *)(v56 + 96);
          if (v23 != 0.0)
          {
            double v24 = v23 / (double)*(uint64_t *)(v56 + 64);
            if (v19 * v22 < 0.0 || v19 == 0.0) {
              double v24 = v24 + v24;
            }
            if (v22 >= v19)
            {
              double v26 = v22 - v24;
              BOOL v27 = v26 < v19;
            }
            else
            {
              double v26 = v22 + v24;
              BOOL v27 = v19 < v26;
            }
            if (v27) {
              double v22 = v19;
            }
            else {
              double v22 = v26;
            }
          }
        }
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v29 = (void *)*v1;
        uint64_t v58 = (void *)*v1;
        *uint64_t v1 = 0x8000000000000000;
        unint64_t v31 = sub_10016DB60(v18, v17);
        uint64_t v32 = v29[2];
        BOOL v33 = (v30 & 1) == 0;
        uint64_t v34 = v32 + v33;
        if (__OFADD__(v32, v33)) {
          goto LABEL_65;
        }
        char v35 = v30;
        if (v29[3] >= v34)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            id v38 = v58;
            if (v30) {
              goto LABEL_43;
            }
          }
          else
          {
            sub_1001F72D8();
            id v38 = v58;
            if (v35) {
              goto LABEL_43;
            }
          }
        }
        else
        {
          sub_1001EF44C(v34, isUniquelyReferenced_nonNull_native);
          unint64_t v36 = sub_10016DB60(v18, v17);
          if ((v35 & 1) != (v37 & 1)) {
            goto LABEL_68;
          }
          unint64_t v31 = v36;
          id v38 = v58;
          if (v35)
          {
LABEL_43:
            *(double *)(v38[7] + 8 * v31) = v22;
            goto LABEL_47;
          }
        }
        v38[(v31 >> 6) + 8] |= 1 << v31;
        uint64_t v39 = (uint64_t *)(v38[6] + 16 * v31);
        *uint64_t v39 = v18;
        v39[1] = v17;
        *(double *)(v38[7] + 8 * v31) = v22;
        uint64_t v40 = v38[2];
        BOOL v41 = __OFADD__(v40, 1);
        uint64_t v42 = v40 + 1;
        if (v41) {
          goto LABEL_66;
        }
        v38[2] = v42;
        swift_bridgeObjectRetain();
LABEL_47:
        *uint64_t v1 = (uint64_t)v38;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        int64_t v8 = v57;
        uint64_t v4 = v3 + 64;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
  }
  int64_t v12 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  if (v12 >= v8) {
    goto LABEL_48;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v12);
  ++v9;
  if (v13) {
    goto LABEL_20;
  }
  int64_t v9 = v12 + 1;
  if (v12 + 1 >= v8) {
    goto LABEL_48;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v9);
  if (v13) {
    goto LABEL_20;
  }
  int64_t v9 = v12 + 2;
  if (v12 + 2 >= v8) {
    goto LABEL_48;
  }
  unint64_t v13 = *(void *)(v4 + 8 * v9);
  if (v13)
  {
LABEL_20:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    goto LABEL_21;
  }
  int64_t v14 = v12 + 3;
  if (v14 < v8)
  {
    unint64_t v13 = *(void *)(v4 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v9 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_67;
        }
        if (v9 >= v8) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v9);
        ++v14;
        if (v13) {
          goto LABEL_20;
        }
      }
    }
    int64_t v9 = v14;
    goto LABEL_20;
  }
LABEL_48:
  swift_release();
  uint64_t v43 = swift_bridgeObjectRetain();
  uint64_t v44 = sub_1001F9418(v43);
  swift_bridgeObjectRelease();
  BOOL v45 = sub_1000C9620((uint64_t)v55, (uint64_t)v44);
  swift_release();
  swift_release();
  if (!v45) {
    return 1;
  }
  uint64_t v46 = swift_bridgeObjectRetain();
  uint64_t v47 = (double *)sub_1001F9418(v46);
  swift_bridgeObjectRelease();
  uint64_t v48 = *((void *)v47 + 2);
  if (v48)
  {
    if (v47[4] == 0.0)
    {
      id v49 = v47 + 5;
      uint64_t v50 = v48 - 1;
      do
      {
        BOOL v51 = v50-- != 0;
        uint64_t v52 = v51;
        if (!v51) {
          break;
        }
        double v53 = *v49++;
      }
      while (v53 == 0.0);
    }
    else
    {
      uint64_t v52 = 1;
    }
  }
  else
  {
    uint64_t v52 = 0;
  }
  swift_release();
  return v52;
}

BOOL sub_1000C9620(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (double *)(a1 + 40);
  uint64_t v6 = (double *)(a2 + 40);
  do
  {
    double v7 = *v5++;
    double v8 = v7;
    double v9 = *v6++;
    double v10 = v9;
    BOOL v12 = v4-- != 0;
    BOOL result = v8 == v10;
  }
  while (v8 == v10 && v12);
  return result;
}

void sub_1000C9694()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = *(id *)(v0 + 72);
  OS_dispatch_semaphore.wait()();

  if (*(unsigned char *)(v1 + 170) == 1)
  {
LABEL_6:
    id v16 = *(id *)(v1 + 72);
    OS_dispatch_semaphore.signal()();
    double v8 = v16;

    return;
  }
  char v7 = sub_1000C91BC();
  if (*(unsigned char *)(v1 + 169) & 1) != 0 || (v7)
  {
    *(unsigned char *)(v1 + 169) = 0;
  }
  else
  {
    if (*(unsigned char *)(v1 + 168) != 1 || (*(unsigned char *)(v1 + 40) & 1) != 0) {
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v2);
    BOOL v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      int64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "stable, expiring", v14, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    *(unsigned char *)(v1 + 40) = 1;
    id v15 = *(void (**)(uint64_t))(v1 + 120);
    if (v15)
    {
      swift_retain();
      v15(v1);
      sub_1000BF118((uint64_t)v15);
    }
  }
  id v9 = *(id *)(v1 + 72);
  OS_dispatch_semaphore.signal()();

  double v10 = *(void (**)(uint64_t))(v1 + 104);
  if (v10)
  {
    swift_beginAccess();
    sub_1000CC298((uint64_t)v10);
    uint64_t v11 = swift_bridgeObjectRetain();
    v10(v11);
    swift_bridgeObjectRelease();
    sub_1000BF118((uint64_t)v10);
  }
}

void sub_1000C992C(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = *(id *)(v3 + 72);
  OS_dispatch_semaphore.wait()();

  *(_WORD *)(v4 + 169) = 1;
  uint64_t v71 = v4;
  if (a3)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v4 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v8);
    swift_retain();
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      v75[0] = v70;
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v16 = *(void *)(v71 + 24);
      uint64_t v72 = a2;
      unint64_t v17 = *(void *)(v71 + 32);
      swift_bridgeObjectRetain();
      uint64_t v74 = sub_1000993AC(v16, v17, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a2 = v72;
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 1024;
      LODWORD(v74) = *(_DWORD *)(v71 + 16);
      uint64_t v4 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "setting expireWhenStable true for animator owned by %s[%d]", (uint8_t *)v15, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(unsigned char *)(v4 + 16_Block_object_dispose(&STACK[0x3D0], 8) = 1;
  }
  unint64_t v18 = *(void *)(a1 + 16);
  if (!v18)
  {
LABEL_38:
    uint64_t v59 = (void *)v71;
    id v60 = *(id *)(v71 + 72);
    OS_dispatch_semaphore.signal()();

    id v61 = [objc_allocWithZone((Class)NSDate) init];
    [v61 timeIntervalSince1970];
    uint64_t v63 = v62;

    v59[17] = v63;
    if (!v59[18])
    {
      uint64_t v64 = swift_allocObject();
      swift_weakInit();
      uint64_t v65 = (void *)v59[19];
      uint64_t v66 = swift_allocObject();
      *(void *)(v66 + 16) = v64;
      *(void *)(v66 + 24) = v59;
      objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
      swift_retain();
      id v67 = v65;
      swift_retain();
      uint64_t v68 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
      uint64_t v69 = (void *)v59[18];
      v59[18] = v68;
      swift_release();
    }
    return;
  }
  if (v18 > a2[2]) {
    goto LABEL_45;
  }
  double v19 = (void *)(v71 + 88);
  unint64_t v20 = a2 + 4;
  uint64_t v72 = (void *)(v71 + 80);
  swift_beginAccess();
  char v21 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v22 = *v20;
    if ((~*v20 & 0x7FF0000000000000) == 0) {
      goto LABEL_11;
    }
    uint64_t v24 = *(v21 - 1);
    uint64_t v23 = *v21;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v73 = (void *)*v19;
    double v26 = v73;
    *double v19 = 0x8000000000000000;
    unint64_t v28 = sub_10016DB60(v24, v23);
    uint64_t v29 = v26[2];
    BOOL v30 = (v27 & 1) == 0;
    uint64_t v31 = v29 + v30;
    if (__OFADD__(v29, v30)) {
      break;
    }
    char v32 = v27;
    if (v26[3] >= v31)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        char v35 = v73;
        if (v27) {
          goto LABEL_20;
        }
      }
      else
      {
        sub_1001F72D8();
        char v35 = v73;
        if (v32) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      sub_1001EF44C(v31, isUniquelyReferenced_nonNull_native);
      unint64_t v33 = sub_10016DB60(v24, v23);
      if ((v32 & 1) != (v34 & 1)) {
        goto LABEL_46;
      }
      unint64_t v28 = v33;
      char v35 = v73;
      if (v32)
      {
LABEL_20:
        *(void *)(v35[7] + 8 * v2_Block_object_dispose(&STACK[0x3D0], 8) = v22;
        goto LABEL_24;
      }
    }
    v35[(v28 >> 6) + 8] |= 1 << v28;
    unint64_t v36 = (uint64_t *)(v35[6] + 16 * v28);
    uint64_t *v36 = v24;
    v36[1] = v23;
    *(void *)(v35[7] + 8 * v2_Block_object_dispose(&STACK[0x3D0], 8) = v22;
    uint64_t v37 = v35[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_43;
    }
    v35[2] = v39;
    swift_bridgeObjectRetain();
LABEL_24:
    *double v19 = v35;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v40 = *v21;
    if (*(void *)(*v72 + 16))
    {
      uint64_t v41 = *(v21 - 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10016DB60(v41, v40);
      LOBYTE(v41) = v42;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v41) {
        goto LABEL_11;
      }
      uint64_t v40 = *v21;
    }
    uint64_t v43 = *(v21 - 1);
    uint64_t v44 = v72;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char v45 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v73 = (void *)*v44;
    uint64_t v46 = v73;
    void *v44 = 0x8000000000000000;
    unint64_t v48 = sub_10016DB60(v43, v40);
    uint64_t v49 = v46[2];
    BOOL v50 = (v47 & 1) == 0;
    uint64_t v51 = v49 + v50;
    if (__OFADD__(v49, v50)) {
      goto LABEL_42;
    }
    char v52 = v47;
    if (v46[3] >= v51)
    {
      if (v45)
      {
        os_log_t v55 = v73;
        if ((v47 & 1) == 0) {
          goto LABEL_34;
        }
      }
      else
      {
        sub_1001F72D8();
        os_log_t v55 = v73;
        if ((v52 & 1) == 0) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      sub_1001EF44C(v51, v45);
      unint64_t v53 = sub_10016DB60(v43, v40);
      if ((v52 & 1) != (v54 & 1)) {
        goto LABEL_46;
      }
      unint64_t v48 = v53;
      os_log_t v55 = v73;
      if ((v52 & 1) == 0)
      {
LABEL_34:
        v55[(v48 >> 6) + 8] |= 1 << v48;
        uint64_t v56 = (uint64_t *)(v55[6] + 16 * v48);
        uint64_t *v56 = v43;
        v56[1] = v40;
        *(void *)(v55[7] + 8 * v4_Block_object_dispose(&STACK[0x3D0], 8) = 0;
        uint64_t v57 = v55[2];
        BOOL v38 = __OFADD__(v57, 1);
        uint64_t v58 = v57 + 1;
        if (v38) {
          goto LABEL_44;
        }
        v55[2] = v58;
        swift_bridgeObjectRetain();
        goto LABEL_10;
      }
    }
    *(void *)(v55[7] + 8 * v4_Block_object_dispose(&STACK[0x3D0], 8) = 0;
LABEL_10:
    *uint64_t v72 = v55;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
LABEL_11:
    v21 += 2;
    ++v20;
    if (!--v18) {
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1000CA02C(char a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = *(id *)(v2 + 72);
  OS_dispatch_semaphore.wait()();

  *(_WORD *)(v3 + 169) = 1;
  uint64_t v74 = v3;
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v6);
    swift_retain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      v80[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      uint64_t v14 = *(void *)(v74 + 24);
      unint64_t v15 = *(void *)(v74 + 32);
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_1000993AC(v14, v15, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 1024;
      LODWORD(v79) = *(_DWORD *)(v74 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "setting expireWhenStable true for animator owned by %s[%d]", (uint8_t *)v13, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v3 = v74;
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(unsigned char *)(v3 + 16_Block_object_dispose(&STACK[0x3D0], 8) = 1;
  }
  uint64_t v16 = (void *)(v3 + 88);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v3 + 88);
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v75 = v17 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(v17 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v22 = v3 + 80;
  uint64_t v77 = v17;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v23 = 0;
  int64_t v76 = (unint64_t)(v19 + 63) >> 6;
  if (v21) {
    goto LABEL_12;
  }
LABEL_13:
  int64_t v26 = v23 + 1;
  if (__OFADD__(v23, 1)) {
    goto LABEL_60;
  }
  if (v26 >= v76) {
    goto LABEL_54;
  }
  unint64_t v27 = *(void *)(v75 + 8 * v26);
  ++v23;
  if (!v27)
  {
    int64_t v23 = v26 + 1;
    if (v26 + 1 >= v76) {
      goto LABEL_54;
    }
    unint64_t v27 = *(void *)(v75 + 8 * v23);
    if (!v27)
    {
      int64_t v23 = v26 + 2;
      if (v26 + 2 >= v76) {
        goto LABEL_54;
      }
      unint64_t v27 = *(void *)(v75 + 8 * v23);
      if (!v27)
      {
        int64_t v28 = v26 + 3;
        if (v28 < v76)
        {
          unint64_t v27 = *(void *)(v75 + 8 * v28);
          if (v27)
          {
            int64_t v23 = v28;
            goto LABEL_26;
          }
          while (1)
          {
            int64_t v23 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_62;
            }
            if (v23 >= v76) {
              break;
            }
            unint64_t v27 = *(void *)(v75 + 8 * v23);
            ++v28;
            if (v27) {
              goto LABEL_26;
            }
          }
        }
LABEL_54:
        swift_release();
        uint64_t v63 = (void *)v74;
        id v64 = *(id *)(v74 + 72);
        OS_dispatch_semaphore.signal()();

        id v65 = [objc_allocWithZone((Class)NSDate) init];
        [v65 timeIntervalSince1970];
        uint64_t v67 = v66;

        v63[17] = v67;
        if (!v63[18])
        {
          uint64_t v68 = swift_allocObject();
          swift_weakInit();
          uint64_t v69 = (void *)v63[19];
          uint64_t v70 = swift_allocObject();
          *(void *)(v70 + 16) = v68;
          *(void *)(v70 + 24) = v63;
          objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
          swift_retain();
          id v71 = v69;
          swift_retain();
          uint64_t v72 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
          uint64_t v73 = (void *)v63[18];
          v63[18] = v72;
          swift_release();
        }
        return;
      }
    }
  }
LABEL_26:
  unint64_t v21 = (v27 - 1) & v27;
  for (unint64_t i = __clz(__rbit64(v27)) + (v23 << 6); ; unint64_t i = v24 | (v23 << 6))
  {
    uint64_t v29 = (uint64_t *)(*(void *)(v77 + 48) + 16 * i);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v78 = (void *)*v16;
    unint64_t v33 = v78;
    void *v16 = 0x8000000000000000;
    unint64_t v35 = sub_10016DB60(v31, v30);
    uint64_t v36 = v33[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37)) {
      break;
    }
    char v39 = v34;
    if (v33[3] >= v38)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        char v42 = v78;
        if (v34) {
          goto LABEL_34;
        }
      }
      else
      {
        sub_1001F72D8();
        char v42 = v78;
        if (v39) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      sub_1001EF44C(v38, isUniquelyReferenced_nonNull_native);
      unint64_t v40 = sub_10016DB60(v31, v30);
      if ((v39 & 1) != (v41 & 1)) {
        goto LABEL_63;
      }
      unint64_t v35 = v40;
      char v42 = v78;
      if (v39)
      {
LABEL_34:
        *(double *)(v42[7] + 8 * v35) = a2;
        goto LABEL_38;
      }
    }
    v42[(v35 >> 6) + 8] |= 1 << v35;
    uint64_t v43 = (uint64_t *)(v42[6] + 16 * v35);
    uint64_t *v43 = v31;
    v43[1] = v30;
    *(double *)(v42[7] + 8 * v35) = a2;
    uint64_t v44 = v42[2];
    BOOL v45 = __OFADD__(v44, 1);
    uint64_t v46 = v44 + 1;
    if (v45) {
      goto LABEL_59;
    }
    v42[2] = v46;
    swift_bridgeObjectRetain();
LABEL_38:
    void *v16 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (!*(void *)(*(void *)v22 + 16)) {
      goto LABEL_43;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10016DB60(v31, v30);
    char v48 = v47;
    swift_bridgeObjectRelease();
    if ((v48 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_43:
      swift_beginAccess();
      char v49 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v78 = *(void **)v22;
      BOOL v50 = v78;
      *(void *)uint64_t v22 = 0x8000000000000000;
      unint64_t v52 = sub_10016DB60(v31, v30);
      uint64_t v53 = v50[2];
      BOOL v54 = (v51 & 1) == 0;
      uint64_t v55 = v53 + v54;
      if (__OFADD__(v53, v54)) {
        goto LABEL_58;
      }
      char v56 = v51;
      if (v50[3] >= v55)
      {
        if (v49)
        {
          uint64_t v59 = v78;
          if ((v51 & 1) == 0) {
            goto LABEL_50;
          }
        }
        else
        {
          sub_1001F72D8();
          uint64_t v59 = v78;
          if ((v56 & 1) == 0) {
            goto LABEL_50;
          }
        }
      }
      else
      {
        sub_1001EF44C(v55, v49);
        unint64_t v57 = sub_10016DB60(v31, v30);
        if ((v56 & 1) != (v58 & 1)) {
          goto LABEL_63;
        }
        unint64_t v52 = v57;
        uint64_t v59 = v78;
        if ((v56 & 1) == 0)
        {
LABEL_50:
          v59[(v52 >> 6) + 8] |= 1 << v52;
          id v60 = (uint64_t *)(v59[6] + 16 * v52);
          uint64_t *v60 = v31;
          v60[1] = v30;
          *(void *)(v59[7] + 8 * v52) = 0;
          uint64_t v61 = v59[2];
          BOOL v45 = __OFADD__(v61, 1);
          uint64_t v62 = v61 + 1;
          if (v45) {
            goto LABEL_61;
          }
          v59[2] = v62;
          swift_bridgeObjectRetain();
          goto LABEL_11;
        }
      }
      *(void *)(v59[7] + 8 * v52) = 0;
LABEL_11:
      *(void *)uint64_t v22 = v59;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      if (!v21) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_13;
    }
LABEL_12:
    unint64_t v24 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1000CA81C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [objc_allocWithZone((Class)NSDate) init];
  [v7 timeIntervalSince1970];
  double v9 = v8;

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    double v11 = *(double *)(Strong + 136);
    swift_release();
  }
  else
  {
    id v12 = [objc_allocWithZone((Class)NSDate) init];
    [v12 timeIntervalSince1970];
    double v11 = v13;
  }
  swift_beginAccess();
  uint64_t v14 = swift_weakLoadStrong();
  if (v14)
  {
    double v15 = *(double *)(v14 + 160);
    swift_release();
  }
  else
  {
    double v15 = INFINITY;
  }
  swift_beginAccess();
  uint64_t v16 = swift_weakLoadStrong();
  if (v16)
  {
    double v17 = *(double *)(v16 + 136);
    swift_release();
    if (v17 != 0.0)
    {
      double v18 = v9 - v11;
      if (v15 < v18)
      {
        swift_beginAccess();
        uint64_t v19 = swift_weakLoadStrong();
        if (v19)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v19 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v3);
          swift_release();
          swift_retain();
          uint64_t v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = swift_slowAlloc();
            uint64_t v38 = swift_slowAlloc();
            v40[0] = v38;
            *(_DWORD *)uint64_t v22 = 136315650;
            v37[1] = v22 + 4;
            uint64_t v24 = *(void *)(a2 + 24);
            unint64_t v23 = *(void *)(a2 + 32);
            swift_bridgeObjectRetain();
            uint64_t v39 = sub_1000993AC(v24, v23, v40);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v22 + 12) = 1024;
            LODWORD(v39) = *(_DWORD *)(a2 + 16);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            *(_WORD *)(v22 + 1_Block_object_dispose(&STACK[0x3D0], 8) = 2048;
            uint64_t v39 = *(void *)&v18;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "animator owned by %s[%d] hasn't received commands in %f sec, stopping actuators & expiring", (uint8_t *)v22, 0x1Cu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release();
          }
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        }
        swift_beginAccess();
        if (swift_weakLoadStrong())
        {
          swift_beginAccess();
          swift_bridgeObjectRetain();
          swift_release();
          swift_beginAccess();
          uint64_t v25 = swift_weakLoadStrong();
          if (v25)
          {
            uint64_t v26 = v25;
            swift_beginAccess();
            uint64_t v27 = *(void *)(v26 + 80);
            swift_bridgeObjectRetain();
            swift_release();
            unint64_t v28 = *(void *)(v27 + 16);
            swift_bridgeObjectRelease();
            swift_beginAccess();
            if (swift_weakLoadStrong())
            {
              uint64_t v29 = swift_bridgeObjectRetain();
              uint64_t v30 = sub_1001F9500(v29);
              swift_bridgeObjectRelease();
              uint64_t v31 = sub_1000CAD50(v28, 0.0);
              sub_1000C992C((uint64_t)v30, v31, 1);
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
            }
          }
          swift_bridgeObjectRelease();
        }
        swift_beginAccess();
        uint64_t v32 = swift_weakLoadStrong();
        if (v32)
        {
          uint64_t v33 = v32;
          char v34 = *(void **)(v32 + 144);
          if (v34)
          {
            id v35 = v34;
            dispatch thunk of RepeatingTimer.suspend()();

            uint64_t v36 = *(void **)(v33 + 144);
          }
          else
          {
            uint64_t v36 = 0;
          }
          *(void *)(v33 + 144) = 0;
          swift_release();
        }
      }
    }
  }
}

void *sub_1000CAD50(unint64_t a1, double a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    BOOL result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (!a1) {
    return _swiftEmptyArrayStorage;
  }
  BOOL result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
  result[2] = a1;
  uint64_t v4 = (double *)(result + 4);
  if (a1 < 4)
  {
    unint64_t v5 = 0;
    double v6 = a2;
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  v4 += a1 & 0xFFFFFFFFFFFFFFFCLL;
  double v6 = a2;
  int64x2_t v7 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
  double v8 = (int64x2_t *)(result + 6);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    int64x2_t *v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

void *sub_1000CAE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    BOOL result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a3)
    {
      double v6 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      int64x2_t v7 = v6;
      v6[2] = a3;
      void v6[4] = a1;
      v6[5] = a2;
      if (a3 != 1)
      {
        v6[6] = a1;
        v6[7] = a2;
        uint64_t v8 = a3 - 2;
        if (v8)
        {
          unint64_t v9 = v6 + 9;
          do
          {
            *(v9 - 1) = a1;
            void *v9 = a2;
            swift_bridgeObjectRetain();
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }
    return v7;
  }
  return result;
}

uint64_t sub_1000CAF40()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v37 = *(void *)(v1 - 8);
  uint64_t v38 = v1;
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v36 = (char *)&v35 - v5;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v11 - 8);
  unint64_t v12 = sub_1001E9BF8((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess();
  v0[10] = v12;
  swift_bridgeObjectRelease();
  unint64_t v13 = sub_1001E9BF8((uint64_t)_swiftEmptyArrayStorage);
  swift_beginAccess();
  v0[11] = v13;
  swift_bridgeObjectRelease();
  if (v0[6])
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v4, (uint64_t)v0 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v38);
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      unint64_t v40 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_retain();
      unint64_t v17 = sub_1000C9088();
      unint64_t v19 = v18;
      swift_release();
      uint64_t v39 = sub_1000993AC(v17, v19, (uint64_t *)&v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "animator loop already running: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v4, v38);
  }
  else
  {
    sub_1000B8610();
    static DispatchQoS.unspecified.getter();
    unint64_t v40 = _swiftEmptyArrayStorage;
    sub_1000CC1E4();
    sub_1000992E8(&qword_1002A9000);
    sub_1000CC23C();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v6);
    uint64_t v20 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    os_log_type_t v21 = (void *)v0[6];
    v0[6] = v20;

    swift_allocObject();
    swift_weakInit();
    uint64_t v22 = (void *)v0[6];
    id v23 = objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
    id v24 = v22;
    swift_retain();
    uint64_t v25 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
    uint64_t v26 = (void *)v0[7];
    v0[7] = v25;

    uint64_t v27 = v36;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, (uint64_t)v0 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v38);
    swift_retain_n();
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      unint64_t v40 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      id v35 = v30 + 4;
      swift_retain();
      unint64_t v31 = sub_1000C9088();
      unint64_t v33 = v32;
      swift_release();
      uint64_t v39 = sub_1000993AC(v31, v33, (uint64_t *)&v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "animator loop started: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v38);
    return swift_release();
  }
}

uint64_t sub_1000CB5E0()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000C9694();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000CB638()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27 - v7;
  if (*(void *)(v0 + 48))
  {
    unint64_t v9 = *(void **)(v0 + 56);
    if (v9)
    {
      id v10 = v9;
      dispatch thunk of RepeatingTimer.suspend()();

      unint64_t v9 = *(void **)(v1 + 56);
    }
    *(void *)(v1 + 56) = 0;

    uint64_t v11 = *(void **)(v1 + 48);
    *(void *)(v1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0;

    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v1 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v2);
    swift_retain_n();
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v28 = v2;
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v27 = v14 + 4;
      swift_retain();
      unint64_t v15 = sub_1000C9088();
      unint64_t v17 = v16;
      swift_release();
      uint64_t v29 = sub_1000993AC(v15, v17, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "animator stopped: %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v28);
    }

    swift_release_n();
    uint64_t v25 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    uint64_t v26 = v8;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v0 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger, v2);
    swift_retain_n();
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v28 = v2;
      *(_DWORD *)os_log_type_t v21 = 136315138;
      uint64_t v27 = v21 + 4;
      swift_retain();
      unint64_t v22 = sub_1000C9088();
      unint64_t v24 = v23;
      swift_release();
      uint64_t v29 = sub_1000993AC(v22, v24, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "animator not running: %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v28);
    }

    swift_release_n();
    uint64_t v25 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    uint64_t v26 = v6;
  }
  return v25(v26, v2);
}

void sub_1000CBA6C()
{
  uint64_t v1 = v0;
  id v2 = *(id *)(v0 + 72);
  OS_dispatch_semaphore.wait()();

  uint64_t v3 = *(void **)(v1 + 144);
  if (v3)
  {
    id v4 = v3;
    dispatch thunk of RepeatingTimer.suspend()();

    uint64_t v3 = *(void **)(v1 + 144);
  }
  *(void *)(v1 + 144) = 0;

  *(unsigned char *)(v1 + 170) = 1;
  swift_beginAccess();
  swift_retain();
  uint64_t v5 = swift_bridgeObjectRetain();
  sub_1000CC2EC(v5, v1);
  swift_bridgeObjectRelease();
  swift_release();
  id v6 = *(id *)(v1 + 72);
  OS_dispatch_semaphore.signal()();

  uint64_t v7 = *(void (**)(uint64_t))(v1 + 104);
  if (v7)
  {
    sub_1000CC298((uint64_t)v7);
    uint64_t v8 = swift_bridgeObjectRetain();
    v7(v8);
    sub_1000BF118((uint64_t)v7);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000CBB74()
{
  uint64_t v1 = v0;
  id v2 = *(void **)(v0 + 144);
  if (v2)
  {
    id v3 = v2;
    dispatch thunk of RepeatingTimer.suspend()();

    id v2 = *(void **)(v1 + 144);
  }
  *(void *)(v1 + 144) = 0;

  sub_1000CB638();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000BF118(*(void *)(v1 + 104));
  sub_1000BF118(*(void *)(v1 + 120));

  uint64_t v4 = v1 + OBJC_IVAR____TtC14dockaccessoryd16VelocityAnimator_logger;
  uint64_t v5 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return v1;
}

uint64_t sub_1000CBC58()
{
  sub_1000CBB74();

  return swift_deallocClassInstance();
}

uint64_t sub_1000CBCB0()
{
  return type metadata accessor for VelocityAnimator();
}

uint64_t type metadata accessor for VelocityAnimator()
{
  uint64_t result = qword_1002A8848;
  if (!qword_1002A8848) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000CBD04()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

unint64_t sub_1000CBE08()
{
  return sub_1000C9088();
}

uint64_t sub_1000CBE2C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  int v33 = a1;
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v13);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v14 - 8);
  *(unsigned char *)(v7 + 40) = 0;
  *(void *)(v7 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0;
  *(void *)(v7 + 56) = 0;
  *(void *)(v7 + 64) = 20;
  *(void *)(v7 + 72) = dispatch_semaphore_create(1);
  *(void *)(v7 + 80) = sub_1001E9BF8((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v7 + 8_Block_object_dispose(&STACK[0x3D0], 8) = sub_1001E9BF8((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v7 + 96) = 0x4018000000000000;
  sub_1000B8610();
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 120) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = _swiftEmptyArrayStorage;
  sub_1000CC1E4();
  sub_1000992E8(&qword_1002A9000);
  sub_1000CC23C();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v9);
  *(void *)(v7 + 152) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v7 + 160) = 0x4000000000000000;
  *(_WORD *)(v7 + 16_Block_object_dispose(&STACK[0x3D0], 8) = 0;
  *(unsigned char *)(v7 + 170) = 0;
  Logger.init(subsystem:category:)();
  uint64_t v15 = *(void *)(v7 + 104);
  uint64_t v16 = v29;
  uint64_t v17 = v30;
  *(void *)(v8 + 104) = v29;
  *(void *)(v8 + 112) = v17;
  sub_1000CC298(v16);
  sub_1000BF118(v15);
  uint64_t v18 = *(void *)(v8 + 120);
  uint64_t v19 = v31;
  uint64_t v20 = v32;
  *(void *)(v8 + 120) = v31;
  *(void *)(v8 + 12_Block_object_dispose(&STACK[0x3D0], 8) = v20;
  sub_1000CC298(v19);
  sub_1000BF118(v18);
  *(_DWORD *)(v8 + 16) = v33;
  uint64_t v21 = v35;
  *(void *)(v8 + 24) = v34;
  *(void *)(v8 + 32) = v21;
  sub_1000CAF40();
  uint64_t v22 = swift_allocObject();
  swift_weakInit();
  unint64_t v23 = *(void **)(v8 + 152);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v22;
  *(void *)(v24 + 24) = v8;
  objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
  id v25 = v23;
  swift_retain();
  swift_retain();
  uint64_t v26 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
  uint64_t v27 = *(void **)(v8 + 144);
  *(void *)(v8 + 144) = v26;
  swift_release();

  return v8;
}

unint64_t sub_1000CC1E4()
{
  unint64_t result = qword_1002A8530;
  if (!qword_1002A8530)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8530);
  }
  return result;
}

unint64_t sub_1000CC23C()
{
  unint64_t result = qword_1002A8540;
  if (!qword_1002A8540)
  {
    sub_100099D14(&qword_1002A9000);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8540);
  }
  return result;
}

uint64_t sub_1000CC298(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000CC2A8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000CC2E4()
{
  sub_1000CA81C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000CC2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  uint64_t v5 = (void *)(a2 + 80);
  int64_t v32 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
    }
    else
    {
      int64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_38;
      }
      if (v9 >= v32) {
        return swift_release();
      }
      unint64_t v10 = *(void *)(v31 + 8 * v9);
      ++v6;
      if (!v10)
      {
        int64_t v6 = v9 + 1;
        if (v9 + 1 >= v32) {
          return swift_release();
        }
        unint64_t v10 = *(void *)(v31 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 2;
          if (v9 + 2 >= v32) {
            return swift_release();
          }
          unint64_t v10 = *(void *)(v31 + 8 * v6);
          if (!v10)
          {
            int64_t v6 = v9 + 3;
            if (v9 + 3 >= v32) {
              return swift_release();
            }
            unint64_t v10 = *(void *)(v31 + 8 * v6);
            if (!v10)
            {
              int64_t v11 = v9 + 4;
              if (v11 >= v32) {
                return swift_release();
              }
              unint64_t v10 = *(void *)(v31 + 8 * v11);
              if (!v10)
              {
                while (1)
                {
                  int64_t v6 = v11 + 1;
                  if (__OFADD__(v11, 1)) {
                    goto LABEL_39;
                  }
                  if (v6 >= v32) {
                    return swift_release();
                  }
                  unint64_t v10 = *(void *)(v31 + 8 * v6);
                  ++v11;
                  if (v10) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v6 = v11;
            }
          }
        }
      }
LABEL_23:
      unint64_t v4 = (v10 - 1) & v10;
      unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
    }
    unint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = (void *)*v5;
    uint64_t v34 = (void *)*v5;
    *uint64_t v5 = 0x8000000000000000;
    unint64_t v18 = sub_10016DB60(v14, v13);
    uint64_t v19 = v16[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (v16[3] >= v21)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        id v25 = v34;
        if (v17) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_1001F72D8();
        id v25 = v34;
        if (v22) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_1001EF44C(v21, isUniquelyReferenced_nonNull_native);
      unint64_t v23 = sub_10016DB60(v14, v13);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_40;
      }
      unint64_t v18 = v23;
      id v25 = v34;
      if (v22)
      {
LABEL_4:
        *(void *)(v25[7] + 8 * v1_Block_object_dispose(&STACK[0x3D0], 8) = 0;
        goto LABEL_5;
      }
    }
    v25[(v18 >> 6) + 8] |= 1 << v18;
    uint64_t v26 = (uint64_t *)(v25[6] + 16 * v18);
    uint64_t *v26 = v14;
    v26[1] = v13;
    *(void *)(v25[7] + 8 * v1_Block_object_dispose(&STACK[0x3D0], 8) = 0;
    uint64_t v27 = v25[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_37;
    }
    v25[2] = v29;
    swift_bridgeObjectRetain();
LABEL_5:
    *uint64_t v5 = v25;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1000CC5EC()
{
  return sub_1000CB5E0();
}

uint64_t sub_1000CC5FC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000CC640()
{
  v1[3] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000CC700, 0, 0);
}

uint64_t sub_1000CC700()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void **)(Strong + 32);
  v0[7] = v2;
  id v3 = v2;
  swift_release();
  if (!v2) {
    goto LABEL_16;
  }
  self;
  uint64_t v4 = (void *)swift_dynamicCastObjCClass();
  if (!v4)
  {

LABEL_16:
    uint64_t v28 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    void *v29 = 0;
    v29[1] = 0xE000000000000000;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v28 - 8) + 104))(v29, enum case for Errors.AccessoryServerNil(_:), v28);
    swift_willThrow();
    goto LABEL_17;
  }
  uint64_t v5 = v4;
  id v6 = [v4 primaryAccessory];
  if (v6)
  {
    unint64_t v7 = v6;
    unint64_t v8 = self;
    sub_1000992E8((uint64_t *)&unk_1002A9F50);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100240BE0;
    *(void *)(v9 + 56) = &type metadata for UInt32;
    *(void *)(v9 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v9 + 32) = 568;
    String.init(format:_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [v8 UUIDWithString:v10];

    NSString v12 = [v11 UUIDString];
    if (!v12)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_100240BE0;
    *(void *)(v13 + 56) = &type metadata for UInt32;
    *(void *)(v13 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v13 + 32) = 567;
    String.init(format:_:)();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v15 = [v8 UUIDWithString:v14];

    NSString v16 = [v15 UUIDString];
    if (!v16)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v17 = [v7 characteristicOfType:v12 serviceType:v16];
    v0[8] = v17;

    if (v17)
    {
      (*(void (**)(void, uint64_t, void))(v0[5] + 16))(v0[6], v0[3] + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v0[4]);
      unint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        BOOL v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Reading supported diagnostics snapshot...", v20, 2u);
        swift_slowDealloc();
      }
      uint64_t v22 = v0[5];
      uint64_t v21 = v0[6];
      uint64_t v24 = v0[3];
      uint64_t v23 = v0[4];

      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
      id v25 = (void *)swift_task_alloc();
      v0[9] = v25;
      v25[2] = v5;
      v25[3] = v17;
      v25[4] = v24;
      uint64_t v26 = (void *)swift_task_alloc();
      v0[10] = v26;
      uint64_t v27 = sub_1000992E8(&qword_1002A8D90);
      void *v26 = v0;
      v26[1] = sub_1000CCC80;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000019, 0x8000000100236280, sub_1000D0488, v25, v27);
    }
  }
  uint64_t v31 = type metadata accessor for Errors();
  sub_1000AADE4();
  swift_allocError();
  *int64_t v32 = 0xD00000000000002DLL;
  v32[1] = 0x8000000100236250;
  (*(void (**)(void *, void, uint64_t))(*(void *)(v31 - 8) + 104))(v32, enum case for Errors.NotFound(_:), v31);
  swift_willThrow();

LABEL_17:
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_1000CCC80()
{
  *(void *)(*(void *)v1 + 8_Block_object_dispose(&STACK[0x3D0], 8) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000CCE18;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000CCD9C;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_1000CCD9C()
{
  uint64_t v1 = *(void **)(v0 + 56);

  uint64_t v2 = *(void *)(v0 + 16);
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v3(v2);
}

uint64_t sub_1000CCE18()
{
  uint64_t v1 = *(void **)(v0 + 56);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1000CCE94(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v19 = a2;
  uint64_t v7 = sub_1000992E8(&qword_1002A8D98);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  sub_1000992E8(&qword_1002A8340);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100240BF0;
  *(void *)(v10 + 32) = a3;
  aBlock[0] = v10;
  specialized Array._endMutation()();
  sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
  id v11 = a3;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void **)(a4 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15 + v14, (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_1000D052C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001A6714;
  void aBlock[3] = &unk_100276268;
  NSString v16 = _Block_copy(aBlock);
  id v17 = v13;
  swift_release();
  [v19 readCharacteristicValues:isa timeout:v17 completionQueue:v16 completionHandler:0.0];
  _Block_release(v16);
}

uint64_t sub_1000CD0E0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
LABEL_3:
    sub_1000992E8(&qword_1002A8D98);
    return CheckedContinuation.resume(throwing:)();
  }
  if (!a1)
  {
    uint64_t v3 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    void *v4 = 0xD000000000000038;
    v4[1] = 0x80000001002362C0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v4, enum case for Errors.CharacteristicReadWriteFailure(_:), v3);
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  sub_1000992E8(&qword_1002A8D98);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1000CD1E4(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[11] = v4;
  void *v4 = v2;
  v4[1] = sub_1000CD2D0;
  return sub_1000CC640();
}

uint64_t sub_1000CD2D0(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = (void *)*v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v6 = v5[1];
    __asm { BRAA            X1, X16 }
  }
  v4[12] = a1;
  uint64_t v7 = (void *)swift_task_alloc();
  v4[13] = v7;
  void *v7 = v5;
  v7[1] = sub_1000CD46C;
  uint64_t v8 = v4[7];
  v7[13] = a1;
  v7[14] = v8;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000CF320, 0, 0);
}

uint64_t sub_1000CD46C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 8);
    __asm { BRAA            X1, X16 }
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000CD5D4, 0, 0);
}

uint64_t sub_1000CD5D4()
{
  (*(void (**)(void, uint64_t, void))(v0[9] + 16))(v0[10], v0[7] + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v0[8]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Initiating Diagnostics transfer...", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v6 = v0[8];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  void *v7 = v0;
  v7[1] = sub_1000CD724;
  uint64_t v8 = v0[6];
  return sub_1000CDD70(v8);
}

uint64_t sub_1000CD724(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[2] = v3;
  v4[3] = a1;
  void v4[4] = a2;
  void v4[5] = v2;
  v4[15] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_1000CDAD8;
  }
  else {
    uint64_t v5 = sub_1000CD840;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v5, 0, 0);
}

uint64_t sub_1000CD840()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = *(void *)(v1 + 32);
  v0[16] = v2;
  if (v2)
  {
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[17] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000CD934;
    return sub_100169C58();
  }
  else
  {
    uint64_t v6 = v0[3];
    uint64_t v5 = v0[4];
    *(void *)(v1 + 32) = 0;
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
    return v7(v6, v5);
  }
}

uint64_t sub_1000CD934()
{
  swift_task_dealloc();
  swift_release();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000CDA4C, 0, 0);
}

uint64_t sub_1000CDA4C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  *(void *)(v0[7] + 32) = 0;
  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v2, v1);
}

uint64_t sub_1000CDAD8()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = *(void *)(v1 + 32);
  v0[18] = v2;
  if (v2)
  {
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[19] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000CDBD4;
    return sub_100169C58();
  }
  else
  {
    *(void *)(v1 + 32) = 0;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_1000CDBD4()
{
  swift_task_dealloc();
  swift_release();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000CDCEC, 0, 0);
}

uint64_t sub_1000CDCEC()
{
  *(void *)(*(void *)(v0 + 56) + 32) = 0;
  swift_release();
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CDD70(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  v2[7] = swift_task_alloc();
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000CDE58, 0, 0);
}

uint64_t sub_1000CDE58()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[3];
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger;
  v0[10] = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger;
  uint64_t v6 = v4 + v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[11] = v7;
  v0[12] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v4 + v5, v2);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Handling Diagnostics transfer request", v10, 2u);
    swift_slowDealloc();
  }
  uint64_t v11 = v0[9];
  uint64_t v12 = v0[4];
  uint64_t v13 = v0[5];

  unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v0[13] = v14;
  v0[14] = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v14(v11, v12);
  uint64_t Strong = swift_weakLoadStrong();
  v0[15] = Strong;
  if (!Strong)
  {
    uint64_t v33 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    *uint64_t v34 = 0xD000000000000010;
    v34[1] = 0x8000000100236160;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v33 - 8) + 104))(v34, enum case for Errors.AccessoryServerNil(_:), v33);
    swift_willThrow();
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v41 = (uint64_t (*)(void))v0[1];
    return v41();
  }
  uint64_t v16 = Strong;
  id v17 = *(void **)(Strong + 32);
  if (!v17 || ([v17 isReachable] & 1) == 0)
  {
    uint64_t v24 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    uint64_t v26 = v25;
    _StringGuts.grow(_:)(19);
    id v27 = *(id *)(v16 + 24);
    id v28 = [v27 description];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;

    swift_bridgeObjectRelease();
    v32._uint64_t countAndFlagsBits = 0xD000000000000011;
    v32._object = (void *)0x8000000100236180;
    String.append(_:)(v32);
    uint64_t *v26 = v29;
    v26[1] = v31;
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, enum case for Errors.AccessoryNotReachable(_:), v24);
LABEL_15:
    swift_willThrow();
    swift_release();
    goto LABEL_16;
  }
  uint64_t result = sub_1000CEAA8(v0[2]);
  if ((result & 1) == 0)
  {
    v7(v0[8], v6, v0[4]);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Diagnostics transfer failed as the request is not supported.", v37, 2u);
      swift_slowDealloc();
    }
    uint64_t v38 = v0[8];
    uint64_t v39 = v0[4];

    v14(v38, v39);
    uint64_t v20 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    uint64_t v22 = v40;
    *unint64_t v40 = 0xD00000000000003CLL;
    v40[1] = 0x80000001002361A0;
    uint64_t v23 = (unsigned int *)&enum case for Errors.OperationNotSupported(_:);
    goto LABEL_14;
  }
  id v19 = (void *)v0[3];
  if (v19[4])
  {
    uint64_t v20 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    uint64_t v22 = v21;
    *uint64_t v21 = 0xD00000000000001BLL;
    v21[1] = 0x8000000100236230;
    uint64_t v23 = (unsigned int *)&enum case for Errors.OperationInProgress(_:);
LABEL_14:
    (*(void (**)(void *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *v23, v20);
    goto LABEL_15;
  }
  char v42 = (void *)v19[5];
  if (!v42)
  {
    __break(1u);
    return result;
  }
  uint64_t v57 = v0[7];
  uint64_t v58 = v0[4];
  uint64_t v43 = (void *)v19[3];
  type metadata accessor for AccessoryDiagnosticsSession();
  swift_allocObject();
  id v44 = v43;
  id v45 = v42;
  uint64_t v46 = swift_retain();
  uint64_t v47 = sub_10016E928(v46, (uint64_t)v44, (uint64_t)v45);
  swift_release();
  v19[4] = v47;
  swift_release();
  v7(v57, v6, v58);
  char v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v48, v49))
  {
    BOOL v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Setting up a Diagnostics transfer session", v50, 2u);
    swift_slowDealloc();
  }
  uint64_t v51 = v0[7];
  uint64_t v52 = v0[4];

  v14(v51, v52);
  uint64_t v53 = (void *)v19[4];
  v0[16] = v53;
  if (!v53)
  {
    uint64_t v20 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    uint64_t v22 = v56;
    void *v56 = 0xD000000000000049;
    v56[1] = 0x80000001002361E0;
    uint64_t v23 = (unsigned int *)&enum case for Errors.CommunicationFailure(_:);
    goto LABEL_14;
  }
  v53[17] = v0[2];
  swift_retain();
  swift_retain();
  swift_release();
  v53[18] = 0;
  v53[19] = 0xE000000000000000;
  swift_bridgeObjectRelease();
  BOOL v54 = (void *)swift_task_alloc();
  v0[17] = v54;
  void *v54 = v0;
  v54[1] = sub_1000CE548;
  uint64_t v55 = v0[2];
  return sub_10016A928(v55);
}

uint64_t sub_1000CE548()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000CE79C;
  }
  else {
    uint64_t v2 = sub_1000CE65C;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_1000CE65C()
{
  (*(void (**)(void, void, void))(v0 + 88))(*(void *)(v0 + 48), *(void *)(v0 + 24) + *(void *)(v0 + 80), *(void *)(v0 + 32));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Diagnostics transfer session was setup successfully", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 32);

  v4(v5, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v7;
  void *v7 = v0;
  v7[1] = sub_1000CE834;
  return sub_1000CF8FC();
}

uint64_t sub_1000CE79C()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CE834(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 160) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_1000CEA10;
  }
  else
  {
    *(void *)(v6 + 16_Block_object_dispose(&STACK[0x3D0], 8) = a2;
    *(void *)(v6 + 176) = a1;
    uint64_t v7 = sub_1000CE968;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v7, 0, 0);
}

uint64_t sub_1000CE968()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  return v1(v2, v3);
}

uint64_t sub_1000CEA10()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CEAA8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v55 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (char *)&v55 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v55 - v15;
  id v17 = *(void **)(v2 + 40);
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v55 - v15, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v4);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Diagnostic settings not configured yet", v31, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
    return 0;
  }
  char v18 = *(unsigned char *)(a1 + 24);
  id v19 = v17;
  uint64_t v20 = v19;
  if ((v18 & 1) != 0 || (id v21 = [v19 options]) == 0)
  {
LABEL_12:
    if ((*(unsigned char *)(a1 + 40) & 1) == 0)
    {
      id v32 = [v20 options];
      if (v32)
      {
        uint64_t v33 = v32;
        if (([v32 value] & 1) == 0)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v4);
          swift_retain_n();
          uint64_t v34 = Logger.logObject.getter();
          os_log_type_t v35 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v34, v35))
          {
            os_log_t v58 = v34;
            os_log_type_t v36 = (uint8_t *)swift_slowAlloc();
            char v56 = (void *)swift_slowAlloc();
            uint64_t v57 = v36;
            *(_DWORD *)os_log_type_t v36 = 138412290;
            uint64_t Strong = swift_weakLoadStrong();
            if (Strong)
            {
              id v38 = *(id *)(Strong + 24);
              swift_release();
              uint64_t v39 = v57;
              id v59 = v38;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
            }
            else
            {
              uint64_t v39 = v57;
              id v59 = 0;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              id v38 = 0;
            }
            void *v56 = v38;
            swift_release_n();
            os_log_type_t v52 = v35;
            os_log_t v53 = v58;
            _os_log_impl((void *)&_mh_execute_header, v58, v52, "Delay requested, but not supported on the accessory %@", v39, 0xCu);
            sub_1000992E8(&qword_1002A7C40);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
          }

          (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
          return 0;
        }
      }
    }
    id v40 = [v20 type];
    if (!v40)
    {
LABEL_28:

      return 1;
    }
    char v41 = v40;
    if ((*(unsigned char *)(a1 + 56) & 1) == 0)
    {
      uint64_t v42 = *(void *)(a1 + 48);
      if (v42 == 1)
      {
        if ([v40 value])
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v4);
          swift_retain_n();
          id v44 = Logger.logObject.getter();
          os_log_type_t v45 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v44, v45))
          {
            os_log_t v58 = v44;
            uint64_t v46 = (uint8_t *)swift_slowAlloc();
            char v56 = (void *)swift_slowAlloc();
            uint64_t v57 = v46;
            *(_DWORD *)uint64_t v46 = 138412290;
            uint64_t v47 = swift_weakLoadStrong();
            if (v47)
            {
              id v48 = *(id *)(v47 + 24);
              swift_release();
              os_log_type_t v49 = v57;
              id v59 = v48;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
            }
            else
            {
              os_log_type_t v49 = v57;
              id v59 = 0;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              id v48 = 0;
            }
            void *v56 = v48;
            swift_release_n();
            os_log_t v54 = v58;
            _os_log_impl((void *)&_mh_execute_header, v58, v45, "Manufacturer snapshot requested, but not supported on the accessory %@", v49, 0xCu);
            sub_1000992E8(&qword_1002A7C40);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
          }

          (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
          return 0;
        }
        if (*(unsigned char *)(a1 + 56)) {
          goto LABEL_27;
        }
        uint64_t v42 = *(void *)(a1 + 48);
      }
      if (v42 == 2) {
        [v41 value];
      }
    }
LABEL_27:

    goto LABEL_28;
  }
  uint64_t v22 = v21;
  if (([v21 value] & 2) != 0)
  {

    goto LABEL_12;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v2 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v4);
  swift_retain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    os_log_t v58 = v23;
    id v25 = (uint8_t *)swift_slowAlloc();
    char v56 = (void *)swift_slowAlloc();
    uint64_t v57 = v25;
    *(_DWORD *)id v25 = 138412290;
    uint64_t v26 = swift_weakLoadStrong();
    if (v26)
    {
      id v27 = *(id *)(v26 + 24);
      swift_release();
      id v28 = v57;
      id v59 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      id v28 = v57;
      id v59 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v27 = 0;
    }
    void *v56 = v27;
    swift_release_n();
    os_log_type_t v50 = v24;
    os_log_t v51 = v58;
    _os_log_impl((void *)&_mh_execute_header, v58, v50, "Custom max log size requested, but not supported on the accessory %@", v28, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  return 0;
}

uint64_t sub_1000CF290(uint64_t a1)
{
  *(void *)(v2 + 104) = a1;
  *(void *)(v2 + 112) = v1;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000CF320, 0, 0);
}

uint64_t sub_1000CF320()
{
  uint64_t v1 = *(void *)(v0 + 104);
  if (!v1) {
    goto LABEL_15;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v2 = *(id *)(v1 + 32);
  }
  uint64_t v3 = v2;
  id v4 = [v2 value];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)(v0 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0u;
    *(_OWORD *)(v0 + 64) = 0u;
  }
  sub_1000A5BE8(v0 + 48, v0 + 16);
  if (!*(void *)(v0 + 40))
  {
    sub_1000D0428(v0 + 16);
    goto LABEL_15;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_15:
    uint64_t v17 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    *char v18 = 0xD000000000000025;
    v18[1] = 0x8000000100236130;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v18, enum case for Errors.CommunicationFailure(_:), v17);
    swift_willThrow();
LABEL_16:
    id v19 = *(uint64_t (**)(void))(v0 + 8);
LABEL_17:
    return v19();
  }
  uint64_t v5 = *(void *)(v0 + 80);
  unint64_t v6 = *(void *)(v0 + 88);
  *(void *)(v0 + 120) = v5;
  *(void *)(v0 + 12_Block_object_dispose(&STACK[0x3D0], 8) = v6;
  uint64_t v7 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 96) = 0;
  id v9 = [v7 parsedFromData:isa error:v0 + 96];
  *(void *)(v0 + 136) = v9;

  uint64_t v10 = *(void **)(v0 + 96);
  if (!v9)
  {
    id v21 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_1000A6240(v5, v6);
    goto LABEL_16;
  }
  uint64_t v11 = *(void *)(v0 + 112);
  uint64_t v12 = *(void **)(v11 + 40);
  if (v12)
  {
    sub_100099C7C(0, &qword_1002A8D88);
    id v13 = v10;
    id v14 = v9;
    id v15 = v12;
    char v16 = static NSObject.== infix(_:_:)();

    if (v16)
    {
      sub_1000A6240(v5, v6);
LABEL_28:

      id v19 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_17;
    }
    uint64_t v11 = *(void *)(v0 + 112);
  }
  else
  {
    id v22 = v10;
  }
  uint64_t v23 = *(void *)(v11 + 32);
  *(void *)(v0 + 144) = v23;
  if (!v23)
  {
    unint64_t v25 = *(void *)(v0 + 128);
    uint64_t v26 = *(void *)(v0 + 136);
    uint64_t v27 = *(void *)(v0 + 120);
    *(void *)(v11 + 32) = 0;
    sub_1000A6240(v27, v25);
    id v14 = *(id *)(v11 + 40);
    *(void *)(v11 + 40) = v26;
    goto LABEL_28;
  }
  swift_retain();
  os_log_type_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v24;
  void *v24 = v0;
  v24[1] = sub_1000CF6F4;
  return sub_100169C58();
}

uint64_t sub_1000CF6F4()
{
  swift_task_dealloc();
  swift_release();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000CF838, 0, 0);
}

uint64_t sub_1000CF838()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  unint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  *(void *)(v2 + 32) = 0;
  swift_release();
  sub_1000A6240(v1, v3);
  uint64_t v5 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = v4;

  unint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000CF8FC()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000CF9BC, 0, 0);
}

uint64_t sub_1000CF9BC()
{
  id v21 = v0;
  (*(void (**)(void, uint64_t, void))(v0[8] + 16))(v0[9], v0[6] + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger, v0[7]);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v17 = v0[8];
    uint64_t v3 = v0[6];
    uint64_t v18 = v0[7];
    uint64_t v19 = v0[9];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v20 = v5;
    v0[4] = *(void *)(v3 + 32);
    sub_1000992E8(&qword_1002A8D78);
    uint64_t v6 = Optional.debugDescription.getter();
    v0[5] = sub_1000993AC(v6, v7, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Read Diagnostics data for session %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  }
  else
  {
    uint64_t v9 = v0[8];
    uint64_t v8 = v0[9];
    uint64_t v10 = v0[7];
    swift_release_n();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  uint64_t v11 = *(void *)(v0[6] + 32);
  v0[10] = v11;
  if (v11)
  {
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc();
    v0[11] = v12;
    void *v12 = v0;
    v12[1] = sub_1000CFD5C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0x746144646165725FLL, 0xEB00000000292861, sub_1000D0388, v11, &type metadata for String);
  }
  else
  {
    uint64_t v13 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    void *v14 = 0xD00000000000001ALL;
    v14[1] = 0x8000000100236110;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v14, enum case for Errors.CommunicationFailure(_:), v13);
    swift_willThrow();
    swift_task_dealloc();
    id v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

uint64_t sub_1000CFD5C()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1000CFEF0;
  }
  else {
    os_log_type_t v2 = sub_1000CFE70;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_1000CFE70()
{
  swift_release();
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v3(v1, v2);
}

uint64_t sub_1000CFEF0()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000CFF5C(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002A8D80);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_10016B418((uint64_t)sub_1000D039C, v6);
  return swift_release();
}

uint64_t sub_1000D00BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    swift_errorRetain();
LABEL_3:
    sub_1000992E8(&qword_1002A8D80);
    return CheckedContinuation.resume(throwing:)();
  }
  if (!a3)
  {
    uint64_t v4 = type metadata accessor for Errors();
    sub_1000AADE4();
    swift_allocError();
    *unint64_t v5 = 0x68746150206C696ELL;
    v5[1] = 0xE800000000000000;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v5, enum case for Errors.CommunicationFailure(_:), v4);
    goto LABEL_3;
  }
  swift_bridgeObjectRetain();
  sub_1000992E8(&qword_1002A8D80);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1000D01C0()
{
  swift_weakDestroy();

  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDiagnosticsManager_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000D0280()
{
  return type metadata accessor for AccessoryDiagnosticsManager();
}

uint64_t type metadata accessor for AccessoryDiagnosticsManager()
{
  uint64_t result = qword_1002A8BE8;
  if (!qword_1002A8BE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D02D4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000D0388(uint64_t a1)
{
  return sub_1000CFF5C(a1);
}

uint64_t sub_1000D0390()
{
  return sub_1000D04A0(&qword_1002A8D80);
}

uint64_t sub_1000D039C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000992E8(&qword_1002A8D80);

  return sub_1000D00BC(a1, a2, a3);
}

uint64_t sub_1000D0428(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002AA5F0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000D0488(uint64_t a1)
{
  sub_1000CCE94(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000D0494()
{
  return sub_1000D04A0(&qword_1002A8D98);
}

uint64_t sub_1000D04A0(uint64_t *a1)
{
  uint64_t v2 = sub_1000992E8(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1000D052C(uint64_t a1, uint64_t a2)
{
  sub_1000992E8(&qword_1002A8D98);

  return sub_1000CD0E0(a1, a2);
}

uint64_t sub_1000D05B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D05C0()
{
  return swift_release();
}

char *sub_1000D05C8()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v32 = *(void *)(v1 - 8);
  uint64_t v33 = v1;
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  *(void *)&v0[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard] = 0;
  uint64_t v6 = v0;
  Logger.init(subsystem:category:)();
  v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager__performingGeneralScan] = 0;
  uint64_t v7 = &v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_cachePath];
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server;
  *(void *)&v6[v9] = [objc_allocWithZone((Class)type metadata accessor for AccessoryServer()) init];
  uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue;
  sub_100099C7C(0, (unint64_t *)&qword_1002A7F50);
  static DispatchQoS.unspecified.getter();
  os_log_type_t v35 = _swiftEmptyArrayStorage;
  sub_1000EAA2C((unint64_t *)&qword_1002A8530, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_1000992E8(&qword_1002A9000);
  sub_1000EAA74((unint64_t *)&qword_1002A8540, &qword_1002A9000);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v32 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v33);
  uint64_t v11 = v10;
  *(void *)&v6[v10] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v12 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  *(void *)&v6[v12] = dispatch_semaphore_create(1);
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories] = _swiftEmptyArrayStorage;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens] = _swiftEmptyArrayStorage;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiThreshold] = -70;
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_firmwareUpdateManager;
  *(void *)&v6[v13] = [objc_allocWithZone((Class)type metadata accessor for AccessoryFirmwareUpdateManager()) init];
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_disconnectTimeout] = 0x4014000000000000;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_disconnectCheckRate] = 0x3FC999999999999ALL;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_disconnectTimer] = 0;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing] = 0;
  uint64_t v14 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
  sub_1000992E8((uint64_t *)&unk_1002A87B0);
  uint64_t v15 = swift_allocObject();
  *(_DWORD *)(v15 + 16) = 0;
  *(void *)&v6[v14] = v15;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_discoverDockTimeout] = 0x4008000000000000;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_discoverDockInterval] = 0x3FC999999999999ALL;
  v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
  char v16 = &v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
  uint64_t v17 = enum case for DockStatus.Undocked(_:);
  uint64_t v18 = type metadata accessor for DockStatus();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v16, v17, v18);
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup] = 0;
  uint64_t v19 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockSetupIdMap;
  *(void *)&v6[v19] = sub_1001EA178((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v20 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn;
  type metadata accessor for RSSITransaction();
  id v21 = (void *)swift_allocObject();
  v21[2] = &_swiftEmptySetSingleton;
  void v21[3] = 0;
  void v21[4] = 0;
  v21[5] = 0;
  *(void *)&v6[v20] = v21;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_haptics] = 0;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer] = 0;
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimeout] = 0x4014000000000000;
  uint64_t v22 = *(void **)&v6[v11];
  id v23 = objc_allocWithZone((Class)type metadata accessor for DockDetector(0));
  *(void *)&v6[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector] = DockDetector.init(workQueue:)(v22);

  os_log_type_t v24 = (objc_class *)type metadata accessor for AccessoryManager();
  v34.receiver = v6;
  v34.super_class = v24;
  unint64_t v25 = (char *)[super init];
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = &_swiftEmptySetSingleton;
  v26[3] = 0;
  v26[4] = v25;
  v26[5] = &off_100276290;
  *(void *)&v25[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn] = v26;
  uint64_t v27 = v25;
  swift_release();
  uint64_t v28 = *(void *)&v27[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server];
  uint64_t v29 = *(void **)(v28 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager);
  *(void *)(v28 + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_manager) = v25;

  return v27;
}

void sub_1000D0BA0(uint64_t a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v7 = *(id *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  uint64_t v8 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess();
  swift_retain();
  uint64_t v9 = sub_1000E8CFC(v8, a1);
  swift_release();
  int64_t v10 = *(void *)(*v8 + 16);
  if (v10 < v9)
  {
    __break(1u);
  }
  else
  {
    sub_1001A1120(v9, v10);
    uint64_t v9 = type metadata accessor for DaemonAccessory();
    uint64_t v3 = &off_100279790;
    v23[3] = v9;
    void v23[4] = &off_100279790;
    v23[0] = a1;
    uint64_t v2 = *v8;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t *v8 = v2;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_3;
    }
  }
  uint64_t v2 = (uint64_t)sub_100102170(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  uint64_t *v8 = v2;
LABEL_3:
  unint64_t v13 = *(void *)(v2 + 16);
  unint64_t v12 = *(void *)(v2 + 24);
  if (v13 >= v12 >> 1)
  {
    uint64_t v2 = (uint64_t)sub_100102170((char *)(v12 > 1), v13 + 1, 1, (char *)v2);
    uint64_t *v8 = v2;
  }
  uint64_t v14 = sub_1000E987C((uint64_t)v23, v9);
  __chkstk_darwin(v14);
  char v16 = (uint64_t *)((char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  uint64_t v18 = *v16;
  uint64_t v21 = v9;
  uint64_t v22 = v3;
  *(void *)&long long v20 = v18;
  *(void *)(v2 + 16) = v13 + 1;
  sub_1000A6298(&v20, v2 + 40 * v13 + 32);
  sub_100099BCC((uint64_t)v23);
  swift_endAccess();
  id v19 = *(id *)(v4 + v6);
  OS_dispatch_semaphore.signal()();
}

void sub_1000D0DDC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v46 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v38 - v13;
  if (a1)
  {
    uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    char v16 = *(void **)(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
    id v44 = a1;
    id v17 = v16;
    OS_dispatch_semaphore.wait()();

    uint64_t v18 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
    swift_beginAccess();
    uint64_t v19 = *v18;
    uint64_t v20 = *(void *)(*v18 + 16);
    if (v20)
    {
      uint64_t v39 = v15;
      uint64_t v40 = v3;
      uint64_t v43 = v14;
      uint64_t v41 = a2;
      uint64_t v21 = v19 + 32;
      os_log_type_t v45 = (void (**)(char *, char *, uint64_t))(v10 + 32);
      uint64_t v22 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      id v23 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
      os_log_type_t v24 = (void (**)(char *, uint64_t))(v10 + 8);
      v38[1] = v19;
      swift_bridgeObjectRetain();
      uint64_t v42 = v9;
      while (1)
      {
        sub_1000A5D40(v21, (uint64_t)v47);
        uint64_t v25 = *(void *)(*sub_1000A5DA4(v47, v47[3]) + 16);
        if (!v25) {
          break;
        }
        uint64_t v26 = *(void **)(v25 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral);
        if (!v26) {
          break;
        }
        id v27 = [v26 identifier];
        uint64_t v28 = v46;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v29 = *v45;
        (*v45)(v8, v28, v9);
        (*v22)(v8, 0, 1, v9);
        if ((*v23)(v8, 1, v9) == 1) {
          goto LABEL_5;
        }
        os_log_type_t v30 = v23;
        uint64_t v31 = v43;
        v29(v43, v8, v9);
        id v32 = [v44 identifier];
        uint64_t v33 = v46;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        LOBYTE(v32) = static UUID.== infix(_:_:)();
        objc_super v34 = *v24;
        os_log_type_t v35 = v33;
        uint64_t v9 = v42;
        (*v24)(v35, v42);
        if (v32)
        {
          swift_bridgeObjectRelease();
          id v37 = *(id *)(v40 + v39);
          OS_dispatch_semaphore.signal()();

          v34(v31, v9);
          sub_1000A5D40((uint64_t)v47, v41);
          sub_100099BCC((uint64_t)v47);
          return;
        }
        v34(v31, v9);
        id v23 = v30;
LABEL_6:
        sub_100099BCC((uint64_t)v47);
        v21 += 40;
        if (!--v20)
        {
          swift_bridgeObjectRelease();
          uint64_t v3 = v40;
          a2 = v41;
          uint64_t v15 = v39;
          goto LABEL_13;
        }
      }
      (*v22)(v8, 1, 1, v9);
LABEL_5:
      sub_1000A61E4((uint64_t)v8, &qword_1002AAA20);
      goto LABEL_6;
    }
LABEL_13:
    id v36 = *(id *)(v3 + v15);
    OS_dispatch_semaphore.signal()();
  }
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
}

uint64_t sub_1000D11C8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000025 && a2 == 0x8000000100236610
    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    swift_retain();
    sub_1000F0F40();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000D1260@<X0>(uint64_t a1@<X8>)
{
  uint64_t v57 = type metadata accessor for Logger();
  uint64_t v56 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v62 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v60 = (void *)type metadata accessor for URL.DirectoryHint();
  uint64_t v59 = *(v60 - 1);
  __chkstk_darwin(v60);
  uint64_t v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v61 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1000992E8(&qword_1002A7F70);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  os_log_t v58 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v54 - v13;
  __chkstk_darwin(v12);
  char v16 = (char *)&v54 - v15;
  uint64_t v55 = v1;
  uint64_t v17 = v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_cachePath;
  swift_beginAccess();
  sub_1000EA570(v17, (uint64_t)v16);
  uint64_t v63 = v7;
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v19 = v6;
  LODWORD(v6) = v18(v16, 1, v6);
  sub_1000A61E4((uint64_t)v16, &qword_1002A7F70);
  if (v6 != 1) {
    return sub_1000EA570(v17, a1);
  }
  uint64_t v20 = v17;
  uint64_t v21 = a1;
  id v22 = [self defaultManager];
  if (qword_1002A7B90 != -1) {
    swift_once();
  }
  sub_100151D10((uint64_t)v14);
  int v23 = v18(v14, 1, v19);
  os_log_type_t v24 = v62;
  if (v23 == 1)
  {

    sub_1000A61E4((uint64_t)v14, &qword_1002A7F70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v63 + 56))(v21, 1, 1, v19);
  }
  uint64_t v26 = v63;
  id v27 = v61;
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v61, v14, v19);
  v66[0] = (id)1701606498;
  v66[1] = (id)0xE400000000000000;
  uint64_t v28 = v59;
  uint64_t v29 = v60;
  (*(void (**)(char *, void, void *))(v59 + 104))(v5, enum case for URL.DirectoryHint.isDirectory(_:), v60);
  sub_1000E9828();
  URL.append<A>(component:directoryHint:)();
  (*(void (**)(char *, void *))(v28 + 8))(v5, v29);
  swift_bridgeObjectRelease();
  char v65 = 0;
  URL.path(percentEncoded:)(1);
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v31 = [v22 fileExistsAtPath:v30 isDirectory:&v65];

  id v32 = v22;
  if (v31) {
    goto LABEL_8;
  }
  sub_1000992E8((uint64_t *)&unk_1002A8FF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100240BE0;
  *(void *)(inited + 32) = NSFilePosixPermissions;
  *(void *)(inited + 40) = 448;
  objc_super v34 = NSFilePosixPermissions;
  unint64_t v35 = sub_1001E9D0C(inited);
  URL._bridgeToObjectiveC()(v36);
  id v38 = v37;
  sub_1001E1290(v35);
  swift_bridgeObjectRelease();
  type metadata accessor for FileAttributeKey(0);
  sub_1000EAA2C((unint64_t *)&qword_1002A8130, type metadata accessor for FileAttributeKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v66[0] = 0;
  unsigned int v40 = [v22 createDirectoryAtURL:v38 withIntermediateDirectories:1 attributes:isa error:v66];

  id v41 = v66[0];
  if (v40)
  {
LABEL_8:
    uint64_t v42 = (uint64_t)v58;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v58, v27, v19);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v42, 0, 1, v19);
    swift_beginAccess();
    sub_1000B9C4C(v42, v20, &qword_1002A7F70);
    swift_endAccess();

    uint64_t v43 = v27;
    uint64_t v17 = v20;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v43, v19);
    a1 = v21;
    return sub_1000EA570(v17, a1);
  }
  id v44 = v41;
  id v60 = v32;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  uint64_t v45 = v56;
  uint64_t v46 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v24, v55 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v57);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v47 = Logger.logObject.getter();
  int v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, (os_log_type_t)v48))
  {
    uint64_t v49 = swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    uint64_t v67 = v59;
    *(_DWORD *)uint64_t v49 = 136315394;
    os_log_type_t v50 = v61;
    swift_beginAccess();
    Swift::String v51 = URL.path(percentEncoded:)(1);
    uint64_t v64 = sub_1000993AC(v51._countAndFlagsBits, (unint64_t)v51._object, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v52 = Error.localizedDescription.getter();
    uint64_t v64 = sub_1000993AC(v52, v53, &v67);
    uint64_t v26 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v48, "Unable to create file storage directory %s: %s", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v62, v57);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v45 + 8))(v24, v46);
    os_log_type_t v50 = v61;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v21, 1, 1, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v50, v19);
}

uint64_t sub_1000D1BB0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v27 = *(void *)(v4 - 8);
  uint64_t v28 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v10);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    char v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Re-pairing accessory...", v16, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(unsigned char *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 0;
  uint64_t v17 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = v2;
  aBlock[4] = sub_1000EA568;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100276AD0;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v17;
  swift_retain();
  uint64_t v21 = v2;
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = &_swiftEmptyArrayStorage;
  sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  uint64_t v22 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v22);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
  return swift_release();
}

void sub_1000D1FBC(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired)
    && *(unsigned char *)(a1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24) != 2)
  {
    uint64_t v4 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
    uint64_t v5 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock);
    swift_retain();
    os_unfair_lock_lock(v5 + 4);
    swift_release();
    *(void *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing) = a1;
    swift_retain();
    swift_release();
    uint64_t v6 = *(os_unfair_lock_s **)(a2 + v4);
    swift_retain();
    os_unfair_lock_unlock(v6 + 4);
    swift_release();
    uint64_t v7 = *(char **)(a1 + 16);
    if (v7)
    {
      if (*(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
      {
        uint64_t v8 = qword_1002A7C20;
        uint64_t v9 = v7;
        if (v8 != -1) {
          swift_once();
        }
        uint64_t v10 = (void *)qword_1002B17A0;
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = v10;
        *(void *)(v11 + 24) = v9;
        uint64_t v12 = v9;
        id v13 = v10;
        sub_1001DA690((uint64_t)sub_1000EAB34, v11);

        swift_release();
      }
      else
      {
        uint64_t v14 = v7;
        oslog = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(oslog, v15))
        {
          char v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, oslog, v15, "CB peripheral is nil", v16, 2u);
          swift_slowDealloc();
        }
      }
    }
  }
}

id sub_1000D2214(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, char a7)
{
  sub_100099C7C(0, &qword_1002A8380);
  v12.super.super.Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  char v38 = a7;
  if ((a7 & 0xFE) == 6)
  {
    id v13 = [a1 identifier];
    uint64_t v14 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = a5;
    unint64_t v16 = a6;
    uint64_t v18 = v17;

    sub_1000DF940(v14, v18);
    a6 = v16;
    a5 = v15;
    swift_bridgeObjectRelease();
  }
  id v19 = a1;
  swift_bridgeObjectRetain();
  id v20 = [v19 identifier];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v22;
  uint64_t v35 = v21;

  v33.super.super.Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  int v23 = v12.super.super.isa;
  v24.super.super.Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  v25.super.super.Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  sub_1000A618C(a5, a6);
  uint64_t v26 = a3;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v27 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  id v28 = objc_allocWithZone((Class)_HAPAccessoryServerBTLE200);
  id v29 = v27;
  NSString v30 = v39;
  id v31 = sub_1000E7D40(v19, a2, v26, v35, v34, v33.super.super.isa, v23, a4 & 1, v38, v24.super.super.isa, v25.super.super.isa, a5, a6, 0, v30, v29, 0, 0xE000000000000000, v28);
  [v31 setDelegate:*(void *)&v30[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server] queue:*(void *)(*(void *)&v30[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server]+ OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_workQueue)];

  return v31;
}

void sub_1000D2464(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v157 = (void *)a5;
  uint64_t v156 = a4;
  uint64_t v158 = *a3;
  uint64_t v11 = a3[2];
  uint64_t v160 = a3[1];
  uint64_t v155 = *((unsigned __int8 *)a3 + 24);
  uint64_t v154 = *((unsigned __int8 *)a3 + 25);
  uint64_t v153 = *((unsigned __int8 *)a3 + 26);
  uint64_t v152 = *((unsigned __int8 *)a3 + 27);
  uint64_t v159 = a3[4];
  uint64_t v161 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v149 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v148 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v146 = (char *)&v134 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = type metadata accessor for DispatchQoS();
  uint64_t v145 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v144 = (char *)&v134 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for Logger();
  unint64_t v167 = *(char **)(v165 - 8);
  uint64_t v15 = __chkstk_darwin(v165);
  uint64_t v162 = (char *)&v134 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v143 = (char *)&v134 - v18;
  __chkstk_darwin(v17);
  id v20 = (char *)&v134 - v19;
  uint64_t v21 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v21 - 8);
  int v23 = (char *)&v134 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v151 = (char *)&v134 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  id v29 = (char *)&v134 - v28;
  uint64_t v163 = a1;
  NSString v30 = sub_1000F861C(a6, a7);
  if (!v30) {
    return;
  }
  id v150 = v29;
  id v164 = v30;
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_10013EE90(a6, a7);
  if (v32 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v23, 1, 1, v24);
LABEL_5:

    sub_1000A61E4((uint64_t)v23, &qword_1002AAA20);
    return;
  }
  uint64_t v33 = v31;
  unint64_t v34 = v32;
  sub_10013E988(v31, v32, (uint64_t)v23);
  sub_1000A9990(v33, v34);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v23, 0, 1, v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1) {
    goto LABEL_5;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v150, v23, v24);
  uint64_t v35 = (void (*)(char *, char *, uint64_t))*((void *)v167 + 2);
  uint64_t v138 = &v166[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger];
  uint64_t v140 = v167 + 16;
  uint64_t v139 = v35;
  ((void (*)(char *))v35)(v20);
  swift_bridgeObjectRetain_n();
  id v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  BOOL v38 = os_log_type_enabled(v36, v37);
  uint64_t v142 = v25;
  uint64_t v141 = v24;
  uint64_t v137 = v11;
  if (v38)
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v39 = 136315138;
    swift_bridgeObjectRetain();
    v172[0] = sub_1000993AC(a6, a7, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Discovered pairable accessory with identifier %s.", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v134 = (void (*)(char *, uint64_t))*((void *)v167 + 1);
  v134(v20, v165);
  uint64_t v135 = v155 & 1;
  uint64_t v136 = v154 & 1;
  v153 &= 1u;
  uint64_t v154 = v152 & 1;
  unsigned int v40 = v166;
  uint64_t v155 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v41 = *(id *)&v166[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  uint64_t v42 = &v40[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v43 = *(void *)v42;
  uint64_t v44 = *(void *)(v43 + 16);
  if (!v44)
  {
LABEL_23:
    id v55 = *(id *)&v166[v155];
    OS_dispatch_semaphore.signal()();

    unint64_t v170 = 0;
    long long aBlock = 0u;
    long long v169 = 0u;
    uint64_t v56 = v142;
    uint64_t v57 = v163;
    goto LABEL_24;
  }
  uint64_t v45 = v43 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000A5D40(v45, (uint64_t)v172);
    uint64_t v46 = *(void **)(*sub_1000A5DA4(v172, v172[3]) + 32);
    if (!v46) {
      goto LABEL_13;
    }
    id v47 = v46;
    id v48 = [v47 identifier];
    if (v48) {
      break;
    }
LABEL_12:

LABEL_13:
    sub_100099BCC((uint64_t)v172);
    v45 += 40;
    if (!--v44)
    {
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
  uint64_t v49 = v48;
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;

  if (v50 != a6 || v52 != a7)
  {
    char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v54) {
      goto LABEL_39;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease();
LABEL_39:
  swift_bridgeObjectRelease();
  id v102 = *(id *)&v166[v155];
  OS_dispatch_semaphore.signal()();

  sub_1000A5D40((uint64_t)v172, (uint64_t)&aBlock);
  sub_100099BCC((uint64_t)v172);
  uint64_t v56 = v142;
  uint64_t v57 = v163;
  if (!*((void *)&v169 + 1))
  {
LABEL_24:
    sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AAA30);
    goto LABEL_25;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if (swift_dynamicCast())
  {
    uint64_t v103 = v172[0];
    id v104 = v143;
    uint64_t v105 = v165;
    v139(v143, v138, v165);
    id v106 = v164;
    uint64_t v107 = Logger.logObject.getter();
    os_log_type_t v108 = static os_log_type_t.default.getter();
    BOOL v109 = os_log_type_enabled(v107, v108);
    id v164 = v106;
    if (v109)
    {
      uint64_t v110 = (uint8_t *)swift_slowAlloc();
      uint64_t v162 = (char *)swift_slowAlloc();
      *(void *)&long long aBlock = v162;
      *(_DWORD *)uint64_t v110 = 136315138;
      uint64_t v155 = (uint64_t)(v110 + 4);
      id v111 = [v106 identifier];
      uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v114 = v113;

      uint64_t v57 = v163;
      v172[0] = sub_1000993AC(v112, v114, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "Updating existing accessory %s.", v110, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v115 = v143;
      uint64_t v116 = v165;
    }
    else
    {

      uint64_t v115 = v104;
      uint64_t v116 = v105;
    }
    v134(v115, v116);
    uint64_t v117 = *(void **)(v103 + 16);
    *(void *)(v103 + 16) = v57;
    id v118 = v57;

    os_log_type_t v119 = (void *)(v103 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
    uint64_t v120 = *(void *)(v103 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
    uint64_t v121 = *(void *)(v103 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 8);
    unint64_t v122 = *(void *)(v103 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 16);
    uint64_t v123 = *(void *)(v103 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24);
    uint64_t v124 = v135 | (v136 << 8) | (v153 << 16) | (v154 << 24);
    uint64_t v125 = *(void *)(v103 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 32);
    unint64_t v126 = *(void *)(v103 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 40);
    uint64_t v127 = v160;
    void *v119 = v158;
    v119[1] = v127;
    v119[2] = v137;
    v119[3] = v124;
    uint64_t v128 = v161;
    v119[4] = v159;
    v119[5] = v128;
    v119[6] = v12;
    sub_1000EA094(a3, (void (*)(uint64_t, uint64_t))sub_1000A618C);
    sub_1000E996C(v120, v121, v122, v123, v125, v126);
    uint64_t v129 = sub_10013D3A0();
    uint64_t v130 = v164;
    id v132 = sub_1000D2214(v164, v129, v131, 1, v156, (unint64_t)v157, 7);
    swift_bridgeObjectRelease();
    uint64_t v133 = *(void **)(v103 + 32);
    *(void *)(v103 + 32) = v132;

    sub_1000D1BB0(v103);
    swift_release();
LABEL_36:
    (*(void (**)(char *, uint64_t))(v142 + 8))(v150, v141);
    return;
  }
LABEL_25:
  sub_10013D3A0();
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v151, v150, v141);
  id v58 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo());
  uint64_t v59 = (void *)DockCoreInfo.init(type:name:identifier:)();
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_1001891D0(v59);
  uint64_t v61 = v60;
  uint64_t v63 = sub_10013D3A0();
  uint64_t v155 = v61;
  if (v61) {
    char v64 = 7;
  }
  else {
    char v64 = 6;
  }
  id v65 = sub_1000D2214(v164, v63, v62, 1, v156, (unint64_t)v157, v64);
  swift_bridgeObjectRelease();
  uint64_t v66 = v162;
  uint64_t v67 = v165;
  v139(v162, v138, v165);
  id v68 = v65;
  uint64_t v69 = Logger.logObject.getter();
  os_log_type_t v70 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v69, v70))
  {
    uint64_t v157 = v59;
    id v71 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)id v71 = 136315138;
    id v72 = [v68 identifier];
    if (!v72)
    {

      __break(1u);
      return;
    }
    uint64_t v73 = v72;
    uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v76 = v75;

    v172[0] = sub_1000993AC(v74, v76, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "Creating new accessory %s.", v71, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v134(v162, v165);
    uint64_t v57 = v163;
    uint64_t v59 = v157;
  }
  else
  {

    v134(v66, v67);
  }
  type metadata accessor for DaemonAccessory();
  swift_allocObject();
  id v77 = v57;
  unint64_t v167 = (char *)v68;
  id v78 = v59;
  uint64_t v79 = sub_1001A67DC((uint64_t)v57, (uint64_t)v78, (uint64_t)v68);
  uint64_t v80 = (void *)((char *)v79 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  uint64_t v81 = *(void *)((char *)v79 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload);
  uint64_t v82 = *(void *)((char *)v79 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 8);
  unint64_t v83 = *(void *)((char *)v79 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 16);
  uint64_t v84 = *(void *)((char *)v79 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24);
  unint64_t v85 = v135 | ((unint64_t)v136 << 8) | ((unint64_t)v153 << 16);
  uint64_t v86 = *(void *)((char *)v79 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 32);
  unint64_t v87 = *(void *)((char *)v79 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 40);
  uint64_t v88 = v154;
  *uint64_t v80 = v158;
  unint64_t v89 = v85 | (v88 << 24);
  uint64_t v90 = v137;
  v80[1] = v160;
  v80[2] = v90;
  uint64_t v80[3] = v89;
  uint64_t v91 = v161;
  v80[4] = v159;
  v80[5] = v91;
  v80[6] = v12;
  sub_1000EA094(a3, (void (*)(uint64_t, uint64_t))sub_1000A618C);
  sub_1000E996C(v81, v82, v83, v84, v86, v87);
  uint64_t v92 = (void *)v155;
  if (v155)
  {
    sub_1000D0BA0((uint64_t)v79);
    sub_1000D1BB0((uint64_t)v79);

    swift_release();
    goto LABEL_36;
  }
  uint64_t v93 = v166;
  uint64_t v94 = *(void **)&v166[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
  uint64_t v95 = swift_allocObject();
  *(void *)(v95 + 16) = v93;
  *(void *)(v95 + 24) = v79;
  unint64_t v170 = sub_1000EA514;
  uint64_t v171 = v95;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v169 = sub_1001468DC;
  *((void *)&v169 + 1) = &unk_100276A58;
  id v96 = _Block_copy(&aBlock);
  id v97 = v94;
  id v98 = v93;
  swift_retain();
  uint64_t v99 = v144;
  static DispatchQoS.unspecified.getter();
  v172[0] = &_swiftEmptyArrayStorage;
  sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  uint64_t v100 = v146;
  uint64_t v101 = v149;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v96);

  swift_release();
  (*(void (**)(char *, uint64_t))(v148 + 8))(v100, v101);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v99, v147);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v150, v141);
  swift_release();
}

void sub_1000D3698(uint64_t a1, uint64_t a2)
{
  sub_1000D0BA0(a2);
  if (!*(unsigned char *)(a2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired)
    && *(unsigned char *)(a2 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_setupPayload + 24) != 2)
  {
    uint64_t v4 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock;
    uint64_t v5 = *(os_unfair_lock_s **)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingStateLock);
    swift_retain();
    os_unfair_lock_lock(v5 + 4);
    swift_release();
    *(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairing) = a2;
    swift_retain();
    swift_release();
    uint64_t v6 = *(os_unfair_lock_s **)(a1 + v4);
    swift_retain();
    os_unfair_lock_unlock(v6 + 4);
    swift_release();
    uint64_t v7 = *(char **)(a2 + 16);
    if (v7)
    {
      if (*(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
      {
        uint64_t v8 = qword_1002A7C20;
        uint64_t v9 = v7;
        if (v8 != -1) {
          swift_once();
        }
        uint64_t v10 = (void *)qword_1002B17A0;
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = v10;
        *(void *)(v11 + 24) = v9;
        uint64_t v12 = v9;
        id v13 = v10;
        sub_1001DA690((uint64_t)sub_1000EA51C, v11);

        swift_release();
      }
      else
      {
        uint64_t v14 = v7;
        oslog = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(oslog, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v16 = 0;
          _os_log_impl((void *)&_mh_execute_header, oslog, v15, "CB peripheral is nil", v16, 2u);
          swift_slowDealloc();
        }
      }
    }
  }
}

uint64_t sub_1000D38F8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v89 = *(void *)(v4 - 8);
  uint64_t v90 = v4;
  __chkstk_darwin(v4);
  unint64_t v87 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for DispatchQoS();
  uint64_t v86 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  unint64_t v85 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v91 = *(void (***)(char *, uint64_t))(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v81 - v11;
  DockCoreInfo.identifier.getter();
  uint64_t v92 = sub_10013EDA0((uint64_t)v12);
  unint64_t v93 = v13;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1002B1628;
  uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v16 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v16 + 4);
  swift_release();
  uint64_t v17 = *(void **)(v14 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v18 = *(os_unfair_lock_s **)(v14 + v15);
  id v19 = v17;
  swift_retain();
  os_unfair_lock_unlock(v18 + 4);
  swift_release();
  if (!v17) {
    goto LABEL_14;
  }
  sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
  id v20 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
  char v21 = static NSObject.== infix(_:_:)();

  if (v21)
  {
    id v84 = v19;
    uint64_t v22 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
    *(void *)&long long aBlock = 0;
    id v23 = [v22 getLocalPairingIdentity:&aBlock];
    if (!v23)
    {
      id v55 = (id)aBlock;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v52 = v92;
      unint64_t v53 = v93;
      return sub_1000A6240(v52, v53);
    }
    id v24 = v23;
    uint64_t v82 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    uint64_t v25 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
    id v26 = (id)aBlock;
    id v27 = v25;
    OS_dispatch_semaphore.wait()();

    unint64_t v83 = v2;
    uint64_t v28 = &v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    id v29 = *(void (***)(char *, uint64_t))v28;
    uint64_t v30 = *(void *)(*(void *)v28 + 16);
    if (v30)
    {
      id v81 = v24;
      uint64_t v31 = (uint64_t)(v29 + 4);
      unint64_t v32 = v91 + 1;
      uint64_t v91 = v29;
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000A5D40(v31, (uint64_t)v98);
        id v33 = *(id *)(*sub_1000A5DA4(v98, v98[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v33) = static UUID.== infix(_:_:)();
        unint64_t v34 = *v32;
        (*v32)(v10, v7);
        v34(v12, v7);
        if (v33) {
          break;
        }
        sub_100099BCC((uint64_t)v98);
        v31 += 40;
        if (!--v30)
        {
          swift_bridgeObjectRelease();
          id v24 = v81;
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v2 = v83;
      id v56 = *(id *)&v83[v82];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v98, (uint64_t)&aBlock);
      sub_100099BCC((uint64_t)v98);
      id v24 = v81;
      if (*((void *)&v95 + 1))
      {
        sub_1000992E8(&qword_1002A82E0);
        type metadata accessor for DaemonAccessory();
        char v57 = swift_dynamicCast();
        id v58 = v84;
        if (v57)
        {
          uint64_t v59 = v98[0];
          uint64_t v60 = *(void **)(v98[0] + 32);
          if (v60 && (self, (uint64_t v61 = swift_dynamicCastObjCClass()) != 0))
          {
            uint64_t v62 = (void *)v61;
            uint64_t v63 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
            char v64 = (void *)swift_allocObject();
            v64[2] = v2;
            v64[3] = a1;
            v64[4] = v59;
            id v96 = sub_1000EA4C4;
            id v97 = v64;
            *(void *)&long long aBlock = _NSConcreteStackBlock;
            *((void *)&aBlock + 1) = 1107296256;
            *(void *)&long long v95 = sub_1001B81B8;
            *((void *)&v95 + 1) = &unk_1002769B8;
            id v65 = _Block_copy(&aBlock);
            id v66 = v60;
            id v67 = v24;
            id v68 = v63;
            uint64_t v69 = v83;
            id v70 = a1;
            swift_retain();
            swift_release();
            [v62 removePairing:v67 completionQueue:v68 completionHandler:v65];
            swift_release();

            id v71 = v65;
            uint64_t v2 = v83;
            _Block_release(v71);
          }
          else
          {
            id v72 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
            uint64_t v73 = (void *)swift_allocObject();
            v73[2] = v2;
            v73[3] = a1;
            v73[4] = v59;
            id v96 = sub_1000EA46C;
            id v97 = v73;
            *(void *)&long long aBlock = _NSConcreteStackBlock;
            *((void *)&aBlock + 1) = 1107296256;
            *(void *)&long long v95 = sub_1001468DC;
            *((void *)&v95 + 1) = &unk_100276968;
            uint64_t v91 = (void (**)(char *, uint64_t))_Block_copy(&aBlock);
            uint64_t v74 = v2;
            id v75 = a1;
            swift_retain();
            id v76 = v72;
            id v77 = v85;
            static DispatchQoS.unspecified.getter();
            v98[0] = &_swiftEmptyArrayStorage;
            sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            sub_1000992E8((uint64_t *)&unk_1002A7F60);
            sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
            id v78 = v87;
            uint64_t v79 = v90;
            uint64_t v2 = v83;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            uint64_t v80 = v91;
            OS_dispatch_queue.async(group:qos:flags:execute:)();

            _Block_release(v80);
            swift_release();

            (*(void (**)(char *, uint64_t))(v89 + 8))(v78, v79);
            (*(void (**)(char *, uint64_t))(v86 + 8))(v77, v88);
            swift_release();
          }
        }
        else
        {
        }
        goto LABEL_14;
      }
    }
    else
    {
LABEL_11:
      uint64_t v2 = v83;
      id v35 = *(id *)&v83[v82];
      OS_dispatch_semaphore.signal()();

      id v96 = 0;
      long long aBlock = 0u;
      long long v95 = 0u;
    }

    sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AAA30);
  }
  else
  {
  }
LABEL_14:
  id v36 = *(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  uint64_t v38 = v92;
  unint64_t v37 = v93;
  sub_10013E71C(v92, v93);
  NSString v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)&long long aBlock = 0;
  unsigned int v40 = [v36 removeAccessoryKeyForName:v39 error:&aBlock];

  if (v40)
  {
    id v41 = (id)aBlock;
  }
  else
  {
    id v42 = (id)aBlock;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  sub_100189354(a1);
  uint64_t v43 = (void *)sub_10013E71C(v38, v37);
  sub_1000DF940(v43, v44);
  swift_bridgeObjectRelease();
  uint64_t v45 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v46 = *(id *)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  id v47 = (uint64_t *)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  id v48 = a1;
  uint64_t v49 = sub_1000E8970(v47, (uint64_t)v48);

  int64_t v50 = *(void *)(*v47 + 16);
  if (v50 < v49) {
    __break(1u);
  }
  sub_1001A1120(v49, v50);
  swift_endAccess();
  id v51 = *(id *)&v2[v45];
  OS_dispatch_semaphore.signal()();

  uint64_t v52 = v38;
  unint64_t v53 = v37;
  return sub_1000A6240(v52, v53);
}

void sub_1000D4360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000E3F84(a3);
  uint64_t v5 = *(char **)(a4 + 16);
  if (v5 && *(void *)&v5[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    uint64_t v6 = qword_1002A7C20;
    uint64_t v7 = v5;
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v8 = (void *)qword_1002B17A0;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v8;
    *(void *)(v9 + 24) = v5;
    uint64_t v10 = v7;
    id v11 = v8;
    sub_1001DA690((uint64_t)sub_1000EAB30, v9);

    swift_release();
  }
}

void sub_1000D4460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000E3F84(a2);
  uint64_t v4 = *(char **)(a3 + 16);
  if (v4 && *(void *)&v4[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
  {
    uint64_t v5 = qword_1002A7C20;
    uint64_t v6 = v4;
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v7 = (void *)qword_1002B17A0;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v7;
    *(void *)(v8 + 24) = v4;
    uint64_t v9 = v6;
    id v10 = v7;
    sub_1001DA690((uint64_t)sub_1000EAB30, v8);

    swift_release();
  }
}

uint64_t sub_1000D4560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v21 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(void **)&v3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  void v14[5] = a3;
  aBlock[4] = sub_1000EA43C;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100276918;
  uint64_t v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v16 = v13;
  uint64_t v17 = v3;
  sub_1000CC298(a2);
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v20);
  return swift_release();
}

uint64_t sub_1000D4850(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v152 = a5;
  uint64_t v151 = a4;
  uint64_t v153 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v158 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v155 = (char *)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = type metadata accessor for DispatchQoS();
  uint64_t v156 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v154 = (char *)&v145 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = (char *)type metadata accessor for Logger();
  uint64_t v164 = *((void *)v165 - 1);
  uint64_t v10 = __chkstk_darwin(v165);
  id v150 = (char *)&v145 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v145 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v145 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v161 = (char *)&v145 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v149 = (char *)&v145 - v21;
  __chkstk_darwin(v20);
  id v23 = (char *)&v145 - v22;
  uint64_t v148 = type metadata accessor for UUID();
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  uint64_t v25 = (char *)&v145 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = a3;
  DockCoreInfo.identifier.getter();
  uint64_t v26 = sub_10013EDA0((uint64_t)v25);
  unint64_t v28 = v27;
  uint64_t v29 = sub_10013E71C(v26, v27);
  id v160 = a1;
  uint64_t v31 = sub_1000F861C(v29, v30);
  id v162 = v31;
  swift_bridgeObjectRelease();
  if (!v31)
  {
    sub_1000A6240(v26, v28);
    return 0;
  }
  uint64_t v163 = v26;
  sub_1000EA2DC(a2 + 20, (uint64_t)v172, (uint64_t *)&qword_1002A8FE8);
  sub_1000EA2DC((uint64_t)v172, (uint64_t)&v173, (uint64_t *)&qword_1002A8FE8);
  if (v173 == 2)
  {
    uint64_t v32 = v164;
    id v33 = v165;
    (*(void (**)(char *, char *, char *))(v164 + 16))(v14, &v166[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v165);
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      id v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Unable to parse Pairing Refresh Number!", v36, 2u);
      id v33 = v165;
      swift_slowDealloc();

      sub_1000A6240(v163, v28);
    }
    else
    {
      sub_1000A6240(v163, v28);
    }
    (*(void (**)(char *, char *))(v32 + 8))(v14, v33);
    return 0;
  }
  unsigned int v37 = v174;
  unint64_t v38 = v28;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  id v39 = *(id *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  unsigned int v40 = (const void *)sub_10013E71C(v163, v28);
  unint64_t v42 = sub_100177250(v40, v41, 1);
  unint64_t v43 = v42;
  if (!(v42 >> 62))
  {
    if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_10;
    }
LABEL_63:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v140 = v164;
    uint64_t v141 = v165;
    (*(void (**)(char *, char *, char *))(v164 + 16))(v17, &v166[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v165);
    uint64_t v142 = Logger.logObject.getter();
    os_log_type_t v143 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v142, v143))
    {
      uint64_t v144 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v144 = 0;
      _os_log_impl((void *)&_mh_execute_header, v142, v143, "Unable to load Pairing State Number!", v144, 2u);
      uint64_t v141 = v165;
      swift_slowDealloc();

      sub_1000A6240(v163, v28);
    }
    else
    {
      sub_1000A6240(v163, v28);
    }
    (*(void (**)(char *, char *))(v140 + 8))(v17, v141);
    return 0;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_63;
  }
LABEL_10:
  if ((v43 & 0xC000000000000001) != 0)
  {
    uint64_t v44 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_70:
      swift_once();
LABEL_35:
      sub_1000EAB90();
      sub_1000A6240(v163, v146);

      return 0;
    }
    uint64_t v44 = *(void *)(v43 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  unsigned int v45 = *(unsigned __int16 *)(v44 + 128);

  swift_bridgeObjectRelease();
  swift_release();
  if (v45 <= v37 || (unsigned __int16)(v45 - v37) >= 0x19u)
  {
    unint64_t v146 = v28;
    (*(void (**)(char *, char *, char *))(v164 + 16))(v23, &v166[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v165);
    id v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      id v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Pairing refresh outdates pairing state, we should unpair!", v68, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, char *))(v164 + 8))(v23, v165);
    sub_1000D38F8(v159);
    if (qword_1002A7C20 == -1) {
      goto LABEL_35;
    }
    goto LABEL_70;
  }
  uint64_t v46 = v163;
  uint64_t v47 = sub_10013E71C(v163, v28);
  uint64_t v49 = v48;
  int64_t v50 = v166;
  id v150 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v51 = *(id *)&v166[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  OS_dispatch_semaphore.wait()();

  uint64_t v52 = (uint64_t *)&v50[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v53 = *v52;
  uint64_t v54 = *(void *)(*v52 + 16);
  id v55 = v161;
  if (!v54)
  {
LABEL_33:
    id v69 = *(id *)&v150[(void)v166];
    OS_dispatch_semaphore.signal()();

    long long v169 = 0;
    long long aBlock = 0u;
    long long v168 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_38;
  }
  unint64_t v146 = v28;
  uint64_t v56 = v53 + 32;
  uint64_t v148 = v53;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000A5D40(v56, (uint64_t)v171);
    char v57 = *(void **)(*sub_1000A5DA4(v171, v171[3]) + 32);
    if (!v57) {
      goto LABEL_18;
    }
    id v58 = v57;
    id v59 = [v58 identifier];
    if (v59) {
      break;
    }
LABEL_17:

LABEL_18:
    sub_100099BCC((uint64_t)v171);
    v56 += 40;
    if (!--v54)
    {
      swift_bridgeObjectRelease();
      unint64_t v38 = v146;
      uint64_t v46 = v163;
      goto LABEL_33;
    }
  }
  uint64_t v60 = v59;
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v63 = v62;

  if (v61 != v47 || v63 != v49)
  {
    char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    id v55 = v161;
    if (v65) {
      goto LABEL_37;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRelease();
  id v55 = v161;
LABEL_37:
  swift_bridgeObjectRelease();
  id v70 = *(id *)&v150[(void)v166];
  OS_dispatch_semaphore.signal()();

  sub_1000A5D40((uint64_t)v171, (uint64_t)&aBlock);
  sub_100099BCC((uint64_t)v171);
  swift_bridgeObjectRelease();
  unint64_t v38 = v146;
  uint64_t v46 = v163;
LABEL_38:
  uint64_t v71 = v164;
  if (*((void *)&v168 + 1))
  {
    sub_1000992E8(&qword_1002A82E0);
    type metadata accessor for DaemonAccessory();
    if (swift_dynamicCast())
    {
      unint64_t v72 = v38;
      uint64_t v73 = v171[0];
      sub_1001891D0(v159);
      if (v74)
      {
        id v75 = v74;
        int v76 = dispatch thunk of DockCoreAccessory.needsMigration.getter();
      }
      else
      {
        int v76 = 0;
      }
      uint64_t v105 = *(void **)(v73 + 32);
      if (v105 && (self, (uint64_t v106 = swift_dynamicCastObjCClass()) != 0))
      {
        uint64_t v107 = (char *)v106;
        os_log_type_t v108 = (unsigned char *)(v73 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer);
        char v109 = *(unsigned char *)(v73 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer);
        id v110 = v105;
        uint64_t v161 = v107;
        if (v109)
        {
          uint64_t v71 = v164;
          goto LABEL_53;
        }
        BOOL v139 = [v107 connectReason] != 8;
        uint64_t v71 = v164;
        id v111 = v166;
        id v112 = v160;
        if (((v139 | v76) & 1) == 0)
        {
LABEL_55:
          uint64_t v117 = *(void **)(v73 + 16);
          *(void *)(v73 + 16) = v112;
          id v118 = v112;

          os_log_type_t v119 = v149;
          uint64_t v120 = v165;
          (*(void (**)(char *, char *, char *))(v71 + 16))(v149, &v111[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v165);
          sub_1000A618C(v46, v72);
          sub_1000A618C(v46, v72);
          uint64_t v121 = Logger.logObject.getter();
          os_log_type_t v122 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v121, v122))
          {
            uint64_t v123 = (uint8_t *)swift_slowAlloc();
            id v160 = (id)swift_slowAlloc();
            *(void *)&long long aBlock = v160;
            *(_DWORD *)uint64_t v123 = 136315138;
            uint64_t v124 = v163;
            uint64_t v125 = sub_10013E71C(v163, v72);
            v171[0] = sub_1000993AC(v125, v126, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000A6240(v124, v72);
            sub_1000A6240(v124, v72);
            _os_log_impl((void *)&_mh_execute_header, v121, v122, "Found existing record for accessory %s.", v123, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, char *))(v164 + 8))(v149, v165);
            uint64_t v127 = v166;
          }
          else
          {
            uint64_t v127 = v111;
            uint64_t v128 = v163;
            sub_1000A6240(v163, v72);
            sub_1000A6240(v128, v72);

            (*(void (**)(char *, char *))(v71 + 8))(v119, v120);
          }
          uint64_t v129 = v153;
          uint64_t v130 = *(void **)&v127[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
          uint64_t v131 = (void *)swift_allocObject();
          uint64_t v132 = v151;
          void v131[2] = v118;
          void v131[3] = v132;
          v131[4] = v152;
          long long v169 = sub_1000EA3E0;
          unint64_t v170 = v131;
          *(void *)&long long aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256;
          *(void *)&long long v168 = sub_1001468DC;
          *((void *)&v168 + 1) = &unk_1002768C8;
          uint64_t v133 = _Block_copy(&aBlock);
          id v134 = v118;
          id v135 = v130;
          swift_retain();
          uint64_t v136 = v154;
          static DispatchQoS.unspecified.getter();
          v171[0] = &_swiftEmptyArrayStorage;
          sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_1000992E8((uint64_t *)&unk_1002A7F60);
          sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
          uint64_t v137 = v155;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();

          _Block_release(v133);
          swift_release();

          sub_1000A6240(v163, v72);
          (*(void (**)(char *, uint64_t))(v158 + 8))(v137, v129);
          (*(void (**)(char *, uint64_t))(v156 + 8))(v136, v157);
          goto LABEL_59;
        }
      }
      else
      {
        uint64_t v161 = 0;
        os_log_type_t v108 = (unsigned char *)(v73 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer);
LABEL_53:
        id v111 = v166;
        id v112 = v160;
      }
      uint64_t v113 = sub_10013D3A0();
      id v115 = sub_1000D2214(v162, v113, v114, 1, 0, 0xC000000000000000, 8);
      swift_bridgeObjectRelease();
      uint64_t v116 = *(void **)(v73 + 32);
      *(void *)(v73 + 32) = v115;

      *os_log_type_t v108 = 0;
      goto LABEL_55;
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AAA30);
  }
  id v77 = v166;
  uint64_t v78 = sub_10013D3A0();
  uint64_t v79 = v77;
  id v81 = (char *)sub_1000D2214(v162, v78, v80, 1, 0, 0xC000000000000000, 8);
  swift_bridgeObjectRelease();
  uint64_t v82 = v165;
  (*(void (**)(char *, char *, char *))(v71 + 16))(v55, &v79[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v165);
  sub_1000A618C(v46, v38);
  sub_1000A618C(v46, v38);
  unint64_t v83 = Logger.logObject.getter();
  os_log_type_t v84 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v83, v84))
  {
    unint64_t v85 = (uint8_t *)swift_slowAlloc();
    uint64_t v86 = swift_slowAlloc();
    id v150 = v81;
    *(void *)&long long aBlock = v86;
    *(_DWORD *)unint64_t v85 = 136315138;
    uint64_t v87 = sub_10013E71C(v46, v38);
    v171[0] = sub_1000993AC(v87, v88, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A6240(v46, v38);
    sub_1000A6240(v46, v38);
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "Creating new record for accessory %s.", v85, 0xCu);
    swift_arrayDestroy();
    id v81 = v150;
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, char *))(v71 + 8))(v161, v165);
  }
  else
  {
    sub_1000A6240(v46, v38);
    sub_1000A6240(v46, v38);

    (*(void (**)(char *, char *))(v71 + 8))(v55, v82);
  }
  uint64_t v89 = v153;
  uint64_t v90 = v152;
  uint64_t v91 = v151;
  type metadata accessor for DaemonAccessory();
  swift_allocObject();
  uint64_t v92 = (uint64_t)v160;
  id v93 = v160;
  uint64_t v94 = v159;
  uint64_t v165 = v81;
  long long v95 = sub_1001A67DC(v92, (uint64_t)v94, (uint64_t)v81);
  *((unsigned char *)v95 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) = 2;
  id v96 = v166;
  id v97 = *(void **)&v166[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
  id v98 = (void *)swift_allocObject();
  v98[2] = v96;
  v98[3] = v95;
  v98[4] = v93;
  void v98[5] = v91;
  v98[6] = v90;
  long long v169 = sub_1000EA390;
  unint64_t v170 = v98;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v168 = sub_1001468DC;
  *((void *)&v168 + 1) = &unk_100276878;
  uint64_t v99 = _Block_copy(&aBlock);
  id v100 = v93;
  swift_retain();
  id v101 = v97;
  id v102 = v96;
  swift_retain();
  uint64_t v103 = v154;
  static DispatchQoS.unspecified.getter();
  v171[0] = &_swiftEmptyArrayStorage;
  sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  id v104 = v155;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();

  _Block_release(v99);
  swift_release();

  sub_1000A6240(v163, v38);
  (*(void (**)(char *, uint64_t))(v158 + 8))(v104, v89);
  (*(void (**)(char *, uint64_t))(v156 + 8))(v103, v157);
LABEL_59:
  swift_release();
  return 1;
}

void sub_1000D5FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1002A7C20 != -1) {
    swift_once();
  }
  sub_1000EAB90();
  sub_10013CDA8(a2, a3);
}

void sub_1000D6030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_1002A7C20 != -1) {
    swift_once();
  }
  sub_1000EAB90();
  sub_10013CDA8(a4, a5);
}

uint64_t sub_1000D60B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v258 = a3;
  uint64_t v257 = a2;
  v280 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v292 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  v264 = (char *)&v238 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  v263 = (char *)&v238 - v9;
  __chkstk_darwin(v8);
  v270 = (char *)&v238 - v10;
  uint64_t v262 = type metadata accessor for Date();
  uint64_t v261 = *(void *)(v262 - 8);
  __chkstk_darwin(v262);
  v260 = (char *)&v238 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v294 = (void *)type metadata accessor for String.Encoding();
  uint64_t v291 = *(v294 - 1);
  __chkstk_darwin(v294);
  v293 = (char *)&v238 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BTDiscoveredDevice();
  uint64_t v284 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v268 = (uint64_t)&v238 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v17 = (void *)((char *)&v238 - v16);
  uint64_t v18 = (void *)type metadata accessor for Logger();
  uint64_t v277 = *(v18 - 1);
  uint64_t v19 = __chkstk_darwin(v18);
  v266 = (char *)&v238 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  v271 = (char *)&v238 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v269 = (char *)&v238 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v265 = (char *)&v238 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v267 = (char *)&v238 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v259 = (char *)&v238 - v30;
  __chkstk_darwin(v29);
  uint64_t v296 = (uint64_t)&v238 - v31;
  unint64_t v32 = type metadata accessor for DockStatus();
  id v33 = *(void **)(v32 - 8);
  uint64_t v34 = __chkstk_darwin(v32);
  id v36 = (char *)&v238 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34);
  unint64_t v38 = (char *)&v238 - v37;
  if (sub_1000E7ED4()) {
    goto LABEL_3;
  }
  uint64_t v39 = v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus;
  swift_beginAccess();
  unsigned int v40 = (void (*)(uint64_t, uint64_t, unint64_t))v33[2];
  uint64_t v248 = v39;
  v247 = v33 + 2;
  v246 = v40;
  v40((uint64_t)v38, v39, v32);
  id v41 = (void (*)(char *, void, unint64_t))v33[13];
  v244 = v33 + 13;
  v243 = v41;
  v41(v36, enum case for DockStatus.Undocked(_:), v32);
  sub_1000EAA2C(&qword_1002A8FD8, (void (*)(uint64_t))&type metadata accessor for DockStatus);
  LOBYTE(v39) = dispatch thunk of static Comparable.< infix(_:_:)();
  unint64_t v42 = v18;
  uint64_t v43 = v4;
  v245 = v33;
  uint64_t v44 = v33 + 1;
  uint64_t v45 = v33[1];
  ((void (*)(char *, unint64_t))v45)(v36, v32);
  v250 = v44;
  v249 = (void (*)(uint64_t, unint64_t))v45;
  ((void (*)(char *, unint64_t))v45)(v38, v32);
  uint64_t v4 = v43;
  uint64_t v18 = v42;
  if (v39)
  {
LABEL_3:
    uint64_t v46 = v277;
    uint64_t v47 = v296;
    (*(void (**)(uint64_t, uint64_t, void *))(v277 + 16))(v296, v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v18);
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v48, v49))
    {
      int64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Ignoring newly discovered bt device, already connected or trying to connect", v50, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(uint64_t, void *))(v46 + 8))(v47, v18);
  }
  v240 = v38;
  unint64_t v241 = v32;
  v274 = v17;
  v273 = (char *)v4;
  v275 = v42;
  uint64_t v252 = v5;
  if (v280)
  {
    swift_bridgeObjectRetain();
    goto LABEL_21;
  }
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v52 = qword_1002B1628;
  uint64_t v53 = (char *)OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v54 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v54 + 4);
  swift_release();
  id v55 = (unint64_t *)(v52 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess();
  unint64_t v56 = *v55;
  char v57 = *(os_unfair_lock_s **)&v53[v52];
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v57 + 4);
  swift_release();
  if (v56 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v58) {
      goto LABEL_12;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    v280 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  uint64_t v58 = *(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v58) {
    goto LABEL_20;
  }
LABEL_12:
  *(void *)&v304[0] = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  if (v58 < 0)
  {
    __break(1u);
    goto LABEL_134;
  }
  uint64_t v59 = 0;
  do
  {
    if ((v56 & 0xC000000000000001) != 0) {
      id v60 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v60 = *(id *)(v56 + 8 * v59 + 32);
    }
    uint64_t v61 = v60;
    ++v59;
    dispatch thunk of DockCoreAccessory.info.getter();

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v45 = *(void *)(*(void *)&v304[0] + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
  }
  while (v58 != v59);
  v280 = *(void **)&v304[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = v274;
  uint64_t v4 = (uint64_t)v273;
  uint64_t v18 = v275;
LABEL_21:
  v299 = &_swiftEmptySetSingleton;
  if (qword_1002A7C20 != -1) {
LABEL_132:
  }
    swift_once();
  uint64_t v62 = sub_1001DB4F4();
  uint64_t v278 = v62[2];
  if (!v278)
  {
LABEL_97:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v144 = v277;
    uint64_t v145 = v266;
    (*(void (**)(char *, uint64_t, void *))(v277 + 16))(v266, v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v18);
    unint64_t v146 = Logger.logObject.getter();
    os_log_type_t v147 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v146, v147))
    {
      uint64_t v148 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v148 = 0;
      _os_log_impl((void *)&_mh_execute_header, v146, v147, "Unable to find matching discovered device.", v148, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, void *))(v144 + 8))(v145, v18);
  }
  uint64_t v63 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
  uint64_t v254 = v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger;
  uint64_t v242 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn;
  v279 = (char *)v62 + ((*(unsigned __int8 *)(v284 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v284 + 80));
  uint64_t v239 = v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockSetupIdMap;
  swift_beginAccess();
  v256 = v63;
  swift_beginAccess();
  unint64_t v64 = 0;
  id v295 = 0;
  v253 = (void (**)(char *, uint64_t, void *))(v277 + 16);
  v255 = (void (**)(char *, void *))(v277 + 8);
  v251 = (void (**)(void *, uint64_t))(v292 + 8);
  v288 = (void (**)(uint64_t, void *))(v291 + 8);
  *(void *)&long long v65 = 16777728;
  long long v238 = v65;
  v272 = v62;
  while (1)
  {
    if (v64 >= v62[2]) {
      goto LABEL_129;
    }
    sub_1000E9F88((uint64_t)&v279[*(void *)(v284 + 72) * v64], (uint64_t)v17);
    id v66 = (void (*)(void, void))v17[3];
    if (v66) {
      break;
    }
    sub_1000E9FEC((uint64_t)v17);
LABEL_25:
    if (++v64 == v278) {
      goto LABEL_97;
    }
  }
  uint64_t v18 = (void *)v4;
  unint64_t v281 = v64;
  uint64_t v67 = v17[2];
  uint64_t v4 = v17[4];
  uint64_t v68 = v17[5];
  uint64_t v70 = v17[6];
  unint64_t v69 = v17[7];
  *((void *)&v72 + 1) = v68;
  *(void *)&long long v72 = v4;
  uint64_t v71 = v72 >> 32;
  *(void *)&long long v301 = v67;
  *((void *)&v301 + 1) = v66;
  *(void *)&long long v302 = v4;
  WORD4(v302) = WORD2(v71);
  BYTE10(v302) = BYTE2(v68) & 1;
  *(void *)&long long v303 = v70;
  *((void *)&v303 + 1) = v69;
  uint64_t v292 = v4;
  v285 = v66;
  uint64_t v296 = v67;
  unint64_t v282 = v69;
  uint64_t v283 = v70;
  if ((v68 & 0x10000) != 0)
  {
    sub_1000EA048(v67, (uint64_t)v66, v4, v68, v70, v69);
    sub_1000EA048(v67, (uint64_t)v66, v4, v68, v70, v69);
    uint64_t v45 = (uint64_t)v280;
    unint64_t v96 = swift_bridgeObjectRetain();
    id v97 = v295;
    id v98 = sub_1000E90A8(v96, (uint64_t)&v301);
    unint64_t v99 = v69;
    unint64_t v100 = (unint64_t)v98;
    id v295 = v97;
    uint64_t v101 = (uint64_t)v285;
    uint64_t v102 = v67;
    uint64_t v78 = v68;
    sub_1000E94DC(v102, (uint64_t)v285, v4, v68, v70, v99);
    swift_bridgeObjectRelease();
    if (v100 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v133 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      BOOL v95 = v133 == 1;
      uint64_t v101 = (uint64_t)v285;
      if (v95) {
        goto LABEL_59;
      }
      uint64_t v4 = (uint64_t)v18;
      swift_bridgeObjectRetain();
      uint64_t v103 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v103 = *(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v4 = (uint64_t)v18;
      if (v103 == 1)
      {
LABEL_59:
        if ((v100 & 0xC000000000000001) != 0)
        {
          uint64_t v18 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v45 = v292;
          uint64_t v17 = v270;
        }
        else
        {
          uint64_t v45 = v292;
          uint64_t v17 = v270;
          if (!*(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_131;
          }
          uint64_t v18 = *(id *)(v100 + 32);
        }
        swift_bridgeObjectRelease();
        uint64_t v104 = (uint64_t)v274;
        if ((int)[(id)*v274 rssi] >= -70)
        {
          swift_retain();
          DockCoreInfo.identifier.getter();
          sub_1000F0C40((uint64_t)v17);
          swift_release();
          id v66 = (void (*)(void, void))*v251;
          uint64_t v110 = v252;
          (*v251)(v17, v252);
          uint64_t v111 = (uint64_t)v299;
          swift_bridgeObjectRetain();
          DockCoreInfo.identifier.getter();
          char v112 = sub_10010865C((uint64_t)v17, v111);
          swift_bridgeObjectRelease();
          v66(v17, v110);
          if (v112)
          {
            (*v253)(v267, v254, v275);
            uint64_t v113 = Logger.logObject.getter();
            os_log_type_t v114 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v113, v114))
            {
              id v115 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)id v115 = 0;
              _os_log_impl((void *)&_mh_execute_header, v113, v114, "Ignoring newly discovered bt device, old adv data", v115, 2u);
              swift_slowDealloc();
            }

            sub_1000E94DC(v296, (uint64_t)v285, v45, v78, v283, v282);
            uint64_t v116 = *v255;
            uint64_t v117 = &v299;
          }
          else
          {
            uint64_t v120 = v263;
            DockCoreInfo.identifier.getter();
            sub_10019D11C((uint64_t)v17, v120);
            v66(v17, v110);
            unint64_t v76 = (unint64_t)v264;
            DockCoreInfo.identifier.getter();
            uint64_t v121 = *(void *)v239;
            if (!*(void *)(*(void *)v239 + 16)) {
              goto LABEL_115;
            }
            swift_bridgeObjectRetain();
            unint64_t v122 = sub_10016DC68(v76);
            if ((v123 & 1) == 0) {
              goto LABEL_114;
            }
            uint64_t v124 = (uint64_t *)(*(void *)(v121 + 56) + 16 * v122);
            uint64_t v126 = *v124;
            uint64_t v125 = (void (*)(void, void))v124[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v66(v76, v252);
            uint64_t v127 = (uint64_t)v285;
            if (v126 == v296 && v285 == v125)
            {
              swift_bridgeObjectRelease();
            }
            else
            {
              char v128 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v128 & 1) == 0) {
                goto LABEL_116;
              }
            }
            (*v253)(v265, v254, v275);
            uint64_t v129 = Logger.logObject.getter();
            os_log_type_t v130 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v129, v130))
            {
              uint64_t v131 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v131 = 0;
              _os_log_impl((void *)&_mh_execute_header, v129, v130, "Ignoring newly discovered bt device, adv data rejected as invalid due to startup validation failure", v131, 2u);
              uint64_t v127 = (uint64_t)v285;
              swift_slowDealloc();
            }

            sub_1000E94DC(v296, v127, v45, v78, v283, v282);
            uint64_t v116 = *v255;
            uint64_t v117 = (void **)&v297;
          }
          uint64_t v18 = v275;
          v116((char *)*(v117 - 32), v275);
          uint64_t v17 = v274;
          sub_1000E9FEC((uint64_t)v274);
          uint64_t v4 = (uint64_t)v273;
          goto LABEL_83;
        }
        (*v253)(v269, v254, v275);
        uint64_t v45 = v268;
        sub_1000E9F88(v104, v268);
        uint64_t v105 = v273;
        uint64_t v106 = Logger.logObject.getter();
        os_log_type_t v107 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v106, v107))
        {
          uint64_t v108 = swift_slowAlloc();
          *(_DWORD *)uint64_t v108 = v238;
          unsigned __int8 v109 = [*(id *)v45 rssi];
          sub_1000E9FEC(v45);
          *(unsigned char *)(v108 + 4) = v109;
          *(_WORD *)(v108 + 5) = 2048;
          *(void *)(v108 + 7) = -70;

          _os_log_impl((void *)&_mh_execute_header, v106, v107, "Ignoring newly discovered bt device, RSSI: %hhd is < %ld", (uint8_t *)v108, 0xFu);
          swift_slowDealloc();
        }
        else
        {
          sub_1000E9FEC(v45);

          uint64_t v106 = v105;
        }
        uint64_t v118 = v252;
        uint64_t v62 = v272;

        os_log_type_t v119 = v275;
        (*v255)(v269, v275);
        uint64_t v4 = (uint64_t)v273;
        swift_retain();
        DockCoreInfo.identifier.getter();
        sub_1000F057C((uint64_t)v17);

        uint64_t v18 = v119;
        swift_release();
        sub_1000E94DC(v296, (uint64_t)v285, v292, v78, v283, v282);
        (*v251)(v17, v118);
        uint64_t v17 = v274;
LABEL_90:
        sub_1000E9FEC((uint64_t)v17);
        goto LABEL_91;
      }
    }
    swift_bridgeObjectRelease();
    if (!v103)
    {
      sub_1000E9FEC((uint64_t)v17);
      sub_1000E94DC(v296, v101, v292, v68, v283, v282);
      uint64_t v62 = v272;
      unint64_t v64 = v281;
      uint64_t v18 = v275;
      goto LABEL_25;
    }
    uint64_t v18 = v275;
    (*v253)(v271, v254, v275);
    id v134 = Logger.logObject.getter();
    os_log_type_t v135 = static os_log_type_t.default.getter();
    BOOL v136 = os_log_type_enabled(v134, v135);
    uint64_t v62 = v272;
    if (v136)
    {
      uint64_t v137 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v137 = 0;
      _os_log_impl((void *)&_mh_execute_header, v134, v135, "Setup hash does not match with a unique setup payload, ignoring.", v137, 2u);
      uint64_t v101 = (uint64_t)v285;
      swift_slowDealloc();
    }

    sub_1000E94DC(v296, v101, v292, v68, v283, v282);
    (*v255)(v271, v18);
    goto LABEL_90;
  }
  uint64_t v276 = v68;
  uint64_t v73 = *v256;
  if (!((unint64_t)*v256 >> 62))
  {
    uint64_t v74 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v75 = v296;
    sub_1000EA048(v296, (uint64_t)v66, v292, v276, v283, v69);
    if (v74) {
      goto LABEL_31;
    }
    goto LABEL_82;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v132 = v296;
  sub_1000EA048(v296, (uint64_t)v66, v292, v276, v283, v69);
  uint64_t v75 = v132;
  uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v74)
  {
LABEL_82:
    sub_1000E94DC(v75, (uint64_t)v66, v292, v276, v283, v282);
    swift_bridgeObjectRelease();
    uint64_t v17 = v274;
    sub_1000E9FEC((uint64_t)v274);
    uint64_t v4 = (uint64_t)v273;
    uint64_t v18 = v275;
LABEL_83:
    uint64_t v62 = v272;
LABEL_91:
    unint64_t v64 = v281;
    goto LABEL_25;
  }
LABEL_31:
  unint64_t v76 = v73 & 0xC000000000000001;
  uint64_t v71 = 4;
  uint64_t v291 = v73;
  uint64_t v290 = v74;
  unint64_t v289 = v73 & 0xC000000000000001;
  while (1)
  {
    uint64_t v77 = v71 - 4;
    if (!v76)
    {
      uint64_t v18 = *(void **)(v73 + 8 * v71);
      swift_retain();
      uint64_t v78 = v71 - 3;
      if (!__OFADD__(v77, 1)) {
        goto LABEL_39;
      }
LABEL_113:
      __break(1u);
LABEL_114:
      swift_bridgeObjectRelease();
LABEL_115:
      v66(v76, v252);
LABEL_116:
      int v194 = v71;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v195 = (id)*v274;
      id v196 = [(id)*v274 name];
      if (v196)
      {
        v197 = v196;
        uint64_t v198 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v200 = v199;
      }
      else
      {
        uint64_t v198 = 0;
        uint64_t v200 = 0xE000000000000000;
      }
      v201 = (void *)v274[1];
      id v202 = v201;
      [v195 rssi];
      Class isa = Int8._bridgeToObjectiveC()().super.super.isa;
      id v204 = objc_allocWithZone((Class)type metadata accessor for BTDevice());
      id v205 = sub_10013DE2C(v198, v200, v201, isa);

      id v295 = v205;
      sub_10013D0D8((uint64_t)&v301);
      uint64_t v206 = (uint64_t)v240;
      unint64_t v207 = v241;
      v243(v240, enum case for DockStatus.DockedRSSI(_:), v241);
      uint64_t v208 = v248;
      swift_beginAccess();
      ((void (*)(uint64_t, uint64_t, unint64_t))v245[5])(v208, v206, v207);
      swift_endAccess();
      v209 = *(void **)&v273[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer];
      *(void *)&v273[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer] = 0;

      v210 = (void *)swift_allocObject();
      swift_unknownObjectWeakInit();
      if (v194 != 2 && (v194 & 0x10000) != 0)
      {
        type metadata accessor for DockCoreManager();
        if ((static DockCoreManager.ignoreStartupValidation.getter() & 1) == 0)
        {
          id v225 = v273;
          v294 = *(void **)&v273[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector];
          v246(v206, v208, v207);
          uint64_t v226 = v206;
          uint64_t v227 = swift_allocObject();
          *(void *)(v227 + 16) = v210;
          *(void *)(v227 + 24) = v225;
          id v228 = v295;
          *(void *)(v227 + 32) = v295;
          long long v229 = v302;
          *(_OWORD *)(v227 + 40) = v301;
          *(_OWORD *)(v227 + 56) = v229;
          *(_OWORD *)(v227 + 72) = v303;
          uint64_t v230 = v257;
          *(void *)(v227 + 8_Block_object_dispose(&STACK[0x3D0], 8) = v18;
          *(void *)(v227 + 96) = v230;
          *(void *)(v227 + 104) = v258;
          uint64_t v231 = v45;
          uint64_t v232 = v78;
          uint64_t v233 = v78;
          unint64_t v234 = v282;
          sub_1000EA048(v296, (uint64_t)v285, v231, v233, v283, v282);
          swift_retain();
          id v235 = v225;
          id v236 = v228;
          v237 = v18;
          sub_1000CC298(v230);
          DockDetector.newStatus(_:monitorJarvisCallback:)(v226, (uint64_t)sub_1000EA140, v227);

          swift_release();
          sub_1000E94DC(v296, (uint64_t)v285, v292, v232, v283, v234);

          v249(v226, v241);
          sub_1000E9FEC((uint64_t)v274);
          return swift_release();
        }
      }
      id v211 = v273;
      uint64_t v212 = *(void *)&v273[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector];
      v246(v206, v208, v207);
      DockDetector.newStatus(_:monitorJarvisCallback:)(v206, 0, 0);
      v249(v206, v207);
      v213 = (void **)(v212 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
      swift_beginAccess();
      v294 = *v213;
      unint64_t v38 = (char *)swift_allocObject();
      *((void *)v38 + 2) = v210;
      *((void *)v38 + 3) = v211;
      id v214 = v295;
      *((void *)v38 + 4) = v295;
      long long v215 = v302;
      *(_OWORD *)(v38 + 40) = v301;
      *(_OWORD *)(v38 + 56) = v215;
      *(_OWORD *)(v38 + 72) = v303;
      uint64_t v216 = v257;
      *((void *)v38 + 11) = v18;
      *((void *)v38 + 12) = v216;
      *((void *)v38 + 13) = v258;
      uint64_t v58 = v78;
      uint64_t v217 = v78;
      unint64_t v56 = v283;
      unint64_t v32 = v282;
      sub_1000EA048(v296, (uint64_t)v285, v45, v217, v283, v282);
      swift_retain();
      id v218 = v211;
      id v295 = v214;
      uint64_t v53 = v18;
      sub_1000CC298(v216);
      uint64_t v219 = qword_1002A7C00;
      v220 = v294;
      v294 = v210;
      uint64_t v4 = (uint64_t)v220;
      if (v219 == -1)
      {
LABEL_123:
        id v221 = [v4 description:v238, *((void *)&v238 + 1)];
        uint64_t v222 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v224 = v223;

        sub_100186888(v222, v224, (uint64_t)sub_1000EA124, (uint64_t)v38);
        swift_release();
        swift_bridgeObjectRelease();
        sub_1000E94DC(v296, (uint64_t)v285, v292, v58, v56, v32);

        sub_1000E9FEC((uint64_t)v274);
        return swift_release();
      }
LABEL_134:
      swift_once();
      goto LABEL_123;
    }
    uint64_t v18 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v78 = v71 - 3;
    if (__OFADD__(v77, 1)) {
      goto LABEL_113;
    }
LABEL_39:
    if (*((unsigned char *)v18 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_inUse)) {
      goto LABEL_33;
    }
    uint64_t v286 = OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_inUse;
    uint64_t v17 = *(void **)((char *)v18 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    unint64_t v79 = *(void *)((char *)v18 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    v287 = (char *)v18 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload;
    sub_1000A618C((uint64_t)v17, v79);
    uint64_t v80 = sub_10013E71C((uint64_t)v17, v79);
    uint64_t v82 = v81;
    *(void *)&v304[0] = v75;
    *((void *)&v304[0] + 1) = v66;
    swift_bridgeObjectRetain();
    v83._uint64_t countAndFlagsBits = v80;
    v83._object = v82;
    String.append(_:)(v83);
    swift_bridgeObjectRelease();
    uint64_t v45 = (uint64_t)v293;
    static String.Encoding.utf8.getter();
    uint64_t v84 = String.data(using:allowLossyConversion:)();
    unint64_t v86 = v85;
    swift_bridgeObjectRelease();
    (*v288)(v45, v294);
    if (v86 >> 60 != 15) {
      break;
    }
    sub_1000A6240((uint64_t)v17, v79);
    uint64_t v75 = v296;
    uint64_t v73 = v291;
    uint64_t v74 = v290;
    unint64_t v76 = v289;
LABEL_33:
    swift_release();
    ++v71;
    if (v78 == v74) {
      goto LABEL_82;
    }
  }
  uint64_t v87 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v87 + 16) = 64;
  *(_OWORD *)(v87 + 32) = 0u;
  *(_OWORD *)(v87 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0u;
  *(_OWORD *)(v87 + 64) = 0u;
  *(_OWORD *)(v87 + 80) = 0u;
  v298 = (char *)v87;
  switch(v86 >> 62)
  {
    case 1uLL:
      uint64_t v4 = (int)v84;
      uint64_t v45 = v84 >> 32;
      if (v84 >> 32 < (int)v84) {
        goto LABEL_130;
      }
      sub_1000A997C(v84, v86);
      sub_1000A997C(v84, v86);
      sub_1000A997C(v84, v86);
      sub_1000A997C(v84, v86);
      id v92 = v295;
      sub_1001B782C((int)v84, v84 >> 32, v86 & 0x3FFFFFFFFFFFFFFFLL, v84, v86, &v298);
      id v295 = v92;
      sub_1000A9990(v84, v86);
      sub_1000A9990(v84, v86);
      sub_1000A9990(v84, v86);
      sub_1000A6240(v84, v86);
      goto LABEL_50;
    case 2uLL:
      uint64_t v88 = *(void *)(v84 + 16);
      uint64_t v45 = *(void *)(v84 + 24);
      sub_1000A997C(v84, v86);
      sub_1000A997C(v84, v86);
      sub_1000A997C(v84, v86);
      swift_retain();
      swift_retain();
      uint64_t v89 = v88;
      id v90 = v295;
      sub_1001B782C(v89, v45, v86 & 0x3FFFFFFFFFFFFFFFLL, v84, v86, &v298);
      sub_1000A9990(v84, v86);
      id v295 = v90;
      if (v90)
      {
        sub_1000A9990(v84, v86);
        sub_1000A9990(v84, v86);
        swift_release();
        swift_release();
        __break(1u);
        JUMPOUT(0x1000D8700);
      }
      swift_release();
      swift_release();
      goto LABEL_47;
    case 3uLL:
      *(void *)((char *)v304 + 6) = 0;
      *(void *)&v304[0] = 0;
      goto LABEL_46;
    default:
      *(void *)&v304[0] = v84;
      WORD4(v304[0]) = v86;
      BYTE10(v304[0]) = BYTE2(v86);
      BYTE11(v304[0]) = BYTE3(v86);
      BYTE12(v304[0]) = BYTE4(v86);
      BYTE13(v304[0]) = BYTE5(v86);
LABEL_46:
      id v91 = v295;
      sub_1001B76A8(v304, v84, v86, &v298, &v300);
      id v295 = v91;
LABEL_47:
      sub_1000A9990(v84, v86);
      sub_1000A9990(v84, v86);
LABEL_50:
      uint64_t v4 = (uint64_t)v298;
      unint64_t v93 = *((void *)v298 + 2);
      if (!v93)
      {
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
        goto LABEL_132;
      }
      if (v93 == 1) {
        goto LABEL_126;
      }
      if (v93 < 3) {
        goto LABEL_127;
      }
      if (v93 == 3) {
        goto LABEL_128;
      }
      unsigned int v94 = *((_DWORD *)v298 + 8);
      sub_1000A9990(v84, v86);
      swift_bridgeObjectRelease();
      sub_1000A6240((uint64_t)v17, v79);
      BOOL v95 = bswap32(v94) == v292;
      id v66 = v285;
      uint64_t v75 = v296;
      uint64_t v73 = v291;
      uint64_t v74 = v290;
      unint64_t v76 = v289;
      if (!v95) {
        goto LABEL_33;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      id v138 = (id)*v274;
      id v139 = [(id)*v274 name];
      if (v139)
      {
        uint64_t v140 = v139;
        uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v143 = v142;
      }
      else
      {
        uint64_t v141 = 0;
        uint64_t v143 = 0xE000000000000000;
      }
      uint64_t v149 = v287;
      id v150 = (void *)v274[1];
      id v151 = v150;
      [v138 rssi];
      Class v152 = Int8._bridgeToObjectiveC()().super.super.isa;
      id v153 = objc_allocWithZone((Class)type metadata accessor for BTDevice());
      id v154 = sub_10013DE2C(v141, v143, v150, v152);

      uint64_t v155 = v260;
      static Date.now.getter();
      Date.timeIntervalSince1970.getter();
      double v157 = v156;
      (*(void (**)(char *, uint64_t))(v261 + 8))(v155, v262);
      double v158 = *((double *)v149 + 6);
      if (v158 > v157 || v157 - v158 >= 300.0)
      {

        uint64_t v174 = v296;
        uint64_t v175 = (uint64_t)v285;
        uint64_t v176 = v292;
      }
      else
      {
        *((unsigned char *)v18 + v286) = 1;
        uint64_t v159 = v259;
        id v160 = v275;
        (*v253)(v259, v254, v275);
        swift_retain_n();
        uint64_t v161 = Logger.logObject.getter();
        os_log_type_t v162 = static os_log_type_t.default.getter();
        int v163 = v162;
        if (os_log_type_enabled(v161, v162))
        {
          uint64_t v164 = swift_slowAlloc();
          id v295 = (id)swift_slowAlloc();
          *(void *)&v304[0] = v295;
          *(_DWORD *)uint64_t v164 = 136315394;
          LODWORD(v294) = v163;
          sub_1000EAA2C(&qword_1002AA860, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v165 = dispatch thunk of CustomStringConvertible.description.getter();
          v298 = (char *)sub_1000993AC(v165, v166, (uint64_t *)v304);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v164 + 12) = 2080;
          id v167 = v154;
          uint64_t v168 = *((void *)v149 + 4);
          unint64_t v169 = *((void *)v149 + 5);
          sub_1000A618C(v168, v169);
          uint64_t v170 = sub_10013E71C(v168, v169);
          unint64_t v172 = v171;
          unint64_t v173 = v169;
          id v154 = v167;
          sub_1000A6240(v168, v173);
          v298 = (char *)sub_1000993AC(v170, v172, (uint64_t *)v304);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v161, (os_log_type_t)v294, "Using token %s for accessory %s", (uint8_t *)v164, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*v255)(v259, v275);
        }
        else
        {

          swift_release_n();
          (*v255)(v159, v160);
        }
        uint64_t v177 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard;
        if (*(void *)&v273[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard])
        {
          swift_retain();
          sub_1001060E8();
          swift_release();
        }
        id v178 = v287;
        uint64_t v179 = *((void *)v287 + 4);
        unint64_t v180 = *((void *)v287 + 5);
        sub_1000A618C(v179, v180);
        sub_10013E71C(v179, v180);
        sub_1000A6240(v179, v180);
        sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
        if (*(void *)&v273[v177]) {
          v273[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 2;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v181 = *(_OWORD *)v178;
        long long v182 = *((_OWORD *)v178 + 1);
        long long v183 = *((_OWORD *)v178 + 2);
        uint64_t v305 = *((void *)v178 + 6);
        v304[1] = v182;
        v304[2] = v183;
        v304[0] = v181;
        sub_1000EA094(v304, (void (*)(uint64_t, uint64_t))sub_1000A618C);
        uint64_t v184 = v292;
        uint64_t v185 = sub_100139C88(v292);
        unint64_t v187 = v186;
        uint64_t v189 = *((void *)v178 + 4);
        unint64_t v188 = *((void *)v178 + 5);
        sub_1000A618C(v189, v188);
        uint64_t v190 = sub_10013E71C(v189, v188);
        unint64_t v192 = v191;
        sub_1000A6240(v189, v188);
        sub_1000D2464(v154, v193, (uint64_t *)v304, v185, v187, v190, v192);
        swift_bridgeObjectRelease();
        sub_1000A6240(v185, v187);
        sub_1000EA094(v304, (void (*)(uint64_t, uint64_t))sub_1000A6240);

        uint64_t v174 = v296;
        uint64_t v175 = (uint64_t)v285;
        uint64_t v176 = v184;
      }
      sub_1000E94DC(v174, v175, v176, v276, v283, v282);
      swift_release();
      return sub_1000E9FEC((uint64_t)v274);
  }
}

void *sub_1000D8710(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  unint64_t v4 = a3;
  uint64_t v19 = _swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v4 & 0xC000000000000001;
      unint64_t v15 = v4;
      while (v17)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        id v18 = v9;
        uint64_t v12 = a2;
        char v13 = a1(&v18);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v4 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v8;
        if (v11 == v7)
        {
          uint64_t v12 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

void sub_1000D88BC(char a1, uint64_t a2, void *a3, void *a4, _OWORD *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = a6;
  uint64_t v48 = a7;
  uint64_t v14 = type metadata accessor for DockStatus();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_beginAccess();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v19 = (char *)Strong;
      if (qword_1002A7C00 != -1) {
        swift_once();
      }
      uint64_t v20 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_motionClientQueue);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = a2;
      *(void *)(v21 + 24) = a3;
      id v22 = objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
      id v23 = v20;
      swift_retain();
      id v24 = a3;
      uint64_t v25 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
      uint64_t v26 = *(void **)&v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer];
      *(void *)&v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer] = v25;
    }
    swift_beginAccess();
    uint64_t v27 = swift_unknownObjectWeakLoadStrong();
    if (v27)
    {
      uint64_t v28 = (void *)v27;
      uint64_t v29 = (char *)*(id *)(v27 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

      uint64_t v30 = (id *)&v29[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
      swift_beginAccess();
      id v31 = *v30;

      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = a2;
      *(void *)(v32 + 24) = a3;
      *(void *)(v32 + 32) = a4;
      long long v33 = a5[1];
      *(_OWORD *)(v32 + 40) = *a5;
      *(_OWORD *)(v32 + 56) = v33;
      *(_OWORD *)(v32 + 72) = a5[2];
      uint64_t v35 = v47;
      uint64_t v34 = v48;
      *(void *)(v32 + 8_Block_object_dispose(&STACK[0x3D0], 8) = v47;
      *(void *)(v32 + 96) = v34;
      *(void *)(v32 + 104) = a8;
      swift_retain();
      id v36 = a3;
      id v37 = a4;
      sub_1000EA210((uint64_t)a5);
      id v38 = v35;
      sub_1000CC298(v34);
      if (qword_1002A7C00 != -1) {
        swift_once();
      }
      id v39 = [v31 description];
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v42 = v41;

      sub_100186888(v40, v42, (uint64_t)sub_1000EA1D8, v32);
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v43 = swift_unknownObjectWeakLoadStrong();
    if (v43)
    {
      uint64_t v44 = (char *)v43;
      (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for DockStatus.Undocked(_:), v14);
      uint64_t v45 = &v44[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v45, v17, v14);
      swift_endAccess();
    }
  }
}

uint64_t sub_1000D8C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DockStatus();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v11 = (void *)Strong;
    id v38 = v5;
    uint64_t v39 = v3;
    uint64_t v12 = v2;
    char v13 = (char *)*(id *)(Strong + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

    uint64_t v14 = (id *)&v13[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
    swift_beginAccess();
    id v15 = *v14;

    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    id v16 = [v15 description];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    sub_100187B98(v17, v19);
    swift_bridgeObjectRelease();
    uint64_t v2 = v12;
    uint64_t v3 = v39;
    uint64_t v5 = v38;
  }
  swift_beginAccess();
  uint64_t v20 = swift_unknownObjectWeakLoadStrong();
  if (v20)
  {
    uint64_t v21 = (char *)v20;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DockStatus.Undocked(_:), v6);
    id v22 = &v21[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v22, v9, v6);
    swift_endAccess();
  }
  swift_beginAccess();
  uint64_t v23 = swift_unknownObjectWeakLoadStrong();
  if (v23)
  {
    id v24 = (void *)v23;
    id v25 = *(id *)(v23 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

    uint64_t v26 = v40 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v26, v6);
    DockDetector.newStatus(_:monitorJarvisCallback:)((uint64_t)v9, 0, 0);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_beginAccess();
  uint64_t v27 = swift_unknownObjectWeakLoadStrong();
  if (v27)
  {
    uint64_t v28 = (void *)v27;
    uint64_t v29 = *(void **)(v27 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer);
    id v30 = v29;

    if (v29)
    {
      dispatch thunk of RepeatingTimer.cancel()();
    }
  }
  swift_beginAccess();
  id v31 = (char *)swift_unknownObjectWeakLoadStrong();
  if (v31)
  {
    uint64_t v32 = *(void **)&v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer];
    *(void *)&v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer] = 0;
  }
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v34 = (void *)result;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, result + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v2);

    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      id v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "No core motion update received, timing out.", v37, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return result;
}

void sub_1000D9184(objc_class *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = a8;
  uint64_t v50 = a7;
  os_log_type_t v49 = a6;
  uint64_t v48 = a5;
  uint64_t v47 = a4;
  uint64_t v10 = type metadata accessor for DockStatus();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v15 = (void *)Strong;
    id v16 = *(void **)(Strong + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer);
    id v17 = v16;

    if (v16)
    {
      dispatch thunk of RepeatingTimer.cancel()();
    }
  }
  swift_beginAccess();
  unint64_t v18 = (char *)swift_unknownObjectWeakLoadStrong();
  if (v18)
  {
    unint64_t v19 = *(void **)&v18[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer];
    *(void *)&v18[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_deviceConnectionTimer] = 0;
  }
  swift_beginAccess();
  uint64_t v20 = swift_unknownObjectWeakLoadStrong();
  if (v20)
  {
    uint64_t v21 = (void *)v20;
    uint64_t v52 = v13;
    uint64_t v22 = v10;
    uint64_t v23 = v11;
    id v24 = a1;
    uint64_t v25 = a3;
    uint64_t v26 = (char *)*(id *)(v20 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

    uint64_t v27 = (id *)&v26[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
    swift_beginAccess();
    id v28 = *v27;

    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    id v29 = [v28 description:v47, v48, v49, v50, v51];
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v32 = v31;

    sub_100187B98(v30, v32);
    swift_bridgeObjectRelease();
    a3 = v25;
    a1 = v24;
    uint64_t v11 = v23;
    uint64_t v10 = v22;
    char v13 = v52;
  }
  swift_beginAccess();
  uint64_t v33 = swift_unknownObjectWeakLoadStrong();
  if (!v33) {
    goto LABEL_14;
  }
  uint64_t v34 = (void *)v33;
  uint64_t v35 = (char *)*(id *)(v33 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

  os_log_type_t v36 = (id *)&v35[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
  swift_beginAccess();
  id v37 = *v36;

  v53.value.super.super.Class isa = a1;
  LOBYTE(v35) = MotionValidator.isPositionValid(deviceMotion:)(v53);

  if (v35)
  {
    swift_beginAccess();
    uint64_t v38 = swift_unknownObjectWeakLoadStrong();
    if (v38)
    {
      uint64_t v39 = (void *)v38;
      sub_1000D9F88(v47, v48, v49, v50, v51, 2);
    }
  }
  else
  {
LABEL_14:
    swift_beginAccess();
    uint64_t v40 = swift_unknownObjectWeakLoadStrong();
    if (v40)
    {
      uint64_t v41 = (char *)v40;
      (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DockStatus.Undocked(_:), v10);
      uint64_t v42 = &v41[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v42, v13, v10);
      swift_endAccess();
    }
    swift_beginAccess();
    uint64_t v43 = swift_unknownObjectWeakLoadStrong();
    if (v43)
    {
      uint64_t v44 = (void *)v43;
      id v45 = *(id *)(v43 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

      uint64_t v46 = a3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v46, v10);
      DockDetector.newStatus(_:monitorJarvisCallback:)((uint64_t)v13, 0, 0);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
  }
}

uint64_t sub_1000D9630(objc_class *a1, uint64_t a2, char *a3, void *a4, _OWORD *a5, void *a6, uint64_t a7, uint64_t a8)
{
  char v57 = a6;
  unint64_t v56 = a5;
  id v55 = a4;
  uint64_t v58 = a1;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v60 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v61 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v59 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unint64_t v18 = (void *)Strong;
    uint64_t v52 = a7;
    uint64_t v53 = a8;
    uint64_t v54 = v15;
    uint64_t v19 = v13;
    uint64_t v20 = v12;
    uint64_t v21 = (char *)*(id *)(Strong + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

    uint64_t v22 = (id *)&v21[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
    swift_beginAccess();
    id v23 = *v22;

    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    id v24 = [v23 description];
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    sub_100187B98(v25, v27);
    swift_bridgeObjectRelease();
    uint64_t v12 = v20;
    uint64_t v13 = v19;
    uint64_t v15 = v54;
    a8 = v53;
    a7 = v52;
  }
  swift_beginAccess();
  uint64_t v28 = swift_unknownObjectWeakLoadStrong();
  if (!v28) {
    goto LABEL_8;
  }
  id v29 = (void *)v28;
  uint64_t v30 = (char *)*(id *)(v28 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

  unint64_t v31 = (id *)&v30[OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator];
  swift_beginAccess();
  id v32 = *v31;

  v69.value.super.super.Class isa = v58;
  LOBYTE(v30) = MotionValidator.isPositionValid(deviceMotion:)(v69);

  if (v30)
  {
    uint64_t v58 = *(objc_class **)&a3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
    uint64_t v33 = swift_allocObject();
    uint64_t v34 = v55;
    *(void *)(v33 + 16) = a2;
    *(void *)(v33 + 24) = v34;
    uint64_t v35 = (uint64_t)v56;
    long long v36 = v56[1];
    *(_OWORD *)(v33 + 32) = *v56;
    *(_OWORD *)(v33 + 4_Block_object_dispose(&STACK[0x3D0], 8) = v36;
    *(_OWORD *)(v33 + 64) = *(_OWORD *)(v35 + 32);
    id v37 = v57;
    *(void *)(v33 + 80) = v57;
    *(void *)(v33 + 8_Block_object_dispose(&STACK[0x3D0], 8) = a7;
    *(void *)(v33 + 96) = a8;
    uint64_t v67 = sub_1000EA2C8;
    uint64_t v68 = v33;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v64 = 1107296256;
    long long v65 = sub_1001468DC;
    id v66 = &unk_100276828;
    uint64_t v38 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v39 = v58;
    id v40 = v34;
    sub_1000EA210(v35);
    id v41 = v37;
    sub_1000CC298(a7);
    uint64_t v42 = v59;
    static DispatchQoS.unspecified.getter();
    uint64_t v62 = &_swiftEmptyArrayStorage;
    sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000992E8((uint64_t *)&unk_1002A7F60);
    sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
    uint64_t v43 = v60;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v38);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v43, v12);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v42, v15);
  }
  else
  {
LABEL_8:
    uint64_t v44 = *(void **)&a3[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
    uint64_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = a2;
    *(void *)(v45 + 24) = a3;
    uint64_t v67 = sub_1000EA258;
    uint64_t v68 = v45;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v64 = 1107296256;
    long long v65 = sub_1001468DC;
    id v66 = &unk_1002767D8;
    uint64_t v46 = _Block_copy(&aBlock);
    id v47 = v44;
    swift_retain();
    uint64_t v48 = a3;
    os_log_type_t v49 = v59;
    static DispatchQoS.unspecified.getter();
    uint64_t v62 = &_swiftEmptyArrayStorage;
    sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000992E8((uint64_t *)&unk_1002A7F60);
    sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
    uint64_t v50 = v60;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v46);

    (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v12);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v49, v15);
  }
  return swift_release();
}

uint64_t sub_1000D9CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DockStatus();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = (char *)Strong;
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DockStatus.Undocked(_:), v3);
    id v9 = &v8[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v9, v6, v3);
    swift_endAccess();
  }
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v11 = (void *)result;
    id v12 = *(id *)(result + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);

    uint64_t v13 = a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v13, v3);
    DockDetector.newStatus(_:monitorJarvisCallback:)((uint64_t)v6, 0, 0);

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

void sub_1000D9EF4(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v12 = (void *)Strong;
    sub_1000D9F88(a2, a3, a4, a5, a6, 2);
  }
}

uint64_t sub_1000D9F88(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v17 - 8);
  uint64_t v31 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    swift_retain();
    char v20 = sub_1000D4850(a1, a2, a3, a4, a5);
    uint64_t result = sub_1000BF118(a4);
    if (v20) {
      return result;
    }
  }
  else
  {
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v7;
    *(void *)(v28 + 24) = a3;
    *(unsigned char *)(v28 + 32) = a6;
    v7;
    char v29 = sub_1000D4850(a1, a2, a3, (uint64_t)&unk_1002A8FD0, v28);
    uint64_t result = swift_release();
    if (v29) {
      return result;
    }
  }
  uint64_t v22 = *(void **)&v7[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v7;
  *(void *)(v23 + 24) = a3;
  aBlock[4] = sub_1000E9F30;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100276670;
  id v24 = _Block_copy(aBlock);
  uint64_t v25 = v7;
  id v26 = a3;
  id v27 = v22;
  static DispatchQoS.unspecified.getter();
  uint64_t v33 = &_swiftEmptyArrayStorage;
  sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v31);
  return swift_release();
}

uint64_t sub_1000DA318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 4_Block_object_dispose(&STACK[0x3D0], 8) = a5;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000DA340, 0, 0);
}

uint64_t sub_1000DA340()
{
  sub_1000DA3A8(*(void **)(v0 + 16), *(void **)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1000DA3A8(void *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int v65 = a3;
  uint64_t v67 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v66 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v56[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = &v56[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = type metadata accessor for UUID();
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = &v56[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  id v24 = &v56[-v20];
  if (a4)
  {
    uint64_t v25 = v22;
    id v26 = *(void (**)(unsigned char *, char *, uint64_t))(v22 + 16);
    uint64_t v68 = v21;
    v26(&v56[-v20], &v5[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v21);
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      char v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      *(_DWORD *)char v29 = 138412290;
      swift_errorRetain();
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v72 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v31;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed discovering paired acessory %@", v29, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v24, v68);
  }
  else
  {
    uint64_t v32 = v67;
    id v60 = v14;
    uint64_t v61 = v12;
    uint64_t v62 = v10;
    uint64_t v63 = v11;
    if (a1)
    {
      uint64_t v58 = v23;
      uint64_t v59 = v22;
      uint64_t v68 = v21;
      id v64 = a1;
      uint64_t v33 = sub_10013D1F8();
      if (v34 >> 60 == 15)
      {
        id v35 = v64;
      }
      else
      {
        uint64_t v36 = v33;
        unint64_t v37 = v34;
        sub_1000A618C(v33, v34);
        sub_1001B7C9C(v36, v37, v71);
        sub_1000EA2DC((uint64_t)v71, (uint64_t)&v72, (uint64_t *)&unk_1002A8F08);
        uint64_t v38 = v73;
        if (v73)
        {
          uint64_t v39 = v72;
          int v57 = v74;
          id v40 = v32;
          DockCoreInfo.identifier.getter();
          uint64_t v41 = sub_10013EDA0((uint64_t)v17);
          unint64_t v43 = v42;
          BOOL v44 = sub_1001B78F0(v41, v42, v39, v38, v57);
          sub_1000A6240(v41, v43);
          if (v44)
          {
            uint64_t v45 = *(void **)&v5[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
            uint64_t v46 = swift_allocObject();
            *(void *)(v46 + 16) = v5;
            *(void *)(v46 + 24) = v40;
            *(unsigned char *)(v46 + 32) = v65;
            aBlock[4] = sub_1000E9F5C;
            aBlock[5] = v46;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            void aBlock[2] = sub_1001468DC;
            void aBlock[3] = &unk_1002766C0;
            id v47 = _Block_copy(aBlock);
            id v48 = v45;
            os_log_type_t v49 = v5;
            id v50 = v40;
            uint64_t v51 = v60;
            static DispatchQoS.unspecified.getter();
            CMDeviceMotion_optional v69 = _swiftEmptyArrayStorage;
            sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            sub_1000992E8((uint64_t *)&unk_1002A7F60);
            sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
            uint64_t v52 = v62;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            OS_dispatch_queue.async(group:qos:flags:execute:)();
            sub_1000E94A4((uint64_t)v71);

            _Block_release(v47);
            sub_1000A9990(v36, v37);
            (*(void (**)(unsigned char *, uint64_t))(v66 + 8))(v52, v8);
            (*(void (**)(unsigned char *, uint64_t))(v61 + 8))(v51, v63);
            swift_release();
          }
          else
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v58, &v5[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v68);
            uint64_t v53 = Logger.logObject.getter();
            os_log_type_t v54 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v53, v54))
            {
              id v55 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)id v55 = 0;
              _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed dicovering paired accessory with unique identiier", v55, 2u);
              swift_slowDealloc();
              sub_1000E94A4((uint64_t)v71);

              sub_1000A9990(v36, v37);
            }
            else
            {
              sub_1000A9990(v36, v37);
              sub_1000E94A4((uint64_t)v71);
            }
            (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v68);
          }
        }
        else
        {
          sub_1000A9990(v36, v37);
        }
      }
    }
  }
}

uint64_t sub_1000DAB8C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Timing out prox card!", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard;
  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_primaryToken);
    if (!v12) {
      return result;
    }
    uint64_t v13 = *(void *)(v12 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    unint64_t v14 = *(void *)(v12 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    swift_retain();
    sub_1000A618C(v13, v14);
    uint64_t v15 = sub_10013E71C(v13, v14);
    unint64_t v17 = v16;
    sub_1000A6240(v13, v14);
    sub_1000B8650();
    uint64_t v18 = swift_allocError();
    *uint64_t v19 = 4;
    unint64_t v20 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
    if (*(void *)(v1 + v10))
    {
      *(unsigned char *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState) = 0;
      id v21 = *(id *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server);
      sub_100156E14(v15, v17, 5, v20, v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_errorRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (qword_1002A7C20 != -1) {
    swift_once();
  }
  if (*(void *)(qword_1002B17A0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan))
  {
    swift_retain();
    sub_1000F11F4(4);
    swift_release();
  }
  return sub_1000EAB90();
}

uint64_t sub_1000DAE74()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v14 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard;
  uint64_t v15 = *(void *)&v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard];
  if (!v15) {
    goto LABEL_59;
  }
  unint64_t v93 = v5;
  uint64_t v16 = *(void *)(v15 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_primaryToken);
  if (v16)
  {
    id v91 = v3;
    switch(v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState])
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        uint64_t v92 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState;
        unint64_t v87 = 0xEA0000000000676ELL;
        uint64_t v84 = v2;
        id v90 = (char *)&v79 - v11;
        uint64_t v86 = v13;
        uint64_t v85 = v12;
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_retain();
        swift_bridgeObjectRelease();
        if (v17)
        {
          return swift_release();
        }
        uint64_t v82 = v7;
        uint64_t v83 = v6;
        uint64_t v89 = v14;
        uint64_t v88 = v16;
        uint64_t v18 = *(void *)(v16 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
        unint64_t v19 = *(void *)(v16 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
        sub_1000A618C(v18, v19);
        uint64_t v20 = sub_10013E71C(v18, v19);
        uint64_t v22 = v21;
        sub_1000A6240(v18, v19);
        uint64_t v23 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
        id v24 = *(id *)&v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
        OS_dispatch_semaphore.wait()();

        uint64_t v25 = (uint64_t *)&v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
        swift_beginAccess();
        uint64_t v26 = *v25;
        uint64_t v27 = *(void *)(v26 + 16);
        if (!v27)
        {
LABEL_24:
          id v38 = *(id *)&v1[v23];
          OS_dispatch_semaphore.signal()();

          uint64_t v97 = 0;
          long long v95 = 0u;
          long long v96 = 0u;
          goto LABEL_27;
        }
        uint64_t v80 = v23;
        id v81 = v1;
        uint64_t v28 = v26 + 32;
        swift_bridgeObjectRetain();
        break;
      default:
        return swift_bridgeObjectRelease();
    }
    while (1)
    {
      sub_1000A5D40(v28, (uint64_t)v94);
      char v29 = *(void **)(*sub_1000A5DA4(v94, v94[3]) + 32);
      if (v29)
      {
        id v30 = v29;
        id v31 = [v30 identifier];
        if (v31)
        {
          uint64_t v32 = v31;
          uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v35 = v34;

          if (v33 == v20 && v35 == v22)
          {
            swift_bridgeObjectRelease();
LABEL_26:
            swift_bridgeObjectRelease();
            uint64_t v1 = v81;
            id v39 = *(id *)&v81[v80];
            OS_dispatch_semaphore.signal()();

            sub_1000A5D40((uint64_t)v94, (uint64_t)&v95);
            sub_100099BCC((uint64_t)v94);
LABEL_27:
            swift_bridgeObjectRelease();
            uint64_t v14 = v89;
            uint64_t v40 = v88;
            if (!*((void *)&v96 + 1))
            {
              swift_release();
              sub_1000A61E4((uint64_t)&v95, (uint64_t *)&unk_1002AAA30);
              goto LABEL_59;
            }
            sub_1000992E8(&qword_1002A82E0);
            type metadata accessor for DaemonAccessory();
            if (swift_dynamicCast())
            {
              uint64_t v41 = (char *)v94[0];
              unint64_t v42 = (uint64_t *)&v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens];
              swift_beginAccess();
              swift_retain();
              unint64_t v43 = 0;
              BOOL v44 = (void (*)(uint64_t, uint64_t))sub_1000E9AE4(v42, v40);
              swift_release();
              if (!((unint64_t)*v42 >> 62))
              {
                uint64_t v45 = *(void *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
                if (v45 >= (uint64_t)v44) {
                  goto LABEL_31;
                }
LABEL_72:
                __break(1u);
LABEL_73:
                swift_once();
LABEL_50:
                unint64_t v56 = (void *)qword_1002B17A0;
                if (*(unsigned char *)(qword_1002B17A0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) == 2)
                {
                  uint64_t v57 = swift_allocObject();
                  *(void *)(v57 + 16) = v56;
                  *(void *)(v57 + 24) = 0;
                  id v58 = v56;
                  sub_1001DA690((uint64_t)sub_1000EAB30, v57);
                  swift_release();
                  swift_release();
                  goto LABEL_57;
                }
                uint64_t v59 = (void *)*((void *)v41 + 4);
                if (v59)
                {
                  self;
                  uint64_t v60 = swift_dynamicCastObjCClass();
                  uint64_t v1 = (unsigned char *)v45;
                  if (v60)
                  {
                    uint64_t v61 = (void *)v60;
                    *(void *)&long long v95 = 0;
                    id v62 = v59;
                    unsigned int v63 = [v61 stopPairingWithError:&v95];
                    id v64 = (void *)v95;
                    if (v63)
                    {
                      *(void *)(*(void *)&v43[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server]
                                + OBJC_IVAR____TtC14dockaccessoryd15AccessoryServer_auth) = 0;
                      id v65 = v64;
                      swift_release();
                    }
                    else
                    {
                      unint64_t v93 = v41;
                      id v67 = (id)v95;
                      _convertNSErrorToError(_:)();

                      swift_willThrow();
                      uint64_t v68 = v40;
                      uint64_t v69 = v83;
                      v91(v85, v68, v83);
                      swift_errorRetain();
                      swift_errorRetain();
                      uint64_t v70 = Logger.logObject.getter();
                      os_log_type_t v71 = static os_log_type_t.error.getter();
                      if (os_log_type_enabled(v70, v71))
                      {
                        uint64_t v72 = swift_slowAlloc();
                        uint64_t v92 = (uint64_t)v62;
                        uint64_t v73 = (uint8_t *)v72;
                        id v91 = (void (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc();
                        *(void *)&long long v95 = v91;
                        *(_DWORD *)uint64_t v73 = 136315138;
                        uint64_t v1 = (unsigned char *)v45;
                        swift_getErrorValue();
                        uint64_t v74 = Error.localizedDescription.getter();
                        v94[0] = sub_1000993AC(v74, v75, (uint64_t *)&v95);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_bridgeObjectRelease();
                        swift_errorRelease();
                        swift_errorRelease();
                        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Unable to stop pairing: %s", v73, 0xCu);
                        swift_arrayDestroy();
                        swift_slowDealloc();
                        id v62 = (id)v92;
                        swift_slowDealloc();

                        swift_errorRelease();
                        uint64_t v76 = v85;
                        uint64_t v77 = v83;
                      }
                      else
                      {
                        swift_errorRelease();
                        swift_errorRelease();
                        swift_errorRelease();

                        uint64_t v76 = v85;
                        uint64_t v77 = v69;
                      }
                      v44(v76, v77);
                      uint64_t v41 = v93;
                    }
                    unsigned int v78 = [v61 connectReason];

                    swift_release();
                    uint64_t v14 = v89;
                    if (v78 == 7)
                    {
                      v41[OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired] = 2;
                      v41[OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_reloadServer] = 1;
                    }
                    goto LABEL_70;
                  }
LABEL_63:
                  swift_release();
                  swift_release();
                }
                else
                {
                  swift_release();
LABEL_57:
                  swift_release();
                  uint64_t v1 = (unsigned char *)v45;
                }
                uint64_t v14 = v89;
                goto LABEL_59;
              }
              swift_bridgeObjectRetain();
              uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v45 < (uint64_t)v44) {
                goto LABEL_72;
              }
LABEL_31:
              sub_1001A0960((uint64_t)v44, v45);
              swift_endAccess();
              int v46 = v1[v92];
              if ((v46 - 2) < 4)
              {
                uint64_t v40 = (uint64_t)&v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger];
                uint64_t v47 = v82;
                id v48 = v90;
                uint64_t v49 = v83;
                id v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16);
                v91((uint64_t)v90, (uint64_t)&v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v83);
                unint64_t v43 = v1;
                id v50 = Logger.logObject.getter();
                os_log_type_t v51 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v50, v51))
                {
                  unint64_t v93 = v41;
                  uint64_t v52 = (uint8_t *)swift_slowAlloc();
                  *(void *)&long long v95 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v52 = 136315138;
                  uint64_t v53 = 0x6972696150746F6ELL;
                  switch(v1[v92])
                  {
                    case 1:
                      uint64_t v53 = 0x6E69686372616573;
                      unint64_t v54 = 0xE900000000000067;
                      goto LABEL_47;
                    case 2:
                      uint64_t v53 = 0x69746164696C6176;
                      break;
                    case 3:
                      uint64_t v53 = 0x46676E6974696177;
                      unint64_t v54 = 0xEE0068747541726FLL;
                      goto LABEL_47;
                    case 4:
                      uint64_t v53 = 0x7A69726F68747561;
                      goto LABEL_46;
                    case 5:
                      unint64_t v87 = 0xE700000000000000;
                      uint64_t v53 = 0x676E6972696170;
                      break;
                    case 6:
                      uint64_t v53 = 0x72756769666E6F63;
LABEL_46:
                      unint64_t v54 = 0xEB00000000676E69;
LABEL_47:
                      unint64_t v87 = v54;
                      break;
                    default:
                      break;
                  }
                  v94[0] = sub_1000993AC(v53, v87, (uint64_t *)&v95);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();

                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v50, v51, "Prox card deactivated while in pairing attempt: %s", v52, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  BOOL v44 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
                  v44((uint64_t)v90, v83);
                  uint64_t v41 = v93;
                }
                else
                {

                  BOOL v44 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
                  v44((uint64_t)v48, v49);
                }
                uint64_t v45 = (uint64_t)v1;
                if (qword_1002A7C20 != -1) {
                  goto LABEL_73;
                }
                goto LABEL_50;
              }
              if (v46 == 6)
              {
                id v55 = *((id *)v41 + 3);
                sub_1000D38F8(v55);
              }
              goto LABEL_63;
            }
LABEL_70:
            swift_release();
LABEL_59:
            uint64_t v66 = *(void **)&v1[v14];
            *(void *)&v1[v14] = 0;

            v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState] = 0;
            if (qword_1002A7C20 != -1) {
              swift_once();
            }
            return sub_1000EAB90();
          }
          char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v37) {
            goto LABEL_26;
          }
        }
      }
      sub_100099BCC((uint64_t)v94);
      v28 += 40;
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v81;
        uint64_t v23 = v80;
        goto LABEL_24;
      }
    }
  }
  return result;
}

uint64_t sub_1000DBFE4()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v19 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v19 - v9;
  if (allowedForDockKit()())
  {
    if (sub_1000E7ED4())
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v8, v0 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v1);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v11, v12))
      {
        uint64_t v10 = v8;
        goto LABEL_14;
      }
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Ingoring URI request: device already connected or connecting over BLE", v13, 2u);
      uint64_t v10 = v8;
    }
    else
    {
      if (!SBSGetScreenLockStatus()) {
        return 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v1);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v11, v16))
      {
        uint64_t v10 = v5;
        goto LABEL_14;
      }
      char v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v16, "Ingoring URI request: cannot pair from lock screen", v17, 2u);
      uint64_t v10 = v5;
    }
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v10, v0 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v1);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v14, "Ingoring URI request: device not supported", v15, 2u);
LABEL_10:
    swift_slowDealloc();
  }
LABEL_14:

  (*(void (**)(char *, uint64_t))(v2 + 8))(v10, v1);
  return 0;
}

uint64_t sub_1000DC2D4(void (*a1)(char *, uint64_t))
{
  uint64_t v2 = v1;
  uint64_t v116 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v121 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  os_log_type_t v119 = (char *)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = type metadata accessor for DispatchQoS();
  uint64_t v118 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v117 = (char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v6 - 8);
  uint64_t v124 = (uint64_t)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = type metadata accessor for UUID();
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v125 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for Date();
  uint64_t v127 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v126 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v134 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v112 - v14;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v129 = (char *)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  os_log_type_t v130 = (char *)&v112 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  os_log_type_t v114 = (char *)&v112 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v131 = (char *)&v112 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  id v115 = (char *)&v112 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v137 = (char *)&v112 - v29;
  __chkstk_darwin(v28);
  id v31 = (char *)&v112 - v30;
  uint64_t v143 = v17;
  uint64_t v33 = *(void (**)(void))(v17 + 16);
  uint64_t v32 = v17 + 16;
  uint64_t v140 = &v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger];
  uint64_t v141 = (void (*)(char *, unsigned char *, uint64_t))v33;
  v33((char *)&v112 - v30);
  uint64_t v34 = *(void (**)(char *, void (*)(void, void), uint64_t))(v11 + 16);
  BOOL v136 = a1;
  uint64_t v133 = v11 + 16;
  uint64_t v132 = v34;
  v34(v15, (void (*)(void, void))a1, v10);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v142 = v2;
  uint64_t v135 = v10;
  if (v37)
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v138 = v32;
    id v39 = (uint8_t *)v38;
    uint64_t v113 = swift_slowAlloc();
    *(void *)&v154[0] = v113;
    uint64_t v139 = v16;
    *(_DWORD *)id v39 = 136315138;
    uint64_t v40 = URL.absoluteString.getter();
    *(void *)&long long v150 = sub_1000993AC(v40, v41, (uint64_t *)v154);
    uint64_t v16 = v139;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Got URI request: %s", v39, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v142;
    swift_slowDealloc();
    uint64_t v32 = v138;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  }

  unint64_t v42 = *(void (**)(char *, uint64_t))(v143 + 8);
  v42(v31, v16);
  uint64_t result = sub_1000DBFE4();
  if ((result & 1) == 0) {
    return result;
  }
  uint64_t v44 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState;
  switch(v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState])
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v45) {
        goto LABEL_8;
      }
      uint64_t v59 = v130;
      v141(v130, v140, v16);
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v60, v61))
      {
        id v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Ignoring URI request: a pairing session is already in progress", v62, 2u);
        swift_slowDealloc();
      }

      return ((uint64_t (*)(char *, uint64_t))v42)(v59, v16);
    default:
      swift_bridgeObjectRelease();
LABEL_8:
      uint64_t v46 = (uint64_t)v134;
      v132(v134, (void (*)(void, void))v136, v135);
      sub_1000A84A4(v46, &v149);
      uint64_t result = sub_1000EA2DC((uint64_t)&v149, (uint64_t)&v150, (uint64_t *)&unk_1002A8FA0);
      if (BYTE8(v151) != 2)
      {
        BOOL v136 = v42;
        v154[0] = v150;
        v154[1] = v151;
        long long v155 = v152;
        uint64_t v156 = v153;
        v142[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager__performingGeneralScan] = 1;
        type metadata accessor for AccessoryPairingToken();
        uint64_t v47 = swift_allocObject();
        *(unsigned char *)(v47 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_hasAuth) = 0;
        *(unsigned char *)(v47 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_inUse) = 0;
        uint64_t v48 = v47 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload;
        *(void *)(v48 + 4_Block_object_dispose(&STACK[0x3D0], 8) = v153;
        long long v49 = v152;
        *(_OWORD *)(v48 + 16) = v151;
        *(_OWORD *)(v48 + 32) = v49;
        *(_OWORD *)uint64_t v48 = v150;
        sub_1000EA094(v154, (void (*)(uint64_t, uint64_t))sub_1000A618C);
        UUID.init()();
        id v50 = v126;
        static Date.now.getter();
        Date.timeIntervalSince1970.getter();
        uint64_t v52 = v51;
        (*(void (**)(char *, uint64_t))(v127 + 8))(v50, v128);
        uint64_t v143 = v47;
        *(void *)(v47 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_timestamp) = v52;
        long long v53 = v155;
        uint64_t v54 = sub_10013E71C(v155, *((unint64_t *)&v155 + 1));
        uint64_t v56 = sub_10013EE90(v54, v55);
        if (v57 >> 60 == 15)
        {
          uint64_t v58 = v124;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v122 + 56))(v124, 1, 1, v123);
        }
        else
        {
          uint64_t v63 = v56;
          unint64_t v64 = v57;
          uint64_t v65 = v124;
          sub_10013E988(v56, v57, v124);
          uint64_t v66 = v63;
          uint64_t v58 = v65;
          sub_1000A9990(v66, v64);
          uint64_t v67 = v122;
          uint64_t v68 = v65;
          uint64_t v69 = v123;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v122 + 56))(v68, 0, 1, v123);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v58, 1, v69) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v125, v58, v69);
LABEL_17:
            id v70 = objc_allocWithZone((Class)type metadata accessor for DockCoreInfo());
            os_log_type_t v71 = (void *)DockCoreInfo.init(type:name:identifier:)();
            uint64_t v138 = v32;
            v141(v137, v140, v16);
            uint64_t v72 = Logger.logObject.getter();
            os_log_type_t v73 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v72, v73))
            {
              uint64_t v74 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v74 = 0;
              _os_log_impl((void *)&_mh_execute_header, v72, v73, "Popping remote alert", v74, 2u);
              swift_slowDealloc();
            }

            uint64_t v139 = v16;
            v136(v137, v16);
            sub_10013E71C(v53, *((unint64_t *)&v53 + 1));
            sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
            uint64_t v75 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard;
            uint64_t v76 = v142;
            if (*(void *)&v142[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard]) {
              v142[v44] = 1;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v77 = (void *)type metadata accessor for AccessoryManager();
            os_log_type_t v147 = (uint64_t (*)())&off_1002762A8;
            unint64_t v146 = v77;
            aBlock[0] = v76;
            unsigned int v78 = objc_allocWithZone((Class)type metadata accessor for DKProxManager());
            uint64_t v79 = sub_1000E987C((uint64_t)aBlock, (uint64_t)v146);
            __chkstk_darwin(v79);
            id v81 = (uint64_t *)((char *)&v112 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0));
            (*(void (**)(uint64_t *))(v82 + 16))(v81);
            uint64_t v83 = *v81;
            uint64_t v84 = v143;
            swift_retain();
            uint64_t v85 = v71;
            uint64_t v86 = v76;
            unint64_t v87 = sub_1000E7FF8(v84, v85, v83, v78);
            swift_release();
            uint64_t v137 = v85;

            sub_100099BCC((uint64_t)aBlock);
            uint64_t v88 = *(void **)&v76[v75];
            *(void *)&v76[v75] = v87;

            uint64_t v89 = (uint64_t *)&v86[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens];
            swift_beginAccess();
            swift_retain();
            int64_t v90 = sub_1000E8330(v89, v84);
            swift_release();
            if ((unint64_t)*v89 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v91 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v91 = *(void *)((*v89 & 0xFFFFFFFFFFFFFF8) + 0x10);
            }
            if (v91 < v90)
            {
              __break(1u);
            }
            else
            {
              sub_1001A0960(v90, v91);
              swift_retain();
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((*v89 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v89 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                goto LABEL_25;
              }
            }
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_25:
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_endAccess();
            uint64_t v92 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_haptics;
            if (*(void *)&v86[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_haptics]) {
              goto LABEL_29;
            }
            unint64_t v93 = v115;
            v141(v115, v140, v139);
            unsigned int v94 = Logger.logObject.getter();
            os_log_type_t v95 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v94, v95))
            {
              long long v96 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)long long v96 = 0;
              _os_log_impl((void *)&_mh_execute_header, v94, v95, "Initializing haptics", v96, 2u);
              swift_slowDealloc();
            }

            v136(v93, v139);
            type metadata accessor for DKHaptics();
            swift_allocObject();
            *(void *)&v86[v92] = sub_1001B63D4();
            swift_release();
            if (*(void *)&v86[v92])
            {
LABEL_29:
              v141(v131, v140, v139);
              swift_retain();
              uint64_t v97 = Logger.logObject.getter();
              os_log_type_t v98 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v97, v98))
              {
                unint64_t v99 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v99 = 0;
                _os_log_impl((void *)&_mh_execute_header, v97, v98, "Playing haptics...", v99, 2u);
                swift_slowDealloc();
              }

              v136(v131, v139);
              sub_1001B716C();
              swift_release();
              uint64_t v100 = v116;
            }
            else
            {
              uint64_t v108 = v114;
              v141(v114, v140, v139);
              unsigned __int8 v109 = Logger.logObject.getter();
              os_log_type_t v110 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v109, v110))
              {
                uint64_t v111 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v111 = 0;
                _os_log_impl((void *)&_mh_execute_header, v109, v110, "No haptics...", v111, 2u);
                swift_slowDealloc();
              }

              v136(v108, v139);
              uint64_t v100 = v116;
            }
            uint64_t v101 = *(void **)&v86[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
            uint64_t v102 = swift_allocObject();
            *(void *)(v102 + 16) = v86;
            os_log_type_t v147 = sub_1000E9904;
            uint64_t v148 = v102;
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1107296256;
            void aBlock[2] = sub_1001468DC;
            unint64_t v146 = &unk_1002765D0;
            uint64_t v103 = _Block_copy(aBlock);
            uint64_t v104 = v86;
            id v105 = v101;
            uint64_t v106 = v117;
            static DispatchQoS.unspecified.getter();
            uint64_t v144 = _swiftEmptyArrayStorage;
            sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
            sub_1000992E8((uint64_t *)&unk_1002A7F60);
            sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
            os_log_type_t v107 = v119;
            dispatch thunk of SetAlgebra.init<A>(_:)();
            OS_dispatch_queue.async(group:qos:flags:execute:)();
            _Block_release(v103);
            swift_release();

            sub_1000E9934(&v149);
            (*(void (**)(char *, uint64_t))(v121 + 8))(v107, v100);
            (*(void (**)(char *, uint64_t))(v118 + 8))(v106, v120);
            return swift_release();
          }
        }
        UUID.init()();
        sub_1000A61E4(v58, &qword_1002AAA20);
        goto LABEL_17;
      }
      return result;
  }
}

void sub_1000DD790(uint64_t a1, void *a2)
{
  id v2 = *(id *)(*sub_1000A5DA4(a2, a2[3]) + 24);
  sub_1000E34B8((uint64_t)v2, 1);
}

uint64_t sub_1000DD7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1000DD888;
  return sub_1000F9F28();
}

uint64_t sub_1000DD888()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 32) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000DD9C8;
  return sub_1000F6DC4();
}

uint64_t sub_1000DD9C8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_1000DDABC(uint64_t a1, uint64_t a2)
{
  id v2 = *(id *)(a2 + 24);
  sub_1000E34B8((uint64_t)v2, 1);
}

uint64_t sub_1000DDB0C()
{
  return sub_1000EA5D8("startDiscoveringAccessoryServers()");
}

uint64_t sub_1000DDB60()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "stopDiscoveringAccessoryServers()", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(unsigned char *)(v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager__performingGeneralScan) = 0;
  if (qword_1002A7C20 != -1) {
    swift_once();
  }
  return sub_1000EAB90();
}

uint64_t sub_1000DDD50(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v6);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v39 = v3;
  if (v12)
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t result = swift_slowAlloc();
    *(void *)&long long v41 = result;
    *(_DWORD *)uint64_t v13 = 136315138;
    if (a2)
    {
      swift_bridgeObjectRetain();
      v40[0] = sub_1000993AC(a1, a2, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Request by HAP to deregister accessory %s.", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v3 = v39;
      goto LABEL_5;
    }
    __break(1u);
LABEL_30:
    __break(1u);
    return result;
  }

  swift_bridgeObjectRelease_n();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!a2) {
    goto LABEL_30;
  }
LABEL_5:
  uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v16 = *(id *)(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  uint64_t v17 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess();
  uint64_t v18 = *v17;
  uint64_t v19 = *(void *)(v18 + 16);
  if (!v19)
  {
LABEL_18:
    id v30 = *(id *)(v39 + v15);
    OS_dispatch_semaphore.signal()();

    uint64_t v43 = 0;
    long long v41 = 0u;
    long long v42 = 0u;
    return sub_1000A61E4((uint64_t)&v41, (uint64_t *)&unk_1002AAA30);
  }
  uint64_t v38 = v15;
  uint64_t v20 = v18 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000A5D40(v20, (uint64_t)v40);
    uint64_t v21 = *(void **)(*sub_1000A5DA4(v40, v40[3]) + 32);
    if (!v21) {
      goto LABEL_8;
    }
    id v22 = v21;
    id v23 = [v22 identifier];
    if (v23) {
      break;
    }
LABEL_7:

LABEL_8:
    sub_100099BCC((uint64_t)v40);
    v20 += 40;
    if (!--v19)
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = v38;
      goto LABEL_18;
    }
  }
  uint64_t v24 = v23;
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  if (v25 != a1 || v27 != a2)
  {
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v29) {
      goto LABEL_22;
    }
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t v31 = v39;
  id v32 = *(id *)(v39 + v38);
  OS_dispatch_semaphore.signal()();

  sub_1000A5D40((uint64_t)v40, (uint64_t)&v41);
  sub_100099BCC((uint64_t)v40);
  if (!*((void *)&v42 + 1)) {
    return sub_1000A61E4((uint64_t)&v41, (uint64_t *)&unk_1002AAA30);
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    if (*(unsigned char *)(v40[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2)
    {
      return swift_release();
    }
    else
    {
      id v33 = *(id *)(v31 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server);
      unint64_t v34 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
      sub_100156E14(a1, a2, 5, v34, 0);

      swift_bridgeObjectRelease();
      *(unsigned char *)(v31 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState) = 0;
      if (qword_1002A7C20 != -1) {
        swift_once();
      }
      uint64_t v35 = (void *)qword_1002B17A0;
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = 0;
      id v37 = v35;
      sub_1001DA690((uint64_t)sub_1000EAB30, v36);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000DE280(uint64_t a1, unint64_t a2)
{
  return sub_1000EA738(a1, a2, "markNotifyingCharacteristicUpdated(%s)");
}

uint64_t sub_1000DE2A4(void *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (a3)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  id v9 = a1;
  a4(v6, v8);

  return swift_bridgeObjectRelease();
}

id sub_1000DE38C(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "HAP requested BLE disconnect.", v9, 2u);
    swift_slowDealloc();
  }

  id result = (id)(*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (!a1)
  {
    __break(1u);
    goto LABEL_32;
  }
  id result = [a1 identifier];
  if (!result)
  {
LABEL_32:
    __break(1u);
    return result;
  }
  os_log_type_t v11 = result;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  uint64_t v16 = v44;
  id v17 = *(id *)(v44 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  uint64_t v18 = (uint64_t *)(v16 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess();
  uint64_t v19 = *v18;
  uint64_t v20 = *(void *)(v19 + 16);
  if (!v20)
  {
LABEL_18:
    id v31 = *(id *)(v44 + v15);
    OS_dispatch_semaphore.signal()();

    uint64_t v48 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    goto LABEL_21;
  }
  uint64_t v43 = v15;
  uint64_t v21 = v19 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000A5D40(v21, (uint64_t)v45);
    id v22 = *(void **)(*sub_1000A5DA4(v45, v45[3]) + 32);
    if (!v22) {
      goto LABEL_8;
    }
    id v23 = v22;
    id v24 = [v23 identifier];
    if (v24) {
      break;
    }
LABEL_7:

LABEL_8:
    sub_100099BCC((uint64_t)v45);
    v21 += 40;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = v43;
      goto LABEL_18;
    }
  }
  uint64_t v25 = v24;
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  if (v26 != v12 || v28 != v14)
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_20;
    }
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
LABEL_20:
  swift_bridgeObjectRelease();
  id v32 = *(id *)(v44 + v43);
  OS_dispatch_semaphore.signal()();

  sub_1000A5D40((uint64_t)v45, (uint64_t)&v46);
  sub_100099BCC((uint64_t)v45);
LABEL_21:
  swift_bridgeObjectRelease();
  if (*((void *)&v47 + 1))
  {
    sub_1000A6298(&v46, (uint64_t)v49);
    id v33 = *(char **)(*sub_1000A5DA4(v49, v49[3]) + 16);
    if (v33 && *(void *)&v33[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral])
    {
      uint64_t v34 = qword_1002A7C20;
      uint64_t v35 = v33;
      if (v34 != -1) {
        swift_once();
      }
      uint64_t v36 = (void *)qword_1002B17A0;
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = v36;
      *(void *)(v37 + 24) = v33;
      uint64_t v38 = v35;
      id v39 = v36;
      sub_1001DA690((uint64_t)sub_1000EAB30, v37);

      swift_release();
    }
    return (id)sub_100099BCC((uint64_t)v49);
  }
  else
  {
    sub_1000A61E4((uint64_t)&v46, (uint64_t *)&unk_1002AAA30);
    if (qword_1002A7C20 != -1) {
      swift_once();
    }
    uint64_t v40 = (void *)qword_1002B17A0;
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v40;
    *(void *)(v41 + 24) = 0;
    id v42 = v40;
    sub_1001DA690((uint64_t)sub_1000EAB30, v41);
    return (id)swift_release();
  }
}

uint64_t sub_1000DE89C(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v5);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "setConnectionLatency()", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (a1 == 2)
  {
    if (qword_1002A7C20 == -1)
    {
      if (!a2)
      {
LABEL_18:
        __break(1u);
LABEL_19:
        uint64_t result = swift_once();
        if (!a2) {
          goto LABEL_20;
        }
LABEL_13:
        uint64_t v13 = -5;
        return sub_1001DABDC(v13, a2);
      }
LABEL_10:
      uint64_t v13 = 1;
      return sub_1001DABDC(v13, a2);
    }
LABEL_17:
    swift_once();
    if (!a2) {
      goto LABEL_18;
    }
    goto LABEL_10;
  }
  if (!a1)
  {
    if (qword_1002A7C20 == -1)
    {
      if (a2)
      {
LABEL_7:
        uint64_t v13 = 0;
        return sub_1001DABDC(v13, a2);
      }
    }
    else
    {
      swift_once();
      if (a2) {
        goto LABEL_7;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  if (qword_1002A7C20 != -1) {
    goto LABEL_19;
  }
  if (a2) {
    goto LABEL_13;
  }
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1000DEB48(uint64_t a1, uint64_t a2)
{
  uint64_t v60 = a2;
  uint64_t v61 = a1;
  uint64_t v55 = type metadata accessor for CocoaError.Code();
  uint64_t v54 = *(void *)(v55 - 8);
  uint64_t v3 = __chkstk_darwin(v55);
  long long v53 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v52 = (char *)&v47 - v5;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v62 = *(void *)(v6 - 8);
  uint64_t v63 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v58 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v56 = (char *)&v47 - v10;
  __chkstk_darwin(v9);
  long long v49 = (char *)&v47 - v11;
  uint64_t v57 = type metadata accessor for CocoaError();
  uint64_t v51 = *(char **)(v57 - 8);
  uint64_t v12 = __chkstk_darwin(v57);
  id v50 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = type metadata accessor for URL.DirectoryHint();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v47 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v47 - v26;
  unint64_t v59 = v2;
  sub_1000D1260((uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    sub_1000A61E4((uint64_t)v20, &qword_1002A7F70);
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 32))(v27, v20, v21);
  uint64_t v29 = v22;
  unint64_t v30 = v60;
  if (v60)
  {
    v64[0] = v61;
    v64[1] = v60;
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for URL.DirectoryHint.inferFromPath(_:), v14);
    sub_1000E9828();
    swift_bridgeObjectRetain();
    URL.append<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_bridgeObjectRelease();
    uint64_t v48 = v29;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v25, v27, v21);
    id v31 = objc_allocWithZone((Class)NSData);
    id v32 = sub_1000E73EC((uint64_t)v25, 2);
    uint64_t v33 = v62;
    uint64_t v34 = v32;
    unint64_t v35 = v30;
    uint64_t v57 = v21;
    uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    sub_100099C7C(0, &qword_1002A8F88);
    sub_100099C7C(0, (unint64_t *)&unk_1002A8F90);
    uint64_t v39 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    uint64_t v40 = v63;
    uint64_t v46 = v39;
    uint64_t v41 = v49;
    (*(void (**)(char *, unint64_t, uint64_t))(v33 + 16))(v49, v59 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v63);
    swift_bridgeObjectRetain_n();
    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v51 = v27;
      v64[0] = v45;
      unint64_t v59 = v38;
      *(_DWORD *)uint64_t v44 = 136315138;
      swift_bridgeObjectRetain();
      v64[3] = sub_1000993AC(v61, v35, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Loaded accessory cache for %s.", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_1000A6240(v36, v59);

      (*(void (**)(char *, uint64_t))(v33 + 8))(v49, v63);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v51, v57);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_1000A6240(v36, v38);

      (*(void (**)(char *, uint64_t))(v33 + 8))(v41, v40);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v27, v57);
    }
    return v46;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DF940(void *a1, void *a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v52 = *(void *)(v5 - 8);
  uint64_t v53 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  id v50 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v49 = (char *)&v47 - v8;
  uint64_t v9 = type metadata accessor for URL.DirectoryHint();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = v2;
  sub_1000D1260((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1) {
    return sub_1000A61E4((uint64_t)v15, &qword_1002A7F70);
  }
  uint64_t v48 = v17;
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v19, v15, v16);
  if (a2)
  {
    v55[0] = a1;
    v55[1] = a2;
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for URL.DirectoryHint.inferFromPath(_:), v9);
    sub_1000E9828();
    swift_bridgeObjectRetain();
    URL.append<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_bridgeObjectRelease();
    uint64_t v21 = self;
    id v22 = [v21 defaultManager];
    URL.path(percentEncoded:)(1);
    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v24 = [v22 fileExistsAtPath:v23];

    if (v24)
    {
      id v25 = [v21 defaultManager];
      URL._bridgeToObjectiveC()(v26);
      uint64_t v28 = v27;
      v55[0] = 0;
      unsigned int v29 = [v25 removeItemAtURL:v27 error:v55];

      id v30 = v55[0];
      if (v29)
      {
        uint64_t v31 = v52;
        id v32 = v49;
        uint64_t v33 = v53;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v49, v51 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v53);
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = (uint8_t *)swift_slowAlloc();
          uint64_t v56 = swift_slowAlloc();
          *(_DWORD *)uint64_t v36 = 136315138;
          swift_beginAccess();
          Swift::String v37 = URL.path(percentEncoded:)(1);
          uint64_t v54 = sub_1000993AC(v37._countAndFlagsBits, (unint64_t)v37._object, &v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Removed cache file: %s", v36, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v31 + 8))(v49, v53);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
        }
      }
      else
      {
        unint64_t v38 = v30;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        uint64_t v39 = v52;
        uint64_t v40 = v50;
        uint64_t v41 = v53;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v50, v51 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v53);
        swift_errorRetain();
        swift_errorRetain();
        id v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          v55[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v44 = 136315138;
          swift_getErrorValue();
          uint64_t v45 = Error.localizedDescription.getter();
          uint64_t v56 = sub_1000993AC(v45, v46, (uint64_t *)v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "Unable to remove cache file: %s", v44, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
          (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v53);
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
        }
      }
    }
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v19, v16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E00BC(void *a1)
{
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  uint64_t v92 = *(void *)(v3 - 8);
  uint64_t v93 = v3;
  __chkstk_darwin(v3);
  uint64_t v91 = (char *)v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v5 - 8);
  unint64_t v96 = (unint64_t)v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unsigned int v94 = (char *)v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v78 - v11;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)v78 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)v78 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)v78 - v25;
  if (a1)
  {
    uint64_t v97 = v1;
    uint64_t v86 = v24;
    uint64_t v85 = v23;
    int64_t v90 = v12;
    uint64_t v95 = v8;
    uint64_t v27 = self;
    v100[0] = 0;
    uint64_t v28 = a1;
    id v29 = [v27 archivedDataWithRootObject:v28 requiringSecureCoding:1 error:v100];
    id v30 = v100[0];
    if (v29)
    {
      uint64_t v89 = v28;
      uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v33 = v32;

      uint64_t v34 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 16);
      uint64_t v83 = &v97[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger];
      uint64_t v84 = v14 + 16;
      uint64_t v82 = v34;
      ((void (*)(char *))v34)(v26);
      sub_1000A618C(v31, v33);
      sub_1000A618C(v31, v33);
      os_log_type_t v35 = Logger.logObject.getter();
      int v36 = static os_log_type_t.default.getter();
      BOOL v37 = os_log_type_enabled(v35, (os_log_type_t)v36);
      uint64_t v88 = v14;
      uint64_t v87 = v7;
      if (v37)
      {
        int v80 = v36;
        uint64_t v38 = v31;
        uint64_t v39 = swift_slowAlloc();
        uint64_t v79 = (void *)swift_slowAlloc();
        v100[0] = v79;
        *(_DWORD *)uint64_t v39 = 134218242;
        uint64_t v40 = 0;
        uint64_t v81 = v13;
        switch(v33 >> 62)
        {
          case 1uLL:
            LODWORD(v40) = HIDWORD(v38) - v38;
            if (__OFSUB__(HIDWORD(v38), v38))
            {
              __break(1u);
LABEL_27:
              __break(1u);
            }
            uint64_t v40 = (int)v40;
LABEL_18:
            uint64_t v98 = v40;
            v78[1] = v99;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v39 + 12) = 2080;
            v78[0] = v39 + 14;
            sub_100139704(v38, v33);
            String.uppercased()();
            swift_bridgeObjectRelease();
            sub_10016238C(256);
            swift_bridgeObjectRelease();
            uint64_t v54 = static String._fromSubstring(_:)();
            unint64_t v56 = v55;
            swift_bridgeObjectRelease();
            uint64_t v98 = sub_1000993AC(v54, v56, (uint64_t *)v100);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000A6240(v38, v33);
            sub_1000A6240(v38, v33);
            _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v80, "Saving cached accessory data [%ld]: 0x%s...", (uint8_t *)v39, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v31 = v38;
            swift_slowDealloc();

            id v50 = *(void (**)(char *, uint64_t))(v88 + 8);
            uint64_t v13 = v81;
            v50(v26, v81);
            uint64_t v7 = v87;
            break;
          case 2uLL:
            uint64_t v52 = *(void *)(v38 + 16);
            uint64_t v51 = *(void *)(v38 + 24);
            BOOL v53 = __OFSUB__(v51, v52);
            uint64_t v40 = v51 - v52;
            if (!v53) {
              goto LABEL_18;
            }
            goto LABEL_27;
          case 3uLL:
            goto LABEL_18;
          default:
            uint64_t v40 = BYTE6(v33);
            goto LABEL_18;
        }
      }
      else
      {
        sub_1000A6240(v31, v33);
        sub_1000A6240(v31, v33);

        id v50 = *(void (**)(char *, uint64_t))(v14 + 8);
        v50(v26, v13);
      }
      uint64_t v57 = v95;
      uint64_t v58 = v96;
      unint64_t v59 = v90;
      sub_1000D1260(v96);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v58, 1, v7) == 1)
      {

        sub_1000A6240(v31, v33);
        return sub_1000A61E4(v58, &qword_1002A7F70);
      }
      else
      {
        uint64_t v97 = (char *)v50;
        (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v59, v58, v7);
        id v60 = [v89 pairingIdentifier];
        if (!v60)
        {
          __break(1u);
          JUMPOUT(0x1000E0E94);
        }
        uint64_t v61 = v60;
        uint64_t v62 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v64 = v63;

        v100[0] = v62;
        v100[1] = v64;
        uint64_t v66 = v91;
        uint64_t v65 = v92;
        uint64_t v67 = v93;
        (*(void (**)(char *, void, uint64_t))(v92 + 104))(v91, enum case for URL.DirectoryHint.inferFromPath(_:), v93);
        sub_1000E9828();
        URL.append<A>(component:directoryHint:)();
        (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
        swift_bridgeObjectRelease();
        uint64_t v68 = v86;
        v82(v86, v83, v13);
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v69, v70))
        {
          os_log_type_t v71 = (uint8_t *)swift_slowAlloc();
          uint64_t v72 = (void *)swift_slowAlloc();
          uint64_t v93 = v31;
          unint64_t v96 = v33;
          v100[0] = v72;
          *(_DWORD *)os_log_type_t v71 = 136315138;
          swift_beginAccess();
          Swift::String v73 = URL.path(percentEncoded:)(1);
          v99[2] = sub_1000993AC(v73._countAndFlagsBits, (unint64_t)v73._object, (uint64_t *)v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "Attempting to save cache to disk at %s", v71, 0xCu);
          swift_arrayDestroy();
          unint64_t v33 = v96;
          uint64_t v31 = v93;
          swift_slowDealloc();
          swift_slowDealloc();
        }

        ((void (*)(uint64_t, uint64_t))v97)(v68, v13);
        swift_beginAccess();
        uint64_t v74 = v94;
        uint64_t v75 = v95;
        uint64_t v76 = v87;
        (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v94, v59, v87);
        Data.write(to:options:)();
        uint64_t v77 = *(void (**)(char *, uint64_t))(v75 + 8);
        v77(v74, v76);

        sub_1000A6240(v31, v33);
        return ((uint64_t (*)(char *, uint64_t))v77)(v59, v76);
      }
    }
    else
    {
      uint64_t v45 = v30;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v21, &v97[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v13);
      unint64_t v46 = Logger.logObject.getter();
      uint64_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, (os_log_type_t)v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v47, "Unable to archive data!", v48, 2u);
        swift_slowDealloc();
        long long v49 = v28;
      }
      else
      {
        long long v49 = v46;
        unint64_t v46 = v28;
      }

      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, &v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v13);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      os_log_type_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Invalid accessory cache!", v43, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  }
}

void sub_1000E0FE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3) {
    return;
  }
  uint64_t v13 = (void *)sub_1000DEB48(a1, a2);
  if (!v13) {
    return;
  }
  id v50 = v13;
  id v14 = [v13 peripheralInfo];
  if (!v14)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v15 = v14;
  id v16 = [v14 stateNumber];

  if (!v16
    || (sub_100099C7C(0, &qword_1002A8380),
        id v17 = a3,
        id v18 = v16,
        char v19 = static NSObject.== infix(_:_:)(),
        v18,
        v18,
        v17,
        (v19 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v5 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v9);
    uint64_t v21 = v50;
    id v22 = a3;
    id v23 = v21;
    id v24 = v22;
    id v4 = v23;
    uint64_t v25 = Logger.logObject.getter();
    int v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      int v44 = v26;
      os_log_t v47 = v25;
      uint64_t v48 = v5;
      id v49 = v24;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v45 = (void *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v52 = v46;
      *(_DWORD *)uint64_t v27 = 136315650;
      id v28 = [v4 pairingIdentifier];
      if (!v28)
      {
LABEL_22:

        __break(1u);
        goto LABEL_23;
      }
      id v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v32 = v31;

      uint64_t v51 = sub_1000993AC(v30, v32, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2112;
      id v33 = [v4 peripheralInfo];
      if (!v33)
      {
LABEL_23:

        __break(1u);
        return;
      }
      uint64_t v34 = v33;
      id v35 = [v33 stateNumber];

      uint64_t v42 = v9;
      uint64_t v43 = v10;
      if (v35) {
        uint64_t v51 = (uint64_t)v35;
      }
      else {
        uint64_t v51 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      int v36 = v45;
      *uint64_t v45 = v35;

      *(_WORD *)(v27 + 22) = 2112;
      id v24 = v49;
      uint64_t v51 = (uint64_t)v49;
      id v37 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v36[1] = a3;

      os_log_t v38 = v47;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v44, "Updating cached state number for %s: %@ -> %@", (uint8_t *)v27, 0x20u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v42);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
    id v39 = [v4 peripheralInfo:v42, v43];
    if (v39)
    {
      uint64_t v40 = v39;
      [v39 updateStateNumber:v24];

      id v41 = v4;
      sub_1000E00BC(v50);

      return;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = v50;
}

BOOL sub_1000E1660(BOOL result, uint64_t a2)
{
  if (!a2)
  {
    __break(1u);
    return result;
  }
  uint64_t v3 = v2;
  uint64_t v5 = result;
  uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v7 = *(id *)(v2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  uint64_t v8 = (uint64_t *)(v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
LABEL_15:
    id v21 = *(id *)(v3 + v6);
    OS_dispatch_semaphore.signal()();

    uint64_t v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    goto LABEL_16;
  }
  uint64_t v35 = v6;
  uint64_t v36 = v3;
  uint64_t v11 = v9 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000A5D40(v11, (uint64_t)v41);
    uint64_t v12 = *(void **)(*sub_1000A5DA4(v41, v41[3]) + 32);
    if (!v12) {
      goto LABEL_5;
    }
    id v13 = v12;
    id v14 = [v13 identifier];
    if (v14) {
      break;
    }
LABEL_4:

LABEL_5:
    sub_100099BCC((uint64_t)v41);
    v11 += 40;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      uint64_t v6 = v35;
      uint64_t v3 = v36;
      goto LABEL_15;
    }
  }
  uint64_t v15 = v14;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  if (v16 != v5 || v18 != a2)
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v20) {
      goto LABEL_19;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease();
  id v23 = *(id *)(v36 + v35);
  OS_dispatch_semaphore.signal()();

  sub_1000A5D40((uint64_t)v41, (uint64_t)&v38);
  sub_100099BCC((uint64_t)v41);
  if (!*((void *)&v39 + 1))
  {
LABEL_16:
    sub_1000A61E4((uint64_t)&v38, (uint64_t *)&unk_1002AAA30);
    return 0;
  }
  sub_1000A6298(&v38, (uint64_t)v41);
  sub_1000A5D40((uint64_t)v41, (uint64_t)&v38);
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if (swift_dynamicCast())
  {
    int v24 = *(unsigned __int8 *)(v37 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired);
    swift_release();
    BOOL v22 = v24 != 0;
  }
  else
  {
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v25 = qword_1002B1628;
    uint64_t v26 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v27 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v27 + 4);
    swift_release();
    id v28 = (unint64_t *)(v25 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
    swift_beginAccess();
    unint64_t v29 = *v28;
    uint64_t v30 = *(os_unfair_lock_s **)(v25 + v26);
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_unlock(v30 + 4);
    uint64_t v31 = swift_release();
    __chkstk_darwin(v31);
    v34[2] = v41;
    unint64_t v32 = (unint64_t)sub_1000D8710((uint64_t (*)(id *))sub_1000E9808, v34, v29);
    if (v32 >> 62) {
      uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v33 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    BOOL v22 = v33 > 0;
  }
  sub_100099BCC((uint64_t)v41);
  return v22;
}

uint64_t sub_1000E1A00(uint64_t a1, void *a2)
{
  sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
  uint64_t v3 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
  id v4 = *(id *)(*sub_1000A5DA4(a2, a2[3]) + 24);
  char v5 = static NSObject.== infix(_:_:)();

  return v5 & 1;
}

void sub_1000E1B90(uint64_t a1, int a2)
{
  int v114 = a2;
  *(void *)&long long v124 = a1;
  uint64_t v3 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v3 - 8);
  id v115 = (char *)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v117 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v110 - v9;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void (***)(void, void, void))(v11 - 8);
  uint64_t v122 = v11;
  uint64_t v123 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  os_log_type_t v119 = (char *)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v116 = (char *)&v110 - v16;
  __chkstk_darwin(v15);
  uint64_t v120 = (char *)&v110 - v17;
  uint64_t v118 = (void *)type metadata accessor for DockStatus();
  uint64_t v18 = *(v118 - 1);
  __chkstk_darwin(v118);
  char v20 = (char *)&v110 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  int v24 = (uint64_t *)((char *)&v110 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v121 = v2;
  uint64_t v25 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
  void *v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if (v25)
  {
    if (qword_1002A7C20 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v27 = v121;
  id v28 = v123;
  if (*(unsigned char *)(qword_1002B17A0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) != 3)
  {
    unint64_t v64 = v119;
    uint64_t v65 = v122;
    ((void (**)(char *, char *, uint64_t))v123)[2](v119, &v121[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v122);
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Ignoring connect block, accessory already disconnected!", v68, 2u);
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v28[1])(v64, v65);
    return;
  }
  unint64_t v29 = v118;
  (*(void (**)(char *, void, void *))(v18 + 104))(v20, enum case for DockStatus.Docked(_:), v118);
  uint64_t v30 = &v27[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus];
  swift_beginAccess();
  (*(void (**)(char *, char *, void *))(v18 + 40))(v30, v20, v29);
  swift_endAccess();
  uint64_t v31 = *(void *)&v27[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector];
  (*(void (**)(char *, char *, void *))(v18 + 16))(v20, v30, v29);
  uint64_t v110 = v31;
  DockDetector.newStatus(_:monitorJarvisCallback:)((uint64_t)v20, 0, 0);
  (*(void (**)(char *, void *))(v18 + 8))(v20, v29);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_10018A5EC((void *)v124);
  unint64_t v32 = (void (*)(char *, char *, uint64_t))v28[2];
  uint64_t v33 = v120;
  uint64_t v112 = &v27[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger];
  uint64_t v34 = v122;
  uint64_t v113 = v28 + 2;
  uint64_t v111 = v32;
  ((void (*)(char *))v32)(v120);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Connected!  Attempting raw write to velocity characteristic.", v37, 2u);
    swift_slowDealloc();
  }

  long long v39 = v28[1];
  long long v38 = v28 + 1;
  uint64_t v118 = v39;
  ((void (*)(char *, uint64_t))v39)(v33, v34);
  uint64_t v40 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  os_log_type_t v119 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v41 = *(void **)((char *)v40 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  uint64_t v42 = v40;
  id v43 = v41;
  OS_dispatch_semaphore.wait()();

  uint64_t v120 = v42;
  int v44 = &v42[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v45 = *(void *)v44;
  uint64_t v46 = *(void *)(*(void *)v44 + 16);
  if (v46)
  {
    uint64_t v123 = v38;
    uint64_t v47 = v45 + 32;
    uint64_t v48 = (void (**)(char *, uint64_t))(v117 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v47, (uint64_t)v125);
      id v49 = *(id *)(*sub_1000A5DA4(v125, v125[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v49) = static UUID.== infix(_:_:)();
      id v50 = *v48;
      (*v48)(v8, v5);
      v50(v10, v5);
      if (v49) {
        break;
      }
      sub_100099BCC((uint64_t)v125);
      v47 += 40;
      if (!--v46)
      {
        swift_bridgeObjectRelease();
        uint64_t v34 = v122;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    id v69 = *(id *)&v119[(void)v40];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v125, (uint64_t)&v126);
    sub_100099BCC((uint64_t)v125);

    uint64_t v34 = v122;
    if (!*((void *)&v127 + 1)) {
      goto LABEL_25;
    }
  }
  else
  {
LABEL_13:
    id v51 = *(id *)&v119[(void)v40];
    OS_dispatch_semaphore.signal()();

    uint64_t v128 = 0;
    long long v126 = 0u;
    long long v127 = 0u;

    if (!*((void *)&v127 + 1))
    {
LABEL_25:
      sub_1000A61E4((uint64_t)&v126, (uint64_t *)&unk_1002AAA30);
      return;
    }
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if (swift_dynamicCast())
  {
    uint64_t v52 = v125[0];
    BOOL v53 = *(void **)(v125[0] + 32);
    if (!v53) {
      goto LABEL_51;
    }
    self;
    uint64_t v54 = swift_dynamicCastObjCClass();
    if (!v54) {
      goto LABEL_51;
    }
    unint64_t v55 = (void *)v54;
    id v56 = v53;
    [v55 tryEstablishSecuritySession];
    if (![v55 isSecuritySessionOpen])
    {
      v111(v116, v112, v34);
      os_log_type_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v72 = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Accessory does not contain a velocity characteristic!", v72, 2u);
        swift_slowDealloc();

        swift_release();
      }
      else
      {

        swift_release();
      }
      ((void (*)(char *, uint64_t))v118)(v116, v34);
      return;
    }
    int v57 = v114;
    uint64_t v58 = (void *)v124;
    sub_100189CF4((void *)v124);
    uint64_t v59 = type metadata accessor for TaskPriority();
    id v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56);
    uint64_t v61 = (uint64_t)v115;
    v60(v115, 1, 1, v59);
    uint64_t v62 = (void *)swift_allocObject();
    v62[2] = 0;
    v62[3] = 0;
    v62[4] = v58;
    v62[5] = v52;
    id v63 = v58;
    swift_retain();
    sub_1001BC1A8(v61, (uint64_t)&unk_1002A8F20, (uint64_t)v62);
    swift_release();
    if (v57 == 2)
    {
      type metadata accessor for DockCoreManager();
      if (static DockCoreManager.ignoreStartupValidation.getter()) {
        goto LABEL_30;
      }
    }
    else if ((v57 & 1) == 0)
    {
LABEL_30:
      *(unsigned char *)(v52 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_connectedForTracking) = 1;
      uint64_t v84 = *(void **)(v52 + 16);
      if (v84)
      {
        id v85 = self;
        uint64_t v86 = (char *)sub_1000992E8((uint64_t *)&unk_1002A9F50);
        uint64_t v87 = swift_allocObject();
        long long v124 = xmmword_100240BE0;
        *(_OWORD *)(v87 + 16) = xmmword_100240BE0;
        *(void *)(v87 + 56) = &type metadata for UInt32;
        *(void *)(v87 + 64) = &protocol witness table for UInt32;
        *(_DWORD *)(v87 + 32) = 512;
        uint64_t v88 = v84;
        String.init(format:_:)();
        NSString v89 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v90 = [v85 UUIDWithString:v89];

        uint64_t v91 = *(void **)&v88[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
        if (!v91 || (id v92 = [v91 services]) == 0)
        {

          swift_release();
          return;
        }
        uint64_t v93 = v92;
        uint64_t v123 = (void (**)(void, void, void))v56;
        sub_100099C7C(0, (unint64_t *)&unk_1002A8F30);
        unint64_t v94 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v95 = v90;
        unint64_t v96 = 0;
        unint64_t v97 = (unint64_t)sub_1001138CC(v94);
        swift_bridgeObjectRelease();

        if (v97 >> 62)
        {
          if (_CocoaArrayWrapper.endIndex.getter())
          {
LABEL_35:
            if ((v97 & 0xC000000000000001) != 0)
            {
              id v98 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (!*(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_61;
              }
              id v98 = *(id *)(v97 + 32);
            }
            uint64_t v93 = v98;

            swift_bridgeObjectRelease();
            unint64_t v99 = *(void **)(v52 + 16);
            if (!v99)
            {

              swift_release();
              return;
            }
            uint64_t v100 = swift_allocObject();
            *(_OWORD *)(v100 + 16) = v124;
            *(void *)(v100 + 56) = &type metadata for UInt32;
            *(void *)(v100 + 64) = &protocol witness table for UInt32;
            *(_DWORD *)(v100 + 32) = 260;
            uint64_t v86 = v99;
            String.init(format:_:)();
            NSString v101 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            id v102 = [v85 UUIDWithString:v101];

            if (!*(void *)&v86[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]
              || (id v103 = [v93 characteristics]) == 0)
            {
              swift_release();

              return;
            }
            uint64_t v104 = v103;
            sub_100099C7C(0, (unint64_t *)&unk_1002A9F60);
            unint64_t v105 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v85 = v102;
            unint64_t v96 = (unint64_t)sub_1001138CC(v105);
            swift_bridgeObjectRelease();

            if (!(v96 >> 62))
            {
              id v106 = v123;
              if (*(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
LABEL_43:
                if ((v96 & 0xC000000000000001) != 0)
                {
                  id v107 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                  goto LABEL_46;
                }
                if (*(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10))
                {
                  id v107 = *(id *)(v96 + 32);
LABEL_46:
                  uint64_t v108 = v107;

                  swift_bridgeObjectRelease();
                  sub_1001A6C14((uint64_t)&off_100274958, (uint64_t)&off_100274988, 256, (uint64_t)v108);

                  swift_release();
                  return;
                }
                __break(1u);
                return;
              }
LABEL_62:
              swift_release();

              swift_bridgeObjectRelease();
              return;
            }
LABEL_61:
            uint64_t v109 = _CocoaArrayWrapper.endIndex.getter();
            id v106 = v123;
            if (v109) {
              goto LABEL_43;
            }
            goto LABEL_62;
          }
        }
        else if (*(void *)((v97 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_35;
        }

        swift_release();
        swift_bridgeObjectRelease();
        return;
      }

LABEL_51:
      swift_release();
      return;
    }
    *(unsigned char *)(v52 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_trackingEnabled) = 1;
    sub_1001A9F84(0.0);
    uint64_t v73 = (uint64_t)v115;
    v60(v115, 1, 1, v59);
    uint64_t v74 = (void *)swift_allocObject();
    v74[2] = 0;
    v74[3] = 0;
    v74[4] = v52;
    swift_retain();
    sub_1001BC1A8(v73, (uint64_t)&unk_1002A8F48, (uint64_t)v74);
    swift_release();
    uint64_t v75 = (void **)(v110 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
    swift_beginAccess();
    uint64_t v76 = *v75;
    uint64_t v77 = swift_allocObject();
    unsigned int v78 = v121;
    *(void *)(v77 + 16) = v121;
    *(void *)(v77 + 24) = v63;
    id v79 = v63;
    id v80 = v76;
    id v81 = v78;
    MotionValidator.start(timedOutCallback:)((uint64_t)sub_1000E96EC, v77);

    swift_release();
    v60((char *)v73, 1, 1, v59);
    uint64_t v82 = (void *)swift_allocObject();
    v82[2] = 0;
    v82[3] = 0;
    v82[4] = v81;
    v82[5] = v52;
    swift_retain();
    id v83 = v81;
    sub_1001BC1A8(v73, (uint64_t)&unk_1002A8F58, (uint64_t)v82);
    swift_release();
    goto LABEL_30;
  }
}

uint64_t sub_1000E2BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000E2BEC, 0, 0);
}

uint64_t sub_1000E2BEC()
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_1001891D0(*(void **)(v0 + 16));
  if (v1)
  {
    uint64_t v2 = v1;
    char v3 = dispatch thunk of DockCoreAccessory.needsMigration.getter();
  }
  else
  {
    char v3 = 0;
  }
  sub_1001AADB0(v3 & 1);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1000E2CB8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000A5ED8;
  return sub_1001A869C();
}

uint64_t sub_1000E2D48(char a1, char *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v15 = *(void **)&a2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
    v21[0] = result;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a2;
    *(void *)(v16 + 24) = a3;
    aBlock[4] = sub_1000E9800;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1001468DC;
    void aBlock[3] = &unk_100276508;
    uint64_t v17 = _Block_copy(aBlock);
    id v18 = v15;
    uint64_t v19 = a2;
    id v20 = a3;
    static DispatchQoS.unspecified.getter();
    v21[1] = _swiftEmptyArrayStorage;
    sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000992E8((uint64_t *)&unk_1002A7F60);
    sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, void))(v11 + 8))(v14, v21[0]);
    return swift_release();
  }
  return result;
}

void sub_1000E3024(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Startup validation timed out, disconnecting", v10, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1000E34B8(a2, 0);
}

uint64_t sub_1000E3198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v6 = type metadata accessor for Logger();
  void v5[4] = v6;
  void v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000E3258, 0, 0);
}

uint64_t sub_1000E3258()
{
  (*(void (**)(void, uint64_t, void))(v0[5] + 16))(v0[6], v0[2] + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v0[4]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Startup validation started. Starting motion feedback.", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v6 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  void *v7 = v0;
  v7[1] = sub_1000E33A8;
  return sub_1001A7ABC();
}

uint64_t sub_1000E33A8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_1000E34B8(uint64_t a1, int a2)
{
  int v71 = a2;
  uint64_t v82 = a1;
  uint64_t v3 = type metadata accessor for DockStatus();
  uint64_t v80 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v79 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for Logger();
  uint64_t v73 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v72 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v68 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint8_t **)((char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v81 = v2;
  uint64_t v16 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue);
  void *v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if (v18)
  {
    uint64_t v78 = v3;
    if (qword_1002A7C00 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v19 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v20 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  uint64_t v21 = *(void **)&v19[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v22 = v19;
  id v23 = v21;
  OS_dispatch_semaphore.wait()();

  int v24 = &v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v25 = *(void *)v24;
  uint64_t v26 = *(void *)(*(void *)v24 + 16);
  if (v26)
  {
    uint64_t v75 = v20;
    uint64_t v76 = v22;
    uint64_t v27 = v25 + 32;
    id v28 = (void (**)(char *, uint64_t))(v77 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v27, (uint64_t)v84);
      id v29 = *(id *)(*sub_1000A5DA4(v84, v84[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v29) = static UUID.== infix(_:_:)();
      uint64_t v30 = *v28;
      (*v28)(v9, v6);
      v30(v11, v6);
      if (v29) {
        break;
      }
      sub_100099BCC((uint64_t)v84);
      v27 += 40;
      if (!--v26)
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = v76;
        uint64_t v20 = v75;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    id v32 = *(id *)&v19[v75];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v84, (uint64_t)&v85);
    sub_100099BCC((uint64_t)v84);
  }
  else
  {
LABEL_8:
    id v31 = *(id *)&v19[v20];
    OS_dispatch_semaphore.signal()();

    uint64_t v87 = 0;
    long long v85 = 0u;
    long long v86 = 0u;
  }
  uint64_t v33 = v78;
  uint64_t v34 = v81;
  if (*((void *)&v86 + 1))
  {
    sub_1000992E8(&qword_1002A82E0);
    type metadata accessor for DaemonAccessory();
    if (swift_dynamicCast())
    {
      uint64_t v35 = v84[0];
      os_log_type_t v36 = *(char **)(v84[0] + 16);
      if (!v36) {
        goto LABEL_30;
      }
      uint64_t v37 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral;
      long long v38 = *(void **)&v36[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
      if (!v38) {
        goto LABEL_30;
      }
      long long v39 = v36;
      if ([v38 state] == (id)2)
      {
        uint64_t v76 = v39;
        (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v72, v34 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v74);
        swift_retain_n();
        uint64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.info.getter();
        int v42 = v41;
        id v43 = v40;
        if (os_log_type_enabled(v40, v41))
        {
          LODWORD(v75) = v42;
          int v44 = (uint8_t *)swift_slowAlloc();
          id v69 = (void *)swift_slowAlloc();
          os_log_type_t v70 = v44;
          *(_DWORD *)int v44 = 138412290;
          uint64_t v68 = v44 + 4;
          uint64_t v45 = *(void **)(v35 + 24);
          *(void *)&long long v85 = v45;
          id v46 = v45;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v69 = v45;
          uint64_t v34 = v81;
          swift_release_n();
          _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v75, "Disconnecting %@", v70, 0xCu);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v74);
        uint64_t v47 = *(void *)&v36[v37];
        uint64_t v48 = v76;
        if (v47)
        {
          if (qword_1002A7C20 != -1) {
            swift_once();
          }
          id v49 = (void *)qword_1002B17A0;
          uint64_t v50 = swift_allocObject();
          *(void *)(v50 + 16) = v49;
          *(void *)(v50 + 24) = v36;
          id v51 = v48;
          id v52 = v49;
          sub_1001DA690((uint64_t)sub_1000EAB30, v50);
          swift_release();
        }
        if ((v71 & 1) == 0)
        {
          uint64_t v53 = sub_10013D1F8();
          if (v54 >> 60 != 15)
          {
            uint64_t v55 = v53;
            unint64_t v56 = v54;
            sub_1000A618C(v53, v54);
            sub_1001B7C9C(v55, v56, v84);
            sub_1000EA2DC((uint64_t)v84, (uint64_t)&v85, (uint64_t *)&unk_1002A8F08);
            uint64_t v57 = *((void *)&v85 + 1);
            if (*((void *)&v85 + 1))
            {
              uint64_t v81 = v85;
              id v58 = *(id *)(v35 + 24);
              DockCoreInfo.identifier.getter();

              uint64_t v59 = (uint64_t *)(v34 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockSetupIdMap);
              swift_beginAccess();
              swift_bridgeObjectRetain();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v83 = *v59;
              *uint64_t v59 = 0x8000000000000000;
              sub_1001F4B7C(v81, v57, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
              *uint64_t v59 = v83;
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v77 + 8))(v11, v6);
              swift_endAccess();
              sub_1000A9990(v55, v56);
              sub_1000E94A4((uint64_t)v84);

              goto LABEL_30;
            }
            sub_1000A9990(v55, v56);
          }
        }
        id v61 = *(id *)(v35 + 24);
        DockCoreInfo.identifier.getter();

        swift_beginAccess();
        sub_1001ED3CC((uint64_t)v11);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v11, v6);
        swift_endAccess();

        swift_bridgeObjectRelease();
        goto LABEL_30;
      }

LABEL_30:
      *(unsigned char *)(v35 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_connectedForTracking) = 0;
      sub_100113A68(v82);
      swift_release();
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&v85, (uint64_t *)&unk_1002AAA30);
  }
  sub_10018A5EC(0);
  sub_100189CF4(0);
  uint64_t v62 = v80;
  uint64_t v63 = (uint64_t)v79;
  (*(void (**)(char *, void, uint64_t))(v80 + 104))(v79, enum case for DockStatus.Undocked(_:), v33);
  uint64_t v64 = v34 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus;
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 40))(v64, v63, v33);
  swift_endAccess();
  uint64_t v65 = *(void *)(v34 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 16))(v63, v64, v33);
  DockDetector.newStatus(_:monitorJarvisCallback:)(v63, 0, 0);
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v63, v33);
  uint64_t v66 = (id *)(v65 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
  swift_beginAccess();
  id v67 = *v66;
  MotionValidator.stop()();
}

void sub_1000E3F84(uint64_t a1)
{
  uint64_t v2 = v1;
  v20[1] = a1;
  uint64_t v3 = type metadata accessor for DockStatus();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (void *)((char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  DockCoreInfo.identifier.getter();
  swift_beginAccess();
  sub_1001ED3CC((uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v21);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v7 = v2;
  if (qword_1002A7C00 != -1) {
LABEL_5:
  }
    swift_once();
  sub_10018A5EC(0);
  sub_100189CF4(0);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for DockStatus.Undocked(_:), v3);
  uint64_t v16 = v7 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockStatus;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v16, v6, v3);
  swift_endAccess();
  uint64_t v17 = *(void *)(v7 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v16, v3);
  DockDetector.newStatus(_:monitorJarvisCallback:)((uint64_t)v6, 0, 0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  char v18 = (id *)(v17 + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
  swift_beginAccess();
  id v19 = *v18;
  MotionValidator.stop()();
}

id sub_1000E4348()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryManager();
  return [super dealloc];
}

uint64_t sub_1000E454C()
{
  return type metadata accessor for AccessoryManager();
}

uint64_t type metadata accessor for AccessoryManager()
{
  uint64_t result = qword_1002A8EE8;
  if (!qword_1002A8EE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000E45A0()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    sub_1000E472C();
    if (v1 <= 0x3F)
    {
      type metadata accessor for DockStatus();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

void sub_1000E472C()
{
  if (!qword_1002A8EF8)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, &qword_1002A8EF8);
    }
  }
}

uint64_t sub_1000E4788(uint64_t a1)
{
  uint64_t v66 = a1;
  uint64_t i = type metadata accessor for DispatchWorkItemFlags();
  unint64_t v3 = *(void *)(i - 8);
  __chkstk_darwin(i);
  uint64_t v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (uint64_t *)type metadata accessor for Logger();
  uint64_t v62 = *(v9 - 1);
  uint64_t v10 = __chkstk_darwin(v9);
  id v58 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v60 = (char *)&v51 - v12;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v13 - 8);
  uint64_t v64 = v13;
  __chkstk_darwin(v13);
  id v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v1;
  uint64_t v16 = &v1[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens];
  swift_beginAccess();
  id v61 = v16;
  uint64_t v17 = *(void *)v16;
  if (*(void *)v16 >> 62)
  {
LABEL_35:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    if (v18) {
      goto LABEL_3;
    }
    return swift_bridgeObjectRelease();
  }
  uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v18) {
    return swift_bridgeObjectRelease();
  }
LABEL_3:
  unint64_t v56 = v5;
  uint64_t v5 = (char *)(v17 & 0xC000000000000001);
  uint64_t v57 = v9;
  uint64_t v55 = v7;
  if ((v17 & 0xC000000000000001) != 0) {
    goto LABEL_38;
  }
  if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v7 = *(void *)(v17 + 32);
  swift_retain();
LABEL_6:
  uint64_t v9 = &OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v54 = v6;
    unint64_t v52 = v3;
    uint64_t v53 = i;
    swift_release();
    if (v18 == 1) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v6 = v17 & 0xFFFFFFFFFFFFFF8;
    for (uint64_t i = 5; ; ++i)
    {
      unint64_t v3 = i - 4;
      if (v5)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v19 = __OFADD__(v3, 1);
        unint64_t v3 = i - 3;
        if (v19) {
          goto LABEL_34;
        }
      }
      else
      {
        if (v3 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_38:
          uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_6;
        }
        uint64_t v7 = *(void *)(v17 + 8 * i);
        swift_retain();
        BOOL v19 = __OFADD__(v3, 1);
        unint64_t v3 = i - 3;
        if (v19)
        {
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
      }
      if (static UUID.== infix(_:_:)())
      {
        uint64_t i = v53;
        unint64_t v3 = v52;
        uint64_t v6 = v54;
        break;
      }
      swift_release();
      if (v3 == v18) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  static Date.now.getter();
  Date.timeIntervalSince1970.getter();
  double v22 = v21;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v15, v64);
  v25.n128_u64[0] = *(void *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_timestamp);
  v23.n128_f64[0] = v22 - v25.n128_f64[0];
  BOOL v24 = v22 < v25.n128_f64[0];
  v25.n128_u64[0] = 0x4072C00000000000;
  BOOL v26 = !v24 && v23.n128_f64[0] <= 300.0;
  uint64_t v27 = v57;
  if (v26)
  {
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_hasAuth) == 1)
    {
      os_log_type_t v36 = v65;
      uint64_t v37 = *(void **)&v65[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = v36;
      *(void *)(v38 + 24) = v7;
      aBlock[4] = sub_1000E88DC;
      aBlock[5] = v38;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1001468DC;
      void aBlock[3] = &unk_1002763A0;
      long long v39 = _Block_copy(aBlock);
      uint64_t v54 = v6;
      uint64_t v40 = v39;
      unint64_t v41 = v3;
      id v42 = v37;
      id v43 = v36;
      swift_retain();
      int v44 = v59;
      static DispatchQoS.unspecified.getter();
      id v67 = _swiftEmptyArrayStorage;
      sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000992E8((uint64_t *)&unk_1002A7F60);
      sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
      uint64_t v45 = v56;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v40);
      swift_release();

      (*(void (**)(char *, uint64_t))(v41 + 8))(v45, i);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v44, v54);
      return swift_release();
    }
    else
    {
      uint64_t v46 = v62;
      uint64_t v47 = v58;
      (*(void (**)(char *, char *, uint64_t *))(v62 + 16))(v58, &v65[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v27);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Waiting for user to authorize pair-setup.", v50, 2u);
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_release();
      }
      return (*(uint64_t (**)(char *, uint64_t *))(v46 + 8))(v47, v27);
    }
  }
  uint64_t v28 = v62;
  id v29 = v60;
  (*(void (**)(char *, char *, uint64_t *, __n128, __n128))(v62 + 16))(v60, &v65[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v57, v25, v23);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    id v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Removing stale pairing token, pairing not accepted within allowed timeout.", v32, 2u);
    swift_slowDealloc();
  }

  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t *))(v28 + 8))(v29, v27);
  __chkstk_darwin(v33);
  *(&v51 - 2) = v66;
  uint64_t v34 = v61;
  swift_beginAccess();
  uint64_t result = sub_1000E7548((uint64_t (*)(uint64_t *))sub_1000E88E4, (uint64_t)(&v51 - 4));
  uint64_t v6 = result;
  if (!(*(void *)v34 >> 62))
  {
    uint64_t v35 = *(void *)((*(void *)v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v35 >= result) {
      goto LABEL_27;
    }
LABEL_41:
    __break(1u);
    return result;
  }
LABEL_40:
  swift_bridgeObjectRetain();
  uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (v35 < v6) {
    goto LABEL_41;
  }
LABEL_27:
  sub_1001A0960(v6, v35);
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

id sub_1000E5060(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = __chkstk_darwin(v4);
  id result = (id)__chkstk_darwin(v5);
  uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard;
  if (!*(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_proxCard)) {
    return result;
  }
  uint64_t v55 = (char *)&v54 - v7;
  unint64_t v56 = v9;
  uint64_t v60 = v8;
  id v59 = result;
  uint64_t v11 = a2 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload;
  uint64_t v12 = *(void *)(a2 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
  unint64_t v13 = *(void *)(v11 + 40);
  sub_1000A618C(v12, v13);
  uint64_t v14 = sub_10013E71C(v12, v13);
  uint64_t v16 = v15;
  sub_1000A6240(v12, v13);
  uint64_t v61 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v17 = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  uint64_t v18 = (uint64_t *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess();
  uint64_t v19 = *v18;
  uint64_t v20 = *(void *)(v19 + 16);
  if (!v20)
  {
LABEL_15:
    id v31 = *(id *)(a1 + v61);
    OS_dispatch_semaphore.signal()();

    uint64_t v65 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    swift_bridgeObjectRelease();
    if (!*((void *)&v64 + 1)) {
      return (id)sub_1000A61E4((uint64_t)&v63, (uint64_t *)&unk_1002AAA30);
    }
    goto LABEL_16;
  }
  uint64_t v57 = v10;
  uint64_t v58 = a1;
  uint64_t v21 = v19 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000A5D40(v21, (uint64_t)v62);
    double v22 = *(void **)(*sub_1000A5DA4(v62, v62[3]) + 32);
    if (!v22) {
      goto LABEL_5;
    }
    id v23 = v22;
    id v24 = [v23 identifier];
    if (v24) {
      break;
    }
LABEL_4:

LABEL_5:
    sub_100099BCC((uint64_t)v62);
    v21 += 40;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      a1 = v58;
      uint64_t v10 = v57;
      goto LABEL_15;
    }
  }
  __n128 v25 = v24;
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  if (v26 != v14 || v28 != v16)
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v30) {
      goto LABEL_27;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
LABEL_27:
  swift_bridgeObjectRelease();
  a1 = v58;
  id v42 = *(id *)(v58 + v61);
  OS_dispatch_semaphore.signal()();

  sub_1000A5D40((uint64_t)v62, (uint64_t)&v63);
  sub_100099BCC((uint64_t)v62);
  swift_bridgeObjectRelease();
  uint64_t v10 = v57;
  if (!*((void *)&v64 + 1)) {
    return (id)sub_1000A61E4((uint64_t)&v63, (uint64_t *)&unk_1002AAA30);
  }
LABEL_16:
  sub_1000A6298(&v63, (uint64_t)v66);
  id v32 = *(void **)(*sub_1000A5DA4(v66, v66[3]) + 32);
  if (!v32) {
    return (id)sub_100099BCC((uint64_t)v66);
  }
  self;
  id result = (id)swift_dynamicCastObjCClass();
  if (!result) {
    return (id)sub_100099BCC((uint64_t)v66);
  }
  uint64_t v33 = *(void *)(a1 + v10);
  if (!v33)
  {
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v34 = result;
  uint64_t v35 = a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger;
  os_log_type_t v36 = *(void (**)(char *, uint64_t, id))(v60 + 16);
  if ((*(unsigned char *)(v33 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_requiresSWAuth) & 1) == 0)
  {
    id v43 = v59;
    v36(v55, v35, v59);
    id v44 = v32;
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "User authorized uncertified accessory", v47, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, id))(v60 + 8))(v55, v43);
    id result = [v34 identifier];
    if (!result) {
      goto LABEL_41;
    }
    uint64_t v48 = result;
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v51 = v50;

    unint64_t v52 = sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
    if (*(void *)(a1 + v10))
    {
      *(unsigned char *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState) = 5;
      id v53 = *(id *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_server);
      sub_100156E14(v49, v51, 2, v52, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    [v34 continuePairingAfterAuthPrompt];
LABEL_36:

    return (id)sub_100099BCC((uint64_t)v66);
  }
  uint64_t v37 = v10;
  v36(v56, v35, v59);
  id v38 = v32;
  long long v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    unint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Continuing with SW auth", v41, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, id))(v60 + 8))(v56, v59);
  id result = [v34 identifier];
  if (result)
  {

    sub_1001EA374((uint64_t)_swiftEmptyArrayStorage);
    if (*(void *)(a1 + v37)) {
      *(unsigned char *)(a1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingState) = 4;
    }
    swift_bridgeObjectRelease();
    [v34 continueAuthAfterValidation:1];
    goto LABEL_36;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000E569C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  unint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (uint64_t *)((char *)&v29 - v8);
  uint64_t v10 = (uint64_t *)((char *)v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
  swift_beginAccess();
  uint64_t v11 = *v10;
  if ((unint64_t)*v10 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return sub_1000E4788(a1);
  }
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_17;
  }
LABEL_3:
  uint64_t v33 = v9;
  if ((v11 & 0xC000000000000001) != 0) {
    goto LABEL_32;
  }
  if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    return result;
  }
  uint64_t v14 = *(void *)(v11 + 32);
  swift_retain();
LABEL_6:
  uint64_t v9 = &OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v31 = v3;
    uint64_t v32 = v7;
    char v30 = (uint8_t *)v4;
    swift_release();
    if (v12 == 1) {
      goto LABEL_17;
    }
    uint64_t v3 = v11 & 0xFFFFFFFFFFFFFF8;
    uint64_t v7 = 5;
    while (1)
    {
      unint64_t v4 = v7 - 4;
      if ((v11 & 0xC000000000000001) != 0)
      {
        uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v15 = __OFADD__(v4, 1);
        unint64_t v4 = v7 - 3;
        if (v15) {
          goto LABEL_28;
        }
      }
      else
      {
        if (v4 >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_32:
          uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          goto LABEL_6;
        }
        uint64_t v14 = *(void *)(v11 + 8 * v7);
        swift_retain();
        BOOL v15 = __OFADD__(v4, 1);
        unint64_t v4 = v7 - 3;
        if (v15)
        {
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
      }
      if (static UUID.== infix(_:_:)())
      {
        unint64_t v4 = (unint64_t)v30;
        uint64_t v3 = v31;
        uint64_t v7 = v32;
        break;
      }
      swift_release();
      ++v7;
      if (v4 == v12) {
        goto LABEL_17;
      }
    }
  }
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v14 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_hasAuth) != 1)
  {
    *(unsigned char *)(v14 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_hasAuth) = 1;
    uint64_t v33 = v1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v3);
    swift_retain_n();
    uint64_t v21 = Logger.logObject.getter();
    uint64_t v22 = v7;
    unint64_t v23 = v4;
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v32 = v22;
      uint64_t v26 = (uint8_t *)v25;
      uint64_t v31 = swift_slowAlloc();
      uint64_t v35 = v31;
      *(_DWORD *)uint64_t v26 = 136315138;
      char v30 = v26 + 4;
      uint64_t v27 = UUID.uuidString.getter();
      uint64_t v34 = sub_1000993AC(v27, v28, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v24, "User authorized pair setup for accessory token: %s.", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v32, v3);
    }
    else
    {

      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v3);
    }
    return sub_1000E4788(a1);
  }
  uint64_t v16 = (uint64_t)v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger;
  id v17 = v33;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v33, v16, v3);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Ignoring duplicate user authorization request", v20, 2u);
    swift_slowDealloc();
    swift_release();
  }
  else
  {

    swift_release();
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v4 + 8))(v17, v3);
}

uint64_t sub_1000E5B7C(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v60 = *(void *)(v4 - 8);
  uint64_t v61 = v4;
  __chkstk_darwin(v4);
  uint64_t i = (uint64_t)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for DispatchQoS();
  uint64_t v59 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v58 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v56 = (char *)v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)v50 - v12;
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (char *)v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void (**)(char *, char *))(v15 + 16);
  uint64_t v62 = v19;
  v18(v17, &v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger]);
  uint64_t v20 = *(void (**)(char *, uint64_t, unint64_t))(v9 + 16);
  uint64_t v65 = a1;
  uint64_t v63 = v8;
  uint64_t v54 = v9 + 16;
  id v53 = v20;
  v20(v13, a1, v8);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v57 = v9;
  uint64_t v55 = v10;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v52 = i;
    uint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc();
    unint64_t v51 = v2;
    aBlock[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    v50[1] = v25 + 4;
    uint64_t v27 = UUID.uuidString.getter();
    void aBlock[6] = sub_1000993AC(v27, v28, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v29 = v13;
    unint64_t v30 = v63;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v29, v63);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Request to cancel pairing for token %s", v25, 0xCu);
    swift_arrayDestroy();
    unint64_t v2 = v51;
    swift_slowDealloc();
    uint64_t i = v52;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v31 = v13;
    unint64_t v30 = v63;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v31, v63);
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v62);
  uint64_t v32 = &v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens];
  swift_beginAccess();
  uint64_t v33 = *(void *)v32;
  if (!(*(void *)v32 >> 62))
  {
    uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v36 = v64;
    if (v34) {
      goto LABEL_6;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_24:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v34 = result;
  uint64_t v36 = v64;
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_6:
  if ((v33 & 0xC000000000000001) != 0) {
    goto LABEL_27;
  }
  if (*(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v37 = *(void *)(v33 + 32);
    swift_retain();
    while (1)
    {
      if (static UUID.== infix(_:_:)())
      {
LABEL_22:
        swift_bridgeObjectRelease();
        long long v39 = *(void **)&v2[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
        os_log_type_t v40 = v56;
        v53(v56, v65, v30);
        uint64_t v41 = v57;
        unint64_t v42 = v30;
        unint64_t v43 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
        uint64_t v44 = swift_allocObject();
        *(void *)(v44 + 16) = v37;
        *(void *)(v44 + 24) = v2;
        (*(void (**)(unint64_t, char *, unint64_t))(v41 + 32))(v44 + v43, v40, v42);
        aBlock[4] = (uint64_t)sub_1000E6C30;
        aBlock[5] = v44;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        void aBlock[2] = (uint64_t)sub_1001468DC;
        void aBlock[3] = (uint64_t)&unk_100276300;
        uint64_t v45 = _Block_copy(aBlock);
        id v46 = v39;
        swift_retain();
        uint64_t v47 = v2;
        uint64_t v48 = v58;
        static DispatchQoS.unspecified.getter();
        uint64_t v66 = _swiftEmptyArrayStorage;
        sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_1000992E8((uint64_t *)&unk_1002A7F60);
        sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
        uint64_t v49 = v61;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v45);
        swift_release();

        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(i, v49);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v48, v36);
        return swift_release();
      }
      uint64_t v52 = i;
      swift_release();
      if (v34 == 1) {
        return swift_bridgeObjectRelease();
      }
      uint64_t v36 = v33 & 0xFFFFFFFFFFFFFF8;
      for (uint64_t i = 5; ; ++i)
      {
        unint64_t v30 = i - 4;
        if ((v33 & 0xC000000000000001) != 0)
        {
          uint64_t v37 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v38 = __OFADD__(v30, 1);
          unint64_t v30 = i - 3;
          if (v38) {
            goto LABEL_23;
          }
          goto LABEL_18;
        }
        if (v30 >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          break;
        }
        uint64_t v37 = *(void *)(v33 + 8 * i);
        swift_retain();
        BOOL v38 = __OFADD__(v30, 1);
        unint64_t v30 = i - 3;
        if (v38)
        {
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
LABEL_18:
        if (static UUID.== infix(_:_:)())
        {
          unint64_t v30 = v63;
          uint64_t v36 = v64;
          uint64_t i = v52;
          goto LABEL_22;
        }
        swift_release();
        if (v30 == v34) {
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
LABEL_27:
      uint64_t v37 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
  }
  __break(1u);
  return result;
}

void sub_1000E633C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v62 = *(void *)(v6 - 8);
  uint64_t v63 = v6;
  __chkstk_darwin(v6);
  uint64_t v61 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload;
  uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
  unint64_t v10 = *(void *)(v8 + 40);
  sub_1000A618C(v9, v10);
  id v11 = (id)sub_10013E71C(v9, v10);
  uint64_t v13 = v12;
  sub_1000A6240(v9, v10);
  uint64_t v14 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v15 = *(id *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  OS_dispatch_semaphore.wait()();

  uint64_t v16 = (uint64_t *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories);
  swift_beginAccess();
  uint64_t v17 = *v16;
  uint64_t v18 = *(void *)(v17 + 16);
  if (!v18)
  {
LABEL_14:
    id v29 = *(id *)(a2 + v14);
    OS_dispatch_semaphore.signal()();

    uint64_t v70 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    swift_bridgeObjectRelease();
    if (!*((void *)&v69 + 1)) {
      goto LABEL_30;
    }
    goto LABEL_15;
  }
  uint64_t v64 = v14;
  uint64_t v65 = a3;
  uint64_t v66 = a2;
  uint64_t v19 = v17 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_1000A5D40(v19, (uint64_t)v67);
    uint64_t v20 = *(void **)(*sub_1000A5DA4(v67, v67[3]) + 32);
    if (!v20) {
      goto LABEL_4;
    }
    id v21 = v20;
    id v22 = [v21 identifier];
    if (v22) {
      break;
    }
LABEL_3:

LABEL_4:
    sub_100099BCC((uint64_t)v67);
    v19 += 40;
    if (!--v18)
    {
      swift_bridgeObjectRelease();
      a3 = v65;
      a2 = v66;
      uint64_t v14 = v64;
      goto LABEL_14;
    }
  }
  BOOL v23 = v22;
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v26 = v25;

  if ((id)v24 != v11 || v26 != v13)
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v28) {
      goto LABEL_29;
    }
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
LABEL_29:
  swift_bridgeObjectRelease();
  a2 = v66;
  id v46 = *(id *)(v66 + v64);
  OS_dispatch_semaphore.signal()();

  sub_1000A5D40((uint64_t)v67, (uint64_t)&v68);
  sub_100099BCC((uint64_t)v67);
  swift_bridgeObjectRelease();
  a3 = v65;
  if (!*((void *)&v69 + 1))
  {
LABEL_30:
    sub_1000A61E4((uint64_t)&v68, (uint64_t *)&unk_1002AAA30);
LABEL_31:
    if (qword_1002A7C20 != -1) {
      swift_once();
    }
    uint64_t v47 = (void *)qword_1002B17A0;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = v47;
    *(void *)(v48 + 24) = 0;
    id v49 = v47;
    sub_1001DA690((uint64_t)sub_1000E7540, v48);
    uint64_t v50 = swift_release();
    __chkstk_darwin(v50);
    *(&v60 - 2) = a3;
    unint64_t v51 = (uint64_t *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
    swift_beginAccess();
    uint64_t v52 = sub_1000E7548((uint64_t (*)(uint64_t *))sub_1000EAB38, (uint64_t)(&v60 - 4));
    uint64_t v53 = v52;
    a2 = *v51;
    if ((unint64_t)*v51 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v54 < v53) {
        goto LABEL_40;
      }
LABEL_35:
      sub_1001A0960(v53, v54);
      swift_endAccess();
      return;
    }
    uint64_t v54 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v54 >= v52) {
      goto LABEL_35;
    }
LABEL_40:
    __break(1u);
LABEL_41:
    swift_once();
LABEL_18:
    unint64_t v30 = (void *)qword_1002B17A0;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v30;
    *(void *)(v31 + 24) = 0;
    id v32 = v30;
    sub_1001DA690((uint64_t)sub_1000EAB30, v31);
    uint64_t v33 = swift_release();
    __chkstk_darwin(v33);
    *(&v60 - 2) = a3;
    uint64_t v34 = (void *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
    swift_beginAccess();
    uint64_t v35 = sub_1000E7548((uint64_t (*)(uint64_t *))sub_1000EAB38, (uint64_t)(&v60 - 4));
    uint64_t v36 = v35;
    if (!(*v34 >> 62))
    {
      uint64_t v37 = *(void *)((*v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v37 >= v35) {
        goto LABEL_20;
      }
LABEL_43:
      __break(1u);
LABEL_44:
      swift_bridgeObjectRetain();
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v59 < v36) {
LABEL_45:
      }
        __break(1u);
LABEL_38:
      sub_1001A0960(v36, v59);
      swift_endAccess();
      swift_release();

      swift_errorRelease();
      return;
    }
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v37 < v36) {
      goto LABEL_43;
    }
LABEL_20:
    sub_1001A0960(v36, v37);
    swift_endAccess();
LABEL_27:
    swift_release();
    return;
  }
LABEL_15:
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_31;
  }
  if (*(unsigned char *)(v67[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2)
  {
    if (qword_1002A7C20 != -1) {
      goto LABEL_41;
    }
    goto LABEL_18;
  }
  BOOL v38 = *(void **)(v67[0] + 32);
  if (!v38) {
    goto LABEL_27;
  }
  uint64_t v39 = a3;
  self;
  uint64_t v40 = swift_dynamicCastObjCClass();
  if (!v40) {
    goto LABEL_27;
  }
  uint64_t v41 = (void *)v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v63);
  id v11 = v38;
  unint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "User canceled in-progress pairing.", v44, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v63);
  *(void *)&long long v68 = 0;
  if (![v41 stopPairingWithError:&v68])
  {
    id v55 = (id)v68;
    _convertNSErrorToError(_:)();

    uint64_t v56 = swift_willThrow();
    __chkstk_darwin(v56);
    *(&v60 - 2) = v39;
    uint64_t v57 = (void *)(a2 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_tokens);
    swift_beginAccess();
    uint64_t v58 = sub_1000E7548((uint64_t (*)(uint64_t *))sub_1000EAB38, (uint64_t)(&v60 - 4));
    uint64_t v36 = v58;
    if (*v57 >> 62) {
      goto LABEL_44;
    }
    uint64_t v59 = *(void *)((*v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v59 < v58) {
      goto LABEL_45;
    }
    goto LABEL_38;
  }
  id v45 = (id)v68;
  swift_release();
}

uint64_t sub_1000E6B5C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000E6C30()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  sub_1000E633C(v2, v3, v4);
}

uint64_t sub_1000E6C94(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E6CA4()
{
  return swift_release();
}

void sub_1000E6CAC()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v52 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v50 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v55 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v46 - v8;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_1002B1628;
  uint64_t v11 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v12 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  swift_release();
  uint64_t v13 = *(void **)(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_docked);
  uint64_t v14 = *(os_unfair_lock_s **)(v10 + v11);
  id v15 = v13;
  swift_retain();
  os_unfair_lock_unlock(v14 + 4);
  swift_release();
  if (v13)
  {
    uint64_t v16 = (void **)(*(void *)&v56[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_dockDetector]
                  + OBJC_IVAR____TtC14dockaccessoryd12DockDetector_startupValidator);
    swift_beginAccess();
    uint64_t v17 = *v16;
    uint64_t v18 = *(void *)((char *)*v16 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator__timer);
    uint64_t v47 = v1;
    uint64_t v48 = v0;
    id v54 = v15;
    id v49 = v16;
    if (v18 && (*((unsigned char *)v17 + OBJC_IVAR____TtC14dockaccessoryd15MotionValidator_type) & 1) == 0)
    {
      id v20 = v17;
      char v19 = sub_1001484E0();
    }
    else
    {
      char v19 = 1;
    }
    id v21 = &v56[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger];
    id v22 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v22(v9, &v56[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger], v4);
    BOOL v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 67109120;
      LODWORD(aBlock[0]) = v19 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "startup motion is valid %{BOOL}d", v25, 8u);
      swift_slowDealloc();
    }

    uint64_t v26 = *(void (**)(char *, uint64_t))(v5 + 8);
    v26(v9, v4);
    if ((v19 & 1) == 0)
    {
      v22(v55, v21, v4);
      uint64_t v27 = v54;
      char v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v28, v29))
      {
        unint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        id v46 = v27;
        id v32 = (void *)v31;
        *(_DWORD *)unint64_t v30 = 138412290;
        uint64_t v33 = dispatch thunk of DockCoreAccessory.info.getter();
        aBlock[0] = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v32 = v33;

        _os_log_impl((void *)&_mh_execute_header, v28, v29, "startup motion is not valid, disconnecting %@", v30, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        uint64_t v27 = v46;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        char v28 = v27;
      }
      uint64_t v35 = v47;
      uint64_t v34 = v48;

      v26(v55, v4);
      uint64_t v36 = v56;
      uint64_t v37 = *(void **)&v56[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
      uint64_t v38 = swift_allocObject();
      *(void *)(v38 + 16) = v36;
      *(void *)(v38 + 24) = v27;
      aBlock[4] = sub_1000E8968;
      aBlock[5] = v38;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1001468DC;
      void aBlock[3] = &unk_1002763F0;
      uint64_t v39 = _Block_copy(aBlock);
      uint64_t v40 = v27;
      id v41 = v37;
      id v42 = v36;
      os_log_type_t v43 = v50;
      static DispatchQoS.unspecified.getter();
      uint64_t v57 = _swiftEmptyArrayStorage;
      sub_1000EAA2C((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000992E8((uint64_t *)&unk_1002A7F60);
      sub_1000EAA74((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
      uint64_t v44 = v52;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v39);

      (*(void (**)(char *, uint64_t))(v35 + 8))(v44, v34);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v43, v53);
      swift_release();
    }
    id v45 = *v49;
    MotionValidator.stop()();
  }
}

void sub_1000E7398()
{
  id v0 = (id)dispatch thunk of DockCoreAccessory.info.getter();
  sub_1000E34B8((uint64_t)v0, 0);
}

id sub_1000E73EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v7 = v6;
  id v16 = 0;
  id v8 = [v3 initWithContentsOfURL:v6 options:a2 error:&v16];

  id v9 = v16;
  if (v8)
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    id v12 = v9;
    v11(a1, v10);
  }
  else
  {
    id v13 = v16;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
  }
  return v8;
}

void sub_1000E7540(void *a1, uint64_t a2)
{
  sub_1001DBBE4(a1, a2, *(void *)(v2 + 16), *(char **)(v2 + 24));
}

uint64_t sub_1000E7548(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t v4 = (uint64_t *)v2;
  unint64_t v7 = *v2;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000E78B0(a1, a2, v7);
  char v10 = v9;
  swift_bridgeObjectRelease();
  if (v3) {
    return v8;
  }
  if ((v10 & 1) == 0)
  {
    unint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*v4 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v11 != v26) {
        goto LABEL_6;
      }
    }
    else if (v11 != *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      unint64_t v11 = v8 + 5;
      uint64_t v28 = a2;
      while (1)
      {
        unint64_t v12 = v11 - 4;
        uint64_t v13 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v12 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_45;
          }
          uint64_t v14 = *(void *)(v13 + 8 * v11);
          swift_retain();
        }
        uint64_t v29 = v14;
        char v15 = a1(&v29);
        swift_release();
        if ((v15 & 1) == 0) {
          break;
        }
LABEL_32:
        unint64_t v23 = v11 - 3;
        if (__OFADD__(v12, 1)) {
          goto LABEL_46;
        }
        if ((unint64_t)*v4 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v24 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v11;
        if (v23 == v24) {
          return v8;
        }
      }
      if (v12 == v8)
      {
LABEL_31:
        if (__OFADD__(v8++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_32;
      }
      uint64_t v16 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
      {
        uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v16 = *v4;
        if ((*v4 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v12 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v12 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          uint64_t v18 = *(void *)(v16 + 8 * v11);
          swift_retain();
          goto LABEL_20;
        }
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v8 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        uint64_t v17 = *(void *)(v16 + 8 * v8 + 32);
        swift_retain();
        if ((v16 & 0xC000000000000001) == 0) {
          goto LABEL_17;
        }
      }
      uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v16 = *v4;
LABEL_20:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      uint64_t *v4 = v16;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v16 < 0 || (v16 & 0x4000000000000000) != 0)
      {
        uint64_t v16 = sub_1001137FC(v16);
        uint64_t *v4 = v16;
      }
      *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v18;
      swift_release();
      specialized Array._endMutation()();
      uint64_t v20 = *v4;
      int v21 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      uint64_t *v4 = v20;
      if (!v21 || v20 < 0 || (v20 & 0x4000000000000000) != 0)
      {
        uint64_t v20 = sub_1001137FC(v20);
        uint64_t *v4 = v20;
      }
      a2 = v28;
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      if (v12 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 8 * v11) = v17;
      swift_release();
      specialized Array._endMutation()();
      goto LABEL_31;
    }
    return v8;
  }
  if (!((unint64_t)*v4 >> 62)) {
    return *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t sub_1000E78B0(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v7 = 0;
  if (v6)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v8 = *(void *)(a3 + 8 * v7 + 32);
        swift_retain();
      }
      uint64_t v12 = v8;
      char v9 = a1(&v12);
      swift_release();
      if (v3 || (v9 & 1) != 0) {
        break;
      }
      uint64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v7 = 0;
        if (!v6) {
          return v7;
        }
      }
      else
      {
        ++v7;
        if (v10 == v6) {
          return 0;
        }
      }
    }
  }
  return v7;
}

uint64_t sub_1000E79D4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  *(void *)(a4 + 40) = 0;
  uint64_t v7 = (id *)(a4 + 40);
  id v8 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 initWithServiceName:v9 viewControllerClassName:v10];

  *(v7 - 3) = v11;
  id v12 = [objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext) init];
  *(v7 - 2) = v12;
  sub_1000992E8((uint64_t *)&unk_1002A8FB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002413A0;
  id v14 = v12;
  AnyHashable.init<A>(_:)();
  uint64_t v15 = UUID.uuidString.getter();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v15;
  *(void *)(inited + 80) = v16;
  AnyHashable.init<A>(_:)();
  uint64_t v17 = DockCoreInfo.name.getter();
  *(void *)(inited + 16_Block_object_dispose(&STACK[0x3D0], 8) = &type metadata for String;
  *(void *)(inited + 144) = v17;
  *(void *)(inited + 152) = v18;
  AnyHashable.init<A>(_:)();
  DockCoreInfo.type.getter();
  uint64_t v19 = DockCoreAccessoryType.description.getter();
  *(void *)(inited + 240) = &type metadata for String;
  *(void *)(inited + 216) = v19;
  *(void *)(inited + 224) = v20;
  sub_1001EA498(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v14 setUserInfo:isa];

  id v22 = [self newHandleWithDefinition:*(v7 - 3) configurationContext:*(v7 - 2)];
  swift_beginAccess();
  id v23 = *v7;
  id *v7 = v22;

  *(v7 - 1) = [objc_allocWithZone((Class)SBSRemoteAlertActivationContext) init];
  if (*v7) {
    [*v7 registerObserver:a3];
  }
  swift_beginAccess();
  id v24 = *v7;
  if (*v7)
  {
    swift_endAccess();
    [v24 activateWithContext:*(void *)(a4 + 32)];

    uint64_t v25 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a1, v25);
  }
  else
  {
    uint64_t v26 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(a1, v26);
    swift_endAccess();
  }
  return a4;
}

id sub_1000E7D40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, char a8, char a9, void *a10, void *a11, uint64_t a12, unint64_t a13, char a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v24) = a14;
  LOBYTE(v23) = a9;
  id v28 = [a19 initWithPeripheral:a1 name:v25 pairingUsername:v19 statusFlags:a6 stateNumber:a7 enhancedEncryption:a8 & 1 connectReason:v23 configNumber:a10 category:a11 setupHash:isa connectionIdleTime:v24 browser:a15 keyStore:a16 whbStableIdentifier:v21];

  sub_1000A6240(a12, a13);
  return v28;
}

BOOL sub_1000E7ED4()
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1002B1628;
  uint64_t v1 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v2 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  id v5 = v3;
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);

  swift_release();
  if (v3) {
    return 1;
  }
  if (qword_1002A7C20 != -1) {
    swift_once();
  }
  return (*(unsigned char *)(qword_1002B17A0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_mode) & 0xFE) == 2;
}

char *sub_1000E7FF8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AccessoryManager();
  *(void *)&a4[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_proxCard] = 0;
  v25[3] = v12;
  v25[4] = &off_1002762A8;
  a4[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_requiresSWAuth] = 1;
  v25[0] = a3;
  uint64_t v13 = OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_primaryToken;
  *(void *)&a4[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_primaryToken] = 0;
  uint64_t v14 = (uint64_t)&a4[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_delegate];
  *(_OWORD *)uint64_t v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(void *)(v14 + 32) = 0;
  *(void *)&a4[v13] = a1;
  uint64_t v15 = a4;
  swift_retain();
  swift_release();
  sub_1000A5D40((uint64_t)v25, (uint64_t)v24);
  swift_beginAccess();
  sub_1000B9C4C((uint64_t)v24, v14, (uint64_t *)&unk_1002A9E30);
  swift_endAccess();
  type metadata accessor for Transaction();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0;
  *(void *)(v16 + 24) = 0;
  *(void *)(v16 + 32) = 0;
  *(void *)(v16 + 16) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v16 + 80) = 0;
  *(unsigned char *)(v16 + 8_Block_object_dispose(&STACK[0x3D0], 8) = 1;
  Logger.init(subsystem:category:)();
  *(void *)(v16 + 64) = 0xD000000000000022;
  *(void *)(v16 + 72) = 0x8000000100236560;
  *(void *)(v16 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0;
  *(void *)(v16 + 56) = 0x402E000000000000;
  swift_unknownObjectWeakAssign();
  *(void *)&v15[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_discoveryTxn] = v16;

  uint64_t v17 = (objc_class *)type metadata accessor for DKProxManager();
  v23.receiver = v15;
  v23.super_class = v17;
  id v18 = [super init];
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id, v8);
  type metadata accessor for PairingUIServiceAlert();
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = (char *)v18;
  *(void *)&v20[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_proxCard] = sub_1000E79D4((uint64_t)v11, a2, v20, v19);
  swift_release();
  *(void *)(*(void *)&v20[OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_discoveryTxn] + 4_Block_object_dispose(&STACK[0x3D0], 8) = &off_1002774B8;
  swift_unknownObjectWeakAssign();
  swift_retain();
  sub_100105BB4();
  swift_release();

  sub_100099BCC((uint64_t)v25);
  return v20;
}

unint64_t sub_1000E8330(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    if ((unint64_t)*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      return v21;
    }
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_14;
  }
LABEL_3:
  unint64_t v5 = 0;
  unint64_t v48 = v3 & 0xC000000000000001;
  uint64_t v50 = a2 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload;
  uint64_t v47 = v3;
  while (1)
  {
    unint64_t v6 = v5;
    if (v48)
    {
      a2 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      a2 = *(void *)(v3 + 8 * v5 + 32);
      swift_retain();
    }
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    unint64_t v8 = *(void *)(a2 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    sub_1000A618C(v7, v8);
    uint64_t v9 = sub_10013E71C(v7, v8);
    uint64_t v11 = v10;
    sub_1000A6240(v7, v8);
    uint64_t v13 = *(void *)(v50 + 32);
    unint64_t v12 = *(void *)(v50 + 40);
    sub_1000A618C(v13, v12);
    uint64_t v14 = sub_10013E71C(v13, v12);
    uint64_t v16 = v15;
    sub_1000A6240(v13, v12);
    if (v9 == v14 && v11 == v16) {
      break;
    }
    uint64_t v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_17;
    }
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_22;
    }
    unint64_t v5 = v6 + 1;
    uint64_t v3 = v47;
    if (v6 + 1 == v4) {
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_17:
  unint64_t v18 = v6;
  swift_bridgeObjectRelease();
  unint64_t v19 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else if (!((unint64_t)*a1 >> 62))
  {
    if (v19 == *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      return v18;
    }
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19 == v22) {
    return v18;
  }
LABEL_27:
  for (unint64_t i = v6 + 5; ; ++i)
  {
    unint64_t result = i - 4;
    uint64_t v24 = *a1;
    unint64_t v49 = i - 4;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      unint64_t v45 = v18;
      uint64_t v46 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_33;
    }
    if ((result & 0x8000000000000000) != 0) {
      break;
    }
    if (result >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_71;
    }
    unint64_t v45 = v18;
    uint64_t v46 = *(void *)(v24 + 8 * i);
    swift_retain();
LABEL_33:
    uint64_t v25 = *(void *)(v46 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
    unint64_t v26 = *(void *)(v46 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
    sub_1000A618C(v25, v26);
    uint64_t v27 = sub_10013E71C(v25, v26);
    uint64_t v29 = v28;
    sub_1000A6240(v25, v26);
    uint64_t v30 = *(void *)(v50 + 32);
    unint64_t v31 = *(void *)(v50 + 40);
    sub_1000A618C(v30, v31);
    uint64_t v32 = sub_10013E71C(v30, v31);
    uint64_t v34 = v33;
    sub_1000A6240(v30, v31);
    if (v27 == v32 && v29 == v34)
    {
      swift_release();
      unint64_t result = swift_bridgeObjectRelease_n();
LABEL_61:
      unint64_t v18 = v45;
      unint64_t v37 = i - 4;
      goto LABEL_62;
    }
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t result = swift_bridgeObjectRelease();
    if (v36) {
      goto LABEL_61;
    }
    unint64_t v37 = i - 4;
    if (v49 != v45)
    {
      uint64_t v38 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        unint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v39 = result;
        uint64_t v38 = *a1;
        if ((*a1 & 0xC000000000000001) == 0) {
          goto LABEL_43;
        }
      }
      else
      {
        if ((v45 & 0x8000000000000000) != 0) {
          goto LABEL_74;
        }
        if (v45 >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_75;
        }
        unint64_t v39 = *(void *)(v38 + 8 * v45 + 32);
        unint64_t result = swift_retain();
        if ((v38 & 0xC000000000000001) == 0)
        {
LABEL_43:
          if ((v49 & 0x8000000000000000) != 0) {
            goto LABEL_76;
          }
          if (v49 >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_77;
          }
          uint64_t v40 = *(void *)(v38 + 8 * i);
          swift_retain();
          goto LABEL_46;
        }
      }
      uint64_t v40 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v38 = *a1;
LABEL_46:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v38;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v38 < 0 || (v38 & 0x4000000000000000) != 0)
      {
        uint64_t v38 = sub_1001137FC(v38);
        *a1 = v38;
      }
      *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 8 * v45 + 0x20) = v40;
      swift_release();
      specialized Array._endMutation()();
      unint64_t v42 = *a1;
      unint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v42;
      if (!result || (v42 & 0x8000000000000000) != 0 || (v42 & 0x4000000000000000) != 0)
      {
        unint64_t result = sub_1001137FC(v42);
        unint64_t v42 = result;
        *a1 = result;
      }
      if ((v49 & 0x8000000000000000) != 0) {
        goto LABEL_78;
      }
      if (v49 >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_79;
      }
      *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v39;
      swift_release();
      unint64_t result = specialized Array._endMutation()();
    }
    unint64_t v18 = v45 + 1;
    if (__OFADD__(v45, 1)) {
      goto LABEL_73;
    }
LABEL_62:
    unint64_t v43 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      goto LABEL_72;
    }
    if ((unint64_t)*a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v44 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v43 == v44) {
      return v18;
    }
  }
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

id sub_1000E88DC()
{
  return sub_1000E5060(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000E88E4()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_1000E8928()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000E8968()
{
}

uint64_t sub_1000E8970(uint64_t *a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v3 = __chkstk_darwin(v33);
  unint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 16);
  unint64_t v31 = a1;
  uint64_t v32 = v10;
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void (**)(char *, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  unint64_t v12 = 0;
  uint64_t v13 = 56;
  uint64_t v14 = v33;
  while (1)
  {
    id v15 = *(id *)(*sub_1000A5DA4((void *)(v9 + v13 - 24), *(void *)(v9 + v13)) + 24);
    DockCoreInfo.identifier.getter();

    DockCoreInfo.identifier.getter();
    LOBYTE(v15) = static UUID.== infix(_:_:)();
    uint64_t v16 = *v11;
    (*v11)(v5, v14);
    v16(v8, v14);
    if (v15) {
      break;
    }
    ++v12;
    v13 += 40;
    if (v32 == v12)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v12, 1))
  {
    unint64_t v18 = *(void *)(v9 + 16);
    if (v12 + 1 == v18) {
      return v12;
    }
    uint64_t v19 = v13 + 16;
    for (unint64_t i = v12 + 1; i < v18; ++i)
    {
      sub_1000A5D40(v9 + v19, (uint64_t)&v35);
      id v21 = *(id *)(*sub_1000A5DA4(&v35, v36) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v21) = static UUID.== infix(_:_:)();
      uint64_t v22 = v33;
      v16(v5, v33);
      v16(v8, v22);
      uint64_t result = sub_100099BCC((uint64_t)&v35);
      if ((v21 & 1) == 0)
      {
        if (i != v12)
        {
          if ((v12 & 0x8000000000000000) != 0) {
            goto LABEL_29;
          }
          uint64_t v23 = *v31;
          unint64_t v24 = *(void *)(*v31 + 16);
          if (v12 >= v24) {
            goto LABEL_30;
          }
          uint64_t result = sub_1000A5D40(v23 + 40 * v12 + 32, (uint64_t)&v35);
          if (i >= v24) {
            goto LABEL_31;
          }
          sub_1000A5D40(v23 + v19, (uint64_t)v34);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *unint64_t v31 = v23;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_100113800(v23);
            uint64_t v23 = result;
            *unint64_t v31 = result;
          }
          if (v12 >= *(void *)(v23 + 16)) {
            goto LABEL_32;
          }
          uint64_t v25 = v23 + 40 * v12 + 32;
          sub_100099BCC(v25);
          uint64_t result = sub_1000A6298(v34, v25);
          uint64_t v26 = *v31;
          if (i >= *(void *)(*v31 + 16)) {
            goto LABEL_33;
          }
          uint64_t v27 = v26 + v19;
          sub_100099BCC(v26 + v19);
          uint64_t result = sub_1000A6298(&v35, v27);
        }
        if (__OFADD__(v12++, 1)) {
          goto LABEL_28;
        }
      }
      unint64_t v29 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_27;
      }
      uint64_t v9 = *v31;
      unint64_t v18 = *(void *)(*v31 + 16);
      v19 += 40;
      if (v29 == v18) {
        return v12;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E8CFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v3 = __chkstk_darwin(v35);
  unint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(*a1 + 16);
  uint64_t v33 = a1;
  uint64_t v34 = v10;
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (void (**)(char *, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  unint64_t v12 = 0;
  uint64_t v13 = 56;
  uint64_t v14 = v35;
  while (1)
  {
    id v15 = *(id *)(*sub_1000A5DA4((void *)(v9 + v13 - 24), *(void *)(v9 + v13)) + 24);
    DockCoreInfo.identifier.getter();

    id v16 = *(id *)(v39 + 24);
    DockCoreInfo.identifier.getter();

    LOBYTE(v16) = static UUID.== infix(_:_:)();
    uint64_t v17 = *v11;
    (*v11)(v5, v14);
    v17(v8, v14);
    if (v16) {
      break;
    }
    ++v12;
    v13 += 40;
    if (v34 == v12)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v9 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v12, 1))
  {
    unint64_t v19 = *(void *)(v9 + 16);
    if (v12 + 1 == v19) {
      return v12;
    }
    uint64_t v20 = v13 + 16;
    for (unint64_t i = v12 + 1; i < v19; ++i)
    {
      sub_1000A5D40(v9 + v20, (uint64_t)&v37);
      id v22 = *(id *)(*sub_1000A5DA4(&v37, v38) + 24);
      DockCoreInfo.identifier.getter();

      id v23 = *(id *)(v39 + 24);
      DockCoreInfo.identifier.getter();

      LOBYTE(v23) = static UUID.== infix(_:_:)();
      uint64_t v24 = v35;
      v17(v5, v35);
      v17(v8, v24);
      uint64_t result = sub_100099BCC((uint64_t)&v37);
      if ((v23 & 1) == 0)
      {
        if (i != v12)
        {
          if ((v12 & 0x8000000000000000) != 0) {
            goto LABEL_29;
          }
          uint64_t v25 = *v33;
          unint64_t v26 = *(void *)(*v33 + 16);
          if (v12 >= v26) {
            goto LABEL_30;
          }
          uint64_t result = sub_1000A5D40(v25 + 40 * v12 + 32, (uint64_t)&v37);
          if (i >= v26) {
            goto LABEL_31;
          }
          sub_1000A5D40(v25 + v20, (uint64_t)v36);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v33 = v25;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_100113800(v25);
            uint64_t v25 = result;
            *uint64_t v33 = result;
          }
          if (v12 >= *(void *)(v25 + 16)) {
            goto LABEL_32;
          }
          uint64_t v27 = v25 + 40 * v12 + 32;
          sub_100099BCC(v27);
          uint64_t result = sub_1000A6298(v36, v27);
          uint64_t v28 = *v33;
          if (i >= *(void *)(*v33 + 16)) {
            goto LABEL_33;
          }
          uint64_t v29 = v28 + v20;
          sub_100099BCC(v28 + v20);
          uint64_t result = sub_1000A6298(&v37, v29);
        }
        if (__OFADD__(v12++, 1)) {
          goto LABEL_28;
        }
      }
      unint64_t v31 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_27;
      }
      uint64_t v9 = *v33;
      unint64_t v19 = *(void *)(*v33 + 16);
      v20 += 40;
      if (v31 == v19) {
        return v12;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1000E90A8(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v36 = type metadata accessor for UUID();
  unint64_t v6 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  unint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = &_swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      v29[1] = v3;
      unint64_t v10 = 0;
      uint64_t v34 = a1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v35 = a1 & 0xC000000000000001;
      unint64_t v31 = (void (**)(char *, uint64_t))(v6 + 8);
      long long v30 = xmmword_1002413B0;
      uint64_t v32 = v9;
      unint64_t v33 = a1;
      while (v35)
      {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unint64_t v12 = v11;
        unint64_t v13 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_22;
        }
        DockCoreInfo.identifier.getter();
        sub_1000992E8(&qword_1002A7F40);
        uint64_t v14 = swift_allocObject();
        *(_OWORD *)(v14 + 16) = v30;
        UUID.uuid.getter();
        *(unsigned char *)(v14 + 32) = v15;
        UUID.uuid.getter();
        *(unsigned char *)(v14 + 33) = v16;
        UUID.uuid.getter();
        *(unsigned char *)(v14 + 34) = v17;
        UUID.uuid.getter();
        *(unsigned char *)(v14 + 35) = v18;
        UUID.uuid.getter();
        *(unsigned char *)(v14 + 36) = v19;
        UUID.uuid.getter();
        *(unsigned char *)(v14 + 37) = v20;
        uint64_t v21 = sub_1000992E8((uint64_t *)&unk_1002AAA80);
        uint64_t v40[3] = v21;
        v40[4] = sub_1000EAA74((unint64_t *)&qword_1002A8FE0, (uint64_t *)&unk_1002AAA80);
        v40[0] = v14;
        id v22 = sub_1000A5DA4(v40, v21);
        uint64_t v23 = *v22;
        size_t v24 = *(void *)(*v22 + 16);
        if (v24)
        {
          if (v24 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            unsigned __int8 v38 = v24;
            memcpy(__dst, (const void *)(v23 + 32), v24);
            uint64_t v3 = *(void ***)__dst;
            unint64_t v6 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v38 << 48);
            swift_bridgeObjectRetain();
          }
          else
          {
            type metadata accessor for __DataStorage();
            swift_allocObject();
            swift_bridgeObjectRetain();
            uint64_t v25 = __DataStorage.init(bytes:length:)();
            uint64_t v26 = v25;
            if (v24 >= 0x7FFFFFFF)
            {
              type metadata accessor for Data.RangeReference();
              uint64_t v3 = (void **)swift_allocObject();
              v3[2] = 0;
              v3[3] = (void *)v24;
              unint64_t v6 = v26 | 0x8000000000000000;
            }
            else
            {
              uint64_t v3 = (void **)(v24 << 32);
              unint64_t v6 = v25 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v3 = 0;
          unint64_t v6 = 0xC000000000000000;
        }
        sub_100099BCC((uint64_t)v40);
        swift_bridgeObjectRelease();
        (*v31)(v8, v36);
        BOOL v27 = sub_1001B78F0((uint64_t)v3, v6, *(void *)a2, *(void *)(a2 + 8), *(_DWORD *)(a2 + 16));
        sub_1000A6240((uint64_t)v3, v6);
        if (v27)
        {
          uint64_t v3 = (void **)&v39;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v6 = v39[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        a1 = v33;
        ++v10;
        if (v13 == v32) {
          return v39;
        }
      }
      if (v10 < *(void *)(v34 + 16)) {
        break;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      if (!v9) {
        return &_swiftEmptyArrayStorage;
      }
    }
    id v11 = *(id *)(a1 + 8 * v10 + 32);
    goto LABEL_9;
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000E94A4(uint64_t a1)
{
  return a1;
}

void sub_1000E94DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_1000A6240(a5, a6);
  }
}

uint64_t sub_1000E952C()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + _Block_object_dispose(&STACK[0x3D0], 8) = sub_1000A69C4;
  *(_OWORD *)(v2 + 16) = v3;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000E2BEC, 0, 0);
}

uint64_t sub_1000E95D8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E9618()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000A5ED8;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  void *v2 = v1;
  v2[1] = sub_1000A5ED8;
  return sub_1001A869C();
}

uint64_t sub_1000E96EC(char a1)
{
  return sub_1000E2D48(a1, *(char **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000E96F8()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000E9740(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  void *v8 = v2;
  v8[1] = sub_1000A69C4;
  return sub_1000E3198(a1, v4, v5, v7, v6);
}

void sub_1000E9800()
{
  sub_1000E3024(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000E9808(uint64_t a1)
{
  return sub_1000E1A00(a1, *(void **)(v1 + 16)) & 1;
}

unint64_t sub_1000E9828()
{
  unint64_t result = qword_1002A8F68;
  if (!qword_1002A8F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8F68);
  }
  return result;
}

uint64_t sub_1000E987C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000E98CC()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E9904()
{
  return sub_1000D60B8(0, 0, 0);
}

uint64_t *sub_1000E9934(uint64_t *a1)
{
  return a1;
}

void sub_1000E996C(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if (a4 != 2)
  {
    sub_1000A6240(a2, a3);
    sub_1000A6240(a5, a6);
  }
}

uint64_t sub_1000E99C4(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
  }
  a2 += OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0) {
      specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      swift_retain();
    }
    char v6 = static UUID.== infix(_:_:)();
    swift_release();
    if (v6) {
      return v5;
    }
    uint64_t v7 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v7 == v4) {
      return 0;
    }
  }
}

unint64_t sub_1000E9AE4(uint64_t *a1, uint64_t a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000E99C4(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v8)
    {
      unint64_t v18 = *a1;
      if (v18 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        return *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      uint64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_54;
      }
      if ((unint64_t)*a1 >> 62)
      {
LABEL_55:
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v9 != v20) {
          goto LABEL_6;
        }
      }
      else if (v9 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_6:
        a2 += OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
        for (unint64_t i = v6 + 5; ; ++i)
        {
          unint64_t v11 = i - 4;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
            if (v11 >= *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_45;
            }
            swift_retain();
          }
          uint64_t v9 = static UUID.== infix(_:_:)();
          swift_release();
          if ((v9 & 1) == 0) {
            break;
          }
LABEL_32:
          uint64_t v9 = i - 3;
          if (__OFADD__(v11, 1)) {
            goto LABEL_46;
          }
          if ((unint64_t)*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v17 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if (v9 == v17) {
            return v6;
          }
        }
        if (v11 == v6)
        {
LABEL_31:
          if (__OFADD__(v6++, 1)) {
            goto LABEL_47;
          }
          goto LABEL_32;
        }
        uint64_t v9 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v9 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_17:
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_50;
            }
            if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_51;
            }
            uint64_t v13 = *(void *)(v9 + 8 * i);
            swift_retain();
            goto LABEL_20;
          }
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_48;
          }
          if (v6 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_49;
          }
          uint64_t v12 = *(void *)(v9 + 8 * v6 + 32);
          swift_retain();
          if ((v9 & 0xC000000000000001) == 0) {
            goto LABEL_17;
          }
        }
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v9 = *a1;
LABEL_20:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
        {
          uint64_t v9 = sub_1001137FC(v9);
          *a1 = v9;
        }
        *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v13;
        swift_release();
        specialized Array._endMutation()();
        uint64_t v9 = *a1;
        int v15 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!v15 || v9 < 0 || (v9 & 0x4000000000000000) != 0)
        {
          uint64_t v9 = sub_1001137FC(v9);
          *a1 = v9;
        }
        if ((v11 & 0x8000000000000000) != 0) {
          goto LABEL_52;
        }
        if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_53;
        }
        *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * i) = v12;
        swift_release();
        specialized Array._endMutation()();
        goto LABEL_31;
      }
    }
  }
  return v6;
}

uint64_t sub_1000E9E28()
{
  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1000E9E68(uint64_t a1, uint64_t a2)
{
  char v6 = *(unsigned char *)(v2 + 32);
  uint64_t v7 = swift_task_alloc();
  long long v8 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v7;
  *(void *)uint64_t v7 = v3;
  *(void *)(v7 + _Block_object_dispose(&STACK[0x3D0], 8) = sub_1000A69C4;
  *(unsigned char *)(v7 + 4_Block_object_dispose(&STACK[0x3D0], 8) = v6;
  *(_OWORD *)(v7 + 32) = v8;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000DA340, 0, 0);
}

void sub_1000E9F30()
{
  sub_1000E34B8(*(void *)(v0 + 24), 1);
}

void sub_1000E9F5C()
{
  sub_1000E1B90(*(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1000E9F88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BTDiscoveredDevice();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E9FEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BTDiscoveredDevice();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000EA048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_1000A618C(a5, a6);
  }
}

void *sub_1000EA094(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  a2(a1[1], a1[2]);
  a2(v4, v5);
  return a1;
}

uint64_t sub_1000EA0E8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000EA124(uint64_t a1)
{
  return sub_1000EA1F0(a1, (uint64_t (*)(uint64_t, void, void, void, void *, void, void, void))sub_1000D9630);
}

void sub_1000EA140(char a1)
{
  sub_1000D88BC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), (_OWORD *)(v1 + 40), *(void **)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104));
}

uint64_t sub_1000EA15C()
{
  return sub_1000D8C8C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000EA168()
{
  swift_release();

  swift_bridgeObjectRelease();
  sub_1000A6240(*(void *)(v0 + 72), *(void *)(v0 + 80));

  if (*(void *)(v0 + 96)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1000EA1D8(uint64_t a1)
{
  return sub_1000EA1F0(a1, (uint64_t (*)(uint64_t, void, void, void, void *, void, void, void))sub_1000D9184);
}

uint64_t sub_1000EA1F0(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void *, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2 + 5, v2[11], v2[12], v2[13]);
}

uint64_t sub_1000EA210(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  sub_1000A618C(v2, v3);
  return a1;
}

uint64_t sub_1000EA258()
{
  return sub_1000D9CF4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000EA260()
{
  swift_release();

  swift_bridgeObjectRelease();
  sub_1000A6240(*(void *)(v0 + 64), *(void *)(v0 + 72));

  if (*(void *)(v0 + 88)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 104, 7);
}

void sub_1000EA2C8()
{
  sub_1000D9EF4(*(void *)(v0 + 16), *(void **)(v0 + 24), v0 + 32, *(void **)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96));
}

uint64_t sub_1000EA2DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000992E8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000EA340()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000EA390()
{
  sub_1000D6030(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1000EA3A0()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000EA3E0()
{
  sub_1000D5FB4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000EA3EC()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000EA43C()
{
  return sub_1000D60B8(*(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

void sub_1000EA46C()
{
  sub_1000D4460(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000EA47C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000EA4C4(uint64_t a1)
{
  sub_1000D4360(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000EA4D4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000EA514()
{
  sub_1000D3698(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1000EA51C(NSObject *a1, uint64_t a2)
{
  sub_1001DB5DC(a1, a2, *(void *)(v2 + 16), *(char **)(v2 + 24));
}

uint64_t sub_1000EA528()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000EA568()
{
  sub_1000D1FBC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000EA570(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002A7F70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EA5D8(const char *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, a1, v9, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1000EA738(uint64_t a1, unint64_t a2, const char *a3)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v3 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_logger, v7);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v11, v12))
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  char v16 = a3;
  uint64_t v13 = (uint8_t *)swift_slowAlloc();
  uint64_t result = swift_slowAlloc();
  uint64_t v18 = result;
  *(_DWORD *)uint64_t v13 = 136315138;
  if (a2)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_1000993AC(a1, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, v16, v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  __break(1u);
  return result;
}

void *sub_1000EA960(void *result, uint64_t a2, char a3)
{
  if (!result)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v4 = v3;
  uint64_t v7 = result;
  uint64_t v8 = swift_dynamicCastObjCProtocolUnconditional();
  objc_allocWithZone((Class)type metadata accessor for DKPairSetupSession());
  id v9 = v7;
  id v10 = sub_1000B8110(0, a2, a3 & 1, v8);

  uint64_t v11 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup;
  os_log_type_t v12 = *(void **)(v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup);
  *(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_pairingSetup) = v10;

  uint64_t result = *(void **)(v4 + v11);
  if (!result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_1000EAA2C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EAA74(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100099D14(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000EAB38()
{
  return sub_1000E88E4() & 1;
}

uint64_t sub_1000EAB90()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[OBJC_IVAR____TtC14dockaccessoryd6BTLink_shouldScan] = 0;
  id v9 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd6BTLink_queue];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v0;
  aBlock[4] = sub_1000EAF40;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100276B48;
  uint64_t v11 = _Block_copy(aBlock);
  id v12 = v9;
  uint64_t v13 = v0;
  static DispatchQoS.unspecified.getter();
  v15[1] = &_swiftEmptyArrayStorage;
  sub_1000EAF7C();
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_1000EAE18()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan))
  {
    swift_retain();
    sub_1000F41F4();
    swift_release();
  }
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match);
  uint64_t v2 = *(void (**)(void))(v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_match);
  if (v2)
  {
    swift_retain();
    v2(0);
    sub_1000BF118((uint64_t)v2);
    uint64_t v3 = *v1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  *uint64_t v1 = 0;
  v1[1] = 0;
  sub_1000BF118(v3);
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = v0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_filter;
  swift_beginAccess();
  sub_1000EAFD4((uint64_t)v6, v4);
  return swift_endAccess();
}

uint64_t sub_1000EAF08()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000EAF40()
{
  return sub_1000EAE18();
}

uint64_t sub_1000EAF64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000EAF74()
{
  return swift_release();
}

unint64_t sub_1000EAF7C()
{
  unint64_t result = qword_1002A8570;
  if (!qword_1002A8570)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A8570);
  }
  return result;
}

uint64_t sub_1000EAFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8((uint64_t *)&unk_1002AA6D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EB03C()
{
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  void *v2 = v1;
  v2[1] = sub_1000EB0CC;
  return sub_1000EB4A0();
}

uint64_t sub_1000EB0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  void v4[4] = a1;
  void v4[5] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[1];
    __asm { BRAA            X2, X16 }
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000EB204, 0, 0);
}

uint64_t sub_1000EB204()
{
  sub_100139704(v0[4], v0[5]);
  Swift::String v1 = String.uppercased()();
  swift_bridgeObjectRelease();
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_keystore);
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v4 = (const void *)Strong;
  if (Strong)
  {
    uint64_t v5 = *(void **)(Strong + 32);
    id v6 = v5;
    id v7 = v2;
    uint64_t result = swift_release();
    if (!v5)
    {
LABEL_32:
      __break(1u);
      return result;
    }
    id v9 = [v6 identifier];

    if (v9)
    {
      uint64_t v4 = (const void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      goto LABEL_10;
    }
    uint64_t v4 = 0;
  }
  else
  {
    id v12 = v2;
  }
  uint64_t v11 = (const void *)0xE000000000000000;
LABEL_10:
  unint64_t v13 = sub_100177250(v4, v11, 1);
  unint64_t v14 = v13;
  if (!(v13 >> 62))
  {
    uint64_t result = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_12;
    }
LABEL_25:
    uint64_t v25 = v0[4];
    unint64_t v24 = v0[5];
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v20 = v25;
    unint64_t v21 = v24;
    goto LABEL_26;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_25;
  }
LABEL_12:
  if ((v14 & 0xC000000000000001) != 0)
  {
    uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_15;
  }
  if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v15 = *(void *)(v14 + 32);
  swift_retain();
LABEL_15:
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v15 + 136);
  char v16 = *(void **)(v15 + 144);
  swift_bridgeObjectRetain();
  swift_release();

  swift_bridgeObjectRelease();
  if (v16)
  {
    if (v1._countAndFlagsBits == v17 && v16 == v1._object) {
      char v19 = 1;
    }
    else {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v23 = v0[4];
    unint64_t v22 = v0[5];
    swift_bridgeObjectRetain_n();
    sub_1000A6240(v23, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    goto LABEL_27;
  }
  uint64_t v20 = v0[4];
  unint64_t v21 = v0[5];
LABEL_26:
  sub_1000A6240(v20, v21);
  char v19 = 0;
LABEL_27:
  uint64_t v26 = (uint64_t (*)(void, uint64_t, void *))v0[1];
  return v26(v19 & 1, v1._countAndFlagsBits, v1._object);
}

uint64_t sub_1000EB4A0()
{
  v1[4] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[5] = v2;
  v1[6] = *(void *)(v2 - 8);
  v1[7] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000EB560, 0, 0);
}

uint64_t sub_1000EB560()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void **)(Strong + 32);
  v0[8] = v2;
  id v3 = v2;
  swift_release();
  if (!v2) {
    goto LABEL_16;
  }
  self;
  uint64_t v4 = (void *)swift_dynamicCastObjCClass();
  if (!v4)
  {

LABEL_16:
    uint64_t v27 = type metadata accessor for Errors();
    sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    *uint64_t v28 = 0;
    v28[1] = 0xE000000000000000;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v27 - 8) + 104))(v28, enum case for Errors.AccessoryServerNil(_:), v27);
    swift_willThrow();
    goto LABEL_17;
  }
  uint64_t v5 = v4;
  id v6 = [v4 primaryAccessory];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = self;
    sub_1000992E8((uint64_t *)&unk_1002A9F50);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_100240BE0;
    *(void *)(v9 + 56) = &type metadata for UInt32;
    *(void *)(v9 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v9 + 32) = 262;
    String.init(format:_:)();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v11 = [v8 UUIDWithString:v10];

    NSString v12 = [v11 UUIDString];
    if (!v12)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_100240BE0;
    *(void *)(v13 + 56) = &type metadata for UInt32;
    *(void *)(v13 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v13 + 32) = 256;
    String.init(format:_:)();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v15 = [v8 UUIDWithString:v14];

    NSString v16 = [v15 UUIDString];
    if (!v16)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    id v17 = [v7 characteristicOfType:v12 serviceType:v16];
    v0[9] = v17;

    if (v17)
    {
      (*(void (**)(void, uint64_t, void))(v0[6] + 16))(v0[7], v0[4] + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger, v0[5]);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Reading Accessory Description hash...", v20, 2u);
        swift_slowDealloc();
      }
      uint64_t v22 = v0[6];
      uint64_t v21 = v0[7];
      uint64_t v24 = v0[4];
      uint64_t v23 = v0[5];

      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
      uint64_t v25 = (void *)swift_task_alloc();
      v0[10] = v25;
      v25[2] = v5;
      v25[3] = v17;
      v25[4] = v24;
      uint64_t v26 = (void *)swift_task_alloc();
      v0[11] = v26;
      void *v26 = v0;
      v26[1] = sub_1000EBB38;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000001ELL, 0x80000001002367F0, sub_1000F0384, v25, &type metadata for Data);
    }
  }
  uint64_t v30 = type metadata accessor for Errors();
  sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
  swift_allocError();
  *unint64_t v31 = 0xD000000000000033;
  v31[1] = 0x80000001002367B0;
  (*(void (**)(void *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v31, enum case for Errors.NotFound(_:), v30);
  swift_willThrow();

LABEL_17:
  swift_task_dealloc();
  uint64_t v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t sub_1000EBB38()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1000EBCDC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_1000EBC54;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_1000EBC54()
{
  uint64_t v1 = *(void **)(v0 + 64);

  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v4(v2, v3);
}

uint64_t sub_1000EBCDC()
{
  uint64_t v1 = *(void **)(v0 + 64);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1000EBD58(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v19 = a2;
  uint64_t v7 = sub_1000992E8(&qword_1002A91A0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  sub_1000992E8(&qword_1002A8340);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100240BF0;
  *(void *)(v10 + 32) = a3;
  aBlock[0] = v10;
  specialized Array._endMutation()();
  sub_1000F0390();
  id v11 = a3;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void **)(a4 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v14 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v15 + v14, (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  aBlock[4] = sub_1000F0468;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001A6714;
  void aBlock[3] = &unk_100276BC0;
  NSString v16 = _Block_copy(aBlock);
  id v17 = v13;
  swift_release();
  [v19 readCharacteristicValues:isa timeout:v17 completionQueue:v16 completionHandler:10.0];
  _Block_release(v16);
}

uint64_t sub_1000EBF94(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    *(void *)&long long v13 = a2;
    swift_errorRetain();
  }
  else
  {
    if (result)
    {
      if ((result & 0xC000000000000001) != 0)
      {
        id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        id v2 = *(id *)(result + 32);
      }
      uint64_t v3 = v2;
      id v4 = [v2 value];

      if (v4)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v12, 0, sizeof(v12));
      }
      sub_1000A5BE8((uint64_t)v12, (uint64_t)&v13);
      if (v14)
      {
        if (swift_dynamicCast())
        {
          long long v13 = v11;
          sub_1000992E8(&qword_1002A91A0);
          return CheckedContinuation.resume(returning:)();
        }
      }
      else
      {
        sub_1000A61E4((uint64_t)&v13, &qword_1002AA5F0);
      }
      uint64_t v5 = type metadata accessor for Errors();
      sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      uint64_t v7 = swift_allocError();
      uint64_t v8 = v6;
      unint64_t v9 = 0xD00000000000002CLL;
      uint64_t v10 = "Accessory Description hash not found in read";
    }
    else
    {
      uint64_t v5 = type metadata accessor for Errors();
      sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      uint64_t v7 = swift_allocError();
      uint64_t v8 = v6;
      unint64_t v9 = 0xD000000000000048;
      uint64_t v10 = "Error reading Accessory Description characteristic: no results returned!";
    }
    *uint64_t v6 = v9;
    v6[1] = (unint64_t)(v10 - 32) | 0x8000000000000000;
    (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v5 - 8) + 104))(v8, enum case for Errors.CharacteristicReadWriteFailure(_:), v5);
    *(void *)&long long v13 = v7;
  }
  sub_1000992E8(&qword_1002A91A0);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_1000EC204()
{
  v1[22] = v0;
  uint64_t v2 = type metadata accessor for SHA512();
  v1[23] = v2;
  v1[24] = *(void *)(v2 - 8);
  v1[25] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SHA512Digest();
  v1[26] = v3;
  v1[27] = *(void *)(v3 - 8);
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v1[30] = v4;
  v1[31] = *(void *)(v4 - 8);
  v1[32] = swift_task_alloc();
  v1[33] = swift_task_alloc();
  v1[34] = swift_task_alloc();
  v1[35] = swift_task_alloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v1[36] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000EC414;
  return sub_1000EB4A0();
}

uint64_t sub_1000EC414(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[37] = a1;
  v4[38] = a2;
  swift_task_dealloc();
  if (v2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = v4[1];
    __asm { BRAA            X1, X16 }
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000EC5F4, 0, 0);
}

uint64_t sub_1000EC5F4()
{
  uint64_t v29 = v0;
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  sub_100139704(*(void *)(v0 + 296), *(void *)(v0 + 304));
  Swift::String v5 = String.uppercased()();
  swift_bridgeObjectRelease();
  *(Swift::String *)(v0 + 312) = v5;
  uint64_t v6 = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger;
  *(void *)(v0 + 32_Block_object_dispose(&STACK[0x3D0], 8) = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger;
  uint64_t v7 = v1 + v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 336) = v8;
  *(void *)(v0 + 344) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v2, v7, v3);
  swift_bridgeObjectRetain_n();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v24 = *(void *)(v0 + 248);
    uint64_t v25 = *(void *)(v0 + 240);
    uint64_t v26 = *(void *)(v0 + 280);
    uint64_t v27 = v7;
    long long v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)long long v11 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16_Block_object_dispose(&STACK[0x3D0], 8) = sub_1000993AC(v5._countAndFlagsBits, (unint64_t)v5._object, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "read Accessory Description hash 0x%s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v7 = v27;
    swift_slowDealloc();

    NSString v12 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v12(v26, v25);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v14 = *(void *)(v0 + 240);
    uint64_t v15 = *(void *)(v0 + 248);
    swift_bridgeObjectRelease_n();

    NSString v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }
  *(void *)(v0 + 352) = v12;
  v8(*(void *)(v0 + 272), v7, *(void *)(v0 + 240));
  NSString v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Initiating Accessory Description transfer...", v18, 2u);
    swift_slowDealloc();
  }
  uint64_t v19 = *(void *)(v0 + 272);
  uint64_t v20 = *(void *)(v0 + 240);
  uint64_t v21 = *(void *)(v0 + 248);

  *(void *)(v0 + 360) = (v21 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v19, v20);
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 36_Block_object_dispose(&STACK[0x3D0], 8) = v22;
  void *v22 = v0;
  v22[1] = sub_1000EC970;
  return sub_1000EEC04();
}

uint64_t sub_1000EC970(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[47] = a1;
  v4[48] = a2;
  v4[49] = v2;
  swift_task_dealloc();
  if (v2)
  {
    swift_bridgeObjectRelease();
    v4[52] = v2;
    Swift::String v5 = sub_1000EE6A8;
  }
  else
  {
    Swift::String v5 = sub_1000ECAC8;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v5, 0, 0);
}

uint64_t sub_1000ECAC8()
{
  uint64_t v97 = v0;
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v1 + 32);
  *(void *)(v0 + 400) = v2;
  if (v2)
  {
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 40_Block_object_dispose(&STACK[0x3D0], 8) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000ED874;
    return sub_1001D6604();
  }
  unint64_t v5 = *(void *)(v0 + 384);
  *(void *)(v1 + 32) = 0;
  unint64_t v6 = v5 >> 62;
  switch(v5 >> 62)
  {
    case 1uLL:
      unint64_t v94 = (void *)(v0 + 16);
      id v95 = (uint64_t *)(v0 + 144);
      uint64_t v12 = *(void *)(v0 + 376);
      if (v12 >> 32 < (int)v12) {
        goto LABEL_53;
      }
      unint64_t v14 = *(void *)(v0 + 384);
      uint64_t v13 = *(void *)(v0 + 392);
      sub_1000A618C(*(void *)(v0 + 376), v14);
      swift_retain();
      uint64_t v15 = sub_100161F9C((int)v12, v12 >> 32, v14 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100162354);
      uint64_t v17 = v16;
      uint64_t result = sub_1000A6240(v12, v14);
      if (v13) {
        return result;
      }
LABEL_11:
      uint64_t v25 = *(void *)(v0 + 376);
      unint64_t v26 = *(void *)(v0 + 384);
      if (v17) {
        goto LABEL_45;
      }
      *(void *)(v0 + 96) = v25;
      *(void *)(v0 + 104) = v26;
      sub_1000A618C(v25, v26);
      sub_1000992E8(&qword_1002A8320);
      if (swift_dynamicCast())
      {
        sub_1000A6298((long long *)(v0 + 56), (uint64_t)v94);
        sub_1000A5DA4(v94, *(void *)(v0 + 40));
        if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
        {
          uint64_t v28 = *(void *)(v0 + 376);
          unint64_t v27 = *(void *)(v0 + 384);
          sub_1000A5DA4(v94, *(void *)(v0 + 40));
          dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
          sub_1000A6240(v28, v27);
          uint64_t v15 = *(void *)(v0 + 128);
          uint64_t v17 = *(void *)(v0 + 136);
          sub_100099BCC((uint64_t)v94);
          goto LABEL_46;
        }
        sub_100099BCC((uint64_t)v94);
      }
      else
      {
        *(void *)(v0 + 8_Block_object_dispose(&STACK[0x3D0], 8) = 0;
        *(_OWORD *)(v0 + 56) = 0u;
        *(_OWORD *)(v0 + 72) = 0u;
        sub_1000A61E4(v0 + 56, &qword_1002A8328);
      }
      uint64_t v82 = *(void *)(v0 + 376);
      unint64_t v83 = *(void *)(v0 + 384);
      uint64_t v15 = sub_100161EE8(v82, v83);
      uint64_t v17 = v84;
      uint64_t v25 = v82;
      unint64_t v26 = v83;
LABEL_45:
      sub_1000A6240(v25, v26);
LABEL_46:
      sub_1000F02E0(&qword_1002A91A8, (void (*)(uint64_t))&type metadata accessor for SHA512);
      dispatch thunk of HashFunction.init()();
      if (v6 == 2)
      {
        uint64_t v85 = *(void *)(v0 + 376);
        uint64_t v86 = *(void *)(v85 + 16);
        uint64_t v87 = *(void *)(v85 + 24);
        sub_1000A618C(v85, *(void *)(v0 + 384));
        swift_retain();
        swift_retain();
        sub_1000F0200(v86, v87);
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v88 = *(void *)(v0 + 376);
        uint64_t v89 = (int)v88;
        uint64_t v90 = v88 >> 32;
        if (v88 >> 32 < (int)v88) {
          goto LABEL_56;
        }
        sub_1000A618C(v88, *(void *)(v0 + 384));
        sub_1000F0200(v89, v90);
      }
      *(void *)&long long v93 = v15;
      *((void *)&v93 + 1) = v17;
      sub_1000A6240(*(void *)(v0 + 376), *(void *)(v0 + 384));
LABEL_18:
      uint64_t v33 = *(void *)(v0 + 224);
      uint64_t v32 = *(void *)(v0 + 232);
      uint64_t v35 = *(void *)(v0 + 208);
      uint64_t v34 = *(void *)(v0 + 216);
      uint64_t v37 = *(void *)(v0 + 192);
      uint64_t v36 = *(void *)(v0 + 200);
      uint64_t v38 = *(void *)(v0 + 184);
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v33, v32, v35);
      sub_1000F02E0(&qword_1002A91B0, (void (*)(uint64_t))&type metadata accessor for SHA512Digest);
      dispatch thunk of Sequence.makeIterator()();
      uint64_t v39 = *(void *)(v0 + 112);
      unint64_t v40 = *(void *)(v0 + 120);
      uint64_t v41 = *(void *)(v39 + 16);
      if (v40 != v41)
      {
        if ((uint64_t)v40 < v41)
        {
          if ((v40 & 0x8000000000000000) != 0)
          {
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
          }
          unint64_t v42 = _swiftEmptyArrayStorage;
          while (v40 < *(void *)(v39 + 16))
          {
            char v55 = *(unsigned char *)(v39 + 32 + v40);
            sub_1000992E8((uint64_t *)&unk_1002A9F50);
            uint64_t v56 = swift_allocObject();
            *(_OWORD *)(v56 + 16) = xmmword_100240BE0;
            *(void *)(v56 + 56) = &type metadata for UInt8;
            *(void *)(v56 + 64) = &protocol witness table for UInt8;
            *(unsigned char *)(v56 + 32) = v55;
            uint64_t v57 = String.init(format:_:)();
            uint64_t v59 = v58;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v42 = sub_100102294(0, v42[2] + 1, 1, v42);
            }
            unint64_t v61 = v42[2];
            unint64_t v60 = v42[3];
            if (v61 >= v60 >> 1) {
              unint64_t v42 = sub_100102294((void *)(v60 > 1), v61 + 1, 1, v42);
            }
            ++v40;
            v42[2] = v61 + 1;
            uint64_t v62 = &v42[2 * v61];
            v62[4] = v57;
            void v62[5] = v59;
            if (v41 == v40) {
              goto LABEL_20;
            }
          }
          __break(1u);
LABEL_53:
          __break(1u);
        }
        __break(1u);
        goto LABEL_55;
      }
      unint64_t v42 = _swiftEmptyArrayStorage;
LABEL_20:
      unint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
      uint64_t v44 = *(void *)(v0 + 328);
      uint64_t v45 = *(void *)(v0 + 264);
      uint64_t v46 = *(void *)(v0 + 240);
      uint64_t v47 = *(void *)(v0 + 176);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 152) = v42;
      sub_1000992E8(&qword_1002A91B8);
      sub_1000F0328();
      BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      String.uppercased()();
      swift_bridgeObjectRelease();
      v43(v45, v47 + v44, v46);
      swift_bridgeObjectRetain();
      unint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      BOOL v50 = os_log_type_enabled(v48, v49);
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
      uint64_t v52 = *(void *)(v0 + 264);
      uint64_t v53 = *(void *)(v0 + 240);
      if (v50)
      {
        uint64_t v92 = *(void *)(v0 + 264);
        uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
        id v54 = (uint8_t *)swift_slowAlloc();
        v96[0] = swift_slowAlloc();
        *(_DWORD *)id v54 = 136315138;
        swift_bridgeObjectRetain();
        *id v95 = sub_1000993AC(v93, *((unint64_t *)&v93 + 1), v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Accessory Description is %s", v54, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v91(v92, v53);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        v51(v52, v53);
      }
      char v63 = sub_1000EEA9C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v63)
      {
        (*(void (**)(void, void, void))(v0 + 336))(*(void *)(v0 + 256), *(void *)(v0 + 176) + *(void *)(v0 + 328), *(void *)(v0 + 240));
        uint64_t v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v64, v65))
        {
          uint64_t v66 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v66 = 0;
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "Accessory Description hash match succeeded!!", v66, 2u);
          swift_slowDealloc();
        }
        id v67 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
        uint64_t v68 = *(void *)(v0 + 256);
        uint64_t v70 = *(void *)(v0 + 232);
        uint64_t v69 = *(void *)(v0 + 240);
        uint64_t v71 = *(void *)(v0 + 216);
        uint64_t v72 = *(void *)(v0 + 208);
        sub_1000A6240(*(void *)(v0 + 296), *(void *)(v0 + 304));

        v67(v68, v69);
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v73 = *(void *)(v0 + 8);
        __asm { BRAA            X3, X16 }
      }
      uint64_t v75 = *(void *)(v0 + 376);
      unint64_t v74 = *(void *)(v0 + 384);
      uint64_t v76 = *(void *)(v0 + 232);
      uint64_t v77 = *(void *)(v0 + 208);
      uint64_t v78 = *(void *)(v0 + 216);
      uint64_t v79 = type metadata accessor for Errors();
      sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      uint64_t v80 = swift_allocError();
      void *v81 = 0xD000000000000029;
      v81[1] = 0x8000000100236780;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v79 - 8) + 104))(v81, enum case for Errors.CommunicationFailure(_:), v79);
      swift_willThrow();
      sub_1000A6240(v75, v74);
      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v76, v77);
      *(void *)(v0 + 416) = v80;
      return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000EE6A8, 0, 0);
    case 2uLL:
      unint64_t v94 = (void *)(v0 + 16);
      id v95 = (uint64_t *)(v0 + 144);
      unint64_t v18 = *(void *)(v0 + 384);
      uint64_t v19 = *(void *)(v0 + 392);
      uint64_t v20 = *(void *)(v0 + 376);
      uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v22 = *(void *)(v20 + 16);
      uint64_t v23 = *(void *)(v20 + 24);
      sub_1000A618C(v20, v18);
      swift_retain();
      swift_retain();
      uint64_t v15 = sub_100161F9C(v22, v23, v21, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100162354);
      uint64_t v17 = v24;
      swift_release();
      uint64_t result = swift_release();
      if (!v19) {
        goto LABEL_11;
      }
      return result;
    case 3uLL:
      uint64_t v29 = *(void *)(v0 + 392);
      *(void *)(v0 + 482) = 0;
      *(void *)(v0 + 48_Block_object_dispose(&STACK[0x3D0], 8) = 0;
      uint64_t result = sub_100162354(v96);
      if (v29) {
        return result;
      }
      id v95 = (uint64_t *)(v0 + 144);
      uint64_t v31 = *(void *)(v0 + 376);
      unint64_t v30 = *(void *)(v0 + 384);
      sub_1000A6240(v31, v30);
      long long v93 = *(_OWORD *)v96;
      sub_1000F02E0(&qword_1002A91A8, (void (*)(uint64_t))&type metadata accessor for SHA512);
      dispatch thunk of HashFunction.init()();
      *(void *)(v0 + 474) = 0;
      *(void *)(v0 + 46_Block_object_dispose(&STACK[0x3D0], 8) = 0;
      dispatch thunk of HashFunction.update(bufferPointer:)();
      uint64_t v10 = v31;
      unint64_t v11 = v30;
LABEL_17:
      sub_1000A6240(v10, v11);
      goto LABEL_18;
    default:
      id v95 = (uint64_t *)(v0 + 144);
      uint64_t v8 = *(void *)(v0 + 376);
      unint64_t v7 = *(void *)(v0 + 384);
      *(void *)(v0 + 454) = v8;
      *(_WORD *)(v0 + 462) = v7;
      *(unsigned char *)(v0 + 464) = BYTE2(v7);
      *(unsigned char *)(v0 + 465) = BYTE3(v7);
      *(unsigned char *)(v0 + 466) = BYTE4(v7);
      *(unsigned char *)(v0 + 467) = BYTE5(v7);
      *(void *)&long long v93 = static String._fromUTF8Repairing(_:)();
      *((void *)&v93 + 1) = v9;
      sub_1000A6240(v8, v7);
      sub_1000F02E0(&qword_1002A91A8, (void (*)(uint64_t))&type metadata accessor for SHA512);
      dispatch thunk of HashFunction.init()();
      *(void *)(v0 + 440) = v8;
      *(_WORD *)(v0 + 44_Block_object_dispose(&STACK[0x3D0], 8) = v7;
      *(unsigned char *)(v0 + 450) = BYTE2(v7);
      *(unsigned char *)(v0 + 451) = BYTE3(v7);
      *(unsigned char *)(v0 + 452) = BYTE4(v7);
      *(unsigned char *)(v0 + 453) = BYTE5(v7);
      dispatch thunk of HashFunction.update(bufferPointer:)();
      uint64_t v10 = v8;
      unint64_t v11 = v7;
      goto LABEL_17;
  }
}

uint64_t sub_1000ED874()
{
  swift_task_dealloc();
  swift_release();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000ED9B8, 0, 0);
}

uint64_t sub_1000ED9B8()
{
  uint64_t v92 = v0;
  unint64_t v1 = *(void *)(v0 + 384);
  *(void *)(*(void *)(v0 + 176) + 32) = 0;
  swift_release();
  unint64_t v2 = v1 >> 62;
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v6 = *(void *)(v0 + 376);
      if (v6 >> 32 < (int)v6) {
        goto LABEL_49;
      }
      uint64_t v89 = (void *)(v0 + 16);
      uint64_t v90 = (uint64_t *)(v0 + 144);
      unint64_t v8 = *(void *)(v0 + 384);
      uint64_t v7 = *(void *)(v0 + 392);
      sub_1000A618C(v6, v8);
      swift_retain();
      uint64_t v9 = sub_100161F9C((int)v6, v6 >> 32, v8 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100162354);
      uint64_t v11 = v10;
      uint64_t result = sub_1000A6240(v6, v8);
      if (v7) {
        return result;
      }
LABEL_7:
      uint64_t v20 = *(void *)(v0 + 376);
      unint64_t v21 = *(void *)(v0 + 384);
      if (v11) {
        goto LABEL_41;
      }
      *(void *)(v0 + 96) = v20;
      *(void *)(v0 + 104) = v21;
      sub_1000A618C(v20, v21);
      sub_1000992E8(&qword_1002A8320);
      if (swift_dynamicCast())
      {
        sub_1000A6298((long long *)(v0 + 56), (uint64_t)v89);
        sub_1000A5DA4(v89, *(void *)(v0 + 40));
        if (dispatch thunk of _HasContiguousBytes._providesContiguousBytesNoCopy.getter())
        {
          uint64_t v23 = *(void *)(v0 + 376);
          unint64_t v22 = *(void *)(v0 + 384);
          sub_1000A5DA4(v89, *(void *)(v0 + 40));
          dispatch thunk of _HasContiguousBytes.withUnsafeBytes<A>(_:)();
          sub_1000A6240(v23, v22);
          uint64_t v9 = *(void *)(v0 + 128);
          uint64_t v11 = *(void *)(v0 + 136);
          sub_100099BCC((uint64_t)v89);
          goto LABEL_42;
        }
        sub_100099BCC((uint64_t)v89);
      }
      else
      {
        *(void *)(v0 + 8_Block_object_dispose(&STACK[0x3D0], 8) = 0;
        *(_OWORD *)(v0 + 56) = 0u;
        *(_OWORD *)(v0 + 72) = 0u;
        sub_1000A61E4(v0 + 56, &qword_1002A8328);
      }
      uint64_t v77 = *(void *)(v0 + 376);
      unint64_t v78 = *(void *)(v0 + 384);
      uint64_t v79 = sub_100161EE8(v77, v78);
      uint64_t v11 = v80;
      uint64_t v20 = v77;
      uint64_t v9 = v79;
      unint64_t v21 = v78;
LABEL_41:
      sub_1000A6240(v20, v21);
LABEL_42:
      sub_1000F02E0(&qword_1002A91A8, (void (*)(uint64_t))&type metadata accessor for SHA512);
      dispatch thunk of HashFunction.init()();
      if (v2 == 2)
      {
        uint64_t v81 = *(void *)(v0 + 376);
        uint64_t v82 = *(void *)(v81 + 16);
        uint64_t v83 = *(void *)(v81 + 24);
        sub_1000A618C(v81, *(void *)(v0 + 384));
        swift_retain();
        swift_retain();
        sub_1000F0200(v82, v83);
        swift_release();
        swift_release();
      }
      else
      {
        uint64_t v84 = *(void *)(v0 + 376);
        uint64_t v85 = (int)v84;
        uint64_t v86 = v84 >> 32;
        if (v84 >> 32 < (int)v84) {
          goto LABEL_52;
        }
        sub_1000A618C(v84, *(void *)(v0 + 384));
        sub_1000F0200(v85, v86);
      }
      *(void *)&long long v88 = v9;
      *((void *)&v88 + 1) = v11;
      uint64_t v25 = *(void *)(v0 + 376);
      unint64_t v26 = *(void *)(v0 + 384);
LABEL_14:
      sub_1000A6240(v25, v26);
      uint64_t v28 = *(void *)(v0 + 224);
      uint64_t v27 = *(void *)(v0 + 232);
      uint64_t v30 = *(void *)(v0 + 208);
      uint64_t v29 = *(void *)(v0 + 216);
      uint64_t v32 = *(void *)(v0 + 192);
      uint64_t v31 = *(void *)(v0 + 200);
      uint64_t v33 = *(void *)(v0 + 184);
      dispatch thunk of HashFunction.finalize()();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v27, v30);
      sub_1000F02E0(&qword_1002A91B0, (void (*)(uint64_t))&type metadata accessor for SHA512Digest);
      dispatch thunk of Sequence.makeIterator()();
      uint64_t v34 = *(void *)(v0 + 112);
      unint64_t v35 = *(void *)(v0 + 120);
      uint64_t v36 = *(void *)(v34 + 16);
      if (v35 != v36)
      {
        if ((uint64_t)v35 < v36)
        {
          if ((v35 & 0x8000000000000000) != 0)
          {
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
          }
          uint64_t v37 = _swiftEmptyArrayStorage;
          while (v35 < *(void *)(v34 + 16))
          {
            char v50 = *(unsigned char *)(v34 + 32 + v35);
            sub_1000992E8((uint64_t *)&unk_1002A9F50);
            uint64_t v51 = swift_allocObject();
            *(_OWORD *)(v51 + 16) = xmmword_100240BE0;
            *(void *)(v51 + 56) = &type metadata for UInt8;
            *(void *)(v51 + 64) = &protocol witness table for UInt8;
            *(unsigned char *)(v51 + 32) = v50;
            uint64_t v52 = String.init(format:_:)();
            uint64_t v54 = v53;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v37 = sub_100102294(0, v37[2] + 1, 1, v37);
            }
            unint64_t v56 = v37[2];
            unint64_t v55 = v37[3];
            if (v56 >= v55 >> 1) {
              uint64_t v37 = sub_100102294((void *)(v55 > 1), v56 + 1, 1, v37);
            }
            ++v35;
            void v37[2] = v56 + 1;
            uint64_t v57 = &v37[2 * v56];
            v57[4] = v52;
            v57[5] = v54;
            if (v36 == v35) {
              goto LABEL_16;
            }
          }
          __break(1u);
LABEL_49:
          __break(1u);
        }
        __break(1u);
        goto LABEL_51;
      }
      uint64_t v37 = _swiftEmptyArrayStorage;
LABEL_16:
      uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
      uint64_t v39 = *(void *)(v0 + 328);
      uint64_t v40 = *(void *)(v0 + 264);
      uint64_t v41 = *(void *)(v0 + 240);
      uint64_t v42 = *(void *)(v0 + 176);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 152) = v37;
      sub_1000992E8(&qword_1002A91B8);
      sub_1000F0328();
      BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      String.uppercased()();
      swift_bridgeObjectRelease();
      v38(v40, v42 + v39, v41);
      swift_bridgeObjectRetain();
      unint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.debug.getter();
      BOOL v45 = os_log_type_enabled(v43, v44);
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
      uint64_t v47 = *(void *)(v0 + 264);
      uint64_t v48 = *(void *)(v0 + 240);
      if (v45)
      {
        uint64_t v87 = *(void *)(v0 + 264);
        os_log_type_t v49 = (uint8_t *)swift_slowAlloc();
        v91[0] = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v49 = 136315138;
        swift_bridgeObjectRetain();
        *uint64_t v90 = sub_1000993AC(v88, *((unint64_t *)&v88 + 1), v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Accessory Description is %s", v49, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v46(v87, v48);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        v46(v47, v48);
      }
      char v58 = sub_1000EEA9C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v58)
      {
        (*(void (**)(void, void, void))(v0 + 336))(*(void *)(v0 + 256), *(void *)(v0 + 176) + *(void *)(v0 + 328), *(void *)(v0 + 240));
        uint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v59, v60))
        {
          unint64_t v61 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "Accessory Description hash match succeeded!!", v61, 2u);
          swift_slowDealloc();
        }
        uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v0 + 352);
        uint64_t v63 = *(void *)(v0 + 256);
        uint64_t v65 = *(void *)(v0 + 232);
        uint64_t v64 = *(void *)(v0 + 240);
        uint64_t v66 = *(void *)(v0 + 216);
        uint64_t v67 = *(void *)(v0 + 208);
        sub_1000A6240(*(void *)(v0 + 296), *(void *)(v0 + 304));

        v62(v63, v64);
        (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v67);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v68 = *(void *)(v0 + 8);
        __asm { BRAA            X3, X16 }
      }
      uint64_t v70 = *(void *)(v0 + 376);
      unint64_t v69 = *(void *)(v0 + 384);
      uint64_t v71 = *(void *)(v0 + 232);
      uint64_t v72 = *(void *)(v0 + 208);
      uint64_t v73 = *(void *)(v0 + 216);
      uint64_t v74 = type metadata accessor for Errors();
      sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      uint64_t v75 = swift_allocError();
      *uint64_t v76 = 0xD000000000000029;
      v76[1] = 0x8000000100236780;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v74 - 8) + 104))(v76, enum case for Errors.CommunicationFailure(_:), v74);
      swift_willThrow();
      sub_1000A6240(v70, v69);
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v72);
      *(void *)(v0 + 416) = v75;
      return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000EE6A8, 0, 0);
    case 2uLL:
      uint64_t v89 = (void *)(v0 + 16);
      uint64_t v90 = (uint64_t *)(v0 + 144);
      unint64_t v13 = *(void *)(v0 + 384);
      uint64_t v14 = *(void *)(v0 + 392);
      uint64_t v15 = *(void *)(v0 + 376);
      uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v17 = *(void *)(v15 + 16);
      uint64_t v18 = *(void *)(v15 + 24);
      sub_1000A618C(v15, v13);
      swift_retain();
      swift_retain();
      uint64_t v9 = sub_100161F9C(v17, v18, v16, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100162354);
      uint64_t v11 = v19;
      swift_release();
      uint64_t result = swift_release();
      if (!v14) {
        goto LABEL_7;
      }
      return result;
    case 3uLL:
      uint64_t v24 = *(void *)(v0 + 392);
      *(void *)(v0 + 482) = 0;
      *(void *)(v0 + 48_Block_object_dispose(&STACK[0x3D0], 8) = 0;
      uint64_t result = sub_100162354(v91);
      if (v24) {
        return result;
      }
      uint64_t v90 = (uint64_t *)(v0 + 144);
      uint64_t v4 = *(void *)(v0 + 376);
      unint64_t v3 = *(void *)(v0 + 384);
      sub_1000A6240(v4, v3);
      long long v88 = *(_OWORD *)v91;
      sub_1000F02E0(&qword_1002A91A8, (void (*)(uint64_t))&type metadata accessor for SHA512);
      dispatch thunk of HashFunction.init()();
      *(void *)(v0 + 474) = 0;
      *(void *)(v0 + 46_Block_object_dispose(&STACK[0x3D0], 8) = 0;
LABEL_13:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      uint64_t v25 = v4;
      unint64_t v26 = v3;
      goto LABEL_14;
    default:
      uint64_t v90 = (uint64_t *)(v0 + 144);
      uint64_t v4 = *(void *)(v0 + 376);
      unint64_t v3 = *(void *)(v0 + 384);
      *(void *)(v0 + 454) = v4;
      *(_WORD *)(v0 + 462) = v3;
      *(unsigned char *)(v0 + 464) = BYTE2(v3);
      *(unsigned char *)(v0 + 465) = BYTE3(v3);
      *(unsigned char *)(v0 + 466) = BYTE4(v3);
      *(unsigned char *)(v0 + 467) = BYTE5(v3);
      *(void *)&long long v88 = static String._fromUTF8Repairing(_:)();
      *((void *)&v88 + 1) = v5;
      sub_1000A6240(v4, v3);
      sub_1000F02E0(&qword_1002A91A8, (void (*)(uint64_t))&type metadata accessor for SHA512);
      dispatch thunk of HashFunction.init()();
      *(void *)(v0 + 440) = v4;
      *(_WORD *)(v0 + 44_Block_object_dispose(&STACK[0x3D0], 8) = v3;
      *(unsigned char *)(v0 + 450) = BYTE2(v3);
      *(unsigned char *)(v0 + 451) = BYTE3(v3);
      *(unsigned char *)(v0 + 452) = BYTE4(v3);
      *(unsigned char *)(v0 + 453) = BYTE5(v3);
      goto LABEL_13;
  }
}

uint64_t sub_1000EE6A8()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = *(void *)(v1 + 32);
  v0[53] = v2;
  if (v2)
  {
    swift_retain();
    unint64_t v3 = (void *)swift_task_alloc();
    v0[54] = v3;
    *unint64_t v3 = v0;
    v3[1] = sub_1000EE84C;
    return sub_1001D6604();
  }
  else
  {
    uint64_t v5 = v0[37];
    unint64_t v6 = v0[38];
    *(void *)(v1 + 32) = 0;
    swift_willThrow();
    sub_1000A6240(v5, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_1000EE84C()
{
  swift_task_dealloc();
  swift_release();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000EE990, 0, 0);
}

uint64_t sub_1000EE990()
{
  uint64_t v1 = v0[37];
  unint64_t v2 = v0[38];
  *(void *)(v0[22] + 32) = 0;
  swift_release();
  swift_willThrow();
  sub_1000A6240(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1000EEA9C()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  unint64_t v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  BOOL v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000EEC04()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  v1[7] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000EECE0, 0, 0);
}

uint64_t sub_1000EECE0()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[2];
  uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger;
  v0[8] = OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger;
  uint64_t v6 = v4 + v5;
  BOOL v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[9] = v7;
  v0[10] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v4 + v5, v2);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Handling Accessory Description transfer request", v10, 2u);
    swift_slowDealloc();
  }
  uint64_t v11 = v0[7];
  uint64_t v12 = v0[3];
  uint64_t v13 = v0[4];

  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v0[11] = v14;
  v0[12] = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v14(v11, v12);
  uint64_t Strong = swift_weakLoadStrong();
  v0[13] = Strong;
  if (!Strong)
  {
    uint64_t v32 = type metadata accessor for Errors();
    sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    *uint64_t v33 = 0xD000000000000010;
    v33[1] = 0x8000000100236700;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v33, enum case for Errors.AccessoryServerNil(_:), v32);
    swift_willThrow();
    goto LABEL_12;
  }
  uint64_t v16 = Strong;
  uint64_t v17 = *(void **)(Strong + 32);
  if (!v17 || ([v17 isReachable] & 1) == 0)
  {
    uint64_t v23 = type metadata accessor for Errors();
    sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    uint64_t v25 = v24;
    _StringGuts.grow(_:)(19);
    id v26 = *(id *)(v16 + 24);
    id v27 = [v26 description];
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v30 = v29;

    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 0xD000000000000011;
    v31._object = (void *)0x8000000100236180;
    String.append(_:)(v31);
    uint64_t *v25 = v28;
    v25[1] = v30;
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, enum case for Errors.AccessoryNotReachable(_:), v23);
    goto LABEL_10;
  }
  uint64_t v18 = v0[2];
  if (*(void *)(v18 + 32))
  {
    uint64_t v19 = type metadata accessor for Errors();
    sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    unint64_t v21 = v20;
    *uint64_t v20 = 0xD00000000000001BLL;
    v20[1] = 0x8000000100236230;
    unint64_t v22 = (unsigned int *)&enum case for Errors.OperationInProgress(_:);
LABEL_8:
    (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *v22, v19);
LABEL_10:
    swift_willThrow();
    swift_release();
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = (uint64_t (*)(void))v0[1];
    return v34();
  }
  uint64_t v46 = v0[6];
  uint64_t v47 = v0[3];
  uint64_t v36 = *(void **)(v18 + 24);
  type metadata accessor for AccessoryDescriptionSession();
  swift_allocObject();
  swift_retain();
  uint64_t v37 = sub_1001D8140(v16, (uint64_t)v36);
  swift_release();
  *(void *)(v18 + 32) = v37;
  swift_release();
  v7(v46, v6, v47);
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Setting up a Accessory Description transfer session", v40, 2u);
    swift_slowDealloc();
  }
  uint64_t v41 = v0[6];
  uint64_t v42 = v0[3];

  v14(v41, v42);
  uint64_t v43 = *(void *)(v18 + 32);
  v0[14] = v43;
  if (!v43)
  {
    uint64_t v19 = type metadata accessor for Errors();
    sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    unint64_t v21 = v45;
    *BOOL v45 = 0xD000000000000053;
    v45[1] = 0x8000000100236720;
    unint64_t v22 = (unsigned int *)&enum case for Errors.CommunicationFailure(_:);
    goto LABEL_8;
  }
  swift_retain();
  os_log_type_t v44 = (void *)swift_task_alloc();
  v0[15] = v44;
  void *v44 = v0;
  v44[1] = sub_1000EF334;
  return sub_1001D6B68();
}

uint64_t sub_1000EF334()
{
  *(void *)(*(void *)v1 + 12_Block_object_dispose(&STACK[0x3D0], 8) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000EF588;
  }
  else {
    uint64_t v2 = sub_1000EF448;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_1000EF448()
{
  (*(void (**)(void, void, void))(v0 + 72))(*(void *)(v0 + 40), *(void *)(v0 + 16) + *(void *)(v0 + 64), *(void *)(v0 + 24));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Accessory Description transfer session was setup successfully", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 24);

  v4(v5, v6);
  BOOL v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v7;
  void *v7 = v0;
  v7[1] = sub_1000EF618;
  return sub_1000EF874();
}

uint64_t sub_1000EF588()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EF618(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 144) = v2;
  swift_task_dealloc();
  if (v2)
  {
    BOOL v7 = sub_1000EF7E4;
  }
  else
  {
    *(void *)(v6 + 152) = a2;
    *(void *)(v6 + 160) = a1;
    BOOL v7 = sub_1000EF74C;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v7, 0, 0);
}

uint64_t sub_1000EF74C()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[19];
  uint64_t v2 = v0[20];
  return v1(v2, v3);
}

uint64_t sub_1000EF7E4()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EF874()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000EF934, 0, 0);
}

uint64_t sub_1000EF934()
{
  unint64_t v21 = v0;
  (*(void (**)(void, uint64_t, void))(v0[8] + 16))(v0[9], v0[6] + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger, v0[7]);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v17 = v0[8];
    uint64_t v3 = v0[6];
    uint64_t v18 = v0[7];
    uint64_t v19 = v0[9];
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v20 = v5;
    v0[4] = *(void *)(v3 + 32);
    sub_1000992E8(&qword_1002A9198);
    uint64_t v6 = Optional.debugDescription.getter();
    v0[5] = sub_1000993AC(v6, v7, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Read Accessory Description data for session %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  }
  else
  {
    uint64_t v9 = v0[8];
    uint64_t v8 = v0[9];
    uint64_t v10 = v0[7];
    swift_release_n();

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  uint64_t v11 = *(void *)(v0[6] + 32);
  v0[10] = v11;
  if (v11)
  {
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc();
    v0[11] = v12;
    void *v12 = v0;
    v12[1] = sub_1000CFD5C;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0x746144646165725FLL, 0xEB00000000292861, sub_1000F0168, v11, &type metadata for Data);
  }
  else
  {
    uint64_t v13 = type metadata accessor for Errors();
    sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    void *v14 = 0xD000000000000024;
    v14[1] = 0x80000001002366B0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v14, enum case for Errors.CommunicationFailure(_:), v13);
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

uint64_t sub_1000EFD04(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002A91A0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  sub_1001D7614((uint64_t)sub_1000F0174, v6);
  return swift_release();
}

uint64_t sub_1000EFE64(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1)
  {
    swift_errorRetain();
LABEL_5:
    sub_1000992E8(&qword_1002A91A0);
    return CheckedContinuation.resume(throwing:)();
  }
  if (a3 >> 60 == 15)
  {
    uint64_t v3 = type metadata accessor for Errors();
    sub_1000F02E0((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    void *v4 = 0xD000000000000019;
    v4[1] = 0x80000001002366E0;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v4, enum case for Errors.CommunicationFailure(_:), v3);
    goto LABEL_5;
  }
  sub_1000A618C(a2, a3);
  sub_1000992E8(&qword_1002A91A0);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1000EFFA8()
{
  swift_weakDestroy();

  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd27AccessoryDescriptionManager_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000F0060()
{
  return type metadata accessor for AccessoryDescriptionManager();
}

uint64_t type metadata accessor for AccessoryDescriptionManager()
{
  uint64_t result = qword_1002A9030;
  if (!qword_1002A9030) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000F00B4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000F0168(uint64_t a1)
{
  return sub_1000EFD04(a1);
}

uint64_t sub_1000F0174(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1000992E8(&qword_1002A91A0);

  return sub_1000EFE64(a1, a2, a3);
}

uint64_t sub_1000F0200(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA512();
      sub_1000F02E0(&qword_1002A91A8, (void (*)(uint64_t))&type metadata accessor for SHA512);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000F02E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000F0328()
{
  unint64_t result = qword_1002A91C0;
  if (!qword_1002A91C0)
  {
    sub_100099D14(&qword_1002A91B8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A91C0);
  }
  return result;
}

void sub_1000F0384(uint64_t a1)
{
  sub_1000EBD58(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

unint64_t sub_1000F0390()
{
  unint64_t result = qword_1002AAA70;
  if (!qword_1002AAA70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002AAA70);
  }
  return result;
}

uint64_t sub_1000F03D4()
{
  uint64_t v1 = sub_1000992E8(&qword_1002A91A0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F0468(uint64_t a1, uint64_t a2)
{
  sub_1000992E8(&qword_1002A91A0);

  return sub_1000EBF94(a1, a2);
}

uint64_t sub_1000F04EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000F04FC()
{
  return swift_release();
}

uint64_t sub_1000F0504()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002A91C8);
  sub_100096F64(v0, (uint64_t)qword_1002A91C8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000F057C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v42 = (uint64_t)&v36 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v41 = v1 + 16;
  swift_beginAccess();
  uint64_t v16 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  char v17 = sub_10010865C(a1, v16);
  swift_bridgeObjectRelease();
  if (v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  }
  else
  {
    if (*(void *)(v2 + 24))
    {
      if (qword_1002A7B50 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_100096F64(v18, (uint64_t)qword_1002A91C8);
      uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v40(v13, a1, v4);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        os_log_type_t v39 = v8;
        uint64_t v22 = (uint8_t *)v21;
        uint64_t v37 = swift_slowAlloc();
        v44[0] = v37;
        uint64_t v38 = a1;
        *(_DWORD *)uint64_t v22 = 136315138;
        uint64_t v36 = v22 + 4;
        uint64_t v23 = UUID.uuidString.getter();
        uint64_t v43 = sub_1000993AC(v23, v24, v44);
        a1 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Restarting RSSI scan, targeting accessory %s", v22, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v8 = v39;
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      }

      if (*(void *)(v2 + 24))
      {
        swift_retain();
        sub_100106558();
        swift_release();
      }
    }
    else
    {
      if (qword_1002A7B50 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_100096F64(v25, (uint64_t)qword_1002A91C8);
      uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v40(v15, a1, v4);
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      BOOL v28 = os_log_type_enabled(v26, v27);
      os_log_type_t v39 = v8;
      if (v28)
      {
        uint64_t v29 = (uint8_t *)swift_slowAlloc();
        uint64_t v37 = swift_slowAlloc();
        v44[0] = v37;
        uint64_t v38 = a1;
        *(_DWORD *)uint64_t v29 = 136315138;
        uint64_t v36 = v29 + 4;
        uint64_t v30 = UUID.uuidString.getter();
        uint64_t v43 = sub_1000993AC(v30, v31, v44);
        a1 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v4);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Starting RSSI scan, targeting accessory %s", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v15, v4);
      }

      if (qword_1002A7C20 != -1) {
        swift_once();
      }
      if (*(void *)(qword_1002B17A0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan))
      {
        swift_retain();
        sub_1000F11F4(7);
        swift_release();
      }
      uint64_t v32 = *(void *)(v2 + 40);
      type metadata accessor for Transaction();
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0;
      *(void *)(v33 + 24) = 0;
      *(void *)(v33 + 32) = 0;
      *(void *)(v33 + 16) = 0;
      swift_unknownObjectWeakInit();
      *(void *)(v33 + 80) = 0;
      *(unsigned char *)(v33 + 8_Block_object_dispose(&STACK[0x3D0], 8) = 1;
      swift_unknownObjectRetain();
      Logger.init(subsystem:category:)();
      *(void *)(v33 + 64) = 0xD000000000000025;
      *(void *)(v33 + 72) = 0x8000000100236610;
      *(void *)(v33 + 4_Block_object_dispose(&STACK[0x3D0], 8) = v32;
      *(void *)(v33 + 56) = 0x403E000000000000;
      swift_unknownObjectWeakAssign();
      swift_unknownObjectRelease();
      *(void *)(v2 + 24) = v33;
      swift_release();
      if (*(void *)(v2 + 24))
      {
        swift_retain();
        sub_100105BB4();
        swift_release();
      }
      uint64_t v8 = v39;
    }
    v40(v8, a1, v4);
  }
  swift_beginAccess();
  uint64_t v34 = v42;
  sub_10019D11C(v42, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v34, v4);
  return swift_endAccess();
}

void sub_1000F0C40(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v1 + 16;
  swift_beginAccess();
  sub_10019EBC0(a1, (uint64_t)v9);
  sub_1000A61E4((uint64_t)v9, &qword_1002AAA20);
  swift_endAccess();
  if (qword_1002A7B50 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100096F64(v11, (uint64_t)qword_1002A91C8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v18[1] = v1;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    v18[0] = v1 + 16;
    v19[0] = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v16 = UUID.uuidString.getter();
    void v18[2] = sub_1000993AC(v16, v17, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Invalidating RSSI target %s", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v18[0];
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  if (!*(void *)(*(void *)v10 + 16)) {
    sub_1000F0F40();
  }
}

void sub_1000F0F40()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = v0;
    if (qword_1002A7B50 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100096F64(v2, (uint64_t)qword_1002A91C8);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping RSSI scan", v5, 2u);
      swift_slowDealloc();
    }

    if (qword_1002A7C20 != -1) {
      swift_once();
    }
    if (*(void *)(qword_1002B17A0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink_btScan))
    {
      swift_retain();
      sub_1000F11F4(4);
      swift_release();
    }
    if (*(void *)(v1 + 24))
    {
      swift_retain();
      sub_1001060E8();
      swift_release();
    }
    *(void *)(v1 + 24) = 0;
    swift_release();
  }
}

uint64_t sub_1000F10D4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RSSITransaction()
{
  return self;
}

id *sub_1000F1140()
{
  sub_1000F2AAC();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  sub_1000A61E4((uint64_t)(v0 + 10), &qword_1002A7C38);
  return v0;
}

uint64_t sub_1000F119C()
{
  sub_1000F1140();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BTScanEngine()
{
  return self;
}

void sub_1000F11F4(uint64_t a1)
{
  uint64_t v66 = a1;
  uint64_t v1 = type metadata accessor for Data.Iterator();
  uint64_t v2 = *(uint64_t **)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v5 - 8);
  uint64_t v81 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(char **)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v80 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v86 = (char *)&v65 - v12;
  __chkstk_darwin(v11);
  uint64_t v79 = (char *)&v65 - v13;
  if (qword_1002A7C00 != -1) {
LABEL_26:
  }
    swift_once();
  uint64_t v14 = qword_1002B1628;
  uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v16 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v16 + 4);
  swift_release();
  unint64_t v17 = (unint64_t *)(v14 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_accessories);
  swift_beginAccess();
  unint64_t v18 = *v17;
  uint64_t v19 = *(os_unfair_lock_s **)(v14 + v15);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v19 + 4);
  swift_release();
  uint64_t v94 = (uint64_t)&_swiftEmptyArrayStorage;
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
    {
LABEL_4:
      unint64_t v21 = 0;
      unint64_t v78 = v18 & 0xC000000000000001;
      uint64_t v68 = v18 & 0xFFFFFFFFFFFFFF8;
      unint64_t v67 = v18 + 32;
      uint64_t v22 = (uint64_t **)(v8 + 8);
      uint64_t v73 = (void (**)(char *, uint64_t))(v2 + 1);
      uint64_t v72 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
      unint64_t v69 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
      long long v71 = xmmword_1002413B0;
      unint64_t v70 = (unint64_t)"v16@?0@\"CBDevice\"8";
      long long v88 = xmmword_100240BE0;
      uint64_t v77 = v7;
      unint64_t v76 = v18;
      uint64_t v75 = v20;
      uint64_t v74 = (uint64_t **)(v8 + 8);
      do
      {
        if (v78)
        {
          uint64_t v23 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v21 >= *(void *)(v68 + 16)) {
            goto LABEL_25;
          }
          uint64_t v23 = (char *)*(id *)(v67 + 8 * v21);
        }
        uint64_t v8 = v23;
        BOOL v24 = __OFADD__(v21, 1);
        unint64_t v25 = v21 + 1;
        if (v24)
        {
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
        unint64_t v85 = v25;
        id v26 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
        os_log_type_t v27 = v79;
        DockCoreInfo.identifier.getter();

        sub_1000992E8(&qword_1002A7F40);
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = v71;
        UUID.uuid.getter();
        *(unsigned char *)(v28 + 32) = v29;
        UUID.uuid.getter();
        *(unsigned char *)(v28 + 33) = v30;
        UUID.uuid.getter();
        *(unsigned char *)(v28 + 34) = v31;
        UUID.uuid.getter();
        *(unsigned char *)(v28 + 35) = v32;
        UUID.uuid.getter();
        *(unsigned char *)(v28 + 36) = v33;
        UUID.uuid.getter();
        *(unsigned char *)(v28 + 37) = v34;
        uint64_t v35 = sub_1001038B0(v28);
        unint64_t v37 = v36;
        swift_bridgeObjectRelease();
        uint64_t v83 = *v22;
        ((void (*)(char *, uint64_t))v83)(v27, v7);
        uint64_t v38 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
        DockCoreInfo.identifier.getter();

        switch(v37 >> 62)
        {
          case 1uLL:
          case 2uLL:
            sub_1000A618C(v35, v37);
            sub_1000A618C(v35, v37);
            sub_1000A618C(v35, v37);
            break;
          default:
            break;
        }
        id v84 = v8;
        Data.Iterator.init(_:at:)();
        uint64_t v82 = v35;
        unint64_t v87 = v37;
        sub_1000A6240(v35, v37);
        uint64_t v39 = sub_1000F6784((unint64_t *)&qword_1002A8560, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
        dispatch thunk of IteratorProtocol.next()();
        unint64_t v40 = v70 | 0x8000000000000000;
        unint64_t v41 = 0xD000000000000018;
        if ((v93 & 1) == 0)
        {
          uint64_t v89 = v39;
          do
          {
            char v42 = v92;
            sub_1000992E8((uint64_t *)&unk_1002A9F50);
            uint64_t v43 = swift_allocObject();
            *(_OWORD *)(v43 + 16) = v88;
            *(void *)(v43 + 56) = &type metadata for UInt8;
            *(void *)(v43 + 64) = &protocol witness table for UInt8;
            *(unsigned char *)(v43 + 32) = v42;
            uint64_t v44 = String.init(format:_:)();
            uint64_t v46 = v45;
            unint64_t v90 = v41;
            unint64_t v91 = v40;
            swift_bridgeObjectRetain();
            v47._uint64_t countAndFlagsBits = v44;
            v47._object = v46;
            String.append(_:)(v47);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v41 = v90;
            unint64_t v40 = v91;
            dispatch thunk of IteratorProtocol.next()();
          }
          while (v93 != 1);
        }
        (*v73)(v4, v1);
        uint64_t v48 = v82;
        sub_1000A6240(v82, v87);
        uint64_t v49 = (uint64_t)v81;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        uint64_t v7 = v77;
        if ((*v72)(v49, 1, v77) == 1)
        {
          char v50 = v80;
          UUID.init()();
          sub_1000A61E4(v49, &qword_1002AAA20);
        }
        else
        {
          char v50 = v80;
          (*v69)(v80, v49, v7);
        }
        unint64_t v21 = v85;
        uint64_t v8 = v86;
        uint64_t v22 = v74;
        char v51 = static UUID.== infix(_:_:)();
        sub_1000A6240(v48, v87);
        uint64_t v52 = v50;
        uint64_t v2 = v83;
        ((void (*)(char *, uint64_t))v83)(v52, v7);
        ((void (*)(char *, uint64_t))v2)(v8, v7);
        if (v51)
        {
          uint64_t v2 = &v94;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
      }
      while (v21 != v75);
      swift_bridgeObjectRelease();
      uint64_t v53 = v94;
      if ((v94 & 0x8000000000000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_63;
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v20) {
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v53 = (uint64_t)&_swiftEmptyArrayStorage;
  if (((unint64_t)&_swiftEmptyArrayStorage & 0x8000000000000000) == 0)
  {
LABEL_29:
    if ((v53 & 0x4000000000000000) == 0)
    {
      uint64_t v54 = *(void *)(v53 + 16);
      goto LABEL_31;
    }
  }
LABEL_63:
  swift_bridgeObjectRetain();
  uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
LABEL_31:
  swift_release();
  if (qword_1002A7B50 != -1) {
    swift_once();
  }
  uint64_t v55 = type metadata accessor for Logger();
  sub_100096F64(v55, (uint64_t)qword_1002A91C8);
  unint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = swift_slowAlloc();
    unint64_t v90 = swift_slowAlloc();
    *(_DWORD *)uint64_t v58 = 136315394;
    unint64_t v59 = 0xE400000000000000;
    uint64_t v60 = 1701736302;
    switch((char)v66)
    {
      case 1:
        unint64_t v59 = 0xE600000000000000;
        uint64_t v60 = 0x68636E75616CLL;
        break;
      case 2:
        unint64_t v59 = 0xE700000000000000;
        uint64_t v60 = 0x7463656E6E6F63;
        break;
      case 3:
        unint64_t v59 = 0xEA00000000007463;
        uint64_t v60 = 0x656E6E6F63736964;
        break;
      case 4:
        unint64_t v59 = 0xE700000000000000;
        uint64_t v60 = 0x74754F656D6974;
        break;
      case 5:
        unint64_t v59 = 0xE300000000000000;
        uint64_t v60 = 6514286;
        break;
      case 6:
        unint64_t v59 = 0xE600000000000000;
        uint64_t v60 = 0x7461626D6F77;
        break;
      case 7:
        unint64_t v59 = 0xE900000000000064;
        uint64_t v60 = 0x6C6F687365726874;
        break;
      default:
        break;
    }
    uint64_t v94 = sub_1000993AC(v60, v59, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v58 + 12) = 2080;
    if (v54) {
      uint64_t v61 = 0x646572696170;
    }
    else {
      uint64_t v61 = 0x6465726961706E75;
    }
    if (v54) {
      unint64_t v62 = 0xE600000000000000;
    }
    else {
      unint64_t v62 = 0xE800000000000000;
    }
    uint64_t v94 = sub_1000993AC(v61, v62, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "BT Scan event: %s (%s)", (uint8_t *)v58, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v63 = v65;
  switch((char)v66)
  {
    case 1:
    case 3:
    case 4:
      if (v54)
      {
        sub_1000F5340(1, 0);
        char v64 = 2;
        goto LABEL_61;
      }
      sub_1000F5340(0, 0);
      if (*(void *)(v63 + 64)) {
        goto LABEL_55;
      }
      return;
    case 2:
      if (*(void *)(v65 + 64)) {
LABEL_55:
      }
        sub_1000F2AAC();
      return;
    case 5:
      char v64 = 1;
      goto LABEL_61;
    case 6:
      if (([*(id *)(v65 + 40) isScanning] & 1) == 0 && *(unsigned char *)(v63 + 72) != 1) {
        return;
      }
      sub_1000F5340(1, 1);
      char v64 = 4;
LABEL_61:
      sub_1000F1D8C(v64);
      return;
    case 7:
      char v64 = 3;
      goto LABEL_61;
    default:
      return;
  }
}

void sub_1000F1D8C(char a1)
{
  uint64_t v2 = v1;
  if (*(void *)(v1 + 64)) {
    sub_1000F2AAC();
  }
  if (a1)
  {
    if (qword_1002A7B50 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100096F64(v4, (uint64_t)qword_1002A91C8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Starting Bluetooth discovery...", v7, 2u);
      swift_slowDealloc();
    }

    if (qword_1002A7C20 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_1002B17A0;
    uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock;
    uint64_t v10 = *(os_unfair_lock_s **)(qword_1002B17A0 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredLock);
    swift_retain();
    os_unfair_lock_lock(v10 + 4);
    swift_release();
    uint64_t v11 = (void *)(v8 + OBJC_IVAR____TtC14dockaccessoryd6BTLink__discoveredDevices);
    swift_beginAccess();
    void *v11 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(os_unfair_lock_s **)(v8 + v9);
    swift_retain();
    os_unfair_lock_unlock(v12 + 4);
    swift_release();
    id v13 = [objc_allocWithZone((Class)CBDiscovery) init];
    uint64_t v14 = *(void **)(v2 + 64);
    *(void *)(v2 + 64) = v13;

    uint64_t v15 = *(void **)(v2 + 64);
    if (v15)
    {
      [v15 setBleRSSIThresholdHint:4294967226];
      uint64_t v16 = *(void **)(v2 + 64);
      if (v16)
      {
        uint64_t v17 = 1074790400;
        if (a1 == 4) {
          uint64_t v17 = 1107296256;
        }
        if (a1 == 3) {
          uint64_t v18 = 0x240000000;
        }
        else {
          uint64_t v18 = v17;
        }
        [v16 setDiscoveryFlags:v18];
        uint64_t v19 = *(void **)(v2 + 64);
        if (v19)
        {
          [v19 setDispatchQueue:*(void *)(v2 + 32)];
          uint64_t v20 = *(void **)(v2 + 64);
          if (v20)
          {
            [v20 addDiscoveryType:12];
            unint64_t v21 = *(void **)(v2 + 64);
            if (v21)
            {
              char v34 = sub_1000F6774;
              uint64_t v35 = v2;
              long long aBlock = _NSConcreteStackBlock;
              uint64_t v31 = 1107296256;
              char v32 = sub_1000F246C;
              char v33 = &unk_100276D80;
              uint64_t v22 = _Block_copy(&aBlock);
              swift_retain();
              id v23 = v21;
              swift_release();
              [v23 setDeviceFoundHandler:v22];
              _Block_release(v22);

              BOOL v24 = *(void **)(v2 + 64);
              if (v24)
              {
                char v34 = sub_1000F24D4;
                uint64_t v35 = 0;
                long long aBlock = _NSConcreteStackBlock;
                uint64_t v31 = 1107296256;
                char v32 = sub_1000F246C;
                char v33 = &unk_100276DA8;
                unint64_t v25 = _Block_copy(&aBlock);
                id v26 = v24;
                [v26 setDeviceLostHandler:v25];
                _Block_release(v25);

                os_log_type_t v27 = *(void **)(v2 + 64);
                if (v27)
                {
                  char v34 = sub_1000F677C;
                  uint64_t v35 = v2;
                  long long aBlock = _NSConcreteStackBlock;
                  uint64_t v31 = 1107296256;
                  char v32 = sub_1001B81B8;
                  char v33 = &unk_100276DD0;
                  uint64_t v28 = _Block_copy(&aBlock);
                  swift_retain();
                  id v29 = v27;
                  swift_release();
                  [v29 activateWithCompletion:v28];
                  _Block_release(v28);
                }
                *(unsigned char *)(v2 + 73) = a1;
                return;
              }
LABEL_30:
              __break(1u);
              return;
            }
LABEL_29:
            __break(1u);
            goto LABEL_30;
          }
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_27;
  }
}

void sub_1000F21E0(void *a1)
{
  if (qword_1002A7B50 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100096F64(v2, (uint64_t)qword_1002A91C8);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    id v7 = [v3 name];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;
    }
    else
    {
      unint64_t v11 = 0xE700000000000000;
      uint64_t v9 = 0x6E776F6E6B6E55;
    }
    uint64_t v17 = sub_1000993AC(v9, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    id v12 = [v3 identifier:v17];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;
    }
    else
    {
      unint64_t v16 = 0xE100000000000000;
      uint64_t v14 = 45;
    }
    sub_1000993AC(v14, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Found device %s [%s]", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_1000F2D04(v3);
}

void sub_1000F246C(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

id sub_1000F24D4(void *a1)
{
  if (qword_1002A7B50 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100096F64(v2, (uint64_t)qword_1002A91C8);
  id v3 = a1;
  id v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    id v7 = [v3 name];
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;
    }
    else
    {
      unint64_t v11 = 0xE700000000000000;
      uint64_t v9 = 0x6E776F6E6B6E55;
    }
    uint64_t v23 = sub_1000993AC(v9, v11, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    id v12 = [v3 identifier:v23];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;
    }
    else
    {
      unint64_t v16 = 0xE100000000000000;
      uint64_t v14 = 45;
    }
    uint64_t v22 = sub_1000993AC(v14, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Lost device %s [%s]", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id result = [v3 identifier:v22];
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    if (qword_1002A7C20 != -1) {
      swift_once();
    }
    sub_1001DB00C(v19, v21);
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1000F27C4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (qword_1002A7B50 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100096F64(v2, (uint64_t)qword_1002A91C8);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      id v4 = (uint8_t *)swift_slowAlloc();
      v13[0] = swift_slowAlloc();
      *(_DWORD *)id v4 = 136315138;
      swift_getErrorValue();
      uint64_t v5 = Error.localizedDescription.getter();
      sub_1000993AC(v5, v6, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Unable to activate CBDiscovery: %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_1002A7B50 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100096F64(v8, (uint64_t)qword_1002A91C8);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Bluetooth discovery activated!", v11, 2u);
      swift_slowDealloc();
    }

    *(unsigned char *)(a2 + 72) = 1;
    swift_beginAccess();
    sub_1000F5824(a2 + 80, (uint64_t)v13);
    sub_1000A61E4((uint64_t)v13, &qword_1002A7C38);
  }
}

uint64_t sub_1000F2AAC()
{
  uint64_t v1 = v0;
  if (qword_1002A7B50 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100096F64(v2, (uint64_t)qword_1002A91C8);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping Bluetooth discovery...", v5, 2u);
    swift_slowDealloc();
  }

  [*(id *)(v1 + 64) invalidate];
  unint64_t v6 = *(void **)(v1 + 64);
  *(void *)(v1 + 64) = 0;

  *(unsigned char *)(v1 + 72) = 0;
  swift_beginAccess();
  sub_1000F5824(v1 + 80, (uint64_t)v15);
  if (v16)
  {
    sub_1000A5D40((uint64_t)v15, (uint64_t)v14);
    sub_1000A61E4((uint64_t)v15, &qword_1002A7C38);
    uint64_t v7 = *sub_1000A5DA4(v14, v14[3]);
    uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn;
    swift_retain();
    sub_1000F0F40();
    swift_release();
    uint64_t v9 = *(void *)(v7 + v8);
    swift_retain();
    os_log_type_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Purging all RSSI scan targets.", v12, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    *(void *)(v9 + 16) = &_swiftEmptySetSingleton;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = sub_100099BCC((uint64_t)v14);
  }
  else
  {
    uint64_t result = sub_1000A61E4((uint64_t)v15, &qword_1002A7C38);
  }
  *(unsigned char *)(v1 + 73) = 0;
  return result;
}

void sub_1000F2D04(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  [a1 bleAdvertisementTimestamp];
  if (v8 > 0.0)
  {
    static Date.now.getter();
    Date.timeIntervalSinceReferenceDate.getter();
    double v10 = v9;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    [a1 bleAdvertisementTimestamp];
    double v12 = v11;
    if (qword_1002A7B50 != -1) {
      swift_once();
    }
    double v13 = v10 - v12;
    uint64_t v14 = type metadata accessor for Logger();
    sub_100096F64(v14, (uint64_t)qword_1002A91C8);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 134217984;
      *(double *)&long long v37 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "New device is %f seconds old...", v17, 0xCu);
      swift_slowDealloc();
    }

    if (v13 >= 1.0)
    {
      id v26 = a1;
      os_log_type_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v27, v28))
      {

        return;
      }
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 134218240;
      *(double *)&long long v37 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2048;
      [v26 bleAdvertisementTimestamp];
      *(void *)&long long v37 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Ignoring found device: lifetime is too old: %f (%f)", (uint8_t *)v29, 0x16u);
    }
    else
    {
      sub_1000F588C(a1, v35);
      sub_1000F61A4((uint64_t)v35, (uint64_t)v36);
      if (*((void *)&v36[0] + 1))
      {
        long long v37 = v36[0];
        long long v38 = v36[1];
        long long v39 = v36[2];
        uint64_t v18 = swift_allocObject();
        *(void *)(v18 + 16) = 0;
        if (qword_1002A7C20 != -1) {
          swift_once();
        }
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = a1;
        *(void *)(v19 + 24) = v18;
        *(void *)(v19 + 32) = v2;
        long long v20 = v38;
        *(_OWORD *)(v19 + 40) = v37;
        *(_OWORD *)(v19 + 56) = v20;
        *(_OWORD *)(v19 + 72) = v39;
        id v21 = a1;
        swift_retain();
        swift_retain();
        sub_1000F62AC(v35, sub_1000EA048);
        sub_1001DA690((uint64_t)sub_1000F629C, v19);
        swift_release();
        swift_release();
        sub_1000F62AC(v35, sub_1000E94DC);
        return;
      }
      os_log_type_t v27 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v27, v31))
      {
LABEL_24:

        return;
      }
      char v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v31, "Unable to parse advertisement data!", v32, 2u);
    }
    swift_slowDealloc();
    goto LABEL_24;
  }
  if (qword_1002A7B50 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100096F64(v22, (uint64_t)qword_1002A91C8);
  os_log_t v34 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v23, "Ignoring found device: advertisment timestamp is 0.", v24, 2u);
    swift_slowDealloc();
  }
  os_log_t v25 = v34;
}

void sub_1000F3264(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  os_log_type_t v119 = a3;
  id v117 = a1;
  uint64_t v118 = *(void *)a6;
  unint64_t v121 = *(void *)(a6 + 8);
  uint64_t v8 = *(unsigned __int16 *)(a6 + 24);
  uint64_t v9 = *(unsigned int *)(a6 + 16);
  uint64_t v10 = *(unsigned int *)(a6 + 20);
  uint64_t v11 = *(unsigned __int8 *)(a6 + 26);
  uint64_t v120 = *(void *)(a6 + 32);
  os_log_t v122 = *(os_log_t *)(a6 + 40);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1000992E8(&qword_1002AAA20);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (void (*)(uint64_t, char *, uint64_t))((char *)v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v22 = __chkstk_darwin(v21);
  if (!a2)
  {
    unint64_t v105 = v18;
    uint64_t v103 = v26;
    id v106 = (char *)v99 - v23;
    uint64_t v104 = v25;
    uint64_t v113 = v24;
    uint64_t v114 = v22;
    id v115 = v15;
    uint64_t v116 = v13;
    uint64_t v109 = v11;
    uint64_t v110 = v10;
    uint64_t v111 = v8;
    uint64_t v112 = v9;
    uint64_t v30 = (id *)(a4 + 16);
    id v31 = [v119 btAddressData];
    unint64_t v32 = v121;
    uint64_t v33 = v120;
    os_log_t v34 = v122;
    if (v31)
    {
      uint64_t v35 = v31;
      uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      sub_1000A618C(v36, v38);
      uint64_t v39 = sub_1001D6108(v36, v38);
      if (v40 >> 60 == 15)
      {
        sub_1000A6240(v36, v38);
      }
      else
      {
        uint64_t v41 = v39;
        unint64_t v42 = v40;
        if (qword_1002A7B50 != -1) {
          swift_once();
        }
        uint64_t v108 = (id *)(a4 + 16);
        sub_100096F64(v12, (uint64_t)qword_1002A91C8);
        sub_1000A618C(v41, v42);
        sub_1000A618C(v41, v42);
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.default.getter();
        int v45 = v44;
        if (os_log_type_enabled(v43, v44))
        {
          os_log_t v101 = v43;
          LODWORD(v102) = v45;
          uint64_t v46 = (uint8_t *)swift_slowAlloc();
          uint64_t v100 = swift_slowAlloc();
          uint64_t v125 = v100;
          *(_DWORD *)uint64_t v46 = 136315138;
          v99[1] = v46 + 4;
          v47._uint64_t countAndFlagsBits = sub_10013E71C(v41, v42);
          uint64_t v126 = 0x206D6F646E6152;
          unint64_t v127 = 0xE700000000000000;
          String.append(_:)(v47);
          swift_bridgeObjectRelease();
          uint64_t v126 = sub_1000993AC(v126, v127, &v125);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1000A9990(v41, v42);
          sub_1000A9990(v41, v42);
          os_log_t v48 = v101;
          _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v102, "Trying to retrieve peripheral with address: %s", v46, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1000A9990(v41, v42);
          sub_1000A9990(v41, v42);
        }
        v49._uint64_t countAndFlagsBits = sub_10013E71C(v41, v42);
        uint64_t v126 = 0x206D6F646E6152;
        unint64_t v127 = 0xE700000000000000;
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        NSString v50 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v51 = [v117 retrievePeripheralWithAddress:v50];
        sub_1000A6240(v36, v38);
        sub_1000A9990(v41, v42);

        uint64_t v30 = v108;
        swift_beginAccess();
        id v52 = *v30;
        *uint64_t v30 = v51;
      }
      unint64_t v32 = v121;
      uint64_t v33 = v120;
      os_log_t v34 = v122;
    }
    swift_beginAccess();
    if (!*v30)
    {
      id v53 = [v119 identifier];
      uint64_t v107 = v12;
      if (v53)
      {
        uint64_t v54 = v53;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      uint64_t v55 = (uint64_t)v105;
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      uint64_t v56 = v113;
      uint64_t v57 = v114;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v55, 1, v114) == 1)
      {
        sub_1000A61E4(v55, &qword_1002AAA20);
        os_log_t v34 = v122;
        uint64_t v12 = v107;
      }
      else
      {
        uint64_t v102 = a4;
        uint64_t v58 = v106;
        (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v106, v55, v57);
        if (qword_1002A7B50 != -1) {
          swift_once();
        }
        uint64_t v108 = v30;
        sub_100096F64(v107, (uint64_t)qword_1002A91C8);
        unint64_t v59 = *(void (**)(uint64_t, char *, uint64_t))(v56 + 16);
        uint64_t v60 = v103;
        v59(v103, v58, v57);
        uint64_t v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v63 = swift_slowAlloc();
          unint64_t v105 = v59;
          uint64_t v64 = v63;
          uint64_t v126 = swift_slowAlloc();
          *(_DWORD *)uint64_t v64 = 136315138;
          os_log_t v101 = (os_log_t)(v64 + 4);
          uint64_t v65 = UUID.uuidString.getter();
          uint64_t v124 = sub_1000993AC(v65, v66, &v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          unint64_t v67 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
          v67(v60, v57);
          _os_log_impl((void *)&_mh_execute_header, v61, v62, "Trying to retrieve peripheral with uuid: %s", (uint8_t *)v64, 0xCu);
          swift_arrayDestroy();
          unint64_t v32 = v121;
          swift_slowDealloc();
          unint64_t v59 = v105;
          swift_slowDealloc();

          id v68 = v117;
        }
        else
        {
          unint64_t v67 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
          v67(v60, v57);

          id v68 = v117;
          unint64_t v32 = v121;
        }
        sub_1000992E8(&qword_1002A95B0);
        unint64_t v69 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
        uint64_t v70 = swift_allocObject();
        *(_OWORD *)(v70 + 16) = xmmword_100240BE0;
        v59(v70 + v69, v106, v57);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v72 = [v68 retrievePeripheralsWithIdentifiers:isa];

        sub_1000F6734();
        unint64_t v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v33 = v120;
        if (v73 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v74 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        os_log_t v34 = v122;
        uint64_t v12 = v107;
        if (v74)
        {
          if ((v73 & 0xC000000000000001) != 0)
          {
            id v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_54;
            }
            id v75 = *(id *)(v73 + 32);
          }
          uint64_t v74 = (uint64_t)v75;
        }
        swift_bridgeObjectRelease();
        v67((uint64_t)v106, v114);
        uint64_t v30 = v108;
        swift_beginAccess();
        id v76 = *v30;
        *uint64_t v30 = (id)v74;
      }
    }
    swift_beginAccess();
    if (!*v30)
    {
      if (qword_1002A7B50 != -1) {
        swift_once();
      }
      sub_100096F64(v12, (uint64_t)qword_1002A91C8);
      uint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v94, v95))
      {
        unint64_t v96 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v96 = 0;
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "Unable to retrieve peripheral", v96, 2u);
        swift_slowDealloc();
      }
      goto LABEL_50;
    }
    if (qword_1002A7B50 != -1) {
      swift_once();
    }
    uint64_t v77 = sub_100096F64(v12, (uint64_t)qword_1002A91C8);
    uint64_t v78 = v116;
    uint64_t v79 = v115;
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v115, v77, v12);
    swift_retain_n();
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v107 = v12;
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      uint64_t v126 = swift_slowAlloc();
      *(_DWORD *)uint64_t v82 = 136315138;
      swift_beginAccess();
      uint64_t v108 = v30;
      if (!*v30)
      {
LABEL_55:
        swift_release();
        __break(1u);
        return;
      }
      id v83 = [*v30 identifier];
      uint64_t v84 = v104;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000F6784(&qword_1002AA860, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v85 = v114;
      uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v88 = v87;
      (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v84, v85);
      uint64_t v123 = sub_1000993AC(v86, v88, &v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Got peripheral with UUID %s", v82, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v116 + 8))(v115, v107);
      uint64_t v89 = v118;
      unint64_t v32 = v121;
      uint64_t v33 = v120;
      os_log_t v34 = v122;
      uint64_t v90 = v112;
      uint64_t v91 = v111;
      uint64_t v92 = v110;
      char v93 = v109;
      uint64_t v30 = v108;
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v12);
      uint64_t v90 = v112;
      uint64_t v91 = v111;
      uint64_t v92 = v110;
      char v93 = v109;
      uint64_t v89 = v118;
    }
    swift_beginAccess();
    id v97 = *v30;
    if (*v30)
    {
      uint64_t v98 = v92 | (v91 << 32);
      uint64_t v126 = v89;
      unint64_t v127 = v32;
      uint64_t v128 = v90 | (v98 << 32);
      unint64_t v129 = WORD2(v98) | ((unint64_t)(v93 & 1) << 16);
      uint64_t v130 = v33;
      os_log_t v131 = v34;
      uint64_t v94 = v97;
      sub_1000F62EC(v119, v94, &v126);
LABEL_50:

      return;
    }
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (qword_1002A7B50 != -1) {
    swift_once();
  }
  sub_100096F64(v12, (uint64_t)qword_1002A91C8);
  os_log_t v122 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v122, v27))
  {
    os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v122, v27, "Unable to power on BT central!", v28, 2u);
    swift_slowDealloc();
  }
  os_log_t v29 = v122;
}

uint64_t sub_1000F41F4()
{
  uint64_t v1 = v0;
  if ([*(id *)(v0 + 40) isScanning])
  {
    if (qword_1002A7B50 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100096F64(v2, (uint64_t)qword_1002A91C8);
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping scan...", v5, 2u);
      swift_slowDealloc();
    }

    [*(id *)(v1 + 40) stopScan];
  }
  if (*(unsigned char *)(v1 + 73) == 5) {
    *(unsigned char *)(v1 + 73) = 0;
  }
  swift_retain();
  sub_1001060E8();
  swift_release();
  swift_beginAccess();
  sub_1000F5824(v1 + 80, (uint64_t)v16);
  if (!v17) {
    return sub_1000A61E4((uint64_t)v16, &qword_1002A7C38);
  }
  sub_1000A5D40((uint64_t)v16, (uint64_t)v15);
  sub_1000A61E4((uint64_t)v16, &qword_1002A7C38);
  uint64_t v6 = *sub_1000A5DA4(v15, v15[3]);
  uint64_t v7 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_rssiTxn;
  swift_retain();
  sub_1000F0F40();
  swift_release();
  uint64_t v8 = *(void *)(v6 + v7);
  uint64_t v9 = qword_1002A7B50;
  swift_retain();
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100096F64(v10, (uint64_t)qword_1002A91C8);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Purging all RSSI scan targets.", v13, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  *(void *)(v8 + 16) = &_swiftEmptySetSingleton;
  swift_release();
  swift_bridgeObjectRelease();
  return sub_100099BCC((uint64_t)v15);
}

uint64_t sub_1000F44B0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v17[0] - 8);
  __chkstk_darwin(v17[0]);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v12 = *(void **)(v2 + 32);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a1;
  v13[3] = a2;
  v13[4] = v2;
  aBlock[4] = sub_1000F5800;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100276CB8;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v12;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_1000F6784((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, void))(v9 + 8))(v11, v17[0]);
  return swift_release();
}

char *sub_1000F4764(char *a1, char **a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    *((void *)a1 + 1) = v8;
    uint64_t v9 = a2[3];
    uint64_t v10 = v5;
    uint64_t v11 = v8;
    if (v9)
    {
      *((void *)a1 + 2) = a2[2];
      *((void *)a1 + 3) = v9;
      int v12 = *((_DWORD *)a2 + 9);
      *((_DWORD *)a1 + _Block_object_dispose(&STACK[0x3D0], 8) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a1 + 9) = v12;
      *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
      a1[42] = *((unsigned char *)a2 + 42);
      uint64_t v13 = (uint64_t)a2[6];
      unint64_t v14 = (unint64_t)a2[7];
      swift_bridgeObjectRetain();
      sub_1000A618C(v13, v14);
      *((void *)a1 + 6) = v13;
      *((void *)a1 + 7) = v14;
    }
    else
    {
      long long v15 = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)a1 + 2) = v15;
      *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
    }
    uint64_t v16 = *(int *)(a3 + 28);
    uint64_t v17 = &a1[v16];
    uint64_t v18 = (uint64_t)a2 + v16;
    uint64_t v19 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  }
  return a1;
}

uint64_t sub_1000F48A8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    swift_bridgeObjectRelease();
    sub_1000A6240(*(void *)(a1 + 48), *(void *)(a1 + 56));
  }
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_1000F493C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x3D0], 8) = v7;
  uint64_t v8 = *(void *)(a2 + 24);
  id v9 = v6;
  id v10 = v7;
  if (v8)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v8;
    int v11 = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 36) = v11;
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
    uint64_t v12 = *(void *)(a2 + 48);
    unint64_t v13 = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    sub_1000A618C(v12, v13);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = v12;
    *(void *)(a1 + 56) = v13;
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v14;
    *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = *(_OWORD *)(a2 + 48);
  }
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

uint64_t sub_1000F4A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  id v9 = *(void **)(a1 + 8);
  id v10 = *(void **)(a2 + 8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x3D0], 8) = v10;
  id v11 = v10;

  uint64_t v12 = (_OWORD *)(a1 + 16);
  unint64_t v13 = (_OWORD *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v14)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      int v15 = *(_DWORD *)(a2 + 36);
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
      *(_DWORD *)(a1 + 36) = v15;
      *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
      uint64_t v16 = *(void *)(a2 + 48);
      unint64_t v17 = *(void *)(a2 + 56);
      sub_1000A618C(v16, v17);
      uint64_t v18 = *(void *)(a1 + 48);
      unint64_t v19 = *(void *)(a1 + 56);
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = v16;
      *(void *)(a1 + 56) = v17;
      sub_1000A6240(v18, v19);
    }
    else
    {
      sub_1000F4BCC(a1 + 16);
      long long v24 = *(_OWORD *)(a2 + 32);
      long long v23 = *(_OWORD *)(a2 + 48);
      _OWORD *v12 = *v13;
      *(_OWORD *)(a1 + 32) = v24;
      *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = v23;
    }
  }
  else if (v14)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    int v20 = *(_DWORD *)(a2 + 36);
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
    *(_DWORD *)(a1 + 36) = v20;
    *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
    uint64_t v21 = *(void *)(a2 + 48);
    unint64_t v22 = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    sub_1000A618C(v21, v22);
    *(void *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = v21;
    *(void *)(a1 + 56) = v22;
  }
  else
  {
    long long v25 = *v13;
    long long v26 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = v26;
    _OWORD *v12 = v25;
  }
  uint64_t v27 = *(int *)(a3 + 28);
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  uint64_t v30 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 24))(v28, v29, v30);
  return a1;
}

uint64_t sub_1000F4BCC(uint64_t a1)
{
  return a1;
}

_OWORD *sub_1000F4C20(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_1000F4CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x3D0], 8) = *(void *)(a2 + 8);

  if (!*(void *)(a1 + 24)) {
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v8)
  {
    sub_1000F4BCC(a1 + 16);
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = *(_OWORD *)(a2 + 48);
    goto LABEL_6;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_bridgeObjectRelease();
  int v9 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = v9;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x3D0], 8) = *(_OWORD *)(a2 + 48);
  sub_1000A6240(v10, v11);
LABEL_6:
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_1000F4DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F4DC4);
}

uint64_t sub_1000F4DC4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    int v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000F4E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F4E88);
}

void *sub_1000F4E88(void *result, uint64_t a2, int a3, uint64_t a4)
{
  long long v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for BTDiscoveredDevice()
{
  uint64_t result = qword_1002A9568;
  if (!qword_1002A9568) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000F4F7C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BTScanType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for BTScanType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F5188);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BTScanType()
{
  return &type metadata for BTScanType;
}

unint64_t sub_1000F51C4()
{
  unint64_t result = qword_1002A95A8;
  if (!qword_1002A95A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A95A8);
  }
  return result;
}

uint64_t sub_1000F5218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = *(void *)(a3 + 16) == a1 && *(void *)(a3 + 24) == a2;
  if (v4 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  {
    if (qword_1002A7B50 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100096F64(v6, (uint64_t)qword_1002A91C8);
    BOOL v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Scan transaction timed out.", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t result = (uint64_t)[*(id *)(a3 + 40) isScanning];
    if ((result & 1) != 0 || *(unsigned char *)(a3 + 72) == 1) {
      return sub_1000F41F4();
    }
  }
  return result;
}

uint64_t sub_1000F5340(char a1, char a2)
{
  if (qword_1002A7B50 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100096F64(v4, (uint64_t)qword_1002A91C8);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + _Block_object_dispose(&STACK[0x3D0], 8) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Setting XPC launch events for Bluetooth (enabled = %{BOOL}d; screenOff = %{BOOL}d)",
      (uint8_t *)v7,
      0xEu);
    swift_slowDealloc();
  }

  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t empty = xpc_array_create_empty();
  xpc_object_t v10 = xpc_array_create_empty();
  if (a1)
  {
    size_t v11 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(empty, v11, "DockKitAccessory");
    size_t v12 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(v10, v12, "BLEAdvertisementData");
    size_t v13 = XPC_ARRAY_APPEND.getter();
    xpc_array_set_string(v10, v13, "PassiveRSSI");
    if (a2)
    {
      size_t v14 = XPC_ARRAY_APPEND.getter();
      xpc_array_set_string(v10, v14, "ScreenOff");
    }
    xpc_dictionary_set_value(v8, "discoveryFlags", v10);
    xpc_dictionary_set_value(v8, "discoveryTypes", empty);
    xpc_dictionary_set_int64(v8, "bleRSSIThresholdHint", -70);
  }
  xpc_set_event();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1000F5578(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(_OWORD *)(v3 + 80) = 0u;
  uint64_t v8 = v3 + 80;
  *(void *)(v8 - 64) = 1851876211;
  *(void *)(v8 - 56) = 0xE400000000000000;
  *(void *)(v8 - 24) = 0;
  *(void *)(v8 - 16) = 0;
  *(_WORD *)(v8 - _Block_object_dispose(&STACK[0x3D0], 8) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 - 4_Block_object_dispose(&STACK[0x3D0], 8) = a2;
  *(void *)(v8 - 40) = a1;
  swift_beginAccess();
  id v9 = a1;
  id v10 = a2;
  sub_1000F5758(a3, v8);
  swift_endAccess();
  uint64_t v12 = *(void *)(v8 - 64);
  uint64_t v11 = *(void *)(v8 - 56);
  type metadata accessor for Transaction();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 16) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v13 + 80) = 0;
  *(unsigned char *)(v13 + 8_Block_object_dispose(&STACK[0x3D0], 8) = 1;
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  *(void *)(v13 + 64) = v12;
  *(void *)(v13 + 72) = v11;
  *(void *)(v13 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0;
  *(void *)(v13 + 56) = 0x403E000000000000;
  swift_unknownObjectWeakAssign();
  *(void *)(v8 - 32) = v13;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v14 = swift_retain();
  sub_100185E88(v14);
  swift_release();
  sub_1000A61E4(a3, &qword_1002A7C38);
  *(void *)(*(void *)(v4 + 48) + 4_Block_object_dispose(&STACK[0x3D0], 8) = &off_100276C78;
  swift_unknownObjectWeakAssign();
  return v4;
}

uint64_t sub_1000F5758(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002A7C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F57C0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F5800()
{
  return sub_1000F5218(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000F580C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000F581C()
{
  return swift_release();
}

uint64_t sub_1000F5824(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002A7C38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000F588C(void *a1@<X0>, void *a2@<X8>)
{
  id v8 = [a1 dockKitAccessoryPayloadData];
  if (!v8)
  {
    id v19 = [a1 bleAdvertisementData];
    if (!v19)
    {
LABEL_44:
      unint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      goto LABEL_45;
    }
    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    switch(v22 >> 62)
    {
      case 1uLL:
        LODWORD(v23) = HIDWORD(v20) - v20;
        if (!__OFSUB__(HIDWORD(v20), v20))
        {
          uint64_t v23 = (int)v23;
          goto LABEL_14;
        }
        __break(1u);
        goto LABEL_51;
      case 2uLL:
        uint64_t v30 = *(void *)(v20 + 16);
        uint64_t v29 = *(void *)(v20 + 24);
        BOOL v31 = __OFSUB__(v29, v30);
        uint64_t v23 = v29 - v30;
        if (!v31) {
          goto LABEL_14;
        }
LABEL_51:
        __break(1u);
        goto LABEL_52;
      case 3uLL:
        goto LABEL_42;
      default:
        uint64_t v23 = BYTE6(v22);
LABEL_14:
        if (v23 <= 25) {
          goto LABEL_42;
        }
        uint64_t v5 = sub_1001038B0((uint64_t)&off_1002749E8);
        unint64_t v4 = v32;
        char v33 = Data.subscript.getter();
        char v34 = Data.subscript.getter();
        sub_1000A618C(v20, v22);
        sub_100139554(2, v20, v22, &v62);
        sub_100152FDC(16, v62, v63, (uint64_t *)&v64);
        uint64_t v2 = (uint64_t)v64;
        unint64_t v3 = v65;
        if (sub_1001B0F38((uint64_t)v64, v65, v5, v4))
        {
          uint64_t v61 = v2;
          if (v34 == 33)
          {
            if (v33 == 29)
            {
              if (qword_1002A7B50 != -1) {
                swift_once();
              }
              uint64_t v53 = type metadata accessor for Logger();
              sub_100096F64(v53, (uint64_t)qword_1002A91C8);
              uint64_t v36 = Logger.logObject.getter();
              os_log_type_t v37 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v36, v37))
              {
                unint64_t v38 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v38 = 0;
                uint64_t v39 = "Found device with docking advertisement";
                goto LABEL_35;
              }
LABEL_48:
              unint64_t v54 = v3;
              uint64_t v58 = v5;
              unint64_t v60 = v4;
              goto LABEL_49;
            }
            if (v33 == 25)
            {
              if (qword_1002A7B50 != -1) {
                swift_once();
              }
              uint64_t v35 = type metadata accessor for Logger();
              sub_100096F64(v35, (uint64_t)qword_1002A91C8);
              uint64_t v36 = Logger.logObject.getter();
              os_log_type_t v37 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v36, v37))
              {
                unint64_t v38 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v38 = 0;
                uint64_t v39 = "Found device with pairing advertisement";
LABEL_35:
                _os_log_impl((void *)&_mh_execute_header, v36, v37, v39, v38, 2u);
                unint64_t v54 = v3;
                uint64_t v58 = v5;
                unint64_t v60 = v4;
                swift_slowDealloc();
LABEL_49:

                sub_1000A618C(v20, v22);
                sub_100139554(18, v20, v22, &v62);
                sub_1001B7C9C(v62, v63, (uint64_t *)&v64);
                id v19 = v64;
                unint64_t v24 = v65;
                uint64_t v25 = v66;
                uint64_t v26 = v67;
                uint64_t v27 = v68;
                uint64_t v28 = v69;
                sub_1000A6240(v20, v22);
                sub_1000A6240(v61, v54);
                sub_1000A6240(v58, v60);
                goto LABEL_45;
              }
              goto LABEL_48;
            }
            if (qword_1002A7B50 != -1) {
              swift_once();
            }
            uint64_t v55 = type metadata accessor for Logger();
            sub_100096F64(v55, (uint64_t)qword_1002A91C8);
            uint64_t v41 = Logger.logObject.getter();
            os_log_type_t v56 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v41, v56))
            {
              unint64_t v59 = v3;
              uint64_t v57 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)uint64_t v57 = 16777472;
              LOBYTE(v64) = v33;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v41, v56, "Invalid device advertisement length: %hhu", v57, 5u);
              goto LABEL_40;
            }
          }
          else
          {
            if (qword_1002A7B50 != -1) {
              swift_once();
            }
            uint64_t v48 = type metadata accessor for Logger();
            sub_100096F64(v48, (uint64_t)qword_1002A91C8);
            uint64_t v41 = Logger.logObject.getter();
            os_log_type_t v49 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v41, v49))
            {
              unint64_t v59 = v3;
              NSString v50 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)NSString v50 = 16777472;
              LOBYTE(v64) = v34;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v41, v49, "Inavlid device advertisement type: %hhu", v50, 5u);
LABEL_40:
              swift_slowDealloc();
              sub_1000A6240(v5, v4);

              unint64_t v47 = v59;
              uint64_t v46 = v61;
LABEL_41:
              sub_1000A6240(v46, v47);
LABEL_42:
              sub_1000A6240(v20, v22);
              goto LABEL_43;
            }
          }
          sub_1000A6240(v20, v22);
          sub_1000A6240(v61, v3);
          uint64_t v51 = v5;
          unint64_t v52 = v4;
        }
        else
        {
          if (qword_1002A7B50 != -1) {
LABEL_52:
          }
            swift_once();
          uint64_t v40 = type metadata accessor for Logger();
          sub_100096F64(v40, (uint64_t)qword_1002A91C8);
          sub_1000A618C(v2, v3);
          sub_1000A618C(v2, v3);
          uint64_t v41 = Logger.logObject.getter();
          os_log_type_t v42 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v41, v42))
          {
            uint64_t v43 = (uint8_t *)swift_slowAlloc();
            uint64_t v64 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v43 = 136315138;
            uint64_t v44 = sub_100139704(v2, v3);
            uint64_t v62 = sub_1000993AC(v44, v45, (uint64_t *)&v64);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1000A6240(v2, v3);
            sub_1000A6240(v2, v3);
            _os_log_impl((void *)&_mh_execute_header, v41, v42, "Invalid UUID: %s", v43, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            sub_1000A6240(v5, v4);

            uint64_t v46 = v2;
            unint64_t v47 = v3;
            goto LABEL_41;
          }
          sub_1000A6240(v20, v22);
          sub_1000A6240(v2, v3);
          sub_1000A6240(v5, v4);
          sub_1000A6240(v2, v3);
          uint64_t v51 = v2;
          unint64_t v52 = v3;
        }
        sub_1000A6240(v51, v52);

LABEL_43:
        id v19 = 0;
        goto LABEL_44;
    }
  }
  id v9 = v8;
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  if (qword_1002A7B50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100096F64(v13, (uint64_t)qword_1002A91C8);
  sub_1000A618C(v10, v12);
  sub_1000A618C(v10, v12);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v17 = sub_100139704(v10, v12);
    uint64_t v62 = sub_1000993AC(v17, v18, (uint64_t *)&v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A6240(v10, v12);
    sub_1000A6240(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "New device with AdvData: 0x%s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1000A6240(v10, v12);
    sub_1000A6240(v10, v12);
  }

  sub_1001B7C9C(v10, v12, (uint64_t *)&v64);
  id v19 = v64;
  unint64_t v24 = v65;
  uint64_t v25 = v66;
  uint64_t v26 = v67;
  uint64_t v27 = v68;
  uint64_t v28 = v69;
LABEL_45:
  *a2 = v19;
  a2[1] = v24;
  a2[2] = v25;
  a2[3] = v26;
  a2[4] = v27;
  a2[5] = v28;
}

uint64_t sub_1000F61A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8((uint64_t *)&unk_1002A8F08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F620C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F6244()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1000A6240(*(void *)(v0 + 72), *(void *)(v0 + 80));

  return _swift_deallocObject(v0, 88, 7);
}

void sub_1000F629C(void *a1, uint64_t a2)
{
  sub_1000F3264(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), v2 + 40);
}

void *sub_1000F62AC(void *a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

id sub_1000F62EC(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  unint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BTDiscoveredDevice();
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  id result = [a1 identifier];
  if (result)
  {

    void *v14 = a1;
    v14[1] = a2;
    sub_1000F61A4((uint64_t)a3, (uint64_t)(v14 + 2));
    id v16 = a1;
    id v17 = a2;
    sub_1000F62AC(a3, sub_1000EA048);
    static Date.now.getter();
    if (qword_1002A7C20 != -1) {
      swift_once();
    }
    id result = [v16 identifier];
    if (result)
    {
      unint64_t v18 = result;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      sub_1001DAEA0(v19, v21, (uint64_t)v14);
      swift_bridgeObjectRelease();
      if (qword_1002A7C00 != -1) {
        swift_once();
      }
      unint64_t v22 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
      uint64_t v23 = *(void **)&v22[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_workQueue];
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = v22;
      aBlock[4] = sub_1000E9904;
      aBlock[5] = v24;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1001468DC;
      void aBlock[3] = &unk_100276D58;
      uint64_t v25 = _Block_copy(aBlock);
      uint64_t v26 = v22;
      id v27 = v23;
      static DispatchQoS.unspecified.getter();
      BOOL v31 = &_swiftEmptyArrayStorage;
      sub_1000F6784((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000992E8((uint64_t *)&unk_1002A7F60);
      sub_100099CB8();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v25);

      (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v6);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v29);
      sub_1000E9FEC((uint64_t)v14);
      return (id)swift_release();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

unint64_t sub_1000F6734()
{
  unint64_t result = qword_1002AAA60;
  if (!qword_1002AAA60)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002AAA60);
  }
  return result;
}

void sub_1000F6774(void *a1)
{
}

void sub_1000F677C(uint64_t a1)
{
  sub_1000F27C4(a1, v1);
}

uint64_t sub_1000F6784(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F67F0()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000F68C0, 0, 0);
}

uint64_t sub_1000F68C0()
{
  uint64_t v1 = *(void **)(v0[2] + 32);
  if (!v1) {
    goto LABEL_12;
  }
  id v2 = [v1 primaryAccessory];
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = v0[2];

  if (*(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController))
  {
    uint64_t v4 = v0[2];
    uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager;
    if (*(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager))
    {
      (*(void (**)(void, uint64_t, void))(v0[4] + 16))(v0[5], v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v0[3]);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        id v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Diagnostics manager is already present", v8, 2u);
        swift_slowDealloc();
      }
      uint64_t v10 = v0[4];
      uint64_t v9 = v0[5];
      uint64_t v11 = v0[3];

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    else
    {
      uint64_t v13 = *(void **)(v4 + 40);
      type metadata accessor for AccessoryDiagnosticsManager();
      uint64_t v14 = (void *)swift_allocObject();
      swift_weakInit();
      v14[4] = 0;
      void v14[5] = 0;
      swift_retain();
      id v15 = v13;
      Logger.init(subsystem:category:)();
      swift_weakAssign();
      swift_release();
      v14[3] = v15;
      *(void *)(v4 + v5) = v14;
      swift_release();
    }
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = v0[1];
    __asm { BRAA            X2, X16 }
  }
  uint64_t v12 = (void *)swift_task_alloc();
  v0[7] = v12;
  void *v12 = v0;
  v12[1] = sub_1000F6B98;
  _OWORD v12[2] = v0[2];
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000F6DE4, 0, 0);
}

uint64_t sub_1000F6B98()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000F6C94, 0, 0);
}

uint64_t sub_1000F6C94()
{
  (*(void (**)(void, uint64_t, void))(v0[4] + 16))(v0[6], v0[2] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v0[3]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Not creating Diagnostics manager for accessory without a data stream controlle", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7(0);
}

uint64_t sub_1000F6DC4()
{
  *(void *)(v1 + 16) = v0;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000F6DE4, 0, 0);
}

uint64_t sub_1000F6DE4()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager;
  v0[3] = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager;
  uint64_t v3 = *(void *)(v1 + v2);
  v0[4] = v3;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 32);
    v0[5] = v4;
    uint64_t v5 = swift_retain();
    if (v4)
    {
      swift_retain();
      uint64_t v6 = (void *)swift_task_alloc();
      v0[6] = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_1000F6F00;
      return sub_100169C58();
    }
    *(void *)(v5 + 32) = 0;
    swift_release();
    uint64_t v1 = v0[2];
    uint64_t v2 = v0[3];
  }
  *(void *)(v1 + v2) = 0;
  swift_release();
  id v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000F6F00()
{
  swift_task_dealloc();
  swift_release();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000F7018, 0, 0);
}

uint64_t sub_1000F7018()
{
  *(void *)(v0[4] + 32) = 0;
  swift_release();
  swift_release();
  *(void *)(v0[2] + v0[3]) = 0;
  swift_release();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000F70A4(uint64_t a1)
{
  uint64_t v27 = a1;
  uint64_t v2 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = v1;
  uint64_t v5 = (uint64_t *)&v1[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_connectOnActions];
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v25 = *(void *)(*v5 + 16);
  if (v25)
  {
    unint64_t v22 = v5;
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    uint64_t v23 = v6;
    uint64_t v24 = (char *)&type metadata for () + 8;
    uint64_t v9 = v26;
    uint64_t v8 = v27;
    while (1)
    {
      uint64_t v10 = swift_allocObject();
      long long v28 = *(_OWORD *)(v6 + 16 * v7 + 32);
      *(_OWORD *)(v10 + 16) = v28;
      uint64_t v11 = type metadata accessor for TaskPriority();
      uint64_t v12 = *(void *)(v11 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v4, 1, 1, v11);
      uint64_t v13 = (void *)swift_allocObject();
      void v13[2] = 0;
      uint64_t v14 = v13 + 2;
      v13[3] = 0;
      v13[4] = &unk_1002A9648;
      uint64_t v13[5] = v10;
      v13[6] = v9;
      v13[7] = v8;
      int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v4, 1, v11);
      swift_retain();
      swift_retain();
      id v16 = v9;
      swift_errorRetain();
      if (v15 == 1)
      {
        sub_1000F8504((uint64_t)v4);
        if (!*v14) {
          goto LABEL_9;
        }
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v4, v11);
        if (!*v14)
        {
LABEL_9:
          uint64_t v17 = 0;
          uint64_t v19 = 0;
          goto LABEL_10;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v17 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v19 = v18;
      swift_unknownObjectRelease();
LABEL_10:
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = &unk_1002A9650;
      *(void *)(v20 + 24) = v13;
      if (v19 | v17)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = v17;
        uint64_t v32 = v19;
      }
      uint64_t v6 = v23;
      ++v7;
      swift_task_create();
      swift_release();
      swift_release();
      if (v25 == v7)
      {
        swift_bridgeObjectRelease();
        uint64_t v5 = v22;
        break;
      }
    }
  }
  *uint64_t v5 = (uint64_t)_swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

id sub_1000F73D4(id result, uint64_t a2)
{
  if (a2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t result = [result services];
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  sub_100099C7C(0, (unint64_t *)&unk_1002A8F30);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v6 = v2 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext;
  swift_beginAccess();
  if (!*(void *)(v6 + 8)) {
    return (id)swift_bridgeObjectRelease();
  }
  *(void *)(v6 + _Block_object_dispose(&STACK[0x3D0], 8) = v5;
  swift_bridgeObjectRetain();
  uint64_t result = (id)swift_bridgeObjectRelease();
  if (!*(void *)(v6 + 8)) {
    goto LABEL_22;
  }
  if (*(unsigned char *)(v6 + 80))
  {
    if (*(void *)v6 - 1 <= 1)
    {
      if (v5 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t result = (id)swift_bridgeObjectRelease();
        if (v10) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v10 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v10)
        {
LABEL_12:
          if (v10 >= 1)
          {
            for (uint64_t i = 0; i != v10; ++i)
            {
              if ((v5 & 0xC000000000000001) != 0) {
                id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v12 = *(id *)(v5 + 8 * i + 32);
              }
              uint64_t v13 = v12;
              [v3 discoverCharacteristics:0 forService:v12];
            }
            return (id)swift_bridgeObjectRelease();
          }
          __break(1u);
LABEL_22:
          __break(1u);
          return result;
        }
      }
    }
    return (id)swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate);
  if (v7) {
    [v7 didFinishDiscovery:0];
  }
  uint64_t v8 = *(void *)v6;
  uint64_t v9 = *(void *)(v6 + 8);
  *(_OWORD *)uint64_t v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(unsigned char *)(v6 + 80) = 0;
  return (id)sub_1000F8FDC(v8, v9);
}

void sub_1000F7650(void *a1, id a2, uint64_t a3)
{
  if (a3) {
    return;
  }
  uint64_t v5 = v3;
  if (qword_1002A7B80 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1002B14E0;
  id v8 = [a2 UUID];
  uint64_t v9 = v8;
  if (*(void *)(v7 + 16) && (unint64_t v10 = sub_10016DED8((uint64_t)v8), (v11 & 1) != 0))
  {
    id v12 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v10);
    unint64_t v13 = v12[1];
    uint64_t v68 = *v12;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v68 = 0;
    unint64_t v13 = 0xE000000000000000;
  }

  id v14 = a2;
  swift_bridgeObjectRetain();
  int v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  uint64_t v62 = v14;
  uint64_t v63 = v5;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v17 = (void *)swift_slowAlloc();
    v71[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412546;
    id v72 = [v14 UUID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v17 = v72;

    *(_WORD *)(v4 + 12) = 2080;
    uint64_t v18 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0) {
      uint64_t v18 = v68 & 0xFFFFFFFFFFFFLL;
    }
    if (v18)
    {
      id v72 = (id)v68;
      unint64_t v73 = v13;
      swift_bridgeObjectRetain();
      v19._uint64_t countAndFlagsBits = 0x6369767265735B20;
      v19._object = (void *)0xEA00000000005D65;
      String.append(_:)(v19);
      uint64_t v20 = v68;
      unint64_t v21 = v13;
    }
    else
    {
      unint64_t v21 = 0x8000000100236A30;
      uint64_t v20 = 0xD000000000000012;
    }
    id v72 = (id)sub_1000993AC(v20, v21, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%@ %s", (uint8_t *)v4, 0x16u);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  id v22 = [v14 characteristics];
  if (v22)
  {
    uint64_t v23 = v22;
    sub_100099C7C(0, (unint64_t *)&unk_1002A9F60);
    uint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!((unint64_t)v24 >> 62)) {
      goto LABEL_19;
    }
LABEL_38:
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v25) {
      goto LABEL_39;
    }
    goto LABEL_20;
  }
  uint64_t v24 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
    goto LABEL_38;
  }
LABEL_19:
  uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v25) {
    goto LABEL_39;
  }
LABEL_20:
  if (v25 < 1)
  {
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v26 = 0;
  unint64_t v27 = v24 & 0xC000000000000001;
  long long v28 = &selRef_keyEnumerator;
  uint64_t v65 = v25;
  uint64_t v66 = v24;
  unint64_t v64 = v24 & 0xC000000000000001;
  do
  {
    if (v27) {
      id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v29 = *(id *)(v24 + 8 * v26 + 32);
    }
    id v30 = v29;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      char v34 = (void *)swift_slowAlloc();
      id v72 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 138412546;
      id v35 = [v30 UUID];
      *(void *)(v33 + 4) = v35;
      *char v34 = v35;

      *(_WORD *)(v33 + 12) = 2080;
      if (qword_1002A7B88 != -1) {
        swift_once();
      }
      uint64_t v36 = qword_1002B14E8;
      id v37 = [v30 UUID];
      unint64_t v38 = v37;
      if (*(void *)(v36 + 16))
      {
        unint64_t v39 = sub_10016DED8((uint64_t)v37);
        uint64_t v40 = 0x6E776F6E6B6E755BLL;
        unint64_t v41 = 0xE90000000000005DLL;
        if (v42)
        {
          uint64_t v43 = (uint64_t *)(*(void *)(v36 + 56) + 16 * v39);
          uint64_t v40 = *v43;
          unint64_t v41 = v43[1];
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        uint64_t v40 = 0x6E776F6E6B6E755BLL;
        unint64_t v41 = 0xE90000000000005DLL;
      }

      *(void *)(v33 + 14) = sub_1000993AC(v40, v41, (uint64_t *)&v72);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "  %@ %s", (uint8_t *)v33, 0x16u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v25 = v65;
      uint64_t v24 = v66;
      unint64_t v27 = v64;
      long long v28 = &selRef_keyEnumerator;
    }
    else
    {
    }
    if (([v30 v28[190]] & 0x10) != 0) {
      [a1 setNotifyValue:1 forCharacteristic:v30];
    }
    ++v26;
  }
  while (v25 != v26);
LABEL_39:
  swift_bridgeObjectRelease();
  uint64_t v4 = v63;
  uint64_t v25 = (uint64_t)sub_10013AAEC();
  unint64_t v45 = (uint64_t *)(v44 + 8);
  if (!*(void *)(v44 + 8))
  {
    ((void (*)(id *, void))v25)(&v72, 0);
    goto LABEL_44;
  }
  id v46 = v62;
  uint64_t v24 = sub_1000F8A28(v45);

  if ((unint64_t)*v45 >> 62)
  {
LABEL_50:
    swift_bridgeObjectRetain();
    uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v47 >= v24) {
      goto LABEL_42;
    }
LABEL_51:
    __break(1u);
    return;
  }
  uint64_t v47 = *(void *)((*v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v47 < v24) {
    goto LABEL_51;
  }
LABEL_42:
  sub_1001A1EC0(v24, v47);
  ((void (*)(id *, void))v25)(&v72, 0);
LABEL_44:
  uint64_t v48 = v4 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_discoveryContext;
  swift_beginAccess();
  uint64_t v49 = *(void *)(v48 + 8);
  if (v49)
  {
    char v69 = *(unsigned char *)(v48 + 80);
    uint64_t v51 = *(void *)(v48 + 64);
    uint64_t v50 = *(void *)(v48 + 72);
    uint64_t v53 = *(void *)(v48 + 48);
    uint64_t v52 = *(void *)(v48 + 56);
    uint64_t v55 = *(void *)(v48 + 32);
    uint64_t v54 = *(void *)(v48 + 40);
    uint64_t v56 = *(void *)(v48 + 16);
    uint64_t v57 = *(void *)(v48 + 24);
    uint64_t v70 = *(void *)v48;
    LOBYTE(v72) = *(void *)v48;
    unint64_t v73 = v49;
    uint64_t v74 = v56;
    uint64_t v75 = v57;
    uint64_t v76 = v55;
    uint64_t v77 = v54;
    uint64_t v78 = v53;
    uint64_t v79 = v52;
    uint64_t v80 = v51;
    uint64_t v81 = v50;
    char v82 = v69 & 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v52) = sub_10013A69C();
    LOBYTE(v61) = v69;
    sub_1000F8FDC(v70, v49);
    if (v52)
    {
      uint64_t v58 = *(void **)(v63 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate);
      if (v58) {
        [v58 didFinishDiscovery:0 v51 v50 v61];
      }
      uint64_t v59 = *(void *)v48;
      uint64_t v60 = *(void *)(v48 + 8);
      *(_OWORD *)uint64_t v48 = 0u;
      *(_OWORD *)(v48 + 16) = 0u;
      *(_OWORD *)(v48 + 32) = 0u;
      *(_OWORD *)(v48 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0u;
      *(_OWORD *)(v48 + 64) = 0u;
      *(unsigned char *)(v48 + 80) = 0;
      sub_1000F8FDC(v59, v60);
    }
  }
}

void sub_1000F7FB8(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void (*a6)(id, void *))
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a1;
  id v13 = a5;
  a6(v11, a5);
}

uint64_t sub_1000F80B4(uint64_t a1, uint64_t a2, int *a3)
{
  v3[2] = a1;
  v3[3] = a2;
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[4] = v4;
  void *v4 = v3;
  v4[1] = sub_1000DD9C8;
  return v6();
}

uint64_t sub_1000F81A0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)a4 + *a4);
  id v10 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v10;
  void *v10 = v7;
  v10[1] = sub_1000A69C4;
  return v12(a6, a7);
}

uint64_t sub_1000F8288()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F82C0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(int **)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = sub_1000A69C4;
  id v8 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002A9638 + dword_1002A9638);
  return v8(a1, a2, v6);
}

uint64_t sub_1000F8384()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_errorRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000F83D4()
{
  uint64_t v2 = (int *)v0[4];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1000A5ED8;
  id v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v2 + *v2);
  uint64_t v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_1000A69C4;
  return v8(v4, v3);
}

uint64_t sub_1000F8504(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002A8800);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F8564(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000A5ED8;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1002ACBD0 + dword_1002ACBD0);
  return v6(a1, v4);
}

void *sub_1000F861C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_hapPeripheral;
  uint64_t result = *(void **)&v3[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_hapPeripheral];
  if (!result)
  {
    uint64_t v34 = a1;
    id v12 = v3;
    swift_bridgeObjectRetain_n();
    uint64_t v13 = v12;
    id v14 = Logger.logObject.getter();
    int v15 = static os_log_type_t.default.getter();
    BOOL v16 = os_log_type_enabled(v14, (os_log_type_t)v15);
    uint64_t v35 = v7;
    if (v16)
    {
      int v33 = v15;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v37 = v32;
      *(_DWORD *)uint64_t v17 = 136315394;
      uint64_t v18 = *(void **)&v13[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
      if (!v18) {
        goto LABEL_11;
      }
      v31[1] = v17 + 4;
      id v19 = [v18 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v20 = UUID.uuidString.getter();
      unint64_t v22 = v21;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v6);
      uint64_t v36 = sub_1000993AC(v20, v22, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_1000993AC(v34, a2, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v33, "Creating HAP BLE Peripheral for %s with identifier %s.", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    sub_10013D3A0();
    uint64_t v23 = *(void **)&v13[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral];
    if (v23)
    {
      id v24 = [v23 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v25 = objc_allocWithZone((Class)HAPBLEPeripheral);
      swift_bridgeObjectRetain();
      NSString v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v29 = [v25 initWithName:v26 peripheralUUID:isa identifier:v28];

      (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v6);
      id v30 = *(void **)&v3[v10];
      *(void *)&v3[v10] = v29;

      uint64_t result = *(void **)&v3[v10];
      if (!result) {
        return result;
      }
      goto LABEL_8;
    }
    __break(1u);
LABEL_11:

    uint64_t result = (void *)swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
LABEL_8:
  [result setCbPeripheral:*(void *)&v3[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]];
  return *(void **)&v3[v10];
}

uint64_t sub_1000F8A28(uint64_t *a1)
{
  unint64_t v2 = *a1;
  if ((unint64_t)*a1 >> 62) {
    goto LABEL_62;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v3)
  {
LABEL_3:
    sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
    unint64_t v4 = 0;
    while (1)
    {
      id v5 = (v2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(v2 + 8 * v4 + 32);
      uint64_t v6 = v5;
      char v7 = static NSObject.== infix(_:_:)();

      if (v7) {
        break;
      }
      unint64_t v8 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        swift_bridgeObjectRetain();
        uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
        if (!v3) {
          goto LABEL_10;
        }
        goto LABEL_3;
      }
      ++v4;
      if (v8 == v3) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
    }
    else if (!((unint64_t)*a1 >> 62))
    {
      if (v10 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_16:
        for (unint64_t i = v4 + 5; ; ++i)
        {
          unint64_t v2 = i - 4;
          uint64_t v12 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if ((v2 & 0x8000000000000000) != 0) {
              goto LABEL_52;
            }
            if (v2 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_53;
            }
            id v13 = *(id *)(v12 + 8 * i);
          }
          id v14 = v13;
          char v15 = static NSObject.== infix(_:_:)();

          if (v15) {
            goto LABEL_42;
          }
          if (v2 != v4) {
            break;
          }
LABEL_41:
          if (__OFADD__(v4++, 1)) {
            goto LABEL_55;
          }
LABEL_42:
          unint64_t v26 = i - 3;
          if (__OFADD__(v2, 1)) {
            goto LABEL_54;
          }
          if ((unint64_t)*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v27 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          if (v26 == v27) {
            return v4;
          }
        }
        uint64_t v16 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v16 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_27:
            if ((v2 & 0x8000000000000000) != 0) {
              goto LABEL_58;
            }
            if (v2 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_59;
            }
            id v18 = *(id *)(v16 + 8 * i);
            goto LABEL_30;
          }
        }
        else
        {
          if ((v4 & 0x8000000000000000) != 0) {
            goto LABEL_56;
          }
          if (v4 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_57;
          }
          id v17 = *(id *)(v16 + 8 * v4 + 32);
          if ((v16 & 0xC000000000000001) == 0) {
            goto LABEL_27;
          }
        }
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v16 = *a1;
LABEL_30:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v16;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v16 < 0 || (v16 & 0x4000000000000000) != 0)
        {
          uint64_t v16 = sub_1001137FC(v16);
          *a1 = v16;
        }
        uint64_t v20 = *(void **)((v16 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20);
        *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20) = v18;

        specialized Array._endMutation()();
        uint64_t v21 = *a1;
        int v22 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v21;
        if (!v22 || v21 < 0 || (v21 & 0x4000000000000000) != 0)
        {
          uint64_t v21 = sub_1001137FC(v21);
          *a1 = v21;
        }
        if ((v2 & 0x8000000000000000) != 0) {
          goto LABEL_60;
        }
        uint64_t v23 = v21 & 0xFFFFFFFFFFFFFF8;
        if (v2 >= *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_61;
        }
        id v24 = *(void **)(v23 + 8 * i);
        *(void *)(v23 + 8 * i) = v17;

        specialized Array._endMutation()();
        goto LABEL_41;
      }
      return v4;
    }
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 != v29) {
      goto LABEL_16;
    }
    return v4;
  }
LABEL_10:
  swift_bridgeObjectRelease();
  if (!((unint64_t)*a1 >> 62)) {
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t sub_1000F8DF8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate);
  if (v3)
  {
    id v5 = (void *)result;
    swift_unknownObjectRetain();
    id v6 = [v5 UUID];
    Class isa = (Class)[v5 value];
    if (isa)
    {
      uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;

      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000A6240(v8, v10);
    }
    if (a2) {
      id v11 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      id v11 = 0;
    }
    [v3 didRead:v6 value:isa error:v11];

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000F8F1C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd8BTDevice_delegate);
  if (v3)
  {
    id v5 = (void *)result;
    swift_unknownObjectRetain();
    id v6 = [v5 UUID];
    if (a2) {
      char v7 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      char v7 = 0;
    }
    [v3 didWrite:v6 error:v7];

    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000F8FDC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1000F908C(void *a1)
{
}

void sub_1000F9098(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  id v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    id v7 = a1;
    id v8 = [v7 accessories];
    if (v8)
    {
      unint64_t v9 = v8;
      sub_1000F9788();
      uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v10 & 0xC000000000000001) == 0)
      {
        if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_10;
        }
        __break(1u);
      }
LABEL_20:
      id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_11;
    }
    goto LABEL_22;
  }
  id v11 = *(void **)(v1 + 32);
  if (v11)
  {
    id v7 = v11;
    id v12 = [v7 accessories];
    if (!v12)
    {
LABEL_23:
      __break(1u);
      return;
    }
    id v13 = v12;
    sub_1000F9788();
    uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v10 & 0xC000000000000001) != 0) {
      goto LABEL_20;
    }
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_10:
      id v14 = *(id *)(v10 + 32);
LABEL_11:
      char v15 = v14;
      swift_bridgeObjectRelease();
      id v16 = [v15 productData];

      if (v16)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        String.index(_:offsetBy:)();
        String.subscript.getter();
        swift_bridgeObjectRelease();
        static String._fromSubstring(_:)();
        swift_bridgeObjectRelease();
      }

      return;
    }
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v3);
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Nil HAP Server", v19, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1000F93D8(void *a1)
{
  if (a1)
  {
    id v2 = a1;
    id v3 = [v2 accessories];
    if (v3)
    {
      uint64_t v4 = v3;
      sub_1000F9788();
      uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v5 & 0xC000000000000001) == 0)
      {
        if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_10;
        }
        __break(1u);
      }
LABEL_18:
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_11;
    }
    goto LABEL_20;
  }
  id v6 = *(void **)(v1 + 32);
  if (!v6) {
    return;
  }
  id v2 = v6;
  id v7 = [v2 accessories];
  if (!v7)
  {
LABEL_21:
    __break(1u);
    return;
  }
  id v8 = v7;
  sub_1000F9788();
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v5 & 0xC000000000000001) != 0) {
    goto LABEL_18;
  }
  if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_10:
  id v9 = *(id *)(v5 + 32);
LABEL_11:
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  id v11 = [v10 productData];

  if (v11)
  {
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    unint64_t v15 = String.index(_:offsetBy:)();
    sub_1000F97C8(v15, v12, v14);
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
  }
}

void sub_1000F95DC(void *a1)
{
}

void sub_1000F95E8(void *a1, SEL *a2)
{
  if (!a1)
  {
    id v8 = *(void **)(v2 + 32);
    if (!v8) {
      return;
    }
    id v4 = v8;
    id v9 = [v4 accessories];
    if (!v9)
    {
LABEL_20:
      __break(1u);
      return;
    }
    uint64_t v10 = v9;
    sub_1000F9788();
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if ((v7 & 0xC000000000000001) != 0) {
      goto LABEL_17;
    }
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_10:
      id v11 = *(id *)(v7 + 32);
      goto LABEL_11;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id v4 = a1;
  id v5 = [v4 accessories];
  if (!v5) {
    goto LABEL_19;
  }
  id v6 = v5;
  sub_1000F9788();
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((v7 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_10;
    }
    __break(1u);
  }
LABEL_17:
  id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_11:
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  id v13 = [v12 *a2];

  if (v13)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
  }
}

unint64_t sub_1000F9788()
{
  unint64_t result = qword_1002A9780;
  if (!qword_1002A9780)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, &qword_1002A9780);
  }
  return result;
}

unint64_t sub_1000F97C8(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

void sub_1000F9814()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    id v2 = v1;
    id v3 = [v2 accessories];
    if (v3)
    {
      id v4 = v3;
      sub_1000F9788();
      uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((v5 & 0xC000000000000001) != 0)
      {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_6:
        uint64_t v7 = v6;
        swift_bridgeObjectRelease();
        id v8 = [v7 firmwareVersion];

        if (v8)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          id v9 = objc_allocWithZone((Class)HMFSoftwareVersion);
          NSString v10 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v9 initWithVersionString:v10];
        }
        else
        {
        }
        return;
      }
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        id v6 = *(id *)(v5 + 32);
        goto LABEL_6;
      }
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1000F9954()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000F9A24, 0, 0);
}

uint64_t sub_1000F9A24()
{
  uint64_t v1 = *(void **)(v0[2] + 32);
  if (!v1) {
    goto LABEL_12;
  }
  id v2 = [v1 primaryAccessory];
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v3 = v0[2];

  if (*(void *)(v3 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_dataStreamController))
  {
    uint64_t v4 = v0[2];
    uint64_t v5 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager;
    if (*(void *)(v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager))
    {
      (*(void (**)(void, uint64_t, void))(v0[4] + 16))(v0[5], v4 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v0[3]);
      id v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        id v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Accessory Description manager is already present", v8, 2u);
        swift_slowDealloc();
      }
      uint64_t v10 = v0[4];
      uint64_t v9 = v0[5];
      uint64_t v11 = v0[3];

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    else
    {
      id v13 = *(void **)(v4 + 40);
      type metadata accessor for AccessoryDescriptionManager();
      uint64_t v14 = swift_allocObject();
      swift_weakInit();
      *(void *)(v14 + 32) = 0;
      swift_retain();
      id v15 = v13;
      Logger.init(subsystem:category:)();
      swift_weakAssign();
      swift_release();
      *(void *)(v14 + 24) = v15;
      *(void *)(v4 + v5) = v14;
      swift_release();
    }
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = v0[1];
    __asm { BRAA            X2, X16 }
  }
  uint64_t v12 = (void *)swift_task_alloc();
  v0[7] = v12;
  void *v12 = v0;
  v12[1] = sub_1000F9CFC;
  _OWORD v12[2] = v0[2];
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000F9F48, 0, 0);
}

uint64_t sub_1000F9CFC()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000F9DF8, 0, 0);
}

uint64_t sub_1000F9DF8()
{
  (*(void (**)(void, uint64_t, void))(v0[4] + 16))(v0[6], v0[2] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_logger, v0[3]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Not creating Accessory Description manager for accessory without a data stream controller", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7(0);
}

uint64_t sub_1000F9F28()
{
  *(void *)(v1 + 16) = v0;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000F9F48, 0, 0);
}

uint64_t sub_1000F9F48()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager;
  v0[3] = OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_accessoryDescriptionManager;
  uint64_t v3 = *(void *)(v1 + v2);
  v0[4] = v3;
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 32);
    v0[5] = v4;
    uint64_t v5 = swift_retain();
    if (v4)
    {
      swift_retain();
      uint64_t v6 = (void *)swift_task_alloc();
      v0[6] = v6;
      *uint64_t v6 = v0;
      v6[1] = sub_1000F6F00;
      return sub_1001D6604();
    }
    *(void *)(v5 + 32) = 0;
    swift_release();
    uint64_t v1 = v0[2];
    uint64_t v2 = v0[3];
  }
  *(void *)(v1 + v2) = 0;
  swift_release();
  id v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1000FA064()
{
  *(void *)(v1 + 120) = v0;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000FA084, 0, 0);
}

uint64_t sub_1000FA084()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_currentBulkSendSession);
  *(void *)(v0 + 12_Block_object_dispose(&STACK[0x3D0], 8) = v2;
  if (v2)
  {
    int v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendComplete);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000FA2C8;
    uint64_t v4 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 8_Block_object_dispose(&STACK[0x3D0], 8) = 0x40000000;
    *(void *)(v0 + 96) = sub_1000FA69C;
    *(void *)(v0 + 104) = &unk_100276F88;
    *(void *)(v0 + 112) = v4;
    uint64_t v5 = (void *)swift_unknownObjectRetain();
    if (v3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 5;
    }
    [v5 cancelWithReason:v6 completion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
  else
  {
    if (*(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback))
    {
      uint64_t v7 = type metadata accessor for Errors();
      sub_1000C8E10((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      uint64_t v8 = swift_allocError();
      void *v9 = 0;
      v9[1] = 0xE000000000000000;
      (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v9, enum case for Errors.OperationCancelled(_:), v7);
      sub_1000FC660(v8);
      swift_errorRelease();
    }
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      sub_1000FDEC4(*(void **)(v0 + 120), Strong);
      swift_release();
    }
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_1000FA2C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 136) = v1;
  if (v1) {
    uint64_t v2 = sub_1000FA530;
  }
  else {
    uint64_t v2 = sub_1000FA3D8;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_1000FA3D8()
{
  swift_unknownObjectRelease();
  if (*(void *)(*(void *)(v0 + 120)
                 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback))
  {
    uint64_t v1 = type metadata accessor for Errors();
    sub_1000C8E10((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v2 = swift_allocError();
    *int v3 = 0;
    v3[1] = 0xE000000000000000;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v1 - 8) + 104))(v3, enum case for Errors.OperationCancelled(_:), v1);
    sub_1000FC660(v2);
    swift_errorRelease();
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_1000FDEC4(*(void **)(v0 + 120), Strong);
    swift_release();
  }
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000FA530()
{
  swift_willThrow();
  swift_errorRelease();
  swift_unknownObjectRelease();
  if (*(void *)(*(void *)(v0 + 120)
                 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback))
  {
    uint64_t v1 = type metadata accessor for Errors();
    sub_1000C8E10((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v2 = swift_allocError();
    *int v3 = 0;
    v3[1] = 0xE000000000000000;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v1 - 8) + 104))(v3, enum case for Errors.OperationCancelled(_:), v1);
    sub_1000FC660(v2);
    swift_errorRelease();
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    sub_1000FDEC4(*(void **)(v0 + 120), Strong);
    swift_release();
  }
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1000FA69C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_1000992E8(&qword_1002A8F70);
    uint64_t v4 = swift_allocError();
    *uint64_t v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    return _swift_continuation_throwingResume(v7);
  }
}

uint64_t sub_1000FA734()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)&v0[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_currentBulkSendSession];
  if (v5)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v0;
    *(void *)(v6 + 24) = v5;
    int v22 = sub_1000FE870;
    uint64_t v23 = v6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1000FB698;
    uint64_t v21 = &unk_100276F60;
    uint64_t v7 = _Block_copy(aBlock);
    swift_unknownObjectRetain_n();
    uint64_t v8 = v0;
    swift_release();
    [v5 read:v7];
    _Block_release(v7);
    return swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, &v0[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger], v1);
    uint64_t v10 = v0;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      id v19 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        id v15 = *(id *)(Strong + 24);
        swift_release();
        aBlock[0] = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        aBlock[0] = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v15 = 0;
      }
      *id v19 = v15;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Read data failed with no bulkSend session present for accessory: %@", v13, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v11 = v10;
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v16 = (uint64_t)v10 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate;
    swift_beginAccess();
    sub_1000FE724(v16, (uint64_t)aBlock);
    if (v21)
    {
      sub_1000A5D40((uint64_t)aBlock, (uint64_t)v24);
      sub_1000A61E4((uint64_t)aBlock, (uint64_t *)&unk_1002A9798);
      uint64_t v17 = v25;
      uint64_t v18 = v26;
      sub_1000A5DA4(v24, v25);
      (*(void (**)(NSObject *, uint64_t, uint64_t))(v18 + 24))(v10, v17, v18);
      return sub_100099BCC((uint64_t)v24);
    }
    else
    {
      return sub_1000A61E4((uint64_t)aBlock, (uint64_t *)&unk_1002A9798);
    }
  }
}

uint64_t sub_1000FAB1C(uint64_t a1, uint64_t a2, NSObject *a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  os_log_type_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  id v15 = (char *)&v49 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v49 - v16;
  if (a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v49 - v16, (uint64_t)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, v8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = (void *)swift_slowAlloc();
      uint64_t v50 = v9;
      *(_DWORD *)uint64_t v20 = 138412290;
      swift_errorRetain();
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      v54[0] = v21;
      uint64_t v9 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v49 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "DataStream transfer read data channel has error: %@", v20, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    uint64_t v31 = (char *)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate;
    swift_beginAccess();
    uint64_t v32 = (uint64_t)v31;
LABEL_12:
    sub_1000FE724(v32, (uint64_t)v54);
    if (!v55) {
      return sub_1000A61E4((uint64_t)v54, (uint64_t *)&unk_1002A9798);
    }
    sub_1000A5D40((uint64_t)v54, (uint64_t)v51);
    sub_1000A61E4((uint64_t)v54, (uint64_t *)&unk_1002A9798);
    uint64_t v33 = v52;
    uint64_t v34 = v53;
    sub_1000A5DA4(v51, v52);
    (*(void (**)(NSObject *, uint64_t, uint64_t))(v34 + 24))(a3, v33, v34);
    return sub_100099BCC((uint64_t)v51);
  }
  if (a1)
  {
    unint64_t v22 = sub_1000FB2C4(a1);
    if (v22)
    {
      unint64_t v23 = v22;
      uint64_t v24 = (uint64_t)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate;
      swift_beginAccess();
      uint64_t v49 = (void *)v24;
      sub_1000FE724(v24, (uint64_t)v54);
      if (v55)
      {
        sub_1000A5D40((uint64_t)v54, (uint64_t)v51);
        sub_1000A61E4((uint64_t)v54, (uint64_t *)&unk_1002A9798);
        uint64_t v25 = v9;
        uint64_t v26 = v52;
        uint64_t v27 = v53;
        sub_1000A5DA4(v51, v52);
        uint64_t v28 = *(uint64_t (**)(NSObject *, unint64_t, uint64_t, uint64_t))(v27 + 8);
        uint64_t v29 = v27;
        uint64_t v9 = v25;
        LOBYTE(v26) = v28(a3, v23, v26, v29);
        sub_100099BCC((uint64_t)v51);
        swift_bridgeObjectRelease();
        if (v26) {
          goto LABEL_8;
        }
      }
      else
      {
        sub_1000A61E4((uint64_t)v54, (uint64_t *)&unk_1002A9798);
        swift_bridgeObjectRelease();
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v15, (uint64_t)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, v8);
      a3 = a3;
      char v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v50 = v9;
        uint64_t v44 = v8;
        unint64_t v45 = (uint8_t *)swift_slowAlloc();
        id v46 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v45 = 138412290;
        uint64_t Strong = swift_weakLoadStrong();
        if (Strong)
        {
          id v48 = *(id *)(Strong + 24);
          swift_release();
          v54[0] = v48;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
        }
        else
        {
          v54[0] = 0;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v48 = 0;
        }
        void *v46 = v48;

        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Received data frame is not accepted for accessory: %@", v45, 0xCu);
        sub_1000992E8(&qword_1002A7C40);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        uint64_t v8 = v44;
        uint64_t v9 = v50;
      }
      else
      {

        char v42 = a3;
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
      uint64_t v32 = (uint64_t)v49;
      goto LABEL_12;
    }
  }
LABEL_8:
  if ([a4 isActive]) {
    return sub_1000FA734();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, (uint64_t)a3 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, v8);
  uint64_t v35 = a3;
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v50 = v9;
    unint64_t v38 = (uint8_t *)swift_slowAlloc();
    unint64_t v39 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v38 = 138412290;
    uint64_t v40 = swift_weakLoadStrong();
    if (v40)
    {
      id v41 = *(id *)(v40 + 24);
      swift_release();
      v54[0] = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      v54[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v41 = 0;
    }
    *unint64_t v39 = v41;

    _os_log_impl((void *)&_mh_execute_header, v36, v37, "DataStream data transfer is completed for accessory: %@", v38, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v9 = v50;
  }
  else
  {

    uint64_t v36 = v35;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return sub_1000FC8E8();
}

unint64_t sub_1000FB2C4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1000992E8(&qword_1002A97B0);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v23 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v12 = v7;
    }
    else
    {
      int64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v13 >= v22)
      {
LABEL_33:
        sub_1000FE8D4();
        return (unint64_t)v2;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v13);
      int64_t v12 = v7 + 1;
      if (!v14)
      {
        int64_t v12 = v7 + 2;
        if (v7 + 2 >= v22) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v7 + 3;
          if (v7 + 3 >= v22) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v23 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v7 + 4;
            if (v7 + 4 >= v22) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v7 + 5;
              if (v7 + 5 >= v22) {
                goto LABEL_33;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_38;
                  }
                  if (v12 >= v22) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = *(void *)(v23 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v10 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    sub_1000FE878(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    sub_100099C1C(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    uint64_t v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    sub_1000FE878((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      sub_1000A61E4((uint64_t)v30, &qword_1002A97B8);
      swift_bridgeObjectRelease();
      sub_1000FE8D4();
      swift_release();
      return 0;
    }
    sub_100099C1C((uint64_t)v31 + 8, (uint64_t)v25);
    sub_1000A61E4((uint64_t)v30, &qword_1002A97B8);
    sub_1000FE5FC(v25, v26);
    long long v27 = v24;
    sub_1000FE5FC(v26, v28);
    long long v16 = v27;
    sub_1000FE5FC(v28, v29);
    sub_1000FE5FC(v29, &v27);
    unint64_t result = sub_10016DB60(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      uint64_t v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      _OWORD *v8 = v16;
      uint64_t v9 = (_OWORD *)(v2[7] + 32 * v17);
      sub_100099BCC((uint64_t)v9);
      unint64_t result = (unint64_t)sub_1000FE5FC(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    unint64_t result = (unint64_t)sub_1000FE5FC(&v27, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_36;
    }
    v2[2] = v21;
LABEL_8:
    int64_t v7 = v12;
    unint64_t v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1000FB698(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2) {
    uint64_t v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000FB744()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, &v1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger], v2);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Setting up data stream transport", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = *(void *)&v1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_fileType];
    uint64_t v12 = *(void *)&v1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_fileType + 8];
    swift_bridgeObjectRetain();
    sub_1000FE170(v1, v11, v12, v10);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000FB8F8()
{
  *(void *)(v1 + 16) = v0;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000FB918, 0, 0);
}

uint64_t sub_1000FB918()
{
  uint64_t Strong = swift_weakLoadStrong();
  v0[3] = Strong;
  if (Strong)
  {
    uint64_t v2 = v0[2];
    uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_fileType);
    uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_fileType + 8);
    v0[4] = v4;
    uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_reason);
    uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_reason + 8);
    v0[5] = v6;
    uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_metadata);
    v0[6] = v7;
    uint64_t v8 = *(void **)(v2 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_workQueue);
    v0[7] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v9 = v8;
    uint64_t v10 = (void *)swift_task_alloc();
    v0[8] = v10;
    void *v10 = v0;
    v10[1] = sub_1000FBAE0;
    return sub_1000AA4D0(v3, v4, v5, v6, v7, (uint64_t)v9);
  }
  else
  {
    v0[10] = 0;
    uint64_t v12 = (void *)swift_task_alloc();
    v0[11] = v12;
    void *v12 = v0;
    v12[1] = sub_1000FBCA4;
    return sub_1000FBF48(0);
  }
}

uint64_t sub_1000FBAE0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000FBE1C, 0, 0);
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v4 + 80) = a1;
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v4 + 8_Block_object_dispose(&STACK[0x3D0], 8) = v6;
    *uint64_t v6 = v5;
    v6[1] = sub_1000FBCA4;
    return sub_1000FBF48(a1);
  }
}

uint64_t sub_1000FBCA4()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1000FBEC4;
  }
  else {
    uint64_t v2 = sub_1000FBDB8;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v2, 0, 0);
}

uint64_t sub_1000FBDB8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FBE1C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 72);

  sub_1000FC660(v1);
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000FBEC4()
{
  uint64_t v1 = *(void *)(v0 + 96);

  sub_1000FC660(v1);
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000FBF48(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Logger();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000FC034, 0, 0);
}

uint64_t sub_1000FC034()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback);
  v0[9] = v3;
  uint64_t v4 = v2[1];
  v0[10] = v4;
  if (v3)
  {
    uint64_t v5 = (void *)v0[4];
    swift_retain();
    if (v5)
    {
      id v6 = [v5 session];
      uint64_t v1 = v0[5];
    }
    else
    {
      id v6 = 0;
    }
    uint64_t v12 = v0[7];
    uint64_t v11 = v0[8];
    uint64_t v13 = v0[6];
    *(void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_currentBulkSendSession) = v6;
    swift_unknownObjectRelease();
    uint64_t v14 = *v2;
    uint64_t *v2 = 0;
    v2[1] = 0;
    sub_1000BF118(v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, v13);
    id v15 = v5;
    long long v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      char v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      *(_DWORD *)char v18 = 138412290;
      if (v5)
      {
        v0[3] = v15;
        id v19 = v15;
      }
      else
      {
        v0[2] = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v0[4];

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Calling pending callback with result: %@", v18, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v20 = v0[4];
    (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
    uint64_t v21 = (void *)swift_task_alloc();
    v0[11] = v21;
    void v21[2] = v3;
    void v21[3] = v4;
    void v21[4] = v20;
    int64_t v22 = (void *)swift_task_alloc();
    v0[12] = v22;
    void *v22 = v0;
    v22[1] = sub_1000FC480;
    return withCheckedContinuation<A>(isolation:function:_:)(v22, 0, 0, 0xD000000000000027, 0x8000000100236B90, sub_1000FE78C, v21, (char *)&type metadata for () + 8);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Errors();
    sub_1000C8E10((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    void *v8 = 0xD000000000000032;
    v8[1] = 0x8000000100236B50;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v7 - 8) + 104))(v8, enum case for Errors.NotFound(_:), v7);
    swift_willThrow();
    swift_task_dealloc();
    id v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_1000FC480()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000FC5C4, 0, 0);
}

uint64_t sub_1000FC5C4()
{
  sub_1000BF118(*(void *)(v0 + 72));
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000FC660(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)(v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback);
  id v9 = *(void (**)(void, uint64_t))(v1
                                              + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback);
  if (v9)
  {
    void *v8 = 0;
    v8[1] = 0;
    swift_retain();
    sub_1000BF118((uint64_t)v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, v3);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v16 = v3;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      id v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      uint64_t v14 = v12 + 4;
      swift_errorRetain();
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v17 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v15 = v13;
      uint64_t v3 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Calling pending callback with error: %@", v12, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v9(0, a1);
    return sub_1000BF118((uint64_t)v9);
  }
  return result;
}

uint64_t sub_1000FC8E8()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_currentBulkSendSession)
    && (*(unsigned char *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendFail) & 1) == 0
    && (*(unsigned char *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendComplete) & 1) == 0)
  {
    *(unsigned char *)(v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendComplete) = 1;
  }
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate;
  swift_beginAccess();
  sub_1000FE724(v1, (uint64_t)v8);
  if (!v9) {
    return sub_1000A61E4((uint64_t)v8, (uint64_t *)&unk_1002A9798);
  }
  sub_1000A5D40((uint64_t)v8, (uint64_t)v5);
  sub_1000A61E4((uint64_t)v8, (uint64_t *)&unk_1002A9798);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  sub_1000A5DA4(v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v2, v3);
  return sub_100099BCC((uint64_t)v5);
}

id sub_1000FCA20()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryDataStreamAdapter();
  return [super dealloc];
}

uint64_t sub_1000FCB5C()
{
  return type metadata accessor for AccessoryDataStreamAdapter();
}

uint64_t type metadata accessor for AccessoryDataStreamAdapter()
{
  uint64_t result = qword_1002A96F0;
  if (!qword_1002A96F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000FCBB0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_1000FCD28(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v11 = *(void **)&v1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_workQueue];
  sub_100099C1C(a1, (uint64_t)v19);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v1;
  sub_1000FE5FC(v19, (_OWORD *)(v12 + 24));
  aBlock[4] = sub_1000FE60C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100276E98;
  uint64_t v13 = _Block_copy(aBlock);
  id v14 = v11;
  id v15 = v1;
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_1000FCFEC(char *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v4 - 8);
  uint64_t v70 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v72 = (void *)type metadata accessor for Logger();
  uint64_t v6 = *(v72 - 1);
  uint64_t v7 = __chkstk_darwin(v72);
  uint64_t v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  long long v71 = (char *)&v66 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v66 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v66 - v15;
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v73 = v6;
  if (!Strong || (char v18 = *(void **)(Strong + 32), v19 = v18, swift_release(), !v18))
  {
    uint64_t v28 = v72;
    (*(void (**)(char *, char *, void *))(v6 + 16))(v16, &a1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger], v72);
    uint64_t v29 = a1;
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412290;
      uint64_t v34 = swift_weakLoadStrong();
      if (v34)
      {
        id v35 = *(id *)(v34 + 24);
        swift_release();
        v77[0] = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        v77[0] = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v35 = 0;
      }
      *uint64_t v33 = v35;

      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Accessory: %@ has no hap server", v32, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v30 = v29;
    }

    (*(void (**)(char *, void *))(v73 + 8))(v16, v28);
    return;
  }
  sub_100099C1C(a2, (uint64_t)v77);
  sub_1000F9788();
  int v20 = swift_dynamicCast();
  uint64_t v21 = (void *)v75[0];
  id v69 = v19;
  id v22 = [v19 primaryAccessory];
  uint64_t v23 = v22;
  if (v20 && v21)
  {
    if (v22)
    {
      id v24 = v21;
      char v25 = static NSObject.== infix(_:_:)();

      uint64_t v26 = v72;
      uint64_t v27 = v73;
      if ((v25 & 1) == 0)
      {
LABEL_23:
        (*(void (**)(char *, char *, void *))(v27 + 16))(v9, &a1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger], v26);
        sub_100099C1C(a2, (uint64_t)v77);
        os_log_type_t v43 = a1;
        uint64_t v44 = v27;
        unint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = swift_slowAlloc();
          id v48 = (void *)swift_slowAlloc();
          uint64_t v49 = swift_slowAlloc();
          uint64_t v76 = v49;
          *(_DWORD *)uint64_t v47 = 138412546;
          uint64_t v50 = swift_weakLoadStrong();
          long long v71 = (char *)v49;
          if (v50)
          {
            id v51 = *(id *)(v50 + 24);
            swift_release();
            v75[0] = (uint64_t)v51;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
          }
          else
          {
            v75[0] = 0;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            id v51 = 0;
          }
          void *v48 = v51;

          *(_WORD *)(v47 + 12) = 2080;
          sub_100099C1C((uint64_t)v77, (uint64_t)v75);
          type metadata accessor for DaemonAccessory();
          swift_dynamicCast();
          id v54 = *(id *)(v74 + 24);
          swift_release();
          uint64_t v55 = DockCoreInfo.description.getter();
          unint64_t v57 = v56;

          v75[0] = sub_1000993AC(v55, v57, &v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100099BCC((uint64_t)v77);
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "Accessory start listening failed, expected accessory: %@ actual accessory: %s", (uint8_t *)v47, 0x16u);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, void *))(v73 + 8))(v9, v72);
        }
        else
        {

          sub_100099BCC((uint64_t)v77);
          (*(void (**)(char *, void *))(v44 + 8))(v9, v26);
        }
        return;
      }
      goto LABEL_14;
    }
    uint64_t v23 = v21;
LABEL_22:

    uint64_t v26 = v72;
    uint64_t v27 = v73;
    goto LABEL_23;
  }
  if (v22) {
    goto LABEL_22;
  }
  uint64_t v26 = v72;
  uint64_t v27 = v73;
LABEL_14:
  uint64_t v36 = &a1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger];
  id v72 = *(void **)(v27 + 16);
  ((void (*)(char *, char *, void *))v72)(v14, &a1[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger], v26);
  os_log_type_t v37 = a1;
  unint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v68 = v36;
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 138412290;
    uint64_t v41 = swift_weakLoadStrong();
    uint64_t v67 = v40;
    if (v41)
    {
      id v42 = *(id *)(v41 + 24);
      swift_release();
      v77[0] = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      v77[0] = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v42 = 0;
    }
    uint64_t v53 = v71;
    *uint64_t v66 = v42;

    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Accessory: %@ started listening", v67, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    uint64_t v36 = v68;
    id v52 = v69;
  }
  else
  {

    unint64_t v38 = v37;
    id v52 = v69;
    uint64_t v53 = v71;
  }

  uint64_t v58 = *(void (**)(char *, void *))(v73 + 8);
  v58(v14, v26);
  *((unsigned char *)&v37->isa + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_transportReady) = 1;
  if (*(Class *)((char *)&v37->isa
                + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback))
  {
    ((void (*)(char *, char *, void *))v72)(v53, v36, v26);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Handling pending start bulk send session request", v61, 2u);
      swift_slowDealloc();
    }

    v58(v53, v26);
    uint64_t v62 = type metadata accessor for TaskPriority();
    uint64_t v63 = (uint64_t)v70;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v70, 1, 1, v62);
    unint64_t v64 = (void *)swift_allocObject();
    v64[2] = 0;
    v64[3] = 0;
    v64[4] = v37;
    uint64_t v65 = v37;
    sub_1001BC1A8(v63, (uint64_t)&unk_1002A9790, (uint64_t)v64);

    swift_release();
  }
  else
  {
  }
}

uint64_t sub_1000FD9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[3] = a4;
  uint64_t v6 = type metadata accessor for Logger();
  void v4[4] = v6;
  void v4[5] = *(void *)(v6 - 8);
  v4[6] = swift_task_alloc();
  uint64_t v7 = (void *)swift_task_alloc();
  v4[7] = v7;
  void *v7 = v4;
  v7[1] = sub_1000FDABC;
  v7[2] = a4;
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000FB918, 0, 0);
}

uint64_t sub_1000FDABC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (!v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(void *)(v2 + 8);
    __asm { BRAA            X1, X16 }
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_1000FDBF8, 0, 0);
}

uint64_t sub_1000FDBF8()
{
  (*(void (**)(void, uint64_t, void))(v0[5] + 16))(v0[6], v0[3] + OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_logger, v0[4]);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Start bulk send session request failed with error %@", v3, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_1000FDEC4(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(a2 + 40);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_1000FE91C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100276FC8;
  id v14 = _Block_copy(aBlock);
  id v15 = v12;
  swift_retain();
  id v16 = a1;
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_1000FE170(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = *(void **)(a4 + 40);
  id v15 = (void *)swift_allocObject();
  void v15[2] = a4;
  void v15[3] = a1;
  v15[4] = a2;
  void v15[5] = a3;
  aBlock[4] = sub_1000FE824;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001468DC;
  void aBlock[3] = &unk_100276F10;
  id v16 = _Block_copy(aBlock);
  id v17 = v14;
  swift_retain();
  id v18 = a1;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_1000C8E10((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_1000992E8((uint64_t *)&unk_1002A7F60);
  sub_100099CB8();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v21);
  return swift_release();
}

id sub_1000FE434(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_weakInit();
  id v14 = &v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_delegate];
  *(_OWORD *)id v14 = 0u;
  *((_OWORD *)v14 + 1) = 0u;
  *((void *)v14 + 4) = 0;
  *(void *)&v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_currentBulkSendSession] = 0;
  id v15 = &v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_pendingOpenSessionCallback];
  void *v15 = 0;
  v15[1] = 0;
  v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_transportReady] = 0;
  v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendFail] = 0;
  v7[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_didBulkSendComplete] = 0;
  id v16 = v7;
  Logger.init(subsystem:category:)();
  swift_weakAssign();
  *(void *)&v16[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_workQueue] = a2;
  *(void *)&v16[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_metadata] = a3;
  id v17 = &v16[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_fileType];
  *(void *)id v17 = a4;
  *((void *)v17 + 1) = a5;
  id v18 = &v16[OBJC_IVAR____TtC14dockaccessoryd26AccessoryDataStreamAdapter_reason];
  *(void *)id v18 = a6;
  *((void *)v18 + 1) = a7;
  id v19 = a2;

  v21.receiver = v16;
  v21.super_class = (Class)type metadata accessor for AccessoryDataStreamAdapter();
  return [super init];
}

uint64_t sub_1000FE5BC()
{
  sub_100099BCC(v0 + 24);

  return _swift_deallocObject(v0, 56, 7);
}

_OWORD *sub_1000FE5FC(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_1000FE60C()
{
  sub_1000FCFEC(*(char **)(v0 + 16), v0 + 24);
}

uint64_t sub_1000FE618(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000FE628()
{
  return swift_release();
}

uint64_t sub_1000FE630()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000FE670(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_1000A5ED8;
  return sub_1000FD9B4(a1, v4, v5, v6);
}

uint64_t sub_1000FE724(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8((uint64_t *)&unk_1002A9798);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FE78C()
{
  (*(void (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), 0);
  sub_1000992E8(&qword_1002A97A8);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1000FE7DC()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000FE824()
{
  sub_1000A9EF4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000FE830()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FE870(uint64_t a1, uint64_t a2)
{
  return sub_1000FAB1C(a1, a2, *(NSObject **)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_1000FE878(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000FE8D4()
{
  return swift_release();
}

uint64_t sub_1000FE8DC()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

id sub_1000FE91C()
{
  return sub_1000AA1C8(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000FE93C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v117 = v0;
  uint64_t v118 = v1;
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v102 - v4;
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v110 = (char *)&v102 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v111 = (char *)&v102 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v113 = (char *)&v102 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v112 = (char *)&v102 - v13;
  __chkstk_darwin(v12);
  uint64_t v114 = (char *)&v102 - v14;
  uint64_t v15 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v15 - 8);
  uint64_t v16 = type metadata accessor for URL.DirectoryHint();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_1000992E8(&qword_1002A7F70);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v102 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for URL();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v115 = (uint64_t)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  uint64_t v116 = (char *)&v102 - v27;
  uint64_t v124 = -1;
  if (qword_1002A7B90 != -1) {
    swift_once();
  }
  sub_100151CA4((uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    sub_100099DB0((uint64_t)v22);
    uint64_t v28 = v118;
    uint64_t v29 = v117;
    (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v5, v119 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v117);
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed getting library path", v32, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v29);
    sub_1000FFD3C();
    swift_allocError();
    *uint64_t v33 = 0;
    v33[1] = 0;
    uint64_t v34 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    return v34;
  }
  uint64_t v108 = v24;
  uint64_t v109 = v23;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v116, v22, v23);
  uint64_t v122 = 0x6E6F6973726576;
  uint64_t v123 = 0xE700000000000000;
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, enum case for URL.DirectoryHint.inferFromPath(_:), v16);
  sub_1000E9828();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v35 = String.init(contentsOf:encoding:)();
  uint64_t v107 = v118 + 16;
  uint64_t v36 = v35;
  unint64_t v38 = v37;
  uint64_t v39 = v118;
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 16);
  uint64_t v41 = v114;
  uint64_t v105 = v119 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
  uint64_t v42 = v117;
  id v106 = v40;
  ((void (*)(char *))v40)(v114);
  swift_bridgeObjectRetain_n();
  os_log_type_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v43, v44))
  {
    unint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v103 = swift_slowAlloc();
    uint64_t v121 = v103;
    uint64_t v122 = v36;
    *(_DWORD *)unint64_t v45 = 136315138;
    uint64_t v102 = v45 + 4;
    uint64_t v123 = v38;
    swift_bridgeObjectRetain();
    sub_1000992E8((uint64_t *)&unk_1002A82C0);
    uint64_t v46 = String.init<A>(describing:)();
    uint64_t v122 = sub_1000993AC(v46, v47, &v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Current data version string %s", v45, 0xCu);
    swift_arrayDestroy();
    uint64_t v48 = v118;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v49 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
    uint64_t result = v49(v114, v42);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v49 = *(uint64_t (**)(char *, uint64_t))(v39 + 8);
    uint64_t result = v49(v41, v42);
  }
  id v51 = v112;
  uint64_t v52 = HIBYTE(v38) & 0xF;
  uint64_t v53 = v36 & 0xFFFFFFFFFFFFLL;
  if ((v38 & 0x2000000000000000) != 0) {
    uint64_t v54 = HIBYTE(v38) & 0xF;
  }
  else {
    uint64_t v54 = v36 & 0xFFFFFFFFFFFFLL;
  }
  if (!v54)
  {
    swift_bridgeObjectRelease();
    uint64_t v69 = -1;
    uint64_t v55 = v106;
LABEL_50:
    uint64_t v124 = v69;
    v55(v51, v105, v42);
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v70, v71))
    {
      id v72 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v72 = 134217984;
      uint64_t v122 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Current version int %ld", v72, 0xCu);
      uint64_t v55 = v106;
      swift_slowDealloc();
    }

    v49(v51, v42);
    swift_beginAccess();
    uint64_t v73 = v124;
    if (v73 >= currentSupportedAccessoryVersion.getter())
    {
      id v83 = v113;
      v55(v113, v119 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v42);
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v86 = 134217984;
        uint64_t v121 = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "Version %ld doesn't need migration", v86, 0xCu);
        swift_slowDealloc();
      }

      v49(v83, v42);
      uint64_t v87 = v109;
      unint64_t v88 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
      v88(v115, v109);
      v88((uint64_t)v116, v87);
      return 0;
    }
    currentSupportedAccessoryVersion.getter();
    currentSupportedAccessoryVersion.getter();
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v74 = sub_10018354C();
    uint64_t v75 = v119 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger;
    if (v74)
    {
      uint64_t v76 = v74;
      uint64_t v77 = v111;
      v55(v111, v75, v42);
      uint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v80 = swift_slowAlloc();
        *(_DWORD *)uint64_t v80 = 134218240;
        uint64_t v121 = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v80 + 12) = 2048;
        uint64_t v121 = currentSupportedAccessoryVersion.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v78, v79, "Failed converting accessories from %ld to %ld", (uint8_t *)v80, 0x16u);
        swift_slowDealloc();
      }

      v49(v77, v42);
      uint64_t v81 = v109;
      char v82 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
      v82(v115, v109);
      v82((uint64_t)v116, v81);
      uint64_t v121 = v76;
    }
    else
    {
      uint64_t v89 = v110;
      v55(v110, v75, v42);
      uint64_t v90 = Logger.logObject.getter();
      os_log_type_t v91 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v92 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v92 = 134217984;
        uint64_t v121 = currentSupportedAccessoryVersion.getter();
        uint64_t v89 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "Updating version to %ld", v92, 0xCu);
        swift_slowDealloc();
      }

      v49(v89, v42);
      uint64_t v93 = currentSupportedAccessoryVersion.getter();
      uint64_t v94 = v115;
      uint64_t v34 = sub_1000FF974(v115, v93);
      sub_1001822A4();
      os_log_type_t v95 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
      uint64_t v96 = v94;
      uint64_t v97 = v109;
      v95(v96, v109);
      v95((uint64_t)v116, v97);
      if (!v34) {
        return v34;
      }
      uint64_t v121 = v34;
    }
    sub_1000992E8(&qword_1002A8F70);
    sub_1000FFD90();
    if (swift_dynamicCast()) {
      return v120;
    }
    else {
      return 0;
    }
  }
  if ((v38 & 0x1000000000000000) != 0)
  {
    uint64_t v57 = (uint64_t)sub_1001EC4B0(v36, v38, 10);
    char v59 = v101;
    swift_bridgeObjectRelease();
    uint64_t v55 = v106;
LABEL_47:
    if (v59) {
      uint64_t v69 = -1;
    }
    else {
      uint64_t v69 = v57;
    }
    goto LABEL_50;
  }
  uint64_t v55 = v106;
  unint64_t v104 = v38;
  if ((v38 & 0x2000000000000000) == 0)
  {
    if ((v36 & 0x1000000000000000) != 0) {
      unint64_t v56 = (unsigned __int8 *)((v38 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      unint64_t v56 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v57 = (uint64_t)sub_1001EC498(v56, v53, 10);
    char v59 = v58 & 1;
    goto LABEL_46;
  }
  uint64_t v122 = v36;
  uint64_t v123 = v38 & 0xFFFFFFFFFFFFFFLL;
  if (v36 == 43)
  {
    if (v52)
    {
      if (v52 != 1 && (BYTE1(v36) - 48) <= 9u)
      {
        uint64_t v57 = (BYTE1(v36) - 48);
        uint64_t v64 = v52 - 2;
        if (v64)
        {
          uint64_t v65 = (unsigned __int8 *)&v122 + 2;
          while (1)
          {
            unsigned int v66 = *v65 - 48;
            if (v66 > 9) {
              goto LABEL_43;
            }
            uint64_t v67 = 10 * v57;
            if ((unsigned __int128)(v57 * (__int128)10) >> 64 != (10 * v57) >> 63) {
              goto LABEL_43;
            }
            uint64_t v57 = v67 + v66;
            if (__OFADD__(v67, v66)) {
              goto LABEL_43;
            }
            char v59 = 0;
            ++v65;
            if (!--v64) {
              goto LABEL_46;
            }
          }
        }
        goto LABEL_45;
      }
      goto LABEL_43;
    }
  }
  else
  {
    if (v36 != 45)
    {
      if (v52 && (v36 - 48) <= 9u)
      {
        uint64_t v57 = (v36 - 48);
        uint64_t v68 = v52 - 1;
        if (v68)
        {
          uint64_t v98 = (unsigned __int8 *)&v122 + 1;
          while (1)
          {
            unsigned int v99 = *v98 - 48;
            if (v99 > 9) {
              goto LABEL_43;
            }
            uint64_t v100 = 10 * v57;
            if ((unsigned __int128)(v57 * (__int128)10) >> 64 != (10 * v57) >> 63) {
              goto LABEL_43;
            }
            uint64_t v57 = v100 + v99;
            if (__OFADD__(v100, v99)) {
              goto LABEL_43;
            }
            char v59 = 0;
            ++v98;
            if (!--v68) {
              goto LABEL_46;
            }
          }
        }
        goto LABEL_45;
      }
LABEL_43:
      uint64_t v57 = 0;
      char v59 = 1;
LABEL_46:
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }
    if (v52)
    {
      if (v52 != 1 && (BYTE1(v36) - 48) <= 9u)
      {
        uint64_t v57 = -(uint64_t)(BYTE1(v36) - 48);
        uint64_t v60 = v52 - 2;
        if (v60)
        {
          uint64_t v61 = (unsigned __int8 *)&v122 + 2;
          while (1)
          {
            unsigned int v62 = *v61 - 48;
            if (v62 > 9) {
              goto LABEL_43;
            }
            uint64_t v63 = 10 * v57;
            if ((unsigned __int128)(v57 * (__int128)10) >> 64 != (10 * v57) >> 63) {
              goto LABEL_43;
            }
            uint64_t v57 = v63 - v62;
            if (__OFSUB__(v63, v62)) {
              goto LABEL_43;
            }
            char v59 = 0;
            ++v61;
            if (!--v60) {
              goto LABEL_46;
            }
          }
        }
LABEL_45:
        char v59 = 0;
        goto LABEL_46;
      }
      goto LABEL_43;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000FF974(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for String.Encoding();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = a2;
  dispatch thunk of CustomStringConvertible.description.getter();
  static String.Encoding.utf8.getter();
  uint64_t v11 = String.data(using:allowLossyConversion:)();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v13 >> 60 == 15)
  {
    sub_1000FFD3C();
    uint64_t v14 = swift_allocError();
    void *v15 = 0xD00000000000001DLL;
    v15[1] = 0x8000000100236C20;
    swift_willThrow();
    uint64_t v16 = v4;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v26 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_logger, v3);
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v26 = v3;
      uint64_t v20 = v16;
      uint64_t v21 = (uint8_t *)v19;
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v27 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v22 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed updating version string: %@", v21, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v16 = v20;
      uint64_t v3 = v26;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
    swift_errorRelease();
  }
  else
  {
    Data.write(to:options:)();
    sub_1000A9990(v11, v13);
    return 0;
  }
  return v14;
}

unint64_t sub_1000FFD3C()
{
  unint64_t result = qword_1002A97C0;
  if (!qword_1002A97C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A97C0);
  }
  return result;
}

unint64_t sub_1000FFD90()
{
  unint64_t result = qword_1002A97C8;
  if (!qword_1002A97C8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002A97C8);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MigrationError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MigrationError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for MigrationError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for MigrationError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MigrationError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MigrationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + _Block_object_dispose(&STACK[0x3D0], 8) = a2;
    }
  }
  return result;
}

uint64_t sub_1000FFF24(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000FFF3C(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MigrationError()
{
  return &type metadata for MigrationError;
}

uint64_t sub_1000FFF70(uint64_t a1, unint64_t a2)
{
  uint64_t v53 = a1;
  unint64_t v54 = a2;
  *(void *)&long long v48 = a1;
  *((void *)&v48 + 1) = a2;
  sub_1000A618C(a1, a2);
  sub_1000992E8(&qword_1002A98F8);
  sub_1000992E8(&qword_1002A98C8);
  if (swift_dynamicCast())
  {
    sub_1000A6298(v46, (uint64_t)&v49);
    sub_1000A5DA4(&v49, v52);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    sub_1000A6240(v53, v54);
    v46[0] = v48;
    sub_100099BCC((uint64_t)&v49);
  }
  else
  {
    uint64_t v47 = 0;
    memset(v46, 0, sizeof(v46));
    sub_1001058D0((uint64_t)v46);
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    switch(v54 >> 62)
    {
      case 1uLL:
        uint64_t v3 = v53 >> 32;
        uint64_t v2 = (int)v53;
        break;
      case 2uLL:
        uint64_t v2 = *(void *)(v53 + 16);
        uint64_t v3 = *(void *)(v53 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v2 = 0;
        uint64_t v3 = BYTE6(v54);
        break;
    }
    uint64_t v4 = sub_1001B0B44(v2, v3, v53, v54);
    *(void *)&v46[0] = sub_1000B805C(v4);
    *((void *)&v46[0] + 1) = v5;
    __chkstk_darwin();
    sub_1001030A8((void (*)(uint64_t, uint64_t))sub_1001059BC);
    uint64_t v6 = v49;
    unint64_t v40 = v50;
    uint64_t v8 = v51;
    uint64_t v7 = v52;
    BYTE6(v9) = BYTE14(v46[0]);
    uint64_t v10 = *((void *)&v46[0] + 1) >> 62;
    switch(*((void *)&v46[0] + 1) >> 62)
    {
      case 1:
        LODWORD(v11) = DWORD1(v46[0]) - LODWORD(v46[0]);
        if (__OFSUB__(DWORD1(v46[0]), v46[0])) {
          goto LABEL_62;
        }
        uint64_t v11 = (int)v11;
LABEL_12:
        if (v52 == v11)
        {
LABEL_18:
          unsigned __int8 v16 = 0;
          unint64_t v17 = v50 >> 62;
          uint64_t v39 = (uint64_t)v49 >> 32;
          uint64_t v41 = &v45;
          *(void *)((char *)&v48 + 7) = 0;
          *(void *)&long long v48 = 0;
          unint64_t v38 = v49 >> 8;
          unint64_t v37 = v49 >> 16;
          unint64_t v36 = v49 >> 24;
          unint64_t v35 = HIDWORD(v49);
          unint64_t v34 = v49 >> 40;
          unint64_t v33 = HIWORD(v49);
          unint64_t v32 = HIBYTE(v49);
          unint64_t v31 = v50 >> 8;
          unint64_t v30 = v50 >> 16;
          unint64_t v29 = v50 >> 24;
          unint64_t v9 = (unint64_t)&v53;
          unint64_t v28 = HIDWORD(v50);
          unint64_t v27 = v50 >> 40;
          uint64_t v26 = v51;
          unint64_t v18 = v50 >> 62;
          while (1)
          {
            uint64_t v19 = (int)v6;
            switch(v18)
            {
              case 1uLL:
                goto LABEL_25;
              case 2uLL:
                uint64_t v19 = *(void *)(v6 + 16);
LABEL_25:
                if (v8 == v19) {
                  goto LABEL_50;
                }
                BOOL v14 = __OFSUB__(v8--, 1);
                if (v14) {
                  goto LABEL_53;
                }
                if (v17 == 2)
                {
                  if (v8 < *(void *)(v6 + 16)) {
                    goto LABEL_56;
                  }
                  if (v8 >= *(void *)(v6 + 24)) {
                    goto LABEL_58;
                  }
                  uint64_t v21 = __DataStorage._bytes.getter();
                  if (!v21) {
                    goto LABEL_64;
                  }
                  uint64_t v22 = v21;
                  uint64_t v7 = __DataStorage._offset.getter();
                  uint64_t v23 = v8 - v7;
                  if (__OFSUB__(v8, v7)) {
                    goto LABEL_60;
                  }
                }
                else
                {
                  if (v8 < (int)v6 || v8 >= v39) {
                    goto LABEL_57;
                  }
                  uint64_t v24 = __DataStorage._bytes.getter();
                  if (!v24) {
                    goto LABEL_65;
                  }
                  uint64_t v22 = v24;
                  uint64_t v7 = __DataStorage._offset.getter();
                  uint64_t v23 = v8 - v7;
                  if (__OFSUB__(v8, v7)) {
                    goto LABEL_59;
                  }
                }
                char v20 = *(unsigned char *)(v22 + v23);
                goto LABEL_39;
              case 3uLL:
                if (!v26) {
                  goto LABEL_48;
                }
                __break(1u);
                goto LABEL_44;
              default:
                if (!v8)
                {
LABEL_50:
                  if (v16)
                  {
                    uint64_t v42 = v48;
                    int v43 = DWORD2(v48);
                    __int16 v44 = WORD6(v48);
                    Data._Representation.append(contentsOf:)();
                  }
                  goto LABEL_48;
                }
                BOOL v14 = __OFSUB__(v8--, 1);
                if (v14) {
                  goto LABEL_54;
                }
                if (v8 >= BYTE6(v40)) {
                  goto LABEL_55;
                }
                LOBYTE(v42) = v6;
                BYTE1(v42) = v38;
                BYTE2(v42) = v37;
                BYTE3(v42) = v36;
                BYTE4(v42) = v35;
                BYTE5(v42) = v34;
                BYTE6(v42) = v33;
                HIBYTE(v42) = v32;
                LOBYTE(v43) = v40;
                BYTE1(v43) = v31;
                BYTE2(v43) = v30;
                HIBYTE(v43) = v29;
                LOBYTE(v44) = v28;
                HIBYTE(v44) = v27;
                char v20 = *((unsigned char *)&v42 + v8);
LABEL_39:
                unint64_t v9 = v16;
                *((unsigned char *)&v48 + v16++) = v20;
                if (((v9 + 1) >> 8))
                {
                  __break(1u);
LABEL_53:
                  __break(1u);
LABEL_54:
                  __break(1u);
LABEL_55:
                  __break(1u);
LABEL_56:
                  __break(1u);
LABEL_57:
                  __break(1u);
LABEL_58:
                  __break(1u);
LABEL_59:
                  __break(1u);
LABEL_60:
                  __break(1u);
LABEL_61:
                  __break(1u);
LABEL_62:
                  __break(1u);
LABEL_63:
                  __break(1u);
LABEL_64:
                  __break(1u);
LABEL_65:
                  __break(1u);
                }
                if (v16 == 14)
                {
                  uint64_t v42 = v48;
                  int v43 = DWORD2(v48);
                  __int16 v44 = WORD6(v48);
                  uint64_t v7 = Data._Representation.append(contentsOf:)();
                  unsigned __int8 v16 = 0;
                }
                break;
            }
          }
        }
        if (v10)
        {
          if (v10 == 1) {
            uint64_t v15 = *(uint64_t *)&v46[0] >> 32;
          }
          else {
            uint64_t v15 = *(void *)(*(void *)&v46[0] + 24);
          }
        }
        else
        {
LABEL_44:
          uint64_t v15 = BYTE6(v9);
        }
LABEL_46:
        if (v15 < v7) {
          goto LABEL_61;
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_48:
        sub_1000A6240(v6, v40);
        sub_1000A6240(v53, v54);
        break;
      case 2:
        uint64_t v13 = *(void *)(*(void *)&v46[0] + 16);
        uint64_t v12 = *(void *)(*(void *)&v46[0] + 24);
        BOOL v14 = __OFSUB__(v12, v13);
        uint64_t v11 = v12 - v13;
        if (!v14) {
          goto LABEL_12;
        }
        goto LABEL_63;
      case 3:
        if (!v52) {
          goto LABEL_18;
        }
        uint64_t v15 = 0;
        goto LABEL_46;
      default:
        uint64_t v11 = BYTE14(v46[0]);
        goto LABEL_12;
    }
  }
  return *(void *)&v46[0];
}

uint64_t sub_100100590(unint64_t a1, unint64_t a2)
{
  *(void *)&long long v40 = a1;
  *((void *)&v40 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_1000992E8(&qword_1002A98C8);
  if (swift_dynamicCast())
  {
    sub_1000A6298(v38, (uint64_t)&v41);
    sub_1000A5DA4(&v41, v43);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v38[0] = v40;
    sub_100099BCC((uint64_t)&v41);
    return *(void *)&v38[0];
  }
  uint64_t v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_1001058D0((uint64_t)v38);
  unint64_t v2 = a1;
  unint64_t v3 = a2;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = a1;
      uint64_t v42 = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v6 = (char *)&v41 + (HIBYTE(a2) & 0xF);
      uint64_t v7 = &v41;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      if (v4) {
        uint64_t v6 = (unsigned char *)(v4 + v5);
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = (uint64_t *)v4;
    }
    uint64_t v8 = sub_100103C44(v7, v6);
    unint64_t v10 = v9;
    if (v9 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v38[0] = v8;
      *((void *)&v38[0] + 1) = v10;
      return *(void *)&v38[0];
    }
    unint64_t v2 = a1;
    unint64_t v3 = a2;
    if ((a2 & 0x1000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_70:
    Swift::Int v11 = String.UTF8View._foreignCount()();
    goto LABEL_17;
  }
LABEL_69:
  uint64_t v8 = 0;
  unint64_t v10 = 0xF000000000000000;
  if ((v3 & 0x1000000000000000) != 0) {
    goto LABEL_70;
  }
LABEL_14:
  if ((v3 & 0x2000000000000000) != 0) {
    Swift::Int v11 = HIBYTE(v3) & 0xF;
  }
  else {
    Swift::Int v11 = v2 & 0xFFFFFFFFFFFFLL;
  }
LABEL_17:
  *(void *)&v38[0] = sub_1000B805C(v11);
  *((void *)&v38[0] + 1) = v12;
  __chkstk_darwin(*(void *)&v38[0]);
  unint64_t v13 = (unint64_t)sub_1001032F4((void *(*)(uint64_t *__return_ptr, char *, char *))sub_100105930);
  uint64_t v16 = *((void *)&v38[0] + 1) >> 62;
  uint64_t v17 = v13;
  uint64_t v18 = v3;
  unint64_t v19 = v14;
  switch(*((void *)&v38[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v20) = DWORD1(v38[0]) - LODWORD(v38[0]);
      if (__OFSUB__(DWORD1(v38[0]), v38[0])) {
        goto LABEL_73;
      }
      uint64_t v20 = (int)v20;
LABEL_23:
      if (v15 != v20)
      {
        if (v16)
        {
          if (v16 == 1) {
            uint64_t v24 = *(uint64_t *)&v38[0] >> 32;
          }
          else {
            uint64_t v24 = *(void *)(*(void *)&v38[0] + 24);
          }
        }
        else
        {
          uint64_t v24 = BYTE14(v38[0]);
        }
LABEL_61:
        if (v24 < v15)
        {
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_63:
        swift_bridgeObjectRelease();
        goto LABEL_64;
      }
LABEL_29:
      if ((v3 & 0x2000000000000000) != 0) {
        unint64_t v25 = HIBYTE(v3) & 0xF;
      }
      else {
        unint64_t v25 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v40 + 7) = 0;
      *(void *)&long long v40 = 0;
      if (4 * v25 == v14 >> 14) {
        goto LABEL_58;
      }
      LOBYTE(v26) = 0;
      uint64_t v27 = (v13 >> 59) & 1;
      if ((v3 & 0x1000000000000000) == 0) {
        LOBYTE(v27) = 1;
      }
      uint64_t v28 = 4 << v27;
      uint64_t v35 = v3 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v33 = (uint64_t)v8;
      uint64_t v34 = (v3 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v22 = *(void *)(*(void *)&v38[0] + 16);
      uint64_t v21 = *(void *)(*(void *)&v38[0] + 24);
      BOOL v23 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v23) {
        goto LABEL_23;
      }
      goto LABEL_74;
    case 3:
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v24 = 0;
      goto LABEL_61;
    default:
      uint64_t v20 = BYTE14(v38[0]);
      goto LABEL_23;
  }
  do
  {
    unint64_t v29 = v19 & 0xC;
    unint64_t v2 = v19;
    if (v29 == v28) {
      unint64_t v2 = sub_1001EC41C(v19, v17, v18);
    }
    unint64_t v30 = v2 >> 16;
    if (v2 >> 16 >= v25)
    {
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if ((v18 & 0x1000000000000000) != 0)
    {
      unint64_t v2 = String.UTF8View._foreignSubscript(position:)();
      char v31 = v2;
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else if ((v18 & 0x2000000000000000) != 0)
    {
      uint64_t v41 = v17;
      uint64_t v42 = v35;
      char v31 = *((unsigned char *)&v41 + v30);
      if (v29 != v28) {
        goto LABEL_47;
      }
    }
    else
    {
      unint64_t v2 = v34;
      if ((v17 & 0x1000000000000000) == 0) {
        unint64_t v2 = _StringObject.sharedUTF8.getter();
      }
      char v31 = *(unsigned char *)(v2 + v30);
      if (v29 != v28)
      {
LABEL_47:
        if ((v18 & 0x1000000000000000) == 0) {
          goto LABEL_48;
        }
        goto LABEL_51;
      }
    }
    unint64_t v2 = sub_1001EC41C(v19, v17, v18);
    unint64_t v19 = v2;
    if ((v18 & 0x1000000000000000) == 0)
    {
LABEL_48:
      unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_53;
    }
LABEL_51:
    if (v25 <= v19 >> 16) {
      goto LABEL_68;
    }
    unint64_t v2 = String.UTF8View._foreignIndex(after:)();
    unint64_t v19 = v2;
LABEL_53:
    *((unsigned char *)&v40 + v26) = v31;
    unsigned int v26 = v26 + 1;
    if ((v26 >> 8)) {
      goto LABEL_67;
    }
    BYTE14(v40) = v26;
    if (v26 == 14)
    {
      uint64_t v41 = v40;
      LODWORD(v42) = DWORD2(v40);
      WORD2(v42) = WORD6(v40);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v26) = 0;
      BYTE14(v40) = 0;
    }
  }
  while (4 * v25 != v19 >> 14);
  uint64_t v8 = (unsigned char *)v33;
  if ((_BYTE)v26)
  {
    uint64_t v41 = v40;
    LODWORD(v42) = DWORD2(v40);
    WORD2(v42) = WORD6(v40);
    Data._Representation.append(contentsOf:)();
    sub_1000A9990(v33, v10);
    goto LABEL_63;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  sub_1000A9990((uint64_t)v8, v10);
LABEL_64:
  swift_bridgeObjectRelease();
  return *(void *)&v38[0];
}

uint64_t sub_100100AB8(uint64_t a1, unint64_t a2)
{
  void v28[3] = &type metadata for Data;
  void v28[4] = &protocol witness table for Data;
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = sub_1000A5DA4(v28, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_1000A618C(a1, a2);
      sub_1000A618C(v5, v6);
      uint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        unint64_t v13 = v12;
      }
      else {
        unint64_t v13 = 0;
      }
      sub_1001B05AC(v8, v13, &v27);
      sub_1000A6240(v5, v6);
LABEL_27:
      sub_1000A6240(a1, a2);
      uint64_t v24 = v27;
      sub_100099BCC((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_1000A618C(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v16 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        BOOL v23 = v22;
      }
      else {
        BOOL v23 = 0;
      }
      sub_1001B05AC(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_1000A618C(a1, a2);
      uint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_1000A618C(a1, a2);
      uint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_1001B05AC(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t MotionFeedback.Velocity.id.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

dockaccessoryd::MotionFeedback (__swiftcall *MotionFeedback.positions.modify())(Swift::OpaquePointer positions, Swift::OpaquePointer velocities)
{
  return MotionFeedback.init(positions:velocities:);
}

void MotionFeedback.Position.value.setter(double a1)
{
  *(double *)(v1 + _Block_object_dispose(&STACK[0x3D0], 8) = a1;
}

dockaccessoryd::MotionFeedback (__swiftcall *MotionFeedback.Velocity.value.modify())(Swift::OpaquePointer positions, Swift::OpaquePointer velocities)
{
  return MotionFeedback.init(positions:velocities:);
}

uint64_t sub_100100DC8()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 25705;
  }
}

uint64_t sub_100100DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100103FC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100100E1C()
{
  return 0;
}

void sub_100100E28(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100100E34(uint64_t a1)
{
  unint64_t v2 = sub_100100EE8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100100E70(uint64_t a1)
{
  unint64_t v2 = sub_100100EE8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MotionFeedback.Position.encode(to:)(void *a1, uint64_t a2)
{
  return sub_100101144(a1, a2, &qword_1002A97D0, (void (*)(void))sub_100100EE8);
}

unint64_t sub_100100EE8()
{
  unint64_t result = qword_1002A97D8;
  if (!qword_1002A97D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A97D8);
  }
  return result;
}

double MotionFeedback.Position.init(from:)(void *a1)
{
  return sub_10010409C(a1, (uint64_t *)&unk_1002A9950, (void (*)(void))sub_100100EE8);
}

void sub_100100F78(void *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100100FB4(void *a1)
{
  return MotionFeedback.Position.encode(to:)(a1, *v1);
}

uint64_t _s14dockaccessoryd14MotionFeedbackV8VelocityV11descriptionSSvg_0()
{
  v0._uint64_t countAndFlagsBits = 4023369;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x3D65756C615620;
  v2._object = (void *)0xE700000000000000;
  String.append(_:)(v2);
  Double.write<A>(to:)();
  return 0;
}

uint64_t sub_100101090(uint64_t a1)
{
  unint64_t v2 = sub_100103F74();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001010CC(uint64_t a1)
{
  unint64_t v2 = sub_100103F74();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MotionFeedback.Velocity.encode(to:)(void *a1, uint64_t a2)
{
  return sub_100101144(a1, a2, &qword_1002A97E0, (void (*)(void))sub_100103F74);
}

uint64_t sub_100101144(void *a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t v6 = sub_1000992E8(a3);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A5DA4(a1, a1[3]);
  a4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  uint64_t v10 = v12;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v10)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double MotionFeedback.Velocity.init(from:)(void *a1)
{
  return sub_10010409C(a1, &qword_1002A9948, (void (*)(void))sub_100103F74);
}

void sub_1001012FC(void *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_100101338(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, uint64_t a4@<X8>)
{
  double v7 = sub_10010409C(a1, a2, a3);
  if (!v4)
  {
    *(void *)a4 = v6;
    *(double *)(a4 + _Block_object_dispose(&STACK[0x3D0], 8) = v7;
  }
}

uint64_t sub_100101374(void *a1)
{
  return MotionFeedback.Velocity.encode(to:)(a1, *v1);
}

uint64_t MotionFeedback.positions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *Swift::String v1 = a1;
  return result;
}

uint64_t MotionFeedback.velocities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MotionFeedback.velocities.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + _Block_object_dispose(&STACK[0x3D0], 8) = a1;
  return result;
}

uint64_t MotionFeedback.description.getter()
{
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 0x3D6C655620;
  v1._object = (void *)0xE500000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 1030975312;
}

dockaccessoryd::MotionFeedback_optional __swiftcall MotionFeedback.init(data:)(NSData data)
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  Swift::String v2 = data.super.isa;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v4;

  sub_1001047D0();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();

  sub_1000A6240(v3, v5);
  swift_release();
  uint64_t v6 = v9;
  double v7 = v10;
  result.value.velocities._rawValue = v7;
  result.value.positions._rawValue = v6;
  return result;
}

NSData_optional __swiftcall MotionFeedback.encode()()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_100104824();
  uint64_t v0 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v2 = v1;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000A6240(v0, v2);
  unint64_t v5 = isa;
  result.value.super.Class isa = v5;
  result.is_nil = v4;
  return result;
}

uint64_t MotionFeedback.encode()(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 < 0x100)
  {
    unint64_t v4 = a1;
    unint64_t v5 = sub_1001023B0(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    unint64_t v7 = *((void *)v5 + 2);
    double v6 = *((double *)v5 + 3);
    int64_t v8 = v7 + 1;
    if (v7 >= *(void *)&v6 >> 1) {
      goto LABEL_57;
    }
    while (1)
    {
      *((void *)v5 + 2) = v8;
      v5[v7 + 32] = v2;
      unint64_t v9 = *(void *)(a2 + 16);
      if (v9 >= 0x100) {
        break;
      }
      unint64_t v10 = *((void *)v5 + 3);
      if ((uint64_t)(v7 + 2) > (uint64_t)(v10 >> 1)) {
        unint64_t v5 = sub_1001023B0((char *)(v10 > 1), v7 + 2, 1, v5);
      }
      *((void *)v5 + 2) = v7 + 2;
      v5[v8 + 32] = v9;
      if (v2)
      {
        unint64_t v11 = *(void *)(v4 + 32);
        if ((v11 & 0x8000000000000000) != 0) {
          goto LABEL_58;
        }
        swift_bridgeObjectRetain();
        if (v11 > 0xFF) {
          break;
        }
        v7 += 34;
        unint64_t v12 = v2 - 1;
        uint64_t v13 = 48;
        while (1)
        {
          unint64_t v14 = *((void *)v5 + 3);
          int64_t v8 = v7 - 31;
          if (v7 - 32 >= v14 >> 1) {
            unint64_t v5 = sub_1001023B0((char *)(v14 > 1), v7 - 31, 1, v5);
          }
          *((void *)v5 + 2) = v8;
          v5[v7] = v11;
          if (!v12) {
            break;
          }
          unint64_t v11 = *(void *)(v4 + v13);
          if ((v11 & 0x8000000000000000) == 0)
          {
            ++v7;
            v13 += 16;
            --v12;
            if (v11 <= 0xFF) {
              continue;
            }
          }
          goto LABEL_61;
        }
        swift_bridgeObjectRelease();
      }
      if (v9)
      {
        unint64_t v15 = *(void *)(a2 + 32);
        if ((v15 & 0x8000000000000000) != 0)
        {
LABEL_58:
          swift_bridgeObjectRetain();
          break;
        }
        if (v15 > 0xFF)
        {
          swift_bridgeObjectRetain();
          break;
        }
        unint64_t v7 = *((void *)v5 + 2);
        swift_bridgeObjectRetain();
        unint64_t v16 = v9 - 1;
        uint64_t v17 = 48;
        while (1)
        {
          unint64_t v18 = *((void *)v5 + 3);
          int64_t v8 = v7 + 1;
          if (v7 >= v18 >> 1) {
            unint64_t v5 = sub_1001023B0((char *)(v18 > 1), v7 + 1, 1, v5);
          }
          *((void *)v5 + 2) = v8;
          v5[v7 + 32] = v15;
          if (!v16) {
            break;
          }
          unint64_t v15 = *(void *)(a2 + v17);
          if ((v15 & 0x8000000000000000) == 0)
          {
            v17 += 16;
            --v16;
            ++v7;
            if (v15 <= 0xFF) {
              continue;
            }
          }
          goto LABEL_61;
        }
        swift_bridgeObjectRelease();
      }
      if (v2)
      {
        swift_bridgeObjectRetain();
        unint64_t v7 = 40;
        while (1)
        {
          double v19 = *(double *)(v4 + v7) * 1000.0;
          double v6 = v19;
          if ((~*(void *)&v19 & 0x7FF0000000000000) == 0) {
            break;
          }
          if (v19 <= -32769.0) {
            goto LABEL_52;
          }
          if (v19 >= 32768.0) {
            goto LABEL_53;
          }
          unint64_t v21 = *((void *)v5 + 2);
          unint64_t v20 = *((void *)v5 + 3);
          int64_t v22 = v20 >> 1;
          int64_t v8 = v21 + 1;
          if (v20 >> 1 <= v21)
          {
            unint64_t v5 = sub_1001023B0((char *)(v20 > 1), v21 + 1, 1, v5);
            unint64_t v20 = *((void *)v5 + 3);
            int64_t v22 = v20 >> 1;
          }
          *((void *)v5 + 2) = v8;
          v5[v21 + 32] = (unsigned __int16)(int)v19 >> 8;
          int64_t v23 = v21 + 2;
          if (v22 < v23) {
            unint64_t v5 = sub_1001023B0((char *)(v20 > 1), v23, 1, v5);
          }
          *((void *)v5 + 2) = v23;
          v5[v8 + 32] = (int)v19;
          v7 += 16;
          if (!--v2)
          {
            swift_bridgeObjectRelease();
            goto LABEL_39;
          }
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
      }
      else
      {
LABEL_39:
        if (!v9)
        {
LABEL_50:
          uint64_t v29 = sub_1001038B0((uint64_t)v5);
          swift_bridgeObjectRelease();
          return v29;
        }
        swift_bridgeObjectRetain();
        uint64_t v24 = 40;
        unint64_t v2 = 0x408F400000000000;
        while (1)
        {
          double v25 = *(double *)(a2 + v24) * 1000.0;
          double v6 = v25;
          if ((~*(void *)&v25 & 0x7FF0000000000000) == 0) {
            break;
          }
          if (v25 <= -32769.0) {
            goto LABEL_55;
          }
          if (v25 >= 32768.0) {
            goto LABEL_56;
          }
          unint64_t v27 = *((void *)v5 + 2);
          unint64_t v26 = *((void *)v5 + 3);
          int64_t v28 = v26 >> 1;
          unint64_t v4 = v27 + 1;
          if (v26 >> 1 <= v27)
          {
            unint64_t v5 = sub_1001023B0((char *)(v26 > 1), v27 + 1, 1, v5);
            unint64_t v26 = *((void *)v5 + 3);
            int64_t v28 = v26 >> 1;
          }
          unint64_t v7 = (int)v25;
          *((void *)v5 + 2) = v4;
          v5[v27 + 32] = BYTE1(v7);
          int64_t v8 = v27 + 2;
          if (v28 < v8) {
            unint64_t v5 = sub_1001023B0((char *)(v26 > 1), v8, 1, v5);
          }
          *((void *)v5 + 2) = v8;
          v5[v4 + 32] = v7;
          v24 += 16;
          if (!--v9)
          {
            swift_bridgeObjectRelease();
            goto LABEL_50;
          }
        }
      }
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      unint64_t v5 = sub_1001023B0((char *)(*(void *)&v6 > 1uLL), v8, 1, v5);
    }
  }
LABEL_61:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100101D00()
{
  if (*v0) {
    return 0x697469636F6C6576;
  }
  else {
    return 0x6E6F697469736F70;
  }
}

uint64_t sub_100101D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100104974(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100101D6C(uint64_t a1)
{
  unint64_t v2 = sub_100104878();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100101DA8(uint64_t a1)
{
  unint64_t v2 = sub_100104878();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MotionFeedback.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1000992E8(&qword_1002A9808);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A5DA4(a1, a1[3]);
  sub_100104878();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v14 = a2;
  char v13 = 0;
  sub_1000992E8(&qword_1002A9818);
  sub_100105AD8(&qword_1002A9820, &qword_1002A9818, (void (*)(void))sub_1001048CC);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3)
  {
    uint64_t v14 = a3;
    char v13 = 1;
    sub_1000992E8(&qword_1002A9830);
    sub_100105AD8(&qword_1002A9838, &qword_1002A9830, (void (*)(void))sub_100104920);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void *MotionFeedback.init(from:)(void *a1)
{
  return sub_100104A80(a1);
}

void *sub_100102018@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100104A80(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100102044(void *a1)
{
  return MotionFeedback.encode(to:)(a1, *v1, v1[1]);
}

char *sub_100102060(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002A98D8);
      unint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 5);
      char v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      char v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[32 * v8 + 32]) {
          memmove(v13, a4 + 32, 32 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10010394C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100102170(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002A9900);
      unint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[40 * v8 + 32]) {
          memmove(v12, a4 + 32, 40 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100103A40(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100102294(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8((uint64_t *)&unk_1002AA6C0);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      char v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100103B50(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1001023A4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100102B44(a1, a2, a3, a4, &qword_1002A98F0);
}

char *sub_1001023B0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002A7F40);
      unint64_t v10 = (char *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v12 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100103CA8(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001024AC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002A98C0);
      unint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_100103D90(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001025D4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002A98E8);
      unint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      char v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = _swiftEmptyArrayStorage;
      char v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100103E88(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1001026E4(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001026FC(a1, a2, a3, a4, &qword_1002A9938);
}

void *sub_1001026F0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_1001026FC(a1, a2, a3, a4, &qword_1002A9940);
}

void *sub_1001026FC(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_1000992E8(a5);
      int64_t v11 = (void *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v9;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v9 + 4]) {
          memmove(v14, a4 + 4, 16 * v9);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10010425C(0, v9, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_100102808(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002A98A0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 4 * v8 + 32)) {
          memmove(v13, a4 + 4, 4 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001052F8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100102918(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002AD5F0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001053E4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100102A28(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002A98B8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001053E4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100102B38(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100102B44(a1, a2, a3, a4, &qword_1002A98A8);
}

char *sub_100102B44(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = *((void *)a4 + 3);
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = *((void *)a4 + 2);
    if (v8 <= v9) {
      uint64_t v10 = *((void *)a4 + 2);
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      sub_1000992E8(a5);
      int64_t v11 = (char *)swift_allocObject();
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      *((void *)v11 + 2) = v9;
      *((void *)v11 + 3) = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 32;
      if (v6) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v11 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v9 + 32]) {
          memmove(v14, a4 + 32, 16 * v9);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1001056B8(0, v9, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

void *sub_100102C50(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002A9908);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      int64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      int64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1001054D0(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100102D78(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002A98E0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10010425C(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100102E88(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002A97F8);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001055C0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100102F98(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1000992E8(&qword_1002A9890);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1001057C4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void sub_1001030A8(void (*a1)(uint64_t, uint64_t))
{
  unint64_t v2 = v1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v17 = *v1;
      *((void *)&v17 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1001036C0(a1);
      uint64_t v3 = v17;
      unint64_t v4 = *((void *)&v17 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v17 = *v1;
      *((void *)&v17 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v5 = *((void *)&v17 + 1);
      uint64_t v6 = *(void *)(v17 + 16);
      uint64_t v16 = *(void *)(v17 + 24);
      uint64_t v7 = __DataStorage._bytes.getter();
      if (!v7)
      {
        __break(1u);
        JUMPOUT(0x1001032E4);
      }
      uint64_t v8 = v7;
      uint64_t v9 = __DataStorage._offset.getter();
      uint64_t v10 = v6 - v9;
      if (__OFSUB__(v6, v9))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v11 = __OFSUB__(v16, v6);
      uint64_t v12 = v16 - v6;
      if (v11) {
        goto LABEL_15;
      }
      uint64_t v13 = __DataStorage._length.getter();
      if (v13 >= v12) {
        uint64_t v14 = v12;
      }
      else {
        uint64_t v14 = v13;
      }
      a1(v8 + v10, v8 + v10 + v14);
      *unint64_t v1 = v17;
      v1[1] = v5 | 0x8000000000000000;
      return;
    case 3uLL:
      *(void *)((char *)&v17 + 7) = 0;
      *(void *)&long long v17 = 0;
      a1((uint64_t)&v17, (uint64_t)&v17);
      return;
    default:
      *(void *)&long long v17 = *v1;
      WORD4(v17) = v2;
      BYTE10(v17) = BYTE2(v2);
      BYTE11(v17) = BYTE3(v2);
      BYTE12(v17) = BYTE4(v2);
      BYTE13(v17) = BYTE5(v2);
      BYTE14(v17) = BYTE6(v2);
      a1((uint64_t)&v17, (uint64_t)&v17 + BYTE6(v2));
      uint64_t v3 = v17;
      unint64_t v4 = DWORD2(v17) | ((unint64_t)BYTE12(v17) << 32) | ((unint64_t)BYTE13(v17) << 40) | ((unint64_t)BYTE14(v17) << 48);
LABEL_4:
      *unint64_t v1 = v3;
      v1[1] = v4;
      return;
  }
}

char *sub_1001032F4(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  uint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)unint64_t v1 = xmmword_100240D00;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_100103770((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *uint64_t v5 = v4;
        goto LABEL_19;
      }
      *uint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_100103770(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        *unint64_t v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        *unint64_t v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      *unint64_t v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

uint64_t sub_1001035F8(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    return a1(a3, a4 - a3);
  }
  else {
    return a1(0, 0);
  }
}

void *sub_100103650(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }
  uint64_t result = a1(&v6, 0, 0);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

void sub_1001036C0(void (*a1)(uint64_t, uint64_t))
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if ((int)v4 < (int)v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v5 = __DataStorage._bytes.getter();
  if (!v5)
  {
LABEL_10:
    __break(1u);
    return;
  }
  uint64_t v6 = v5;
  uint64_t v7 = __DataStorage._offset.getter();
  uint64_t v8 = v3 - v7;
  if (__OFSUB__(v3, v7))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v9 = v4 - v3;
  uint64_t v10 = __DataStorage._length.getter();
  if (v10 >= v9) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = v10;
  }
  a1(v6 + v8, v6 + v8 + v11);
}

char *sub_100103770(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_100103824@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v3 & 1) == 0)
    {
      uint64_t v4 = result;
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001038B0(uint64_t a1)
{
  uint64_t v9 = sub_1000992E8((uint64_t *)&unk_1002AAA80);
  unint64_t v10 = sub_1000A99A4();
  v8[0] = a1;
  uint64_t v2 = sub_1000A5DA4(v8, v9);
  char v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_1001B05AC(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_100099BCC((uint64_t)v8);
  return v5;
}

uint64_t sub_10010394C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100103A40(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_1000992E8(&qword_1002A82E0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100103B50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char *sub_100103C44(unsigned char *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (unsigned char *)sub_1001B0CBC(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (unsigned char *)sub_1001B0D80((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (unsigned char *)sub_1001B0DFC((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

char *sub_100103CA8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100103D90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100103E88(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100103F74()
{
  unint64_t result = qword_1002A97E8;
  if (!qword_1002A97E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A97E8);
  }
  return result;
}

uint64_t sub_100103FC8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

double sub_10010409C(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v7 = sub_1000992E8(a2);
  uint64_t v13 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A5DA4(a1, a1[3]);
  a3();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v3)
  {
    uint64_t v10 = v13;
    char v15 = 0;
    KeyedDecodingContainer.decode(_:forKey:)();
    char v14 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    double v4 = v11;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v7);
  }
  sub_100099BCC((uint64_t)a1);
  return v4;
}

char *sub_10010425C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *_s14dockaccessoryd14MotionFeedbackV4dataACSg10Foundation4DataV_tcfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_1000A618C(a1, a2);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)();
  Swift::UInt8_optional v8 = Data.Iterator.next()();
  if ((*(_WORD *)&v8 & 0x100) != 0 || (Swift::UInt8 v9 = v8.value, LOWORD(v10) = Data.Iterator.next()(), (v10 & 0x100) != 0))
  {
    sub_1000A6240(a1, a2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    uint64_t v41 = v10;
    uint64_t v42 = a1;
    uint64_t v43 = v4;
    uint64_t v44 = v5;
    if (v9)
    {
      int v11 = 0;
      uint64_t v12 = _swiftEmptyArrayStorage;
      while (1)
      {
        Swift::UInt8_optional v13 = Data.Iterator.next()();
        if ((*(_WORD *)&v13 & 0x100) != 0) {
          break;
        }
        Swift::UInt8 value = v13.value;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v12 = sub_1001026FC(0, v12[2] + 1, 1, v12, &qword_1002A9940);
        }
        unint64_t v16 = v12[2];
        unint64_t v15 = v12[3];
        if (v16 >= v15 >> 1) {
          uint64_t v12 = sub_1001026FC((void *)(v15 > 1), v16 + 1, 1, v12, &qword_1002A9940);
        }
        ++v11;
        _OWORD v12[2] = v16 + 1;
        long long v17 = &v12[2 * v16];
        v17[4] = value;
        void v17[5] = 0;
        if (v11 == v9) {
          goto LABEL_16;
        }
      }
      sub_1000A6240(v42, a2);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v43);
    }
    else
    {
      uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_16:
      int v18 = v41;
      if ((_BYTE)v41)
      {
        int v19 = 0;
        unint64_t v20 = _swiftEmptyArrayStorage;
        while (1)
        {
          Swift::UInt8_optional v21 = Data.Iterator.next()();
          if ((*(_WORD *)&v21 & 0x100) != 0) {
            break;
          }
          Swift::UInt8 v22 = v21.value;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v20 = sub_1001026FC(0, v20[2] + 1, 1, v20, &qword_1002A9938);
          }
          unint64_t v24 = v20[2];
          unint64_t v23 = v20[3];
          if (v24 >= v23 >> 1) {
            unint64_t v20 = sub_1001026FC((void *)(v23 > 1), v24 + 1, 1, v20, &qword_1002A9938);
          }
          ++v19;
          void v20[2] = v24 + 1;
          double v25 = &v20[2 * v24];
          v25[4] = v22;
          void v25[5] = 0;
          if (v19 == v18) {
            goto LABEL_27;
          }
        }
      }
      else
      {
        unint64_t v20 = _swiftEmptyArrayStorage;
LABEL_27:
        if (v9)
        {
          unint64_t v26 = 0;
          uint64_t v27 = v9;
          uint64_t v28 = 5;
          while (1)
          {
            Swift::UInt8_optional v29 = Data.Iterator.next()();
            if ((*(_WORD *)&v29 & 0x100) != 0) {
              break;
            }
            Swift::UInt8_optional v30 = v29;
            Swift::UInt8_optional v31 = Data.Iterator.next()();
            if ((*(_WORD *)&v31 & 0x100) != 0) {
              break;
            }
            Swift::UInt8 v32 = v31.value;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v12 = sub_1001138A4(v12);
            }
            if (v26 >= v12[2])
            {
              __break(1u);
LABEL_50:
              __break(1u);
              JUMPOUT(0x1001047C0);
            }
            ++v26;
            *(double *)&v12[v28] = (double)(__int16)(v32 | (unsigned __int16)(*(_WORD *)&v30 << 8)) / 1000.0;
            v28 += 2;
            if (v27 == v26) {
              goto LABEL_35;
            }
          }
        }
        else
        {
LABEL_35:
          if (!(_BYTE)v41)
          {
LABEL_48:
            sub_1000A6240(v42, a2);
            (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v43);
            return v12;
          }
          unint64_t v33 = 0;
          uint64_t v34 = v41;
          uint64_t v35 = 5;
          while (1)
          {
            Swift::UInt8_optional v36 = Data.Iterator.next()();
            if ((*(_WORD *)&v36 & 0x100) != 0) {
              break;
            }
            Swift::UInt8_optional v37 = v36;
            Swift::UInt8_optional v38 = Data.Iterator.next()();
            if ((*(_WORD *)&v38 & 0x100) != 0) {
              break;
            }
            Swift::UInt8 v39 = v38.value;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v20 = sub_100113890(v20);
            }
            if (v33 >= v20[2]) {
              goto LABEL_50;
            }
            ++v33;
            *(double *)&v20[v35] = (double)(__int16)(v39 | (unsigned __int16)(*(_WORD *)&v37 << 8)) / 1000.0;
            v35 += 2;
            if (v34 == v33) {
              goto LABEL_48;
            }
          }
        }
      }
      sub_1000A6240(v42, a2);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v43);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

unint64_t sub_1001047D0()
{
  unint64_t result = qword_1002A97F0;
  if (!qword_1002A97F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A97F0);
  }
  return result;
}

unint64_t sub_100104824()
{
  unint64_t result = qword_1002A9800;
  if (!qword_1002A9800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9800);
  }
  return result;
}

unint64_t sub_100104878()
{
  unint64_t result = qword_1002A9810;
  if (!qword_1002A9810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9810);
  }
  return result;
}

unint64_t sub_1001048CC()
{
  unint64_t result = qword_1002A9828;
  if (!qword_1002A9828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9828);
  }
  return result;
}

unint64_t sub_100104920()
{
  unint64_t result = qword_1002A9840;
  if (!qword_1002A9840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9840);
  }
  return result;
}

uint64_t sub_100104974(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697469736F70 && a2 == 0xE900000000000073;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697469636F6C6576 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void *sub_100104A80(void *a1)
{
  uint64_t v3 = sub_1000992E8(&qword_1002A9910);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A5DA4(a1, a1[3]);
  sub_100104878();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    Swift::UInt8_optional v8 = _swiftEmptyArrayStorage;
    sub_100099BCC((uint64_t)a1);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000992E8(&qword_1002A9818);
    HIBYTE(v9) = 0;
    sub_100105AD8(&qword_1002A9918, &qword_1002A9818, (void (*)(void))sub_100105A84);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    Swift::UInt8_optional v8 = v10;
    sub_1000992E8(&qword_1002A9830);
    HIBYTE(v9) = 1;
    sub_100105AD8(&qword_1002A9928, &qword_1002A9830, (void (*)(void))sub_100105B44);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100099BCC((uint64_t)a1);
  }
  return v8;
}

uint64_t destroy for MotionFeedback()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s14dockaccessoryd14MotionFeedbackVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MotionFeedback(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MotionFeedback(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MotionFeedback(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MotionFeedback(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(&STACK[0x3D0], 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MotionFeedback()
{
  return &type metadata for MotionFeedback;
}

ValueMetadata *type metadata accessor for MotionFeedback.Position()
{
  return &type metadata for MotionFeedback.Position;
}

ValueMetadata *type metadata accessor for MotionFeedback.Velocity()
{
  return &type metadata for MotionFeedback.Velocity;
}

ValueMetadata *type metadata accessor for MotionFeedback.CodingKeys()
{
  return &type metadata for MotionFeedback.CodingKeys;
}

ValueMetadata *type metadata accessor for MotionFeedback.Velocity.CodingKeys()
{
  return &type metadata for MotionFeedback.Velocity.CodingKeys;
}

unsigned char *_s14dockaccessoryd14MotionFeedbackV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100104FA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MotionFeedback.Position.CodingKeys()
{
  return &type metadata for MotionFeedback.Position.CodingKeys;
}

unint64_t sub_100104FE4()
{
  unint64_t result = qword_1002A9848;
  if (!qword_1002A9848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9848);
  }
  return result;
}

unint64_t sub_10010503C()
{
  unint64_t result = qword_1002A9850;
  if (!qword_1002A9850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9850);
  }
  return result;
}

unint64_t sub_100105094()
{
  unint64_t result = qword_1002A9858;
  if (!qword_1002A9858)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9858);
  }
  return result;
}

unint64_t sub_1001050EC()
{
  unint64_t result = qword_1002A9860;
  if (!qword_1002A9860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9860);
  }
  return result;
}

unint64_t sub_100105144()
{
  unint64_t result = qword_1002A9868;
  if (!qword_1002A9868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9868);
  }
  return result;
}

unint64_t sub_10010519C()
{
  unint64_t result = qword_1002A9870;
  if (!qword_1002A9870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9870);
  }
  return result;
}

unint64_t sub_1001051F4()
{
  unint64_t result = qword_1002A9878;
  if (!qword_1002A9878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9878);
  }
  return result;
}

unint64_t sub_10010524C()
{
  unint64_t result = qword_1002A9880;
  if (!qword_1002A9880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9880);
  }
  return result;
}

unint64_t sub_1001052A4()
{
  unint64_t result = qword_1002A9888;
  if (!qword_1002A9888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9888);
  }
  return result;
}

char *sub_1001052F8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001053E4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1001054D0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001055C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001056B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_1000992E8(&qword_1002A98B0);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001057C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_1000992E8(&qword_1002A9898);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1001058D0(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8(&qword_1002A98D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100105930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  _OWORD v12[2] = v13;
  uint64_t result = sub_100103650((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10010599C, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_10010599C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100103824(a1, a2);
}

uint64_t sub_1001059BC(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)*(void *)(v2 + 16);
  v4[2] = &v5;
  return sub_1001035F8((uint64_t (*)(uint64_t, uint64_t))sub_100105A14, (uint64_t)v4, a1, a2);
}

uint64_t sub_100105A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v7 = *(uint64_t **)(v3 + 16);
  unint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000A618C(*v7, v9);
  uint64_t result = sub_1001FA5C0(a3, a1, a2, v8, v9);
  a3[3] = result;
  return result;
}

unint64_t sub_100105A84()
{
  unint64_t result = qword_1002A9920;
  if (!qword_1002A9920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9920);
  }
  return result;
}

uint64_t sub_100105AD8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100099D14(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100105B44()
{
  unint64_t result = qword_1002A9930;
  if (!qword_1002A9930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9930);
  }
  return result;
}

uint64_t sub_100105BB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t result = __chkstk_darwin(v7 - 8);
  if (!*(void *)(v1 + 16))
  {
    Swift::UInt8 v32 = v5;
    uint64_t v33 = v3;
    uint64_t v34 = v2;
    swift_retain_n();
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      Swift::UInt8_optional v31 = (void *)swift_slowAlloc();
      Swift::UInt8_optional v36 = v31;
      *(_DWORD *)uint64_t v11 = 136315138;
      Swift::UInt8_optional v30 = v11 + 4;
      uint64_t v12 = *(void *)(v1 + 64);
      unint64_t v13 = *(void *)(v1 + 72);
      swift_bridgeObjectRetain();
      uint64_t v35 = sub_1000993AC(v12, v13, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "starting txn %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v14 = *(void *)(v1 + 64);
    unint64_t v15 = *(void **)(v1 + 72);
    Swift::UInt8_optional v36 = (void *)0xD00000000000001DLL;
    unint64_t v37 = 0x8000000100236D80;
    v16._uint64_t countAndFlagsBits = v14;
    v16._object = v15;
    String.append(_:)(v16);
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v17 = os_transaction_create();
    swift_release();
    *(void *)(v1 + 16) = v17;
    swift_unknownObjectRelease();
    sub_1000B8610();
    Swift::UInt8_optional v36 = (void *)0xD000000000000023;
    unint64_t v37 = 0x8000000100236DA0;
    Swift::UInt8_optional v30 = (uint8_t *)v15;
    Swift::UInt8_optional v31 = (void *)v14;
    v18._uint64_t countAndFlagsBits = v14;
    v18._object = v15;
    String.append(_:)(v18);
    static DispatchQoS.unspecified.getter();
    Swift::UInt8_optional v36 = &_swiftEmptyArrayStorage;
    sub_100106BF0((unint64_t *)&qword_1002A8530, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_1000992E8(&qword_1002A9000);
    sub_1000B9AB4((unint64_t *)&qword_1002A8540, &qword_1002A9000);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v33 + 104))(v32, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v34);
    uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    unint64_t v20 = *(void **)(v1 + 24);
    *(void *)(v1 + 24) = v19;

    id v21 = [objc_allocWithZone((Class)NSDate) init];
    [v21 timeIntervalSince1970];
    uint64_t v23 = v22;

    *(void *)(v1 + 80) = v23;
    *(unsigned char *)(v1 + 8_Block_object_dispose(&STACK[0x3D0], 8) = 0;
    if (*(double *)(v1 + 56) > 0.0)
    {
      swift_allocObject();
      swift_weakInit();
      unint64_t v24 = *(void **)(v1 + 24);
      objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
      id v25 = v24;
      swift_retain();
      uint64_t v26 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
      uint64_t v27 = *(void **)(v1 + 32);
      *(void *)(v1 + 32) = v26;
      swift_release();
    }
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v28 = *(void *)(v1 + 48);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint8_t *, uint64_t, uint64_t))(v28 + 8))(v31, v30, ObjectType, v28);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void sub_1001060E8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  long long v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v0 + 16))
  {
    os_log_type_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "stopping txn", v12, 2u);
      swift_slowDealloc();
    }

    unint64_t v13 = *(void **)(v1 + 24);
    if (v13)
    {
      aBlock[4] = sub_100106BE8;
      aBlock[5] = v1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = sub_1001468DC;
      void aBlock[3] = &unk_100277400;
      uint64_t v14 = _Block_copy(aBlock);
      id v15 = v13;
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v16[1] = &_swiftEmptyArrayStorage;
      sub_100106BF0((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_1000992E8((uint64_t *)&unk_1002A7F60);
      v16[0] = v6;
      sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v14);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      (*(void (**)(char *, void))(v7 + 8))(v9, v16[0]);
      swift_release();
    }
  }
}

uint64_t sub_10010640C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    id v3 = v2;
    dispatch thunk of RepeatingTimer.cancel()();

    uint64_t v4 = (void *)a1[4];
    a1[4] = 0;

    long long v5 = (void *)a1[3];
    a1[3] = 0;
  }
  a1[2] = 0;

  return swift_unknownObjectRelease();
}

void sub_100106474()
{
  id v1 = [objc_allocWithZone((Class)NSDate) init];
  [v1 timeIntervalSince1970];
  double v3 = v2;

  if (*(unsigned char *)(v0 + 88))
  {
    __break(1u);
  }
  else if (*(double *)(v0 + 56) < v3 - *(double *)(v0 + 80))
  {
    sub_1001060E8();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v4 = *(void *)(v0 + 48);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void, void, uint64_t, uint64_t))(v4 + 16))(*(void *)(v0 + 64), *(void *)(v0 + 72), ObjectType, v4);
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_100106558()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  unint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v10 = *(void **)(v0 + 24);
  if (v10)
  {
    aBlock[4] = sub_1000BF168;
    aBlock[5] = v0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1001468DC;
    void aBlock[3] = &unk_1002773D8;
    v13[0] = result;
    os_log_type_t v11 = _Block_copy(aBlock);
    id v12 = v10;
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v13[1] = &_swiftEmptyArrayStorage;
    sub_100106BF0((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_1000992E8((uint64_t *)&unk_1002A7F60);
    sub_1000B9AB4((unint64_t *)&qword_1002A8580, (uint64_t *)&unk_1002A7F60);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v11);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, void))(v6 + 8))(v9, v13[0]);
    return swift_release();
  }
  return result;
}

void sub_1001067F4(uint64_t a1)
{
  id v2 = [objc_allocWithZone((Class)NSDate) init];
  [v2 timeIntervalSince1970];
  uint64_t v4 = v3;

  *(void *)(a1 + 80) = v4;
  *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x3D0], 8) = 0;
  if (*(double *)(a1 + 56) > 0.0)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    if (v5)
    {
      id v6 = v5;
      dispatch thunk of RepeatingTimer.cancel()();
    }
    swift_allocObject();
    swift_weakInit();
    uint64_t v7 = *(void **)(a1 + 24);
    id v8 = objc_allocWithZone((Class)type metadata accessor for RepeatingTimer());
    id v9 = v7;
    swift_retain();
    uint64_t v10 = RepeatingTimer.init(interval:fireOnce:queue:_:)();
    id v11 = *(id *)(a1 + 32);
    *(void *)(a1 + 32) = v10;
    swift_release();
  }
}

uint64_t sub_10010693C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100106474();
    return swift_release();
  }
  return result;
}

uint64_t sub_100106994()
{
  swift_unknownObjectRelease();

  sub_1000B9E4C(v0 + 40);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd11Transaction_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100106A5C()
{
  return type metadata accessor for Transaction();
}

uint64_t type metadata accessor for Transaction()
{
  uint64_t result = qword_1002A9990;
  if (!qword_1002A9990) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100106AB0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100106B7C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100106BB4()
{
  return sub_10010693C();
}

uint64_t sub_100106BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100106BE0()
{
  return swift_release();
}

uint64_t sub_100106BE8()
{
  return sub_10010640C(v0);
}

uint64_t sub_100106BF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100106C40(uint64_t a1)
{
  uint64_t v2 = v1;
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 1;
  *(void *)(v2 + 32) = 0;
  *(unsigned char *)(v2 + 40) = 1;
  *(void *)(v2 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0;
  *(_WORD *)(v2 + 56) = 1;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_13;
  }
  unint64_t v4 = sub_10016DB60(0x6953676F4C78616DLL, 0xEA0000000000657ALL);
  if (v5)
  {
    *(void *)(v2 + 16) = [*(id *)(*(void *)(a1 + 56) + 8 * v4) integerValue];
    *(unsigned char *)(v2 + 24) = 0;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_13;
  }
  unint64_t v6 = sub_10016DB60(0x79616C6564, 0xE500000000000000);
  if (v7)
  {
    *(void *)(v2 + 32) = [*(id *)(*(void *)(a1 + 56) + 8 * v6) integerValue];
    *(unsigned char *)(v2 + 40) = 0;
  }
  if (!*(void *)(a1 + 16)) {
    goto LABEL_13;
  }
  unint64_t v8 = sub_10016DB60(0x746F687370616E73, 0xEC00000065707954);
  if (v9)
  {
    *(void *)(v2 + 4_Block_object_dispose(&STACK[0x3D0], 8) = [*(id *)(*(void *)(a1 + 56) + 8 * v8) unsignedIntegerValue];
    *(unsigned char *)(v2 + 56) = 0;
  }
  if (*(void *)(a1 + 16) && (unint64_t v10 = sub_10016DB60(0x74617453706D7564, 0xE900000000000065), (v11 & 1) != 0))
  {
    id v12 = *(id *)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRelease();
    unsigned __int8 v13 = [v12 BOOLValue];

    *(unsigned char *)(v2 + 57) = v13;
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
  }
  return v2;
}

unint64_t sub_100106DBC()
{
  uint64_t v1 = v0;
  unint64_t v2 = sub_1001E9E0C((uint64_t)_swiftEmptyArrayStorage);
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(unsigned char *)(v1 + 40)) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v10 = *(void *)(v1 + 32);
    uint64_t v14 = &type metadata for Int;
    *(void *)&long long v13 = v10;
    sub_1000FE5FC(&v13, v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1001F4170(v12, 0x79616C6564, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v1 + 56)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v14 = &type metadata for Int;
  *(void *)&long long v13 = v8;
  sub_1000FE5FC(&v13, v12);
  char v9 = swift_isUniquelyReferenced_nonNull_native();
  sub_1001F4170(v12, 0x6953676F4C78616DLL, 0xEA0000000000657ALL, v9);
  swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v1 + 40) & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  if ((*(unsigned char *)(v1 + 56) & 1) == 0)
  {
LABEL_4:
    uint64_t v3 = *(void *)(v1 + 48);
    uint64_t v14 = &type metadata for UInt;
    *(void *)&long long v13 = v3;
    sub_1000FE5FC(&v13, v12);
    char v4 = swift_isUniquelyReferenced_nonNull_native();
    sub_1001F4170(v12, 0x746F687370616E73, 0xEC00000065707954, v4);
    swift_bridgeObjectRelease();
  }
LABEL_5:
  char v5 = *(unsigned char *)(v1 + 57);
  uint64_t v14 = &type metadata for Bool;
  LOBYTE(v13) = v5;
  sub_1000FE5FC(&v13, v12);
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_1001F4170(v12, 0x74617453706D7564, 0xE900000000000065, v6);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100106FA0()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AccessoryDiagnosticsOptions()
{
  return self;
}

uint64_t sub_100106FD4(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA0000000000676ELL;
  uint64_t v3 = 0x6972696150746F6ELL;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6972696150746F6ELL;
  unint64_t v6 = 0xEA0000000000676ELL;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6E69686372616573;
      unint64_t v6 = 0xE900000000000067;
      break;
    case 2:
      uint64_t v5 = 0x69746164696C6176;
      break;
    case 3:
      uint64_t v5 = 0x46676E6974696177;
      unint64_t v6 = 0xEE0068747541726FLL;
      break;
    case 4:
      uint64_t v5 = 0x7A69726F68747561;
      goto LABEL_8;
    case 5:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x676E6972696170;
      break;
    case 6:
      uint64_t v5 = 0x72756769666E6F63;
LABEL_8:
      unint64_t v6 = 0xEB00000000676E69;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v3 = 0x6E69686372616573;
      unint64_t v2 = 0xE900000000000067;
      break;
    case 2:
      uint64_t v3 = 0x69746164696C6176;
      break;
    case 3:
      uint64_t v3 = 0x46676E6974696177;
      unint64_t v2 = 0xEE0068747541726FLL;
      break;
    case 4:
      uint64_t v3 = 0x7A69726F68747561;
      goto LABEL_16;
    case 5:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x676E6972696170;
      break;
    case 6:
      uint64_t v3 = 0x72756769666E6F63;
LABEL_16:
      unint64_t v2 = 0xEB00000000676E69;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

Swift::Int sub_100107224()
{
  return Hasher._finalize()();
}

uint64_t sub_100107364()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_id;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 32);
  unint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 40);
  sub_1000A6240(*(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 8), *(void *)(v0 + OBJC_IVAR____TtC14dockaccessoryd21AccessoryPairingToken_setupPayload + 16));
  sub_1000A6240(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t sub_100107430()
{
  return type metadata accessor for AccessoryPairingToken();
}

uint64_t type metadata accessor for AccessoryPairingToken()
{
  uint64_t result = qword_1002A9C70;
  if (!qword_1002A9C70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100107484()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100107538(unsigned __int8 *a1, char *a2)
{
  return sub_100106FD4(*a1, *a2);
}

Swift::Int sub_100107544()
{
  return sub_100107224();
}

uint64_t sub_100107550()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10010767C()
{
  return sub_100107224();
}

unint64_t sub_100107684@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100107FEC(*a1);
  *a2 = result;
  return result;
}

void sub_1001076B4(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEA0000000000676ELL;
  uint64_t v3 = 0x6972696150746F6ELL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE900000000000067;
      uint64_t v3 = 0x6E69686372616573;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x69746164696C6176;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x3D0], 8) = 0xEA0000000000676ELL;
      return;
    case 3:
      strcpy((char *)a1, "waitingForAuth");
      *(unsigned char *)(a1 + 15) = -18;
      return;
    case 4:
      uint64_t v4 = 0x7A69726F68747561;
      goto LABEL_9;
    case 5:
      *(void *)a1 = 0x676E6972696170;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x3D0], 8) = 0xE700000000000000;
      return;
    case 6:
      uint64_t v4 = 0x72756769666E6F63;
LABEL_9:
      *(void *)a1 = v4;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x3D0], 8) = 0xEB00000000676E69;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + _Block_object_dispose(&STACK[0x3D0], 8) = v2;
      break;
  }
}

uint64_t sub_1001077C0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002A9C30);
  sub_100096F64(v0, (uint64_t)qword_1002A9C30);
  return Logger.init(subsystem:category:)();
}

id sub_100107860()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DKProxManager();
  return [super dealloc];
}

uint64_t type metadata accessor for DKProxManager()
{
  return self;
}

uint64_t sub_100107980(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1002A7B58 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100096F64(v4, (uint64_t)qword_1002A9C30);
  id v5 = a1;
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    char v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138543362;
    v14[0] = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SBS did deactivate service: %{public}@", v8, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = v2 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_delegate;
  swift_beginAccess();
  sub_100107F24(v11, (uint64_t)v14);
  if (v14[3])
  {
    sub_1000A5D40((uint64_t)v14, (uint64_t)v13);
    sub_100107F8C((uint64_t)v14);
    sub_1000A5DA4(v13, v13[3]);
    sub_1000DAE74();
    sub_100099BCC((uint64_t)v13);
  }
  else
  {
    sub_100107F8C((uint64_t)v14);
  }
  swift_retain();
  sub_1001060E8();
  swift_release();
  *(void *)(v2 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_proxCard) = 0;
  return swift_release();
}

uint64_t getEnumTagSinglePayload for ProxPairingState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ProxPairingState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100107E00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProxPairingState()
{
  return &type metadata for ProxPairingState;
}

unint64_t sub_100107E3C()
{
  unint64_t result = qword_1002A9E28;
  if (!qword_1002A9E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002A9E28);
  }
  return result;
}

uint64_t sub_100107E90()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14dockaccessoryd13DKProxManager_delegate;
  swift_beginAccess();
  sub_100107F24(v1, (uint64_t)v4);
  if (!v5) {
    return sub_100107F8C((uint64_t)v4);
  }
  sub_1000A5D40((uint64_t)v4, (uint64_t)v3);
  sub_100107F8C((uint64_t)v4);
  sub_1000A5DA4(v3, v3[3]);
  sub_1000DAB8C();
  return sub_100099BCC((uint64_t)v3);
}

uint64_t sub_100107F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000992E8((uint64_t *)&unk_1002A9E30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100107F8C(uint64_t a1)
{
  uint64_t v2 = sub_1000992E8((uint64_t *)&unk_1002A9E30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100107FEC(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100274A58, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

void sub_100108038(void *a1)
{
  if (qword_1002A7B58 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100096F64(v2, (uint64_t)qword_1002A9C30);
  id v8 = a1;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    unsigned int v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138543362;
    id v7 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unsigned int v6 = v8;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SBS did activate service: %{public}@", v5, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_100108204(void *a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_1002A7B58 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100096F64(v3, (uint64_t)qword_1002A9C30);
    id v4 = a1;
    swift_errorRetain();
    id v5 = v4;
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      id v8 = (void *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138543618;
      id v9 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v8 = v5;

      *(_WORD *)(v7 + 12) = 2082;
      swift_getErrorValue();
      uint64_t v10 = Error.localizedDescription.getter();
      sub_1000993AC(v10, v11, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "SBS invalidated service: %{public}@ with error: %{public}s", (uint8_t *)v7, 0x16u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_1002A7B58 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100096F64(v12, (uint64_t)qword_1002A9C30);
    oslog = a1;
    long long v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      Swift::String v16 = (void *)swift_slowAlloc();
      *(_DWORD *)id v15 = 138543362;
      uint64_t v19 = (uint64_t)oslog;
      uint64_t v17 = oslog;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v16 = oslog;

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "SBS invalidated service: %{public}@", v15, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
}

void sub_1001085F8(uint64_t a1, NSString a2, uint64_t a3, uint64_t a4)
{
  if (a2) {
    a2 = String._bridgeToObjectiveC()();
  }
  id v5 = a2;
  (*(void (**)(uint64_t))(a4 + 16))(a4);
}

uint64_t sub_10010865C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  os_log_type_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (sub_100135BB4(&qword_1002AA5E0, (void (*)(uint64_t))&type metadata accessor for UUID),
        uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(),
        uint64_t v8 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    uint64_t v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    os_log_type_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      sub_100135BB4((unint64_t *)&unk_1002AA100, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_100108870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          Swift::String v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1001089A8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100096F00(v0, qword_1002A9E40);
  sub_100096F64(v0, (uint64_t)qword_1002A9E40);
  return Logger.init(subsystem:category:)();
}

Swift::Int sub_100108A20(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Logger();
  Swift::Int result = __chkstk_darwin(v8);
  BOOL v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2) {
    return result;
  }
  long long v48 = v12;
  uint64_t v49 = v10;
  Swift::Int v50 = result;
  id v13 = [a2 elements];
  unint64_t v14 = sub_100099C7C(0, &qword_1002A9F20);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_4:
      BOOL v17 = __OFSUB__(v16, 1);
      unint64_t v18 = v16 - 1;
      if (v17)
      {
        __break(1u);
      }
      else if ((v15 & 0xC000000000000001) == 0)
      {
        if ((v18 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else
        {
          unint64_t v19 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease();
          if (v18 < v19) {
            goto LABEL_8;
          }
        }
        __break(1u);
        goto LABEL_31;
      }
      specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
LABEL_8:
      id v20 = [a2 elements];
      unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v46 = a4;
      if (!(v14 >> 62))
      {
        uint64_t v21 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
        Swift::Int result = swift_bridgeObjectRetain();
        uint64_t v47 = a5;
        if (v21)
        {
LABEL_10:
          if (v21 < 1)
          {
            __break(1u);
            return result;
          }
          uint64_t v22 = 0;
          uint64_t v23 = _swiftEmptyArrayStorage;
          do
          {
            if ((v14 & 0xC000000000000001) != 0) {
              id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v24 = *(id *)(v14 + 8 * v22 + 32);
            }
            id v25 = v24;
            id v26 = [v24 bundleIdentifier];
            if (v26)
            {
              uint64_t v27 = v26;
              uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v30 = v29;

              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v23 = sub_100102294(0, v23[2] + 1, 1, v23);
              }
              unint64_t v32 = v23[2];
              unint64_t v31 = v23[3];
              if (v32 >= v31 >> 1) {
                uint64_t v23 = sub_100102294((void *)(v31 > 1), v32 + 1, 1, v23);
              }
              void v23[2] = v32 + 1;
              uint64_t v33 = &v23[2 * v32];
              v33[4] = v28;
              v33[5] = v30;
            }
            else
            {
            }
            ++v22;
          }
          while (v21 != v22);
          goto LABEL_33;
        }
LABEL_32:
        uint64_t v23 = _swiftEmptyArrayStorage;
LABEL_33:
        uint64_t v34 = (void *)(v46 + 16);
        swift_bridgeObjectRelease_n();
        swift_beginAccess();
        *uint64_t v34 = v23;
        swift_bridgeObjectRelease();
        if (qword_1002A7B60 != -1) {
          swift_once();
        }
        uint64_t v35 = v50;
        uint64_t v36 = sub_100096F64(v50, (uint64_t)qword_1002A9E40);
        Swift::UInt8_optional v38 = v48;
        uint64_t v37 = v49;
        (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v48, v36, v35);
        swift_retain_n();
        Swift::UInt8 v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          v52[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136315138;
          __int16 v45 = v41 + 4;
          swift_beginAccess();
          swift_bridgeObjectRetain();
          uint64_t v42 = Array.description.getter();
          unint64_t v44 = v43;
          swift_bridgeObjectRelease();
          uint64_t v51 = sub_1000993AC(v42, v44, v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Found these apps in foreground: %s", v41, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, Swift::Int))(v49 + 8))(v48, v50);
        }
        else
        {

          swift_release_n();
          (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v35);
        }
        swift_beginAccess();
        sub_100108FC8();
        swift_endAccess();
        return OS_dispatch_semaphore.signal()();
      }
LABEL_31:
      swift_bridgeObjectRetain();
      Swift::Int result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v21 = result;
      uint64_t v47 = a5;
      if (result) {
        goto LABEL_10;
      }
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16) {
      goto LABEL_4;
    }
  }

  return swift_bridgeObjectRelease();
}

void sub_100108FC8()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 16);
  if (v2)
  {
    unint64_t v3 = v2 - 1;
    if (v2 != 1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_16:
      }
        uint64_t v1 = sub_1001138B8(v1);
      uint64_t v2 = (uint64_t)&v1[2 * v2 + 3];
      uint64_t v4 = v1 + 5;
      uint64_t v5 = 1;
      do
      {
        if (v5 - 1 != v3)
        {
          unint64_t v7 = v1[2];
          if (v5 - 1 >= v7)
          {
            __break(1u);
LABEL_14:
            __break(1u);
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
          if (v3 >= v7) {
            goto LABEL_14;
          }
          uint64_t v8 = *(v4 - 1);
          uint64_t v9 = *v4;
          uint64_t v10 = *(void *)v2;
          *(v4 - 1) = *(void *)(v2 - 8);
          uint64_t *v4 = v10;
          unint64_t v11 = v1[2];
          swift_bridgeObjectRetain();
          if (v3 >= v11) {
            goto LABEL_15;
          }
          *(void *)(v2 - _Block_object_dispose(&STACK[0x3D0], 8) = v8;
          *(void *)uint64_t v2 = v9;
          swift_bridgeObjectRelease();
        }
        --v3;
        v2 -= 16;
        v4 += 2;
      }
      while (v5++ < (uint64_t)v3);
      *(void *)uint64_t v0 = v1;
    }
  }
}

void sub_1001090C0(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

void sub_1001091E8(void *a1, int a2, void *aBlock, void *a4)
{
  Swift::Int v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  sub_100115964((void (**)(id, id, void))v6, a4);
  _Block_release(v6);
  _Block_release(v6);
}

void sub_10010927C(void *a1, int a2, void *aBlock, void (*a4)(void *))
{
  Swift::Int v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4(v6);
  _Block_release(v6);
  _Block_release(v6);
}

void sub_100109410(uint64_t a1, char a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v101 = a5;
  uint64_t v102 = a4;
  uint64_t v100 = a1;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v18 = (char *)&v92 - v17;
  if ((a2 & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v69 = sub_100096F64(v8, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v69, v8);
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      id v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Animator callback, but not connected. Ignoring", v72, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return;
  }
  unsigned int v99 = v16;
  uint64_t v97 = a6;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_1002B1628;
  uint64_t v20 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v21 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v21 + 4);
  swift_release();
  uint64_t v22 = *(void **)(v19 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v23 = *(os_unfair_lock_s **)(v19 + v20);
  id v24 = v22;
  swift_retain();
  os_unfair_lock_unlock(v23 + 4);
  swift_release();
  if (!v22) {
    return;
  }
  uint64_t v25 = *(void *)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v98 = (char *)OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  id v26 = *(void **)(v25 + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
  uint64_t v27 = (char *)(id)v25;
  id v28 = v26;
  OS_dispatch_semaphore.wait()();

  uint64_t v29 = &v27[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v30 = *(void *)v29;
  uint64_t v31 = *(void *)(*(void *)v29 + 16);
  if (!v31) {
    goto LABEL_10;
  }
  uint64_t v94 = v25;
  os_log_type_t v95 = v27;
  *(void *)&long long v96 = v24;
  uint64_t v32 = v30 + 32;
  uint64_t v33 = v99 + 8;
  swift_bridgeObjectRetain();
  do
  {
    sub_1000A5D40(v32, (uint64_t)v103);
    id v34 = *(id *)(*sub_1000A5DA4(v103, v103[3]) + 24);
    DockCoreInfo.identifier.getter();

    DockCoreInfo.identifier.getter();
    LOBYTE(v34) = static UUID.== infix(_:_:)();
    uint64_t v35 = *(void (**)(char *, uint64_t))v33;
    (*(void (**)(char *, uint64_t))v33)(v15, v12);
    v35(v18, v12);
    if (v34)
    {
      swift_bridgeObjectRelease();
      id v73 = *(id *)&v98[v94];
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v103, (uint64_t)&v104);
      sub_100099BCC((uint64_t)v103);

      id v24 = (id)v96;
      if (*((void *)&v105 + 1)) {
        goto LABEL_11;
      }
      goto LABEL_41;
    }
    sub_100099BCC((uint64_t)v103);
    v32 += 40;
    --v31;
  }
  while (v31);
  swift_bridgeObjectRelease();
  id v24 = (id)v96;
  uint64_t v27 = v95;
  uint64_t v25 = v94;
LABEL_10:
  id v36 = *(id *)&v98[v25];
  OS_dispatch_semaphore.signal()();

  uint64_t v106 = 0;
  long long v104 = 0u;
  long long v105 = 0u;

  if (!*((void *)&v105 + 1))
  {
LABEL_41:

    sub_1000A61E4((uint64_t)&v104, (uint64_t *)&unk_1002AAA30);
    return;
  }
LABEL_11:
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {

    return;
  }
  uint64_t v37 = v103[0];
  sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
  id v38 = *(id *)(v37 + 24);
  Swift::UInt8 v39 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
  char v40 = static NSObject.== infix(_:_:)();

  if ((v40 & 1) == 0)
  {

LABEL_45:
    swift_release();
    return;
  }
  uint64_t v41 = v24;
  uint64_t v42 = *(char **)(v37 + 16);
  if (!v42
    || (uint64_t v43 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral,
        (unint64_t v44 = *(void **)&v42[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) == 0))
  {

    goto LABEL_45;
  }
  __int16 v45 = v42;
  if ([v44 state] != (id)2)
  {

    swift_release();
    return;
  }
  unsigned int v99 = v45;
  uint64_t v46 = (char *)self;
  sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v47 = swift_allocObject();
  long long v96 = xmmword_100240BE0;
  *(_OWORD *)(v47 + 16) = xmmword_100240BE0;
  *(void *)(v47 + 56) = &type metadata for UInt32;
  *(void *)(v47 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v47 + 32) = 512;
  unint64_t v48 = (unint64_t)"Swift/Integers.swift";
  String.init(format:_:)();
  NSString v49 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v98 = v46;
  id v50 = [v46 UUIDWithString:v49];

  uint64_t v51 = *(void **)&v42[v43];
  if (!v51 || (id v52 = [v51 services]) == 0)
  {

    swift_release();
    return;
  }
  uint64_t v53 = v52;
  sub_100099C7C(0, (unint64_t *)&unk_1002A8F30);
  unint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v55 = v50;
  unint64_t v56 = (unint64_t)sub_1001138E4(v54);
  swift_bridgeObjectRelease();

  if (v56 >> 62) {
    goto LABEL_91;
  }
  if (!*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_92:

    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_20:
  if ((v56 & 0xC000000000000001) == 0)
  {
    uint64_t v57 = &type metadata for UInt32;
    if (*(void *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      os_log_type_t v95 = (char *)*(id *)(v56 + 32);
      goto LABEL_23;
    }
    __break(1u);
LABEL_96:
    uint64_t v91 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v43 = v101;
    if (v91) {
      goto LABEL_27;
    }
    goto LABEL_97;
  }
  while (2)
  {
    os_log_type_t v95 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_23:

    swift_bridgeObjectRelease();
    uint64_t v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = v96;
    *(void *)(v58 + 56) = &type metadata for UInt32;
    *(void *)(v58 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v58 + 32) = 260;
    String.init(format:_:)();
    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v60 = [v98 UUIDWithString:v59];

    if (!*(void *)&v42[v43])
    {

      uint64_t v57 = v41;
LABEL_98:

      swift_release();
      return;
    }
    uint64_t v42 = v95;
    id v61 = [v95 characteristics];
    uint64_t v57 = v41;
    if (!v61)
    {

      goto LABEL_98;
    }
    unsigned int v62 = v61;
    sub_100099C7C(0, (unint64_t *)&unk_1002A9F60);
    unint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v55 = v60;
    unint64_t v48 = (unint64_t)sub_1001138E4(v56);
    swift_bridgeObjectRelease();

    if (v48 >> 62) {
      goto LABEL_96;
    }
    uint64_t v43 = v101;
    if (!*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_97:

      swift_bridgeObjectRelease();
      goto LABEL_98;
    }
LABEL_27:
    if ((v48 & 0xC000000000000001) != 0)
    {
      id v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_30:
      id v93 = v63;

      swift_bridgeObjectRelease();
      uint64_t v64 = (void *)v100;
      uint64_t v42 = (char *)(v100 + 64);
      uint64_t v65 = 1 << *(unsigned char *)(v100 + 32);
      uint64_t v66 = -1;
      if (v65 < 64) {
        uint64_t v66 = ~(-1 << v65);
      }
      unint64_t v67 = v66 & *(void *)(v100 + 64);
      uint64_t v98 = (char *)((unint64_t)(v65 + 63) >> 6);
      swift_bridgeObjectRetain();
      uint64_t v68 = 0;
      uint64_t v94 = (uint64_t)_swiftEmptyArrayStorage;
      *(void *)&long long v96 = _swiftEmptyArrayStorage;
      if (!v67)
      {
LABEL_48:
        uint64_t v76 = v68 + 1;
        if (!__OFADD__(v68, 1))
        {
          id v55 = &unk_1002B1000;
          if (v76 >= (uint64_t)v98) {
            goto LABEL_88;
          }
          unint64_t v77 = *(void *)&v42[8 * v76];
          ++v68;
          if (!v77)
          {
            uint64_t v68 = v76 + 1;
            if (v76 + 1 >= (uint64_t)v98) {
              goto LABEL_88;
            }
            unint64_t v77 = *(void *)&v42[8 * v68];
            if (!v77)
            {
              uint64_t v68 = v76 + 2;
              if (v76 + 2 >= (uint64_t)v98) {
                goto LABEL_88;
              }
              unint64_t v77 = *(void *)&v42[8 * v68];
              if (!v77)
              {
                uint64_t v78 = v76 + 3;
                if (v78 >= (uint64_t)v98)
                {
LABEL_88:
                  swift_release();
                  sub_100197990();
                  uint64_t v90 = v93;
                  sub_1001A6C14(v94, v96, 256, (uint64_t)v93);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1001A9F84(3.0);
                  swift_release();

                  return;
                }
                unint64_t v77 = *(void *)&v42[8 * v78];
                if (!v77)
                {
                  while (1)
                  {
                    uint64_t v68 = v78 + 1;
                    if (__OFADD__(v78, 1)) {
                      break;
                    }
                    if (v68 >= (uint64_t)v98) {
                      goto LABEL_88;
                    }
                    unint64_t v77 = *(void *)&v42[8 * v68];
                    ++v78;
                    if (v77) {
                      goto LABEL_61;
                    }
                  }
                  __break(1u);
                  continue;
                }
                uint64_t v68 = v78;
              }
            }
          }
LABEL_61:
          unint64_t v67 = (v77 - 1) & v77;
          unint64_t v75 = __clz(__rbit64(v77)) + (v68 << 6);
          goto LABEL_62;
        }
        __break(1u);
LABEL_91:
        if (_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_20;
        }
        goto LABEL_92;
      }
      while (1)
      {
        while (1)
        {
          unint64_t v74 = __clz(__rbit64(v67));
          v67 &= v67 - 1;
          unint64_t v75 = v74 | (v68 << 6);
LABEL_62:
          os_log_type_t v79 = (unint64_t *)(v64[6] + 16 * v75);
          unint64_t v56 = *v79;
          id v55 = (id)v79[1];
          double v80 = *(double *)(v64[7] + 8 * v75);
          swift_bridgeObjectRetain();
          unint64_t v48 = (unint64_t)v102;
          unint64_t v81 = dispatch thunk of DockCoreAccessory.getActuatorIndex(name:system:)();
          if ((v81 & 0x8000000000000000) == 0)
          {
            unint64_t v48 = v81;
            if (v81 < v64[2]) {
              break;
            }
          }
          swift_bridgeObjectRelease();
          if (!v67) {
            goto LABEL_48;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v94 = (uint64_t)sub_100102A28(0, *(void *)(v94 + 16) + 1, 1, (void *)v94);
        }
        unint64_t v83 = *(void *)(v94 + 16);
        unint64_t v82 = *(void *)(v94 + 24);
        if (v83 >= v82 >> 1) {
          uint64_t v94 = (uint64_t)sub_100102A28((void *)(v82 > 1), v83 + 1, 1, (void *)v94);
        }
        uint64_t v84 = (void *)v94;
        *(void *)(v94 + 16) = v83 + 1;
        v84[v83 + 4] = v48;
        type metadata accessor for Actuator();
        if (v56 == static Actuator.Pitch.getter() && v55 == v85) {
          break;
        }
        unint64_t v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v43 = v101;
        if (v56) {
          goto LABEL_78;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          *(void *)&long long v96 = sub_100102918(0, *(void *)(v96 + 16) + 1, 1, (void *)v96);
        }
        unint64_t v48 = *(void *)(v96 + 16);
        unint64_t v87 = *(void *)(v96 + 24);
        id v55 = (id)(v48 + 1);
        if (v48 >= v87 >> 1) {
          *(void *)&long long v96 = sub_100102918((void *)(v87 > 1), v48 + 1, 1, (void *)v96);
        }
LABEL_83:
        uint64_t v89 = v96;
        *(void *)(v96 + 16) = v55;
        *(double *)(v89 + 8 * v48 + 32) = v80;
        uint64_t v64 = (void *)v100;
        if (!v67) {
          goto LABEL_48;
        }
      }
      swift_bridgeObjectRelease_n();
      uint64_t v43 = v101;
LABEL_78:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        *(void *)&long long v96 = sub_100102918(0, *(void *)(v96 + 16) + 1, 1, (void *)v96);
      }
      unint64_t v48 = *(void *)(v96 + 16);
      unint64_t v88 = *(void *)(v96 + 24);
      id v55 = (id)(v48 + 1);
      if (v48 >= v88 >> 1) {
        *(void *)&long long v96 = sub_100102918((void *)(v88 > 1), v48 + 1, 1, (void *)v96);
      }
      double v80 = -v80;
      goto LABEL_83;
    }
    break;
  }
  if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v63 = *(id *)(v48 + 32);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t sub_10010A2F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = v12;
  v8[18] = v13;
  v8[15] = a7;
  v8[16] = a8;
  v8[13] = a5;
  v8[14] = a6;
  v8[12] = a4;
  uint64_t v9 = type metadata accessor for Logger();
  v8[19] = v9;
  v8[20] = *(void *)(v9 - 8);
  v8[21] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10010A3C8, 0, 0);
}

uint64_t sub_10010A3C8()
{
  uint64_t v1 = TrajectoryCommand.encode()();
  v0[22] = v2;
  if (v2 >> 60 == 15)
  {
    unint64_t v3 = (void (*)(void, id))v0[14];
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v5;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD000000000000019;
    *(void *)(inited + 56) = 0x80000001002375C0;
    sub_1001E9E0C(inited);
    id v6 = objc_allocWithZone((Class)NSError);
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v9 = [v6 initWithDomain:v7 code:19 userInfo:isa];

    id v10 = v9;
    v3(0, v9);

    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    uint64_t v13 = v1;
    unint64_t v14 = v2;
    uint64_t v15 = v0[12];
    v0[23] = v1;
    uint64_t v16 = (void *)swift_task_alloc();
    v0[24] = v16;
    void v16[2] = v15;
    v16[3] = v13;
    v16[4] = v14;
    uint64_t v17 = (void *)swift_task_alloc();
    v0[25] = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_10010A66C;
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 26, 0, 0, 0xD000000000000012, 0x80000001002375E0, sub_100135AB0, v16, &type metadata for Bool);
  }
}

uint64_t sub_10010A66C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10010A784, 0, 0);
}

uint64_t sub_10010A784()
{
  sub_1000A9990(*(void *)(v0 + 184), *(void *)(v0 + 176));
  if (*(unsigned char *)(v0 + 208))
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 160);
    uint64_t v1 = *(void *)(v0 + 168);
    uint64_t v3 = *(void *)(v0 + 152);
    uint64_t v4 = sub_100096F64(v3, (uint64_t)qword_1002A9E40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      NSString v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Registering for trajectory progress callback", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v13 = *(void **)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 96);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v11);
    uint64_t v15 = (void *)swift_allocObject();
    void v15[2] = v13;
    void v15[3] = v12;
    v15[4] = v10;
    uint64_t v16 = *(os_unfair_lock_s **)(v14 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
    uint64_t v17 = (void *)swift_task_alloc();
    void v17[2] = v14;
    v17[3] = sub_100135AFC;
    v17[4] = v15;
    uint64_t v18 = swift_task_alloc();
    *(void *)(v18 + 16) = sub_100135B08;
    *(void *)(v18 + 24) = v17;
    id v19 = v13;
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_lock(v16 + 4);
    sub_100135C58(v20);
    os_unfair_lock_unlock(v16 + 4);
    uint64_t v29 = *(void (**)(uint64_t, void))(v0 + 112);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    v29(1, 0);
  }
  else
  {
    uint64_t v21 = *(void (**)(void, id))(v0 + 112);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v23;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD000000000000019;
    *(void *)(inited + 56) = 0x80000001002375C0;
    sub_1001E9E0C(inited);
    id v24 = objc_allocWithZone((Class)NSError);
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v27 = [v24 initWithDomain:v25 code:19 userInfo:isa];

    id v28 = v27;
    v21(0, v27);
  }
  swift_task_dealloc();
  uint64_t v30 = *(uint64_t (**)(void))(v0 + 8);
  return v30();
}

uint64_t sub_10010AB4C(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_100096F64(v8, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Received trajectory progress callback", v15, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1002B1628;
  id v17 = a1;
  id v18 = a2;
  swift_bridgeObjectRetain();
  sub_1001A21C4(v16, v17, (uint64_t)v18, a3, a4);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10010AD70(int a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v58 = a5;
  uint64_t v59 = a6;
  uint64_t v60 = a4;
  id v63 = a2;
  uint64_t v57 = sub_1000992E8((uint64_t *)&unk_1002AA0F0);
  uint64_t v8 = __chkstk_darwin(v57);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v53 - v12;
  __chkstk_darwin(v11);
  id v61 = (char *)&v53 - v14;
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v62 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  id v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v53 - v19;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v21 = qword_1002B1628
      + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingTrajectoryNotificationCount;
  swift_beginAccess();
  uint64_t v22 = *(void *)v21;
  if (*(void *)(*(void *)v21 + 16)
    && (unint64_t v23 = sub_10016DBD8(a1), (v24 & 1) != 0)
    && (uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23), v25 >= 1))
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v26 = sub_100096F64(v15, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v20, v26, v15);
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 67109376;
      LODWORD(aBlock) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + _Block_object_dispose(&STACK[0x3D0], 8) = 2048;
      long long aBlock = (void **)v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Client %d has %ld pending traj feedback messages, dropping", (uint8_t *)v29, 0x12u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v20, v15);
  }
  else
  {
    uint64_t v69 = sub_10010B524;
    uint64_t v70 = 0;
    long long aBlock = _NSConcreteStackBlock;
    uint64_t v66 = 1107296256;
    unint64_t v67 = sub_10010B528;
    uint64_t v68 = &unk_100277B38;
    uint64_t v31 = _Block_copy(&aBlock);
    id v32 = [v63 remoteObjectProxyWithErrorHandler:v31];
    _Block_release(v31);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000992E8((uint64_t *)&unk_1002A9F40);
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      int v56 = a1;
      uint64_t v33 = (void *)v64;
      uint64_t v34 = qword_1002B1628;
      uint64_t v35 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
      id v36 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
      swift_retain();
      os_unfair_lock_lock(v36 + 4);
      swift_release();
      if (*(void *)(v34 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn))
      {
        swift_retain();
        sub_100106558();
        swift_release();
      }
      uint64_t v37 = *(os_unfair_lock_s **)(v34 + v35);
      swift_retain();
      os_unfair_lock_unlock(v37 + 4);
      swift_release();
      id v38 = a3;
      uint64_t v39 = (uint64_t)v61;
      TrajectoryCommand.Progress.init(nsdata:)();
      if (qword_1002A7B60 != -1) {
        swift_once();
      }
      uint64_t v40 = sub_100096F64(v15, (uint64_t)qword_1002A9E40);
      uint64_t v41 = v62;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v18, v40, v15);
      sub_1000B9BD4(v39, (uint64_t)v13, (uint64_t *)&unk_1002AA0F0);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        id v54 = v38;
        __int16 v45 = (uint8_t *)v44;
        uint64_t v46 = (void **)swift_slowAlloc();
        id v55 = v33;
        long long aBlock = v46;
        uint64_t v53 = v15;
        *(_DWORD *)__int16 v45 = 136315138;
        sub_1000B9BD4((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_1002AA0F0);
        uint64_t v47 = String.init<A>(describing:)();
        uint64_t v64 = sub_1000993AC(v47, v48, (uint64_t *)&aBlock);
        uint64_t v39 = (uint64_t)v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000A61E4((uint64_t)v13, (uint64_t *)&unk_1002AA0F0);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Sending trajectory progress to client: %s", v45, 0xCu);
        swift_arrayDestroy();
        uint64_t v33 = v55;
        swift_slowDealloc();
        id v38 = v54;
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v41 + 8))(v18, v53);
      }
      else
      {
        sub_1000A61E4((uint64_t)v13, (uint64_t *)&unk_1002AA0F0);

        (*(void (**)(char *, uint64_t))(v41 + 8))(v18, v15);
      }
      int v49 = v56;
      sub_10019B164(v56, 1);
      swift_unknownObjectRetain();
      NSString v50 = String._bridgeToObjectiveC()();
      [v33 trajectoryProgressFeedbackWithInfo:v60 system:v50 progress:v38];
      swift_unknownObjectRelease();

      uint64_t v51 = swift_allocObject();
      *(_DWORD *)(v51 + 16) = v49;
      uint64_t v69 = sub_100135B38;
      uint64_t v70 = v51;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v66 = 1107296256;
      unint64_t v67 = sub_1001468DC;
      uint64_t v68 = &unk_100277B88;
      id v52 = _Block_copy(&aBlock);
      swift_release();
      [v63 scheduleSendBarrierBlock:v52];
      _Block_release(v52);
      swift_unknownObjectRelease();
      return sub_1000A61E4(v39, (uint64_t *)&unk_1002AA0F0);
    }
  }
  return result;
}

void sub_10010B528(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_10010B664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  void v7[4] = a5;
  uint64_t v8 = type metadata accessor for Logger();
  v7[7] = v8;
  v7[8] = *(void *)(v8 - 8);
  v7[9] = swift_task_alloc();
  v7[10] = swift_task_alloc();
  uint64_t v9 = (void *)swift_task_alloc();
  v7[11] = v9;
  void *v9 = v7;
  v9[1] = sub_10010B768;
  return sub_1000F67F0();
}

uint64_t sub_10010B768()
{
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10010B864, 0, 0);
}

uint64_t sub_10010B864()
{
  uint64_t v1 = *(void *)(v0[3] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_diagnosticsManager);
  v0[12] = v1;
  if (v1)
  {
    type metadata accessor for AccessoryDiagnosticsOptions();
    swift_allocObject();
    swift_retain();
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = sub_100106C40(v2);
    v0[13] = v3;
    id v4 = (void *)swift_task_alloc();
    v0[14] = v4;
    void *v4 = v0;
    v4[1] = sub_10010BAB0;
    return sub_1000CD1E4(v3);
  }
  else
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[7];
    uint64_t v8 = v0[8];
    uint64_t v9 = sub_100096F64(v7, (uint64_t)qword_1002A9E40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v9, v7);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Diagnostics manager is nil", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v13 = v0[10];
    uint64_t v14 = v0[7];
    uint64_t v15 = v0[8];
    uint64_t v16 = (void (*)(void, void, void))v0[4];

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    v16(0, 0, 0);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_10010BAB0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 120) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_10010BC88;
  }
  else
  {
    *(void *)(v6 + 12_Block_object_dispose(&STACK[0x3D0], 8) = a2;
    *(void *)(v6 + 136) = a1;
    uint64_t v7 = sub_10010BBE4;
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(v7, 0, 0);
}

uint64_t sub_10010BBE4()
{
  (*(void (**)(void, void, void))(v0 + 32))(*(void *)(v0 + 136), *(void *)(v0 + 128), 0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10010BC88()
{
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[7];
  uint64_t v4 = sub_100096F64(v3, (uint64_t)qword_1002A9E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Diagnostics transfer failed: %@", v7, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v10 = (void (*)(void, void, void *))v0[4];
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  os_log_type_t v11 = (void *)_convertErrorToNSError(_:)();
  v10(0, 0, v11);
  swift_release();
  swift_release();

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10010C2CC(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  id v11 = [objc_allocWithZone((Class)NSDate) init];
  [v11 timeIntervalSince1970];
  double v13 = v12;

  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_1002B1628;
  sub_1001A2714((uint64_t)a1, a2, a3);
  sub_1001FBA9C((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v15 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  uint64_t v16 = *(os_unfair_lock_s **)(v14 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v16 + 4);
  swift_release();
  uint64_t v17 = (uint64_t *)(v14 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess();
  uint64_t v18 = *v17;
  uint64_t v19 = *(os_unfair_lock_s **)(v14 + v15);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v19 + 4);
  swift_release();
  uint64_t v20 = qword_1002B1628;
  swift_bridgeObjectRetain();
  id v21 = v24;
  id v22 = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1001A296C(v20, v18, a7 | ((HIDWORD(a7) & 1) << 32), (uint64_t)v21, (uint64_t)v22, a2, (uint64_t)a3, a4, v13);
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10010C4EC(int a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, void *a10)
{
  uint64_t v116 = a8;
  uint64_t v115 = a7;
  uint64_t v119 = a6;
  uint64_t v113 = a2;
  uint64_t v15 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v15 - 8);
  uint64_t v112 = (char *)v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v114 = *(void **)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  id v22 = (char *)v109 - v21;
  uint64_t v117 = type metadata accessor for Logger();
  uint64_t v118 = *(void (***)(char *, uint64_t, uint64_t))(v117 - 8);
  uint64_t v23 = __chkstk_darwin(v117);
  uint64_t v111 = (char *)v109 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  id v27 = (char *)v109 - v26;
  uint64_t result = __chkstk_darwin(v25);
  uint64_t v30 = (char *)v109 - v29;
  if (!*(void *)(a3 + 16)) {
    return result;
  }
  uint64_t result = sub_10016DBD8(a1);
  if ((v31 & 1) == 0) {
    return result;
  }
  uint64_t v32 = *(void *)(*(void *)(a3 + 56) + 8 * result);
  if ((a4 & 0x100000000) == 0 && a4 != a1) {
    return result;
  }
  int v110 = a1;
  uint64_t v33 = qword_1002A7C00;
  swift_bridgeObjectRetain();
  if (v33 != -1) {
    swift_once();
  }
  uint64_t v34 = (uint64_t *)(qword_1002B1628
                  + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__outstandingActuationNotificationCount);
  swift_beginAccess();
  uint64_t v35 = *v34;
  if (!*(void *)(v35 + 16)
    || (unint64_t v36 = sub_10016DBD8(v110), (v37 & 1) == 0)
    || *(uint64_t *)(*(void *)(v35 + 56) + 8 * v36) < 1)
  {
    *(void *)(a5 + OBJC_IVAR____TtC14dockaccessoryd14dockaccessoryd_droppedFeedbackCount) = 0;
    uint64_t v65 = DockCoreInfo.description.getter();
    uint64_t v67 = v66;
    if (!*(void *)(v32 + 16)) {
      goto LABEL_36;
    }
    uint64_t v68 = v65;
    swift_bridgeObjectRetain();
    sub_10016DB60(v68, v67);
    if ((v69 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRelease();
    if (!*(void *)(v32 + 16)) {
      goto LABEL_36;
    }
    unint64_t v70 = sub_10016DB60(v68, v67);
    if ((v71 & 1) == 0) {
      goto LABEL_36;
    }
    uint64_t v72 = *(void *)(v32 + 56) + 32 * v70;
    uint64_t v20 = *(char **)v72;
    uint64_t v17 = *(void *)(v72 + 8);
    unint64_t v74 = *(void **)(v72 + 16);
    uint64_t v73 = *(void *)(v72 + 24);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v75 = v116;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v76 = sub_100122978((uint64_t)v20, v17, v74, v115, v75, a10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v76 & 1) == 0) {
      goto LABEL_36;
    }
    uint64_t v123 = sub_10010B524;
    uint64_t v124 = 0;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v122 = sub_10010B528;
    *((void *)&v122 + 1) = &unk_100277638;
    unint64_t v77 = _Block_copy(&aBlock);
    id v78 = [v113 remoteObjectProxyWithErrorHandler:v77];
    _Block_release(v77);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000992E8((uint64_t *)&unk_1002A9F40);
    if (!swift_dynamicCast())
    {
LABEL_36:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v109[1] = v73;
    uint64_t v114 = a10;
    uint64_t v112 = (char *)v120[0];
    uint64_t v79 = qword_1002B1628;
    a5 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
    double v80 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
    swift_retain();
    os_unfair_lock_lock(v80 + 4);
    swift_release();
    if (*(void *)(v79 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn))
    {
      swift_retain();
      sub_100106558();
      swift_release();
    }
    unint64_t v81 = *(os_unfair_lock_s **)(v79 + a5);
    swift_retain();
    os_unfair_lock_unlock(v81 + 4);
    swift_release();
    LODWORD(a5) = v110;
    sub_10019B164(v110, 0);
    unint64_t v82 = v112;
    swift_unknownObjectRetain();
    NSString v83 = String._bridgeToObjectiveC()();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    Class v85 = Array._bridgeToObjectiveC()().super.isa;
    Class v86 = Array._bridgeToObjectiveC()().super.isa;
    [v82 actuatorFeedbackWithInfo:v119 system:v83 actuators:isa positions:v85 velocities:v86 timestamp:a9];
    swift_unknownObjectRelease();

    uint64_t v87 = swift_allocObject();
    *(_DWORD *)(v87 + 16) = a5;
    uint64_t v123 = sub_100134E90;
    uint64_t v124 = v87;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v122 = sub_1001468DC;
    *((void *)&v122 + 1) = &unk_100277688;
    unint64_t v88 = _Block_copy(&aBlock);
    swift_release();
    [v113 scheduleSendBarrierBlock:v88];
    _Block_release(v88);
    uint64_t v89 = ActuatorOccurrence.rawValue.getter();
    if (v89 != ActuatorOccurrence.rawValue.getter())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
    if (qword_1002A7B60 == -1)
    {
LABEL_34:
      uint64_t v90 = v117;
      uint64_t v91 = sub_100096F64(v117, (uint64_t)qword_1002A9E40);
      uint64_t v92 = v118;
      id v93 = v111;
      v118[2](v111, v91, v90);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v94 = v114;
      swift_bridgeObjectRetain_n();
      os_log_type_t v95 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.default.getter();
      LODWORD(v113) = v96;
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = swift_slowAlloc();
        *(void *)&long long aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v97 = 136315650;
        swift_bridgeObjectRetain();
        v120[0] = sub_1000993AC((uint64_t)v20, v17, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v97 + 12) = 2080;
        swift_bridgeObjectRetain();
        a5 = Array.description.getter();
        unint64_t v99 = v98;
        swift_bridgeObjectRelease();
        uint64_t v100 = a5;
        LODWORD(a5) = v110;
        v120[0] = sub_1000993AC(v100, v99, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v97 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v101 = Array.description.getter();
        unint64_t v103 = v102;
        swift_bridgeObjectRelease();
        v120[0] = sub_1000993AC(v101, v103, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v95, (os_log_type_t)v113, "Client rule (%s, %s) notified once, removing actuators %s from notification rule", (uint8_t *)v97, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        ((void (*)(char *, uint64_t))v118[1])(v111, v117);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        ((void (*)(char *, uint64_t))v92[1])(v93, v90);
      }
      sub_100191138(a5, v119, v115, v116, v94, 0);
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
LABEL_50:
    swift_once();
    goto LABEL_34;
  }
  uint64_t v116 = *(void *)(*(void *)(v35 + 56) + 8 * v36);
  swift_bridgeObjectRelease();
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v38 = v117;
  uint64_t v39 = sub_100096F64(v117, (uint64_t)qword_1002A9E40);
  uint64_t v40 = v118[2];
  uint64_t v115 = v39;
  uint64_t v113 = v40;
  ((void (*)(char *))v40)(v30);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 67109376;
    LODWORD(aBlock) = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + _Block_object_dispose(&STACK[0x3D0], 8) = 2048;
    *(void *)&long long aBlock = v116;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Client %d has %ld pending actuator feedback messages, dropping", (uint8_t *)v43, 0x12u);
    uint64_t v38 = v117;
    swift_slowDealloc();
  }

  uint64_t v44 = v118[1];
  ++v118;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v44)(v30, v38);
  uint64_t v45 = *(void *)(a5 + OBJC_IVAR____TtC14dockaccessoryd14dockaccessoryd_droppedFeedbackCount);
  BOOL v46 = __OFADD__(v45, 1);
  uint64_t v47 = v45 + 1;
  if (v46)
  {
    __break(1u);
    goto LABEL_50;
  }
  *(void *)(a5 + OBJC_IVAR____TtC14dockaccessoryd14dockaccessoryd_droppedFeedbackCount) = v47;
  if (v47 >= 6)
  {
    uint64_t v48 = v117;
    v113(v27, v115, v117);
    int v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Dropped feedback for more than 5 times. Stopping feedback", v51, 2u);
      uint64_t v48 = v117;
      swift_slowDealloc();
    }

    ((void (*)(char *, uint64_t))v44)(v27, v48);
    id v52 = *(void (***)(char *, uint64_t, uint64_t))(qword_1002B1628
                                                           + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
    uint64_t v53 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
    id v54 = *(void (**)(char *, uint64_t, uint64_t))((char *)v52
                                                          + OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem);
    id v55 = v52;
    id v56 = v54;
    OS_dispatch_semaphore.wait()();

    uint64_t v57 = &v55[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
    swift_beginAccess();
    uint64_t v58 = *(void *)v57;
    uint64_t v59 = *(void *)(*(void *)v57 + 16);
    if (v59)
    {
      uint64_t v117 = v53;
      uint64_t v118 = v52;
      uint64_t v60 = v58 + 32;
      id v61 = (void (**)(char *, uint64_t))(v114 + 1);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_1000A5D40(v60, (uint64_t)v120);
        id v62 = *(id *)(*sub_1000A5DA4(v120, v120[3]) + 24);
        DockCoreInfo.identifier.getter();

        DockCoreInfo.identifier.getter();
        LOBYTE(v62) = static UUID.== infix(_:_:)();
        id v63 = *v61;
        (*v61)(v20, v17);
        v63(v22, v17);
        if (v62) {
          break;
        }
        sub_100099BCC((uint64_t)v120);
        v60 += 40;
        if (!--v59)
        {
          swift_bridgeObjectRelease();
          id v52 = v118;
          uint64_t v53 = v117;
          goto LABEL_23;
        }
      }
      swift_bridgeObjectRelease();
      long long v104 = *(void (**)(char *, uint64_t, uint64_t))((char *)v118 + v117);
      OS_dispatch_semaphore.signal()();

      sub_1000A5D40((uint64_t)v120, (uint64_t)&aBlock);
      sub_100099BCC((uint64_t)v120);
    }
    else
    {
LABEL_23:
      uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))((char *)v52 + v53);
      OS_dispatch_semaphore.signal()();

      uint64_t v123 = 0;
      long long aBlock = 0u;
      long long v122 = 0u;
    }

    if (*((void *)&v122 + 1))
    {
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        uint64_t v105 = v120[0];
        uint64_t v106 = type metadata accessor for TaskPriority();
        uint64_t v107 = (uint64_t)v112;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v112, 1, 1, v106);
        uint64_t v108 = (void *)swift_allocObject();
        v108[2] = 0;
        v108[3] = 0;
        v108[4] = v105;
        sub_1001BC1D4(v107, (uint64_t)&unk_1002AA030, (uint64_t)v108);
        return swift_release();
      }
    }
    else
    {
      return sub_1000A61E4((uint64_t)&aBlock, (uint64_t *)&unk_1002AAA30);
    }
  }
  return result;
}

uint64_t sub_10010D42C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  void *v2 = v1;
  v2[1] = sub_10010D4C0;
  return sub_1001A80AC();
}

uint64_t sub_10010D4C0(char a1)
{
  *(unsigned char *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100135BFC, 0, 0);
}

uint64_t sub_10010D5C0()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_100096F64(v0, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    v10[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v10[1] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)v10[0] = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed something on remote proxy: %@", v7, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

unint64_t sub_10010D824(int a1, char a2)
{
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  return sub_10019B410(a1, a2);
}

uint64_t sub_10010D894(int a1, void *a2, void *a3)
{
  LODWORD(v5) = a1;
  uint64_t v51 = type metadata accessor for Logger();
  os_log_type_t v6 = *(void **)(v51 - 8);
  __chkstk_darwin(v51);
  os_log_type_t v50 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7C00 != -1) {
LABEL_46:
  }
    swift_once();
  uint64_t v8 = qword_1002B1628;
  sub_1001FBA9C((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v9 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  uint64_t v10 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v10 + 4);
  swift_release();
  id v11 = (uint64_t *)(v8 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyActuationClientsRules);
  swift_beginAccess();
  uint64_t v12 = *v11;
  double v13 = *(os_unfair_lock_s **)(v8 + v9);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v13 + 4);
  swift_release();
  if (!*(void *)(v12 + 16)) {
    return swift_bridgeObjectRelease();
  }
  unint64_t v14 = sub_10016DBD8(v5);
  if ((v15 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  int v45 = v5;
  id v49 = a2;
  uint64_t v16 = *(void *)(*(void *)(v12 + 56) + 8 * v14);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  char v19 = 0;
  uint64_t v5 = 0;
  uint64_t v20 = v16 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & *(void *)(v16 + 64);
  a2 = (void *)((unint64_t)(v21 + 63) >> 6);
  uint64_t v47 = (void (**)(char *, uint64_t))(v6 + 1);
  uint64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v6 + 2);
  *(void *)&long long v18 = 138412546;
  long long v44 = v18;
  BOOL v46 = (char *)&type metadata for Any + 8;
  while (v23)
  {
    unint64_t v25 = __clz(__rbit64(v23));
    v23 &= v23 - 1;
    unint64_t v26 = v25 | (v5 << 6);
LABEL_28:
    uint64_t v30 = (uint64_t *)(*(void *)(v16 + 48) + 16 * v26);
    uint64_t v31 = *v30;
    os_log_type_t v6 = (void *)v30[1];
    swift_bridgeObjectRetain();
    if (v31 == DockCoreInfo.description.getter() && v6 == v32)
    {
      uint64_t result = swift_bridgeObjectRelease_n();
      if ((v19 & 1) == 0)
      {
LABEL_34:
        if (qword_1002A7B60 != -1) {
          swift_once();
        }
        uint64_t v34 = v51;
        uint64_t v35 = sub_100096F64(v51, (uint64_t)qword_1002A9E40);
        os_log_type_t v6 = v50;
        (*v48)(v50, v35, v34);
        unint64_t v36 = a3;
        char v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = swift_slowAlloc();
          uint64_t v43 = v36;
          uint64_t v40 = v39;
          os_log_type_t v6 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = v44;
          *(void *)(v40 + 4) = v43;
          *os_log_type_t v6 = a3;
          *(_WORD *)(v40 + 12) = 1024;
          *(_DWORD *)(v40 + 14) = v45;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "DockAccessory %@ was disconnected, invalidating XPC for feedback client: %d", (uint8_t *)v40, 0x12u);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          char v37 = v36;
        }

        (*v47)(v50, v51);
        id v41 = [v49 remoteObjectProxy];
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_1000992E8((uint64_t *)&unk_1002A9F40);
        uint64_t result = swift_dynamicCast();
        if (result)
        {
          [v52 disconnectedWithErr:0];
          uint64_t result = swift_unknownObjectRelease();
        }
        char v19 = 1;
      }
    }
    else
    {
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (!(v19 & 1 | ((v24 & 1) == 0))) {
        goto LABEL_34;
      }
    }
  }
  uint64_t v27 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_46;
  }
  if (v27 >= (uint64_t)a2) {
    return swift_release();
  }
  unint64_t v28 = *(void *)(v20 + 8 * v27);
  ++v5;
  if (v28) {
    goto LABEL_27;
  }
  uint64_t v5 = v27 + 1;
  if (v27 + 1 >= (uint64_t)a2) {
    return swift_release();
  }
  unint64_t v28 = *(void *)(v20 + 8 * v5);
  if (v28) {
    goto LABEL_27;
  }
  uint64_t v5 = v27 + 2;
  if (v27 + 2 >= (uint64_t)a2) {
    return swift_release();
  }
  unint64_t v28 = *(void *)(v20 + 8 * v5);
  if (v28) {
    goto LABEL_27;
  }
  uint64_t v5 = v27 + 3;
  if (v27 + 3 >= (uint64_t)a2) {
    return swift_release();
  }
  unint64_t v28 = *(void *)(v20 + 8 * v5);
  if (v28) {
    goto LABEL_27;
  }
  uint64_t v5 = v27 + 4;
  if (v27 + 4 >= (uint64_t)a2) {
    return swift_release();
  }
  unint64_t v28 = *(void *)(v20 + 8 * v5);
  if (v28)
  {
LABEL_27:
    unint64_t v23 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v5 << 6);
    goto LABEL_28;
  }
  uint64_t v29 = v27 + 5;
  if (v29 >= (uint64_t)a2) {
    return swift_release();
  }
  unint64_t v28 = *(void *)(v20 + 8 * v29);
  if (v28)
  {
    uint64_t v5 = v29;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v5 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v5 >= (uint64_t)a2) {
      return swift_release();
    }
    unint64_t v28 = *(void *)(v20 + 8 * v5);
    ++v29;
    if (v28) {
      goto LABEL_27;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10010DEF4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  void *v2 = v1;
  v2[1] = sub_10010DF88;
  return sub_1001A80AC();
}

uint64_t sub_10010DF88(char a1)
{
  *(unsigned char *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10010E088, 0, 0);
}

uint64_t sub_10010E088()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010E21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for Logger();
  void v4[3] = v5;
  void v4[4] = *(void *)(v5 - 8);
  void v4[5] = swift_task_alloc();
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_10010E2DC, 0, 0);
}

uint64_t sub_10010E2DC()
{
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v4 = sub_100096F64(v3, (uint64_t)qword_1002A9E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sending feedback request to accessory", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v9 = v0[4];
  uint64_t v8 = v0[5];
  uint64_t v10 = v0[3];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  id v11 = (void *)swift_task_alloc();
  v0[6] = v11;
  void *v11 = v0;
  v11[1] = sub_10010E464;
  return sub_1001A7ABC();
}

uint64_t sub_10010E464()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10010E574(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, unsigned int a8, uint64_t a9)
{
  uint64_t v84 = a6;
  uint64_t v79 = a3;
  uint64_t v78 = a2;
  double v80 = a1;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = _swiftEmptyArrayStorage;
  uint64_t v92 = _swiftEmptyArrayStorage;
  uint64_t v90 = _swiftEmptyArrayStorage;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_1001891D0(a4);
  id v83 = v17;
  if (!v17) {
    return swift_bridgeObjectRelease();
  }
  char v71 = a4;
  uint64_t v18 = *(void *)(a5 + 16);
  unint64_t v77 = a7;
  uint64_t v82 = v18;
  uint64_t v74 = v13;
  uint64_t v73 = v14;
  uint64_t v72 = v16;
  if (!v18) {
    goto LABEL_55;
  }
  unsigned int v70 = a8;
  char v19 = v80;
  uint64_t v20 = v80[2];
  uint64_t v81 = a5 + 32;
  uint64_t v76 = v78 + 32;
  uint64_t v75 = v79 + 32;
  v69[1] = a5;
  swift_bridgeObjectRetain();
  uint64_t v21 = 0;
  uint64_t v86 = v20 - 2;
  uint64_t v85 = (uint64_t)(v19 + 6);
  uint64_t v22 = _swiftEmptyArrayStorage;
  unint64_t v23 = _swiftEmptyArrayStorage;
  char v24 = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v25 = (uint64_t *)(v81 + 16 * v21);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    swift_bridgeObjectRetain();
    uint64_t v28 = dispatch thunk of DockCoreAccessory.getActuatorIndex(name:system:)();
    if (!v20) {
      goto LABEL_6;
    }
    if (v80[4] == v28)
    {
      swift_bridgeObjectRetain();
      unint64_t v29 = 0;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_11;
      }
    }
    else
    {
      if (v20 == 1) {
        goto LABEL_6;
      }
      if (v80[5] != v28)
      {
        uint64_t v38 = 0;
        while (v86 != v38)
        {
          uint64_t v39 = *(void *)(v85 + 8 * v38++);
          if (v39 == v28)
          {
            swift_bridgeObjectRetain();
            unint64_t v29 = v38 + 1;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              goto LABEL_11;
            }
            goto LABEL_31;
          }
        }
LABEL_6:
        swift_bridgeObjectRelease();
        goto LABEL_7;
      }
      swift_bridgeObjectRetain();
      unint64_t v29 = 1;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        unint64_t v29 = 1;
        goto LABEL_11;
      }
    }
LABEL_31:
    char v24 = sub_100102294(0, v24[2] + 1, 1, v24);
LABEL_11:
    unint64_t v31 = v24[2];
    unint64_t v30 = v24[3];
    if (v31 >= v30 >> 1) {
      char v24 = sub_100102294((void *)(v30 > 1), v31 + 1, 1, v24);
    }
    v24[2] = v31 + 1;
    uint64_t v32 = &v24[2 * v31];
    v32[4] = v26;
    v32[5] = v27;
    uint64_t v92 = v24;
    if (v29 < *(void *)(v78 + 16))
    {
      type metadata accessor for Actuator();
      if (v26 == static Actuator.Pitch.getter() && v27 == v33)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v34 & 1) == 0)
        {
          uint64_t v40 = *(void *)(v76 + 8 * v29);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v23 = sub_100102918(0, v23[2] + 1, 1, v23);
          }
          unint64_t v42 = v23[2];
          unint64_t v41 = v23[3];
          if (v42 >= v41 >> 1) {
            unint64_t v23 = sub_100102918((void *)(v41 > 1), v42 + 1, 1, v23);
          }
          void v23[2] = v42 + 1;
          v23[v42 + 4] = v40;
          goto LABEL_37;
        }
      }
      double v35 = *(double *)(v76 + 8 * v29);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v23 = sub_100102918(0, v23[2] + 1, 1, v23);
      }
      unint64_t v37 = v23[2];
      unint64_t v36 = v23[3];
      if (v37 >= v36 >> 1) {
        unint64_t v23 = sub_100102918((void *)(v36 > 1), v37 + 1, 1, v23);
      }
      void v23[2] = v37 + 1;
      *(double *)&v23[v37 + 4] = -v35;
LABEL_37:
      uint64_t v91 = v23;
    }
    if (v29 >= *(void *)(v79 + 16))
    {
      swift_bridgeObjectRelease();
      a7 = v77;
      goto LABEL_7;
    }
    type metadata accessor for Actuator();
    if (v26 == static Actuator.Pitch.getter() && v27 == v43)
    {
      swift_bridgeObjectRelease_n();
LABEL_44:
      double v45 = *(double *)(v75 + 8 * v29);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v22 = sub_100102918(0, v22[2] + 1, 1, v22);
      }
      a7 = v77;
      unint64_t v47 = v22[2];
      unint64_t v46 = v22[3];
      if (v47 >= v46 >> 1) {
        uint64_t v22 = sub_100102918((void *)(v46 > 1), v47 + 1, 1, v22);
      }
      v22[2] = v47 + 1;
      *(double *)&v22[v47 + 4] = -v45;
      uint64_t v90 = v22;
      goto LABEL_7;
    }
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v44) {
      goto LABEL_44;
    }
    uint64_t v48 = *(void *)(v75 + 8 * v29);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v22 = sub_100102918(0, v22[2] + 1, 1, v22);
    }
    a7 = v77;
    unint64_t v50 = v22[2];
    unint64_t v49 = v22[3];
    if (v50 >= v49 >> 1) {
      uint64_t v22 = sub_100102918((void *)(v49 > 1), v50 + 1, 1, v22);
    }
    v22[2] = v50 + 1;
    v22[v50 + 4] = v48;
    uint64_t v90 = v22;
LABEL_7:
    ++v21;
  }
  while (v21 != v82);
  swift_bridgeObjectRelease();
  a8 = v70;
  uint64_t v13 = v74;
  uint64_t v14 = v73;
  uint64_t v16 = v72;
LABEL_55:
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v51 = sub_100096F64(v13, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v51, v13);
  id v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = swift_slowAlloc();
    uint64_t v85 = swift_slowAlloc();
    uint64_t v89 = v85;
    *(_DWORD *)uint64_t v54 = 67109890;
    LODWORD(v8_Block_object_dispose(&STACK[0x3D0], 8) = a8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + _Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v55 = Array.description.getter();
    uint64_t v86 = a9;
    uint64_t v56 = v55;
    unint64_t v58 = v57;
    swift_bridgeObjectRelease();
    uint64_t v88 = sub_1000993AC(v56, v58, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 1_Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v59 = Array.description.getter();
    unint64_t v61 = v60;
    swift_bridgeObjectRelease();
    uint64_t v88 = sub_1000993AC(v59, v61, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 2_Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    a7 = v77;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v62 = Array.description.getter();
    unint64_t v64 = v63;
    swift_bridgeObjectRelease();
    uint64_t v88 = sub_1000993AC(v62, v64, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "%d Received feedback a=%s p=%s v=%s", (uint8_t *)v54, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v74);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  swift_beginAccess();
  uint64_t v65 = v92;
  swift_beginAccess();
  uint64_t v66 = (uint64_t)v91;
  swift_beginAccess();
  uint64_t v67 = (uint64_t)v90;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v87 = 0;
  sub_10010C2CC(v71, v84, a7, v65, v66, v67, a8);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10010F15C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v35 = a4;
  uint64_t v30 = a2;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(NSObject **)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_21:
    return swift_bridgeObjectRelease();
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_21;
  }
LABEL_3:
  if (v12 >= 1)
  {
    uint64_t v15 = 0;
    unint64_t v16 = a1 & 0xC000000000000001;
    unint64_t v31 = (void (**)(char *, uint64_t))&v9[1];
    uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))&v9[2];
    unint64_t v37 = (char *)&type metadata for Any + 8;
    *(void *)&long long v14 = 136315394;
    long long v27 = v14;
    uint64_t v28 = v8;
    unint64_t v29 = a1;
    unint64_t v33 = a1 & 0xC000000000000001;
    uint64_t v34 = v12;
    while (1)
    {
      if (v16) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(a1 + 8 * v15 + 32);
      }
      uint64_t v18 = v17;
      id v19 = [v17 remoteObjectProxy:v27];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000992E8(&qword_1002AA088);
      if (swift_dynamicCast())
      {
        id v36 = v18;
        uint64_t v20 = v38;
        if (qword_1002A7B60 != -1) {
          swift_once();
        }
        uint64_t v21 = sub_100096F64(v8, (uint64_t)qword_1002A9E40);
        (*v32)(v11, v21, v8);
        swift_bridgeObjectRetain_n();
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v9, v22))
        {
          unint64_t v23 = a3;
          uint64_t v24 = swift_slowAlloc();
          v39[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v24 = v27;
          swift_bridgeObjectRetain();
          *(void *)(v24 + 4) = sub_1000993AC(v30, v23, v39);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v24 + 12) = 2080;
          uint64_t v25 = DockFramingMode.description.getter();
          *(void *)(v24 + 14) = sub_1000993AC(v25, v26, v39);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v9, v22, "Notifying client that %s just set framing mode to %s", (uint8_t *)v24, 0x16u);
          swift_arrayDestroy();
          a1 = v29;
          swift_slowDealloc();
          a3 = v23;
          uint64_t v8 = v28;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*v31)(v11, v8);
        uint64_t v12 = v34;
        [v20 setFramingModeEventWithMode:v35];
        swift_unknownObjectRelease();

        unint64_t v16 = v33;
        if (__OFADD__(*a5, 1))
        {
          __break(1u);
          goto LABEL_20;
        }
        ++*a5;
      }
      else
      {
      }
      if (v12 == ++v15) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10010F5F8(unint64_t a1, uint64_t a2, unint64_t a3, id a4, void *a5, void *a6)
{
  id v43 = a5;
  uint64_t v36 = a2;
  uint64_t v10 = type metadata accessor for Logger();
  id v11 = *(char **)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_21:
    return swift_bridgeObjectRelease();
  }
  uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v14) {
    goto LABEL_21;
  }
LABEL_3:
  if (v14 >= 1)
  {
    uint64_t v17 = 0;
    unint64_t v46 = a1 & 0xC000000000000001;
    uint64_t v39 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    double v45 = (char *)&type metadata for Any + 8;
    *(void *)&long long v16 = 136315650;
    long long v33 = v16;
    uint64_t v41 = v14;
    id v42 = a4;
    unint64_t v34 = a1;
    uint64_t v35 = a6;
    uint64_t v38 = v10;
    uint64_t v32 = v13;
    while (1)
    {
      if (v46) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(a1 + 8 * v17 + 32);
      }
      id v19 = v18;
      id v20 = [v18 remoteObjectProxy];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000992E8(&qword_1002AA088);
      if (swift_dynamicCast())
      {
        id v44 = v19;
        uint64_t v21 = v47;
        if (qword_1002A7B60 != -1) {
          swift_once();
        }
        uint64_t v22 = sub_100096F64(v10, (uint64_t)qword_1002A9E40);
        (*v40)(v13, v22, v10);
        swift_bridgeObjectRetain_n();
        id v23 = a4;
        id v24 = v43;
        id v11 = (char *)v23;
        a4 = v24;
        uint64_t v25 = v13;
        unint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = swift_slowAlloc();
          unint64_t v37 = v21;
          uint64_t v29 = v28;
          uint64_t v30 = (void *)swift_slowAlloc();
          v48[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v29 = v33;
          swift_bridgeObjectRetain();
          *(void *)(v29 + 4) = sub_1000993AC(v36, a3, v48);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v29 + 12) = 2112;
          *(void *)(v29 + 14) = v11;
          *uint64_t v30 = v42;

          *(_WORD *)(v29 + 22) = 2112;
          *(void *)(v29 + 24) = a4;
          v30[1] = v43;

          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Notifying client that %s just set subject selection to %@, %@", (uint8_t *)v29, 0x20u);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          a1 = v34;
          swift_slowDealloc();
          uint64_t v21 = v37;
          a6 = v35;
          swift_slowDealloc();

          uint64_t v10 = v38;
          uint64_t v13 = v32;
          (*v39)(v32, v38);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          uint64_t v10 = v38;
          (*v39)(v25, v38);
          uint64_t v13 = v25;
        }
        uint64_t v14 = v41;
        [v21 selectSubjectAtEventWithX:v11 y:a4];
        swift_unknownObjectRelease();

        if (__OFADD__(*a6, 1))
        {
          __break(1u);
          goto LABEL_20;
        }
        ++*a6;
        a4 = v42;
      }
      else
      {
      }
      if (v14 == ++v17) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10010FB5C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v36 = a2;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(char **)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v12 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_21:
    return swift_bridgeObjectRelease();
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_21;
  }
LABEL_3:
  if (v12 >= 1)
  {
    uint64_t v15 = 0;
    unint64_t v42 = a1 & 0xC000000000000001;
    uint64_t v38 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v39 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v41 = (char *)&type metadata for Any + 8;
    *(void *)&long long v14 = 136315394;
    long long v33 = v14;
    unint64_t v34 = a1;
    uint64_t v35 = a5;
    uint64_t v37 = v12;
    uint64_t v31 = v11;
    uint64_t v32 = v8;
    while (1)
    {
      if (v42) {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v16 = *(id *)(a1 + 8 * v15 + 32);
      }
      uint64_t v17 = v16;
      id v18 = [v16 remoteObjectProxy:v31, v32];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000992E8(&qword_1002AA088);
      if (swift_dynamicCast())
      {
        uint64_t v40 = v43;
        if (qword_1002A7B60 != -1) {
          swift_once();
        }
        uint64_t v19 = sub_100096F64(v8, (uint64_t)qword_1002A9E40);
        (*v39)(v11, v19, v8);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        id v20 = v11;
        uint64_t v21 = v8;
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = swift_slowAlloc();
          v44[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v24 = v33;
          swift_bridgeObjectRetain();
          *(void *)(v24 + 4) = sub_1000993AC(v36, a3, v44);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v24 + 12) = 2080;
          swift_bridgeObjectRetain();
          unint64_t v25 = a3;
          uint64_t v26 = Array.description.getter();
          unint64_t v28 = v27;
          swift_bridgeObjectRelease();
          uint64_t v29 = v26;
          a3 = v25;
          *(void *)(v24 + 14) = sub_1000993AC(v29, v28, v44);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Notifying client that %s just set subject selection to ids: %s", (uint8_t *)v24, 0x16u);
          swift_arrayDestroy();
          a5 = v35;
          swift_slowDealloc();
          a1 = v34;
          swift_slowDealloc();

          id v11 = v31;
          uint64_t v8 = v32;
          (*v38)(v31, v32);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          (*v38)(v20, v21);
          uint64_t v8 = v21;
          id v11 = v20;
        }
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        uint64_t v9 = v40;
        [v40 selectSubjectsEvent:isa];

        swift_unknownObjectRelease();
        if (__OFADD__(*a5, 1))
        {
          __break(1u);
          goto LABEL_20;
        }
        ++*a5;
        uint64_t v12 = v37;
      }
      else
      {
      }
      if (v12 == ++v15) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100110010(uint64_t a1, uint64_t a2, void (*a3)(void, void *), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), const char *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v31 = a7;
  uint64_t v32 = a8;
  uint64_t v30 = a6;
  uint64_t v34 = a4;
  uint64_t v35 = a3;
  uint64_t v11 = type metadata accessor for Errors();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  long long v33 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v16 = (const char **)((char *)&v30 - v15);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  id v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t result = a5(a1, a2);
  if (result)
  {
    sub_1000BF118(result);
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v22, v17);
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, v30, v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    uint64_t v26 = v32;
    void *v16 = v31;
    v16[1] = v26;
    (*(void (**)(void *, void, uint64_t))(v12 + 104))(v16, enum case for Errors.OperationCancelled(_:), v11);
    unint64_t v27 = v33;
    (*(void (**)(char *, void *, uint64_t))(v12 + 16))(v33, v16, v11);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v28, v27, v11);
    uint64_t v29 = (void *)_convertErrorToNSError(_:)();
    v35(0, v29);

    (*(void (**)(void *, uint64_t))(v12 + 8))(v16, v11);
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10011044C(unint64_t a1, uint64_t a2, unint64_t a3, void *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v38 = a2;
  uint64_t v15 = type metadata accessor for Logger();
  id v16 = *(char **)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v19 = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_21:
    return swift_bridgeObjectRelease();
  }
  uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v19) {
    goto LABEL_21;
  }
LABEL_3:
  if (v19 >= 1)
  {
    uint64_t v22 = 0;
    unint64_t v23 = a1 & 0xC000000000000001;
    uint64_t v39 = (void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    id v43 = (char *)&type metadata for Any + 8;
    *(void *)&long long v21 = 136315394;
    long long v34 = v21;
    uint64_t v36 = v18;
    uint64_t v37 = v15;
    uint64_t v35 = v19;
    unint64_t v41 = a1 & 0xC000000000000001;
    while (1)
    {
      if (v23) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v24 = *(id *)(a1 + 8 * v22 + 32);
      }
      unint64_t v25 = v24;
      id v26 = [v24 remoteObjectProxy:v34];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000992E8(&qword_1002AA088);
      if (swift_dynamicCast())
      {
        unint64_t v42 = (char *)v44[0];
        if (qword_1002A7B60 != -1) {
          swift_once();
        }
        uint64_t v27 = sub_100096F64(v15, (uint64_t)qword_1002A9E40);
        (*v40)(v18, v27, v15);
        swift_bridgeObjectRetain_n();
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          unint64_t v30 = a3;
          uint64_t v31 = swift_slowAlloc();
          v44[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v31 = v34;
          swift_bridgeObjectRetain();
          *(void *)(v31 + 4) = sub_1000993AC(v38, v30, v44);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v31 + 12) = 2080;
          *(double *)&v44[1] = a5;
          *(double *)&v44[2] = a6;
          *(double *)&uint64_t v44[3] = a7;
          *(double *)&uint64_t v44[4] = a8;
          type metadata accessor for CGRect(0);
          uint64_t v32 = String.init<A>(describing:)();
          *(void *)(v31 + 14) = sub_1000993AC(v32, v33, v44);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Notifying client that %s just set subject ROI to %s", (uint8_t *)v31, 0x16u);
          swift_arrayDestroy();
          uint64_t v19 = v35;
          uint64_t v18 = v36;
          swift_slowDealloc();
          a3 = v30;
          uint64_t v15 = v37;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        (*v39)(v18, v15);
        unint64_t v23 = v41;
        id v16 = v42;
        [v42 setRectOfInterestEventWithRect:a5, a6, a7, a8];
        swift_unknownObjectRelease();

        if (__OFADD__(*a4, 1))
        {
          __break(1u);
          goto LABEL_20;
        }
        ++*a4;
      }
      else
      {
      }
      if (v19 == ++v22) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10011095C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = a6;
  void v7[4] = a7;
  uint64_t v9 = type metadata accessor for Errors();
  void v7[5] = v9;
  v7[6] = *(void *)(v9 - 8);
  v7[7] = swift_task_alloc();
  v7[8] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Logger();
  v7[9] = v10;
  v7[10] = *(void *)(v10 - 8);
  v7[11] = swift_task_alloc();
  uint64_t v11 = (void *)swift_task_alloc();
  v7[12] = v11;
  void *v11 = v7;
  v11[1] = sub_100110ABC;
  return sub_10012D928(a5);
}

uint64_t sub_100110ABC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100110FD8;
  }
  else {
    uint64_t v4 = sub_100110BD0;
  }
  return ((uint64_t (*)(void *, void, void))_swift_task_switch)(v4, 0, 0);
}

void sub_100110BD0()
{
  uint64_t v1 = v0[13];
  if (!*(void *)(v1 + 16))
  {
    uint64_t v20 = v0[7];
    uint64_t v19 = (void *)v0[8];
    uint64_t v21 = v0[5];
    uint64_t v22 = v0[6];
    unint64_t v23 = (void (*)(void *, void *))v0[3];
    swift_bridgeObjectRelease();
    *uint64_t v19 = 0xD000000000000015;
    v19[1] = 0x8000000100237370;
    (*(void (**)(void *, void, uint64_t))(v22 + 104))(v19, enum case for Errors.NotFound(_:), v21);
    (*(void (**)(uint64_t, void *, uint64_t))(v22 + 16))(v20, v19, v21);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v24, v20, v21);
    unint64_t v25 = (void *)_convertErrorToNSError(_:)();
    v23(_swiftEmptyArrayStorage, v25);

    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    swift_errorRelease();
    goto LABEL_28;
  }
  int64_t v2 = 0;
  uint64_t v4 = v1 + 64;
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(v1 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & v3;
  int64_t v28 = (unint64_t)(63 - v6) >> 6;
  if ((v5 & v3) != 0) {
    goto LABEL_25;
  }
LABEL_7:
  int64_t v8 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
LABEL_32:
    __break(1u);
    return;
  }
  if (v8 < v28)
  {
    unint64_t v9 = *(void *)(v4 + 8 * v8);
    ++v2;
    if (v9) {
      goto LABEL_20;
    }
    int64_t v2 = v8 + 1;
    if (v8 + 1 < v28)
    {
      unint64_t v9 = *(void *)(v4 + 8 * v2);
      if (v9) {
        goto LABEL_20;
      }
      int64_t v2 = v8 + 2;
      if (v8 + 2 < v28)
      {
        unint64_t v9 = *(void *)(v4 + 8 * v2);
        if (!v9)
        {
          int64_t v10 = v8 + 3;
          if (v10 < v28)
          {
            unint64_t v9 = *(void *)(v4 + 8 * v10);
            if (v9)
            {
              int64_t v2 = v10;
              goto LABEL_20;
            }
            while (1)
            {
              int64_t v2 = v10 + 1;
              if (__OFADD__(v10, 1)) {
                goto LABEL_32;
              }
              if (v2 >= v28) {
                goto LABEL_26;
              }
              unint64_t v9 = *(void *)(v4 + 8 * v2);
              ++v10;
              if (v9) {
                goto LABEL_20;
              }
            }
          }
          goto LABEL_26;
        }
LABEL_20:
        unint64_t v7 = (v9 - 1) & v9;
        for (unint64_t i = __clz(__rbit64(v9)) + (v2 << 6); ; unint64_t i = v17 | (v2 << 6))
        {
          uint64_t v12 = (uint64_t *)(*(void *)(v1 + 56) + 16 * i);
          uint64_t v14 = *v12;
          unint64_t v13 = v12[1];
          objc_allocWithZone((Class)type metadata accessor for AccessoryBatteryState());
          swift_bridgeObjectRetain();
          sub_1000A618C(v14, v13);
          swift_bridgeObjectRetain();
          sub_1000A618C(v14, v13);
          uint64_t v15 = (void *)AccessoryBatteryState.init(data:name:)();
          if (v15)
          {
            id v16 = v15;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            swift_bridgeObjectRelease();
            sub_1000A6240(v14, v13);

            if (!v7) {
              goto LABEL_7;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            sub_1000A6240(v14, v13);
            if (!v7) {
              goto LABEL_7;
            }
          }
LABEL_25:
          unint64_t v17 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
    }
  }
LABEL_26:
  uint64_t v0 = v27;
  uint64_t v18 = (void (*)(void *, void))v27[3];
  swift_release();
  v18(_swiftEmptyArrayStorage, 0);
  swift_bridgeObjectRelease();
LABEL_28:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v26 = (void (*)(void))v0[1];
  v26();
}

uint64_t sub_100110FD8()
{
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = sub_100096F64(v3, (uint64_t)qword_1002A9E40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    int64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error thrown in battery state read: %@", v7, 0xCu);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  int64_t v10 = (void (*)(void *, void *))v0[3];
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  uint64_t v11 = (void *)_convertErrorToNSError(_:)();
  v10(_swiftEmptyArrayStorage, v11);

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

void sub_100111264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AccessoryBatteryState();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *, uint64_t))(a3 + 16))(a3, isa, a2);
}

void sub_100111340(void *a1, int a2, void *a3, void *aBlock, void (*a5)(void *, void *))
{
  int64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(a3, v8);
  _Block_release(v8);
  _Block_release(v8);
}

uint64_t sub_1001114B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v9 = type metadata accessor for Errors();
  void v7[4] = v9;
  void v7[5] = *(void *)(v9 - 8);
  v7[6] = swift_task_alloc();
  v7[7] = swift_task_alloc();
  id v10 = (void *)swift_task_alloc();
  v7[8] = v10;
  void *v10 = v7;
  v10[1] = sub_1001115BC;
  return sub_100133024(a5);
}

uint64_t sub_1001115BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[9] = a1;
  v4[10] = a2;
  swift_task_dealloc();
  if (v2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = v4[1];
    __asm { BRAA            X1, X16 }
  }
  return ((uint64_t (*)(uint64_t (*)(), void, void))_swift_task_switch)(sub_100111700, 0, 0);
}

uint64_t sub_100111700()
{
  unint64_t v1 = *(void *)(v0 + 80);
  if (v1 >> 60 != 15)
  {
    uint64_t v2 = *(void *)(v0 + 72);
    id v3 = objc_allocWithZone((Class)type metadata accessor for AccessorySystemEvent());
    sub_1000A618C(v2, v1);
    uint64_t v4 = AccessorySystemEvent.init(data:name:)();
    uint64_t v6 = *(void *)(v0 + 72);
    unint64_t v5 = *(void *)(v0 + 80);
    if (v4)
    {
      uint64_t v7 = (void *)v4;
      (*(void (**)(uint64_t, void))(v0 + 16))(v4, 0);

      sub_1000A9990(v6, v5);
      goto LABEL_6;
    }
    sub_1000A9990(*(void *)(v0 + 72), *(void *)(v0 + 80));
  }
  uint64_t v9 = *(void *)(v0 + 48);
  int64_t v8 = *(void **)(v0 + 56);
  uint64_t v10 = *(void *)(v0 + 32);
  uint64_t v11 = *(void *)(v0 + 40);
  uint64_t v12 = *(void (**)(void, void *))(v0 + 16);
  void *v8 = 0xD000000000000014;
  v8[1] = 0x8000000100237220;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v8, enum case for Errors.NotFound(_:), v10);
  (*(void (**)(uint64_t, void *, uint64_t))(v11 + 16))(v9, v8, v10);
  sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v13, v9, v10);
  uint64_t v14 = (void *)_convertErrorToNSError(_:)();
  v12(0, v14);

  (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
  swift_errorRelease();
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

void sub_100111940(void *a1, int a2, void *a3, void *aBlock, void (*a5)(void *, id, void *))
{
  int64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  id v10 = a1;
  a5(a3, v10, v8);
  _Block_release(v8);
  _Block_release(v8);
}

void sub_100111ABC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a1;
  id v27 = a2;
  uint64_t v4 = sub_1000992E8(&qword_1002AA058);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_100096F64(v7, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Reading System Event Data...", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  sub_1000992E8(&qword_1002A8340);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_100240BF0;
  id v16 = v24;
  *(void *)(v15 + 32) = v24;
  aBlock[0] = v15;
  specialized Array._endMutation()();
  sub_100099C7C(0, (unint64_t *)&qword_1002AAA70);
  id v17 = v16;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void **)(v25 + 40);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v4);
  unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v21 + v20, (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10013510C;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001A6714;
  void aBlock[3] = &unk_100277750;
  uint64_t v22 = _Block_copy(aBlock);
  id v23 = v19;
  swift_release();
  [v27 readCharacteristicValues:isa timeout:v23 completionQueue:v22 completionHandler:10.0];
  _Block_release(v22);
}

uint64_t sub_100111E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = __chkstk_darwin(v6);
  id v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v11 = sub_100096F64(v6, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v11, v6);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      v27[1] = a3;
      uint64_t v15 = (uint8_t *)v14;
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      v27[0] = v15 + 4;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      *(void *)&v29[0] = sub_1000993AC(v16, v17, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error reading System Event Data characteristic: %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v30[0] = a2;
    goto LABEL_22;
  }
  if (!a1)
  {
    uint64_t v21 = type metadata accessor for Errors();
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v23 = swift_allocError();
    uint64_t v24 = v22;
    unint64_t v25 = 0xD000000000000035;
    uint64_t v26 = "Error reading System Event Data: no results returned!";
LABEL_21:
    unint64_t *v22 = v25;
    v22[1] = (unint64_t)(v26 - 32) | 0x8000000000000000;
    (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v21 - 8) + 104))(v24, enum case for Errors.CharacteristicReadWriteFailure(_:), v21);
    v30[0] = v23;
LABEL_22:
    sub_1000992E8(&qword_1002AA058);
    return CheckedContinuation.resume(throwing:)();
  }
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_10;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v18 = *(id *)(a1 + 32);
LABEL_10:
    uint64_t v19 = v18;
    id v20 = [v18 value];

    if (v20)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v29, 0, sizeof(v29));
    }
    sub_1000A5BE8((uint64_t)v29, (uint64_t)v30);
    if (v31)
    {
      if (swift_dynamicCast())
      {
        *(_OWORD *)unint64_t v30 = v28;
        sub_1000992E8(&qword_1002AA058);
        return CheckedContinuation.resume(returning:)();
      }
    }
    else
    {
      sub_1000A61E4((uint64_t)v30, &qword_1002AA5F0);
    }
    uint64_t v21 = type metadata accessor for Errors();
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    uint64_t v23 = swift_allocError();
    uint64_t v24 = v22;
    unint64_t v25 = 0xD000000000000023;
    uint64_t v26 = "System Event Data not found in read";
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

void sub_100112330(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v41 - v15;
  if (a2 || !a1)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_100096F64(v10, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, v25, v10);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      long long v28 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)long long v28 = 136315138;
      *(void *)&v45[0] = a2;
      swift_errorRetain();
      sub_1000992E8(&qword_1002AA080);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v42 = v10;
      *(void *)&v45[0] = sub_1000993AC(v29, v30, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Unable to read characteristic: %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v42);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    }
  }
  else
  {
    id v17 = [a1 metadata];
    if (v17)
    {
      id v18 = v17;
      id v19 = [v17 format];

      if (v19)
      {
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v22 = v21;

        if (v20 == 1635017060 && v22 == 0xE400000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0) {
            return;
          }
        }
        if ([a1 value])
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v45, 0, sizeof(v45));
        }
        sub_1000A5BE8((uint64_t)v45, (uint64_t)v46);
        if (v46[3])
        {
          if (swift_dynamicCast())
          {
            uint64_t v31 = (void *)(a3 + 16);
            uint64_t v32 = v43;
            unint64_t v33 = v44;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            sub_1000A618C(v32, v33);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&v45[0] = *v31;
            *uint64_t v31 = 0x8000000000000000;
            sub_1001F5A50(v32, v33, a4, a5, isUniquelyReferenced_nonNull_native);
            *uint64_t v31 = *(void *)&v45[0];
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_endAccess();
            if (qword_1002A7B60 != -1) {
              swift_once();
            }
            uint64_t v35 = sub_100096F64(v10, (uint64_t)qword_1002A9E40);
            (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v35, v10);
            sub_1000A618C(v32, v33);
            sub_1000A618C(v32, v33);
            uint64_t v36 = Logger.logObject.getter();
            os_log_type_t v37 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v36, v37))
            {
              uint64_t v38 = (uint8_t *)swift_slowAlloc();
              v46[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v38 = 136315138;
              unint64_t v41 = v38 + 4;
              uint64_t v39 = sub_100139704(v32, v33);
              uint64_t v42 = v10;
              *(void *)&v45[0] = sub_1000993AC(v39, v40, v46);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_1000A6240(v32, v33);
              sub_1000A6240(v32, v33);
              _os_log_impl((void *)&_mh_execute_header, v36, v37, "Battery Data: %s", v38, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              sub_1000A6240(v32, v33);
              (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v42);
            }
            else
            {
              sub_1000A6240(v32, v33);
              sub_1000A6240(v32, v33);
              sub_1000A6240(v32, v33);

              (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
            }
          }
        }
        else
        {
          sub_1000A61E4((uint64_t)v46, &qword_1002AA5F0);
        }
      }
    }
  }
}

id sub_100112994()
{
  return sub_1001137A0(type metadata accessor for dockaccessoryd);
}

uint64_t type metadata accessor for dockaccessoryd()
{
  return self;
}

void sub_1001129D0(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v53 = a1;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v13 = a3 + 16;
  uint64_t v14 = sub_100096F64(v9, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  sub_1000B9BD4(a2, (uint64_t)v56, &qword_1002AA5F0);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v52 = a5;
  uint64_t v51 = a4;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 67109378;
    LODWORD(v54[0]) = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + _Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    uint64_t v50 = v18 + 10;
    sub_1000B9BD4((uint64_t)v56, (uint64_t)v54, &qword_1002AA5F0);
    sub_1000992E8(&qword_1002AA5F0);
    uint64_t v19 = String.init<A>(describing:)();
    v54[0] = sub_1000993AC(v19, v20, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A61E4((uint64_t)v56, &qword_1002AA5F0);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "dockaccessoryd: Connection to PID %d (%s) has been invalidated", (uint8_t *)v18, 0x12u);
    swift_arrayDestroy();
    uint64_t v13 = a3 + 16;
    swift_slowDealloc();
    a4 = v51;
    a5 = v52;
    swift_slowDealloc();
  }
  else
  {
    sub_1000A61E4((uint64_t)v56, &qword_1002AA5F0);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v21 = v53;
  sub_100191998(v53);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  sub_1001A2DFC(v21);

  swift_beginAccess();
  uint64_t v23 = (void *)swift_unknownObjectWeakLoadStrong();
  sub_1001A2488(v21);

  swift_beginAccess();
  char v24 = (void *)swift_unknownObjectWeakLoadStrong();
  sub_1001A3978(v21);

  swift_beginAccess();
  uint64_t v25 = (void *)swift_unknownObjectWeakLoadStrong();
  sub_100193718(v21, v25);

  swift_beginAccess();
  uint64_t v26 = (void *)swift_unknownObjectWeakLoadStrong();
  sub_1001A44B8(v21);

  uint64_t v27 = qword_1002B1628;
  sub_10018F564(v21, a4, a5, 0);
  long long v28 = *(char **)(v27 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v29 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  unint64_t v30 = *(void **)&v28[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v31 = v28;
  id v32 = v30;
  OS_dispatch_semaphore.wait()();

  unint64_t v33 = &v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v34 = *(void *)v33;
  uint64_t v35 = *(void *)(*(void *)v33 + 16);
  if (v35)
  {
    uint64_t v47 = v29;
    uint64_t v48 = v28;
    unint64_t v49 = v31;
    uint64_t v50 = v13;
    uint64_t v36 = v34 + 32;
    v46[1] = v34;
    swift_bridgeObjectRetain();
    do
    {
      sub_1000A5D40(v36, (uint64_t)v56);
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      uint64_t v37 = swift_dynamicCast();
      if (v37)
      {
        uint64_t v38 = v55;
        uint64_t v39 = *(os_unfair_lock_s **)(v55 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
        uint64_t v40 = __chkstk_darwin(v37);
        v46[-2] = v38;
        LODWORD(v46[-1]) = v53;
        __chkstk_darwin(v40);
        v46[-2] = sub_100135C9C;
        v46[-1] = v41;
        swift_retain();
        os_unfair_lock_lock(v39 + 4);
        sub_100135C58(v42);
        os_unfair_lock_unlock(v39 + 4);
        swift_release();
        swift_release();
      }
      v36 += 40;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
    a5 = v52;
    a4 = v51;
    uint64_t v31 = v49;
    long long v28 = v48;
    uint64_t v29 = v47;
  }
  id v43 = *(id *)&v28[v29];
  OS_dispatch_semaphore.signal()();

  int v44 = v53;
  sub_10018C234(v53);
  sub_10019C13C(v44);
  swift_beginAccess();
  double v45 = (void *)swift_unknownObjectWeakLoadStrong();
  sub_10018C090(a4, a5, v45);
}

void sub_100113064(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v53 = a1;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v13 = a3 + 16;
  uint64_t v14 = sub_100096F64(v9, (uint64_t)qword_1002A9E40);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14, v9);
  sub_1000B9BD4(a2, (uint64_t)v56, &qword_1002AA5F0);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v52 = a5;
  uint64_t v51 = a4;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 67109378;
    LODWORD(v54[0]) = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + _Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    uint64_t v50 = v18 + 10;
    sub_1000B9BD4((uint64_t)v56, (uint64_t)v54, &qword_1002AA5F0);
    sub_1000992E8(&qword_1002AA5F0);
    uint64_t v19 = String.init<A>(describing:)();
    v54[0] = sub_1000993AC(v19, v20, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000A61E4((uint64_t)v56, &qword_1002AA5F0);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "dockaccessoryd: Connection to PID %d (%s) has been interrupted", (uint8_t *)v18, 0x12u);
    swift_arrayDestroy();
    uint64_t v13 = a3 + 16;
    swift_slowDealloc();
    a4 = v51;
    a5 = v52;
    swift_slowDealloc();
  }
  else
  {
    sub_1000A61E4((uint64_t)v56, &qword_1002AA5F0);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v21 = v53;
  sub_100191998(v53);
  swift_beginAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  sub_1001A2DFC(v21);

  swift_beginAccess();
  uint64_t v23 = (void *)swift_unknownObjectWeakLoadStrong();
  sub_1001A2488(v21);

  swift_beginAccess();
  char v24 = (void *)swift_unknownObjectWeakLoadStrong();
  sub_1001A3978(v21);

  swift_beginAccess();
  uint64_t v25 = (void *)swift_unknownObjectWeakLoadStrong();
  sub_100193718(v21, v25);

  swift_beginAccess();
  uint64_t v26 = (void *)swift_unknownObjectWeakLoadStrong();
  sub_1001A44B8(v21);

  uint64_t v27 = qword_1002B1628;
  sub_10018F564(v21, a4, a5, 0);
  long long v28 = *(char **)(v27 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v29 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  unint64_t v30 = *(void **)&v28[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v31 = v28;
  id v32 = v30;
  OS_dispatch_semaphore.wait()();

  unint64_t v33 = &v31[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v34 = *(void *)v33;
  uint64_t v35 = *(void *)(*(void *)v33 + 16);
  if (v35)
  {
    uint64_t v47 = v29;
    uint64_t v48 = v28;
    unint64_t v49 = v31;
    uint64_t v50 = v13;
    uint64_t v36 = v34 + 32;
    v46[1] = v34;
    swift_bridgeObjectRetain();
    do
    {
      sub_1000A5D40(v36, (uint64_t)v56);
      sub_1000992E8(&qword_1002A82E0);
      type metadata accessor for DaemonAccessory();
      uint64_t v37 = swift_dynamicCast();
      if (v37)
      {
        uint64_t v38 = v55;
        uint64_t v39 = *(os_unfair_lock_s **)(v55 + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_callbackLock);
        uint64_t v40 = __chkstk_darwin(v37);
        v46[-2] = v38;
        LODWORD(v46[-1]) = v53;
        __chkstk_darwin(v40);
        v46[-2] = sub_100134E44;
        v46[-1] = v41;
        swift_retain();
        os_unfair_lock_lock(v39 + 4);
        sub_100134E64(v42);
        os_unfair_lock_unlock(v39 + 4);
        swift_release();
        swift_release();
      }
      v36 += 40;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
    a5 = v52;
    a4 = v51;
    uint64_t v31 = v49;
    long long v28 = v48;
    uint64_t v29 = v47;
  }
  id v43 = *(id *)&v28[v29];
  OS_dispatch_semaphore.signal()();

  int v44 = v53;
  sub_10018C234(v53);
  sub_10019C13C(v44);
  swift_beginAccess();
  double v45 = (void *)swift_unknownObjectWeakLoadStrong();
  sub_10018C090(a4, a5, v45);
}

id sub_100113788()
{
  return sub_1001137A0(type metadata accessor for ServiceDelegate);
}

id sub_1001137A0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for ServiceDelegate()
{
  return self;
}

char *sub_100113800(uint64_t a1)
{
  return sub_100102170(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100113814(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void *sub_100113890(void *a1)
{
  return sub_1001026E4(0, a1[2], 0, a1);
}

void *sub_1001138A4(void *a1)
{
  return sub_1001026F0(0, a1[2], 0, a1);
}

void *sub_1001138B8(void *a1)
{
  return sub_100102294(0, a1[2], 0, a1);
}

void *sub_1001138CC(unint64_t a1)
{
  return sub_1001138E4(a1);
}

void *sub_1001138E4(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
        id v7 = [v5 UUID];
        char v8 = static NSObject.== infix(_:_:)();

        if (v8)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v3;
        if (v6 == v2) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v3 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100113A68(uint64_t a1)
{
  if (qword_1002A7C00 == -1) {
    goto LABEL_2;
  }
LABEL_84:
  swift_once();
LABEL_2:
  uint64_t v2 = qword_1002B1628;
  id v3 = (id)a1;
  sub_1001A1CE4(v2, v3);

  uint64_t v4 = qword_1002B1628;
  uint64_t v62 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v5 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v5 + 4);
  swift_release();
  unint64_t v6 = (uint64_t *)(v4 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyEventClients);
  swift_beginAccess();
  a1 = *v6;
  uint64_t v7 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (v10)
  {
    while (1)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v12 << 6);
LABEL_24:
      id v18 = *(id *)(*(void *)(a1 + 56) + 8 * v14);
      id v19 = [v18 remoteObjectProxy];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000992E8(&qword_1002A9F28);
      if (swift_dynamicCast()) {
        break;
      }

      if (!v10) {
        goto LABEL_8;
      }
    }
    [v67 disconnectedWithErr:0];

    swift_unknownObjectRelease();
  }
LABEL_8:
  int64_t v15 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
    goto LABEL_81;
  }
  if (v15 < v11)
  {
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v12;
    if (v16) {
      goto LABEL_23;
    }
    int64_t v12 = v15 + 1;
    if (v15 + 1 < v11)
    {
      unint64_t v16 = *(void *)(v7 + 8 * v12);
      if (v16) {
        goto LABEL_23;
      }
      int64_t v12 = v15 + 2;
      if (v15 + 2 < v11)
      {
        unint64_t v16 = *(void *)(v7 + 8 * v12);
        if (v16) {
          goto LABEL_23;
        }
        int64_t v12 = v15 + 3;
        if (v15 + 3 < v11)
        {
          unint64_t v16 = *(void *)(v7 + 8 * v12);
          if (v16) {
            goto LABEL_23;
          }
          int64_t v17 = v15 + 4;
          if (v17 < v11)
          {
            unint64_t v16 = *(void *)(v7 + 8 * v17);
            if (v16)
            {
              int64_t v12 = v17;
LABEL_23:
              unint64_t v10 = (v16 - 1) & v16;
              unint64_t v14 = __clz(__rbit64(v16)) + (v12 << 6);
              goto LABEL_24;
            }
            while (1)
            {
              int64_t v12 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                break;
              }
              if (v12 >= v11) {
                goto LABEL_27;
              }
              unint64_t v16 = *(void *)(v7 + 8 * v12);
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
LABEL_81:
            __break(1u);
            goto LABEL_82;
          }
        }
      }
    }
  }
LABEL_27:
  swift_release();
  unint64_t v20 = *(os_unfair_lock_s **)(v4 + v62);
  swift_retain();
  os_unfair_lock_unlock(v20 + 4);
  swift_release();
  uint64_t v21 = qword_1002B1628;
  uint64_t v63 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v22 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v22 + 4);
  swift_release();
  uint64_t v23 = (uint64_t *)(v21 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyBatteryClients);
  swift_beginAccess();
  a1 = *v23;
  uint64_t v24 = a1 + 64;
  uint64_t v25 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(v25 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v29 = 0;
  while (1)
  {
    if (v27)
    {
      unint64_t v30 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      unint64_t v31 = v30 | (v29 << 6);
      goto LABEL_49;
    }
    int64_t v32 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      goto LABEL_79;
    }
    if (v32 >= v28) {
      break;
    }
    unint64_t v33 = *(void *)(v24 + 8 * v32);
    ++v29;
    if (!v33)
    {
      int64_t v29 = v32 + 1;
      if (v32 + 1 >= v28) {
        break;
      }
      unint64_t v33 = *(void *)(v24 + 8 * v29);
      if (!v33)
      {
        int64_t v29 = v32 + 2;
        if (v32 + 2 >= v28) {
          break;
        }
        unint64_t v33 = *(void *)(v24 + 8 * v29);
        if (!v33)
        {
          int64_t v29 = v32 + 3;
          if (v32 + 3 >= v28) {
            break;
          }
          unint64_t v33 = *(void *)(v24 + 8 * v29);
          if (!v33)
          {
            int64_t v34 = v32 + 4;
            if (v34 >= v28) {
              break;
            }
            unint64_t v33 = *(void *)(v24 + 8 * v34);
            if (!v33)
            {
              while (1)
              {
                int64_t v29 = v34 + 1;
                if (__OFADD__(v34, 1)) {
                  break;
                }
                if (v29 >= v28) {
                  goto LABEL_52;
                }
                unint64_t v33 = *(void *)(v24 + 8 * v29);
                ++v34;
                if (v33) {
                  goto LABEL_48;
                }
              }
LABEL_82:
              __break(1u);
              goto LABEL_83;
            }
            int64_t v29 = v34;
          }
        }
      }
    }
LABEL_48:
    unint64_t v27 = (v33 - 1) & v33;
    unint64_t v31 = __clz(__rbit64(v33)) + (v29 << 6);
LABEL_49:
    uint64_t v35 = *(void *)(a1 + 56) + 16 * v31;
    uint64_t v36 = *(void **)v35;
    if (*(void *)v35)
    {
      id v37 = *(id *)(v35 + 8);
      id v38 = v36;
      id v39 = [v38 remoteObjectProxy];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000992E8((uint64_t *)&unk_1002A9F30);
      if (swift_dynamicCast())
      {
        [v66 disconnectedWithErr:0];

        swift_unknownObjectRelease();
      }
      else
      {
      }
    }
  }
LABEL_52:
  swift_release();
  uint64_t v40 = *(os_unfair_lock_s **)(v21 + v63);
  swift_retain();
  os_unfair_lock_unlock(v40 + 4);
  swift_release();
  uint64_t v41 = qword_1002B1628;
  uint64_t v64 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v42 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v42 + 4);
  swift_release();
  id v43 = (uint64_t *)(v41 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifyTrackingSummaryClients);
  swift_beginAccess();
  a1 = *v43;
  uint64_t v44 = a1 + 64;
  uint64_t v45 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & *(void *)(a1 + 64);
  int64_t v48 = (unint64_t)(v45 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v49 = 0;
  while (2)
  {
    if (v47)
    {
      unint64_t v50 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      unint64_t v51 = v50 | (v49 << 6);
      goto LABEL_74;
    }
    int64_t v52 = v49 + 1;
    if (__OFADD__(v49, 1)) {
      goto LABEL_80;
    }
    if (v52 < v48)
    {
      unint64_t v53 = *(void *)(v44 + 8 * v52);
      ++v49;
      if (v53) {
        goto LABEL_73;
      }
      int64_t v49 = v52 + 1;
      if (v52 + 1 >= v48) {
        break;
      }
      unint64_t v53 = *(void *)(v44 + 8 * v49);
      if (v53) {
        goto LABEL_73;
      }
      int64_t v49 = v52 + 2;
      if (v52 + 2 >= v48) {
        break;
      }
      unint64_t v53 = *(void *)(v44 + 8 * v49);
      if (v53) {
        goto LABEL_73;
      }
      int64_t v49 = v52 + 3;
      if (v52 + 3 >= v48) {
        break;
      }
      unint64_t v53 = *(void *)(v44 + 8 * v49);
      if (v53) {
        goto LABEL_73;
      }
      int64_t v54 = v52 + 4;
      if (v54 >= v48) {
        break;
      }
      unint64_t v53 = *(void *)(v44 + 8 * v54);
      if (v53)
      {
        int64_t v49 = v54;
LABEL_73:
        unint64_t v47 = (v53 - 1) & v53;
        unint64_t v51 = __clz(__rbit64(v53)) + (v49 << 6);
LABEL_74:
        uint64_t v55 = *(void *)(a1 + 56) + 16 * v51;
        uint64_t v56 = *(void **)v55;
        if (*(void *)v55)
        {
          id v57 = *(id *)(v55 + 8);
          id v58 = v56;
          id v59 = [v58 remoteObjectProxy];
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          sub_1000992E8(&qword_1002A8688);
          if (swift_dynamicCast())
          {
            [v65 disconnectedWithErr:0];

            swift_unknownObjectRelease();
          }
          else
          {
          }
        }
        continue;
      }
      while (1)
      {
        int64_t v49 = v54 + 1;
        if (__OFADD__(v54, 1)) {
          break;
        }
        if (v49 >= v48) {
          goto LABEL_77;
        }
        unint64_t v53 = *(void *)(v44 + 8 * v49);
        ++v54;
        if (v53) {
          goto LABEL_73;
        }
      }
LABEL_83:
      __break(1u);
      goto LABEL_84;
    }
    break;
  }
LABEL_77:
  swift_release();
  unint64_t v60 = *(os_unfair_lock_s **)(v41 + v64);
  swift_retain();
  os_unfair_lock_unlock(v60 + 4);
  return swift_release();
}

uint64_t sub_1001141B0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [self predicateMatchingBundleIdentifier:v8];

  unint64_t v10 = self;
  id v31 = 0;
  id v11 = [v10 handleForPredicate:v9 error:&v31];
  if (!v11)
  {
    id v20 = v31;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_100096F64(v4, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v21, v4);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      int64_t v28 = (void *)swift_slowAlloc();
      int64_t v29 = (void *)swift_slowAlloc();
      id v31 = v29;
      *(_DWORD *)uint64_t v24 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_1000993AC(a1, a2, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2112;
      swift_errorRetain();
      uint64_t v25 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v30 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int64_t v28 = v25;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed looking up process state for %s: %@", (uint8_t *)v24, 0x16u);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    goto LABEL_16;
  }
  int64_t v12 = v11;
  id v13 = v31;

  id v14 = [v12 currentState];
  if (!v14)
  {

    goto LABEL_16;
  }
  int64_t v15 = v14;
  id v16 = [v14 endowmentNamespaces];
  if (v16)
  {
    int64_t v17 = v16;
    uint64_t v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v17) = sub_100108870(0xD00000000000001FLL, 0x8000000100237520, v18);
    swift_bridgeObjectRelease();
    char v19 = v17 ^ 1;
  }
  else
  {
    char v19 = 1;
  }
  if ([v15 taskState] != 4)
  {
    unsigned int v26 = [v15 taskState];

    if (v26 == 3) {
      return v19 & 1;
    }
LABEL_16:
    char v19 = 0;
    return v19 & 1;
  }

  return v19 & 1;
}

uint64_t sub_10011468C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v30 = *(void *)(v0 - 8);
  uint64_t v31 = v0;
  __chkstk_darwin(v0);
  int64_t v29 = (char *)&v28 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  NSString v8 = (char *)&v28 - v7;
  id v9 = [self configurationForDefaultMainDisplayMonitor];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v32 = v10 + 16;
  dispatch_semaphore_t v11 = dispatch_semaphore_create(0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_100114B38;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1001090C0;
  void aBlock[3] = &unk_100277520;
  id v13 = _Block_copy(aBlock);
  swift_retain();
  id v14 = v11;
  swift_release();
  [v9 setTransitionHandler:v13];
  _Block_release(v13);
  int64_t v15 = self;
  id v33 = v9;
  id v16 = [v15 monitorWithConfiguration:v9];
  static DispatchTime.now()();
  + infix(_:_:)();
  int64_t v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v6, v2);
  uint64_t v18 = v14;
  OS_dispatch_semaphore.wait(timeout:)();
  v17(v8, v2);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v19 = v31;
    uint64_t v20 = sub_100096F64(v31, (uint64_t)qword_1002A9E40);
    uint64_t v22 = v29;
    uint64_t v21 = v30;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v29, v20, v19);
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Can't detect foreground app", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v21 + 8))(v22, v19);
  }
  swift_beginAccess();
  uint64_t v26 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  [v16 invalidate];

  swift_release();
  return v26;
}

uint64_t sub_100114AC0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100114AF8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

Swift::Int sub_100114B38(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100108A20(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_100114B40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100114B50()
{
  return swift_release();
}

uint64_t sub_100114B58(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  id v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  id v16 = (char *)&v41 - v15;
  if (a1 != a3 || a2 != a4)
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if (v17) {
      return result;
    }
    uint64_t v41 = v14;
    uint64_t v42 = v10;
    uint64_t v43 = v11;
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v19 = qword_1002B1628;
    uint64_t v20 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
    uint64_t v21 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
    swift_retain();
    os_unfair_lock_lock(v21 + 4);
    swift_release();
    uint64_t v22 = (void **)(v19 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking);
    swift_beginAccess();
    LOBYTE(v22) = sub_100183950(a3, a4, *v22);
    os_log_type_t v23 = *(os_unfair_lock_s **)(v19 + v20);
    swift_retain();
    os_unfair_lock_unlock(v23 + 4);
    swift_release();
    if (v22)
    {
      if (sub_1001141B0(a3, a4))
      {
        NSString v24 = String._bridgeToObjectiveC()();
        id v25 = [a5 valueForEntitlement:v24];

        uint64_t v26 = v42;
        uint64_t v27 = v43;
        if (v25)
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v45, 0, sizeof(v45));
        }
        sub_1000A5BE8((uint64_t)v45, (uint64_t)v46);
        if (v46[3])
        {
          if (swift_dynamicCast() & 1) != 0 && (v44) {
            return 1;
          }
        }
        else
        {
          sub_1000A61E4((uint64_t)v46, &qword_1002AA5F0);
        }
        int64_t v34 = (void *)sub_10011468C();
        char v35 = sub_100183950(a1, a2, v34);
        swift_bridgeObjectRelease();
        if (v35) {
          return 1;
        }
        if (qword_1002A7B60 != -1) {
          swift_once();
        }
        uint64_t v36 = sub_100096F64(v26, (uint64_t)qword_1002A9E40);
        id v37 = v41;
        (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v41, v36, v26);
        swift_bridgeObjectRetain_n();
        id v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc();
          v46[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v40 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)&v45[0] = sub_1000993AC(a1, a2, v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "contender %s is not visible in foreground, stealing disallowed", v40, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v27 + 8))(v37, v42);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v27 + 8))(v37, v26);
        }
      }
      else
      {
        uint64_t v29 = v42;
        uint64_t v28 = v43;
        if (qword_1002A7B60 != -1) {
          swift_once();
        }
        uint64_t v30 = sub_100096F64(v29, (uint64_t)qword_1002A9E40);
        (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v16, v30, v29);
        swift_bridgeObjectRetain_n();
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v31, v32))
        {
          id v33 = (uint8_t *)swift_slowAlloc();
          v46[0] = swift_slowAlloc();
          *(_DWORD *)id v33 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)&v45[0] = sub_1000993AC(a3, a4, v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "prior owner: %s is not backgrounded, stealing disallowed", v33, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v43 + 8))(v16, v29);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v28 + 8))(v16, v29);
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1001151B4()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = [self currentConnection];
  if (!v4)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_100096F64(v0, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v13, v0);
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Couldn't fetch active XPC connection, ergo no camera TCC", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return 0;
  }
  uint64_t v5 = v4;
  id v6 = [v4 processIdentifier];
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_1002B1628;
  uint64_t v8 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  id v9 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v9 + 4);
  swift_release();
  uint64_t v10 = (uint64_t *)(v7 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__processesAuthorizedForCamera);
  swift_beginAccess();
  LOBYTE(v10) = sub_100183A18((uint64_t)v6, *v10);
  uint64_t v11 = *(os_unfair_lock_s **)(v7 + v8);
  swift_retain();
  os_unfair_lock_unlock(v11 + 4);
  swift_release();
  if ((v10 & 1) == 0)
  {
    [v5 auditToken];
    long long v22 = v25;
    long long v23 = v24;
    NSString v17 = String._bridgeToObjectiveC()();
    long long v24 = v23;
    long long v25 = v22;
    int v18 = TCCAccessPreflightWithAuditToken();

    if (!v18)
    {
      uint64_t v20 = sub_10019AE8C(v5);
      uint64_t v12 = 1;
      sub_10018F564((uint64_t)v6, v20, v21, 1);

      swift_bridgeObjectRelease();
      return v12;
    }

    return 0;
  }

  return 1;
}

void sub_1001154F4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Errors();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  id v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v25 - v7);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1001151B4())
  {
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v13 = qword_1002B1628;
    uint64_t v14 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    os_log_type_t v15 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v15 + 4);
    swift_release();
    swift_beginAccess();
    id v16 = *(os_unfair_lock_s **)(v13 + v14);
    swift_bridgeObjectRetain();
    swift_retain();
    os_unfair_lock_unlock(v16 + 4);
    swift_release();
    type metadata accessor for DockCoreAccessory();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, void))(a1 + 16))(a1, isa, 0);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_100096F64(v9, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v18, v9);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = a1;
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Client doesn't have camera TCC, rejecting XPC message", v21, 2u);
      a1 = v25;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    void *v8 = 0xD000000000000012;
    v8[1] = 0x8000000100237160;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))(v8, enum case for Errors.CameraTCCMissing(_:), v2);
    (*(void (**)(char *, void *, uint64_t))(v3 + 16))(v6, v8, v2);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v22, v6, v2);
    long long v23 = (void *)_convertErrorToNSError(_:)();
    type metadata accessor for DockCoreAccessory();
    Class v24 = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, void *))(a1 + 16))(a1, v24, v23);

    (*(void (**)(void *, uint64_t))(v3 + 8))(v8, v2);
    swift_errorRelease();
  }
}

void sub_100115964(void (**a1)(id, id, void), void *a2)
{
  uint64_t v4 = type metadata accessor for Errors();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t *)((char *)&v26 - v9);
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1001151B4())
  {
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_1002B1628;
    uint64_t v16 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    NSString v17 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v17 + 4);
    swift_release();
    uint64_t v18 = *(os_unfair_lock_s **)(v15 + v16);
    id v27 = *(id *)(v15 + *a2);
    swift_retain();
    os_unfair_lock_unlock(v18 + 4);
    swift_release();
    a1[2](a1, v27, 0);
    uint64_t v19 = v27;
  }
  else
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_100096F64(v11, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v20, v11);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      long long v23 = (uint8_t *)swift_slowAlloc();
      id v27 = a1;
      *(_WORD *)long long v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Client doesn't have camera TCC, rejecting XPC message", v23, 2u);
      a1 = (void (**)(id, id, void))v27;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    void *v10 = 0xD000000000000012;
    v10[1] = 0x8000000100237160;
    (*(void (**)(void *, void, uint64_t))(v5 + 104))(v10, enum case for Errors.CameraTCCMissing(_:), v4);
    (*(void (**)(char *, void *, uint64_t))(v5 + 16))(v8, v10, v4);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v24, v8, v4);
    uint64_t v25 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(id, id, void *))a1)[2](a1, 0, v25);

    (*(void (**)(void *, uint64_t))(v5 + 8))(v10, v4);
    swift_errorRelease();
  }
}

uint64_t sub_100115DA8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Errors();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (uint64_t *)((char *)&v26 - v7);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_1001151B4())
  {
    if (qword_1002A7C00 != -1) {
      swift_once();
    }
    uint64_t v13 = qword_1002B1628;
    uint64_t v14 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
    uint64_t v15 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
    swift_retain();
    os_unfair_lock_lock(v15 + 4);
    swift_release();
    uint64_t v16 = *(void *)(v13 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_trackingButtonState);
    NSString v17 = *(os_unfair_lock_s **)(v13 + v14);
    swift_retain();
    os_unfair_lock_unlock(v17 + 4);
    swift_release();
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 16);
    return v18(a1, v16, 0);
  }
  else
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_100096F64(v9, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v20, v9);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      long long v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = a1;
      *(_WORD *)long long v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Client doesn't have camera TCC, rejecting XPC message", v23, 2u);
      a1 = v27;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    void *v8 = 0xD000000000000012;
    v8[1] = 0x8000000100237160;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))(v8, enum case for Errors.CameraTCCMissing(_:), v2);
    (*(void (**)(char *, void *, uint64_t))(v3 + 16))(v6, v8, v2);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v24, v6, v2);
    uint64_t v25 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, uint64_t, void *))(a1 + 16))(a1, 2, v25);

    (*(void (**)(void *, uint64_t))(v3 + 8))(v8, v2);
    return swift_errorRelease();
  }
}

uint64_t sub_1001161DC(void *a1)
{
  uint64_t v2 = type metadata accessor for Errors();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  int64_t v48 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)v44 - v6);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  unint64_t v47 = (char *)v44 - v12;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10019AE8C(a1);
  if (!v14)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_100096F64(v8, (uint64_t)qword_1002A9E40);
    uint64_t v20 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v11, v19, v8);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      long long v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed fetching App ID from connection", v23, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v8);
    void *v7 = 0xD000000000000028;
    v7[1] = 0x8000000100237600;
    (*(void (**)(void *, void, uint64_t))(v3 + 104))(v7, enum case for Errors.NotFound(_:), v2);
    uint64_t v24 = v48;
    (*(void (**)(char *, void *, uint64_t))(v3 + 16))(v48, v7, v2);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v25, v24, v2);
    _convertErrorToNSError(_:)();
    (*(void (**)(void *, uint64_t))(v3 + 8))(v7, v2);
    swift_errorRelease();
    return 1;
  }
  uint64_t v15 = v13;
  unint64_t v16 = v14;
  NSString v17 = String._bridgeToObjectiveC()();
  id v18 = [a1 valueForEntitlement:v17];

  if (v18)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v51, 0, sizeof(v51));
  }
  sub_1000A5BE8((uint64_t)v51, (uint64_t)v52);
  uint64_t v46 = v3;
  if (v53)
  {
    if (swift_dynamicCast())
    {
      char v26 = v50;
      goto LABEL_17;
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)v52, &qword_1002AA5F0);
  }
  char v26 = 0;
LABEL_17:
  uint64_t v27 = qword_1002B1628;
  uint64_t v28 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  uint64_t v29 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v29 + 4);
  swift_release();
  uint64_t v30 = (void **)(v27 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__appIDsOptedOutOfSystemTracking);
  swift_beginAccess();
  char v31 = sub_100183950(v15, v16, *v30);
  os_log_type_t v32 = *(os_unfair_lock_s **)(v27 + v28);
  swift_retain();
  os_unfair_lock_unlock(v32 + 4);
  swift_release();
  if (v26 & 1) != 0 || (v31) {
    return 0;
  }
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v34 = sub_100096F64(v8, (uint64_t)qword_1002A9E40);
  uint64_t v35 = v49;
  uint64_t v36 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v47, v34, v8);
  swift_bridgeObjectRetain_n();
  id v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v40 = v46;
  if (v39)
  {
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    *(void *)&v51[0] = v45;
    *(_DWORD *)uint64_t v41 = 136315138;
    v44[1] = v41 + 4;
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_1000993AC(v15, v16, (uint64_t *)v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Client %s is trying to control actuation, but system tracking still on. This is API violation", v41, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v8);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v8);
  }
  void *v7 = 0xD000000000000032;
  v7[1] = 0x8000000100237630;
  (*(void (**)(void *, void, uint64_t))(v40 + 104))(v7, enum case for Errors.InvalidParameter(_:), v2);
  uint64_t v42 = v48;
  (*(void (**)(char *, void *, uint64_t))(v40 + 16))(v48, v7, v2);
  sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
  swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v43, v42, v2);
  _convertErrorToNSError(_:)();
  (*(void (**)(void *, uint64_t))(v40 + 8))(v7, v2);
  swift_errorRelease();
  return 1;
}

void sub_1001169E8(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unsigned char *a6, uint64_t a7)
{
  long long v182 = a6;
  uint64_t v186 = a5;
  unint64_t v187 = a4;
  uint64_t v188 = a3;
  uint64_t v185 = a2;
  uint64_t v184 = type metadata accessor for UUID();
  *(void *)&long long v181 = *(void *)(v184 - 8);
  uint64_t v9 = __chkstk_darwin(v184);
  long long v183 = (char *)&v175 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v175 - v11;
  uint64_t v191 = type metadata accessor for Errors();
  uint64_t v13 = *(void *)(v191 - 8);
  uint64_t v14 = __chkstk_darwin(v191);
  uint64_t v189 = (char *)&v175 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v190 = (char **)((char *)&v175 - v16);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v175 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v175 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v175 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v175 - v28;
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v51 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v29, v51, v17);
    int64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      int64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Client doesn't have camera TCC, rejecting XPC message", v54, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v29, v17);
    uint64_t v55 = v190;
    *uint64_t v190 = 0xD000000000000012;
    v55[1] = 0x8000000100237160;
    uint64_t v56 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_26;
  }
  if (!a1 || !v188 || !v187 || !v186)
  {
    uint64_t v55 = v190;
    *uint64_t v190 = 0xD000000000000016;
    v55[1] = 0x8000000100237180;
    uint64_t v56 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_26:
    uint64_t v57 = v191;
    (*(void (**)(void *, void, uint64_t))(v13 + 104))(v55, *v56, v191);
    id v58 = v189;
    (*(void (**)(char *, void *, uint64_t))(v13 + 16))(v189, v55, v57);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v59, v58, v57);
    unint64_t v60 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a7 + 16))(a7, 0, v60);

    (*(void (**)(void *, uint64_t))(v13 + 8))(v55, v57);
LABEL_29:
    swift_errorRelease();
    return;
  }
  uint64_t v179 = v13;
  uint64_t v180 = a7;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_1001891D0(a1);
  char v31 = v30;
  if (!v30
    || (type metadata accessor for ActuationController(),
        id v32 = v31,
        char v33 = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(),
        v32,
        (v33 & 1) == 0)
    || (id v34 = v32,
        char v35 = dispatch thunk of DockCoreAccessory.hasSystemActuators(name:actuators:)(),
        v34,
        (v35 & 1) == 0))
  {
    uint64_t v46 = v190;
    uint64_t v45 = v191;
    *uint64_t v190 = 0xD000000000000019;
    v46[1] = 0x8000000100237440;
    uint64_t v47 = v179;
    (*(void (**)(void *, void, uint64_t))(v179 + 104))(v46, enum case for Errors.NotFound(_:), v45);
    unint64_t v61 = v189;
    (*(void (**)(char *, void *, uint64_t))(v47 + 16))(v189, v46, v45);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v62, v61, v45);
    uint64_t v63 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v180 + 16))(v180, 0, v63);

LABEL_28:
    (*(void (**)(void *, uint64_t))(v47 + 8))(v46, v45);
    goto LABEL_29;
  }
  id v36 = [self currentConnection];
  if (!v36)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v64 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v27, v64, v17);
    id v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    BOOL v67 = os_log_type_enabled(v65, v66);
    uint64_t v68 = v180;
    if (v67)
    {
      char v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed fetching current NSXPCConnection, cannot construct client", v69, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
    char v71 = v190;
    uint64_t v70 = v191;
    *uint64_t v190 = 0xD000000000000017;
    v71[1] = 0x8000000100235620;
    uint64_t v72 = v179;
    (*(void (**)(void *, void, uint64_t))(v179 + 104))(v71, enum case for Errors.XPCNil(_:), v70);
    uint64_t v73 = v189;
    (*(void (**)(char *, void *, uint64_t))(v72 + 16))(v189, v71, v70);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v74, v73, v70);
    uint64_t v75 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v68 + 16))(v68, 0, v75);

    goto LABEL_106;
  }
  id v177 = v36;
  char v37 = sub_1001161DC(v36);
  id v178 = v38;
  swift_bridgeObjectRelease();
  if ((v37 & 1) != 0 || v178)
  {
    (*(void (**)(uint64_t, void, id))(v180 + 16))(v180, 0, v178);

    uint64_t v76 = v178;

    return;
  }
  uint64_t v39 = qword_1002B1628;
  if (sub_10019B714([v177 processIdentifier], 0x7469736F50746573, 0xEC000000736E6F69))
  {
    uint64_t v40 = v180;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v41 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v24, v41, v17);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      char v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Rate limit exceeded for setActuatorPositions", v44, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
    uint64_t v46 = v190;
    uint64_t v45 = v191;
    *uint64_t v190 = 0xD00000000000002BLL;
    v46[1] = 0x8000000100237670;
    uint64_t v47 = v179;
    (*(void (**)(void *, void, uint64_t))(v179 + 104))(v46, enum case for Errors.rateLimitXPC(_:), v45);
    int64_t v48 = v189;
    (*(void (**)(char *, void *, uint64_t))(v47 + 16))(v189, v46, v45);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v49, v48, v45);
    uint64_t v50 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v40 + 16))(v40, 0, v50);

    goto LABEL_28;
  }
  id v178 = v34;
  sub_100199524(1);
  sub_100197C84(v31);
  if (v182[OBJC_IVAR____TtC14dockaccessoryd14dockaccessoryd_debugAllowed])
  {
    DockCoreInfo.type.getter();
    uint64_t v77 = DockCoreAccessoryType.rawValue.getter();
    if (v77 == DockCoreAccessoryType.rawValue.getter())
    {
      uint64_t v78 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
      uint64_t v79 = *(os_unfair_lock_s **)(v39 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
      swift_retain();
      os_unfair_lock_lock(v79 + 4);
      swift_release();
      double v80 = *(void **)(v39 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
      uint64_t v81 = *(os_unfair_lock_s **)(v39 + v78);
      id v82 = v80;
      swift_retain();
      os_unfair_lock_unlock(v81 + 4);
      swift_release();
      if (v80)
      {
        id v83 = (void *)dispatch thunk of DockCoreAccessory.info.getter();

        type metadata accessor for DockCoreInfo();
        id v84 = a1;
        id v85 = v83;
        char v86 = static NSObject.== infix(_:_:)();

        if (v86)
        {
          if (qword_1002A7B60 != -1) {
            swift_once();
          }
          uint64_t v87 = sub_100096F64(v17, (uint64_t)qword_1002A9E40);
          (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v87, v17);
          uint64_t v88 = Logger.logObject.getter();
          os_log_type_t v89 = static os_log_type_t.default.getter();
          BOOL v90 = os_log_type_enabled(v88, v89);
          uint64_t v91 = v180;
          uint64_t v92 = v178;
          if (v90)
          {
            id v93 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v93 = 0;
            _os_log_impl((void *)&_mh_execute_header, v88, v89, "setActuatorPositions: noop for mock device", v93, 2u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
          (*(void (**)(uint64_t, uint64_t, void))(v91 + 16))(v91, 1, 0);

          uint64_t v94 = &v196;
          goto LABEL_47;
        }
      }
    }
  }
  long long v182 = a1;
  DockCoreInfo.type.getter();
  uint64_t v95 = DockCoreAccessoryType.rawValue.getter();
  uint64_t v96 = DockCoreAccessoryType.rawValue.getter();
  uint64_t v97 = v180;
  unint64_t v98 = v178;
  if (v95 != v96) {
    goto LABEL_105;
  }
  uint64_t v99 = qword_1002B1628;
  uint64_t v100 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v101 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v101 + 4);
  swift_release();
  unint64_t v102 = *(void **)(v99 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  unint64_t v103 = *(os_unfair_lock_s **)(v99 + v100);
  id v104 = v102;
  swift_retain();
  os_unfair_lock_unlock(v103 + 4);
  swift_release();
  if (!v102)
  {
LABEL_105:
    char v71 = v190;
    uint64_t v70 = v191;
    *uint64_t v190 = 0x6C706D6920746F6ELL;
    v71[1] = 0xEF6465746E656D65;
    uint64_t v72 = v179;
    (*(void (**)(void *, void, uint64_t))(v179 + 104))(v71, enum case for Errors.OperationNotSupported(_:), v70);
    unint64_t v171 = v189;
    (*(void (**)(char *, void *, uint64_t))(v72 + 16))(v189, v71, v70);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v172, v171, v70);
    unint64_t v173 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v97 + 16))(v97, 0, v173);

LABEL_106:
    (*(void (**)(void *, uint64_t))(v72 + 8))(v71, v70);
    goto LABEL_29;
  }
  uint64_t v105 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v106 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  uint64_t v107 = *(void **)&v105[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v108 = v105;
  id v109 = v107;
  OS_dispatch_semaphore.wait()();

  int v110 = &v108[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v111 = *(void *)v110;
  uint64_t v112 = *(void *)(*(void *)v110 + 16);
  if (v112)
  {
    uint64_t v175 = v108;
    id v176 = v104;
    uint64_t v113 = v111 + 32;
    uint64_t v114 = (void (**)(char *, uint64_t))(v181 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v113, (uint64_t)v192);
      id v115 = *(id *)(*sub_1000A5DA4(v192, v192[3]) + 24);
      DockCoreInfo.identifier.getter();

      uint64_t v116 = v183;
      DockCoreInfo.identifier.getter();
      LOBYTE(v115) = static UUID.== infix(_:_:)();
      uint64_t v117 = *v114;
      uint64_t v118 = v116;
      uint64_t v119 = v184;
      (*v114)(v118, v184);
      v117(v12, v119);
      if (v115) {
        break;
      }
      sub_100099BCC((uint64_t)v192);
      v113 += 40;
      if (!--v112)
      {
        swift_bridgeObjectRelease();
        uint64_t v97 = v180;
        unint64_t v98 = v178;
        id v104 = v176;
        uint64_t v108 = v175;
        goto LABEL_55;
      }
    }
    swift_bridgeObjectRelease();
    id v121 = *(id *)&v105[v106];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v192, (uint64_t)&v193);
    sub_100099BCC((uint64_t)v192);

    uint64_t v97 = v180;
    unint64_t v98 = v178;
    id v104 = v176;
  }
  else
  {
LABEL_55:
    id v120 = *(id *)&v105[v106];
    OS_dispatch_semaphore.signal()();

    uint64_t v195 = 0;
    long long v193 = 0u;
    long long v194 = 0u;
  }
  if (!*((void *)&v194 + 1))
  {

    sub_1000A61E4((uint64_t)&v193, (uint64_t *)&unk_1002AAA30);
    goto LABEL_105;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_105;
  }
  uint64_t v122 = v192[0];
  sub_100099C7C(0, (unint64_t *)&qword_1002A8690);
  id v123 = *(id *)(v122 + 24);
  uint64_t v124 = v104;
  uint64_t v125 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
  char v126 = static NSObject.== infix(_:_:)();

  if ((v126 & 1) == 0)
  {

LABEL_104:
    swift_release();
    goto LABEL_105;
  }
  id v176 = v124;
  unint64_t v127 = *(char **)(v122 + 16);
  if (!v127
    || (uint64_t v128 = OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral,
        (unint64_t v129 = *(void **)&v127[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) == 0))
  {

    goto LABEL_104;
  }
  uint64_t v130 = v127;
  if ([v129 state] != (id)2)
  {

    swift_release();
LABEL_116:
    uint64_t v97 = v180;
    unint64_t v98 = v178;
    goto LABEL_105;
  }
  long long v183 = v130;
  uint64_t v184 = v122;
  os_log_t v131 = self;
  id v132 = (id)sub_1000992E8((uint64_t *)&unk_1002A9F50);
  uint64_t v133 = swift_allocObject();
  long long v181 = xmmword_100240BE0;
  *(_OWORD *)(v133 + 16) = xmmword_100240BE0;
  *(void *)(v133 + 56) = &type metadata for UInt32;
  *(void *)(v133 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v133 + 32) = 512;
  String.init(format:_:)();
  NSString v134 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v135 = [v131 UUIDWithString:v134];

  BOOL v136 = *(void **)&v127[v128];
  if (!v136 || (id v137 = [v136 services]) == 0)
  {

    swift_release();
    goto LABEL_116;
  }
  uint64_t v138 = v137;
  sub_100099C7C(0, (unint64_t *)&unk_1002A8F30);
  unint64_t v139 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v140 = v135;
  unint64_t v141 = 0;
  unint64_t v142 = (unint64_t)sub_1001138E4(v139);
  swift_bridgeObjectRelease();

  if (!(v142 >> 62))
  {
    if (*(void *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_67;
    }
LABEL_115:

    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_116;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_115;
  }
LABEL_67:
  if ((v142 & 0xC000000000000001) != 0)
  {
    uint64_t v143 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v142 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_119:
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_74;
      }
      goto LABEL_120;
    }
    uint64_t v143 = (char *)*(id *)(v142 + 32);
  }
  uint64_t v175 = v143;

  swift_bridgeObjectRelease();
  uint64_t v144 = swift_allocObject();
  *(_OWORD *)(v144 + 16) = v181;
  *(void *)(v144 + 56) = &type metadata for UInt32;
  *(void *)(v144 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v144 + 32) = 261;
  String.init(format:_:)();
  NSString v145 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v146 = [v131 UUIDWithString:v145];

  if (!*(void *)&v127[v128]
    || (id v147 = [v175 characteristics]) == 0)
  {

LABEL_110:
    swift_release();

    goto LABEL_116;
  }
  uint64_t v148 = v147;
  sub_100099C7C(0, (unint64_t *)&unk_1002A9F60);
  unint64_t v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v132 = v146;
  unint64_t v141 = (unint64_t)sub_1001138E4(v149);
  swift_bridgeObjectRelease();

  if (v141 >> 62) {
    goto LABEL_119;
  }
  if (!*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_120:

    swift_bridgeObjectRelease();
    goto LABEL_110;
  }
LABEL_74:
  if ((v141 & 0xC000000000000001) != 0)
  {
    id v150 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v141 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v150 = *(id *)(v141 + 32);
  }
  *(void *)&long long v181 = v150;

  swift_bridgeObjectRelease();
  uint64_t v151 = v187[2];
  if (!v151 || (uint64_t v152 = *(void *)(v186 + 16)) == 0)
  {
    id v160 = _swiftEmptyArrayStorage;
    uint64_t v159 = _swiftEmptyArrayStorage;
    goto LABEL_113;
  }
  uint64_t v153 = v187;
  uint64_t v155 = v187[4];
  uint64_t v154 = v187[5];
  uint64_t v191 = type metadata accessor for Actuator();
  uint64_t v190 = (void *)(v186 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v156 = 0;
  uint64_t v189 = (char *)(v152 - 1);
  double v157 = (char *)(v151 - 1);
  double v158 = v153 + 7;
  uint64_t v159 = _swiftEmptyArrayStorage;
  id v160 = _swiftEmptyArrayStorage;
  while (1)
  {
    swift_bridgeObjectRetain();
    double v161 = *(double *)&v190[(void)v156];
    uint64_t v162 = dispatch thunk of DockCoreAccessory.getActuatorIndex(name:system:)();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v159 = sub_100102A28(0, v159[2] + 1, 1, v159);
    }
    unint64_t v164 = v159[2];
    unint64_t v163 = v159[3];
    if (v164 >= v163 >> 1) {
      uint64_t v159 = sub_100102A28((void *)(v163 > 1), v164 + 1, 1, v159);
    }
    v159[2] = v164 + 1;
    v159[v164 + 4] = v162;
    if (v155 == static Actuator.Pitch.getter() && v154 == v165)
    {
      swift_bridgeObjectRelease_n();
LABEL_88:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v160 = sub_100102918(0, v160[2] + 1, 1, v160);
      }
      unint64_t v168 = v160[2];
      unint64_t v167 = v160[3];
      unint64_t v169 = v168 + 1;
      if (v168 >= v167 >> 1) {
        id v160 = sub_100102918((void *)(v167 > 1), v168 + 1, 1, v160);
      }
      double v161 = -v161;
      goto LABEL_97;
    }
    char v166 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v166) {
      goto LABEL_88;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v160 = sub_100102918(0, v160[2] + 1, 1, v160);
    }
    unint64_t v168 = v160[2];
    unint64_t v170 = v160[3];
    unint64_t v169 = v168 + 1;
    if (v168 >= v170 >> 1) {
      id v160 = sub_100102918((void *)(v170 > 1), v168 + 1, 1, v160);
    }
LABEL_97:
    v160[2] = v169;
    *(double *)&v160[v168 + 4] = v161;
    if (v157 == v156 || v189 == v156) {
      break;
    }
    uint64_t v155 = *(v158 - 1);
    uint64_t v154 = *v158;
    ++v156;
    v158 += 2;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_113:
  uint64_t v174 = (void *)v181;
  sub_1001A6C14((uint64_t)v159, (uint64_t)v160, 0, v181);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, void))(v180 + 16))(v180, 1, 0);

  swift_release();
  uint64_t v94 = &v197;
LABEL_47:
}

void sub_100118404(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v118 = a3;
  uint64_t v119 = a8;
  uint64_t v116 = a7;
  uint64_t v117 = a4;
  uint64_t v121 = a5;
  id v122 = a6;
  int v120 = a2;
  uint64_t v128 = a9;
  uint64_t v10 = type metadata accessor for Errors();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v126 = v10;
  uint64_t v127 = v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v124 = (char *)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v125 = (char **)((char *)&v113 - v14);
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v123 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v114 = (char *)&v113 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v113 = (char *)&v113 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  id v115 = (char *)&v113 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v113 - v25;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v27 = qword_1002B1628;
  uint64_t v28 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v29 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v29 + 4);
  swift_release();
  uint64_t v30 = *(void **)(v27 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  char v31 = *(os_unfair_lock_s **)(v27 + v28);
  id v32 = v30;
  swift_retain();
  os_unfair_lock_unlock(v31 + 4);
  swift_release();
  if (!v30) {
    goto LABEL_14;
  }
  id v33 = v32;
  uint64_t v34 = dispatch thunk of DockCoreAccessory.info.getter();

  type metadata accessor for DockCoreInfo();
  id v35 = a1;
  id v36 = (id)v34;
  LOBYTE(v34) = static NSObject.== infix(_:_:)();

  if ((v34 & 1) == 0)
  {
LABEL_14:
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v70 = sub_100096F64(v15, (uint64_t)qword_1002A9E40);
    uint64_t v71 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v26, v70, v15);
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "No such connected accessory, not setting velocity", v74, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v26, v15);
    uint64_t v76 = v125;
    uint64_t v75 = v126;
    void *v125 = 0xD000000000000016;
    v76[1] = 0x80000001002370B0;
    uint64_t v77 = v127;
    (*(void (**)(void *, void, uint64_t))(v127 + 104))(v76, enum case for Errors.OperationNotSupported(_:), v75);
    uint64_t v78 = v124;
    (*(void (**)(char *, void *, uint64_t))(v77 + 16))(v124, v76, v75);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v79, v78, v75);
    double v80 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v128 + 16))(v128, 0, v80);

    goto LABEL_25;
  }
  sub_1001891D0(v35);
  uint64_t v38 = v15;
  if (!v37) {
    goto LABEL_20;
  }
  uint64_t v39 = v37;
  type metadata accessor for ActuationController();
  if ((dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)() & 1) == 0)
  {

LABEL_20:
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v81 = sub_100096F64(v15, (uint64_t)qword_1002A9E40);
    uint64_t v82 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v18, v81, v15);
    id v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      id v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Failed to find valid accessory with actuation controller.", v85, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v82 + 8))(v18, v15);
    uint64_t v76 = v125;
    uint64_t v75 = v126;
    void *v125 = 0xD000000000000015;
    v76[1] = 0x80000001002370D0;
    uint64_t v77 = v127;
    (*(void (**)(void *, void, uint64_t))(v127 + 104))(v76, enum case for Errors.NotFound(_:), v75);
    char v86 = v124;
    (*(void (**)(char *, void *, uint64_t))(v77 + 16))(v124, v76, v75);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v87, v86, v75);
    double v80 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v128 + 16))(v128, 0, v80);

    goto LABEL_25;
  }
  sub_100199524(1);
  id v40 = v39;
  uint64_t v41 = v39;
  uint64_t v42 = v40;
  sub_100197C84(v41);

  DockCoreInfo.type.getter();
  uint64_t v43 = DockCoreAccessoryType.rawValue.getter();
  if (v43 == DockCoreAccessoryType.rawValue.getter())
  {
    char v44 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    uint64_t v45 = swift_allocObject();
    *(unsigned char *)(v45 + 16) = 1;
    *(void *)(v45 + 24) = v35;
    *(void *)(v45 + 32) = v42;
    id v46 = v122;
    *(void *)(v45 + 40) = v121;
    *(void *)(v45 + 4_Block_object_dispose(&STACK[0x3D0], 8) = v46;
    id v47 = v35;
    id v48 = v42;
    swift_bridgeObjectRetain();
    unint64_t v49 = v117;
    uint64_t v50 = sub_10019601C(v44, v120, v118, v117, (uint64_t)sub_10011A7E0, v45);
    char v52 = v51;

    swift_release();
    if (v50)
    {
      if (v52)
      {
        id v122 = v33;
        uint64_t v53 = qword_1002A7B60;
        swift_retain();
        uint64_t v54 = v123;
        uint64_t v55 = v15;
        uint64_t v56 = v119;
        if (v53 != -1) {
          swift_once();
        }
        uint64_t v57 = sub_100096F64(v15, (uint64_t)qword_1002A9E40);
        id v58 = v115;
        (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v115, v57, v15);
        id v59 = v48;
        swift_bridgeObjectRetain_n();
        id v60 = v59;
        unint64_t v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v63 = swift_slowAlloc();
          uint64_t v127 = v50;
          uint64_t v64 = v63;
          id v65 = (void *)swift_slowAlloc();
          uint64_t v130 = swift_slowAlloc();
          *(_DWORD *)uint64_t v64 = 138412802;
          uint64_t v121 = v55;
          uint64_t v66 = dispatch thunk of DockCoreAccessory.info.getter();
          uint64_t v129 = v66;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v65 = v66;

          *(_WORD *)(v64 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v67 = Array.description.getter();
          unint64_t v69 = v68;
          swift_bridgeObjectRelease();
          uint64_t v129 = sub_1000993AC(v67, v69, &v130);
          uint64_t v56 = v119;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v64 + 22) = 1024;
          LODWORD(v129) = v120;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v61, v62, "Animator was started for %@, target %s, owner %d", (uint8_t *)v64, 0x1Cu);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v123 + 8))(v115, v121);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v54 + 8))(v58, v55);
        }
        sub_1000C992C(v116, v56, 0);
        id v33 = v122;
        goto LABEL_39;
      }
      uint64_t v99 = v123;
      if (*(_DWORD *)(v50 + 16) == v120)
      {
        swift_retain();
        sub_1000C992C(v116, v119, 0);
LABEL_39:
        (*(void (**)(uint64_t, uint64_t, void))(v128 + 16))(v128, 1, 0);

        swift_release_n();
        return;
      }
      uint64_t v100 = v15;
      uint64_t v101 = qword_1002A7B60;
      swift_retain();
      if (v101 != -1) {
        swift_once();
      }
      uint64_t v102 = sub_100096F64(v15, (uint64_t)qword_1002A9E40);
      unint64_t v103 = v113;
      (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v113, v102, v100);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      id v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v106 = swift_slowAlloc();
        uint64_t v107 = swift_slowAlloc();
        id v122 = v33;
        uint64_t v130 = v107;
        *(_DWORD *)uint64_t v106 = 136315394;
        uint64_t v121 = v100;
        id v108 = v48;
        uint64_t v109 = *(void *)(v50 + 24);
        unint64_t v110 = *(void *)(v50 + 32);
        swift_bridgeObjectRetain();
        uint64_t v129 = sub_1000993AC(v109, v110, &v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        id v48 = v108;
        swift_bridgeObjectRelease();
        *(_WORD *)(v106 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v129 = sub_1000993AC(v118, v49, &v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "animator owned by %s, rejecting request from %s", (uint8_t *)v106, 0x16u);
        swift_arrayDestroy();
        id v33 = v122;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v123 + 8))(v113, v121);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v99 + 8))(v103, v100);
      }
      uint64_t v76 = v125;
      uint64_t v75 = v126;
      void *v125 = 0xD000000000000021;
      v76[1] = 0x8000000100237110;
      uint64_t v77 = v127;
      (*(void (**)(void *, void, uint64_t))(v127 + 104))(v76, enum case for Errors.UnexpectedError(_:), v75);
      uint64_t v111 = v124;
      (*(void (**)(char *, void *, uint64_t))(v77 + 16))(v124, v76, v75);
      sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v112, v111, v75);
      double v80 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void, void *))(v128 + 16))(v128, 0, v80);

      swift_release_n();
    }
    else
    {
      uint64_t v76 = v125;
      uint64_t v75 = v126;
      void *v125 = 0xD000000000000014;
      v76[1] = 0x80000001002370F0;
      uint64_t v77 = v127;
      (*(void (**)(void *, void, uint64_t))(v127 + 104))(v76, enum case for Errors.NotFound(_:), v75);
      uint64_t v97 = v124;
      (*(void (**)(char *, void *, uint64_t))(v77 + 16))(v124, v76, v75);
      sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v98, v97, v75);
      double v80 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void, void *))(v128 + 16))(v128, 0, v80);
    }
LABEL_25:

    (*(void (**)(void *, uint64_t))(v77 + 8))(v76, v75);
    swift_errorRelease();
    return;
  }
  type metadata accessor for DockCoreManager();
  if ((static DockCoreManager.debugAllowed.getter() & 1) == 0
    || (DockCoreInfo.type.getter(),
        uint64_t v88 = DockCoreAccessoryType.rawValue.getter(),
        v88 != DockCoreAccessoryType.rawValue.getter()))
  {
    uint64_t v76 = v125;
    uint64_t v75 = v126;
    void *v125 = 0x6C706D6920746F6ELL;
    v76[1] = 0xEF6465746E656D65;
    uint64_t v77 = v127;
    (*(void (**)(void *, void, uint64_t))(v127 + 104))(v76, enum case for Errors.OperationNotSupported(_:), v75);
    uint64_t v95 = v124;
    (*(void (**)(char *, void *, uint64_t))(v77 + 16))(v124, v76, v75);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v77 + 32))(v96, v95, v75);
    double v80 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v128 + 16))(v128, 0, v80);

    goto LABEL_25;
  }
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v89 = sub_100096F64(v15, (uint64_t)qword_1002A9E40);
  uint64_t v90 = v123;
  uint64_t v91 = v114;
  (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v114, v89, v38);
  uint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "setActuatorVelocities: noop for mock device", v94, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v38);
  (*(void (**)(uint64_t, uint64_t, void))(v128 + 16))(v128, 1, 0);
}

void sub_100119624(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  id v122 = a8;
  uint64_t v123 = a4;
  uint64_t v119 = a7;
  uint64_t v124 = a5;
  id v125 = a6;
  uint64_t v121 = a3;
  int v120 = a2;
  uint64_t v9 = type metadata accessor for Errors();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v128 = v9;
  uint64_t v129 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v127 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v115 - v13);
  uint64_t v130 = type metadata accessor for Logger();
  uint64_t v126 = *(void *)(v130 - 8);
  uint64_t v15 = __chkstk_darwin(v130);
  uint64_t v17 = (char *)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v117 = (char *)&v115 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v116 = (char *)&v115 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v118 = (char *)&v115 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v115 - v24;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v26 = qword_1002B1628;
  uint64_t v27 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v28 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v28 + 4);
  swift_release();
  uint64_t v29 = *(void **)(v26 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v30 = *(os_unfair_lock_s **)(v26 + v27);
  id v31 = v29;
  swift_retain();
  os_unfair_lock_unlock(v30 + 4);
  swift_release();
  if (!v29) {
    goto LABEL_14;
  }
  id v32 = (char *)v31;
  uint64_t v33 = dispatch thunk of DockCoreAccessory.info.getter();

  type metadata accessor for DockCoreInfo();
  id v34 = a1;
  id v35 = (id)v33;
  LOBYTE(v33) = static NSObject.== infix(_:_:)();

  if ((v33 & 1) == 0)
  {
LABEL_14:
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v69 = v130;
    uint64_t v70 = sub_100096F64(v130, (uint64_t)qword_1002A9E40);
    uint64_t v71 = v126;
    (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v25, v70, v69);
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "No such connected accessory, not setting velocity", v74, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v25, v69);
    void *v14 = 0xD000000000000016;
    v14[1] = 0x80000001002370B0;
    uint64_t v76 = v128;
    uint64_t v75 = v129;
    (*(void (**)(void *, void, uint64_t))(v129 + 104))(v14, enum case for Errors.OperationNotSupported(_:), v128);
    uint64_t v77 = v127;
    (*(void (**)(char *, void *, uint64_t))(v75 + 16))(v127, v14, v76);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v78, v77, v76);
    uint64_t v79 = (void *)_convertErrorToNSError(_:)();
    sub_1001CE850(0, v79);

    goto LABEL_25;
  }
  sub_1001891D0(v34);
  uint64_t v37 = v130;
  if (!v36) {
    goto LABEL_20;
  }
  uint64_t v38 = v36;
  type metadata accessor for ActuationController();
  if ((dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)() & 1) == 0)
  {

LABEL_20:
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v80 = sub_100096F64(v37, (uint64_t)qword_1002A9E40);
    uint64_t v81 = v126;
    (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v17, v80, v37);
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v82, v83))
    {
      os_log_type_t v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Failed to find valid accessory with actuation controller.", v84, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v81 + 8))(v17, v37);
    void *v14 = 0xD000000000000015;
    v14[1] = 0x80000001002370D0;
    uint64_t v76 = v128;
    uint64_t v75 = v129;
    (*(void (**)(void *, void, uint64_t))(v129 + 104))(v14, enum case for Errors.NotFound(_:), v128);
    id v85 = v127;
    (*(void (**)(char *, void *, uint64_t))(v75 + 16))(v127, v14, v76);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v86, v85, v76);
    uint64_t v79 = (void *)_convertErrorToNSError(_:)();
    sub_1001CE850(0, v79);

    goto LABEL_25;
  }
  sub_100199524(1);
  id v39 = v38;
  sub_100197C84(v38);

  DockCoreInfo.type.getter();
  uint64_t v40 = DockCoreAccessoryType.rawValue.getter();
  if (v40 == DockCoreAccessoryType.rawValue.getter())
  {
    uint64_t v117 = v32;
    uint64_t v41 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
    uint64_t v42 = swift_allocObject();
    *(unsigned char *)(v42 + 16) = 1;
    *(void *)(v42 + 24) = v34;
    *(void *)(v42 + 32) = v39;
    id v43 = v125;
    *(void *)(v42 + 40) = v124;
    *(void *)(v42 + 4_Block_object_dispose(&STACK[0x3D0], 8) = v43;
    id v44 = v34;
    id v45 = v39;
    swift_bridgeObjectRetain();
    int v46 = v120;
    uint64_t v47 = sub_10019601C(v41, v120, v121, v123, (uint64_t)sub_10011A7E0, v42);
    char v49 = v48;

    swift_release();
    if (v47)
    {
      id v125 = v45;
      uint64_t v50 = v117;
      if (v49)
      {
        uint64_t v51 = qword_1002A7B60;
        swift_retain();
        uint64_t v52 = v130;
        uint64_t v53 = v122;
        if (v51 != -1) {
          swift_once();
        }
        uint64_t v54 = sub_100096F64(v52, (uint64_t)qword_1002A9E40);
        uint64_t v55 = v126;
        uint64_t v56 = v118;
        (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v118, v54, v52);
        id v57 = v125;
        swift_bridgeObjectRetain_n();
        id v58 = v57;
        id v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.default.getter();
        int v61 = v60;
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v62 = swift_slowAlloc();
          LODWORD(v12_Block_object_dispose(&STACK[0x3D0], 8) = v61;
          uint64_t v63 = v62;
          uint64_t v64 = (char *)swift_slowAlloc();
          uint64_t v127 = v64;
          uint64_t v129 = swift_slowAlloc();
          uint64_t v132 = v129;
          *(_DWORD *)uint64_t v63 = 138412802;
          uint64_t v65 = dispatch thunk of DockCoreAccessory.info.getter();
          uint64_t v131 = v65;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(void *)uint64_t v64 = v65;

          *(_WORD *)(v63 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v66 = Array.description.getter();
          LODWORD(v64) = v46;
          unint64_t v68 = v67;
          swift_bridgeObjectRelease();
          uint64_t v131 = sub_1000993AC(v66, v68, &v132);
          uint64_t v53 = v122;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v63 + 22) = 1024;
          LODWORD(v131) = v64;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v128, "Animator was started for %@, target %s, owner %d", (uint8_t *)v63, 0x1Cu);
          sub_1000992E8(&qword_1002A7C40);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v55 + 8))(v118, v130);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v52);
        }
        sub_1000C992C(v119, v53, 0);

        goto LABEL_40;
      }
      uint64_t v99 = v130;
      if (*(_DWORD *)(v47 + 16) == v46)
      {
        swift_retain();
        sub_1000C992C(v119, v122, 0);

LABEL_40:
        swift_release_n();
        return;
      }
      uint64_t v100 = qword_1002A7B60;
      swift_retain();
      if (v100 != -1) {
        swift_once();
      }
      uint64_t v101 = sub_100096F64(v99, (uint64_t)qword_1002A9E40);
      uint64_t v102 = v126;
      unint64_t v103 = v116;
      (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v116, v101, v99);
      swift_retain_n();
      unint64_t v104 = v123;
      swift_bridgeObjectRetain_n();
      os_log_type_t v105 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v105, v106))
      {
        uint64_t v107 = swift_slowAlloc();
        uint64_t v124 = swift_slowAlloc();
        uint64_t v132 = v124;
        *(_DWORD *)uint64_t v107 = 136315394;
        uint64_t v108 = *(void *)(v47 + 24);
        unint64_t v109 = *(void *)(v47 + 32);
        swift_bridgeObjectRetain();
        uint64_t v131 = sub_1000993AC(v108, v109, &v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v107 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v131 = sub_1000993AC(v121, v104, &v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "animator owned by %s, rejecting request from %s", (uint8_t *)v107, 0x16u);
        swift_arrayDestroy();
        uint64_t v50 = v117;
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v102 + 8))(v116, v130);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
        (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v99);
      }
      void *v14 = 0xD000000000000021;
      v14[1] = 0x8000000100237110;
      uint64_t v111 = v128;
      uint64_t v110 = v129;
      (*(void (**)(void *, void, uint64_t))(v129 + 104))(v14, enum case for Errors.UnexpectedError(_:), v128);
      uint64_t v112 = v127;
      (*(void (**)(char *, void *, uint64_t))(v110 + 16))(v127, v14, v111);
      sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v110 + 32))(v113, v112, v111);
      uint64_t v114 = (void *)_convertErrorToNSError(_:)();
      sub_1001CE850(0, v114);

      swift_release_n();
      (*(void (**)(void *, uint64_t))(v110 + 8))(v14, v111);
LABEL_26:
      swift_errorRelease();
      return;
    }
    void *v14 = 0xD000000000000014;
    v14[1] = 0x80000001002370F0;
    uint64_t v76 = v128;
    uint64_t v75 = v129;
    (*(void (**)(void *, void, uint64_t))(v129 + 104))(v14, enum case for Errors.NotFound(_:), v128);
    uint64_t v97 = v127;
    (*(void (**)(char *, void *, uint64_t))(v75 + 16))(v127, v14, v76);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v98, v97, v76);
    uint64_t v79 = (void *)_convertErrorToNSError(_:)();
    sub_1001CE850(0, v79);

LABEL_25:
    (*(void (**)(void *, uint64_t))(v75 + 8))(v14, v76);
    goto LABEL_26;
  }
  type metadata accessor for DockCoreManager();
  if ((static DockCoreManager.debugAllowed.getter() & 1) == 0
    || (DockCoreInfo.type.getter(),
        uint64_t v87 = DockCoreAccessoryType.rawValue.getter(),
        v87 != DockCoreAccessoryType.rawValue.getter()))
  {
    void *v14 = 0x6C706D6920746F6ELL;
    v14[1] = 0xEF6465746E656D65;
    uint64_t v76 = v128;
    uint64_t v75 = v129;
    (*(void (**)(void *, void, uint64_t))(v129 + 104))(v14, enum case for Errors.OperationNotSupported(_:), v128);
    uint64_t v95 = v127;
    (*(void (**)(char *, void *, uint64_t))(v75 + 16))(v127, v14, v76);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v96, v95, v76);
    uint64_t v79 = (void *)_convertErrorToNSError(_:)();
    sub_1001CE850(0, v79);

    goto LABEL_25;
  }
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v88 = v130;
  uint64_t v89 = sub_100096F64(v130, (uint64_t)qword_1002A9E40);
  uint64_t v90 = v126;
  uint64_t v91 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v126 + 16))(v117, v89, v88);
  uint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "setActuatorVelocities: noop for mock device", v94, 2u);
    uint64_t v90 = v126;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v90 + 8))(v91, v88);
}

void sub_10011A7E4(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (**a6)(void, void, void))
{
  uint64_t v121 = a5;
  uint64_t v122 = a4;
  uint64_t v123 = a3;
  uint64_t v119 = a2;
  uint64_t v8 = type metadata accessor for Errors();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v126 = &v111[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v13 = &v111[-v12];
  uint64_t v14 = sub_1000992E8(&qword_1002AA0B0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = &v111[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v124 = v18;
  uint64_t v125 = v19;
  uint64_t v20 = __chkstk_darwin(v18);
  int v120 = &v111[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = __chkstk_darwin(v20);
  os_log_t v118 = (os_log_t)&v111[-v23];
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v117 = &v111[-v25];
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = &v111[-v27];
  __chkstk_darwin(v26);
  uint64_t v30 = &v111[-v29];
  uint64_t v127 = a6;
  _Block_copy(a6);
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v37 = v124;
    uint64_t v38 = sub_100096F64(v124, (uint64_t)qword_1002A9E40);
    uint64_t v39 = v125;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v125 + 16))(v30, v38, v37);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Client doesn't have camera TCC, rejecting XPC message", v42, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v39 + 8))(v30, v37);
    *uint64_t v13 = 0xD000000000000012;
    v13[1] = 0x8000000100237160;
    id v43 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_17;
  }
  if (!a1 || !v123 || !v122 || !v121)
  {
    *uint64_t v13 = 0xD000000000000016;
    v13[1] = 0x8000000100237180;
    id v43 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_17:
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v13, *v43, v8);
    id v44 = v126;
    (*(void (**)(unsigned char *, void *, uint64_t))(v9 + 16))(v126, v13, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(v45, v44, v8);
    int v46 = (void *)_convertErrorToNSError(_:)();
    id v36 = v127;
    ((void (**)(void, void, void *))v127)[2](v127, 0, v46);
LABEL_18:

LABEL_19:
    (*(void (**)(void *, uint64_t))(v9 + 8))(v13, v8);
    swift_errorRelease();
    goto LABEL_20;
  }
  id v31 = self;
  id v32 = a1;
  id v33 = [v31 currentConnection];
  if (!v33)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v47 = v124;
    uint64_t v48 = sub_100096F64(v124, (uint64_t)qword_1002A9E40);
    uint64_t v49 = v125;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v125 + 16))(v28, v48, v47);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Failed fetching current NSXPCConnection, cannot construct client", v52, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v49 + 8))(v28, v47);
    *uint64_t v13 = 0xD000000000000017;
    v13[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v13, enum case for Errors.XPCNil(_:), v8);
    uint64_t v53 = v126;
    (*(void (**)(unsigned char *, void *, uint64_t))(v9 + 16))(v126, v13, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(v54, v53, v8);
    int v46 = (void *)_convertErrorToNSError(_:)();
    id v36 = v127;
    ((void (**)(void, void, void *))v127)[2](v127, 0, v46);

    goto LABEL_18;
  }
  id v34 = v33;
  int v116 = [v33 processIdentifier];
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v35 = qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__manualControlEnabled;
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v17, v35, v14);
  DKThreadSafe.wrappedValue.getter();
  (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v17, v14);
  if (v129)
  {
    id v36 = v127;
    v127[2](v127, 1, 0);

    goto LABEL_20;
  }
  char v55 = sub_1001161DC(v34);
  id v59 = v56;
  if ((v55 & 1) != 0 || v56)
  {
    swift_bridgeObjectRelease();
    id v36 = v127;
    ((void (**)(void, void, void *))v127)[2](v127, 0, v59);

    goto LABEL_20;
  }
  uint64_t v113 = v57;
  unint64_t v114 = v58;
  uint64_t v115 = v32;
  uint64_t v60 = qword_1002B1628;
  uint64_t v61 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v62 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v62 + 4);
  swift_release();
  uint64_t v63 = *(void **)(v60 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v64 = *(os_unfair_lock_s **)(v60 + v61);
  id v65 = v63;
  swift_retain();
  os_unfair_lock_unlock(v64 + 4);
  swift_release();
  if (!v63) {
    goto LABEL_39;
  }
  id v66 = v65;
  unint64_t v67 = (void *)dispatch thunk of DockCoreAccessory.info.getter();

  type metadata accessor for DockCoreInfo();
  unint64_t v68 = v115;
  id v69 = v67;
  char v70 = static NSObject.== infix(_:_:)();

  if ((v70 & 1) == 0)
  {
LABEL_39:
    uint64_t v123 = v65;
    swift_bridgeObjectRelease();
    uint64_t v91 = v125;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v92 = v124;
    uint64_t v93 = sub_100096F64(v124, (uint64_t)qword_1002A9E40);
    uint64_t v94 = v120;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v91 + 16))(v120, v93, v92);
    uint64_t v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v97 = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "No such connected accessory, not setting velocity", v97, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v91 + 8))(v94, v92);
    *uint64_t v13 = 0xD000000000000016;
    v13[1] = 0x80000001002370B0;
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v13, enum case for Errors.OperationNotSupported(_:), v8);
    uint64_t v98 = v126;
    (*(void (**)(unsigned char *, void *, uint64_t))(v9 + 16))(v126, v13, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(v99, v98, v8);
    uint64_t v100 = (void *)_convertErrorToNSError(_:)();
    id v36 = v127;
    ((void (**)(void, void, void *))v127)[2](v127, 0, v100);

    goto LABEL_19;
  }
  int v120 = v66;
  uint64_t v71 = v34;
  uint64_t v115 = v68;
  sub_1001891D0(v68);
  uint64_t v74 = v124;
  uint64_t v73 = v125;
  if (!v72) {
    goto LABEL_45;
  }
  uint64_t v75 = v72;
  type metadata accessor for ActuationController();
  if ((dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)() & 1) == 0)
  {

LABEL_45:
    swift_bridgeObjectRelease();
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v101 = sub_100096F64(v74, (uint64_t)qword_1002A9E40);
    os_log_t v102 = v118;
    (*(void (**)(os_log_t, uint64_t, uint64_t))(v73 + 16))(v118, v101, v74);
    unint64_t v103 = Logger.logObject.getter();
    os_log_type_t v104 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v103, v104))
    {
      os_log_type_t v105 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v105 = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Failed fetching current NSXPCConnection, cannot construct client", v105, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(os_log_t, uint64_t))(v73 + 8))(v102, v74);
    *uint64_t v13 = 0xD000000000000017;
    v13[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v13, enum case for Errors.OperationNotSupported(_:), v8);
    os_log_type_t v106 = v126;
    (*(void (**)(unsigned char *, void *, uint64_t))(v9 + 16))(v126, v13, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(v107, v106, v8);
    uint64_t v108 = (void *)_convertErrorToNSError(_:)();
    id v36 = v127;
    ((void (**)(void, void, void *))v127)[2](v127, 0, v108);

    goto LABEL_19;
  }
  uint64_t v76 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
  uint64_t v77 = sub_1001968A8();

  if (v77)
  {
    uint64_t v78 = *(void *)(v77 + 24);
    unint64_t v79 = *(void *)(v77 + 32);
    swift_bridgeObjectRetain();
    LOBYTE(v7_Block_object_dispose(&STACK[0x3D0], 8) = sub_100114B58(v113, v114, v78, v79, v71);
    swift_bridgeObjectRelease();
    if (v78)
    {
      if (qword_1002A7B60 != -1) {
        swift_once();
      }
      uint64_t v80 = sub_100096F64(v74, (uint64_t)qword_1002A9E40);
      uint64_t v81 = v117;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v73 + 16))(v117, v80, v74);
      unint64_t v82 = v114;
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      os_log_type_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.default.getter();
      int v85 = v84;
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v86 = swift_slowAlloc();
        os_log_t v118 = v83;
        uint64_t v87 = v86;
        uint64_t v126 = (unsigned char *)swift_slowAlloc();
        uint64_t v129 = (uint64_t)v126;
        *(_DWORD *)uint64_t v87 = 136315394;
        int v112 = v85;
        swift_bridgeObjectRetain();
        uint64_t v128 = sub_1000993AC(v113, v82, &v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v87 + 12) = 2080;
        uint64_t v88 = *(void *)(v77 + 24);
        unint64_t v89 = *(void *)(v77 + 32);
        swift_bridgeObjectRetain();
        uint64_t v128 = sub_1000993AC(v88, v89, &v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        os_log_t v90 = v118;
        _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v112, "Foreground app %s force-removing animator for %s", (uint8_t *)v87, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(unsigned char *, uint64_t))(v125 + 8))(v117, v124);
      }
      else
      {

        swift_release_n();
        swift_bridgeObjectRelease_n();
        (*(void (**)(unsigned char *, uint64_t))(v73 + 8))(v81, v74);
      }
      unint64_t v109 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
      sub_1001969C4();
    }
  }
  id v36 = v127;
  _Block_copy(v127);
  uint64_t v110 = v115;
  sub_100118404(v115, v116, v113, v114, v119, v123, v122, v121, (uint64_t)v36);
  _Block_release(v36);

  swift_bridgeObjectRelease();
  swift_release();
LABEL_20:
  _Block_release(v36);
}

void sub_10011B85C(void *a1, uint64_t a2, uint64_t a3, void *a4, void (**a5)(void, void, void))
{
  id v222 = a4;
  uint64_t v232 = a3;
  uint64_t v216 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v228 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v206 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v206 - v11;
  uint64_t v13 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v13 - 8);
  uint64_t v220 = (uint64_t)&v206 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1000992E8((uint64_t *)&unk_1002AA0D0);
  __chkstk_darwin(v15 - 8);
  id v221 = (void (*)(char *, char *, uint64_t))((char *)&v206 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for TrajectoryCommand();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v224 = v17;
  uint64_t v225 = v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v214 = v20;
  long long v215 = (char *)&v206 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v223 = (char *)&v206 - v21;
  uint64_t v22 = type metadata accessor for Errors();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v230 = (char *)&v206 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v231 = (uint64_t *)((char *)&v206 - v26);
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v233 = *(void *)(v27 - 8);
  uint64_t v234 = v27;
  uint64_t v28 = __chkstk_darwin(v27);
  long long v229 = (char *)&v206 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  v213 = (char *)&v206 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  id v218 = (char *)&v206 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v217 = (char *)&v206 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v219 = ((char *)&v206 - v37);
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v226 = (char *)&v206 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v227 = (char *)&v206 - v41;
  __chkstk_darwin(v40);
  id v43 = (char *)&v206 - v42;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = a5;
  _Block_copy(a5);
  if ((sub_1001151B4() & 1) == 0)
  {
    uint64_t v58 = v22;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v59 = v234;
    uint64_t v60 = sub_100096F64(v234, (uint64_t)qword_1002A9E40);
    uint64_t v61 = v233;
    (*(void (**)(char *, uint64_t, uint64_t))(v233 + 16))(v43, v60, v59);
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Client doesn't have camera TCC, rejecting XPC message", v64, 2u);
      uint64_t v59 = v234;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v61 + 8))(v43, v59);
    id v65 = v231;
    *uint64_t v231 = 0xD000000000000012;
    v65[1] = 0x8000000100237160;
    (*(void (**)(void *, void, uint64_t))(v23 + 104))(v65, enum case for Errors.CameraTCCMissing(_:), v58);
    id v66 = v230;
    (*(void (**)(char *, void *, uint64_t))(v23 + 16))(v230, v65, v58);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v67, v66, v58);
    unint64_t v68 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a5)[2](a5, 0, v68);

    (*(void (**)(void *, uint64_t))(v23 + 8))(v65, v58);
    goto LABEL_17;
  }
  if (!a1 || !v232)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100240BE0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v70;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD000000000000012;
    *(void *)(inited + 56) = 0x8000000100234C00;
    sub_1001E9E0C(inited);
    id v71 = objc_allocWithZone((Class)NSError);
    NSString v72 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v74 = [v71 initWithDomain:v72 code:72 userInfo:isa];

    ((void (**)(void, void, id))a5)[2](a5, 0, v74);
    swift_release();
LABEL_41:

    return;
  }
  uint64_t v212 = v22;
  uint64_t v45 = qword_1002A7C00;
  id v235 = a1;
  swift_bridgeObjectRetain();
  if (v45 != -1) {
    swift_once();
  }
  int v46 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v209 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  v210 = v46;
  uint64_t v47 = *(void **)&v46[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v48 = v46;
  id v49 = v47;
  OS_dispatch_semaphore.wait()();

  id v211 = v48;
  uint64_t v50 = &v48[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v51 = *(void *)v50;
  uint64_t v52 = *(void *)(*(void *)v50 + 16);
  if (v52)
  {
    unint64_t v207 = a5;
    uint64_t v208 = v23;
    uint64_t v206 = v44;
    uint64_t v53 = v51 + 32;
    uint64_t v54 = (void (**)(char *, uint64_t))(v228 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v53, (uint64_t)v236);
      id v55 = *(id *)(*sub_1000A5DA4(v236, v236[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v55) = static UUID.== infix(_:_:)();
      uint64_t v56 = *v54;
      (*v54)(v10, v7);
      v56(v12, v7);
      if (v55) {
        break;
      }
      sub_100099BCC((uint64_t)v236);
      v53 += 40;
      if (!--v52)
      {
        swift_bridgeObjectRelease();
        uint64_t v44 = v206;
        a5 = v207;
        uint64_t v23 = v208;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    id v75 = *(id *)&v210[v209];
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v236, (uint64_t)&v237);
    sub_100099BCC((uint64_t)v236);

    uint64_t v44 = v206;
    a5 = v207;
    uint64_t v23 = v208;
  }
  else
  {
LABEL_11:
    id v57 = *(id *)&v210[v209];
    OS_dispatch_semaphore.signal()();

    uint64_t v239 = 0;
    long long v237 = 0u;
    long long v238 = 0u;
  }
  uint64_t v76 = v235;
  uint64_t v77 = v212;
  uint64_t v78 = v233;
  if (!*((void *)&v238 + 1))
  {
    swift_bridgeObjectRelease();
    sub_1000A61E4((uint64_t)&v237, (uint64_t *)&unk_1002AAA30);
LABEL_36:
    uint64_t v93 = v229;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v94 = v234;
    uint64_t v95 = sub_100096F64(v234, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v93, v95, v94);
    os_log_type_t v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v96, v97))
    {
      uint64_t v98 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v98 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "Accessory record not found", v98, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v78 + 8))(v93, v234);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t v99 = swift_initStackObject();
    *(_OWORD *)(v99 + 16) = xmmword_100240BE0;
    *(void *)(v99 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v99 + 40) = v100;
    *(void *)(v99 + 72) = &type metadata for String;
    *(void *)(v99 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD00000000000001ALL;
    *(void *)(v99 + 56) = 0x8000000100234C20;
    sub_1001E9E0C(v99);
    id v101 = objc_allocWithZone((Class)NSError);
    NSString v102 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v103 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v74 = [v101 initWithDomain:v102 code:19 userInfo:v103];

    ((void (**)(void, void, id))a5)[2](a5, 0, v74);
    swift_release();

    goto LABEL_41;
  }
  sub_1000992E8(&qword_1002A82E0);
  type metadata accessor for DaemonAccessory();
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  uint64_t v79 = v236[0];
  if (*(unsigned char *)(v236[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) != 2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v78 = v233;
    goto LABEL_36;
  }
  uint64_t v80 = (char *)[self currentConnection];
  if (!v80)
  {
    swift_bridgeObjectRelease();
    uint64_t v104 = v234;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v105 = sub_100096F64(v104, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v233 + 16))(v227, v105, v104);
    os_log_type_t v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v106, v107))
    {
      uint64_t v108 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v108 = 0;
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "Failed fetching current NgitsSXPCConnection, cannot construct client", v108, 2u);
      uint64_t v104 = v234;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v233 + 8))(v227, v104);
    unint64_t v89 = v231;
    *uint64_t v231 = 0xD000000000000017;
    v89[1] = 0x8000000100235620;
    (*(void (**)(void *, void, uint64_t))(v23 + 104))(v89, enum case for Errors.XPCNil(_:), v77);
    unint64_t v109 = v230;
    (*(void (**)(char *, void *, uint64_t))(v23 + 16))(v230, v89, v77);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v110, v109, v77);
    uint64_t v92 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a5)[2](a5, 0, v92);
    goto LABEL_47;
  }
  long long v229 = v80;
  char v81 = sub_1001161DC(v80);
  os_log_type_t v83 = v82;
  swift_bridgeObjectRelease();
  uint64_t v84 = v234;
  if ((v81 & 1) == 0 && !v83)
  {
    uint64_t v228 = v79;
    if (sub_10019B714([v229 processIdentifier], 0x6A617254646E6573, 0xEE0079726F746365))
    {
      swift_bridgeObjectRelease();
      if (qword_1002A7B60 != -1) {
        swift_once();
      }
      uint64_t v85 = sub_100096F64(v84, (uint64_t)qword_1002A9E40);
      (*(void (**)(char *, uint64_t, uint64_t))(v233 + 16))(v226, v85, v84);
      uint64_t v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v86, v87))
      {
        uint64_t v88 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v88 = 0;
        _os_log_impl((void *)&_mh_execute_header, v86, v87, "Rate limit exceeded for sendTrajectory", v88, 2u);
        uint64_t v77 = v212;
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v233 + 8))(v226, v84);
      unint64_t v89 = v231;
      *uint64_t v231 = 0xD000000000000024;
      v89[1] = 0x8000000100237590;
      (*(void (**)(void *, void, uint64_t))(v23 + 104))(v89, enum case for Errors.rateLimitXPC(_:), v77);
      os_log_t v90 = v230;
      (*(void (**)(char *, void *, uint64_t))(v23 + 16))(v230, v89, v77);
      sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v91, v90, v77);
      uint64_t v92 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void, void *))a5)[2](a5, 0, v92);

      goto LABEL_47;
    }
    sub_1001891D0(v76);
    if (!v111)
    {
      swift_bridgeObjectRelease();
      unint64_t v89 = v231;
      *uint64_t v231 = 0xD000000000000013;
      v89[1] = 0x8000000100237540;
      (*(void (**)(void *, void, uint64_t))(v23 + 104))(v89, enum case for Errors.NotFound(_:), v77);
      uint64_t v121 = v230;
      (*(void (**)(char *, void *, uint64_t))(v23 + 16))(v230, v89, v77);
      sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
      swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v122, v121, v77);
      uint64_t v92 = (void *)_convertErrorToNSError(_:)();
      ((void (**)(void, void, void *))a5)[2](a5, 0, v92);

LABEL_47:
      swift_release();

      (*(void (**)(void *, uint64_t))(v23 + 8))(v89, v77);
      goto LABEL_17;
    }
    uint64_t v227 = v111;
    id v112 = v222;
    uint64_t v113 = (uint64_t)v221;
    TrajectoryCommand.init(nsdata:)();
    uint64_t v114 = v224;
    uint64_t v115 = v225;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v225 + 48))(v113, 1, v224) != 1)
    {
      uint64_t v208 = v23;
      uint64_t v124 = v115 + 32;
      uint64_t v123 = *(void (**)(char *, uint64_t, uint64_t))(v115 + 32);
      v123(v223, v113, v114);
      id v222 = (id)sub_10019AE8C(v229);
      if (v125)
      {
        unint64_t v126 = v125;
        id v221 = (void (*)(char *, char *, uint64_t))v123;
        uint64_t v127 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
        uint64_t v128 = sub_1001968A8();

        uint64_t v129 = v234;
        uint64_t v226 = (char *)v128;
        if (!v128) {
          goto LABEL_68;
        }
        uint64_t v130 = (char *)v128;
        uint64_t v131 = *(void *)(v128 + 24);
        unint64_t v132 = *((void *)v130 + 4);
        swift_bridgeObjectRetain();
        LOBYTE(v131) = sub_100114B58((uint64_t)v222, v126, v131, v132, v229);
        swift_bridgeObjectRelease();
        if (v131)
        {
          if (qword_1002A7B60 != -1) {
            swift_once();
          }
          uint64_t v133 = sub_100096F64(v129, (uint64_t)qword_1002A9E40);
          uint64_t v134 = v233;
          id v135 = v217;
          (*(void (**)(char *, uint64_t, uint64_t))(v233 + 16))(v217, v133, v129);
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          BOOL v136 = Logger.logObject.getter();
          os_log_type_t v137 = static os_log_type_t.default.getter();
          uint64_t v219 = v136;
          LODWORD(v211) = v137;
          if (os_log_type_enabled(v136, v137))
          {
            uint64_t v138 = swift_slowAlloc();
            *(void *)&long long v237 = swift_slowAlloc();
            *(_DWORD *)uint64_t v138 = 136315394;
            swift_bridgeObjectRetain();
            v236[0] = sub_1000993AC((uint64_t)v222, v126, (uint64_t *)&v237);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v138 + 12) = 2080;
            v210 = (char *)(v138 + 14);
            unint64_t v207 = a5;
            uint64_t v139 = *((void *)v130 + 3);
            unint64_t v140 = *((void *)v130 + 4);
            swift_bridgeObjectRetain();
            uint64_t v141 = v139;
            uint64_t v129 = v234;
            v236[0] = sub_1000993AC(v141, v140, (uint64_t *)&v237);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            a5 = v207;
            swift_bridgeObjectRelease();
            unint64_t v142 = v219;
            _os_log_impl((void *)&_mh_execute_header, v219, (os_log_type_t)v211, "Foreground app %s force-removing animator for %s", (uint8_t *)v138, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v233 + 8))(v217, v129);
          }
          else
          {

            swift_release_n();
            swift_bridgeObjectRelease_n();
            (*(void (**)(char *, uint64_t))(v134 + 8))(v135, v129);
          }
          uint64_t v156 = (void *)dispatch thunk of DockCoreAccessory.info.getter();
          sub_1001969C4();

          uint64_t v130 = v226;
        }
        int v157 = *((_DWORD *)v130 + 4);
        if (v157 == [v229 processIdentifier])
        {
LABEL_68:
          swift_bridgeObjectRelease();
          double v158 = v229;
          int v159 = [v229 processIdentifier];
          id v160 = v158;
          char v161 = sub_1001A21B0(v159, v158);

          id v222 = v160;
          if (v161)
          {
            uint64_t v234 = v124;
            sub_100197990();
            uint64_t v162 = v228;
            uint64_t v163 = v225;
            if (v226)
            {
              swift_retain();
              sub_1000CBA6C();
              swift_release();
            }
            uint64_t v164 = type metadata accessor for TaskPriority();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v164 - 8) + 56))(v220, 1, 1, v164);
            uint64_t v165 = v215;
            uint64_t v166 = v224;
            (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v215, v223, v224);
            unint64_t v167 = (*(unsigned __int8 *)(v163 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80);
            unint64_t v168 = (v214 + v167 + 7) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v169 = (v168 + 23) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v170 = (char *)swift_allocObject();
            *((void *)v170 + 2) = 0;
            *((void *)v170 + 3) = 0;
            *((void *)v170 + 4) = v162;
            v221(&v170[v167], v165, v166);
            unint64_t v171 = (uint64_t (**)(char, uint64_t))&v170[v168];
            *unint64_t v171 = sub_100135C04;
            v171[1] = (uint64_t (*)(char, uint64_t))v44;
            uint64_t v172 = v235;
            *(void *)&v170[v169] = v235;
            unint64_t v173 = &v170[(v169 + 15) & 0xFFFFFFFFFFFFFFF8];
            uint64_t v174 = v232;
            *(void *)unint64_t v173 = v216;
            *((void *)v173 + 1) = v174;
            id v175 = v172;
            swift_retain();
            swift_retain();
            sub_1001BC1A8(v220, (uint64_t)&unk_1002AA0E8, (uint64_t)v170);

            swift_release();
            swift_release();

            swift_release();
            (*(void (**)(char *, uint64_t))(v225 + 8))(v223, v166);
            goto LABEL_18;
          }
          swift_bridgeObjectRelease();
          uint64_t v176 = v225;
          if (qword_1002A7B60 != -1) {
            swift_once();
          }
          uint64_t v177 = sub_100096F64(v129, (uint64_t)qword_1002A9E40);
          uint64_t v178 = v233;
          uint64_t v179 = v213;
          (*(void (**)(char *, uint64_t, uint64_t))(v233 + 16))(v213, v177, v129);
          uint64_t v180 = Logger.logObject.getter();
          os_log_type_t v181 = static os_log_type_t.error.getter();
          BOOL v182 = os_log_type_enabled(v180, v181);
          long long v183 = v235;
          if (v182)
          {
            uint64_t v184 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v184 = 0;
            _os_log_impl((void *)&_mh_execute_header, v180, v181, "Failed adding client to client list", v184, 2u);
            uint64_t v129 = v234;
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v178 + 8))(v179, v129);
          uint64_t v185 = v231;
          *uint64_t v231 = 0xD00000000000001CLL;
          v185[1] = 0x80000001002372F0;
          uint64_t v186 = v208;
          uint64_t v187 = v212;
          (*(void (**)(void *, void, uint64_t))(v208 + 104))(v185, enum case for Errors.UnexpectedError(_:), v212);
          uint64_t v188 = v230;
          (*(void (**)(char *, void *, uint64_t))(v186 + 16))(v230, v185, v187);
          sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
          swift_allocError();
          (*(void (**)(uint64_t, char *, uint64_t))(v186 + 32))(v189, v188, v187);
          uint64_t v190 = (void *)_convertErrorToNSError(_:)();
          ((void (**)(void, void, void *))a5)[2](a5, 0, v190);

          swift_release();
          swift_release();
          (*(void (**)(void *, uint64_t))(v186 + 8))(v185, v187);
          (*(void (**)(char *, uint64_t))(v176 + 8))(v223, v224);
LABEL_17:
          swift_errorRelease();
LABEL_18:
          swift_release();
          return;
        }
        swift_bridgeObjectRelease();
        if (qword_1002A7B60 != -1) {
          swift_once();
        }
        uint64_t v191 = sub_100096F64(v129, (uint64_t)qword_1002A9E40);
        uint64_t v192 = v233;
        long long v193 = v218;
        (*(void (**)(char *, uint64_t, uint64_t))(v233 + 16))(v218, v191, v129);
        swift_bridgeObjectRetain();
        swift_retain();
        long long v194 = Logger.logObject.getter();
        os_log_type_t v195 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v194, v195))
        {
          uint64_t v196 = swift_slowAlloc();
          *(void *)&long long v237 = swift_slowAlloc();
          *(_DWORD *)uint64_t v196 = 136315394;
          uint64_t v206 = v44;
          unint64_t v207 = a5;
          uint64_t v197 = *((void *)v226 + 3);
          unint64_t v198 = *((void *)v226 + 4);
          swift_bridgeObjectRetain();
          v236[0] = sub_1000993AC(v197, v198, (uint64_t *)&v237);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          *(_WORD *)(v196 + 12) = 2080;
          swift_bridgeObjectRetain();
          v236[0] = sub_1000993AC((uint64_t)v222, v126, (uint64_t *)&v237);
          a5 = v207;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v194, v195, "animator owned by %s, rejecting request from %s", (uint8_t *)v196, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*(void (**)(char *, uint64_t))(v233 + 8))(v218, v234);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release();
          (*(void (**)(char *, uint64_t))(v192 + 8))(v193, v129);
        }
        uint64_t v199 = v235;
        uint64_t v200 = v231;
        *uint64_t v231 = 0xD000000000000021;
        v200[1] = 0x8000000100237110;
        uint64_t v201 = v208;
        uint64_t v202 = v212;
        (*(void (**)(void *, void, uint64_t))(v208 + 104))(v200, enum case for Errors.UnexpectedError(_:), v212);
        v203 = v230;
        (*(void (**)(char *, void *, uint64_t))(v201 + 16))(v230, v200, v202);
        sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v201 + 32))(v204, v203, v202);
        id v205 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, void, void *))a5)[2](a5, 0, v205);

        swift_release();
        swift_release();

        (*(void (**)(void *, uint64_t))(v201 + 8))(v200, v202);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v143 = v208;
        uint64_t v144 = v234;
        if (qword_1002A7B60 != -1) {
          swift_once();
        }
        uint64_t v145 = sub_100096F64(v144, (uint64_t)qword_1002A9E40);
        id v146 = v219;
        (*(void (**)(NSObject *, uint64_t, uint64_t))(v233 + 16))(v219, v145, v144);
        id v147 = Logger.logObject.getter();
        os_log_type_t v148 = static os_log_type_t.error.getter();
        BOOL v149 = os_log_type_enabled(v147, v148);
        id v150 = v235;
        if (v149)
        {
          uint64_t v151 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v151 = 0;
          _os_log_impl((void *)&_mh_execute_header, v147, v148, "Failed fetching App ID from connection", v151, 2u);
          uint64_t v77 = v212;
          swift_slowDealloc();
        }

        (*(void (**)(NSObject *, uint64_t))(v233 + 8))(v146, v234);
        uint64_t v152 = v231;
        *uint64_t v231 = 0xD000000000000026;
        v152[1] = 0x8000000100235640;
        (*(void (**)(void *, void, uint64_t))(v143 + 104))(v152, enum case for Errors.NotFound(_:), v77);
        uint64_t v153 = v230;
        (*(void (**)(char *, void *, uint64_t))(v143 + 16))(v230, v152, v77);
        sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v143 + 32))(v154, v153, v77);
        uint64_t v155 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, void, void *))a5)[2](a5, 0, v155);

        swift_release();
        (*(void (**)(void *, uint64_t))(v143 + 8))(v152, v77);
      }
      (*(void (**)(char *, uint64_t))(v225 + 8))(v223, v224);
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
    sub_1000A61E4(v113, (uint64_t *)&unk_1002AA0D0);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000992E8((uint64_t *)&unk_1002A82D0);
    uint64_t v116 = swift_initStackObject();
    *(_OWORD *)(v116 + 16) = xmmword_100240BE0;
    *(void *)(v116 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v116 + 40) = v117;
    *(void *)(v116 + 72) = &type metadata for String;
    *(void *)(v116 + 4_Block_object_dispose(&STACK[0x3D0], 8) = 0xD000000000000020;
    *(void *)(v116 + 56) = 0x8000000100237560;
    sub_1001E9E0C(v116);
    id v118 = objc_allocWithZone((Class)NSError);
    NSString v119 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v120 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v74 = [v118 initWithDomain:v119 code:19 userInfo:v120];

    ((void (**)(void, void, id))a5)[2](a5, 0, v74);
    swift_release();

    swift_release();
    goto LABEL_41;
  }
  swift_bridgeObjectRelease();
  ((void (**)(void, void, void *))a5)[2](a5, 0, v83);
  swift_release();

  swift_release();
}

void sub_10011D9C8(void *a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v118 = a2;
  uint64_t v123 = a1;
  uint64_t v4 = type metadata accessor for Errors();
  unint64_t v126 = *(char **)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v124 = (char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v125 = (uint64_t *)((char *)&v115 - v7);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v120 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v115 - v12;
  uint64_t v14 = sub_1000992E8(&qword_1002A8800);
  __chkstk_darwin(v14 - 8);
  uint64_t v117 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v127 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v122 = (uint64_t *)((char *)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v115 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v115 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v115 - v25;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = a3;
  _Block_copy(a3);
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v51 = sub_100096F64(v16, (uint64_t)qword_1002A9E40);
    uint64_t v52 = v127;
    (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v26, v51, v16);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      id v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Client doesn't have camera TCC, rejecting XPC message", v55, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v52 + 8))(v26, v16);
    id v57 = v125;
    uint64_t v56 = v126;
    void *v125 = 0xD000000000000012;
    v57[1] = 0x8000000100237160;
    (*((void (**)(void *, void, uint64_t))v56 + 13))(v57, enum case for Errors.CameraTCCMissing(_:), v4);
    uint64_t v58 = v124;
    (*((void (**)(char *, void *, uint64_t))v56 + 2))(v124, v57, v4);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*((void (**)(uint64_t, char *, uint64_t))v56 + 4))(v59, v58, v4);
    uint64_t v60 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v60);

    (*((void (**)(void *, uint64_t))v56 + 1))(v57, v4);
    goto LABEL_19;
  }
  uint64_t v115 = v4;
  uint64_t v121 = v16;
  NSString v119 = a3;
  uint64_t v116 = v27;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  uint64_t v28 = qword_1002B1628;
  uint64_t v29 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock;
  uint64_t v30 = *(os_unfair_lock_s **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__dbLock);
  swift_retain();
  os_unfair_lock_lock(v30 + 4);
  swift_release();
  uint64_t v31 = *(void **)(v28 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_connected);
  uint64_t v32 = *(os_unfair_lock_s **)(v28 + v29);
  id v33 = v31;
  swift_retain();
  os_unfair_lock_unlock(v32 + 4);
  swift_release();
  if (!v31)
  {
    uint64_t v61 = v119;
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v62 = v121;
    uint64_t v63 = sub_100096F64(v121, (uint64_t)qword_1002A9E40);
    uint64_t v64 = v127;
    (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v24, v63, v62);
    id v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "No accessory connected. Cannot initiate accessory diagnostics", v67, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v64 + 8))(v24, v62);
    id v69 = v125;
    unint64_t v68 = v126;
    void *v125 = 0xD000000000000016;
    v69[1] = 0x8000000100234C90;
    uint64_t v70 = v115;
    (*((void (**)(void *, void, uint64_t))v68 + 13))(v69, enum case for Errors.AccessoryNotReachable(_:), v115);
    id v71 = v124;
    (*((void (**)(char *, void *, uint64_t))v68 + 2))(v124, v69, v70);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*((void (**)(uint64_t, char *, uint64_t))v68 + 4))(v72, v71, v70);
    uint64_t v73 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))v61)[2](v61, 0, v73);

    (*((void (**)(void *, uint64_t))v68 + 1))(v69, v70);
    swift_errorRelease();
    swift_release();
    return;
  }
  id v128 = (id)dispatch thunk of DockCoreAccessory.info.getter();

  uint64_t v34 = v123;
  if (v123)
  {
    type metadata accessor for DockCoreInfo();
    id v35 = v34;
    char v36 = static NSObject.== infix(_:_:)();
    uint64_t v37 = v121;
    if (v36)
    {

      goto LABEL_8;
    }
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v74 = sub_100096F64(v37, (uint64_t)qword_1002A9E40);
    uint64_t v75 = v127;
    (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v21, v74, v37);
    uint64_t v76 = v35;
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    BOOL v79 = os_log_type_enabled(v77, v78);
    uint64_t v80 = v119;
    if (v79)
    {
      char v81 = (uint8_t *)swift_slowAlloc();
      uint64_t v122 = (void *)swift_slowAlloc();
      *(_DWORD *)char v81 = 138412290;
      *(void *)&long long v130 = v76;
      unint64_t v82 = v76;
      os_log_type_t v83 = v76;
      uint64_t v37 = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v122 = v34;

      uint64_t v76 = v82;
      uint64_t v80 = v119;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "%@ is not connected", v81, 0xCu);
      sub_1000992E8(&qword_1002A7C40);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v75 = v127;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v77 = v76;
    }

    (*(void (**)(char *, uint64_t))(v75 + 8))(v21, v37);
    *(void *)&long long v130 = 0;
    *((void *)&v130 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    id v102 = [v76 description];
    uint64_t v103 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v104 = v76;
    uint64_t v106 = v105;
    swift_bridgeObjectRelease();

    *(void *)&long long v130 = v103;
    *((void *)&v130 + 1) = v106;
    v107._object = (void *)0x8000000100234CE0;
    v107._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v107);
    uint64_t v108 = *((void *)&v130 + 1);
    uint64_t v110 = v125;
    unint64_t v109 = v126;
    void *v125 = v130;
    v110[1] = v108;
    uint64_t v111 = v115;
    (*((void (**)(void *, void, uint64_t))v109 + 13))(v110, enum case for Errors.AccessoryNotReachable(_:), v115);
    id v112 = v124;
    (*((void (**)(char *, void *, uint64_t))v109 + 2))(v124, v110, v111);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*((void (**)(uint64_t, char *, uint64_t))v109 + 4))(v113, v112, v111);
    uint64_t v114 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))v80)[2](v80, 0, v114);

    (*((void (**)(void *, uint64_t))v109 + 1))(v110, v111);
LABEL_19:
    swift_errorRelease();
    swift_release();
    return;
  }
LABEL_8:
  uint64_t v38 = *(char **)(qword_1002B1628 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_manager);
  uint64_t v39 = OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem;
  uint64_t v40 = *(void **)&v38[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessorySem];
  uint64_t v41 = v38;
  id v42 = v40;
  OS_dispatch_semaphore.wait()();

  id v43 = &v41[OBJC_IVAR____TtC14dockaccessoryd16AccessoryManager_accessories];
  swift_beginAccess();
  uint64_t v44 = *(void *)v43;
  uint64_t v45 = *(void *)(*(void *)v43 + 16);
  if (v45)
  {
    unint64_t v125 = (void *)v39;
    unint64_t v126 = v41;
    uint64_t v46 = v44 + 32;
    uint64_t v47 = (void (**)(char *, uint64_t))(v120 + 8);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000A5D40(v46, (uint64_t)v129);
      id v48 = *(id *)(*sub_1000A5DA4(v129, v129[3]) + 24);
      DockCoreInfo.identifier.getter();

      DockCoreInfo.identifier.getter();
      LOBYTE(v4_Block_object_dispose(&STACK[0x3D0], 8) = static UUID.== infix(_:_:)();
      id v49 = *v47;
      (*v47)(v11, v8);
      v49(v13, v8);
      if (v48) {
        break;
      }
      sub_100099BCC((uint64_t)v129);
      v46 += 40;
      if (!--v45)
      {
        swift_bridgeObjectRelease();
        uint64_t v39 = (uint64_t)v125;
        uint64_t v41 = v126;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    id v84 = *(id *)((char *)v125 + (void)v38);
    OS_dispatch_semaphore.signal()();

    sub_1000A5D40((uint64_t)v129, (uint64_t)&v130);
    sub_100099BCC((uint64_t)v129);
  }
  else
  {
LABEL_13:
    id v50 = *(id *)&v38[v39];
    OS_dispatch_semaphore.signal()();

    uint64_t v132 = 0;
    long long v130 = 0u;
    long long v131 = 0u;
  }
  uint64_t v85 = v116;
  uint64_t v86 = v119;
  uint64_t v87 = v121;
  uint64_t v88 = v122;
  uint64_t v89 = v127;
  if (*((void *)&v131 + 1))
  {
    sub_1000992E8(&qword_1002A82E0);
    type metadata accessor for DaemonAccessory();
    if (swift_dynamicCast())
    {
      uint64_t v90 = v129[0];
      if (*(unsigned char *)(v129[0] + OBJC_IVAR____TtC14dockaccessoryd15DaemonAccessory_paired) == 2
        && (uint64_t v91 = *(char **)(v129[0] + 16)) != 0
        && (uint64_t v92 = *(void **)&v91[OBJC_IVAR____TtC14dockaccessoryd8BTDevice_peripheral]) != 0)
      {
        uint64_t v93 = v91;
        if ([v92 state] == (id)2)
        {
          sub_1000A9C64();
          uint64_t v94 = type metadata accessor for TaskPriority();
          uint64_t v95 = (uint64_t)v117;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56))(v117, 1, 1, v94);
          os_log_type_t v96 = (void *)swift_allocObject();
          v96[2] = 0;
          v96[3] = 0;
          v96[4] = v90;
          v96[5] = sub_1001356F4;
          uint64_t v97 = v118;
          v96[6] = v85;
          uint64_t v96[7] = v97;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          sub_1001BC1A8(v95, (uint64_t)&unk_1002AA0C8, (uint64_t)v96);
          swift_release();

          swift_release();
          swift_release();
          return;
        }
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
  }
  else
  {
    sub_1000A61E4((uint64_t)&v130, (uint64_t *)&unk_1002AAA30);
  }
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v98 = sub_100096F64(v87, (uint64_t)qword_1002A9E40);
  (*(void (**)(void *, uint64_t, uint64_t))(v89 + 16))(v88, v98, v87);
  uint64_t v99 = Logger.logObject.getter();
  os_log_type_t v100 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v99, v100))
  {
    id v101 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v101 = 0;
    _os_log_impl((void *)&_mh_execute_header, v99, v100, "accessory does not exist and/or is not paired ", v101, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(void *, uint64_t))(v89 + 8))(v88, v87);
  v86[2](v86, 0, 0);
  swift_release();
}

void sub_10011E9A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v96 = a5;
  uint64_t v97 = a2;
  uint64_t v98 = a4;
  uint64_t v99 = a3;
  uint64_t v8 = type metadata accessor for Errors();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  os_log_type_t v100 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v80 - v12);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v95 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v80 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v80 - v22;
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v80 - v24;
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v51 = sub_100096F64(v14, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v25, v51, v14);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      os_log_type_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Client doesn't have camera TCC, rejecting XPC message", v54, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v25, v14);
    *uint64_t v13 = 0xD000000000000012;
    v13[1] = 0x8000000100237160;
    id v55 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_27;
  }
  if (!a1 || !v99 || !v98)
  {
    *uint64_t v13 = 0xD000000000000016;
    v13[1] = 0x8000000100237180;
    id v55 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_27:
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v13, *v55, v8);
    uint64_t v63 = v100;
    (*(void (**)(char *, void *, uint64_t))(v9 + 16))(v100, v13, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v64, v63, v8);
    id v65 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a6 + 16))(a6, 0, v65);
LABEL_28:

    goto LABEL_29;
  }
  id v26 = [self currentConnection];
  if (!v26)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v59 = sub_100096F64(v14, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v23, v59, v14);
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failed fetching current NSXPCConnection, cannot construct client", v62, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v14);
    *uint64_t v13 = 0xD000000000000017;
    v13[1] = 0x8000000100235620;
    id v55 = (unsigned int *)&enum case for Errors.XPCNil(_:);
    goto LABEL_27;
  }
  uint64_t v93 = a6;
  id v94 = v26;
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  sub_1001891D0(a1);
  uint64_t v28 = v27;
  if (!v27
    || (type metadata accessor for SensorController(),
        id v29 = v28,
        char v30 = dispatch thunk of DockCoreAccessory.hasSystem(name:kind:)(),
        v29,
        (v30 & 1) == 0)
    || (id v31 = v29,
        char v32 = dispatch thunk of DockCoreAccessory.hasSystemSensors(name:sensors:)(),
        v31,
        (v32 & 1) == 0))
  {
    *uint64_t v13 = 0xD000000000000011;
    v13[1] = 0x80000001002374D0;
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v13, enum case for Errors.NotFound(_:), v8);
    uint64_t v56 = v100;
    (*(void (**)(char *, void *, uint64_t))(v9 + 16))(v100, v13, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v57, v56, v8);
    uint64_t v58 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v93 + 16))(v93, 0, v58);

LABEL_29:
    (*(void (**)(void *, uint64_t))(v9 + 8))(v13, v8);
    swift_errorRelease();
    return;
  }
  id v91 = v31;
  unsigned int v92 = [v94 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_100096F64(v14, (uint64_t)qword_1002A9E40);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v89 = v33;
  uint64_t v90 = v15 + 16;
  uint64_t v88 = v34;
  ((void (*)(char *))v34)(v20);
  id v35 = a1;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v36 = v35;
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  int v85 = v38;
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v87 = (uint64_t)v36;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc();
    os_log_t v83 = v37;
    uint64_t v41 = v40;
    uint64_t v86 = (void (*)(char *, uint64_t))swift_slowAlloc();
    uint64_t v84 = swift_slowAlloc();
    v102[0] = v84;
    *(_DWORD *)uint64_t v41 = 67110146;
    LODWORD(v101) = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v41 + _Block_object_dispose(&STACK[0x3D0], 8) = 2112;
    uint64_t v81 = v41 + 10;
    uint64_t v80 = v41 + 18;
    uint64_t v101 = (uint64_t)v36;
    id v42 = v36;
    unint64_t v82 = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(void *)uint64_t v86 = a1;

    *(_WORD *)(v41 + 1_Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    unint64_t v43 = v99;
    swift_bridgeObjectRetain();
    uint64_t v101 = sub_1000993AC(v97, v43, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v41 + 2_Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    uint64_t v81 = v41 + 30;
    swift_bridgeObjectRetain();
    uint64_t v44 = Array.description.getter();
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    uint64_t v101 = sub_1000993AC(v44, v46, v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 3_Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    uint64_t v47 = SensorOccurrence.description.getter();
    uint64_t v101 = sub_1000993AC(v47, v48, v102);
    int v49 = v92;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v50 = v83;
    _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v85, "Client %d registering for sensor data %@ %s %s occurrence:%s", (uint8_t *)v41, 0x30u);
    sub_1000992E8(&qword_1002A7C40);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v86 = *(void (**)(char *, uint64_t))(v15 + 8);
    v86(v20, v14);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v86 = *(void (**)(char *, uint64_t))(v15 + 8);
    v86(v20, v14);
    int v49 = v92;
  }
  id v66 = v91;
  id v67 = v94;
  id v68 = v94;
  id v69 = v67;
  uint64_t v70 = v66;
  id v71 = v68;
  char v72 = sub_1001A23DC(v49, v69);

  if ((v72 & 1) == 0)
  {
    v88(v95, v89, v14);
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.error.getter();
    BOOL v75 = os_log_type_enabled(v73, v74);
    uint64_t v76 = v93;
    if (v75)
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "Failed adding client to client list", v77, 2u);
      uint64_t v76 = v93;
      swift_slowDealloc();
    }

    v86(v95, v14);
    *uint64_t v13 = 0xD00000000000001CLL;
    v13[1] = 0x80000001002372F0;
    (*(void (**)(void *, void, uint64_t))(v9 + 104))(v13, enum case for Errors.UnexpectedError(_:), v8);
    os_log_type_t v78 = v100;
    (*(void (**)(char *, void *, uint64_t))(v9 + 16))(v100, v13, v8);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v79, v78, v8);
    id v65 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v76 + 16))(v76, 0, v65);

    goto LABEL_28;
  }
  sub_100193E2C(v49, v87, v97, v99, v98, v96);
  (*(void (**)(uint64_t, uint64_t, void))(v93 + 16))(v93, 1, 0);
}

void sub_10011F688(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v77 = a5;
  uint64_t v74 = a2;
  uint64_t v75 = a3;
  uint64_t v7 = type metadata accessor for Errors();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v76 = (char *)v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v63 - v11);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  char v72 = (char *)v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v73 = (char *)v63 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)v63 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)v63 - v23;
  __chkstk_darwin(v22);
  id v26 = (char *)v63 - v25;
  if ((sub_1001151B4() & 1) == 0)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v39 = sub_100096F64(v13, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v26, v39, v13);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      id v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Client doesn't have camera TCC, rejecting XPC message", v42, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v26, v13);
    void *v12 = 0xD000000000000012;
    v12[1] = 0x8000000100237160;
    unint64_t v43 = (unsigned int *)&enum case for Errors.CameraTCCMissing(_:);
    goto LABEL_21;
  }
  if (!a1 || !v75 || !a4)
  {
    void *v12 = 0xD000000000000016;
    v12[1] = 0x8000000100237180;
    unint64_t v43 = (unsigned int *)&enum case for Errors.NilParams(_:);
LABEL_21:
    (*(void (**)(void *, void, uint64_t))(v8 + 104))(v12, *v43, v7);
    unint64_t v48 = v76;
    (*(void (**)(char *, void *, uint64_t))(v8 + 16))(v76, v12, v7);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v49, v48, v7);
    os_log_t v50 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v77 + 16))(v77, 0, v50);

    goto LABEL_22;
  }
  id v27 = [self currentConnection];
  if (!v27)
  {
    if (qword_1002A7B60 != -1) {
      swift_once();
    }
    uint64_t v44 = sub_100096F64(v13, (uint64_t)qword_1002A9E40);
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v21, v44, v13);
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed fetching current NSXPCConnection, cannot construct client", v47, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
    void *v12 = 0xD000000000000017;
    v12[1] = 0x8000000100235620;
    unint64_t v43 = (unsigned int *)&enum case for Errors.XPCNil(_:);
    goto LABEL_21;
  }
  uint64_t v69 = a1;
  id v70 = v27;
  int v71 = [v27 processIdentifier];
  if (qword_1002A7B60 != -1) {
    swift_once();
  }
  uint64_t v28 = sub_100096F64(v13, (uint64_t)qword_1002A9E40);
  id v29 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v67 = v28;
  uint64_t v68 = v14 + 16;
  id v66 = v29;
  ((void (*)(char *))v29)(v24);
  swift_bridgeObjectRetain_n();
  char v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  int v32 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v33 = swift_slowAlloc();
    os_log_t v64 = v30;
    int v65 = v32;
    uint64_t v34 = v33;
    v63[0] = swift_slowAlloc();
    uint64_t v79 = v63[0];
    *(_DWORD *)uint64_t v34 = 67109378;
    LODWORD(v7_Block_object_dispose(&STACK[0x3D0], 8) = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v34 + _Block_object_dispose(&STACK[0x3D0], 8) = 2080;
    v63[1] = v34 + 10;
    swift_bridgeObjectRetain();
    uint64_t v35 = Array.description.getter();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    uint64_t v78 = sub_1000993AC(v35, v37, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v38 = v64;
    _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v65, "Client %d stopping sensor events for %s", (uint8_t *)v34, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v51 = *(void (**)(char *, uint64_t))(v14 + 8);
  v51(v24, v13);
  if (qword_1002A7C00 != -1) {
    swift_once();
  }
  if (!sub_1001940D0(v71, v69, v74, v75, a4))
  {
    v66(v73, v67, v13);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      os_log_type_t v54 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v54 = 67109120;
      LODWORD(v79) = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Client %d stopping sensor events", v54, 8u);
      swift_slowDealloc();
    }

    v51(v73, v13);
    id v55 = v70;
    char v56 = sub_1001A2488(v71);

    if (v56) {
      goto LABEL_31;
    }
    v66(v72, v67, v13);
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Failed removing client from list", v59, 2u);
      swift_slowDealloc();
    }

    v51(v72, v13);
    void *v12 = 0xD000000000000020;
    v12[1] = 0x80000001002371A0;
    (*(void (**)(void *, void, uint64_t))(v8 + 104))(v12, enum case for Errors.UnexpectedError(_:), v7);
    uint64_t v60 = v76;
    (*(void (**)(char *, void *, uint64_t))(v8 + 16))(v76, v12, v7);
    sub_100135BB4((unint64_t *)&qword_1002A87F0, (void (*)(uint64_t))&type metadata accessor for Errors);
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v61, v60, v7);
    uint64_t v62 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v77 + 16))(v77, 0, v62);

LABEL_22:
    (*(void (**)(void *, uint64_t))(v8 + 8))(v12, v7);
    swift_errorRelease();
    return;
  }
  swift_bridgeObjectRelease();
LABEL_31:
  (*(void (**)(uint64_t, uint64_t, void))(v77 + 16))(v77, 1, 0);
}

uint64_t sub_100120120(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v98 = a5;
  uint64_t v106 = a3;
  Swift::String v107 = a4;
  uint64_t v105 = a2;
  uint64_t v110 = a1;
  uint64_t v95 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v97 = (char *)v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for DispatchWorkItemFlags();
  os_log_t v104 = *(os_log_t *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v90 = (char *)v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for DispatchQoS();
  os_log_t v8 = *(os_log_t *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v96 = (char *)v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1002A7C00 != -1) {
LABEL_50:
  }
    swift_once();
  uint64_t v10 = qword_1002B1628;
  sub_1001FBB80((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v11 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  uint64_t v12 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v12 + 4);
  swift_release();
  uint64_t v13 = (uint64_t *)(v10 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClientsRules);
  swift_beginAccess();
  uint64_t v14 = *v13;
  uint64_t v15 = *(os_unfair_lock_s **)(v10 + v11);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v15 + 4);
  swift_release();
  uint64_t v16 = qword_1002B1628;
  sub_1001FB9A0((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  uint64_t v17 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock;
  uint64_t v18 = *(os_unfair_lock_s **)(v16 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__clientLock);
  swift_retain();
  os_unfair_lock_lock(v18 + 4);
  swift_release();
  uint64_t v19 = (uint64_t *)(v16 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__notifySensorClients);
  swift_beginAccess();
  uint64_t v20 = *v19;
  uint64_t v21 = *(os_unfair_lock_s **)(v16 + v17);
  swift_bridgeObjectRetain();
  swift_retain();
  os_unfair_lock_unlock(v21 + 4);
  swift_release();
  int64_t v23 = 0;
  uint64_t v24 = v20 + 64;
  uint64_t v25 = 1 << *(unsigned char *)(v20 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & *(void *)(v20 + 64);
  int64_t v28 = (unint64_t)(v25 + 63) >> 6;
  uint64_t v88 = v112;
  os_log_t v87 = v104 + 1;
  uint64_t v86 = (void (**)(char *, uint64_t))&v8[1];
  uint64_t v93 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  unsigned int v92 = (void (**)(char *, uint64_t))(v5 + 8);
  id v94 = &v114;
  uint64_t v101 = (char *)&type metadata for Any + 8;
  *(void *)&long long v22 = 136315650;
  long long v85 = v22;
  uint64_t v108 = v20 + 64;
  int64_t v109 = v28;
  uint64_t v103 = v20;
  while (1)
  {
    while (v27)
    {
      unint64_t v29 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      unint64_t v30 = v29 | (v23 << 6);
      if (*(void *)(v14 + 16))
      {
LABEL_23:
        int v34 = *(_DWORD *)(*(void *)(v20 + 48) + 4 * v30);
        uint64_t v5 = *(void *)(*(void *)(v20 + 56) + 8 * v30);
        unint64_t v35 = sub_10016DBD8(v34);
        if (v36)
        {
          os_log_t v8 = *(os_log_t *)(*(void *)(v14 + 56) + 8 * v35);
          id v37 = (id)v5;
          swift_bridgeObjectRetain();
          uint64_t v38 = DockCoreInfo.description.getter();
          uint64_t v5 = v39;
          if (!v8[2].isa) {
            goto LABEL_5;
          }
          uint64_t v40 = v38;
          swift_bridgeObjectRetain();
          sub_10016DB60(v40, v5);
          if (v41)
          {
            swift_bridgeObjectRelease();
            if (!v8[2].isa || (unint64_t v42 = sub_10016DB60(v40, v5), (v43 & 1) == 0))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              goto LABEL_40;
            }
            uint64_t v44 = (uint64_t)v8[7].isa + 32 * v42;
            uint64_t v45 = *(void *)(v44 + 8);
            os_log_t v104 = *(os_log_t *)v44;
            os_log_type_t v46 = *(void **)(v44 + 16);
            uint64_t v102 = *(void *)(v44 + 24);
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            os_log_t v8 = v106;
            swift_bridgeObjectRetain();
            uint64_t v47 = v107;
            swift_bridgeObjectRetain();
            uint64_t v5 = sub_100122978((uint64_t)v104, v45, v46, v105, (uint64_t)v8, v47);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v5 & 1) == 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_43;
            }
            os_log_type_t v100 = v45;
            id v99 = v37;
            id v48 = [v99 remoteObjectProxy];
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            sub_1000992E8(&qword_1002AA0B8);
            if (swift_dynamicCast())
            {
              uint64_t v84 = v113;
              uint64_t v49 = qword_1002B1628;
              uint64_t v82 = OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock;
              os_log_t v50 = *(os_unfair_lock_s **)(qword_1002B1628
                                         + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase__txnLock);
              swift_retain();
              os_unfair_lock_lock(v50 + 4);
              swift_release();
              uint64_t v51 = *(void *)(v49 + OBJC_IVAR____TtC14dockaccessoryd21DockAccessoryDatabase_txn);
              uint64_t v52 = v49;
              os_log_t v83 = v46;
              uint64_t v20 = v103;
              if (v51)
              {
                os_log_type_t v53 = *(void **)(v51 + 24);
                if (v53)
                {
                  v112[2] = sub_1000BF168;
                  v112[3] = v51;
                  uint64_t v81 = v49;
                  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
                  aBlock[1] = 1107296256;
                  v112[0] = sub_1001468DC;
                  v112[1] = &unk_100277A48;
                  uint64_t v80 = _Block_copy(aBlock);
                  swift_retain_n();
                  id v79 = v53;
                  static DispatchQoS.unspecified.getter();
                  uint64_t v113 = _swiftEmptyArrayStorage;
                  v78[1] = sub_100135BB4((unint64_t *)&qword_1002A8570, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
                  sub_1000992E8((uint64_t *)&unk_1002A7F60);
                  sub_100099CB8();
                  os_log_type_t v54 = v90;
                  uint64_t v55 = v91;
                  dispatch thunk of SetAlgebra.init<A>(_:)();
                  char v56 = v80;
                  uint64_t v57 = v79;
                  OS_dispatch_queue.async(group:qos:flags:execute:)();
                  _Block_release(v56);

                  ((void (*)(char *, uint64_t))v87->isa)(v54, v55);
                  (*v86)(v96, v89);
                  swift_release();
                  swift_release();
                  uint64_t v52 = v81;
                }
              }
              os_log_type_t v58 = *(os_unfair_lock_s **)(v52 + v82);
              swift_retain();
              os_unfair_lock_unlock(v58 + 4);
              swift_release();
              os_log_t v8 = v84;
              swift_unknownObjectRetain();
              NSString v59 = String._bridgeToObjectiveC()();
              Class isa = Array._bridgeToObjectiveC()().super.isa;
              type metadata accessor for SensorData();
              Class v61 = Array._bridgeToObjectiveC()().super.isa;
              [v8 sensorDataWithInfo:v110 system:v59 sensors:isa data:v61];
              swift_unknownObjectRelease();

              uint64_t v62 = SensorOccurrence.rawValue.getter();
              if (v62 == SensorOccurrence.rawValue.getter())
              {
                uint64_t v63 = v97;
                if (qword_1002A7B60 != -1) {
                  swift_once();
                }
                uint64_t v64 = v95;
                uint64_t v65 = sub_100096F64(v95, (uint64_t)qword_1002A9E40);
                (*v93)(v63, v65, v64);
                os_log_t v8 = v100;
                swift_bridgeObjectRetain_n();
                swift_bridgeObjectRetain_n();
                id v66 = v107;
                swift_bridgeObjectRetain_n();
                uint64_t v67 = Logger.logObject.getter();
                os_log_type_t v68 = static os_log_type_t.default.getter();
                LODWORD(v102) = v68;
                if (os_log_type_enabled(v67, v68))
                {
                  uint64_t v69 = swift_slowAlloc();
                  uint64_t v82 = swift_slowAlloc();
                  aBlock[0] = v82;
                  *(_DWORD *)uint64_t v69 = v85;
                  swift_bridgeObjectRetain();
                  uint64_t v113 = sub_1000993AC((uint64_t)v104, (unint64_t)v8, aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                  *(_WORD *)(v69 + 12) = 2080;
                  swift_bridgeObjectRetain();
                  uint64_t v70 = Array.description.getter();
                  os_log_t v104 = v67;
                  unint64_t v72 = v71;
                  swift_bridgeObjectRelease();
                  uint64_t v113 = sub_1000993AC(v70, v72, aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v69 + 22) = 2080;
                  swift_bridgeObjectRetain();
                  uint64_t v73 = Array.description.getter();
                  unint64_t v75 = v74;
                  swift_bridgeObjectRelease();
                  uint64_t v113 = sub_1000993AC(v73, v75, aBlock);
                  id v66 = v107;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  os_log_t v8 = v104;
                  _os_log_impl((void *)&_mh_execute_header, v104, (os_log_type_t)v102, "Client rule (%s, %s) notified once, removing sensors %s from notification rule", (uint8_t *)v69, 0x20u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  (*v92)(v97, v95);
                }
                else
                {

                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                  (*v92)(v97, v64);
                }
                uint64_t v5 = sub_1001940D0(v34, v110, v105, (uint64_t)v106, v66);
                id v76 = v99;

                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v5 = (uint64_t)v99;

                swift_unknownObjectRelease();
              }
LABEL_40:
              uint64_t v24 = v108;
              int64_t v28 = v109;
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v5 = (uint64_t)v99;

LABEL_43:
              uint64_t v24 = v108;
              int64_t v28 = v109;
              uint64_t v20 = v103;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
LABEL_5:
            swift_bridgeObjectRelease();
            uint64_t v24 = v108;
            swift_bridgeObjectRelease();

            int64_t v28 = v109;
          }
        }
      }
    }
    int64_t v31 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (v31 >= v28) {
      goto LABEL_47;
    }
    unint64_t v32 = *(void *)(v24 + 8 * v31);
    ++v23;
    if (!v32)
    {
      int64_t v23 = v31 + 1;
      if (v31 + 1 >= v28) {
        goto LABEL_47;
      }
      unint64_t v32 = *(void *)(v24 + 8 * v23);
      if (!v32)
      {
        int64_t v23 = v31 + 2;
        if (v31 + 2 >= v28) {
          goto LABEL_47;
        }
        unint64_t v32 = *(void *)(v24 + 8 * v23);
        if (!v32) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v27 = (v32 - 1) & v32;
    unint64_t v30 = __clz(__rbit64(v32)) + (v23 << 6);
    if (*(void *)(v14 + 16)) {
      goto LABEL_23;
    }
  }
  int64_t v33 = v31 + 3;
  if (v33 < v28)
  {
    unint64_t v32 = *(void *)(v24 + 8 * v33);
    if (!v32)
    {
      while (1)
      {
        int64_t v23 = v33 + 1;
        if (__OFADD__(v33, 1)) {
          goto LABEL_49;
        }
        if (v23 >= v28) {
          goto LABEL_47;
        }
        unint64_t v32 = *(void *)(v24 + 8 * v23);
        ++v33;
        if (v32) {
          goto LABEL_22;
        }
      }
    }
    int64_t v23 = v33;
    goto LABEL_22;
  }
LABEL_47:
  swift_bridgeObjectRelease();
  return swift_release();
}