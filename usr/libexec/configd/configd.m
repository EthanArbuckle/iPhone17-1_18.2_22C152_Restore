uint64_t sub_100001280(_DWORD *a1, const __CFDictionary *a2, const __CFArray *a3, const __CFArray *a4)
{
  NSObject *v8;
  int v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  _DWORD v14[2];
  __int16 v15;
  CFIndex v16;
  __int16 v17;
  CFIndex v18;
  __int16 v19;
  CFIndex v20;
  CFRange v21;
  CFRange v22;

  v8 = sub_100006A00();
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (!a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  v10 = a1[10];
  if (!a2)
  {
    Count = 0;
    if (a3) {
      goto LABEL_11;
    }
LABEL_14:
    v12 = 0;
    if (a4) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  Count = CFDictionaryGetCount(a2);
  if (!a3) {
    goto LABEL_14;
  }
LABEL_11:
  v12 = CFArrayGetCount(a3);
  if (a4)
  {
LABEL_12:
    v13 = CFArrayGetCount(a4);
    goto LABEL_16;
  }
LABEL_15:
  v13 = 0;
LABEL_16:
  v14[0] = 67109888;
  v14[1] = v10;
  v15 = 2048;
  v16 = Count;
  v17 = 2048;
  v18 = v12;
  v19 = 2048;
  v20 = v13;
  _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "set m   : %5u : %ld set, %ld remove, %ld notify", (uint8_t *)v14, 0x26u);
  if (a2) {
LABEL_3:
  }
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)sub_10000E768, a1);
LABEL_4:
  if (a3)
  {
    v21.length = CFArrayGetCount(a3);
    v21.location = 0;
    CFArrayApplyFunction(a3, v21, (CFArrayApplierFunction)sub_100001D34, a1);
  }
  if (a4)
  {
    v22.length = CFArrayGetCount(a4);
    v22.location = 0;
    CFArrayApplyFunction(a4, v22, (CFArrayApplierFunction)sub_10000E850, a1);
  }
  sub_100004C70();
  return 0;
}

void sub_100001430(void *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)qword_10007D9C0;
  CFAllocatorRef v3 = CFGetAllocator((CFTypeRef)qword_10007D9C0);
  CFDictionaryRef Copy = CFDictionaryCreateCopy(v3, v2);
  CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)sub_100006434, a1);

  CFRelease(Copy);
}

void sub_1000014D0(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_100005E74((_xpc_connection_s *)object);
  }
  else
  {
    string = (const char *)type;
    if (type == (xpc_type_t)&_xpc_type_error)
    {
      string = xpc_dictionary_get_string(object, _xpc_error_key_description);
      if (object == &_xpc_error_connection_invalid)
      {
        sub_10000620C();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          _os_log_pack_size();
          __error();
          uint64_t v10 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v10 = 136315138;
          *(void *)(v10 + 4) = string;
          __SC_log_send();
        }
        xpc_release(*(xpc_object_t *)(a1 + 32));
      }
      else
      {
        sub_10000620C();
        _SC_syslog_os_log_mapping();
        int v8 = __SC_log_enabled();
        if (object == &_xpc_error_connection_interrupted)
        {
          if (v8)
          {
            _os_log_pack_size();
            __error();
            uint64_t v6 = _os_log_pack_fill();
            int v7 = 136315138;
            goto LABEL_5;
          }
        }
        else if (v8)
        {
          _os_log_pack_size();
          __error();
          uint64_t v9 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v9 = 134218242;
          *(void *)(v9 + 4) = object;
          *(_WORD *)(v9 + 12) = 2080;
          *(void *)(v9 + 14) = string;
          __SC_log_send();
        }
      }
    }
    else
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __error();
        uint64_t v6 = _os_log_pack_fill();
        int v7 = 134217984;
LABEL_5:
        *(_DWORD *)uint64_t v6 = v7;
        *(void *)(v6 + 4) = string;
        __SC_log_send();
      }
    }
  }
}

__CFString *sub_100001828(uint64_t a1)
{
  CFAllocatorRef v2 = CFGetAllocator((CFTypeRef)a1);
  Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<serverSession %p [%p]> {", a1, v2);
  CFStringAppendFormat(Mutable, 0, @"port = 0x%x (%u)", *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 16));
  if (*(void *)(a1 + 40)) {
    CFStringAppendFormat(Mutable, 0, @", name = %@", *(void *)(a1 + 40));
  }
  CFStringAppendFormat(Mutable, 0, @"}");
  return Mutable;
}

void sub_100001900(_xpc_connection_s *a1, xpc_object_t xdict)
{
  int64_t int64 = xpc_dictionary_get_int64(xdict, "request_op");
  if (int64 == 65538)
  {
    sub_10002A810(a1, xdict);
  }
  else
  {
    int64_t v5 = int64;
    if (int64 == 65537)
    {
      sub_100003FBC(a1, xdict);
    }
    else
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6, v7, v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v9 = 134218240;
        *(void *)(v9 + 4) = a1;
        *(_WORD *)(v9 + 12) = 2048;
        *(void *)(v9 + 14) = v5;
        __SC_log_send();
      }
    }
  }
}

void sub_100001AEC(_xpc_connection_s *a1, xpc_object_t xdict)
{
  int64_t int64 = xpc_dictionary_get_int64(xdict, "request_op");
  if (int64 == 131075)
  {
    sub_1000459C8(a1, xdict);
  }
  else
  {
    int64_t v5 = int64;
    if (int64 == 131074)
    {
      sub_100045834(a1, xdict);
    }
    else if (int64 == 131073)
    {
      sub_100001DF8(a1, xdict);
    }
    else
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6, v7, v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v9 = 134218240;
        *(void *)(v9 + 4) = a1;
        *(_WORD *)(v9 + 12) = 2048;
        *(void *)(v9 + 14) = v5;
        __SC_log_send();
      }
    }
  }
}

CFTypeID sub_100001D34(const void *a1, uint64_t a2)
{
  CFTypeID result = CFStringGetTypeID();
  if (a1)
  {
    CFTypeID v5 = result;
    CFTypeID result = CFGetTypeID(a1);
    if (result == v5)
    {
      return sub_1000020A0(a2, a1, 1);
    }
  }
  return result;
}

void sub_100001DF8(_xpc_connection_s *a1, xpc_object_t xdict)
{
  uint64_t v22 = 0;
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v6 = reply;
    CFDataRef v7 = (const __CFData *)sub_100004264((uint64_t)&qword_10007DE10, (uint64_t)a1, &v22);
    string = xpc_dictionary_get_string(xdict, "proc_name");
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      if (string) {
        uint64_t v9 = string;
      }
      else {
        uint64_t v9 = "???";
      }
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10, v11, v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      pid_t pid = xpc_connection_get_pid(a1);
      uint64_t v15 = v22;
      *(_DWORD *)uint64_t v13 = 134218754;
      *(void *)(v13 + 4) = a1;
      *(_WORD *)(v13 + 12) = 2080;
      *(void *)(v13 + 14) = v9;
      *(_WORD *)(v13 + 22) = 1024;
      *(_DWORD *)(v13 + 24) = pid;
      *(_WORD *)(v13 + 28) = 2048;
      *(void *)(v13 + 30) = v15;
      __SC_log_send();
    }
    if (v7)
    {
      BytePtr = CFDataGetBytePtr(v7);
      size_t Length = CFDataGetLength(v7);
      xpc_dictionary_set_data(v6, "configuration", BytePtr, Length);
    }
    xpc_connection_send_message(remote_connection, v6);
    xpc_release(v6);
  }
  else
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v18 = _os_log_pack_size();
      __chkstk_darwin(v18, v19, v20);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 134217984;
      *(void *)(v21 + 4) = a1;
      __SC_log_send();
    }
  }
}

uint64_t sub_1000020A0(uint64_t a1, const void *a2, int a3)
{
  uint64_t v6 = sub_100006A00();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v14 = "*remove";
    int v15 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 136315650;
    if (!a3) {
      v14 = "remove ";
    }
    v17 = v14;
    __int16 v18 = 1024;
    int v19 = v15;
    __int16 v20 = 2112;
    uint64_t v21 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s : %5u : %@", buf, 0x1Cu);
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
  if (!Value) {
    return 1004;
  }
  CFDictionaryRef v8 = Value;
  if (!CFDictionaryContainsKey(Value, @"data")) {
    return 1004;
  }
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, v8);
  CFSetAddValue((CFMutableSetRef)qword_10007D9C8, a2);
  CFSetAddValue((CFMutableSetRef)qword_10007D9D0, a2);
  uint64_t v10 = CFDictionaryGetValue(MutableCopy, @"session");
  if (v10)
  {
    uint64_t v11 = v10;
    CFDictionaryRemoveValue(MutableCopy, @"session");
    CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"%@:%@", v11, a2);
    CFSetAddValue((CFMutableSetRef)qword_10007D9D8, v12);
    CFRelease(v12);
  }
  CFDictionaryRemoveValue(MutableCopy, @"data");
  if (CFDictionaryGetCount(MutableCopy) < 1) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007D9B8, a2);
  }
  else {
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, a2, MutableCopy);
  }
  CFRelease(MutableCopy);
  if (!a3) {
    sub_100004C70();
  }
  return 0;
}

const void *sub_1000022AC(uint64_t a1)
{
  CFTypeID result = CFDictionaryGetValue((CFDictionaryRef)qword_10007DA70, (const void *)*(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_10000231C(mach_port_context_t a1, uint64_t a2)
{
  switch(a2)
  {
    case 13:
      sub_10000B2D8(a1);
      break;
    case 8:
      sub_10000B138(a1);
      break;
    case 2:
      if (dispatch_mach_mig_demux())
      {
        sub_100006B80();
      }
      else
      {
        msg = (mach_msg_header_t *)dispatch_mach_msg_get_msg();
        mach_msg_destroy(msg);
      }
      break;
  }
}

uint64_t sub_10000248C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  CFTypeID result = sub_100002594(*(_DWORD *)(result + 12), *(void *)(result + 28), v3, *(void *)(result + 44), v4, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100002594(int a1, uint64_t a2, int a3, uint64_t a4, int a5, int *a6)
{
  *a6 = 0;
  if (a2 && a3 && !_SCUnserialize())
  {
    *a6 = 1001;
    if (!a4) {
      goto LABEL_7;
    }
  }
  else if (!a4)
  {
    goto LABEL_7;
  }
  if (a5 && !_SCUnserialize())
  {
    int v11 = 1001;
LABEL_14:
    *a6 = v11;
    return 0;
  }
LABEL_7:
  if (!*a6)
  {
    uint64_t v10 = sub_1000047CC(a1);
    if (v10) {
      int v11 = sub_1000026F0(*(void *)(v10 + 56), 0, 0);
    }
    else {
      int v11 = 2001;
    }
    goto LABEL_14;
  }
  return 0;
}

uint64_t sub_1000026F0(uint64_t a1, const __CFArray *a2, const __CFArray *a3)
{
  uint64_t v22 = 0;
  int v6 = sub_100006A00();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    int v16 = *(_DWORD *)(a1 + 40);
    if (a2)
    {
      CFIndex Count = CFArrayGetCount(a2);
      if (a3) {
        goto LABEL_17;
      }
    }
    else
    {
      CFIndex Count = 0;
      if (a3)
      {
LABEL_17:
        CFIndex v18 = CFArrayGetCount(a3);
LABEL_20:
        *(_DWORD *)buf = 67109632;
        int v24 = v16;
        __int16 v25 = 2048;
        CFIndex v26 = Count;
        __int16 v27 = 2048;
        CFIndex v28 = v18;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "watch   : %5u : %ld keys, %ld patterns", buf, 0x1Cu);
        goto LABEL_2;
      }
    }
    CFIndex v18 = 0;
    goto LABEL_20;
  }
LABEL_2:
  HIDWORD(v22) = 0;
  uint64_t v19 = a1;
  CFTypeRef cf = 0;
  CFArrayRef v21 = a2;
  LOBYTE(v22) = 0;
  CFArrayRef v7 = *(const __CFArray **)(a1 + 168);
  if (v7)
  {
    CFTypeRef cf = CFArrayCreateCopy(0, v7);
    CFDictionaryRef v8 = *(const void **)(a1 + 168);
    CFAllocatorRef v9 = CFGetAllocator(v8);
    CFArrayRef Copy = CFArrayCreateCopy(v9, (CFArrayRef)v8);
    v29.length = CFArrayGetCount(Copy);
    v29.location = 0;
    CFArrayApplyFunction(Copy, v29, (CFArrayApplierFunction)sub_10000ED88, &v19);
    CFRelease(Copy);
  }
  if (a2)
  {
    v30.length = CFArrayGetCount(a2);
    v30.location = 0;
    CFArrayApplyFunction(a2, v30, (CFArrayApplierFunction)sub_1000067C0, &v19);
  }
  if (cf) {
    CFRelease(cf);
  }
  CFTypeRef cf = 0;
  CFArrayRef v21 = a3;
  LOBYTE(v22) = 1;
  CFArrayRef v11 = *(const __CFArray **)(a1 + 176);
  if (v11)
  {
    CFTypeRef cf = CFArrayCreateCopy(0, v11);
    CFStringRef v12 = *(const void **)(a1 + 176);
    CFAllocatorRef v13 = CFGetAllocator(v12);
    CFArrayRef v14 = CFArrayCreateCopy(v13, (CFArrayRef)v12);
    v31.length = CFArrayGetCount(v14);
    v31.location = 0;
    CFArrayApplyFunction(v14, v31, (CFArrayApplierFunction)sub_10000ED88, &v19);
    CFRelease(v14);
  }
  if (a3)
  {
    v32.length = CFArrayGetCount(a3);
    v32.location = 0;
    CFArrayApplyFunction(a3, v32, (CFArrayApplierFunction)sub_1000067C0, &v19);
  }
  if (cf) {
    CFRelease(cf);
  }
  return HIDWORD(v22);
}

void sub_100002940(uint64_t a1)
{
  if (!CFDictionaryContainsKey((CFDictionaryRef)qword_10007DA70, (const void *)*(unsigned int *)(a1 + 40)))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = sub_100002A30(0);
    CFAllocatorRef v2 = *(unsigned int **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    if (v2)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DA70, (const void *)v2[4], v2);
      uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      long long v4 = *(_OWORD *)(a1 + 60);
      *(_OWORD *)(v3 + 68) = *(_OWORD *)(a1 + 44);
      *(_OWORD *)(v3 + 84) = v4;
      uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      long long v6 = *(_OWORD *)(v5 + 84);
      *(_OWORD *)v7.val = *(_OWORD *)(v5 + 68);
      *(_OWORD *)&v7.val[4] = v6;
      *(_DWORD *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 64) = audit_token_to_euid(&v7);
      CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    }
  }
}

mach_port_context_t sub_100002A30(mach_port_name_t a1)
{
  kern_return_t v3;
  mach_error_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  kern_return_t inserted;
  mach_error_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v19;
  mach_port_name_t name;
  mach_port_options_t options;

  if (qword_10007DA90 != -1) {
    dispatch_once(&qword_10007DA90, &stru_100075D10);
  }
  mach_port_context_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    if (a1)
    {
LABEL_5:
      *(_DWORD *)(Instance + 64) = 1;
      *(void *)(Instance + 104) = 0;
      *(_DWORD *)(Instance + 16) = a1;
      return Instance;
    }
    *(void *)&options.flags = 1;
    options.8 = 0uLL;
    name = 0;
    uint64_t v3 = mach_port_construct(mach_task_self_, &options, Instance, &name);
    if (v3)
    {
      long long v4 = v3;
      while (1)
      {
        uint64_t v19 = 0;
        sub_100006A00();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v5 = _os_log_pack_size();
          __chkstk_darwin(v5, v6, v7);
          __error();
          CFDictionaryRef v8 = _os_log_pack_fill();
          CFAllocatorRef v9 = mach_error_string(v4);
          *(_DWORD *)CFDictionaryRef v8 = 136315138;
          *(void *)(v8 + 4) = v9;
          __SC_log_send();
        }
        if (v4 == 6 || v4 == 3)
        {
          sleep(1u);
        }
        else
        {
          uint64_t v10 = mach_error_string(v4);
          asprintf(&v19, "Could not allocate mach port: %s", v10);
          _SC_crash();
          if (v19) {
            free(v19);
          }
          CFRelease((CFTypeRef)Instance);
        }
        if (v4 != 6 && v4 != 3) {
          break;
        }
        *(void *)&options.flags = 1;
        options.8 = 0uLL;
        long long v4 = mach_port_construct(mach_task_self_, &options, Instance, &name);
        if (!v4) {
          goto LABEL_19;
        }
      }
    }
    else
    {
LABEL_19:
      inserted = mach_port_insert_right(mach_task_self_, name, name, 0x14u);
      if (!inserted)
      {
        a1 = name;
        goto LABEL_5;
      }
      CFStringRef v12 = inserted;
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        CFAllocatorRef v13 = _os_log_pack_size();
        __chkstk_darwin(v13, v14, v15);
        __error();
        int v16 = _os_log_pack_fill();
        v17 = mach_error_string(v12);
        *(_DWORD *)int v16 = 136315138;
        *(void *)(v16 + 4) = v17;
        __SC_log_send();
      }
      CFRelease((CFTypeRef)Instance);
    }
    return 0;
  }
  return Instance;
}

uint64_t sub_100002D94(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  CFTypeID result = sub_100002EB4(*(_DWORD *)(result + 12), *(void *)(result + 28), *(unsigned int *)(result + 40), (void *)(a2 + 28), (_DWORD *)(a2 + 52), (_DWORD *)(a2 + 56), (int *)(a2 + 60));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 64;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_100002EB4(int a1, uint64_t a2, uint64_t a3, void *a4, _DWORD *a5, _DWORD *a6, int *a7)
{
  uint64_t v20 = 0;
  CFTypeRef cf = 0;
  uint64_t v19 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  if (_SCUnserializeString())
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (cf && CFGetTypeID(cf) == TypeID)
    {
      uint64_t v11 = sub_1000047CC(a1);
      if (v11)
      {
        uint64_t v12 = v11;
        int v13 = sub_10000301C(v11, (void *)cf, 0);
        int v14 = v13;
        if (v13 == 10100 || !v13)
        {
          int v15 = sub_1000037F0(*(void *)(v12 + 56), (void *)cf, 0, &v19, 0);
          *a7 = v15;
          if (v15) {
            goto LABEL_14;
          }
          int v16 = _SCSerializeData();
          v17 = v19;
          *a5 = v20;
          CFRelease(v17);
          if (!v16) {
            int v14 = 1001;
          }
        }
      }
      else
      {
        int v14 = 2001;
      }
    }
    else
    {
      int v14 = 1002;
    }
  }
  else
  {
    int v14 = 1001;
  }
  *a7 = v14;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t sub_10000301C(uint64_t a1, void *a2, const __CFDictionary *a3)
{
  long long v6 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)atoken.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&atoken.val[4] = v6;
  pid_t v7 = audit_token_to_pid(&atoken);
  if (v7 == getpid()) {
    return 0;
  }
  if (a3 || (uint64_t result = (uint64_t)sub_10000555C(a2), (a3 = (const __CFDictionary *)result) != 0))
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a3, @"read-deny");
    if (Value && sub_100003408(a1, Value))
    {
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled()) {
        goto LABEL_14;
      }
      return 1003;
    }
    if (CFDictionaryContainsKey(a3, @"read-deny-background") && &_ba_is_process_extension)
    {
      CFBooleanRef v10 = *(const __CFBoolean **)(a1 + 112);
      if (v10)
      {
        if (CFBooleanGetValue(v10)) {
          goto LABEL_13;
        }
      }
      else
      {
        int is_process_extension = ba_is_process_extension();
        int v16 = &kCFBooleanTrue;
        if (!is_process_extension) {
          int v16 = &kCFBooleanFalse;
        }
        *(CFBooleanRef *)(a1 + 112) = *v16;
        if (is_process_extension)
        {
LABEL_13:
          sub_100006A00();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
LABEL_14:
            uint64_t v11 = _os_log_pack_size();
            __chkstk_darwin(v11, v12, v13);
            __error();
            uint64_t v14 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v14 = 136315650;
            *(void *)(v14 + 4) = "checkReadAccess";
            *(_WORD *)(v14 + 12) = 2112;
            *(void *)(v14 + 14) = a2;
            *(_WORD *)(v14 + 22) = 2112;
            *(void *)(v14 + 24) = a1;
            __SC_log_send();
            return 1003;
          }
          return 1003;
        }
      }
    }
    uint64_t result = (uint64_t)CFDictionaryGetValue(a3, @"read-allow");
    if (result)
    {
      if (sub_100003408(a1, (CFArrayRef)result))
      {
        sub_100006A00();
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (result)
        {
          uint64_t v17 = _os_log_pack_size();
          __chkstk_darwin(v17, v18, v19);
          __error();
          uint64_t v20 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v20 = 136315650;
          *(void *)(v20 + 4) = "checkReadAccess";
          *(_WORD *)(v20 + 12) = 2112;
          *(void *)(v20 + 14) = a2;
          *(_WORD *)(v20 + 22) = 2112;
          *(void *)(v20 + 24) = a1;
          __SC_log_send();
          return 0;
        }
      }
      else
      {
        if (CFDictionaryContainsKey(a3, @"read-allow-system") && sub_10000B608(a1)) {
          return 0;
        }
        int v21 = sub_10000B80C(a1, @"com.apple.SystemConfiguration.SCDynamicStore-read-no-fault");
        if (CFDictionaryContainsKey(a3, @"read-allow-platform") && sub_10000B8C0(a1))
        {
          if (v21) {
            return 0;
          }
          else {
            return 10100;
          }
        }
        else if (v21)
        {
          return 1003;
        }
        else
        {
          return 10003;
        }
      }
    }
  }
  return result;
}

BOOL sub_100003408(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, 0);
  if (sub_1000034E0(a1, ValueAtIndex)) {
    return 1;
  }
  CFIndex v8 = 1;
  do
  {
    CFIndex v9 = v8;
    if (v5 == v8) {
      break;
    }
    CFStringRef v10 = (const __CFString *)CFArrayGetValueAtIndex(theArray, v8);
    CFNullRef v11 = sub_1000034E0(a1, v10);
    CFIndex v8 = v9 + 1;
  }
  while (!v11);
  return v9 < v5;
}

CFNullRef sub_1000034E0(uint64_t a1, const __CFString *key)
{
  CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 104);
  if (v4)
  {
    CFNullRef Value = (const __CFNull *)CFDictionaryGetValue(v4, key);
    if (Value)
    {
      if (Value == kCFNull) {
        return 0;
      }
      else {
        return Value;
      }
    }
  }
  long long v7 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)token.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&token.val[4] = v7;
  CFIndex v8 = SecTaskCreateWithAuditToken(0, &token);
  if (v8)
  {
    CFIndex v9 = v8;
    *(void *)token.val = 0;
    CFTypeRef v6 = SecTaskCopyValueForEntitlement(v8, key, (CFErrorRef *)&token);
    if (!v6 && *(void *)token.val)
    {
      CFIndex Code = CFErrorGetCode(*(CFErrorRef *)token.val);
      CFErrorDomain Domain = CFErrorGetDomain(*(CFErrorRef *)token.val);
      if (!CFEqual(Domain, kCFErrorDomainMach) || Code != -536870911 && Code != -536870160)
      {
        sub_100006A00();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          _os_log_pack_size();
          __chkstk_darwin();
          __error();
          uint64_t v12 = _os_log_pack_fill();
          uint64_t v13 = *(void *)token.val;
          uint64_t v14 = *(void *)(a1 + 40);
          *(_DWORD *)uint64_t v12 = 138412802;
          *(void *)(v12 + 4) = key;
          *(_WORD *)(v12 + 12) = 2112;
          *(void *)(v12 + 14) = v13;
          *(_WORD *)(v12 + 22) = 2112;
          *(void *)(v12 + 24) = v14;
          __SC_log_send();
        }
      }
      CFRelease(*(CFTypeRef *)token.val);
    }
    Mutable = *(__CFDictionary **)(a1 + 104);
    if (Mutable)
    {
      if (v6)
      {
LABEL_17:
        CFDictionarySetValue(Mutable, key, v6);
        CFRelease(v6);
LABEL_23:
        CFRelease(v9);
        return (const __CFNull *)v6;
      }
    }
    else
    {
      Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      *(void *)(a1 + 104) = Mutable;
      if (v6) {
        goto LABEL_17;
      }
    }
    CFDictionarySetValue(Mutable, key, kCFNull);
    goto LABEL_23;
  }
  sub_100006A00();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v16 = _os_log_pack_fill();
    uint64_t v17 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t v16 = 138412290;
    *(void *)(v16 + 4) = v17;
    __SC_log_send();
  }
  return 0;
}

uint64_t sub_1000037F0(uint64_t a1, void *key, void *a3, const void **a4, int a5)
{
  if (!a3)
  {
    CFStringRef v10 = sub_100006A00();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v15 = "*copy  ";
      int v16 = *(_DWORD *)(a1 + 40);
      int v17 = 136315650;
      if (!a5) {
        int v15 = "copy   ";
      }
      uint64_t v18 = v15;
      __int16 v19 = 1024;
      int v20 = v16;
      __int16 v21 = 2112;
      uint64_t v22 = key;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s : %5u : %@", (uint8_t *)&v17, 0x1Cu);
    }
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, key);
  if (!Value) {
    return 1004;
  }
  CFDictionaryRef v12 = Value;
  if (!CFDictionaryGetValueIfPresent(Value, @"data", a4)) {
    return 1004;
  }
  CFRetain(*a4);
  if (!a3) {
    return 0;
  }
  uint64_t v13 = CFDictionaryGetValue(v12, @"access-controls");
  uint64_t result = 0;
  *a3 = v13;
  return result;
}

uint64_t sub_100003950(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v3 = -304;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    int v3 = -300;
    goto LABEL_12;
  }
  if (*(_DWORD *)(result + 76) || *(_DWORD *)(result + 80) <= 0x1Fu)
  {
    int v3 = -309;
LABEL_12:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_13;
  }
  CFDictionaryRef v4 = (int *)(a2 + 28);
  *(void *)(a2 + 32) = 0x11000000000000;
  int v5 = *(_DWORD *)(result + 12);
  uint64_t v6 = *(void *)(result + 28);
  uint64_t v7 = *(unsigned int *)(result + 40);
  uint64_t v8 = *(void *)(result + 44);
  int v9 = *(_DWORD *)(result + 56);
  long long v10 = *(_OWORD *)(result + 112);
  v11[0] = *(_OWORD *)(result + 96);
  v11[1] = v10;
  uint64_t result = sub_100003AB4(v5, v6, v7, v8, v9, v4, (int *)(a2 + 48), v11);
  if (!result)
  {
    *(NDR_record_t *)(a2 + 40) = NDR_record;
    *(_DWORD *)a2 |= 0x80000000;
    *(_DWORD *)(a2 + 4) = 52;
    *(_DWORD *)(a2 + 24) = 1;
    return result;
  }
  *(_DWORD *)(a2 + 32) = result;
LABEL_13:
  *(NDR_record_t *)(a2 + 24) = NDR_record;
  return result;
}

uint64_t sub_100003AB4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int *a6, int *a7, long long *a8)
{
  CFTypeRef v25 = 0;
  *a6 = 0;
  *a7 = 0;
  if (_SCUnserializeString())
  {
    if (!a4) {
      goto LABEL_7;
    }
  }
  else
  {
    *a7 = 1001;
    if (!a4) {
      goto LABEL_7;
    }
  }
  if (a5 && !_SCUnserialize())
  {
LABEL_17:
    int v20 = 1001;
    goto LABEL_18;
  }
LABEL_7:
  if (*a7) {
    return 0;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!v25 || CFGetTypeID(v25) != TypeID)
  {
    int v20 = 1002;
LABEL_18:
    *a7 = v20;
    return 0;
  }
  long long v15 = a8[1];
  v26[0] = *a8;
  v26[1] = v15;
  uint64_t v16 = sub_100003D50(a1, v26);
  if (!v16)
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v21 = _os_log_pack_size();
      __chkstk_darwin(v21, v22, v23);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    goto LABEL_17;
  }
  uint64_t v17 = v16;
  *a6 = *(_DWORD *)(v16 + 16);
  uint64_t v18 = sub_100006A00();
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
    sub_100064E84(a6, (uint64_t *)&v25, v18);
  }
  uint64_t Private = __SCDynamicStoreCreatePrivate();
  *(void *)(v17 + 56) = Private;
  *a7 = 0;
  *(_DWORD *)(Private + 40) = *a6;
  *(void *)(v17 + 40) = v25;
  return 0;
}

uint64_t sub_100003D50(int a1, long long *a2)
{
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2000000000;
  uint64_t v11 = 0;
  if (qword_10007DA80 != -1) {
    dispatch_once(&qword_10007DA80, &stru_100075CD0);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  long long v4 = a2[1];
  long long v14 = *a2;
  block[2] = sub_100002940;
  block[3] = &unk_100075C50;
  int v13 = a1;
  block[4] = &v8;
  long long v15 = v4;
  dispatch_sync((dispatch_queue_t)qword_10007DA88, block);
  uint64_t v5 = v9[3];
  if (v5)
  {
    sub_100003E88(v5, 0);
    uint64_t v6 = v9[3];
  }
  else
  {
    uint64_t v6 = 0;
  }
  _Block_object_dispose(&v8, 8);
  return v6;
}

uint64_t sub_100003E88(uint64_t a1, int a2)
{
  sub_100003F44();
  *(void *)(a1 + 24) = dispatch_mach_create_f();
  if (!a2) {
    dispatch_mach_notify_no_senders();
  }
  dispatch_set_qos_class_fallback();
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(unsigned int *)(a1 + 16);

  return _dispatch_mach_connect(v4, v5, 0, 0);
}

uint64_t sub_100003F44()
{
  if (qword_10007DA50 != -1) {
    dispatch_once(&qword_10007DA50, &stru_100075AC0);
  }
  return qword_10007DA58;
}

void sub_100003FBC(_xpc_connection_s *a1, xpc_object_t xdict)
{
  uint64_t v22 = 0;
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v6 = reply;
    CFDataRef v7 = (const __CFData *)sub_100004264((uint64_t)&qword_10007DBF0, (uint64_t)a1, &v22);
    string = xpc_dictionary_get_string(xdict, "proc_name");
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      if (string) {
        int v9 = string;
      }
      else {
        int v9 = "???";
      }
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10, v11, v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      pid_t pid = xpc_connection_get_pid(a1);
      uint64_t v15 = v22;
      *(_DWORD *)uint64_t v13 = 134218754;
      *(void *)(v13 + 4) = a1;
      *(_WORD *)(v13 + 12) = 2080;
      *(void *)(v13 + 14) = v9;
      *(_WORD *)(v13 + 22) = 1024;
      *(_DWORD *)(v13 + 24) = pid;
      *(_WORD *)(v13 + 28) = 2048;
      *(void *)(v13 + 30) = v15;
      __SC_log_send();
    }
    if (v7)
    {
      BytePtr = CFDataGetBytePtr(v7);
      size_t Length = CFDataGetLength(v7);
      xpc_dictionary_set_data(v6, "configuration", BytePtr, Length);
    }
    xpc_connection_send_message(remote_connection, v6);
    xpc_release(v6);
  }
  else
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v18 = _os_log_pack_size();
      __chkstk_darwin(v18, v19, v20);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 134217984;
      *(void *)(v21 + 4) = a1;
      __SC_log_send();
    }
  }
}

uint64_t sub_100004264(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = a2;
  CFDataRef v5 = CFDataCreate(0, (const UInt8 *)&v10, 8);
  CFDictionaryRef Value = (__CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v5);
  CFRelease(v5);
  MutableBytePtr = CFDataGetMutableBytePtr(Value);
  uint64_t v8 = *(void *)(a1 + 8);
  *((void *)MutableBytePtr + 1) = v8;
  if (v8 == 1) {
    uint64_t v8 = 0;
  }
  *a3 = v8;
  return *(void *)a1;
}

uint64_t sub_100004314(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 52)
  {
    int v4 = -304;
LABEL_8:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v3 = NDR_record;
    goto LABEL_9;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v4 = -300;
    goto LABEL_8;
  }
  uint64_t result = sub_1000043F4(*(_DWORD *)(result + 12), *(_DWORD *)(result + 28), *(_DWORD *)(result + 48), (_DWORD *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v3 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_9:
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_1000043F4(int a1, mach_port_name_t a2, int a3, _DWORD *a4)
{
  uint64_t v7 = sub_1000047CC(a1);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 56);
    int v9 = sub_1000044B0(v8, a3, a2);
    *a4 = v9;
    if (!v9)
    {
      *(_DWORD *)(v8 + 48) = 2;
      *(_DWORD *)(v8 + 184) = a2;
      return 0;
    }
  }
  else
  {
    *a4 = 2001;
  }
  if (a2) {
    mach_port_deallocate(mach_task_self_, a2);
  }
  return 0;
}

uint64_t sub_1000044B0(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)(a1 + 48)) {
    return 2003;
  }
  uint64_t result = 1002;
  if (!a2 && a3)
  {
    int v6 = *(_DWORD *)(a1 + 40);
    CFDataRef v5 = (const void *)(a1 + 40);
    if (*(void *)(sub_1000047CC(v6) + 32))
    {
      if (!qword_10007D9E0) {
        qword_10007D9E0 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
      }
      CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, v5);
      CFSetAddValue((CFMutableSetRef)qword_10007D9E0, v7);
      CFRelease(v7);
    }
    return 0;
  }
  return result;
}

uint64_t sub_100004584(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 80)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (uint64_t v3 = *(unsigned int *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (uint64_t v4 = *(unsigned int *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  uint64_t result = sub_100004694(*(unsigned int *)(result + 12), *(void *)(result + 28), v3, *(void *)(result + 44), v4, *(unsigned int *)(result + 76), (_DWORD *)(a2 + 36), (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100004694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, int *a8)
{
  *a7 = 0;
  *a8 = 0;
  if (!_SCUnserializeString()) {
    *a8 = 1001;
  }
  if (!_SCUnserializeData())
  {
    int v9 = 1001;
    goto LABEL_7;
  }
  if (!*a8)
  {
    CFStringGetTypeID();
    int v9 = 1002;
LABEL_7:
    *a8 = v9;
  }
  return 0;
}

uint64_t sub_1000047CC(int a1)
{
  uint64_t v6 = 0;
  CFNumberRef v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  if (!a1) {
    sub_100064DB4();
  }
  if (qword_10007DA80 != -1) {
    dispatch_once(&qword_10007DA80, &stru_100075CD0);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000022AC;
  block[3] = &unk_100075C28;
  block[4] = &v6;
  int v5 = a1;
  dispatch_sync((dispatch_queue_t)qword_10007DA88, block);
  uint64_t v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

uint64_t sub_1000048E0(uint64_t a1, void *a2, const void *a3, int a4)
{
  value = 0;
  uint64_t v8 = sub_100006A00();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = "*set ";
    int v24 = *(unsigned __int8 *)(a1 + 44);
    int v25 = *(_DWORD *)(a1 + 40);
    if (!a4) {
      uint64_t v23 = "set  ";
    }
    CFRange v29 = v23;
    __int16 v30 = 2080;
    CFIndex v26 = "  ";
    *(_DWORD *)buf = 136315906;
    if (v24) {
      CFIndex v26 = "t ";
    }
    CFRange v31 = v26;
    __int16 v32 = 1024;
    int v33 = v25;
    __int16 v34 = 2112;
    v35 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s%s : %5u : %@", buf, 0x26u);
  }
  CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
  if (v9) {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, v9);
  }
  else {
    MutableCFArrayRef Copy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  uint64_t v11 = MutableCopy;
  int v12 = CFDictionaryContainsKey(MutableCopy, @"data");
  CFDictionarySetValue(v11, @"data", a3);
  CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"%u", *(unsigned int *)(a1 + 40));
  CFStringRef v14 = v13;
  if (*(unsigned char *)(a1 + 44))
  {
    if (v12)
    {
      CFDictionaryRef v15 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
      if (!CFDictionaryGetValueIfPresent(v15, @"session", (const void **)&value) || !CFEqual(v14, value))
      {
        CFRelease(v14);
        CFRelease(v11);
        uint64_t v16 = 1005;
        if (!a4) {
          goto LABEL_28;
        }
        return v16;
      }
LABEL_21:
      CFRelease(v14);
      CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, a2, v11);
      CFRelease(v11);
      if (v12) {
        goto LABEL_27;
      }
      goto LABEL_24;
    }
    uint64_t v18 = sub_1000047CC(*(_DWORD *)(a1 + 40));
    uint64_t v19 = v18;
    CFArrayRef v20 = *(const __CFArray **)(v18 + 48);
    if (!v20) {
      goto LABEL_18;
    }
    v36.length = CFArrayGetCount(*(CFArrayRef *)(v18 + 48));
    v36.location = 0;
    if (CFArrayContainsValue(v20, v36, a2))
    {
LABEL_20:
      CFDictionarySetValue(v11, @"session", v14);
      goto LABEL_21;
    }
    Mutable = *(__CFArray **)(v19 + 48);
    if (!Mutable)
    {
LABEL_18:
      Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      *(void *)(v19 + 48) = Mutable;
    }
    CFArrayAppendValue(Mutable, a2);
    goto LABEL_20;
  }
  if (v12)
  {
    if (CFDictionaryGetValueIfPresent(v11, @"session", (const void **)&value) && !CFEqual(v14, value))
    {
      CFDictionaryRemoveValue(v11, @"session");
      CFStringRef v17 = CFStringCreateWithFormat(0, 0, @"%@:%@", value, a2);
      CFSetAddValue((CFMutableSetRef)qword_10007D9D8, v17);
      CFRelease(v17);
    }
    goto LABEL_21;
  }
  CFRelease(v13);
  CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, a2, v11);
  CFRelease(v11);
LABEL_24:
  if (CFSetContainsValue((CFSetRef)qword_10007D9D0, a2)) {
    CFSetRemoveValue((CFMutableSetRef)qword_10007D9D0, a2);
  }
  else {
    sub_10000CDA0(a2);
  }
LABEL_27:
  CFSetAddValue((CFMutableSetRef)qword_10007D9C8, a2);
  uint64_t v16 = 0;
  if (!a4) {
LABEL_28:
  }
    sub_100004C70();
  return v16;
}

uint64_t sub_100004C70()
{
  CFIndex Count = CFSetGetCount((CFSetRef)qword_10007D9C8);
  if (!Count) {
    goto LABEL_27;
  }
  uint64_t v1 = Count;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  *(_OWORD *)values = 0u;
  long long v41 = 0u;
  if (Count < 33)
  {
    uint64_t v2 = (const void **)values;
    CFSetGetValues((CFSetRef)qword_10007D9C8, (const void **)values);
    if (v1 < 1) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v2 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
    CFSetGetValues((CFSetRef)qword_10007D9C8, v2);
  }
  uint64_t v23 = v2;
  do
  {
    uint64_t v3 = v2[v1 - 1];
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)int v24 = 0u;
    long long v25 = 0u;
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, v3);
    if (Value)
    {
      CFDictionaryRef v5 = Value;
      if (CFDictionaryContainsKey(Value, @"watchers"))
      {
        CFArrayRef v6 = (const __CFArray *)CFDictionaryGetValue(v5, @"watchers");
        uint64_t v7 = CFArrayGetCount(v6);
        if (v7)
        {
          CFIndex v8 = v7;
          if (v7 < 33)
          {
            CFDictionaryRef v9 = (const void **)v24;
            v57.location = 0;
            v57.length = v7;
            CFArrayGetValues(v6, v57, (const void **)v24);
            if (v8 < 1) {
              continue;
            }
          }
          else
          {
            CFDictionaryRef v9 = (const void **)CFAllocatorAllocate(0, 8 * v7, 0);
            v56.location = 0;
            v56.length = v8;
            CFArrayGetValues(v6, v56, v9);
          }
          CFIndex v10 = v8 - 1;
          do
          {
            CFNumberRef v11 = (const __CFNumber *)v9[v10];
            uint64_t v12 = sub_10000AFD0(v11);
            CFArrayRef Mutable = *(const __CFArray **)(v12 + 32);
            if (!Mutable)
            {
              CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
              *(void *)(v12 + 32) = Mutable;
            }
            v58.length = CFArrayGetCount(Mutable);
            v58.location = 0;
            if (!CFArrayContainsValue(Mutable, v58, v3)) {
              CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 32), v3);
            }
            CFStringRef v14 = (__CFSet *)qword_10007D9E0;
            if (!qword_10007D9E0)
            {
              CFStringRef v14 = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
              qword_10007D9E0 = (uint64_t)v14;
            }
            CFSetAddValue(v14, v11);
            unint64_t v15 = v10-- + 1;
          }
          while (v15 > 1);
          uint64_t v2 = v23;
          if (v9 != (const void **)v24) {
            CFAllocatorDeallocate(0, v9);
          }
        }
      }
    }
  }
  while (v1-- > 1);
  if (v2 != (const void **)values) {
    CFAllocatorDeallocate(0, v2);
  }
LABEL_26:
  CFSetRemoveAllValues((CFMutableSetRef)qword_10007D9C8);
LABEL_27:
  CFIndex v17 = CFSetGetCount((CFSetRef)qword_10007D9D0);
  if (v17)
  {
    uint64_t v18 = v17;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    *(_OWORD *)values = 0u;
    long long v41 = 0u;
    if (v17 >= 33)
    {
      uint64_t v19 = (const void **)CFAllocatorAllocate(0, 8 * v17, 0);
      CFSetGetValues((CFSetRef)qword_10007D9D0, v19);
      goto LABEL_31;
    }
    uint64_t v19 = (const void **)values;
    CFSetGetValues((CFSetRef)qword_10007D9D0, (const void **)values);
    if (v18 >= 1)
    {
LABEL_31:
      uint64_t v20 = v18 - 1;
      do
      {
        sub_100001430((void *)v19[v20]);
        unint64_t v21 = v20-- + 1;
      }
      while (v21 > 1);
      if (v19 != (const void **)values) {
        CFAllocatorDeallocate(0, v19);
      }
    }
    CFSetRemoveAllValues((CFMutableSetRef)qword_10007D9D0);
  }
  CFSetApplyFunction((CFSetRef)qword_10007D9D8, (CFSetApplierFunction)sub_10000D860, 0);
  CFSetRemoveAllValues((CFMutableSetRef)qword_10007D9D8);
  return 0;
}

uint64_t sub_100005010(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, int *a8)
{
  *a8 = 0;
  if (a2 && a3 && !_SCUnserialize())
  {
    *a8 = 1001;
    if (!a4) {
      goto LABEL_7;
    }
  }
  else if (!a4)
  {
    goto LABEL_7;
  }
  if (a5 && !_SCUnserialize())
  {
    *a8 = 1001;
    if (!a6) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
LABEL_7:
  if (!a6) {
    goto LABEL_10;
  }
LABEL_8:
  if (a7 && !_SCUnserialize())
  {
    int v15 = 1001;
    goto LABEL_18;
  }
LABEL_10:
  if (!*a8)
  {
    uint64_t v14 = sub_1000047CC(a1);
    if (v14)
    {
      sub_100001280(*(_DWORD **)(v14 + 56), 0, 0, 0);
      *a8 = 0;
      return 0;
    }
    int v15 = 2001;
LABEL_18:
    *a8 = v15;
  }
  return 0;
}

uint64_t sub_100005354(uint64_t a1, __CFString *key)
{
  CFDictionaryRef v4 = (const __CFDictionary *)sub_10000555C(key);
  if (v4 && CFDictionaryContainsKey(v4, @"write-protect"))
  {
    if (!sub_10000BAD4(a1, key))
    {
      if (sub_10000B80C(a1, @"com.apple.SystemConfiguration.SCDynamicStore-write-no-fault")) {
        return 1003;
      }
      else {
        return 10002;
      }
    }
    return 0;
  }
  long long v6 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)atoken.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&atoken.val[4] = v6;
  pid_t v7 = audit_token_to_pid(&atoken);
  if (v7 == getpid()) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 64))
  {
    if (sub_10000B80C(a1, @"com.apple.SystemConfiguration.SCDynamicStore-write-access")) {
      return 0;
    }
    if (sub_10000BAD4(a1, key)) {
      return 0;
    }
    else {
      return 1003;
    }
  }
  else
  {
    uint64_t result = CFStringHasPrefix(key, kSCDynamicStoreDomainSetup);
    if (result)
    {
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        CFIndex v8 = (_OWORD *)(a1 + 68);
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9, v10, v11);
        __error();
        uint64_t v12 = _os_log_pack_fill();
        long long v13 = v8[1];
        *(_OWORD *)atoken.val = *v8;
        *(_OWORD *)&atoken.val[4] = v13;
        pid_t v14 = audit_token_to_pid(&atoken);
        *(_DWORD *)uint64_t v12 = 67109378;
        *(_DWORD *)(v12 + 4) = v14;
        *(_WORD *)(v12 + 8) = 2112;
        *(void *)(v12 + 10) = key;
        __SC_log_send();
        return 0;
      }
    }
  }
  return result;
}

void *sub_10000555C(void *key)
{
  value = 0;
  pid_t v7 = 0;
  if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_10007D9B8, key, (const void **)&value)
    && (v1 = value, CFTypeID TypeID = CFDictionaryGetTypeID(), v1)
    && CFGetTypeID(v1) == TypeID
    && CFDictionaryGetValueIfPresent((CFDictionaryRef)value, @"access-controls", (const void **)&v7)
    && (uint64_t v3 = v7, v4 = CFDictionaryGetTypeID(), v3)
    && CFGetTypeID(v3) == v4)
  {
    return v7;
  }
  else
  {
    return 0;
  }
}

void sub_10000562C(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v10 = *(_xpc_connection_s **)(a1 + 32);
    sub_100001900(v10, object);
  }
  else
  {
    CFDictionaryRef v5 = type;
    if (type != (xpc_type_t)&_xpc_type_error)
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return;
      }
      _os_log_pack_size();
      __error();
      uint64_t v6 = _os_log_pack_fill();
      pid_t v7 = *(_xpc_connection_s **)(a1 + 32);
      pid_t pid = xpc_connection_get_pid(v7);
      *(_DWORD *)uint64_t v6 = 134218496;
      *(void *)(v6 + 4) = v7;
      *(_WORD *)(v6 + 12) = 1024;
      *(_DWORD *)(v6 + 14) = pid;
      __int16 v9 = 2048;
      goto LABEL_5;
    }
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    if (object == &_xpc_error_connection_invalid)
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __error();
        uint64_t v16 = _os_log_pack_fill();
        CFIndex v17 = *(_xpc_connection_s **)(a1 + 32);
        pid_t v18 = xpc_connection_get_pid(v17);
        *(_DWORD *)uint64_t v16 = 134218240;
        *(void *)(v16 + 4) = v17;
        *(_WORD *)(v16 + 12) = 1024;
        *(_DWORD *)(v16 + 14) = v18;
        __SC_log_send();
      }
      if (sub_100006354((uint64_t)&qword_10007DBF0, *(void *)(a1 + 32)))
      {
        sub_100055124((uint64_t)&qword_10007DBF0);
        if (qword_10007DC10) {
          (*(void (**)(void))(qword_10007DC10 + 16))();
        }
      }
    }
    else
    {
      CFDictionaryRef v5 = (void *)string;
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      int v12 = __SC_log_enabled();
      if (object == &_xpc_error_connection_interrupted)
      {
        if (v12)
        {
          _os_log_pack_size();
          __error();
          uint64_t v6 = _os_log_pack_fill();
          uint64_t v19 = *(_xpc_connection_s **)(a1 + 32);
          pid_t v20 = xpc_connection_get_pid(v19);
          *(_DWORD *)uint64_t v6 = 134218498;
          *(void *)(v6 + 4) = v19;
          *(_WORD *)(v6 + 12) = 1024;
          *(_DWORD *)(v6 + 14) = v20;
          __int16 v9 = 2080;
LABEL_5:
          *(_WORD *)(v6 + 18) = v9;
          *(void *)(v6 + 20) = v5;
          __SC_log_send();
        }
      }
      else if (v12)
      {
        _os_log_pack_size();
        __error();
        uint64_t v13 = _os_log_pack_fill();
        pid_t v14 = *(_xpc_connection_s **)(a1 + 32);
        pid_t v15 = xpc_connection_get_pid(v14);
        *(_DWORD *)uint64_t v13 = 134218754;
        *(void *)(v13 + 4) = v14;
        *(_WORD *)(v13 + 12) = 1024;
        *(_DWORD *)(v13 + 14) = v15;
        *(_WORD *)(v13 + 18) = 2048;
        *(void *)(v13 + 20) = object;
        *(_WORD *)(v13 + 28) = 2080;
        *(void *)(v13 + 30) = v5;
        __SC_log_send();
      }
    }
  }
}

void sub_100005A50(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v10 = *(_xpc_connection_s **)(a1 + 32);
    sub_100001AEC(v10, object);
  }
  else
  {
    CFDictionaryRef v5 = type;
    if (type != (xpc_type_t)&_xpc_type_error)
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return;
      }
      _os_log_pack_size();
      __error();
      uint64_t v6 = _os_log_pack_fill();
      pid_t v7 = *(_xpc_connection_s **)(a1 + 32);
      pid_t pid = xpc_connection_get_pid(v7);
      *(_DWORD *)uint64_t v6 = 134218496;
      *(void *)(v6 + 4) = v7;
      *(_WORD *)(v6 + 12) = 1024;
      *(_DWORD *)(v6 + 14) = pid;
      __int16 v9 = 2048;
      goto LABEL_5;
    }
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    if (object == &_xpc_error_connection_invalid)
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __error();
        uint64_t v16 = _os_log_pack_fill();
        CFIndex v17 = *(_xpc_connection_s **)(a1 + 32);
        pid_t v18 = xpc_connection_get_pid(v17);
        *(_DWORD *)uint64_t v16 = 134218240;
        *(void *)(v16 + 4) = v17;
        *(_WORD *)(v16 + 12) = 1024;
        *(_DWORD *)(v16 + 14) = v18;
        __SC_log_send();
      }
      if (sub_100006354((uint64_t)&qword_10007DE10, *(void *)(a1 + 32)))
      {
        sub_100055124((uint64_t)&qword_10007DE10);
        if (qword_10007DE30) {
          (*(void (**)(void))(qword_10007DE30 + 16))();
        }
      }
    }
    else
    {
      CFDictionaryRef v5 = (void *)string;
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      int v12 = __SC_log_enabled();
      if (object == &_xpc_error_connection_interrupted)
      {
        if (v12)
        {
          _os_log_pack_size();
          __error();
          uint64_t v6 = _os_log_pack_fill();
          uint64_t v19 = *(_xpc_connection_s **)(a1 + 32);
          pid_t v20 = xpc_connection_get_pid(v19);
          *(_DWORD *)uint64_t v6 = 134218498;
          *(void *)(v6 + 4) = v19;
          *(_WORD *)(v6 + 12) = 1024;
          *(_DWORD *)(v6 + 14) = v20;
          __int16 v9 = 2080;
LABEL_5:
          *(_WORD *)(v6 + 18) = v9;
          *(void *)(v6 + 20) = v5;
          __SC_log_send();
        }
      }
      else if (v12)
      {
        _os_log_pack_size();
        __error();
        uint64_t v13 = _os_log_pack_fill();
        pid_t v14 = *(_xpc_connection_s **)(a1 + 32);
        pid_t v15 = xpc_connection_get_pid(v14);
        *(_DWORD *)uint64_t v13 = 134218754;
        *(void *)(v13 + 4) = v14;
        *(_WORD *)(v13 + 12) = 1024;
        *(_DWORD *)(v13 + 14) = v15;
        *(_WORD *)(v13 + 18) = 2048;
        *(void *)(v13 + 20) = object;
        *(_WORD *)(v13 + 28) = 2080;
        *(void *)(v13 + 30) = v5;
        __SC_log_send();
      }
    }
  }
}

void sub_100005E74(_xpc_connection_s *a1)
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    pid_t pid = xpc_connection_get_pid(a1);
    *(_DWORD *)uint64_t v5 = 134218240;
    *(void *)(v5 + 4) = a1;
    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v5 + 14) = pid;
    __SC_log_send();
  }
  sub_100006280((uint64_t)&qword_10007DBF0, a1);
  if (qword_10007DC18 != -1) {
    dispatch_once(&qword_10007DC18, &stru_100076698);
  }
  xpc_connection_set_target_queue(a1, (dispatch_queue_t)qword_10007DC20);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_10000562C;
  handler[3] = &unk_1000766B8;
  handler[4] = a1;
  xpc_connection_set_event_handler(a1, handler);
  xpc_connection_resume(a1);
}

void sub_100006040(_xpc_connection_s *a1)
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    pid_t pid = xpc_connection_get_pid(a1);
    *(_DWORD *)uint64_t v5 = 134218240;
    *(void *)(v5 + 4) = a1;
    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v5 + 14) = pid;
    __SC_log_send();
  }
  sub_100006280((uint64_t)&qword_10007DE10, a1);
  if (qword_10007DE38 != -1) {
    dispatch_once(&qword_10007DE38, &stru_100076E68);
  }
  xpc_connection_set_target_queue(a1, (dispatch_queue_t)qword_10007DE40);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_100005A50;
  handler[3] = &unk_100076E88;
  handler[4] = a1;
  xpc_connection_set_event_handler(a1, handler);
  xpc_connection_resume(a1);
}

os_log_t sub_10000620C()
{
  os_log_t result = (os_log_t)qword_10007DC80;
  if (!qword_10007DC80)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    qword_10007DC80 = (uint64_t)result;
  }
  return result;
}

void sub_100006280(uint64_t a1, _xpc_connection_s *a2)
{
  pid_t v7 = a2;
  CFDataRef v4 = CFDataCreate(0, (const UInt8 *)&v7, 8);
  CFArrayRef Mutable = CFDataCreateMutable(0, 24);
  CFDataSetLength(Mutable, 24);
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  *(_DWORD *)MutableBytePtr = xpc_connection_get_pid(a2);
  *((void *)MutableBytePtr + 1) = 0;
  *((void *)MutableBytePtr + 2) = 0;
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), v4, Mutable);
  CFRelease(v4);
  CFRelease(Mutable);
}

uint64_t sub_100006354(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  CFDataRef v3 = CFDataCreate(0, (const UInt8 *)&v8, 8);
  CFDictionaryRef Value = (__CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v3);
  if (Value && (uint64_t v5 = *((void *)CFDataGetMutableBytePtr(Value) + 2)) != 0)
  {
    if (v5 == *(void *)(a1 + 8))
    {
      uint64_t v6 = 0;
      --*(_DWORD *)(a1 + 28);
    }
    else
    {
      --*(_DWORD *)(a1 + 24);
      uint64_t v6 = 1;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), v3);
  CFRelease(v3);
  return v6;
}

void sub_100006434(const void *a1, CFArrayRef theArray, const void *a3)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 3)
  {
    v16.length = Count - 2;
    v16.location = 2;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(theArray, v16, a3);
    if (FirstIndexOfValue != -1)
    {
      CFIndex v8 = FirstIndexOfValue;
      MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, 0, theArray);
      CFArrayRemoveValueAtIndex(MutableCopy, v8);
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(MutableCopy, 1);
      CFIndex v11 = CFArrayGetCount(ValueAtIndex);
      if (v11 >= 1)
      {
        CFIndex v12 = v11;
        for (CFIndex i = 0; i != v12; ++i)
        {
          pid_t v14 = CFArrayGetValueAtIndex(ValueAtIndex, i);
          sub_100008704(v14, a3);
        }
      }
      CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9C0, a1, MutableCopy);
      CFRelease(MutableCopy);
    }
  }
}

void sub_10000658C(const void *a1, const void *a2)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
  if (Value) {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, Value);
  }
  else {
    MutableCFArrayRef Copy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  CFDictionaryRef v6 = MutableCopy;
  CFArrayRef v7 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"watchers");
  CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(v6, @"watcherRefs");
  if (v7)
  {
    CFArrayRef v9 = v8;
    CFArrayRef Mutable = CFArrayCreateMutableCopy(0, 0, v7);
    CFMutableArrayRef v11 = CFArrayCreateMutableCopy(0, 0, v9);
  }
  else
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFMutableArrayRef v11 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  }
  CFIndex v12 = v11;
  int valuePtr = 0;
  v18.length = CFArrayGetCount(Mutable);
  v18.location = 0;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(Mutable, v18, a1);
  if (FirstIndexOfValue == -1)
  {
    CFArrayAppendValue(Mutable, a1);
    int valuePtr = 1;
    CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFArrayAppendValue(v12, v16);
  }
  else
  {
    CFIndex v14 = FirstIndexOfValue;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v12, FirstIndexOfValue);
    CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
    ++valuePtr;
    CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFArraySetValueAtIndex(v12, v14, v16);
  }
  CFRelease(v16);
  CFDictionarySetValue(v6, @"watchers", Mutable);
  CFRelease(Mutable);
  CFDictionarySetValue(v6, @"watcherRefs", v12);
  CFRelease(v12);
  CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, a2, v6);
  CFRelease(v6);
}

uint64_t sub_1000067C0(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 28))
  {
    CFDataRef v3 = (__CFString *)result;
    CFArrayRef v4 = *(const __CFArray **)(a2 + 8);
    if (!v4
      || (v5.length = CFArrayGetCount(*(CFArrayRef *)(a2 + 8)),
          v5.location = 0,
          os_log_t result = CFArrayContainsValue(v4, v5, v3),
          !result))
    {
      os_log_t result = sub_100006868(*(void **)a2, v3, *(unsigned __int8 *)(a2 + 24), 1);
      *(_DWORD *)(a2 + 28) = result;
    }
  }
  return result;
}

uint64_t sub_100006868(void *a1, __CFString *a2, int a3, int a4)
{
  CFArrayRef v8 = sub_100006A00();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    pid_t v15 = "*watch+";
    int v16 = *((_DWORD *)a1 + 10);
    if (!a4) {
      pid_t v15 = "watch+ ";
    }
    int v18 = 136315906;
    uint64_t v19 = v15;
    __int16 v20 = 1024;
    int v21 = v16;
    if (a3) {
      CFIndex v17 = "pattern";
    }
    else {
      CFIndex v17 = "key";
    }
    __int16 v22 = 2080;
    uint64_t v23 = v17;
    __int16 v24 = 2112;
    long long v25 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s : %5u : %s : %@", (uint8_t *)&v18, 0x26u);
  }
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberIntType, a1 + 5);
  if (a3)
  {
    CFArrayRef v11 = (const __CFArray *)a1[22];
    uint64_t v10 = (__CFArray **)(a1 + 22);
    uint64_t v12 = sub_100006A74(v11, a2);
    if (v12) {
      goto LABEL_9;
    }
    if (!sub_10000CB14(a2, v9))
    {
      uint64_t v12 = 1002;
      goto LABEL_9;
    }
  }
  else
  {
    CFArrayRef v13 = (const __CFArray *)a1[21];
    uint64_t v10 = (__CFArray **)(a1 + 21);
    uint64_t v12 = sub_100006A74(v13, a2);
    if (v12) {
      goto LABEL_9;
    }
    sub_10000658C(v9, a2);
  }
  sub_100006AF8(v10, a2);
  uint64_t v12 = 0;
LABEL_9:
  if (v9) {
    CFRelease(v9);
  }
  return v12;
}

os_log_t sub_100006A00()
{
  os_log_t result = (os_log_t)qword_10007DA20;
  if (!qword_10007DA20)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
    qword_10007DA20 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_100006A74(const __CFArray *a1, const void *a2)
{
  if (a1 && (v5.length = CFArrayGetCount(a1), v5.location = 0, CFArrayContainsValue(a1, v5, a2))) {
    return 1005;
  }
  else {
    return 0;
  }
}

void sub_100006AF8(__CFArray **a1, void *value)
{
  CFArrayRef Mutable = *a1;
  if (!Mutable)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    *a1 = Mutable;
  }

  CFArrayAppendValue(Mutable, value);
}

void sub_100006B80()
{
  if (qword_10007D9E0)
  {
    int valuePtr = 0;
    *(_OWORD *)values = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    CFIndex Count = CFSetGetCount((CFSetRef)qword_10007D9E0);
    uint64_t v1 = Count;
    if (Count >= 65)
    {
      uint64_t v2 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
      CFSetGetValues((CFSetRef)qword_10007D9E0, v2);
      goto LABEL_5;
    }
    uint64_t v2 = (const void **)values;
    CFSetGetValues((CFSetRef)qword_10007D9E0, (const void **)values);
    if (v1 >= 1)
    {
      while (1)
      {
LABEL_5:
        CFNumberGetValue((CFNumberRef)v2[v1 - 1], kCFNumberIntType, &valuePtr);
        uint64_t v3 = sub_1000047CC(valuePtr);
        if (!v3) {
          sub_100064D88();
        }
        CFArrayRef v4 = *(_DWORD **)(v3 + 56);
        int v5 = v4[12];
        if (v5 != 2) {
          goto LABEL_13;
        }
        if (v4[46]) {
          break;
        }
LABEL_21:
        if (v1-- <= 1)
        {
          if (v2 != (const void **)values) {
            CFAllocatorDeallocate(0, v2);
          }
          goto LABEL_25;
        }
      }
      CFDictionaryRef v6 = sub_100006A00();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        int v11 = v4[10];
        int v12 = v4[46];
        *(_DWORD *)buf = 67109376;
        int v18 = v11;
        __int16 v19 = 1024;
        int v20 = v12;
        _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "-->port : %5u : port = %u", buf, 0xEu);
      }
      if (!v4[47])
      {
        do
        {
          int v7 = random();
          v4[47] = v7;
        }
        while (!v7);
      }
      _SC_sendMachMessage();
      int v5 = v4[12];
LABEL_13:
      if (v5 == 3 && (v4[48] & 0x80000000) == 0)
      {
        CFArrayRef v8 = sub_100006A00();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          int v13 = v4[10];
          int v14 = v4[48];
          int v15 = v4[49];
          *(_DWORD *)buf = 67109632;
          int v18 = v13;
          __int16 v19 = 1024;
          int v20 = v14;
          __int16 v21 = 1024;
          int v22 = v15;
          _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "-->fd   : %5u : fd = %d, msgid = %d", buf, 0x14u);
        }
        ssize_t v9 = write(v4[48], v4 + 49, 4uLL);
        if (v9 != 4 && (v9 != -1 || *__error() != 35)) {
          v4[48] = -1;
        }
      }
      goto LABEL_21;
    }
LABEL_25:
    CFRelease((CFTypeRef)qword_10007D9E0);
    qword_10007D9E0 = 0;
  }
}

void sub_100006E48(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_100006040((_xpc_connection_s *)object);
  }
  else
  {
    string = (const char *)type;
    if (type == (xpc_type_t)&_xpc_type_error)
    {
      string = xpc_dictionary_get_string(object, _xpc_error_key_description);
      if (object == &_xpc_error_connection_invalid)
      {
        sub_10000620C();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          _os_log_pack_size();
          __error();
          uint64_t v10 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v10 = 136315138;
          *(void *)(v10 + 4) = string;
          __SC_log_send();
        }
        xpc_release(*(xpc_object_t *)(a1 + 32));
      }
      else
      {
        sub_10000620C();
        _SC_syslog_os_log_mapping();
        int v8 = __SC_log_enabled();
        if (object == &_xpc_error_connection_interrupted)
        {
          if (v8)
          {
            _os_log_pack_size();
            __error();
            uint64_t v6 = _os_log_pack_fill();
            int v7 = 136315138;
            goto LABEL_5;
          }
        }
        else if (v8)
        {
          _os_log_pack_size();
          __error();
          uint64_t v9 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v9 = 134218242;
          *(void *)(v9 + 4) = object;
          *(_WORD *)(v9 + 12) = 2080;
          *(void *)(v9 + 14) = string;
          __SC_log_send();
        }
      }
    }
    else
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __error();
        uint64_t v6 = _os_log_pack_fill();
        int v7 = 134217984;
LABEL_5:
        *(_DWORD *)uint64_t v6 = v7;
        *(void *)(v6 + 4) = string;
        __SC_log_send();
      }
    }
  }
}

uint64_t sub_1000071A0(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 3 || *(_DWORD *)(result + 4) != 96)
  {
    int v7 = -304;
LABEL_13:
    *(_DWORD *)(a2 + 32) = v7;
    NDR_record_t v6 = NDR_record;
    goto LABEL_14;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(unsigned char *)(result + 71) != 1
    || (int v3 = *(_DWORD *)(result + 40), v3 != *(_DWORD *)(result + 84))
    || (int v4 = *(_DWORD *)(result + 56), v4 != *(_DWORD *)(result + 88))
    || (int v5 = *(_DWORD *)(result + 72), v5 != *(_DWORD *)(result + 92)))
  {
    int v7 = -300;
    goto LABEL_13;
  }
  os_log_t result = sub_100005010(*(_DWORD *)(result + 12), *(void *)(result + 28), v3, *(void *)(result + 44), v4, *(void *)(result + 60), v5, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v6 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_14:
  *(NDR_record_t *)(a2 + 24) = v6;
  return result;
}

void sub_1000072C8(CFTypeRef cf)
{
  CFRelease(cf);
}

BOOL sub_100007320()
{
  return &_PAEntitlementDictionaryBelongsToSystemProcess != 0;
}

uint64_t sub_100007378()
{
  if (!&_PAEntitlementDictionaryBelongsToSystemProcess) {
    return 0;
  }
  uint64_t v1 = PAEntitlementDictionaryBelongsToSystemProcess();
  return v1;
}

void start(int a1, char *const *a2)
{
  *(_OWORD *)&context.version = xmmword_1000759B0;
  *(_OWORD *)&context.retain = unk_1000759C0;
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))sub_1000080B8;
  uint64_t v62 = 0;
  CFRange v56 = *a2;
  qword_10007D9A8 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  v59 = 0;
  int v58 = 0;
  qword_10007D9B0 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  int v57 = 1;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v4 = getopt_long(a1, a2, "bB:dt:vV:", (const option *)&off_1000759D8, 0);
        if (v4 <= 97) {
          break;
        }
        if (v4 <= 117)
        {
          switch(v4)
          {
            case 'b':
              int v57 = 0;
              break;
            case 'd':
              int v58 = 1;
              break;
            case 't':
              v59 = optarg;
              break;
            default:
              goto LABEL_26;
          }
        }
        else
        {
          if (v4 != 118) {
            goto LABEL_26;
          }
          byte_10007D9A0 = 1;
        }
      }
      if (v4 != 66) {
        break;
      }
      CFStringRef v6 = CFStringCreateWithCString(0, optarg, 0);
      int v7 = (__CFSet *)qword_10007D9A8;
LABEL_11:
      CFSetSetValue(v7, v6);
      CFRelease(v6);
    }
    if (v4 != 86)
    {
      if (v4 != -1) {
LABEL_26:
      }
        sub_100008120();
      if (getuid())
      {
        fprintf(__stderrp, "%s: permission denied.\n", v56);
        exit(77);
      }
      integer_t port_info = 0;
      v60.__sigaction_u.__sa_handler = 0;
      *(void *)&v60.sa_mask = 0;
      vproc_swap_integer();
      if (v58)
      {
        uint64_t v9 = v59;
        if (v59) {
          goto LABEL_35;
        }
        _sc_log = 0;
      }
      else
      {
        signal(15, (void (__cdecl *)(int))sub_10000832C);
        pid_t v8 = fork();
        uint64_t v9 = v59;
        if (v8 == -1) {
          goto LABEL_25;
        }
        if (v8)
        {
          v66[0] = 0;
          wait4(v8, v66, 0, 0);
          if ((v66[0] & 0x7F) != 0) {
            fprintf(__stderrp, "*** configd (daemon) failed to start, received signal=%d\n");
          }
          else {
            fprintf(__stderrp, "*** configd (daemon) failed to start, exit status=%d\n");
          }
          fflush(__stderrp);
          exit(70);
        }
        signal(15, 0);
        if (setsid() == -1)
        {
LABEL_25:
          uint64_t v10 = __stderrp;
          int v11 = __error();
          int v12 = strerror(*v11);
          fprintf(v10, "configd: fork() failed: %s\n", v12);
          exit(1);
        }
        chdir("/");
LABEL_35:
        if (!v9)
        {
          int v13 = getdtablesize();
          if (v13 >= 1)
          {
            unsigned int v14 = v13 + 1;
            do
            {
              close(v14 - 2);
              --v14;
            }
            while (v14 > 1);
          }
          int v15 = open("/dev/null", 2, 0);
          if (v15 != -1)
          {
            int v16 = v15;
            dup2(v15, 0);
            int v17 = open("/var/log/configd.log", 9, 0);
            if (v17 == -1)
            {
              int v18 = v16;
            }
            else
            {
              int v18 = v17;
              if (v16 >= 1) {
                close(v16);
              }
            }
            dup2(v18, 1);
            dup2(v18, 2);
            if (v18 >= 3) {
              close(v18);
            }
          }
        }
      }
      if (setiopolicy_np(9, 0, 1) == -1)
      {
        __int16 v19 = qword_10007DA20;
        if (!qword_10007DA20)
        {
          __int16 v19 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_10007DA20 = (uint64_t)v19;
        }
        os_log_type_t v20 = _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          *(_OWORD *)v66 = 0u;
          long long v67 = 0u;
          os_log_type_enabled(v19, v20);
          __int16 v21 = __error();
          int v22 = strerror(*v21);
          int v64 = 136315138;
          v65 = v22;
          uint64_t v23 = (int *)_os_log_send_and_compose_impl();
          __SC_log_send2();
          if (v23 != v66) {
            free(v23);
          }
        }
      }
      v60.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_10000820C;
      *(void *)&v60.sa_mask = 0x200000000;
      if (sigaction(1, &v60, 0) == -1)
      {
        long long v24 = qword_10007DA20;
        if (!qword_10007DA20)
        {
          long long v24 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_10007DA20 = (uint64_t)v24;
        }
        os_log_type_t v25 = _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          *(_OWORD *)v66 = 0u;
          long long v67 = 0u;
          os_log_type_enabled(v24, v25);
          long long v26 = __error();
          long long v27 = strerror(*v26);
          int v64 = 136315138;
          v65 = v27;
          long long v28 = (int *)_os_log_send_and_compose_impl();
          __SC_log_send2();
          if (v28 != v66) {
            free(v28);
          }
        }
      }
      if (sigaction(13, &v60, 0) == -1)
      {
        long long v29 = qword_10007DA20;
        if (!qword_10007DA20)
        {
          long long v29 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_10007DA20 = (uint64_t)v29;
        }
        os_log_type_t v30 = _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          *(_OWORD *)v66 = 0u;
          long long v67 = 0u;
          os_log_type_enabled(v29, v30);
          long long v31 = __error();
          long long v32 = strerror(*v31);
          int v64 = 136315138;
          v65 = v32;
          long long v33 = (int *)_os_log_send_and_compose_impl();
          __SC_log_send2();
          if (v33 != v66) {
            free(v33);
          }
        }
      }
      if (sigaction(15, &v60, 0) == -1)
      {
        long long v34 = qword_10007DA20;
        if (!qword_10007DA20)
        {
          long long v34 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_10007DA20 = (uint64_t)v34;
        }
        os_log_type_t v35 = _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          *(_OWORD *)v66 = 0u;
          long long v67 = 0u;
          os_log_type_enabled(v34, v35);
          long long v36 = __error();
          long long v37 = strerror(*v36);
          int v64 = 136315138;
          v65 = v37;
          long long v38 = (int *)_os_log_send_and_compose_impl();
          __SC_log_send2();
          if (v38 != v66) {
            free(v38);
          }
        }
      }
      if (sigaction(2, &v60, 0) == -1)
      {
        long long v39 = qword_10007DA20;
        if (!qword_10007DA20)
        {
          long long v39 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
          qword_10007DA20 = (uint64_t)v39;
        }
        os_log_type_t v40 = _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          long long v80 = 0u;
          long long v81 = 0u;
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          *(_OWORD *)v66 = 0u;
          long long v67 = 0u;
          os_log_type_enabled(v39, v40);
          long long v41 = __error();
          long long v42 = strerror(*v41);
          int v64 = 136315138;
          v65 = v42;
          long long v43 = (int *)_os_log_send_and_compose_impl();
          __SC_log_send2();
          if (v43 != v66) {
            free(v43);
          }
        }
      }
      qword_10007DA28 = (uint64_t)CFMachPortCreate(0, (CFMachPortCallBack)sub_1000082CC, &context, 0);
      integer_t port_info = 1;
      mach_port_t v44 = mach_task_self_;
      mach_port_t Port = CFMachPortGetPort((CFMachPortRef)qword_10007DA28);
      if (mach_port_set_attributes(v44, Port, 1, &port_info, 1u)) {
        perror("mach_port_set_attributes");
      }
      RunLoopSource = CFMachPortCreateRunLoopSource(0, (CFMachPortRef)qword_10007DA28, 0);
      Current = CFRunLoopGetCurrent();
      CFRunLoopAddSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
      CFRelease(RunLoopSource);
      if (v9) {
        goto LABEL_93;
      }
      _SCDynamicStoreSetSessionWatchLimit();
      if (qword_10007DA38 != -1) {
        dispatch_once(&qword_10007DA38, &stru_100075A38);
      }
      if (byte_10007DA30)
      {
        long long v48 = SCPreferencesCreate(0, @"configd", @"com.apple.configd.SCDynamicStoreServerDebug.plist");
        if (v48)
        {
          long long v49 = v48;
          CFBooleanRef Value = (const __CFBoolean *)SCPreferencesGetValue(v48, @"ShouldLogPath");
          CFTypeID TypeID = CFBooleanGetTypeID();
          if (Value && CFGetTypeID(Value) == TypeID) {
            byte_10007D9E8 = CFBooleanGetValue(Value);
          }
          CFRelease(v49);
        }
      }
      sub_100008BD8();
      if (&_wd_endpoint_register)
      {
        wd_endpoint_register();
        sub_100003F44();
        wd_endpoint_add_queue();
        wd_endpoint_activate();
      }
      if (!v58 && !v62)
      {
        pid_t v52 = getppid();
        kill(v52, 15);
      }
      if (v57) {
LABEL_93:
      }
        sub_100009914(v9);
      long long v53 = qword_10007DA20;
      if (!qword_10007DA20)
      {
        long long v53 = os_log_create("com.apple.SystemConfiguration", "SCDynamicStore");
        qword_10007DA20 = (uint64_t)v53;
      }
      os_log_type_t v54 = _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        *(_OWORD *)v66 = 0u;
        long long v67 = 0u;
        os_log_type_enabled(v53, v54);
        LOWORD(v64) = 0;
        long long v55 = (int *)_os_log_send_and_compose_impl();
        __SC_log_send2();
        if (v55 != v66) {
          free(v55);
        }
      }
      CFRunLoopRun();
      exit(0);
    }
    int v5 = optarg;
    if (strcmp(optarg, "com.apple.SystemConfiguration"))
    {
      CFStringRef v6 = CFStringCreateWithCString(0, v5, 0);
      int v7 = (__CFSet *)qword_10007D9B0;
      goto LABEL_11;
    }
    _sc_verbose = 1;
  }
}

CFStringRef sub_1000080B8()
{
  return CFStringCreateWithFormat(0, 0, @"<SIGTERM MP>");
}

void sub_100008120()
{
}

uint64_t sub_10000820C(uint64_t result)
{
  if (result == 15 || result == 2)
  {
    if (!qword_10007DA28) {
      _exit(0);
    }
    if (_sc_log >= 1) {
      _sc_log = 2;
    }
    CFMachPortGetPort((CFMachPortRef)qword_10007DA28);
    return _SC_sendMachMessage();
  }
  return result;
}

CFIndex sub_1000082CC()
{
  int v1 = 0;
  CFIndex result = sub_1000092EC(&v1);
  if (!result) {
    exit(v1);
  }
  return result;
}

void sub_10000832C()
{
}

void sub_100008354(id a1)
{
  byte_10007DA30 = os_variant_has_internal_content();
}

void sub_1000083B0()
{
  qword_10007D9B8 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_10007D9C0 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_10007D9C8 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  qword_10007D9D0 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  qword_10007D9D8 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
  keys[4] = 0;
  values[4] = 0;
  CFStringRef v10 = @"com.apple.security.on-demand-install-capable";
  CFArrayRef v0 = CFArrayCreate(0, (const void **)&v10, 1, &kCFTypeArrayCallBacks);
  keys[0] = @"read-deny";
  keys[1] = @"read-deny-background";
  values[0] = v0;
  values[1] = kCFBooleanTrue;
  CFStringRef v10 = @"com.apple.developer.device-information.user-assigned-device-name";
  CFArrayRef v1 = CFArrayCreate(0, (const void **)&v10, 1, &kCFTypeArrayCallBacks);
  keys[2] = @"read-allow";
  keys[3] = @"read-allow-system";
  values[2] = v1;
  values[3] = kCFBooleanTrue;
  CFDictionaryRef v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v1) {
    CFRelease(v1);
  }
  CFRelease(v0);
  ComputerName = (__CFString *)SCDynamicStoreKeyCreateComputerName(0);
  sub_100008980(ComputerName, v2);
  CFRelease(ComputerName);
  HostNames = (__CFString *)SCDynamicStoreKeyCreateHostNames(0);
  sub_100008980(HostNames, v2);
  CFRelease(HostNames);
  CFRelease(v2);
  if (qword_10007DA48 != -1) {
    dispatch_once(&qword_10007DA48, &stru_100075A78);
  }
  if (byte_10007DA40)
  {
    CFDictionaryRef v5 = sub_100008AB4(@"com.apple.SCDynamicStore.test.read-deny1.entitlement", @"read-deny");
    sub_100008980(@"com.apple.SCDynamicStore.test.read-deny1.key", v5);
    CFRelease(v5);
    CFDictionaryRef v6 = sub_100008AB4(@"com.apple.SCDynamicStore.test.read-deny2.entitlement", @"read-deny");
    sub_100008980(@"com.apple.SCDynamicStore.test.read-deny2.key", v6);
    CFRelease(v6);
    CFDictionaryRef v7 = sub_100008AB4(@"com.apple.SCDynamicStore.test.read-allow1.entitlement", @"read-allow");
    sub_100008980(@"com.apple.SCDynamicStore.test.read-allow1.key", v7);
    CFRelease(v7);
    CFDictionaryRef v8 = sub_100008AB4(@"com.apple.SCDynamicStore.test.read-allow2.entitlement", @"read-allow");
    sub_100008980(@"com.apple.SCDynamicStore.test.read-allow2.key", v8);
    CFRelease(v8);
    keys[0] = @"write-protect";
    CFDictionaryRef v9 = CFDictionaryCreate(0, (const void **)keys, (const void **)&kCFBooleanTrue, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    sub_100008980(@"com.apple.SCDynamicStore.test.write-protect1.key", v9);
    sub_100008980(@"com.apple.SCDynamicStore.test.write-protect2.key", v9);
    CFRelease(v9);
  }
}

void sub_100008704(const void *a1, const void *a2)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
  if (Value)
  {
    CFDictionaryRef v5 = Value;
    if (CFDictionaryContainsKey(Value, @"watchers"))
    {
      MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, v5);
      CFArrayRef v7 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"watchers");
      CFArrayRef v8 = CFArrayCreateMutableCopy(0, 0, v7);
      CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"watcherRefs");
      CFMutableArrayRef v10 = CFArrayCreateMutableCopy(0, 0, v9);
      v18.length = CFArrayGetCount(v8);
      v18.location = 0;
      FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v8, v18, a1);
      if (FirstIndexOfValue == -1)
      {
        CFRelease(MutableCopy);
        CFRelease(v8);
        CFRelease(v10);
      }
      else
      {
        CFIndex v12 = FirstIndexOfValue;
        int valuePtr = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v10, FirstIndexOfValue);
        CFNumberGetValue(ValueAtIndex, kCFNumberIntType, &valuePtr);
        int v14 = valuePtr--;
        if (v14 < 2)
        {
          CFArrayRemoveValueAtIndex(v8, v12);
          CFArrayRemoveValueAtIndex(v10, v12);
        }
        else
        {
          CFNumberRef v15 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          CFArraySetValueAtIndex(v10, v12, v15);
          CFRelease(v15);
        }
        if (CFArrayGetCount(v8) < 1)
        {
          CFDictionaryRemoveValue(MutableCopy, @"watchers");
          CFDictionaryRemoveValue(MutableCopy, @"watcherRefs");
        }
        else
        {
          CFDictionarySetValue(MutableCopy, @"watchers", v8);
          CFDictionarySetValue(MutableCopy, @"watcherRefs", v10);
        }
        CFRelease(v8);
        CFRelease(v10);
        if (CFDictionaryGetCount(MutableCopy) < 1) {
          CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007D9B8, a2);
        }
        else {
          CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, a2, MutableCopy);
        }
        CFRelease(MutableCopy);
      }
    }
  }
}

void sub_100008980(void *key, const void *a2)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, key);
  if (Value) {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, Value);
  }
  else {
    MutableCFArrayRef Copy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  CFDictionaryRef v6 = MutableCopy;
  CFDictionarySetValue(MutableCopy, @"access-controls", a2);
  CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9B8, key, v6);

  CFRelease(v6);
}

void sub_100008A58(id a1)
{
  byte_10007DA40 = os_variant_has_internal_content();
}

CFDictionaryRef sub_100008AB4(void *a1, void *a2)
{
  keys = a2;
  values = a1;
  CFTypeRef cf = CFArrayCreate(0, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  CFDictionaryRef v2 = CFDictionaryCreate(0, (const void **)&keys, &cf, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFRelease(cf);
  return v2;
}

void sub_100008B58(id a1)
{
  qword_10007DA58 = (uint64_t)dispatch_workloop_create_inactive("configd/SCDynamicStore");
  dispatch_set_qos_class_fallback();
  CFArrayRef v1 = qword_10007DA58;

  dispatch_activate(v1);
}

uint64_t sub_100008BD8()
{
  kern_return_t v2;
  kern_return_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  mach_port_t sp;

  sp = 0;
  CFArrayRef v0 = getenv("SCD_SERVER");
  if (v0) {
    CFArrayRef v1 = v0;
  }
  else {
    CFArrayRef v1 = "com.apple.SystemConfiguration.configd";
  }
  CFDictionaryRef v2 = bootstrap_check_in(bootstrap_port, v1, &sp);
  if (v2)
  {
    if (v2 == 1103)
    {
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_14;
      }
    }
    else
    {
      int v4 = v2;
      if (v2 != 1100)
      {
        sub_100006A00();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          CFArrayRef v9 = _os_log_pack_size();
          __chkstk_darwin(v9, v10, v11);
          __error();
          CFIndex v12 = _os_log_pack_fill();
          int v13 = bootstrap_strerror(v4);
          *(_DWORD *)CFIndex v12 = 136315394;
          *(void *)(v12 + 4) = v1;
          *(_WORD *)(v12 + 12) = 2080;
          *(void *)(v12 + 14) = v13;
          __SC_log_send();
        }
LABEL_14:
        exit(69);
      }
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_14;
      }
    }
    CFDictionaryRef v5 = _os_log_pack_size();
    __chkstk_darwin(v5, v6, v7);
    __error();
    CFArrayRef v8 = _os_log_pack_fill();
    *(_DWORD *)CFArrayRef v8 = 136315138;
    *(void *)(v8 + 4) = v1;
    __SC_log_send();
    goto LABEL_14;
  }
  sub_1000083B0();
  return sub_10000B094(sp);
}

uint64_t sub_100008E94(uint64_t result)
{
  if (*(unsigned char *)(result + 8))
  {
    CFArrayRef v1 = (void *)result;
    if (*(void *)(result + 16))
    {
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v2 = _os_log_pack_size();
        __chkstk_darwin(v2, v3, v4);
        __error();
        uint64_t v5 = _os_log_pack_fill();
        CFStringRef Identifier = CFBundleGetIdentifier((CFBundleRef)*v1);
        *(_DWORD *)uint64_t v5 = 138412290;
        *(void *)(v5 + 4) = Identifier;
        __SC_log_send();
      }
      return ((uint64_t (*)(void, void))v1[2])(*v1, *((unsigned __int8 *)v1 + 12));
    }
  }
  return result;
}

void sub_100008FD0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(void *)(a1 + 24))
    {
      CFURLRef v2 = CFBundleCopyBundleURL(*(CFBundleRef *)a1);
      if (v2)
      {
        CFURLRef v3 = v2;
        int v4 = CFURLGetFileSystemRepresentation(v2, 1u, (UInt8 *)v13, 1024);
        CFRelease(v3);
        if (v4)
        {
          uint64_t v5 = strrchr(v13, 47);
          CFDictionaryRef v6 = v5 ? v5 + 1 : v13;
          size_t v7 = strlen(v6);
          if (v7 >= 9 && !strcmp(&v6[v7 - 7], ".bundle") && (unint64_t)__strlcpy_chk() <= 0x100)
          {
            v14[strlen(v14) - 7] = 0;
            sub_100006A00();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v8 = _os_log_pack_size();
              __chkstk_darwin(v8, v9, v10);
              __error();
              uint64_t v11 = _os_log_pack_fill();
              CFStringRef Identifier = CFBundleGetIdentifier(*(CFBundleRef *)a1);
              *(_DWORD *)uint64_t v11 = 138412290;
              *(void *)(v11 + 4) = Identifier;
              __SC_log_send();
            }
            (*(void (**)(char *, char *))(a1 + 24))(v14, v13);
          }
        }
      }
    }
  }
}

uint64_t sub_1000091B8(uint64_t result)
{
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v1 = result;
    if (*(void *)(result + 32))
    {
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v2 = _os_log_pack_size();
        __chkstk_darwin(v2, v3, v4);
        __error();
        uint64_t v5 = _os_log_pack_fill();
        CFStringRef Identifier = CFBundleGetIdentifier(*(CFBundleRef *)v1);
        *(_DWORD *)uint64_t v5 = 138412290;
        *(void *)(v5 + 4) = Identifier;
        __SC_log_send();
      }
      return (*(uint64_t (**)(void))(v1 + 32))();
    }
  }
  return result;
}

CFIndex sub_1000092EC(_DWORD *a1)
{
  CFIndex result = CFArrayGetCount((CFArrayRef)qword_10007DA60);
  if (result)
  {
    if (!qword_10007DA68)
    {
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v3 = _os_log_pack_size();
        __chkstk_darwin(v3, v4, v5);
        __error();
        uint64_t v6 = _os_log_pack_fill();
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)uint64_t v6 = 134217984;
        *(CFAbsoluteTime *)(v6 + 4) = Current;
        __SC_log_send();
      }
      qword_10007DA68 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      sub_100009450();
    }
    return 1;
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

void sub_100009450()
{
  sub_100006A00();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v0 = _os_log_pack_size();
    __chkstk_darwin(v0, v1, v2);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  CFArrayRef v3 = (const __CFArray *)qword_10007DA60;
  v12.length = CFArrayGetCount((CFArrayRef)qword_10007DA60);
  v12.location = 0;
  CFArrayApplyFunction(v3, v12, (CFArrayApplierFunction)sub_10000A58C, 0);
  if (!CFDictionaryGetCount((CFDictionaryRef)qword_10007DA68))
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)uint64_t v10 = 134217984;
      *(CFAbsoluteTime *)(v10 + 4) = Current;
      __SC_log_send();
    }
    exit(0);
  }
  CFAbsoluteTime v4 = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = CFRunLoopTimerCreate(0, v4 + 15.0, 0.0, 0, 0, (CFRunLoopTimerCallBack)sub_10000A6B0, 0);
  uint64_t v6 = CFRunLoopGetCurrent();
  CFRunLoopAddTimer(v6, v5, kCFRunLoopDefaultMode);
  CFRelease(v5);
}

__CFArray *sub_1000096A8(const __CFDictionary *a1)
{
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, 0);
  for (uint64_t i = 0; i != 80; i += 8)
  {
    CFStringRef v3 = *(const __CFString **)((char *)&off_100075AE0 + i);
    CFDictionaryRef Value = CFDictionaryGetValue(a1, v3);
    if (Value)
    {
      uint64_t v5 = Value;
      if (CFSetContainsValue((CFSetRef)qword_10007D9A8, v3)
        || (CFStringRef v10 = sub_10000986C(v3)) != 0
        && (CFStringRef v11 = v10, v12 = CFSetContainsValue((CFSetRef)qword_10007D9A8, v10), CFRelease(v11), v12))
      {
        sub_100006A00();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v6 = _os_log_pack_size();
          __chkstk_darwin(v6, v7, v8);
          __error();
          uint64_t v9 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v9 = 138412290;
          *(void *)(v9 + 4) = v3;
          __SC_log_send();
        }
      }
      else
      {
        CFArrayAppendValue(Mutable, v5);
      }
    }
  }
  return Mutable;
}

CFStringRef sub_10000986C(const __CFString *a1)
{
  CFIndex Length = CFStringGetLength(a1);
  result.location = 0;
  result.length = 0;
  v5.location = 0;
  v5.length = Length;
  if (!CFStringFindWithOptions(a1, @".", v5, 4uLL, &result)) {
    return 0;
  }
  v6.length = Length - (result.length + result.location);
  result.location += result.length;
  v6.location = result.location;
  result.length = v6.length;
  return CFStringCreateWithSubstring(0, a1, v6);
}

void sub_100009914(const char *a1)
{
  uint64_t context = 0;
  _SCDPluginExecInit();
  uint64_t v2 = sub_100009CE8(a1);
  qword_10007DA60 = (uint64_t)sub_1000096A8(v2);
  CFRelease(v2);
  sub_100006A00();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3, v4, v5);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  CFArrayRef v6 = (const __CFArray *)qword_10007DA60;
  v20.length = CFArrayGetCount((CFArrayRef)qword_10007DA60);
  v20.location = 0;
  CFArrayApplyFunction(v6, v20, (CFArrayApplierFunction)sub_100009F7C, &context);
  sub_100006A00();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7, v8, v9);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  CFArrayRef v10 = (const __CFArray *)qword_10007DA60;
  v21.length = CFArrayGetCount((CFArrayRef)qword_10007DA60);
  v21.location = 0;
  CFArrayApplyFunction(v10, v21, (CFArrayApplierFunction)sub_100008E94, 0);
  if (context)
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11, v12, v13);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    CFArrayRef v14 = (const __CFArray *)qword_10007DA60;
    v22.length = CFArrayGetCount((CFArrayRef)qword_10007DA60);
    v22.location = 0;
    CFArrayApplyFunction(v14, v22, (CFArrayApplierFunction)sub_100008FD0, 0);
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v15 = _os_log_pack_size();
      __chkstk_darwin(v15, v16, v17);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    CFArrayRef v18 = (const __CFArray *)qword_10007DA60;
    v23.length = CFArrayGetCount((CFArrayRef)qword_10007DA60);
    v23.location = 0;
    CFArrayApplyFunction(v18, v23, (CFArrayApplierFunction)sub_1000091B8, 0);
  }
}

__CFDictionary *sub_100009CE8(const char *a1)
{
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, 0);
  if (a1)
  {
    size_t v3 = strlen(a1);
    CFURLRef v4 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)a1, v3, 1u);
    uint64_t v5 = CFBundleCreate(0, v4);
    if (v5)
    {
      CFArrayRef v6 = v5;
      sub_10000AB2C(Mutable, v5, 1);
      CFRelease(v6);
    }
    CFRelease(v4);
  }
  else
  {
    sysdir_search_path_enumeration_state started = sysdir_start_search_path_enumeration(SYSDIR_DIRECTORY_LIBRARY, SYSDIR_DOMAIN_MASK_SYSTEM);
    sysdir_search_path_enumeration_state next_search_path_enumeration = sysdir_get_next_search_path_enumeration(started, v22);
    if (next_search_path_enumeration)
    {
      sysdir_search_path_enumeration_state v9 = next_search_path_enumeration;
      do
      {
        __strlcat_chk();
        sub_100006A00();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v10 = _os_log_pack_size();
          __chkstk_darwin(v10, v11, v12);
          __error();
          uint64_t v13 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v13 = 136315138;
          *(void *)(v13 + 4) = v22;
          __SC_log_send();
        }
        size_t v14 = strlen(v22);
        CFURLRef v15 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)v22, v14, 1u);
        CFArrayRef BundlesFromDirectory = CFBundleCreateBundlesFromDirectory(0, v15, @".bundle");
        CFRelease(v15);
        if (BundlesFromDirectory)
        {
          CFIndex Count = CFArrayGetCount(BundlesFromDirectory);
          if (Count >= 1)
          {
            CFIndex v18 = Count;
            for (CFIndex i = 0; i != v18; ++i)
            {
              CFNumberRef ValueAtIndex = (__CFBundle *)CFArrayGetValueAtIndex(BundlesFromDirectory, i);
              sub_10000AB2C(Mutable, ValueAtIndex, 0);
              sub_1000072C8(ValueAtIndex);
            }
          }
          CFRelease(BundlesFromDirectory);
        }
        sysdir_search_path_enumeration_state v9 = sysdir_get_next_search_path_enumeration(v9, v22);
      }
      while (v9);
    }
  }
  return Mutable;
}

void sub_100009F7C(uint64_t a1, void *a2)
{
  CFStringRef Identifier = CFBundleGetIdentifier(*(CFBundleRef *)a1);
  CFStringRef v5 = sub_10000986C(Identifier);
  if (!*(unsigned char *)(a1 + 10) && !*(unsigned char *)(a1 + 11))
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_26;
    }
    goto LABEL_30;
  }
  if (!*(unsigned char *)(a1 + 12))
  {
    int v6 = CFSetContainsValue((CFSetRef)qword_10007D9B0, Identifier);
    *(unsigned char *)(a1 + 12) = v6;
    if (!v6 && v5 != 0) {
      *(unsigned char *)(a1 + 12) = CFSetContainsValue((CFSetRef)qword_10007D9B0, v5);
    }
  }
  if (*(unsigned char *)(a1 + 9))
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8, v9, v10);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v11 = 138412290;
      *(void *)(v11 + 4) = Identifier;
      __SC_log_send();
    }
    uint64_t v12 = 0;
    while (!CFEqual(Identifier, *(CFTypeRef *)((char *)&off_100075B30 + v12)))
    {
      v12 += 40;
      if (v12 == 240)
      {
        if (*(void *)(a1 + 16)) {
          goto LABEL_25;
        }
        goto LABEL_22;
      }
    }
    uint64_t v17 = *(void *)((char *)&off_100075B30 + v12 + 8);
    *(void *)(a1 + 16) = v17;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = *(void *)((char *)&off_100075B30 + v12 + 24);
    *(void *)(a1 + 40) = 0;
    if (v17) {
      goto LABEL_25;
    }
LABEL_22:
    if (*(void *)(a1 + 24) || *(void *)(a1 + 32) || *(void *)(a1 + 40)) {
      goto LABEL_25;
    }
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_30:
      uint64_t v18 = _os_log_pack_size();
      __chkstk_darwin(v18, v19, v20);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 138412290;
      *(void *)(v21 + 4) = Identifier;
      __SC_log_send();
    }
  }
  else
  {
    CFErrorRef error = 0;
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13, v14, v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 138412290;
      *(void *)(v16 + 4) = Identifier;
      __SC_log_send();
    }
    if (CFBundleLoadExecutableAndReturnError(*(CFBundleRef *)a1, &error))
    {
      *(void *)(a1 + 16) = sub_10000AF08(*(__CFBundle **)a1, @"load", (uint64_t)v5);
      *(void *)(a1 + 24) = sub_10000AF08(*(__CFBundle **)a1, @"start", (uint64_t)v5);
      *(void *)(a1 + 32) = sub_10000AF08(*(__CFBundle **)a1, @"prime", (uint64_t)v5);
      *(void *)(a1 + 40) = sub_10000AF08(*(__CFBundle **)a1, @"stop", (uint64_t)v5);
LABEL_25:
      *(unsigned char *)(a1 + 8) = 1;
      ++*a2;
      goto LABEL_26;
    }
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v22 = _os_log_pack_size();
      __chkstk_darwin(v22, v23, v24);
      __error();
      uint64_t v25 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v25 = 138412290;
      *(void *)(v25 + 4) = Identifier;
      __SC_log_send();
    }
    CFDictionaryRef v26 = CFErrorCopyUserInfo(error);
    if (v26)
    {
      CFDictionaryRef v27 = v26;
      CFDictionaryRef Value = CFDictionaryGetValue(v26, @"NSDebugDescription");
      if (Value)
      {
        long long v29 = Value;
        sub_100006A00();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v30 = _os_log_pack_size();
          __chkstk_darwin(v30, v31, v32);
          __error();
          uint64_t v33 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v33 = 138412290;
          *(void *)(v33 + 4) = v29;
          __SC_log_send();
        }
      }
      CFRelease(v27);
    }
    CFRelease(error);
  }
LABEL_26:
  if (v5) {
    CFRelease(v5);
  }
}

void sub_10000A58C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  context.version = 0;
  context.info = v1;
  context.retain = (const void *(__cdecl *)(const void *))&_CFRetain;
  context.release = (void (__cdecl *)(const void *))&_CFRelease;
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))sub_10000A89C;
  context.equal = (Boolean (__cdecl *)(const void *, const void *))&_CFEqual;
  context.schedule = 0;
  context.cancel = 0;
  context.hash = (CFHashCode (__cdecl *)(const void *))&CFHash;
  context.perform = (void (__cdecl *)(void *))sub_10000A90C;
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(void *)(a1 + 40))
    {
      size_t v3 = CFRunLoopSourceCreate(0, 0, &context);
      CFAbsoluteTime Current = CFRunLoopGetCurrent();
      CFRunLoopAddSource(Current, v3, kCFRunLoopDefaultMode);
      CFDictionaryAddValue((CFMutableDictionaryRef)qword_10007DA68, *(const void **)a1, v3);
      (*(void (**)(__CFRunLoopSource *))(a1 + 40))(v3);
      CFRelease(v3);
    }
  }
}

void sub_10000A6B0()
{
  sub_100006A00();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v0 = _os_log_pack_size();
    __chkstk_darwin(v0, v1, v2);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DA68);
  uint64_t v10 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
  CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_10007DA68, v10, 0);
  if (Count >= 1)
  {
    CFURLRef v4 = (CFBundleRef *)v10;
    do
    {
      CFStringRef Identifier = CFBundleGetIdentifier(*v4);
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6, v7, v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v9 = 138412290;
        *(void *)(v9 + 4) = Identifier;
        __SC_log_send();
      }
      ++v4;
      --Count;
    }
    while (Count);
  }
  CFAllocatorDeallocate(0, v10);
  exit(0);
}

CFStringRef sub_10000A89C(__CFBundle *a1)
{
  CFStringRef Identifier = CFBundleGetIdentifier(a1);
  return CFStringCreateWithFormat(0, 0, @"<stopRLS %p> {bundleID = %@}", a1, Identifier);
}

__CFRunLoopSource *sub_10000A90C(__CFBundle *a1)
{
  CFStringRef Identifier = CFBundleGetIdentifier(a1);
  sub_100006A00();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3, v4, v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)uint64_t v6 = 138412546;
    *(void *)(v6 + 4) = Identifier;
    *(_WORD *)(v6 + 12) = 2048;
    *(CFAbsoluteTime *)(v6 + 14) = Current;
    __SC_log_send();
  }
  CFRange result = (__CFRunLoopSource *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DA68, a1);
  if (result)
  {
    CFRunLoopSourceInvalidate(result);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DA68, a1);
    CFRange result = (__CFRunLoopSource *)CFDictionaryGetCount((CFDictionaryRef)qword_10007DA68);
    if (!result)
    {
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9, v10, v11);
        __error();
        uint64_t v12 = _os_log_pack_fill();
        CFAbsoluteTime v13 = CFAbsoluteTimeGetCurrent();
        *(_DWORD *)uint64_t v12 = 134217984;
        *(CFAbsoluteTime *)(v12 + 4) = v13;
        __SC_log_send();
      }
      exit(0);
    }
  }
  return result;
}

uint64_t sub_10000AB2C(__CFDictionary *a1, CFBundleRef bundle, char a3)
{
  CFStringRef Identifier = CFBundleGetIdentifier(bundle);
  if (!Identifier)
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    uint64_t v18 = _os_log_pack_size();
    __chkstk_darwin(v18, v19, v20);
    __error();
    uint64_t v21 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v21 = 136315394;
    *(void *)(v21 + 4) = "addPlugin";
    *(_WORD *)(v21 + 12) = 2112;
    *(void *)(v21 + 14) = bundle;
    return __SC_log_send();
  }
  CFStringRef v7 = Identifier;
  if (CFEqual(Identifier, @"com.apple.SystemConfiguration.InterfaceNamer"))
  {
LABEL_3:
    uint64_t v8 = CFAllocatorAllocate(0, 48, 0);
    *(void *)uint64_t v8 = CFRetain(bundle);
    v8[4] = 0;
    *((unsigned char *)v8 + 10) = 1;
    *((unsigned char *)v8 + 11) = a3;
    *((unsigned char *)v8 + 12) = 0;
    *((_OWORD *)v8 + 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(bundle);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (InfoDictionary && CFGetTypeID(InfoDictionary) == TypeID)
    {
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, @"Builtin");
      CFTypeID v12 = CFBooleanGetTypeID();
      if (Value && CFGetTypeID(Value) == v12) {
        *((unsigned char *)v8 + 9) = CFBooleanGetValue(Value);
      }
      CFBooleanRef v13 = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, @"Enabled");
      CFTypeID v14 = CFBooleanGetTypeID();
      if (v13 && CFGetTypeID(v13) == v14) {
        *((unsigned char *)v8 + 10) = CFBooleanGetValue(v13);
      }
      CFBooleanRef v15 = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, @"Verbose");
      CFTypeID v16 = CFBooleanGetTypeID();
      if (v15)
      {
        if (CFGetTypeID(v15) == v16) {
          *((unsigned char *)v8 + 12) = CFBooleanGetValue(v15);
        }
      }
    }
    CFDictionaryAddValue(a1, v7, v8);
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
LABEL_23:
      uint64_t v24 = _os_log_pack_size();
      __chkstk_darwin(v24, v25, v26);
      __error();
      uint64_t v27 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v27 = 136315394;
      *(void *)(v27 + 4) = "addPlugin";
      *(_WORD *)(v27 + 12) = 2112;
      *(void *)(v27 + 14) = v7;
      return __SC_log_send();
    }
  }
  else
  {
    uint64_t v22 = 1;
    while (v22 != 10)
    {
      if (CFEqual(v7, *((CFTypeRef *)&off_100075AE0 + v22++)))
      {
        if ((unint64_t)(v22 - 2) < 9) {
          goto LABEL_3;
        }
        break;
      }
    }
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result) {
      goto LABEL_23;
    }
  }
  return result;
}

void *sub_10000AF08(__CFBundle *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t result = CFBundleGetFunctionPointerForName(a1, a2);
  if (!result)
  {
    if (a3)
    {
      CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%@_%@", a2, a3);
      FunctionPointerForName = CFBundleGetFunctionPointerForName(a1, v7);
      CFRelease(v7);
      return FunctionPointerForName;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10000AFD0(const __CFNumber *a1)
{
  uint64_t v2 = 0;
  CFNumberGetValue(a1, kCFNumberSInt64Type, &v2);
  return sub_1000047CC(v2);
}

uint64_t sub_10000B030()
{
  _SC_cfstring_to_cstring();
  int v0 = atoi(v2);
  return sub_1000047CC(v0);
}

uint64_t sub_10000B094(mach_port_name_t a1)
{
  qword_10007DA78 = sub_100002A30(a1);
  sub_100003E88(qword_10007DA78, 1);
  if (qword_10007DA80 != -1) {
    dispatch_once(&qword_10007DA80, &stru_100075CD0);
  }
  os_state_add_handler();
  return qword_10007DA78;
}

void sub_10000B138(mach_port_context_t a1)
{
  mach_port_name_t v2 = *(_DWORD *)(a1 + 16);
  uint64_t v3 = sub_100006A00();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_100064DE0(v2, v3);
  }
  sub_10000D5A4((uint64_t *)(a1 + 56));
  mach_port_destruct(mach_task_self_, v2, 0, a1);
  uint64_t v4 = *(const void **)(a1 + 104);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 104) = 0;
  }
  if (qword_10007DA80 != -1) {
    dispatch_once(&qword_10007DA80, &stru_100075CD0);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_10000B270;
  v5[3] = &unk_100075C70;
  mach_port_name_t v6 = v2;
  dispatch_sync((dispatch_queue_t)qword_10007DA88, v5);
}

void sub_10000B270(uint64_t a1)
{
  mach_port_name_t v2 = (__CFDictionary *)qword_10007DA70;
  uint64_t v3 = (const void *)*(unsigned int *)(a1 + 32);

  CFDictionaryRemoveValue(v2, v3);
}

void sub_10000B2D8(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    dispatch_mach_cancel();
    dispatch_release(*(dispatch_object_t *)(a1 + 24));
    *(void *)(a1 + 24) = 0;
  }
}

void sub_10000B344(uint64_t a1)
{
  if (qword_10007DA80 != -1) {
    dispatch_once(&qword_10007DA80, &stru_100075CD0);
  }
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_10000B418;
  v2[3] = &unk_100075C90;
  v2[4] = a1;
  dispatch_sync((dispatch_queue_t)qword_10007DA88, v2);
}

uint64_t sub_10000B418(uint64_t a1)
{
  context[0] = *(void *)(a1 + 32);
  context[1] = 0;
  SCPrint();
  CFDictionaryApplyFunction((CFDictionaryRef)qword_10007DA70, (CFDictionaryApplierFunction)sub_10000B4B8, context);
  return SCPrint();
}

uint64_t sub_10000B4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ++*(_DWORD *)(a3 + 8);
  SCPrint();
  SCPrint();
  if (*(void *)(a2 + 32)) {
    SCPrint();
  }
  if (*(void *)(a2 + 48)) {
    SCPrint();
  }

  return SCPrint();
}

BOOL sub_10000B5B4(uint64_t a1)
{
  return *(_DWORD *)(a1 + 64) == 0;
}

uint64_t sub_10000B608(uint64_t a1)
{
  if (!sub_100007320()) {
    return 0;
  }
  CFBooleanRef v2 = *(const __CFBoolean **)(a1 + 128);
  if (v2) {
    return CFBooleanGetValue(v2);
  }
  *(_OWORD *)values = off_100075DD0;
  CFStringRef v15 = @"com.apple.private.attribution.explicitly-assumed-identities";
  CFArrayRef v4 = (const __CFArray *)qword_10007DAA0;
  if (!qword_10007DAA0)
  {
    CFArrayRef v4 = CFArrayCreate(0, (const void **)values, 3, &kCFTypeArrayCallBacks);
    qword_10007DAA0 = (uint64_t)v4;
  }
  CFDictionaryRef v5 = sub_10000C2F0(a1, v4);
  if (v5)
  {
    CFDictionaryRef v6 = v5;
    uint64_t v3 = sub_100007378();
    CFRelease(v6);
  }
  else
  {
    uint64_t v3 = 0;
  }
  CFStringRef v7 = &kCFBooleanTrue;
  if (!v3) {
    CFStringRef v7 = &kCFBooleanFalse;
  }
  *(CFBooleanRef *)(a1 + 128) = *v7;
  sub_100006A00();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8, v9, v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    CFTypeID v12 = "";
    if (!v3) {
      CFTypeID v12 = " NOT";
    }
    *(_DWORD *)uint64_t v11 = 138412546;
    *(void *)(v11 + 4) = a1;
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v11 + 14) = v12;
    __SC_log_send();
  }
  if (v3) {
    sub_10000C178();
  }
  return v3;
}

uint64_t sub_10000B80C(uint64_t a1, const __CFString *a2)
{
  CFNullRef v2 = sub_1000034E0(a1, a2);
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (!v2 || CFGetTypeID(v2) != TypeID) {
    return 0;
  }

  return CFBooleanGetValue(v2);
}

uint64_t sub_10000B8C0(uint64_t a1)
{
  CFBooleanRef v2 = *(const __CFBoolean **)(a1 + 120);
  if (v2)
  {
    return CFBooleanGetValue(v2);
  }
  long long v4 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)token.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&token.val[4] = v4;
  CFDictionaryRef v5 = SecTaskCreateWithAuditToken(0, &token);
  if (!v5)
  {
    BOOL v8 = 1;
    goto LABEL_9;
  }
  CFDictionaryRef v6 = v5;
  uint32_t CodeSignStatus = SecTaskGetCodeSignStatus(v5);
  CFRelease(v6);
  BOOL v8 = (CodeSignStatus & 0x4000000) == 0;
  if ((CodeSignStatus & 0x4000000) == 0)
  {
LABEL_9:
    uint64_t v9 = &kCFBooleanFalse;
    goto LABEL_10;
  }
  uint64_t v9 = &kCFBooleanTrue;
LABEL_10:
  *(CFBooleanRef *)(a1 + 120) = *v9;
  sub_100006A00();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v10 = _os_log_pack_size();
    __chkstk_darwin(v10, v11, v12);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    CFTypeID v14 = "";
    *(void *)(v13 + 4) = "sessionIsPlatformBinary";
    *(_DWORD *)uint64_t v13 = 136315650;
    if (v8) {
      CFTypeID v14 = " NOT";
    }
    *(_WORD *)(v13 + 12) = 2112;
    *(void *)(v13 + 14) = a1;
    *(_WORD *)(v13 + 22) = 2080;
    *(void *)(v13 + 24) = v14;
    __SC_log_send();
  }
  if (v8) {
    return 0;
  }
  sub_10000C178();
  return 1;
}

uint64_t sub_10000BAD4(uint64_t a1, const __CFString *a2)
{
  CFDictionaryRef v3 = sub_1000034E0(a1, @"com.apple.SystemConfiguration.SCDynamicStore-write-access");
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (v3 && CFGetTypeID(v3) == TypeID)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v3, @"keys");
    CFTypeID v6 = CFArrayGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == v6)
      {
        v15.length = CFArrayGetCount(Value);
        v15.location = 0;
        if (CFArrayContainsValue(Value, v15, a2)) {
          return 1;
        }
      }
    }
    CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(v3, @"patterns");
    CFTypeID v9 = CFArrayGetTypeID();
    if (v8)
    {
      if (CFGetTypeID(v8) == v9)
      {
        CFIndex Count = CFArrayGetCount(v8);
        if (Count >= 1)
        {
          CFIndex v11 = Count;
          CFIndex v12 = 0;
          while (1)
          {
            CFNumberRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v8, v12);
            CFTypeID v14 = CFStringGetTypeID();
            if (ValueAtIndex)
            {
              if (CFGetTypeID(ValueAtIndex) == v14 && sub_10000C794(ValueAtIndex, a2)) {
                break;
              }
            }
            if (v11 == ++v12) {
              return 0;
            }
          }
          return 1;
        }
      }
    }
  }
  return 0;
}

void sub_10000BC50(id a1)
{
  qword_10007DA70 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, &kCFTypeDictionaryValueCallBacks);
  qword_10007DA88 = (uint64_t)dispatch_queue_create("SCDynamicStore/sessions", 0);
}

void sub_10000BCD0(id a1)
{
  qword_10007DA98 = _CFRuntimeRegisterClass();
}

void sub_10000BD2C(void *a1)
{
  CFBooleanRef v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  CFDictionaryRef v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  long long v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
  }
}

os_state_data_s *__cdecl sub_10000BDD8(id a1, os_state_hints_s *a2)
{
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DA70);
  if (Count > 249)
  {
    CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryApplyFunction((CFDictionaryRef)qword_10007DA70, (CFDictionaryApplierFunction)sub_10000C0AC, Mutable);
  }
  else
  {
    CFArrayRef Mutable = (void *)CFStringCreateWithFormat(0, 0, @"n = %ld", Count);
  }
  _SCSerialize();
  CFRelease(Mutable);
  long long v4 = (os_state_data_s *)malloc_type_calloc(1uLL, 0xC8uLL, 0xE247DA85uLL);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    v4->var0 = 1;
    v4->var1.var1 = 0;
    __strlcpy_chk();
  }
  else
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      _os_log_pack_size();
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    return 0;
  }
  return v5;
}

void sub_10000C0AC(int a1, uint64_t a2, CFDictionaryRef theDict)
{
  long long v4 = *(const void **)(a2 + 40);
  if (v4)
  {
    int valuePtr = 0;
    value = 0;
    if (CFDictionaryGetValueIfPresent(theDict, v4, (const void **)&value)
      && CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr))
    {
      int v6 = valuePtr + 1;
    }
    else
    {
      int v6 = 1;
    }
    int valuePtr = v6;
    value = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(theDict, *(const void **)(a2 + 40), value);
    CFRelease(value);
  }
}

uint64_t sub_10000C178()
{
  uint64_t result = __chkstk_darwin();
  if (byte_10007D9E8)
  {
    uint64_t v2 = v1;
    CFDictionaryRef v3 = (audit_token_t *)result;
    bzero(v5, 0x1000uLL);
    uint64_t result = proc_pidpath_audittoken(v3, v5, 0x1000u);
    if ((int)result >= 1)
    {
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v4 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v4 = 136315394;
        *(void *)(v4 + 4) = v2;
        *(_WORD *)(v4 + 12) = 2080;
        *(void *)(v4 + 14) = v5;
        return __SC_log_send();
      }
    }
  }
  return result;
}

CFDictionaryRef sub_10000C2F0(uint64_t a1, const __CFArray *a2)
{
  long long v4 = *(_OWORD *)(a1 + 84);
  *(_OWORD *)token.val = *(_OWORD *)(a1 + 68);
  *(_OWORD *)&token.val[4] = v4;
  CFDictionaryRef v5 = SecTaskCreateWithAuditToken(0, &token);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  *(void *)token.val = 0;
  CFDictionaryRef v7 = SecTaskCopyValuesForEntitlements(v5, a2, (CFErrorRef *)&token);
  if (!v7 && *(void *)token.val)
  {
    CFIndex Code = CFErrorGetCode(*(CFErrorRef *)token.val);
    CFErrorDomain Domain = CFErrorGetDomain(*(CFErrorRef *)token.val);
    if (!CFEqual(Domain, kCFErrorDomainMach) || Code != -536870911 && Code != -536870160)
    {
      sub_100006A00();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __chkstk_darwin();
        __error();
        uint64_t v10 = _os_log_pack_fill();
        uint64_t v11 = *(void *)token.val;
        uint64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)uint64_t v10 = 138412802;
        *(void *)(v10 + 4) = a2;
        *(_WORD *)(v10 + 12) = 2112;
        *(void *)(v10 + 14) = v11;
        *(_WORD *)(v10 + 22) = 2112;
        *(void *)(v10 + 24) = v12;
        __SC_log_send();
      }
    }
    CFRelease(*(CFTypeRef *)token.val);
  }
  CFRelease(v6);
  return v7;
}

CFArrayRef sub_10000C4CC(__CFString *a1)
{
  uint64_t v2 = sub_10000C5A0(a1);
  if (v2) {
    goto LABEL_4;
  }
  CFDictionaryRef v3 = sub_10000C644(a1);
  if (v3)
  {
    uint64_t v2 = v3;
    CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v3, 0);
    BytePtr = (regex_t *)CFDataGetBytePtr(ValueAtIndex);
    regfree(BytePtr);
LABEL_4:
    v8.location = 0;
    v8.length = 2;
    CFArrayReplaceValues(v2, v8, 0, 0);
    CFArrayRef Copy = CFArrayCreateCopy(0, v2);
    CFRelease(v2);
    return Copy;
  }
  return 0;
}

CFMutableArrayRef sub_10000C5A0(void *key)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9C0, key);
  if (!Value) {
    return 0;
  }

  return CFArrayCreateMutableCopy(0, 0, Value);
}

__CFArray *sub_10000C644(const __CFString *a1)
{
  CFTypeRef cf = 0;
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFDictionaryRef v3 = CFDataCreateMutable(0, 32);
  CFDataSetLength(v3, 32);
  if (sub_10000D144(a1, v3, &cf))
  {
    CFArrayAppendValue(Mutable, v3);
    CFArrayRef v4 = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v4);
    context[0] = Mutable;
    context[1] = v3;
    CFDictionaryRef v5 = (const __CFDictionary *)qword_10007D9B8;
    CFAllocatorRef v6 = CFGetAllocator((CFTypeRef)qword_10007D9B8);
    CFDictionaryRef Copy = CFDictionaryCreateCopy(v6, v5);
    CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)sub_10000D4D8, context);
    CFRelease(Copy);
    CFRelease(v3);
  }
  else
  {
    CFRelease(cf);
    CFRelease(v3);
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

uint64_t sub_10000C794(__CFString *a1, const __CFString *a2)
{
  CFArrayRef v4 = sub_10000C5A0(a1);
  CFArrayRef v5 = v4;
  if (!v4)
  {
    CFDictionaryRef v7 = sub_10000C644(a1);
    if (!v7) {
      return 0;
    }
    goto LABEL_6;
  }
  CFIndex Count = CFArrayGetCount(v4);
  CFDictionaryRef v7 = v5;
  if (Count < 3 || (v12.length = Count - 2, v12.location = 2, CFDictionaryRef v7 = v5, !CFArrayContainsValue(v5, v12, a2)))
  {
LABEL_6:
    CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v7, 0);
    uint64_t v8 = sub_10000C890(a2, ValueAtIndex);
    if (!v5)
    {
      BytePtr = (regex_t *)CFDataGetBytePtr(ValueAtIndex);
      regfree(BytePtr);
    }
    CFArrayRef v5 = v7;
    goto LABEL_9;
  }
  uint64_t v8 = 1;
LABEL_9:
  CFRelease(v5);
  return v8;
}

uint64_t sub_10000C890(const __CFString *a1, const __CFData *a2)
{
  CFIndex Length = CFStringGetLength(a1);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
  if (MaximumSizeForEncoding < 256) {
    CFArrayRef v5 = v12;
  }
  else {
    CFArrayRef v5 = (char *)CFAllocatorAllocate(0, MaximumSizeForEncoding + 1, 0);
  }
  if (_SC_cfstring_to_cstring())
  {
    BytePtr = CFDataGetBytePtr(a2);
    int v7 = regexec((const regex_t *)BytePtr, v5, 0, 0, 0);
    uint64_t v8 = 0;
    if (v7 == 1) {
      goto LABEL_11;
    }
    if (!v7)
    {
      uint64_t v8 = 1;
      goto LABEL_11;
    }
    regerror(v7, (const regex_t *)BytePtr, v11, 0x100uLL);
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v11;
      __SC_log_send();
    }
  }
  else
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
  }
  uint64_t v8 = 0;
LABEL_11:
  if (v5 != v12) {
    CFAllocatorDeallocate(0, v5);
  }
  return v8;
}

__CFArray *sub_10000CB14(__CFString *a1, const void *a2)
{
  CFArrayRef v4 = sub_10000C5A0(a1);
  if (v4 || (uint64_t result = sub_10000C644(a1), (v4 = result) != 0))
  {
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(v4, 1);
    MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(0, 0, ValueAtIndex);
    CFArrayAppendValue(MutableCopy, a2);
    CFArraySetValueAtIndex(v4, 1, MutableCopy);
    CFRelease(MutableCopy);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9C0, a1, v4);
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 3)
    {
      CFIndex v9 = Count;
      for (CFIndex i = 2; i != v9; ++i)
      {
        uint64_t v11 = CFArrayGetValueAtIndex(v4, i);
        sub_10000658C(a2, v11);
      }
    }
    CFRelease(v4);
    return (__CFArray *)1;
  }
  return result;
}

void sub_10000CC30(void *a1, const void *a2)
{
  CFArrayRef v4 = sub_10000C5A0(a1);
  if (!v4) {
    sub_100064E58();
  }
  CFArrayRef v5 = v4;
  CFIndex Count = CFArrayGetCount(v4);
  if (Count > 2)
  {
    CFIndex v7 = Count;
    for (CFIndex i = 2; i != v7; ++i)
    {
      CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
      sub_100008704(a2, ValueAtIndex);
    }
  }
  CFArrayRef v10 = (const __CFArray *)CFArrayGetValueAtIndex(v5, 1);
  CFIndex v11 = CFArrayGetCount(v10);
  if (v11 < 2)
  {
    CFDataRef v15 = (const __CFData *)CFArrayGetValueAtIndex(v5, 0);
    BytePtr = (regex_t *)CFDataGetBytePtr(v15);
    regfree(BytePtr);
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007D9C0, a1);
  }
  else
  {
    CFIndex v12 = v11;
    MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(0, 0, v10);
    v18.location = 0;
    v18.length = v12;
    FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(MutableCopy, v18, a2);
    CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
    CFArraySetValueAtIndex(v5, 1, MutableCopy);
    CFRelease(MutableCopy);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9C0, a1, v5);
  }

  CFRelease(v5);
}

void sub_10000CDA0(void *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)qword_10007D9C0;
  CFAllocatorRef v3 = CFGetAllocator((CFTypeRef)qword_10007D9C0);
  CFDictionaryRef Copy = CFDictionaryCreateCopy(v3, v2);
  CFDictionaryApplyFunction(Copy, (CFDictionaryApplierFunction)sub_10000CE40, a1);

  CFRelease(Copy);
}

void sub_10000CE40(const void *a1, const __CFArray *a2, CFStringRef theString)
{
  CFIndex Length = CFStringGetLength(theString);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
  if (MaximumSizeForEncoding < 256) {
    uint64_t v8 = v26;
  }
  else {
    uint64_t v8 = (char *)CFAllocatorAllocate(0, MaximumSizeForEncoding + 1, 0);
  }
  if (_SC_cfstring_to_cstring())
  {
    CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(a2, 0);
    BytePtr = CFDataGetBytePtr(ValueAtIndex);
    int v11 = regexec((const regex_t *)BytePtr, v8, 0, 0, 0);
    if (v11 != 1)
    {
      if (v11)
      {
        regerror(v11, (const regex_t *)BytePtr, v25, 0x100uLL);
        sub_100006A00();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v21 = _os_log_pack_size();
          __chkstk_darwin(v21, v22, v23);
          __error();
          uint64_t v24 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v24 = 136315138;
          *(void *)(v24 + 4) = v25;
          __SC_log_send();
        }
      }
      else
      {
        CFArrayRef v12 = (const __CFArray *)CFArrayGetValueAtIndex(a2, 1);
        CFIndex Count = CFArrayGetCount(v12);
        if (Count >= 1)
        {
          CFIndex v14 = Count;
          for (CFIndex i = 0; i != v14; ++i)
          {
            CFTypeID v16 = CFArrayGetValueAtIndex(v12, i);
            sub_10000658C(v16, theString);
          }
        }
        MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(0, 0, a2);
        CFArrayAppendValue(MutableCopy, theString);
        CFDictionarySetValue((CFMutableDictionaryRef)qword_10007D9C0, a1, MutableCopy);
        CFRelease(MutableCopy);
      }
    }
  }
  else
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v18 = _os_log_pack_size();
      __chkstk_darwin(v18, v19, v20);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
  }
  if (v8 != v26) {
    CFAllocatorDeallocate(0, v8);
  }
}

uint64_t sub_10000D144(const __CFString *a1, const __CFData *a2, void *a3)
{
  CFStringRef v5 = a1;
  CFIndex v19 = 0;
  if (!CFStringGetLength(a1))
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
  }
  int HasPrefix = CFStringHasPrefix(v5, @"^");
  if (!CFStringHasSuffix(v5, @"$") || CFStringHasSuffix(v5, @"\\$"))
  {
    CFIndex v7 = "";
    if (!HasPrefix) {
      CFIndex v7 = "^";
    }
    uint64_t v8 = "$";
    goto LABEL_9;
  }
  if (!HasPrefix)
  {
    uint64_t v8 = "";
    CFIndex v7 = "^";
LABEL_9:
    CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"%s%@%s", v7, v5, v8);
    int v9 = 1;
    goto LABEL_10;
  }
  int v9 = 0;
LABEL_10:
  v22.length = CFStringGetLength(v5);
  v22.location = 0;
  if (CFStringGetBytes(v5, v22, 0x600u, 0, 0, 0, 0, &v19) <= 0)
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      _os_log_pack_size();
      __chkstk_darwin();
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 138412290;
      *(void *)(v12 + 4) = v5;
      __SC_log_send();
    }
    CFIndex v19 = 256;
  }
  else
  {
    uint64_t v10 = v19++;
    if (v10 >= 256)
    {
      int v11 = (char *)CFAllocatorAllocate(0, v10 + 1, 0);
      goto LABEL_17;
    }
  }
  int v11 = v21;
LABEL_17:
  uint64_t v13 = _SC_cfstring_to_cstring();
  if (v9) {
    CFRelease(v5);
  }
  if (v13)
  {
    BytePtr = (regex_t *)CFDataGetBytePtr(a2);
    uint64_t v15 = 1;
    int v16 = regcomp(BytePtr, v11, 1);
    if (!v16) {
      goto LABEL_24;
    }
    regerror(v16, BytePtr, v20, 0x100uLL);
    uint64_t v17 = (void *)CFStringCreateWithCString(0, v20, 0x600u);
  }
  else
  {
    uint64_t v17 = (void *)CFRetain(@"could not convert pattern to regex string");
  }
  uint64_t v15 = 0;
  *a3 = v17;
LABEL_24:
  if (v11 != v21) {
    CFAllocatorDeallocate(0, v11);
  }
  return v15;
}

void sub_10000D4D8(const __CFString *a1, CFDictionaryRef theDict, __CFArray **a3)
{
  CFArrayRef v4 = *a3;
  CFDataRef v5 = a3[1];
  if (CFDictionaryContainsKey(theDict, @"data") && sub_10000C890(a1, v5))
  {
    CFArrayAppendValue(v4, a1);
  }
}

uint64_t sub_10000D5A4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  CFAllocatorRef v3 = sub_100006A00();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG)) {
    sub_100064F14(v2, v3);
  }
  sub_10000D748(*a1, 0);
  sub_10000D748(*a1, 1);
  sub_10000F48C((_DWORD *)*a1);
  uint64_t v4 = sub_1000047CC(*(_DWORD *)(v2 + 40));
  CFArrayRef v5 = *(const __CFArray **)(v4 + 48);
  if (v5)
  {
    CFIndex Count = CFArrayGetCount(v5);
    CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%u", *(unsigned int *)(v2 + 40));
    CFStringRef v8 = v7;
    if (Count < 1)
    {
      CFRelease(v7);
    }
    else
    {
      CFIndex v9 = 0;
      int v10 = 0;
      do
      {
        CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 48), v9);
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, ValueAtIndex);
        if (Value)
        {
          uint64_t v13 = CFDictionaryGetValue(Value, @"session");
          if (v13)
          {
            if (CFEqual(v8, v13))
            {
              int v10 = 1;
              sub_1000020A0(*a1, ValueAtIndex, 1);
            }
          }
        }
        ++v9;
      }
      while (Count != v9);
      CFRelease(v8);
      if (v10) {
        sub_100004C70();
      }
    }
  }
  *(_DWORD *)(v2 + 40) = 0;
  CFRelease((CFTypeRef)*a1);
  *a1 = 0;
  return 0;
}

void sub_10000D748(uint64_t a1, int a2)
{
  uint64_t v2 = 176;
  if (!a2) {
    uint64_t v2 = 168;
  }
  CFArrayRef v3 = *(const __CFArray **)(a1 + v2);
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + v2));
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFArrayRef Copy = CFArrayCreateCopy(0, v3);
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFDataRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(Copy, i);
        sub_10000EE30(a1, ValueAtIndex, a2, 1);
      }
      CFRelease(Copy);
    }
  }
}

void sub_10000D860(const __CFString *a1)
{
  CFRange v2 = CFStringFind(a1, @":", 0);
  v11.location = 0;
  v11.length = v2.location;
  CFStringRef v3 = CFStringCreateWithSubstring(0, a1, v11);
  v12.length = CFStringGetLength(a1) - (v2.location + v2.length);
  v12.location = v2.location + v2.length;
  CFStringRef v4 = CFStringCreateWithSubstring(0, a1, v12);
  uint64_t v5 = sub_10000B030();
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayRef v7 = *(const __CFArray **)(v5 + 48);
    v10.length = CFArrayGetCount(v7);
    v10.location = 0;
    FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(v7, v10, v4);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v6 + 48), FirstIndexOfValue);
      if (!CFArrayGetCount(*(CFArrayRef *)(v6 + 48)))
      {
        CFRelease(*(CFTypeRef *)(v6 + 48));
        *(void *)(v6 + 48) = 0;
      }
    }
  }
  CFRelease(v3);

  CFRelease(v4);
}

uint64_t sub_10000D988(uint64_t a1, __CFString *a2, int a3, CFArrayRef *a4)
{
  CFStringRef v8 = sub_100006A00();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v11 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v11;
    if (a3) {
      CFRange v12 = "pattern";
    }
    else {
      CFRange v12 = "key";
    }
    *(_WORD *)&buf[8] = 2080;
    *(void *)&buf[10] = v12;
    *(_WORD *)&buf[18] = 2112;
    *(void *)&buf[20] = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "list    : %5u : %s : %@", buf, 0x1Cu);
    if (a3) {
      goto LABEL_3;
    }
  }
  else if (a3)
  {
LABEL_3:
    CFArrayRef v9 = sub_10000C4CC(a2);
    *a4 = v9;
    if (v9) {
      return 0;
    }
    else {
      return 1001;
    }
  }
  uint64_t Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007D9B8);
  CFArrayRef Mutable = CFArrayCreateMutable(0, Count, &kCFTypeArrayCallBacks);
  if (Count >= 1)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v20, 0, sizeof(v20));
    if ((unint64_t)Count < 0x41)
    {
      int v16 = (const void **)v20;
      uint64_t v15 = (const void **)buf;
    }
    else
    {
      uint64_t v15 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
      int v16 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
    }
    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_10007D9B8, v15, v16);
    for (uint64_t i = 0; i != Count; ++i)
    {
      CFStringRef v18 = (const __CFString *)v15[i];
      CFDictionaryRef v19 = (const __CFDictionary *)v16[i];
      if ((!CFStringGetLength(a2) || CFStringHasPrefix(v18, a2)) && CFDictionaryContainsKey(v19, @"data")) {
        CFArrayAppendValue(Mutable, v18);
      }
    }
    if (v15 != (const void **)buf)
    {
      CFAllocatorDeallocate(0, v15);
      CFAllocatorDeallocate(0, v16);
    }
  }
  *a4 = CFArrayCreateCopy(0, Mutable);
  CFRelease(Mutable);
  return 0;
}

uint64_t sub_10000DC4C(int a1, uint64_t a2, uint64_t a3, int a4, void *a5, _DWORD *a6, int *a7)
{
  uint64_t v19 = 0;
  CFTypeRef cf = 0;
  *a5 = 0;
  *a6 = 0;
  if (!_SCUnserializeString()) {
    goto LABEL_7;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (!cf || CFGetTypeID(cf) != TypeID)
  {
    int v16 = 1002;
    goto LABEL_9;
  }
  uint64_t v12 = sub_1000047CC(a1);
  if (!v12)
  {
    int v16 = 2001;
    goto LABEL_9;
  }
  CFArrayRef v18 = 0;
  int v13 = sub_10000D988(*(void *)(v12 + 56), (__CFString *)cf, a4 != 0, &v18);
  *a7 = v13;
  if (!v13)
  {
    CFArrayRef v14 = v18;
    int v15 = _SCSerialize();
    *a6 = v19;
    CFRelease(v14);
    if (!v15)
    {
LABEL_7:
      int v16 = 1001;
LABEL_9:
      *a7 = v16;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t sub_10000DD98(uint64_t a1, void *a2, const void *a3)
{
  CFTypeRef cf = 0;
  uint64_t v6 = sub_100006A00();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
    sub_100064F90(a1, (uint64_t)a2, v6);
  }
  uint64_t v7 = sub_1000037F0(a1, a2, 0, &cf, 1);
  if (v7 == 1004)
  {
    uint64_t v8 = sub_1000048E0(a1, a2, a3, 1);
    sub_100004C70();
  }
  else
  {
    uint64_t v8 = v7;
    if (!v7)
    {
      CFRelease(cf);
      return 1005;
    }
  }
  return v8;
}

uint64_t sub_10000DE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, int *a7)
{
  *a6 = 0;
  *a7 = 0;
  if (!_SCUnserializeString()) {
    *a7 = 1001;
  }
  if (!_SCUnserializeData())
  {
    int v8 = 1001;
    goto LABEL_7;
  }
  if (!*a7)
  {
    CFStringGetTypeID();
    int v8 = 1002;
LABEL_7:
    *a7 = v8;
  }
  return 0;
}

uint64_t sub_10000DFB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, int *a7)
{
  *a6 = 0;
  *a7 = 0;
  if (!_SCUnserializeString()) {
    *a7 = 1001;
  }
  if (!_SCUnserializeData())
  {
    int v8 = 1001;
    goto LABEL_7;
  }
  if (!*a7)
  {
    CFStringGetTypeID();
    int v8 = 1002;
LABEL_7:
    *a7 = v8;
  }
  return 0;
}

uint64_t sub_10000E108(int a1, uint64_t a2, int a3, uint64_t a4, int a5, void *a6, _DWORD *a7, int *a8)
{
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  if (a2 && a3 && !_SCUnserialize())
  {
    *a8 = 1001;
    if (!a4) {
      goto LABEL_7;
    }
  }
  else if (!a4)
  {
    goto LABEL_7;
  }
  if (a5 && !_SCUnserialize())
  {
    CFDictionaryRef v13 = 0;
    goto LABEL_21;
  }
LABEL_7:
  if (*a8)
  {
    CFDictionaryRef v13 = 0;
    goto LABEL_24;
  }
  uint64_t v14 = sub_1000047CC(a1);
  if (!v14)
  {
    CFDictionaryRef v13 = 0;
    int v20 = 2001;
    goto LABEL_23;
  }
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 + 56);
  uint64_t v17 = sub_100006A00();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    int v22 = *(_DWORD *)(v16 + 40);
    LODWORD(context) = 67109632;
    HIDWORD(context) = v22;
    *(_WORD *)long long v24 = 2048;
    *(void *)&v24[2] = 0;
    *(_WORD *)&v24[10] = 2048;
    *(void *)&v24[12] = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "copy m  : %5u : %ld keys, %ld patterns", (uint8_t *)&context, 0x1Cu);
  }
  CFDictionaryRef context = 0;
  *(void *)long long v24 = v16;
  *(void *)&v24[8] = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef v13 = context;
  CFDictionaryRef v18 = *(const __CFDictionary **)&v24[8];
  if (*(void *)&v24[8])
  {
    if (context && CFDictionaryGetCount(*(CFDictionaryRef *)&v24[8]) >= 1)
    {
      CFDictionaryRef context = (const __CFDictionary *)v15;
      *(void *)long long v24 = CFDictionaryCreateMutableCopy(0, 0, v18);
      CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)sub_10000E454, &context);
      CFRelease(v18);
      CFDictionaryRef v18 = *(const __CFDictionary **)v24;
    }
    int v19 = _SCSerialize();
    *a7 = 0;
    CFRelease(v18);
    if (!v19)
    {
LABEL_21:
      int v20 = 1001;
LABEL_23:
      *a8 = v20;
    }
  }
LABEL_24:
  if (v13) {
    CFRelease(v13);
  }
  return 0;
}

void sub_10000E454(void *a1, const __CFDictionary *a2, uint64_t *a3)
{
  int v5 = sub_10000301C(*a3, a1, a2);
  if (v5 == 10100 || v5 == 0)
  {
    uint64_t v7 = sub_100006A00();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
      sub_100065044();
    }
  }
  else
  {
    int v8 = (__CFDictionary *)a3[1];
    CFDictionaryRemoveValue(v8, a1);
  }
}

void sub_10000E540(void *a1, uint64_t a2)
{
  int v8 = 0;
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1)
  {
    if (CFGetTypeID(a1) == TypeID)
    {
      value = 0;
      if (!sub_1000037F0(*(void *)(a2 + 8), a1, &v8, (const void **)&value, 1))
      {
        CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a2 + 16), a1, value);
        CFRelease(value);
        int v5 = v8;
        if (v8)
        {
          CFArrayRef Mutable = *(__CFDictionary **)a2;
          if (!*(void *)a2)
          {
            CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            *(void *)a2 = Mutable;
            int v5 = v8;
          }
          CFDictionarySetValue(Mutable, a1, v5);
        }
        else
        {
          uint64_t v7 = sub_100006A00();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
            sub_1000650B8();
          }
        }
      }
    }
  }
}

void sub_10000E660(__CFString *a1, uint64_t *a2)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    CFArrayRef theArray = 0;
    if (!sub_10000D988(a2[1], a1, 1, &theArray))
    {
      CFArrayRef v5 = theArray;
      v7.length = CFArrayGetCount(theArray);
      v7.location = 0;
      CFArrayApplyFunction(v5, v7, (CFArrayApplierFunction)sub_10000E540, a2);
      CFRelease(theArray);
    }
  }
}

void sub_10000E748(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x12u);
}

CFTypeID sub_10000E768(void *a1, const void *a2, uint64_t a3)
{
  CFTypeID result = CFStringGetTypeID();
  if (a1)
  {
    CFTypeID v7 = result;
    CFTypeID result = CFGetTypeID(a1);
    if (result == v7)
    {
      CFTypeID result = CFDataGetTypeID();
      if (a2)
      {
        CFTypeID v8 = result;
        CFTypeID result = CFGetTypeID(a2);
        if (result == v8)
        {
          return sub_1000048E0(a3, a1, a2, 1);
        }
      }
    }
  }
  return result;
}

CFTypeID sub_10000E850(void *a1, uint64_t a2)
{
  CFTypeID result = CFStringGetTypeID();
  if (a1)
  {
    CFTypeID v5 = result;
    CFTypeID result = CFGetTypeID(a1);
    if (result == v5)
    {
      return sub_10000EA0C(a2, a1, 1);
    }
  }
  return result;
}

uint64_t sub_10000E914(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (_SCUnserializeString())
  {
    CFStringGetTypeID();
    int v5 = 1002;
  }
  else
  {
    int v5 = 1001;
  }
  *a4 = v5;
  return 0;
}

uint64_t sub_10000EA0C(uint64_t a1, void *a2, int a3)
{
  value = 0;
  uint64_t v6 = sub_100006A00();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    CFArrayRef v9 = "*notify";
    int v10 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)buf = 136315650;
    if (!a3) {
      CFArrayRef v9 = "notify ";
    }
    CFDictionaryRef v13 = v9;
    __int16 v14 = 1024;
    int v15 = v10;
    __int16 v16 = 2112;
    uint64_t v17 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s : %5u : %@", buf, 0x1Cu);
  }
  CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007D9B8, a2);
  if (v7 && CFDictionaryGetValueIfPresent(v7, @"data", (const void **)&value))
  {
    sub_1000048E0(a1, a2, value, 1);
    if (!a3) {
      goto LABEL_7;
    }
  }
  else
  {
    _SCSerialize();
    sub_1000048E0(a1, a2, value, 1);
    sub_1000020A0(a1, a2, 1);
    CFRelease(value);
    if (!a3) {
LABEL_7:
    }
      sub_100004C70();
  }
  return 0;
}

uint64_t sub_10000EB90(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  if (_SCUnserializeString())
  {
    CFStringGetTypeID();
    int v5 = 1002;
  }
  else
  {
    int v5 = 1001;
  }
  *a4 = v5;
  return 0;
}

uint64_t sub_10000EC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (_SCUnserializeString())
  {
    CFStringGetTypeID();
    int v6 = 1002;
  }
  else
  {
    int v6 = 1001;
  }
  *a5 = v6;
  return 0;
}

uint64_t sub_10000ED88(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 28))
  {
    CFStringRef v3 = (void *)result;
    CFArrayRef v4 = *(const __CFArray **)(a2 + 16);
    if (!v4
      || (v5.length = CFArrayGetCount(*(CFArrayRef *)(a2 + 16)),
          v5.location = 0,
          CFTypeID result = CFArrayContainsValue(v4, v5, v3),
          !result))
    {
      CFTypeID result = sub_10000EE30(*(void *)a2, v3, *(unsigned __int8 *)(a2 + 24), 1);
      *(_DWORD *)(a2 + 28) = result;
    }
  }
  return result;
}

uint64_t sub_10000EE30(uint64_t a1, void *a2, int a3, int a4)
{
  CFTypeID v8 = sub_100006A00();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    int v11 = "*watch-";
    int v12 = *(_DWORD *)(a1 + 40);
    if (!a4) {
      int v11 = "watch- ";
    }
    int v14 = 136315906;
    int v15 = v11;
    __int16 v16 = 1024;
    int v17 = v12;
    if (a3) {
      CFDictionaryRef v13 = "pattern";
    }
    else {
      CFDictionaryRef v13 = "key";
    }
    __int16 v18 = 2080;
    int v19 = v13;
    __int16 v20 = 2112;
    uint64_t v21 = a2;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s : %5u : %s : %@", (uint8_t *)&v14, 0x26u);
    if (a3) {
      goto LABEL_3;
    }
  }
  else if (a3)
  {
LABEL_3:
    uint64_t result = sub_10000EFB4(*(const __CFArray **)(a1 + 176), a2);
    if (result) {
      return result;
    }
    CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 40));
    sub_10000CC30(a2, v10);
    goto LABEL_13;
  }
  uint64_t result = sub_10000EFB4(*(const __CFArray **)(a1 + 168), a2);
  if (result) {
    return result;
  }
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + 40));
  sub_100008704(v10, a2);
LABEL_13:
  CFRelease(v10);
  return 0;
}

uint64_t sub_10000EFB4(const __CFArray *a1, const void *a2)
{
  if (!a1) {
    return 1004;
  }
  v6.length = CFArrayGetCount(a1);
  v6.location = 0;
  FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(a1, v6, a2);
  if (FirstIndexOfValue == -1) {
    return 1004;
  }
  CFArrayRemoveValueAtIndex(a1, FirstIndexOfValue);
  return 0;
}

uint64_t sub_10000F048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5)
{
  if (_SCUnserializeString())
  {
    CFStringGetTypeID();
    int v6 = 1002;
  }
  else
  {
    int v6 = 1001;
  }
  *a5 = v6;
  return 0;
}

uint64_t sub_10000F144(uint64_t a1, CFArrayRef *a2)
{
  uint64_t v3 = sub_1000047CC(*(_DWORD *)(a1 + 40));
  CFArrayRef v4 = *(const __CFArray **)(v3 + 32);
  if (v4)
  {
    *a2 = v4;
    *(void *)(v3 + 32) = 0;
  }
  else
  {
    *a2 = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);
  }
  return 0;
}

uint64_t sub_10000F1D4(int a1, void *a2, _DWORD *a3, int *a4)
{
  uint64_t v7 = sub_1000047CC(a1);
  *a2 = 0;
  *a3 = 0;
  if (!v7)
  {
    int v10 = 2001;
    goto LABEL_5;
  }
  CFArrayRef v12 = 0;
  uint64_t v13 = 0;
  sub_10000F144(*(void *)(v7 + 56), &v12);
  *a4 = 0;
  CFArrayRef v8 = v12;
  int v9 = _SCSerialize();
  *a3 = v13;
  CFRelease(v8);
  if (!v9)
  {
    int v10 = 1001;
LABEL_5:
    *a4 = v10;
  }
  return 0;
}

uint64_t sub_10000F2A0(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48)) {
    return 2003;
  }
  CFRange v2 = (const void *)(a1 + 40);
  if (*(void *)(sub_1000047CC(*(_DWORD *)(a1 + 40)) + 32))
  {
    if (!qword_10007D9E0) {
      qword_10007D9E0 = (uint64_t)CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
    }
    CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, v2);
    CFSetAddValue((CFMutableSetRef)qword_10007D9E0, v3);
    CFRelease(v3);
  }
  return 0;
}

uint64_t sub_10000F368(int a1, mach_port_name_t a2, int a3, int *a4)
{
  uint64_t v7 = sub_1000047CC(a1);
  int v8 = fileport_makefd();
  mach_port_deallocate(mach_task_self_, a2);
  if (v8 < 0)
  {
    *a4 = *__error();
    return 0;
  }
  int v9 = fcntl(v8, 3, 0);
  if (v9 == -1 || fcntl(v8, 4, v9 | 4u) == -1)
  {
    int v12 = *__error();
LABEL_8:
    *a4 = v12;
    goto LABEL_9;
  }
  if (!v7)
  {
    int v12 = 2001;
    goto LABEL_8;
  }
  int v10 = *(_DWORD **)(v7 + 56);
  int v11 = sub_10000F2A0((uint64_t)v10);
  *a4 = v11;
  if (v11)
  {
LABEL_9:
    close(v8);
    return 0;
  }
  v10[12] = 3;
  v10[48] = v8;
  v10[49] = a3;
  return 0;
}

uint64_t sub_10000F48C(_DWORD *a1)
{
  mach_port_name_t v2 = a1[46];
  if (v2)
  {
    mach_port_deallocate(mach_task_self_, v2);
    a1[46] = 0;
  }
  int v3 = a1[48];
  if (v3 != -1)
  {
    close(v3);
    a1[48] = -1;
  }
  if (qword_10007D9E0)
  {
    CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, a1 + 10);
    CFSetRemoveValue((CFMutableSetRef)qword_10007D9E0, v4);
    CFRelease(v4);
    if (!CFSetGetCount((CFSetRef)qword_10007D9E0))
    {
      CFRelease((CFTypeRef)qword_10007D9E0);
      qword_10007D9E0 = 0;
    }
  }
  a1[12] = 0;
  return 0;
}

uint64_t sub_10000F574(int a1, int *a2)
{
  uint64_t v3 = sub_1000047CC(a1);
  if (v3)
  {
    sub_10000F48C(*(_DWORD **)(v3 + 56));
    int v4 = 0;
  }
  else
  {
    int v4 = 2001;
  }
  *a2 = v4;
  return 0;
}

uint64_t sub_10000F5EC()
{
  unlink("/var/tmp/configd-state");
  int v0 = open("/var/tmp/configd-state", 3585, 420);
  if (v0 == -1) {
    return 1001;
  }
  uint64_t v1 = fdopen(v0, "w");
  if (!v1) {
    return 1001;
  }
  mach_port_name_t v2 = v1;
  SCPrint();
  CFRunLoopGetCurrent();
  SCPrint();
  sub_10000B344((uint64_t)v2);
  fclose(v2);
  unlink("/var/tmp/configd-store.plist");
  int v3 = open("/var/tmp/configd-store.plist", 3585, 420);
  if (v3 == -1) {
    return 1001;
  }
  int v4 = v3;
  CFDictionaryRef v5 = sub_10000F934((const __CFDictionary *)qword_10007D9B8);
  CFDataRef Data = CFPropertyListCreateData(0, v5, kCFPropertyListXMLFormat_v1_0, 0, 0);
  CFRelease(v5);
  if (!Data)
  {
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled())
    {
LABEL_12:
      close(v4);
      return 1001;
    }
LABEL_11:
    uint64_t v15 = _os_log_pack_size();
    __chkstk_darwin(v15, v16, v17);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
    goto LABEL_12;
  }
  BytePtr = CFDataGetBytePtr(Data);
  size_t Length = CFDataGetLength(Data);
  write(v4, BytePtr, Length);
  close(v4);
  CFRelease(Data);
  unlink("/var/tmp/configd-pattern.plist");
  int v9 = open("/var/tmp/configd-pattern.plist", 3585, 420);
  if (v9 != -1)
  {
    int v4 = v9;
    CFDataRef v10 = CFPropertyListCreateData(0, (CFPropertyListRef)qword_10007D9C0, kCFPropertyListXMLFormat_v1_0, 0, 0);
    if (v10)
    {
      CFDataRef v11 = v10;
      int v12 = CFDataGetBytePtr(v10);
      size_t v13 = CFDataGetLength(v11);
      write(v4, v12, v13);
      close(v4);
      CFRelease(v11);
      return 0;
    }
    sub_100006A00();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  return 1001;
}

CFDictionaryRef sub_10000F934(const __CFDictionary *a1)
{
  memset(v22, 0, 512);
  memset(v21, 0, 512);
  memset(v20, 0, 512);
  uint64_t Count = CFDictionaryGetCount(a1);
  CFIndex v3 = Count;
  if (Count <= 0) {
    return CFDictionaryCreate(0, v22, v21, Count, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  if ((unint64_t)Count < 0x65)
  {
    int v4 = v22;
    int v6 = v21;
    CFDictionaryRef v5 = (const void **)v20;
  }
  else
  {
    int v4 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
    CFDictionaryRef v5 = (const void **)CFAllocatorAllocate(0, 8 * v3, 0);
    int v6 = (const void **)CFAllocatorAllocate(0, 8 * v3, 0);
  }
  bzero(v6, 8 * v3);
  CFDictionaryGetKeysAndValues(a1, v4, v5);
  uint64_t v8 = 0;
  *(void *)&long long v9 = 138412290;
  long long v17 = v9;
  do
  {
    if (CFDictionaryGetValue((CFDictionaryRef)v5[v8], @"data"))
    {
      int v19 = 0;
      v6[v8] = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v5[v8]);
      if (_SCUnserialize())
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v6[v8], @"data", v19);
        CFRelease(v19);
      }
      else
      {
        sub_100006A00();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v10 = _os_log_pack_size();
          __int16 v18 = &v17;
          __chkstk_darwin(v10, v11, v12);
          __error();
          uint64_t v13 = _os_log_pack_fill();
          int v14 = v4[v8];
          *(_DWORD *)uint64_t v13 = v17;
          *(void *)(v13 + 4) = v14;
          __SC_log_send();
        }
      }
    }
    else
    {
      v6[v8] = CFRetain(v5[v8]);
    }
    ++v8;
  }
  while (v3 != v8);
  CFDictionaryRef v7 = CFDictionaryCreate(0, v4, v6, v3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v15 = 0;
  do
    CFRelease(v6[v15++]);
  while (v3 != v15);
  if (v4 != v22)
  {
    CFAllocatorDeallocate(0, v4);
    CFAllocatorDeallocate(0, v5);
    CFAllocatorDeallocate(0, v6);
  }
  return v7;
}

uint64_t sub_10000FD58(int a1, _DWORD *a2)
{
  uint64_t v3 = sub_1000047CC(a1);
  if (!v3) {
    return 2001;
  }
  if (!sub_10000B5B4(v3)) {
    return 1003;
  }
  int v4 = sub_10000F5EC();
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

uint64_t sub_10000FDDC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 20);
  if ((v1 - 20030) >= 0xFFFFFFE2) {
    return (uint64_t)*(&off_100075DE8 + 5 * (v1 - 20000) + 5);
  }
  else {
    return 0;
  }
}

uint64_t sub_10000FE5C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v3 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 52))
  {
    int v3 = -300;
    goto LABEL_9;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t result = sub_10000DC4C(*(_DWORD *)(result + 12), *(void *)(result + 28), *(unsigned int *)(result + 40), *(_DWORD *)(result + 56), (void *)(a2 + 28), (_DWORD *)(a2 + 52), (int *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_10:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_10000FF7C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (uint64_t v3 = *(unsigned int *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (uint64_t v4 = *(unsigned int *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  uint64_t result = sub_10000DE80(*(unsigned int *)(result + 12), *(void *)(result + 28), v3, *(void *)(result + 44), v4, (_DWORD *)(a2 + 36), (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_100010088(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (uint64_t v3 = *(unsigned int *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  uint64_t result = sub_10000E914(*(unsigned int *)(result + 12), *(void *)(result + 28), v3, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100010170(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v6 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v6;
    NDR_record_t v5 = NDR_record;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || (uint64_t v3 = *(unsigned int *)(result + 40), v3 != *(_DWORD *)(result + 68))
    || (uint64_t v4 = *(unsigned int *)(result + 56), v4 != *(_DWORD *)(result + 72)))
  {
    int v6 = -300;
    goto LABEL_11;
  }
  uint64_t result = sub_10000DFB4(*(unsigned int *)(result + 12), *(void *)(result + 28), v3, *(void *)(result + 44), v4, (_DWORD *)(a2 + 36), (int *)(a2 + 40));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v5 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 44;
    return result;
  }
LABEL_12:
  *(NDR_record_t *)(a2 + 24) = v5;
  return result;
}

uint64_t sub_10001027C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 56)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (uint64_t v3 = *(unsigned int *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  uint64_t result = sub_10000EB90(*(unsigned int *)(result + 12), *(void *)(result + 28), v3, (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100010364(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 2 || *(_DWORD *)(result + 4) != 76)
  {
    int v3 = -304;
LABEL_11:
    *(_DWORD *)(a2 + 32) = v3;
    goto LABEL_12;
  }
  if (*(unsigned char *)(result + 39) != 1
    || *(unsigned char *)(result + 55) != 1
    || *(_DWORD *)(result + 40) != *(_DWORD *)(result + 68)
    || *(_DWORD *)(result + 56) != *(_DWORD *)(result + 72))
  {
    int v3 = -300;
    goto LABEL_11;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t result = sub_10000E108(*(_DWORD *)(result + 12), *(void *)(result + 28), *(_DWORD *)(result + 40), *(void *)(result + 44), *(_DWORD *)(result + 56), (void *)(a2 + 28), (_DWORD *)(a2 + 52), (int *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_12:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_1000104A4(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (uint64_t v3 = *(unsigned int *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  uint64_t result = sub_10000EC8C(*(unsigned int *)(result + 12), *(void *)(result + 28), v3, *(unsigned int *)(result + 56), (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_100010590(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 60)
  {
    int v5 = -304;
LABEL_9:
    *(_DWORD *)(a2 + 32) = v5;
    NDR_record_t v4 = NDR_record;
    goto LABEL_10;
  }
  if (*(unsigned char *)(result + 39) != 1 || (uint64_t v3 = *(unsigned int *)(result + 40), v3 != *(_DWORD *)(result + 52)))
  {
    int v5 = -300;
    goto LABEL_9;
  }
  uint64_t result = sub_10000F048(*(unsigned int *)(result + 12), *(void *)(result + 28), v3, *(unsigned int *)(result + 56), (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v4 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_10:
  *(NDR_record_t *)(a2 + 24) = v4;
  return result;
}

_DWORD *sub_10001067C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    goto LABEL_6;
  }
  *(_DWORD *)(a2 + 36) = 16777473;
  uint64_t result = (_DWORD *)sub_10000F1D4(result[3], (void *)(a2 + 28), (_DWORD *)(a2 + 52), (int *)(a2 + 56));
  if (result)
  {
    *(_DWORD *)(a2 + 32) = result;
LABEL_6:
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    return result;
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a2 + 52);
  *(NDR_record_t *)(a2 + 44) = NDR_record;
  *(_DWORD *)a2 |= 0x80000000;
  *(_DWORD *)(a2 + 4) = 60;
  *(_DWORD *)(a2 + 24) = 1;
  return result;
}

_DWORD *sub_10001075C(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    uint64_t result = (_DWORD *)sub_10000F574(result[3], (int *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_10001080C(uint64_t result, uint64_t a2)
{
  if ((*(_DWORD *)result & 0x80000000) == 0 || *(_DWORD *)(result + 24) != 1 || *(_DWORD *)(result + 4) != 52)
  {
    int v4 = -304;
LABEL_8:
    *(_DWORD *)(a2 + 32) = v4;
    NDR_record_t v3 = NDR_record;
    goto LABEL_9;
  }
  if (*(unsigned __int16 *)(result + 38) << 16 != 1114112)
  {
    int v4 = -300;
    goto LABEL_8;
  }
  uint64_t result = sub_10000F368(*(_DWORD *)(result + 12), *(_DWORD *)(result + 28), *(_DWORD *)(result + 48), (int *)(a2 + 36));
  *(_DWORD *)(a2 + 32) = result;
  NDR_record_t v3 = NDR_record;
  if (!result)
  {
    *(NDR_record_t *)(a2 + 24) = NDR_record;
    *(_DWORD *)(a2 + 4) = 40;
    return result;
  }
LABEL_9:
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

_DWORD *sub_1000108EC(_DWORD *result, uint64_t a2)
{
  if ((*result & 0x80000000) != 0 || result[1] != 24)
  {
    *(_DWORD *)(a2 + 32) = -304;
    NDR_record_t v3 = NDR_record;
  }
  else
  {
    uint64_t result = (_DWORD *)sub_10000FD58(result[3], (_DWORD *)(a2 + 36));
    *(_DWORD *)(a2 + 32) = result;
    NDR_record_t v3 = NDR_record;
    if (!result)
    {
      *(NDR_record_t *)(a2 + 24) = NDR_record;
      *(_DWORD *)(a2 + 4) = 40;
      return result;
    }
  }
  *(NDR_record_t *)(a2 + 24) = v3;
  return result;
}

os_log_t sub_10001099C()
{
  os_log_t result = (os_log_t)qword_10007DAA8;
  if (!qword_10007DAA8)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    qword_10007DAA8 = (uint64_t)result;
  }
  return result;
}

void sub_100010A10(uint64_t a1, uint64_t a2)
{
  if (qword_10007DAC0 && CFArrayGetCount((CFArrayRef)qword_10007DAC0) <= 99)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"%12.8f: %s %s", *(void *)&Current, a1, a2);
    if (qword_10007DAC0 && CFArrayGetCount((CFArrayRef)qword_10007DAC0) <= 99)
    {
      CFArrayAppendValue((CFMutableArrayRef)qword_10007DAC0, v5);
      byte_10007DAC8 = 1;
    }
    CFRelease(v5);
  }
}

uint64_t sub_100010B18(int a1)
{
  uint64_t v1 = socket(a1, 2, 0);
  if (v1 == -1)
  {
    if (!qword_10007DAA8) {
      qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2, v3, v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      int v6 = __error();
      CFDictionaryRef v7 = strerror(*v6);
      *(_DWORD *)uint64_t v5 = 136315138;
      *(void *)(v5 + 4) = v7;
      __SC_log_send();
    }
  }
  return v1;
}

void sub_100010C70(const char *a1)
{
  if (a1)
  {
    xpc_object_t v2 = xpc_array_create(0, 0);
    xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, a1);
    network_config_check_interface_settings();
    xpc_release(v2);
  }
  else
  {
    network_config_check_interface_settings();
  }
}

void sub_100010D3C()
{
  int v0 = qword_10007DAB0;

  dispatch_async(v0, &stru_1000762D8);
}

void sub_100010DA4(id a1)
{
  sub_100010DFC();
}

void sub_100010DFC()
{
  if (!qword_10007DAA8) {
    qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v0 = _os_log_pack_size();
    __chkstk_darwin(v0, v1, v2);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  _SCDynamicStoreCacheOpen();
  qword_10007DAC0 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  sub_100011E00((uint64_t)"prime", 1);
  _SCDynamicStoreCacheCommitChanges();
  _SCDynamicStoreCacheClose();
  byte_10007D9F0 = 1;
  sub_100012040();
  if (qword_10007DAC0 && byte_10007DAC8)
  {
    SCDynamicStoreSetValue(0, @"Plugin:KernelEventMonitor", (CFPropertyListRef)qword_10007DAC0);
    byte_10007DAC8 = 0;
  }
  dispatch_resume((dispatch_object_t)qword_10007DAB8);
  dispatch_time_t v3 = dispatch_time(0, 6000000000);
  dispatch_after_f(v3, (dispatch_queue_t)qword_10007DAB0, 0, (dispatch_function_t)sub_100012198);
}

void sub_100010FDC(__CFBundle *a1, int a2)
{
  if (a2) {
    byte_10007DA00 = 1;
  }
  if (!qword_10007DAA8) {
    qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
  }
  int v41 = 0;
  uint64_t v40 = 0;
  int v39 = 0;
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3, v4, v5);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  if (!qword_10007DAA8) {
    qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6, v7, v8);
    __error();
    uint64_t v9 = _os_log_pack_fill();
    CFStringRef Identifier = CFBundleGetIdentifier(a1);
    *(_DWORD *)uint64_t v9 = 138412290;
    *(void *)(v9 + 4) = Identifier;
    __SC_log_send();
  }
  if (sub_1000117E4())
  {
    int v11 = socket(32, 3, 1);
    if (v11 == -1)
    {
      if (!qword_10007DAA8) {
        qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v19 = _os_log_pack_size();
        __chkstk_darwin(v19, v20, v21);
        __error();
        uint64_t v22 = _os_log_pack_fill();
        long long v23 = __error();
        long long v24 = strerror(*v23);
        *(_DWORD *)uint64_t v22 = 136315138;
        *(void *)(v22 + 4) = v24;
        __SC_log_send();
      }
      goto LABEL_38;
    }
    int v12 = v11;
    uint64_t v40 = 0x100000001;
    int v41 = 0;
    if (ioctl(v11, 0x800C6502uLL, &v40))
    {
      if (!qword_10007DAA8) {
        qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_37;
      }
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13, v14, v15);
      __error();
    }
    else
    {
      int v38 = 1;
      if (ioctl(v12, 0x8004667EuLL, &v38))
      {
        if (!qword_10007DAA8) {
          qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_37;
        }
      }
      else
      {
        int v39 = 0x40000;
        if (!setsockopt(v12, 0xFFFF, 4098, &v39, 4u))
        {
          qword_10007DAB0 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.KernelEventMonitor", 0);
          qword_10007DAB8 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_read, v12, 0, (dispatch_queue_t)qword_10007DAB0);
          handler[0] = _NSConcreteStackBlock;
          handler[1] = 0x40000000;
          handler[2] = sub_10001194C;
          handler[3] = &unk_1000762F8;
          int v37 = v12;
          dispatch_source_set_cancel_handler((dispatch_source_t)qword_10007DAB8, handler);
          v34[0] = _NSConcreteStackBlock;
          v34[1] = 0x40000000;
          v34[2] = sub_1000119A8;
          v34[3] = &unk_100076318;
          int v35 = v12;
          dispatch_source_set_event_handler((dispatch_source_t)qword_10007DAB8, v34);
          return;
        }
        if (!qword_10007DAA8) {
          qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_37;
        }
      }
      uint64_t v25 = _os_log_pack_size();
      __chkstk_darwin(v25, v26, v27);
      __error();
    }
    uint64_t v28 = _os_log_pack_fill();
    long long v29 = __error();
    long long v30 = strerror(*v29);
    *(_DWORD *)uint64_t v28 = 136315138;
    *(void *)(v28 + 4) = v30;
    __SC_log_send();
LABEL_37:
    close(v12);
LABEL_38:
    if (!qword_10007DAA8) {
      qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v31 = _os_log_pack_size();
      __chkstk_darwin(v31, v32, v33);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    CFRelease((CFTypeRef)qword_10007D9F8);
    return;
  }
  if (!qword_10007DAA8) {
    qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v16 = _os_log_pack_size();
    __chkstk_darwin(v16, v17, v18);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
}

uint64_t sub_1000117E4()
{
  qword_10007D9F8 = (uint64_t)SCDynamicStoreCreate(0, @"Kernel Event Monitor plug-in", 0, 0);
  if (qword_10007D9F8) {
    return 1;
  }
  if (!qword_10007DAA8) {
    qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
  }
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v1 = _os_log_pack_size();
    __chkstk_darwin(v1, v2, v3);
    __error();
    uint64_t v4 = _os_log_pack_fill();
    int v5 = SCError();
    uint64_t v6 = SCErrorString(v5);
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v4 + 4) = v6;
    __SC_log_send();
    return 0;
  }
  return result;
}

uint64_t sub_10001194C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);

  return close(v1);
}

void sub_1000119A8(uint64_t a1)
{
  if (!sub_100011AE0(*(_DWORD *)(a1 + 32)))
  {
    if (!qword_10007DAA8) {
      qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1, v2, v3);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    dispatch_source_cancel((dispatch_source_t)qword_10007DAB8);
  }
}

uint64_t sub_100011AE0(int a1)
{
  memset(v16, 0, 512);
  ssize_t v1 = recv(a1, v16, 0x400uLL, 0);
  if (v1 == -1)
  {
    if (!qword_10007DAA8) {
      qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      int v11 = __error();
      int v12 = strerror(*v11);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v12;
      __SC_log_send();
      return 0;
    }
  }
  else
  {
    uint64_t v2 = v1;
    _SCDynamicStoreCacheOpen();
    if (v2 >= 1)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (const char *)v16;
      while (1)
      {
        uint64_t v5 = v3 + *(unsigned int *)((char *)v16 + v3);
        if (v5 > v2) {
          break;
        }
        if (*((_DWORD *)v4 + 1) == 1 && *((_DWORD *)v4 + 2) == 1)
        {
          sub_1000122C4(v4);
          uint64_t v5 = v3 + *(unsigned int *)((char *)v16 + v3);
        }
        uint64_t v4 = (char *)v16 + v5;
        uint64_t v3 = v5;
        if (v5 >= v2) {
          goto LABEL_18;
        }
      }
      if (!qword_10007DAA8) {
        qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v13 = _os_log_pack_size();
        __chkstk_darwin(v13, v14, v15);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
    }
LABEL_18:
    _SCDynamicStoreCacheCommitChanges();
    _SCDynamicStoreCacheClose();
    sub_100012040();
    uint64_t result = 1;
    if (qword_10007DAC0)
    {
      if (byte_10007DAC8)
      {
        SCDynamicStoreSetValue(0, @"Plugin:KernelEventMonitor", (CFPropertyListRef)qword_10007DAC0);
        byte_10007DAC8 = 0;
        return 1;
      }
    }
  }
  return result;
}

void sub_100011E00(uint64_t a1, int a2)
{
  uint64_t v19 = 0;
  if (getifaddrs(&v19) == -1)
  {
    int v11 = __error();
    int v12 = strerror(*v11);
    sub_100010A10((uint64_t)"getifaddrs", (uint64_t)v12);
    if (!qword_10007DAA8) {
      qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13, v14, v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      uint64_t v17 = __error();
      uint64_t v18 = strerror(*v17);
      *(_DWORD *)uint64_t v16 = 136315138;
      *(void *)(v16 + 4) = v18;
      __SC_log_send();
    }
  }
  else
  {
    CFArrayRef v4 = sub_100014558();
    uint64_t v5 = v19;
    if (v19)
    {
      int v6 = 0;
      do
      {
        ifa_addr = v5->ifa_addr;
        if (ifa_addr && ifa_addr->sa_family == 18)
        {
          ifa_data = (unsigned __int8 *)v5->ifa_data;
          BOOL v9 = !ifa_data || *ifa_data != 254;
          if (sub_100014804(v4, v5->ifa_name))
          {
            sub_100010A10(a1, (uint64_t)v5->ifa_name);
            char v10 = !v9;
            if (a2) {
              char v10 = 1;
            }
            if ((v10 & 1) == 0) {
              sub_100010C70(v5->ifa_name);
            }
            int v6 = 1;
          }
        }
        uint64_t v5 = v5->ifa_next;
      }
      while (v5);
      if (v6) {
        sub_1000146B0(v4);
      }
    }
    CFRelease(v4);
    if (a2)
    {
      sub_100015480(v19, 0);
      sub_100016184(v19, 0);
    }
    freeifaddrs(v19);
  }
  if (a2) {
    network_config_check_interface_settings();
  }
}

void sub_100012040()
{
  if (byte_10007D9F0)
  {
    uint32_t v0 = notify_post("com.apple.system.config.network_change");
    if (v0)
    {
      uint32_t v1 = v0;
      if (!qword_10007DAA8) {
        qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v2 = _os_log_pack_size();
        __chkstk_darwin(v2, v3, v4);
        __error();
        uint64_t v5 = (_DWORD *)_os_log_pack_fill();
        *uint64_t v5 = 67109120;
        v5[1] = v1;
        __SC_log_send();
      }
    }
    byte_10007D9F0 = 0;
  }
}

void sub_100012198()
{
  snprintf(__str, 0x20uLL, "update %d (of %d)", ++dword_10007DACC, 20);
  _SCDynamicStoreCacheOpen();
  sub_100011E00((uint64_t)__str, 0);
  _SCDynamicStoreCacheCommitChanges();
  _SCDynamicStoreCacheClose();
  if (qword_10007DAC0 && byte_10007DAC8)
  {
    SCDynamicStoreSetValue(0, @"Plugin:KernelEventMonitor", (CFPropertyListRef)qword_10007DAC0);
    byte_10007DAC8 = 0;
  }
  if (dword_10007DACC > 19)
  {
    if (qword_10007DAC0)
    {
      CFRelease((CFTypeRef)qword_10007DAC0);
      qword_10007DAC0 = 0;
    }
  }
  else
  {
    dispatch_time_t v0 = dispatch_time(0, 6000000000);
    dispatch_after_f(v0, (dispatch_queue_t)qword_10007DAB0, 0, (dispatch_function_t)sub_100012198);
  }
}

void sub_1000122C4(const char *a1)
{
  unint64_t v2 = *(unsigned int *)a1 - 24;
  switch(*((_DWORD *)a1 + 3))
  {
    case 1:
      switch(*((_DWORD *)a1 + 5))
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
          if (v2 < 0x34) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v3 = _os_log_pack_size();
            __chkstk_darwin(v3, v4, v5);
            __error();
            uint64_t v6 = _os_log_pack_fill();
            unsigned int v7 = *((_DWORD *)a1 + 5);
            *(_DWORD *)uint64_t v6 = 136315394;
            *(void *)(v6 + 4) = __str;
            *(_WORD *)(v6 + 12) = 1024;
            *(_DWORD *)(v6 + 14) = v7;
            __SC_log_send();
          }
          sub_100015480(0, __str);
          goto LABEL_76;
        case 7:
          if (v2 < 0x20 || v2 < (unint64_t)*((unsigned __int8 *)a1 + 52) + 32) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v42 = _os_log_pack_size();
            __chkstk_darwin(v42, v43, v44);
            __error();
            uint64_t v45 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v45 = 136315138;
            *(void *)(v45 + 4) = __str;
            __SC_log_send();
          }
          sub_100015D00(__str, *((_DWORD *)a1 + 12), *((unsigned __int8 *)a1 + 52), (uint64_t)(a1 + 53));
          break;
        case 9:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v46 = _os_log_pack_size();
            __chkstk_darwin(v46, v47, v48);
            __error();
            uint64_t v49 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v49 = 136315138;
            *(void *)(v49 + 4) = __str;
            __SC_log_send();
          }
          sub_100015F2C(__str);
          break;
        case 0xA:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v50 = _os_log_pack_size();
            __chkstk_darwin(v50, v51, v52);
            __error();
            uint64_t v53 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v53 = 136315138;
            *(void *)(v53 + 4) = __str;
            __SC_log_send();
          }
          sub_100016118(__str);
          break;
        default:
          return;
      }
      return;
    case 2:
      switch(*((_DWORD *)a1 + 5))
      {
        case 9:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v54 = _os_log_pack_size();
            __chkstk_darwin(v54, v55, v56);
            __error();
            uint64_t v57 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v57 = 136315138;
            *(void *)(v57 + 4) = __str;
            __SC_log_send();
          }
          sub_100014954(__str);
          break;
        case 0xA:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v58 = _os_log_pack_size();
            __chkstk_darwin(v58, v59, v60);
            __error();
            uint64_t v61 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v61 = 136315138;
            *(void *)(v61 + 4) = __str;
            __SC_log_send();
          }
          sub_1000140B4(__str);
          break;
        case 0xB:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v62 = _os_log_pack_size();
            __chkstk_darwin(v62, v63, v64);
            __error();
            uint64_t v65 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v65 = 136315138;
            *(void *)(v65 + 4) = __str;
            __SC_log_send();
          }
          sub_100014A08(__str);
          break;
        case 0xC:
        case 0xD:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v8 = _os_log_pack_size();
            __chkstk_darwin(v8, v9, v10);
            __error();
            uint64_t v11 = _os_log_pack_fill();
            if (*((_DWORD *)a1 + 5) == 13) {
              int v12 = "up";
            }
            else {
              int v12 = "down";
            }
            *(_DWORD *)uint64_t v11 = 136315394;
            *(void *)(v11 + 4) = v12;
            *(_WORD *)(v11 + 12) = 2080;
            *(void *)(v11 + 14) = __str;
            __SC_log_send();
          }
          sub_100014258(__str, 0, 0);
          break;
        case 0xE:
        case 0xF:
          if (v2 < 0x20) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v35 = _os_log_pack_size();
            __chkstk_darwin(v35, v36, v37);
            __error();
            uint64_t v38 = _os_log_pack_fill();
            int v39 = "detach";
            unsigned int v40 = *((_DWORD *)a1 + 12);
            unsigned int v41 = *((_DWORD *)a1 + 13);
            if (*((_DWORD *)a1 + 5) == 14) {
              int v39 = "attach";
            }
            *(_DWORD *)uint64_t v38 = 136315906;
            *(void *)(v38 + 4) = v39;
            *(_WORD *)(v38 + 12) = 2080;
            *(void *)(v38 + 14) = __str;
            *(_WORD *)(v38 + 22) = 1024;
            *(_DWORD *)(v38 + 24) = v40;
            *(_WORD *)(v38 + 28) = 1024;
            *(_DWORD *)(v38 + 30) = v41;
            __SC_log_send();
          }
          break;
        case 0x12:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v66 = _os_log_pack_size();
            __chkstk_darwin(v66, v67, v68);
            __error();
            uint64_t v69 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v69 = 136315138;
            *(void *)(v69 + 4) = __str;
            __SC_log_send();
          }
          sub_100014C60(__str);
          break;
        case 0x14:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v70 = _os_log_pack_size();
            __chkstk_darwin(v70, v71, v72);
            __error();
            uint64_t v73 = _os_log_pack_fill();
            unsigned int v74 = *((_DWORD *)a1 + 12);
            *(_DWORD *)uint64_t v73 = 136315394;
            *(void *)(v73 + 4) = __str;
            *(_WORD *)(v73 + 12) = 1024;
            *(_DWORD *)(v73 + 14) = v74;
            __SC_log_send();
          }
          sub_100013B14(__str, *((_DWORD *)a1 + 12));
          break;
        case 0x18:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v75 = _os_log_pack_size();
            __chkstk_darwin(v75, v76, v77);
            __error();
            uint64_t v78 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v78 = 136315138;
            *(void *)(v78 + 4) = __str;
            __SC_log_send();
          }
          uint64_t v80 = *((void *)a1 + 10);
          long long v79 = (unsigned int *)(a1 + 80);
          if (v80 ^ qword_10007DAD0 | v79[2] ^ dword_10007DAD8) {
            CFIndex v81 = 12;
          }
          else {
            CFIndex v81 = 0;
          }
          sub_100013E48(__str, *((void *)v79 - 1), (const UInt8 *)v79 - 32, 20, (const UInt8 *)v79, v81);
          break;
        case 0x19:
          if (v2 < 0x18) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v82 = _os_log_pack_size();
            __chkstk_darwin(v82, v83, v84);
            __error();
            uint64_t v85 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v85 = 136315138;
            *(void *)(v85 + 4) = __str;
            __SC_log_send();
          }
          sub_100014AE4(__str);
          break;
        default:
          return;
      }
      return;
    case 6:
      unsigned int v13 = *((_DWORD *)a1 + 5);
      if (v13 - 1 >= 5)
      {
        if (v13 == 7)
        {
          if (v2 < 0xA8) {
            goto LABEL_121;
          }
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v31 = _os_log_pack_size();
            __chkstk_darwin(v31, v32, v33);
            __error();
            uint64_t v34 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v34 = 136315138;
            *(void *)(v34 + 4) = __str;
            __SC_log_send();
          }
          sub_1000170A8(__str);
        }
      }
      else
      {
        if (v2 < 0xA8) {
          goto LABEL_121;
        }
        snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
        if (!qword_10007DAA8) {
          qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v14 = _os_log_pack_size();
          __chkstk_darwin(v14, v15, v16);
          __error();
          uint64_t v17 = _os_log_pack_fill();
          unsigned int v18 = *((_DWORD *)a1 + 5);
          *(_DWORD *)uint64_t v17 = 136315394;
          *(void *)(v17 + 4) = __str;
          *(_WORD *)(v17 + 12) = 1024;
          *(_DWORD *)(v17 + 14) = v18;
          __SC_log_send();
        }
        sub_100016184(0, __str);
        int v19 = *((_DWORD *)a1 + 5);
        if (v19 == 1)
        {
          if ((a1[164] & 4) != 0)
          {
            sub_100016F30(__str, a1 + 56, 6, (uint64_t)(a1 + 184));
LABEL_76:
            int v19 = *((_DWORD *)a1 + 5);
          }
          else
          {
            int v19 = 1;
          }
        }
        if (v19 != 3)
        {
          if (qword_10007DAC0) {
            sub_10001443C(__str);
          }
        }
      }
      return;
    case 7:
      unsigned int v20 = *((_DWORD *)a1 + 5);
      if (v20 - 6 < 3)
      {
        if (v2 >= 0x2C)
        {
          snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
          if (!qword_10007DAA8) {
            qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v21 = _os_log_pack_size();
            __chkstk_darwin(v21, v22, v23);
            __error();
            uint64_t v24 = _os_log_pack_fill();
            unsigned int v25 = *((_DWORD *)a1 + 5);
            *(_DWORD *)uint64_t v24 = 136315394;
            *(void *)(v24 + 4) = __str;
            *(_WORD *)(v24 + 12) = 1024;
            *(_DWORD *)(v24 + 14) = v25;
            __SC_log_send();
          }
          sub_100016184(0, __str);
          return;
        }
LABEL_121:
        sub_1000137B4((uint64_t)a1);
        return;
      }
      if (v20 != 9) {
        return;
      }
      if (v2 < 0x2C) {
        goto LABEL_121;
      }
      snprintf(__str, 0x10uLL, "%s%u", a1 + 32, *((_DWORD *)a1 + 7));
      if (!qword_10007DAA8) {
        qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v26 = _os_log_pack_size();
        __chkstk_darwin(v26, v27, v28);
        __error();
        uint64_t v29 = _os_log_pack_fill();
        unsigned int v30 = *((_DWORD *)a1 + 5);
        *(_DWORD *)uint64_t v29 = 136315394;
        *(void *)(v29 + 4) = __str;
        *(_WORD *)(v29 + 12) = 1024;
        *(_DWORD *)(v29 + 14) = v30;
        __SC_log_send();
      }
      sub_100017214(__str);
      return;
    default:
      return;
  }
}

uint64_t sub_1000137B4(uint64_t result)
{
  if (byte_10007DA00)
  {
    uint32_t v1 = (int *)result;
    if (!qword_10007DAA8) {
      qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2, v3, v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v5 = 138412290;
      *(void *)(v5 + 4) = @"Error processing (Apple network subclass)";
      __SC_log_send();
    }
    if (!qword_10007DAA8) {
      qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6, v7, v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      int v10 = *v1;
      int v11 = v1[1];
      int v12 = v1[2];
      int v13 = v1[3];
      int v14 = v1[4];
      int v15 = v1[5];
      *(_DWORD *)uint64_t v9 = 67110400;
      *(_DWORD *)(v9 + 4) = v10;
      *(_WORD *)(v9 + 8) = 1024;
      *(_DWORD *)(v9 + 10) = v14;
      *(_WORD *)(v9 + 14) = 1024;
      *(_DWORD *)(v9 + 16) = v11;
      *(_WORD *)(v9 + 20) = 1024;
      *(_DWORD *)(v9 + 22) = v12;
      *(_WORD *)(v9 + 26) = 1024;
      *(_DWORD *)(v9 + 28) = v13;
      *(_WORD *)(v9 + 32) = 1024;
      *(_DWORD *)(v9 + 34) = v15;
      uint64_t result = __SC_log_send();
    }
    if (*v1 >= 0x19)
    {
      int v16 = 0;
      uint64_t v17 = 6;
      do
      {
        if (!qword_10007DAA8) {
          qword_10007DAA8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "KernelEventMonitor");
        }
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (result)
        {
          uint64_t v18 = _os_log_pack_size();
          __chkstk_darwin(v18, v19, v20);
          __error();
          uint64_t v21 = _os_log_pack_fill();
          int v22 = v1[v17];
          *(_DWORD *)uint64_t v21 = 67109376;
          *(_DWORD *)(v21 + 4) = v16;
          *(_WORD *)(v21 + 8) = 1024;
          *(_DWORD *)(v21 + 10) = v22;
          uint64_t result = __SC_log_send();
        }
        ++v17;
        ++v16;
      }
      while ((v17 * 4) < *v1);
    }
  }
  return result;
}

void sub_100013B14(char *cStr, int a2)
{
  int valuePtr = a2;
  CFStringRef v4 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v4, kSCEntNetLinkQuality);
  uint64_t v6 = sub_100013DC8(NetworkInterfaceEntity);
  uint64_t v7 = v6;
  if (a2 == -1)
  {
    CFDictionaryRemoveValue(v6, kSCPropNetLinkQuality);
  }
  else
  {
    CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v7, kSCPropNetLinkQuality, v8);
    CFRelease(v8);
  }
  CFIndex Count = CFDictionaryGetCount(v7);
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  int v10 = __SC_log_enabled();
  if (Count < 1)
  {
    if (v10)
    {
      uint64_t v15 = _os_log_pack_size();
      __chkstk_darwin(v15, v16, v17);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v18 = 136315138;
      *(void *)(v18 + 4) = cStr;
      __SC_log_send();
    }
    SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  }
  else
  {
    if (v10)
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11, v12, v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136315394;
      *(void *)(v14 + 4) = cStr;
      *(_WORD *)(v14 + 12) = 2112;
      *(void *)(v14 + 14) = v7;
      __SC_log_send();
    }
    SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity, v7);
  }
  CFRelease(v4);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v7);
}

CFMutableDictionaryRef sub_100013DC8(CFStringRef key)
{
  CFDictionaryRef v1 = (const __CFDictionary *)SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, key);
  CFMutableDictionaryRef v2 = sub_100014E4C(v1);
  if (v1) {
    CFRelease(v1);
  }
  return v2;
}

void sub_100013E48(char *cStr, unint64_t a2, const UInt8 *a3, CFIndex a4, const UInt8 *a5, CFIndex a6)
{
  CFStringRef v12 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v12, kSCEntNetLinkIssues);
  uint64_t v14 = sub_100013DC8(NetworkInterfaceEntity);
  CFDataRef v15 = CFDataCreate(0, a3, a4);
  CFDictionarySetValue(v14, kSCPropNetLinkIssuesModuleID, v15);
  CFRelease(v15);
  if (a6)
  {
    CFDataRef v16 = CFDataCreate(0, a5, a6);
    CFDictionarySetValue(v14, kSCPropNetLinkIssuesInfo, v16);
    CFRelease(v16);
  }
  else
  {
    CFDictionaryRemoveValue(v14, kSCPropNetLinkIssuesInfo);
  }
  CFDateRef v17 = CFDateCreate(0, (double)a2);
  CFDictionarySetValue(v14, kSCPropNetLinkIssuesTimeStamp, v17);
  CFRelease(v17);
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v18 = _os_log_pack_size();
    __chkstk_darwin(v18, v19, v20);
    __error();
    uint64_t v21 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v21 = 136315394;
    *(void *)(v21 + 4) = cStr;
    *(_WORD *)(v21 + 12) = 2112;
    *(void *)(v21 + 14) = v14;
    __SC_log_send();
  }
  SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity, v14);
  CFRelease(v12);
  CFRelease(v14);
  CFRelease(NetworkInterfaceEntity);
}

void sub_1000140B4(const char *a1)
{
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v5 + 4) = a1;
    __SC_log_send();
  }
  CFStringRef v6 = CFStringCreateWithCString(0, a1, 0x8000100u);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v6, kSCEntNetLink);
  CFNumberRef v8 = sub_100013DC8(NetworkInterfaceEntity);
  CFDictionarySetValue(v8, kSCPropNetLinkDetaching, kCFBooleanTrue);
  SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity, v8);
  CFRelease(v6);
  CFRelease(v8);
  CFRelease(NetworkInterfaceEntity);
}

void sub_100014258(char *cStr, int a2, int a3)
{
  CFStringRef v6 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  sub_1000142FC(cStr, v6, a2, a3);

  CFRelease(v6);
}

uint64_t sub_1000142FC(char *a1, const __CFString *a2, int a3, int a4)
{
  uint64_t result = sub_100010B18(2);
  if (result != -1)
  {
    int v9 = result;
    memset(v13, 0, 44);
    __strlcpy_chk();
    CFBooleanRef v10 = 0;
    if (ioctl(v9, 0xC02C6948uLL, v13) != -1 && LODWORD(v13[2]))
    {
      if (BYTE8(v13[1]))
      {
        if ((BYTE8(v13[1]) & 2) != 0) {
          uint64_t v11 = &kCFBooleanTrue;
        }
        else {
          uint64_t v11 = &kCFBooleanFalse;
        }
        CFBooleanRef v10 = *v11;
        if (*v11 && !CFBooleanGetValue(*v11))
        {
          CFBooleanRef v12 = 0;
          goto LABEL_12;
        }
      }
      else
      {
        CFBooleanRef v10 = 0;
      }
    }
    CFBooleanRef v12 = sub_100017380(a1);
LABEL_12:
    sub_100014F28((uint64_t)a1, a2, v10, a3, v12, a4);
    return close(v9);
  }
  return result;
}

void sub_10001443C(char *cStr)
{
  CFStringRef v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v2, kSCEntNetLink);
  CFPropertyListRef v4 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  if (!v4)
  {
    sub_1000142FC(cStr, v2, 0, 0);
    CFPropertyListRef v5 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
    if (!v5) {
      goto LABEL_5;
    }
    CFPropertyListRef v4 = v5;
    sub_100010A10((uint64_t)"added missing link status", (uint64_t)cStr);
  }
  CFRelease(v4);
LABEL_5:
  CFRelease(v2);

  CFRelease(NetworkInterfaceEntity);
}

CFMutableArrayRef sub_100014558()
{
  CFStringRef NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
  CFPropertyListRef v1 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterface);
  CFRelease(NetworkInterface);
  if (v1)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v1) == TypeID
      && (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v1, kSCPropNetInterfaces),
          CFTypeID v4 = CFArrayGetTypeID(),
          Value)
      && CFGetTypeID(Value) == v4)
    {
      MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, 0, Value);
      CFRelease(v1);
      if (MutableCopy) {
        return MutableCopy;
      }
    }
    else
    {
      CFRelease(v1);
    }
  }

  return CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
}

void sub_1000146B0(const void *a1)
{
  int v9 = a1;
  CFStringRef NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
  CFPropertyListRef v3 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterface);
  if (!v3) {
    goto LABEL_5;
  }
  CFTypeID v4 = v3;
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (CFGetTypeID(v4) != TypeID)
  {
    CFRelease(v4);
LABEL_5:
    CFDictionaryRef v8 = CFDictionaryCreate(0, (const void **)&kSCPropNetInterfaces, &v9, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterface, v8);
    CFDictionaryRef v7 = v8;
    goto LABEL_6;
  }
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v4);
  CFRelease(v4);
  CFDictionarySetValue(MutableCopy, kSCPropNetInterfaces, a1);
  SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterface, MutableCopy);
  CFDictionaryRef v7 = MutableCopy;
LABEL_6:
  CFRelease(v7);
  CFRelease(NetworkInterface);
}

uint64_t sub_100014804(const __CFArray *a1, char *a2)
{
  CFStringRef v4 = CFStringCreateWithCString(0, a2, 0x8000100u);
  v12.length = CFArrayGetCount(a1);
  v12.location = 0;
  if (CFArrayContainsValue(a1, v12, v4))
  {
    sub_100014258(a2, 0, 1);
    uint64_t v5 = 0;
  }
  else
  {
    CFArrayAppendValue(a1, v4);
    sub_100014258(a2, 1, 0);
    int v6 = sub_100010B18(2);
    if (v6 == -1)
    {
      sub_100013B14(a2, -1);
    }
    else
    {
      int v7 = v6;
      *(_OWORD *)__str = 0u;
      long long v11 = 0u;
      snprintf(__str, 0x10uLL, "%s", a2);
      if (ioctl(v7, 0xC020698AuLL, __str) == -1) {
        int v8 = -1;
      }
      else {
        int v8 = v11;
      }
      sub_100013B14(a2, v8);
      close(v7);
    }
    uint64_t v5 = 1;
  }
  CFRelease(v4);
  return v5;
}

void sub_100014954(char *a1)
{
  CFMutableArrayRef v2 = sub_100014558();
  if (sub_100014804(v2, a1))
  {
    sub_100010A10((uint64_t)"link_add", (uint64_t)a1);
    sub_1000146B0(v2);
    if (strncmp(a1, "pktap", 5uLL)) {
      sub_100010C70(a1);
    }
  }

  CFRelease(v2);
}

void sub_100014A08(const char *a1)
{
  CFArrayRef v2 = sub_100014558();
  CFStringRef v3 = CFStringCreateWithCString(0, a1, 0x8000100u);
  v6.length = CFArrayGetCount(v2);
  v6.location = 0;
  FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v2, v6, v3);
  CFRelease(v3);
  if (FirstIndexOfValue != -1)
  {
    CFArrayRemoveValueAtIndex(v2, FirstIndexOfValue);
    sub_10001526C(a1);
    sub_1000146B0(v2);
  }

  CFRelease(v2);
}

void sub_100014AE4(char *cStr)
{
  CFStringRef v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v2, kSCEntNetInterfaceDelegation);
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4, v5, v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = cStr;
    __SC_log_send();
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v2);
}

void sub_100014C60(const char *a1)
{
  int v2 = sub_100010B18(2);
  if (v2 != -1)
  {
    int v3 = v2;
    *(_OWORD *)__str = 0u;
    long long v13 = 0u;
    snprintf(__str, 0x10uLL, "%s", a1);
    int v4 = ioctl(v3, 0xC0206989uLL, __str);
    int v5 = v13;
    close(v3);
    if (v4 != -1 && !v5)
    {
      CFStringRef v6 = CFStringCreateWithCString(0, a1, 0x8000100u);
      CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v6, kSCEntNetIdleRoute);
      sub_10001099C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8, v9, v10);
        __error();
        uint64_t v11 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v11 = 136315138;
        *(void *)(v11 + 4) = a1;
        __SC_log_send();
      }
      SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
      CFRelease(NetworkInterfaceEntity);
      CFRelease(v6);
    }
  }
}

CFMutableDictionaryRef sub_100014E4C(const __CFDictionary *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    return CFDictionaryCreateMutableCopy(0, 0, a1);
  }
  else
  {
    return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
}

void sub_100014F28(uint64_t a1, CFStringRef ifname, const void *a3, int a4, const void *a5, int a6)
{
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, kSCEntNetLink);
  CFPropertyListRef v12 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  if (v12)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v12) != TypeID)
    {
      CFRelease(v12);
      CFPropertyListRef v12 = 0;
    }
  }
  uint64_t v14 = sub_100014E4C((const __CFDictionary *)v12);
  CFDataRef v15 = v14;
  if (!a3)
  {
    CFDictionaryRemoveValue(v14, kSCPropNetLinkActive);
    if (!a4) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  CFDictionarySetValue(v14, kSCPropNetLinkActive, a3);
  if (a4) {
LABEL_6:
  }
    CFDictionaryRemoveValue(v15, kSCPropNetLinkDetaching);
LABEL_7:
  if (a5 && CFBooleanGetValue((CFBooleanRef)a5)) {
    CFDictionarySetValue(v15, kSCPropNetLinkExpensive, a5);
  }
  else {
    CFDictionaryRemoveValue(v15, kSCPropNetLinkExpensive);
  }
  if (CFDictionaryGetCount(v15) < 1)
  {
    if (!a6 || v12)
    {
      sub_10001099C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v20 = _os_log_pack_size();
        __chkstk_darwin(v20, v21, v22);
        __error();
        uint64_t v23 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v23 = 136315138;
        *(void *)(v23 + 4) = a1;
        __SC_log_send();
      }
      SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
    }
  }
  else if (!a6 || !v12 || !CFEqual(v12, v15))
  {
    sub_10001099C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v16 = _os_log_pack_size();
      __chkstk_darwin(v16, v17, v18);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v19 = 136315394;
      *(void *)(v19 + 4) = a1;
      *(_WORD *)(v19 + 12) = 2112;
      *(void *)(v19 + 14) = v15;
      __SC_log_send();
    }
    SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity, v15);
  }
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v15);
  if (v12) {
    CFRelease(v12);
  }
}

void sub_10001526C(const char *a1)
{
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v5 + 4) = a1;
    __SC_log_send();
  }
  CFStringRef v6 = CFStringCreateWithCString(0, a1, 0x8000100u);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v6, kSCEntNetLink);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  CFStringRef v8 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v6, kSCEntNetNAT64);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, v8);
  CFRelease(v8);
  CFStringRef v9 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v6, kSCEntNetLinkQuality);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, v9);
  CFRelease(v9);
  CFStringRef v10 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v6, kSCEntNetLinkIssues);
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, v10);
  CFRelease(v10);
  CFRelease(v6);
}

void sub_100015480(ifaddrs *a1, const char *a2)
{
  uint64_t v23 = 0;
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef v5 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!a1)
  {
    if (getifaddrs(&v23) == -1)
    {
      sub_10001099C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v16 = _os_log_pack_size();
        __chkstk_darwin(v16, v17, v18);
        __error();
        uint64_t v19 = _os_log_pack_fill();
        uint64_t v20 = __error();
        uint64_t v21 = strerror(*v20);
        *(_DWORD *)uint64_t v19 = 136315138;
        *(void *)(v19 + 4) = v21;
        __SC_log_send();
      }
      goto LABEL_16;
    }
    a1 = v23;
    if (!v23)
    {
      int v22 = 0;
      if (a2) {
        goto LABEL_13;
      }
      goto LABEL_15;
    }
  }
  int v22 = 0;
  do
  {
    if (a1->ifa_addr->sa_family != 2) {
      goto LABEL_11;
    }
    ifa_name = a1->ifa_name;
    if (a2)
    {
      if (strncmp(a2, a1->ifa_name, 0x10uLL)) {
        goto LABEL_11;
      }
      int v22 = 1;
    }
    CFStringRef v7 = CFStringCreateWithCString(0, ifa_name, 0);
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v7, kSCEntNetIPv4);
    CFRelease(v7);
    CFDictionaryRef v9 = sub_100015824(NetworkInterfaceEntity, Mutable, v5);
    sub_100015998(v9, kSCPropNetIPv4Addresses, (unsigned __int8 *)&a1->ifa_addr->sa_data[2]);
    CFStringRef v10 = (unsigned __int8 *)&a1->ifa_dstaddr->sa_data[2];
    if ((a1->ifa_flags & 0x10) != 0)
    {
      CFDictionaryRef v11 = v9;
      CFStringRef v12 = kSCPropNetIPv4DestAddresses;
    }
    else
    {
      sub_100015998(v9, kSCPropNetIPv4BroadcastAddresses, v10);
      CFStringRef v10 = (unsigned __int8 *)&a1->ifa_netmask->sa_data[2];
      CFDictionaryRef v11 = v9;
      CFStringRef v12 = kSCPropNetIPv4SubnetMasks;
    }
    sub_100015998(v11, v12, v10);
    CFDictionarySetValue(v5, NetworkInterfaceEntity, v9);
    CFRelease(v9);
    CFRelease(NetworkInterfaceEntity);
LABEL_11:
    a1 = a1->ifa_next;
  }
  while (a1);
  if (a2)
  {
LABEL_13:
    if (!v22)
    {
      CFStringRef v13 = CFStringCreateWithCString(0, a2, 0);
      CFStringRef v14 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v13, kSCEntNetIPv4);
      CFRelease(v13);
      CFMutableDictionaryRef v15 = sub_100015824(v14, Mutable, v5);
      CFDictionarySetValue(v5, v14, v15);
      CFRelease(v15);
      CFRelease(v14);
    }
  }
LABEL_15:
  CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)sub_100015A94, Mutable);
LABEL_16:
  if (v23) {
    freeifaddrs(v23);
  }
  CFRelease(Mutable);
  CFRelease(v5);
}

CFMutableDictionaryRef sub_100015824(const __CFString *key, __CFDictionary *a2, CFDictionaryRef theDict)
{
  CFDictionaryRef theDicta = 0;
  if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&theDicta))
  {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDicta);
    if (!MutableCopy) {
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }
  else
  {
    CFDictionaryRef v6 = (const __CFDictionary *)SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, key);
    CFDictionaryRef theDicta = v6;
    if (!v6) {
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    CFDictionarySetValue(a2, key, v6);
    MutableCFArrayRef Copy = theDicta;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (MutableCopy)
    {
      if (CFGetTypeID(MutableCopy) == TypeID)
      {
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDicta);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4Addresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4SubnetMasks);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4DestAddresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv4BroadcastAddresses);
      }
      else
      {
        MutableCFArrayRef Copy = 0;
      }
    }
    CFRelease(theDicta);
    if (!MutableCopy) {
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }
  return MutableCopy;
}

void sub_100015998(const __CFDictionary *a1, const void *a2, unsigned __int8 *a3)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (Value) {
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, 0, Value);
  }
  else {
    MutableCFArrayRef Copy = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  }
  CFStringRef v8 = MutableCopy;
  CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"%d.%d.%d.%d", *a3, a3[1], a3[2], a3[3]);
  CFArrayAppendValue(v8, v9);
  CFRelease(v9);
  CFDictionarySetValue(a1, a2, v8);

  CFRelease(v8);
}

uint64_t sub_100015A94(const __CFString *key, const void *a2, CFDictionaryRef theDict)
{
  CFArrayRef Value = CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    uint64_t result = CFEqual(Value, a2);
    if (result) {
      return result;
    }
    if (CFDictionaryGetCount((CFDictionaryRef)a2) < 1)
    {
      CFPropertyListRef v7 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, key);
      if (v7)
      {
        CFStringRef v8 = v7;
        sub_10001099C();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v9 = _os_log_pack_size();
          __chkstk_darwin(v9, v10, v11);
          __error();
          uint64_t v12 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v12 = 138412290;
          *(void *)(v12 + 4) = key;
          __SC_log_send();
        }
        CFRelease(v8);
      }
      uint64_t result = SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, key);
      goto LABEL_13;
    }
LABEL_10:
    sub_10001099C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13, v14, v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 138412546;
      *(void *)(v16 + 4) = key;
      *(_WORD *)(v16 + 12) = 2112;
      *(void *)(v16 + 14) = a2;
      __SC_log_send();
    }
    uint64_t result = SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, key, a2);
    goto LABEL_13;
  }
  uint64_t result = CFDictionaryGetCount((CFDictionaryRef)a2);
  if (result > 0) {
    goto LABEL_10;
  }
LABEL_13:
  byte_10007D9F0 = 1;
  return result;
}

void sub_100015D00(char *cStr, int a2, int a3, uint64_t a4)
{
  CFStringRef v7 = CFStringCreateWithCString(0, cStr, 0x600u);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v7, kSCEntNetIPv4ARPCollision);
  MutableCFArrayRef Copy = CFStringCreateMutableCopy(0, 0, NetworkInterfaceEntity);
  CFStringAppendFormat(MutableCopy, 0, @"/%d.%d.%d.%d", a2, BYTE1(a2), BYTE2(a2), HIBYTE(a2));
  if (a3 >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      if (v10) {
        uint64_t v11 = ":";
      }
      else {
        uint64_t v11 = "/";
      }
      CFStringAppendFormat(MutableCopy, 0, @"%s%02x", v11, *(unsigned __int8 *)(a4 + v10++));
    }
    while (a3 != v10);
  }
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v12 = _os_log_pack_size();
    __chkstk_darwin(v12, v13, v14);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 138412290;
    *(void *)(v15 + 4) = MutableCopy;
    __SC_log_send();
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, MutableCopy);
  CFRelease(MutableCopy);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v7);
}

void sub_100015F2C(char *a1)
{
  CFStringRef v1 = (const __CFString *)kSCEntNetIPv4RouterARPFailure;

  sub_100015F98(a1, (uint64_t)"Router ARP failure", v1);
}

void sub_100015F98(char *cStr, uint64_t a2, const __CFString *a3)
{
  CFStringRef v5 = CFStringCreateWithCString(0, cStr, 0x600u);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v5, a3);
  CFRelease(v5);
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7, v8, v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 136315394;
    *(void *)(v10 + 4) = a2;
    *(_WORD *)(v10 + 12) = 2112;
    *(void *)(v10 + 14) = NetworkInterfaceEntity;
    __SC_log_send();
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_100016118(char *a1)
{
  CFStringRef v1 = (const __CFString *)kSCEntNetIPv4RouterARPAlive;

  sub_100015F98(a1, (uint64_t)"Router ARP alive", v1);
}

void sub_100016184(ifaddrs *a1, const char *a2)
{
  uint64_t v67 = 0;
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef v66 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!a1)
  {
    if (getifaddrs(&v67) == -1)
    {
      sub_10001099C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v48 = _os_log_pack_size();
        __chkstk_darwin(v48, v49, v50);
        __error();
        uint64_t v51 = _os_log_pack_fill();
        uint64_t v52 = __error();
        uint64_t v53 = strerror(*v52);
        *(_DWORD *)uint64_t v51 = 136315138;
        *(void *)(v51 + 4) = v53;
        __SC_log_send();
      }
      int v6 = -1;
      goto LABEL_60;
    }
    a1 = v67;
    if (!v67)
    {
      int v57 = 0;
      int v6 = -1;
      if (a2) {
        goto LABEL_57;
      }
      goto LABEL_59;
    }
  }
  int v57 = 0;
  CFStringRef v60 = kSCEntNetIPv6;
  CFStringRef v61 = kSCDynamicStoreDomainState;
  CFStringRef v58 = kSCPropNetIPv6Addresses;
  uint64_t v59 = &v70;
  CFStringRef v5 = kSCPropNetIPv6PrefixLength;
  CFStringRef v65 = kSCPropNetIPv6Flags;
  CFStringRef v55 = kSCPropNetIPv6DestAddresses;
  int v6 = -1;
  *(void *)&long long v4 = 136315138;
  long long v54 = v4;
  uint64_t v62 = a2;
  do
  {
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    if (a1->ifa_addr->sa_family != 30) {
      goto LABEL_55;
    }
    if (a2)
    {
      if (strncmp(a2, a1->ifa_name, 0x10uLL)) {
        goto LABEL_55;
      }
      int v57 = 1;
    }
    if (v6 == -1)
    {
      int v6 = sub_100010B18(30);
      if (v6 == -1) {
        goto LABEL_60;
      }
    }
    CFStringRef v7 = v5;
    CFStringRef v8 = CFStringCreateWithCString(0, a1->ifa_name, 0);
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, v61, v8, v60);
    CFRelease(v8);
    CFDictionaryRef v10 = sub_100016974(NetworkInterfaceEntity, Mutable, v66);
    uint64_t ifa_addr = (uint64_t)a1->ifa_addr;
    int v12 = *(unsigned __int8 *)(ifa_addr + 8);
    if (v12 == 255)
    {
      char v13 = *(unsigned char *)(ifa_addr + 9);
      if ((v13 & 0xF0) != 0x30 && (v13 & 0xF) == 2)
      {
LABEL_15:
        unsigned int v14 = *(unsigned __int16 *)(ifa_addr + 10);
        if (*(_WORD *)(ifa_addr + 10))
        {
          *(_WORD *)(ifa_addr + 10) = 0;
          if (!*(_DWORD *)(ifa_addr + 24)) {
            *(_DWORD *)(ifa_addr + 24) = __rev16(v14);
          }
        }
      }
    }
    else if (v12 == 254 && (*(unsigned char *)(ifa_addr + 9) & 0xC0) == 0x80)
    {
      goto LABEL_15;
    }
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    __strlcpy_chk();
    long long v15 = *(_OWORD *)(ifa_addr + 12);
    uint64_t v16 = v59;
    long long *v59 = *(_OWORD *)ifa_addr;
    *(long long *)((char *)v16 + 12) = v15;
    int v64 = v6;
    if (ioctl(v6, 0xC1206949uLL, &v69) == -1)
    {
      sub_10001099C();
      __error();
      _SC_syslog_os_log_mapping();
      __error();
      if (__SC_log_enabled())
      {
        uint64_t v17 = _os_log_pack_size();
        uint64_t v56 = &v54;
        __chkstk_darwin(v17, v18, v19);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        uint64_t v21 = __error();
        int v22 = strerror(*v21);
        *(_DWORD *)uint64_t v20 = v54;
        *(void *)(v20 + 4) = v22;
        __error();
        __SC_log_send();
      }
    }
    sub_100016AE8(v10, v58, ifa_addr);
    uint64_t v23 = 0;
    int v24 = 0;
    ifa_netmask = a1->ifa_netmask;
    uint64_t v26 = &ifa_netmask->sa_data[6];
    CFStringRef v5 = v7;
    while (v26[v23] == 255)
    {
      ++v23;
      v24 += 8;
      if (v23 == 16)
      {
        int v68 = 128;
        goto LABEL_36;
      }
    }
    int v68 = v24;
    int v27 = 0;
    unsigned int v28 = v26[v23];
    while (1)
    {
      int v29 = v27 + 7;
      if (((v28 >> (v27 + 7)) & 1) == 0) {
        break;
      }
      if (--v27 == -7)
      {
        int v68 = v24 + 7;
LABEL_32:
        unsigned int v30 = &ifa_netmask->sa_data[7];
        while (v23 != 15)
        {
          if (v30[v23++]) {
            goto LABEL_35;
          }
        }
        goto LABEL_36;
      }
    }
    int v68 = v24 - v27;
    while (((v28 >> v29) & 1) == 0)
    {
      if (!--v29) {
        goto LABEL_32;
      }
    }
LABEL_35:
    int v68 = 0;
LABEL_36:
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v10, v7);
    if (Value) {
      MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, 0, Value);
    }
    else {
      MutableCFArrayRef Copy = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    }
    uint64_t v34 = MutableCopy;
    int v6 = v64;
    CFNumberRef v35 = CFNumberCreate(0, kCFNumberIntType, &v68);
    CFArrayAppendValue(v34, v35);
    CFRelease(v35);
    CFDictionarySetValue(v10, v7, v34);
    CFRelease(v34);
    int v68 = v70;
    CFArrayRef v36 = (const __CFArray *)CFDictionaryGetValue(v10, v65);
    a2 = v62;
    if (v36) {
      CFMutableArrayRef v37 = CFArrayCreateMutableCopy(0, 0, v36);
    }
    else {
      CFMutableArrayRef v37 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    }
    uint64_t v38 = v37;
    CFNumberRef v39 = CFNumberCreate(0, kCFNumberIntType, &v68);
    CFArrayAppendValue(v38, v39);
    CFRelease(v39);
    CFDictionarySetValue(v10, v65, v38);
    CFRelease(v38);
    if ((a1->ifa_flags & 0x10) == 0) {
      goto LABEL_54;
    }
    uint64_t ifa_dstaddr = (uint64_t)a1->ifa_dstaddr;
    if (!ifa_dstaddr) {
      goto LABEL_54;
    }
    int v41 = *(unsigned __int8 *)(ifa_dstaddr + 8);
    if (v41 == 255)
    {
      char v42 = *(unsigned char *)(ifa_dstaddr + 9);
      if ((v42 & 0xF0) != 0x30 && (v42 & 0xF) == 2)
      {
LABEL_50:
        unsigned int v43 = *(unsigned __int16 *)(ifa_dstaddr + 10);
        if (*(_WORD *)(ifa_dstaddr + 10))
        {
          *(_WORD *)(ifa_dstaddr + 10) = 0;
          if (!*(_DWORD *)(ifa_dstaddr + 24)) {
            *(_DWORD *)(ifa_dstaddr + 24) = __rev16(v43);
          }
        }
      }
    }
    else if (v41 == 254 && (*(unsigned char *)(ifa_dstaddr + 9) & 0xC0) == 0x80)
    {
      goto LABEL_50;
    }
    sub_100016AE8(v10, v55, ifa_dstaddr);
LABEL_54:
    CFDictionarySetValue(v66, NetworkInterfaceEntity, v10);
    CFRelease(v10);
    CFRelease(NetworkInterfaceEntity);
LABEL_55:
    a1 = a1->ifa_next;
  }
  while (a1);
  if (a2)
  {
LABEL_57:
    if (!v57)
    {
      CFStringRef v44 = CFStringCreateWithCString(0, a2, 0);
      CFStringRef v45 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v44, kSCEntNetIPv6);
      CFRelease(v44);
      uint64_t v46 = v66;
      CFMutableDictionaryRef v47 = sub_100016974(v45, Mutable, v66);
      CFDictionarySetValue(v46, v45, v47);
      CFRelease(v47);
      CFRelease(v45);
    }
  }
LABEL_59:
  CFDictionaryApplyFunction(v66, (CFDictionaryApplierFunction)sub_100016CBC, Mutable);
LABEL_60:
  if (v67) {
    freeifaddrs(v67);
  }
  if (v6 != -1) {
    close(v6);
  }
  CFRelease(Mutable);
  CFRelease(v66);
}

CFMutableDictionaryRef sub_100016974(const __CFString *key, __CFDictionary *a2, CFDictionaryRef theDict)
{
  CFDictionaryRef theDicta = 0;
  if (CFDictionaryGetValueIfPresent(theDict, key, (const void **)&theDicta))
  {
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDicta);
    if (!MutableCopy) {
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }
  else
  {
    CFDictionaryRef v6 = (const __CFDictionary *)SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, key);
    CFDictionaryRef theDicta = v6;
    if (!v6) {
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    CFDictionarySetValue(a2, key, v6);
    MutableCFArrayRef Copy = theDicta;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (MutableCopy)
    {
      if (CFGetTypeID(MutableCopy) == TypeID)
      {
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDicta);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6Addresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6DestAddresses);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6Flags);
        CFDictionaryRemoveValue(MutableCopy, kSCPropNetIPv6PrefixLength);
      }
      else
      {
        MutableCFArrayRef Copy = 0;
      }
    }
    CFRelease(theDicta);
    if (!MutableCopy) {
      return CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
  }
  return MutableCopy;
}

void sub_100016AE8(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  if (Value) {
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, 0, Value);
  }
  else {
    MutableCFArrayRef Copy = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  }
  CFStringRef v8 = MutableCopy;
  if (!inet_ntop(30, (const void *)(a3 + 8), v16, 0x2Eu))
  {
    sub_10001099C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9, v10, v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      char v13 = __error();
      unsigned int v14 = strerror(*v13);
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)(v12 + 4) = v14;
      __SC_log_send();
    }
    v16[0] = 0;
  }
  CFStringRef v15 = CFStringCreateWithFormat(0, 0, @"%s", v16);
  CFArrayAppendValue(v8, v15);
  CFRelease(v15);
  CFDictionarySetValue(a1, a2, v8);
  CFRelease(v8);
}

uint64_t sub_100016CBC(const __CFString *key, const void *a2, CFDictionaryRef theDict)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, key);
  uint64_t v6 = result;
  if (result && (uint64_t result = CFEqual((CFTypeRef)result, a2), result))
  {
    if (!a2)
    {
LABEL_10:
      if (v6)
      {
        CFPropertyListRef v11 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007D9F8, key);
        if (v11)
        {
          uint64_t v12 = v11;
          sub_10001099C();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v13 = _os_log_pack_size();
            __chkstk_darwin(v13, v14, v15);
            __error();
            uint64_t v16 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v16 = 138412290;
            *(void *)(v16 + 4) = key;
            __SC_log_send();
          }
          CFRelease(v12);
        }
        return SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007D9F8, key);
      }
      return result;
    }
  }
  else
  {
    byte_10007D9F0 = 1;
    if (!a2) {
      goto LABEL_10;
    }
  }
  uint64_t result = CFDictionaryGetCount((CFDictionaryRef)a2);
  if (result < 1) {
    goto LABEL_10;
  }
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7, v8, v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 138412546;
    *(void *)(v10 + 4) = key;
    *(_WORD *)(v10 + 12) = 2112;
    *(void *)(v10 + 14) = a2;
    __SC_log_send();
  }
  return SCDynamicStoreSetValue((SCDynamicStoreRef)qword_10007D9F8, key, a2);
}

void sub_100016F30(char *cStr, const void *a2, int a3, uint64_t a4)
{
  CFStringRef v7 = CFStringCreateWithCString(0, cStr, 0x600u);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v7, @"IPv6DuplicatedAddress");
  v12[0] = 0;
  inet_ntop(30, a2, v12, 0x2Eu);
  MutableCFArrayRef Copy = CFStringCreateMutableCopy(0, 0, NetworkInterfaceEntity);
  CFStringAppendFormat(MutableCopy, 0, @"/%s", v12);
  if (a3 >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      if (v10) {
        CFPropertyListRef v11 = ":";
      }
      else {
        CFPropertyListRef v11 = "/";
      }
      CFStringAppendFormat(MutableCopy, 0, @"%s%02x", v11, *(unsigned __int8 *)(a4 + v10++));
    }
    while (a3 != v10);
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, MutableCopy);
  CFRelease(MutableCopy);
  CFRelease(NetworkInterfaceEntity);
  CFRelease(v7);
}

void sub_1000170A8(char *cStr)
{
  CFStringRef v1 = CFStringCreateWithCString(0, cStr, 0x600u);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v1, kSCEntNetNAT64PrefixRequest);
  CFRelease(v1);
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3, v4, v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v6 = 138412290;
    *(void *)(v6 + 4) = NetworkInterfaceEntity;
    __SC_log_send();
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

void sub_100017214(char *cStr)
{
  CFStringRef v1 = CFStringCreateWithCString(0, cStr, 0x600u);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v1, kSCEntNetIPv6RouterExpired);
  CFRelease(v1);
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3, v4, v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v6 = 138412290;
    *(void *)(v6 + 4) = NetworkInterfaceEntity;
    __SC_log_send();
  }
  SCDynamicStoreNotifyValue((SCDynamicStoreRef)qword_10007D9F8, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
}

CFBooleanRef sub_100017380(char *cStr)
{
  CFStringRef v2 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  uint64_t v3 = (const __SCNetworkInterface *)_SCNetworkInterfaceCreateWithBSDName();
  if (v3)
  {
    uint64_t v4 = v3;
    CFBooleanRef v5 = sub_1000174BC(v3);
    if (_os_feature_enabled_impl()) {
      int v6 = SCNetworkInterfaceSupportsLowDataMode();
    }
    else {
      int v6 = 0;
    }
    CFRelease(v4);
    if (v5)
    {
      int v7 = sub_100010B18(2);
      if (v7 != -1)
      {
        int v8 = v7;
        int Value = CFBooleanGetValue(v5);
        int v10 = sub_100017900(v8, (uint64_t)cStr, Value != 0);
        close(v8);
        if (v6)
        {
          if (Value && !v10) {
            sub_100017B54(v2);
          }
        }
      }
    }
  }
  else
  {
    CFBooleanRef v5 = 0;
  }
  CFRelease(v2);
  return v5;
}

CFBooleanRef sub_1000174BC(const __SCNetworkInterface *Interface)
{
  do
  {
    CFStringRef v1 = Interface;
    Interface = SCNetworkInterfaceGetInterface(Interface);
  }
  while (Interface);
  if (_SCNetworkInterfaceIsTetheredHotspot() || _SCNetworkInterfaceIsBluetoothPAN()) {
    return kCFBooleanTrue;
  }
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(v1);
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(v1);
  if (CFEqual(InterfaceType, kSCNetworkInterfaceTypeIEEE80211)) {
    BOOL v6 = BSDName == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || !CFStringHasPrefix(BSDName, @"en"))
  {
    CFStringRef v20 = SCNetworkInterfaceGetInterfaceType(v1);
    if (CFEqual(v20, kSCNetworkInterfaceTypeWWAN)) {
      return kCFBooleanTrue;
    }
    else {
      return 0;
    }
  }
  CFBooleanRef v2 = kCFBooleanFalse;
  CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%@%@/%@/%@/%@/%@", &stru_100077F38, kSCDynamicStoreDomainSetup, kSCCompNetwork, @"Override", @"InterfaceType", kSCNetworkInterfaceTypeIEEE80211);
  CFPropertyListRef v8 = SCDynamicStoreCopyValue(0, v7);
  CFRelease(v7);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!v8) {
    goto LABEL_17;
  }
  if (CFGetTypeID(v8) != TypeID) {
    goto LABEL_16;
  }
  int Value = CFDictionaryGetValue((CFDictionaryRef)v8, @"Expiration");
  CFTypeID v11 = CFDateGetTypeID();
  if (!Value
    || CFGetTypeID(Value) != v11
    || (CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent(),
        CFDateRef v13 = CFDateCreate(0, Current),
        CFComparisonResult v14 = CFDateCompare(v13, (CFDateRef)Value, 0),
        CFRelease(v13),
        v14 != kCFCompareLessThan)
    || (uint64_t v21 = CFDictionaryGetValue((CFDictionaryRef)v8, @"Cost"), v22 = CFStringGetTypeID(), !v21)
    || CFGetTypeID(v21) != v22)
  {
LABEL_16:
    CFRelease(v8);
    goto LABEL_17;
  }
  int v23 = CFEqual(v21, @"Expensive");
  if (!v23)
  {
    int v24 = CFEqual(v21, @"Inexpensive");
    CFRelease(v8);
    if (v24) {
      goto LABEL_28;
    }
LABEL_17:
    if (!sub_1000594D8()) {
      return v2;
    }
    sub_10001099C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v15 = _os_log_pack_size();
      __chkstk_darwin(v15, v16, v17);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      CFStringRef v19 = SCNetworkInterfaceGetBSDName(v1);
      *(_DWORD *)uint64_t v18 = 138412290;
      *(void *)(v18 + 4) = v19;
      __SC_log_send();
    }
    return kCFBooleanTrue;
  }
  CFRelease(v8);
LABEL_28:
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v25 = _os_log_pack_size();
    __chkstk_darwin(v25, v26, v27);
    __error();
    uint64_t v28 = _os_log_pack_fill();
    CFStringRef v29 = SCNetworkInterfaceGetBSDName(v1);
    unsigned int v30 = "";
    if (!v23) {
      unsigned int v30 = "in";
    }
    *(_DWORD *)uint64_t v28 = 138412546;
    *(void *)(v28 + 4) = v29;
    *(_WORD *)(v28 + 12) = 2080;
    *(void *)(v28 + 14) = v30;
    __SC_log_send();
  }
  if (v23) {
    return kCFBooleanTrue;
  }
  return v2;
}

uint64_t sub_100017900(int a1, uint64_t a2, int a3)
{
  long long v14 = 0u;
  long long v15 = 0u;
  __strlcpy_chk();
  uint64_t v6 = ioctl(a1, 0xC02069A0uLL, &v14);
  if (v6 == -1 && *__error() != 1)
  {
    sub_10001099C();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return 0xFFFFFFFFLL;
    }
LABEL_9:
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7, v8, v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    CFTypeID v11 = __error();
    uint64_t v12 = strerror(*v11);
    *(_DWORD *)uint64_t v10 = 136315394;
    *(void *)(v10 + 4) = a2;
    *(_WORD *)(v10 + 12) = 2080;
    *(void *)(v10 + 14) = v12;
    __SC_log_send();
    return 0xFFFFFFFFLL;
  }
  if (v15 != a3)
  {
    LODWORD(v15) = a3;
    uint64_t v6 = ioctl(a1, 0xC02069A1uLL, &v14);
    if (v6 == -1)
    {
      if (*__error() == 1) {
        return 0xFFFFFFFFLL;
      }
      sub_10001099C();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_9;
    }
  }
  return v6;
}

void sub_100017B54(const void *a1)
{
  CFBooleanRef v2 = SCPreferencesCreate(0, @"KernelEventMonitor", 0);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = SCNetworkSetCopyCurrent(v2);
    if (!v4) {
      goto LABEL_25;
    }
    CFBooleanRef v5 = v4;
    CFArrayRef v6 = SCNetworkSetCopyServices(v4);
    if (v6)
    {
      CFArrayRef v7 = v6;
      CFIndex Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        CFIndex v10 = 0;
        while (1)
        {
          CFDataRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v7, v10);
          if (SCNetworkServiceGetEnabled(ValueAtIndex))
          {
            Interface = SCNetworkServiceGetInterface(ValueAtIndex);
            if (Interface)
            {
              CFDateRef v13 = Interface;
              CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
              if (BSDName)
              {
                if (CFEqual(BSDName, a1)) {
                  break;
                }
              }
            }
          }
          if (v9 == ++v10)
          {
            CFDateRef v13 = 0;
            goto LABEL_12;
          }
        }
        CFRetain(v13);
LABEL_12:
        CFRelease(v5);
        CFRelease(v7);
        if (v13)
        {
          EnableLowDataModeint Value = (const __CFNumber *)__SCNetworkInterfaceGetEnableLowDataModeValue();
          if (EnableLowDataModeValue)
          {
            int valuePtr = 0;
            CFNumberGetValue(EnableLowDataModeValue, kCFNumberIntType, &valuePtr);
            sub_10001099C();
            _SC_syslog_os_log_mapping();
            if (!__SC_log_enabled())
            {
LABEL_19:
              CFRelease(v3);
              uint64_t v21 = v13;
LABEL_28:
              CFRelease(v21);
              return;
            }
            uint64_t v16 = _os_log_pack_size();
            __chkstk_darwin(v16, v17, v18);
            __error();
            uint64_t v19 = _os_log_pack_fill();
            CFStringRef v20 = "true";
            if (!valuePtr) {
              CFStringRef v20 = "false";
            }
            *(_DWORD *)uint64_t v19 = 138412546;
            *(void *)(v19 + 4) = a1;
            *(_WORD *)(v19 + 12) = 2080;
            *(void *)(v19 + 14) = v20;
          }
          else
          {
            if (SCNetworkInterfaceSetEnableLowDataMode())
            {
              if (SCPreferencesCommitChanges(v3))
              {
                int v32 = SCPreferencesApplyChanges(v3);
                sub_10001099C();
                _SC_syslog_os_log_mapping();
                int v33 = __SC_log_enabled();
                if (v32)
                {
                  if (!v33) {
                    goto LABEL_19;
                  }
                  uint64_t v34 = _os_log_pack_size();
                  __chkstk_darwin(v34, v35, v36);
                  __error();
                  uint64_t v37 = _os_log_pack_fill();
                  *(_DWORD *)uint64_t v37 = 138412290;
                  *(void *)(v37 + 4) = a1;
                  goto LABEL_18;
                }
                if (!v33) {
                  goto LABEL_19;
                }
                uint64_t v50 = _os_log_pack_size();
                __chkstk_darwin(v50, v51, v52);
                __error();
                uint64_t v53 = _os_log_pack_fill();
                int v54 = SCError();
                CFStringRef v55 = SCErrorString(v54);
                *(_DWORD *)uint64_t v53 = 136315138;
                *(void *)(v53 + 4) = v55;
              }
              else
              {
                sub_10001099C();
                _SC_syslog_os_log_mapping();
                if (!__SC_log_enabled()) {
                  goto LABEL_19;
                }
                uint64_t v44 = _os_log_pack_size();
                __chkstk_darwin(v44, v45, v46);
                __error();
                uint64_t v47 = _os_log_pack_fill();
                int v48 = SCError();
                uint64_t v49 = SCErrorString(v48);
                *(_DWORD *)uint64_t v47 = 136315138;
                *(void *)(v47 + 4) = v49;
              }
              __SC_log_send();
              goto LABEL_19;
            }
            sub_10001099C();
            _SC_syslog_os_log_mapping();
            if (!__SC_log_enabled()) {
              goto LABEL_19;
            }
            uint64_t v38 = _os_log_pack_size();
            __chkstk_darwin(v38, v39, v40);
            __error();
            uint64_t v41 = _os_log_pack_fill();
            int v42 = SCError();
            unsigned int v43 = SCErrorString(v42);
            *(_DWORD *)uint64_t v41 = 138412546;
            *(void *)(v41 + 4) = a1;
            *(_WORD *)(v41 + 12) = 2080;
            *(void *)(v41 + 14) = v43;
          }
LABEL_18:
          __SC_log_send();
          goto LABEL_19;
        }
LABEL_25:
        sub_10001099C();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v28 = _os_log_pack_size();
          __chkstk_darwin(v28, v29, v30);
          __error();
          uint64_t v31 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v31 = 138412290;
          *(void *)(v31 + 4) = a1;
          __SC_log_send();
        }
        uint64_t v21 = v3;
        goto LABEL_28;
      }
      CFRelease(v5);
    }
    else
    {
      CFArrayRef v7 = v5;
    }
    CFRelease(v7);
    goto LABEL_25;
  }
  sub_10001099C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v22 = _os_log_pack_size();
    __chkstk_darwin(v22, v23, v24);
    __error();
    uint64_t v25 = _os_log_pack_fill();
    int v26 = SCError();
    uint64_t v27 = SCErrorString(v26);
    *(_DWORD *)uint64_t v25 = 136315138;
    *(void *)(v25 + 4) = v27;
    __SC_log_send();
  }
}

uint64_t sub_1000181B8(uint64_t a1, uint64_t a2)
{
  return __SCControlPrefsCreate("com.apple.InterfaceNamer.control.plist", a1, a2);
}

uint64_t sub_100018220(uint64_t a1)
{
  if (!a1) {
    return 0;
  }

  return __SCControlPrefsGetBoolean();
}

uint64_t sub_1000182AC(uint64_t a1)
{
  if (!a1) {
    return 0;
  }

  return __SCControlPrefsGetBoolean();
}

uint64_t NetworkInterfaceGetReservedRange(uint64_t a1, _DWORD *a2)
{
  uint64_t IOInterfaceNamePrefix = _SCNetworkInterfaceGetIOInterfaceNamePrefix();
  if (IOInterfaceNamePrefix)
  {
    uint64_t v5 = IOInterfaceNamePrefix;
    uint64_t IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID();
    io_registry_entry_t v7 = sub_100018524(IORegistryEntryID);
    CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"network-interface-unit-%@", v5);
    CFDataRef v9 = (const __CFData *)IORegistryEntrySearchCFProperty(v7, "IOService", v8, 0, 3u);
    CFTypeID TypeID = CFDataGetTypeID();
    if (v9 && CFGetTypeID(v9) == TypeID)
    {
      uint64_t v11 = sub_100018770(v9, a2);
      if (!v7) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v11 = 0;
      if (!v7)
      {
LABEL_8:
        if (v9) {
          CFRelease(v9);
        }
        if (v8) {
          CFRelease(v8);
        }
        return v11;
      }
    }
    IOObjectRelease(v7);
    goto LABEL_8;
  }
  sub_100018D10();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v12 = _os_log_pack_size();
    __chkstk_darwin(v12, v13, v14);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 136315394;
    *(void *)(v15 + 4) = "NetworkInterfaceGetReservedRange";
    *(_WORD *)(v15 + 12) = 2112;
    *(void *)(v15 + 14) = a1;
    __SC_log_send();
  }
  return 0;
}

uint64_t sub_100018524(uint64_t a1)
{
  kern_return_t MatchingServices;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  io_iterator_t existing;

  existing = 0;
  CFDictionaryRef v2 = IORegistryEntryIDMatching(a1);
  MatchingServices = IOServiceGetMatchingServices(kIOMainPortDefault, v2, &existing);
  if (MatchingServices) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = existing == 0;
  }
  if (v4)
  {
    sub_100018D10();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5, v6, v7);
      __error();
      CFStringRef v8 = _os_log_pack_fill();
      *(_DWORD *)CFStringRef v8 = 136315650;
      *(void *)(v8 + 4) = "getRegistryEntryWithID";
      *(_WORD *)(v8 + 12) = 2048;
      *(void *)(v8 + 14) = a1;
      *(_WORD *)(v8 + 22) = 1024;
      *(_DWORD *)(v8 + 24) = MatchingServices;
LABEL_11:
      __SC_log_send();
    }
LABEL_12:
    CFIndex v10 = 0;
    goto LABEL_13;
  }
  CFDataRef v9 = IOIteratorNext(existing);
  CFIndex v10 = v9;
  if (!v9)
  {
    sub_100018D10();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11, v12, v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136315394;
      *(void *)(v14 + 4) = "getRegistryEntryWithID";
      *(_WORD *)(v14 + 12) = 2048;
      *(void *)(v14 + 14) = a1;
      goto LABEL_11;
    }
    goto LABEL_12;
  }
LABEL_13:
  if (existing) {
    IOObjectRelease(existing);
  }
  return v10;
}

uint64_t sub_100018770(const __CFData *a1, _DWORD *a2)
{
  unsigned int Length = CFDataGetLength(a1);
  unsigned int v5 = Length;
  if (Length < 4 || (Length & 3) != 0)
  {
    sub_100018D10();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    uint64_t v16 = _os_log_pack_size();
    __chkstk_darwin(v16, v17, v18);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v19 = 136315394;
    *(void *)(v19 + 4) = "IFUnitRangeInitWithData";
    *(_WORD *)(v19 + 12) = 1024;
    *(_DWORD *)(v19 + 14) = v5;
    goto LABEL_12;
  }
  unsigned int v6 = Length >> 2;
  *(void *)a2 = 0;
  BytePtr = CFDataGetBytePtr(a1);
  if (v6 >= 2) {
    int v8 = 2;
  }
  else {
    int v8 = v6;
  }
  memmove(a2, BytePtr, (4 * v8));
  if (v5 < 8)
  {
    a2[1] = *a2;
  }
  else if (a2[1] < *a2)
  {
    sub_100018D10();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    uint64_t v10 = _os_log_pack_size();
    __chkstk_darwin(v10, v11, v12);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    int v15 = *a2;
    int v14 = a2[1];
    *(_DWORD *)uint64_t v13 = 136315650;
    *(void *)(v13 + 4) = "IFUnitRangeInitWithData";
    *(_WORD *)(v13 + 12) = 1024;
    *(_DWORD *)(v13 + 14) = v14;
    *(_WORD *)(v13 + 18) = 1024;
    *(_DWORD *)(v13 + 20) = v15;
LABEL_12:
    __SC_log_send();
    return 0;
  }
  return 1;
}

uint64_t NetworkInterfacePrefixGetReservedUnits(void *key)
{
  kern_return_t v5;
  kern_return_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  io_registry_entry_t v11;
  unsigned int v12;
  char v13;
  CFTypeRef CFProperty;
  const void *v15;
  CFTypeID TypeID;
  __CFDictionary *Mutable;
  io_iterator_t iterator;
  void *value;

  iterator = 0;
  if (qword_10007DAE0)
  {
    value = 0;
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)qword_10007DAE0, key, (const void **)&value))
    {
      CFStringRef v2 = 0;
      int v3 = 0;
      uint64_t v4 = value;
      goto LABEL_26;
    }
  }
  CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"network-interface-unit-%@", key);
  unsigned int v5 = IORegistryCreateIterator(kIOMainPortDefault, "IODeviceTree", 1u, &iterator);
  if (v5)
  {
    unsigned int v6 = v5;
    sub_100018D10();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      io_registry_entry_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v10 = 67109120;
      v10[1] = v6;
      __SC_log_send();
      int v3 = 1;
      uint64_t v4 = 0;
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  value = 0;
  uint64_t v11 = IOIteratorNext(iterator);
  if (!v11) {
    goto LABEL_24;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  do
  {
    CFProperty = IORegistryEntryCreateCFProperty(v11, v2, 0, 0);
    if (CFProperty)
    {
      int v15 = CFProperty;
      CFTypeID TypeID = CFDataGetTypeID();
      if (CFGetTypeID(v15) == TypeID
        && sub_100018770((const __CFData *)v15, &value)
        && (!v13 || HIDWORD(value) > v12))
      {
        uint64_t v13 = 1;
        uint64_t v12 = HIDWORD(value);
      }
      CFRelease(v15);
    }
    value = 0;
    uint64_t v11 = IOIteratorNext(iterator);
  }
  while (v11);
  if (!v13)
  {
LABEL_24:
    uint64_t v4 = 0;
    goto LABEL_25;
  }
  uint64_t v4 = v12 + 1;
LABEL_25:
  int v3 = 1;
LABEL_26:
  if (iterator) {
    IOObjectRelease(iterator);
  }
  if (v2) {
    CFRelease(v2);
  }
  if (v3)
  {
    CFArrayRef Mutable = (__CFDictionary *)qword_10007DAE0;
    if (!qword_10007DAE0)
    {
      CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, (const CFDictionaryValueCallBacks *)&unk_10007D8A0);
      qword_10007DAE0 = (uint64_t)Mutable;
    }
    CFDictionarySetValue(Mutable, key, (const void *)v4);
  }
  return v4;
}

CFStringRef sub_100018C60(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"%u", a1);
}

BOOL sub_100018CC0(int a1, int a2)
{
  return a1 == a2;
}

os_log_t sub_100018D10()
{
  os_log_t result = (os_log_t)qword_10007DAE8;
  if (!qword_10007DAE8)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    qword_10007DAE8 = (uint64_t)result;
  }
  return result;
}

uint64_t sub_100018D84(void *a1)
{
  memset(&v4, 0, sizeof(v4));
  pthread_t v3 = 0;
  CFRetain(a1);
  pthread_attr_init(&v4);
  pthread_attr_setscope(&v4, 1);
  pthread_attr_setdetachstate(&v4, 2);
  pthread_create(&v3, &v4, (void *(__cdecl *)(void *))sub_100018E34, a1);
  return pthread_attr_destroy(&v4);
}

uint64_t sub_100018E34(__CFBundle *a1)
{
  pthread_setname_np("InterfaceNamer thread");
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  uint64_t v3 = sub_1000181B8((uint64_t)Current, (uint64_t)sub_100019200);
  sub_100019200(v3);
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (InfoDictionary && CFGetTypeID(InfoDictionary) == TypeID)
  {
    int Value = CFDictionaryGetValue(InfoDictionary, @"WaitStackTimeout");
    if (Value)
    {
      io_registry_entry_t v7 = Value;
      CFTypeID v8 = CFNumberGetTypeID();
      if (CFGetTypeID(v7) != v8
        || !CFNumberGetValue((CFNumberRef)v7, kCFNumberDoubleType, &qword_10007D8C8)
        || *(double *)&qword_10007D8C8 <= 0.0)
      {
        if (!qword_10007DAE8) {
          qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v9 = _os_log_pack_size();
          __chkstk_darwin(v9, v10, v11);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
        qword_10007D8C8 = 0x4072C00000000000;
      }
    }
    uint64_t v12 = CFDictionaryGetValue(InfoDictionary, @"WaitQuietTimeout");
    if (v12)
    {
      uint64_t v13 = v12;
      CFTypeID v14 = CFNumberGetTypeID();
      if (CFGetTypeID(v13) != v14
        || !CFNumberGetValue((CFNumberRef)v13, kCFNumberDoubleType, &qword_10007D8D0)
        || *(double *)&qword_10007D8D0 <= 0.0)
      {
        if (!qword_10007DAE8) {
          qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v15 = _os_log_pack_size();
          __chkstk_darwin(v15, v16, v17);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
        qword_10007D8D0 = 0x406E000000000000;
      }
    }
  }
  if (!sub_10001946C() || !sub_10001979C())
  {
    if (dword_10007DAF0)
    {
      IOServiceClose(dword_10007DAF0);
      dword_10007DAF0 = 0;
    }
    if (qword_10007DAF8)
    {
      CFRelease((CFTypeRef)qword_10007DAF8);
      qword_10007DAF8 = 0;
    }
    if (dword_10007DB00)
    {
      IOObjectRelease(dword_10007DB00);
      dword_10007DB00 = 0;
    }
    if (qword_10007DB08) {
      IONotificationPortDestroy((IONotificationPortRef)qword_10007DB08);
    }
    if (dword_10007DB10)
    {
      IOObjectRelease(dword_10007DB10);
      dword_10007DB10 = 0;
    }
    if (dword_10007DB14)
    {
      IOObjectRelease(dword_10007DB14);
      dword_10007DB14 = 0;
    }
    if (qword_10007DB18)
    {
      CFRelease((CFTypeRef)qword_10007DB18);
      qword_10007DB18 = 0;
    }
    if (qword_10007DB20)
    {
      CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_10007DB20);
      CFRelease((CFTypeRef)qword_10007DB20);
      qword_10007DB20 = 0;
    }
  }
  CFRelease(a1);
  CFRunLoopRun();
  return 0;
}

uint64_t sub_100019200(uint64_t a1)
{
  int v2 = sub_100018220(a1);
  if (v2 != byte_10007DB28)
  {
    int v3 = v2;
    byte_10007DB28 = v2;
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4, v5, v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      CFTypeID v8 = "enabled";
      if (!v3) {
        CFTypeID v8 = "disabled";
      }
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v7 + 4) = v8;
      __SC_log_send();
    }
  }
  uint64_t result = sub_1000182AC(a1);
  if (result != byte_10007DB29)
  {
    int v10 = result;
    byte_10007DB29 = result;
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11, v12, v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      uint64_t v15 = "enabled";
      if (!v10) {
        uint64_t v15 = "disabled";
      }
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = v15;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_10001946C()
{
  dispatch_time_t v0 = SCPreferencesCreate(0, @"InterfaceNamer:setup_Virtual", 0);
  qword_10007DB30 = (uint64_t)v0;
  if (v0)
  {
    if (SCPreferencesSetCallback(v0, (SCPreferencesCallBack)sub_100019FB8, 0))
    {
      CFStringRef v1 = (const __SCPreferences *)qword_10007DB30;
      CFRunLoopRef Current = CFRunLoopGetCurrent();
      if (SCPreferencesScheduleWithRunLoop(v1, Current, kCFRunLoopDefaultMode) || SCError() == 2002) {
        return 1;
      }
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_18;
      }
    }
    else
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_18;
      }
    }
    uint64_t v10 = _os_log_pack_size();
    __chkstk_darwin(v10, v11, v12);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    int v14 = SCError();
    uint64_t v15 = SCErrorString(v14);
    *(_DWORD *)uint64_t v13 = 136315138;
    *(void *)(v13 + 4) = v15;
    __SC_log_send();
LABEL_18:
    CFRelease((CFTypeRef)qword_10007DB30);
    return 0;
  }
  if (!qword_10007DAE8) {
    qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
  }
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4, v5, v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    int v8 = SCError();
    uint64_t v9 = SCErrorString(v8);
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = v9;
    __SC_log_send();
    return 0;
  }
  return result;
}

uint64_t sub_10001979C()
{
  kern_return_t v8;
  kern_return_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  kern_return_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  CFAbsoluteTime Current;
  __CFRunLoop *v24;
  IONotificationPort *v25;
  CFDictionaryRef v26;
  kern_return_t v27;
  kern_return_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  IONotificationPort *v32;
  CFDictionaryRef v33;
  kern_return_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __CFRunLoop *v41;
  __CFRunLoopSource *RunLoopSource;
  uint32_t busyState;

  qword_10007DAF8 = (uint64_t)sub_10001A468();
  if (qword_10007DAF8)
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10007DAF8);
    if (Count >= 1)
    {
      CFIndex v2 = Count;
      for (CFIndex i = 0; i != v2; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DAF8, i);
        if (CFDictionaryContainsKey(ValueAtIndex, @"Active"))
        {
          MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, ValueAtIndex);
          CFDictionaryRemoveValue(MutableCopy, @"Active");
          CFArraySetValueAtIndex((CFMutableArrayRef)qword_10007DAF8, i, MutableCopy);
          CFArrayAppendValue(Mutable, MutableCopy);
          CFRelease(MutableCopy);
        }
      }
    }
  }
  else
  {
    CFArrayRef Mutable = 0;
  }
  busyState = 0;
  qword_10007DB48 = (uint64_t)Mutable;
  qword_10007DB18 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_10001A760((__CFDictionary *)qword_10007DB18, @"*START*");
  qword_10007DB08 = (uint64_t)IONotificationPortCreate(kIOMainPortDefault);
  if (!qword_10007DB08)
  {
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return 0;
    }
    goto LABEL_23;
  }
  io_service_t v6 = IORegistryEntryFromPath(kIOMainPortDefault, "IOService:/");
  if (v6)
  {
    io_service_t v7 = v6;
    int v8 = IOServiceAddInterestNotification((IONotificationPortRef)qword_10007DB08, v6, "IOBusyInterest", (IOServiceInterestCallback)sub_10001A8EC, (void *)qword_10007DB08, (io_object_t *)&dword_10007DB10);
    if (v8)
    {
      uint64_t v9 = v8;
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_32;
      }
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10, v11, v12);
      __error();
    }
    else
    {
      uint64_t v17 = IOServiceGetBusyState(v7, &busyState);
      if (!v17)
      {
        CFRunLoopRef Current = CFAbsoluteTimeGetCurrent();
        qword_10007DB20 = (uint64_t)CFRunLoopTimerCreate(0, Current + *(double *)&qword_10007D8C8, 0.0, 0, 0, (CFRunLoopTimerCallBack)sub_10001AB98, 0);
        if (!qword_10007DB20)
        {
          if (!qword_10007DAE8) {
            qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v29 = _os_log_pack_size();
            __chkstk_darwin(v29, v30, v31);
            __error();
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send();
          }
          goto LABEL_32;
        }
        uint64_t v24 = CFRunLoopGetCurrent();
        CFRunLoopAddTimer(v24, (CFRunLoopTimerRef)qword_10007DB20, kCFRunLoopDefaultMode);
        uint64_t v25 = (IONotificationPort *)qword_10007DB08;
        int v26 = IOServiceMatching("IONetworkStack");
        uint64_t v27 = IOServiceAddMatchingNotification(v25, "IOServiceFirstMatch", v26, (IOServiceMatchingCallback)sub_10001AD18, (void *)qword_10007DB08, (io_iterator_t *)&dword_10007DB14);
        if (v27)
        {
          uint64_t v28 = v27;
          if (!qword_10007DAE8) {
            qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          }
          _SC_syslog_os_log_mapping();
          if (!__SC_log_enabled()) {
            goto LABEL_32;
          }
        }
        else
        {
          sub_10001AD18(0, dword_10007DB14);
          int v32 = (IONotificationPort *)qword_10007DB08;
          int v33 = IOServiceMatching("IONetworkInterface");
          uint64_t v34 = IOServiceAddMatchingNotification(v32, "IOServiceFirstMatch", v33, (IOServiceMatchingCallback)sub_10001AFA8, (void *)qword_10007DB08, (io_iterator_t *)&dword_10007DB00);
          if (!v34)
          {
            sub_10001AFA8(0, dword_10007DB00);
            sub_10001A8EC(v39, v40, -536870624, busyState);
            uint64_t v41 = CFRunLoopGetCurrent();
            RunLoopSource = IONotificationPortGetRunLoopSource((IONotificationPortRef)qword_10007DB08);
            CFRunLoopAddSource(v41, RunLoopSource, kCFRunLoopDefaultMode);
            uint64_t v16 = 1;
            goto LABEL_33;
          }
          uint64_t v28 = v34;
          if (!qword_10007DAE8) {
            qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          }
          _SC_syslog_os_log_mapping();
          if (!__SC_log_enabled())
          {
LABEL_32:
            uint64_t v16 = 0;
LABEL_33:
            IOObjectRelease(v7);
            return v16;
          }
        }
        uint64_t v35 = _os_log_pack_size();
        __chkstk_darwin(v35, v36, v37);
        __error();
        uint64_t v38 = (_DWORD *)_os_log_pack_fill();
        *uint64_t v38 = 67109120;
        v38[1] = v28;
LABEL_31:
        __SC_log_send();
        goto LABEL_32;
      }
      uint64_t v9 = v17;
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_32;
      }
      uint64_t v18 = _os_log_pack_size();
      __chkstk_darwin(v18, v19, v20);
      __error();
    }
    uint64_t v21 = (_DWORD *)_os_log_pack_fill();
    *uint64_t v21 = 67109120;
    v21[1] = v9;
    goto LABEL_31;
  }
  if (!qword_10007DAE8) {
    qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
LABEL_23:
    uint64_t v13 = _os_log_pack_size();
    __chkstk_darwin(v13, v14, v15);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  return 0;
}

void sub_100019FB8(const __SCPreferences *a1, char a2)
{
  if ((a2 & 2) != 0)
  {
    CFIndex v2 = a1;
    if (!a1)
    {
      CFIndex v2 = (const __SCPreferences *)qword_10007DB30;
      if (qword_10007DB38)
      {
        CFRelease((CFTypeRef)qword_10007DB38);
        qword_10007DB38 = 0;
      }
      if (qword_10007DB40)
      {
        CFRelease((CFTypeRef)qword_10007DB40);
        qword_10007DB40 = 0;
      }
    }
    sub_10001A090();
    sub_10001A27C(v2);
    SCPreferencesSynchronize(v2);
  }
}

void sub_10001A090()
{
  CFArrayRef v0 = (const __CFArray *)SCBridgeInterfaceCopyAll();
  CFArrayRef v1 = v0;
  if (v0 && !CFArrayGetCount(v0))
  {
    CFRelease(v1);
    CFArrayRef v1 = 0;
  }
  CFIndex v2 = (const void *)qword_10007DB38;
  if ((const __CFArray *)qword_10007DB38 == v1)
  {
    if (!v1) {
      return;
    }
  }
  else
  {
    if (!v1 || !qword_10007DB38) {
      goto LABEL_9;
    }
    if (!CFEqual((CFTypeRef)qword_10007DB38, v1))
    {
      CFIndex v2 = (const void *)qword_10007DB38;
LABEL_9:
      if (v2) {
        CFRelease(v2);
      }
      qword_10007DB38 = (uint64_t)v1;
      if (!_SCBridgeInterfaceUpdateConfiguration())
      {
        if (!qword_10007DAE8) {
          qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v3 = _os_log_pack_size();
          __chkstk_darwin(v3, v4, v5);
          __error();
          uint64_t v6 = _os_log_pack_fill();
          int v7 = SCError();
          int v8 = SCErrorString(v7);
          *(_DWORD *)uint64_t v6 = 136315138;
          *(void *)(v6 + 4) = v8;
          __SC_log_send();
        }
      }
      return;
    }
  }

  CFRelease(v1);
}

void sub_10001A27C(const __SCPreferences *a1)
{
  CFArrayRef v1 = SCVLANInterfaceCopyAll(a1);
  CFArrayRef v2 = v1;
  if (v1 && !CFArrayGetCount(v1))
  {
    CFRelease(v2);
    CFArrayRef v2 = 0;
  }
  uint64_t v3 = (const void *)qword_10007DB40;
  if ((const __CFArray *)qword_10007DB40 == v2)
  {
    if (!v2) {
      return;
    }
  }
  else
  {
    if (!v2 || !qword_10007DB40) {
      goto LABEL_9;
    }
    if (!CFEqual((CFTypeRef)qword_10007DB40, v2))
    {
      uint64_t v3 = (const void *)qword_10007DB40;
LABEL_9:
      if (v3) {
        CFRelease(v3);
      }
      qword_10007DB40 = (uint64_t)v2;
      if (!_SCVLANInterfaceUpdateConfiguration())
      {
        if (!qword_10007DAE8) {
          qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v4 = _os_log_pack_size();
          __chkstk_darwin(v4, v5, v6);
          __error();
          uint64_t v7 = _os_log_pack_fill();
          int v8 = SCError();
          uint64_t v9 = SCErrorString(v8);
          *(_DWORD *)uint64_t v7 = 136315138;
          *(void *)(v7 + 4) = v9;
          __SC_log_send();
        }
      }
      return;
    }
  }

  CFRelease(v2);
}

__CFArray *sub_10001A468()
{
  CFArrayRef v0 = SCPreferencesCreate(0, @"InterfaceNamer:readInterfaceList", @"NetworkInterfaces.plist");
  if (v0)
  {
    CFArrayRef v1 = v0;
    CFArrayRef Value = (const __CFArray *)SCPreferencesGetValue(v0, @"Interfaces");
    CFTypeID TypeID = CFArrayGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID) {
        CFArrayRef v4 = Value;
      }
      else {
        CFArrayRef v4 = 0;
      }
    }
    else
    {
      CFArrayRef v4 = 0;
    }
    CFPropertyListRef v12 = SCPreferencesGetValue(v1, @"Model");
    if (!v12 || (uint64_t v13 = v12, v14 = (const void *)_SC_hw_model(), v13 == v14))
    {
      if (v4) {
        goto LABEL_19;
      }
    }
    else if (v14)
    {
      int v15 = CFEqual(v13, v14);
      CFArrayRef Mutable = 0;
      if (!v15 || !v4) {
        goto LABEL_32;
      }
LABEL_19:
      CFIndex Count = CFArrayGetCount(v4);
      CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      if (Count >= 1)
      {
        for (CFIndex i = 0; i != Count; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
          CFTypeID v19 = CFDictionaryGetTypeID();
          if (ValueAtIndex
            && CFGetTypeID(ValueAtIndex) == v19
            && CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, @"IOInterfaceNamePrefix")
            && CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, @"IOInterfaceUnit")
            && CFDictionaryContainsKey((CFDictionaryRef)ValueAtIndex, @"IOMACAddress"))
          {
            CFArrayAppendValue(Mutable, ValueAtIndex);
          }
        }
      }
      if (Mutable)
      {
        uint64_t v20 = CFArrayGetCount(Mutable);
        if (v20 >= 2)
        {
          v22.length = v20;
          v22.location = 0;
          CFArraySortValues(Mutable, v22, (CFComparatorFunction)sub_10001B088, 0);
        }
      }
      goto LABEL_32;
    }
    CFArrayRef Mutable = 0;
LABEL_32:
    CFRelease(v1);
    return Mutable;
  }
  if (!qword_10007DAE8) {
    qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5, v6, v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    int v9 = SCError();
    uint64_t v10 = SCErrorString(v9);
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v8 + 4) = v10;
    __SC_log_send();
  }
  return 0;
}

void sub_10001A760(__CFDictionary *a1, const void *a2)
{
  CFAbsoluteTime valuePtr = CFAbsoluteTimeGetCurrent();
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFDictionaryAddValue(a1, a2, v4);
  if (!qword_10007DAE8) {
    qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5, v6, v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136315650;
    *(void *)(v8 + 4) = "addTimestamp";
    *(_WORD *)(v8 + 12) = 2112;
    *(void *)(v8 + 14) = a2;
    *(_WORD *)(v8 + 22) = 2112;
    *(void *)(v8 + 24) = v4;
    __SC_log_send();
  }
  CFRelease(v4);
}

void sub_10001A8EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!a4)
  {
    if (a3 == -536870624)
    {
      sub_10001A760((__CFDictionary *)qword_10007DB18, @"*QUIET*");
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v5 = _os_log_pack_size();
        __chkstk_darwin(v5, v6, v7);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
    }
    if (dword_10007DAF0)
    {
      if (dword_10007DB10)
      {
        IOObjectRelease(dword_10007DB10);
        dword_10007DB10 = 0;
      }
      int v8 = qword_10007DB20;
      if (qword_10007DB20)
      {
        CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_10007DB20);
        CFRelease((CFTypeRef)qword_10007DB20);
        qword_10007DB20 = 0;
      }
      sub_10001AFA8(v8, dword_10007DB00);
      if (a3 == -536870624)
      {
        sub_10001A760((__CFDictionary *)qword_10007DB18, @"*QUIET&NAMED*");
        sub_10001B188();
        if (qword_10007DB50 != -1) {
          dispatch_once(&qword_10007DB50, &stru_100076358);
        }
      }
    }
    else
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9, v10, v11);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
    }
  }
}

void sub_10001AB98()
{
  sub_10001A760((__CFDictionary *)qword_10007DB18, @"*TIMEOUT*");
  if (!qword_10007DAE8) {
    qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v0 = _os_log_pack_size();
    __chkstk_darwin(v0, v1, v2);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  uint64_t v3 = sub_10001BC80();
  sub_10001A8EC(v3, v4, 0, 0);
  sub_10001A760((__CFDictionary *)qword_10007DB18, @"*TIMEOUT&NAMED*");
  sub_10001B188();
  if (qword_10007DB50 != -1) {
    dispatch_once(&qword_10007DB50, &stru_100076358);
  }
}

uint64_t sub_10001AD18(int a1, io_iterator_t iterator)
{
  kern_return_t v4;
  kern_return_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __CFRunLoopTimer *v13;
  CFAbsoluteTime Current;

  uint64_t result = IOIteratorNext(iterator);
  if (result)
  {
    io_object_t v3 = result;
    uint64_t v4 = IOServiceOpen(result, mach_task_self_, 0, (io_connect_t *)&dword_10007DAF0);
    if (v4)
    {
      uint64_t v5 = v4;
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6, v7, v8);
        __error();
        uint64_t v9 = (_DWORD *)_os_log_pack_fill();
        *uint64_t v9 = 67109120;
        v9[1] = v5;
        __SC_log_send();
      }
    }
    else
    {
      sub_10001A760((__CFDictionary *)qword_10007DB18, @"*STACK*");
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v10 = _os_log_pack_size();
        __chkstk_darwin(v10, v11, v12);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      if (dword_10007DB14)
      {
        IOObjectRelease(dword_10007DB14);
        dword_10007DB14 = 0;
      }
      if (qword_10007DB20 && CFRunLoopTimerIsValid((CFRunLoopTimerRef)qword_10007DB20))
      {
        uint64_t v13 = (__CFRunLoopTimer *)qword_10007DB20;
        CFRunLoopRef Current = CFAbsoluteTimeGetCurrent();
        CFRunLoopTimerSetNextFireDate(v13, Current + *(double *)&qword_10007D8D0);
      }
      sub_10001C714();
    }
    return IOObjectRelease(v3);
  }
  return result;
}

void sub_10001AFA8(int a1, io_iterator_t iterator)
{
  io_object_t v3 = IOIteratorNext(iterator);
  if (v3)
  {
    io_object_t v4 = v3;
    do
    {
      uint64_t v5 = _SCNetworkInterfaceCreateWithIONetworkInterfaceObject();
      if (v5)
      {
        uint64_t v6 = (const void *)v5;
        CFArrayRef Mutable = (__CFArray *)qword_10007DB58;
        if (!qword_10007DB58)
        {
          CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          qword_10007DB58 = (uint64_t)Mutable;
        }
        CFArrayAppendValue(Mutable, v6);
        CFRelease(v6);
      }
      IOObjectRelease(v4);
      io_object_t v4 = IOIteratorNext(iterator);
    }
    while (v4);
  }

  sub_10001C714();
}

CFComparisonResult sub_10001B088(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"IOInterfaceNamePrefix");
  CFStringRef v5 = (const __CFString *)CFDictionaryGetValue(a2, @"IOInterfaceNamePrefix");
  CFComparisonResult result = CFStringCompare(Value, v5, 0);
  if (result == kCFCompareEqualTo)
  {
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a1, @"IOInterfaceUnit");
    CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(a2, @"IOInterfaceUnit");
    return CFNumberCompare(v7, v8, 0);
  }
  return result;
}

void sub_10001B188()
{
  CFStringRef v0 = SCDynamicStoreKeyCreate(0, @"%@InterfaceNamer", kSCDynamicStoreDomainPlugin);
  SCDynamicStoreSetValue(0, v0, (CFPropertyListRef)qword_10007DB18);

  CFRelease(v0);
}

void sub_10001B224(id a1)
{
  keys = @"avoid-deadlock";
  values = kCFBooleanFalse;
  sub_10001B4F0((CFPropertyListRef)qword_10007DAF8);
  CFDictionaryRef v1 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFPropertyListRef v12 = (const void *)SCPreferencesCreateWithOptions();
  CFRelease(v1);
  if (v12)
  {
    int v2 = __SCNetworkConfigurationUpgrade();
    CFRelease(v12);
    if (v2)
    {
      if (qword_10007DAF8) {
        CFRelease((CFTypeRef)qword_10007DAF8);
      }
      qword_10007DAF8 = (uint64_t)sub_10001A468();
      sub_10001A760((__CFDictionary *)qword_10007DB18, @"*UPGRADED*");
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v3 = _os_log_pack_size();
        __chkstk_darwin(v3, v4, v5);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      sub_10001B188();
    }
  }
  else
  {
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6, v7, v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      int v10 = SCError();
      uint64_t v11 = SCErrorString(v10);
      *(_DWORD *)uint64_t v9 = 136315138;
      *(void *)(v9 + 4) = v11;
      __SC_log_send();
    }
  }
}

void sub_10001B4F0(CFPropertyListRef a1)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID)
  {
    uint64_t v3 = SCPreferencesCreate(0, @"InterfaceNamer:writeInterfaceList", @"NetworkInterfaces.plist");
    if (v3)
    {
      uint64_t v4 = v3;
      CFPropertyListRef Value = SCPreferencesGetValue(v3, @"Interfaces");
      if (Value != a1)
      {
        CFPropertyListRef v6 = Value;
        if (!Value || !CFEqual(Value, a1))
        {
          CFPropertyListRef v7 = SCPreferencesGetValue(v4, @"Model");
          CFPropertyListRef v8 = (CFPropertyListRef)_SC_hw_model();
          uint64_t v9 = v8;
          if (v7 && v7 != v8)
          {
            BOOL v10 = v8 && CFEqual(v7, v8) != 0;
            if (v6 && !v10)
            {
              if (!qword_10007DAE8) {
                qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
              }
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v17 = _os_log_pack_size();
                __chkstk_darwin(v17, v18, v19);
                __error();
                uint64_t v20 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v20 = 138412546;
                *(void *)(v20 + 4) = v7;
                *(_WORD *)(v20 + 12) = 2112;
                *(void *)(v20 + 14) = v9;
                __SC_log_send();
              }
              sub_10001B944(v4, (uint64_t)v7);
            }
          }
          SCPreferencesSetValue(v4, @"Model", v9);
          SCPreferencesSetValue(v4, @"Interfaces", a1);
          if (!v6)
          {
            int valuePtr = 20191120;
            CFNumberRef v21 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            SCPreferencesSetValue(v4, kSCPrefVersion, v21);
            CFRelease(v21);
          }
          if (!SCPreferencesCommitChanges(v4) && SCError() != 30)
          {
            if (!qword_10007DAE8) {
              qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            }
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v22 = _os_log_pack_size();
              __chkstk_darwin(v22, v23, v24);
              __error();
              uint64_t v25 = _os_log_pack_fill();
              int v26 = SCError();
              uint64_t v27 = SCErrorString(v26);
              *(_DWORD *)uint64_t v25 = 136315138;
              *(void *)(v25 + 4) = v27;
              __SC_log_send();
            }
          }
        }
      }
      CFRelease(v4);
    }
    else
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v11 = _os_log_pack_size();
        __chkstk_darwin(v11, v12, v13);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        int v15 = SCError();
        uint64_t v16 = SCErrorString(v15);
        *(_DWORD *)uint64_t v14 = 136315138;
        *(void *)(v14 + 4) = v16;
        __SC_log_send();
      }
    }
  }
}

void sub_10001B944(const __SCPreferences *a1, uint64_t a2)
{
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"%@-%@", @"NetworkInterfaces.plist", a2);
  uint64_t v4 = SCPreferencesCreate(0, @"InterfaceNamer:writeInterfaceListForModel", v3);
  CFRelease(v3);
  if (v4)
  {
    CFDictionaryRef Value = SCPreferencesPathGetValue(a1, @"/");
    if (!SCPreferencesPathSetValue(v4, @"/", Value))
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6, v7, v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        int v10 = SCError();
        uint64_t v11 = SCErrorString(v10);
        *(_DWORD *)uint64_t v9 = 136315138;
        *(void *)(v9 + 4) = v11;
        __SC_log_send();
      }
    }
    int v12 = SCPreferencesCommitChanges(v4);
    CFRelease(v4);
    if (!v12)
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
LABEL_15:
        uint64_t v13 = _os_log_pack_size();
        __chkstk_darwin(v13, v14, v15);
        __error();
        uint64_t v16 = _os_log_pack_fill();
        int v17 = SCError();
        uint64_t v18 = SCErrorString(v17);
        *(_DWORD *)uint64_t v16 = 136315138;
        *(void *)(v16 + 4) = v18;
        __SC_log_send();
      }
    }
  }
  else
  {
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_15;
    }
  }
}

uint64_t sub_10001BC80()
{
  kern_return_t v0;
  __n128 v1;
  kern_return_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  io_iterator_t iterator[2];

  *(void *)iterator = 0;
  CFStringRef v0 = IORegistryCreateIterator(kIOMainPortDefault, "IOService", 0, iterator);
  if (v0)
  {
    int v2 = v0;
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    CFComparisonResult result = __SC_log_enabled();
    if (result)
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4, v5, v6);
      __error();
      uint64_t v7 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v7 = 67109120;
      v7[1] = v2;
      return __SC_log_send();
    }
  }
  else
  {
    sub_10001BEBC(iterator[0], 0, &iterator[1], v1);
    if (!iterator[1])
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8, v9, v10);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
    }
    return IOObjectRelease(iterator[0]);
  }
  return result;
}

uint64_t sub_10001BEBC(uint64_t a1, const __CFArray *a2, _DWORD *a3, __n128 a4)
{
  kern_return_t Name;
  kern_return_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  kern_return_t v17;
  __CFString *Mutable;
  kern_return_t LocationInPlane;
  kern_return_t BusyStateAndTime;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFStringRef v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  const char *v35;
  const char *v36;
  int v37;
  unint64_t v38;
  kern_return_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  __n128 v44;
  __n128 *v45;
  _DWORD *v46;
  __n128 v47;
  CFArrayRef v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  char v53[128];
  char v54[136];

  uint64_t v46 = a3;
  CFArrayRef v4 = a2;
  uint64_t v5 = a1;
  p_base_props = &QoSMarkingController__classData.base_props;
  a4.n128_u64[0] = 67109120;
  uint64_t v47 = a4;
  a4.n128_u64[0] = 138413570;
  uint64_t v44 = a4;
  int v48 = a2;
  uint64_t v49 = a1;
  do
  {
    uint64_t result = IOIteratorNext(v5);
    if (!result) {
      break;
    }
    io_registry_entry_t v8 = result;
    uint64_t v52 = 0;
    uint64_t v51 = 0;
    memset(v54, 0, 128);
    memset(v53, 0, sizeof(v53));
    uint64_t v50 = 0;
    if (v4) {
      MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, 0, v4);
    }
    else {
      MutableCFArrayRef Copy = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    }
    int v10 = MutableCopy;
    if (!MutableCopy) {
      sub_100065124();
    }
    Name = IORegistryEntryGetName(v8, v53);
    if (Name)
    {
      int v12 = Name;
      if (!p_base_props[349]) {
        p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_53;
      }
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13, v14, v15);
      __error();
      uint64_t v5 = v49;
      uint64_t v16 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v16 = v47.n128_u32[0];
      v16[1] = v12;
      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
      __SC_log_send();
      int v17 = 1;
      CFArrayRef v4 = v48;
    }
    else
    {
      CFArrayRef Mutable = CFStringCreateMutable(0, 0);
      CFStringAppendCString(Mutable, v53, 0x8000100u);
      LocationInPlane = IORegistryEntryGetLocationInPlane(v8, "IOService", v54);
      if (LocationInPlane != -536870160)
      {
        int v17 = LocationInPlane;
        if (LocationInPlane)
        {
          if (!p_base_props[349]) {
            p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            CFNumberRef v21 = _os_log_pack_size();
            uint64_t v45 = &v44;
            __chkstk_darwin(v21, v22, v23);
            __error();
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            uint64_t v24 = (_DWORD *)_os_log_pack_fill();
            *uint64_t v24 = v47.n128_u32[0];
            v24[1] = v17;
            CFArrayRef v4 = v48;
            __SC_log_send();
          }
          CFRelease(Mutable);
          goto LABEL_52;
        }
        CFStringAppendCString(Mutable, "@", 0x8000100u);
        CFStringAppendCString(Mutable, v54, 0x8000100u);
      }
      CFArrayAppendValue(v10, Mutable);
      CFRelease(Mutable);
      BusyStateAndTime = IOServiceGetBusyStateAndTime();
      if (BusyStateAndTime)
      {
        int v17 = BusyStateAndTime;
        if (!p_base_props[349]) {
          p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_53;
        }
        goto LABEL_51;
      }
      if (v51)
      {
        if (!(*v46)++)
        {
          if (!p_base_props[349]) {
            p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            int v26 = _os_log_pack_size();
            __chkstk_darwin(v26, v27, v28);
            __error();
            CFArrayRef v4 = v48;
            *(_WORD *)_os_log_pack_fill() = 0;
            __SC_log_send();
            p_base_props = &QoSMarkingController__classData.base_props;
          }
        }
        uint64_t v29 = CFStringCreateByCombiningStrings(0, v10, @"/");
        if (!p_base_props[349]) {
          p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v30 = _os_log_pack_size();
          __chkstk_darwin(v30, v31, v32);
          __error();
          CFArrayRef v4 = v48;
          int v33 = _os_log_pack_fill();
          uint64_t v34 = "!registered, ";
          if ((v50 & 2) != 0) {
            uint64_t v34 = "";
          }
          uint64_t v35 = "!matched, ";
          if ((v50 & 4) != 0) {
            uint64_t v35 = "";
          }
          uint64_t v36 = "inactive, ";
          if ((v50 & 1) == 0) {
            uint64_t v36 = "";
          }
          uint64_t v37 = v51;
          uint64_t v38 = v52;
          *(_DWORD *)int v33 = v44.n128_u32[0];
          *(void *)(v33 + 4) = v29;
          *(_WORD *)(v33 + 12) = 2080;
          *(void *)(v33 + 14) = v34;
          *(_WORD *)(v33 + 22) = 2080;
          *(void *)(v33 + 24) = v35;
          *(_WORD *)(v33 + 32) = 2080;
          *(void *)(v33 + 34) = v36;
          *(_WORD *)(v33 + 42) = 1024;
          *(_DWORD *)(v33 + 44) = v37;
          *(_WORD *)(v33 + 48) = 2048;
          *(void *)(v33 + 50) = v38 / 0xF4240;
          p_base_props = &QoSMarkingController__classData.base_props;
          __SC_log_send();
        }
        CFRelease(v29);
        uint64_t v5 = v49;
      }
      uint64_t v39 = IORegistryIteratorEnterEntry(v5);
      if (v39)
      {
        int v17 = v39;
        if (!p_base_props[349]) {
          p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_53;
        }
        goto LABEL_51;
      }
      sub_10001BEBC(v5, v10, v46);
      int v17 = IORegistryIteratorExitEntry(v5);
      if (v17)
      {
        if (!p_base_props[349]) {
          p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled())
        {
LABEL_53:
          int v17 = 1;
          goto LABEL_54;
        }
LABEL_51:
        uint64_t v40 = _os_log_pack_size();
        __chkstk_darwin(v40, v41, v42);
        __error();
        CFArrayRef v4 = v48;
        unsigned int v43 = (_DWORD *)_os_log_pack_fill();
        *unsigned int v43 = v47.n128_u32[0];
        v43[1] = v17;
        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
        __SC_log_send();
        int v17 = 1;
LABEL_52:
        uint64_t v5 = v49;
      }
    }
LABEL_54:
    CFRelease(v10);
    uint64_t result = IOObjectRelease(v8);
  }
  while (!v17);
  return result;
}

void sub_10001C714()
{
  if (!dword_10007DAF0) {
    return;
  }
  CFArrayRef v0 = (const __CFArray *)qword_10007DB58;
  if (qword_10007DB58)
  {
    uint64_t Count = CFArrayGetCount((CFArrayRef)qword_10007DB58);
    if (Count >= 2)
    {
      v13.length = Count;
      v13.location = 0;
      CFArraySortValues((CFMutableArrayRef)qword_10007DB58, v13, (CFComparatorFunction)&_SCNetworkInterfaceCompare, 0);
    }
    sub_10001CA24((const __CFArray *)qword_10007DB58);
    CFArrayRef v0 = (const __CFArray *)qword_10007DB58;
  }
  sub_10001CEE0(v0);
  if (&kLockdownNotificationTrustedPTPAttached) {
    BOOL v2 = &kLockdownNotificationTrustedHostAttached == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2
    && &kLockdownNotificationHostDetached != 0
    && &kLockdownNotificationHostAttached != 0
    && &_lockdown_is_host_trusted != 0)
  {
    sub_10001D268((const __CFArray *)qword_10007DB58);
  }
  if (dword_10007DB10)
  {
    if (qword_10007DB48 && !CFArrayGetCount((CFArrayRef)qword_10007DB48))
    {
      sub_10001A760((__CFDictionary *)qword_10007DB18, @"*COMPLETE*");
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6, v7, v8);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      sub_10001B188();
      uint64_t v9 = &qword_10007DB48;
      CFRelease((CFTypeRef)qword_10007DB48);
      goto LABEL_37;
    }
    return;
  }
  sub_10001D6A4();
  sub_10001B4F0((CFPropertyListRef)qword_10007DAF8);
  sub_100019FB8(0, 2);
  sub_10001B188();
  if ((os_variant_is_darwinos() & 1) != 0 || byte_10007DB29)
  {
    int v10 = (const void *)qword_10007DB58;
    if (qword_10007DBA8 == -1)
    {
      if (!qword_10007DB58) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    dispatch_once(&qword_10007DBA8, &stru_100076518);
    if (v10)
    {
LABEL_32:
      uint64_t v11 = qword_10007DBB0;
      CFRetain(v10);
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = sub_10002273C;
      block[3] = &unk_1000764D8;
      block[4] = v10;
      dispatch_async(v11, block);
    }
  }
LABEL_33:
  sub_10001DA04();
  if (qword_10007DB48)
  {
    CFRelease((CFTypeRef)qword_10007DB48);
    qword_10007DB48 = 0;
  }
  if (qword_10007DB58)
  {
    CFRelease((CFTypeRef)qword_10007DB58);
    uint64_t v9 = &qword_10007DB58;
LABEL_37:
    *uint64_t v9 = 0;
  }
}

void sub_10001CA24(const __CFArray *a1)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v3 = Count;
    for (CFIndex i = 0; v3 != i; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(a1, i);
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6, v7, v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v9 = 136315650;
        *(void *)(v9 + 4) = "nameInterfaces";
        *(_WORD *)(v9 + 12) = 1024;
        *(_DWORD *)(v9 + 14) = i;
        *(_WORD *)(v9 + 18) = 2112;
        *(void *)(v9 + 20) = ValueAtIndex;
        __SC_log_send();
      }
      if (_SCNetworkInterfaceIsSelfNamed())
      {
        if (!qword_10007DAE8) {
          qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v10 = _os_log_pack_size();
          __chkstk_darwin(v10, v11, v12);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
      }
      else
      {
        if (_SCNetworkInterfaceGetIOInterfaceUnit())
        {
          CFIndex v21 = 0;
          CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
          if (!BSDName || !CFDictionaryContainsKey((CFDictionaryRef)qword_10007DB18, BSDName))
          {
            if (!qword_10007DAE8) {
              qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
            }
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v14 = _os_log_pack_size();
              __chkstk_darwin(v14, v15, v16);
              __error();
              *(_WORD *)_os_log_pack_fill() = 0;
              __SC_log_send();
            }
            sub_10001DD08(ValueAtIndex);
          }
          if (qword_10007DB48 && sub_10001DF0C((const __CFArray *)qword_10007DB48, (uint64_t)ValueAtIndex, &v21)) {
            goto LABEL_22;
          }
          goto LABEL_23;
        }
        int v17 = (const __SCNetworkInterface *)sub_10001E52C(ValueAtIndex, a1, i);
        if (v17)
        {
          CFDictionaryRef ValueAtIndex = v17;
          sub_10001DD08(v17);
          CFArraySetValueAtIndex(a1, i, ValueAtIndex);
          CFRelease(ValueAtIndex);
          if (_SCNetworkInterfaceIsBuiltin())
          {
            if (qword_10007DB48)
            {
              CFIndex v21 = 0;
              if (sub_10001F328((const __CFArray *)qword_10007DB48, (uint64_t)ValueAtIndex, &v21))
              {
                if (!qword_10007DAE8) {
                  qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                }
                _SC_syslog_os_log_mapping();
                if (__SC_log_enabled())
                {
                  uint64_t v18 = _os_log_pack_size();
                  __chkstk_darwin(v18, v19, v20);
                  __error();
                  *(_WORD *)_os_log_pack_fill() = 0;
                  __SC_log_send();
                }
LABEL_22:
                CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB48, v21);
              }
            }
          }
LABEL_23:
          if (!_SCNetworkInterfaceIsEphemeral()) {
            sub_10001E054(ValueAtIndex);
          }
        }
      }
    }
  }
}

void sub_10001CEE0(const __CFArray *a1)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      int v4 = 0;
      CFIndex v5 = 0;
      p_base_props = &QoSMarkingController__classData.base_props;
      uint64_t v7 = &QoSMarkingController__classData.base_props;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
        if (_SCNetworkInterfaceIsApplePreconfigured())
        {
          if (!sub_100020EFC((BOOL)p_base_props[366], ValueAtIndex))
          {
            uint64_t v9 = sub_100020FDC(ValueAtIndex, (uint64_t)sub_1000211CC);
            if (v9) {
              break;
            }
          }
        }
LABEL_24:
        if (v3 == ++v5)
        {
          if (v4) {
            sub_100021500();
          }
          return;
        }
      }
      uint64_t v10 = v9;
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)ValueAtIndex);
      uint64_t v12 = v7[349];
      if (BSDName)
      {
        CFStringRef v13 = BSDName;
        if (!v12) {
          v7[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_21;
        }
        uint64_t v14 = _os_log_pack_size();
        __chkstk_darwin(v14, v15, v16);
        __error();
        uint64_t v17 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v17 = 138412290;
        *(void *)(v17 + 4) = v13;
      }
      else
      {
        if (!v12) {
          v7[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v18 = _os_log_pack_size();
          __chkstk_darwin(v18, v19, v20);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          __SC_log_send();
          uint64_t v7 = &QoSMarkingController__classData.base_props;
        }
        if (!v7[349]) {
          v7[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_21;
        }
        uint64_t v21 = _os_log_pack_size();
        __chkstk_darwin(v21, v22, v23);
        __error();
        uint64_t v24 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v24 = 138412290;
        *(void *)(v24 + 4) = ValueAtIndex;
      }
      __SC_log_send();
      p_base_props = &QoSMarkingController__classData.base_props;
      uint64_t v7 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
LABEL_21:
      CFArrayRef Mutable = (__CFArray *)p_base_props[366];
      if (!Mutable)
      {
        CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
        p_base_props[366] = (__objc2_prop_list *)Mutable;
      }
      CFArrayAppendValue(Mutable, v10);
      CFRelease(v10);
      int v4 = 1;
      goto LABEL_24;
    }
  }
}

void sub_10001D268(const __CFArray *a1)
{
  if (!a1) {
    return;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return;
  }
  CFIndex v3 = Count;
  int v4 = 0;
  CFIndex v5 = 0;
  p_base_props = &QoSMarkingController__classData.base_props;
  uint64_t v7 = &QoSMarkingController__classData.base_props;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
    if (!_SCNetworkInterfaceIsTrustRequired()) {
      goto LABEL_24;
    }
    if (sub_100020EFC((BOOL)p_base_props[367], ValueAtIndex)) {
      goto LABEL_24;
    }
    uint64_t v9 = sub_100020FDC(ValueAtIndex, (uint64_t)sub_100021A20);
    if (!v9) {
      goto LABEL_24;
    }
    uint64_t v10 = v9;
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)ValueAtIndex);
    uint64_t v12 = v7[349];
    if (BSDName)
    {
      CFStringRef v13 = BSDName;
      if (!v12) {
        v7[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_21;
      }
      uint64_t v14 = _os_log_pack_size();
      __chkstk_darwin(v14, v15, v16);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v17 = 138412290;
      *(void *)(v17 + 4) = v13;
    }
    else
    {
      if (!v12) {
        v7[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v18 = _os_log_pack_size();
        __chkstk_darwin(v18, v19, v20);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
        __SC_log_send();
        uint64_t v7 = &QoSMarkingController__classData.base_props;
      }
      if (!v7[349]) {
        v7[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_21;
      }
      uint64_t v21 = _os_log_pack_size();
      __chkstk_darwin(v21, v22, v23);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v24 = 138412290;
      *(void *)(v24 + 4) = ValueAtIndex;
    }
    __SC_log_send();
    p_base_props = &QoSMarkingController__classData.base_props;
    uint64_t v7 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
LABEL_21:
    CFArrayRef Mutable = (__CFArray *)p_base_props[367];
    if (!Mutable)
    {
      CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      p_base_props[367] = (__objc2_prop_list *)Mutable;
    }
    CFArrayAppendValue(Mutable, v10);
    CFRelease(v10);
    int v4 = 1;
LABEL_24:
    ++v5;
  }
  while (v3 != v5);
  if (v4)
  {
    CFRunLoopRef Current = CFRunLoopGetCurrent();
    if (qword_10007DB80 != -1) {
      dispatch_once(&qword_10007DB80, &stru_1000763D8);
    }
    CFRetain(Current);
    if (qword_10007DB88 != -1) {
      dispatch_once(&qword_10007DB88, &stru_100076478);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    block[2] = sub_100021FF8;
    block[3] = &unk_1000763F8;
    block[4] = Current;
    dispatch_async((dispatch_queue_t)qword_10007DB90, block);
  }
}

void sub_10001D6A4()
{
  if (qword_10007DAF8) {
    BOOL v0 = qword_10007DB48 == 0;
  }
  else {
    BOOL v0 = 1;
  }
  if (!v0)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10007DB48);
    if (Count >= 1)
    {
      CFIndex v3 = Count;
      *(void *)&long long v2 = 138412290;
      long long v27 = v2;
      do
      {
        uint64_t v4 = v3--;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DB48, v3);
        uint64_t v6 = CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
        CFTypeID TypeID = CFStringGetTypeID();
        if (v6)
        {
          if (CFGetTypeID(v6) == TypeID)
          {
            uint64_t v8 = CFDictionaryGetValue(ValueAtIndex, @"HiddenConfiguration");
            CFTypeID v9 = CFBooleanGetTypeID();
            if (v8)
            {
              if (CFGetTypeID(v8) == v9 && CFBooleanGetValue((CFBooleanRef)v8))
              {
                uint64_t v10 = CFDictionaryGetValue(ValueAtIndex, @"IOBuiltin");
                CFTypeID v11 = CFBooleanGetTypeID();
                if (v10)
                {
                  if (CFGetTypeID(v10) == v11 && CFBooleanGetValue((CFBooleanRef)v10)) {
                    goto LABEL_15;
                  }
                }
                CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"SCNetworkInterfaceInfo");
                CFTypeID v23 = CFDictionaryGetTypeID();
                if (v22)
                {
                  if (CFGetTypeID(v22) == v23)
                  {
                    int valuePtr = 0;
                    value = 0;
                    if (CFDictionaryGetValueIfPresent(v22, @"idVendor", (const void **)&value))
                    {
                      uint64_t v24 = value;
                      CFTypeID v25 = CFNumberGetTypeID();
                      if (v24)
                      {
                        if (CFGetTypeID(v24) == v25
                          && CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr)
                          && valuePtr == 1452)
                        {
LABEL_15:
                          if (!qword_10007DAE8) {
                            qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                          }
                          _SC_syslog_os_log_mapping();
                          if (__SC_log_enabled())
                          {
                            uint64_t v12 = _os_log_pack_size();
                            v26[1] = v26;
                            __chkstk_darwin(v12, v13, v14);
                            __error();
                            uint64_t v15 = _os_log_pack_fill();
                            *(_DWORD *)uint64_t v15 = v27;
                            *(void *)(v15 + 4) = v6;
                            __SC_log_send();
                          }
                          CFArrayRef v16 = (const __CFArray *)qword_10007DAF8;
                          if (qword_10007DAF8)
                          {
                            CFIndex v17 = CFArrayGetCount((CFArrayRef)qword_10007DAF8);
                            if (v17 >= 1)
                            {
                              CFIndex v18 = v17;
                              CFIndex v19 = 0;
                              while (1)
                              {
                                CFDictionaryRef v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v19);
                                uint64_t v21 = CFDictionaryGetValue(v20, @"BSD Name");
                                if (v21 == v6 || v21 && CFEqual(v21, v6)) {
                                  break;
                                }
                                if (v18 == ++v19) {
                                  goto LABEL_37;
                                }
                              }
                              if (v20)
                              {
                                CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DAF8, v19);
                                CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB48, v3);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_37:
        ;
      }
      while (v4 > 1);
    }
  }
}

CFIndex sub_10001DA04()
{
  CFIndex result = qword_10007DB48;
  if (qword_10007DB48)
  {
    CFIndex result = CFArrayGetCount((CFArrayRef)qword_10007DB48);
    unint64_t v18 = result;
    if (result >= 1)
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v1 = _os_log_pack_size();
        __chkstk_darwin(v1, v2, v3);
        __error();
        uint64_t v4 = _os_log_pack_fill();
        CFIndex v5 = "s";
        if (v18 <= 1) {
          CFIndex v5 = "";
        }
        *(_DWORD *)uint64_t v4 = 136315138;
        *(void *)(v4 + 4) = v5;
        __SC_log_send();
      }
      CFIndex v6 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DB48, v6);
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
        CFTypeID v9 = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceNamePrefix");
        uint64_t v10 = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
        if (!qword_10007DAE8) {
          qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        CFIndex result = __SC_log_enabled();
        if (result)
        {
          uint64_t v11 = _os_log_pack_size();
          __chkstk_darwin(v11, v12, v13);
          __error();
          uint64_t v14 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v14 = 136316162;
          uint64_t v15 = "";
          CFArrayRef v16 = "BSD Name: ";
          if (!Value) {
            CFArrayRef v16 = "";
          }
          *(void *)(v14 + 4) = v16;
          CFStringRef v17 = &stru_100077F38;
          if (Value)
          {
            CFStringRef v17 = Value;
            uint64_t v15 = ", ";
          }
          *(_WORD *)(v14 + 12) = 2112;
          *(void *)(v14 + 14) = v17;
          *(_WORD *)(v14 + 22) = 2080;
          *(void *)(v14 + 24) = v15;
          *(_WORD *)(v14 + 32) = 2112;
          *(void *)(v14 + 34) = v9;
          *(_WORD *)(v14 + 42) = 2112;
          *(void *)(v14 + 44) = v10;
          CFIndex result = __SC_log_send();
        }
        ++v6;
      }
      while (v18 != v6);
    }
  }
  return result;
}

uint64_t sub_10001DD08(const __SCNetworkInterface *a1)
{
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  uint64_t IOInterfaceUnit = _SCNetworkInterfaceGetIOInterfaceUnit();
  uint64_t IOInterfaceNamePrefix = _SCNetworkInterfaceGetIOInterfaceNamePrefix();
  CFStringRef HardwareAddressString = SCNetworkInterfaceGetHardwareAddressString(a1);
  if (!qword_10007DAE8) {
    qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
  }
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7, v8, v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    uint64_t v11 = "BSD Name: ";
    uint64_t v12 = "";
    *(_DWORD *)uint64_t v10 = 136316930;
    if (!BSDName) {
      uint64_t v11 = "";
    }
    *(void *)(v10 + 4) = v11;
    *(_WORD *)(v10 + 12) = 2112;
    CFStringRef v13 = &stru_100077F38;
    if (BSDName) {
      CFStringRef v14 = BSDName;
    }
    else {
      CFStringRef v14 = &stru_100077F38;
    }
    *(void *)(v10 + 14) = v14;
    *(_WORD *)(v10 + 22) = 2080;
    if (BSDName) {
      uint64_t v15 = ", ";
    }
    else {
      uint64_t v15 = "";
    }
    *(void *)(v10 + 24) = v15;
    *(_WORD *)(v10 + 32) = 2112;
    *(void *)(v10 + 34) = IOInterfaceNamePrefix;
    CFArrayRef v16 = "Unit: ";
    if (IOInterfaceUnit) {
      CFStringRef v13 = (const __CFString *)IOInterfaceUnit;
    }
    else {
      CFArrayRef v16 = "";
    }
    if (IOInterfaceUnit) {
      uint64_t v12 = ", ";
    }
    *(_WORD *)(v10 + 42) = 2080;
    *(void *)(v10 + 44) = v16;
    *(_WORD *)(v10 + 52) = 2112;
    *(void *)(v10 + 54) = v13;
    if (HardwareAddressString) {
      CFStringRef v17 = HardwareAddressString;
    }
    else {
      CFStringRef v17 = @"?";
    }
    *(_WORD *)(v10 + 62) = 2080;
    *(void *)(v10 + 64) = v12;
    *(_WORD *)(v10 + 72) = 2112;
    *(void *)(v10 + 74) = v17;
    return __SC_log_send();
  }
  return result;
}

CFDictionaryRef sub_10001DF0C(const __CFArray *a1, uint64_t a2, CFIndex *a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix();
  uint64_t HardwareAddress = _SCNetworkInterfaceGetHardwareAddress();
  CFDictionaryRef ValueAtIndex = 0;
  if (!IOInterfaceNamePrefix) {
    return ValueAtIndex;
  }
  uint64_t v8 = (const void *)HardwareAddress;
  if (!HardwareAddress) {
    return ValueAtIndex;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v10 = Count;
  CFArrayRef v16 = a3;
  CFIndex v11 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v11);
    CFStringRef Value = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceNamePrefix");
    CFStringRef v13 = CFDictionaryGetValue(ValueAtIndex, @"IOMACAddress");
    if (Value)
    {
      CFStringRef v14 = v13;
      if (v13)
      {
        if (CFEqual(IOInterfaceNamePrefix, Value) && CFEqual(v8, v14)) {
          break;
        }
      }
    }
    if (v10 == ++v11) {
      return 0;
    }
  }
  if (v16) {
    *CFArrayRef v16 = v11;
  }
  return ValueAtIndex;
}

void sub_10001E054(const __SCNetworkInterface *a1)
{
  CFTypeRef cf = 0;
  if (qword_10007DAF8)
  {
    sub_10001F470((const __CFArray *)qword_10007DAF8, (uint64_t)a1, &cf);
    CFArrayRef Mutable = (const __CFArray *)qword_10007DAF8;
    CFDictionaryRef v3 = (const __CFDictionary *)cf;
  }
  else
  {
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFDictionaryRef v3 = 0;
    qword_10007DAF8 = (uint64_t)Mutable;
  }
  CFIndex Count = CFArrayGetCount(Mutable);
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (BSDName) {
    sub_10001A760((__CFDictionary *)qword_10007DB18, BSDName);
  }
  int IsBuiltin = _SCNetworkInterfaceIsBuiltin();
  CFArrayRef v7 = 0;
  if (v3 && !IsBuiltin)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v3, @"MatchingMACs");
    CFArrayRef v7 = Value;
    if (Value) {
      CFRetain(Value);
    }
    uint64_t v9 = CFDictionaryGetValue(v3, @"IOMACAddress");
    uint64_t HardwareAddress = (const void *)_SCNetworkInterfaceGetHardwareAddress();
    if (v9)
    {
      CFIndex v11 = HardwareAddress;
      if (HardwareAddress)
      {
        if (!CFEqual(v9, HardwareAddress))
        {
          if (v7)
          {
            MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, 0, v7);
            CFRelease(v7);
            v37.length = CFArrayGetCount(MutableCopy);
            v37.location = 0;
            FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(MutableCopy, v37, v11);
            if (FirstIndexOfValue != -1) {
              CFArrayRemoveValueAtIndex(MutableCopy, FirstIndexOfValue);
            }
            v38.length = CFArrayGetCount(MutableCopy);
            v38.location = 0;
            CFIndex v14 = CFArrayGetFirstIndexOfValue(MutableCopy, v38, v9);
            if (v14 != -1) {
              CFArrayRemoveValueAtIndex(MutableCopy, v14);
            }
          }
          else
          {
            MutableCFArrayRef Copy = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
          }
          CFArrayInsertValueAtIndex(MutableCopy, 0, v9);
          CFIndex v15 = CFArrayGetCount(MutableCopy);
          if (v15 >= 33)
          {
            unint64_t v16 = v15 + 1;
            do
            {
              CFArrayRemoveValueAtIndex(MutableCopy, v16 - 2);
              --v16;
            }
            while (v16 > 0x21);
          }
          CFArrayRef v7 = MutableCopy;
        }
      }
    }
  }
  CFStringRef v17 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  unint64_t v18 = (const void *)_SCNetworkInterfaceCopyInterfaceInfo();
  if (v18)
  {
    CFIndex v19 = v18;
    CFDictionarySetValue(v17, @"SCNetworkInterfaceInfo", v18);
    CFRelease(v19);
  }
  IOPath = (const void *)_SCNetworkInterfaceGetIOPath();
  if (IOPath) {
    CFDictionarySetValue(v17, @"IOPathMatch", IOPath);
  }
  uint64_t IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix();
  if (IOInterfaceNamePrefix) {
    CFDictionarySetValue(v17, @"IOInterfaceNamePrefix", IOInterfaceNamePrefix);
  }
  IOCFStringRef InterfaceType = (const void *)_SCNetworkInterfaceGetIOInterfaceType();
  if (IOInterfaceType) {
    CFDictionarySetValue(v17, @"IOInterfaceType", IOInterfaceType);
  }
  uint64_t IOInterfaceUnit = (const void *)_SCNetworkInterfaceGetIOInterfaceUnit();
  if (IOInterfaceUnit) {
    CFDictionarySetValue(v17, @"IOInterfaceUnit", IOInterfaceUnit);
  }
  uint64_t v24 = (const void *)_SCNetworkInterfaceGetHardwareAddress();
  if (v24) {
    CFDictionarySetValue(v17, @"IOMACAddress", v24);
  }
  CFStringRef v25 = SCNetworkInterfaceGetBSDName(a1);
  if (v25) {
    CFDictionarySetValue(v17, @"BSD Name", v25);
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
  if (InterfaceType) {
    CFDictionarySetValue(v17, @"SCNetworkInterfaceType", InterfaceType);
  }
  if (_SCNetworkInterfaceIsBuiltin()) {
    CFBooleanRef v27 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v27 = kCFBooleanFalse;
  }
  CFDictionarySetValue(v17, @"IOBuiltin", v27);
  if (_SCNetworkInterfaceIsHiddenConfiguration()) {
    CFDictionarySetValue(v17, @"HiddenConfiguration", kCFBooleanTrue);
  }
  if (_SCNetworkInterfaceIsHiddenInterface()) {
    CFDictionarySetValue(v17, @"HiddenInterface", kCFBooleanTrue);
  }
  CFDictionarySetValue(v17, @"Active", kCFBooleanTrue);
  if (v7)
  {
    CFDictionarySetValue(v17, @"MatchingMACs", v7);
    CFRelease(v7);
  }
  CFStringRef v28 = (const __CFString *)_SCNetworkInterfaceGetIOInterfaceNamePrefix();
  uint64_t v29 = _SCNetworkInterfaceGetIOInterfaceUnit();
  if (v28)
  {
    CFNumberRef v30 = (const __CFNumber *)v29;
    if (v29)
    {
      if (Count < 1)
      {
LABEL_56:
        CFArrayAppendValue((CFMutableArrayRef)qword_10007DAF8, v17);
      }
      else
      {
        CFIndex v31 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v31);
          CFStringRef v33 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceNamePrefix");
          CFNumberRef v34 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
          CFComparisonResult v35 = CFStringCompare(v28, v33, 0);
          if (v35 == kCFCompareEqualTo) {
            CFComparisonResult v35 = CFNumberCompare(v30, v34, 0);
          }
          if (v35 == kCFCompareLessThan) {
            break;
          }
          if (Count == ++v31) {
            goto LABEL_56;
          }
        }
        CFArrayInsertValueAtIndex(Mutable, v31, v17);
      }
    }
  }
  CFRelease(v17);
  if (cf) {
    CFRelease(cf);
  }
}

const void *sub_10001E52C(const __SCNetworkInterface *a1, const __CFArray *a2, uint64_t a3)
{
  kern_return_t MatchingServices;
  BOOL v61;
  io_object_t v62;
  io_object_t v63;
  const void *v64;
  CFArrayRef v65;
  CFIndex v66;
  CFIndex v67;
  CFIndex v68;
  CFDictionaryRef v69;
  const void *v70;
  const void *v71;
  const void *v72;
  const void *v73;
  CFIndex v74;
  int v75;
  CFArrayRef v76;
  CFIndex v77;
  CFIndex v78;
  CFIndex i;
  CFDictionaryRef v80;
  const void *v81;
  CFNumberRef v82;
  CFTypeID v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  CFArrayRef v91;
  CFArrayRef v92;
  uint64_t HardwareAddress;
  const void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  CFTypeRef valuePtr[4];
  CFArrayRef v104;
  io_iterator_t existing;
  void *values;
  CFDictionaryRef v107;
  void *keys;
  CFStringRef v109;
  CFRange v110;
  CFRange v111;
  CFRange v112;
  CFRange v113;

  v102 = 0;
  IOPath = (const void *)_SCNetworkInterfaceGetIOPath();
  uint64_t IOInterfaceNamePrefix = (void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix();
  int IsBuiltin = _SCNetworkInterfaceIsBuiltin();
  if (_SCNetworkInterfaceIsEphemeral())
  {
    LODWORD(valuePtr[0]) = 0;
    uint64_t v9 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
LABEL_3:
    int v10 = 0;
    goto LABEL_19;
  }
  p_base_props = &QoSMarkingController__classData.base_props;
  CFDictionaryRef v12 = sub_10001DF0C((const __CFArray *)qword_10007DAF8, (uint64_t)a1, 0);
  if (!v12)
  {
    int ReservedRange = NetworkInterfaceGetReservedRange((uint64_t)a1, &v102);
    if (ReservedRange)
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v35 = _os_log_pack_size();
        __chkstk_darwin(v35, v36, v37);
        __error();
        uint64_t v38 = _os_log_pack_fill();
        int v39 = v102;
        *(_DWORD *)uint64_t v38 = 136315650;
        *(void *)(v38 + 4) = "assignNameAndCopyInterface";
        *(_WORD *)(v38 + 12) = 2112;
        *(void *)(v38 + 14) = a1;
        *(_WORD *)(v38 + 22) = 1024;
        *(_DWORD *)(v38 + 24) = v39;
        __SC_log_send();
        int IsBuiltin = 1;
        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
      }
      else
      {
        int IsBuiltin = 1;
      }
    }
    else if (dword_10007DB10)
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v40 = _os_log_pack_size();
        __chkstk_darwin(v40, v41, v42);
        __error();
        uint64_t v43 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v43 = 136315394;
        *(void *)(v43 + 4) = "assignNameAndCopyInterface";
        *(_WORD *)(v43 + 12) = 2112;
        *(void *)(v43 + 14) = a1;
        __SC_log_send();
      }
      sub_10001A760((__CFDictionary *)qword_10007DB18, IOPath);
      return 0;
    }
    if (_SCNetworkInterfaceIsApplePreconfigured()) {
      goto LABEL_52;
    }
    CFArrayRef v45 = (const __CFArray *)p_base_props[351];
    uint64_t v46 = (const void **)(IsBuiltin ? &kCFBooleanTrue : &kCFBooleanFalse);
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
    if (!InterfaceType) {
      goto LABEL_52;
    }
    CFStringRef v48 = InterfaceType;
    uint64_t v49 = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix();
    if (!v49) {
      goto LABEL_52;
    }
    uint64_t v50 = *v46;
    valuePtr[1] = v48;
    valuePtr[2] = v49;
    valuePtr[0] = (CFTypeRef)_SCNetworkInterfaceCopyInterfaceInfo();
    valuePtr[3] = v50;
    v104 = 0;
    if (v45)
    {
      v111.length = CFArrayGetCount(v45);
      v111.location = 0;
      CFArrayApplyFunction(v45, v111, (CFArrayApplierFunction)sub_10001FBD4, valuePtr);
    }
    if (a2)
    {
      CFIndex Count = CFArrayGetCount(a2);
      if (Count > a3 + 1)
      {
        v112.location = a3 + 1;
        v112.length = Count - (a3 + 1);
        CFArrayApplyFunction(a2, v112, (CFArrayApplierFunction)sub_10001FD74, valuePtr);
      }
    }
    if (v104)
    {
      if (CFArrayGetCount(v104) == 1)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v104, 0);
        CFRelease(v104);
        if (!ValueAtIndex) {
          goto LABEL_124;
        }
        CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"BSD Name");
        CFTypeID TypeID = CFStringGetTypeID();
        if (Value)
        {
          if (CFGetTypeID(Value) == TypeID)
          {
            int v54 = (void *)CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceNamePrefix");
            CFDictionaryRef v55 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
            CFTypeID v56 = CFStringGetTypeID();
            if (v54)
            {
              if (CFGetTypeID(v54) == v56)
              {
                CFTypeID v57 = CFNumberGetTypeID();
                if (v55)
                {
                  if (CFGetTypeID(v55) == v57)
                  {
                    existing = 0;
                    keys = @"IOInterfaceNamePrefix";
                    v109 = @"IOInterfaceUnit";
                    values = v54;
                    v107 = v55;
                    CFDictionaryRef v58 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                    keys = @"IOProviderClass";
                    v109 = @"IOPropertyMatch";
                    values = @"IONetworkInterface";
                    v107 = v58;
                    CFDictionaryRef v59 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                    CFRelease(v58);
                    MatchingServices = IOServiceGetMatchingServices(kIOMainPortDefault, v59, &existing);
                    CFStringRef v61 = 0;
                    uint64_t v62 = existing;
                    if (!MatchingServices && existing)
                    {
                      uint64_t v63 = IOIteratorNext(existing);
                      CFStringRef v61 = v63 != 0;
                      if (v63) {
                        IOObjectRelease(v63);
                      }
                      uint64_t v62 = existing;
                    }
                    if (v62) {
                      IOObjectRelease(v62);
                    }
                    if (!v61)
                    {
LABEL_124:
                      if (valuePtr[0]) {
                        CFRelease(valuePtr[0]);
                      }
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      if (ValueAtIndex)
                      {
                        v91 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"MatchingMACs");
                        if (!v91) {
                          goto LABEL_11;
                        }
                        v92 = v91;
                        uint64_t HardwareAddress = _SCNetworkInterfaceGetHardwareAddress();
                        if (!HardwareAddress) {
                          goto LABEL_11;
                        }
                        v94 = (const void *)HardwareAddress;
                        v113.length = CFArrayGetCount(v92);
                        v113.location = 0;
                        if (!CFArrayContainsValue(v92, v113, v94)) {
                          goto LABEL_11;
                        }
                        uint64_t v9 = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
                        CFRetain(v9);
                        if (!qword_10007DAE8) {
                          qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                        }
                        _SC_syslog_os_log_mapping();
                        if (!__SC_log_enabled()) {
                          goto LABEL_10;
                        }
                        v95 = _os_log_pack_size();
                        __chkstk_darwin(v95, v96, v97);
                        __error();
                        goto LABEL_9;
                      }
LABEL_52:
                      LODWORD(keys) = 0;
                      if (IsBuiltin)
                      {
                        if (ReservedRange) {
                          int v44 = v102;
                        }
                        else {
                          int v44 = sub_10001F64C(a2, a3, IOInterfaceNamePrefix);
                        }
                        LODWORD(keys) = v44;
                        uint64_t v9 = CFNumberCreate(0, kCFNumberIntType, &keys);
                        int v64 = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix();
                        CFStringRef v65 = (const __CFArray *)p_base_props[351];
                        if (!v65) {
                          goto LABEL_101;
                        }
                        CFDictionaryRef v66 = CFArrayGetCount(v65);
                        if (v66 < 1) {
                          goto LABEL_101;
                        }
                        uint64_t v67 = v66;
                        int v68 = 0;
                        while (1)
                        {
                          long long v69 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DAF8, v68);
                          long long v70 = CFDictionaryGetValue(v69, @"IOInterfaceNamePrefix");
                          if (v64 == v70 || v64 && v70 && CFEqual(v64, v70))
                          {
                            long long v71 = CFDictionaryGetValue(v69, @"IOInterfaceUnit");
                            if (v71 == v9 || v9 && v71 && CFEqual(v9, v71)) {
                              break;
                            }
                          }
                          if (v67 == ++v68) {
                            goto LABEL_101;
                          }
                        }
                        long long v72 = (const void *)_SCNetworkInterfaceGetIOPath();
                        long long v73 = CFDictionaryGetValue(v69, @"IOPathMatch");
                        if (v72 == v73 || v72 && v73 && CFEqual(v72, v73))
                        {
LABEL_101:
                          p_base_props = &QoSMarkingController__classData.base_props;
                          if (v9)
                          {
LABEL_116:
                            if (!qword_10007DAE8) {
                              qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                            }
                            _SC_syslog_os_log_mapping();
                            if (__SC_log_enabled())
                            {
                              long long v86 = _os_log_pack_size();
                              __chkstk_darwin(v86, v87, v88);
                              __error();
                              v89 = _os_log_pack_fill();
                              v90 = "built-in";
                              if (!IsBuiltin) {
                                v90 = "next available";
                              }
                              *(_DWORD *)v89 = 138412546;
                              *(void *)(v89 + 4) = v9;
                              *(_WORD *)(v89 + 12) = 2080;
                              *(void *)(v89 + 14) = v90;
                              __SC_log_send();
                            }
                            goto LABEL_3;
                          }
                        }
                        else
                        {
                          if (!qword_10007DAE8) {
                            qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
                          }
                          _SC_syslog_os_log_mapping();
                          if (__SC_log_enabled())
                          {
                            v98 = _os_log_pack_size();
                            __chkstk_darwin(v98, v99, v100);
                            __error();
                            v101 = _os_log_pack_fill();
                            *(_DWORD *)v101 = 138412290;
                            *(void *)(v101 + 4) = v9;
                            __SC_log_send();
                          }
                          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                          if (v9) {
                            CFRelease(v9);
                          }
                        }
                      }
                      long long v74 = CFArrayGetCount(a2);
                      long long v75 = sub_10001F64C(a2, v74, IOInterfaceNamePrefix);
                      LODWORD(keys) = v75;
                      long long v76 = (const __CFArray *)p_base_props[351];
                      if (v76)
                      {
                        long long v77 = CFArrayGetCount(v76);
                        if (v77 >= 1)
                        {
                          long long v78 = v77;
                          for (CFIndex i = 0; i != v78; ++i)
                          {
                            long long v80 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)p_base_props[351], i);
                            long long v81 = CFDictionaryGetValue(v80, @"IOInterfaceNamePrefix");
                            if (CFEqual(v81, IOInterfaceNamePrefix))
                            {
                              LODWORD(valuePtr[0]) = 0;
                              long long v82 = (const __CFNumber *)CFDictionaryGetValue(v80, @"IOInterfaceUnit");
                              long long v83 = CFNumberGetTypeID();
                              if (v82 && CFGetTypeID(v82) == v83)
                              {
                                long long v84 = CFNumberGetValue(v82, kCFNumberIntType, valuePtr);
                                long long v85 = (int)valuePtr[0];
                                if (!v84) {
                                  long long v85 = 0;
                                }
                              }
                              else
                              {
                                long long v85 = 0;
                              }
                              p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                              if (v85 == v75) {
                                ++v75;
                              }
                            }
                          }
                        }
                      }
                      LODWORD(keys) = v75;
                      uint64_t v9 = CFNumberCreate(0, kCFNumberIntType, &keys);
                      goto LABEL_116;
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        CFRelease(v104);
      }
    }
    CFDictionaryRef ValueAtIndex = 0;
    goto LABEL_124;
  }
  CFDictionaryRef ValueAtIndex = v12;
  uint64_t v9 = CFDictionaryGetValue(v12, @"IOInterfaceUnit");
  CFRetain(v9);
  if (!qword_10007DAE8) {
    qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v14 = _os_log_pack_size();
    __chkstk_darwin(v14, v15, v16);
    __error();
LABEL_9:
    uint64_t v17 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v17 = 138412290;
    *(void *)(v17 + 4) = v9;
    __SC_log_send();
  }
LABEL_10:
  if (!v9)
  {
LABEL_11:
    uint64_t v9 = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
    CFRetain(v9);
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v18 = _os_log_pack_size();
      __chkstk_darwin(v18, v19, v20);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 138412290;
      *(void *)(v21 + 4) = v9;
      __SC_log_send();
    }
  }
  CFArrayRef v22 = (const __CFArray *)qword_10007DB48;
  if (qword_10007DB48)
  {
    v110.length = CFArrayGetCount((CFArrayRef)qword_10007DB48);
    v110.location = 0;
    FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v22, v110, ValueAtIndex);
    if (FirstIndexOfValue != -1) {
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB48, FirstIndexOfValue);
    }
  }
  int v10 = 1;
LABEL_19:
  int v24 = 2;
  while (1)
  {
    if (v24 != 2) {
      usleep(0xC350u);
    }
    CFStringRef v25 = sub_10001FE98(a1, v10, v9);
    if (v25) {
      break;
    }
    BOOL v27 = v24-- != 0;
    if (!v10 || !v27)
    {
      if (v10) {
        sub_10001F804(a1, v9);
      }
      goto LABEL_36;
    }
  }
  uint64_t IOInterfaceUnit = (const void *)_SCNetworkInterfaceGetIOInterfaceUnit();
  if (!_SCNetworkInterfaceIsEphemeral() && !CFEqual(v9, IOInterfaceUnit))
  {
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v29 = _os_log_pack_size();
      __chkstk_darwin(v29, v30, v31);
      __error();
      uint64_t v32 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v32 = 138412802;
      *(void *)(v32 + 4) = IOInterfaceNamePrefix;
      *(_WORD *)(v32 + 12) = 2112;
      *(void *)(v32 + 14) = IOInterfaceUnit;
      *(_WORD *)(v32 + 22) = 2112;
      *(void *)(v32 + 24) = v9;
      __SC_log_send();
    }
  }
LABEL_36:
  if (v9) {
    CFRelease(v9);
  }
  return v25;
}

CFDictionaryRef sub_10001F328(const __CFArray *a1, uint64_t a2, CFIndex *a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix();
  uint64_t IOInterfaceUnit = _SCNetworkInterfaceGetIOInterfaceUnit();
  CFDictionaryRef ValueAtIndex = 0;
  if (!IOInterfaceNamePrefix) {
    return ValueAtIndex;
  }
  uint64_t v8 = (const void *)IOInterfaceUnit;
  if (!IOInterfaceUnit) {
    return ValueAtIndex;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v10 = Count;
  uint64_t v16 = a3;
  CFIndex v11 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v11);
    CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceNamePrefix");
    CFStringRef v13 = CFDictionaryGetValue(ValueAtIndex, @"IOInterfaceUnit");
    if (Value)
    {
      uint64_t v14 = v13;
      if (v13)
      {
        if (CFEqual(IOInterfaceNamePrefix, Value) && CFEqual(v8, v14)) {
          break;
        }
      }
    }
    if (v10 == ++v11) {
      return 0;
    }
  }
  if (v16) {
    *uint64_t v16 = v11;
  }
  return ValueAtIndex;
}

const void *sub_10001F470(const __CFArray *a1, uint64_t a2, CFTypeRef *a3)
{
  CFIndex v13 = 0;
  CFDictionaryRef v6 = sub_10001DF0C(a1, a2, &v13);
  for (i = 0; v6; CFDictionaryRef v6 = sub_10001DF0C(a1, a2, &v13))
  {
    if (a3 && !*a3) {
      *a3 = CFRetain(v6);
    }
    CFArrayRemoveValueAtIndex(a1, v13);
    ++i;
  }
  while (1)
  {
    uint64_t result = sub_10001F328(a1, a2, &v13);
    if (!result) {
      break;
    }
    if (a3 && !*a3) {
      *a3 = CFRetain(result);
    }
    CFArrayRemoveValueAtIndex(a1, v13);
    ++i;
  }
  if (i >= 2)
  {
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = (const void *)__SC_log_enabled();
    if (result)
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9, v10, v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 67109378;
      *(_DWORD *)(v12 + 4) = i;
      *(_WORD *)(v12 + 8) = 2112;
      *(void *)(v12 + 10) = a2;
      return (const void *)__SC_log_send();
    }
  }
  return result;
}

uint64_t sub_10001F64C(CFArrayRef theArray, uint64_t a2, void *a3)
{
  if (a2 < 1)
  {
    unsigned int v7 = 0;
  }
  else
  {
    CFIndex v6 = 0;
    unsigned int v7 = 0;
    do
    {
      CFArrayGetValueAtIndex(theArray, v6);
      uint64_t IOInterfaceNamePrefix = (const void *)_SCNetworkInterfaceGetIOInterfaceNamePrefix();
      if (CFEqual(a3, IOInterfaceNamePrefix) && _SCNetworkInterfaceIsBuiltin()) {
        ++v7;
      }
      ++v6;
    }
    while (a2 != v6);
  }
  unsigned int ReservedUnits = NetworkInterfacePrefixGetReservedUnits(a3);
  if (!qword_10007DAE8) {
    qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v10 = _os_log_pack_size();
    __chkstk_darwin(v10, v11, v12);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 138412546;
    *(void *)(v13 + 4) = a3;
    *(_WORD *)(v13 + 12) = 1024;
    *(_DWORD *)(v13 + 14) = ReservedUnits;
    __SC_log_send();
  }
  if (v7 <= ReservedUnits) {
    return ReservedUnits;
  }
  else {
    return v7;
  }
}

uint64_t sub_10001F804(const void *a1, const void *a2)
{
  kern_return_t v9;
  kern_return_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  UInt8 *BytePtr;
  io_object_t v20;
  __CFArray *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  io_object_t notification;

  notification = 0;
  uint64_t IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID();
  CFDictionaryRef v5 = IORegistryEntryIDMatching(IORegistryEntryID);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v5);
  if (MatchingService)
  {
    io_service_t v7 = MatchingService;
    CFMutableDataRef Mutable = CFDataCreateMutable(0, 32);
    uint64_t v9 = IOServiceAddInterestNotification((IONotificationPortRef)qword_10007DB08, v7, "IOGeneralInterest", (IOServiceInterestCallback)sub_1000204BC, Mutable, &notification);
    if (v9)
    {
      uint64_t v10 = v9;
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v11 = _os_log_pack_size();
        __chkstk_darwin(v11, v12, v13);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v14 = 136315394;
        *(void *)(v14 + 4) = "addNamingRequest";
        *(_WORD *)(v14 + 12) = 1024;
        *(_DWORD *)(v14 + 14) = v10;
        __SC_log_send();
      }
      CFRelease(Mutable);
      return IOObjectRelease(v7);
    }
    CFDataSetLength(Mutable, 32);
    BytePtr = (UInt8 *)CFDataGetBytePtr(Mutable);
    *(_OWORD *)BytePtr = 0u;
    *((_OWORD *)BytePtr + 1) = 0u;
    *(void *)BytePtr = CFRetain(a1);
    *((void *)BytePtr + 2) = CFRetain(a2);
    uint64_t v20 = notification;
    *((_DWORD *)BytePtr + 2) = v7;
    *((_DWORD *)BytePtr + 3) = v20;
    uint64_t v21 = (__CFArray *)qword_10007DB60;
    if (!qword_10007DB60)
    {
      qword_10007DB60 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      sub_100020924();
      uint64_t v21 = (__CFArray *)qword_10007DB60;
    }
    CFArrayAppendValue(v21, Mutable);
    CFRelease(Mutable);
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      CFArrayRef v22 = _os_log_pack_size();
      __chkstk_darwin(v22, v23, v24);
      __error();
      goto LABEL_18;
    }
  }
  else
  {
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v16 = _os_log_pack_size();
      __chkstk_darwin(v16, v17, v18);
      __error();
LABEL_18:
      CFStringRef v25 = _os_log_pack_fill();
      *(_DWORD *)CFStringRef v25 = 136315650;
      *(void *)(v25 + 4) = "addNamingRequest";
      *(_WORD *)(v25 + 12) = 2112;
      *(void *)(v25 + 14) = a1;
      *(_WORD *)(v25 + 22) = 2112;
      *(void *)(v25 + 24) = a2;
      return __SC_log_send();
    }
  }
  return result;
}

void sub_10001FBD4(const __CFDictionary *a1, uint64_t a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"IOInterfaceNamePrefix");
  CFDictionaryRef v5 = *(const void **)(a2 + 16);
  if (Value == v5 || Value && v5 && CFEqual(Value, v5))
  {
    CFIndex v6 = CFDictionaryGetValue(a1, @"SCNetworkInterfaceType");
    io_service_t v7 = *(const void **)(a2 + 8);
    if (v6 == v7 || v6 && v7 && CFEqual(v6, v7))
    {
      uint64_t v8 = CFDictionaryGetValue(a1, @"SCNetworkInterfaceInfo");
      uint64_t v9 = *(const void **)a2;
      if (v8 == *(const void **)a2 || v8 && v9 && CFEqual(v8, v9))
      {
        if (!*(void *)(a2 + 24)) {
          goto LABEL_21;
        }
        uint64_t v10 = CFDictionaryGetValue(a1, @"IOBuiltin");
        CFTypeID TypeID = CFBooleanGetTypeID();
        if (!v10 || CFGetTypeID(v10) != TypeID) {
          uint64_t v10 = kCFBooleanFalse;
        }
        uint64_t v12 = *(const void **)(a2 + 24);
        if (v10 == v12 || v10 && v12 && CFEqual(v10, v12))
        {
LABEL_21:
          CFMutableDataRef Mutable = *(__CFArray **)(a2 + 32);
          if (!Mutable)
          {
            CFMutableDataRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
            *(void *)(a2 + 32) = Mutable;
          }
          CFArrayAppendValue(Mutable, a1);
        }
      }
    }
  }
}

void sub_10001FD74(const __SCNetworkInterface *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    return;
  }
  CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
  CFStringRef v4 = *(CFStringRef *)(a2 + 8);
  if (InterfaceType != v4 && (!InterfaceType || !v4 || !CFEqual(InterfaceType, v4))) {
    return;
  }
  CFDictionaryRef v5 = (const void *)_SCNetworkInterfaceCopyInterfaceInfo();
  CFIndex v6 = v5;
  io_service_t v7 = *(const void **)a2;
  if (v5 == *(const void **)a2)
  {
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
    if (v5 && v7)
    {
      int v8 = CFEqual(v5, v7);
LABEL_12:
      CFRelease(v6);
      goto LABEL_13;
    }
  }
  if (v5) {
    goto LABEL_12;
  }
LABEL_13:
  if (v8)
  {
    if (!*(void *)(a2 + 24)) {
      goto LABEL_21;
    }
    int IsBuiltin = _SCNetworkInterfaceIsBuiltin();
    uint64_t v10 = &kCFBooleanTrue;
    if (!IsBuiltin) {
      uint64_t v10 = &kCFBooleanFalse;
    }
    CFBooleanRef v11 = *v10;
    uint64_t v12 = *(const void **)(a2 + 24);
    if (*(const void **)v10 == v12 || v11 && v12 && CFEqual(v11, v12))
    {
LABEL_21:
      CFRelease(*(CFTypeRef *)(a2 + 32));
      *(void *)(a2 + 32) = 0;
    }
  }
}

const void *sub_10001FE98(const __SCNetworkInterface *a1, int a2, const void *a3)
{
  kern_return_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v26;
  BOOL valuePtr;
  UInt8 bytes[8];

  uint64_t IOPath = _SCNetworkInterfaceGetIOPath();
  uint64_t IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID();
  io_connect_t v8 = dword_10007DAF0;
  *(void *)bytes = IORegistryEntryID;
  int valuePtr = a2 == 0;
  CFMutableDataRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(Mutable, @"IONetworkStackUserCommand", v10);
  CFRelease(v10);
  CFDataRef v11 = CFDataCreate(0, bytes, 8);
  CFDictionarySetValue(Mutable, @"IORegistryEntryID", v11);
  CFRelease(v11);
  CFDictionarySetValue(Mutable, @"IOInterfaceUnit", a3);
  uint64_t v12 = IOConnectSetCFProperties(v8, Mutable);
  CFRelease(Mutable);
  uint64_t v13 = sub_100020230(IORegistryEntryID);
  if (v13)
  {
    uint64_t v14 = (const void *)v13;
    if (_SCNetworkInterfaceGetIOInterfaceUnit())
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v15 = _os_log_pack_size();
        __chkstk_darwin(v15, v16, v17);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        uint64_t v19 = "Known";
        *(_DWORD *)uint64_t v18 = 136315650;
        if (!a2) {
          uint64_t v19 = "New";
        }
        *(void *)(v18 + 4) = v19;
        *(_WORD *)(v18 + 12) = 2112;
        *(void *)(v18 + 14) = IOPath;
        *(_WORD *)(v18 + 22) = 2112;
        *(void *)(v18 + 24) = a3;
        __SC_log_send();
      }
      return v14;
    }
    CFRelease(v14);
  }
  if (!qword_10007DAE8) {
    qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v20 = _os_log_pack_size();
    int v26 = (uint64_t)&v26;
    __chkstk_darwin(v20, v21, v22);
    __error();
    CFTypeID v23 = _os_log_pack_fill();
    *(_DWORD *)CFTypeID v23 = 136316162;
    int v24 = "Known";
    if (!a2) {
      int v24 = "New";
    }
    *(void *)(v23 + 4) = v24;
    *(_WORD *)(v23 + 12) = 1024;
    *(_DWORD *)(v23 + 14) = v12;
    *(_WORD *)(v23 + 18) = 2112;
    *(void *)(v23 + 20) = IOPath;
    *(_WORD *)(v23 + 28) = 2048;
    *(void *)(v23 + 30) = IORegistryEntryID;
    *(_WORD *)(v23 + 38) = 2112;
    *(void *)(v23 + 40) = a3;
    __SC_log_send();
  }
  sub_10001DD08(a1);
  return 0;
}

uint64_t sub_100020230(uint64_t a1)
{
  kern_return_t MatchingServices;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  io_iterator_t v9;
  io_object_t v10;
  io_object_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  io_iterator_t existing;

  existing = 0;
  CFDictionaryRef v2 = IORegistryEntryIDMatching(a1);
  MatchingServices = IOServiceGetMatchingServices(kIOMainPortDefault, v2, &existing);
  if (MatchingServices) {
    CFStringRef v4 = 1;
  }
  else {
    CFStringRef v4 = existing == 0;
  }
  if (v4)
  {
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      CFDictionaryRef v5 = _os_log_pack_size();
      __chkstk_darwin(v5, v6, v7);
      __error();
      io_connect_t v8 = _os_log_pack_fill();
      uint64_t v9 = existing;
      *(_DWORD *)io_connect_t v8 = 134218496;
      *(void *)(v8 + 4) = a1;
      *(_WORD *)(v8 + 12) = 1024;
      *(_DWORD *)(v8 + 14) = MatchingServices;
      *(_WORD *)(v8 + 18) = 1024;
      *(_DWORD *)(v8 + 20) = v9;
      __SC_log_send();
    }
  }
  else
  {
    CFNumberRef v10 = IOIteratorNext(existing);
    if (v10)
    {
      CFDataRef v11 = v10;
      uint64_t v12 = _SCNetworkInterfaceCreateWithIONetworkInterfaceObject();
      IOObjectRelease(v11);
      goto LABEL_17;
    }
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13, v14, v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 134217984;
      *(void *)(v16 + 4) = a1;
      __SC_log_send();
    }
  }
  uint64_t v12 = 0;
LABEL_17:
  if (existing) {
    IOObjectRelease(existing);
  }
  return v12;
}

CFDataRef sub_1000204BC(const __CFData *result, uint64_t a2, int a3)
{
  if (a3 == -536870896)
  {
    CFDataRef v3 = result;
    BytePtr = CFDataGetBytePtr(result);
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5, v6, v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      uint64_t v9 = *(void *)BytePtr;
      uint64_t v10 = *((void *)BytePtr + 2);
      *(_DWORD *)uint64_t v8 = 136315650;
      *(void *)(v8 + 4) = "entryForNamingRequestChanged";
      *(_WORD *)(v8 + 12) = 2112;
      *(void *)(v8 + 14) = v9;
      *(_WORD *)(v8 + 22) = 2112;
      *(void *)(v8 + 24) = v10;
      __SC_log_send();
    }
    sub_100020668((uint64_t)BytePtr);
    if (qword_10007DB60)
    {
      v12.length = CFArrayGetCount((CFArrayRef)qword_10007DB60);
      v12.location = 0;
      FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_10007DB60, v12, v3);
    }
    else
    {
      FirstIndexOfCFArrayRef Value = -1;
    }
    return (const __CFData *)sub_1000206FC(FirstIndexOfValue);
  }
  return result;
}

uint64_t sub_100020668(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0;
  }
  CFDataRef v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0;
  }
  io_object_t v4 = *(_DWORD *)(a1 + 12);
  if (v4)
  {
    IOObjectRelease(v4);
    *(_DWORD *)(a1 + 12) = 0;
  }
  uint64_t result = *(unsigned int *)(a1 + 8);
  if (result)
  {
    uint64_t result = IOObjectRelease(result);
    *(_DWORD *)(a1 + 8) = 0;
  }
  return result;
}

CFIndex sub_1000206FC(CFIndex a1)
{
  if (!qword_10007DB60) {
    sub_100065150();
  }
  if (CFArrayGetCount((CFArrayRef)qword_10007DB60) <= a1) {
    sub_10006517C();
  }
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB60, a1);
  CFIndex result = CFArrayGetCount((CFArrayRef)qword_10007DB60);
  if (!result)
  {
    if (qword_10007DB60)
    {
      CFRelease((CFTypeRef)qword_10007DB60);
      qword_10007DB60 = 0;
    }
    return sub_1000207D0();
  }
  return result;
}

uint64_t sub_1000207D0()
{
  uint64_t result = qword_10007DB68;
  if (qword_10007DB68)
  {
    CFRunLoopTimerInvalidate((CFRunLoopTimerRef)qword_10007DB68);
    if (qword_10007DB68)
    {
      CFRelease((CFTypeRef)qword_10007DB68);
      qword_10007DB68 = 0;
    }
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1, v2, v3);
      __error();
      uint64_t v4 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v4 = 136315138;
      *(void *)(v4 + 4) = "disableNamingRequestCallBacks";
      return __SC_log_send();
    }
  }
  return result;
}

void sub_100020924()
{
  if (!qword_10007DB68)
  {
    qword_10007DB68 = (uint64_t)CFRunLoopTimerCreateWithHandler(0, 0.0, 1.0, 0, 0, &stru_100076398);
    CFRunLoopRef Current = CFRunLoopGetCurrent();
    CFRunLoopAddTimer(Current, (CFRunLoopTimerRef)qword_10007DB68, kCFRunLoopDefaultMode);
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1, v2, v3);
      __error();
      uint64_t v4 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v4 = 136315138;
      *(void *)(v4 + 4) = "enableNamingRequestCallBacks";
      __SC_log_send();
    }
  }
}

void sub_100020AA0(id a1, __CFRunLoopTimer *a2)
{
  sub_100020AF8();
}

void sub_100020AF8()
{
  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_10007DB60)
  {
    uint64_t v1 = &QoSMarkingController__classData.base_props;
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2, v3, v4);
      __error();
      uint64_t v1 = &QoSMarkingController__classData.base_props;
      uint64_t v5 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v5 = 136315138;
      *(void *)(v5 + 4) = "handleDeferredNamingRequests";
      __SC_log_send();
    }
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10007DB60);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      int v8 = 0;
      for (CFIndex i = 0; i < v7; ++i)
      {
        CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)p_base_props[364], i);
        BytePtr = CFDataGetBytePtr(ValueAtIndex);
        ++*((_DWORD *)BytePtr + 6);
        CFRange v12 = sub_10001FE98(*(const __SCNetworkInterface **)BytePtr, 1, *((const void **)BytePtr + 2));
        if (v12)
        {
          uint64_t v13 = v12;
          if (!v1[349]) {
            v1[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v14 = _os_log_pack_size();
            __chkstk_darwin(v14, v15, v16);
            __error();
            uint64_t v1 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            uint64_t v17 = _os_log_pack_fill();
            uint64_t v18 = *(const __SCNetworkInterface **)BytePtr;
            uint64_t v19 = *((void *)BytePtr + 2);
            *(_DWORD *)uint64_t v17 = 136315650;
            *(void *)(v17 + 4) = "handleDeferredNamingRequests";
            *(_WORD *)(v17 + 12) = 2112;
            *(void *)(v17 + 14) = v18;
            *(_WORD *)(v17 + 22) = 2112;
            *(void *)(v17 + 24) = v19;
            __SC_log_send();
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          }
          sub_100020668((uint64_t)BytePtr);
          sub_1000206FC(i);
          --v7;
          CFRelease(v13);
          int v8 = 1;
        }
        else if (*((_DWORD *)BytePtr + 6) >= 0x1Eu)
        {
          if (!v1[349]) {
            v1[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v20 = _os_log_pack_size();
            __chkstk_darwin(v20, v21, v22);
            __error();
            uint64_t v1 = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            uint64_t v23 = _os_log_pack_fill();
            int v24 = *(const __SCNetworkInterface **)BytePtr;
            uint64_t v25 = *((void *)BytePtr + 2);
            int v26 = *((_DWORD *)BytePtr + 6);
            *(_DWORD *)uint64_t v23 = 136315906;
            *(void *)(v23 + 4) = "handleDeferredNamingRequests";
            *(_WORD *)(v23 + 12) = 2112;
            *(void *)(v23 + 14) = v24;
            *(_WORD *)(v23 + 22) = 2112;
            *(void *)(v23 + 24) = v25;
            *(_WORD *)(v23 + 32) = 1024;
            *(_DWORD *)(v23 + 34) = v26;
            __SC_log_send();
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          }
          sub_100020668((uint64_t)BytePtr);
          sub_1000206FC(i);
          --v7;
        }
      }
      if (v8) {
        sub_10001C714();
      }
    }
  }
}

BOOL sub_100020EFC(BOOL result, const void *a2)
{
  if (result)
  {
    CFArrayRef v3 = (const __CFArray *)result;
    CFIndex Count = CFArrayGetCount((CFArrayRef)result);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      CFIndex v5 = Count;
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v3, 0);
      BytePtr = (CFTypeRef *)CFDataGetBytePtr(ValueAtIndex);
      if (CFEqual(*BytePtr, a2))
      {
        return 1;
      }
      else
      {
        CFIndex v8 = 1;
        do
        {
          CFIndex v9 = v8;
          if (v5 == v8) {
            break;
          }
          CFDataRef v10 = (const __CFData *)CFArrayGetValueAtIndex(v3, v8);
          CFDataRef v11 = (CFTypeRef *)CFDataGetBytePtr(v10);
          int v12 = CFEqual(*v11, a2);
          CFIndex v8 = v9 + 1;
        }
        while (!v12);
        return v9 < v5;
      }
    }
  }
  return result;
}

__CFData *sub_100020FDC(const void *a1, uint64_t a2)
{
  kern_return_t v10;
  kern_return_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  uint64_t IORegistryEntryID = _SCNetworkInterfaceGetIORegistryEntryID();
  CFDictionaryRef v5 = IORegistryEntryIDMatching(IORegistryEntryID);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v5);
  if (!MatchingService) {
    return 0;
  }
  io_service_t v7 = MatchingService;
  CFMutableDataRef Mutable = CFDataCreateMutable(0, 24);
  CFDataSetLength(Mutable, 24);
  BytePtr = (UInt8 *)CFDataGetBytePtr(Mutable);
  *((void *)BytePtr + 1) = 0;
  *((void *)BytePtr + 2) = 0;
  *(void *)BytePtr = 0;
  *(void *)BytePtr = CFRetain(a1);
  *((_DWORD *)BytePtr + 2) = v7;
  *((void *)BytePtr + 2) = a2;
  CFDataRef v10 = IOServiceAddInterestNotification((IONotificationPortRef)qword_10007DB08, v7, "IOGeneralInterest", (IOServiceInterestCallback)sub_1000217BC, Mutable, (io_object_t *)BytePtr + 3);
  if (v10)
  {
    CFDataRef v11 = v10;
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      int v12 = _os_log_pack_size();
      __chkstk_darwin(v12, v13, v14);
      __error();
      uint64_t v15 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v15 = 67109120;
      v15[1] = v11;
      __SC_log_send();
    }
    sub_100021998(Mutable);
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

void sub_1000211CC(const __CFData *a1, int a2)
{
  BytePtr = (SCNetworkInterfaceRef *)CFDataGetBytePtr(a1);
  if (a2 != -536870896) {
    return;
  }
  CFDictionaryRef v5 = BytePtr;
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(*BytePtr);
  if (BSDName)
  {
    CFStringRef v7 = BSDName;
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_16;
    }
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8, v9, v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 138412290;
    *(void *)(v11 + 4) = v7;
  }
  else
  {
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12, v13, v14);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_16;
    }
    uint64_t v15 = _os_log_pack_size();
    __chkstk_darwin(v15, v16, v17);
    __error();
    uint64_t v18 = _os_log_pack_fill();
    SCNetworkInterfaceRef v19 = *v5;
    *(_DWORD *)uint64_t v18 = 138412290;
    *(void *)(v18 + 4) = v19;
  }
  __SC_log_send();
LABEL_16:
  if (qword_10007DB70)
  {
    v21.length = CFArrayGetCount((CFArrayRef)qword_10007DB70);
    v21.location = 0;
    FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_10007DB70, v21, a1);
    if (FirstIndexOfValue != -1)
    {
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB70, FirstIndexOfValue);
      if (!CFArrayGetCount((CFArrayRef)qword_10007DB70))
      {
        CFRelease((CFTypeRef)qword_10007DB70);
        qword_10007DB70 = 0;
      }
      sub_100021500();
    }
  }
}

void sub_100021500()
{
  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_10007DB70 && (CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10007DB70), Count >= 1))
  {
    CFIndex v2 = Count;
    CFMutableDataRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    for (CFIndex i = 0; i != v2; ++i)
    {
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)p_base_props[366], i);
      BytePtr = (SCNetworkInterfaceRef *)CFDataGetBytePtr(ValueAtIndex);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(*BytePtr);
      if (BSDName)
      {
        CFArrayAppendValue(Mutable, BSDName);
      }
      else
      {
        if (!qword_10007DAE8) {
          qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v8 = _os_log_pack_size();
          __chkstk_darwin(v8, v9, v10);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          __SC_log_send();
        }
        if (!qword_10007DAE8) {
          qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v11 = _os_log_pack_size();
          __chkstk_darwin(v11, v12, v13);
          __error();
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          uint64_t v14 = _os_log_pack_fill();
          SCNetworkInterfaceRef v15 = *BytePtr;
          *(_DWORD *)uint64_t v14 = 138412290;
          *(void *)(v14 + 4) = v15;
          __SC_log_send();
        }
      }
    }
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DB18, @"_PreConfigured_", Mutable);
    CFRelease(Mutable);
  }
  else
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DB18, @"_PreConfigured_");
  }
  sub_10001B188();
}

void sub_1000217BC(const __CFData *a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == -536870896)
  {
    BytePtr = CFDataGetBytePtr(a1);
    CFStringRef v7 = *(const void **)BytePtr;
    if (_SCNetworkInterfaceIsBuiltin() || !_SCNetworkInterfaceIsApplePreconfigured()) {
      CFStringRef v7 = 0;
    }
    else {
      CFRetain(v7);
    }
    CFRetain(a1);
    (*((void (**)(const __CFData *, uint64_t, uint64_t))BytePtr + 2))(a1, 3758096400, a4);
    sub_100021998(a1);
    CFRelease(a1);
    if (v7)
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v8 = _os_log_pack_size();
        __chkstk_darwin(v8, v9, v10);
        __error();
        uint64_t v11 = _os_log_pack_fill();
        uint64_t IOInterfaceUnit = _SCNetworkInterfaceGetIOInterfaceUnit();
        *(_DWORD *)uint64_t v11 = 138412290;
        *(void *)(v11 + 4) = IOInterfaceUnit;
        __SC_log_send();
      }
      sub_10001F470((const __CFArray *)qword_10007DAF8, (uint64_t)v7, 0);
      CFRelease(v7);
      sub_10001B4F0((CFPropertyListRef)qword_10007DAF8);
    }
  }
}

void sub_100021998(const __CFData *a1)
{
  BytePtr = CFDataGetBytePtr(a1);
  io_object_t v2 = *((_DWORD *)BytePtr + 3);
  if (v2)
  {
    IOObjectRelease(v2);
    *((_DWORD *)BytePtr + 3) = 0;
  }
  io_object_t v3 = *((_DWORD *)BytePtr + 2);
  if (v3)
  {
    IOObjectRelease(v3);
    *((_DWORD *)BytePtr + 2) = 0;
  }
  if (*(void *)BytePtr)
  {
    CFRelease(*(CFTypeRef *)BytePtr);
    *(void *)BytePtr = 0;
  }
}

void sub_100021A20(const __CFData *a1, int a2)
{
  CFDataGetBytePtr(a1);
  if (a2 == -536870896)
  {
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4, v5, v6);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t IOPath = _SCNetworkInterfaceGetIOPath();
      *(_DWORD *)uint64_t v10 = 138412290;
      *(void *)(v10 + 4) = IOPath;
      __SC_log_send();
    }
    if (qword_10007DB78)
    {
      v15.length = CFArrayGetCount((CFArrayRef)qword_10007DB78);
      v15.location = 0;
      FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue((CFArrayRef)qword_10007DB78, v15, a1);
      if (FirstIndexOfValue != -1)
      {
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_10007DB78, FirstIndexOfValue);
        if (!CFArrayGetCount((CFArrayRef)qword_10007DB78))
        {
          CFRelease((CFTypeRef)qword_10007DB78);
          qword_10007DB78 = 0;
        }
        CFRunLoopRef Current = CFRunLoopGetCurrent();
        CFRetain(Current);
        if (qword_10007DB88 != -1) {
          dispatch_once(&qword_10007DB88, &stru_100076478);
        }
        block[0] = _NSConcreteStackBlock;
        block[1] = 0x40000000;
        block[2] = sub_1000222EC;
        block[3] = &unk_100076418;
        block[4] = Current;
        dispatch_async((dispatch_queue_t)qword_10007DB90, block);
      }
    }
  }
}

void sub_100021D18(id a1)
{
  sub_100021DCC(kLockdownNotificationHostAttached, @"Host attached");
  sub_100021DCC(kLockdownNotificationHostDetached, @"Host detached");
  sub_100021DCC(kLockdownNotificationTrustedHostAttached, @"Trusted Host attached");
  CFStringRef v1 = (const __CFString *)kLockdownNotificationTrustedPTPAttached;

  sub_100021DCC(v1, @"Trusted PTP attached");
}

void sub_100021DCC(const __CFString *a1, const void *a2)
{
  out_audit_token_t token = -1;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (!CStringPtr) {
    sub_1000651A8();
  }
  uint64_t v6 = CStringPtr;
  CFRetain(Current);
  CFRetain(a2);
  if (qword_10007DB88 != -1) {
    dispatch_once(&qword_10007DB88, &stru_100076478);
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_100022364;
  handler[3] = &unk_100076438;
  void handler[4] = Current;
  void handler[5] = a2;
  uint32_t v7 = notify_register_dispatch(v6, &out_token, (dispatch_queue_t)qword_10007DB90, handler);
  if (v7)
  {
    uint32_t v8 = v7;
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9, v10, v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 138412546;
      *(void *)(v12 + 4) = a1;
      *(_WORD *)(v12 + 12) = 1024;
      *(_DWORD *)(v12 + 14) = v8;
      __SC_log_send();
    }
    CFRelease(Current);
    CFRelease(a2);
  }
}

void sub_100021FF8(uint64_t a1)
{
  sub_100022070(*(__CFRunLoop **)(a1 + 32), @"TrustRequired interface added");
  io_object_t v2 = *(const void **)(a1 + 32);

  CFRelease(v2);
}

void sub_100022070(__CFRunLoop *a1, uint64_t a2)
{
  CFStringRef v18 = 0;
  int is_host_trusted = lockdown_is_host_trusted();
  if (qword_10007DB78) {
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10007DB78);
  }
  else {
    CFIndex Count = 0;
  }
  BOOL v7 = qword_10007DB98 == Count && byte_10007DBA0 == is_host_trusted;
  if (!qword_10007DAE8) {
    qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v8 = _os_log_pack_size();
    v17[1] = v17;
    __chkstk_darwin(v8, v9, v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    CFStringRef v12 = v18;
    uint64_t v13 = "No";
    *(_DWORD *)uint64_t v11 = 138413826;
    *(void *)(v11 + 4) = a2;
    if (is_host_trusted) {
      uint64_t v13 = "Yes";
    }
    uint64_t v14 = ", error = ";
    if (!v12) {
      uint64_t v14 = "";
    }
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v11 + 14) = v13;
    if (!v12) {
      CFStringRef v12 = &stru_100077F38;
    }
    *(_WORD *)(v11 + 22) = 2080;
    *(void *)(v11 + 24) = v14;
    CFRange v15 = "s";
    if (Count == 1) {
      CFRange v15 = "";
    }
    *(_WORD *)(v11 + 32) = 2112;
    *(void *)(v11 + 34) = v12;
    uint64_t v16 = " *";
    *(_WORD *)(v11 + 42) = 2048;
    *(void *)(v11 + 44) = Count;
    *(_WORD *)(v11 + 52) = 2080;
    *(void *)(v11 + 54) = v15;
    if (v7) {
      uint64_t v16 = "";
    }
    *(_WORD *)(v11 + 62) = 2080;
    *(void *)(v11 + 64) = v16;
    __SC_log_send();
  }
  if (!v7)
  {
    byte_10007DBA0 = is_host_trusted;
    qword_10007DB98 = Count;
    CFRunLoopPerformBlock(a1, kCFRunLoopDefaultMode, &stru_1000764B8);
    CFRunLoopWakeUp(a1);
  }
  if (v18) {
    CFRelease(v18);
  }
}

void sub_1000222EC(uint64_t a1)
{
  sub_100022070(*(__CFRunLoop **)(a1 + 32), @"TrustRequired interface removed");
  io_object_t v2 = *(const void **)(a1 + 32);

  CFRelease(v2);
}

void sub_100022364(uint64_t a1)
{
  io_object_t v2 = *(__CFRunLoop **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  sub_100022070(v2, v3);
}

void sub_1000223BC(id a1)
{
  qword_10007DB90 = (uint64_t)dispatch_queue_create("Trust Required queue", 0);
}

void sub_10002241C(id a1)
{
  sub_100022474();
}

void sub_100022474()
{
  if (qword_10007DB78
    && ((CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10007DB78), Count >= 1) ? (v1 = byte_10007DBA0 == 0) : (v1 = 0), v1))
  {
    CFIndex v2 = Count;
    CFMutableDataRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFIndex v4 = 0;
    p_base_props = &QoSMarkingController__classData.base_props;
    do
    {
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DB78, v4);
      BytePtr = (SCNetworkInterfaceRef *)CFDataGetBytePtr(ValueAtIndex);
      CFStringRef BSDName = SCNetworkInterfaceGetBSDName(*BytePtr);
      if (BSDName)
      {
        CFArrayAppendValue(Mutable, BSDName);
      }
      else
      {
        if (!p_base_props[349]) {
          p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v9 = _os_log_pack_size();
          __chkstk_darwin(v9, v10, v11);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          p_base_props = &QoSMarkingController__classData.base_props;
          __SC_log_send();
        }
        if (!p_base_props[349]) {
          p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v12 = _os_log_pack_size();
          __chkstk_darwin(v12, v13, v14);
          __error();
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
          uint64_t v15 = _os_log_pack_fill();
          SCNetworkInterfaceRef v16 = *BytePtr;
          *(_DWORD *)uint64_t v15 = 138412290;
          *(void *)(v15 + 4) = v16;
          __SC_log_send();
        }
      }
      ++v4;
    }
    while (v2 != v4);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DB18, @"_Excluded_", Mutable);
    CFRelease(Mutable);
  }
  else
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DB18, @"_Excluded_");
  }
  sub_10001B188();
}

void sub_10002273C(uint64_t a1)
{
  sub_1000227AC(*(const __CFArray **)(a1 + 32));
  CFIndex v2 = *(const void **)(a1 + 32);

  CFRelease(v2);
}

void sub_1000227AC(const __CFArray *a1)
{
  SCPreferencesRef v2 = SCPreferencesCreate(0, @"InterfaceNamer:updateNetworkConfiguration", 0);
  p_base_props = &QoSMarkingController__classData.base_props;
  if (!v2)
  {
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v16 = _os_log_pack_size();
      __chkstk_darwin(v16, v17, v18);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      int v20 = SCError();
      CFRange v21 = SCErrorString(v20);
      *(_DWORD *)uint64_t v19 = 136315138;
      *(void *)(v19 + 4) = v21;
      __SC_log_send();
    }
    return;
  }
  CFIndex v4 = v2;
  CFArrayRef v74 = a1;
  if (!qword_10007DAE8) {
    qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5, v6, v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136315394;
    *(void *)(v8 + 4) = "updateNetworkConfigurationAsync";
    *(_WORD *)(v8 + 12) = 2112;
    *(void *)(v8 + 14) = a1;
    __SC_log_send();
  }
  int v9 = 0;
  while (!SCPreferencesLock(v4, 1u))
  {
    int v10 = SCError();
    uint64_t v11 = p_base_props[349];
    if (v10 != 3005)
    {
      if (!v11) {
        p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v46 = _os_log_pack_size();
        __chkstk_darwin(v46, v47, v48);
        __error();
        uint64_t v49 = _os_log_pack_fill();
        int v50 = SCError();
        uint64_t v51 = SCErrorString(v50);
        *(_DWORD *)uint64_t v49 = 136315394;
        *(void *)(v49 + 4) = "updateNetworkConfigurationAsync";
        *(_WORD *)(v49 + 12) = 2080;
        *(void *)(v49 + 14) = v51;
        __SC_log_send();
        p_base_props = &QoSMarkingController__classData.base_props;
      }
LABEL_57:
      if (!p_base_props[349]) {
        p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v52 = _os_log_pack_size();
        __chkstk_darwin(v52, v53, v54);
        __error();
        uint64_t v55 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v55 = 136315138;
        *(void *)(v55 + 4) = "updateNetworkConfigurationAsync";
        __SC_log_send();
      }
      goto LABEL_85;
    }
    if (!v11) {
      p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12, v13, v14);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 136315650;
      ++v9;
      *(void *)(v15 + 4) = "updateNetworkConfigurationAsync";
      *(_WORD *)(v15 + 12) = 1024;
      *(_DWORD *)(v15 + 14) = v9;
      *(_WORD *)(v15 + 18) = 1024;
      *(_DWORD *)(v15 + 20) = 10;
      __SC_log_send();
      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
    }
    else
    {
      ++v9;
    }
    SCPreferencesSynchronize(v4);
    if (v9 == 10) {
      goto LABEL_57;
    }
  }
  Default = SCNetworkSetCopyCurrent(v4);
  if (!Default)
  {
    if (!p_base_props[349]) {
      p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v23 = _os_log_pack_size();
      __chkstk_darwin(v23, v24, v25);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
      p_base_props = &QoSMarkingController__classData.base_props;
    }
    Default = (const void *)_SCNetworkSetCreateDefault();
    if (!Default)
    {
      if (!p_base_props[349]) {
        p_base_props[349] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v60 = _os_log_pack_size();
        __chkstk_darwin(v60, v61, v62);
        __error();
        uint64_t v63 = _os_log_pack_fill();
        int v64 = SCError();
        CFStringRef v65 = SCErrorString(v64);
        *(_DWORD *)uint64_t v63 = 136315138;
        *(void *)(v63 + 4) = v65;
        __SC_log_send();
      }
      SCPreferencesUnlock(v4);
      goto LABEL_85;
    }
  }
  if (!v74 || (CFIndex Count = CFArrayGetCount(v74), Count < 1))
  {
    SCPreferencesUnlock(v4);
    goto LABEL_84;
  }
  CFIndex v27 = Count;
  long long v73 = Default;
  CFStringRef v28 = v4;
  int v72 = 0;
  for (CFIndex i = 0; i != v27; ++i)
  {
    CFDataRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v74, i);
    if (_SCNetworkInterfaceIsHiddenInterface())
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v31 = _os_log_pack_size();
        __chkstk_darwin(v31, v32, v33);
        __error();
        uint64_t v34 = _os_log_pack_fill();
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
        *(_DWORD *)uint64_t v34 = 138412290;
        *(void *)(v34 + 4) = BSDName;
LABEL_49:
        __SC_log_send();
        continue;
      }
    }
    else if (SCNetworkInterfaceGetAutoConfigure())
    {
      if (SCNetworkSetEstablishDefaultInterfaceConfiguration())
      {
        if (!qword_10007DAE8) {
          qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v36 = _os_log_pack_size();
          __chkstk_darwin(v36, v37, v38);
          __error();
          uint64_t v39 = _os_log_pack_fill();
          CFStringRef v40 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
          *(_DWORD *)uint64_t v39 = 138412290;
          *(void *)(v39 + 4) = v40;
          __SC_log_send();
        }
        int v72 = 1;
      }
      else
      {
        if (!qword_10007DAE8) {
          qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_48;
        }
      }
    }
    else
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
LABEL_48:
        uint64_t v41 = _os_log_pack_size();
        __chkstk_darwin(v41, v42, v43);
        __error();
        uint64_t v44 = _os_log_pack_fill();
        CFStringRef v45 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
        *(_DWORD *)uint64_t v44 = 138412290;
        *(void *)(v44 + 4) = v45;
        goto LABEL_49;
      }
    }
  }
  CFIndex v4 = v28;
  Default = v73;
  if (!v72) {
    goto LABEL_83;
  }
  if (SCPreferencesCommitChanges(v28))
  {
    if (SCPreferencesApplyChanges(v28))
    {
      if (!qword_10007DAE8) {
        qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v56 = _os_log_pack_size();
        __chkstk_darwin(v56, v57, v58);
        __error();
        uint64_t v59 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v59 = 136315138;
        *(void *)(v59 + 4) = "updateNetworkConfigurationAsync";
        goto LABEL_82;
      }
      goto LABEL_83;
    }
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_83;
    }
  }
  else
  {
    if (!qword_10007DAE8) {
      qword_10007DAE8 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "InterfaceNamer");
    }
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_83;
    }
  }
  uint64_t v66 = _os_log_pack_size();
  __chkstk_darwin(v66, v67, v68);
  __error();
  uint64_t v69 = _os_log_pack_fill();
  int v70 = SCError();
  long long v71 = SCErrorString(v70);
  *(_DWORD *)uint64_t v69 = 136315138;
  *(void *)(v69 + 4) = v71;
LABEL_82:
  __SC_log_send();
  Default = v73;
LABEL_83:
  SCPreferencesUnlock(v28);
LABEL_84:
  CFRelease(Default);
LABEL_85:
  CFRelease(v4);
}

void sub_1000234D8(id a1)
{
  qword_10007DBB0 = (uint64_t)dispatch_queue_create("InterfaceNamerConfigure New Interfaces queue", 0);
}

uint64_t sub_100023538(const __CFDictionary *a1, const __CFDictionary *a2, const __CFArray *a3, const __CFArray *a4, const __CFArray *a5, CFTypeRef *a6)
{
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (!Mutable) {
    sub_1000651D4();
  }
  CFDictionaryRef v198 = a1;
  v208 = 0;
  CFArrayRef v205 = Mutable;
  CFDictionaryRef v192 = a2;
  CFArrayRef v196 = a3;
  sub_100024E0C(Mutable, a2, a3, 0, 0);
  CFTypeID TypeID = CFArrayGetTypeID();
  if (a5)
  {
    if (CFGetTypeID(a5) == TypeID)
    {
      CFIndex Count = CFArrayGetCount(a5);
      if (Count >= 1)
      {
        CFIndex v13 = Count;
        CFIndex v14 = 0;
        int v15 = 150000;
        do
        {
          LODWORD(v214) = 0;
          CFArrayGetValueAtIndex(a5, v14);
          uint64_t v16 = _SC_trimDomain();
          if (v16)
          {
            uint64_t v17 = (const void *)v16;
            LODWORD(v214) = v15;
            uint64_t v18 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            CFDictionarySetValue(v18, kSCPropNetDNSDomainName, v17);
            CFDictionarySetValue(v18, kSCPropNetDNSOptions, @"pdns");
            CFNumberRef v19 = CFNumberCreate(0, kCFNumberIntType, &v214);
            CFDictionarySetValue(v18, kSCPropNetDNSSearchOrder, v19);
            CFRelease(v19);
            if (qword_10007DBE0) {
              CFDictionarySetValue(v18, kSCPropNetDNSServerTimeout, (const void *)qword_10007DBE0);
            }
            sub_100026AA8(v18, (uint64_t)"Private DNS", 0, v14);
            sub_100026B68(v205, v18);
            CFRelease(v18);
            CFRelease(v17);
          }
          ++v14;
          v15 += 200;
        }
        while (v13 != v14);
      }
    }
  }
  if (v198
    && (Value = CFDictionaryGetValue(v198, kSCPropNetDNSServerAddresses), CFTypeID v21 = CFArrayGetTypeID(), Value)
    && CFGetTypeID(Value) == v21
    && CFArrayGetCount((CFArrayRef)Value))
  {
    LODWORD(v214) = 200000;
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, v198);
    int v23 = 0;
  }
  else
  {
    LODWORD(v214) = 200000;
    MutableCFArrayRef Copy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    int v23 = 1;
  }
  if (!MutableCopy) {
    sub_100065200();
  }
  uint64_t v24 = CFDictionaryGetValue(MutableCopy, kSCPropNetDNSSearchOrder);
  CFTypeID v25 = CFNumberGetTypeID();
  int v201 = v23;
  if (v24 && CFGetTypeID(v24) == v25 && CFNumberGetValue((CFNumberRef)v24, kCFNumberSInt32Type, &v214))
  {
    int v197 = 0;
  }
  else
  {
    LODWORD(v214) = 200000;
    CFNumberRef v26 = CFNumberCreate(0, kCFNumberIntType, &v214);
    CFDictionarySetValue(MutableCopy, kSCPropNetDNSSearchOrder, v26);
    CFRelease(v26);
    int v197 = 1;
  }
  v199 = sub_100026E8C(MutableCopy, v205);
  sub_100026AA8(MutableCopy, (uint64_t)"Default", 0, 0);
  sub_100026B68(v205, MutableCopy);
  CFRelease(MutableCopy);
  CFTypeID v27 = CFArrayGetTypeID();
  if (a4)
  {
    if (CFGetTypeID(a4) == v27)
    {
      CFIndex v28 = CFArrayGetCount(a4);
      if (v28 >= 1)
      {
        CFIndex v29 = v28;
        CFIndex v30 = 0;
        int v31 = 300000;
        do
        {
          LODWORD(v214) = 0;
          CFArrayGetValueAtIndex(a4, v30);
          uint64_t v32 = _SC_trimDomain();
          if (v32)
          {
            uint64_t v33 = (const void *)v32;
            LODWORD(v214) = v31;
            uint64_t v34 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            CFDictionarySetValue(v34, kSCPropNetDNSDomainName, v33);
            CFDictionarySetValue(v34, kSCPropNetDNSOptions, @"mdns");
            CFNumberRef v35 = CFNumberCreate(0, kCFNumberIntType, &v214);
            CFDictionarySetValue(v34, kSCPropNetDNSSearchOrder, v35);
            CFRelease(v35);
            if (qword_10007DBD8) {
              CFDictionarySetValue(v34, kSCPropNetDNSServerTimeout, (const void *)qword_10007DBD8);
            }
            sub_100026AA8(v34, (uint64_t)"Multicast DNS", 0, v30);
            sub_100026B68(v205, v34);
            CFRelease(v34);
            CFRelease(v33);
          }
          ++v30;
          v31 += 200;
        }
        while (v29 != v30);
      }
    }
  }
  CFTypeID v36 = CFDictionaryGetTypeID();
  CFDictionaryRef v37 = v192;
  if (v192)
  {
    if (CFGetTypeID(v192) == v36)
    {
      CFIndex v38 = CFDictionaryGetCount(v192);
      if (v38)
      {
        uint64_t v39 = v38;
        CFTypeID v40 = CFArrayGetTypeID();
        if (v196 && CFGetTypeID(v196) == v40)
        {
          uint64_t v41 = CFArrayGetCount(v196);
          if (v41 >= 1)
          {
            CFMutableArrayRef v42 = CFArrayCreateMutableCopy(0, 0, v196);
            goto LABEL_41;
          }
        }
        else
        {
          uint64_t v41 = 0;
        }
        CFMutableArrayRef v42 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
LABEL_41:
        CFArrayRef v43 = v42;
        long long v228 = 0u;
        long long v229 = 0u;
        long long v226 = 0u;
        long long v227 = 0u;
        long long v224 = 0u;
        long long v225 = 0u;
        long long v222 = 0u;
        long long v223 = 0u;
        long long v220 = 0u;
        long long v221 = 0u;
        long long v218 = 0u;
        long long v219 = 0u;
        long long v216 = 0u;
        long long v217 = 0u;
        long long v214 = 0u;
        long long v215 = 0u;
        if (v39 < 33)
        {
          uint64_t v44 = (const void **)&v214;
          CFDictionaryGetKeysAndValues(v192, (const void **)&v214, 0);
          if (v39 < 1)
          {
LABEL_50:
            v195 = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
            if (v41 >= 1)
            {
              CFIndex v47 = 0;
              v194 = (const void *)kSCPropNetDNSServiceIdentifier;
              do
              {
                CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v43, v47);
                CFDictionaryRef v49 = (const __CFDictionary *)CFDictionaryGetValue(v192, ValueAtIndex);
                CFTypeID v50 = CFDictionaryGetTypeID();
                if (v49)
                {
                  if (CFGetTypeID(v49) == v50)
                  {
                    CFDictionaryRef v51 = (const __CFDictionary *)CFDictionaryGetValue(v49, kSCEntNetDNS);
                    CFTypeID v52 = CFDictionaryGetTypeID();
                    if (v51)
                    {
                      if (CFGetTypeID(v51) == v52)
                      {
                        CFArrayRef v53 = (const __CFArray *)CFDictionaryGetValue(v51, kSCPropNetDNSServerAddresses);
                        CFTypeID v54 = CFArrayGetTypeID();
                        if (v53)
                        {
                          if (CFGetTypeID(v53) == v54)
                          {
                            if (CFArrayGetCount(v53))
                            {
                              uint64_t v55 = CFDictionaryGetValue(v51, kSCPropInterfaceName);
                              if (v55)
                              {
                                uint64_t v56 = v55;
                                if (!CFEqual(v55, @"*")
                                  && !CFDictionaryContainsKey(v51, v194)
                                  && !CFSetContainsValue(v195, v56))
                                {
                                  CFSetSetValue(v195, v56);
                                  if (_SC_cfstring_to_cstring())
                                  {
                                    if (sub_10002B79C((uint64_t)&v210))
                                    {
                                      CFDictionaryRef v57 = CFDictionaryCreateMutableCopy(0, 0, v51);
                                      uint64_t v58 = sub_100026E8C(v57, 0);
                                      if (v58)
                                      {
                                        uint64_t v59 = v58;
                                        CFDictionarySetValue(v57, kSCPropNetDNSSearchDomains, v58);
                                        CFRelease(v59);
                                      }
                                      int v60 = sub_10002693C(v49, 0);
                                      if (v60)
                                      {
                                        sub_100025C20(v57, v60 | 0x1000);
                                        CFDictionaryRemoveValue(v57, kSCPropNetDNSSupplementalMatchDomains);
                                        CFDictionaryRemoveValue(v57, kSCPropNetDNSSupplementalMatchOrders);
                                        sub_100026AA8(v57, (uint64_t)"Scoped", ValueAtIndex, 0);
                                        sub_100026B68(v205, v57);
                                        sub_100024E0C(v205, v192, v196, v56, v49);
                                      }
                                      CFRelease(v57);
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                ++v47;
              }
              while (v41 != v47);
            }
            CFRelease(v195);
            CFRelease(v43);
            CFDictionaryRef v37 = v192;
            goto LABEL_73;
          }
        }
        else
        {
          uint64_t v44 = (const void **)CFAllocatorAllocate(0, 8 * v39, 0);
          CFDictionaryGetKeysAndValues(v192, v44, 0);
        }
        for (uint64_t i = 0; i != v39; ++i)
        {
          uint64_t v46 = v44[i];
          v230.location = 0;
          v230.length = v41;
          if (!CFArrayContainsValue(v43, v230, v46))
          {
            CFArrayAppendValue(v43, v46);
            ++v41;
          }
        }
        if (v44 != (const void **)&v214) {
          CFAllocatorDeallocate(0, v44);
        }
        goto LABEL_50;
      }
    }
  }
LABEL_73:
  CFArrayRef v61 = v205;
  sub_1000254F0(v205, v37);
  uint64_t v62 = CFArrayGetCount(v205);
  if (v62 < 2)
  {
    int v64 = v197;
  }
  else
  {
    v231.location = 0;
    v231.length = v62;
    CFArraySortValues(v205, v231, (CFComparatorFunction)sub_10002593C, 0);
    unint64_t v63 = v62 + 1;
    int v64 = v197;
    do
    {
      CFDictionaryRef v65 = (const __CFDictionary *)CFArrayGetValueAtIndex(v205, v63 - 2);
      if (!CFDictionaryContainsKey(v65, kSCPropNetDNSDomainName)
        && !CFDictionaryContainsKey(v65, kSCPropNetDNSSearchDomains)
        && !CFDictionaryContainsKey(v65, kSCPropNetDNSServerAddresses))
      {
        CFArrayRemoveValueAtIndex(v205, v63 - 2);
        --v62;
      }
      --v63;
    }
    while (v63 > 2);
  }
  CFDictionaryRef v66 = (const __CFDictionary *)CFArrayGetValueAtIndex(v205, 0);
  uint64_t v67 = CFDictionaryCreateMutableCopy(0, 0, v66);
  uint64_t v68 = v67;
  if (v199)
  {
    CFDictionarySetValue(v67, kSCPropNetDNSSearchDomains, v199);
    CFRelease(v199);
  }
  if (v62 > 1) {
    int v69 = v64;
  }
  else {
    int v69 = 0;
  }
  if (v69 == 1)
  {
    CFDictionaryRef v70 = (const __CFDictionary *)CFArrayGetValueAtIndex(v205, 1);
    if (CFDictionaryContainsKey(v70, kSCPropNetDNSDomainName)
      || v70
      && (LODWORD(v210) = 0,
          *(void *)&long long v214 = 0,
          CFDictionaryGetValueIfPresent(v70, @"__FLAGS__", (const void **)&v214))
      && (void)v214
      && CFNumberGetValue((CFNumberRef)v214, kCFNumberSInt32Type, &v210)
      && (v210 & 0x1000) != 0)
    {
      CFDictionaryRemoveValue(v68, kSCPropNetDNSSearchOrder);
    }
  }
  CFArraySetValueAtIndex(v205, 0, v68);
  CFRelease(v68);
  if (v62 < 2) {
    int v71 = v201;
  }
  else {
    int v71 = 0;
  }
  if (v71 == 1)
  {
    v208 = 0;
    goto LABEL_208;
  }
  unsigned int v207 = 0;
  v208 = sub_1000286D0();
  if (v62 >= 1)
  {
    CFIndex v72 = 0;
    int v202 = 0;
    v193 = (const void *)kSCPropNetDNSServiceIdentifier;
    while (1)
    {
      v206 = 0;
      CFDictionaryRef v73 = (const __CFDictionary *)CFArrayGetValueAtIndex(v61, v72);
      CFDictionaryRef v74 = v73;
      if (v73
        && (LODWORD(v210) = 0,
            *(void *)&long long v214 = 0,
            CFDictionaryGetValueIfPresent(v73, @"__FLAGS__", (const void **)&v214))
        && (void)v214
        && CFNumberGetValue((CFNumberRef)v214, kCFNumberSInt32Type, &v210)
        && ((~v210 & 6) == 0 || (v210 & 0x3000) != 0))
      {
        char v75 = 1;
      }
      else
      {
        if (!v202) {
          CFDictionaryApplyFunction(v192, (CFDictionaryApplierFunction)sub_100025BAC, &v207);
        }
        CFDictionaryRef v74 = CFDictionaryCreateMutableCopy(0, 0, v74);
        sub_100025C20(v74, v207);
        char v75 = 0;
        int v202 = 1;
      }
      if (a6 && !v72) {
        *a6 = CFRetain(v74);
      }
      v209 = sub_100028D98();
      CFStringRef v76 = (const __CFString *)CFDictionaryGetValue(v74, kSCPropNetDNSDomainName);
      CFTypeID v77 = CFStringGetTypeID();
      if (v76 && CFGetTypeID(v76) == v77 && CFStringGetLength(v76) >= 1 && _SC_cfstring_to_cstring()) {
        sub_10002920C((void **)&v209, (char *)&v214);
      }
      CFArrayRef v78 = (const __CFArray *)CFDictionaryGetValue(v74, kSCPropNetDNSSearchDomains);
      CFTypeID v79 = CFArrayGetTypeID();
      if (v78)
      {
        if (CFGetTypeID(v78) == v79)
        {
          CFIndex v80 = CFArrayGetCount(v78);
          if (v80 >= 1)
          {
            CFIndex v81 = v80;
            for (CFIndex j = 0; j != v81; ++j)
            {
              CFStringRef v83 = (const __CFString *)CFArrayGetValueAtIndex(v78, j);
              CFTypeID v84 = CFStringGetTypeID();
              if (v83 && CFGetTypeID(v83) == v84 && CFStringGetLength(v83) >= 1 && _SC_cfstring_to_cstring()) {
                sub_100029078((void **)&v209, (char *)&v214);
              }
            }
          }
        }
      }
      long long v85 = CFDictionaryGetValue(v74, @"__IF_INDEX__");
      CFTypeID v86 = CFNumberGetTypeID();
      if (v85
        && CFGetTypeID(v85) == v86
        && (LODWORD(v210) = 0, CFNumberGetValue((CFNumberRef)v85, kCFNumberIntType, &v210)))
      {
        if (v210)
        {
          v87 = (char *)sub_10002B5F8(v210, (uint64_t)&v214);
          if (v87)
          {
            CFStringRef v204 = CFStringCreateWithCString(0, v87, 0x600u);
            unsigned int v88 = v210;
            int v89 = v210;
          }
          else
          {
            CFStringRef v204 = 0;
            int v89 = 0;
            unsigned int v88 = v210;
          }
        }
        else
        {
          unsigned int v88 = 0;
          CFStringRef v204 = 0;
          int v89 = 0;
          v87 = 0;
        }
        sub_10002928C((void **)&v209, v88, v87);
      }
      else
      {
        CFStringRef v204 = 0;
        int v89 = 0;
      }
      CFNumberRef v90 = (const __CFNumber *)CFDictionaryGetValue(v74, @"__FLAGS__");
      CFTypeID v91 = CFNumberGetTypeID();
      if (v90)
      {
        if (CFGetTypeID(v90) == v91)
        {
          LODWORD(v214) = 0;
          if (CFNumberGetValue(v90, kCFNumberSInt32Type, &v214)) {
            sub_100029024((uint64_t)&v209, v214);
          }
        }
      }
      CFArrayRef v92 = (const __CFArray *)CFDictionaryGetValue(v74, kSCPropNetDNSServerAddresses);
      CFTypeID v93 = CFArrayGetTypeID();
      if (v92)
      {
        if (CFGetTypeID(v92) == v93)
        {
          CFIndex v94 = CFArrayGetCount(v92);
          if (v94 >= 1)
          {
            CFIndex v95 = v94;
            for (CFIndex k = 0; k != v95; ++k)
            {
              uint64_t v210 = 0;
              uint64_t v211 = 0;
              int v213 = 0;
              uint64_t v212 = 0;
              v97 = CFArrayGetValueAtIndex(v92, k);
              CFTypeID v98 = CFStringGetTypeID();
              if (v97 && CFGetTypeID(v97) == v98 && _SC_cfstring_to_cstring() && _SC_string_to_sockaddr())
              {
                if (BYTE1(v210) == 30 && v211 == 254 && (BYTE1(v211) & 0xC0) == 0x80 && !v213 && v89) {
                  int v213 = v89;
                }
                sub_100028E00((void **)&v209, (unsigned __int8 *)&v210);
              }
            }
          }
        }
      }
      CFNumberRef v99 = (const __CFNumber *)CFDictionaryGetValue(v74, kSCPropNetDNSSearchOrder);
      CFTypeID v100 = CFNumberGetTypeID();
      if (v99)
      {
        if (CFGetTypeID(v99) == v100)
        {
          LODWORD(v214) = 0;
          if (CFNumberGetValue(v99, kCFNumberSInt32Type, &v214)) {
            sub_1000293C4((uint64_t)&v209, v214);
          }
        }
      }
      CFArrayRef v101 = (const __CFArray *)CFDictionaryGetValue(v74, kSCPropNetDNSSortList);
      CFTypeID v102 = CFArrayGetTypeID();
      if (v101)
      {
        if (CFGetTypeID(v101) == v102)
        {
          CFIndex v103 = CFArrayGetCount(v101);
          if (v103 >= 1) {
            break;
          }
        }
      }
LABEL_176:
      CFNumberRef v112 = (const __CFNumber *)CFDictionaryGetValue(v74, kSCPropNetDNSServerPort);
      CFTypeID v113 = CFNumberGetTypeID();
      CFArrayRef v61 = v205;
      if (v112)
      {
        if (CFGetTypeID(v112) == v113)
        {
          LODWORD(v214) = 0;
          if (CFNumberGetValue(v112, kCFNumberIntType, &v214)) {
            sub_100029418((uint64_t)&v209, (unsigned __int16)v214);
          }
        }
      }
      CFNumberRef v114 = (const __CFNumber *)CFDictionaryGetValue(v74, kSCPropNetDNSServerTimeout);
      CFTypeID v115 = CFNumberGetTypeID();
      if (v114)
      {
        if (CFGetTypeID(v114) == v115)
        {
          LODWORD(v214) = 0;
          if (CFNumberGetValue(v114, kCFNumberIntType, &v214)) {
            sub_10002946C((uint64_t)&v209, v214);
          }
        }
      }
      v116 = CFDictionaryGetValue(v74, kSCPropNetDNSOptions);
      CFTypeID v117 = CFStringGetTypeID();
      if (v116)
      {
        if (CFGetTypeID(v116) == v117)
        {
          v118 = (char *)_SC_cfstring_to_cstring();
          if (v118)
          {
            v119 = v118;
            sub_100029344((void **)&v209, v118);
            CFAllocatorDeallocate(0, v119);
          }
        }
      }
      CFNumberRef v120 = (const __CFNumber *)CFDictionaryGetValue(v74, v193);
      CFTypeID v121 = CFNumberGetTypeID();
      if (v120)
      {
        if (CFGetTypeID(v120) == v121)
        {
          LODWORD(v214) = 0;
          if (CFNumberGetValue(v120, kCFNumberIntType, &v214)) {
            sub_1000294C0((uint64_t)&v209, v214);
          }
        }
      }
      CFStringRef v122 = (const __CFString *)CFDictionaryGetValue(v74, @"__CONFIGURATION_ID__");
      CFTypeID v123 = CFStringGetTypeID();
      if (v122)
      {
        if (CFGetTypeID(v122) == v123 && CFStringGetLength(v122) >= 1)
        {
          v124 = (char *)_SC_cfstring_to_cstring();
          if (v124)
          {
            v125 = v124;
            sub_10002918C((void **)&v209, v124);
            CFAllocatorDeallocate(0, v125);
          }
        }
      }
      if (v204) {
        CFRelease(v204);
      }
      v206 = v209;
      sub_100028750((void **)&v208, v209);
      sub_100028D38(&v206);
      if ((v75 & 1) == 0) {
        CFRelease(v74);
      }
      if (++v72 == v62) {
        goto LABEL_207;
      }
    }
    CFIndex v104 = v103;
    CFIndex v105 = 0;
    while (1)
    {
      uint64_t v210 = 0;
      v106 = CFArrayGetValueAtIndex(v101, v105);
      CFTypeID v107 = CFStringGetTypeID();
      if (!v106 || CFGetTypeID(v106) != v107 || !_SC_cfstring_to_cstring()) {
        goto LABEL_175;
      }
      v108 = strchr((char *)&v214, 47);
      if (v108) {
        break;
      }
      uint64_t v210 = 0;
      if (inet_aton((const char *)&v214, (in_addr *)&v210) == 1)
      {
        unsigned int v110 = bswap32(v210);
        if ((v110 & 0x80000000) == 0)
        {
          unsigned int v111 = -16777216;
          goto LABEL_173;
        }
        if (v110 >> 30 == 2)
        {
          unsigned int v111 = -65536;
          goto LABEL_173;
        }
        if (v110 >> 29 == 6)
        {
          unsigned int v111 = -256;
LABEL_173:
          HIDWORD(v210) = bswap32(v111);
LABEL_174:
          sub_100029110((void **)&v209, &v210);
        }
      }
LABEL_175:
      if (v104 == ++v105) {
        goto LABEL_176;
      }
    }
    v109 = v108;
    char *v108 = 0;
    uint64_t v210 = 0;
    if (inet_aton((const char *)&v214, (in_addr *)&v210) != 1 || inet_aton(v109 + 1, (in_addr *)&v210 + 1) != 1) {
      goto LABEL_175;
    }
    goto LABEL_174;
  }
LABEL_207:
  sub_100029514(v207);
  sub_100029564((void **)&v208);
LABEL_208:
  sub_100028C44((uint64_t *)&v208, (unsigned __int8 *)&v214, 0x20uLL);
  if ((void)v214 == (void)xmmword_10007DBB8
    && *((void *)&v214 + 1) == *((void *)&xmmword_10007DBB8 + 1)
    && (void)v215 == qword_10007DBC8
    && *((void *)&v215 + 1) == unk_10007DBD0)
  {
    uint64_t v184 = 0;
  }
  else
  {
    xmmword_10007DBB8 = v214;
    *(_OWORD *)&qword_10007DBC8 = v215;
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v129 = _os_log_pack_size();
      __chkstk_darwin(v129, v130, v131);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    if (v208)
    {
      v132 = sub_100025D18(v208, bswap32(v208[12]) + 56);
      if (v132)
      {
        v133 = v132;
        unsigned int v134 = *((_DWORD *)v132 + 12);
        unsigned int v135 = bswap32(*((_DWORD *)v132 + 13));
        unsigned int v136 = bswap32(*(_DWORD *)v132);
        *(_DWORD *)v132 = v136;
        if (v135 >= 8 * v136)
        {
          unsigned int v137 = bswap32(v134);
          unsigned int v138 = 8 * v136;
          uint64_t v139 = 8 * v136 ? (uint64_t)&v132[v137 + 56] : 0;
          unsigned int v140 = v135 - v138;
          *(void *)(v132 + 4) = v139;
          unsigned int v141 = bswap32(*((_DWORD *)v132 + 3));
          *((_DWORD *)v132 + 3) = v141;
          if (v140 >= 8 * v141)
          {
            unsigned int v142 = 8 * v141;
            uint64_t v143 = (uint64_t)&v132[v137 + 56 + v138];
            uint64_t v144 = v142 ? v143 : 0;
            unsigned int v145 = v140 - v142;
            *((void *)v132 + 2) = v144;
            unsigned int v146 = bswap32(*((_DWORD *)v132 + 8));
            *((_DWORD *)v132 + 8) = v146;
            if (v145 >= 8 * v146)
            {
              unsigned int v147 = 8 * v146;
              uint64_t v148 = v143 + v142;
              if (8 * v146) {
                uint64_t v149 = v143 + v142;
              }
              else {
                uint64_t v149 = 0;
              }
              *(void *)(v132 + 36) = v149;
              if (v137 >= 8)
              {
                int v150 = 0;
                int v151 = 0;
                int v152 = 0;
                v153 = v132 + 56;
                unsigned int v154 = v145 - v147;
                uint64_t v155 = v148 + v147;
                while (1)
                {
                  unsigned int v156 = bswap32(*((_DWORD *)v153 + 1));
                  unsigned int v157 = bswap32(*(_DWORD *)v153);
                  if (v157 - 1 <= 2)
                  {
                    if (v156 - 8 < 0x64) {
                      goto LABEL_296;
                    }
                    *((void *)v153 + 1) = 0;
                    unsigned int v158 = bswap32(*((_DWORD *)v153 + 4));
                    *((_DWORD *)v153 + 4) = v158;
                    if (v154 < 8 * v158) {
                      goto LABEL_296;
                    }
                    unsigned int v159 = 8 * v158;
                    uint64_t v160 = 8 * v158 ? v155 : 0;
                    unsigned int v161 = v154 - v159;
                    *(void *)(v153 + 20) = v160;
                    *((_WORD *)v153 + 14) = bswap32(*((unsigned __int16 *)v153 + 14)) >> 16;
                    unsigned int v162 = bswap32(*((_DWORD *)v153 + 8));
                    *((_DWORD *)v153 + 8) = v162;
                    if (v161 < 8 * v162) {
                      goto LABEL_296;
                    }
                    unsigned int v163 = 8 * v162;
                    uint64_t v164 = v155 + v159;
                    uint64_t v165 = 8 * v162 ? v164 : 0;
                    unsigned int v166 = v161 - v163;
                    *(void *)(v153 + 36) = v165;
                    unsigned int v167 = bswap32(*((_DWORD *)v153 + 11));
                    *((_DWORD *)v153 + 11) = v167;
                    if (v161 - v163 < 8 * v167) {
                      goto LABEL_296;
                    }
                    unsigned int v168 = 8 * v167;
                    uint64_t v169 = v164 + v163;
                    uint64_t v170 = 8 * v167 ? v169 : 0;
                    *((void *)v153 + 6) = v170;
                    *((void *)v153 + 7) = 0;
                    *((int8x16_t *)v153 + 4) = vrev32q_s8(*((int8x16_t *)v153 + 4));
                    *((int8x8_t *)v153 + 10) = vrev32_s8(*(int8x8_t *)(v153 + 80));
                    unsigned int v171 = v156 - 108;
                    if (v156 - 108 != bswap32(*((_DWORD *)v153 + 26))) {
                      goto LABEL_296;
                    }
                    v172 = v153 + 8;
                    if (v171 < 8)
                    {
                      int v175 = 0;
                      int v174 = 0;
                      int v173 = 0;
                    }
                    else
                    {
                      int v173 = 0;
                      int v174 = 0;
                      int v175 = 0;
                      v176 = (unsigned int *)(v153 + 108);
                      do
                      {
                        unsigned int v177 = v176[1];
                        switch(bswap32(*v176))
                        {
                          case 0xAu:
                            void *v172 = v176 + 2;
                            break;
                          case 0xBu:
                            uint64_t v178 = *(void *)(v153 + 20);
                            if (!v178) {
                              goto LABEL_296;
                            }
                            *(void *)(v178 + 8 * v175++) = v176 + 2;
                            break;
                          case 0xCu:
                            uint64_t v179 = *(void *)(v153 + 36);
                            if (!v179) {
                              goto LABEL_296;
                            }
                            *(void *)(v179 + 8 * v174++) = v176 + 2;
                            break;
                          case 0xDu:
                            uint64_t v180 = *((void *)v153 + 6);
                            if (!v180) {
                              goto LABEL_296;
                            }
                            *(void *)(v180 + 8 * v173++) = v176 + 2;
                            break;
                          case 0xEu:
                            *((void *)v153 + 7) = v176 + 2;
                            break;
                          case 0xFu:
                            *((void *)v153 + 11) = v176 + 2;
                            break;
                          case 0x10u:
                            *((void *)v153 + 12) = v176 + 2;
                            break;
                          default:
                            break;
                        }
                        unsigned int v181 = bswap32(v177);
                        v176 = (unsigned int *)((char *)v176 + v181);
                        v171 -= v181;
                      }
                      while (v171 > 7);
                    }
                    if (v175 != v158 || v174 != v162 || v173 != v167) {
                      goto LABEL_296;
                    }
                    uint64_t v155 = v169 + v168;
                    unsigned int v154 = v166 - v168;
                    switch(v157)
                    {
                      case 3u:
                        uint64_t v182 = *(void *)(v133 + 36);
                        if (!v182) {
                          goto LABEL_296;
                        }
                        int v183 = v150++;
                        goto LABEL_279;
                      case 2u:
                        uint64_t v182 = *((void *)v133 + 2);
                        if (!v182) {
                          goto LABEL_296;
                        }
                        int v183 = v151++;
                        goto LABEL_279;
                      case 1u:
                        uint64_t v182 = *(void *)(v133 + 4);
                        if (!v182) {
                          goto LABEL_296;
                        }
                        int v183 = v152++;
LABEL_279:
                        *(void *)(v182 + 8 * v183) = v172;
                        break;
                    }
                  }
                  v153 += v156;
                  v137 -= v156;
                  if (v137 <= 7)
                  {
                    unsigned int v136 = *(_DWORD *)v133;
                    goto LABEL_292;
                  }
                }
              }
              int v152 = 0;
              int v151 = 0;
              int v150 = 0;
LABEL_292:
              if (v152 == v136 && v151 == *((_DWORD *)v133 + 3) && v150 == *((_DWORD *)v133 + 8)) {
                sub_10002601C((int *)v133);
              }
            }
          }
        }
LABEL_296:
        free(v133);
      }
    }
    else
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v185 = _os_log_pack_size();
        __chkstk_darwin(v185, v186, v187);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
    }
    if ((sub_10002A234((CFDataRef *)&v208) & 1) != 0
      || (sub_10000620C(), _SC_syslog_os_log_mapping(), !__SC_log_enabled()))
    {
      uint64_t v184 = 1;
    }
    else
    {
      uint64_t v188 = _os_log_pack_size();
      __chkstk_darwin(v188, v189, v190);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
      uint64_t v184 = 1;
    }
  }
  if (v208) {
    sub_100028D38((void **)&v208);
  }
  CFRelease(v61);
  return v184;
}

void sub_100024E0C(const __CFArray *a1, const __CFDictionary *a2, const __CFArray *a3, const void *a4, const __CFDictionary *a5)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      CFIndex Count = CFDictionaryGetCount(a2);
      if (Count)
      {
        uint64_t v12 = Count;
        CFArrayRef v55 = a1;
        unint64_t v58 = (unint64_t)a4;
        if (Count < 33)
        {
          CFIndex v13 = (const void **)v61;
          CFIndex v14 = (const void **)v60;
        }
        else
        {
          CFIndex v13 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
          CFIndex v14 = (const void **)CFAllocatorAllocate(0, 8 * v12, 0);
        }
        CFTypeID v15 = CFArrayGetTypeID();
        CFDictionaryRef v54 = a5;
        if (a3 && CFGetTypeID(a3) == v15) {
          uint64_t range = CFArrayGetCount(a3);
        }
        else {
          uint64_t range = 0;
        }
        memset(v61, 0, 256);
        memset(v60, 0, sizeof(v60));
        CFDictionaryGetKeysAndValues(a2, v13, v14);
        if (v12 >= 1)
        {
          uint64_t v16 = 0;
          if (a4) {
            uint64_t v17 = "Supplemental/Scoped";
          }
          else {
            uint64_t v17 = "Supplemental";
          }
          uint64_t v49 = (uint64_t)v17;
          CFArrayRef v56 = a3;
          while (1)
          {
            uint64_t v18 = v14[v16];
            CFStringRef v19 = (const __CFString *)v13[v16];
            CFTypeID v20 = CFDictionaryGetTypeID();
            if (!v18) {
              goto LABEL_74;
            }
            if (CFGetTypeID(v18) != v20) {
              goto LABEL_74;
            }
            CFTypeID v21 = CFDictionaryGetValue((CFDictionaryRef)v18, kSCEntNetDNS);
            CFTypeID v22 = CFDictionaryGetTypeID();
            if (!v21 || CFGetTypeID(v21) != v22) {
              goto LABEL_74;
            }
            unint64_t v23 = (unint64_t)CFDictionaryGetValue((CFDictionaryRef)v21, kSCPropInterfaceName);
            if (a4)
            {
              if (CFDictionaryContainsKey((CFDictionaryRef)v18, kSCEntNetIPv4)
                || CFDictionaryContainsKey((CFDictionaryRef)v18, kSCEntNetIPv6)
                || (__CFString *)v23 != @"*"
                && (!v23
                 || !CFEqual((CFTypeRef)v23, @"*") && (const void *)v23 != a4 && !CFEqual((CFTypeRef)v23, a4)))
              {
                goto LABEL_74;
              }
              int v24 = sub_10002693C(v54, 0);
              if (!v24) {
                goto LABEL_74;
              }
            }
            else
            {
              int v24 = 0;
            }
            int v52 = v24;
            int v25 = 200 * v16 + 100000;
            v26.length = range;
            if (range >= 1)
            {
              v26.location = 0;
              int v27 = CFArrayContainsValue(a3, v26, v13[v16]);
              int v28 = 200 * v12;
              if (v27) {
                int v28 = 0;
              }
              v25 += v28;
            }
            if (v58 | v23) {
              break;
            }
            CFDictionaryRef v29 = (const __CFDictionary *)CFRetain(v21);
            int v30 = 0x4000;
LABEL_48:
            sub_100025C20(v29, v30);
            LODWORD(value) = v25;
            CFArrayRef v35 = (const __CFArray *)CFDictionaryGetValue(v29, kSCPropNetDNSSupplementalMatchDomains);
            CFTypeID v36 = CFArrayGetTypeID();
            a4 = (const void *)v58;
            if (v35)
            {
              if (CFGetTypeID(v35) == v36)
              {
                CFIndex v53 = CFArrayGetCount(v35);
                if (v53)
                {
                  CFArrayRef cf = (const __CFArray *)CFDictionaryGetValue(v29, kSCPropNetDNSSupplementalMatchOrders);
                  if (!cf || (CFTypeID v37 = CFArrayGetTypeID(), CFGetTypeID(cf) == v37) && v53 == CFArrayGetCount(cf))
                  {
                    CFArrayRef v38 = (const __CFArray *)CFDictionaryGetValue(v29, kSCPropNetDNSServerAddresses);
                    CFTypeID v39 = CFArrayGetTypeID();
                    if (v38)
                    {
                      if (CFGetTypeID(v38) == v39)
                      {
                        CFIndex v40 = CFArrayGetCount(v38);
                        if (v53 >= 1)
                        {
                          if (v40)
                          {
                            CFIndex v41 = 0;
                            CFDictionaryRef theDicta = v29;
                            while (2)
                            {
                              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v35, v41);
                              CFTypeID v43 = CFStringGetTypeID();
                              if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v43) {
                                goto LABEL_72;
                              }
                              MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, theDicta);
                              if (CFStringGetLength(ValueAtIndex) < 1) {
                                CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSDomainName);
                              }
                              else {
                                CFDictionarySetValue(MutableCopy, kSCPropNetDNSDomainName, ValueAtIndex);
                              }
                              if (cf)
                              {
                                CFStringRef v45 = CFArrayGetValueAtIndex(cf, v41);
                                CFTypeID v46 = CFNumberGetTypeID();
                                if (v45 && CFGetTypeID(v45) == v46)
                                {
                                  CFDictionarySetValue(MutableCopy, kSCPropNetDNSSearchOrder, v45);
                                  goto LABEL_71;
                                }
                              }
                              else
                              {
                                CFNumberGetTypeID();
                              }
                              if (!CFDictionaryContainsKey(MutableCopy, kSCPropNetDNSSearchOrder))
                              {
                                CFNumberRef v47 = CFNumberCreate(0, kCFNumberIntType, &value);
                                CFDictionarySetValue(MutableCopy, kSCPropNetDNSSearchOrder, v47);
                                CFRelease(v47);
                                LODWORD(value) = value + 1;
                              }
LABEL_71:
                              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchDomains);
                              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchOrders);
                              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSearchDomains);
                              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSortList);
                              sub_100026AA8(MutableCopy, v49, v19, v41);
                              sub_100026B68(v55, MutableCopy);
                              CFRelease(MutableCopy);
LABEL_72:
                              ++v41;
                              CFDictionaryRef v29 = theDicta;
                              if (v53 == v41) {
                                break;
                              }
                              continue;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            CFRelease(v29);
            a3 = v56;
LABEL_74:
            if (++v16 == v12) {
              goto LABEL_75;
            }
          }
          int theDict = v25;
          value = 0;
          int v31 = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v21);
          uint64_t v32 = v31;
          if (v58)
          {
            CFDictionarySetValue(v31, kSCPropInterfaceName, (const void *)v58);
            int v30 = v52 | 0x5000;
          }
          else
          {
            if (!v23
              || !CFDictionaryGetValueIfPresent((CFDictionaryRef)v21, @"__SCOPED_QUERY__", (const void **)&value)
              || (uint64_t v33 = value, v34 = CFBooleanGetTypeID(), !v33)
              || CFGetTypeID(v33) != v34
              || !CFBooleanGetValue((CFBooleanRef)value))
            {
              CFDictionaryRef v29 = v32;
              CFDictionaryRemoveValue(v32, kSCPropInterfaceName);
              int v30 = 0x4000;
              goto LABEL_47;
            }
            int v30 = sub_10002693C((CFDictionaryRef)v18, 0) | 0x4000;
          }
          CFDictionaryRef v29 = v32;
LABEL_47:
          int v25 = theDict;
          goto LABEL_48;
        }
LABEL_75:
        if (v13 != (const void **)v61)
        {
          CFAllocatorDeallocate(0, v13);
          CFAllocatorDeallocate(0, v14);
        }
      }
    }
  }
}

void sub_1000254F0(const __CFArray *a1, const __CFDictionary *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      CFIndex Count = CFDictionaryGetCount(a2);
      if (Count)
      {
        uint64_t v6 = Count;
        if (Count < 33)
        {
          uint64_t v7 = (const void **)v28;
          uint64_t v8 = (const void **)v27;
        }
        else
        {
          uint64_t v7 = (const void **)CFAllocatorAllocate(kCFAllocatorDefault, 8 * Count, 0);
          uint64_t v8 = (const void **)CFAllocatorAllocate(kCFAllocatorDefault, 8 * v6, 0);
        }
        memset(v28, 0, sizeof(v28));
        memset(v27, 0, sizeof(v27));
        unint64_t v23 = v8;
        int v24 = v7;
        CFDictionaryGetKeysAndValues(a2, v7, v8);
        CFArrayRef Mutable = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
        if (v6 >= 1)
        {
          CFRange v26 = (const void *)kSCPropNetDNSServiceIdentifier;
          int v9 = (CFDictionaryRef *)v23;
          CFArrayRef v22 = a1;
          do
          {
            CFStringRef v10 = (const __CFString *)*v7;
            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*v9, kSCEntNetDNS);
            CFTypeID v12 = CFDictionaryGetTypeID();
            if (Value)
            {
              if (CFGetTypeID(Value) == v12)
              {
                CFIndex v13 = CFDictionaryGetValue(Value, v26);
                CFTypeID v14 = CFNumberGetTypeID();
                if (v13)
                {
                  if (CFGetTypeID(v13) == v14)
                  {
                    if (CFSetContainsValue(Mutable, v13))
                    {
                      sub_10000620C();
                      _SC_syslog_os_log_mapping();
                      if (__SC_log_enabled())
                      {
                        uint64_t v15 = _os_log_pack_size();
                        __chkstk_darwin(v15, v16, v17);
                        __error();
                        *(_WORD *)_os_log_pack_fill() = 0;
                        __SC_log_send();
                        a1 = v22;
                      }
                    }
                    else
                    {
                      CFSetSetValue(Mutable, v13);
                      MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, Value);
                      CFStringRef v19 = sub_100026E8C(MutableCopy, 0);
                      if (v19)
                      {
                        CFTypeID v20 = v19;
                        CFDictionarySetValue(MutableCopy, kSCPropNetDNSSearchDomains, v19);
                        CFRelease(v20);
                      }
                      CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchDomains);
                      CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchOrders);
                      if (CFDictionaryContainsKey(MutableCopy, kSCPropInterfaceName))
                      {
                        CFDictionarySetValue(MutableCopy, @"__SCOPED_QUERY__", kCFBooleanTrue);
                        CFDictionaryRef v21 = CFDictionaryCreateMutableCopy(0, 0, MutableCopy);
                        sub_100025C20(v21, 4102);
                        CFDictionaryRemoveValue(v21, v26);
                        sub_100026AA8(v21, (uint64_t)"Service", v10, 0);
                        sub_100026B68(a1, v21);
                        CFRelease(v21);
                      }
                      sub_100025C20(MutableCopy, 8198);
                      sub_100026AA8(MutableCopy, (uint64_t)"Service", v10, 0);
                      sub_100026B68(a1, MutableCopy);
                      CFRelease(MutableCopy);
                    }
                  }
                }
              }
            }
            ++v7;
            ++v9;
            --v6;
          }
          while (v6);
        }
        CFRelease(Mutable);
        if (v24 != (const void **)v28)
        {
          CFAllocatorDeallocate(kCFAllocatorDefault, v24);
          CFAllocatorDeallocate(kCFAllocatorDefault, v23);
        }
      }
    }
  }
}

uint64_t sub_10002593C(const __CFDictionary *a1, const __CFDictionary *a2)
{
  CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(a1, kSCPropNetDNSDomainName);
  CFStringRef v5 = (const __CFString *)CFDictionaryGetValue(a2, kSCPropNetDNSDomainName);
  if (!v4) {
    return -1;
  }
  CFStringRef v6 = v5;
  if (!v5) {
    return 1;
  }
  if (a1
    && (int valuePtr = 0, value = 0, CFDictionaryGetValueIfPresent(a1, @"__FLAGS__", (const void **)&value))
    && value
    && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
    && (valuePtr & 0x1000) != 0)
  {
    uint64_t v8 = 1;
    int v7 = 1;
    if (!a2) {
      goto LABEL_17;
    }
  }
  else
  {
    int v7 = 0;
    uint64_t v8 = -1;
    if (!a2) {
      goto LABEL_17;
    }
  }
  int valuePtr = 0;
  value = 0;
  if (CFDictionaryGetValueIfPresent(a2, @"__FLAGS__", (const void **)&value)
    && value
    && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
    && (valuePtr & 0x1000) != 0)
  {
    int v9 = 1;
    goto LABEL_18;
  }
LABEL_17:
  int v9 = 0;
LABEL_18:
  if (v7 == v9)
  {
    int HasSuffix = CFStringHasSuffix(v4, @".arpa");
    if (HasSuffix == CFStringHasSuffix(v6, @".arpa"))
    {
      CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v4, @".");
      CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
      CFArrayRef v13 = CFStringCreateArrayBySeparatingStrings(0, v6, @".");
      CFIndex v14 = CFArrayGetCount(v13);
      while (Count >= 1)
      {
        CFIndex v15 = v14 - 1;
        if (v14 < 1) {
          break;
        }
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, Count - 1);
        CFStringRef v17 = (const __CFString *)CFArrayGetValueAtIndex(v13, v15);
        uint64_t v8 = CFStringCompare(ValueAtIndex, v17, 1uLL);
        --Count;
        CFIndex v14 = v15;
        if (v8) {
          goto LABEL_33;
        }
      }
      if (Count <= v14)
      {
        if (Count < v14) {
          uint64_t v8 = 1;
        }
        else {
          uint64_t v8 = sub_100027330(a1, a2);
        }
      }
      else
      {
        uint64_t v8 = -1;
      }
LABEL_33:
      if (ArrayBySeparatingStrings) {
        CFRelease(ArrayBySeparatingStrings);
      }
      if (v13) {
        CFRelease(v13);
      }
    }
    else if (HasSuffix)
    {
      return 1;
    }
    else
    {
      return -1;
    }
  }
  return v8;
}

uint64_t sub_100025BAC(uint64_t a1, const __CFDictionary *a2, _DWORD *a3)
{
  uint64_t result = sub_1000314FC(a2);
  if (!result)
  {
    uint64_t result = sub_10002693C(a2, *a3);
    *a3 = result;
  }
  return result;
}

void sub_100025C20(const __CFDictionary *a1, int a2)
{
  int valuePtr = 0;
  value = 0;
  if (CFDictionaryGetValueIfPresent(a1, @"__FLAGS__", (const void **)&value)
    && (CFStringRef v4 = value, TypeID = CFNumberGetTypeID(), v4)
    && CFGetTypeID(v4) == TypeID)
  {
    int v6 = CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr);
    int v7 = valuePtr;
    if (!v6) {
      int v7 = 0;
    }
  }
  else
  {
    int v7 = 0;
  }
  int valuePtr = v7 | a2;
  value = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFDictionarySetValue(a1, @"__FLAGS__", value);
  CFRelease(value);
}

char *sub_100025D18(unsigned int *a1, size_t a2)
{
  uint64_t v3 = bswap32(a1[12]) + 56;
  if (v3 == a2)
  {
    size_t v5 = bswap32(a1[13]);
    size_t v6 = 0x100000 - a2;
    if (0x100000 - a2 >= v5)
    {
      size_t v17 = v5 + a2;
      if (v5 + a2 <= 0x100000)
      {
        CFIndex v15 = (char *)malloc_type_malloc(v5 + a2, 0x158E9C56uLL);
        memcpy(v15, a1, a2);
        bzero(&v15[a2], v5);
        return v15;
      }
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v18 = _os_log_pack_size();
        __chkstk_darwin(v18, v19, v20);
        __error();
        uint64_t v21 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v21 = 134218240;
        *(void *)(v21 + 4) = v17;
        *(_WORD *)(v21 + 12) = 1024;
        *(_DWORD *)(v21 + 14) = 0x100000;
        __SC_log_send();
      }
    }
    else
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v7 = _os_log_pack_size();
        __chkstk_darwin(v7, v8, v9);
        __error();
        uint64_t v10 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v10 = 67109376;
        *(_DWORD *)(v10 + 4) = v5;
        *(_WORD *)(v10 + 8) = 2048;
        *(void *)(v10 + 10) = v6;
LABEL_7:
        __SC_log_send();
      }
    }
  }
  else
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11, v12, v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 134218240;
      *(void *)(v14 + 4) = v3;
      *(_WORD *)(v14 + 12) = 2048;
      *(void *)(v14 + 14) = a2;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_10002601C(int *a1)
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3, v4, v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v6 + 4) = "DNS configuration";
    uint64_t result = __SC_log_send();
  }
  if (*a1 >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(uint64_t **)(*(void *)(a1 + 1) + 8 * v7++);
      uint64_t result = sub_100027504(a1[11], v8, v7);
    }
    while (v7 < *a1);
  }
  if (a1[3] >= 1 && *((void *)a1 + 2))
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9, v10, v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v12 = 136315138;
      *(void *)(v12 + 4) = "";
      __SC_log_send();
    }
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13, v14, v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 136315138;
      *(void *)(v16 + 4) = "DNS configuration (for scoped queries)";
      uint64_t result = __SC_log_send();
    }
    if (a1[3] >= 1)
    {
      uint64_t v17 = 0;
      do
      {
        uint64_t v18 = *(uint64_t **)(*((void *)a1 + 2) + 8 * v17++);
        uint64_t result = sub_100027504(a1[11], v18, v17);
      }
      while (v17 < a1[3]);
    }
  }
  if (a1[8] >= 1 && *(void *)(a1 + 9))
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v19 = _os_log_pack_size();
      __chkstk_darwin(v19, v20, v21);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)(v22 + 4) = "";
      __SC_log_send();
    }
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v23 = _os_log_pack_size();
      __chkstk_darwin(v23, v24, v25);
      __error();
      uint64_t v26 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v26 = 136315138;
      *(void *)(v26 + 4) = "DNS configuration (for service-specific queries)";
      uint64_t result = __SC_log_send();
    }
    if (a1[8] >= 1)
    {
      uint64_t v27 = 0;
      do
      {
        int v28 = *(uint64_t **)(*(void *)(a1 + 9) + 8 * v27++);
        uint64_t result = sub_100027504(a1[11], v28, v27);
      }
      while (v27 < a1[8]);
    }
  }
  return result;
}

void sub_1000264C8(uint64_t a1, uint64_t a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 0x40000000;
  v2[2] = sub_100026584;
  v2[3] = &unk_100076538;
  v2[4] = a1;
  void v2[5] = a2;
  dispatch_queue_t v3 = dispatch_queue_create("dns_configuration_monitor", 0);
  dispatch_async(v3, v2);
}

void sub_100026584(uint64_t a1)
{
  sub_1000265F8(*(NSObject **)(a1 + 32), *(void **)(a1 + 40));
  SCPreferencesRef v2 = *(NSObject **)(a1 + 48);

  dispatch_release(v2);
}

uint64_t sub_1000265F8(NSObject *a1, void *a2)
{
  memset(&v12, 0, sizeof(v12));
  __strlcpy_chk();
  if (realpath_DARWIN_EXTSN((const char *)v14, v13)) {
    goto LABEL_2;
  }
  uint64_t v7 = strrchr((char *)v14, 47);
  if (v7)
  {
    *uint64_t v7 = 0;
    if (realpath_DARWIN_EXTSN((const char *)v14, v13))
    {
      __strlcat_chk();
      __strlcat_chk();
LABEL_2:
      v12.info = a2;
      v14[0] = CFStringCreateWithCString(0, v13, 0x8000100u);
      CFArrayRef v4 = CFArrayCreate(0, v14, 1, &kCFTypeArrayCallBacks);
      CFRelease(v14[0]);
      uint64_t v5 = FSEventStreamCreate(0, (FSEventStreamCallback)sub_100028584, &v12, v4, 0xFFFFFFFFFFFFFFFFLL, 0.0, 0x15u);
      CFRelease(v4);
      FSEventStreamSetDispatchQueue(v5, a1);
      return FSEventStreamStart(v5);
    }
  }
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8, v9, v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 136315138;
    *(void *)(v11 + 4) = "/Library/Preferences/SystemConfiguration/resolver";
    return __SC_log_send();
  }
  return result;
}

CFTypeID sub_100026838(__CFBundle *a1)
{
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
  CFTypeID result = CFDictionaryGetTypeID();
  if (InfoDictionary)
  {
    CFTypeID v3 = result;
    CFTypeID result = CFGetTypeID(InfoDictionary);
    if (result == v3)
    {
      CFDictionaryRef Value = CFDictionaryGetValue(InfoDictionary, @"mdns_timeout");
      qword_10007DBD8 = (uint64_t)Value;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID) {
          uint64_t v6 = (uint64_t)Value;
        }
        else {
          uint64_t v6 = 0;
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      qword_10007DBD8 = v6;
      uint64_t v7 = CFDictionaryGetValue(InfoDictionary, @"pdns_timeout");
      qword_10007DBE0 = (uint64_t)v7;
      CFTypeID result = CFNumberGetTypeID();
      if (v7)
      {
        CFTypeID v8 = result;
        CFTypeID result = CFGetTypeID(v7);
        if (result == v8) {
          uint64_t v9 = (uint64_t)v7;
        }
        else {
          uint64_t v9 = 0;
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
      qword_10007DBE0 = v9;
    }
  }
  return result;
}

uint64_t sub_10002693C(CFDictionaryRef theDict, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a2 & 2) == 0)
  {
    if (sub_100031470(theDict, 2)) {
      uint64_t v2 = v2 | 2;
    }
    else {
      uint64_t v2 = v2;
    }
  }
  if ((v2 & 4) == 0)
  {
    if (sub_100031470(theDict, 30)) {
      uint64_t v2 = v2 | 4;
    }
    else {
      uint64_t v2 = v2;
    }
  }
  if ((~v2 & 6) != 0)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, kSCEntNetCommCenter);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (Value)
    {
      if (CFGetTypeID(Value) == TypeID)
      {
        CFBooleanRef v6 = (const __CFBoolean *)CFDictionaryGetValue(Value, kSCPropNetCommCenterAvailable);
        CFTypeID v7 = CFBooleanGetTypeID();
        if (v6)
        {
          if (CFGetTypeID(v6) == v7)
          {
            if (CFBooleanGetValue(v6))
            {
              CFNumberRef v8 = (const __CFNumber *)CFDictionaryGetValue(Value, @"AvailableProtocols");
              CFTypeID v9 = CFNumberGetTypeID();
              if (v8)
              {
                if (CFGetTypeID(v8) == v9)
                {
                  int valuePtr = 0;
                  CFNumberGetValue(v8, kCFNumberIntType, &valuePtr);
                  return (2 * (valuePtr & 3)) | v2;
                }
              }
            }
          }
        }
      }
    }
  }
  return v2;
}

void sub_100026AA8(__CFDictionary *a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  if (a3) {
    uint64_t v5 = " ";
  }
  else {
    uint64_t v5 = "";
  }
  CFStringRef v6 = &stru_100077F38;
  if (a3) {
    CFStringRef v6 = a3;
  }
  CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%s:%s%@ %ld", a2, v5, v6, a4);
  CFDictionarySetValue(a1, @"__CONFIGURATION_ID__", v7);

  CFRelease(v7);
}

void sub_100026B68(const __CFArray *a1, CFDictionaryRef theDict)
{
  unsigned int valuePtr = 0;
  CFArrayRef v4 = CFDictionaryGetValue(theDict, kSCPropNetDNSSearchOrder);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!v4 || CFGetTypeID(v4) != TypeID || !CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
  {
    CFArrayRef v4 = 0;
    unsigned int valuePtr = 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  CFIndex v25 = Count;
  if (Count < 1)
  {
LABEL_11:
    CFNumberRef v12 = CFNumberCreate(0, kCFNumberCFIndexType, &v25);
    CFDictionarySetValue(theDict, @"__ORDER__", v12);
    CFRelease(v12);
    uint64_t v13 = CFDictionaryGetValue(theDict, kSCPropInterfaceName);
    if (v13)
    {
      if (!CFEqual(v13, @"*"))
      {
        int v23 = 0;
        CFBooleanRef BOOLean = 0;
        value = 0;
        if (_SC_cfstring_to_cstring())
        {
          int v22 = sub_10002B79C((uint64_t)v26);
          if (v22)
          {
            if (CFDictionaryGetValueIfPresent(theDict, @"__FLAGS__", (const void **)&value)
              && (uint64_t v16 = value, v17 = CFNumberGetTypeID(), v16)
              && CFGetTypeID(v16) == v17
              && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v23)
              && (v23 & 0x1000) != 0
              || CFDictionaryGetValueIfPresent(theDict, @"__SCOPED_QUERY__", (const void **)&BOOLean)
              && (CFBooleanRef v18 = BOOLean, v19 = CFBooleanGetTypeID(), v18)
              && CFGetTypeID(v18) == v19
              && CFBooleanGetValue(BOOLean))
            {
              value = CFNumberCreate(0, kCFNumberIntType, &v22);
              CFDictionarySetValue(theDict, @"__IF_INDEX__", value);
              CFRelease(value);
            }
          }
        }
      }
    }
    CFArrayAppendValue(a1, theDict);
  }
  else
  {
    CFIndex v7 = Count;
    CFIndex v8 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v8);
      if (CFEqual(theDict, ValueAtIndex)) {
        break;
      }
      if (v4)
      {
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)ValueAtIndex);
        CFDictionarySetValue(MutableCopy, kSCPropNetDNSSearchOrder, v4);
        int v11 = CFEqual(theDict, MutableCopy);
        CFRelease(MutableCopy);
        if (v11)
        {
          v26[0] = 0;
          uint64_t v14 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, kSCPropNetDNSSearchOrder);
          CFTypeID v15 = CFNumberGetTypeID();
          if (v14
            && CFGetTypeID(v14) == v15
            && CFNumberGetValue((CFNumberRef)v14, kCFNumberSInt32Type, v26)
            && valuePtr < v26[0])
          {
            CFArraySetValueAtIndex(a1, v8, theDict);
          }
          return;
        }
      }
      if (++v8 >= v7) {
        goto LABEL_11;
      }
    }
  }
}

__CFArray *sub_100026E8C(const __CFDictionary *a1, const __CFArray *MutableCopy)
{
  unsigned int valuePtr = 200000;
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (a1)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a1, kSCPropNetDNSSearchOrder);
    CFTypeID TypeID = CFNumberGetTypeID();
    if (!Value || CFGetTypeID(Value) != TypeID || !CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr)) {
      unsigned int valuePtr = 200000;
    }
    CFDictionaryGetValue(a1, kSCPropNetDNSDomainName);
    CFArrayRef v7 = (const __CFArray *)CFDictionaryGetValue(a1, kSCPropNetDNSSearchDomains);
    CFTypeID v8 = CFArrayGetTypeID();
    if (v7 && CFGetTypeID(v7) == v8)
    {
      CFIndex Count = CFArrayGetCount(v7);
      if (Count >= 1)
      {
        CFIndex v10 = Count;
        for (CFIndex i = 0; i != v10; ++i)
        {
          CFArrayGetValueAtIndex(v7, i);
          CFNumberRef v12 = (const void *)_SC_trimDomain();
          if (v12)
          {
            uint64_t v13 = v12;
            CFArrayAppendValue(Mutable, v12);
            CFRelease(v13);
          }
        }
      }
      goto LABEL_17;
    }
  }
  else
  {
    CFArrayGetTypeID();
  }
  uint64_t v14 = (const void *)_SC_trimDomain();
  if (v14)
  {
    CFTypeID v15 = v14;
    CFArrayAppendValue(Mutable, v14);
    CFRelease(v15);
  }
LABEL_17:
  if (!MutableCopy) {
    goto LABEL_50;
  }
  CFIndex v16 = CFArrayGetCount(MutableCopy);
  CFIndex v17 = v16;
  if (v16 < 2)
  {
    if (v16 != 1) {
      goto LABEL_50;
    }
    CFArrayRef v34 = 0;
    CFDictionaryRef v35 = a1;
  }
  else
  {
    CFDictionaryRef v35 = a1;
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(0, 0, MutableCopy);
    v40.location = 0;
    v40.length = v17;
    CFArraySortValues(MutableCopy, v40, (CFComparatorFunction)sub_100027330, 0);
    CFArrayRef v34 = MutableCopy;
  }
  CFIndex v18 = 0;
  CFIndex v36 = 0;
  CFTypeID v19 = (const void *)kSCPropNetDNSSupplementalMatchDomainsNoSearch;
  do
  {
    int v37 = 0;
    int v38 = 0;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(MutableCopy, v18);
    CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, kSCPropNetDNSOptions);
    CFTypeID v22 = CFStringGetTypeID();
    if (!v21
      || CFGetTypeID(v21) != v22
      || !CFEqual(v21, @"pdns") && CFStringFind(v21, @"interface=", 0).location == -1)
    {
      CFDictionaryGetValue(ValueAtIndex, kSCPropNetDNSDomainName);
      uint64_t v23 = _SC_trimDomain();
      if (v23)
      {
        CFStringRef v24 = (const __CFString *)v23;
        CFIndex v25 = CFDictionaryGetValue(ValueAtIndex, v19);
        CFTypeID v26 = CFNumberGetTypeID();
        if ((!v25 || CFGetTypeID(v25) != v26 || !CFNumberGetValue((CFNumberRef)v25, kCFNumberIntType, &v38) || !v38)
          && !CFStringHasSuffix(v24, @".in-addr.arpa")
          && !CFStringHasSuffix(v24, @".ip6.arpa"))
        {
          v41.length = CFArrayGetCount(Mutable);
          v41.location = 0;
          FirstIndexOfCFDictionaryRef Value = CFArrayGetFirstIndexOfValue(Mutable, v41, v24);
          int v28 = CFDictionaryGetValue(ValueAtIndex, kSCPropNetDNSSearchOrder);
          CFTypeID v29 = CFNumberGetTypeID();
          if (v28 && CFGetTypeID(v28) == v29 && CFNumberGetValue((CFNumberRef)v28, kCFNumberSInt32Type, &v37))
          {
            unsigned int v30 = v37;
          }
          else
          {
            unsigned int v30 = 200000;
            int v37 = 200000;
          }
          if (v30 >= valuePtr)
          {
            if (FirstIndexOfValue == -1) {
              CFArrayAppendValue(Mutable, v24);
            }
          }
          else
          {
            if (FirstIndexOfValue == -1)
            {
              CFIndex v31 = v36;
            }
            else
            {
              CFArrayRemoveValueAtIndex(Mutable, FirstIndexOfValue);
              CFIndex v31 = v36 - (FirstIndexOfValue < v36);
            }
            CFIndex v32 = v31;
            CFArrayInsertValueAtIndex(Mutable, v31, v24);
            CFIndex v36 = v32 + 1;
          }
        }
        CFRelease(v24);
      }
    }
    ++v18;
  }
  while (v17 != v18);
  a1 = v35;
  if (v34) {
    CFRelease(v34);
  }
LABEL_50:
  if (!CFArrayGetCount(Mutable))
  {
    CFRelease(Mutable);
    CFArrayRef Mutable = 0;
  }
  CFDictionaryRemoveValue(a1, kSCPropNetDNSDomainName);
  CFDictionaryRemoveValue(a1, kSCPropNetDNSSearchDomains);
  return Mutable;
}

uint64_t sub_100027330(const __CFDictionary *a1, const __CFDictionary *a2)
{
  unsigned int v4 = 200000;
  unsigned int v15 = 200000;
  unsigned int valuePtr = 200000;
  uint64_t v5 = (void *)CFDictionaryGetValue(a1, kSCPropNetDNSSearchOrder);
  value = v5;
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!v5 || CFGetTypeID(v5) != TypeID || !CFNumberGetValue((CFNumberRef)v5, kCFNumberSInt32Type, &valuePtr)) {
    unsigned int valuePtr = 200000;
  }
  CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(a2, kSCPropNetDNSSearchOrder);
  CFNumberRef number = v7;
  CFTypeID v8 = CFNumberGetTypeID();
  if (v7 && CFGetTypeID(v7) == v8 && CFNumberGetValue(v7, kCFNumberSInt32Type, &v15)) {
    unsigned int v4 = v15;
  }
  else {
    unsigned int v15 = 200000;
  }
  BOOL v9 = valuePtr >= v4;
  if (valuePtr == v4)
  {
    if (!CFDictionaryGetValueIfPresent(a1, @"__ORDER__", (const void **)&value)) {
      return 0;
    }
    if (!CFDictionaryGetValueIfPresent(a2, @"__ORDER__", (const void **)&number)) {
      return 0;
    }
    CFIndex v10 = value;
    CFTypeID v11 = CFNumberGetTypeID();
    if (!v10) {
      return 0;
    }
    if (CFGetTypeID(v10) != v11) {
      return 0;
    }
    CFNumberRef v12 = number;
    CFTypeID v13 = CFNumberGetTypeID();
    if (!v12) {
      return 0;
    }
    if (CFGetTypeID(v12) != v13) {
      return 0;
    }
    if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)) {
      return 0;
    }
    if (!CFNumberGetValue(number, kCFNumberSInt32Type, &v15)) {
      return 0;
    }
    BOOL v9 = valuePtr >= v15;
    if (valuePtr == v15) {
      return 0;
    }
  }
  if (v9) {
    return 1;
  }
  return -1;
}

uint64_t sub_100027504(unsigned int a1, uint64_t *a2, int a3)
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5, v6, v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v8 + 4) = "";
    __SC_log_send();
  }
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v9 = _os_log_pack_size();
    __chkstk_darwin(v9, v10, v11);
    __error();
    CFNumberRef v12 = (_DWORD *)_os_log_pack_fill();
    *CFNumberRef v12 = 67109120;
    v12[1] = a3;
    __SC_log_send();
  }
  if (*a2)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13, v14, v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      uint64_t v17 = *a2;
      *(_DWORD *)uint64_t v16 = 136315138;
      *(void *)(v16 + 4) = v17;
      __SC_log_send();
    }
  }
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v18 = 0;
    do
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v19 = _os_log_pack_size();
        __chkstk_darwin(v19, v20, v21);
        __error();
        uint64_t v22 = _os_log_pack_fill();
        uint64_t v23 = *(void *)(*(uint64_t *)((char *)a2 + 28) + 8 * v18);
        *(_DWORD *)uint64_t v22 = 67109378;
        *(_DWORD *)(v22 + 4) = v18;
        *(_WORD *)(v22 + 8) = 2080;
        *(void *)(v22 + 10) = v23;
        __SC_log_send();
      }
      ++v18;
    }
    while (v18 < *((int *)a2 + 6));
  }
  if (*((int *)a2 + 2) >= 1)
  {
    uint64_t v24 = 0;
    do
    {
      _SC_sockaddr_to_string();
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v25 = _os_log_pack_size();
        __chkstk_darwin(v25, v26, v27);
        __error();
        uint64_t v28 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v28 = 67109378;
        *(_DWORD *)(v28 + 4) = v24;
        *(_WORD *)(v28 + 8) = 2080;
        *(void *)(v28 + 10) = __str;
        __SC_log_send();
      }
      ++v24;
    }
    while (v24 < *((int *)a2 + 2));
  }
  if (*((int *)a2 + 9) >= 1)
  {
    uint64_t v29 = 0;
    do
    {
      inet_ntop(2, *(const void **)(a2[5] + 8 * v29), __str, 0x20u);
      inet_ntop(2, (const void *)(*(void *)(a2[5] + 8 * v29) + 4), v94, 0x20u);
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v30 = _os_log_pack_size();
        __chkstk_darwin(v30, v31, v32);
        __error();
        uint64_t v33 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v33 = 67109634;
        *(_DWORD *)(v33 + 4) = v29;
        *(_WORD *)(v33 + 8) = 2080;
        *(void *)(v33 + 10) = __str;
        *(_WORD *)(v33 + 18) = 2080;
        *(void *)(v33 + 20) = v94;
        __SC_log_send();
      }
      ++v29;
    }
    while (v29 < *((int *)a2 + 9));
  }
  if (a2[6])
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v34 = _os_log_pack_size();
      __chkstk_darwin(v34, v35, v36);
      __error();
      uint64_t v37 = _os_log_pack_fill();
      uint64_t v38 = a2[6];
      *(_DWORD *)uint64_t v37 = 136315138;
      *(void *)(v37 + 4) = v38;
      __SC_log_send();
    }
  }
  if (*((_WORD *)a2 + 10))
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v39 = _os_log_pack_size();
      __chkstk_darwin(v39, v40, v41);
      __error();
      CFMutableArrayRef v42 = (_DWORD *)_os_log_pack_fill();
      int v43 = *((unsigned __int16 *)a2 + 10);
      *CFMutableArrayRef v42 = 67109120;
      v42[1] = v43;
      __SC_log_send();
    }
  }
  if (*((_DWORD *)a2 + 14))
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v44 = _os_log_pack_size();
      __chkstk_darwin(v44, v45, v46);
      __error();
      CFNumberRef v47 = (_DWORD *)_os_log_pack_fill();
      int v48 = *((_DWORD *)a2 + 14);
      *CFNumberRef v47 = 67109120;
      v47[1] = v48;
      __SC_log_send();
    }
  }
  unsigned int v49 = *((_DWORD *)a2 + 16);
  if (v49)
  {
    if (a1 < 0x133C785 || (CFTypeID v50 = (char *)a2[11]) == 0) {
      CFTypeID v50 = if_indextoname(v49, __str);
    }
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v51 = _os_log_pack_size();
      __chkstk_darwin(v51, v52, v53);
      __error();
      uint64_t v54 = _os_log_pack_fill();
      int v55 = *((_DWORD *)a2 + 16);
      CFArrayRef v56 = "?";
      if (v50) {
        CFArrayRef v56 = v50;
      }
      *(_DWORD *)uint64_t v54 = 67109378;
      *(_DWORD *)(v54 + 4) = v55;
      *(_WORD *)(v54 + 8) = 2080;
      *(void *)(v54 + 10) = v56;
      __SC_log_send();
    }
  }
  if (*((_DWORD *)a2 + 19))
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v57 = _os_log_pack_size();
      __chkstk_darwin(v57, v58, v59);
      __error();
      int v60 = (_DWORD *)_os_log_pack_fill();
      int v61 = *((_DWORD *)a2 + 19);
      *int v60 = 67109120;
      v60[1] = v61;
      __SC_log_send();
    }
  }
  uint64_t v62 = *((unsigned int *)a2 + 17);
  CFArrayRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppend(Mutable, @"  flags    : ");
  CFStringAppendFormat(Mutable, 0, @"0x%08x", v62);
  if (v62)
  {
    CFStringAppendFormat(Mutable, 0, @" (");
    if ((v62 & 0x1000) != 0)
    {
      uint64_t v62 = v62 & 0xFFFFEFFF;
      unsigned int v88 = "";
      if (v62) {
        unsigned int v88 = ", ";
      }
      CFStringAppendFormat(Mutable, 0, @"Scoped%s", v88);
      if ((v62 & 0x2000) == 0)
      {
LABEL_46:
        if ((v62 & 0x4000) == 0) {
          goto LABEL_47;
        }
        goto LABEL_105;
      }
    }
    else if ((v62 & 0x2000) == 0)
    {
      goto LABEL_46;
    }
    uint64_t v62 = v62 & 0xFFFFDFFF;
    int v89 = "";
    if (v62) {
      int v89 = ", ";
    }
    CFStringAppendFormat(Mutable, 0, @"Service-specific%s", v89);
    if ((v62 & 0x4000) == 0)
    {
LABEL_47:
      if ((v62 & 2) == 0) {
        goto LABEL_48;
      }
      goto LABEL_108;
    }
LABEL_105:
    uint64_t v62 = v62 & 0xFFFFBFFF;
    CFNumberRef v90 = "";
    if (v62) {
      CFNumberRef v90 = ", ";
    }
    CFStringAppendFormat(Mutable, 0, @"Supplemental%s", v90);
    if ((v62 & 2) == 0)
    {
LABEL_48:
      if ((v62 & 4) == 0) {
        goto LABEL_49;
      }
      goto LABEL_111;
    }
LABEL_108:
    uint64_t v62 = v62 & 0xFFFFFFFD;
    CFTypeID v91 = "";
    if (v62) {
      CFTypeID v91 = ", ";
    }
    CFStringAppendFormat(Mutable, 0, @"Request A records%s", v91);
    if ((v62 & 4) == 0)
    {
LABEL_49:
      if (!v62)
      {
LABEL_51:
        CFStringAppend(Mutable, @""));
        goto LABEL_52;
      }
LABEL_50:
      CFStringAppendFormat(Mutable, 0, @"0x%08x", v62);
      goto LABEL_51;
    }
LABEL_111:
    uint64_t v62 = v62 & 0xFFFFFFFB;
    CFArrayRef v92 = "";
    if (v62) {
      CFArrayRef v92 = ", ";
    }
    CFStringAppendFormat(Mutable, 0, @"Request AAAA records%s", v92);
    if (!v62) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_52:
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v64 = _os_log_pack_size();
    __chkstk_darwin(v64, v65, v66);
    __error();
    uint64_t v67 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v67 = 138412290;
    *(void *)(v67 + 4) = Mutable;
    __SC_log_send();
  }
  CFRelease(Mutable);
  unsigned int v68 = *((_DWORD *)a2 + 18);
  int v69 = snprintf(__str, 0x64uLL, "0x%08x (", v68);
  if (v68 || v69 > 0x53)
  {
    unint64_t v71 = v69;
    unint64_t v70 = v69;
    unsigned int v72 = v68;
    if ((v68 & 2) != 0)
    {
      unint64_t v70 = v69;
      unsigned int v72 = v68;
      if (v69 <= 0x57)
      {
        unint64_t v70 = __strlcat_chk();
        unsigned int v72 = v68 & 0xFFFFFFFD;
      }
    }
    if ((v72 & 1) != 0 && v70 <= 0x4C)
    {
      unint64_t v70 = __strlcat_chk();
      v72 &= ~1u;
    }
    if ((v72 & 4) != 0 && v70 <= 0x4D)
    {
      unint64_t v70 = __strlcat_chk();
      v72 &= ~4u;
    }
    if ((v72 & 8) != 0 && v70 <= 0x41)
    {
      unint64_t v70 = __strlcat_chk();
      v72 &= ~8u;
    }
    if ((v72 & 0x20) != 0 && v70 <= 0x42)
    {
      unint64_t v70 = __strlcat_chk();
      v72 &= ~0x20u;
    }
    if ((v72 & 0x10) != 0 && v70 < 0x4C)
    {
      unint64_t v70 = __strlcat_chk();
      v72 &= ~0x10u;
    }
    if ((v72 & 0x10000) != 0 && v70 < 0x54)
    {
      unint64_t v70 = __strlcat_chk();
      v72 &= ~0x10000u;
    }
    if ((v72 & 0x20000) != 0 && v70 <= 0x46)
    {
      unint64_t v70 = __strlcat_chk();
      v72 &= ~0x20000u;
    }
    if ((v72 & 0x40000) != 0 && v70 <= 0x5C)
    {
      unint64_t v70 = __strlcat_chk();
      v72 &= ~0x40000u;
    }
    if (v72)
    {
      if (v70 >= 0x57)
      {
        __str[v71] = 0;
        unint64_t v70 = v71;
        unsigned int v72 = v68;
      }
      v70 += snprintf(&__str[v70], 99 - v70, "0x%08x,", v72);
    }
  }
  else
  {
    unint64_t v70 = __strlcat_chk();
  }
  if (v70) {
    __str[v70 - 1] = 41;
  }
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v74 = _os_log_pack_size();
    __chkstk_darwin(v74, v75, v76);
    __error();
    uint64_t v77 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v77 = 136315138;
    *(void *)(v77 + 4) = __str;
    uint64_t result = __SC_log_send();
  }
  if (*((_DWORD *)a2 + 15))
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v78 = _os_log_pack_size();
      __chkstk_darwin(v78, v79, v80);
      __error();
      CFIndex v81 = (_DWORD *)_os_log_pack_fill();
      int v82 = *((_DWORD *)a2 + 15);
      *CFIndex v81 = 67109120;
      v81[1] = v82;
      uint64_t result = __SC_log_send();
    }
  }
  if (a2[10])
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v83 = _os_log_pack_size();
      __chkstk_darwin(v83, v84, v85);
      __error();
      uint64_t v86 = _os_log_pack_fill();
      uint64_t v87 = a2[10];
      *(_DWORD *)uint64_t v86 = 136315138;
      *(void *)(v86 + 4) = v87;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_100028584(uint64_t a1, uint64_t (*a2)(void))
{
  memset(&v7, 0, sizeof(v7));
  uint64_t result = stat("/Library/Preferences/SystemConfiguration/resolver", &v7);
  if (byte_10007DBE8 || !result)
  {
    byte_10007DBE8 = result == 0;
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4, v5, v6);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    return a2();
  }
  return result;
}

_DWORD *sub_1000286D0()
{
  BOOL v0 = malloc_type_calloc(1uLL, 0x2000uLL, 0x8E22472BuLL);
  v0[11] = 20170629;
  *((void *)v0 + 3) = mach_absolute_time();
  return v0;
}

void sub_100028750(void **a1, _DWORD *a2)
{
  uint64_t v4 = (char *)*a1;
  sub_100028848(a2);
  unsigned int v5 = a2[2];
  unsigned int v6 = a2[6];
  unsigned int v7 = a2[9];
  int v8 = a2[17];
  uint64_t v9 = 32 * ((v8 & 0x200000u) >> 21);
  if ((v8 & 0x200000) != 0) {
    int v10 = 3;
  }
  else {
    int v10 = 1;
  }
  BOOL v11 = (v8 & 0x100000) == 0;
  uint64_t v12 = 12;
  if (v11)
  {
    uint64_t v12 = v9;
    unsigned int v13 = v10;
  }
  else
  {
    unsigned int v13 = 2;
  }
  *(_DWORD *)&v4[v12] = bswap32(bswap32(*(_DWORD *)&v4[v12]) + 1);
  int v14 = 8 * (bswap32(v5) + bswap32(v6) + bswap32(v7)) + 8;
  unsigned int v15 = bswap32(a2[24]) + 100;

  sub_100028B08(a1, v13, v15, a2, v14);
}

void sub_100028848(_DWORD *a1)
{
  if (!a1[2]) {
    return;
  }
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  unsigned int v3 = a1[16];
  if (v3 && if_indextoname(bswap32(v3), cStr))
  {
    CFStringRef v4 = CFStringCreateWithCString(0, cStr, 0x600u);
    CFDictionarySetValue(Mutable, @"interface", v4);
    CFRelease(v4);
  }
  unsigned int v5 = bswap32(a1[24]);
  if (v5 < 8)
  {
    unsigned int v8 = 2;
    goto LABEL_26;
  }
  int v6 = 0;
  unsigned int v7 = (const UInt8 *)(a1 + 25);
  unsigned int v8 = 2;
  while (1)
  {
    unsigned int v9 = *((_DWORD *)v7 + 1);
    if (*(_DWORD *)v7 != 184549376) {
      goto LABEL_17;
    }
    *(_DWORD *)cStr = 0;
    CFDataRef v10 = CFDataCreate(0, v7 + 8, v7[8]);
    CFDictionarySetValue(Mutable, @"remote-address", v10);
    CFRelease(v10);
    BOOL v11 = (const __SCNetworkReachability *)SCNetworkReachabilityCreateWithOptions();
    if (!v11) {
      break;
    }
    uint64_t v12 = v11;
    int Flags = SCNetworkReachabilityGetFlags(v11, (SCNetworkReachabilityFlags *)cStr);
    CFRelease(v12);
    if (!Flags) {
      goto LABEL_24;
    }
    unsigned int v14 = *(_DWORD *)cStr;
    if (!v6) {
      goto LABEL_29;
    }
    BOOL v15 = (v8 & 2) == 0;
    if ((cStr[0] & 4) == 0) {
      BOOL v15 = (v8 & 6) != 2;
    }
    if ((cStr[0] & 2) != 0 && v15)
    {
LABEL_29:
      unsigned int v8 = *(_DWORD *)cStr;
      if ((cStr[0] & 6) == 2) {
        goto LABEL_25;
      }
    }
    ++v6;
LABEL_17:
    unsigned int v16 = bswap32(v9);
    v7 += v16;
    v5 -= v16;
    if (v5 <= 7) {
      goto LABEL_26;
    }
  }
  CFDictionaryRemoveValue(Mutable, @"interface");
  uint64_t v17 = (const void *)SCNetworkReachabilityCreateWithOptions();
  if (v17)
  {
    CFRelease(v17);
    unsigned int v14 = 0;
    goto LABEL_25;
  }
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v18 = _os_log_pack_size();
    __chkstk_darwin(v18, v19, v20);
    __error();
    uint64_t v21 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v21 = 138412290;
    *(void *)(v21 + 4) = Mutable;
    __SC_log_send();
  }
LABEL_24:
  unsigned int v14 = v8;
LABEL_25:
  unsigned int v8 = v14;
LABEL_26:
  CFRelease(Mutable);
  a1[18] = bswap32(v8);
}

void sub_100028B08(void **a1, unsigned int a2, unsigned int a3, const void *a4, int a5)
{
  CFDataRef v10 = *a1;
  uint64_t v11 = bswap32(*((_DWORD *)*a1 + 12));
  size_t v12 = a3;
  if ((a3 & 3) != 0) {
    unsigned int v13 = (a3 | 3) + 1;
  }
  else {
    unsigned int v13 = a3;
  }
  unsigned int v14 = v13 + 8;
  size_t v15 = v13 + v11 + 64;
  if (v15 <= 0x2000)
  {
    unsigned int v16 = v11;
  }
  else
  {
    CFDataRef v10 = malloc_type_realloc(*a1, v15, 0x46D30967uLL);
    unsigned int v16 = bswap32(v10[12]);
  }
  unsigned int v17 = bswap32(bswap32(v10[13]) + a5);
  v10[12] = bswap32(v16 + v14);
  v10[13] = v17;
  uint64_t v18 = (char *)v10 + v11;
  *((_DWORD *)v18 + 14) = bswap32(a2);
  *((_DWORD *)v18 + 15) = bswap32(v14);
  memcpy((char *)v10 + v11 + 64, a4, v12);
  if (v13 > a3) {
    bzero((char *)v10 + v11 + v12 + 64, v13 + ~a3 + 1);
  }
  *a1 = v10;
}

void sub_100028C44(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  bzero(a2, a3);
  if (a1)
  {
    uint64_t v6 = *a1;
    if (v6)
    {
      memset(&c, 0, sizeof(c));
      uint64_t v7 = *(void *)(v6 + 24);
      if (a3 <= 0x1F) {
        unsigned int v8 = (unsigned __int8 *)&v9;
      }
      else {
        unsigned int v8 = a2;
      }
      *(void *)(v6 + 24) = 0;
      CC_SHA256_Init(&c);
      CC_SHA256_Update(&c, (const void *)v6, bswap32(*(_DWORD *)(v6 + 48)) + 56);
      CC_SHA256_Final(v8, &c);
      if (v8 != a2) {
        memcpy(a2, v8, a3);
      }
      *(void *)(v6 + 24) = v7;
    }
  }
}

void sub_100028D38(void **a1)
{
  *a1 = 0;
}

void *sub_100028D98()
{
  return malloc_type_calloc(1uLL, 0x400uLL, 0xE4771CD2uLL);
}

void sub_100028E00(void **a1, unsigned __int8 *a2)
{
  unsigned int v3 = *a1;
  int v4 = a2[1];
  if (v4 == 30)
  {
    if (!*((_DWORD *)a2 + 2) && !*((_DWORD *)a2 + 3) && !*((_DWORD *)a2 + 4))
    {
      int v5 = *((_DWORD *)a2 + 5);
      int v6 = 0x1000000;
LABEL_4:
      BOOL v7 = v5 != v6;
      if (v5 == v6) {
        int v8 = 100663296;
      }
      else {
        int v8 = 0;
      }
      goto LABEL_11;
    }
  }
  else if (v4 == 2)
  {
    int v5 = *((_DWORD *)a2 + 1);
    int v6 = 16777343;
    goto LABEL_4;
  }
  int v8 = 0;
  BOOL v7 = 1;
LABEL_11:
  int v9 = v3[17];
  v3[2] = bswap32(bswap32(v3[2]) + 1);
  sub_100028EFC(a1, 0xBu, *a2, a2);
  if (!v7) {
    *((_DWORD *)*a1 + 17) = v8 | v9;
  }
}

void sub_100028EFC(void **a1, unsigned int a2, unsigned int a3, const void *a4)
{
  int v8 = *a1;
  uint64_t v9 = bswap32(*((_DWORD *)*a1 + 24));
  size_t v10 = a3;
  if ((a3 & 3) != 0) {
    unsigned int v11 = (a3 | 3) + 1;
  }
  else {
    unsigned int v11 = a3;
  }
  unsigned int v12 = v11 + 8;
  size_t v13 = v11 + v9 + 108;
  if (v13 < 0x401)
  {
    unsigned int v14 = v9;
  }
  else
  {
    int v8 = malloc_type_realloc(*a1, v13, 0x840B5627uLL);
    unsigned int v14 = bswap32(v8[24]);
  }
  v8[24] = bswap32(v14 + v12);
  size_t v15 = (char *)v8 + v9;
  *((_DWORD *)v15 + 25) = bswap32(a2);
  *((_DWORD *)v15 + 26) = bswap32(v12);
  memcpy((char *)v8 + v9 + 108, a4, v10);
  if (v11 > a3) {
    bzero((char *)v8 + v9 + v10 + 108, v11 + ~a3 + 1);
  }
  *a1 = v8;
}

uint64_t sub_100029024(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)result + 68) = bswap32(a2);
  return result;
}

void sub_100029078(void **a1, char *__s)
{
  *((_DWORD *)*a1 + 6) = bswap32(bswap32(*((_DWORD *)*a1 + 6)) + 1);
  unsigned int v4 = strlen(__s) + 1;

  sub_100028EFC(a1, 0xCu, v4, __s);
}

void sub_100029110(void **a1, const void *a2)
{
  *((_DWORD *)*a1 + 9) = bswap32(bswap32(*((_DWORD *)*a1 + 9)) + 1);

  sub_100028EFC(a1, 0xDu, 8u, a2);
}

void sub_10002918C(void **a1, char *__s)
{
  unsigned int v4 = strlen(__s) + 1;

  sub_100028EFC(a1, 0xFu, v4, __s);
}

void sub_10002920C(void **a1, char *__s)
{
  unsigned int v4 = strlen(__s) + 1;

  sub_100028EFC(a1, 0xAu, v4, __s);
}

void sub_10002928C(void **a1, unsigned int a2, char *__s)
{
  *((_DWORD *)*a1 + 16) = bswap32(a2);
  if (__s)
  {
    unsigned int v5 = strlen(__s);
    sub_100028EFC(a1, 0x10u, v5, __s);
  }
}

void sub_100029344(void **a1, char *__s)
{
  unsigned int v4 = strlen(__s) + 1;

  sub_100028EFC(a1, 0xEu, v4, __s);
}

uint64_t sub_1000293C4(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)result + 60) = bswap32(a2);
  return result;
}

uint64_t sub_100029418(uint64_t result, unsigned int a2)
{
  *(_WORD *)(*(void *)result + 20) = __rev16(a2);
  return result;
}

uint64_t sub_10002946C(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)result + 56) = bswap32(a2);
  return result;
}

uint64_t sub_1000294C0(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(*(void *)result + 76) = bswap32(a2);
  return result;
}

uint64_t sub_100029514(uint64_t result)
{
  dword_10007DBEC = result;
  return result;
}

DIR *sub_100029564(void **a1)
{
  uint64_t result = opendir("/Library/Preferences/SystemConfiguration/resolver");
  if (result)
  {
    unsigned int v3 = result;
    BOOL v7 = 0;
    for (CFIndex i = readdir(result); i; CFIndex i = readdir(v3))
    {
      d_name = i->d_name;
      if (strcmp(i->d_name, ".") && strcmp(d_name, ".."))
      {
        int v6 = sub_100029654(d_name);
        BOOL v7 = v6;
        if (v6)
        {
          sub_100028750(a1, v6);
          sub_100028D38((void **)&v7);
        }
      }
    }
    return (DIR *)closedir(v3);
  }
  return result;
}

FILE *sub_100029654(char *a1)
{
  uint64_t v53 = 0;
  size_t v54 = 0;
  uint64_t v56 = 0;
  memset(v55, 0, sizeof(v55));
  v57[0] = 0;
  __strlcpy_chk();
  __strlcat_chk();
  uint64_t v51 = a1;
  __strlcat_chk();
  uint64_t result = fopen(v57, "r");
  if (result)
  {
    unsigned int v3 = result;
    unsigned int v4 = fgetln(result, &v54);
    if (v4)
    {
      int v6 = v4;
      unsigned int v7 = 0;
      int v8 = 0;
      *(void *)&long long v5 = 136315394;
      long long v50 = v5;
      do
      {
        uint64_t v52 = 0;
        size_t v9 = v54;
        if (v54)
        {
          if (v6[v54 - 1] == 10)
          {
            v6[v54 - 1] = 0;
            size_t v9 = v54;
          }
          size_t v10 = (char *)reallocf(v8, v9 + 1);
          int v8 = v10;
          if (v10)
          {
            strlcpy(v10, v6, v54 + 1);
            uint64_t v52 = v8;
            unsigned int v11 = strsep(&v52, " \t");
            if (v11)
            {
              unsigned int v12 = v11;
              int v13 = *v11;
              if (v13 != 35 && v13 != 59)
              {
                uint64_t v14 = 0;
                while (strcasecmp(v12, (&off_100076558)[v14]))
                {
                  v14 += 2;
                  if (v14 == 20)
                  {
                    sub_10000620C();
                    _SC_syslog_os_log_mapping();
                    if (__SC_log_enabled())
                    {
                      uint64_t v15 = _os_log_pack_size();
                      v49[1] = v49;
                      __chkstk_darwin(v15, v16, v17);
                      __error();
                      uint64_t v18 = _os_log_pack_fill();
                      *(_DWORD *)uint64_t v18 = v50;
                      *(void *)(v18 + 4) = v12;
                      *(_WORD *)(v18 + 12) = 2080;
                      *(void *)(v18 + 14) = v57;
                      __SC_log_send();
                    }
                    goto LABEL_85;
                  }
                }
                int v19 = *((_DWORD *)&off_100076558 + 2 * v14 + 3);
                uint64_t v20 = SLODWORD((&off_100076558)[v14 + 1]);
                uint64_t v21 = strsep(&v52, " \t");
                if (v21)
                {
                  int v22 = *((_DWORD *)v55 + v20);
                  *((_DWORD *)v55 + v20) = v22 + 1;
                  if (v22 < v19)
                  {
                    uint64_t v23 = v21;
                    if (!v53)
                    {
                      uint64_t v53 = sub_100028D98();
                      if (!v53) {
                        goto LABEL_99;
                      }
                    }
                    switch((int)v20)
                    {
                      case 0:
                        size_t v24 = strlen(v23);
                        if (v24)
                        {
                          while (v23[v24 - 1] == 46)
                          {
                            v23[--v24] = 0;
                            if (!v24) {
                              goto LABEL_85;
                            }
                          }
                          sub_10002920C((void **)&v53, v23);
                        }
                        goto LABEL_85;
                      case 1:
                        do
                        {
                          if (*v23)
                          {
                            if (!strcasecmp(v23, "scoped"))
                            {
                              v7 |= 0x1000u;
                            }
                            else if (!strcasecmp(v23, "a"))
                            {
                              v7 |= 2u;
                            }
                            else if (!strcasecmp(v23, "aaaa"))
                            {
                              v7 |= 4u;
                            }
                          }
                          uint64_t v23 = strsep(&v52, " \t");
                        }
                        while (v23);
                        goto LABEL_85;
                      case 2:
                        unsigned int v25 = if_nametoindex(v23);
                        if (v25) {
                          sub_10002928C((void **)&v53, v25, v23);
                        }
                        goto LABEL_85;
                      case 3:
                        uint64_t v26 = sub_100029D7C(v23);
                        if (v26)
                        {
                          uint64_t v27 = (char *)v26;
                          sub_100028E00((void **)&v53, v26);
                          goto LABEL_48;
                        }
                        goto LABEL_85;
                      case 4:
                        uint64_t v27 = 0;
                        do
                        {
                          if (*v23)
                          {
                            if (v27)
                            {
                              strlcat(v27, " ", v54 + 1);
                              strlcat(v27, v23, v54 + 1);
                            }
                            else
                            {
                              uint64_t v28 = (char *)malloc_type_malloc(v54 + 1, 0x745950E5uLL);
                              if (!v28) {
                                goto LABEL_85;
                              }
                              uint64_t v27 = v28;
                              strlcpy(v28, v23, v54 + 1);
                            }
                          }
                          uint64_t v23 = strsep(&v52, " \t");
                        }
                        while (v23);
                        if (v27)
                        {
                          sub_100029344((void **)&v53, v27);
LABEL_48:
                          uint64_t v29 = v27;
                          goto LABEL_49;
                        }
                        goto LABEL_85;
                      case 5:
                        unint64_t v30 = strtol(v23, 0, 0);
                        if (!(v30 >> 16)) {
                          sub_100029418((uint64_t)&v53, (unsigned __int16)v30);
                        }
                        goto LABEL_85;
                      case 6:
                        int v31 = 0;
                        do
                        {
                          if (v31 == 6) {
                            break;
                          }
                          size_t v32 = strlen(v23);
                          if (v32)
                          {
                            while (v23[v32 - 1] == 46)
                            {
                              v23[--v32] = 0;
                              if (!v32) {
                                goto LABEL_59;
                              }
                            }
                            sub_100029078((void **)&v53, v23);
                          }
LABEL_59:
                          ++v31;
                          uint64_t v23 = strsep(&v52, " \t");
                        }
                        while (v23);
                        goto LABEL_85;
                      case 7:
                        unint64_t v33 = strtol(v23, 0, 0);
                        if (!HIDWORD(v33)) {
                          sub_1000293C4((uint64_t)&v53, v33);
                        }
                        goto LABEL_85;
                      case 8:
                        int v34 = 11;
                        break;
                      case 9:
                        unint64_t v42 = strtol(v23, 0, 0);
                        if (!HIDWORD(v42)) {
                          sub_10002946C((uint64_t)&v53, v42);
                        }
                        goto LABEL_85;
                      default:
                        goto LABEL_85;
                    }
                    do
                    {
                      if (!--v34) {
                        break;
                      }
                      uint64_t v35 = strchr(v23, 47);
                      uint64_t v36 = v35;
                      if (v35) {
                        char *v35 = 0;
                      }
                      uint64_t v29 = sub_100029E48(v23);
                      if (!v29) {
                        break;
                      }
                      if (*((unsigned char *)v29 + 1) != 2) {
                        goto LABEL_49;
                      }
                      unsigned int v37 = *((_DWORD *)v29 + 1);
                      free(v29);
                      if (v36)
                      {
                        uint64_t v29 = sub_100029E48(v36 + 1);
                        if (!v29) {
                          break;
                        }
                        if (*((unsigned char *)v29 + 1) != 2)
                        {
LABEL_49:
                          free(v29);
                          break;
                        }
                        unsigned int v38 = *((_DWORD *)v29 + 1);
                        free(v29);
                      }
                      else
                      {
                        unsigned int v39 = bswap32(v37);
                        if ((v39 & 0x80000000) != 0)
                        {
                          if (v39 >> 30 == 2)
                          {
                            unsigned int v40 = -65536;
                          }
                          else
                          {
                            if (v39 >> 29 != 6) {
                              break;
                            }
                            unsigned int v40 = -256;
                          }
                        }
                        else
                        {
                          unsigned int v40 = -16777216;
                        }
                        unsigned int v38 = bswap32(v40);
                      }
                      uint64_t v41 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
                      *uint64_t v41 = v37;
                      v41[1] = v38;
                      sub_100029110((void **)&v53, v41);
                      free(v41);
                      uint64_t v23 = strsep(&v52, " \t");
                    }
                    while (v23);
                  }
                }
              }
            }
          }
        }
LABEL_85:
        int v6 = fgetln(v3, &v54);
      }
      while (v6);
      BOOL v43 = LODWORD(v55[0]) == 0;
    }
    else
    {
      int v8 = 0;
      unsigned int v7 = 0;
      BOOL v43 = 1;
    }
    uint64_t v44 = v53;
    if (v53 && v43)
    {
      uint64_t v45 = v51;
      uint64_t v46 = strrchr(v51, 47);
      if (v46) {
        CFNumberRef v47 = v46 + 1;
      }
      else {
        CFNumberRef v47 = v45;
      }
      sub_10002920C((void **)&v53, v47);
      uint64_t v44 = v53;
    }
    if (v44)
    {
      if (v7) {
        unsigned int v48 = v7;
      }
      else {
        unsigned int v48 = bswap32(v44[17]) | dword_10007DBEC;
      }
      sub_100029024((uint64_t)&v53, v48);
    }
LABEL_99:
    if (v8) {
      free(v8);
    }
    fclose(v3);
    return (FILE *)v53;
  }
  return result;
}

unsigned __int8 *sub_100029D7C(char *a1)
{
  uint64_t result = (unsigned __int8 *)sub_100029E48(a1);
  if (!result)
  {
    uint64_t result = (unsigned __int8 *)strrchr(a1, 46);
    if (result)
    {
      unsigned int v3 = result;
      unint64_t v4 = strtol((const char *)result + 1, 0, 10);
      uint64_t result = 0;
      if (!(v4 >> 16))
      {
        *unsigned int v3 = 0;
        uint64_t result = (unsigned __int8 *)sub_100029E48(a1);
        if (result)
        {
          int v5 = result[1];
          if (v5 == 30 || v5 == 2) {
            *((_WORD *)result + 1) = bswap32(v4) >> 16;
          }
        }
      }
    }
  }
  return result;
}

void *sub_100029E48(const char *a1)
{
  unsigned int v7 = 0;
  memset(&v6, 0, sizeof(v6));
  v6.ai_flags = 4;
  BOOL v1 = 0;
  if (!getaddrinfo(a1, 0, &v6, &v7))
  {
    uint64_t v2 = v7;
    int ai_family = v7->ai_family;
    if (ai_family == 30 || ai_family == 2)
    {
      BOOL v1 = malloc_type_malloc(v7->ai_addrlen, 0xB75E7870uLL);
      memcpy(v1, v7->ai_addr, v7->ai_addrlen);
      uint64_t v2 = v7;
    }
    else
    {
      BOOL v1 = 0;
    }
    freeaddrinfo(v2);
  }
  return v1;
}

uint64_t sub_100029F14(uint64_t a1, const void *a2)
{
  sub_10005500C(qword_10007DBF0);
  sub_10002A0F4();
  qword_10007DC10 = (uint64_t)_Block_copy(a2);
  unsigned int v3 = "com.apple.SystemConfiguration.DNSConfiguration";
  unint64_t v4 = getenv("com.apple.SystemConfiguration.DNSConfiguration");
  if (v4) {
    unsigned int v3 = v4;
  }
  if (qword_10007DC18 != -1) {
    dispatch_once(&qword_10007DC18, &stru_100076698);
  }
  mach_service = xpc_connection_create_mach_service(v3, (dispatch_queue_t)qword_10007DC20, 1uLL);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_1000014D0;
  handler[3] = &unk_1000765F8;
  void handler[4] = mach_service;
  xpc_connection_set_event_handler(mach_service, handler);
  xpc_connection_resume(mach_service);
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7, v8, v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = v3;
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_10002A0F4()
{
  if (qword_10007DC18 != -1) {
    dispatch_once(&qword_10007DC18, &stru_100076698);
  }
  uint64_t result = os_state_add_handler();
  if (!result)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1, v2, v3);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_10002A234(CFDataRef *a1)
{
  CFDataRef v1 = *a1;
  if (*a1)
  {
    uint64_t v2 = *((void *)v1 + 3);
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3, v4, v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v6 = 134217984;
      *(void *)(v6 + 4) = v2;
      __SC_log_send();
    }
    CFDataRef v1 = CFDataCreate(0, (const UInt8 *)v1, bswap32(*((_DWORD *)v1 + 12)) + 56);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (qword_10007DC18 != -1) {
    dispatch_once(&qword_10007DC18, &stru_100076698);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10002A4F0;
  block[3] = &unk_100076618;
  block[4] = v1;
  void block[5] = v2;
  dispatch_sync((dispatch_queue_t)qword_10007DC20, block);
  if (v1) {
    CFRelease(v1);
  }
  sub_100055124((uint64_t)&qword_10007DBF0);
  if (qword_10007DC10) {
    (*(void (**)(void))(qword_10007DC10 + 16))();
  }
  uint64_t v7 = (const char *)dns_configuration_notify_key();
  if (v7)
  {
    uint32_t v8 = notify_post(v7);
    if (v8)
    {
      uint32_t v9 = v8;
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v10 = _os_log_pack_size();
        __chkstk_darwin(v10, v11, v12);
        __error();
        int v13 = (_DWORD *)_os_log_pack_fill();
        *int v13 = 67109120;
        v13[1] = v9;
        __SC_log_send();
      }
    }
  }
  return 1;
}

void sub_10002A4F0(uint64_t a1)
{
  CFDataRef v1 = *(const void **)(a1 + 32);
  unint64_t v2 = *(void *)(a1 + 40);

  sub_100055088((uint64_t)&qword_10007DBF0, v1, v2);
}

os_state_data_s *__cdecl sub_10002A554(id a1, os_state_hints_s *a2)
{
  if (qword_10007DBF0)
  {
    CFIndex Length = CFDataGetLength((CFDataRef)qword_10007DBF0);
    size_t v3 = Length + 200;
    if ((unint64_t)(Length + 200) > 0x8000)
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __error();
        uint64_t v4 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v4 = 134218240;
        *(void *)(v4 + 4) = v3;
        *(_WORD *)(v4 + 12) = 2048;
        *(void *)(v4 + 14) = 0x8000;
        __SC_log_send();
      }
      return 0;
    }
    int64_t v5 = Length;
  }
  else
  {
    int64_t v5 = 0;
    size_t v3 = 200;
  }
  uint64_t v6 = (os_state_data_s *)malloc_type_calloc(1uLL, v3, 0x1DA5D1DBuLL);
  if (!v6)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      _os_log_pack_size();
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    return 0;
  }
  uint64_t v7 = v6;
  v6->var0 = 3;
  v6->var1.var1 = v5;
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  if (v5 >= 1)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)qword_10007DBF0);
    memcpy(v7->var4, BytePtr, v5);
  }
  return v7;
}

void sub_10002A7B0(id a1)
{
  qword_10007DC20 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.DNSConfiguration.server", 0);
}

uint64_t sub_10002A810(_xpc_connection_s *a1, xpc_object_t xdict)
{
  uint64_t int64 = xpc_dictionary_get_uint64(xdict, "generation");
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4, v5, v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    pid_t pid = xpc_connection_get_pid(a1);
    *(_DWORD *)uint64_t v7 = 134218496;
    *(void *)(v7 + 4) = a1;
    *(_WORD *)(v7 + 12) = 1024;
    *(_DWORD *)(v7 + 14) = pid;
    *(_WORD *)(v7 + 18) = 2048;
    *(void *)(v7 + 20) = uint64;
    __SC_log_send();
  }
  sub_100055178((uint64_t)&qword_10007DBF0, a1, uint64);
  sub_100055124((uint64_t)&qword_10007DBF0);
  uint64_t result = qword_10007DC10;
  if (qword_10007DC10) {
    return (*(uint64_t (**)(void))(qword_10007DC10 + 16))();
  }
  return result;
}

void sub_10002B164()
{
  if (qword_10007DC28)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v0 = _os_log_pack_size();
      __chkstk_darwin(v0, v1, v2);
      __error();
      uint64_t v3 = _os_log_pack_fill();
      CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DC28);
      *(_DWORD *)uint64_t v3 = 136315394;
      *(void *)(v3 + 4) = "effective_ifindex_free";
      *(_WORD *)(v3 + 12) = 2048;
      *(void *)(v3 + 14) = Count;
      __SC_log_send();
    }
    if (qword_10007DC28)
    {
      CFRelease((CFTypeRef)qword_10007DC28);
      qword_10007DC28 = 0;
    }
  }
}

uint64_t sub_10002B2AC(uint64_t a1, void *key)
{
  if (key
    && qword_10007DC28
    && (unsigned int Value = CFDictionaryGetValue((CFDictionaryRef)qword_10007DC28, (const void *)key)) != 0)
  {
    if (Value == -1) {
      return 0;
    }
    else {
      return Value;
    }
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
    __strlcpy_chk();
    int v6 = sub_10002B4AC();
    if (v6 == -1 || ioctl(v6, 0xC020699DuLL, &v14) == -1)
    {
      return 0;
    }
    else
    {
      uint64_t v7 = v15;
      if (v15 && sub_10002B5F8(v15, (uint64_t)v13))
      {
        sub_10000620C();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v8 = _os_log_pack_size();
          __chkstk_darwin(v8, v9, v10);
          __error();
          uint64_t v11 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v11 = 136316162;
          *(void *)(v11 + 4) = "effective_ifindex_get";
          *(_WORD *)(v11 + 12) = 2080;
          *(void *)(v11 + 14) = a1;
          *(_WORD *)(v11 + 22) = 1024;
          *(_DWORD *)(v11 + 24) = key;
          *(_WORD *)(v11 + 28) = 2080;
          *(void *)(v11 + 30) = v13;
          *(_WORD *)(v11 + 38) = 1024;
          *(_DWORD *)(v11 + 40) = v7;
          __SC_log_send();
        }
        uint64_t v5 = v7;
      }
      else
      {
        uint64_t v5 = 0;
        uint64_t v7 = 0xFFFFFFFFLL;
      }
      sub_10002B6FC(key, (void *)v7);
    }
  }
  return v5;
}

uint64_t sub_10002B4AC()
{
  if (dword_10007D8D8 == -1)
  {
    dword_10007D8D8 = socket(2, 2, 0);
    if (dword_10007D8D8 == -1)
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v0 = _os_log_pack_size();
        __chkstk_darwin(v0, v1, v2);
        __error();
        uint64_t v3 = _os_log_pack_fill();
        uint64_t v4 = __error();
        uint64_t v5 = strerror(*v4);
        *(_DWORD *)uint64_t v3 = 136315138;
        *(void *)(v3 + 4) = v5;
        __SC_log_send();
      }
    }
  }
  return dword_10007D8D8;
}

uint64_t sub_10002B5F8(int a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_10002B950;
  v4[3] = &unk_100076708;
  int v5 = a1;
  v4[4] = &v6;
  v4[5] = a2;
  if (qword_10007DC40 != -1) {
    dispatch_once(&qword_10007DC40, &stru_1000767C8);
  }
  dispatch_sync((dispatch_queue_t)qword_10007DC48, v4);
  uint64_t v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

void sub_10002B6FC(void *key, void *value)
{
  unsigned int v2 = value;
  unsigned int v3 = key;
  CFArrayRef Mutable = (__CFDictionary *)qword_10007DC28;
  if (!qword_10007DC28)
  {
    CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, (const CFDictionaryKeyCallBacks *)&unk_10007D8E0, (const CFDictionaryValueCallBacks *)&unk_10007D910);
    qword_10007DC28 = (uint64_t)Mutable;
  }

  CFDictionarySetValue(Mutable, (const void *)v3, (const void *)v2);
}

uint64_t sub_10002B79C(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  if (qword_10007DC40 != -1) {
    dispatch_once(&qword_10007DC40, &stru_1000767C8);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10002B8A4;
  block[3] = &unk_1000766E0;
  block[4] = &v5;
  void block[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_10007DC48, block);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_10002B8A4(uint64_t result)
{
  uint64_t v1 = result;
  if (qword_10007DC30)
  {
    int v2 = *(_DWORD *)qword_10007DC30;
    if (*(_DWORD *)qword_10007DC30)
    {
      unsigned int v3 = (_DWORD *)(qword_10007DC30 + 16);
      do
      {
        uint64_t result = *((void *)v3 - 1);
        if (!result) {
          break;
        }
        uint64_t result = strcmp((const char *)result, *(const char **)(v1 + 40));
        if (!result) {
          goto LABEL_9;
        }
        int v4 = *v3;
        v3 += 4;
        int v2 = v4;
      }
      while (v4);
    }
  }
  else
  {
    uint64_t result = if_nametoindex(*(const char **)(result + 40));
    int v2 = result;
LABEL_9:
    *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = v2;
  }
  return result;
}

char *sub_10002B950(char *result)
{
  uint64_t v1 = result;
  if (qword_10007DC30)
  {
    int v2 = *(_DWORD *)qword_10007DC30;
    if (*(_DWORD *)qword_10007DC30)
    {
      for (uint64_t i = qword_10007DC30 + 8; *(void *)i; i += 16)
      {
        if (v2 == *((_DWORD *)result + 12))
        {
          *(void *)(*(void *)(*((void *)result + 4) + 8) + 24) = *((void *)result + 5);
          int v4 = (char *)*((void *)result + 5);
          uint64_t v5 = *(const char **)i;
          return (char *)strlcpy(v4, v5, 0x10uLL);
        }
        int v2 = *(_DWORD *)(i + 8);
        if (!v2) {
          return result;
        }
      }
    }
  }
  else
  {
    uint64_t result = if_indextoname(*((_DWORD *)result + 12), *((char **)result + 5));
    *(void *)(*(void *)(*((void *)v1 + 4) + 8) + 24) = result;
  }
  return result;
}

void sub_10002BA48()
{
  if (qword_10007DC40 != -1) {
    dispatch_once(&qword_10007DC40, &stru_1000767C8);
  }
  uint64_t v0 = qword_10007DC48;

  dispatch_sync(v0, &stru_100076748);
}

void sub_10002BAD8(id a1)
{
  if (qword_10007DC30)
  {
    if_freenameindex((if_nameindex *)qword_10007DC30);
    qword_10007DC30 = 0;
  }
}

void sub_10002BB3C()
{
  if (qword_10007DC40 != -1) {
    dispatch_once(&qword_10007DC40, &stru_1000767C8);
  }
  uint64_t v0 = qword_10007DC48;

  dispatch_sync(v0, &stru_100076788);
}

void sub_10002BBCC(id a1)
{
  if (qword_10007DC30)
  {
    if_freenameindex((if_nameindex *)qword_10007DC30);
    qword_10007DC30 = 0;
  }
  qword_10007DC30 = (uint64_t)if_nameindex();
}

char *sub_10002BC38(int a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = (char *)a2;
  if (!sub_10002B5F8(a1, a2)) {
    snprintf(v2, 0x10uLL, "[%u]", a1);
  }
  return v2;
}

uint64_t sub_10002BCC0()
{
  uint64_t result = dword_10007DC38;
  if (!dword_10007DC38)
  {
    uint64_t result = sub_10002B79C((uint64_t)"lo0");
    dword_10007DC38 = result;
  }
  return result;
}

uint64_t sub_10002BD2C()
{
  uint64_t result = dword_10007D8D8;
  if (dword_10007D8D8 != -1)
  {
    uint64_t result = close(dword_10007D8D8);
    dword_10007D8D8 = -1;
  }
  return result;
}

uint64_t sub_10002BD98()
{
  if (dword_10007D8DC == -1)
  {
    dword_10007D8DC = socket(30, 2, 0);
    if (dword_10007D8DC == -1)
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v0 = _os_log_pack_size();
        __chkstk_darwin(v0, v1, v2);
        __error();
        uint64_t v3 = _os_log_pack_fill();
        int v4 = __error();
        uint64_t v5 = strerror(*v4);
        *(_DWORD *)uint64_t v3 = 136315138;
        *(void *)(v3 + 4) = v5;
        __SC_log_send();
      }
    }
  }
  return dword_10007D8DC;
}

uint64_t sub_10002BEE4()
{
  uint64_t result = dword_10007D8DC;
  if (dword_10007D8DC != -1)
  {
    uint64_t result = close(dword_10007D8DC);
    dword_10007D8DC = -1;
  }
  return result;
}

uint64_t sub_10002BF50(int a1, __int16 a2, _OWORD *a3, char a4)
{
  memset(v5, 0, sizeof(v5));
  long long v6 = 0u;
  LOWORD(v5[0]) = 7708;
  *(_OWORD *)((char *)v5 + 8) = *a3;
  BYTE12(v5[1]) = a4;
  WORD4(v6) = a2;
  return ioctl(a1, 0xC0307586uLL, v5);
}

uint64_t sub_10002BFD0(int a1, __int16 a2, _OWORD *a3)
{
  memset(v4, 0, sizeof(v4));
  long long v5 = 0u;
  LOWORD(v4[0]) = 7708;
  *(_OWORD *)((char *)v4 + 8) = *a3;
  WORD4(v5) = a2;
  return ioctl(a1, 0xC0307587uLL, v4);
}

uint64_t sub_10002C04C(int a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5)
{
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  __strlcpy_chk();
  LOBYTE(v11) = a3;
  if (a5)
  {
    if (a5 >= 0x14) {
      char v8 = 20;
    }
    else {
      char v8 = a5;
    }
    BYTE1(v11) = v8;
    __memcpy_chk();
  }
  return ioctl(a1, 0xC02869AEuLL, &v10);
}

uint64_t sub_10002C118(unsigned int a1)
{
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  __strlcpy_chk();
  if (!a1)
  {
    a1 = dword_10007DC38;
    if (!dword_10007DC38)
    {
      a1 = sub_10002B79C((uint64_t)"lo0");
      dword_10007DC38 = a1;
    }
  }
  uint64_t v11 = a1;
  int v2 = sub_10002BD98();
  if (v2 < 0) {
    return 0;
  }
  if (ioctl(v2, 0xC0186955uLL, v10) != -1) {
    return 1;
  }
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4, v5, v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    char v8 = __error();
    uint64_t v9 = strerror(*v8);
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v7 + 4) = v9;
    __SC_log_send();
    return 0;
  }
  return result;
}

CFStringRef sub_10002C2B8(uint64_t a1)
{
  return CFStringCreateWithFormat(0, 0, @"%u", a1);
}

BOOL sub_10002C318(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_10002C368(uint64_t result)
{
  return result;
}

void sub_10002C3B4(id a1)
{
  qword_10007DC48 = (uint64_t)dispatch_queue_create("my_if_nametoindex queue", 0);
}

uint64_t sub_10002C414(uint64_t a1, void *a2)
{
  uint64_t result = sub_10002C5D0(a1, a2);
  if (result)
  {
    uint64_t v3 = dispatch_queue_create("IPMonitorControlServer", 0);
    mach_service = xpc_connection_create_mach_service("com.apple.SystemConfiguration.IPMonitorControl", v3, 1uLL);
    if (mach_service)
    {
      uint64_t v5 = mach_service;
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 0x40000000;
      handler[2] = sub_10002C974;
      handler[3] = &unk_100076810;
      void handler[4] = mach_service;
      qword_10007DC70 = (uint64_t)v3;
      xpc_connection_set_event_handler(mach_service, handler);
      xpc_connection_resume(v5);
      os_state_add_handler();
      return 1;
    }
    else
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6, v7, v8);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      dispatch_release(v3);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10002C5D0(uint64_t a1, void *aBlock)
{
  if (qword_10007DC50)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
LABEL_8:
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3, v4, v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v6 = 136315138;
    *(void *)(v6 + 4) = "SetNotificationInfo";
    __SC_log_send();
    return 0;
  }
  if (a1 && aBlock)
  {
    qword_10007DC50 = a1;
    qword_10007DC58 = (uint64_t)_Block_copy(aBlock);
    return 1;
  }
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_10002C794(void *a1)
{
  uint64_t v9 = 0;
  long long v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v12 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10002C898;
  block[3] = &unk_1000767F0;
  block[4] = &v5;
  void block[5] = &v9;
  dispatch_sync((dispatch_queue_t)qword_10007DC70, block);
  *a1 = v6[3];
  uint64_t v2 = v10[3];
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(&v9, 8);
  return v2;
}

void sub_10002C898(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t v2 = (void *)S_ControlSessions;
  if (S_ControlSessions)
  {
    do
    {
      CFDictionaryRef v3 = (const __CFDictionary *)v2[6];
      if (v3) {
        CFDictionaryApplyFunction(v3, (CFDictionaryApplierFunction)sub_10002EB14, &v7);
      }
      CFDictionaryRef v4 = (const __CFDictionary *)v2[5];
      if (v4) {
        CFDictionaryApplyFunction(v4, (CFDictionaryApplierFunction)sub_10002EBFC, &v7);
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
    uint64_t v5 = v7;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
  uint64_t v6 = qword_10007DC60;
  qword_10007DC60 = 0;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
}

void sub_10002C974(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = sub_10002CC88;
    handler[3] = &unk_100076830;
    void handler[4] = object;
    xpc_connection_set_event_handler((xpc_connection_t)object, handler);
    xpc_connection_set_target_queue((xpc_connection_t)object, (dispatch_queue_t)qword_10007DC70);
    xpc_connection_resume((xpc_connection_t)object);
    return;
  }
  xpc_type_t v5 = type;
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    uint64_t v6 = _os_log_pack_size();
    __chkstk_darwin(v6, v7, v8);
    __error();
    uint64_t v9 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v9 = 134217984;
    *(void *)(v9 + 4) = v5;
LABEL_9:
    __SC_log_send();
    return;
  }
  string = xpc_dictionary_get_string(object, _xpc_error_key_description);
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  int v11 = __SC_log_enabled();
  if (object != &_xpc_error_connection_invalid)
  {
    if (!v11) {
      return;
    }
    uint64_t v12 = _os_log_pack_size();
    __chkstk_darwin(v12, v13, v14);
    __error();
    uint64_t v15 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v15 = 136315138;
    *(void *)(v15 + 4) = string;
    goto LABEL_9;
  }
  if (v11)
  {
    uint64_t v16 = _os_log_pack_size();
    __chkstk_darwin(v16, v17, v18);
    __error();
    uint64_t v19 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v19 = 136315138;
    *(void *)(v19 + 4) = string;
    __SC_log_send();
  }
  xpc_release(*(xpc_object_t *)(a1 + 32));
}

void sub_10002CC88(uint64_t a1, void *a2)
{
  uint64_t v2 = *(_xpc_connection_s **)(a1 + 32);

  sub_10002CCE4(v2, a2);
}

void sub_10002CCE4(_xpc_connection_s *a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    int int64 = xpc_dictionary_get_int64(object, "Type");
    xpc_object_t reply = xpc_dictionary_create_reply(object);
    long long v10 = reply;
    switch(int64)
    {
      case 1:
        unsigned int v11 = sub_10002D420(a1, object);
        goto LABEL_84;
      case 2:
        if (!reply) {
          return;
        }
        CFDictionaryRef context = xpc_connection_get_context(a1);
        if (!context) {
          goto LABEL_78;
        }
        uint64_t v13 = context;
        string = xpc_dictionary_get_string(object, "InterfaceName");
        if (string)
        {
          LODWORD(valuePtr) = 0;
          if (*((void *)v13 + 5)
            && (CFStringRef v15 = CFStringCreateWithCString(0, string, 0x8000100u),
                CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*((CFDictionaryRef *)v13 + 5), v15),
                CFRelease(v15),
                Value))
          {
            CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
            int64_t v17 = valuePtr;
          }
          else
          {
            int64_t v17 = 0;
          }
          xpc_dictionary_set_int64(v10, "PrimaryRank", v17);
          unsigned int v11 = 0;
        }
        else
        {
LABEL_75:
          unsigned int v11 = 22;
        }
        goto LABEL_85;
      case 3:
        unsigned int v11 = sub_10002D7A8(a1, object);
        goto LABEL_84;
      case 4:
        if (!reply) {
          return;
        }
        uint64_t v18 = xpc_dictionary_get_string(object, "InterfaceName");
        if (!v18) {
          goto LABEL_75;
        }
        CFStringRef v19 = CFStringCreateWithCString(0, v18, 0x8000100u);
        int v20 = xpc_dictionary_get_int64(object, "Advisory");
        uint64_t v21 = (void *)S_ControlSessions;
        if (!S_ControlSessions) {
          goto LABEL_31;
        }
        int v22 = v20;
        break;
      case 5:
        if (!reply) {
          return;
        }
        uint64_t v26 = &S_ControlSessions;
        do
          uint64_t v26 = (uint64_t *)*v26;
        while (v26 && !v26[6]);
        xpc_dictionary_set_BOOL(reply, "AdvisoryIsSet", v26 != 0);
        goto LABEL_83;
      case 6:
        if (!reply) {
          return;
        }
        uint64_t v27 = xpc_dictionary_get_string(object, "InterfaceName");
        if (!v27) {
          goto LABEL_75;
        }
        CFStringRef v28 = CFStringCreateWithCString(0, v27, 0x8000100u);
        uint64_t v29 = S_ControlSessions;
        if (!S_ControlSessions) {
          goto LABEL_77;
        }
        xpc_object_t empty = 0;
        do
        {
          LODWORD(valuePtr) = 0;
          CFDictionaryRef v31 = *(const __CFDictionary **)(v29 + 40);
          if (v31)
          {
            CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue(v31, v28);
            if (v32)
            {
              CFNumberGetValue(v32, kCFNumberSInt32Type, &valuePtr);
              if (!empty) {
                xpc_object_t empty = xpc_array_create_empty();
              }
              unint64_t v33 = *(const char **)(v29 + 32);
              int64_t v34 = *(int *)(v29 + 24);
              int64_t v35 = valuePtr;
              xpc_object_t v36 = xpc_dictionary_create_empty();
              xpc_dictionary_set_string(v36, "ProcessName", v33);
              xpc_dictionary_set_int64(v36, "ProcessID", v34);
              xpc_dictionary_set_int64(v36, "PrimaryRank", v35);
              xpc_array_append_value(empty, v36);
              xpc_release(v36);
            }
          }
          uint64_t v29 = *(void *)v29;
        }
        while (v29);
        CFRelease(v28);
        if (!empty) {
          goto LABEL_76;
        }
        unsigned int v37 = "RankAssertionInfo";
        goto LABEL_74;
      case 7:
        if (!reply) {
          return;
        }
        unsigned int v38 = xpc_dictionary_get_string(object, "InterfaceName");
        if (!v38) {
          goto LABEL_75;
        }
        CFStringRef v28 = CFStringCreateWithCString(0, v38, 0x8000100u);
        uint64_t v39 = S_ControlSessions;
        if (!S_ControlSessions)
        {
LABEL_77:
          CFRelease(v28);
LABEL_78:
          unsigned int v11 = 2;
          goto LABEL_85;
        }
        xpc_object_t empty = 0;
        do
        {
          LODWORD(valuePtr) = 0;
          CFDictionaryRef v40 = *(const __CFDictionary **)(v39 + 48);
          if (v40)
          {
            CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(v40, v28);
            if (v41)
            {
              CFNumberGetValue(v41, kCFNumberSInt32Type, &valuePtr);
              if (!empty) {
                xpc_object_t empty = xpc_array_create_empty();
              }
              unint64_t v42 = *(const char **)(v39 + 32);
              int64_t v43 = *(int *)(v39 + 24);
              int64_t v44 = valuePtr;
              xpc_object_t v45 = xpc_dictionary_create_empty();
              xpc_dictionary_set_string(v45, "ProcessName", v42);
              xpc_dictionary_set_int64(v45, "ProcessID", v43);
              xpc_dictionary_set_int64(v45, "Advisory", v44);
              xpc_array_append_value(empty, v45);
              xpc_release(v45);
            }
          }
          uint64_t v39 = *(void *)v39;
        }
        while (v39);
        CFRelease(v28);
        if (!empty)
        {
LABEL_76:
          unsigned int v11 = 2;
          goto LABEL_84;
        }
        unsigned int v37 = "AdvisoryInfo";
LABEL_74:
        xpc_dictionary_set_value(v10, v37, empty);
        xpc_release(empty);
        goto LABEL_83;
      case 8:
        if (!reply) {
          return;
        }
        unsigned int valuePtr = 0;
        uint64_t v46 = (void *)S_ControlSessions;
        if (!S_ControlSessions) {
          goto LABEL_78;
        }
        do
        {
          CFDictionaryRef v47 = (const __CFDictionary *)v46[5];
          if (v47) {
            CFDictionaryApplyFunction(v47, (CFDictionaryApplierFunction)sub_10002E1E4, &valuePtr);
          }
          uint64_t v46 = (void *)*v46;
        }
        while (v46);
        goto LABEL_72;
      case 9:
        if (!reply) {
          return;
        }
        unsigned int valuePtr = 0;
        unsigned int v48 = (void *)S_ControlSessions;
        if (!S_ControlSessions) {
          goto LABEL_78;
        }
        do
        {
          CFDictionaryRef v49 = (const __CFDictionary *)v48[6];
          if (v49) {
            CFDictionaryApplyFunction(v49, (CFDictionaryApplierFunction)sub_10002E1E4, &valuePtr);
          }
          unsigned int v48 = (void *)*v48;
        }
        while (v48);
LABEL_72:
        xpc_object_t empty = valuePtr;
        if (!valuePtr) {
          goto LABEL_76;
        }
        unsigned int v37 = "InterfaceNames";
        goto LABEL_74;
      default:
        unsigned int v11 = 22;
        goto LABEL_84;
    }
    while (1)
    {
      CFDictionaryRef v23 = (const __CFDictionary *)v21[6];
      if (v23)
      {
        CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v23, v19);
        if (v24)
        {
          LODWORD(valuePtr) = 0;
          if (!v22) {
            break;
          }
          CFNumberGetValue(v24, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr == v22) {
            break;
          }
        }
      }
      uint64_t v21 = (void *)*v21;
      if (!v21)
      {
LABEL_31:
        BOOL v25 = 0;
        goto LABEL_82;
      }
    }
    BOOL v25 = 1;
LABEL_82:
    xpc_dictionary_set_BOOL(v10, "AdvisoryIsSet", v25);
    CFRelease(v19);
LABEL_83:
    unsigned int v11 = 0;
LABEL_84:
    if (v10)
    {
LABEL_85:
      xpc_dictionary_set_int64(v10, "Error", v11);
      remote_connection = xpc_dictionary_get_remote_connection(object);
      xpc_connection_send_message(remote_connection, v10);
      xpc_release(v10);
    }
  }
  else
  {
    if (type != (xpc_type_t)&_xpc_type_error)
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return;
      }
      goto LABEL_4;
    }
    if (object == &_xpc_error_connection_invalid)
    {
      sub_10002DBAC(a1);
    }
    else if (object == &_xpc_error_connection_interrupted)
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
LABEL_4:
        uint64_t v5 = _os_log_pack_size();
        __chkstk_darwin(v5, v6, v7);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
    }
  }
}

uint64_t sub_10002D420(_xpc_connection_s *a1, void *a2)
{
  if (xpc_connection_get_euid(a1))
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4, v5, v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      pid_t pid = xpc_connection_get_pid(a1);
      *(_DWORD *)uint64_t v7 = 134218240;
      *(void *)(v7 + 4) = a1;
      *(_WORD *)(v7 + 12) = 1024;
      *(_DWORD *)(v7 + 14) = pid;
      __SC_log_send();
    }
    return 1;
  }
  string = xpc_dictionary_get_string(a2, "InterfaceName");
  if (!string) {
    return 22;
  }
  unsigned int v11 = string;
  unsigned int int64 = xpc_dictionary_get_int64(a2, "PrimaryRank");
  unsigned int v13 = int64;
  if (int64 > 4) {
    return 22;
  }
  uint64_t v14 = off_1000768B8[int64];
  CFDictionaryRef context = (CFMutableDictionaryRef *)xpc_connection_get_context(a1);
  if (!context) {
    CFDictionaryRef context = (CFMutableDictionaryRef *)sub_10002DCCC(a1, a2);
  }
  unsigned int valuePtr = v13;
  if (context[5])
  {
    uint64_t v16 = (__CFString *)CFStringCreateWithCString(0, v11, 0x8000100u);
    if (!v13)
    {
      CFDictionaryRemoveValue(context[5], v16);
      if (!CFDictionaryGetCount(context[5]))
      {
        CFRelease(context[5]);
        context[5] = 0;
      }
      goto LABEL_19;
    }
LABEL_18:
    CFNumberRef v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(context[5], v16, v17);
    CFRelease(v17);
LABEL_19:
    sub_10002E000(v16);
    if (qword_10007DC50 && qword_10007DC58) {
      dispatch_async((dispatch_queue_t)qword_10007DC50, (dispatch_block_t)qword_10007DC58);
    }
    sub_10002E0BC(v16);
    CFRelease(v16);
    goto LABEL_23;
  }
  if (v13)
  {
    context[5] = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v16 = (__CFString *)CFStringCreateWithCString(0, v11, 0x8000100u);
    goto LABEL_18;
  }
LABEL_23:
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v18 = _os_log_pack_size();
    __chkstk_darwin(v18, v19, v20);
    __error();
    uint64_t v21 = _os_log_pack_fill();
    CFMutableDictionaryRef v22 = context[4];
    int v23 = *((_DWORD *)context + 6);
    *(_DWORD *)uint64_t v21 = 136316162;
    *(void *)(v21 + 4) = v22;
    *(_WORD *)(v21 + 12) = 1024;
    *(_DWORD *)(v21 + 14) = v23;
    *(_WORD *)(v21 + 18) = 2080;
    *(void *)(v21 + 20) = v11;
    *(_WORD *)(v21 + 28) = 2080;
    *(void *)(v21 + 30) = v14;
    *(_WORD *)(v21 + 38) = 1024;
    *(_DWORD *)(v21 + 40) = v13;
    __SC_log_send();
    return 0;
  }
  return result;
}

uint64_t sub_10002D7A8(_xpc_connection_s *a1, void *a2)
{
  if (xpc_connection_get_euid(a1))
  {
    uint64_t v4 = (void *)xpc_connection_copy_entitlement_value();
    if (!v4)
    {
LABEL_14:
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v15 = _os_log_pack_size();
        __chkstk_darwin(v15, v16, v17);
        __error();
        uint64_t v18 = _os_log_pack_fill();
        pid_t pid = xpc_connection_get_pid(a1);
        *(_DWORD *)uint64_t v18 = 134218240;
        *(void *)(v18 + 4) = a1;
        *(_WORD *)(v18 + 12) = 1024;
        *(_DWORD *)(v18 + 14) = pid;
        __SC_log_send();
      }
      return 1;
    }
    uint64_t v5 = v4;
    if (xpc_get_type(v4) != (xpc_type_t)&_xpc_type_BOOL)
    {
      xpc_release(v5);
      goto LABEL_14;
    }
    BOOL value = xpc_BOOL_get_value(v5);
    xpc_release(v5);
    if (!value) {
      goto LABEL_14;
    }
  }
  string = xpc_dictionary_get_string(a2, "InterfaceName");
  if (!string) {
    return 22;
  }
  uint64_t v8 = string;
  uint64_t v9 = xpc_dictionary_get_string(a2, "Reason");
  unsigned int int64 = xpc_dictionary_get_int64(a2, "Advisory");
  unsigned int v11 = int64;
  if (int64 > 3) {
    return 22;
  }
  uint64_t v12 = off_1000768E0[int64];
  CFDictionaryRef context = (CFMutableDictionaryRef *)xpc_connection_get_context(a1);
  if (!context) {
    CFDictionaryRef context = (CFMutableDictionaryRef *)sub_10002DCCC(a1, a2);
  }
  unsigned int valuePtr = v11;
  if (context[6])
  {
    uint64_t v14 = (__CFString *)CFStringCreateWithCString(0, v8, 0x8000100u);
    if (!v11)
    {
      CFDictionaryRemoveValue(context[6], v14);
      if (!CFDictionaryGetCount(context[6]))
      {
        CFRelease(context[6]);
        context[6] = 0;
      }
      goto LABEL_22;
    }
LABEL_21:
    CFNumberRef v21 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    CFDictionarySetValue(context[6], v14, v21);
    CFRelease(v21);
LABEL_22:
    sub_10002E000(v14);
    sub_10002E150(v14);
    if (qword_10007DC50 && qword_10007DC58) {
      dispatch_async((dispatch_queue_t)qword_10007DC50, (dispatch_block_t)qword_10007DC58);
    }
    CFRelease(v14);
    goto LABEL_26;
  }
  if (v11)
  {
    context[6] = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v14 = (__CFString *)CFStringCreateWithCString(0, v8, 0x8000100u);
    goto LABEL_21;
  }
LABEL_26:
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v22 = _os_log_pack_size();
    __chkstk_darwin(v22, v23, v24);
    __error();
    uint64_t v25 = _os_log_pack_fill();
    CFMutableDictionaryRef v26 = context[4];
    int v27 = *((_DWORD *)context + 6);
    CFStringRef v28 = "";
    if (v9) {
      CFStringRef v28 = v9;
    }
    *(_DWORD *)uint64_t v25 = 136316418;
    *(void *)(v25 + 4) = v26;
    *(_WORD *)(v25 + 12) = 1024;
    *(_DWORD *)(v25 + 14) = v27;
    *(_WORD *)(v25 + 18) = 2080;
    *(void *)(v25 + 20) = v8;
    *(_WORD *)(v25 + 28) = 2080;
    *(void *)(v25 + 30) = v12;
    *(_WORD *)(v25 + 38) = 1024;
    *(_DWORD *)(v25 + 40) = v11;
    *(_WORD *)(v25 + 44) = 2080;
    *(void *)(v25 + 46) = v28;
    __SC_log_send();
    return 0;
  }
  return result;
}

void sub_10002DBAC(_xpc_connection_s *a1)
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 134217984;
    *(void *)(v5 + 4) = a1;
    __SC_log_send();
  }
  CFDictionaryRef context = (uint64_t *)xpc_connection_get_context(a1);
  if (context) {
    sub_10002E388(context);
  }
}

_OWORD *sub_10002DCCC(_xpc_connection_s *a1, void *a2)
{
  uint64_t v4 = malloc_type_malloc(0x38uLL, 0x10B004087C588CDuLL);
  *uint64_t v4 = 0u;
  v4[1] = 0u;
  _OWORD v4[2] = 0u;
  *((void *)v4 + 6) = 0;
  *((void *)v4 + 2) = a1;
  *((_DWORD *)v4 + 6) = xpc_connection_get_pid(a1);
  string = xpc_dictionary_get_string(a2, "ProcessName");
  if (!string) {
    string = "<unknown>";
  }
  *((void *)v4 + 4) = strdup(string);
  xpc_connection_set_finalizer_f(a1, (xpc_finalizer_t)sub_10002DEC0);
  xpc_connection_set_context(a1, v4);
  uint64_t v6 = S_ControlSessions;
  *(void *)uint64_t v4 = S_ControlSessions;
  if (v6) {
    *(void *)(v6 + 8) = v4;
  }
  S_ControlSessions = (uint64_t)v4;
  *((void *)v4 + 1) = &S_ControlSessions;
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7, v8, v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    uint64_t v11 = *((void *)v4 + 4);
    int v12 = *((_DWORD *)v4 + 6);
    *(_DWORD *)uint64_t v10 = 136315906;
    *(void *)(v10 + 4) = v11;
    *(_WORD *)(v10 + 12) = 1024;
    *(_DWORD *)(v10 + 14) = v12;
    *(_WORD *)(v10 + 18) = 2048;
    *(void *)(v10 + 20) = v4;
    *(_WORD *)(v10 + 28) = 2048;
    *(void *)(v10 + 30) = a1;
    __SC_log_send();
  }
  return v4;
}

void sub_10002DEC0(uint64_t a1)
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(_DWORD *)(a1 + 24);
    *(_DWORD *)uint64_t v5 = 136315650;
    *(void *)(v5 + 4) = v6;
    *(_WORD *)(v5 + 12) = 1024;
    *(_DWORD *)(v5 + 14) = v7;
    *(_WORD *)(v5 + 18) = 2048;
    *(void *)(v5 + 20) = a1;
    __SC_log_send();
  }
  free(*(void **)(a1 + 32));
  free((void *)a1);
}

void sub_10002E000(void *value)
{
  if (qword_10007DC60)
  {
    v3.length = qword_10007DC68;
    v3.location = 0;
    if (CFArrayContainsValue((CFArrayRef)qword_10007DC60, v3, value)) {
      return;
    }
    CFArrayAppendValue((CFMutableArrayRef)qword_10007DC60, value);
    uint64_t v2 = qword_10007DC68 + 1;
  }
  else
  {
    qword_10007DC60 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFArrayAppendValue((CFMutableArrayRef)qword_10007DC60, value);
    uint64_t v2 = 1;
  }
  qword_10007DC68 = v2;
}

void sub_10002E0BC(CFStringRef ifname)
{
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, @"RankAssertion");
  SCDynamicStoreNotifyValue(0, NetworkInterfaceEntity);

  CFRelease(NetworkInterfaceEntity);
}

void sub_10002E150(CFStringRef ifname)
{
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, @"Advisory");
  SCDynamicStoreNotifyValue(0, NetworkInterfaceEntity);

  CFRelease(NetworkInterfaceEntity);
}

void sub_10002E1E4(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v4 = (char *)_SC_cfstring_to_cstring();
  uint64_t v5 = *a3;
  if (!*a3)
  {
    xpc_object_t empty = xpc_array_create_empty();
    *a3 = empty;
    goto LABEL_5;
  }
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  char v12 = 0;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000;
  applier[2] = sub_10002E308;
  applier[3] = &unk_100076858;
  applier[4] = &v9;
  applier[5] = v4;
  xpc_array_apply(v5, applier);
  int v6 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  if (!v6)
  {
    xpc_object_t empty = *a3;
LABEL_5:
    xpc_array_set_string(empty, 0xFFFFFFFFFFFFFFFFLL, v4);
  }
  CFAllocatorDeallocate(0, v4);
}

BOOL sub_10002E308(uint64_t a1, int a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  int v5 = strcmp(string_ptr, *(const char **)(a1 + 40));
  if (!v5) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  return v5 != 0;
}

void sub_10002E388(uint64_t *a1)
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 134217984;
    *(void *)(v5 + 4) = a1;
    __SC_log_send();
  }
  uint64_t v6 = *a1;
  if (*a1) {
    *(void *)(v6 + 8) = a1[1];
  }
  *(void *)a1[1] = v6;
  uint64_t v7 = a1[6];
  if (!a1[5])
  {
    if (!v7) {
      return;
    }
    goto LABEL_9;
  }
  if (v7)
  {
LABEL_9:
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8, v9, v10);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      pid_t pid = xpc_connection_get_pid((xpc_connection_t)a1[2]);
      uint64_t v13 = a1[6];
      *(_DWORD *)uint64_t v11 = 67109378;
      *(_DWORD *)(v11 + 4) = pid;
      *(_WORD *)(v11 + 8) = 2112;
      *(void *)(v11 + 10) = v13;
      __SC_log_send();
    }
    CFDictionaryApplyFunction((CFDictionaryRef)a1[6], (CFDictionaryApplierFunction)sub_10002E6D0, 0);
    uint64_t v14 = (const void *)a1[6];
    if (v14)
    {
      CFRelease(v14);
      a1[6] = 0;
    }
  }
  if (a1[5])
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v15 = _os_log_pack_size();
      __chkstk_darwin(v15, v16, v17);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      pid_t v19 = xpc_connection_get_pid((xpc_connection_t)a1[2]);
      uint64_t v20 = a1[5];
      *(_DWORD *)uint64_t v18 = 67109378;
      *(_DWORD *)(v18 + 4) = v19;
      *(_WORD *)(v18 + 8) = 2112;
      *(void *)(v18 + 10) = v20;
      __SC_log_send();
    }
    CFDictionaryApplyFunction((CFDictionaryRef)a1[5], (CFDictionaryApplierFunction)sub_10002E73C, 0);
    CFNumberRef v21 = (const void *)a1[5];
    if (v21)
    {
      CFRelease(v21);
      a1[5] = 0;
    }
  }
  if (qword_10007DC50)
  {
    if (qword_10007DC58) {
      dispatch_async((dispatch_queue_t)qword_10007DC50, (dispatch_block_t)qword_10007DC58);
    }
  }
}

void sub_10002E6D0(__CFString *a1)
{
  sub_10002E000(a1);

  sub_10002E150(a1);
}

void sub_10002E73C(__CFString *a1)
{
  sub_10002E000(a1);

  sub_10002E0BC(a1);
}

os_state_data_s *__cdecl sub_10002E7A8(id a1, os_state_hints_s *a2)
{
  return (os_state_data_s *)sub_10002E800();
}

_DWORD *sub_10002E800()
{
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  for (uint64_t i = S_ControlSessions; i; uint64_t i = *(void *)i)
  {
    if (*(void *)(i + 40) || *(void *)(i + 48))
    {
      CFStringRef v23 = 0;
      uint64_t v24 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      CFNumberRef v2 = CFNumberCreate(0, kCFNumberSInt32Type, (const void *)(i + 24));
      CFStringRef v3 = CFStringCreateWithCString(0, *(const char **)(i + 32), 0x8000100u);
      keys[0] = @"ProcessID";
      keys[1] = @"ProcessName";
      values[0] = v2;
      values[1] = (void *)v3;
      uint64_t v4 = *(void *)(i + 40);
      if (v4)
      {
        CFStringRef v23 = @"Assertions";
        uint64_t v20 = v4;
        CFIndex v5 = 3;
      }
      else
      {
        CFIndex v5 = 2;
      }
      uint64_t v6 = *(void **)(i + 48);
      if (v6)
      {
        keys[v5] = @"Advisories";
        values[v5++] = v6;
      }
      CFDictionaryRef v7 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFRelease(v2);
      CFRelease(v3);
      if (v7)
      {
        CFArrayAppendValue(Mutable, v7);
        CFRelease(v7);
      }
    }
  }
  CFDataRef Data = CFPropertyListCreateData(0, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  CFRelease(Mutable);
  CFIndex Length = CFDataGetLength(Data);
  size_t v10 = Length + 200;
  if ((unint64_t)(Length + 200) <= 0x8000)
  {
    size_t v16 = Length;
    uint64_t v15 = malloc_type_calloc(1uLL, v10, 0x648346uLL);
    *uint64_t v15 = 1;
    v15[1] = v16;
    __strlcpy_chk();
    BytePtr = CFDataGetBytePtr(Data);
    memcpy(v15 + 50, BytePtr, v16);
  }
  else
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11, v12, v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136315650;
      *(void *)(v14 + 4) = "IPMonitorControlCopyOSStateData";
      *(_WORD *)(v14 + 12) = 2048;
      *(void *)(v14 + 14) = v10;
      *(_WORD *)(v14 + 22) = 1024;
      *(_DWORD *)(v14 + 24) = 0x8000;
      __SC_log_send();
    }
    uint64_t v15 = 0;
  }
  CFRelease(Data);
  return v15;
}

void sub_10002EB14(void *key, uint64_t a2, CFDictionaryRef *a3)
{
  CFNumberRef v5 = (CFNumberRef)qword_10007DC78;
  if (!qword_10007DC78)
  {
    int valuePtr = 2;
    CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    qword_10007DC78 = (uint64_t)v5;
  }
  if (!*a3)
  {
    CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *a3 = Mutable;
    goto LABEL_8;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*a3, key);
  if (!Value || CFNumberCompare(v5, Value, 0) == kCFCompareGreaterThan)
  {
    CFArrayRef Mutable = *a3;
LABEL_8:
    CFDictionarySetValue(Mutable, key, v5);
  }
}

void sub_10002EBFC(void *key, const __CFNumber *a2, CFDictionaryRef *a3)
{
  if (*a3)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*a3, key);
    if (Value && CFNumberCompare(a2, Value, 0) != kCFCompareGreaterThan) {
      return;
    }
    CFArrayRef Mutable = *a3;
  }
  else
  {
    CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *a3 = Mutable;
  }

  CFDictionarySetValue(Mutable, key, a2);
}

void *sub_100030690(unsigned int *a1)
{
  if (!a1) {
    return 0;
  }
  size_t v2 = 4 * a1[1] + 224 * a1[1] + 40;
  CFStringRef v3 = malloc_type_malloc(v2, 0xA2812E09uLL);
  uint64_t v4 = v3;
  if (v3) {
    memcpy(v3, a1, v2);
  }
  return v4;
}

_DWORD *sub_10003073C(_DWORD *a1, unsigned int a2)
{
  if (!a1 && !a2) {
    return 0;
  }
  if (a1 && a1[1] >= (signed int)a2) {
    return a1;
  }
  size_t v5 = 4 * a2 + 224 * a2 + 40;
  uint64_t v4 = malloc_type_malloc(v5, 0x9669113DuLL);
  bzero(v4, v5);
  *uint64_t v4 = 538379777;
  v4[1] = a2;
  if (a1)
  {
    int v6 = a1[3];
    v4[3] = v6;
    if (v6 >= 1) {
      memcpy(&v4[28 * a2 + 10], &a1[28 * a1[1] + 10], 112 * (int)a1[3]);
    }
    int v7 = a1[2];
    _OWORD v4[2] = v7;
    if (v7 <= 0)
    {
      int v8 = v4[1];
      int v9 = v8 - a1[1];
    }
    else
    {
      memcpy(v4 + 10, a1 + 10, 112 * (int)a1[2]);
      int v8 = v4[1];
      int v9 = v8 - a1[1];
      size_t v10 = v4 + 16;
      do
      {
        if (*v10) {
          *v10 += v9;
        }
        v10 += 28;
        --v7;
      }
      while (v7);
    }
    int v11 = v4[3];
    if (v11 >= 1)
    {
      uint64_t v12 = &v4[28 * v8 + 16];
      do
      {
        if (*v12) {
          *v12 -= v9;
        }
        v12 += 28;
        --v11;
      }
      while (v11);
    }
    sub_1000308F0(v4);
    free(a1);
  }
  else
  {
    *((void *)v4 + 1) = 0;
  }
  return v4;
}

_DWORD *sub_1000308F0(_DWORD *result)
{
  uint64_t v1 = result;
  result[4] = 0;
  int v2 = result[1];
  if (v2 < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    int v3 = result[2];
    BOOL v4 = v3 <= 0;
    BOOL v5 = v3 > 0;
    if (v4) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = (uint64_t)(result + 10);
    }
    if ((int)result[3] >= 1)
    {
      uint64_t v7 = (uint64_t)&result[28 * v2 + 10];
      BOOL v8 = 1;
LABEL_10:
      int v9 = 0;
      LODWORD(v10) = 0;
      while (1)
      {
        if (v5 && v8)
        {
          if (*(_DWORD *)(v6 + 28) > *(_DWORD *)(v7 + 28)) {
            goto LABEL_18;
          }
        }
        else if (!v5)
        {
LABEL_18:
          uint64_t result = (_DWORD *)sub_100033710((uint64_t)v1, (char *)v7);
          ++v9;
          int v11 = v1[1];
          if (v11 <= v9 || v1[3] <= v9) {
            uint64_t v7 = 0;
          }
          else {
            uint64_t v7 = (uint64_t)&v1[28 * v11 + 10 + 28 * v9];
          }
          goto LABEL_23;
        }
        uint64_t result = (_DWORD *)sub_100033710((uint64_t)v1, (char *)v6);
        uint64_t v10 = (int)v10 + 1;
        if (v1[1] <= (int)v10 || v1[2] <= (int)v10) {
          uint64_t v6 = 0;
        }
        else {
          uint64_t v6 = (uint64_t)&v1[28 * v10 + 10];
        }
LABEL_23:
        BOOL v5 = v6 != 0;
        BOOL v8 = v7 != 0;
        if (!(v6 | v7)) {
          return result;
        }
      }
    }
  }
  BOOL v5 = v6 != 0;
  if (v6)
  {
    BOOL v8 = 0;
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_100030A68(_DWORD *a1, const char *a2, int a3, char a4, unsigned int a5, _OWORD *a6, unsigned __int8 *a7, int a8)
{
  if (!a1) {
    sub_10006522C();
  }
  int v11 = a1 + 3;
  uint64_t v12 = 3;
  if (a3 == 2) {
    uint64_t v12 = 2;
  }
  unint64_t v42 = a1 + 2;
  if (a3 == 2) {
    uint64_t v13 = a1 + 2;
  }
  else {
    uint64_t v13 = a1 + 3;
  }
  int v14 = a1[v12];
  if (v14 <= a1[1] && v14 >= 1)
  {
    for (uint64_t i = 0; v14 != i; ++i)
    {
      int v31 = a1[1];
      if (v31 <= (int)i || *v13 <= (int)i) {
        break;
      }
      if (a3 != 30) {
        int v31 = 0;
      }
      uint64_t v32 = i + v31;
      uint64_t v20 = (uint64_t)&a1[28 * v32 + 10];
      ifname = (const char *)nwi_ifstate_get_ifname();
      if (!strcmp(a2, ifname))
      {
        unsigned int v34 = a5;
        if (a1[28 * v32 + 17] < a5) {
          return 0;
        }
        goto LABEL_44;
      }
    }
  }
  if (a3 == 2)
  {
    int v17 = a1[1];
    int v16 = a1[2];
    uint64_t v18 = v42;
    int v19 = v16;
  }
  else
  {
    int v17 = a1[1];
    int v16 = a1[3];
    int v19 = v16 + v17;
    uint64_t v18 = v11;
  }
  if (v16 != v17)
  {
    int v21 = v19;
    uint64_t v20 = (uint64_t)&a1[28 * v19 + 10];
    if (v16 >= 1) {
      *(void *)&a1[28 * v19 - 14] &= ~0x1000uLL;
    }
    *(_OWORD *)&a1[28 * v19 + 30] = 0u;
    *(_OWORD *)&a1[28 * v19 + 34] = 0u;
    *(_OWORD *)&a1[28 * v19 + 22] = 0u;
    *(_OWORD *)&a1[28 * v19 + 26] = 0u;
    *(_OWORD *)&a1[28 * v19 + 14] = 0u;
    *(_OWORD *)&a1[28 * v19 + 18] = 0u;
    *(_OWORD *)uint64_t v20 = 0u;
    __strlcpy_chk();
    uint64_t v22 = &a1[28 * v21];
    *((unsigned char *)v22 + 72) = a3;
    *((void *)v22 + 7) |= 0x1000uLL;
    ++*v18;
    uint64_t v23 = 2;
    if (a3 == 2) {
      uint64_t v23 = 3;
    }
    else {
      int v11 = v42;
    }
    int v24 = a1[v23];
    if (v24 >= 1 && v24 <= a1[1])
    {
      for (uint64_t j = 0; v24 != j; ++j)
      {
        int v26 = a1[1];
        if (v26 <= (int)j || *v11 <= (int)j) {
          break;
        }
        if (a3 != 2) {
          int v26 = 0;
        }
        uint64_t v27 = j + v26;
        uint64_t v28 = (uint64_t)&a1[28 * v27 + 10];
        uint64_t v29 = (const char *)nwi_ifstate_get_ifname();
        if (!strcmp((const char *)v20, v29))
        {
          a1[28 * v21 + 16] = -1227133513 * ((unint64_t)(v28 - v20) >> 4);
          a1[28 * v27 + 16] = -1227133513 * ((unint64_t)(v20 - v28) >> 4);
          break;
        }
      }
    }
    unsigned int v34 = a5;
LABEL_44:
    if (a6)
    {
      if (a3 == 30)
      {
        *(_OWORD *)(v20 + 36) = *a6;
        if (!a7) {
          goto LABEL_53;
        }
LABEL_49:
        if (a7[1])
        {
          size_t v35 = *a7;
          if ((v35 - 29) >= 0xFFFFFFE4) {
            memcpy((void *)(v20 + 64), a7, v35);
          }
          goto LABEL_54;
        }
LABEL_53:
        *(void *)(v20 + 64) = 0;
        *(void *)(v20 + 72) = 0;
        *(_DWORD *)(v20 + 88) = 0;
        *(void *)(v20 + 80) = 0;
LABEL_54:
        *(_DWORD *)(v20 + 60) = a8;
        *(_DWORD *)(v20 + 28) = v34;
        *(unsigned char *)(v20 + 16) = a4;
        return v20;
      }
      if (a3 == 2) {
        *(_DWORD *)(v20 + 36) = *(_DWORD *)a6;
      }
    }
    if (!a7) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  syslog(3, "nwi_state_add_ifstate: full at count %d\n", v17);
  return 0;
}

_DWORD *sub_100030DA8(int *a1, int *a2)
{
  if (a1)
  {
    if (a1[2] <= a1[3]) {
      unsigned int v4 = a1[3];
    }
    else {
      unsigned int v4 = a1[2];
    }
    if (!a2)
    {
      if (v4)
      {
        BOOL v5 = sub_10003073C(0, v4);
LABEL_20:
        if (a1[2] >= 1)
        {
          int v12 = 0;
          uint64_t v13 = (long long *)(a1 + 10);
          do
          {
            sub_100033A3C(v5, v13);
            ++v12;
            v13 += 7;
          }
          while (v12 < a1[2]);
        }
        if (a1[3] >= 1)
        {
          int v14 = 0;
          uint64_t v15 = (long long *)&a1[28 * a1[1] + 10];
          do
          {
            sub_100033A3C(v5, v15);
            ++v14;
            v15 += 7;
          }
          while (v14 < a1[3]);
        }
        return v5;
      }
      return 0;
    }
  }
  else
  {
    if (!a2) {
      return 0;
    }
    unsigned int v4 = 0;
  }
  int v6 = a2[2];
  if (v6 <= a2[3]) {
    int v6 = a2[3];
  }
  unsigned int v7 = v6 + v4;
  if (!v7) {
    return 0;
  }
  BOOL v5 = sub_10003073C(0, v7);
  if (a2[2] >= 1)
  {
    int v8 = 0;
    int v9 = (long long *)(a2 + 10);
    do
    {
      sub_1000337F4(v5, (uint64_t)a1, v9);
      ++v8;
      v9 += 7;
    }
    while (v8 < a2[2]);
  }
  if (a2[3] >= 1)
  {
    int v10 = 0;
    int v11 = (long long *)&a2[28 * a2[1] + 10];
    do
    {
      sub_1000337F4(v5, (uint64_t)a1, v11);
      ++v10;
      v11 += 7;
    }
    while (v10 < a2[3]);
  }
  if (a1) {
    goto LABEL_20;
  }
  return v5;
}

uint64_t sub_100030F60(uint64_t result, uint64_t a2, _DWORD *a3)
{
  if (a2 && a3)
  {
    BOOL v5 = (_DWORD *)result;
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v23 = a2 + 40;
    if (*(int *)(a2 + 8) >= 1)
    {
      int v7 = 0;
      uint64_t v8 = a2 + 40;
      do
      {
        uint64_t result = sub_100031170(a3, (const char *)v8);
        uint64_t v9 = v6;
        if (!result)
        {
          if (!v5 || ((uint64_t v10 = v5[2], (int)v10 >= 1) ? (v11 = (int)v10 <= v5[1]) : (v11 = 0), !v11)) {
LABEL_37:
          }
            sub_100065258();
          uint64_t v12 = 0;
          uint64_t v13 = (uint64_t *)(v5 + 23);
          while (1)
          {
            if (v12 >= (int)v5[1] || v12 >= (int)v5[2]) {
              goto LABEL_37;
            }
            ifname = (const char *)nwi_ifstate_get_ifname();
            uint64_t result = strcmp((const char *)v8, ifname);
            if (!result) {
              break;
            }
            ++v12;
            v13 += 14;
            if (v10 == v12) {
              goto LABEL_37;
            }
          }
          uint64_t v9 = *v13;
        }
        *(void *)(v8 + 52) = v9;
        ++v7;
        v8 += 112;
      }
      while (v7 < *(_DWORD *)(a2 + 8));
    }
    if (*(int *)(a2 + 12) >= 1)
    {
      int v15 = 0;
      uint64_t v16 = v23 + 112 * *(int *)(a2 + 4);
      do
      {
        uint64_t result = nwi_ifstate_get_generation();
        if (result != v6)
        {
          uint64_t result = sub_100031170(a3, (const char *)v16);
          uint64_t v17 = v6;
          if (!result)
          {
            if (!v5 || (int v18 = v5[3], v18 < 1) || v18 > v5[1]) {
LABEL_38:
            }
              sub_100065284();
            int v19 = 0;
            while (1)
            {
              int v20 = v5[1];
              if (v20 <= v19 || v5[3] <= v19) {
                goto LABEL_38;
              }
              int v21 = v19 + v20;
              uint64_t v22 = (const char *)nwi_ifstate_get_ifname();
              uint64_t result = strcmp((const char *)v16, v22);
              if (!result) {
                break;
              }
              if (v18 == ++v19) {
                goto LABEL_38;
              }
            }
            uint64_t v17 = *(void *)&v5[28 * v21 + 23];
          }
          *(void *)(v16 + 52) = v17;
        }
        ++v15;
        v16 += 112;
      }
      while (v15 < *(_DWORD *)(a2 + 12));
    }
  }
  return result;
}

BOOL sub_100031170(_DWORD *a1, const char *a2)
{
  if (a1)
  {
    uint64_t v4 = a1[2];
    if ((int)v4 >= 1 && (int)v4 <= a1[1])
    {
      uint64_t v9 = 0;
      uint64_t v10 = a1 + 10;
      while (v9 < (int)a1[1] && v9 < (int)a1[2])
      {
        ifname = (const char *)nwi_ifstate_get_ifname();
        if (!strcmp(a2, ifname))
        {
          if ((*((unsigned char *)v10 + 17) & 0xF) == 0) {
            break;
          }
          return 1;
        }
        ++v9;
        v10 += 28;
        if (v4 == v9) {
          break;
        }
      }
    }
    int v6 = a1[3];
    if (v6 >= 1 && v6 <= a1[1])
    {
      for (int i = 0; v6 != i; ++i)
      {
        int v13 = a1[1];
        if (v13 <= i || a1[3] <= i) {
          break;
        }
        int v14 = i + v13;
        int v15 = (const char *)nwi_ifstate_get_ifname();
        if (!strcmp(a2, v15)) {
          return (a1[28 * v14 + 14] & 0xF00) != 0;
        }
      }
    }
  }
  return 0;
}

double sub_1000312D0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    memset(&v6, 0, sizeof(v6));
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    CC_SHA256_Init(&v6);
    CC_SHA256_Update(&v6, (const void *)a1, 228 * *(_DWORD *)(a1 + 4) + 40);
    CC_SHA256_Final((unsigned __int8 *)a2, &v6);
    *(void *)(a1 + 32) = v4;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100031390(int a1, const void *a2, void *a3, size_t a4)
{
  CFTypeID TypeID = CFStringGetTypeID();
  if (!a2
    || CFGetTypeID(a2) != TypeID
    || a1 != 2 && (a1 != 30 || a4 < 0x10)
    || (_SC_cfstring_to_cstring(), uint64_t result = inet_pton(a1, v10, a3), result != 1))
  {
    bzero(a3, a4);
    return 0;
  }
  return result;
}

CFDictionaryRef sub_100031470(const __CFDictionary *a1, int a2)
{
  int v2 = (const void **)&kSCEntNetIPv6;
  if (a2 == 2) {
    int v2 = (const void **)&kSCEntNetIPv4;
  }
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(a1, *v2);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)sub_100033BC8(result);
    if (result)
    {
      __int16 v4 = *((_WORD *)result + 4);
      if ((v4 & 2) != 0) {
        return (const __CFDictionary *)((v4 & 1) == 0);
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1000314FC(const __CFDictionary *a1)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, kSCEntNetIPv4);
  if (result || (uint64_t result = (uint64_t)CFDictionaryGetValue(a1, kSCEntNetIPv6)) != 0)
  {
    uint64_t result = (uint64_t)sub_1000315FC((const __CFDictionary *)result);
    if (result)
    {
      uint64_t result = CFStringGetCString((CFStringRef)result, buffer, 16, 0x8000100u);
      if (result)
      {
        uint64_t result = nwi_state_get_ifstate();
        if (result)
        {
          uint64_t v3 = *(void *)(result + 16);
          if ((v3 & 8) != 0)
          {
            return 1;
          }
          else
          {
            int v4 = *(unsigned __int8 *)(result + 32);
            if (v4 == 2) {
              int v5 = 30;
            }
            else {
              int v5 = 2;
            }
            if (v5 == v4) {
              return (v3 >> 3) & 1;
            }
            int v6 = *(_DWORD *)(result + 24);
            if (v6)
            {
              uint64_t v3 = *(void *)(result + 112 * v6 + 16);
              return (v3 >> 3) & 1;
            }
            return 0;
          }
        }
      }
    }
  }
  return result;
}

const void *sub_1000315FC(const __CFDictionary *a1)
{
  if (!a1) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, @"Service");
  if (!Value) {
    return 0;
  }

  return CFDictionaryGetValue(Value, kSCPropInterfaceName);
}

const void *sub_10003169C(void *a1)
{
  CFDictionaryRef v1 = (const __CFDictionary *)sub_100031738(a1, kSCEntNetIPv4);
  if (!v1) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v1, @"Service");
  if (!Value) {
    return 0;
  }
  uint64_t v3 = CFDictionaryGetValue(Value, @"Hostname");
  int v4 = v3;
  if (v3) {
    CFRetain(v3);
  }
  return v4;
}

const void *sub_100031738(void *key, const void *a2)
{
  if (!qword_10007DCA8) {
    return 0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DCA8, key);
  if (!Value) {
    return 0;
  }

  return CFDictionaryGetValue(Value, a2);
}

BOOL sub_1000317E4(void *a1)
{
  CFDictionaryRef v2 = (const __CFDictionary *)sub_100031738(a1, kSCEntNetIPv4);
  if (!v2)
  {
    CFDictionaryRef v2 = (const __CFDictionary *)sub_100031738(a1, kSCEntNetIPv6);
    if (!v2) {
      return 0;
    }
  }
  CFStringRef v3 = (const __CFString *)sub_1000315FC(v2);
  if (!v3) {
    return 0;
  }
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v3, kSCEntNetLink);
  CFPropertyListRef v5 = SCDynamicStoreCopyValue((SCDynamicStoreRef)qword_10007DC90, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  if (!v5) {
    return 0;
  }
  BOOL v6 = sub_100033C5C(v5);
  CFRelease(v5);
  return v6;
}

void sub_1000318EC()
{
  sub_1000319C0(0, 0, 0);
  if (qword_10007DC90)
  {
    if (qword_10007DDC0 != -1) {
      dispatch_once(&qword_10007DDC0, &stru_100076C38);
    }
    dispatch_async((dispatch_queue_t)qword_10007DDC8, &stru_100076950);
    process_AgentMonitor();
  }
}

void sub_1000319C0(const void *a1, char *a2, uint64_t a3)
{
  CFStringRef v3 = a2;
  if (a3)
  {
    if (a1 && a2)
    {
      CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (*((_DWORD *)v3 + 10))
      {
        CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%d.%d.%d.%d", *((_DWORD *)v3 + 10), BYTE1(*((_DWORD *)v3 + 10)), BYTE2(*((_DWORD *)v3 + 10)), HIBYTE(*((_DWORD *)v3 + 10)));
        CFDictionarySetValue(Mutable, kSCPropNetIPv4Router, v7);
        CFRelease(v7);
      }
      uint64_t v8 = (const char *)sub_10002B5F8(*((_DWORD *)v3 + 4), (uint64_t)v23);
      if (v8)
      {
        CFStringRef v9 = CFStringCreateWithCString(0, v8, 0x600u);
        if (v9)
        {
          CFStringRef v10 = v9;
          CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryInterface, v9);
          CFRelease(v10);
        }
      }
      CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryService, a1);
      sub_100033D18(a3, (const void *)qword_10007DCB0, Mutable);
      CFRelease(Mutable);
    }
    else
    {
      BOOL v11 = (const void *)qword_10007DCB0;
      sub_100034064(*(const __CFArray **)(a3 + 8), (const void *)qword_10007DCB0);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 16), v11);
    }
  }
  unsigned int v12 = sub_100033DCC();
  if (v12 != -1)
  {
    unsigned int v13 = v12;
    if (v3)
    {
      sub_100034118((uint64_t)off_100076A30, (int *)v3);
    }
    else
    {
      CFStringRef v3 = (char *)malloc_type_malloc(0x30uLL, 0x9129817AuLL);
      *(_OWORD *)(v3 + 24) = 0u;
      *(_OWORD *)(v3 + 8) = 0u;
      *((void *)v3 + 5) = 0;
      *(void *)CFStringRef v3 = 0x100000001;
      *((void *)v3 + 4) = 0xFFFFFF000000E0;
      *((_DWORD *)v3 + 3) = 24;
      *((_DWORD *)v3 + 4) = sub_10002BCC0();
    }
    if (byte_10007DC9C == 1)
    {
      if (qword_10007DCB8)
      {
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v14 = _os_log_pack_size();
          __chkstk_darwin(v14, v15, v16);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
        sub_100033F28((unsigned int *)qword_10007DCB8);
      }
      else
      {
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v17 = _os_log_pack_size();
          __chkstk_darwin(v17, v18, v19);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
      }
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v20 = _os_log_pack_size();
        __chkstk_darwin(v20, v21, v22);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      sub_100033F28((unsigned int *)v3);
    }
    sub_100035198((uint64_t (**)(void))off_100076A30, qword_10007DCB8, (int *)v3, v13);
    close(v13);
  }
  if (qword_10007DCB8) {
    free((void *)qword_10007DCB8);
  }
  qword_10007DCB8 = (uint64_t)v3;
}

void sub_100031E6C(id a1)
{
  sub_100031EC4();
}

void sub_100031EC4()
{
  values[0] = (void *)qword_10007DCC8;
  values[1] = (void *)qword_10007DCD0;
  values[2] = (void *)qword_10007DCD8;
  CFArrayRef v0 = CFArrayCreate(0, (const void **)values, 3, &kCFTypeArrayCallBacks);
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  sub_100035B40(kSCCompAnyRegex, Mutable);
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetPPP);
  CFArrayAppendValue(Mutable, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFStringRef v3 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetVPN);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v3);
  CFStringRef v4 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetInterface);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v4);
  sub_100035CD8(kSCCompAnyRegex, Mutable);
  sub_100048CEC(Mutable);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetInterfaceDelegation);
  CFArrayAppendValue(Mutable, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  if (SCDynamicStoreSetNotificationKeys((SCDynamicStoreRef)qword_10007DC90, v0, Mutable))
  {
    BOOL v6 = (const __SCDynamicStore *)qword_10007DC90;
    if (qword_10007DDC0 != -1) {
      dispatch_once(&qword_10007DDC0, &stru_100076C38);
    }
    if (SCDynamicStoreSetDispatchQueue(v6, (dispatch_queue_t)qword_10007DDC8))
    {
      sub_100035840(v0, Mutable);
      goto LABEL_14;
    }
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_13:
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      int v11 = SCError();
      unsigned int v12 = SCErrorString(v11);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v12;
      __SC_log_send();
    }
  }
  else
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_13;
    }
  }
LABEL_14:
  CFRelease(v0);
  CFRelease(Mutable);
}

void sub_10003227C(CFBundleRef bundle, int a2)
{
  if (qword_10007DDC0 != -1) {
    dispatch_once(&qword_10007DDC0, &stru_100076C38);
  }
  CFStringRef v4 = qword_10007DDC8;
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(bundle);
  if (InfoDictionary)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(InfoDictionary, @"AppendStateArrayToSetupArray");
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID) {
      int v8 = CFBooleanGetValue(Value);
    }
    else {
      int v8 = 0;
    }
    dword_10007DC98 = v8;
  }
  if (a2)
  {
    byte_10007DC9C = 1;
    byte_10007DC9D = 1;
  }
  if (qword_10007DDC0 != -1) {
    dispatch_once(&qword_10007DDC0, &stru_100076C38);
  }
  sub_100055E20();
  sub_100043E7C();
  sub_100029F14((uint64_t)bundle, &stru_100076990);
  sub_100044F20((uint64_t)bundle, &stru_1000769F0);
  sub_100026838(bundle);
  sub_100046E94(bundle);
  sub_100032FE0();
  sub_100033518();
  if (qword_10007DC90) {
    sub_1000264C8((uint64_t)v4, (uint64_t)sub_100033678);
  }
  sub_100047030(v4);
  if (&_wd_endpoint_add_queue) {
    wd_endpoint_add_queue();
  }
}

void sub_10003243C(id a1, unsigned __int8 a2)
{
  if (qword_10007DDD0 != -1) {
    dispatch_once(&qword_10007DDD0, &stru_100076C78);
  }
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_100032510;
  v3[3] = &unk_1000769B0;
  unsigned __int8 v4 = a2;
  dispatch_async((dispatch_queue_t)qword_10007DDD8, v3);
}

void sub_100032510(uint64_t a1)
{
  byte_10007D998 = *(unsigned char *)(a1 + 32);
  if (!byte_10007D998 || (dword_10007DCA0 & 2) != 0)
  {
    sub_100032744();
  }
  else
  {
    sub_1000325BC(2);
  }
}

void sub_1000325BC(int a1)
{
  if (qword_10007DDD0 != -1) {
    dispatch_once(&qword_10007DDD0, &stru_100076C78);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)qword_10007DDD8);
  int v2 = dword_10007DCA0;
  if (!dword_10007DCA0)
  {
    gettimeofday((timeval *)&qword_10007DDE0, 0);
    int v2 = dword_10007DCA0;
  }
  dword_10007DCA0 = v2 | a1;
  if (qword_10007DDF0)
  {
    dispatch_source_cancel((dispatch_source_t)qword_10007DDF0);
    dispatch_release((dispatch_object_t)qword_10007DDF0);
    qword_10007DDF0 = 0;
    byte_10007DDF8 = 0;
  }
  if (!byte_10007D998 || !byte_10007D999)
  {
    if (qword_10007DDD0 != -1) {
      dispatch_once(&qword_10007DDD0, &stru_100076C78);
    }
    qword_10007DDF0 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)qword_10007DDD8);
    dispatch_source_set_event_handler((dispatch_source_t)qword_10007DDF0, &stru_100076CB8);
    CFStringRef v3 = qword_10007DDF0;
    dispatch_time_t v4 = dispatch_time(0, 5000000000);
    dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
    dispatch_resume((dispatch_object_t)qword_10007DDF0);
  }

  sub_100032744();
}

void sub_100032744()
{
  if (qword_10007DDD0 != -1) {
    dispatch_once(&qword_10007DDD0, &stru_100076C78);
  }
  dispatch_assert_queue_V2((dispatch_queue_t)qword_10007DDD8);
  if (dword_10007DCA0)
  {
    if ((byte_10007DDF8 & 1) != 0 || byte_10007D998 && byte_10007D999)
    {
      if (qword_10007DDF0)
      {
        dispatch_source_cancel((dispatch_source_t)qword_10007DDF0);
        dispatch_release((dispatch_object_t)qword_10007DDF0);
        qword_10007DDF0 = 0;
        byte_10007DDF8 = 0;
      }
      v44.tv_seCC_SHA256_CTX c = 0;
      *(void *)&v44.tv_useCC_SHA256_CTX c = 0;
      gettimeofday(&v44, 0);
      tv_seCC_SHA256_CTX c = v44.tv_sec;
      uint64_t v1 = qword_10007DDE0;
      int v2 = v44.tv_usec - dword_10007DDE8;
      if (v44.tv_usec >= dword_10007DDE8) {
        int v3 = v44.tv_usec - dword_10007DDE8;
      }
      else {
        int v3 = v44.tv_usec - dword_10007DDE8 + 1000000;
      }
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        __darwin_time_t v4 = tv_sec - v1 + (v2 >> 31);
        uint64_t v5 = _os_log_pack_size();
        __chkstk_darwin(v5, v6, v7);
        __error();
        uint64_t v8 = _os_log_pack_fill();
        uint64_t v9 = "delayed";
        BOOL v10 = byte_10007DDF8 == 0;
        int v11 = dword_10007DCA0;
        *(_DWORD *)uint64_t v8 = 136315906;
        if (!v10) {
          uint64_t v9 = "timeout";
        }
        *(void *)(v8 + 4) = v9;
        *(_WORD *)(v8 + 12) = 2048;
        *(void *)(v8 + 14) = v4;
        *(_WORD *)(v8 + 22) = 1024;
        *(_DWORD *)(v8 + 24) = v3;
        *(_WORD *)(v8 + 28) = 1024;
        *(_DWORD *)(v8 + 30) = v11;
        __SC_log_send();
      }
      char v12 = dword_10007DCA0;
      if ((dword_10007DCA0 & 2) != 0)
      {
        process_AgentMonitor_DNS();
        char v12 = dword_10007DCA0;
      }
      if (v12)
      {
        uint32_t v13 = notify_post("com.apple.system.config.network_change.nwi");
        if (v13)
        {
          uint32_t v14 = v13;
          if (!qword_10007DC80) {
            qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v15 = _os_log_pack_size();
            __chkstk_darwin(v15, v16, v17);
            __error();
            uint64_t v18 = (_DWORD *)_os_log_pack_fill();
            *uint64_t v18 = 67109120;
            v18[1] = v14;
            __SC_log_send();
          }
        }
      }
      if ((dword_10007DCA0 & 2) != 0)
      {
        uint32_t v19 = notify_post("com.apple.system.config.network_change.dns");
        if (v19)
        {
          uint32_t v20 = v19;
          if (!qword_10007DC80) {
            qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v21 = _os_log_pack_size();
            __chkstk_darwin(v21, v22, v23);
            __error();
            int v24 = (_DWORD *)_os_log_pack_fill();
            *int v24 = 67109120;
            v24[1] = v20;
            __SC_log_send();
          }
        }
      }
      if ((dword_10007DCA0 & 4) != 0)
      {
        process_AgentMonitor_Proxy();
        uint32_t v25 = notify_post("com.apple.system.config.proxy_change");
        if (v25)
        {
          uint32_t v26 = v25;
          if (!qword_10007DC80) {
            qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v27 = _os_log_pack_size();
            __chkstk_darwin(v27, v28, v29);
            __error();
            unint64_t v30 = (_DWORD *)_os_log_pack_fill();
            *unint64_t v30 = 67109120;
            v30[1] = v26;
            __SC_log_send();
          }
        }
      }
      unsigned int v31 = dword_10007DCA0;
      if ((dword_10007DCA0 & 0x10) != 0)
      {
        if (qword_10007DD38 || qword_10007DD40 || qword_10007DD48)
        {
          sub_100048D90((CFTypeRef)qword_10007DD38, (CFTypeRef)qword_10007DD40, (CFTypeRef)qword_10007DD48);
          if (qword_10007DD38)
          {
            CFRelease((CFTypeRef)qword_10007DD38);
            qword_10007DD38 = 0;
          }
          if (qword_10007DD40)
          {
            CFRelease((CFTypeRef)qword_10007DD40);
            qword_10007DD40 = 0;
          }
          if (qword_10007DD48)
          {
            CFRelease((CFTypeRef)qword_10007DD48);
            qword_10007DD48 = 0;
          }
        }
        unsigned int v31 = dword_10007DCA0 & 0xFFFFFFEF;
        dword_10007DCA0 &= ~0x10u;
      }
      if (v31)
      {
        uint32_t v32 = notify_post("com.apple.system.config.network_change");
        if (v32)
        {
          uint32_t v33 = v32;
          if (!qword_10007DC80) {
            qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v34 = _os_log_pack_size();
            __chkstk_darwin(v34, v35, v36);
            __error();
            unsigned int v37 = (_DWORD *)_os_log_pack_fill();
            *unsigned int v37 = 67109120;
            v37[1] = v33;
            __SC_log_send();
          }
        }
      }
      dword_10007DCA0 = 0;
    }
    else
    {
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v38 = _os_log_pack_size();
        __chkstk_darwin(v38, v39, v40);
        __error();
        uint64_t v41 = _os_log_pack_fill();
        if (byte_10007D998) {
          unint64_t v42 = "DNS";
        }
        else {
          unint64_t v42 = "!DNS";
        }
        int64_t v43 = "nwi";
        if (!byte_10007D999) {
          int64_t v43 = "!nwi";
        }
        *(_DWORD *)uint64_t v41 = 136315394;
        *(void *)(v41 + 4) = v42;
        *(_WORD *)(v41 + 12) = 2080;
        *(void *)(v41 + 14) = v43;
        __SC_log_send();
      }
    }
  }
}

void sub_100032EA8(id a1, unsigned __int8 a2)
{
  if (qword_10007DDD0 != -1) {
    dispatch_once(&qword_10007DDD0, &stru_100076C78);
  }
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_100032F7C;
  v3[3] = &unk_100076A10;
  unsigned __int8 v4 = a2;
  dispatch_async((dispatch_queue_t)qword_10007DDD8, v3);
}

void sub_100032F7C(uint64_t a1)
{
  byte_10007D999 = *(unsigned char *)(a1 + 32);

  sub_100032744();
}

char *sub_100032FE0()
{
  int v15 = 0;
  *(void *)uint64_t v17 = 0x2800000001;
  size_t v16 = 4;
  sysctl(v17, 2u, &v15, &v16, 0, 0);
  if (v15)
  {
    byte_10007DCC0 = 1;
  }
  else
  {
    if (sub_100044294())
    {
      if (qword_10007DE00 != -1) {
        dispatch_once(&qword_10007DE00, &stru_100076CF8);
      }
      BOOL v1 = (byte_10007DDFC & 1) == 0;
    }
    else
    {
      BOOL v1 = 1;
    }
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8, v9, v10);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      char v12 = "";
      if (!v1) {
        char v12 = "not ";
      }
      *(_DWORD *)uint64_t v11 = 136315138;
      *(void *)(v11 + 4) = v12;
      __SC_log_send();
    }
    if (v1)
    {
      uint64_t v13 = sub_100033DCC();
      if (v13 != -1)
      {
        int v14 = v13;
        sub_10004483C(v13);
        close(v14);
      }
    }
  }
  qword_10007DC90 = (uint64_t)SCDynamicStoreCreate(0, @"IPMonitor", (SCDynamicStoreCallBack)sub_100044238, 0);
  if (qword_10007DC90)
  {
    qword_10007DCB0 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainState, kSCEntNetIPv4);
    qword_10007DD68 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainState, kSCEntNetIPv6);
    qword_10007DDA0 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainState, kSCEntNetDNS);
    qword_10007DDB8 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainState, kSCEntNetProxies);
    qword_10007DCC8 = (uint64_t)SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainSetup, kSCEntNetIPv4);
    qword_10007DCF8 = (uint64_t)SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, &stru_100077F38, 0);
    qword_10007DD00 = (uint64_t)SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, &stru_100077F38, 0);
    qword_10007DCF0 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
    qword_10007DCA8 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    qword_10007DD28 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    qword_10007DD30 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    qword_10007DCD8 = (uint64_t)SCDynamicStoreKeyCreate(0, @"%@/%@/%@", kSCDynamicStoreDomainState, kSCCompNetwork, @"MulticastDNS");
    qword_10007DCD0 = (uint64_t)SCDynamicStoreKeyCreate(0, @"%@/%@/%@", kSCDynamicStoreDomainState, kSCCompNetwork, @"PrivateDNS");
    sub_100023538(0, 0, 0, 0, 0, 0);
    SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_10007DC90, (CFStringRef)qword_10007DDA0);
    qword_10007DE08 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.IPMonitor.proxy", 0);
    return _scprefs_observer_watch(2, "com.apple.SystemConfiguration.plist", qword_10007DE08, &stru_100076D38);
  }
  else
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = (char *)__SC_log_enabled();
    if (result)
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2, v3, v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      int v6 = SCError();
      uint64_t v7 = SCErrorString(v6);
      *(_DWORD *)uint64_t v5 = 136315138;
      *(void *)(v5 + 4) = v7;
      return (char *)__SC_log_send();
    }
  }
  return result;
}

uint64_t sub_100033518()
{
  if (qword_10007DDC0 != -1) {
    dispatch_once(&qword_10007DDC0, &stru_100076C38);
  }
  uint64_t result = sub_10002C414(qword_10007DDC8, &stru_100076D78);
  if (!result)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1, v2, v3);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      return __SC_log_send();
    }
  }
  return result;
}

void sub_100033678()
{
  CFArrayRef v0 = CFArrayCreate(0, (const void **)&off_100076D98, 1, &kCFTypeArrayCallBacks);
  sub_100035E78((const __SCDynamicStore *)qword_10007DC90, v0, 0);

  CFRelease(v0);
}

uint64_t sub_100033710(uint64_t result, char *__s2)
{
  if ((__s2[16] & 0x20) == 0)
  {
    uint64_t v2 = result;
    int v3 = *(_DWORD *)(result + 16);
    int v4 = *(_DWORD *)(result + 4);
    if (v3 < v4)
    {
      int v6 = (int *)(result + 224 * v4 + 40);
      if (v3 < 1)
      {
LABEL_6:
        *int v6 = -1227133513 * ((unint64_t)&__s2[-v2 - 40] >> 4);
        ++*(_DWORD *)(v2 + 16);
      }
      else
      {
        while (1)
        {
          uint64_t result = strcmp((const char *)(v2 + 40 + 112 * *v6), __s2);
          if (!result) {
            break;
          }
          ++v6;
          if (!--v3) {
            goto LABEL_6;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000337F4(_DWORD *a1, uint64_t a2, long long *a3)
{
  int v6 = *((unsigned __int8 *)a3 + 32);
  uint64_t result = nwi_ifstate_get_ifname();
  if (a2)
  {
    uint64_t v8 = v6 == 2 ? 8 : 12;
    int v9 = *(_DWORD *)(a2 + v8);
    if (v9 <= *(_DWORD *)(a2 + 4) && v9 >= 1)
    {
      uint64_t v10 = (const char *)result;
      for (uint64_t i = 0; v9 != i; ++i)
      {
        int v12 = *(_DWORD *)(a2 + 4);
        if (v12 <= (int)i || *(_DWORD *)(a2 + v8) <= (int)i) {
          break;
        }
        if (v6 != 30) {
          int v12 = 0;
        }
        uint64_t v13 = a2 + 112 * (i + v12) + 40;
        ifname = (const char *)nwi_ifstate_get_ifname();
        uint64_t result = strcmp(v10, ifname);
        if (!result) {
          goto LABEL_15;
        }
      }
    }
  }
  uint64_t v13 = 0;
LABEL_15:
  if (!a1) {
    sub_10006522C();
  }
  if (*((unsigned char *)a3 + 32) == 2)
  {
    int v15 = a1 + 2;
    int v16 = a1[2];
  }
  else
  {
    int v15 = a1 + 3;
    int v16 = a1[3] + a1[1];
  }
  int v17 = v16;
  uint64_t v18 = &a1[28 * v16];
  long long v19 = a3[3];
  long long v20 = a3[4];
  long long v21 = a3[5];
  *(_OWORD *)(v18 + 34) = a3[6];
  *(_OWORD *)(v18 + 30) = v21;
  long long v22 = *a3;
  long long v23 = a3[1];
  *(_OWORD *)(v18 + 18) = a3[2];
  *(_OWORD *)(v18 + 14) = v23;
  *(_OWORD *)(v18 + 10) = v22;
  *(_OWORD *)(v18 + 26) = v20;
  *(_OWORD *)(v18 + 22) = v19;
  ++*v15;
  if (v13)
  {
    int v24 = &a1[28 * v17];
    uint64_t v27 = *((void *)v24 + 7);
    uint32_t v25 = (unint64_t *)(v24 + 14);
    uint64_t v26 = v27;
    if (v27 != *(unsigned char *)(v13 + 16))
    {
LABEL_21:
      unint64_t v28 = v26 & 0xFFFFFFFFFFFFF0FFLL | 0x300;
LABEL_22:
      *uint32_t v25 = v28;
      return result;
    }
    uint64_t v29 = &a1[28 * v17 + 19];
    if (*(unsigned char *)(v13 + 32) == 2)
    {
      if (*(_DWORD *)(v13 + 36) != *v29) {
        goto LABEL_21;
      }
    }
    else if (*(void *)(v13 + 36) != *(void *)v29 || *(void *)(v13 + 44) != *(void *)&a1[28 * v17 + 21])
    {
      goto LABEL_21;
    }
    unsigned int v31 = *(_DWORD *)(v13 + 28);
    unsigned int v32 = a1[28 * v17 + 17];
    BOOL v33 = v31 > v32;
    if (v31 >= v32)
    {
      unint64_t v28 = v26 & 0xFFFFFFFFFFFFF0FFLL;
      if (v33) {
        v28 |= 0x400uLL;
      }
      goto LABEL_22;
    }
    *uint32_t v25 = v26 & 0xFFFFFFFFFFFFF0FFLL | 0x500;
  }
  else
  {
    *(void *)&a1[28 * v17 + 14] = *(void *)&a1[28 * v17 + 14] & 0xFFFFFFFFFFFFF0FFLL | 0x100;
  }
  return result;
}

uint64_t sub_100033A3C(_DWORD *a1, long long *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 32);
  uint64_t result = nwi_ifstate_get_ifname();
  if (!a1) {
    sub_10006522C();
  }
  int v6 = a1 + 2;
  uint64_t v7 = 3;
  if (v4 == 2)
  {
    uint64_t v7 = 2;
    uint64_t v8 = a1 + 2;
  }
  else
  {
    uint64_t v8 = a1 + 3;
  }
  int v9 = a1[v7];
  if (v9 <= a1[1] && v9 >= 1)
  {
    uint64_t v18 = (const char *)result;
    int v19 = 0;
    do
    {
      if (a1[1] <= v19 || *v8 <= v19) {
        break;
      }
      ifname = (const char *)nwi_ifstate_get_ifname();
      uint64_t result = strcmp(v18, ifname);
      if (!result) {
        return result;
      }
      ++v19;
    }
    while (v9 != v19);
  }
  if (*((unsigned char *)a2 + 32) == 2)
  {
    int v11 = *v6;
  }
  else
  {
    int v11 = a1[3] + a1[1];
    int v6 = a1 + 3;
  }
  int v12 = &a1[28 * v11];
  long long v13 = a2[3];
  long long v14 = a2[4];
  long long v15 = a2[5];
  *(_OWORD *)(v12 + 34) = a2[6];
  *(_OWORD *)(v12 + 30) = v15;
  long long v16 = a2[2];
  long long v17 = *a2;
  *(_OWORD *)(v12 + 14) = a2[1];
  *(_OWORD *)(v12 + 18) = v16;
  *(_OWORD *)(v12 + 10) = v17;
  *(_OWORD *)(v12 + 26) = v14;
  *(_OWORD *)(v12 + 22) = v13;
  ++*v6;
  *((void *)v12 + 7) = *((void *)v12 + 7) & 0xFFFFFFFFFFFFF0FFLL | 0x200;
  return result;
}

const UInt8 *sub_100033BC8(const __CFDictionary *a1)
{
  if (!a1) {
    return 0;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, @"Routes");
  if (!Value) {
    return 0;
  }

  return CFDataGetBytePtr(Value);
}

BOOL sub_100033C5C(const void *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (a1
    && CFGetTypeID(a1) == TypeID
    && (CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetLinkExpensive),
        CFTypeID v4 = CFBooleanGetTypeID(),
        Value)
    && CFGetTypeID(Value) == v4)
  {
    return CFBooleanGetValue(Value) != 0;
  }
  else
  {
    return 0;
  }
}

void sub_100033D18(uint64_t a1, const void *a2, const void *a3)
{
  CFArrayRef v6 = *(const __CFArray **)(a1 + 8);
  v10.length = CFArrayGetCount(v6);
  v10.location = 0;
  FirstIndexOfCFBooleanRef Value = CFArrayGetFirstIndexOfValue(v6, v10, a2);
  if (FirstIndexOfValue != -1) {
    CFArrayRemoveValueAtIndex(v6, FirstIndexOfValue);
  }
  uint64_t v8 = *(__CFDictionary **)(a1 + 16);

  CFDictionarySetValue(v8, a2, a3);
}

uint64_t sub_100033DCC()
{
  uint64_t v0 = socket(17, 3, 17);
  if (v0 == -1)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1, v2, v3);
      __error();
      uint64_t v4 = _os_log_pack_fill();
      uint64_t v5 = __error();
      CFArrayRef v6 = strerror(*v5);
      *(_DWORD *)uint64_t v4 = 136315138;
      *(void *)(v4 + 4) = v6;
      __SC_log_send();
    }
  }
  return v0;
}

void sub_100033F28(unsigned int *a1)
{
  uint64_t v1 = sub_1000350A8(a1);
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 138412290;
    *(void *)(v5 + 4) = v1;
    __SC_log_send();
  }
  CFRelease(v1);
}

void sub_100034064(const __CFArray *a1, const void *a2)
{
  v5.length = CFArrayGetCount(a1);
  v5.location = 0;
  if (!CFArrayContainsValue(a1, v5, a2))
  {
    CFArrayAppendValue(a1, a2);
  }
}

uint64_t sub_100034118(uint64_t result, int *a2)
{
  if (a2)
  {
    uint64_t v3 = result;
    uint64_t result = (*(uint64_t (**)(void))result)(0);
    if (*a2 >= 1)
    {
      int v5 = 0;
      CFArrayRef v6 = (char *)a2 + result;
      *(void *)&long long v4 = 136315394;
      long long v21 = v4;
      do
      {
        uint64_t result = *((unsigned int *)v6 + 2);
        if (!result) {
          goto LABEL_25;
        }
        int v7 = *((_DWORD *)v6 + 1);
        if (!v7)
        {
          if (!sub_10002B5F8(result, (uint64_t)v23)
            || (int v9 = sub_10002B2AC((uint64_t)v23, (void *)*((unsigned int *)v6 + 2))) == 0)
          {
            int v7 = *((_DWORD *)v6 + 2);
            int v8 = 1;
            goto LABEL_11;
          }
          int v7 = v9;
        }
        int v8 = 0;
LABEL_11:
        CFRange v10 = (const void *)(*(uint64_t (**)(char *))(v3 + 40))(v6);
        uint64_t result = (uint64_t)sub_1000343D0(v3, a2, v10, *(_DWORD *)v6, v7, v8);
        if (!v8 && !result)
        {
          int v11 = *((_DWORD *)v6 + 2);
          if (!qword_10007DC80) {
            qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v12 = _os_log_pack_size();
            long long v22 = &v21;
            __chkstk_darwin(v12, v13, v14);
            __error();
            uint64_t v15 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v15 = v21;
            *(void *)(v15 + 4) = "RouteListFinalize";
            *(_WORD *)(v15 + 12) = 1024;
            *(_DWORD *)(v15 + 14) = v11;
            __SC_log_send();
          }
          long long v16 = (const void *)(*(uint64_t (**)(char *))(v3 + 40))(v6);
          uint64_t result = (uint64_t)sub_1000343D0(v3, a2, v16, *(_DWORD *)v6, v11, 1);
        }
        if (result)
        {
          *((_DWORD *)v6 + 1) = *(_DWORD *)(result + 4);
          if ((*(_WORD *)(result + 16) & 2) == 0)
          {
            __int16 v17 = *((_WORD *)v6 + 8) & 0xFFF9;
LABEL_24:
            *((_WORD *)v6 + 8) = v17;
            goto LABEL_25;
          }
          uint64_t v18 = *(uint64_t (**)(char *, uint64_t))(v3 + 32);
          uint64_t v19 = (*(uint64_t (**)(void))(v3 + 24))();
          uint64_t result = v18(v6, v19);
          __int16 v20 = *((_WORD *)v6 + 8);
          *((_WORD *)v6 + 8) = v20 | 2;
          if (*(_DWORD *)v6 == *(_DWORD *)(v3 + 80))
          {
            __int16 v17 = v20 | 6;
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, char *, const char *))(v3 + 56))(5, v6, "can't resolve excluded route");
        }
LABEL_25:
        ++v5;
        v6 += *(int *)(v3 + 72);
      }
      while (v5 < *a2);
    }
  }
  return result;
}

char *sub_1000343D0(uint64_t a1, int *a2, const void *a3, int a4, int a5, char a6)
{
  uint64_t v12 = (*(uint64_t (**)(void))a1)(0);
  if (*a2 < 1) {
    return 0;
  }
  int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = (char *)a2 + v12;
  while (1)
  {
    int v16 = *((_DWORD *)v15 + 1);
    if (!v16 || *((_DWORD *)v15 + 2)) {
      goto LABEL_5;
    }
    if (a6)
    {
      if (v16 == a5) {
        goto LABEL_5;
      }
    }
    else if (v16 != a5)
    {
      goto LABEL_5;
    }
    __int16 v17 = *((_WORD *)v15 + 8);
    if ((v17 & 2) != 0)
    {
      uint64_t v18 = (const void *)(*(uint64_t (**)(char *))(a1 + 24))(v15);
      if (!memcmp(v18, a3, *(int *)(a1 + 76))) {
        goto LABEL_5;
      }
      __int16 v17 = *((_WORD *)v15 + 8);
    }
    if ((v17 & 4) != 0) {
      break;
    }
    if ((*(unsigned int (**)(char *, const void *))(a1 + 48))(v15, a3))
    {
      int v19 = *(_DWORD *)v15;
      if (*(_DWORD *)v15 == a4) {
        return v15;
      }
      if (v19 <= a4 && (!v14 || v19 > *(_DWORD *)v14)) {
        uint64_t v14 = v15;
      }
    }
LABEL_5:
    ++v13;
    v15 += *(int *)(a1 + 72);
    if (v13 >= *a2) {
      return v14;
    }
  }
  if (*(_DWORD *)(a1 + 80) != a4) {
    goto LABEL_5;
  }
  __int16 v20 = (const void *)(*(uint64_t (**)(char *))(a1 + 40))(v15);
  if (memcmp(v20, a3, *(int *)(a1 + 76))) {
    goto LABEL_5;
  }
  return v15;
}

uint64_t sub_10003455C(uint64_t a1)
{
  return 36 * a1 + 12;
}

BOOL sub_1000345B0(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16);
}

uint64_t sub_100034660(uint64_t a1, char a2, int __fd)
{
  if (byte_10007DCC0 == 1 && !*(_DWORD *)(a1 + 20)) {
    return 1001;
  }
  __int16 v4 = *(_WORD *)(a1 + 16);
  if ((v4 & 8) != 0) {
    return 1001;
  }
  int v5 = *(_DWORD *)(a1 + 4);
  if (v5)
  {
    if (__fd == -1) {
      return 9;
    }
    long long v22 = 0u;
    long long v23 = 0u;
    BYTE3(v22) = a2;
    BYTE2(v22) = 5;
    int v6 = ++dword_10007DCC4;
    int v7 = *(_DWORD *)(a1 + 32);
    if (v7) {
      int v8 = 51;
    }
    else {
      int v8 = 19;
    }
    int v31 = 0;
    long long v29 = 0uLL;
    memset(v30, 0, sizeof(v30));
    long long v27 = 0uLL;
    long long v28 = 0uLL;
    long long v25 = 0uLL;
    long long v26 = 0uLL;
    long long v24 = 0uLL;
    DWORD1(v23) = v6;
    HIDWORD(v22) = v8;
    if ((v4 & 4) != 0)
    {
      int v9 = 2053;
      DWORD2(v22) = 2053;
      if ((v4 & 2) == 0)
      {
LABEL_24:
        if (v4)
        {
          WORD2(v22) = v5;
          v9 |= 0x1000000u;
          DWORD2(v22) = v9;
        }
        WORD6(v27) = 528;
        LODWORD(v28) = *(_DWORD *)(a1 + 20);
        if ((v9 & 2) != 0)
        {
          LODWORD(v29) = *(_DWORD *)(a1 + 28);
          int v19 = (char *)&v29 + 12;
          char v20 = 2;
          char v21 = 16;
        }
        else
        {
          HIWORD(v28) = v5;
          int v19 = v30;
          char v20 = 18;
          char v21 = 20;
        }
        BYTE12(v28) = v21;
        BYTE13(v28) = v20;
        if ((v8 & 4) != 0)
        {
          *(_WORD *)int v19 = 528;
          *((_DWORD *)v19 + 1) = *(_DWORD *)(a1 + 24);
          v19 += 16;
          LOBYTE(v8) = BYTE12(v22);
        }
        if ((v8 & 0x10) != 0)
        {
          *(_WORD *)int v19 = 4628;
          *((_WORD *)v19 + 1) = v5;
          v19 += 20;
        }
        if ((v8 & 0x20) != 0)
        {
          *(_WORD *)int v19 = 528;
          *((_DWORD *)v19 + 1) = v7;
          LODWORD(v19) = v19 + 16;
        }
        LOWORD(v22) = (_WORD)v19 - (unsigned __int16)&v22;
        if (write(__fd, &v22, (int)(v19 - &v22)) == -1) {
          return *__error();
        }
        else {
          return 0;
        }
      }
      int v9 = 2055;
    }
    else
    {
      v8 |= 4u;
      HIDWORD(v22) = v8;
      if ((v4 & 2) != 0) {
        int v9 = 2051;
      }
      else {
        int v9 = 2305;
      }
    }
    DWORD2(v22) = v9;
    goto LABEL_24;
  }
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v11 = _os_log_pack_size();
    __chkstk_darwin(v11, v12, v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    int v15 = *(unsigned __int8 *)(a1 + 20);
    int v16 = *(unsigned __int8 *)(a1 + 21);
    int v17 = *(unsigned __int8 *)(a1 + 22);
    int v18 = *(unsigned __int8 *)(a1 + 23);
    *(_DWORD *)uint64_t v14 = 67109888;
    *(_DWORD *)(v14 + 4) = v15;
    *(_WORD *)(v14 + 8) = 1024;
    *(_DWORD *)(v14 + 10) = v16;
    *(_WORD *)(v14 + 14) = 1024;
    *(_DWORD *)(v14 + 16) = v17;
    *(_WORD *)(v14 + 20) = 1024;
    *(_DWORD *)(v14 + 22) = v18;
    __SC_log_send();
  }
  return 6;
}

uint64_t sub_100034988(uint64_t a1)
{
  return a1 + 28;
}

uint64_t sub_1000349D4(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(result + 28) = *a2;
  return result;
}

uint64_t sub_100034A24(uint64_t a1)
{
  return a1 + 20;
}

BOOL sub_100034A70(uint64_t a1, _DWORD *a2)
{
  return (*(_DWORD *)(a1 + 24) & *a2) == *(_DWORD *)(a1 + 20);
}

void sub_100034ACC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  CFArrayRef Mutable = CFStringCreateMutable(0, 0);
  sub_100034D74(a2, Mutable);
  if (a3)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6, v7, v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v9 = 136315394;
      *(void *)(v9 + 4) = a3;
      *(_WORD *)(v9 + 12) = 2112;
      *(void *)(v9 + 14) = Mutable;
LABEL_10:
      __SC_log_send();
    }
  }
  else
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10, v11, v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v13 = 138412290;
      *(void *)(v13 + 4) = Mutable;
      goto LABEL_10;
    }
  }
  CFRelease(Mutable);
}

__CFString *sub_100034D00(unsigned int *a1)
{
  CFArrayRef Mutable = CFStringCreateMutable(0, 0);
  sub_100034D74(a1, Mutable);
  return Mutable;
}

void sub_100034D74(unsigned int *a1, CFMutableStringRef theString)
{
  uint64_t v4 = *((unsigned __int8 *)a1 + 20);
  uint64_t v5 = *((unsigned __int8 *)a1 + 21);
  uint64_t v6 = *((unsigned __int8 *)a1 + 23);
  if ((a1[4] & 4) != 0)
  {
    CFStringAppendFormat(theString, 0, @"Host %d.%d.%d.%d", v4, v5, *((unsigned __int8 *)a1 + 22), v6);
  }
  else
  {
    CFStringAppendFormat(theString, 0, @"Net %d.%d.%d.%d", v4, v5, *((unsigned __int8 *)a1 + 22), v6);
    CFStringAppendFormat(theString, 0, @"/%d", *a1, v7, v8, v9);
  }
  if ((a1[4] & 2) != 0) {
    CFStringAppendFormat(theString, 0, @" Gate %d.%d.%d.%d", *((unsigned __int8 *)a1 + 28), *((unsigned __int8 *)a1 + 29), *((unsigned __int8 *)a1 + 30), *((unsigned __int8 *)a1 + 31));
  }
  sub_100034EBC((uint64_t)a1, theString);
  if (a1[8]) {
    CFStringAppendFormat(theString, 0, @" Ifa %d.%d.%d.%d", a1[8], BYTE1(a1[8]), BYTE2(a1[8]), HIBYTE(a1[8]));
  }

  sub_100034F74((uint64_t)a1, theString);
}

void sub_100034EBC(uint64_t a1, __CFString *a2)
{
  if (sub_10002BC38(*(_DWORD *)(a1 + 4), (uint64_t)v4)) {
    CFStringAppendFormat(a2, 0, @" Ifp %s", v4);
  }
  if (sub_10002BC38(*(_DWORD *)(a1 + 8), (uint64_t)v4)) {
    CFStringAppendFormat(a2, 0, @" !Ifp %s", v4);
  }
}

void sub_100034F74(uint64_t a1, CFMutableStringRef theString)
{
  if ((*(_WORD *)(a1 + 16) & 8) != 0)
  {
    CFStringRef v6 = @" [null]";
LABEL_16:
    CFStringAppend(theString, v6);
    return;
  }
  int v4 = *(unsigned __int8 *)(a1 + 15) << 24;
  if (v4)
  {
    if (v4 == 50331648)
    {
      CFStringRef v5 = @" [never]";
    }
    else
    {
      if (v4 != 0x2000000) {
        goto LABEL_10;
      }
      CFStringRef v5 = @" [last]";
    }
  }
  else
  {
    CFStringRef v5 = @" [first]";
  }
  CFStringAppend(theString, v5);
LABEL_10:
  __int16 v7 = *(_WORD *)(a1 + 16);
  if ((v7 & 0x10) != 0)
  {
    CFStringAppend(theString, @" [kern]");
    __int16 v7 = *(_WORD *)(a1 + 16);
  }
  if (v7) {
    CFStringAppend(theString, @" [SCOPED]");
  }
  if ((*(_WORD *)(a1 + 18) & 4) != 0)
  {
    CFStringRef v6 = @" [force]";
    goto LABEL_16;
  }
}

__CFString *sub_1000350A8(unsigned int *a1)
{
  CFArrayRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"<IPv4RouteList[%d]> = {", *a1);
  if ((int)*a1 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = a1 + 3;
    do
    {
      CFStringAppendFormat(Mutable, 0, @"\n%2d. ", v3);
      sub_100034D74(v4, Mutable);
      uint64_t v3 = (v3 + 1);
      v4 += 9;
    }
    while ((int)v3 < (int)*a1);
  }
  CFStringAppend(Mutable, @"\n}");
  return Mutable;
}

uint64_t (**sub_100035198(uint64_t (**result)(void), unint64_t a2, int *a3, unsigned int a4))(void)
{
  if (!(a2 | (unint64_t)a3)) {
    return result;
  }
  CFStringRef v6 = result;
  v20[2] = a3;
  v20[3] = a4;
  v20[0] = result;
  v20[1] = a2;
  if (!a2)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_30;
  }
  uint64_t result = (uint64_t (**)(void))(*result)(0);
  if (*(int *)a2 >= 1)
  {
    int v7 = 0;
    uint64_t v8 = (uint64_t)result + a2;
    do
    {
      if (!a3) {
        goto LABEL_12;
      }
      uint64_t result = (uint64_t (**)(void))(*v6)(0);
      if (*a3 < 1) {
        goto LABEL_12;
      }
      int v9 = 0;
      uint64_t v10 = (char *)result + (void)a3;
      while (1)
      {
        uint64_t result = (uint64_t (**)(void))((uint64_t (*)(char *, uint64_t))v6[1])(v10, v8);
        if (result) {
          break;
        }
        ++v9;
        v10 += *((int *)v6 + 18);
        if (v9 >= *a3) {
          goto LABEL_12;
        }
      }
      if (!v10)
      {
LABEL_12:
        if ((*(_WORD *)(v8 + 18) & 2) != 0) {
          uint64_t result = (uint64_t (**)(void))sub_1000353E8(v8, 1, (uint64_t)v20);
        }
      }
      ++v7;
      v8 += *((int *)v6 + 18);
    }
    while (v7 < *(_DWORD *)a2);
  }
  if (a3)
  {
    uint64_t v11 = (*v6)(0);
    if (*a3 >= 1)
    {
      int v12 = 0;
      uint64_t v13 = (char *)a3 + v11;
      do
      {
        uint64_t v14 = (*v6)(0);
        if (*(int *)a2 >= 1)
        {
          int v15 = 0;
          int v16 = (char *)(a2 + v14);
          while (!((unsigned int (*)(char *, char *))v6[1])(v16, v13))
          {
            ++v15;
            v16 += *((int *)v6 + 18);
            if (v15 >= *(_DWORD *)a2) {
              goto LABEL_27;
            }
          }
          if (v16)
          {
            if ((*((_WORD *)v13 + 9) & 4) != 0) {
              ((void (*)(uint64_t, char *, const char *))v6[7])(5, v13, "Re-applying route");
            }
            else {
              *((_WORD *)v13 + 9) = *((_WORD *)v16 + 9) & 3;
            }
          }
        }
LABEL_27:
        ++v12;
        v13 += *((int *)v6 + 18);
      }
      while (v12 < *a3);
    }
LABEL_30:
    uint64_t result = (uint64_t (**)(void))(*v6)(0);
    int v17 = *a3;
    if (*a3 >= 1)
    {
      int v18 = 0;
      uint64_t v19 = (uint64_t)result + (void)a3;
      do
      {
        if ((*(_WORD *)(v19 + 18) & 1) == 0)
        {
          uint64_t result = (uint64_t (**)(void))sub_1000353E8(v19, 0, (uint64_t)v20);
          int v17 = *a3;
        }
        ++v18;
        v19 += *((int *)v6 + 18);
      }
      while (v18 < v17);
    }
  }
  return result;
}

uint64_t sub_1000353E8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a3;
  CFStringRef v6 = *(void (**)(uint64_t, uint64_t, const char *))(*(void *)a3 + 56);
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a3 + 16);
  if (a2 == 1)
  {
    int v14 = v7(a1, 2, *(unsigned int *)(a3 + 24));
    int v15 = v14;
    if (v14)
    {
      if (v14 != 1001 && v14 != 3)
      {
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
    }
    if (byte_10007DC9C == 1)
    {
      if (v14 == 1001) {
        int v17 = "!";
      }
      else {
        int v17 = "";
      }
      uint64_t v19 = *(void *)a3;
      uint64_t v18 = *(void *)(a3 + 8);
      uint64_t v20 = (*(uint64_t (**)(void))v19)(0);
      char v21 = "(ESRCH)";
      if (v15 != 3) {
        char v21 = "";
      }
      snprintf(__str, 0x40uLL, "%sRemove old[%ld]%s", v17, (a1 - v18 - v20) / *(int *)(v19 + 72), v21);
      long long v22 = __str;
      uint64_t v23 = 7;
      uint64_t v24 = a1;
      goto LABEL_43;
    }
    return 1;
  }
  if (a2) {
    return 1;
  }
  unsigned int v8 = *(unsigned __int16 *)(a1 + 18);
  if (v8) {
    return (v8 >> 1) & 1;
  }
  int v9 = *(uint64_t (**)(uint64_t))(v5 + 24);
  *(_WORD *)(a1 + 18) = v8 | 1;
  if ((*(_WORD *)(a1 + 16) & 2) == 0) {
    goto LABEL_28;
  }
  uint64_t v10 = *(int **)(a3 + 16);
  uint64_t v11 = (const void *)v9(a1);
  if (!sub_1000343D0(v5, v10, v11, *(_DWORD *)(*(void *)a3 + 80), *(_DWORD *)(a1 + 4), 0))
  {
    v6(5, a1, "no gateway route");
    goto LABEL_28;
  }
  int v12 = *(_DWORD *)(a3 + 28);
  if (v12 != 10)
  {
    *(_DWORD *)(a3 + 28) = v12 + 1;
    int v26 = sub_1000353E8();
    --*(_DWORD *)(a3 + 28);
    if (!v26)
    {
      uint64_t v13 = "failed to add";
      goto LABEL_46;
    }
LABEL_28:
    int v15 = v7(a1, 1, *(unsigned int *)(a3 + 24));
    if (v15 == 17)
    {
      v7(a1, 2, *(unsigned int *)(a3 + 24));
      int v15 = v7(a1, 1, *(unsigned int *)(a3 + 24));
    }
    if (!v15 || v15 == 1001)
    {
      if (byte_10007DC9C == 1)
      {
        if (v15 == 1001) {
          long long v27 = "!";
        }
        else {
          long long v27 = "";
        }
        uint64_t v28 = *(void *)a3;
        uint64_t v29 = *(void *)(a3 + 16);
        uint64_t v30 = (*(uint64_t (**)(void))v28)(0);
        snprintf(__str, 0x40uLL, "%sAdd new[%ld]", v27, (a1 - v29 - v30) / *(int *)(v28 + 72));
        v6(7, a1, __str);
      }
      *(_WORD *)(a1 + 18) |= 2u;
      return 1;
    }
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_42;
    }
LABEL_41:
    uint64_t v31 = _os_log_pack_size();
    __chkstk_darwin(v31, v32, v33);
    __error();
    uint64_t v34 = _os_log_pack_fill();
    uint64_t v35 = strerror(v15);
    *(_DWORD *)uint64_t v34 = 136315138;
    *(void *)(v34 + 4) = v35;
    __SC_log_send();
LABEL_42:
    uint64_t v23 = 5;
    uint64_t v24 = a1;
    long long v22 = 0;
LABEL_43:
    v6(v23, v24, v22);
    return 1;
  }
  uint64_t v13 = "routing loop detected, not adding";
LABEL_46:
  v6(5, a1, v13);
  return 0;
}

void sub_100035840(CFArrayRef keys, CFArrayRef patterns)
{
  CFDictionaryRef v2 = SCDynamicStoreCopyMultiple((SCDynamicStoreRef)qword_10007DC90, keys, patterns);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFArrayRef v4 = sub_100035D94(v2);
    CFRelease(v3);
    if (v4)
    {
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v5 = _os_log_pack_size();
        __chkstk_darwin(v5, v6, v7);
        __error();
        uint64_t v8 = _os_log_pack_fill();
        CFIndex Count = CFArrayGetCount(v4);
        *(_DWORD *)uint64_t v8 = 134218242;
        *(void *)(v8 + 4) = Count;
        *(_WORD *)(v8 + 12) = 2112;
        *(void *)(v8 + 14) = v4;
        __SC_log_send();
      }
      sub_100035E78((const __SCDynamicStore *)qword_10007DC90, v4, 0);
      CFRelease(v4);
      return;
    }
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_15:
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10, v11, v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)(v13 + 4) = "prime_notifications";
      __SC_log_send();
    }
  }
  else
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_15;
    }
  }
}

void sub_100035B40(CFStringRef serviceID, const __CFArray *a2)
{
  for (uint64_t i = 0; i != 40; i += 8)
  {
    CFStringRef v5 = **(const __CFString ***)((char *)&off_100076A88 + i);
    CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, serviceID, v5);
    sub_100034064(a2, NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    CFStringRef v7 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, serviceID, v5);
    sub_100034064(a2, v7);
    CFRelease(v7);
  }
  CFStringRef v8 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, serviceID, kSCEntNetDHCP);
  sub_100034064(a2, v8);
  CFRelease(v8);
  CFStringRef v9 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, serviceID, 0);
  sub_100034064(a2, v9);
  CFRelease(v9);
  CFStringRef v10 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, serviceID, 0);
  sub_100034064(a2, v10);

  CFRelease(v10);
}

void sub_100035CD8(CFStringRef serviceID, const __CFArray *a2)
{
  for (uint64_t i = 0; i != 48; i += 16)
  {
    CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, serviceID, **(CFStringRef **)((char *)&off_100076AB0 + i));
    sub_100034064(a2, NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
  }
}

CFArrayRef sub_100035D94(const __CFDictionary *a1)
{
  CFIndex Count = CFDictionaryGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  __chkstk_darwin(Count, v3, v4);
  CFStringRef v7 = (const void **)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v6 >= 0x200) {
    size_t v8 = 512;
  }
  else {
    size_t v8 = v6;
  }
  bzero((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  CFDictionaryGetKeysAndValues(a1, v7, 0);
  return CFArrayCreate(0, v7, v5, &kCFTypeArrayCallBacks);
}

void sub_100035E78(const __SCDynamicStore *a1, const __CFArray *a2, const __CFArray *a3)
{
  CFSetRef v215 = 0;
  CFSetRef v216 = 0;
  CFArrayRef Mutable = 0;
  CFArrayRef v213 = 0;
  CFDictionaryRef v214 = 0;
  sub_10002BB3C();
  if (a2)
  {
    CFIndex Count = CFArrayGetCount(a2);
    if (byte_10007DC9C == 1)
    {
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v6 = _os_log_pack_size();
        __chkstk_darwin(v6, v7, v8);
        __error();
        uint64_t v9 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v9 = 138412546;
        *(void *)(v9 + 4) = a2;
        *(_WORD *)(v9 + 12) = 2048;
        *(void *)(v9 + 14) = Count;
        __SC_log_send();
      }
    }
  }
  else
  {
    CFIndex Count = 0;
  }
  if (a3 || Count)
  {
    if (qword_10007DCE0 && (CFDictionaryRef v10 = (const __CFDictionary *)sub_100031738((void *)qword_10007DCE0, kSCEntNetDNS)) != 0) {
      CFDictionaryRef Copy = CFDictionaryCreateCopy(0, v10);
    }
    else {
      CFDictionaryRef Copy = 0;
    }
    if (qword_10007DCE8
      && (CFDictionaryRef v12 = (const __CFDictionary *)sub_100031738((void *)qword_10007DCE8, kSCEntNetProxies)) != 0)
    {
      CFDictionaryRef v13 = CFDictionaryCreateCopy(0, v12);
    }
    else
    {
      CFDictionaryRef v13 = 0;
    }
    CFArrayRef v202 = a3;
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFArrayRef v213 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFDictionaryRef v214 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFArrayRef v198 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    p_base_props = &QoSMarkingController__classData.base_props;
    CFDictionaryRef v185 = Copy;
    CFDictionaryRef v186 = v13;
    if (Count >= 1)
    {
      int v15 = 0;
      int v207 = 0;
      int v199 = 0;
      int v187 = 0;
      CFIndex v16 = 0;
      CFStringRef v17 = (const __CFString *)kSCEntNetInterfaceDelegation;
      while (1)
      {
        valuePtr[0] = 0;
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v16);
        if (CFEqual(ValueAtIndex, (CFTypeRef)qword_10007DCC8))
        {
          int v207 = 1;
        }
        else
        {
          if (!CFEqual(ValueAtIndex, p_base_props[411])
            && !CFEqual(ValueAtIndex, (CFTypeRef)qword_10007DCD0)
            && !CFEqual(ValueAtIndex, @"/Library/Preferences/SystemConfiguration/resolver"))
          {
            if (!CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_10007DCF0) || !CFStringHasSuffix(ValueAtIndex, v17))
            {
              if (!CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_10007DCF8))
              {
                if (CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_10007DD00))
                {
                  long long v22 = sub_100037E6C(ValueAtIndex, 0);
                  if (v22)
                  {
                    uint64_t v23 = v22;
                    sub_100034064(v198, v22);
                    CFRelease(v23);
                  }
                  char v24 = 0;
                  uint64_t v25 = 0;
                  do
                  {
                    char v26 = v24;
                    int HasSuffix = CFStringHasSuffix(ValueAtIndex, *(CFStringRef *)*(&off_100076AE0 + v25));
                    if (HasSuffix) {
                      break;
                    }
                    char v24 = 1;
                    uint64_t v25 = 1;
                  }
                  while ((v26 & 1) == 0);
                  if (HasSuffix) {
                    int v28 = 1;
                  }
                  else {
                    int v28 = v187;
                  }
                  if (CFStringHasSuffix(ValueAtIndex, kSCEntNetInterface)) {
                    int v29 = 1;
                  }
                  else {
                    int v29 = v28;
                  }
                  int v187 = v29;
                  p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                }
                else if (sub_100048B80(ValueAtIndex, valuePtr))
                {
                  sub_100037FD0(0, valuePtr[0]);
                  int v199 = 1;
                }
                goto LABEL_26;
              }
              CFTypeRef v211 = 0;
              uint64_t v19 = (void *)sub_100037E6C(ValueAtIndex, &v211);
              if (v19)
              {
                uint64_t v20 = v19;
                sub_100034064(v198, v19);
                if (v211)
                {
                  if (CFEqual(v211, kSCEntNetIPv4))
                  {
                    char v21 = &v216;
                    goto LABEL_53;
                  }
                  if (CFEqual(v211, kSCEntNetIPv6))
                  {
                    char v21 = &v215;
LABEL_53:
                    sub_100037F48(v21, v20);
                  }
                }
                CFRelease(v20);
              }
              if (v211) {
                CFRelease(v211);
              }
              goto LABEL_26;
            }
            int v187 = 1;
            int v207 = 1;
          }
          int v15 = 1;
        }
LABEL_26:
        if (++v16 == Count) {
          goto LABEL_58;
        }
      }
    }
    int v187 = 0;
    int v199 = 0;
    int v207 = 0;
    int v15 = 0;
LABEL_58:
    int v205 = v15;
    CFArrayRef v30 = v198;
    CFArrayRef v31 = v202;
    if (v202)
    {
      CFIndex v32 = CFArrayGetCount(v202);
      if (v32 >= 1)
      {
        CFIndex v33 = v32;
        for (CFIndex i = 0; i != v33; ++i)
        {
          uint64_t v35 = CFArrayGetValueAtIndex(v31, i);
          if (byte_10007DC9C == 1)
          {
            if (!qword_10007DC80) {
              qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            }
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v36 = _os_log_pack_size();
              __chkstk_darwin(v36, v37, v38);
              __error();
              p_base_props = &QoSMarkingController__classData.base_props;
              uint64_t v39 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v39 = 138412290;
              *(void *)(v39 + 4) = v35;
              CFArrayRef v30 = v198;
              __SC_log_send();
              CFArrayRef v31 = v202;
            }
          }
          sub_1000380B4(v30, v35);
        }
      }
    }
    uint64_t v40 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFArrayRef v41 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(v40, (const void *)qword_10007DCC8);
    CFArrayAppendValue(v40, p_base_props[411]);
    CFArrayAppendValue(v40, (const void *)qword_10007DCD0);
    CFIndex v42 = CFArrayGetCount(v30);
    if (v42 >= 1)
    {
      CFIndex v43 = v42;
      for (CFIndex j = 0; j != v43; ++j)
      {
        CFStringRef v45 = (const __CFString *)CFArrayGetValueAtIndex(v30, j);
        sub_100035B40(v45, v40);
        sub_100035CD8(v45, v40);
      }
    }
    for (uint64_t k = 0; k != 40; k += 8)
    {
      CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, **(CFStringRef **)((char *)&off_100076B30 + k));
      sub_100034064(v41, NetworkServiceEntity);
      CFRelease(NetworkServiceEntity);
    }
    CFStringRef v48 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetVPN);
    sub_100034064(v41, v48);
    CFRelease(v48);
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetLink);
    sub_100034064(v41, NetworkInterfaceEntity);
    CFRelease(NetworkInterfaceEntity);
    CFDictionaryRef v50 = SCDynamicStoreCopyMultiple(a1, v40, v41);
    if (v40) {
      CFRelease(v40);
    }
    if (v41) {
      CFRelease(v41);
    }
    if (!v50) {
      sub_1000652B0();
    }
    CFDictionaryRef v51 = (const __CFDictionary *)sub_10003AFFC(v50, (const void *)qword_10007DCC8);
    if (v51)
    {
      CFDictionaryRef v52 = v51;
      LODWORD(valuePtr[0]) = 0;
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v51, kSCPropNetServiceOrder);
      CFTypeID TypeID = CFArrayGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == TypeID) {
          CFArrayRef v55 = Value;
        }
        else {
          CFArrayRef v55 = 0;
        }
        CFArrayRef v189 = v55;
      }
      else
      {
        CFArrayRef v189 = 0;
      }
      CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue(v52, kSCPropNetPPPOverridePrimary);
      CFTypeID v57 = CFNumberGetTypeID();
      if (v56 && CFGetTypeID(v56) == v57)
      {
        CFNumberGetValue(v56, kCFNumberIntType, valuePtr);
        BOOL v58 = LODWORD(valuePtr[0]) != 0;
      }
      else
      {
        BOOL v58 = 0;
      }
      dword_10007DD50 = v58;
      if (v189)
      {
        if (byte_10007DC9C == 1)
        {
          if (!qword_10007DC80) {
            qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v59 = _os_log_pack_size();
            __chkstk_darwin(v59, v60, v61);
            __error();
            uint64_t v62 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v62 = 138412290;
            *(void *)(v62 + 4) = v189;
            __SC_log_send();
          }
        }
      }
      else
      {
        CFArrayRef v189 = 0;
      }
    }
    else
    {
      CFArrayRef v189 = 0;
      dword_10007DD50 = 0;
    }
    CFIndex v196 = CFArrayGetCount(v198);
    if (v196 < 1)
    {
      int v203 = 0;
      int v192 = 0;
    }
    else
    {
      int v192 = 0;
      int v203 = 0;
      CFIndex v63 = 0;
      uint64_t v64 = &off_100076A88;
      CFSetRef v195 = v216;
      CFSetRef v194 = v215;
      do
      {
        CFIndex v200 = v63;
        uint64_t v65 = (__CFString *)CFArrayGetValueAtIndex(v198, v63);
        CFDictionaryRef v66 = (const __CFDictionary *)sub_100038374(v50, v65, 0);
        CFDictionaryRef v67 = (const __CFDictionary *)sub_10003B7B4(v50, v65, 0);
        uint64_t v68 = 0;
        int v69 = (sub_10003B0AC(v65, v66, v67, v50) != 0) << 30;
        do
        {
          unint64_t v70 = off_100076B58[v68];
          CFStringRef v71 = *(const __CFString **)v64[v68];
          unsigned int v72 = sub_100038374(v50, v65, v71);
          CFDictionaryRef v73 = sub_10003B7B4(v50, v65, v71);
          int v74 = ((uint64_t (*)(__CFString *, const void *, const void *, CFDictionaryRef))v70)(v65, v72, v73, v50);
          int v75 = 1 << v68;
          if (!v74) {
            int v75 = 0;
          }
          v69 |= v75;
          ++v68;
        }
        while (v68 != 5);
        uint64_t v76 = 0;
        char v77 = 0;
        do
        {
          uint64_t v78 = *(CFStringRef **)((char *)&off_100076AB0 + v76);
          CFDictionaryRef v79 = (const __CFDictionary *)sub_100038374(v50, v65, *v78);
          if (v79)
          {
            uint64_t v80 = v64;
            CFIndex v81 = *(const void ***)((char *)&off_100076AB0 + v76 + 8);
            int v82 = CFDictionaryGetValue(v79, *v81);
            CFTypeID v83 = CFNumberGetTypeID();
            if (v82 && CFGetTypeID(v82) == v83)
            {
              uint64_t v84 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
              CFDictionaryAddValue(v84, *v81, v82);
            }
            else
            {
              uint64_t v84 = 0;
            }
            uint64_t v64 = v80;
          }
          else
          {
            CFNumberGetTypeID();
            uint64_t v84 = 0;
          }
          if (sub_10003BB8C(v65, *v78, v84)) {
            char v77 = 1;
          }
          if (v84) {
            CFRelease(v84);
          }
          v76 += 16;
        }
        while (v76 != 48);
        if (v77) {
          v69 |= 0x40u;
        }
        if (v195 && CFSetContainsValue(v195, v65)) {
          v69 |= 1u;
        }
        int v85 = v205;
        int v86 = v203;
        if (v194 && CFSetContainsValue(v194, v65))
        {
          v69 |= 2u;
          uint64_t v87 = sub_100038374(v50, v65, kSCEntNetDNS);
          int v88 = v199;
          if (v87) {
            int v88 = 1;
          }
          int v199 = v88;
        }
        if ((v69 & 0x40000000) != 0)
        {
          int v207 = 1;
        }
        else
        {
          if (v69) {
            int v86 = 1;
          }
          int v89 = v207;
          if (v69) {
            int v89 = 1;
          }
          int v207 = v89;
          if (v69) {
            int v85 = 1;
          }
          if ((v69 & 2) != 0)
          {
            int v86 = 1;
            int v199 = 1;
            int v207 = 1;
            int v85 = 1;
          }
        }
        if ((v69 & 4) != 0)
        {
          if (qword_10007DCE0)
          {
            int v90 = CFEqual((CFTypeRef)qword_10007DCE0, v65);
            int v91 = v192;
            if (v90) {
              int v91 = 1;
            }
            int v192 = v91;
          }
          int v199 = 1;
          int v85 = 1;
        }
        if ((v69 & 8) != 0) {
          int v86 = 1;
        }
        if ((v69 & 0x10) != 0) {
          int v85 = 1;
        }
        if ((v69 & 0x40) != 0 && (sub_100031738(v65, kSCEntNetIPv4) || sub_100031738(v65, kSCEntNetIPv6))) {
          int v85 = 1;
        }
        int v203 = v86;
        int v205 = v85;
        CFIndex v63 = v200 + 1;
      }
      while (v200 + 1 != v196);
    }
    unsigned int v92 = CFDictionaryGetCount((CFDictionaryRef)qword_10007DCA8);
    uint64_t v93 = (uint64_t)sub_100030690((unsigned int *)qword_10007DC88);
    CFIndex v94 = sub_10003073C((_DWORD *)qword_10007DC88, v92);
    qword_10007DC88 = (uint64_t)v94;
    if (v207)
    {
      if (qword_10007DD08) {
        sub_100038408((CFTypeRef *)qword_10007DD08);
      }
      qword_10007DD08 = (uint64_t)sub_1000384D0(2, v189);
      sub_1000385E4((int *)qword_10007DD08, (uint64_t)"IPv4");
      if (qword_10007DD10) {
        sub_100038408((CFTypeRef *)qword_10007DD10);
      }
      qword_10007DD10 = (uint64_t)sub_1000384D0(30, v189);
      sub_1000385E4((int *)qword_10007DD10, (uint64_t)"IPv6");
      CFIndex v94 = (_DWORD *)qword_10007DC88;
    }
    else if (!v205)
    {
      BOOL v115 = 0;
      int v113 = 0;
      BOOL v111 = v203;
      int v114 = v192;
      goto LABEL_204;
    }
    valuePtr[0] = 0;
    if (v94) {
      *((void *)v94 + 1) = 0;
    }
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v95 = _os_log_pack_size();
      __chkstk_darwin(v95, v96, v97);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    valuePtr[0] = 0;
    if (qword_10007DD10) {
      uint64_t v98 = qword_10007DD10 + 16;
    }
    else {
      uint64_t v98 = 0;
    }
    CFNumberRef v99 = (const void **)sub_100038978(qword_10007DD08, v98, (_DWORD *)qword_10007DC88, 2, valuePtr, v50, v216);
    uint64_t v100 = (uint64_t)v99;
    if (v99) {
      CFArrayRef v101 = *v99;
    }
    else {
      CFArrayRef v101 = 0;
    }
    sub_1000393CC((CFTypeRef *)&qword_10007DD18, v101, (uint64_t)"IPv4");
    sub_1000319C0((const void *)qword_10007DD18, (char *)valuePtr[0], (uint64_t)&Mutable);
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v102 = _os_log_pack_size();
      __chkstk_darwin(v102, v103, v104);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    valuePtr[0] = 0;
    CFIndex v105 = (const void **)sub_100038978(qword_10007DD10, v100, (_DWORD *)qword_10007DC88, 30, valuePtr, v50, v215);
    if (v105) {
      v106 = *v105;
    }
    else {
      v106 = 0;
    }
    sub_1000393CC((CFTypeRef *)&qword_10007DD20, v106, (uint64_t)"IPv6");
    sub_100039730((const void *)qword_10007DD20, (uint64_t)valuePtr[0], (uint64_t)&Mutable);
    if (qword_10007DC88) {
      sub_1000308F0((_DWORD *)qword_10007DC88);
    }
    if (qword_10007DD18 && qword_10007DD20)
    {
      unsigned int v107 = sub_100039C5C((const __CFDictionary *)qword_10007DD28, (void *)qword_10007DD18, kSCEntNetDNS);
      if (v107 <= sub_100039C5C((const __CFDictionary *)qword_10007DD30, (void *)qword_10007DD20, kSCEntNetDNS))v108 = (const void *)qword_10007DD18; {
      else
      }
        v108 = (const void *)qword_10007DD20;
      unsigned int v109 = sub_100039C5C((const __CFDictionary *)qword_10007DD28, (void *)qword_10007DD18, kSCEntNetProxies);
      if (v109 <= sub_100039C5C((const __CFDictionary *)qword_10007DD30, (void *)qword_10007DD20, kSCEntNetProxies))unsigned int v110 = (const void *)qword_10007DD18; {
      else
      }
        unsigned int v110 = (const void *)qword_10007DD20;
    }
    else
    {
      if (qword_10007DD20) {
        v108 = (const void *)qword_10007DD20;
      }
      else {
        v108 = (const void *)qword_10007DD18;
      }
      unsigned int v110 = v108;
    }
    BOOL v111 = v203;
    int v112 = sub_1000393CC((CFTypeRef *)&qword_10007DCE0, v108, (uint64_t)"DNS");
    if (v112) {
      int v113 = 1;
    }
    else {
      int v113 = v205;
    }
    int v114 = v192;
    if (v112) {
      int v114 = 1;
    }
    if (sub_1000393CC((CFTypeRef *)&qword_10007DCE8, v110, (uint64_t)"Proxies")) {
      BOOL v111 = 1;
    }
    BOOL v115 = v113 != 0;
    if (!v111 && v113 && G_supplemental_proxies_follow_dns)
    {
      BOOL v111 = CFBooleanGetValue((CFBooleanRef)G_supplemental_proxies_follow_dns) != 0;
      BOOL v115 = 1;
    }
LABEL_204:
    v116 = sub_100030DA8((int *)v93, (int *)qword_10007DC88);
    if (v207 || v115 || v187)
    {
      if (qword_10007DC88)
      {
        uint64_t v119 = mach_absolute_time();
        uint64_t v120 = qword_10007DC88;
        *(void *)(qword_10007DC88 + 32) = v119;
        if (v207 | v187)
        {
          LODWORD(valuePtr[0]) = 0;
          LODWORD(v211) = 0;
          sub_100039D04(v50, (int *)valuePtr, (int *)&v211);
          uint64_t v120 = qword_10007DC88;
          int v121 = (int)v211;
          *(_DWORD *)(qword_10007DC88 + 24) = valuePtr[0];
          *(_DWORD *)(v120 + 28) = v121;
        }
        sub_100030F60(v93, v120, v116);
        CFStringRef v122 = (unsigned int *)qword_10007DC88;
      }
      else
      {
        CFStringRef v122 = 0;
      }
      int v118 = sub_10003A4F0(v122);
      if (v118) {
        int v117 = 1;
      }
      else {
        int v117 = v113;
      }
    }
    else
    {
      int v117 = 0;
      int v118 = 0;
    }
    if (!v114) {
      goto LABEL_232;
    }
    if (qword_10007DCE0
      && (CFDictionaryRef v123 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DCA8, (const void *)qword_10007DCE0)) != 0)
    {
      v124 = CFDictionaryGetValue(v123, kSCEntNetDNS);
    }
    else
    {
      v124 = 0;
    }
    v125 = (const void *)qword_10007DD98;
    if ((const void *)qword_10007DD98 == v124)
    {
      BOOL v126 = 0;
    }
    else
    {
      BOOL v126 = 1;
      if (v124 && qword_10007DD98)
      {
        BOOL v126 = CFEqual((CFTypeRef)qword_10007DD98, v124) == 0;
LABEL_227:
        CFRetain(v124);
        v125 = (const void *)qword_10007DD98;
LABEL_228:
        if (v125) {
          CFRelease(v125);
        }
        qword_10007DD98 = (uint64_t)v124;
        if (v126)
        {
          v118 |= 2u;
          HIDWORD(v193) = 1;
          goto LABEL_233;
        }
LABEL_232:
        HIDWORD(v193) = 0;
        BOOL v127 = 0;
        if (!v117) {
          goto LABEL_253;
        }
LABEL_233:
        v128 = (const void *)qword_10007DCE0;
        valuePtr[0] = 0;
        CFArrayRef v129 = (const __CFArray *)CFDictionaryGetValue(v50, (const void *)qword_10007DCD8);
        CFArrayRef v130 = (const __CFArray *)CFDictionaryGetValue(v50, (const void *)qword_10007DCD0);
        if (v128)
        {
          CFDictionaryRef v131 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DCA8, v128);
          if (v131) {
            CFDictionaryRef v131 = (const __CFDictionary *)CFDictionaryGetValue(v131, kSCEntNetDNS);
          }
        }
        else
        {
          CFDictionaryRef v131 = 0;
        }
        int v132 = sub_100023538(v131, (const __CFDictionary *)qword_10007DCA8, v189, v129, v130, valuePtr);
        if (!v132) {
          goto LABEL_249;
        }
        CFDictionaryRef v133 = (const __CFDictionary *)valuePtr[0];
        unsigned int v134 = (const void *)qword_10007DDA8;
        if ((CFTypeRef)qword_10007DDA8 == valuePtr[0]) {
          goto LABEL_242;
        }
        if (valuePtr[0] && qword_10007DDA8)
        {
          if (CFEqual((CFTypeRef)qword_10007DDA8, valuePtr[0]))
          {
LABEL_242:
            sub_100034064(Mutable, (const void *)qword_10007DDA0);
LABEL_249:
            if (valuePtr[0]) {
              CFRelease(valuePtr[0]);
            }
            BOOL v127 = v132 != 0;
            if (v132) {
              v118 |= 2u;
            }
LABEL_253:
            if (!v111)
            {
              int v139 = 0;
              goto LABEL_274;
            }
            if (qword_10007DCE8)
            {
              CFDictionaryRef v138 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DCA8, (const void *)qword_10007DCE8);
              if (v138) {
                CFDictionaryRef v138 = (const __CFDictionary *)CFDictionaryGetValue(v138, kSCEntNetProxies);
              }
            }
            else
            {
              CFDictionaryRef v138 = 0;
            }
            unsigned int v140 = sub_100045C2C(v138, (const __CFDictionary *)qword_10007DCA8, v189, v50);
            if ((__CFDictionary *)qword_10007DDB0 == v140)
            {
              int v139 = 0;
              unsigned int v141 = v140;
              if (!v140)
              {
LABEL_272:
                qword_10007DDB0 = (uint64_t)v140;
                if (v139) {
                  v118 |= 4u;
                }
LABEL_274:
                if (v199) {
                  int v143 = v118 | 0x10;
                }
                else {
                  int v143 = v118;
                }
                if (v198) {
                  CFRelease(v198);
                }
                CFRelease(v50);
                if (v216)
                {
                  CFRelease(v216);
                  CFSetRef v216 = 0;
                }
                LODWORD(v193) = v127;
                if (v215)
                {
                  CFRelease(v215);
                  CFSetRef v215 = 0;
                }
                int v201 = v116;
                if (!v143)
                {
                  sub_10003A7FC(&Mutable, a1);
                  if (v185) {
                    CFRelease(v185);
                  }
                  if (v186) {
                    CFRelease(v186);
                  }
                  unsigned int v147 = 0;
                  char v148 = 1;
                  uint64_t v149 = (void *)v93;
                  goto LABEL_377;
                }
                int v190 = v139;
                int v191 = v143;
                int v197 = CFStringCreateMutable(0, 0);
                if (!v116)
                {
LABEL_330:
                  if (!v193)
                  {
                    CFDictionaryRef v173 = v185;
                    CFDictionaryRef v171 = v186;
                    unsigned int v147 = v197;
                    if (qword_10007DCE0) {
                      CFStringAppend(v197, @" DNS");
                    }
LABEL_349:
                    if (!v190)
                    {
                      uint64_t v149 = (void *)v93;
                      if (qword_10007DCE8) {
                        CFStringAppend(v147, @" Proxy");
                      }
LABEL_363:
                      sub_10003A7FC(&Mutable, a1);
                      if (v173) {
                        CFRelease(v173);
                      }
                      if (v171) {
                        CFRelease(v171);
                      }
                      if (qword_10007DDD0 != -1) {
                        dispatch_once(&qword_10007DDD0, &stru_100076C78);
                      }
                      block[0] = _NSConcreteStackBlock;
                      block[1] = 0x40000000;
                      block[2] = sub_10003AB44;
                      block[3] = &unk_100076AF0;
                      int v210 = v191;
                      dispatch_async((dispatch_queue_t)qword_10007DDD8, block);
                      if (v147)
                      {
                        if (CFStringGetLength(v147))
                        {
                          if (!qword_10007DC80) {
                            qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                          }
                          _SC_syslog_os_log_mapping();
                          if (__SC_log_enabled())
                          {
                            uint64_t v178 = _os_log_pack_size();
                            __chkstk_darwin(v178, v179, v180);
                            __error();
                            uint64_t v181 = _os_log_pack_fill();
                            *(_DWORD *)uint64_t v181 = 138412290;
                            *(void *)(v181 + 4) = v197;
                            __SC_log_send();
                          }
                          goto LABEL_385;
                        }
                        char v148 = 0;
                      }
                      else
                      {
                        char v148 = 1;
                      }
LABEL_377:
                      int v197 = v147;
                      if (CFDictionaryGetCount(v214) <= 0 && CFArrayGetCount(v213) <= 0 && CFArrayGetCount(Mutable) < 1)
                      {
                        if (v199)
                        {
                          if (!qword_10007DC80) {
                            qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                          }
                          _SC_syslog_os_log_mapping();
                          if (__SC_log_enabled()) {
                            goto LABEL_383;
                          }
                        }
                        else
                        {
                          if (!qword_10007DC80) {
                            qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                          }
                          _SC_syslog_os_log_mapping();
                          if (__SC_log_enabled()) {
                            goto LABEL_383;
                          }
                        }
                      }
                      else
                      {
                        if (!qword_10007DC80) {
                          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                        }
                        _SC_syslog_os_log_mapping();
                        if (__SC_log_enabled())
                        {
LABEL_383:
                          uint64_t v182 = _os_log_pack_size();
                          __chkstk_darwin(v182, v183, v184);
                          __error();
                          *(_WORD *)_os_log_pack_fill() = 0;
                          __SC_log_send();
                        }
                      }
                      if (v148)
                      {
LABEL_386:
                        if (v201) {
                          free(v201);
                        }
                        if (v149) {
                          free(v149);
                        }
                        if (Mutable)
                        {
                          CFRelease(Mutable);
                          CFArrayRef Mutable = 0;
                        }
                        if (v213)
                        {
                          CFRelease(v213);
                          CFArrayRef v213 = 0;
                        }
                        if (v214)
                        {
                          CFRelease(v214);
                          CFDictionaryRef v214 = 0;
                        }
                        sub_10002BA48();
                        sub_10002B164();
                        sub_10002BD2C();
                        sub_10002BEE4();
                        return;
                      }
LABEL_385:
                      CFRelease(v197);
                      goto LABEL_386;
                    }
                    uint64_t v149 = (void *)v93;
                    if (qword_10007DCE8)
                    {
                      v176 = sub_100031738((void *)qword_10007DCE8, kSCEntNetProxies);
                      if (!v171)
                      {
                        if (v176)
                        {
                          unsigned int v177 = "+";
                          goto LABEL_362;
                        }
                        goto LABEL_361;
                      }
                      if (v176)
                      {
                        if (!CFEqual(v171, v176))
                        {
                          unsigned int v177 = "!";
LABEL_362:
                          CFStringAppendFormat(v147, 0, @" Proxy%s", v177);
                          goto LABEL_363;
                        }
LABEL_361:
                        unsigned int v177 = "";
                        goto LABEL_362;
                      }
                    }
                    else if (!v171)
                    {
                      goto LABEL_361;
                    }
                    unsigned int v177 = "-";
                    goto LABEL_362;
                  }
                  CFDictionaryRef v171 = v186;
                  if (qword_10007DCE0)
                  {
                    v172 = sub_100031738((void *)qword_10007DCE0, kSCEntNetDNS);
                    CFDictionaryRef v173 = v185;
                    if (!v185)
                    {
                      unsigned int v147 = v197;
                      if (v172)
                      {
                        int v174 = "+";
                        goto LABEL_343;
                      }
                      goto LABEL_342;
                    }
                    unsigned int v147 = v197;
                    if (v172)
                    {
                      if (!CFEqual(v185, v172))
                      {
                        int v174 = "!";
LABEL_343:
                        if (*v174) {
                          BOOL v175 = 1;
                        }
                        else {
                          BOOL v175 = v193 == 0;
                        }
                        if (!v175) {
                          int v174 = "*";
                        }
                        CFStringAppendFormat(v147, 0, @" DNS%s", v174);
                        goto LABEL_349;
                      }
LABEL_342:
                      int v174 = "";
                      goto LABEL_343;
                    }
                  }
                  else
                  {
                    CFDictionaryRef v173 = v185;
                    unsigned int v147 = v197;
                    if (!v185) {
                      goto LABEL_342;
                    }
                  }
                  int v174 = "-";
                  goto LABEL_343;
                }
                uint64_t v144 = qword_10007DC88;
                int v145 = sub_10002B4AC();
                if (!(v93 | v144)) {
                  goto LABEL_286;
                }
                if (v93)
                {
                  if (v144)
                  {
                    int v150 = *(_DWORD *)(v144 + 16);
                    if (v150 == *(_DWORD *)(v93 + 16))
                    {
                      if (v150 < 1)
                      {
LABEL_286:
                        BOOL v146 = v145 != -1;
                        goto LABEL_302;
                      }
                      int v151 = (int *)(v93 + 224 * *(int *)(v93 + 4) + 40);
                      int v152 = (int *)(v144 + 224 * *(int *)(v144 + 4) + 40);
                      while (!strcmp((const char *)(v144 + 112 * *v152 + 40), (const char *)(v93 + 112 * *v151 + 40)))
                      {
                        ++v152;
                        ++v151;
                        if (!--v150) {
                          goto LABEL_286;
                        }
                      }
                    }
                  }
                }
                if (v145 == -1)
                {
                  BOOL v204 = 0;
LABEL_303:
                  v153 = v201;
                  uint64_t v154 = 0;
                  int v155 = 1;
                  uint64_t v156 = 52;
                  do
                  {
                    uint64_t v206 = v156;
                    char v157 = v155;
                    int v158 = byte_10006968C[v154];
                    if (v204)
                    {
                      int v159 = v155;
                      uint64_t v160 = 3;
                      if (v157) {
                        uint64_t v160 = 2;
                      }
                      uint64_t v161 = (uint64_t)(v201 + 10);
                      if (!v159) {
                        uint64_t v161 = (uint64_t)&v201[28 * v153[1] + 10];
                      }
                      int v162 = v153[v160];
                      if (v162 >= 1)
                      {
                        do
                        {
                          sub_1000439DC(v161, v158, v145);
                          v161 += 112;
                          --v162;
                        }
                        while (v162);
                      }
                    }
                    char v208 = v157;
                    uint64_t first_ifstate = nwi_state_get_first_ifstate();
                    if (first_ifstate)
                    {
                      uint64_t next = first_ifstate;
                      uint64_t v165 = 0;
                      CFMutableStringRef v166 = 0;
                      do
                      {
                        unsigned int v167 = "?";
                        if ((*(void *)(next + 16) & 0xE00uLL) <= 0x5FF) {
                          unsigned int v167 = (const char *)*((void *)&off_100076900 + ((*(void *)(next + 16) >> 8) & 0xFLL));
                        }
                        unsigned int v168 = inet_ntop(*(unsigned __int8 *)(next + 32), (const void *)(next + 36), (char *)valuePtr, 0x2Eu);
                        if (v165)
                        {
                          if (!v166) {
                            CFMutableStringRef v166 = CFStringCreateMutable(0, 0);
                          }
                          uint64_t ifname = nwi_ifstate_get_ifname();
                          CFStringAppendFormat(v166, 0, @", %s", ifname);
                          if (*v167) {
                            CFStringAppendFormat(v166, 0, @"%s:%s", v167, v168);
                          }
                        }
                        else
                        {
                          uint64_t v165 = CFStringCreateMutable(0, 0);
                          uint64_t v170 = nwi_ifstate_get_ifname();
                          CFStringAppendFormat(v165, 0, @"%s%s:%s", v170, v167, v168);
                        }
                        uint64_t next = nwi_ifstate_get_next();
                      }
                      while (next);
                      v153 = v201;
                      if (v165)
                      {
                        CFStringAppendFormat(v197, 0, @" v%c(%@"), v206, v165;
                        if (v166)
                        {
                          if (CFStringGetLength(v166)) {
                            CFStringAppendFormat(v197, 0, @"%@", v166);
                          }
                          CFStringAppend(v197, @""));
                          CFRelease(v165);
                        }
                        else
                        {
                          CFStringAppend(v197, @""));
                          CFMutableStringRef v166 = v165;
                        }
                        CFRelease(v166);
                      }
                    }
                    int v155 = 0;
                    uint64_t v156 = 54;
                    uint64_t v154 = &_mh_execute_header.magic + 1;
                  }
                  while ((v208 & 1) != 0);
                  goto LABEL_330;
                }
                sub_1000436FC(v144, v145);
                BOOL v146 = 1;
LABEL_302:
                BOOL v204 = v146;
                goto LABEL_303;
              }
LABEL_271:
              CFRelease(v141);
              goto LABEL_272;
            }
            if (v140 && qword_10007DDB0)
            {
              if (CFEqual((CFTypeRef)qword_10007DDB0, v140))
              {
                int v139 = 0;
                goto LABEL_270;
              }
            }
            else if (!v140)
            {
              unsigned int v142 = (const void *)qword_10007DDB8;
              sub_100034064(v213, (const void *)qword_10007DDB8);
              CFDictionaryRemoveValue(v214, v142);
              goto LABEL_269;
            }
            sub_100033D18((uint64_t)&Mutable, (const void *)qword_10007DDB8, v140);
LABEL_269:
            int v139 = 1;
LABEL_270:
            unsigned int v141 = (__CFDictionary *)qword_10007DDB0;
            if (!qword_10007DDB0) {
              goto LABEL_272;
            }
            goto LABEL_271;
          }
        }
        else if (!valuePtr[0])
        {
          int v135 = 1;
          if (!qword_10007DDA8)
          {
LABEL_246:
            qword_10007DDA8 = (uint64_t)v133;
            if (v135)
            {
              unsigned int v136 = (const void *)qword_10007DDA0;
              sub_100034064(v213, (const void *)qword_10007DDA0);
              CFDictionaryRemoveValue(v214, v136);
            }
            else
            {
              MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, v133);
              CFDictionaryRemoveValue(MutableCopy, kSCPropInterfaceName);
              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchDomains);
              CFDictionaryRemoveValue(MutableCopy, kSCPropNetDNSSupplementalMatchOrders);
              CFDictionaryRemoveValue(MutableCopy, @"__SCOPED_QUERY__");
              sub_100033D18((uint64_t)&Mutable, (const void *)qword_10007DDA0, MutableCopy);
              CFRelease(MutableCopy);
            }
            goto LABEL_249;
          }
LABEL_245:
          CFRelease(v134);
          goto LABEL_246;
        }
        CFRetain(v133);
        int v135 = 0;
        unsigned int v134 = (const void *)qword_10007DDA8;
        if (!qword_10007DDA8) {
          goto LABEL_246;
        }
        goto LABEL_245;
      }
    }
    if (!v124) {
      goto LABEL_228;
    }
    goto LABEL_227;
  }
}

const void *sub_100037E6C(CFStringRef theString, void *a2)
{
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, @"/");
  CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
  CFIndex v5 = 0;
  if (Count < 4
    || (CFIndex v6 = Count, v5 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3), CFRetain(v5), !a2)
    || v6 == 4)
  {
    if (!a2) {
      goto LABEL_8;
    }
    CFStringRef ValueAtIndex = 0;
  }
  else
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4);
    CFRetain(ValueAtIndex);
  }
  *a2 = ValueAtIndex;
LABEL_8:
  if (ArrayBySeparatingStrings) {
    CFRelease(ArrayBySeparatingStrings);
  }
  return v5;
}

void sub_100037F48(__CFSet **a1, void *value)
{
  CFArrayRef Mutable = *a1;
  if (!Mutable)
  {
    CFArrayRef Mutable = CFSetCreateMutable(0, 0, &kCFTypeSetCallBacks);
    *a1 = Mutable;
  }

  CFSetAddValue(Mutable, value);
}

void sub_100037FD0(__int16 a1, CFTypeRef cf)
{
  CFRetain(cf);
  if (qword_10007DDD0 != -1) {
    dispatch_once(&qword_10007DDD0, &stru_100076C78);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_10003ABA0;
  block[3] = &unk_100076B10;
  __int16 v5 = a1;
  void block[4] = cf;
  dispatch_async((dispatch_queue_t)qword_10007DDD8, block);
}

void sub_1000380B4(const __CFArray *a1, const void *a2)
{
  if (qword_10007DCA8)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    *(_OWORD *)keys = 0u;
    long long v19 = 0u;
    CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DCA8);
    if (Count >= 11)
    {
      uint64_t v3 = (const void **)malloc_type_malloc(16 * Count, 0x87694FA9uLL);
      CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_10007DCA8, v3, &v3[Count]);
    }
    else
    {
      uint64_t v3 = (const void **)keys;
      CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_10007DCA8, (const void **)keys, (const void **)&keys[Count]);
      if (Count < 1) {
        return;
      }
    }
    uint64_t v4 = 0;
    CFStringRef v5 = kSCEntNetIPv4;
    CFIndex v6 = &v3[Count];
    int v15 = v3;
    do
    {
      uint64_t v7 = v3[v4];
      CFDictionaryRef v8 = (const __CFDictionary *)v6[v4];
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v8, v5);
      if (Value || (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v8, kSCEntNetIPv6)) != 0)
      {
        CFDictionaryRef v10 = sub_1000315FC(Value);
        if (v10)
        {
          if (CFEqual(v10, a2))
          {
            if (!qword_10007DC80) {
              qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            }
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v11 = _os_log_pack_size();
              __chkstk_darwin(v11, v12, v13);
              __error();
              uint64_t v14 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v14 = 138412546;
              *(void *)(v14 + 4) = v7;
              *(_WORD *)(v14 + 12) = 2112;
              *(void *)(v14 + 14) = a2;
              __SC_log_send();
              uint64_t v3 = v15;
              CFStringRef v5 = kSCEntNetIPv4;
            }
            sub_100034064(a1, v7);
          }
        }
      }
      ++v4;
    }
    while (Count != v4);
    if (v3 != (const void **)keys) {
      free(v3);
    }
  }
}

const void *sub_100038374(const void *a1, CFStringRef serviceID, CFStringRef entity)
{
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, serviceID, entity);
  CFStringRef v5 = sub_10003AFFC(a1, NetworkServiceEntity);
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  return v5;
}

void sub_100038408(CFTypeRef *a1)
{
  if (*((int *)a1 + 1) >= 1)
  {
    int v2 = 0;
    uint64_t v3 = a1 + 15;
    do
    {
      uint64_t v4 = *(v3 - 13);
      if (v4)
      {
        CFRelease(v4);
        *(v3 - 13) = 0;
      }
      CFStringRef v5 = *(v3 - 12);
      if (v5)
      {
        CFRelease(v5);
        *(v3 - 12) = 0;
      }
      if (*v3)
      {
        CFRelease(*v3);
        *uint64_t v3 = 0;
      }
      ++v2;
      v3 += 14;
    }
    while (v2 < *((_DWORD *)a1 + 1));
  }

  free(a1);
}

void *sub_1000384D0(int a1, const __CFArray *a2)
{
  unsigned int Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DCA8);
  unsigned int v5 = Count;
  if (!Count) {
    return 0;
  }
  v9[0] = a1;
  CFIndex v11 = 0;
  CFIndex v6 = &qword_10007DD28;
  if (a1 != 2) {
    CFIndex v6 = &qword_10007DD30;
  }
  uint64_t v13 = *v6;
  uint64_t v7 = malloc_type_malloc(112 * Count + 16, 0x25491112uLL);
  *uint64_t v7 = a1;
  v7[1] = 0;
  v7[2] = v5;
  v9[1] = v5;
  uint64_t v12 = v7;
  CFArrayRef v10 = a2;
  if (a2) {
    CFIndex v11 = CFArrayGetCount(a2);
  }
  else {
    CFArrayRef v10 = 0;
  }
  CFDictionaryApplyFunction((CFDictionaryRef)qword_10007DCA8, (CFDictionaryApplierFunction)sub_100040818, v9);
  uint64_t result = v12;
  if (!*((_DWORD *)v12 + 1))
  {
    sub_100038408((CFTypeRef *)v12);
    return 0;
  }
  return result;
}

uint64_t sub_1000385E4(int *a1, uint64_t a2)
{
  if (a1)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5, v6, v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      int v9 = a1[1];
      *(_DWORD *)uint64_t v8 = 136315394;
      *(void *)(v8 + 4) = a2;
      *(_WORD *)(v8 + 12) = 1024;
      *(_DWORD *)(v8 + 14) = v9;
      uint64_t result = __SC_log_send();
    }
    if (a1[1] >= 1)
    {
      int v10 = 0;
      CFIndex v11 = (char *)(a1 + 19);
      do
      {
        inet_ntop(*a1, v11, v24, 0x2Eu);
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (result)
        {
          uint64_t v12 = _os_log_pack_size();
          __chkstk_darwin(v12, v13, v14);
          __error();
          uint64_t v15 = _os_log_pack_fill();
          uint64_t v16 = *(void *)(v11 - 52);
          uint64_t v17 = *(void *)(v11 - 60);
          int v18 = *((_DWORD *)v11 - 5);
          long long v19 = " [ineligible]";
          if (!*((_DWORD *)v11 - 2)) {
            long long v19 = "";
          }
          *(_DWORD *)uint64_t v15 = 67110402;
          *(_DWORD *)(v15 + 4) = v10;
          *(_WORD *)(v15 + 8) = 2112;
          *(void *)(v15 + 10) = v16;
          *(_WORD *)(v15 + 18) = 2112;
          *(void *)(v15 + 20) = v17;
          *(_WORD *)(v15 + 28) = 2080;
          *(void *)(v15 + 30) = v24;
          *(_WORD *)(v15 + 38) = 1024;
          *(_DWORD *)(v15 + 40) = v18;
          *(_WORD *)(v15 + 44) = 2080;
          *(void *)(v15 + 46) = v19;
          uint64_t result = __SC_log_send();
        }
        ++v10;
        v11 += 112;
      }
      while (v10 < a1[1]);
    }
  }
  else
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v20 = _os_log_pack_size();
      __chkstk_darwin(v20, v21, v22);
      __error();
      uint64_t v23 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v23 = 136315138;
      *(void *)(v23 + 4) = a2;
      return __SC_log_send();
    }
  }
  return result;
}

_DWORD *sub_100038978(uint64_t a1, uint64_t a2, _DWORD *a3, int a4, void *a5, const __CFDictionary *a6, const __CFSet *a7)
{
  if (!a6) {
    sub_1000652DC();
  }
  uint64_t v8 = a1;
  if (a1)
  {
    uint64_t v116 = a2;
    CFSetRef v118 = a7;
    __chkstk_darwin(a1, a2, a3);
    uint64_t v13 = (uint64_t *)((char *)&v106 - ((v12 + 15) & 0xFFFFFFFF0));
    if (v12 >= 0x200) {
      size_t v14 = 512;
    }
    else {
      size_t v14 = v12;
    }
    bzero((char *)&v106 - ((v12 + 15) & 0xFFFFFFFF0), v14);
    int v16 = *(_DWORD *)(v8 + 4);
    if (a4 == 2) {
      int v17 = 5;
    }
    else {
      int v17 = 3;
    }
    int v18 = &kSCEntNetIPv4;
    if (a4 != 2) {
      int v18 = &kSCEntNetIPv6;
    }
    if (v16 >= 1)
    {
      BOOL v111 = v13;
      unsigned int v109 = &v106;
      int v113 = a3;
      CFDictionaryRef v115 = a6;
      unsigned int v110 = a5;
      CFStringRef v122 = 0;
      int v19 = 0;
      uint64_t v20 = 0;
      int v112 = 0;
      uint64_t v21 = (v16 * v17);
      CFStringRef v119 = *v18;
      uint64_t v22 = (_DWORD *)(v8 + 16);
      int v114 = a4;
      BOOL v23 = a4 == 2;
      int v24 = 0;
      if (v23) {
        int v25 = 52;
      }
      else {
        int v25 = 54;
      }
      int v108 = v25;
      if (v23) {
        int v26 = 54;
      }
      else {
        int v26 = 52;
      }
      int v107 = v26;
      uint64_t v126 = (int)v21;
      uint64_t v127 = v21;
      long long v27 = off_100076A30;
      if (v23)
      {
        int v28 = sub_10003455C;
      }
      else
      {
        long long v27 = off_100076BC0;
        int v28 = sub_10003ED88;
      }
      if (v23) {
        int v29 = sub_100034A24;
      }
      else {
        int v29 = sub_100041BD4;
      }
      if (v23) {
        size_t v30 = 4;
      }
      else {
        size_t v30 = 16;
      }
      size_t v31 = *((int *)v27 + 18);
      size_t v135 = v30;
      size_t v136 = v31;
      *(void *)&long long v15 = 67110402;
      long long v106 = v15;
      uint64_t v117 = v8;
      CFArrayRef v129 = v28;
      while (1)
      {
        if (v22[13]) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v122 == 0;
        }
        v125 = v22;
        if (v32)
        {
          unsigned int v33 = v22[10];
          if (HIBYTE(v33) != 3)
          {
            if (!v116) {
              goto LABEL_38;
            }
            if (*(_DWORD *)(v116 + 52)) {
              goto LABEL_38;
            }
            unsigned int v34 = *(_DWORD *)(v116 + 40);
            if (HIBYTE(v34) == 3) {
              goto LABEL_38;
            }
            uint64_t v22 = v125;
            if (v125[11])
            {
              int v123 = 0;
              int v124 = 1;
              goto LABEL_40;
            }
            if (*(_DWORD *)(v116 + 44)) {
              goto LABEL_38;
            }
            int v83 = v125[12];
            if (!v83 && !*(_DWORD *)(v116 + 48) || (int v84 = *(_DWORD *)(v116 + 32), v85 = v125[8], v84 == v85))
            {
              int v123 = 0;
              int v124 = 1;
              CFStringRef v122 = v125;
              uint64_t v22 = v125;
              goto LABEL_41;
            }
            if (*(_DWORD *)(v116 + 36) == v85)
            {
LABEL_38:
              int v123 = 0;
              int v124 = 1;
            }
            else
            {
              int v123 = 0;
              int v124 = 1;
              if (v33 >= v34 && v125[9] != v84)
              {
                int v86 = *(_DWORD *)(v116 + 48);
                if (v83)
                {
                  if (v33 != v34 || !v86) {
                    goto LABEL_163;
                  }
                  goto LABEL_38;
                }
                int v123 = 0;
                int v124 = 1;
                if (v33 != v34 && v86)
                {
LABEL_163:
                  if (!qword_10007DC80) {
                    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
                  }
                  _SC_syslog_os_log_mapping();
                  int v87 = __SC_log_enabled();
                  int v88 = v125;
                  if (v87)
                  {
                    uint64_t v89 = _os_log_pack_size();
                    __chkstk_darwin(v89, v90, v91);
                    __error();
                    uint64_t v92 = _os_log_pack_fill();
                    uint64_t v93 = *((void *)v88 + 1);
                    int v94 = v88[10];
                    uint64_t v95 = *(void *)(v116 + 8);
                    int v96 = *(_DWORD *)(v116 + 40);
                    *(_DWORD *)uint64_t v92 = v106;
                    *(_DWORD *)(v92 + 4) = v108;
                    *(_WORD *)(v92 + 8) = 2112;
                    *(void *)(v92 + 10) = v93;
                    *(_WORD *)(v92 + 18) = 1024;
                    *(_DWORD *)(v92 + 20) = v94;
                    *(_WORD *)(v92 + 24) = 1024;
                    *(_DWORD *)(v92 + 26) = v107;
                    *(_WORD *)(v92 + 30) = 2112;
                    *(void *)(v92 + 32) = v95;
                    *(_WORD *)(v92 + 40) = 1024;
                    *(_DWORD *)(v92 + 42) = v96;
                    __SC_log_send();
                  }
                  int v124 = 0;
                  CFStringRef v122 = 0;
                  int v97 = v112;
                  v111[v112] = (uint64_t)v88;
                  int v123 = 1;
                  int v112 = v97 + 1;
                  uint64_t v8 = v117;
                  uint64_t v22 = v88;
                  int v28 = v129;
                  goto LABEL_41;
                }
              }
            }
            uint64_t v22 = v125;
LABEL_40:
            CFStringRef v122 = v22;
            goto LABEL_41;
          }
          CFStringRef v122 = 0;
          int v123 = 1;
          int v124 = 1;
          uint64_t v22 = v125;
        }
        else
        {
          int v123 = 1;
          int v124 = 1;
        }
LABEL_41:
        uint64_t v35 = (const void **)v22;
        CFDictionaryRef v36 = (const __CFDictionary *)sub_100031738(*(void **)v22, v119);
        uint64_t v37 = sub_100033BC8(v36);
        if (!v37) {
          goto LABEL_142;
        }
        uint64_t v38 = v37;
        int v39 = *((_DWORD *)v35 + 10);
        int v40 = v39 & 0xFFFFFF | 0x3000000;
        if (v124) {
          int v40 = *((_DWORD *)v35 + 10);
        }
        unsigned int v128 = v40;
        if (v118) {
          int v131 = CFSetContainsValue(v118, *v35);
        }
        else {
          int v131 = 0;
        }
        int v120 = v24;
        int v121 = v19;
        uint64_t v41 = v28(0);
        if (*(int *)v38 < 1) {
          goto LABEL_135;
        }
        int v42 = 0;
        int v132 = v39 & 0xFFFFFF;
        CFIndex v43 = &v38[v41];
        size_t v44 = v136;
        CFArrayRef v130 = v38;
        do
        {
          if (v42 || (__int16 v45 = *((_WORD *)v38 + 4), v134 = v128, (v45 & 2) == 0)) {
            unsigned int v134 = v132 | (v43[15] << 24);
          }
          if (!v20)
          {
            size_t v46 = v28(v126);
            uint64_t v20 = (int *)malloc_type_malloc(v46, 0xE392A645uLL);
            bzero(v20, v46);
            v20[1] = v127;
          }
          int v133 = v42;
          uint64_t v47 = v28(0);
          LODWORD(v48) = *v20;
          if (*v20 < 1)
          {
            unsigned int v49 = 0;
            uint64_t v53 = -1;
LABEL_94:
            if (v20[1] == v48)
            {
              int v66 = 2 * v48;
              size_t v67 = v28(2 * (int)v48);
              uint64_t v68 = (int *)reallocf(v20, v67);
              uint64_t v20 = v68;
              if (!v68) {
                goto LABEL_118;
              }
              v68[1] = v66;
            }
            if (v53 == -1)
            {
              unint64_t v70 = (char *)v20 + v28(*v20);
            }
            else
            {
              uint64_t v69 = v28(v53);
              unint64_t v70 = (char *)v20 + v69;
              memmove((char *)v20 + v69 + v44, (char *)v20 + v69, (*v20 - v53) * v44);
            }
            memcpy(v70, v43, v44);
            uint64_t v71 = *v20 + 1;
            *uint64_t v20 = v71;
            *((_DWORD *)v70 + 3) = v134;
            if (v131) {
              *((_WORD *)v70 + 9) |= 4u;
            }
            BOOL v72 = HIBYTE(v134) == 3;
            if (v49 == 2)
            {
              if (!v71 || v53 + 1 >= v71)
              {
LABEL_118:
                int v73 = v133;
                goto LABEL_119;
              }
              unint64_t v70 = (char *)v20 + ((uint64_t (*)(void))v28)();
            }
            else if (v49 != 1)
            {
              goto LABEL_115;
            }
            BOOL v72 = 1;
LABEL_115:
            int v73 = v133;
            if (v70 && v72) {
              *((_WORD *)v70 + 8) |= 1u;
            }
            goto LABEL_119;
          }
          unsigned int v49 = 0;
          CFDictionaryRef v50 = 0;
          uint64_t v51 = 0;
          CFDictionaryRef v52 = (char *)v20 + v47;
          uint64_t v53 = -1;
          while (1)
          {
            unsigned int v54 = *((_DWORD *)v52 + 3);
            CFArrayRef v55 = (const void *)v29((uint64_t)v43);
            CFNumberRef v56 = (const void *)v29((uint64_t)v52);
            int v57 = memcmp(v55, v56, v135);
            if (!v57)
            {
              int v57 = *(_DWORD *)v43 - *(_DWORD *)v52;
              if (*(_DWORD *)v43 == *(_DWORD *)v52) {
                break;
              }
            }
            int v58 = 0;
            int v59 = 1;
LABEL_59:
            if ((v58 & (v50 == 0)) != 0) {
              CFDictionaryRef v50 = v52;
            }
            if ((v57 & 0x80000000) == 0)
            {
              if (!v57) {
                goto LABEL_99;
              }
              if (v49 <= 1) {
                int v60 = 1;
              }
              else {
                int v60 = v49;
              }
              if (!v59) {
                unsigned int v49 = v60;
              }
              goto LABEL_78;
            }
            if (v53 == -1)
            {
              if (v50) {
                int v61 = v58;
              }
              else {
                int v61 = 0;
              }
              if (v61 != 1) {
                goto LABEL_77;
              }
              uint64_t v53 = v51;
              if ((*((_WORD *)v50 + 8) & 1) == 0)
              {
                if (*((_WORD *)v52 + 8)) {
                  unsigned int v49 = 1;
                }
                else {
                  unsigned int v49 = 2;
                }
LABEL_77:
                uint64_t v53 = v51;
              }
            }
LABEL_78:
            ++v51;
            v52 += v136;
            uint64_t v48 = *v20;
            if (v51 >= v48)
            {
              int v28 = v129;
              size_t v44 = v136;
LABEL_93:
              uint64_t v38 = v130;
              goto LABEL_94;
            }
          }
          int v62 = *((_DWORD *)v43 + 1);
          int v63 = *((_DWORD *)v52 + 1);
          int v64 = v62 - v63;
          if (v62 != v63 && (v62 && v63 || (*((_WORD *)v43 + 8) & 1) != 0 || (*((_WORD *)v52 + 8) & 1) != 0))
          {
            int v59 = 0;
            if (v54 > v134) {
              int v65 = -1;
            }
            else {
              int v65 = 1;
            }
            if (v54 == v134) {
              int v57 = v64;
            }
            else {
              int v57 = v65;
            }
            int v58 = 1;
            goto LABEL_59;
          }
LABEL_99:
          if (v53 != -1
            && *((_DWORD *)v52 + 1) == *((_DWORD *)v43 + 1)
            && !*((_DWORD *)v52 + 2)
            && !*((_DWORD *)v43 + 2))
          {
            LODWORD(v48) = *v20;
            int v28 = v129;
            size_t v44 = v136;
            if (*v20 && v51 < (int)v48)
            {
              uint64_t v77 = (int)v48 - 1;
              *uint64_t v20 = v77;
              if (v77 == v51)
              {
                LODWORD(v48) = v48 - 1;
              }
              else
              {
                uint64_t v78 = v28(v51);
                memmove((char *)v20 + v78, (char *)v20 + v78 + v44, (*v20 - v51) * v44);
                LODWORD(v48) = *v20;
              }
            }
            goto LABEL_93;
          }
          int v28 = v129;
          size_t v44 = v136;
          if (*((_DWORD *)v43 + 2))
          {
            uint64_t v38 = v130;
            goto LABEL_118;
          }
          uint64_t v38 = v130;
          int v73 = v133;
          if (*((_DWORD *)v52 + 2) || *((_DWORD *)v52 + 3) > v134)
          {
            int v74 = *((_DWORD *)v52 + 1);
            if (!v74) {
              int v74 = *((_DWORD *)v43 + 1);
            }
            __int16 v75 = *((_WORD *)v52 + 8);
            memcpy(v52, v43, v136);
            unsigned int v76 = v134;
            *((_DWORD *)v52 + 2) = 0;
            *((_DWORD *)v52 + 3) = v76;
            *((_DWORD *)v52 + 1) = v74;
            if (v75) {
              *((_WORD *)v52 + 8) |= 1u;
            }
            if (v131) {
              *((_WORD *)v52 + 9) |= 4u;
            }
            size_t v44 = v136;
          }
LABEL_119:
          int v42 = v73 + 1;
          v43 += v44;
        }
        while (v42 < *(_DWORD *)v38);
LABEL_135:
        char v79 = v124;
        if (*((_WORD *)v38 + 4)) {
          char v79 = 0;
        }
        if (v79)
        {
          uint64_t v80 = v125;
          int v24 = v120;
          int v19 = v121;
          uint64_t v8 = v117;
          if (!v125[13])
          {
            int v81 = v114;
            sub_1000411C8((uint64_t)v125, v115, v114);
            sub_1000415AC(v113, v81, (uint64_t)v80, v19, (v38[8] >> 2) & 1);
          }
          int v82 = v80;
          goto LABEL_145;
        }
        int v24 = v120;
        int v19 = v121;
        uint64_t v8 = v117;
LABEL_142:
        if (!v123) {
          int v19 = 1;
        }
        int v82 = v125;
LABEL_145:
        ++v24;
        uint64_t v22 = v82 + 28;
        if (v24 >= *(_DWORD *)(v8 + 4))
        {
          char v98 = v19;
          CFDictionaryRef v99 = v115;
          int v100 = v114;
          CFArrayRef v101 = v113;
          uint64_t v102 = v111;
          if (v112 >= 1)
          {
            uint64_t v103 = v112;
            do
            {
              uint64_t v104 = *v102++;
              sub_1000411C8(v104, v99, v100);
              sub_1000415AC(v101, v100, v104, 1, 0);
              --v103;
            }
            while (v103);
          }
          a5 = v110;
          if (v110)
          {
            uint64_t result = v122;
            goto LABEL_175;
          }
          if (v20) {
            free(v20);
          }
          uint64_t result = v122;
LABEL_176:
          if (v98) {
            return 0;
          }
          return result;
        }
      }
    }
  }
  uint64_t result = 0;
  if (a5)
  {
    char v98 = 0;
    uint64_t v20 = 0;
LABEL_175:
    *a5 = v20;
    goto LABEL_176;
  }
  return result;
}

uint64_t sub_1000393CC(CFTypeRef *a1, CFTypeRef cf, uint64_t a3)
{
  CFTypeRef v5 = *a1;
  if (!cf)
  {
    if (!v5) {
      return 0;
    }
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12, v13, v14);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 138412546;
      *(void *)(v15 + 4) = v5;
      *(_WORD *)(v15 + 12) = 2080;
      *(void *)(v15 + 14) = a3;
      __SC_log_send();
    }
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    return 1;
  }
  if (!v5)
  {
LABEL_18:
    *a1 = CFRetain(cf);
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v16 = _os_log_pack_size();
      __chkstk_darwin(v16, v17, v18);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v19 = 138412546;
      *(void *)(v19 + 4) = cf;
      *(_WORD *)(v19 + 12) = 2080;
      *(void *)(v19 + 14) = a3;
      __SC_log_send();
      return 1;
    }
    return 1;
  }
  if (!CFEqual(cf, v5))
  {
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    goto LABEL_18;
  }
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8, v9, v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 138412546;
    *(void *)(v11 + 4) = cf;
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v11 + 14) = a3;
    __SC_log_send();
    return 0;
  }
  return result;
}

void sub_100039730(const void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (a1 && a2)
    {
      CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if ((*(_WORD *)(a2 + 28) & 2) != 0)
      {
        inet_ntop(30, (const void *)(a2 + 48), v26, 0x2Eu);
        CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%s", v26);
        CFDictionarySetValue(Mutable, kSCPropNetIPv6Router, v7);
        CFRelease(v7);
      }
      uint64_t v8 = (const char *)sub_10002B5F8(*(_DWORD *)(a2 + 16), (uint64_t)v26);
      if (v8)
      {
        CFStringRef v9 = CFStringCreateWithCString(0, v8, 0x600u);
        if (v9)
        {
          CFStringRef v10 = v9;
          CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryInterface, v9);
          CFRelease(v10);
        }
      }
      CFDictionarySetValue(Mutable, kSCDynamicStorePropNetPrimaryService, a1);
      sub_100033D18(a3, (const void *)qword_10007DD68, Mutable);
      CFRelease(Mutable);
      sub_10002C118(*(_DWORD *)(a2 + 16));
    }
    else
    {
      sub_10002C118(0);
      uint64_t v11 = (const void *)qword_10007DD68;
      sub_100034064(*(const __CFArray **)(a3 + 8), (const void *)qword_10007DD68);
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 16), v11);
    }
  }
  unsigned int v12 = sub_100033DCC();
  if (v12 != -1)
  {
    unsigned int v13 = v12;
    sub_100034118((uint64_t)off_100076BC0, (int *)a2);
    if (byte_10007DC9C == 1)
    {
      if (qword_10007DD70)
      {
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v14 = _os_log_pack_size();
          __chkstk_darwin(v14, v15, v16);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
        sub_100041F58((unsigned int *)qword_10007DD70);
      }
      else
      {
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v17 = _os_log_pack_size();
          __chkstk_darwin(v17, v18, v19);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
      }
      if (a2)
      {
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v20 = _os_log_pack_size();
          __chkstk_darwin(v20, v21, v22);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
        sub_100041F58((unsigned int *)a2);
      }
      else
      {
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v23 = _os_log_pack_size();
          __chkstk_darwin(v23, v24, v25);
          __error();
          *(_WORD *)_os_log_pack_fill() = 0;
          __SC_log_send();
        }
      }
    }
    sub_100035198((uint64_t (**)(void))off_100076BC0, qword_10007DD70, (int *)a2, v13);
    close(v13);
  }
  if (qword_10007DD70) {
    free((void *)qword_10007DD70);
  }
  qword_10007DD70 = a2;
}

uint64_t sub_100039C5C(const __CFDictionary *a1, void *key, const void *a3)
{
  uint64_t v5 = 0x1FFFFFFLL;
  if (sub_100031738(key, a3))
  {
    unsigned int valuePtr = 0x1FFFFFF;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, key);
    if (Value)
    {
      if (CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr)) {
        return valuePtr;
      }
      else {
        return 0x1000000;
      }
    }
  }
  return v5;
}

void sub_100039D04(const __CFDictionary *a1, int *a2, int *a3)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFDictionaryRef v55 = a1;
  CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)sub_100042094, Mutable);
  CFIndex Count = CFArrayGetCount(Mutable);
  if (Count < 1) {
    goto LABEL_55;
  }
  CFIndex v5 = 0;
  CFStringRef v54 = (const __CFString *)kSCEntNetCommCenter;
  uint64_t v51 = (const void *)kSCPropNetCommCenterAvailable;
  p_base_props = &QoSMarkingController__classData.base_props;
  CFDictionaryRef v50 = Mutable;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(Mutable, v5);
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, ValueAtIndex, @"/");
    if (CFArrayGetCount(ArrayBySeparatingStrings) != 5) {
      goto LABEL_36;
    }
    CFStringRef v9 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3);
    CFStringRef v10 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4);
    if (CFEqual(v10, v54))
    {
      CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, v9, v54);
      CFNumberRef Value = CFDictionaryGetValue(v55, NetworkServiceEntity);
      CFRelease(NetworkServiceEntity);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (!Value || CFGetTypeID(Value) != TypeID) {
        goto LABEL_36;
      }
      CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(v55, ValueAtIndex);
      if ((int)sub_100042180(v14, v51, 0xFFFFFFFFLL) >= 1)
      {
        if (sub_10003E730((const __CFDictionary *)Value, v51)) {
          break;
        }
      }
    }
    if (CFEqual(v10, kSCEntNetPPP))
    {
      CFStringRef v15 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v9, kSCEntNetInterface);
      uint64_t v16 = CFDictionaryGetValue(v55, v15);
      CFRelease(v15);
      CFTypeID v17 = CFDictionaryGetTypeID();
      if (v16
        && CFGetTypeID(v16) == v17
        && CFDictionaryContainsKey((CFDictionaryRef)v16, kSCPropNetInterfaceDeviceName))
      {
        if (CFEqual(v10, kSCEntNetPPP)
          && (uint64_t v18 = CFDictionaryGetValue(v55, ValueAtIndex), v19 = CFDictionaryGetTypeID(), v18)
          && CFGetTypeID(v18) == v19
          && (CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)v18, kSCPropNetPPPDialOnDemand),
              CFTypeID v21 = CFNumberGetTypeID(),
              v20)
          && CFGetTypeID(v20) == v21)
        {
          int valuePtr = 0;
          int v22 = CFNumberGetValue(v20, kCFNumberSInt32Type, &valuePtr);
          if (valuePtr) {
            BOOL v23 = v22 == 0;
          }
          else {
            BOOL v23 = 1;
          }
          if (v23) {
            int v24 = 7;
          }
          else {
            int v24 = 15;
          }
        }
        else
        {
          int v24 = 7;
        }
      }
      else
      {
        int v24 = 0;
      }
      CFStringRef v25 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v9, kSCEntNetIPv4);
      if (CFDictionaryContainsKey(v55, v25))
      {
        *a2 |= v24;
        if (!p_base_props[400]) {
          p_base_props[400] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v26 = _os_log_pack_size();
          __chkstk_darwin(v26, v27, v28);
          __error();
          uint64_t v29 = _os_log_pack_fill();
          int v30 = *a2;
          *(_DWORD *)uint64_t v29 = 138412546;
          *(void *)(v29 + 4) = v9;
          *(_WORD *)(v29 + 12) = 1024;
          *(_DWORD *)(v29 + 14) = v30;
          CFMutableArrayRef Mutable = v50;
          __SC_log_send();
          p_base_props = &QoSMarkingController__classData.base_props;
        }
      }
      CFRelease(v25);
      CFStringRef v31 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v9, kSCEntNetIPv6);
      if (CFDictionaryContainsKey(v55, v31))
      {
        *a3 |= v24;
        if (!p_base_props[400]) {
          p_base_props[400] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v32 = _os_log_pack_size();
          __chkstk_darwin(v32, v33, v34);
          __error();
          CFMutableArrayRef Mutable = v50;
          uint64_t v35 = _os_log_pack_fill();
          int v36 = *a3;
          *(_DWORD *)uint64_t v35 = 138412546;
          *(void *)(v35 + 4) = v9;
          *(_WORD *)(v35 + 12) = 1024;
          *(_DWORD *)(v35 + 14) = v36;
          __SC_log_send();
          p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
        }
      }
      CFRelease(v31);
      if (v24) {
        goto LABEL_53;
      }
    }
LABEL_36:
    if (ArrayBySeparatingStrings) {
      CFRelease(ArrayBySeparatingStrings);
    }
    if (Count == ++v5) {
      goto LABEL_55;
    }
  }
  int v37 = 262151;
  int v38 = sub_100042180((const __CFDictionary *)Value, @"AvailableProtocols", 0);
  int v39 = 262151;
  if (v38)
  {
    int v39 = (v38 << 30 >> 31) & 0x40007;
    if ((v38 & 1) == 0) {
      int v37 = 0;
    }
  }
  *a2 |= v37;
  if (!p_base_props[400]) {
    p_base_props[400] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v40 = _os_log_pack_size();
    __chkstk_darwin(v40, v41, v42);
    __error();
    uint64_t v43 = _os_log_pack_fill();
    int v44 = *a2;
    *(_DWORD *)uint64_t v43 = 138412546;
    *(void *)(v43 + 4) = v9;
    *(_WORD *)(v43 + 12) = 1024;
    *(_DWORD *)(v43 + 14) = v44;
    p_base_props = &QoSMarkingController__classData.base_props;
    __SC_log_send();
  }
  *a3 |= v39;
  if (!p_base_props[400]) {
    p_base_props[400] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v45 = _os_log_pack_size();
    __chkstk_darwin(v45, v46, v47);
    __error();
    uint64_t v48 = _os_log_pack_fill();
    int v49 = *a3;
    *(_DWORD *)uint64_t v48 = 138412546;
    *(void *)(v48 + 4) = v9;
    *(_WORD *)(v48 + 12) = 1024;
    *(_DWORD *)(v48 + 14) = v49;
    __SC_log_send();
  }
  CFMutableArrayRef Mutable = v50;
LABEL_53:
  if (ArrayBySeparatingStrings) {
    CFRelease(ArrayBySeparatingStrings);
  }
LABEL_55:
  CFRelease(Mutable);
}

uint64_t sub_10003A4F0(unsigned int *a1)
{
  sub_1000312D0((uint64_t)a1, (uint64_t)&v15);
  if ((void)v15 == (void)xmmword_10007DD78
    && *((void *)&v15 + 1) == *((void *)&xmmword_10007DD78 + 1)
    && (void)v16 == qword_10007DD88
    && *((void *)&v16 + 1) == unk_10007DD90)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12, v13, v14);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
      return 0;
    }
  }
  else
  {
    xmmword_10007DD78 = v15;
    *(_OWORD *)&qword_10007DD88 = v16;
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5, v6, v7);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    sub_10004221C(a1);
    if (sub_100045240((const __CFData *)a1)) {
      return 1;
    }
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled())
    {
      return 1;
    }
    else
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8, v9, v10);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
      return 1;
    }
  }
  return result;
}

CFIndex sub_10003A7FC(const __CFArray **a1, const __SCDynamicStore *a2)
{
  CFArrayRef v3 = *a1;
  CFArrayRef v4 = a1[1];
  CFDictionaryRef v5 = a1[2];
  if (!CFArrayGetCount(*a1)) {
    CFArrayRef v3 = 0;
  }
  if (!CFArrayGetCount(v4)) {
    CFArrayRef v4 = 0;
  }
  CFIndex result = CFDictionaryGetCount(v5);
  if (!result) {
    CFDictionaryRef v5 = 0;
  }
  if (v3) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v5 == 0;
  }
  if (!v7 || v4 != 0)
  {
    if (byte_10007DC9C == 1)
    {
      if (v5)
      {
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v9 = _os_log_pack_size();
          __chkstk_darwin(v9, v10, v11);
          __error();
          uint64_t v12 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v12 = 138412290;
          *(void *)(v12 + 4) = v5;
          __SC_log_send();
        }
      }
      if (v4)
      {
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v13 = _os_log_pack_size();
          __chkstk_darwin(v13, v14, v15);
          __error();
          uint64_t v16 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v16 = 138412290;
          *(void *)(v16 + 4) = v4;
          __SC_log_send();
        }
      }
      if (v3)
      {
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v17 = _os_log_pack_size();
          __chkstk_darwin(v17, v18, v19);
          __error();
          uint64_t v20 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v20 = 138412290;
          *(void *)(v20 + 4) = v3;
          __SC_log_send();
        }
      }
    }
    return SCDynamicStoreSetMultiple(a2, v5, v4, v3);
  }
  return result;
}

void sub_10003AB44(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);

  sub_1000325BC(v1);
}

void sub_10003ABA0(uint64_t a1)
{
  sub_10003AC14(*(unsigned __int16 *)(a1 + 40), *(void **)(a1 + 32));
  int v2 = *(const void **)(a1 + 32);

  CFRelease(v2);
}

void sub_10003AC14(int a1, void *a2)
{
  if (a1 == 2)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 138412290;
      *(void *)(v10 + 4) = a2;
      __SC_log_send();
    }
    sub_10003AF80((CFTypeRef *)&qword_10007DD38, a2);
    sub_10003AF80((CFTypeRef *)&qword_10007DD40, a2);
    sub_100037F48((__CFSet **)&qword_10007DD48, a2);
  }
  else
  {
    if (a1 == 1)
    {
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v11 = _os_log_pack_size();
        __chkstk_darwin(v11, v12, v13);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v14 = 138412290;
        *(void *)(v14 + 4) = a2;
        __SC_log_send();
      }
      if (!qword_10007DD38 || !CFSetContainsValue((CFSetRef)qword_10007DD38, a2)) {
        sub_100037F48((__CFSet **)&qword_10007DD40, a2);
      }
    }
    else
    {
      if (a1) {
        return;
      }
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v3 = _os_log_pack_size();
        __chkstk_darwin(v3, v4, v5);
        __error();
        uint64_t v6 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v6 = 138412290;
        *(void *)(v6 + 4) = a2;
        __SC_log_send();
      }
      sub_100037F48((__CFSet **)&qword_10007DD38, a2);
      sub_10003AF80((CFTypeRef *)&qword_10007DD40, a2);
    }
    sub_10003AF80((CFTypeRef *)&qword_10007DD48, a2);
  }
}

void sub_10003AF80(CFTypeRef *a1, const void *a2)
{
  uint64_t v3 = (__CFSet *)*a1;
  if (v3)
  {
    CFSetRemoveValue(v3, a2);
    if (!CFSetGetCount((CFSetRef)*a1))
    {
      if (*a1)
      {
        CFRelease(*a1);
        *a1 = 0;
      }
    }
  }
}

const void *sub_10003AFFC(const void *a1, const void *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, a2);
  CFTypeID v6 = CFDictionaryGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) == v6) {
    return Value;
  }
  return 0;
}

uint64_t sub_10003B0AC(__CFString *serviceID, const __CFDictionary *a2, const __CFDictionary *a3, const void *a4)
{
  unsigned int v54 = 0x1000000;
  CFDictionaryRef v8 = (const __CFDictionary *)sub_10003B7B4(a4, serviceID, kSCEntNetCommCenter);
  CFDictionaryRef v9 = v8;
  if (v8)
  {
    BOOL value = 0;
    int valuePtr = 0;
    if (CFDictionaryGetValueIfPresent(v8, kSCPropNetCommCenterAvailable, (const void **)&value))
    {
      uint64_t v10 = value;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (v10)
      {
        if (CFGetTypeID(v10) == TypeID
          && CFNumberGetValue((CFNumberRef)value, kCFNumberIntType, &valuePtr)
          && valuePtr < 1)
        {
          a3 = 0;
          BOOL v12 = 0;
          unsigned int v54 = 0x4000000;
LABEL_76:
          BOOL v45 = a3 != 0;
          BOOL v46 = v12;
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          goto LABEL_82;
        }
      }
    }
    int v13 = 1;
  }
  else
  {
    int v13 = 0;
  }
  if (a3)
  {
    unint64_t v14 = (unint64_t)CFDictionaryGetValue(a3, kSCPropNetServicePrimaryRank);
    CFTypeID v15 = CFStringGetTypeID();
    if (v14)
    {
      if (CFGetTypeID((CFTypeRef)v14) != v15) {
        unint64_t v14 = 0;
      }
      if (v9) {
        BOOL v16 = v14 == 0;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        if (!qword_10007DC80) {
          qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v17 = _os_log_pack_size();
          v51[1] = v51;
          __chkstk_darwin(v17, v18, v19);
          __error();
          uint64_t v20 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v20 = 138412546;
          *(void *)(v20 + 4) = serviceID;
          *(_WORD *)(v20 + 12) = 2112;
          *(void *)(v20 + 14) = v14;
          __SC_log_send();
        }
        unint64_t v14 = 0;
      }
    }
    CFTypeID v21 = CFDictionaryGetValue(a3, @"IPIsCoupled");
    CFTypeID v22 = CFBooleanGetTypeID();
    if (v21 && CFGetTypeID(v21) == v22 && CFBooleanGetValue((CFBooleanRef)v21)) {
      int v13 = 1;
    }
    a3 = (const __CFDictionary *)sub_10003B848(a3, (uint64_t)serviceID, (uint64_t)kSCDynamicStoreDomainSetup, 0);
    if (a2)
    {
LABEL_28:
      unint64_t v23 = (unint64_t)CFDictionaryGetValue(a2, kSCPropNetServicePrimaryRank);
      CFTypeID v24 = CFStringGetTypeID();
      if (v23 && CFGetTypeID((CFTypeRef)v23) != v24) {
        unint64_t v23 = 0;
      }
      CFStringRef v25 = CFDictionaryGetValue(a2, @"IPIsCoupled");
      CFTypeID v26 = CFBooleanGetTypeID();
      if (v25 && CFGetTypeID(v25) == v26 && CFBooleanGetValue((CFBooleanRef)v25)) {
        int v13 = 1;
      }
      if (!a3) {
        a3 = (const __CFDictionary *)sub_10003B848(a2, (uint64_t)serviceID, (uint64_t)kSCDynamicStoreDomainState, 0);
      }
      if (v13) {
        goto LABEL_38;
      }
      goto LABEL_41;
    }
  }
  else
  {
    unint64_t v14 = 0;
    if (a2) {
      goto LABEL_28;
    }
  }
  unint64_t v23 = 0;
  if (v13)
  {
LABEL_38:
    BOOL v12 = 1;
    goto LABEL_44;
  }
LABEL_41:
  CFStringRef v27 = (const __CFString *)sub_10003BABC(a4, serviceID);
  if (v27)
  {
    CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, v27, kSCEntNetLink);
    uint64_t v29 = CFDictionaryGetValue((CFDictionaryRef)a4, NetworkInterfaceEntity);
    CFRelease(NetworkInterfaceEntity);
    BOOL v12 = sub_100033C5C(v29);
  }
  else
  {
    BOOL v12 = 0;
  }
LABEL_44:
  if (v14 | v23)
  {
    LOBYTE(value) = 0;
    LOBYTE(valuePtr) = 0;
    unsigned int v30 = sub_10003BA08((CFTypeRef)v14, &value);
    unsigned int v31 = sub_10003BA08((CFTypeRef)v23, &valuePtr);
    if ((_BYTE)value && (_BYTE)valuePtr)
    {
      if (v30 <= v31) {
        unsigned int v32 = v31;
      }
      else {
        unsigned int v32 = v30;
      }
      unsigned int v54 = v32;
      goto LABEL_55;
    }
    if ((_BYTE)value)
    {
      unsigned int v54 = v30;
LABEL_55:
      int v33 = 1;
      goto LABEL_57;
    }
    if ((_BYTE)valuePtr)
    {
      unsigned int v54 = v31;
      goto LABEL_55;
    }
  }
  int v33 = 0;
LABEL_57:
  uint64_t v34 = sub_10003BABC(a4, serviceID);
  if (v34)
  {
    uint64_t v35 = v34;
    if (qword_10007DD58)
    {
      CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DD58, v34);
      if (v36)
      {
        LODWORD(value) = 0;
        if (CFNumberGetValue(v36, kCFNumberSInt32Type, &value))
        {
          if (value)
          {
            if (value == 1) {
              unsigned int v37 = 0;
            }
            else {
              unsigned int v37 = value << 24;
            }
            if (!v33 || v37 > v54)
            {
              unsigned int v54 = v37;
              int v38 = "Interface";
LABEL_70:
              if (!qword_10007DC80) {
                qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
              }
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v39 = _os_log_pack_size();
                __chkstk_darwin(v39, v40, v41);
                __error();
                uint64_t v42 = _os_log_pack_fill();
                unsigned int v43 = v54;
                int v44 = " [coupled]";
                *(_DWORD *)uint64_t v42 = 138413314;
                *(void *)(v42 + 4) = serviceID;
                if (!v12) {
                  int v44 = "";
                }
                *(_WORD *)(v42 + 12) = 2112;
                *(void *)(v42 + 14) = v35;
                *(_WORD *)(v42 + 22) = 1024;
                *(_DWORD *)(v42 + 24) = v43;
                *(_WORD *)(v42 + 28) = 2080;
                *(void *)(v42 + 30) = v38;
                *(_WORD *)(v42 + 38) = 2080;
                *(void *)(v42 + 40) = v44;
                __SC_log_send();
              }
              goto LABEL_76;
            }
LABEL_69:
            int v38 = "Service";
            goto LABEL_70;
          }
        }
      }
    }
    if (v33) {
      goto LABEL_69;
    }
  }
  BOOL v45 = a3 != 0;
  BOOL v46 = v12;
  if (!a3 && !v33 && !v12) {
    return sub_10003BB8C(serviceID, kSCEntNetService, 0);
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v33)
  {
LABEL_82:
    CFNumberRef v49 = CFNumberCreate(0, kCFNumberSInt32Type, &v54);
    CFDictionarySetValue(Mutable, @"RankAssertion", v49);
    CFRelease(v49);
    if (!v46) {
      goto LABEL_83;
    }
LABEL_86:
    CFDictionarySetValue(Mutable, @"IPIsCoupled", kCFBooleanTrue);
    if (!v45) {
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v12) {
    goto LABEL_86;
  }
LABEL_83:
  if (v45) {
LABEL_87:
  }
    CFDictionarySetValue(Mutable, kSCPropNetServiceServiceIndex, a3);
LABEL_88:
  uint64_t v48 = sub_10003BB8C(serviceID, kSCEntNetService, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v48;
}

const void *sub_10003B7B4(const void *a1, CFStringRef serviceID, CFStringRef entity)
{
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, serviceID, entity);
  uint64_t v5 = sub_10003AFFC(a1, NetworkServiceEntity);
  if (NetworkServiceEntity) {
    CFRelease(NetworkServiceEntity);
  }
  return v5;
}

const void *sub_10003B848(const __CFDictionary *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (!a1) {
    return 0;
  }
  CFNumberRef Value = CFDictionaryGetValue(a1, kSCPropNetServiceServiceIndex);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!Value) {
    return Value;
  }
  if (CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  int valuePtr = 0;
  if (CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr)) {
    BOOL v9 = valuePtr <= 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10, v11, v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v13 = 138412802;
      *(void *)(v13 + 4) = a3;
      *(_WORD *)(v13 + 12) = 2112;
      *(void *)(v13 + 14) = a2;
      *(_WORD *)(v13 + 22) = 2112;
      *(void *)(v13 + 24) = Value;
      __SC_log_send();
    }
    return 0;
  }
  if (a4) {
    *a4 = valuePtr;
  }
  return Value;
}

uint64_t sub_10003BA08(CFTypeRef cf1, unsigned char *a2)
{
  if (cf1)
  {
    uint64_t v4 = 0;
    while (!CFEqual(cf1, **(CFTypeRef **)((char *)&off_100076B80 + v4)))
    {
      v4 += 16;
      if (v4 == 64) {
        goto LABEL_5;
      }
    }
    if (a2) {
      *a2 = 1;
    }
    return *(unsigned int *)((char *)&off_100076B80 + v4 + 8);
  }
  else
  {
LABEL_5:
    if (a2) {
      *a2 = 0;
    }
    return 0x1000000;
  }
}

const void *sub_10003BABC(const void *a1, const __CFString *a2)
{
  CFDictionaryRef v4 = (const __CFDictionary *)sub_100038374(a1, a2, kSCEntNetIPv4);
  if (!v4)
  {
    CFDictionaryRef v4 = (const __CFDictionary *)sub_100038374(a1, a2, kSCEntNetIPv6);
    if (!v4) {
      return 0;
    }
  }

  return CFDictionaryGetValue(v4, kSCPropInterfaceName);
}

uint64_t sub_10003BB8C(void *key, const void *a2, const __CFDictionary *a3)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DCA8, key);
  if (Value) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, Value);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  CFDictionaryRef v8 = MutableCopy;
  CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, a2);
  CFDictionaryRef v10 = v9;
  if (a3)
  {
    if (!v9 || !CFEqual(a3, v9))
    {
      if (byte_10007DC9C == 1)
      {
        sub_10003BD34((uint64_t)key, a2, @"Changed: old", v10);
        sub_10003BD34((uint64_t)key, a2, @"Changed: new", a3);
      }
      CFDictionarySetValue(v8, a2, a3);
LABEL_14:
      uint64_t v11 = 1;
      goto LABEL_16;
    }
  }
  else if (v9)
  {
    if (byte_10007DC9C == 1) {
      sub_10003BD34((uint64_t)key, a2, @"Removed:", v9);
    }
    CFDictionaryRemoveValue(v8, a2);
    goto LABEL_14;
  }
  uint64_t v11 = 0;
LABEL_16:
  if (!CFDictionaryGetCount(v8))
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DCA8, key);
    if (!v8) {
      return v11;
    }
    goto LABEL_18;
  }
  CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DCA8, key, v8);
  if (v8) {
LABEL_18:
  }
    CFRelease(v8);
  return v11;
}

void sub_10003BD34(uint64_t a1, CFTypeRef cf1, uint64_t a3, const __CFDictionary *a4)
{
  CFDictionaryRef v4 = a4;
  if (!a4) {
    goto LABEL_11;
  }
  if (!CFEqual(cf1, kSCEntNetIPv4))
  {
    if (CFEqual(cf1, kSCEntNetIPv6))
    {
      CFDictionaryRef v10 = (unsigned int *)sub_100033BC8(v4);
      if (v10)
      {
        CFDictionaryRef v9 = sub_10003BF50(v10);
        goto LABEL_8;
      }
    }
LABEL_11:
    uint64_t v11 = 0;
    goto LABEL_12;
  }
  CFDictionaryRef v8 = (unsigned int *)sub_100033BC8(v4);
  if (!v8) {
    goto LABEL_11;
  }
  CFDictionaryRef v9 = sub_1000350A8(v8);
LABEL_8:
  uint64_t v11 = v9;
  CFDictionaryRef Value = CFDictionaryGetValue(v4, @"Service");
  if (Value) {
    CFStringAppendFormat(v11, 0, @"\n<Service> = %@", Value);
  }
  CFDictionaryRef v4 = (const __CFDictionary *)v11;
LABEL_12:
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    if (v4) {
      CFStringRef v13 = (const __CFString *)v4;
    }
    else {
      CFStringRef v13 = @"<none>";
    }
    uint64_t v14 = _os_log_pack_size();
    __chkstk_darwin(v14, v15, v16);
    __error();
    uint64_t v17 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v17 = 138413058;
    *(void *)(v17 + 4) = a1;
    *(_WORD *)(v17 + 12) = 2112;
    *(void *)(v17 + 14) = a3;
    *(_WORD *)(v17 + 22) = 2112;
    *(void *)(v17 + 24) = cf1;
    *(_WORD *)(v17 + 32) = 2112;
    *(void *)(v17 + 34) = v13;
    __SC_log_send();
  }
  if (v11) {
    CFRelease(v11);
  }
}

__CFString *sub_10003BF50(unsigned int *a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, @"<IPv6RouteList[%d]> = {", *a1);
  if ((int)*a1 >= 1)
  {
    uint64_t v3 = 0;
    CFDictionaryRef v4 = a1 + 3;
    do
    {
      CFStringAppendFormat(Mutable, 0, @"\n%2d. ", v3);
      sub_10003C040(v4, Mutable);
      uint64_t v3 = (v3 + 1);
      v4 += 17;
    }
    while ((int)v3 < (int)*a1);
  }
  CFStringAppend(Mutable, @"\n}");
  return Mutable;
}

void sub_10003C040(unsigned int *a1, CFMutableStringRef theString)
{
  CFDictionaryRef v4 = a1 + 5;
  if ((a1[4] & 4) != 0)
  {
    CFStringAppend(theString, @"Host ");
    CFTypeID v6 = inet_ntop(30, v4, v10, 0x2Eu);
    CFStringAppendCString(theString, v6, 0x600u);
  }
  else
  {
    CFStringAppend(theString, @"Net ");
    uint64_t v5 = inet_ntop(30, v4, v10, 0x2Eu);
    CFStringAppendCString(theString, v5, 0x600u);
    CFStringAppendFormat(theString, 0, @"/%d", *a1);
  }
  if ((a1[4] & 2) != 0)
  {
    CFStringAppend(theString, @" Gate ");
    uint64_t v7 = inet_ntop(30, a1 + 9, v10, 0x2Eu);
    CFStringAppendCString(theString, v7, 0x600u);
  }
  sub_100034EBC((uint64_t)a1, theString);
  if (*(void *)(a1 + 13) != *(void *)in6addr_any.__u6_addr8
    || *(void *)(a1 + 15) != *(void *)&in6addr_any.__u6_addr32[2])
  {
    CFStringAppend(theString, @" Ifa ");
    CFDictionaryRef v9 = inet_ntop(30, a1 + 13, v10, 0x2Eu);
    CFStringAppendCString(theString, v9, 0x600u);
  }
  sub_100034F74((uint64_t)a1, theString);
}

uint64_t sub_10003C1E0(void *key, const __CFDictionary *a2, const __CFDictionary *a3)
{
  if (!a2)
  {
    uint64_t v8 = sub_10003BB8C(key, kSCEntNetIPv4, 0);
LABEL_8:
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DD28, key);
    return v8;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)sub_100031738(key, kSCEntNetService);
  if (v6) {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, @"RankAssertion");
  }
  else {
    CFNumberRef Value = 0;
  }
  CFDictionaryRef v9 = sub_10003D3CC(2, a2, a3, Value);
  uint64_t v8 = sub_10003BB8C(key, kSCEntNetIPv4, v9);
  if (!v9) {
    goto LABEL_8;
  }
  CFRelease(v9);
  return v8;
}

uint64_t sub_10003C2EC(void *key, const __CFDictionary *a2, const __CFDictionary *a3)
{
  if (!a2)
  {
    CFDictionaryRef v8 = 0;
LABEL_9:
    int v11 = 1;
    goto LABEL_10;
  }
  CFDictionaryRef v6 = (const __CFDictionary *)sub_100031738(key, kSCEntNetService);
  if (v6) {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v6, @"RankAssertion");
  }
  else {
    CFNumberRef Value = 0;
  }
  CFDictionaryRef v9 = sub_10003D3CC(30, a2, a3, Value);
  CFDictionaryRef v8 = v9;
  if (!v9) {
    goto LABEL_9;
  }
  CFDictionaryRef v10 = sub_1000315FC(v9);
  int v11 = 0;
  if (v10)
  {
LABEL_15:
    CFRetain(v10);
    CFStringRef v14 = kSCEntNetIPv6;
    goto LABEL_16;
  }
LABEL_10:
  CFDictionaryRef v12 = (const __CFDictionary *)sub_100031738(key, kSCEntNetIPv4);
  if (v12)
  {
    CFStringRef v13 = sub_1000315FC(v12);
    if (v13)
    {
      CFDictionaryRef v10 = v13;
      goto LABEL_15;
    }
  }
  CFStringRef v14 = kSCEntNetIPv6;
  CFDictionaryRef v15 = (const __CFDictionary *)sub_100031738(key, kSCEntNetIPv6);
  if (v15)
  {
    CFDictionaryRef v10 = sub_1000315FC(v15);
    if (!v10) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  CFDictionaryRef v10 = 0;
LABEL_16:
  sub_10003F4D0(key, v8);
  uint64_t v16 = sub_10003BB8C(key, v14, v8);
  uint64_t v17 = v16;
  if (v10)
  {
    if (v16)
    {
      CFBooleanRef BOOLean = 0;
      if (v11)
      {
        __int16 v18 = 2;
      }
      else
      {
        __int16 v18 = 1;
        if (a2)
        {
          if (CFDictionaryGetValueIfPresent(a2, kSCPropNetIPv6PerformPLATDiscovery, (const void **)&BOOLean))
          {
            CFBooleanRef v19 = BOOLean;
            CFTypeID TypeID = CFBooleanGetTypeID();
            if (v19)
            {
              if (CFGetTypeID(v19) == TypeID && CFBooleanGetValue(BOOLean)) {
                __int16 v18 = 0;
              }
            }
          }
        }
      }
      sub_100037FD0(v18, v10);
    }
    CFRelease(v10);
  }
  if (v11) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DD30, key);
  }
  else {
    CFRelease(v8);
  }
  return v17;
}

uint64_t sub_10003C4F8(__CFString *key, const __CFDictionary *a2, const __CFDictionary *a3, const void *a4)
{
  CFStringRef v44 = kSCPropNetDNSSearchDomains;
  int v45 = 0;
  v46[0] = 0;
  CFStringRef v47 = kSCPropNetDNSSortList;
  int v48 = 0;
  char v49 = 0;
  CFStringRef v50 = kSCPropNetDNSSupplementalMatchDomains;
  int v51 = 1;
  char v52 = 1;
  CFStringRef v53 = kSCPropNetDNSSupplementalMatchOrders;
  int v54 = 0;
  char v55 = 1;
  v43[0] = kSCPropNetDNSDomainName;
  v43[1] = kSCPropNetDNSOptions;
  v43[2] = kSCPropNetDNSSearchOrder;
  v43[3] = kSCPropNetDNSServerPort;
  v43[4] = kSCPropNetDNSServerTimeout;
  v43[5] = kSCPropNetDNSServiceIdentifier;
  v43[6] = kSCPropNetDNSSupplementalMatchDomainsNoSearch;
  if (!((unint64_t)a2 | (unint64_t)a3))
  {
    CFMutableArrayRef Mutable = 0;
    goto LABEL_76;
  }
  uint64_t v40 = (void *)kSCPropNetDNSServiceIdentifier;
  CFDictionaryRef v9 = (const __CFDictionary *)sub_100031738(key, kSCEntNetIPv4);
  CFDictionaryRef v10 = sub_100033BC8(v9);
  if (v10 && (*((_WORD *)v10 + 4) & 3) == 2)
  {
    BOOL v11 = sub_10003B7B4(a4, key, kSCEntNetIPv4) != 0;
    CFDictionaryRef v12 = sub_1000315FC(v9);
    int v13 = 1;
  }
  else
  {
    BOOL v11 = 0;
    CFDictionaryRef v12 = 0;
    int v13 = 0;
  }
  CFDictionaryRef v14 = (const __CFDictionary *)sub_100031738(key, kSCEntNetIPv6);
  CFDictionaryRef v15 = sub_100033BC8(v14);
  if (v15
    && (*((_WORD *)v15 + 4) & 3) == 2
    && (!v11 ? (BOOL v11 = sub_10003B7B4(a4, key, kSCEntNetIPv6) != 0) : (BOOL v11 = 1), v13 |= 2u, !v12))
  {
    CFDictionaryRef v12 = sub_1000315FC(v14);
    if (v11) {
      goto LABEL_14;
    }
  }
  else if (v11)
  {
LABEL_14:
    BOOL v16 = 1;
    goto LABEL_17;
  }
  BOOL v16 = sub_10003B7B4(a4, key, kSCEntNetCommCenter) != 0;
LABEL_17:
  if (v13) {
    CFDictionaryRef v17 = a3;
  }
  else {
    CFDictionaryRef v17 = 0;
  }
  if (!a2 && !v13)
  {
    CFMutableArrayRef Mutable = 0;
    goto LABEL_70;
  }
  int v41 = v13;
  int v39 = v16;
  if (a2)
  {
    BOOL value = 0;
    if (CFDictionaryGetValueIfPresent(a2, kSCPropNetDNSConfirmedServiceID, (const void **)&value))
    {
      __int16 v18 = value;
      CFTypeID TypeID = CFStringGetTypeID();
      if (!v18)
      {
LABEL_30:
        uint64_t v20 = (uint64_t)v12;
        goto LABEL_31;
      }
      if (CFGetTypeID(v18) == TypeID)
      {
        LODWORD(v18) = CFEqual(key, value) != 0;
        goto LABEL_30;
      }
    }
    LODWORD(v18) = 0;
    goto LABEL_30;
  }
  uint64_t v20 = (uint64_t)v12;
  LODWORD(v18) = 0;
LABEL_31:
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFTypeID v21 = sub_10003FE84(a2, kSCPropNetDNSServerAddresses);
  if (v41)
  {
    CFArrayRef v22 = (const __CFArray *)sub_10003FE84(a3, kSCPropNetDNSServerAddresses);
    CFDictionaryRef v12 = (const void *)v20;
    sub_10003FAF8(Mutable, (unint64_t)v21, v22, v39, (int)v18, v41, v20);
  }
  else
  {
    sub_10003FAF8(Mutable, (unint64_t)v21, 0, 0, (int)v18, 3, 0);
    CFDictionaryRef v12 = (const void *)v20;
  }
  for (uint64_t i = 0; i != 64; i += 16)
    sub_10003FF34(Mutable, *(void **)((char *)&v44 + i), a2, v17, *(_DWORD *)((char *)&v44 + i + 8), v46[i]);
  uint64_t v24 = 0;
  LOBYTE(v13) = v41;
  do
  {
    CFStringRef v25 = (const void *)v43[v24];
    if (v17)
    {
      CFTypeID v26 = (__CFString *)CFDictionaryGetValue(v17, (const void *)v43[v24]);
      CFMutableStringRef v27 = sub_10004065C(v26, 0);
      if (!a2) {
        goto LABEL_43;
      }
    }
    else
    {
      CFMutableStringRef v27 = 0;
      if (!a2) {
        goto LABEL_43;
      }
    }
    if (!v27)
    {
      uint64_t v28 = (__CFString *)CFDictionaryGetValue(a2, v25);
      CFMutableStringRef v27 = sub_10004065C(v28, 0);
    }
LABEL_43:
    if (v27)
    {
      CFDictionarySetValue(Mutable, v25, v27);
      CFRelease(v27);
    }
    ++v24;
  }
  while (v24 != 7);
  if (v41) {
    goto LABEL_55;
  }
  if (CFDictionaryContainsKey(Mutable, kSCPropNetDNSSupplementalMatchDomains))
  {
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSDomainName);
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSSearchDomains);
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSSearchOrder);
    CFDictionaryRemoveValue(Mutable, kSCPropNetDNSSortList);
    if (!a2 || v12)
    {
LABEL_55:
      if (CFDictionaryGetCount(Mutable))
      {
        if (v12) {
          CFDictionarySetValue(Mutable, kSCPropInterfaceName, v12);
        }
        if (!dword_10007DC98) {
          goto LABEL_69;
        }
        unsigned int v30 = CFDictionaryGetValue(Mutable, kSCPropNetDNSDomainName);
        CFTypeID v31 = CFStringGetTypeID();
        if (!v30) {
          goto LABEL_69;
        }
        if (CFGetTypeID(v30) != v31) {
          goto LABEL_69;
        }
        unsigned int v32 = CFDictionaryGetValue(Mutable, kSCPropNetDNSSearchDomains);
        CFTypeID v33 = CFArrayGetTypeID();
        if (!v32
          || CFGetTypeID(v32) != v33
          || (v56.length = CFArrayGetCount((CFArrayRef)v32),
              v56.location = 0,
              CFArrayContainsValue((CFArrayRef)v32, v56, v30))
          || (MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(0, 0, (CFArrayRef)v32),
              CFArrayAppendValue(MutableCopy, v30),
              CFDictionarySetValue(Mutable, kSCPropNetDNSSearchDomains, MutableCopy),
              uint64_t v35 = Mutable,
              !MutableCopy))
        {
LABEL_69:
          LOBYTE(v13) = v41;
          goto LABEL_70;
        }
LABEL_67:
        CFRelease(MutableCopy);
      }
      else
      {
        uint64_t v35 = 0;
        MutableCFDictionaryRef Copy = Mutable;
        if (Mutable) {
          goto LABEL_67;
        }
      }
      CFMutableArrayRef Mutable = v35;
      goto LABEL_69;
    }
LABEL_54:
    CFDictionaryRef v12 = CFDictionaryGetValue(a2, kSCPropInterfaceName);
    goto LABEL_55;
  }
  int v29 = CFDictionaryContainsKey(Mutable, v40);
  if (a2 && v29 && !v12) {
    goto LABEL_54;
  }
LABEL_70:
  if (!v12)
  {
LABEL_76:
    uint64_t v37 = sub_10003BB8C(key, kSCEntNetDNS, Mutable);
    if (!Mutable) {
      return v37;
    }
LABEL_77:
    CFRelease(Mutable);
    return v37;
  }
  CFRetain(v12);
  uint64_t v36 = sub_10003BB8C(key, kSCEntNetDNS, Mutable);
  uint64_t v37 = v36;
  if ((v13 & 2) != 0 && v36) {
    sub_100037FD0(1, v12);
  }
  CFRelease(v12);
  if (Mutable) {
    goto LABEL_77;
  }
  return v37;
}

uint64_t sub_10003CB40(__CFString *key, const __CFDictionary *a2, const __CFDictionary *a3, const void *a4)
{
  v54[0] = kSCPropNetProxiesFTPEnable;
  v54[1] = kSCPropNetProxiesFTPProxy;
  v54[2] = kSCPropNetProxiesFTPPort;
  v54[3] = kSCPropNetProxiesGopherEnable;
  v54[4] = kSCPropNetProxiesGopherProxy;
  v54[5] = kSCPropNetProxiesGopherPort;
  v54[6] = kSCPropNetProxiesHTTPEnable;
  v54[7] = kSCPropNetProxiesHTTPProxy;
  v54[8] = kSCPropNetProxiesHTTPPort;
  v54[9] = kSCPropNetProxiesHTTPSEnable;
  v54[10] = kSCPropNetProxiesHTTPSProxy;
  v54[11] = kSCPropNetProxiesHTTPSPort;
  v54[12] = kSCPropNetProxiesRTSPEnable;
  v54[13] = kSCPropNetProxiesRTSPProxy;
  v54[14] = kSCPropNetProxiesRTSPPort;
  v54[15] = kSCPropNetProxiesSOCKSEnable;
  v54[16] = kSCPropNetProxiesSOCKSProxy;
  v54[17] = kSCPropNetProxiesSOCKSPort;
  v54[18] = kSCPropNetProxiesTransportConverterEnable;
  v54[19] = kSCPropNetProxiesTransportConverterProxy;
  v54[20] = kSCPropNetProxiesTransportConverterPort;
  v54[21] = kSCPropNetProxiesProxyAutoConfigEnable;
  CFStringRef v5 = kSCPropNetProxiesProxyAutoConfigURLString;
  v54[22] = kSCPropNetProxiesProxyAutoConfigURLString;
  v54[23] = kSCPropNetProxiesProxyAutoConfigJavaScript;
  CFStringRef v6 = kSCPropNetProxiesProxyAutoDiscoveryEnable;
  v54[25] = 0;
  v54[26] = 0;
  v54[24] = kSCPropNetProxiesProxyAutoDiscoveryEnable;
  if (!((unint64_t)a2 | (unint64_t)a3)) {
    goto LABEL_61;
  }
  CFDictionaryRef v7 = a3;
  CFDictionaryRef v9 = (const __CFDictionary *)sub_100031738(key, kSCEntNetIPv4);
  CFDictionaryRef v10 = sub_100033BC8(v9);
  if (v10 && (*((_WORD *)v10 + 4) & 3) == 2)
  {
    BOOL value = (void *)sub_1000315FC(v9);
    int v11 = 1;
  }
  else
  {
    int v11 = 0;
    BOOL value = 0;
  }
  CFDictionaryRef v12 = (const __CFDictionary *)sub_100031738(key, kSCEntNetIPv6);
  int v13 = sub_100033BC8(v12);
  if (v13 && (*((_WORD *)v13 + 4) & 3) == 2)
  {
    if (!value) {
      BOOL value = (void *)sub_1000315FC(v12);
    }
  }
  else
  {
    if (a2) {
      int v14 = 1;
    }
    else {
      int v14 = v11;
    }
    if (!v11) {
      CFDictionaryRef v7 = 0;
    }
    if (v14 != 1) {
      goto LABEL_61;
    }
  }
  if (!a2 || !v7)
  {
    if (v7)
    {
      CFDictionaryRef v27 = v7;
    }
    else
    {
      if (!a2) {
        goto LABEL_61;
      }
      CFDictionaryRef v27 = a2;
    }
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, v27);
    if (MutableCopy) {
      goto LABEL_44;
    }
    goto LABEL_61;
  }
  CFDictionaryRef v15 = (void *)kSCPropNetProxiesSupplementalMatchDomains;
  BOOL v16 = (void *)kSCPropNetProxiesSupplementalMatchOrders;
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, a2);
  sub_10003FF34(MutableCopy, v15, a2, v7, 1, 1);
  sub_10003FF34(MutableCopy, v16, a2, v7, 0, 1);
  __int16 v18 = CFDictionaryCreateMutableCopy(0, 0, v7);
  for (uint64_t i = 0; i != 27; i += 3)
  {
    uint64_t v20 = (const void *)v54[i];
    if (CFDictionaryContainsKey(v18, v20))
    {
      CFDictionaryRemoveValue(MutableCopy, v20);
      CFTypeID v21 = (const void *)v54[i + 1];
      if (v21) {
        CFDictionaryRemoveValue(MutableCopy, v21);
      }
      CFArrayRef v22 = (const void *)v54[i + 2];
      if (v22)
      {
        unint64_t v23 = MutableCopy;
LABEL_29:
        CFDictionaryRemoveValue(v23, v22);
        continue;
      }
    }
    else if (CFDictionaryContainsKey(a2, v20) {
           || (CFStringRef v25 = (const void *)v54[i + 1]) != 0 && CFDictionaryContainsKey(a2, v25)
    }
           || (CFTypeID v26 = (const void *)v54[i + 2]) != 0 && CFDictionaryContainsKey(a2, v26))
    {
      CFDictionaryRemoveValue(v18, v20);
      uint64_t v24 = (const void *)v54[i + 1];
      if (v24) {
        CFDictionaryRemoveValue(v18, v24);
      }
      CFArrayRef v22 = (const void *)v54[i + 2];
      if (v22)
      {
        unint64_t v23 = v18;
        goto LABEL_29;
      }
    }
  }
  CFDictionaryApplyFunction(v18, (CFDictionaryApplierFunction)sub_10004071C, MutableCopy);
  CFRelease(v18);
  CFStringRef v5 = kSCPropNetProxiesProxyAutoConfigURLString;
  CFStringRef v6 = kSCPropNetProxiesProxyAutoDiscoveryEnable;
  if (!MutableCopy) {
    goto LABEL_61;
  }
LABEL_44:
  if (CFDictionaryGetCount(MutableCopy))
  {
    if (value) {
      CFDictionarySetValue(MutableCopy, kSCPropInterfaceName, value);
    }
    CFNumberRef number = 0;
    int valuePtr = 0;
    if (CFDictionaryGetValueIfPresent(MutableCopy, v6, (const void **)&number)
      && (CFNumberRef v28 = number, TypeID = CFNumberGetTypeID(), v28)
      && CFGetTypeID(v28) == TypeID)
    {
      CFNumberRef v30 = number;
      if (!CFNumberGetValue(number, kCFNumberIntType, &valuePtr)) {
        goto LABEL_84;
      }
    }
    else
    {
      CFNumberRef v30 = 0;
    }
    if (valuePtr)
    {
      int v51 = 0;
      CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(MutableCopy, kSCPropNetProxiesProxyAutoConfigEnable);
      CFNumberRef number = v31;
      CFTypeID v32 = CFNumberGetTypeID();
      if (v31 && CFGetTypeID(v31) == v32 && CFNumberGetValue(number, kCFNumberIntType, &v51))
      {
        if (!v51) {
          goto LABEL_70;
        }
        CFStringRef v33 = (const __CFString *)CFDictionaryGetValue(MutableCopy, v5);
        if (v33)
        {
          CFStringRef v34 = v33;
          CFTypeID v35 = CFStringGetTypeID();
LABEL_65:
          if (CFGetTypeID(v34) == v35 && CFStringGetLength(v34))
          {
            if (v51) {
              goto LABEL_84;
            }
LABEL_70:
            CFDictionaryRef v37 = (const __CFDictionary *)sub_100038374(a4, key, kSCEntNetDHCP);
            if (v37)
            {
              OptionCFDataRef Data = DHCPInfoGetOptionData(v37, 0xFCu);
              if (OptionData)
              {
                CFDataRef v39 = OptionData;
                BytePtr = CFDataGetBytePtr(OptionData);
                CFIndex Length = CFDataGetLength(v39);
                while (1)
                {
                  CFIndex v42 = Length - 1;
                  if (Length < 1) {
                    break;
                  }
                  if (BytePtr[--Length])
                  {
                    CFURLRef v44 = CFURLCreateWithBytes(0, BytePtr, v42 + 1, 0x8000100u, 0);
                    if (!v44) {
                      break;
                    }
                    CFURLRef v45 = v44;
                    CFStringRef v46 = CFURLGetString(v44);
                    if (v46)
                    {
                      CFStringRef v47 = v46;
                      CFRetain(v46);
                      CFRelease(v45);
                      goto LABEL_80;
                    }
                    CFRelease(v45);
                    break;
                  }
                }
              }
            }
            CFStringRef v47 = sub_100040784();
            if (v47)
            {
LABEL_80:
              int v51 = 1;
              CFNumberRef number = CFNumberCreate(0, kCFNumberIntType, &v51);
              CFDictionarySetValue(MutableCopy, kSCPropNetProxiesProxyAutoConfigEnable, number);
              CFRelease(number);
              CFDictionarySetValue(MutableCopy, v5, v47);
              CFRelease(v47);
              goto LABEL_81;
            }
LABEL_84:
            int valuePtr = 0;
            if (!v30)
            {
LABEL_83:
              uint64_t v48 = sub_10003BB8C(key, kSCEntNetProxies, MutableCopy);
              CFRelease(MutableCopy);
              return v48;
            }
LABEL_82:
            CFNumberRef number = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            CFDictionarySetValue(MutableCopy, v6, number);
            CFRelease(number);
            goto LABEL_83;
          }
        }
        else
        {
          CFStringRef v34 = (const __CFString *)CFDictionaryGetValue(MutableCopy, kSCPropNetProxiesProxyAutoConfigJavaScript);
          CFTypeID v35 = CFStringGetTypeID();
          if (v34) {
            goto LABEL_65;
          }
        }
      }
      int v51 = 0;
      goto LABEL_70;
    }
LABEL_81:
    if (!v30) {
      goto LABEL_83;
    }
    goto LABEL_82;
  }
  CFRelease(MutableCopy);
LABEL_61:

  return sub_10003BB8C(key, kSCEntNetProxies, 0);
}

uint64_t sub_10003D284(__CFString *serviceID, int a2, int a3, const void *a4)
{
  CFStringRef v5 = (const void *)kSCEntNetCommCenter;
  CFDictionaryRef v6 = (const __CFDictionary *)sub_100038374(a4, serviceID, kSCEntNetCommCenter);
  if (v6)
  {
    CFNumberRef Value = CFDictionaryGetValue(v6, @"AvailableProtocols");
    CFTypeID TypeID = CFNumberGetTypeID();
    if (Value && CFGetTypeID(Value) == TypeID)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionaryAddValue(Mutable, @"AvailableProtocols", Value);
      uint64_t v10 = sub_10003BB8C(serviceID, v5, Mutable);
      if (Mutable) {
        CFRelease(Mutable);
      }
      return v10;
    }
  }
  else
  {
    CFNumberGetTypeID();
  }

  return sub_10003BB8C(serviceID, v5, 0);
}

CFDictionaryRef sub_10003D3CC(int a1, const __CFDictionary *a2, CFDictionaryRef theDict, const __CFNumber *a4)
{
  if (theDict)
  {
    CFDictionaryRef v8 = &kSCPropNetIPv4Router;
    keys = 0;
    CFStringRef v72 = 0;
    if (a1 != 2) {
      CFDictionaryRef v8 = &kSCPropNetIPv6Router;
    }
    CFStringRef v9 = *v8;
    uint64_t v10 = (const void **)&kSCPropNetIPv4AdditionalRoutes;
    if (a1 != 2) {
      uint64_t v10 = (const void **)&kSCPropNetIPv6AdditionalRoutes;
    }
    int v11 = *v10;
    CFNumberRef Value = CFDictionaryGetValue(theDict, v9);
    if (Value)
    {
      unint64_t v13 = (unint64_t)Value;
      if (sub_100031390(a1, Value, &keys, 0x10uLL)) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = 0;
      }
    }
    else
    {
      unint64_t v14 = 0;
    }
    CFArrayRef v16 = (const __CFArray *)CFDictionaryGetValue(theDict, v11);
    CFTypeID TypeID = CFArrayGetTypeID();
    if (v16)
    {
      if (CFGetTypeID(v16) == TypeID) {
        CFArrayRef v18 = v16;
      }
      else {
        CFArrayRef v18 = 0;
      }
    }
    else
    {
      CFArrayRef v18 = 0;
    }
    if (v14 | (unint64_t)v18)
    {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, a2);
      uint64_t v20 = MutableCopy;
      if (v14) {
        CFDictionarySetValue(MutableCopy, v9, (const void *)v14);
      }
      if (v18)
      {
        CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(a2, v11);
        CFTypeID v22 = CFArrayGetTypeID();
        if (v21 && CFGetTypeID(v21) == v22)
        {
          unint64_t v23 = CFArrayCreateMutableCopy(0, 0, v18);
          v83.length = CFArrayGetCount(v21);
          v83.location = 0;
          CFArrayAppendArray(v23, v21, v83);
          CFDictionarySetValue(v20, v11, v23);
          if (v23) {
            CFRelease(v23);
          }
        }
        else
        {
          CFDictionarySetValue(v20, v11, v18);
        }
      }
      CFDictionaryRef v15 = v20;
    }
    else
    {
      CFDictionaryRef v15 = 0;
      uint64_t v20 = a2;
    }
    a2 = v20;
  }
  else
  {
    CFDictionaryRef v15 = 0;
  }
  if (a1 == 2)
  {
    keys = (void *)0x500000000;
    LOWORD(v72) = 0;
    uint64_t v24 = (const UInt8 *)sub_10003DC90(&keys, a2, a4);
    if (v24)
    {
      CFStringRef v25 = (void **)v24;
      CFDataRef v26 = CFDataCreate(0, v24, 36 * *(int *)v24 + 12);
      if (v25 == &keys) {
        goto LABEL_95;
      }
      CFDictionaryRef v27 = v25;
      goto LABEL_33;
    }
    goto LABEL_94;
  }
  keys = (void *)0x300000000;
  LOWORD(v72) = 0;
  int valuePtr = 0x1000000;
  unsigned int v70 = 0;
  int32x4_t v78 = (int32x4_t)in6addr_any;
  if (!a2) {
    goto LABEL_94;
  }
  int32x4_t v80 = 0uLL;
  CFStringRef v28 = sub_10003E394(a2, kSCPropInterfaceName, v79);
  if (!v28) {
    goto LABEL_94;
  }
  CFStringRef v29 = v28;
  int v30 = sub_10002B79C((uint64_t)v79);
  if (!v30) {
    goto LABEL_94;
  }
  int v31 = v30;
  int v32 = sub_10003E43C(a2, v29);
  CFStringRef v33 = CFDictionaryGetValue(a2, kSCPropNetIPv6Router);
  if (!sub_100031390(30, v33, &v78, 0x10uLL)) {
    sub_10003EDDC(a2, kSCPropNetIPv6DestAddresses, &v78);
  }
  if (!sub_10003EDDC(a2, kSCPropNetIPv6Addresses, &v80)
    || (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v80, v80))) & 1) == 0)
  {
LABEL_94:
    CFDataRef v26 = 0;
    goto LABEL_95;
  }
  CFArrayRef v34 = (const __CFArray *)CFDictionaryGetValue(a2, kSCPropNetIPv6PrefixLength);
  CFTypeID v35 = CFArrayGetTypeID();
  if (v34)
  {
    if (CFGetTypeID(v34) == v35 && CFArrayGetCount(v34) >= 1)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 0);
      if (sub_10003F390(ValueAtIndex, &v70))
      {
        if (v80.u8[0] == 254)
        {
          if ((v80.i8[1] & 0xC0) != 0x80 && v70 <= 0x80) {
            goto LABEL_48;
          }
        }
        else if (v70 < 0x81)
        {
LABEL_48:
          char v64 = 0;
          int v37 = 1;
          goto LABEL_51;
        }
      }
    }
  }
  int v37 = 0;
  unsigned int v70 = 0;
  char v64 = 1;
LABEL_51:
  if (a4) {
    CFNumberGetValue(a4, kCFNumberSInt32Type, &valuePtr);
  }
  if (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v78, v78))))
  {
    int v38 = sub_10002BCC0();
    if (v31 != v38) {
      ++v37;
    }
    if (v70 != 128 && v78.i64[1] == v80.i64[1] && v78.i64[0] == v80.i64[0]) {
      __int16 v41 = 0;
    }
    else {
      __int16 v41 = 2;
    }
    BOOL v67 = v31 != v38;
    if (!a4 && sub_10003E658(a2)) {
      int valuePtr = 0;
    }
  }
  else
  {
    __int16 v41 = 0;
    BOOL v67 = 0;
  }
  int v65 = sub_10003E730(a2, @"IsNULL");
  if (v65) {
    __int16 v42 = v41 | 8;
  }
  else {
    __int16 v42 = v41;
  }
  int v43 = valuePtr;
  if (valuePtr == 50331648)
  {
    char v63 = 0;
    v42 |= 1u;
    int v43 = 0x2000000;
  }
  else if (valuePtr == 0x4000000)
  {
    int v43 = 50331648;
    int valuePtr = 50331648;
    v42 |= 1u;
    char v63 = 1;
  }
  else
  {
    char v63 = 0;
  }
  if (!v32)
  {
    unint64_t v44 = 0;
    CFIndex range = 0;
    CFIndex theArray = 0;
    CFIndex Count = 0;
    goto LABEL_91;
  }
  unint64_t v44 = (unint64_t)CFDictionaryGetValue(a2, kSCPropNetIPv6AdditionalRoutes);
  CFTypeID v45 = CFArrayGetTypeID();
  if (!v44)
  {
    __int16 v46 = v42;
LABEL_84:
    CFIndex range = 0;
    goto LABEL_85;
  }
  if (CFGetTypeID((CFTypeRef)v44) != v45)
  {
    __int16 v46 = v42;
    unint64_t v44 = 0;
    goto LABEL_84;
  }
  __int16 v46 = v42;
  CFIndex range = CFArrayGetCount((CFArrayRef)v44);
  v37 += range;
LABEL_85:
  CFIndex Count = (CFIndex)CFDictionaryGetValue(a2, kSCPropNetIPv6ExcludedRoutes);
  CFTypeID v48 = CFArrayGetTypeID();
  if (Count)
  {
    if (CFGetTypeID((CFTypeRef)Count) == v48)
    {
      CFIndex theArray = Count;
      CFIndex Count = CFArrayGetCount((CFArrayRef)Count);
      v37 += Count;
    }
    else
    {
      CFIndex theArray = 0;
      CFIndex Count = 0;
    }
  }
  else
  {
    CFIndex theArray = 0;
  }
  __int16 v42 = v46;
LABEL_91:
  if (!v37) {
    goto LABEL_94;
  }
  unsigned int v49 = v37 + 1;
  if (v37 >= 3)
  {
    p_keys = (int32x4_t *)malloc_type_malloc(68 * v49 + 12, 0x18EB784EuLL);
    bzero(p_keys, 68 * v49 + 12);
    p_keys->i32[1] = v49;
  }
  else
  {
    p_keys = (int32x4_t *)&keys;
    __memset_chk();
  }
  p_keys->i32[0] = v49;
  char v53 = v63 ^ 1;
  if (v65) {
    char v53 = 0;
  }
  if ((v53 & 1) == 0)
  {
    if (v65) {
      __int16 v54 = 1;
    }
    else {
      __int16 v54 = 4;
    }
    p_keys->i16[4] |= v54;
  }
  if (v67)
  {
    p_keys->i16[4] |= 2u;
    p_keys[1].i32[0] = v31;
    int32x4_t v55 = v80;
    CFRange v56 = &v78;
    if ((v42 & 2) == 0) {
      CFRange v56 = &v80;
    }
    p_keys[3] = *v56;
    p_keys[4] = v55;
    p_keys[1].i32[2] = valuePtr;
    p_keys[1].i16[6] = v42 | 0x10;
    i32 = p_keys[5].i32;
  }
  else
  {
    i32 = &p_keys->i32[3];
  }
  *((_WORD *)i32 + 10) = -32514;
  int *i32 = 64;
  i32[1] = v31;
  i32[3] = v43;
  *((_WORD *)i32 + 8) |= 0x10u;
  uint64_t v68 = (unsigned int *)(i32 + 17);
  if ((v64 & 1) == 0)
  {
    *((_WORD *)i32 + 42) |= v42 & 8 | 0x10;
    i32[18] = v31;
    int32x4_t v58 = v80;
    *(int32x4_t *)(i32 + 26) = v80;
    int v59 = i32 + 22;
    *(int32x4_t *)(i32 + 22) = v58;
    values = 0;
    CFDataRef v74 = 0;
    sub_10003F424(&values, v70);
    for (uint64_t i = 0; i != 16; ++i)
      *((unsigned char *)v59 + i) &= *((unsigned char *)&values + i);
    int v61 = v68;
    *uint64_t v68 = v70;
    *(int32x4_t *)(v61 + 13) = v80;
    v61[3] = v43;
    uint64_t v68 = v61 + 17;
  }
  if (v44 | theArray)
  {
    values = 0;
    uint64_t v75 = 0;
    long long v77 = 0u;
    CFDataRef v74 = (CFDataRef)p_keys;
    unsigned int v76 = &v68;
    LODWORD(v77) = v43;
    if (v44)
    {
      LODWORD(v75) = v31;
      values = &v80;
      *((void *)&v77 + 1) = "AdditionalRoutes";
      v81.location = 0;
      v81.length = range;
      CFArrayApplyFunction((CFArrayRef)v44, v81, (CFArrayApplierFunction)sub_10003EE9C, &values);
    }
    if (theArray)
    {
      *((void *)&v77 + 1) = "ExcludedRoutes";
      LODWORD(v75) = 0;
      HIDWORD(v75) = v31;
      values = 0;
      v82.location = 0;
      v82.length = Count;
      CFArrayApplyFunction((CFArrayRef)theArray, v82, (CFArrayApplierFunction)sub_10003EE9C, &values);
    }
  }
  CFDataRef v26 = CFDataCreate(0, (const UInt8 *)p_keys, 68 * p_keys->i32[0] + 12);
  if (p_keys != (int32x4_t *)&keys)
  {
    CFDictionaryRef v27 = (void **)p_keys;
LABEL_33:
    free(v27);
  }
LABEL_95:
  if (!v26)
  {
    CFDictionaryRef v51 = 0;
    if (!v15) {
      return v51;
    }
    goto LABEL_97;
  }
  keys = @"Service";
  CFStringRef v72 = @"Routes";
  values = a2;
  CFDataRef v74 = v26;
  CFDictionaryRef v51 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFRelease(v26);
  if (v15) {
LABEL_97:
  }
    CFRelease(v15);
  return v51;
}

_DWORD *sub_10003DC90(_DWORD *a1, const __CFDictionary *a2, const __CFNumber *a3)
{
  uint64_t v66 = 0;
  int valuePtr = 0x1000000;
  int v63 = 0;
  if (!a2) {
    return 0;
  }
  CFStringRef v6 = sub_10003E394(a2, kSCPropInterfaceName, v67);
  if (!v6) {
    return 0;
  }
  CFStringRef v7 = v6;
  int v8 = sub_10002B79C((uint64_t)v67);
  if (!v8) {
    return 0;
  }
  int v9 = v8;
  int v10 = sub_10003E43C(a2, v7);
  CFNumberRef Value = CFDictionaryGetValue(a2, kSCPropNetIPv4Router);
  if (!sub_100031390(2, Value, &v63, 4uLL)) {
    sub_10003E4DC(a2, kSCPropNetIPv4DestAddresses, &v63);
  }
  if (!sub_10003E4DC(a2, kSCPropNetIPv4Addresses, (char *)&v66 + 4)
    || !sub_10003E4DC(a2, kSCPropNetIPv4SubnetMasks, &v66))
  {
    int v13 = 0;
    int v12 = 0;
LABEL_11:
    int v15 = 0;
    int v14 = 1;
    goto LABEL_12;
  }
  int v12 = v66 & HIDWORD(v66);
  int v13 = sub_10003E59C(v66);
  if ((v13 & 0x80000000) == 0)
  {
    int v14 = 0;
    int v15 = 1;
    goto LABEL_12;
  }
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (!__SC_log_enabled()) {
    goto LABEL_11;
  }
  uint64_t v28 = _os_log_pack_size();
  int v57 = &Count;
  __chkstk_darwin(v28, v29, v30);
  int v58 = v12;
  __error();
  uint64_t v31 = _os_log_pack_fill();
  int v32 = v66;
  int v33 = BYTE1(v66);
  int v34 = BYTE2(v66);
  int v35 = BYTE3(v66);
  *(_DWORD *)uint64_t v31 = 67110146;
  *(_DWORD *)(v31 + 4) = v32;
  *(_WORD *)(v31 + 8) = 1024;
  *(_DWORD *)(v31 + 10) = v33;
  *(_WORD *)(v31 + 14) = 1024;
  *(_DWORD *)(v31 + 16) = v34;
  *(_WORD *)(v31 + 20) = 1024;
  *(_DWORD *)(v31 + 22) = v35;
  *(_WORD *)(v31 + 26) = 2080;
  *(void *)(v31 + 28) = v67;
  int v12 = v58;
  __SC_log_send();
  int v14 = 1;
  int v15 = 0;
LABEL_12:
  if (!HIDWORD(v66)) {
    return 0;
  }
  if (a3) {
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
  }
  int v52 = v13;
  if (v63)
  {
    if (v66 != -1 && HIDWORD(v66) == v63) {
      __int16 v17 = 0;
    }
    else {
      __int16 v17 = 2;
    }
    if (!a3 && sub_10003E658(a2)) {
      int valuePtr = 0;
    }
  }
  else
  {
    __int16 v17 = 0;
    if (valuePtr != 0x2000000 && valuePtr != 50331648 && valuePtr != 0x4000000)
    {
      __int16 v17 = 0;
      int valuePtr = 0x2000000;
    }
  }
  int v19 = sub_10003E730(a2, @"IsNULL");
  if (v19) {
    __int16 v20 = v17 | 8;
  }
  else {
    __int16 v20 = v17;
  }
  int v21 = valuePtr;
  int v58 = v14;
  int v56 = v19;
  if (valuePtr == 50331648)
  {
    int v53 = 0;
    v20 |= 1u;
    int v21 = 0x2000000;
  }
  else if (valuePtr == 0x4000000)
  {
    int v21 = 50331648;
    int valuePtr = 50331648;
    v20 |= 1u;
    int v53 = 1;
  }
  else
  {
    int v53 = 0;
  }
  LODWORD(v57) = v20 & 2;
  signed int v22 = v15 + (v57 >> 1);
  int v55 = sub_10002BCC0();
  if (v9 == v55)
  {
    BOOL v54 = 0;
    if (v10) {
      goto LABEL_41;
    }
  }
  else
  {
    BOOL v54 = v63 != 0;
    if (v63) {
      int v25 = v22 + 1;
    }
    else {
      int v25 = v15 + ((v20 & 2) >> 1);
    }
    signed int v22 = v25 + 2;
    if (v10)
    {
LABEL_41:
      CFArrayRef v23 = (const __CFArray *)CFDictionaryGetValue(a2, kSCPropNetIPv4AdditionalRoutes);
      CFTypeID TypeID = CFArrayGetTypeID();
      if (v23)
      {
        if (CFGetTypeID(v23) == TypeID)
        {
          CFIndex Count = CFArrayGetCount(v23);
          v22 += Count;
          goto LABEL_55;
        }
        CFArrayRef v23 = 0;
      }
      CFIndex Count = 0;
LABEL_55:
      CFArrayRef v26 = (const __CFArray *)CFDictionaryGetValue(a2, kSCPropNetIPv4ExcludedRoutes);
      CFTypeID v36 = CFArrayGetTypeID();
      if (v26)
      {
        if (CFGetTypeID(v26) == v36)
        {
          CFIndex v27 = CFArrayGetCount(v26);
          v22 += v27;
          goto LABEL_60;
        }
        CFArrayRef v26 = 0;
      }
      CFIndex v27 = 0;
      goto LABEL_60;
    }
  }
  CFArrayRef v26 = 0;
  CFIndex v27 = 0;
  CFIndex Count = 0;
  CFArrayRef v23 = 0;
LABEL_60:
  if (a1 && a1[1] >= v22)
  {
    bzero(a1 + 3, 36 * v22);
  }
  else
  {
    a1 = malloc_type_malloc(36 * v22 + 12, 0xABECC3C1uLL);
    bzero(a1, 36 * v22 + 12);
    a1[1] = v22;
  }
  int v37 = v56;
  int v38 = (int)v57;
  *a1 = v22;
  char v39 = v53 ^ 1;
  if (v37) {
    char v39 = 0;
  }
  if ((v39 & 1) == 0)
  {
    if (v37) {
      __int16 v40 = 1;
    }
    else {
      __int16 v40 = 4;
    }
    *((_WORD *)a1 + 4) |= v40;
  }
  __int16 v41 = a1 + 3;
  char v64 = a1 + 3;
  char v42 = v58;
  if (v54)
  {
    *((_WORD *)a1 + 4) |= 2u;
    a1[4] = v9;
    int v43 = HIDWORD(v66);
    *((_WORD *)a1 + 14) = v20;
    int v44 = v63;
    if (!v38) {
      int v44 = v43;
    }
    a1[10] = v44;
    a1[11] = v43;
    a1[6] = valuePtr;
    __int16 v41 = a1 + 12;
    char v64 = a1 + 12;
  }
  if (v9 == v55)
  {
    if (v42) {
      goto LABEL_77;
    }
LABEL_84:
    if ((v20 & 8) != 0) {
      *((_WORD *)v41 + 8) |= 8u;
    }
    int v47 = v66;
    int v46 = HIDWORD(v66);
    v41[5] = v12;
    v41[6] = v47;
    *__int16 v41 = v52;
    v41[1] = v9;
    int v48 = HIDWORD(v66);
    v41[7] = v46;
    v41[8] = v48;
    v41[3] = v21;
    v41 += 9;
    char v64 = v41;
    if (!v38) {
      goto LABEL_90;
    }
    goto LABEL_87;
  }
  if ((v20 & 8) != 0) {
    *((_WORD *)v41 + 8) |= 8u;
  }
  *(void *)(v41 + 5) = -1;
  *__int16 v41 = 32;
  v41[1] = v9;
  int v45 = HIDWORD(v66);
  v41[8] = HIDWORD(v66);
  v41[3] = v21;
  if ((v20 & 8) != 0) {
    *((_WORD *)v41 + 26) |= 8u;
  }
  *((void *)v41 + 7) = 0xF0000000E0;
  v41[9] = 4;
  v41[10] = v9;
  v41[17] = v45;
  v41[12] = v21;
  v41 += 18;
  char v64 = v41;
  if ((v42 & 1) == 0) {
    goto LABEL_84;
  }
LABEL_77:
  if (v38)
  {
LABEL_87:
    if ((v20 & 8) != 0) {
      *((_WORD *)v41 + 8) |= 8u;
    }
    int v49 = HIDWORD(v66);
    v41[5] = v63;
    v41[6] = -1;
    *__int16 v41 = 32;
    v41[1] = v9;
    int v50 = HIDWORD(v66);
    v41[7] = v49;
    v41[8] = v50;
    v41[3] = v21;
    char v64 = v41 + 9;
  }
LABEL_90:
  if ((unint64_t)v26 | (unint64_t)v23)
  {
    context[0] = 0;
    uint64_t v60 = 0;
    long long v62 = 0u;
    context[1] = a1;
    int v61 = &v64;
    LODWORD(v62) = v21;
    if (v23)
    {
      LODWORD(v60) = v9;
      LODWORD(context[0]) = HIDWORD(v66);
      *((void *)&v62 + 1) = "AdditionalRoutes";
      v68.location = 0;
      v68.length = Count;
      CFArrayApplyFunction(v23, v68, (CFArrayApplierFunction)sub_10003E7E8, context);
    }
    if (v26)
    {
      *((void *)&v62 + 1) = "ExcludedRoutes";
      LODWORD(v60) = 0;
      HIDWORD(v60) = v9;
      v69.location = 0;
      v69.length = v27;
      CFArrayApplyFunction(v26, v69, (CFArrayApplierFunction)sub_10003E7E8, context);
    }
  }
  return a1;
}

CFStringRef sub_10003E394(const __CFDictionary *a1, const void *a2, char *a3)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  if (CFStringGetCString(Value, a3, 16, 0x8000100u)) {
    return Value;
  }
  return 0;
}

uint64_t sub_10003E43C(const __CFDictionary *a1, const void *a2)
{
  CFStringRef Value = CFDictionaryGetValue(a1, kSCPropConfirmedInterfaceName);
  CFTypeID TypeID = CFStringGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID) {
    return CFEqual(Value, a2);
  }
  else {
    return 1;
  }
}

BOOL sub_10003E4DC(const __CFDictionary *a1, const void *a2, void *a3)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFArrayGetTypeID();
  BOOL result = 0;
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID && CFArrayGetCount(Value) >= 1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(Value, 0);
      if (sub_100031390(2, ValueAtIndex, a3, 4uLL)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_10003E59C(unsigned int a1)
{
  uint64_t v1 = 0;
  if (a1)
  {
    unsigned int v2 = a1;
    do
    {
      if ((0x2EFEuLL >> (v2 & 0xF))) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v1 = (v1 + byte_100069660[v2 & 0xF]);
      BOOL v3 = v2 > 0xF;
      v2 >>= 4;
    }
    while (v3);
    if ((v1 & 0x80000000) != 0) {
      return v1;
    }
  }
  uint64_t v4 = 0xFFFFFFFFLL;
  if ((v1 - 33) >= 0xFFFFFFE0) {
    int v5 = -1 << -(char)v1;
  }
  else {
    int v5 = 0;
  }
  if (bswap32(a1) == v5) {
    return v1;
  }
  return v4;
}

uint64_t sub_10003E658(const __CFDictionary *a1)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, kSCPropNetOverridePrimary);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID)
    {
      int valuePtr = 0;
      CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
      if (!valuePtr) {
        return 0;
      }
    }
    else
    {
      CFTypeID v3 = CFBooleanGetTypeID();
      if (CFGetTypeID(Value) != v3 || !CFBooleanGetValue(Value)) {
        return 0;
      }
    }
    return 1;
  }
  CFBooleanGetTypeID();
  return 0;
}

uint64_t sub_10003E730(const __CFDictionary *a1, const void *a2)
{
  if (!a1) {
    return 0;
  }
  CFNumberRef Value = CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 0;
  }

  return CFBooleanGetValue((CFBooleanRef)Value);
}

uint64_t sub_10003E7E8(const void *a1, uint64_t a2)
{
  uint64_t v4 = **(void **)(a2 + 24);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12, v13, v14);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      uint64_t v16 = *(void *)(a2 + 40);
      *(_DWORD *)uint64_t v15 = 136315138;
      *(void *)(v15 + 4) = v16;
      uint64_t result = __SC_log_send();
    }
    goto LABEL_20;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv4RouteDestinationAddress);
  if (!sub_100031390(2, Value, (void *)(v4 + 20), 4uLL)
    || (CFStringRef v7 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv4RouteSubnetMask),
        !sub_100031390(2, v7, (void *)(v4 + 24), 4uLL)))
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      goto LABEL_20;
    }
LABEL_18:
    uint64_t v17 = _os_log_pack_size();
    __chkstk_darwin(v17, v18, v19);
    __error();
    uint64_t v20 = _os_log_pack_fill();
    uint64_t v21 = *(void *)(a2 + 40);
    *(_DWORD *)uint64_t v20 = 136315394;
    *(void *)(v20 + 4) = v21;
    *(_WORD *)(v20 + 12) = 2112;
    *(void *)(v20 + 14) = a1;
LABEL_19:
    uint64_t result = __SC_log_send();
LABEL_20:
    --**(_DWORD **)(a2 + 8);
    return result;
  }
  uint64_t result = sub_10003E59C(*(_DWORD *)(v4 + 24));
  if ((result & 0x80000000) != 0)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  *(_DWORD *)uint64_t v4 = result;
  *(_DWORD *)(v4 + 12) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(a2 + 20);
  int v9 = *(_DWORD *)(a2 + 16);
  if (v9)
  {
    *(_DWORD *)(v4 + 4) = v9;
    *(_DWORD *)(v4 + 32) = *(_DWORD *)a2;
    if (!*(_DWORD *)(a2 + 20))
    {
      int v10 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv4RouteGatewayAddress);
      uint64_t result = sub_100031390(2, v10, (void *)(v4 + 28), 4uLL);
      if (result)
      {
        __int16 v11 = *(_WORD *)(v4 + 16);
        *(_WORD *)(v4 + 16) = v11 | 2;
        if (*(_DWORD *)v4 == 32) {
          *(_WORD *)(v4 + 16) = v11 | 6;
        }
      }
    }
    goto LABEL_37;
  }
  uint64_t result = (uint64_t)sub_10003E394((const __CFDictionary *)a1, kSCPropNetIPv4RouteInterfaceName, v27);
  if (result)
  {
    uint64_t result = sub_10002B79C((uint64_t)v27);
    if (!result)
    {
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (!result) {
        goto LABEL_20;
      }
LABEL_35:
      uint64_t v22 = _os_log_pack_size();
      __chkstk_darwin(v22, v23, v24);
      __error();
      uint64_t v25 = _os_log_pack_fill();
      uint64_t v26 = *(void *)(a2 + 40);
      *(_DWORD *)uint64_t v25 = 136315650;
      *(void *)(v25 + 4) = v26;
      *(_WORD *)(v25 + 12) = 2080;
      *(void *)(v25 + 14) = v27;
      *(_WORD *)(v25 + 22) = 2112;
      *(void *)(v25 + 24) = a1;
      goto LABEL_19;
    }
    if (result == *(_DWORD *)(a2 + 16))
    {
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (!result) {
        goto LABEL_20;
      }
      goto LABEL_35;
    }
    *(_DWORD *)(v4 + 4) = result;
  }
LABEL_37:
  **(void **)(a2 + 24) += 36;
  return result;
}

uint64_t sub_10003ED88(uint64_t a1)
{
  return 68 * a1 + 12;
}

BOOL sub_10003EDDC(const __CFDictionary *a1, const void *a2, void *a3)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFArrayGetTypeID();
  BOOL result = 0;
  if (Value)
  {
    if (CFGetTypeID(Value) == TypeID && CFArrayGetCount(Value) >= 1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(Value, 0);
      if (sub_100031390(30, ValueAtIndex, a3, 0x10uLL)) {
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_10003EE9C(const void *a1, uint64_t a2)
{
  uint64_t v4 = **(_DWORD ***)(a2 + 24);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v14 = _os_log_pack_size();
      __chkstk_darwin(v14, v15, v16);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      uint64_t v18 = *(void *)(a2 + 40);
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = v18;
      uint64_t result = __SC_log_send();
    }
    goto LABEL_15;
  }
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv6RouteDestinationAddress);
  if (!sub_100031390(30, Value, v4 + 5, 0x10uLL)
    || (CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv6RoutePrefixLength),
        uint64_t result = sub_10003F390(v7, v4),
        !result)
    || *v4 > 0x80u)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      goto LABEL_15;
    }
    uint64_t v9 = _os_log_pack_size();
    __chkstk_darwin(v9, v10, v11);
    __error();
    uint64_t v12 = _os_log_pack_fill();
    uint64_t v13 = *(void *)(a2 + 40);
    *(_DWORD *)uint64_t v12 = 136315394;
    *(void *)(v12 + 4) = v13;
    *(_WORD *)(v12 + 12) = 2112;
    *(void *)(v12 + 14) = a1;
LABEL_10:
    uint64_t result = __SC_log_send();
LABEL_15:
    --**(_DWORD **)(a2 + 8);
    return result;
  }
  v4[3] = *(_DWORD *)(a2 + 32);
  _OWORD v4[2] = *(_DWORD *)(a2 + 20);
  int v19 = *(_DWORD *)(a2 + 16);
  if (v19)
  {
    v4[1] = v19;
    *(_OWORD *)(v4 + 13) = *(_OWORD *)*(void *)a2;
    if (!*(_DWORD *)(a2 + 20))
    {
      uint64_t v20 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetIPv6RouteGatewayAddress);
      uint64_t result = sub_100031390(30, v20, v4 + 9, 0x10uLL);
      if (result)
      {
        __int16 v21 = *((_WORD *)v4 + 8);
        *((_WORD *)v4 + 8) = v21 | 2;
        if (*v4 == 128) {
          *((_WORD *)v4 + 8) = v21 | 6;
        }
      }
    }
    goto LABEL_33;
  }
  uint64_t result = (uint64_t)sub_10003E394((const __CFDictionary *)a1, kSCPropNetIPv6RouteInterfaceName, v27);
  if (result)
  {
    uint64_t result = sub_10002B79C((uint64_t)v27);
    if (!result)
    {
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (!result) {
        goto LABEL_15;
      }
LABEL_31:
      uint64_t v22 = _os_log_pack_size();
      __chkstk_darwin(v22, v23, v24);
      __error();
      uint64_t v25 = _os_log_pack_fill();
      uint64_t v26 = *(void *)(a2 + 40);
      *(_DWORD *)uint64_t v25 = 136315650;
      *(void *)(v25 + 4) = v26;
      *(_WORD *)(v25 + 12) = 2080;
      *(void *)(v25 + 14) = v27;
      *(_WORD *)(v25 + 22) = 2112;
      *(void *)(v25 + 24) = a1;
      goto LABEL_10;
    }
    if (result == *(_DWORD *)(a2 + 16))
    {
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (!result) {
        goto LABEL_15;
      }
      goto LABEL_31;
    }
    v4[1] = result;
  }
LABEL_33:
  **(void **)(a2 + 24) += 68;
  return result;
}

uint64_t sub_10003F390(const __CFNumber *a1, void *a2)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (a1 && CFGetTypeID(a1) == TypeID) {
    return CFNumberGetValue(a1, kCFNumberIntType, a2);
  }
  else {
    return 0;
  }
}

void *sub_10003F424(void *__b, int a2)
{
  CFTypeID v3 = __b;
  size_t v4 = 0;
  *__b = 0;
  __b[1] = 0;
  if (a2 >= 8)
  {
    size_t v4 = (a2 >> 3) - 1 + 1;
    __b = memset(__b, 255, v4);
  }
  if (a2 <= 0) {
    int v5 = -(-a2 & 7);
  }
  else {
    int v5 = a2 & 7;
  }
  if (v5) {
    *((unsigned char *)v3 + v4) = 0xFF00u >> v5;
  }
  return __b;
}

uint64_t sub_10003F4D0(void *a1, const __CFDictionary *a2)
{
  int v39 = 0;
  int v38 = 0;
  CFDictionaryRef v3 = (const __CFDictionary *)sub_100031738(a1, kSCEntNetIPv6);
  size_t v4 = (UInt8 *)sub_10003FA48(v3, &v39, &v38);
  uint64_t result = (uint64_t)sub_10003FA48(a2, &v39, &v38);
  CFStringRef v6 = v38;
  __int16 v7 = v39;
  if (v38) {
    BOOL v8 = v39 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8) {
    return result;
  }
  uint64_t v9 = (void *)result;
  uint64_t result = sub_10002BD98();
  if ((result & 0x80000000) != 0) {
    return result;
  }
  int v10 = result;
  if (v4)
  {
    if (v9)
    {
      if (*(void *)v4 == *v9 && *((void *)v4 + 1) == v9[1]) {
        goto LABEL_25;
      }
    }
    if ((sub_10002BFD0(result, v7, v4) & 0x80000000) != 0)
    {
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      __error();
      _SC_syslog_os_log_mapping();
      __error();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v17 = _os_log_pack_size();
        uint64_t v37 = (uint64_t)&v37;
        __chkstk_darwin(v17, v18, v19);
        __error();
        uint64_t v20 = _os_log_pack_fill();
        __int16 v21 = inet_ntop(30, v4, v40, 0x2Eu);
        uint64_t v22 = __error();
        uint64_t v23 = strerror(*v22);
        *(_DWORD *)uint64_t v20 = 138412802;
        *(void *)(v20 + 4) = v6;
        *(_WORD *)(v20 + 12) = 2080;
        *(void *)(v20 + 14) = v21;
        *(_WORD *)(v20 + 22) = 2080;
        *(void *)(v20 + 24) = v23;
        __error();
        goto LABEL_23;
      }
    }
    else
    {
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v12 = _os_log_pack_size();
        __chkstk_darwin(v12, v13, v14);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        uint64_t v16 = inet_ntop(30, v4, v40, 0x2Eu);
        *(_DWORD *)uint64_t v15 = 138412546;
        *(void *)(v15 + 4) = v6;
        *(_WORD *)(v15 + 12) = 2080;
        *(void *)(v15 + 14) = v16;
LABEL_23:
        uint64_t result = __SC_log_send();
      }
    }
    if (!v9) {
      return result;
    }
LABEL_25:
    if (*(void *)v4 == *v9 && *((void *)v4 + 1) == v9[1]) {
      return result;
    }
    goto LABEL_29;
  }
  if (!v9) {
    return result;
  }
LABEL_29:
  if ((sub_10002BF50(v10, v7, v9, 0) & 0x80000000) != 0)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    __error();
    _SC_syslog_os_log_mapping();
    __error();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v30 = _os_log_pack_size();
      __chkstk_darwin(v30, v31, v32);
      __error();
      uint64_t v33 = _os_log_pack_fill();
      int v34 = inet_ntop(30, v9, v40, 0x2Eu);
      int v35 = __error();
      CFTypeID v36 = strerror(*v35);
      *(_DWORD *)uint64_t v33 = 138412802;
      *(void *)(v33 + 4) = v6;
      *(_WORD *)(v33 + 12) = 2080;
      *(void *)(v33 + 14) = v34;
      *(_WORD *)(v33 + 22) = 2080;
      *(void *)(v33 + 24) = v36;
      __error();
      return __SC_log_send();
    }
  }
  else
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v25 = _os_log_pack_size();
      __chkstk_darwin(v25, v26, v27);
      __error();
      uint64_t v28 = _os_log_pack_fill();
      uint64_t v29 = inet_ntop(30, v9, v40, 0x2Eu);
      *(_DWORD *)uint64_t v28 = 138412546;
      *(void *)(v28 + 4) = v6;
      *(_WORD *)(v28 + 12) = 2080;
      *(void *)(v28 + 14) = v29;
      return __SC_log_send();
    }
  }
  return result;
}

const UInt8 *sub_10003FA48(const __CFDictionary *a1, _DWORD *a2, const void **a3)
{
  CFStringRef v6 = sub_100033BC8(a1);
  if (!v6 || (*((_WORD *)v6 + 4) & 3) != 2) {
    return 0;
  }
  __int16 v7 = v6 + 48;
  if (!*a2) {
    *a2 = *((_DWORD *)v6 + 4);
  }
  if (!*a3) {
    *a3 = sub_1000315FC(a1);
  }
  return v7;
}

void sub_10003FAF8(__CFDictionary *a1, unint64_t a2, const __CFArray *a3, int a4, int a5, int a6, uint64_t a7)
{
  if (!(a2 | (unint64_t)a3)) {
    return;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  if (a3)
  {
    sub_1000401A4(a3, a6, Mutable, a7);
    BOOL v15 = CFArrayGetCount(Mutable) < 1;
  }
  else
  {
    BOOL v15 = 1;
  }
  if (CFArrayGetCount(Mutable)) {
    BOOL v16 = dword_10007DC98 == 0;
  }
  else {
    BOOL v16 = 0;
  }
  int v17 = !v16;
  if (!a2 || !v17) {
    goto LABEL_43;
  }
  long long v41 = xmmword_100069650;
  v40[0] = xmmword_100069670;
  *(_OWORD *)((char *)v40 + 12) = *(long long *)((char *)&xmmword_100069670 + 12);
  if ((~a6 & 3) != 0)
  {
    CFArrayRef v18 = (const __CFArray *)CFRetain((CFTypeRef)a2);
    goto LABEL_42;
  }
  CFArrayRef v18 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFIndex Count = CFArrayGetCount((CFArrayRef)a2);
  if (Count < 1) {
    goto LABEL_42;
  }
  CFIndex theArray = v18;
  BOOL v30 = v15;
  char v31 = a6;
  uint64_t v32 = a7;
  int v33 = a5;
  int v34 = a4;
  int v35 = a1;
  CFIndex v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  BOOL v22 = 0;
  int v23 = 1;
  while (1)
  {
    int v24 = v23;
    int v38 = 0;
    long long v39 = 0uLL;
    CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v19);
    int v26 = sub_100031390(2, ValueAtIndex, &v38, 4uLL);
    if (v26) {
      break;
    }
    if (!sub_100031390(30, ValueAtIndex, &v39, 0x10uLL)) {
      goto LABEL_41;
    }
    if (v20)
    {
      uint64_t v27 = v20 + 1;
      int v23 = 2;
      ++v20;
      if (!v19) {
        goto LABEL_30;
      }
      goto LABEL_27;
    }
    *(_OWORD *)((char *)v40 + 8) = v39;
    int v23 = 2;
    uint64_t v27 = 1;
    uint64_t v20 = 1;
    if (v19) {
      goto LABEL_27;
    }
LABEL_30:
    if (v26 && v22)
    {
      CFIndex v28 = v21 - 1;
    }
    else
    {
      if (v26 || v22)
      {
        CFArrayAppendValue(theArray, ValueAtIndex);
        goto LABEL_38;
      }
      CFIndex v28 = v20 - 1;
    }
    CFArrayInsertValueAtIndex(theArray, v28, ValueAtIndex);
LABEL_38:
    if (Count == ++v19)
    {
      a1 = v35;
      a5 = v33;
      a4 = v34;
      a7 = v32;
      BOOL v15 = v30;
      LOBYTE(a6) = v31;
      CFArrayRef v18 = theArray;
      goto LABEL_42;
    }
  }
  if (v21)
  {
    uint64_t v27 = v21 + 1;
    int v23 = 1;
    ++v21;
    if (!v19) {
      goto LABEL_30;
    }
  }
  else
  {
    DWORD1(v41) = v38;
    uint64_t v27 = 1;
    uint64_t v21 = 1;
    int v23 = 1;
    if (!v19) {
      goto LABEL_30;
    }
  }
LABEL_27:
  if (v23 == v24) {
    goto LABEL_30;
  }
  if (v27 == 1)
  {
    BOOL v22 = (int)sa_dst_compare_no_dependencies() >= 0;
    goto LABEL_30;
  }
LABEL_41:
  CFRelease(theArray);
  CFArrayRef v18 = (const __CFArray *)CFRetain((CFTypeRef)a2);
  a1 = v35;
  a5 = v33;
  a4 = v34;
  a7 = v32;
  BOOL v15 = v30;
  LOBYTE(a6) = v31;
LABEL_42:
  sub_1000401A4(v18, a6, Mutable, a7);
  CFRelease(v18);
LABEL_43:
  if (CFArrayGetCount(Mutable))
  {
    CFDictionarySetValue(a1, kSCPropNetDNSServerAddresses, Mutable);
    BOOL v29 = a5 != 0;
    if (a4) {
      BOOL v29 = v15;
    }
    if (v29) {
      CFDictionarySetValue(a1, @"__SCOPED_QUERY__", kCFBooleanTrue);
    }
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

const void *sub_10003FE84(const void *a1, const void *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, a2);
  CFTypeID v6 = CFArrayGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) == v6) {
    return Value;
  }
  return 0;
}

void sub_10003FF34(__CFDictionary *a1, void *key, const __CFDictionary *a3, CFDictionaryRef theDict, char a5, int a6)
{
  if (theDict && (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, key), TypeID = CFArrayGetTypeID(), Value))
  {
    if (CFGetTypeID(Value) == TypeID) {
      CFArrayRef v13 = Value;
    }
    else {
      CFArrayRef v13 = 0;
    }
    if (!a3) {
      goto LABEL_13;
    }
  }
  else
  {
    CFArrayRef v13 = 0;
    if (!a3)
    {
LABEL_13:
      CFArrayRef v16 = 0;
      goto LABEL_14;
    }
  }
  CFArrayRef v14 = (const __CFArray *)CFDictionaryGetValue(a3, key);
  CFTypeID v15 = CFArrayGetTypeID();
  if (!v14) {
    goto LABEL_13;
  }
  if (CFGetTypeID(v14) == v15) {
    CFArrayRef v16 = v14;
  }
  else {
    CFArrayRef v16 = 0;
  }
LABEL_14:
  if ((unint64_t)v13 | (unint64_t)v16)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    if (v13)
    {
      CFIndex Count = CFArrayGetCount(v13);
      if (Count >= 1)
      {
        CFIndex v19 = Count;
        for (CFIndex i = 0; i != v19; ++i)
        {
          CFNumberRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(v13, i);
          CFMutableStringRef v22 = sub_10004065C(ValueAtIndex, a5);
          if (v22)
          {
            CFMutableStringRef v23 = v22;
            CFArrayAppendValue(Mutable, v22);
            CFRelease(v23);
          }
        }
      }
    }
    if (v16 && (!v13 || dword_10007DC98))
    {
      CFIndex v24 = CFArrayGetCount(Mutable);
      CFIndex v25 = CFArrayGetCount(v16);
      if (v25 >= 1)
      {
        CFIndex v26 = v25;
        for (CFIndex j = 0; j != v26; ++j)
        {
          CFIndex v28 = (__CFString *)CFArrayGetValueAtIndex(v16, j);
          CFMutableStringRef v29 = sub_10004065C(v28, a5);
          if (v29)
          {
            CFMutableStringRef v30 = v29;
            if (a6 || (v32.location = 0, v32.length = v24, !CFArrayContainsValue(Mutable, v32, v29))) {
              CFArrayAppendValue(Mutable, v30);
            }
            CFRelease(v30);
          }
        }
      }
    }
    if (CFArrayGetCount(Mutable) >= 1) {
      CFDictionarySetValue(a1, key, Mutable);
    }
    CFRelease(Mutable);
  }
}

void sub_1000401A4(const __CFArray *a1, char a2, __CFArray *a3, uint64_t a4)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    CFIndex v9 = 0;
    p_base_props = &QoSMarkingController__classData.base_props;
    CFIndex v30 = Count;
    do
    {
      int32x4_t v34 = 0uLL;
      int v32 = 0;
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, v9);
      if (!ValueAtIndex) {
        sub_100065308();
      }
      CFStringRef v12 = ValueAtIndex;
      if (sub_100031390(2, ValueAtIndex, &v32, 4uLL))
      {
        if ((a2 & 1) != 0 || v32 == 16777343) {
          goto LABEL_32;
        }
        if (!p_base_props[400]) {
          p_base_props[400] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_34;
        }
        uint64_t v13 = _os_log_pack_size();
        __chkstk_darwin(v13, v14, v15);
        __error();
        uint64_t v16 = _os_log_pack_fill();
        int v17 = v32;
        int v18 = BYTE1(v32);
        int v19 = BYTE2(v32);
        int v20 = HIBYTE(v32);
        *(_DWORD *)uint64_t v16 = 67109888;
        *(_DWORD *)(v16 + 4) = v17;
        *(_WORD *)(v16 + 8) = 1024;
        *(_DWORD *)(v16 + 10) = v18;
        *(_WORD *)(v16 + 14) = 1024;
        *(_DWORD *)(v16 + 16) = v19;
        *(_WORD *)(v16 + 20) = 1024;
        *(_DWORD *)(v16 + 22) = v20;
      }
      else
      {
        if (!sub_100031390(30, v12, &v34, 0x10uLL))
        {
          if (!p_base_props[400]) {
            p_base_props[400] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v26 = _os_log_pack_size();
            __chkstk_darwin(v26, v27, v28);
            __error();
            uint64_t v29 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v29 = 138412290;
            *(void *)(v29 + 4) = v12;
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            __SC_log_send();
            CFIndex v8 = v30;
          }
          goto LABEL_34;
        }
        if ((a2 & 2) != 0)
        {
          if (v34.u8[0] == 255)
          {
            if ((v34.i8[1] & 0xF0) != 0x30 && a4 && (v34.i8[1] & 0xF) == 2) {
              goto LABEL_31;
            }
LABEL_32:
            CFRetain(v12);
          }
          else
          {
            if (v34.u8[0] != 254 || !a4 || (v34.i8[1] & 0xC0) != 0x80) {
              goto LABEL_32;
            }
LABEL_31:
            if (CFStringFind(v12, @"%", 0).location != -1) {
              goto LABEL_32;
            }
            CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"%@%%%@", v12, a4);
          }
          CFArrayAppendValue(a3, v12);
          CFRelease(v12);
          goto LABEL_34;
        }
        if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v34, (int32x4_t)xmmword_100069630)))) & 1) == 0)goto LABEL_32; {
        if (!p_base_props[400])
        }
          p_base_props[400] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_34;
        }
        uint64_t v21 = _os_log_pack_size();
        __chkstk_darwin(v21, v22, v23);
        __error();
        uint64_t v24 = _os_log_pack_fill();
        CFIndex v25 = inet_ntop(30, &v34, v33, 0x2Eu);
        *(_DWORD *)uint64_t v24 = 136315138;
        *(void *)(v24 + 4) = v25;
      }
      __SC_log_send();
      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
LABEL_34:
      ++v9;
    }
    while (v8 != v9);
  }
}

CFMutableStringRef sub_10004065C(__CFString *a1, char a2)
{
  MutableCFDictionaryRef Copy = a1;
  if (a1)
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (CFGetTypeID(MutableCopy) == TypeID)
    {
      MutableCFDictionaryRef Copy = CFStringCreateMutableCopy(0, 0, MutableCopy);
      CFStringTrimWhitespace(MutableCopy);
      if ((a2 & 1) == 0 && !CFStringGetLength(MutableCopy))
      {
        CFRelease(MutableCopy);
        return 0;
      }
    }
    else
    {
      CFRetain(MutableCopy);
    }
  }
  return MutableCopy;
}

void sub_10004071C(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

CFStringRef sub_100040784()
{
  CFURLRef v0 = CFURLCreateWithString(0, @"http://wpad/wpad.dat", 0);
  if (!v0) {
    return 0;
  }
  CFURLRef v1 = v0;
  CFStringRef v2 = CFURLGetString(v0);
  CFStringRef v3 = v2;
  if (v2) {
    CFRetain(v2);
  }
  CFRelease(v1);
  return v3;
}

uint64_t sub_100040818(uint64_t a1, CFDictionaryRef theDict, uint64_t a3)
{
  CFTypeID v6 = (const void **)&kSCEntNetIPv4;
  if (*(_DWORD *)a3 != 2) {
    CFTypeID v6 = (const void **)&kSCEntNetIPv6;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, *v6);
  if (result)
  {
    CFDictionaryRef v8 = (const __CFDictionary *)result;
    CFIndex v9 = sub_100033BC8((const __CFDictionary *)result);
    uint64_t result = (uint64_t)CFDictionaryGetValue(v8, @"Service");
    if (v9 && result != 0)
    {
      CFDictionaryRef v11 = (const __CFDictionary *)result;
      uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)result, kSCPropInterfaceName);
      if (result)
      {
        CFStringRef v12 = (const __CFString *)result;
        uint64_t result = CFEqual((CFTypeRef)result, @"lo0");
        if (!result)
        {
          long long v38 = 0u;
          memset(v37, 0, sizeof(v37));
          long long v35 = 0u;
          long long v36 = 0u;
          long long v34 = 0u;
          if (CFStringGetCString(v12, (char *)&v35, 16, 0x8000100u))
          {
            *(void *)&long long v34 = a1;
            if ((*((_WORD *)v9 + 4) & 2) == 0) {
              DWORD1(v37[0]) = 1;
            }
            CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, kSCEntNetService);
            uint64_t v14 = sub_100040C24(Value, *(const __CFArray **)(a3 + 8), *(void *)(a3 + 16), (const void *)v34);
            int v15 = *((_DWORD *)v9 + 6);
            if (*(_DWORD *)a3 == 2) {
              HIDWORD(v37[0]) = *((_DWORD *)v9 + 11);
            }
            else {
              *(_OWORD *)((char *)v37 + 12) = *((_OWORD *)v9 + 4);
            }
            unsigned int v20 = v15 & 0xFF000000;
            if (dword_10007DD50 && !((unsigned __int16)v35 ^ 0x7070 | BYTE2(v35) ^ 0x70)) {
              unsigned int v20 = 0;
            }
            DWORD2(v36) = v20 | v14 & 0xFFFFFF;
            if (!CFStringHasPrefix(v12, @"stf") && !CFStringHasPrefix(v12, @"gif"))
            {
              if (sub_100040E20((void *)v34))
              {
                int v22 = 0;
                BOOL v21 = 1;
                goto LABEL_26;
              }
              int v32 = 0;
              if (*(_DWORD *)a3 == 2) {
                int v31 = 30;
              }
              else {
                int v31 = 2;
              }
              if (!sub_100040E90(theDict, v31, &v32) || v32 == v15)
              {
                int v22 = 0;
                BOOL v21 = byte_10007DD60 == 0;
                goto LABEL_26;
              }
            }
            BOOL v21 = 0;
            int v22 = 1;
LABEL_26:
            *((void *)&v34 + 1) = v12;
            uint64_t v23 = (void *)sub_10002B79C((uint64_t)&v35);
            HIDWORD(v36) = v22;
            LODWORD(v37[0]) = v21;
            LODWORD(v36) = v23;
            DWORD1(v36) = sub_10002B2AC((uint64_t)&v35, v23);
            uint64_t v24 = *(__CFDictionary **)(a3 + 32);
            CFIndex v25 = (const void *)v34;
            int valuePtr = DWORD2(v36);
            CFNumberRef v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
            if (v26)
            {
              CFNumberRef v27 = v26;
              CFDictionarySetValue(v24, v25, v26);
              CFRelease(v27);
            }
            uint64_t v28 = CFDictionaryGetValue(v11, kSCPropInterfaceName);
            CFTypeID TypeID = CFStringGetTypeID();
            if (v28 && CFGetTypeID(v28) == TypeID && sub_10003E43C(v11, v28)) {
              CFIndex v30 = CFDictionaryGetValue(v11, @"NetworkSignature");
            }
            else {
              CFIndex v30 = 0;
            }
            *((void *)&v38 + 1) = v30;
            return sub_100040F2C(*(int **)(a3 + 24), (uint64_t)&v34);
          }
          if (!qword_10007DC80) {
            qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
          }
          _SC_syslog_os_log_mapping();
          uint64_t result = __SC_log_enabled();
          if (result)
          {
            uint64_t v16 = _os_log_pack_size();
            __chkstk_darwin(v16, v17, v18);
            __error();
            uint64_t v19 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v19 = 136315394;
            *(void *)(v19 + 4) = "elect_ip";
            *(_WORD *)(v19 + 12) = 2112;
            *(void *)(v19 + 14) = v12;
            return __SC_log_send();
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_100040C24(const __CFDictionary *a1, const __CFArray *a2, uint64_t a3, const void *a4)
{
  unsigned int v18 = 0xFFFFFF;
  __int16 v7 = sub_10003B848(a1, (uint64_t)a4, (uint64_t)&stru_100077F38, &v18);
  if (v7)
  {
    CFDictionaryRef v8 = v7;
    v18 += a3;
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9, v10, v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      unsigned int v13 = v18;
      *(_DWORD *)uint64_t v12 = 138412802;
      *(void *)(v12 + 4) = a4;
      *(_WORD *)(v12 + 12) = 2112;
      *(void *)(v12 + 14) = v8;
      *(_WORD *)(v12 + 22) = 1024;
      *(_DWORD *)(v12 + 24) = v13;
      __SC_log_send();
    }
  }
  else if (a3 >= 1 && a2 && a4)
  {
    CFIndex v14 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v14);
      CFTypeID TypeID = CFStringGetTypeID();
      if (ValueAtIndex)
      {
        if (CFGetTypeID(ValueAtIndex) == TypeID && CFEqual(a4, ValueAtIndex)) {
          break;
        }
      }
      if (a3 == ++v14) {
        return v18;
      }
    }
    return (v14 + 1);
  }
  return v18;
}

CFDictionaryRef sub_100040E20(void *a1)
{
  CFDictionaryRef result = (const __CFDictionary *)sub_100031738(a1, kSCEntNetService);
  if (result) {
    return (const __CFDictionary *)(CFDictionaryContainsKey(result, @"IPIsCoupled") != 0);
  }
  return result;
}

uint64_t sub_100040E90(const __CFDictionary *a1, int a2, _DWORD *a3)
{
  size_t v4 = (const void **)&kSCEntNetIPv6;
  if (a2 == 2) {
    size_t v4 = (const void **)&kSCEntNetIPv4;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(a1, *v4);
  if (result)
  {
    uint64_t result = (uint64_t)sub_100033BC8((const __CFDictionary *)result);
    if (result)
    {
      if ((*(_WORD *)(result + 8) & 2) != 0)
      {
        *a3 = *(_DWORD *)(result + 24);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100040F2C(int *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  if (v2 == a1[2])
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4, v5, v6);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      return __SC_log_send();
    }
  }
  else
  {
    if ((int)v2 < 1)
    {
LABEL_10:
      uint64_t v10 = (uint64_t)&a1[28 * (int)v2 + 4];
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = a1 + 14;
      while (*(_DWORD *)(a2 + 40) >= *v9)
      {
        ++v8;
        v9 += 28;
        if (v2 == v8) {
          goto LABEL_10;
        }
      }
      if (v8 < v2)
      {
        uint64_t v11 = &a1[28 * (int)v2 + 4];
        do
        {
          --v2;
          long long v12 = *((_OWORD *)v11 - 2);
          *((_OWORD *)v11 + 4) = *((_OWORD *)v11 - 3);
          *((_OWORD *)v11 + 5) = v12;
          *((_OWORD *)v11 + 6) = *((_OWORD *)v11 - 1);
          long long v13 = *((_OWORD *)v11 - 6);
          *(_OWORD *)uint64_t v11 = *((_OWORD *)v11 - 7);
          *((_OWORD *)v11 + 1) = v13;
          long long v14 = *((_OWORD *)v11 - 4);
          *((_OWORD *)v11 + 2) = *((_OWORD *)v11 - 5);
          *((_OWORD *)v11 + 3) = v14;
          v11 -= 28;
        }
        while (v2 > v8);
      }
      uint64_t v10 = (uint64_t)(v9 - 10);
    }
    uint64_t result = (uint64_t)sub_1000410FC(v10, (long long *)a2);
    ++a1[1];
  }
  return result;
}

CFTypeRef sub_1000410FC(uint64_t a1, long long *a2)
{
  long long v3 = a2[2];
  long long v4 = *a2;
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v4;
  long long v5 = a2[3];
  long long v6 = a2[4];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t v8 = *(const void **)a1;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v9 = *(const void **)(a1 + 8);
  if (v9) {
    CFRetain(v9);
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 104);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

void sub_1000411C8(uint64_t a1, const __CFDictionary *a2, int a3)
{
  if (!a1) {
    sub_100065334();
  }
  if (!a2) {
    sub_100065360();
  }
  long long v5 = *(__CFString **)a1;
  long long v6 = (const void **)&kSCEntNetIPv4;
  int valuePtr = 0;
  if (a3 != 2) {
    long long v6 = (const void **)&kSCEntNetIPv6;
  }
  CFDictionaryRef v7 = (const __CFDictionary *)sub_100031738(v5, *v6);
  if (!v7) {
    goto LABEL_11;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v7, @"Service");
  if (!Value)
  {
LABEL_12:
    int v13 = 2;
    goto LABEL_13;
  }
  uint64_t v9 = 0;
  *(void *)buffer = 0;
  while (1)
  {
    uint64_t v10 = **(const void ***)((char *)&off_100076AB0 + v9);
    uint64_t v11 = sub_100031738(v5, v10);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (v11)
    {
      if (CFGetTypeID(v11) == TypeID) {
        break;
      }
    }
    v9 += 16;
    if (v9 == 48) {
      goto LABEL_11;
    }
  }
  if (!v10)
  {
LABEL_11:
    CFDictionaryRef Value = 0;
    goto LABEL_12;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"ServerAddress");
  CFTypeID v16 = CFStringGetTypeID();
  if (Value)
  {
    if (CFGetTypeID(Value) == v16) {
      CFRetain(Value);
    }
    else {
      CFDictionaryRef Value = 0;
    }
  }
  if (!CFDictionaryGetValueIfPresent((CFDictionaryRef)v11, kSCPropNetVPNStatus, (const void **)buffer)
    || (v17 = *(CFNumberRef *)buffer, CFTypeID v18 = CFNumberGetTypeID(), !v17)
    || CFGetTypeID(v17) != v18
    || !CFNumberGetValue(*(CFNumberRef *)buffer, kCFNumberIntType, &valuePtr))
  {
    int v13 = 3;
    goto LABEL_13;
  }
  uint64_t v19 = valuePtr;
  if (CFEqual(v10, kSCEntNetPPP))
  {
    if ((int)v19 <= 7 || (int v13 = 3, v19 != 8) && v19 != 12) {
LABEL_42:
    }
      int v13 = 7;
  }
  else if (CFEqual(v10, kSCEntNetIPSec))
  {
    if (v19 == 6) {
      int v13 = 3;
    }
    else {
      int v13 = 7;
    }
  }
  else
  {
    if (!CFEqual(v10, kSCEntNetVPN))
    {
      int v13 = 3;
      goto LABEL_43;
    }
    if (v19 > 7) {
      goto LABEL_42;
    }
    int v13 = dword_100069690[v19];
  }
LABEL_43:
  if (CFEqual(v10, kSCEntNetPPP))
  {
    int v26 = 0;
    CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v5, kSCEntNetPPP);
    CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(a2, NetworkServiceEntity);
    CFRelease(NetworkServiceEntity);
    CFTypeID v22 = CFDictionaryGetTypeID();
    if (v21)
    {
      if (CFGetTypeID(v21) == v22)
      {
        if (CFDictionaryGetValueIfPresent(v21, kSCPropNetPPPDialOnDemand, (const void **)buffer))
        {
          CFNumberRef v23 = *(CFNumberRef *)buffer;
          CFTypeID v24 = CFNumberGetTypeID();
          if (v23)
          {
            if (CFGetTypeID(v23) == v24 && CFNumberGetValue(*(CFNumberRef *)buffer, kCFNumberIntType, &v26) && v26)
            {
              if (valuePtr) {
                int v25 = 8;
              }
              else {
                int v25 = 24;
              }
              v13 |= v25;
            }
          }
        }
      }
    }
  }
LABEL_13:
  CFStringRef v14 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, *(CFStringRef *)a1, kSCEntNetCommCenter);
  if (CFDictionaryContainsKey(a2, v14)) {
    int v15 = 262145;
  }
  else {
    int v15 = 0;
  }
  CFRelease(v14);
  *(_DWORD *)(a1 + 56) = v15 | v13;
  if (Value)
  {
    CFStringGetCString((CFStringRef)Value, buffer, 128, 0x600u);
    _SC_string_to_sockaddr();
    CFRelease(Value);
  }
  else
  {
    *(void *)(a1 + 84) = 0;
    *(void *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 100) = 0;
    *(void *)(a1 + 92) = 0;
  }
}

double sub_1000415AC(_DWORD *a1, int a2, uint64_t a3, int a4, int a5)
{
  if (a1)
  {
    if (a4 || *(unsigned char *)(a3 + 43) == 3) {
      char v8 = 8;
    }
    else {
      char v8 = 0;
    }
    if (a5) {
      char v9 = v8 | 0x20;
    }
    else {
      char v9 = v8;
    }
    if (sub_100031738(*(void **)a3, kSCEntNetDNS)) {
      v9 |= 4u;
    }
    if (a2 == 2)
    {
      CFDictionaryRef v10 = (const __CFDictionary *)sub_100031738(*(void **)a3, kSCEntNetIPv4);
      if (v10)
      {
        *(void *)value.count = 0;
        CFDictionaryRef v11 = (const __CFDictionary *)CFDictionaryGetValue(v10, @"Service");
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (v11)
        {
          if (CFGetTypeID(v11) == TypeID)
          {
            if (CFDictionaryGetValueIfPresent(v11, kSCPropNetIPv4CLAT46, (const void **)&value))
            {
              int v13 = *(const void **)value.count;
              CFTypeID v14 = CFBooleanGetTypeID();
              if (v13)
              {
                if (CFGetTypeID(v13) == v14 && CFBooleanGetValue(*(CFBooleanRef *)value.count)) {
                  v9 |= 0x40u;
                }
              }
            }
          }
        }
      }
    }
    CFStringGetCString(*(CFStringRef *)(a3 + 8), buffer, 16, 0x600u);
    uint64_t v15 = sub_100030A68(a1, buffer, a2, v9, *(_DWORD *)(a3 + 40), (_OWORD *)(a3 + 60), (unsigned __int8 *)(a3 + 76), *(_DWORD *)(a3 + 56));
    if (v15)
    {
      CFStringRef v17 = *(const __CFString **)(a3 + 104);
      if (v17)
      {
        uint64_t v18 = v15;
        memset(&value, 0, sizeof(value));
        CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0, v17, 0x8000100u, 0);
        CC_SHA256_Init(&value);
        BytePtr = CFDataGetBytePtr(ExternalRepresentation);
        CC_LONG Length = CFDataGetLength(ExternalRepresentation);
        CC_SHA256_Update(&value, BytePtr, Length);
        CC_SHA256_Final((unsigned __int8 *)&v22, &value);
        CFRelease(ExternalRepresentation);
        double result = *(double *)&v22;
        *(_OWORD *)(v18 + 92) = v22;
        *(_DWORD *)(v18 + 108) = v23;
        *(void *)(v18 + 16) |= 0x10uLL;
      }
    }
  }
  return result;
}

BOOL sub_1000417D0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16))
  {
    return 0;
  }
  if (*(void *)(a1 + 20) != *(void *)(a2 + 20) || *(void *)(a1 + 28) != *(void *)(a2 + 28)) {
    return 0;
  }
  if (*(void *)(a1 + 52) != *(void *)(a2 + 52) || *(void *)(a1 + 60) != *(void *)(a2 + 60)) {
    return 0;
  }
  return *(void *)(a1 + 36) == *(void *)(a2 + 36) && *(void *)(a1 + 44) == *(void *)(a2 + 44);
}

uint64_t sub_1000418A4(uint64_t a1, char a2, int __fd)
{
  __int16 v3 = *(_WORD *)(a1 + 16);
  if ((v3 & 0x18) != 0) {
    return 1001;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 4);
  if (!v6)
  {
    sub_100041CB0(5, (unsigned int *)a1, (uint64_t)"no interface specified");
    return 6;
  }
  if (__fd == -1) {
    return 9;
  }
  long long v17 = 0u;
  memset(v18, 0, sizeof(v18));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  BYTE3(v13) = a2;
  BYTE2(v13) = 5;
  DWORD1(v14) = ++dword_10007DCC4;
  HIDWORD(v13) = 19;
  char v8 = (_OWORD *)(a1 + 52);
  if (*(_DWORD *)(a1 + 52) || *(_DWORD *)(a1 + 56) || *(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 64))
  {
    int v9 = 51;
    HIDWORD(v13) = 51;
    if ((v3 & 4) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    int v9 = 19;
    if ((v3 & 4) == 0)
    {
LABEL_11:
      v9 |= 4u;
      HIDWORD(v13) = v9;
      if ((v3 & 2) != 0) {
        int v10 = 2051;
      }
      else {
        int v10 = 2305;
      }
      goto LABEL_19;
    }
  }
  int v10 = 2053;
  DWORD2(v13) = 2053;
  if ((v3 & 2) != 0)
  {
    int v10 = 2055;
LABEL_19:
    DWORD2(v13) = v10;
  }
  if (v3)
  {
    WORD2(v13) = v6;
    v10 |= 0x1000000u;
    DWORD2(v13) = v10;
  }
  WORD6(v18[0]) = 7708;
  *(_OWORD *)((char *)&v18[1] + 4) = *(_OWORD *)(a1 + 20);
  if (BYTE4(v18[1]) == 254 && (BYTE5(v18[1]) & 0xC0) == 0x80) {
    WORD3(v18[1]) = bswap32(v6) >> 16;
  }
  if ((v10 & 2) != 0)
  {
    WORD4(v18[2]) = 7708;
    v18[3] = *(_OWORD *)(a1 + 36);
    if (LOBYTE(v18[3]) == 254 && (BYTE1(v18[3]) & 0xC0) == 0x80) {
      WORD1(v18[3]) = bswap32(v6) >> 16;
    }
    CFDictionaryRef v11 = (char *)&v18[4] + 4;
  }
  else
  {
    WORD4(v18[2]) = 4628;
    WORD5(v18[2]) = v6;
    CFDictionaryRef v11 = (char *)&v18[3] + 12;
  }
  if ((v9 & 4) != 0)
  {
    long long v12 = v11 + 8;
    *(_WORD *)CFDictionaryRef v11 = 7708;
    v11 += 28;
    sub_10003F424(v12, *(_DWORD *)a1);
    LOBYTE(v9) = BYTE12(v13);
  }
  if ((v9 & 0x10) != 0)
  {
    *(_WORD *)CFDictionaryRef v11 = 4628;
    *((_WORD *)v11 + 1) = v6;
    v11 += 20;
  }
  if ((v9 & 0x20) != 0)
  {
    *(_WORD *)CFDictionaryRef v11 = 7708;
    *(_OWORD *)(v11 + 8) = *v8;
    LODWORD(v11) = v11 + 28;
  }
  LOWORD(v13) = (_WORD)v11 - ((unsigned __int16)v18 + 12) + 92;
  if (write(__fd, &v13, (int)(v11 - (v18 + 12) + 92)) == -1) {
    return *__error();
  }
  else {
    return 0;
  }
}

uint64_t sub_100041B38(uint64_t a1)
{
  return a1 + 36;
}

__n128 sub_100041B84(uint64_t a1, __n128 *a2)
{
  __n128 result = *a2;
  *(__n128 *)(a1 + 36) = *a2;
  return result;
}

uint64_t sub_100041BD4(uint64_t a1)
{
  return a1 + 20;
}

BOOL sub_100041C20(uint64_t a1, int8x16_t *a2)
{
  int8x16_t v7 = *a2;
  int v3 = *(_DWORD *)a1;
  int8x16_t __b = 0uLL;
  sub_10003F424(&__b, v3);
  int8x16_t v4 = vandq_s8(v7, __b);
  return v4.i64[0] == *(void *)(a1 + 20) && v4.i64[1] == *(void *)(a1 + 28);
}

void sub_100041CB0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
  sub_10003C040(a2, Mutable);
  if (a3)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6, v7, v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v9 = 136315394;
      *(void *)(v9 + 4) = a3;
      *(_WORD *)(v9 + 12) = 2112;
      *(void *)(v9 + 14) = Mutable;
LABEL_10:
      __SC_log_send();
    }
  }
  else
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10, v11, v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v13 = 138412290;
      *(void *)(v13 + 4) = Mutable;
      goto LABEL_10;
    }
  }
  CFRelease(Mutable);
}

__CFString *sub_100041EE4(unsigned int *a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable(0, 0);
  sub_10003C040(a1, Mutable);
  return Mutable;
}

void sub_100041F58(unsigned int *a1)
{
  CFURLRef v1 = sub_10003BF50(a1);
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 138412290;
    *(void *)(v5 + 4) = v1;
    __SC_log_send();
  }
  CFRelease(v1);
}

void sub_100042094(const __CFString *a1, uint64_t a2, const __CFArray *a3)
{
  if (CFStringHasPrefix(a1, kSCDynamicStoreDomainSetup))
  {
    uint64_t v5 = 0;
    for (char i = 1; ; char i = 0)
    {
      char v7 = i;
      if (CFStringHasSuffix(a1, *(CFStringRef *)*(&off_100076AE0 + v5))) {
        break;
      }
      uint64_t v5 = 1;
      if ((v7 & 1) == 0) {
        return;
      }
    }
    sub_100034064(a3, a1);
  }
}

uint64_t sub_100042180(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unsigned int valuePtr = a3;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  CFTypeID TypeID = CFNumberGetTypeID();
  if (Value && CFGetTypeID(Value) == TypeID)
  {
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    return valuePtr;
  }
  return v3;
}

uint64_t sub_10004221C(unsigned int *a1)
{
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    uint64_t generation = nwi_state_get_generation();
    uint64_t v7 = 4 * a1[1] + 224 * a1[1] + 40;
    *(_DWORD *)uint64_t v5 = 134218240;
    *(void *)(v5 + 4) = generation;
    *(_WORD *)(v5 + 12) = 2048;
    *(void *)(v5 + 14) = v7;
    __SC_log_send();
  }
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8, v9, v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 136315138;
    *(void *)(v11 + 4) = "IPv4 network interface information";
    __SC_log_send();
  }
  if ((int)a1[2] < 1)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v14 = _os_log_pack_size();
      __chkstk_darwin(v14, v15, v16);
      __error();
      uint64_t v17 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v17 + 4) = "   No IPv4 states found";
      __SC_log_send();
    }
  }
  else
  {
    signed int v12 = 0;
    uint64_t v13 = (uint64_t)(a1 + 10);
    do
    {
      sub_100042908(v13);
      ++v12;
      v13 += 112;
    }
    while (v12 < (int)a1[2]);
  }
  sub_100043314();
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v18 = _os_log_pack_size();
    __chkstk_darwin(v18, v19, v20);
    __error();
    uint64_t v21 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v21 = 136315138;
    *(void *)(v21 + 4) = "IPv6 network interface information";
    __SC_log_send();
  }
  if ((int)a1[3] < 1)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v24 = _os_log_pack_size();
      __chkstk_darwin(v24, v25, v26);
      __error();
      uint64_t v27 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v27 = 136315138;
      *(void *)(v27 + 4) = "   No IPv6 states found\n";
      __SC_log_send();
    }
  }
  else
  {
    signed int v22 = 0;
    uint64_t v23 = (uint64_t)&a1[28 * a1[1] + 10];
    do
    {
      sub_100042908(v23);
      ++v22;
      v23 += 112;
    }
    while (v22 < (int)a1[3]);
  }
  sub_100043314();
  uint64_t result = nwi_state_get_interface_names();
  if (result)
  {
    __chkstk_darwin(result, v29, v30);
    int v33 = (char *)&v44 - v32;
    size_t v34 = v31 >= 0x200 ? 512 : v31;
    bzero((char *)&v44 - v32, v34);
    uint64_t result = nwi_state_get_interface_names();
    if (result)
    {
      unsigned int v37 = result;
      size_t v38 = (17 * result);
      __chkstk_darwin(result, v35, v36);
      bzero((char *)&v44 - ((v38 + 15) & 0x1FFFFFFF0), v38);
      uint64_t v39 = 0;
      do
      {
        if (v39) {
          strlcat((char *)&v44 - ((v38 + 15) & 0x1FFFFFFF0), " ", v38);
        }
        strlcat((char *)&v44 - ((v38 + 15) & 0x1FFFFFFF0), *(const char **)&v33[v39], v38);
        v39 += 8;
      }
      while (8 * v37 != v39);
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v40 = _os_log_pack_size();
        __chkstk_darwin(v40, v41, v42);
        __error();
        uint64_t v43 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v43 = 136315138;
        *(void *)(v43 + 4) = (char *)&v44 - ((v38 + 15) & 0x1FFFFFFF0);
        return __SC_log_send();
      }
    }
  }
  return result;
}

uint64_t sub_100042908(uint64_t a1)
{
  uint64_t flags = nwi_ifstate_get_flags();
  uint64_t v3 = *(void *)(a1 + 16) & 0xEFLL;
  unint64_t v4 = v3 | flags & 0xFFFFFFFFFFFFFFEFLL;
  unint64_t v5 = (v3 | flags & 0xEF);
  if (!(v3 | flags & 0xEF))
  {
    v50[0] = 0;
    goto LABEL_31;
  }
  unint64_t v6 = __strlcpy_chk();
  unint64_t v7 = v6;
  if ((v4 & 1) != 0 && v6 <= 0x62)
  {
    unint64_t v8 = v5;
    if (v6 <= 0x5C)
    {
      unint64_t v7 = __strlcat_chk();
      unint64_t v8 = v4 & 0xEE;
    }
    if ((v8 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  unint64_t v8 = v5;
  if ((v5 & 2) != 0)
  {
LABEL_7:
    if (v7 <= 0x5C)
    {
      unint64_t v7 = __strlcat_chk();
      unint64_t v8 = v8 & 0xED;
    }
  }
LABEL_9:
  if ((v8 & 4) != 0 && v7 <= 0x5D)
  {
    unint64_t v7 = __strlcat_chk();
    v8 &= ~4uLL;
  }
  if ((v8 & 0x40) != 0 && v7 <= 0x5A)
  {
    unint64_t v7 = __strlcat_chk();
    v8 &= ~0x40uLL;
  }
  if ((v8 & 8) != 0 && v7 <= 0x55)
  {
    unint64_t v7 = __strlcat_chk();
    v8 &= ~8uLL;
  }
  if ((v8 & 0x10) != 0 && v7 < 0x58)
  {
    unint64_t v7 = __strlcat_chk();
    v8 &= ~0x10uLL;
  }
  if ((v8 & 0x20) != 0 && v7 < 0x54)
  {
    unint64_t v7 = __strlcat_chk();
    v8 &= ~0x20uLL;
  }
  if (v8)
  {
    if (v7 >= 0x57)
    {
      unint64_t v7 = __strlcpy_chk();
      unint64_t v8 = v5;
    }
    v7 += snprintf(&v50[v7], 99 - v7, ",%p", (const void *)v8);
  }
  if (v7) {
    v50[v7 - 1] = 41;
  }
LABEL_31:
  uint64_t ifname = nwi_ifstate_get_ifname();
  reachability_uint64_t flags = nwi_ifstate_get_reachability_flags();
  if (!inet_ntop(*(unsigned __int8 *)(a1 + 32), (const void *)(a1 + 36), v51, 0x2Eu)) {
    __strlcpy_chk();
  }
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v11 = _os_log_pack_size();
    __chkstk_darwin(v11, v12, v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v14 = 136315650;
    *(void *)(v14 + 4) = ifname;
    *(_WORD *)(v14 + 12) = 2048;
    *(void *)(v14 + 14) = v4;
    *(_WORD *)(v14 + 22) = 2080;
    *(void *)(v14 + 24) = v50;
    __SC_log_send();
  }
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v15 = _os_log_pack_size();
    __chkstk_darwin(v15, v16, v17);
    __error();
    uint64_t v18 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v18 = 136315138;
    *(void *)(v18 + 4) = v51;
    __SC_log_send();
  }
  if (nwi_ifstate_get_vpn_server())
  {
    _SC_sockaddr_to_string();
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v19 = _os_log_pack_size();
      __chkstk_darwin(v19, v20, v21);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v22 = 136315138;
      *(void *)(v22 + 4) = v49;
      __SC_log_send();
    }
  }
  sub_100043450(reachability_flags, v49);
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v23 = _os_log_pack_size();
    __chkstk_darwin(v23, v24, v25);
    __error();
    uint64_t v26 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v26 = 136315138;
    *(void *)(v26 + 4) = v49;
    __SC_log_send();
  }
  unsigned int v27 = *(_DWORD *)(a1 + 28);
  if (HIBYTE(v27) > 4u) {
    uint64_t v28 = "???";
  }
  else {
    uint64_t v28 = off_100076DA0[SHIBYTE(v27)];
  }
  if ((v27 & 0xFFFFFF) == 0xFFFFFF)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v29 = _os_log_pack_size();
      __chkstk_darwin(v29, v30, v31);
      __error();
      uint64_t v32 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v32 = 67109378;
      *(_DWORD *)(v32 + 4) = v27;
      *(_WORD *)(v32 + 8) = 2080;
      *(void *)(v32 + 10) = v28;
LABEL_62:
      __SC_log_send();
    }
  }
  else
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v33 = _os_log_pack_size();
      __chkstk_darwin(v33, v34, v35);
      __error();
      uint64_t v36 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v36 = 67109634;
      *(_DWORD *)(v36 + 4) = v27;
      *(_WORD *)(v36 + 8) = 2080;
      *(void *)(v36 + 10) = v28;
      *(_WORD *)(v36 + 18) = 1024;
      *(_DWORD *)(v36 + 20) = v27 & 0xFFFFFF;
      goto LABEL_62;
    }
  }
  signature = (const UInt8 *)nwi_ifstate_get_signature();
  if (signature)
  {
    CFDataRef v38 = CFDataCreate(0, signature, 0);
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v39 = _os_log_pack_size();
      __chkstk_darwin(v39, v40, v41);
      __error();
      uint64_t v42 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v42 = 138412290;
      *(void *)(v42 + 4) = v38;
      __SC_log_send();
    }
    CFRelease(v38);
  }
  uint64_t generation = nwi_ifstate_get_generation();
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v45 = _os_log_pack_size();
    __chkstk_darwin(v45, v46, v47);
    __error();
    uint64_t v48 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v48 = 134217984;
    *(void *)(v48 + 4) = generation;
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_100043314()
{
  reachability_uint64_t flags = nwi_state_get_reachability_flags();
  sub_100043450(reachability_flags, __str);
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v5 + 4) = __str;
    return __SC_log_send();
  }
  return result;
}

unint64_t sub_100043450(unsigned int a1, char *__str)
{
  unint64_t result = snprintf(__str, 0x64uLL, "0x%08x (", a1);
  if (a1 || result > 0x53)
  {
    unint64_t v6 = (int)result;
    unint64_t v5 = (int)result;
    unsigned int v7 = a1;
    if ((a1 & 2) != 0)
    {
      unint64_t v5 = (int)result;
      unsigned int v7 = a1;
      if (result <= 0x57)
      {
        unint64_t result = strlcat(__str, "Reachable,", 0x63uLL);
        unint64_t v5 = result;
        unsigned int v7 = a1 & 0xFFFFFFFD;
      }
    }
    if ((v7 & 1) != 0 && v5 <= 0x4C)
    {
      unint64_t result = strlcat(__str, "Transient Connection,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~1u;
    }
    if ((v7 & 4) != 0 && v5 <= 0x4D)
    {
      unint64_t result = strlcat(__str, "Connection Required,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~4u;
    }
    if ((v7 & 8) != 0 && v5 <= 0x41)
    {
      unint64_t result = strlcat(__str, "Automatic Connection On Traffic,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~8u;
    }
    if ((v7 & 0x20) != 0 && v5 <= 0x42)
    {
      unint64_t result = strlcat(__str, "Automatic Connection On Demand,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~0x20u;
    }
    if ((v7 & 0x10) != 0 && v5 < 0x4C)
    {
      unint64_t result = strlcat(__str, "Intervention Required,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~0x10u;
    }
    if ((v7 & 0x10000) != 0 && v5 < 0x54)
    {
      unint64_t result = strlcat(__str, "Local Address,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~0x10000u;
    }
    if ((v7 & 0x20000) != 0 && v5 <= 0x46)
    {
      unint64_t result = strlcat(__str, "Directly Reachable Address,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~0x20000u;
    }
    if ((v7 & 0x40000) != 0 && v5 <= 0x5C)
    {
      unint64_t result = strlcat(__str, "WWAN,", 0x63uLL);
      unint64_t v5 = result;
      v7 &= ~0x40000u;
    }
    if (v7)
    {
      if (v5 >= 0x57)
      {
        __str[v6] = 0;
        unint64_t v5 = v6;
        unsigned int v7 = a1;
      }
      unint64_t result = snprintf(&__str[v5], 99 - v5, "0x%08x,", v7);
      v5 += (int)result;
    }
  }
  else
  {
    unint64_t result = strlcat(__str, "Not Reachable,", 0x63uLL);
    unint64_t v5 = result;
  }
  if (v5) {
    __str[v5 - 1] = 41;
  }
  return result;
}

void sub_1000436FC(uint64_t a1, int a2)
{
  uint64_t v22 = 0;
  size_t v4 = *(unsigned int *)(a1 + 16);
  LODWORD(v22) = v4;
  unint64_t v5 = malloc_type_calloc(v4, 4uLL, 0x100004052888210uLL);
  uint64_t v23 = v5;
  if (v5 && *(int *)(a1 + 16) >= 1)
  {
    unint64_t v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 224 * *(int *)(a1 + 4) + 40;
    do
    {
      v6[v7] = sub_10002B79C(a1 + 112 * *(int *)(v8 + 4 * v7) + 40);
      ++v7;
    }
    while (v7 < *(int *)(a1 + 16));
  }
  if (ioctl(a2, 0xC01069B2uLL, &v22))
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9, v10, v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      int v13 = v22;
      uint64_t v14 = v23;
      uint64_t v15 = __error();
      uint64_t v16 = strerror(*v15);
      *(_DWORD *)uint64_t v12 = 67109890;
      *(_DWORD *)(v12 + 4) = v13;
      *(_WORD *)(v12 + 8) = 2048;
      *(void *)(v12 + 10) = v14;
      *(_WORD *)(v12 + 18) = 1024;
      *(_DWORD *)(v12 + 20) = a2;
      *(_WORD *)(v12 + 24) = 2080;
      *(void *)(v12 + 26) = v16;
LABEL_14:
      __SC_log_send();
    }
  }
  else
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v17 = _os_log_pack_size();
      __chkstk_darwin(v17, v18, v19);
      __error();
      uint64_t v20 = (_DWORD *)_os_log_pack_fill();
      int v21 = v22;
      *uint64_t v20 = 67109120;
      v20[1] = v21;
      goto LABEL_14;
    }
  }
  if (v23) {
    free(v23);
  }
}

uint64_t sub_1000439DC(uint64_t result, int a2, int a3)
{
  uint64_t v4 = result;
  unsigned int v5 = (*(void *)(result + 16) >> 8) & 0xF;
  if (v5 != 3)
  {
    if (v5 == 2)
    {
      LOBYTE(v7) = 0;
      unsigned int v8 = 0;
      goto LABEL_8;
    }
    if (v5 != 1) {
      return result;
    }
  }
  unint64_t v6 = *(void *)(result + 16) & 0x10;
  unint64_t v7 = v6 >> 4;
  if (v6) {
    unsigned int v8 = 20;
  }
  else {
    unsigned int v8 = 0;
  }
LABEL_8:
  uint64_t v9 = v8;
  if ((sub_10002C04C(a3, result, a2, result + 92, v8) & 0x80000000) != 0)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    unint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v26 = _os_log_pack_size();
      __chkstk_darwin(v26, v27, v28);
      __error();
      uint64_t v29 = _os_log_pack_fill();
      if (a2 == 2) {
        int v30 = 52;
      }
      else {
        int v30 = 54;
      }
      uint64_t v31 = __error();
      uint64_t v32 = strerror(*v31);
      *(_DWORD *)uint64_t v29 = 136315906;
      *(void *)(v29 + 4) = v4;
      *(_WORD *)(v29 + 12) = 1024;
      *(_DWORD *)(v29 + 14) = v30;
      *(_WORD *)(v29 + 18) = 1024;
      *(_DWORD *)(v29 + 20) = v8;
      *(_WORD *)(v29 + 24) = 2080;
      *(void *)(v29 + 26) = v32;
      return __SC_log_send();
    }
  }
  else
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    unint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12, v13, v14);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      if (a2 == 2) {
        int v16 = 52;
      }
      else {
        int v16 = 54;
      }
      uint64_t v17 = "Cleared";
      *(_DWORD *)uint64_t v15 = 67109634;
      *(_DWORD *)(v15 + 4) = v16;
      *(_WORD *)(v15 + 8) = 2080;
      if (v7) {
        uint64_t v17 = "Set";
      }
      *(void *)(v15 + 10) = v17;
      *(_WORD *)(v15 + 18) = 2080;
      *(void *)(v15 + 20) = v4;
      unint64_t result = __SC_log_send();
    }
    if ((v7 & 1) != 0 && byte_10007DC9C == 1)
    {
      __chkstk_darwin(result, v10, v11);
      uint64_t v19 = &v33[-v18];
      v33[-v18] = 0;
      if (v8)
      {
        uint64_t v20 = (unsigned __int8 *)(v4 + 92);
        do
        {
          int v21 = *v20++;
          snprintf(__str, 4uLL, "%02x ", v21);
          strlcat(v19, __str, (3 * v8) | 1);
          --v9;
        }
        while (v9);
      }
      if (!qword_10007DC80) {
        qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
      }
      _SC_syslog_os_log_mapping();
      unint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v22 = _os_log_pack_size();
        __chkstk_darwin(v22, v23, v24);
        __error();
        uint64_t v25 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v25 = 136315138;
        *(void *)(v25 + 4) = v19;
        return __SC_log_send();
      }
    }
  }
  return result;
}

void sub_100043E1C(id a1)
{
  qword_10007DDC8 = (uint64_t)dispatch_queue_create("IPMonitorQueue", 0);
}

uint64_t sub_100043E7C()
{
  if ((byte_10007DC9D & 1) != 0 || sub_100055E88())
  {
    byte_10007DC9C = 1;
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v0 = _os_log_pack_size();
      __chkstk_darwin(v0, v1, v2);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
  }
  else
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3, v4, v5);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    byte_10007DC9C = 0;
  }
  byte_10007DD60 = sub_100055F44();
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7, v8, v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    if (byte_10007DD60) {
      uint64_t v11 = "disabled";
    }
    else {
      uint64_t v11 = "enabled";
    }
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = v11;
    return __SC_log_send();
  }
  return result;
}

void sub_100044174(id a1)
{
  qword_10007DDD8 = (uint64_t)dispatch_queue_create("network change queue", 0);
}

void sub_1000441D4(id a1)
{
  byte_10007DDF8 = 1;

  sub_100032744();
}

void sub_100044238(const __SCDynamicStore *a1, const __CFArray *a2)
{
  sub_100035E78(a1, a2, 0);
}

uint64_t sub_100044294()
{
  kern_return_t multiuser_config_flags;
  mach_error_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint32_t multiuser_flags;

  multiuser_uint64_t flags = 0;
  mach_port_t v0 = mach_host_self();
  multiuser_config_uint64_t flags = host_get_multiuser_config_flags(v0, &multiuser_flags);
  if (multiuser_config_flags)
  {
    uint64_t v2 = multiuser_config_flags;
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3, v4, v5);
      __error();
      unint64_t v6 = _os_log_pack_fill();
      uint64_t v7 = mach_error_string(v2);
      *(_DWORD *)unint64_t v6 = 136315394;
      *(void *)(v6 + 4) = v7;
      *(_WORD *)(v6 + 12) = 1024;
      *(_DWORD *)(v6 + 14) = v2;
      __SC_log_send();
      uint64_t v8 = "false";
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v8 = "false";
    }
  }
  else
  {
    if ((multiuser_flags & 0x80000000) == 0) {
      uint64_t v8 = "false";
    }
    else {
      uint64_t v8 = "true";
    }
    uint64_t v9 = multiuser_flags >> 31;
  }
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v10 = _os_log_pack_size();
    __chkstk_darwin(v10, v11, v12);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v13 = 136315394;
    *(void *)(v13 + 4) = "host_is_multiuser";
    *(_WORD *)(v13 + 12) = 2080;
    *(void *)(v13 + 14) = v8;
    __SC_log_send();
  }
  return v9;
}

void sub_10004451C(id a1)
{
  uint64_t v1 = sem_open("com.apple.configd.first-boot", 0);
  if (v1 == (sem_t *)-1)
  {
    byte_10007DDFC = 1;
    sub_1000445CC();
  }
  else
  {
    sem_close(v1);
  }
}

uint64_t sub_1000445CC()
{
  mach_port_t v0 = sem_open("com.apple.configd.first-boot", 512, 256);
  if (v0 == (sem_t *)-1)
  {
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      uint64_t v11 = __error();
      uint64_t v12 = strerror(*v11);
      *(_DWORD *)uint64_t v10 = 136315650;
      *(void *)(v10 + 4) = "my_sem_establish";
      *(_WORD *)(v10 + 12) = 2080;
      *(void *)(v10 + 14) = "com.apple.configd.first-boot";
      *(_WORD *)(v10 + 22) = 2080;
      *(void *)(v10 + 24) = v12;
      return __SC_log_send();
    }
  }
  else
  {
    uint64_t v1 = v0;
    if (!qword_10007DC80) {
      qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2, v3, v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)(v5 + 4) = "my_sem_establish";
      *(_WORD *)(v5 + 12) = 2080;
      *(void *)(v5 + 14) = "com.apple.configd.first-boot";
      __SC_log_send();
    }
    return sem_close(v1);
  }
  return result;
}

void sub_10004483C(uint64_t a1)
{
  size_t v34 = 0;
  *(_OWORD *)uint64_t v35 = xmmword_100069640;
  uint64_t v36 = 0x81000000002;
  int v2 = 3;
  while (1)
  {
    if (sysctl(v35, 6u, 0, &v34, 0, 0) < 0) {
      return;
    }
    uint64_t v3 = (unsigned __int16 *)malloc_type_malloc(v34, 0x33E4DF7FuLL);
    if (!v3) {
      return;
    }
    uint64_t v4 = v3;
    if ((sysctl(v35, 6u, v3, &v34, 0, 0) & 0x80000000) == 0) {
      break;
    }
    free(v4);
    if (!--v2) {
      return;
    }
  }
  if ((uint64_t)v34 >= 1)
  {
    unint64_t v5 = (unint64_t)v4 + v34;
    p_base_props = &QoSMarkingController__classData.base_props;
    uint64_t v7 = v4;
    unint64_t v32 = (unint64_t)v4 + v34;
    do
    {
      unsigned int v8 = bswap32(*((_DWORD *)v7 + 24));
      if (HIBYTE(v8) == 127)
      {
        if (!p_base_props[400]) {
          p_base_props[400] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_25;
        }
      }
      else
      {
        if (v8 >> 8 != 14680064)
        {
          *((unsigned char *)v7 + 3) = 2;
          *((_DWORD *)v7 + 5) = ++dword_10007DCC4;
          ssize_t v12 = write(a1, v7, *v7);
          uint64_t v13 = p_base_props[400];
          if (v12 < 0)
          {
            if (!v13) {
              p_base_props[400] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            }
            _SC_syslog_os_log_mapping();
            if (!__SC_log_enabled()) {
              goto LABEL_25;
            }
            uint64_t v22 = _os_log_pack_size();
            __chkstk_darwin(v22, v23, v24);
            __error();
            uint64_t v25 = _os_log_pack_fill();
            uint64_t v26 = a1;
            int v27 = *((unsigned __int8 *)v7 + 96);
            int v28 = *((unsigned __int8 *)v7 + 97);
            int v29 = *((unsigned __int8 *)v7 + 98);
            int v33 = *((unsigned __int8 *)v7 + 99);
            int v30 = __error();
            uint64_t v31 = strerror(*v30);
            *(_DWORD *)uint64_t v25 = 67110146;
            *(_DWORD *)(v25 + 4) = v27;
            a1 = v26;
            *(_WORD *)(v25 + 8) = 1024;
            *(_DWORD *)(v25 + 10) = v28;
            p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
            *(_WORD *)(v25 + 14) = 1024;
            *(_DWORD *)(v25 + 16) = v29;
            unint64_t v5 = v32;
            *(_WORD *)(v25 + 20) = 1024;
            *(_DWORD *)(v25 + 22) = v33;
            *(_WORD *)(v25 + 26) = 2080;
            *(void *)(v25 + 28) = v31;
          }
          else
          {
            if (!v13) {
              p_base_props[400] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
            }
            _SC_syslog_os_log_mapping();
            if (!__SC_log_enabled()) {
              goto LABEL_25;
            }
            uint64_t v14 = _os_log_pack_size();
            __chkstk_darwin(v14, v15, v16);
            __error();
            uint64_t v17 = _os_log_pack_fill();
            int v18 = *((unsigned __int8 *)v7 + 96);
            int v19 = *((unsigned __int8 *)v7 + 97);
            int v20 = *((unsigned __int8 *)v7 + 98);
            int v21 = *((unsigned __int8 *)v7 + 99);
            *(_DWORD *)uint64_t v17 = 67109888;
            *(_DWORD *)(v17 + 4) = v18;
            *(_WORD *)(v17 + 8) = 1024;
            *(_DWORD *)(v17 + 10) = v19;
            *(_WORD *)(v17 + 14) = 1024;
            *(_DWORD *)(v17 + 16) = v20;
            *(_WORD *)(v17 + 20) = 1024;
            *(_DWORD *)(v17 + 22) = v21;
          }
          goto LABEL_24;
        }
        if (!p_base_props[400]) {
          p_base_props[400] = (__objc2_prop_list *)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_25;
        }
      }
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9, v10, v11);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
LABEL_24:
      __SC_log_send();
LABEL_25:
      uint64_t v7 = (unsigned __int16 *)((char *)v7 + *v7);
    }
    while ((unint64_t)v7 < v5);
  }
  free(v4);
}

void sub_100044D38(id a1)
{
  SCDynamicStoreNotifyValue(0, (CFStringRef)qword_10007DDB8);
  process_AgentMonitor_Proxy();
  notify_post("com.apple.system.config.proxy_change");
  if (!qword_10007DC80) {
    qword_10007DC80 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "IPMonitor");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v1 = _os_log_pack_size();
    __chkstk_darwin(v1, v2, v3);
    __error();
    uint64_t v4 = _os_log_pack_fill();
    uint64_t v5 = qword_10007DDB8;
    *(_DWORD *)uint64_t v4 = 138412290;
    *(void *)(v4 + 4) = v5;
    __SC_log_send();
  }
}

void sub_100044E88(id a1)
{
  uint64_t v2 = 0;
  CFArrayRef v1 = (const __CFArray *)sub_10002C794(&v2);
  if (qword_10007DD58) {
    CFRelease((CFTypeRef)qword_10007DD58);
  }
  qword_10007DD58 = v2;
  if (v1)
  {
    sub_100035E78((const __SCDynamicStore *)qword_10007DC90, 0, v1);
    CFRelease(v1);
  }
}

uint64_t sub_100044F20(uint64_t a1, const void *a2)
{
  sub_10005500C(qword_10007DE10);
  sub_100045100();
  qword_10007DE30 = (uint64_t)_Block_copy(a2);
  uint64_t v3 = "com.apple.SystemConfiguration.NetworkInformation";
  uint64_t v4 = getenv("com.apple.SystemConfiguration.NetworkInformation");
  if (v4) {
    uint64_t v3 = v4;
  }
  if (qword_10007DE38 != -1) {
    dispatch_once(&qword_10007DE38, &stru_100076E68);
  }
  mach_service = xpc_connection_create_mach_service(v3, (dispatch_queue_t)qword_10007DE40, 1uLL);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 0x40000000;
  handler[2] = sub_100006E48;
  handler[3] = &unk_100076DC8;
  void handler[4] = mach_service;
  xpc_connection_set_event_handler(mach_service, handler);
  xpc_connection_resume(mach_service);
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7, v8, v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 136315138;
    *(void *)(v10 + 4) = v3;
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_100045100()
{
  if (qword_10007DE38 != -1) {
    dispatch_once(&qword_10007DE38, &stru_100076E68);
  }
  uint64_t result = os_state_add_handler();
  if (!result)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v1 = _os_log_pack_size();
      __chkstk_darwin(v1, v2, v3);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_100045240(const __CFData *a1)
{
  CFDataRef v1 = a1;
  if (a1)
  {
    uint64_t v2 = *((void *)a1 + 4);
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3, v4, v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v6 = 134217984;
      *(void *)(v6 + 4) = v2;
      __SC_log_send();
    }
    CFDataRef v1 = CFDataCreate(0, (const UInt8 *)v1, 4 * *((unsigned int *)v1 + 1) + 112 * (2 * *((_DWORD *)v1 + 1)) + 40);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (qword_10007DE38 != -1) {
    dispatch_once(&qword_10007DE38, &stru_100076E68);
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100045514;
  block[3] = &unk_100076DE8;
  void block[4] = v1;
  void block[5] = v2;
  dispatch_sync((dispatch_queue_t)qword_10007DE40, block);
  if (v1) {
    CFRelease(v1);
  }
  sub_100055124((uint64_t)&qword_10007DE10);
  if (qword_10007DE30) {
    (*(void (**)(void))(qword_10007DE30 + 16))();
  }
  uint64_t notify_key = nwi_state_get_notify_key();
  if (notify_key)
  {
    uint64_t v8 = (const char *)notify_key;
    _nwi_state_force_refresh();
    uint32_t v9 = notify_post(v8);
    if (v9)
    {
      uint32_t v10 = v9;
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v11 = _os_log_pack_size();
        __chkstk_darwin(v11, v12, v13);
        __error();
        uint64_t v14 = (_DWORD *)_os_log_pack_fill();
        _DWORD *v14 = 67109120;
        v14[1] = v10;
        __SC_log_send();
      }
    }
  }
  return 1;
}

void sub_100045514(uint64_t a1)
{
  CFDataRef v1 = *(const void **)(a1 + 32);
  unint64_t v2 = *(void *)(a1 + 40);

  sub_100055088((uint64_t)&qword_10007DE10, v1, v2);
}

os_state_data_s *__cdecl sub_100045578(id a1, os_state_hints_s *a2)
{
  if (qword_10007DE10[0])
  {
    CFIndex Length = CFDataGetLength((CFDataRef)qword_10007DE10[0]);
    size_t v3 = Length + 200;
    if ((unint64_t)(Length + 200) > 0x8000)
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        _os_log_pack_size();
        __error();
        uint64_t v4 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v4 = 134218240;
        *(void *)(v4 + 4) = v3;
        *(_WORD *)(v4 + 12) = 2048;
        *(void *)(v4 + 14) = 0x8000;
        __SC_log_send();
      }
      return 0;
    }
    int64_t v5 = Length;
  }
  else
  {
    int64_t v5 = 0;
    size_t v3 = 200;
  }
  uint64_t v6 = (os_state_data_s *)malloc_type_calloc(1uLL, v3, 0x716232B5uLL);
  if (!v6)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      _os_log_pack_size();
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    return 0;
  }
  uint64_t v7 = v6;
  v6->var0 = 3;
  v6->var1.var1 = v5;
  __strlcpy_chk();
  __strlcpy_chk();
  __strlcpy_chk();
  if (v5 >= 1)
  {
    BytePtr = CFDataGetBytePtr((CFDataRef)qword_10007DE10[0]);
    memcpy(v7->var4, BytePtr, v5);
  }
  return v7;
}

void sub_1000457D4(id a1)
{
  qword_10007DE40 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.NetworkInformation.server", 0);
}

uint64_t sub_100045834(_xpc_connection_s *a1, xpc_object_t xdict)
{
  uunsigned int int64 = xpc_dictionary_get_uint64(xdict, "generation");
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4, v5, v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    pid_t pid = xpc_connection_get_pid(a1);
    *(_DWORD *)uint64_t v7 = 134218496;
    *(void *)(v7 + 4) = a1;
    *(_WORD *)(v7 + 12) = 1024;
    *(_DWORD *)(v7 + 14) = pid;
    *(_WORD *)(v7 + 18) = 2048;
    *(void *)(v7 + 20) = uint64;
    __SC_log_send();
  }
  uint64_t result = sub_100055178((uint64_t)&qword_10007DE10, a1, uint64);
  if (result)
  {
    sub_100055124((uint64_t)&qword_10007DE10);
    uint64_t result = qword_10007DE30;
    if (qword_10007DE30) {
      return (*(uint64_t (**)(void))(qword_10007DE30 + 16))();
    }
  }
  return result;
}

void sub_1000459C8(_xpc_connection_s *a1, xpc_object_t xdict)
{
  size_t v18 = 0;
  memset(dst, 0, sizeof(dst));
  remote_connection = xpc_dictionary_get_remote_connection(xdict);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uuid = xpc_dictionary_get_uuid(xdict, "AgentUUID");
  if (!uuid || (uuid_copy(dst, uuid), (string = xpc_dictionary_get_string(xdict, "AgentType")) == 0))
  {
    uint64_t v16 = 0;
    if (!reply) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  uint64_t v8 = string;
  uint32_t v9 = xpc_dictionary_get_string(xdict, "proc_name");
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    if (v9) {
      uint32_t v10 = v9;
    }
    else {
      uint32_t v10 = "???";
    }
    uint64_t v11 = _os_log_pack_size();
    __chkstk_darwin(v11, v12, v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    pid_t pid = xpc_connection_get_pid(a1);
    *(_DWORD *)uint64_t v14 = 134218498;
    *(void *)(v14 + 4) = a1;
    *(_WORD *)(v14 + 12) = 2080;
    *(void *)(v14 + 14) = v10;
    *(_WORD *)(v14 + 22) = 1024;
    *(_DWORD *)(v14 + 24) = pid;
    __SC_log_send();
  }
  if (!strcmp(v8, "DNSAgent"))
  {
    uint64_t v17 = (void *)copy_dns_information_for_agent_uuid((uint64_t)dst, (uint64_t)&v18);
  }
  else
  {
    if (strcmp(v8, "ProxyAgent"))
    {
      uint64_t v16 = 0;
      goto LABEL_21;
    }
    uint64_t v17 = (void *)copy_proxy_information_for_agent_uuid((uint64_t)dst, (uint64_t)&v18);
  }
  uint64_t v16 = v17;
  if (v17 && v18) {
    xpc_dictionary_set_data(reply, "AgentData", v17, v18);
  }
LABEL_21:
  xpc_connection_send_message(remote_connection, reply);
  if (reply) {
LABEL_12:
  }
    xpc_release(reply);
LABEL_13:
  if (v16) {
    free(v16);
  }
}

__CFDictionary *sub_100045C2C(const __CFDictionary *a1, const __CFDictionary *a2, const __CFArray *a3, const void *a4)
{
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFTypeID TypeID = CFDictionaryGetTypeID();
  CFArrayRef v132 = a3;
  if (a2)
  {
    if (CFGetTypeID(a2) == TypeID)
    {
      CFIndex Count = CFDictionaryGetCount(a2);
      if (Count)
      {
        uint64_t v10 = Count;
        if (Count < 33)
        {
          p_long long valuePtr = (const void **)&valuePtr;
          values = (void **)v139;
        }
        else
        {
          p_long long valuePtr = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
          values = (void **)CFAllocatorAllocate(0, 8 * v10, 0);
        }
        CFTypeID v12 = CFArrayGetTypeID();
        CFDictionaryRef v119 = a1;
        if (a3 && CFGetTypeID(a3) == v12) {
          uint64_t range = CFArrayGetCount(a3);
        }
        else {
          uint64_t range = 0;
        }
        uint64_t v13 = values;
        long long v154 = 0u;
        long long v155 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        long long v150 = 0u;
        long long v151 = 0u;
        long long v148 = 0u;
        long long v149 = 0u;
        long long v146 = 0u;
        long long v147 = 0u;
        long long v144 = 0u;
        long long v145 = 0u;
        long long v142 = 0u;
        long long v143 = 0u;
        long long valuePtr = 0u;
        long long v141 = 0u;
        memset(v139, 0, sizeof(v139));
        CFDictionaryGetKeysAndValues(a2, p_valuePtr, (const void **)values);
        if (v10 >= 1)
        {
          uint64_t v14 = 0;
          uint64_t v126 = (void *)kSCPropNetProxiesSupplementalMatchDomains;
          int v121 = (void *)kSCPropNetProxiesSupplementalMatchOrders;
          int v120 = (void *)kSCPropNetProxiesSupplementalMatchDomain;
          CFStringRef v122 = p_valuePtr;
          CFDictionaryRef v123 = a2;
          while (1)
          {
            CFDictionaryRef v15 = (const __CFDictionary *)v13[v14];
            CFTypeID v16 = CFDictionaryGetTypeID();
            if (v15)
            {
              if (CFGetTypeID(v15) == v16)
              {
                MutableCFDictionaryRef Copy = (void *)CFDictionaryGetValue(v15, kSCEntNetProxies);
                CFTypeID v18 = CFDictionaryGetTypeID();
                if (MutableCopy)
                {
                  if (CFGetTypeID(MutableCopy) == v18) {
                    break;
                  }
                }
              }
            }
LABEL_61:
            if (++v14 == v10) {
              goto LABEL_65;
            }
          }
          if (G_supplemental_proxies_follow_dns
            && CFBooleanGetValue((CFBooleanRef)G_supplemental_proxies_follow_dns)
            && (v137 = 0, value = 0, size_t v136 = 0, !CFDictionaryContainsKey((CFDictionaryRef)MutableCopy, v126))
            && CFDictionaryGetValueIfPresent(v15, kSCEntNetDNS, (const void **)&value)
            && (unint64_t v32 = value, v33 = CFDictionaryGetTypeID(), v32)
            && CFGetTypeID(v32) == v33
            && CFDictionaryGetValueIfPresent((CFDictionaryRef)value, kSCPropNetDNSSupplementalMatchDomains, (const void **)&v137)&& (size_t v34 = v137, v35 = CFArrayGetTypeID(), v34)&& CFGetTypeID(v34) == v35)
          {
            MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)MutableCopy);
            CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, v126, v137);
            if (CFDictionaryGetValueIfPresent((CFDictionaryRef)value, kSCPropNetDNSSupplementalMatchOrders, (const void **)&v136)&& (uint64_t v36 = v136, v37 = CFArrayGetTypeID(), v36)&& CFGetTypeID(v36) == v37)
            {
              CFDictionarySetValue((CFMutableDictionaryRef)MutableCopy, v121, v136);
            }
            else
            {
              CFDictionaryRemoveValue((CFMutableDictionaryRef)MutableCopy, v121);
            }
            CFTypeRef cf = MutableCopy;
          }
          else
          {
            CFTypeRef cf = 0;
          }
          v19.length = range;
          int v20 = 200 * v14 + 100000;
          if (range >= 1)
          {
            v19.location = 0;
            int v21 = CFArrayContainsValue(a3, v19, p_valuePtr[v14]);
            int v22 = 200 * v10;
            if (v21) {
              int v22 = 0;
            }
            v20 += v22;
          }
          LODWORD(value) = v20;
          uint64_t v23 = CFDictionaryGetValue((CFDictionaryRef)MutableCopy, v126);
          CFTypeID v24 = CFArrayGetTypeID();
          uint64_t v13 = values;
          if (!v23) {
            goto LABEL_59;
          }
          if (CFGetTypeID(v23) != v24) {
            goto LABEL_59;
          }
          CFIndex v25 = CFArrayGetCount((CFArrayRef)v23);
          if (!v25) {
            goto LABEL_59;
          }
          uint64_t v26 = v25;
          CFArrayRef v27 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)MutableCopy, v121);
          CFArrayRef theArray = v27;
          if (!v27)
          {
            if (v26 >= 1) {
              goto LABEL_45;
            }
            goto LABEL_59;
          }
          CFArrayRef v28 = v27;
          CFTypeID v29 = CFArrayGetTypeID();
          BOOL v30 = CFGetTypeID(v28) == v29;
          uint64_t v13 = values;
          if (!v30 || (CFIndex v31 = CFArrayGetCount(theArray), v26 < 1) || v26 != v31)
          {
LABEL_59:
            p_long long valuePtr = v122;
            a2 = v123;
            a3 = v132;
            if (cf) {
              CFRelease(cf);
            }
            goto LABEL_61;
          }
LABEL_45:
          CFIndex v38 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v23, v38);
            CFTypeID v40 = CFStringGetTypeID();
            if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v40) {
              goto LABEL_58;
            }
            uint64_t v41 = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)MutableCopy);
            uint64_t v42 = (const void *)_SC_trimDomain();
            if (v42)
            {
              uint64_t v43 = v42;
              CFDictionarySetValue(v41, v120, v42);
              CFRelease(v43);
            }
            else
            {
              CFDictionaryRemoveValue(v41, v120);
            }
            if (!theArray) {
              break;
            }
            uint64_t v44 = CFArrayGetValueAtIndex(theArray, v38);
            CFTypeID v45 = CFNumberGetTypeID();
            if (!v44 || CFGetTypeID(v44) != v45) {
              goto LABEL_56;
            }
            CFDictionarySetValue(v41, @"__MATCH_ORDER__", v44);
LABEL_57:
            uint64_t v13 = values;
            CFDictionaryRemoveValue(v41, v126);
            CFDictionaryRemoveValue(v41, v121);
            CFDictionaryRemoveValue(v41, kSCPropInterfaceName);
            sub_100046F54(Mutable, v41);
            CFRelease(v41);
LABEL_58:
            if (v26 == ++v38) {
              goto LABEL_59;
            }
          }
          CFNumberGetTypeID();
LABEL_56:
          CFNumberRef v46 = CFNumberCreate(0, kCFNumberIntType, &value);
          CFDictionarySetValue(v41, @"__MATCH_ORDER__", v46);
          CFRelease(v46);
          LODWORD(value) = value + 1;
          goto LABEL_57;
        }
LABEL_65:
        a1 = v119;
        if (p_valuePtr != (const void **)&valuePtr)
        {
          CFAllocatorDeallocate(0, p_valuePtr);
          CFAllocatorDeallocate(0, v13);
        }
      }
    }
  }
  LODWORD(valuePtr) = 200000;
  if (a1)
  {
    uint64_t v47 = CFDictionaryCreateMutableCopy(0, 0, a1);
    CFDictionaryRemoveValue(v47, kSCPropInterfaceName);
    uint64_t v48 = CFDictionaryGetValue(v47, @"__MATCH_ORDER__");
    CFTypeID v49 = CFNumberGetTypeID();
    if (v48 && CFGetTypeID(v48) == v49 && CFNumberGetValue((CFNumberRef)v48, kCFNumberSInt32Type, &valuePtr))
    {
      int v50 = 0;
      goto LABEL_74;
    }
  }
  else
  {
    uint64_t v47 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFNumberGetTypeID();
  }
  LODWORD(valuePtr) = 200000;
  CFNumberRef v51 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(v47, @"__MATCH_ORDER__", v51);
  CFRelease(v51);
  int v50 = 1;
LABEL_74:
  sub_100046F54(Mutable, v47);
  CFRelease(v47);
  uint64_t v52 = CFArrayGetCount(Mutable);
  uint64_t v53 = v52;
  if (v52 < 2)
  {
    if (v52 != 1) {
      goto LABEL_83;
    }
  }
  else
  {
    v156.location = 0;
    v156.length = v52;
    CFArraySortValues(Mutable, v156, (CFComparatorFunction)sub_100046B74, 0);
  }
  BOOL v54 = (const void *)kSCPropNetProxiesSupplementalMatchDomain;
  CFIndex v55 = v53 - 1;
  do
  {
    CFDictionaryRef v56 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, v55);
    CFDictionaryRef v57 = v56;
    if (v55 && !CFDictionaryContainsKey(v56, v54))
    {
      CFArrayRemoveValueAtIndex(Mutable, v55);
      --v53;
    }
    else
    {
      int v58 = CFDictionaryCreateMutableCopy(0, 0, v57);
      CFDictionaryRemoveValue(v58, @"__MATCH_ORDER__");
      CFDictionaryRemoveValue(v58, @"__ORDER__");
      CFArraySetValueAtIndex(Mutable, v55, v58);
      CFRelease(v58);
    }
    unint64_t v59 = v55-- + 1;
  }
  while (v59 > 1);
LABEL_83:
  CFDictionaryRef v60 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, 0);
  int v61 = CFDictionaryCreateMutableCopy(0, 0, v60);
  if (v53 > 1) {
    int v62 = v50;
  }
  else {
    int v62 = 0;
  }
  if (v62 == 1)
  {
    CFDictionaryRef v63 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, 1);
    if (CFDictionaryContainsKey(v63, kSCPropNetProxiesSupplementalMatchDomain)) {
      CFDictionaryRemoveValue(v61, @"__MATCH_ORDER__");
    }
  }
  CFArraySetValueAtIndex(Mutable, 0, v61);
  CFRelease(v61);
  if (v53 < 1)
  {
    uint64_t v66 = 0;
    goto LABEL_162;
  }
  CFDictionaryRef v64 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, 0);
  int v65 = (const void *)kSCPropNetProxiesSupplementalMatchDomain;
  if (CFDictionaryContainsKey(v64, kSCPropNetProxiesSupplementalMatchDomain))
  {
    uint64_t v66 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  else
  {
    uint64_t v66 = CFDictionaryCreateMutableCopy(0, 0, v64);
    CFDictionaryRemoveValue(v66, kSCPropNetProxiesSupplementalMatchDomains);
    CFDictionaryRemoveValue(v66, kSCPropNetProxiesSupplementalMatchOrders);
  }
  CFTypeID v67 = CFDictionaryGetTypeID();
  if (!a2 || CFGetTypeID(a2) != v67 || (CFIndex v68 = CFDictionaryGetCount(a2)) == 0)
  {
    int v73 = 0;
    goto LABEL_102;
  }
  uint64_t v69 = v68;
  CFTypeID v70 = CFArrayGetTypeID();
  if (!v132 || CFGetTypeID(v132) != v70)
  {
    uint64_t v71 = 0;
    goto LABEL_164;
  }
  uint64_t v71 = CFArrayGetCount(v132);
  if (v71 < 1)
  {
LABEL_164:
    CFMutableArrayRef v72 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    goto LABEL_165;
  }
  CFMutableArrayRef v72 = CFArrayCreateMutableCopy(0, 0, v132);
LABEL_165:
  int v73 = v72;
  long long v154 = 0u;
  long long v155 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v150 = 0u;
  long long v151 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  long long v146 = 0u;
  long long v147 = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  long long v142 = 0u;
  long long v143 = 0u;
  long long valuePtr = 0u;
  long long v141 = 0u;
  if (v69 >= 33)
  {
    CFDictionaryRef v115 = (const void **)CFAllocatorAllocate(0, 8 * v69, 0);
    CFDictionaryGetKeysAndValues(a2, v115, 0);
    goto LABEL_168;
  }
  CFDictionaryRef v115 = (const void **)&valuePtr;
  CFDictionaryGetKeysAndValues(a2, (const void **)&valuePtr, 0);
  if (v69 >= 1)
  {
LABEL_168:
    for (uint64_t i = 0; i != v69; ++i)
    {
      uint64_t v117 = v115[i];
      v157.location = 0;
      v157.length = v71;
      if (!CFArrayContainsValue(v73, v157, v117))
      {
        CFArrayAppendValue(v73, v117);
        ++v71;
      }
    }
    if (v115 != (const void **)&valuePtr) {
      CFAllocatorDeallocate(0, v115);
    }
  }
LABEL_102:
  CFTypeID v74 = CFArrayGetTypeID();
  if (Mutable)
  {
    if (CFGetTypeID(Mutable) == v74)
    {
      CFIndex v75 = CFArrayGetCount(Mutable);
      if (v75 >= 1)
      {
        CFIndex v76 = v75;
        CFDictionaryRef v77 = a2;
        int32x4_t v78 = 0;
        for (CFIndex j = 0; j != v76; ++j)
        {
          CFDictionaryRef v80 = (const __CFDictionary *)CFArrayGetValueAtIndex(Mutable, j);
          if (v80)
          {
            CFDictionaryRef v81 = v80;
            if (CFDictionaryContainsKey(v80, v65))
            {
              if (!v78) {
                int32x4_t v78 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
              }
              CFArrayAppendValue(v78, v81);
            }
          }
        }
        a2 = v77;
        if (v78)
        {
          CFDictionarySetValue(v66, kSCPropNetProxiesSupplemental, v78);
          CFRelease(v78);
        }
      }
    }
  }
  CFTypeID v82 = CFArrayGetTypeID();
  if (v73)
  {
    if (CFGetTypeID(v73) == v82)
    {
      CFIndex v83 = CFArrayGetCount(v73);
      if (v83 >= 1)
      {
        CFIndex v84 = v83;
        CFIndex v85 = 0;
        int v86 = 0;
        valuesa = (void **)kSCPropNetProxiesSupplementalMatchOrders;
        key = (void *)kSCPropNetProxiesSupplementalMatchDomains;
        do
        {
          int v87 = CFArrayGetValueAtIndex(v73, v85);
          CFDictionaryRef v88 = (const __CFDictionary *)CFDictionaryGetValue(a2, v87);
          CFTypeID v89 = CFDictionaryGetTypeID();
          if (v88)
          {
            if (CFGetTypeID(v88) == v89)
            {
              CFDictionaryRef v90 = (const __CFDictionary *)CFDictionaryGetValue(v88, kSCEntNetProxies);
              CFTypeID v91 = CFDictionaryGetTypeID();
              if (v90)
              {
                if (CFGetTypeID(v90) == v91)
                {
                  CFDictionaryRef v92 = a2;
                  uint64_t v93 = CFDictionaryGetValue(v90, kSCPropInterfaceName);
                  if (v93)
                  {
                    int v94 = v93;
                    if ((!v86 || !CFDictionaryContainsKey(v86, v93))
                      && _SC_cfstring_to_cstring()
                      && sub_10002B79C((uint64_t)&valuePtr))
                    {
                      CFRetain(v94);
                      uint64_t v95 = CFDictionaryCreateMutableCopy(0, 0, v90);
                      CFDictionaryRemoveValue(v95, key);
                      CFDictionaryRemoveValue(v95, valuesa);
                      CFDictionaryRemoveValue(v95, kSCPropInterfaceName);
                      if (!v86) {
                        int v86 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                      }
                      CFDictionarySetValue(v86, v94, v95);
                      CFRelease(v95);
                      CFRelease(v94);
                    }
                  }
                  a2 = v92;
                }
              }
            }
          }
          ++v85;
        }
        while (v84 != v85);
        if (v86)
        {
          CFDictionarySetValue(v66, kSCPropNetProxiesScoped, v86);
          CFRelease(v86);
        }
      }
    }
  }
  CFTypeID v96 = CFDictionaryGetTypeID();
  if (a4 && CFGetTypeID(a4) == v96)
  {
    CFTypeID v97 = CFArrayGetTypeID();
    if (!v73) {
      goto LABEL_162;
    }
    if (CFGetTypeID(v73) != v97) {
      goto LABEL_161;
    }
    CFIndex v98 = CFArrayGetCount(v73);
    if (v98 < 1) {
      goto LABEL_161;
    }
    CFIndex v99 = v98;
    CFIndex v100 = 0;
    CFDictionaryRef v133 = 0;
    CFTypeRef v135 = (CFTypeRef)kSCPropNetProxiesServiceSpecific;
    valuesb = (void **)kSCPropNetProxiesSupplementalMatchDomains;
    uint64_t v127 = (void *)kSCPropNetProxiesSupplementalMatchOrders;
    do
    {
      LODWORD(valuePtr) = 0;
      CFArrayRef v101 = CFArrayGetValueAtIndex(v73, v100);
      CFDictionaryRef v102 = (const __CFDictionary *)CFDictionaryGetValue(a2, v101);
      CFTypeID v103 = CFDictionaryGetTypeID();
      if (v102 && CFGetTypeID(v102) == v103)
      {
        CFDictionaryRef v104 = a2;
        CFDictionaryRef v105 = (const __CFDictionary *)CFDictionaryGetValue(v102, kSCEntNetProxies);
        CFTypeID v106 = CFDictionaryGetTypeID();
        if (v105)
        {
          if (CFGetTypeID(v105) == v106)
          {
            CFNumberRef v107 = (const __CFNumber *)CFDictionaryGetValue(v105, v135);
            CFTypeID v108 = CFNumberGetTypeID();
            if (v107)
            {
              if (CFGetTypeID(v107) == v108)
              {
                if (CFNumberGetValue(v107, kCFNumberIntType, &valuePtr))
                {
                  if (valuePtr)
                  {
                    CFStringRef v109 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%d", valuePtr);
                    if (v109)
                    {
                      CFStringRef v110 = v109;
                      BOOL v111 = v133;
                      if (v133 && CFDictionaryContainsKey(v133, v109))
                      {
                        int v112 = (__CFDictionary *)v110;
                      }
                      else
                      {
                        int v113 = CFDictionaryCreateMutableCopy(0, 0, v105);
                        CFDictionaryRemoveValue(v113, valuesb);
                        CFDictionaryRemoveValue(v113, v127);
                        CFDictionaryRemoveValue(v113, v135);
                        if (!v133) {
                          BOOL v111 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                        }
                        CFDictionaryRef v133 = v111;
                        CFDictionarySetValue(v111, v110, v113);
                        CFRelease(v110);
                        int v112 = v113;
                      }
                      CFRelease(v112);
                    }
                  }
                }
              }
            }
          }
        }
        a2 = v104;
      }
      ++v100;
    }
    while (v99 != v100);
    if (v133)
    {
      CFDictionarySetValue(v66, kSCPropNetProxiesServices, v133);
      CFRelease(v133);
    }
  }
  if (v73) {
LABEL_161:
  }
    CFRelease(v73);
LABEL_162:
  CFRelease(Mutable);
  return v66;
}

uint64_t sub_100046B74(const __CFDictionary *a1, const __CFDictionary *a2)
{
  uint64_t v4 = (const void *)kSCPropNetProxiesSupplementalMatchDomain;
  CFStringRef v5 = (const __CFString *)CFDictionaryGetValue(a1, kSCPropNetProxiesSupplementalMatchDomain);
  CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(a2, v4);
  CFStringRef v7 = v6;
  if (v5)
  {
    if (v6)
    {
      int HasSuffix = CFStringHasSuffix(v5, @".arpa");
      if (HasSuffix == CFStringHasSuffix(v7, @".arpa"))
      {
        CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v5, @".");
        CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
        CFArrayRef v11 = CFStringCreateArrayBySeparatingStrings(0, v7, @".");
        CFIndex v12 = CFArrayGetCount(v11);
        while (Count >= 1)
        {
          CFIndex v13 = v12 - 1;
          if (v12 < 1) {
            break;
          }
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, Count - 1);
          CFStringRef v15 = (const __CFString *)CFArrayGetValueAtIndex(v11, v13);
          CFComparisonResult v16 = CFStringCompare(ValueAtIndex, v15, 1uLL);
          --Count;
          CFIndex v12 = v13;
          if (v16) {
            goto LABEL_44;
          }
        }
        if (Count <= v12)
        {
          if (Count < v12)
          {
            CFComparisonResult v16 = kCFCompareGreaterThan;
          }
          else
          {
            unsigned int v17 = 200000;
            unsigned int v28 = 200000;
            unsigned int valuePtr = 200000;
            CFTypeID v18 = (void *)CFDictionaryGetValue(a1, @"__MATCH_ORDER__");
            CC_SHA256_CTX value = v18;
            CFTypeID TypeID = CFNumberGetTypeID();
            if (!v18
              || CFGetTypeID(v18) != TypeID
              || !CFNumberGetValue((CFNumberRef)v18, kCFNumberSInt32Type, &valuePtr))
            {
              unsigned int valuePtr = 200000;
            }
            CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(a2, @"__MATCH_ORDER__");
            CFNumberRef number = v20;
            CFTypeID v21 = CFNumberGetTypeID();
            if (v20 && CFGetTypeID(v20) == v21 && CFNumberGetValue(v20, kCFNumberSInt32Type, &v28)) {
              unsigned int v17 = v28;
            }
            else {
              unsigned int v28 = 200000;
            }
            BOOL v22 = valuePtr >= v17;
            if (valuePtr != v17
              || CFDictionaryGetValueIfPresent(a1, @"__ORDER__", (const void **)&value)
              && CFDictionaryGetValueIfPresent(a2, @"__ORDER__", (const void **)&number)
              && (v23 = value, CFTypeID v24 = CFNumberGetTypeID(), v23)
              && CFGetTypeID(v23) == v24
              && (CFNumberRef v25 = number, v26 = CFNumberGetTypeID(), v25)
              && CFGetTypeID(v25) == v26
              && CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr)
              && CFNumberGetValue(number, kCFNumberSInt32Type, &v28)
              && (BOOL v22 = valuePtr >= v28, valuePtr != v28))
            {
              if (v22) {
                CFComparisonResult v16 = kCFCompareGreaterThan;
              }
              else {
                CFComparisonResult v16 = kCFCompareLessThan;
              }
            }
            else
            {
              CFComparisonResult v16 = kCFCompareEqualTo;
            }
          }
        }
        else
        {
          CFComparisonResult v16 = kCFCompareLessThan;
        }
LABEL_44:
        if (ArrayBySeparatingStrings) {
          CFRelease(ArrayBySeparatingStrings);
        }
        if (v11) {
          CFRelease(v11);
        }
      }
      else if (HasSuffix)
      {
        return 1;
      }
      else
      {
        return -1;
      }
    }
    else
    {
      return 1;
    }
  }
  else if (v6)
  {
    return -1;
  }
  else
  {
    return 0;
  }
  return v16;
}

CFTypeID sub_100046E94(__CFBundle *a1)
{
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
  CFTypeID result = CFDictionaryGetTypeID();
  if (InfoDictionary)
  {
    CFTypeID v3 = result;
    CFTypeID result = CFGetTypeID(InfoDictionary);
    if (result == v3)
    {
      CFNumberRef Value = CFDictionaryGetValue(InfoDictionary, @"SupplementalProxiesFollowSupplementalDNS");
      G_supplemental_proxies_follow_dns = (uint64_t)Value;
      CFTypeID result = CFBooleanGetTypeID();
      if (Value)
      {
        CFTypeID v5 = result;
        CFTypeID result = CFGetTypeID(Value);
        if (result == v5) {
          uint64_t v6 = (uint64_t)Value;
        }
        else {
          uint64_t v6 = 0;
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
      G_supplemental_proxies_follow_dns = v6;
    }
  }
  return result;
}

void sub_100046F54(const __CFArray *a1, __CFDictionary *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  CFIndex v9 = Count;
  if (Count < 1)
  {
LABEL_5:
    CFNumberRef v8 = CFNumberCreate(0, kCFNumberCFIndexType, &v9);
    CFDictionarySetValue(a2, @"__ORDER__", v8);
    CFRelease(v8);
    CFArrayAppendValue(a1, a2);
  }
  else
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      if (CFEqual(a2, ValueAtIndex)) {
        break;
      }
      if (v5 == ++v6) {
        goto LABEL_5;
      }
    }
  }
}

void sub_100047030(NSObject *a1)
{
  out_audit_token_t token = 0;
  qword_10007DE48 = (uint64_t)a1;
  qword_10007DE50 = (uint64_t)SCDynamicStoreCreate(0, @"set-hostname", (SCDynamicStoreCallBack)sub_10004745C, 0);
  if (!qword_10007DE50)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v13 = _os_log_pack_size();
    __chkstk_darwin(v13, v14, v15);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    int v17 = SCError();
    CFTypeID v18 = SCErrorString(v17);
    *(_DWORD *)uint64_t v16 = 136315138;
    *(void *)(v16 + 4) = v18;
    goto LABEL_13;
  }
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFTypeID v3 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetDHCP);
  CFArrayAppendValue(v3, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  CFStringRef ComputerName = SCDynamicStoreKeyCreateComputerName(0);
  CFArrayAppendValue(Mutable, ComputerName);
  CFRelease(ComputerName);
  CFStringRef HostNames = SCDynamicStoreKeyCreateHostNames(0);
  CFArrayAppendValue(Mutable, HostNames);
  CFRelease(HostNames);
  LODWORD(HostNames) = SCDynamicStoreSetNotificationKeys((SCDynamicStoreRef)qword_10007DE50, Mutable, v3);
  CFRelease(Mutable);
  CFRelease(v3);
  if (!HostNames)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (!SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)qword_10007DE50, a1))
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  uint32_t v7 = notify_register_dispatch("com.apple.system.config.network_change", &out_token, a1, &stru_100076EC8);
  if (!v7) {
    return;
  }
  uint32_t v8 = v7;
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v9 = _os_log_pack_size();
    __chkstk_darwin(v9, v10, v11);
    __error();
    CFIndex v12 = (_DWORD *)_os_log_pack_fill();
    *CFIndex v12 = 67109120;
    v12[1] = v8;
LABEL_13:
    __SC_log_send();
  }
LABEL_14:
  if (qword_10007DE50)
  {
    SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)qword_10007DE50, 0);
    CFRelease((CFTypeRef)qword_10007DE50);
    qword_10007DE50 = 0;
  }
}

void sub_10004745C(const __SCDynamicStore *a1)
{
  if (qword_10007DE58) {
    sub_100047A18();
  }
  CFStringRef ComputerName = SCDynamicStoreKeyCreateComputerName(0);
  CFDictionaryRef v3 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, ComputerName);
  CFRelease(ComputerName);
  if (v3)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v3) == TypeID)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v3, kSCPropSystemHostName);
      CFTypeID v6 = CFStringGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v6)
        {
          CFRetain(Value);
          CFRelease(v3);
          sub_10000620C();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v7 = _os_log_pack_size();
            __chkstk_darwin(v7, v8, v9);
            __error();
            uint64_t v10 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v10 = 138412290;
            *(void *)(v10 + 4) = Value;
            __SC_log_send();
          }
          uint64_t v11 = 0;
LABEL_35:
          sub_100047B4C((uint64_t)Value);
          goto LABEL_36;
        }
      }
    }
    CFRelease(v3);
  }
  CFStringRef NetworkGlobalEntity = SCDynamicStoreKeyCreateNetworkGlobalEntity(0, kSCDynamicStoreDomainState, kSCEntNetIPv4);
  CFPropertyListRef v13 = SCDynamicStoreCopyValue(a1, NetworkGlobalEntity);
  CFRelease(NetworkGlobalEntity);
  if (!v13)
  {
    uint64_t v11 = 0;
    goto LABEL_21;
  }
  CFTypeID v14 = CFDictionaryGetTypeID();
  if (CFGetTypeID(v13) != v14) {
    goto LABEL_18;
  }
  uint64_t v11 = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)v13, kSCDynamicStorePropNetPrimaryService);
  CFTypeID v15 = CFStringGetTypeID();
  if (!v11)
  {
LABEL_19:
    CFRelease(v13);
LABEL_21:
    CFStringRef ValueAtIndex = 0;
    goto LABEL_22;
  }
  if (CFGetTypeID(v11) != v15)
  {
LABEL_18:
    uint64_t v11 = 0;
    goto LABEL_19;
  }
  CFRetain(v11);
  CFRelease(v13);
  CFStringRef v16 = (const __CFString *)sub_10003169C(v11);
  if (v16)
  {
    CFStringRef Value = v16;
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v17 = _os_log_pack_size();
      __chkstk_darwin(v17, v18, v19);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 138412290;
      *(void *)(v20 + 4) = Value;
      __SC_log_send();
    }
    goto LABEL_35;
  }
  CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainState, v11, kSCEntNetIPv4);
  CFPropertyListRef v13 = SCDynamicStoreCopyValue(a1, NetworkServiceEntity);
  CFRelease(NetworkServiceEntity);
  if (!v13) {
    goto LABEL_21;
  }
  CFTypeID v29 = CFDictionaryGetTypeID();
  if (CFGetTypeID(v13) != v29) {
    goto LABEL_19;
  }
  BOOL v30 = CFDictionaryGetValue((CFDictionaryRef)v13, kSCPropNetIPv4Addresses);
  CFTypeID v31 = CFArrayGetTypeID();
  if (!v30) {
    goto LABEL_19;
  }
  if (CFGetTypeID(v30) != v31) {
    goto LABEL_19;
  }
  if (CFArrayGetCount((CFArrayRef)v30) < 1) {
    goto LABEL_19;
  }
  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v30, 0);
  CFTypeID v32 = CFStringGetTypeID();
  if (!ValueAtIndex || CFGetTypeID(ValueAtIndex) != v32) {
    goto LABEL_19;
  }
  CFRetain(ValueAtIndex);
  CFRelease(v13);
  if (!sub_1000317E4(v11) && sub_100047FD8())
  {
    CFStringRef Value = 0;
    goto LABEL_29;
  }
LABEL_22:
  CFStringRef Value = SCDynamicStoreCopyLocalHostName(a1);
  if (!Value)
  {
    sub_100047B4C(@"localhost");
    if (!ValueAtIndex) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v22 = _os_log_pack_size();
    __chkstk_darwin(v22, v23, v24);
    __error();
    uint64_t v25 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v25 = 138412290;
    *(void *)(v25 + 4) = Value;
    __SC_log_send();
  }
  MutableCFDictionaryRef Copy = CFStringCreateMutableCopy(0, 0, Value);
  if (!MutableCopy) {
    sub_10006538C();
  }
  CFArrayRef v27 = MutableCopy;
  CFStringAppend(MutableCopy, @".local");
  sub_100047B4C((uint64_t)v27);
  CFRelease(v27);
  if (ValueAtIndex) {
LABEL_29:
  }
    CFRelease(ValueAtIndex);
LABEL_30:
  if (!Value)
  {
    if (!v11) {
      return;
    }
    goto LABEL_32;
  }
LABEL_36:
  CFRelease(Value);
  if (v11) {
LABEL_32:
  }
    CFRelease(v11);
}

void sub_1000479B8(id a1, int a2)
{
  unint64_t v2 = (const __SCDynamicStore *)qword_10007DE50;

  sub_10004745C(v2);
}

void sub_100047A18()
{
  if (qword_10007DE58)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v0 = _os_log_pack_size();
      __chkstk_darwin(v0, v1, v2);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    SCNetworkReachabilitySetCallback((SCNetworkReachabilityRef)qword_10007DE58, 0, 0);
    SCNetworkReachabilitySetDispatchQueue((SCNetworkReachabilityRef)qword_10007DE58, 0);
    CFRelease((CFTypeRef)qword_10007DE58);
    qword_10007DE58 = 0;
  }
}

uint64_t sub_100047B4C(uint64_t result)
{
  if (result)
  {
    if (gethostname(v29, 0x100uLL) == -1)
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v1 = _os_log_pack_size();
        __chkstk_darwin(v1, v2, v3);
        __error();
        uint64_t v4 = _os_log_pack_fill();
        CFIndex v5 = __error();
        CFTypeID v6 = strerror(*v5);
        *(_DWORD *)uint64_t v4 = 136315138;
        *(void *)(v4 + 4) = v6;
        __SC_log_send();
      }
      v29[0] = 0;
    }
    if (!_SC_cfstring_to_cstring())
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v7 = _os_log_pack_size();
        __chkstk_darwin(v7, v8, v9);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      v28[0] = 0;
    }
    v29[255] = 0;
    v28[255] = 0;
    CFTypeID result = strcmp(v29, v28);
    if (result)
    {
      int v10 = strlen(v28);
      int v11 = sethostname(v28, v10);
      sub_10000620C();
      if (v11)
      {
        _SC_syslog_os_log_mapping();
        CFTypeID result = __SC_log_enabled();
        if (!result) {
          return result;
        }
        uint64_t v12 = _os_log_pack_size();
        __chkstk_darwin(v12, v13, v14);
        __error();
        uint64_t v15 = _os_log_pack_fill();
        size_t v16 = strlen(v28);
        uint64_t v17 = __error();
        uint64_t v18 = strerror(*v17);
        *(_DWORD *)uint64_t v15 = 136315650;
        *(void *)(v15 + 4) = v28;
        *(_WORD *)(v15 + 12) = 2048;
        *(void *)(v15 + 14) = v16;
        *(_WORD *)(v15 + 22) = 2080;
        *(void *)(v15 + 24) = v18;
        return __SC_log_send();
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v19 = _os_log_pack_size();
        __chkstk_darwin(v19, v20, v21);
        __error();
        uint64_t v22 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v22 = 136315138;
        *(void *)(v22 + 4) = v28;
        __SC_log_send();
      }
      CFTypeID result = notify_post("com.apple.system.hostname");
      if (result)
      {
        int v23 = result;
        sub_10000620C();
        _SC_syslog_os_log_mapping();
        CFTypeID result = __SC_log_enabled();
        if (result)
        {
          uint64_t v24 = _os_log_pack_size();
          __chkstk_darwin(v24, v25, v26);
          __error();
          CFArrayRef v27 = (_DWORD *)_os_log_pack_fill();
          *CFArrayRef v27 = 67109120;
          v27[1] = v23;
          return __SC_log_send();
        }
      }
    }
  }
  return result;
}

uint64_t sub_100047FD8()
{
  *(void *)bytes = 0;
  uint64_t v14 = 0;
  int v16 = 0;
  uint64_t v15 = 0;
  if (!_SC_cfstring_to_cstring())
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
LABEL_8:
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7, v8, v9);
    __error();
LABEL_13:
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
    return 0;
  }
  if (!_SC_string_to_sockaddr())
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    goto LABEL_8;
  }
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDataRef v1 = CFDataCreate(0, bytes, bytes[0]);
  CFDictionarySetValue(Mutable, @"ptr-address", v1);
  CFRelease(v1);
  qword_10007DE58 = SCNetworkReachabilityCreateWithOptions();
  CFRelease(Mutable);
  uint64_t v2 = qword_10007DE58;
  sub_10000620C();
  if (!v2)
  {
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      return result;
    }
    uint64_t v10 = _os_log_pack_size();
    __chkstk_darwin(v10, v11, v12);
    __error();
    goto LABEL_13;
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3, v4, v5);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  gettimeofday((timeval *)&qword_10007DE60, 0);
  SCNetworkReachabilitySetCallback((SCNetworkReachabilityRef)qword_10007DE58, (SCNetworkReachabilityCallBack)sub_10004835C, 0);
  SCNetworkReachabilitySetDispatchQueue((SCNetworkReachabilityRef)qword_10007DE58, (dispatch_queue_t)qword_10007DE48);
  return 1;
}

void sub_10004835C(uint64_t a1, char a2)
{
  v46.tv_seCC_SHA256_CTX c = 0;
  *(void *)&v46.tv_useCC_SHA256_CTX c = 0;
  gettimeofday(&v46, 0);
  if (v46.tv_usec >= dword_10007DE68) {
    int v3 = v46.tv_usec - dword_10007DE68;
  }
  else {
    int v3 = v46.tv_usec - dword_10007DE68 + 1000000;
  }
  __darwin_time_t v4 = v46.tv_sec - qword_10007DE60 + ((v46.tv_usec - dword_10007DE68) >> 31);
  if ((a2 & 2) == 0)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5, v6, v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v8 = 134218240;
      *(void *)(v8 + 4) = v4;
      *(_WORD *)(v8 + 12) = 1024;
      *(_DWORD *)(v8 + 14) = v3 / 1000;
      __SC_log_send();
    }
LABEL_31:
    CFStringRef v35 = SCDynamicStoreCopyLocalHostName((SCDynamicStoreRef)qword_10007DE50);
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    int v36 = __SC_log_enabled();
    if (v35)
    {
      if (v36)
      {
        uint64_t v37 = _os_log_pack_size();
        __chkstk_darwin(v37, v38, v39);
        __error();
        uint64_t v40 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v40 = 138412290;
        *(void *)(v40 + 4) = v35;
        __SC_log_send();
      }
      MutableCFDictionaryRef Copy = CFStringCreateMutableCopy(0, 0, v35);
      if (!MutableCopy) {
        sub_1000653B8();
      }
      uint64_t v42 = MutableCopy;
      CFStringAppend(MutableCopy, @".local");
      sub_100047B4C((uint64_t)v42);
      CFRelease(v42);
      CFRelease(v35);
    }
    else
    {
      if (v36)
      {
        uint64_t v43 = _os_log_pack_size();
        __chkstk_darwin(v43, v44, v45);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
      sub_100047B4C(@"localhost");
    }
LABEL_39:
    sub_100047A18();
    return;
  }
  CFArrayRef v9 = (const __CFArray *)SCNetworkReachabilityCopyResolvedAddress();
  if (v9)
  {
    CFArrayRef v10 = v9;
    CFIndex Count = CFArrayGetCount(v9);
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    int v12 = __SC_log_enabled();
    if (Count < 1)
    {
      if (v12)
      {
        uint64_t v25 = _os_log_pack_size();
        __chkstk_darwin(v25, v26, v27);
        __error();
        uint64_t v28 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v28 = 134218240;
        *(void *)(v28 + 4) = v4;
        *(_WORD *)(v28 + 12) = 1024;
        *(_DWORD *)(v28 + 14) = v3 / 1000;
        __SC_log_send();
      }
      CFRelease(v10);
      goto LABEL_31;
    }
    if (v12)
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13, v14, v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 134218240;
      *(void *)(v16 + 4) = v4;
      *(_WORD *)(v16 + 12) = 1024;
      *(_DWORD *)(v16 + 14) = v3 / 1000;
      __SC_log_send();
    }
    uint64_t v17 = _SCPreferencesCopyComputerName();
    if (v17)
    {
      CFStringRef v18 = (const __CFString *)v17;
      if (_SC_CFStringIsValidDNSName())
      {
        if ((unint64_t)CFStringFind(v18, @".", 0).length)
        {
          CFIndex v19 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, v19);
            if (CFStringCompare(ValueAtIndex, v18, 1uLL) == kCFCompareEqualTo) {
              break;
            }
            if (Count == ++v19) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          CFStringRef ValueAtIndex = sub_100048A98(v10, Count, v18);
        }
        CFRelease(v18);
        if (ValueAtIndex)
        {
LABEL_28:
          sub_10000620C();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v31 = _os_log_pack_size();
            __chkstk_darwin(v31, v32, v33);
            __error();
            uint64_t v34 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v34 = 138412290;
            *(void *)(v34 + 4) = ValueAtIndex;
            __SC_log_send();
          }
          sub_100047B4C((uint64_t)ValueAtIndex);
          CFRelease(v10);
          if (ValueAtIndex) {
            goto LABEL_39;
          }
          goto LABEL_31;
        }
      }
      else
      {
LABEL_17:
        CFRelease(v18);
      }
    }
    CFStringRef v29 = SCDynamicStoreCopyLocalHostName((SCDynamicStoreRef)qword_10007DE50);
    if (!v29 || (CFStringRef v30 = v29, ValueAtIndex = sub_100048A98(v10, Count, v29), CFRelease(v30), !ValueAtIndex)) {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v10, 0);
    }
    goto LABEL_28;
  }
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v21 = _os_log_pack_size();
    __chkstk_darwin(v21, v22, v23);
    __error();
    uint64_t v24 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v24 = 134218240;
    *(void *)(v24 + 4) = v4;
    *(_WORD *)(v24 + 12) = 1024;
    *(_DWORD *)(v24 + 14) = v3 / 1000;
    __SC_log_send();
  }
}

CFStringRef sub_100048A98(CFArrayRef theArray, uint64_t a2, const __CFString *a3)
{
  if (a2 < 1) {
    return 0;
  }
  CFIndex v6 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v6);
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, ValueAtIndex, @".");
    if (ArrayBySeparatingStrings)
    {
      CFArrayRef v9 = ArrayBySeparatingStrings;
      CFStringRef v10 = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 0);
      CFComparisonResult v11 = CFStringCompare(v10, a3, 1uLL);
      CFRelease(v9);
      if (v11 == kCFCompareEqualTo) {
        break;
      }
    }
    if (a2 == ++v6) {
      return 0;
    }
  }
  return ValueAtIndex;
}

uint64_t sub_100048B80(CFStringRef theString, void *a2)
{
  if (qword_10007DE78 != -1) {
    dispatch_once(&qword_10007DE78, &stru_100076F08);
  }
  *a2 = 0;
  if (!CFStringHasPrefix(theString, (CFStringRef)qword_10007DE70)
    || !CFStringHasSuffix(theString, kSCEntNetNAT64PrefixRequest))
  {
    return 0;
  }
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, theString, @"/");
  if (CFArrayGetCount(ArrayBySeparatingStrings) == 5)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3);
    *a2 = ValueAtIndex;
    CFRetain(ValueAtIndex);
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v6 = 0;
  }
  CFRelease(ArrayBySeparatingStrings);
  return v6;
}

void sub_100048C88(id a1)
{
  qword_10007DE70 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
}

void sub_100048CEC(__CFArray *a1)
{
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, kSCCompAnyRegex, kSCEntNetNAT64PrefixRequest);
  CFArrayAppendValue(a1, NetworkInterfaceEntity);

  CFRelease(NetworkInterfaceEntity);
}

void sub_100048D90(CFTypeRef cf, CFTypeRef a2, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a2) {
    CFRetain(a2);
  }
  if (a3) {
    CFRetain(a3);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_100048E9C;
  v6[3] = &unk_100076F28;
  v6[4] = cf;
  v6[5] = a2;
  v6[6] = a3;
  if (qword_10007DE88 != -1) {
    dispatch_once(&qword_10007DE88, &stru_100076FA8);
  }
  dispatch_async((dispatch_queue_t)qword_10007DE90, v6);
}

void sub_100048E9C(void *a1)
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    uint64_t v6 = a1[4];
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    *(_DWORD *)uint64_t v5 = 138412802;
    *(void *)(v5 + 4) = v6;
    *(_WORD *)(v5 + 12) = 2112;
    *(void *)(v5 + 14) = v7;
    *(_WORD *)(v5 + 22) = 2112;
    *(void *)(v5 + 24) = v8;
    __SC_log_send();
  }
  CFSetRef v9 = (const __CFSet *)a1[4];
  CFSetRef v10 = (const __CFSet *)a1[5];
  CFSetRef v11 = (const __CFSet *)a1[6];
  if (v11) {
    CFSetApplyFunction(v11, (CFSetApplierFunction)sub_100049050, 0);
  }
  if (v10) {
    CFSetApplyFunction(v10, (CFSetApplierFunction)sub_10004927C, 0);
  }
  if (v9) {
    CFSetApplyFunction(v9, (CFSetApplierFunction)sub_1000494AC, 0);
  }
  int v12 = (const void *)a1[4];
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = (const void *)a1[5];
  if (v13) {
    CFRelease(v13);
  }
  uint64_t v14 = (const void *)a1[6];
  if (v14) {
    CFRelease(v14);
  }
}

void sub_100049050(CFTypeRef cf1)
{
  uint64_t v2 = &qword_10007DE80;
  while (1)
  {
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      break;
    }
    if (CFEqual(cf1, (CFTypeRef)v2[4]))
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v3 = _os_log_pack_size();
        __chkstk_darwin(v3, v4, v5);
        __error();
        uint64_t v6 = _os_log_pack_fill();
        uint64_t v7 = v2[3];
        *(_DWORD *)uint64_t v6 = 136315394;
        *(void *)(v6 + 4) = v7;
        *(_WORD *)(v6 + 12) = 2080;
        *(void *)(v6 + 14) = "_nat64_process_cancel_request";
        __SC_log_send();
      }
      sub_100049568(v2[3], 0, 0);
      sub_100049AEC((uint64_t)v2);
      sub_100049C44((uint64_t)v2);
      return;
    }
  }
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8, v9, v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 138412546;
    *(void *)(v11 + 4) = cf1;
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v11 + 14) = "_nat64_process_cancel_request";
    __SC_log_send();
  }
}

uint64_t sub_10004927C(CFTypeRef cf1)
{
  uint64_t v2 = &qword_10007DE80;
  while (1)
  {
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      break;
    }
    if (CFEqual(cf1, (CFTypeRef)v2[4]))
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v3 = _os_log_pack_size();
        __chkstk_darwin(v3, v4, v5);
        __error();
        uint64_t v6 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v6 = 138412546;
        *(void *)(v6 + 4) = cf1;
        *(_WORD *)(v6 + 12) = 2080;
        *(void *)(v6 + 14) = "_nat64_process_prefix_update";
        __SC_log_send();
      }
      sub_100049AEC((uint64_t)v2);
      sub_100049C44((uint64_t)v2);
      uint64_t result = (uint64_t)sub_10004A0A8(cf1);
      if (result) {
        return sub_10004A3F4(result);
      }
      return result;
    }
  }
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8, v9, v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 138412546;
    *(void *)(v11 + 4) = cf1;
    *(_WORD *)(v11 + 12) = 2080;
    *(void *)(v11 + 14) = "_nat64_process_prefix_update";
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_1000494AC(CFTypeRef cf1)
{
  uint64_t v2 = &qword_10007DE80;
  while (1)
  {
    uint64_t v2 = (uint64_t *)*v2;
    if (!v2) {
      break;
    }
    uint64_t result = CFEqual(cf1, (CFTypeRef)v2[4]);
    if (result) {
      return result;
    }
  }
  uint64_t result = (uint64_t)sub_10004A0A8(cf1);
  if (result)
  {
    return sub_10004A3F4(result);
  }
  return result;
}

_DWORD *sub_100049568(uint64_t a1, int a2, uint64_t a3)
{
  memset(v41, 0, sizeof(v41));
  memset(v40, 0, sizeof(v40));
  __strlcpy_chk();
  int v36 = a2;
  if (a2)
  {
    if (a2 >= 1)
    {
      unint64_t v5 = 0;
      uint64_t v6 = v41;
      do
      {
        __int16 v39 = 0;
        memset(v38, 0, sizeof(v38));
        nw_nat64_write_prefix_to_string();
        sub_10000620C();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v7 = _os_log_pack_size();
          __chkstk_darwin(v7, v8, v9);
          __error();
          uint64_t v10 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v10 = 136315650;
          *(void *)(v10 + 4) = a1;
          *(_WORD *)(v10 + 12) = 1024;
          *(_DWORD *)(v10 + 14) = v5;
          *(_WORD *)(v10 + 18) = 2080;
          *(void *)(v10 + 20) = v38;
          __SC_log_send();
        }
        if (v5 <= 3)
        {
          *uint64_t v6 = *(_DWORD *)a3;
          *((void *)v6 - 2) = *(void *)(a3 + 4);
          *(v6 - 2) = *(_DWORD *)(a3 + 12);
        }
        ++v5;
        a3 += 16;
        v6 += 5;
      }
      while (v36 != v5);
    }
  }
  else
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v11 = _os_log_pack_size();
      __chkstk_darwin(v11, v12, v13);
      __error();
      uint64_t v14 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v14 = 136315138;
      *(void *)(v14 + 4) = a1;
      __SC_log_send();
    }
  }
  int v15 = socket(2, 2, 0);
  if (v15 == -1)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = (_DWORD *)__SC_log_enabled();
    if (!result) {
      return result;
    }
    uint64_t v24 = _os_log_pack_size();
    __chkstk_darwin(v24, v25, v26);
    __error();
    uint64_t v27 = _os_log_pack_fill();
    uint64_t v28 = __error();
    CFStringRef v29 = strerror(*v28);
    *(_DWORD *)uint64_t v27 = 136315138;
    *(void *)(v27 + 4) = v29;
    return (_DWORD *)__SC_log_send();
  }
  int v16 = v15;
  int v17 = ioctl(v15, 0xC06069C2uLL, v40);
  close(v16);
  if (v17 != -1)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = (_DWORD *)__SC_log_enabled();
    if (!result) {
      return result;
    }
    uint64_t v19 = _os_log_pack_size();
    __chkstk_darwin(v19, v20, v21);
    __error();
    uint64_t v22 = _os_log_pack_fill();
    uint64_t v23 = "es";
    if (v36 == 1) {
      uint64_t v23 = "";
    }
    *(_DWORD *)uint64_t v22 = 136315394;
    *(void *)(v22 + 4) = a1;
    *(_WORD *)(v22 + 12) = 2080;
    *(void *)(v22 + 14) = v23;
    return (_DWORD *)__SC_log_send();
  }
  uint64_t result = __error();
  if (v36 || *result != 2)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = (_DWORD *)__SC_log_enabled();
    if (result)
    {
      uint64_t v30 = _os_log_pack_size();
      __chkstk_darwin(v30, v31, v32);
      __error();
      uint64_t v33 = _os_log_pack_fill();
      uint64_t v34 = __error();
      CFStringRef v35 = strerror(*v34);
      *(_DWORD *)uint64_t v33 = 136315394;
      *(void *)(v33 + 4) = a1;
      *(_WORD *)(v33 + 12) = 2080;
      *(void *)(v33 + 14) = v35;
      return (_DWORD *)__SC_log_send();
    }
  }
  return result;
}

void sub_100049AEC(uint64_t a1)
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v5 + 4) = v6;
    *(_WORD *)(v5 + 12) = 2080;
    *(void *)(v5 + 14) = "NAT64PrefixRequestInvalidate";
    __SC_log_send();
  }
  sub_100049F64(a1);
  __int16 v7 = *(_WORD *)(a1 + 48);
  if (v7)
  {
    *(_WORD *)(a1 + 48) = v7 & 0xFFFE;
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1) {
      *(void *)(v8 + 8) = *(void *)(a1 + 8);
    }
    **(void **)(a1 + 8) = v8;
  }
}

void sub_100049C44(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 44);
  if (v2)
  {
    *(_DWORD *)(a1 + 44) = v2 - 1;
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3, v4, v5);
      __error();
      uint64_t v6 = _os_log_pack_fill();
      uint64_t v7 = *(void *)(a1 + 24);
      int v8 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)uint64_t v6 = 136315906;
      *(void *)(v6 + 4) = v7;
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v6 + 14) = "NAT64PrefixRequestRelease";
      *(_WORD *)(v6 + 22) = 2048;
      *(void *)(v6 + 24) = a1;
      *(_WORD *)(v6 + 32) = 1024;
      *(_DWORD *)(v6 + 34) = v8;
      __SC_log_send();
    }
    if (!*(_DWORD *)(a1 + 44))
    {
      sub_100049AEC(a1);
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9, v10, v11);
        __error();
        uint64_t v12 = _os_log_pack_fill();
        uint64_t v13 = *(void *)(a1 + 24);
        *(_DWORD *)uint64_t v12 = 136315650;
        *(void *)(v12 + 4) = v13;
        *(_WORD *)(v12 + 12) = 2080;
        *(void *)(v12 + 14) = "NAT64PrefixRequestRelease";
        *(_WORD *)(v12 + 22) = 2048;
        *(void *)(v12 + 24) = a1;
        __SC_log_send();
      }
      uint64_t v14 = *(const void **)(a1 + 32);
      if (v14)
      {
        CFRelease(v14);
        *(void *)(a1 + 32) = 0;
      }
      int v15 = *(void **)(a1 + 24);
      if (v15) {
        CFAllocatorDeallocate(0, v15);
      }
      free((void *)a1);
    }
  }
  else
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v16 = _os_log_pack_size();
      __chkstk_darwin(v16, v17, v18);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v19 = 136315394;
      *(void *)(v19 + 4) = "NAT64PrefixRequestRelease";
      *(_WORD *)(v19 + 12) = 2048;
      *(void *)(v19 + 14) = a1;
      __SC_log_send();
    }
  }
}

void sub_100049F64(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2, v3, v4);
      __error();
      uint64_t v5 = _os_log_pack_fill();
      uint64_t v6 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)(v5 + 4) = v6;
      *(_WORD *)(v5 + 12) = 2080;
      *(void *)(v5 + 14) = "NAT64PrefixRequestStopResolver";
      __SC_log_send();
    }
    nw_nat64_prefixes_resolver_cancel();
    nw_release(*(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
}

void *sub_10004A0A8(const void *a1)
{
  uint64_t v2 = _SC_cfstring_to_cstring();
  if (!v2)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13, v14, v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 138412290;
      *(void *)(v16 + 4) = a1;
      __SC_log_send();
    }
    return 0;
  }
  uint64_t v3 = (void *)v2;
  int v4 = sub_10002B79C(v2);
  if (!v4)
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v17 = _os_log_pack_size();
      __chkstk_darwin(v17, v18, v19);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 136315138;
      *(void *)(v20 + 4) = v3;
      __SC_log_send();
    }
    CFAllocatorDeallocate(0, v3);
    return 0;
  }
  int v5 = v4;
  uint64_t v6 = malloc_type_malloc(0x38uLL, 0x10F0040C1D5253AuLL);
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v7 = _os_log_pack_size();
    __chkstk_darwin(v7, v8, v9);
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 138412802;
    *(void *)(v10 + 4) = a1;
    *(_WORD *)(v10 + 12) = 2080;
    *(void *)(v10 + 14) = "NAT64PrefixRequestCreate";
    *(_WORD *)(v10 + 22) = 2048;
    *(void *)(v10 + 24) = v6;
    __SC_log_send();
  }
  v6[6] = 0;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  CFTypeRef v11 = CFRetain(a1);
  v6[3] = v3;
  v6[4] = v11;
  *((_DWORD *)v6 + 10) = v5;
  uint64_t v12 = qword_10007DE80;
  *uint64_t v6 = qword_10007DE80;
  if (v12) {
    *(void *)(v12 + 8) = v6;
  }
  qword_10007DE80 = (uint64_t)v6;
  v6[1] = &qword_10007DE80;
  *((_WORD *)v6 + 24) |= 1u;
  sub_10004A6EC((uint64_t)v6);
  return v6;
}

uint64_t sub_10004A3F4(uint64_t a1)
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    uint64_t v6 = *(void *)(a1 + 24);
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v5 + 4) = v6;
    *(_WORD *)(v5 + 12) = 2080;
    *(void *)(v5 + 14) = "NAT64PrefixRequestStart";
    __SC_log_send();
  }
  if (*(void *)(a1 + 16))
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v8 = _os_log_pack_size();
      __chkstk_darwin(v8, v9, v10);
      __error();
      uint64_t v11 = _os_log_pack_fill();
      uint64_t v12 = *(void *)(a1 + 24);
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)(v11 + 4) = v12;
      *(_WORD *)(v11 + 12) = 2080;
      *(void *)(v11 + 14) = "NAT64PrefixRequestStart";
      return __SC_log_send();
    }
  }
  else
  {
    uint64_t result = sub_10004A83C(*(_DWORD *)(a1 + 40));
    if (result)
    {
      uint64_t v13 = result;
      sub_10004A6EC(a1);
      CFAbsoluteTimeGetCurrent();
      nw_nat64_prefixes_resolver_set_cancel_handler();
      if (qword_10007DE88 != -1) {
        dispatch_once(&qword_10007DE88, &stru_100076FA8);
      }
      nw_nat64_prefixes_resolver_set_update_handler();
      uint64_t result = nw_nat64_prefixes_resolver_start();
      *(void *)(a1 + 16) = v13;
    }
  }
  return result;
}

uint64_t sub_10004A6EC(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 44);
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  uint64_t result = __SC_log_enabled();
  if (result)
  {
    uint64_t v3 = _os_log_pack_size();
    __chkstk_darwin(v3, v4, v5);
    __error();
    uint64_t v6 = _os_log_pack_fill();
    uint64_t v7 = *(void *)(a1 + 24);
    int v8 = *(_DWORD *)(a1 + 44);
    *(_DWORD *)uint64_t v6 = 136315906;
    *(void *)(v6 + 4) = v7;
    *(_WORD *)(v6 + 12) = 2080;
    *(void *)(v6 + 14) = "NAT64PrefixRequestRetain";
    *(_WORD *)(v6 + 22) = 2048;
    *(void *)(v6 + 24) = a1;
    *(_WORD *)(v6 + 32) = 1024;
    *(_DWORD *)(v6 + 34) = v8;
    return __SC_log_send();
  }
  return result;
}

uint64_t sub_10004A83C(int a1)
{
  uint64_t v2 = nw_parameters_create();
  uint64_t v3 = nw_interface_create_with_index();
  if (v3)
  {
    uint64_t v4 = v3;
    nw_parameters_require_interface(v2, v3);
    nw_parameters_set_required_address_family();
    nw_release(v4);
    uint64_t v5 = nw_nat64_prefixes_resolver_create();
    nw_release(v2);
    return v5;
  }
  else
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v10 = 67109120;
      v10[1] = a1;
      __SC_log_send();
    }
    return 0;
  }
}

void sub_10004A9BC(uint64_t a1)
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    _os_log_pack_size();
    __error();
    uint64_t v2 = _os_log_pack_fill();
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24);
    *(_DWORD *)uint64_t v2 = 136315138;
    *(void *)(v2 + 4) = v3;
    __SC_log_send();
  }
  sub_100049C44(*(void *)(a1 + 32));
}

void sub_10004AAC8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(_WORD *)(v4 + 48))
  {
    if (a3)
    {
      sub_100049568(*(void *)(v4 + 24), a2, a3);
    }
    else
    {
      sub_10000620C();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v13 = _os_log_pack_size();
        __chkstk_darwin(v13, v14, v15);
        __error();
        uint64_t v16 = _os_log_pack_fill();
        uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 24);
        *(_DWORD *)uint64_t v16 = 136315138;
        *(void *)(v16 + 4) = v17;
        __SC_log_send();
      }
    }
    sub_10004AD04(*(CFStringRef *)(*(void *)(a1 + 32) + 32), a2, a3, *(CFAbsoluteTime *)(a1 + 40));
    if (a3)
    {
      sub_100049AEC(*(void *)(a1 + 32));
      sub_100049C44(*(void *)(a1 + 32));
    }
  }
  else
  {
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5, v6, v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(v9 + 24);
      *(_DWORD *)uint64_t v8 = 136315394;
      *(void *)(v8 + 4) = v10;
      *(_WORD *)(v8 + 12) = 2048;
      *(void *)(v8 + 14) = v9;
      __SC_log_send();
    }
  }
}

void sub_10004AD04(CFStringRef ifname, unsigned int a2, uint64_t a3, CFAbsoluteTime a4)
{
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainState, ifname, kSCEntNetNAT64);
  if ((a2 & 0x80000000) != 0)
  {
    SCDynamicStoreRemoveValue(0, NetworkInterfaceEntity);
  }
  else
  {
    CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (a2)
    {
      uint64_t v10 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      uint64_t v11 = a2;
      do
      {
        __int16 v23 = 0;
        long long v21 = 0u;
        long long v22 = 0u;
        *(_OWORD *)cStr = 0u;
        nw_nat64_write_prefix_to_string();
        CFStringRef v12 = CFStringCreateWithCString(0, cStr, 0x600u);
        CFArrayAppendValue(v10, v12);
        CFRelease(v12);
        a3 += 16;
        --v11;
      }
      while (v11);
      CFDictionarySetValue(Mutable, kSCPropNetNAT64PrefixList, v10);
      CFRelease(v10);
    }
    CFDateRef v13 = CFDateCreate(0, a4);
    CFDictionarySetValue(Mutable, kSCPropNetNAT64PLATDiscoveryStartTime, v13);
    CFRelease(v13);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v15 = CFDateCreate(0, Current);
    CFDictionarySetValue(Mutable, kSCPropNetNAT64PLATDiscoveryCompletionTime, v15);
    CFRelease(v15);
    SCDynamicStoreSetValue(0, NetworkInterfaceEntity, Mutable);
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v16 = _os_log_pack_size();
      __chkstk_darwin(v16, v17, v18);
      __error();
      uint64_t v19 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v19 = 138412546;
      *(void *)(v19 + 4) = ifname;
      *(_WORD *)(v19 + 12) = 2112;
      *(void *)(v19 + 14) = Mutable;
      __SC_log_send();
    }
    CFRelease(Mutable);
  }
  CFRelease(NetworkInterfaceEntity);
}

void sub_10004AFAC(id a1)
{
  qword_10007DE90 = (uint64_t)dispatch_queue_create("nat64 prefix request queue", 0);
}

void sub_10004B0E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004B0FC(id a1)
{
  qword_10007DE98 = objc_alloc_init(AgentController);

  _objc_release_x1();
}

void sub_10004D708(int a1)
{
  int v7 = a1;
  if (sysctlbyname("net.inet.mptcp.allow_aggregate", 0, 0, &v7, 4uLL) == -1)
  {
    if (*__error() == 2) {
      return;
    }
    CFDataRef v1 = sub_10000620C();
    os_log_type_t v4 = _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v10 = 0u;
      os_log_type_enabled(v1, v4);
      CFDataRef v1 = v1;
      uint64_t v5 = __error();
      uint64_t v6 = strerror(*v5);
      int v8 = 136315138;
      uint64_t v9 = v6;
      uint64_t v3 = (long long *)_os_log_send_and_compose_impl();

LABEL_7:
      __SC_log_send2();
      if (v3 != &v10) {
        free(v3);
      }
    }
  }
  else
  {
    CFDataRef v1 = sub_10000620C();
    os_log_type_t v2 = _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v17 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v10 = 0u;
      os_log_type_enabled(v1, v2);
      int v8 = 67109120;
      LODWORD(v9) = v7;
      uint64_t v3 = (long long *)_os_log_send_and_compose_impl();
      goto LABEL_7;
    }
  }
}

void process_AgentMonitor()
{
  if (objc_opt_class())
  {
    uint64_t v0 = sub_10000620C();
    os_log_type_t v1 = _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      os_log_type_enabled(v0, v1);
      os_log_type_t v2 = (long long *)_os_log_send_and_compose_impl();
      __SC_log_send2();
      if (v2 != &v9) {
        free(v2);
      }
    }

    os_log_type_t v4 = +[AgentController sharedController];
    uint64_t v5 = v4;
    if (v4)
    {
      uint64_t v6 = [v4 controllerQueue];
      dispatch_sync(v6, &stru_100076FE8);
    }
    else
    {
      uint64_t v6 = sub_10000620C();
      os_log_type_t v7 = _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        long long v9 = 0u;
        long long v10 = 0u;
        os_log_type_enabled(v6, v7);
        int v8 = (long long *)_os_log_send_and_compose_impl();
        __SC_log_send2();
        if (v8 != &v9) {
          free(v8);
        }
      }
    }
  }
}

void sub_100054350(id a1)
{
  os_log_type_t v1 = +[AgentController sharedController];
  [v1 processDNSChanges];

  id v2 = +[AgentController sharedController];
  [v2 processProxyChanges];
}

void process_AgentMonitor_DNS()
{
  if (objc_opt_class())
  {
    uint64_t v0 = sub_10000620C();
    os_log_type_t v1 = _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      os_log_type_enabled(v0, v1);
      id v2 = (long long *)_os_log_send_and_compose_impl();
      __SC_log_send2();
      if (v2 != &v9) {
        free(v2);
      }
    }

    os_log_type_t v4 = +[AgentController sharedController];
    uint64_t v5 = v4;
    if (v4)
    {
      uint64_t v6 = [v4 controllerQueue];
      dispatch_sync(v6, &stru_100077008);
    }
    else
    {
      uint64_t v6 = sub_10000620C();
      os_log_type_t v7 = _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        long long v9 = 0u;
        long long v10 = 0u;
        os_log_type_enabled(v6, v7);
        int v8 = (long long *)_os_log_send_and_compose_impl();
        __SC_log_send2();
        if (v8 != &v9) {
          free(v8);
        }
      }
    }
  }
}

void sub_100054680(id a1)
{
  id v1 = +[AgentController sharedController];
  [v1 processDNSChanges];
}

void process_AgentMonitor_Proxy()
{
  if (objc_opt_class())
  {
    uint64_t v0 = sub_10000620C();
    os_log_type_t v1 = _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      long long v13 = 0u;
      long long v14 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      os_log_type_enabled(v0, v1);
      id v2 = (long long *)_os_log_send_and_compose_impl();
      __SC_log_send2();
      if (v2 != &v9) {
        free(v2);
      }
    }

    os_log_type_t v4 = +[AgentController sharedController];
    uint64_t v5 = v4;
    if (v4)
    {
      uint64_t v6 = [v4 controllerQueue];
      dispatch_sync(v6, &stru_100077028);
    }
    else
    {
      uint64_t v6 = sub_10000620C();
      os_log_type_t v7 = _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v15 = 0u;
        long long v16 = 0u;
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        long long v9 = 0u;
        long long v10 = 0u;
        os_log_type_enabled(v6, v7);
        int v8 = (long long *)_os_log_send_and_compose_impl();
        __SC_log_send2();
        if (v8 != &v9) {
          free(v8);
        }
      }
    }
  }
}

void sub_100054990(id a1)
{
  id v1 = +[AgentController sharedController];
  [v1 processProxyChanges];
}

uint64_t copy_proxy_information_for_agent_uuid(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  long long v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  if (!objc_opt_class()) {
    goto LABEL_6;
  }
  uint64_t v5 = +[AgentController sharedController];
  uint64_t v6 = v5;
  if (v5)
  {
    os_log_type_t v7 = [v5 controllerQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100054C78;
    block[3] = &unk_100077050;
    void block[4] = &v13;
    void block[5] = a1;
    void block[6] = a2;
    dispatch_sync(v7, block);
  }
  else
  {
    os_log_type_t v7 = sub_10000620C();
    os_log_type_t v10 = _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      memset(v18, 0, sizeof(v18));
      os_log_type_enabled(v7, v10);
      __int16 v17 = 0;
      long long v11 = (_OWORD *)_os_log_send_and_compose_impl();
      __SC_log_send2();
      if (v11 != v18) {
        free(v11);
      }
    }
  }

  if (v6) {
    uint64_t v8 = v14[3];
  }
  else {
LABEL_6:
  }
    uint64_t v8 = 0;
  _Block_object_dispose(&v13, 8);
  return v8;
}

void sub_100054C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100054C78(void *a1)
{
  id v2 = +[AgentController sharedController];
  *(void *)(*(void *)(a1[4] + 8) + 24) = [v2 copyProxyAgentData:a1[5] length:a1[6]];
}

uint64_t copy_dns_information_for_agent_uuid(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  long long v14 = &v13;
  uint64_t v15 = 0x2020000000;
  uint64_t v16 = 0;
  if (!objc_opt_class()) {
    goto LABEL_6;
  }
  uint64_t v5 = +[AgentController sharedController];
  uint64_t v6 = v5;
  if (v5)
  {
    os_log_type_t v7 = [v5 controllerQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100054F7C;
    block[3] = &unk_100077050;
    void block[4] = &v13;
    void block[5] = a1;
    void block[6] = a2;
    dispatch_sync(v7, block);
  }
  else
  {
    os_log_type_t v7 = sub_10000620C();
    os_log_type_t v10 = _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      memset(v18, 0, sizeof(v18));
      os_log_type_enabled(v7, v10);
      __int16 v17 = 0;
      long long v11 = (_OWORD *)_os_log_send_and_compose_impl();
      __SC_log_send2();
      if (v11 != v18) {
        free(v11);
      }
    }
  }

  if (v6) {
    uint64_t v8 = v14[3];
  }
  else {
LABEL_6:
  }
    uint64_t v8 = 0;
  _Block_object_dispose(&v13, 8);
  return v8;
}

void sub_100054F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100054F7C(void *a1)
{
  id v2 = +[AgentController sharedController];
  *(void *)(*(void *)(a1[4] + 8) + 24) = [v2 copyDNSAgentData:a1[5] length:a1[6]];
}

CFMutableDictionaryRef sub_10005500C(_OWORD *a1)
{
  *a1 = 0u;
  a1[1] = 0u;
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *((void *)a1 + 2) = result;
  return result;
}

void sub_100055088(uint64_t a1, CFTypeRef cf, unint64_t a3)
{
  uint64_t v6 = *(const void **)a1;
  if (v6)
  {
    CFRelease(v6);
    *(void *)a1 = 0;
  }
  if (cf)
  {
    CFRetain(cf);
    *(void *)a1 = cf;
  }
  if (a3 <= 1) {
    uint64_t v7 = 1;
  }
  else {
    uint64_t v7 = a3;
  }
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 24) += *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = 0;
}

BOOL sub_100055124(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) == 0;
}

uint64_t sub_100055178(uint64_t a1, _xpc_connection_s *a2, uint64_t a3)
{
  uint64_t v6 = (void *)xpc_connection_copy_entitlement_value();
  if (!v6) {
    goto LABEL_9;
  }
  uint64_t v7 = v6;
  if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_BOOL)
  {
    BOOL value = xpc_BOOL_get_value(v7);
    xpc_release(v7);
    if (!value) {
      goto LABEL_9;
    }
    v16[0] = a2;
    CFDataRef v9 = CFDataCreate(0, (const UInt8 *)v16, 8);
    os_log_type_t v10 = (__CFData *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v9);
    CFRelease(v9);
    MutableBytePtr = CFDataGetMutableBytePtr(v10);
    uint64_t v12 = *((void *)MutableBytePtr + 2);
    if (v12)
    {
      if (v12 != a3 && *(void *)(a1 + 8) == a3)
      {
        *(int32x2_t *)(a1 + 24) = vadd_s32(*(int32x2_t *)(a1 + 24), (int32x2_t)0x1FFFFFFFFLL);
LABEL_17:
        uint64_t v14 = 1;
        goto LABEL_18;
      }
      uint64_t v14 = 0;
    }
    else
    {
      if (*(void *)(a1 + 8) != a3)
      {
        ++*(_DWORD *)(a1 + 24);
        goto LABEL_17;
      }
      uint64_t v14 = 0;
      ++*(_DWORD *)(a1 + 28);
    }
LABEL_18:
    *((void *)MutableBytePtr + 2) = a3;
    return v14;
  }
  xpc_release(v7);
LABEL_9:
  pid_t pid = xpc_connection_get_pid(a2);
  if (qword_10007DEB8 != -1) {
    dispatch_once(&qword_10007DEB8, &stru_100077090);
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 0x40000000;
  v16[2] = sub_1000553F8;
  v16[3] = &unk_1000770F0;
  pid_t v17 = pid;
  dispatch_sync((dispatch_queue_t)qword_10007DEC8, v16);
  return 0;
}

void sub_100055374(id a1)
{
  qword_10007DEC0 = (uint64_t)CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  qword_10007DEC8 = (uint64_t)dispatch_queue_create("handle unentitled ack", 0);
}

void sub_1000553F8(uint64_t a1)
{
  id v1 = (int *)(a1 + 32);
  CFNumberRef v2 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, (const void *)(a1 + 32));
  CFArrayRef v3 = (const __CFArray *)qword_10007DEC0;
  v10.length = CFArrayGetCount((CFArrayRef)qword_10007DEC0);
  v10.location = 0;
  if (!CFArrayContainsValue(v3, v10, v2))
  {
    CFArrayAppendValue((CFMutableArrayRef)qword_10007DEC0, v2);
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4, v5, v6);
      __error();
      uint64_t v7 = (_DWORD *)_os_log_pack_fill();
      int v8 = *v1;
      *uint64_t v7 = 67109120;
      v7[1] = v8;
      __SC_log_send();
    }
    if ((byte_10007DEB0 & 1) == 0)
    {
      byte_10007DEB0 = 1;
      dispatch_time_t v9 = dispatch_time(0, 180000000000);
      dispatch_after(v9, (dispatch_queue_t)qword_10007DEC8, &stru_1000770D0);
    }
  }
  CFRelease(v2);
}

void sub_1000555AC(id a1)
{
  byte_10007DEB0 = 0;
}

char *_scprefs_observer_watch(int a1, char *__s, uint64_t a3, const void *a4)
{
  if (qword_10007DED0 != -1) {
    dispatch_once(&qword_10007DED0, &stru_100077130);
  }
  size_t v8 = strlen(__s);
  size_t v9 = v8 + 1;
  CFRange v10 = (char *)malloc_type_malloc(v8 + 41, 0x5A000366uLL);
  *(_OWORD *)CFRange v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((void *)v10 + 4) = 0;
  *(_DWORD *)CFRange v10 = a1;
  strlcpy(v10 + 40, __s, v9);
  *((void *)v10 + 4) = a3;
  *((void *)v10 + 1) = _Block_copy(a4);
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v11 = _os_log_pack_size();
    __chkstk_darwin(v11, v12, v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v14 = 136315138;
    *(void *)(v14 + 4) = v10 + 40;
    __SC_log_send();
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000559B0;
  block[3] = &unk_100077150;
  void block[4] = v10;
  dispatch_sync((dispatch_queue_t)qword_10007DED8, block);
  return v10;
}

void sub_100055804(id a1)
{
  sub_10005585C();
}

uint64_t sub_10005585C()
{
  qword_10007DED8 = (uint64_t)dispatch_queue_create("com.apple.SystemConfiguration.SCPreferencesObserver", 0);
  qword_10007DEE0 = 0;
  uint64_t result = notify_register_dispatch("com.apple.ManagedConfiguration.profileListChanged", (int *)&unk_10007DEE8, (dispatch_queue_t)qword_10007DED8, &stru_100077190);
  if (result)
  {
    int v1 = result;
    sub_10000620C();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v2 = _os_log_pack_size();
      __chkstk_darwin(v2, v3, v4);
      __error();
      uint64_t v5 = (_DWORD *)_os_log_pack_fill();
      *uint64_t v5 = 67109120;
      v5[1] = v1;
      return __SC_log_send();
    }
  }
  return result;
}

uint64_t sub_1000559B0(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 24) = qword_10007DEE0;
  qword_10007DEE0 = *(void *)(result + 32);
  return result;
}

void sub_100055A10(id a1, int a2)
{
  sub_100055A68();
}

void sub_100055A68()
{
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v0 = _os_log_pack_size();
    __chkstk_darwin(v0, v1, v2);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  for (uint64_t i = qword_10007DEE0; i; uint64_t i = *(void *)(i + 24))
  {
    if (sub_100055B94((int *)i)) {
      dispatch_async(*(dispatch_queue_t *)(i + 32), *(dispatch_block_t *)(i + 8));
    }
  }
}

BOOL sub_100055B94(int *a1)
{
  uint64_t v3 = (const char *)(a1 + 10);
  int v2 = *a1;
  *(void *)&v16.wbuf[14] = 0;
  if (v2 == 2) {
    uint64_t v4 = "/Library/Managed Preferences/mobile";
  }
  else {
    uint64_t v4 = 0;
  }
  memset(&v16, 0, 96);
  CC_SHA256_Init(&v16);
  memset(&v17, 0, sizeof(v17));
  snprintf((char *)v18, 0x400uLL, "%s/%s", v4, v3);
  if (stat((const char *)v18, &v17) || (v17.st_mode & 0xF000) != 0x8000)
  {
    CC_SHA256_Final(v18, &v16);
    CFDataRef v6 = 0;
  }
  else
  {
    CC_LONG v5 = strlen((const char *)v18);
    CC_SHA256_Update(&v16, v18, v5);
    CC_SHA256_Update(&v16, &v17.st_mtimespec, 0x10u);
    CC_SHA256_Final(v18, &v16);
    CFDataRef v6 = CFDataCreate(0, v18, 32);
  }
  CFDataRef v7 = (CFDataRef)*((void *)a1 + 2);
  if (v6 == v7)
  {
    BOOL v8 = 0;
    CFDataRef v7 = v6;
    if (v6) {
LABEL_13:
    }
      CFRelease(v7);
  }
  else
  {
    BOOL v8 = 1;
    if (v6 && v7)
    {
      int v9 = CFEqual(v6, v7);
      CFDataRef v7 = (CFDataRef)*((void *)a1 + 2);
      BOOL v8 = v9 == 0;
    }
    if (v7) {
      goto LABEL_13;
    }
  }
  *((void *)a1 + 2) = v6;
  sub_10000620C();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v10 = _os_log_pack_size();
    __chkstk_darwin(v10, v11, v12);
    __error();
    uint64_t v13 = _os_log_pack_fill();
    uint64_t v14 = "did not change";
    if (v8) {
      uint64_t v14 = "changed";
    }
    *(_DWORD *)uint64_t v13 = 136315394;
    *(void *)(v13 + 4) = v3;
    *(_WORD *)(v13 + 12) = 2080;
    *(void *)(v13 + 14) = v14;
    __SC_log_send();
  }
  return v8;
}

uint64_t sub_100055E20()
{
  return _SCControlPrefsCreateWithQueue();
}

uint64_t sub_100055E88()
{
  if (!qword_10007DEF0)
  {
    qword_10007DEF0 = _SCControlPrefsCreateWithQueue();
    if (!qword_10007DEF0) {
      return 0;
    }
  }

  return __SCControlPrefsGetBoolean();
}

uint64_t sub_100055F44()
{
  if (!qword_10007DEF0)
  {
    qword_10007DEF0 = _SCControlPrefsCreateWithQueue();
    if (!qword_10007DEF0) {
      return 0;
    }
  }

  return __SCControlPrefsGetBoolean();
}

void sub_100056000(__CFBundle *a1)
{
  if (!qword_10007DF18) {
    qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  if (!qword_10007DF18) {
    qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5, v6, v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    CFStringRef Identifier = CFBundleGetIdentifier(a1);
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v8 + 4) = Identifier;
    __SC_log_send();
  }
  qword_10007DEF8 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_10007DF00 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_10007DF08 = (uint64_t)SCDynamicStoreCreate(0, @"Link Configuraton plug-in", (SCDynamicStoreCallBack)sub_1000566B8, 0);
  if (!qword_10007DF08)
  {
    if (!qword_10007DF18) {
      qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    }
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_28;
    }
LABEL_27:
    uint64_t v19 = _os_log_pack_size();
    __chkstk_darwin(v19, v20, v21);
    __error();
    uint64_t v22 = _os_log_pack_fill();
    int v23 = SCError();
    long long v24 = SCErrorString(v23);
    *(_DWORD *)uint64_t v22 = 136315138;
    *(void *)(v22 + 4) = v24;
    __SC_log_send();
LABEL_28:
    if (qword_10007DEF8) {
      CFRelease((CFTypeRef)qword_10007DEF8);
    }
    if (qword_10007DF00) {
      CFRelease((CFTypeRef)qword_10007DF00);
    }
    if (qword_10007DF08) {
      CFRelease((CFTypeRef)qword_10007DF08);
    }
    return;
  }
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  uint64_t v11 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  qword_10007DF10 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
  CFArrayAppendValue(Mutable, (const void *)qword_10007DF10);
  CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"%@%@/%@/%@/%@/%@", &stru_100077F38, kSCDynamicStoreDomainSetup, kSCCompNetwork, @"Override", @"InterfaceType", kSCNetworkInterfaceTypeIEEE80211);
  CFArrayAppendValue(Mutable, v12);
  CFRelease(v12);
  CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetAirPort);
  CFArrayAppendValue(v11, NetworkInterfaceEntity);
  CFRelease(NetworkInterfaceEntity);
  CFStringRef v14 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetEthernet);
  CFArrayAppendValue(v11, v14);
  CFRelease(v14);
  if (_os_feature_enabled_impl())
  {
    CFStringRef v15 = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, 0);
    CFArrayAppendValue(v11, v15);
    CFRelease(v15);
  }
  int v16 = SCDynamicStoreSetNotificationKeys((SCDynamicStoreRef)qword_10007DF08, Mutable, v11);
  CFRelease(Mutable);
  CFRelease(v11);
  if (!v16)
  {
    if (!qword_10007DF18) {
      qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    }
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  stat v17 = (const __SCDynamicStore *)qword_10007DF08;
  long long v18 = qword_10007DF38;
  if (!qword_10007DF38)
  {
    long long v18 = dispatch_queue_create("com.apple.SystemConfiguration.LinkConfiguration", 0);
    qword_10007DF38 = (uint64_t)v18;
  }
  if (!SCDynamicStoreSetDispatchQueue(v17, v18))
  {
    if (!qword_10007DF18) {
      qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    }
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
}

uint64_t sub_1000566B8(const __SCDynamicStore *a1, const __CFArray *a2)
{
  CFArrayRef v2 = a2;
  uint64_t v3 = a1;
  CFDictionaryRef v4 = SCDynamicStoreCopyMultiple(a1, a2, 0);
  if (v4)
  {
    CFDictionaryRef v5 = v4;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      CFIndex v8 = 0;
      CFStringRef v9 = kSCNetworkInterfaceTypeIEEE80211;
      CFArrayRef v52 = v2;
      store = v3;
      CFIndex v50 = Count;
      CFDictionaryRef v51 = v5;
      while (1)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v2, v8);
        CFStringRef Value = (void *)CFDictionaryGetValue(v5, ValueAtIndex);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (Value && CFGetTypeID(Value) != TypeID) {
          CFStringRef Value = 0;
        }
        if (CFEqual(ValueAtIndex, (CFTypeRef)qword_10007DF10))
        {
          if (!Value) {
            goto LABEL_70;
          }
          uint64_t v13 = CFDictionaryGetValue((CFDictionaryRef)Value, kSCPropNetInterfaces);
          CFTypeID v14 = CFArrayGetTypeID();
          if (!v13 || CFGetTypeID(v13) != v14) {
            goto LABEL_70;
          }
          if (qword_10007DF20) {
            CFIndex v15 = CFArrayGetCount((CFArrayRef)qword_10007DF20);
          }
          else {
            CFIndex v15 = 0;
          }
          CFIndex v30 = CFArrayGetCount((CFArrayRef)v13);
          int v31 = _os_feature_enabled_impl();
          CFDictionaryRef v32 = 0;
          CFArrayRef Mutable = 0;
          if (v31 && v30 >= 1)
          {
            uint64_t v34 = CFArrayGetCount((CFArrayRef)v13);
            CFArrayRef Mutable = CFArrayCreateMutable(0, v34, &kCFTypeArrayCallBacks);
            if (v34 >= 1)
            {
              for (CFIndex i = 0; i != v34; ++i)
              {
                CFStringRef v36 = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, i);
                CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, v36, 0);
                CFArrayAppendValue(Mutable, NetworkInterfaceEntity);
                CFRelease(NetworkInterfaceEntity);
              }
            }
            CFDictionaryRef v32 = SCDynamicStoreCopyMultiple(store, Mutable, 0);
          }
          CFDictionaryRef theDict = v32;
          if (v30 >= 1)
          {
            CFIndex v39 = 0;
            if (Mutable) {
              BOOL v40 = v32 == 0;
            }
            else {
              BOOL v40 = 1;
            }
            int v41 = !v40;
            do
            {
              uint64_t v42 = (__CFString *)CFArrayGetValueAtIndex((CFArrayRef)v13, v39);
              if (!CFStringHasPrefix(v42, @"pktap"))
              {
                if (!v15
                  || (v55.location = 0, v55.length = v15, !CFArrayContainsValue((CFArrayRef)qword_10007DF20, v55, v42)))
                {
                  uint64_t v43 = (void *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DF00, v42);
                  sub_100056CC0(v42, v43);
                  if (v41)
                  {
                    uint64_t v44 = CFArrayGetValueAtIndex(Mutable, v39);
                    uint64_t v45 = CFDictionaryGetValue(theDict, v44);
                    CFTypeID v46 = CFDictionaryGetTypeID();
                    if (v45)
                    {
                      if (CFGetTypeID(v45) == v46) {
                        uint64_t v47 = v45;
                      }
                      else {
                        uint64_t v47 = 0;
                      }
                    }
                    else
                    {
                      uint64_t v47 = 0;
                    }
                    sub_100056F5C(v42, v47);
                  }
                }
              }
              ++v39;
            }
            while (v30 != v39);
          }
          if (qword_10007DF20) {
            CFRelease((CFTypeRef)qword_10007DF20);
          }
          qword_10007DF20 = (uint64_t)CFRetain(v13);
          CFArrayRef v2 = v52;
          uint64_t v3 = store;
          if (Mutable) {
            CFRelease(Mutable);
          }
          CFIndex v7 = v50;
          CFDictionaryRef v5 = v51;
          CFStringRef v29 = theDict;
          if (!theDict) {
            goto LABEL_70;
          }
          goto LABEL_69;
        }
        if (CFStringHasSuffix(ValueAtIndex, v9)) {
          break;
        }
        CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, ValueAtIndex, @"/");
        CFIndex v26 = CFArrayGetCount(ArrayBySeparatingStrings);
        if (v26 <= 3)
        {
          CFStringRef v29 = ArrayBySeparatingStrings;
          goto LABEL_69;
        }
        CFIndex v27 = v26;
        uint64_t v28 = (__CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 3);
        CFRetain(v28);
        if (v27 == 4)
        {
          CFRelease(ArrayBySeparatingStrings);
          if (!v28) {
            goto LABEL_70;
          }
          goto LABEL_67;
        }
        uint64_t v38 = CFArrayGetValueAtIndex(ArrayBySeparatingStrings, 4);
        CFRetain(v38);
        CFRelease(ArrayBySeparatingStrings);
        if (v28)
        {
          if (v38)
          {
            sub_100056CC0(v28, Value);
            CFRelease(v38);
            goto LABEL_68;
          }
LABEL_67:
          sub_100056F5C(v28, Value);
LABEL_68:
          CFStringRef v29 = v28;
LABEL_69:
          CFRelease(v29);
        }
LABEL_70:
        ++v8;
        CFStringRef v9 = kSCNetworkInterfaceTypeIEEE80211;
        if (v8 == v7) {
          goto LABEL_80;
        }
      }
      CFStringRef v16 = CFStringCreateWithFormat(0, 0, @"%@%@/%@/%@/%@/%@", &stru_100077F38, kSCDynamicStoreDomainSetup, kSCCompNetwork, @"Override", @"InterfaceType", v9);
      CFPropertyListRef v17 = SCDynamicStoreCopyValue(v3, v16);
      CFRelease(v16);
      CFTypeID v18 = CFDictionaryGetTypeID();
      if (!v17)
      {
        sub_100057200(0);
        sub_100057474();
        goto LABEL_70;
      }
      if (CFGetTypeID(v17) != v18) {
        goto LABEL_19;
      }
      uint64_t v19 = CFDictionaryGetValue((CFDictionaryRef)v17, @"Expiration");
      CFTypeID v20 = CFDateGetTypeID();
      if (!v19)
      {
LABEL_20:
        LODWORD(v24) = 0;
        goto LABEL_21;
      }
      if (CFGetTypeID(v19) != v20
        || (CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent(),
            CFDateRef v22 = CFDateCreate(0, Current),
            CFComparisonResult v23 = CFDateCompare(v22, (CFDateRef)v19, 0),
            CFRelease(v22),
            v23 != kCFCompareLessThan))
      {
LABEL_19:
        uint64_t v19 = 0;
        goto LABEL_20;
      }
      long long v24 = CFDictionaryGetValue((CFDictionaryRef)v17, @"Cost");
      CFTypeID v48 = CFStringGetTypeID();
      if (v24)
      {
        if (CFGetTypeID(v24) != v48) {
          goto LABEL_19;
        }
        if (CFEqual(v24, @"Expensive"))
        {
          LODWORD(v24) = 2;
        }
        else
        {
          if (!CFEqual(v24, @"Inexpensive")) {
            goto LABEL_19;
          }
          LODWORD(v24) = 1;
        }
        uint64_t v19 = CFRetain(v19);
      }
      else
      {
        uint64_t v19 = 0;
      }
LABEL_21:
      CFRelease(v17);
      sub_100057200((int)v24);
      if (v24)
      {
        if (v19)
        {
          sub_1000575B4((const __CFDate *)v19);
LABEL_31:
          CFStringRef v29 = v19;
          goto LABEL_69;
        }
      }
      else
      {
        sub_100057474();
        if (v19) {
          goto LABEL_31;
        }
      }
      goto LABEL_70;
    }
LABEL_80:
    CFRelease(v5);
  }
  uint64_t result = dword_10007D99C;
  if ((dword_10007D99C & 0x80000000) == 0)
  {
    uint64_t result = close(dword_10007D99C);
    dword_10007D99C = -1;
  }
  return result;
}

void sub_100056CC0(void *key, void *value)
{
  if (value)
  {
    CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DF00, key, value);
    uint64_t v4 = _SCNetworkInterfaceCreateWithBSDName();
    if (!v4) {
      return;
    }
    CFDictionaryRef v5 = (const __SCNetworkInterface *)v4;
    if (!CFDictionaryContainsKey((CFDictionaryRef)qword_10007DEF8, key))
    {
      int valuePtr = -1;
      CFDictionaryRef current = 0;
      int mtu_cur = -1;
      MutableCFDictionaryRef Copy = 0;
      if (SCNetworkInterfaceCopyMediaOptions(v5, &current, 0, 0, 0) && current)
      {
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, current);
        CFRelease(current);
      }
      if (SCNetworkInterfaceCopyMTU(v5, &mtu_cur, 0, 0) && mtu_cur != -1)
      {
        if (!MutableCopy) {
          MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        }
        CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, &mtu_cur);
        CFDictionaryAddValue(MutableCopy, kSCPropNetEthernetMTU, v7);
        CFRelease(v7);
      }
      int valuePtr = __SCNetworkInterfaceCreateCapabilities();
      if (valuePtr != -1)
      {
        if (!MutableCopy) {
          MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        }
        CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        CFDictionaryAddValue(MutableCopy, @"_CAPABILITIES_", v8);
        CFRelease(v8);
      }
      if (MutableCopy)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DEF8, key, MutableCopy);
        CFRelease(MutableCopy);
      }
    }
    sub_100058098(v5);
    sub_1000582BC(v5, value);
    sub_100058AC0(v5, value);
  }
  else
  {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DF00, key);
    uint64_t v9 = _SCNetworkInterfaceCreateWithBSDName();
    if (!v9) {
      return;
    }
    CFDictionaryRef v5 = (const __SCNetworkInterface *)v9;
    uint64_t v10 = CFDictionaryGetValue((CFDictionaryRef)qword_10007DEF8, key);
    if (v10)
    {
      uint64_t v11 = v10;
      sub_100058098(v5);
      sub_1000582BC(v5, v11);
      sub_100058AC0(v5, v11);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DEF8, key);
    }
  }
  CFRelease(v5);
}

uint64_t sub_100056F5C(const __CFString *a1, const void *a2)
{
  uint64_t v4 = _SCNetworkInterfaceCreateWithBSDName();
  if (v4)
  {
    CFDictionaryRef v5 = (const void *)v4;
    int v6 = SCNetworkInterfaceSupportsLowDataMode();
    CFRelease(v5);
    if (v6)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      int v10 = a2
         && CFGetTypeID(a2) == TypeID
         && (int valuePtr = 0,
             CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, kSCPropEnableLowDataMode),
             CFTypeID v9 = CFNumberGetTypeID(),
             Value)
         && CFGetTypeID(Value) == v9
         && CFNumberGetValue((CFNumberRef)Value, kCFNumberIntType, &valuePtr)
         && valuePtr != 0;
      return sub_1000590A0(a1, v10);
    }
    if (!qword_10007DF18) {
      qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
LABEL_18:
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12, v13, v14);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v15 = 138412290;
      *(void *)(v15 + 4) = a1;
      return __SC_log_send();
    }
  }
  else
  {
    if (!qword_10007DF18) {
      qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    }
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result) {
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t sub_100057200(int a1)
{
  uint64_t result = sub_100057878();
  if (result)
  {
    CFStringRef v3 = (const __CFString *)result;
    if (a1)
    {
      int v4 = a1 == 2;
      if (!qword_10007DF18) {
        qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      }
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return sub_100057A70(v3, v4);
      }
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5, v6, v7);
      __error();
      uint64_t v8 = _os_log_pack_fill();
      CFTypeID v9 = "in";
      if (a1 == 2) {
        CFTypeID v9 = "";
      }
      *(_DWORD *)uint64_t v8 = 138412546;
      *(void *)(v8 + 4) = v3;
      *(_WORD *)(v8 + 12) = 2080;
      *(void *)(v8 + 14) = v9;
    }
    else
    {
      int v4 = sub_1000594D8();
      if (!qword_10007DF18) {
        qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      }
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return sub_100057A70(v3, v4);
      }
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10, v11, v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      uint64_t v14 = "";
      if (!v4) {
        uint64_t v14 = "in";
      }
      *(_DWORD *)uint64_t v13 = 138412546;
      *(void *)(v13 + 4) = v3;
      *(_WORD *)(v13 + 12) = 2080;
      *(void *)(v13 + 14) = v14;
    }
    __SC_log_send();
    return sub_100057A70(v3, v4);
  }
  return result;
}

void sub_100057474()
{
  if (qword_10007DF30)
  {
    if (!qword_10007DF18) {
      qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v0 = _os_log_pack_size();
      __chkstk_darwin(v0, v1, v2);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    dispatch_source_cancel((dispatch_source_t)qword_10007DF30);
    dispatch_release((dispatch_object_t)qword_10007DF30);
    qword_10007DF30 = 0;
  }
}

void sub_1000575B4(const __CFDate *a1)
{
  sub_100057474();
  if (!qword_10007DF18) {
    qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 138412290;
    *(void *)(v5 + 4) = a1;
    __SC_log_send();
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double AbsoluteTime = CFDateGetAbsoluteTime(a1);
  if (!qword_10007DF18) {
    qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
  }
  double v8 = AbsoluteTime - Current;
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v9 = _os_log_pack_size();
    __chkstk_darwin(v9, v10, v11);
    __error();
    uint64_t v12 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v12 = 134218496;
    *(double *)(v12 + 4) = AbsoluteTime;
    *(_WORD *)(v12 + 12) = 2048;
    *(double *)(v12 + 14) = Current;
    *(_WORD *)(v12 + 22) = 2048;
    *(double *)(v12 + 24) = v8;
    __SC_log_send();
  }
  dispatch_time_t v13 = dispatch_time(0xFFFFFFFFFFFFFFFELL, (uint64_t)(v8 * 1000000000.0));
  uint64_t v14 = qword_10007DF38;
  if (!qword_10007DF38)
  {
    uint64_t v14 = dispatch_queue_create("com.apple.SystemConfiguration.LinkConfiguration", 0);
    qword_10007DF38 = (uint64_t)v14;
  }
  qword_10007DF30 = (uint64_t)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v14);
  dispatch_source_set_event_handler((dispatch_source_t)qword_10007DF30, &stru_1000771D0);
  dispatch_source_set_timer((dispatch_source_t)qword_10007DF30, v13, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_resume((dispatch_object_t)qword_10007DF30);
}

uint64_t sub_100057878()
{
  if (qword_10007DF28) {
    return qword_10007DF28;
  }
  CFArrayRef v0 = SCNetworkInterfaceCopyAll();
  if (!v0)
  {
LABEL_10:
    qword_10007DF28 = 0;
    return qword_10007DF28;
  }
  CFArrayRef v1 = v0;
  CFIndex Count = CFArrayGetCount(v0);
  if (Count < 1)
  {
LABEL_9:
    CFRelease(v1);
    goto LABEL_10;
  }
  CFIndex v3 = Count;
  CFIndex v4 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v1, v4);
    CFStringRef BSDName = SCNetworkInterfaceGetBSDName(ValueAtIndex);
    CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(ValueAtIndex);
    if (CFEqual(InterfaceType, kSCNetworkInterfaceTypeIEEE80211))
    {
      if (BSDName && CFStringHasPrefix(BSDName, @"en")) {
        break;
      }
    }
    if (v3 == ++v4) {
      goto LABEL_9;
    }
  }
  CFStringRef v9 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
  CFRetain(v9);
  CFRelease(v1);
  qword_10007DF28 = (uint64_t)v9;
  if (v9)
  {
    if (!qword_10007DF18) {
      qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v10 = _os_log_pack_size();
      __chkstk_darwin(v10, v11, v12);
      __error();
      uint64_t v13 = _os_log_pack_fill();
      uint64_t v14 = qword_10007DF28;
      *(_DWORD *)uint64_t v13 = 138412290;
      *(void *)(v13 + 4) = v14;
      __SC_log_send();
    }
  }
  return qword_10007DF28;
}

uint64_t sub_100057A70(const __CFString *a1, int a2)
{
  uint64_t result = sub_100057CF0((uint64_t)"set_expensive");
  if ((result & 0x80000000) == 0)
  {
    int v5 = result;
    if (CFStringGetCString(a1, buffer, 16, 0x8000100u))
    {
      uint64_t result = sub_100057E6C(v5, (uint64_t)buffer, a2);
      if ((result & 0x80000000) == 0)
      {
        if (!qword_10007DF18) {
          qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        }
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (result)
        {
          uint64_t v6 = _os_log_pack_size();
          __chkstk_darwin(v6, v7, v8);
          __error();
          uint64_t v9 = _os_log_pack_fill();
          uint64_t v10 = "enable";
          if (!a2) {
            uint64_t v10 = "disable";
          }
          *(_DWORD *)uint64_t v9 = 136315394;
          *(void *)(v9 + 4) = v10;
          *(_WORD *)(v9 + 12) = 2080;
          *(void *)(v9 + 14) = buffer;
          return __SC_log_send();
        }
      }
    }
    else
    {
      if (!qword_10007DF18) {
        qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      }
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v11 = _os_log_pack_size();
        __chkstk_darwin(v11, v12, v13);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v14 = 136315394;
        *(void *)(v14 + 4) = "set_expensive";
        *(_WORD *)(v14 + 12) = 2112;
        *(void *)(v14 + 14) = a1;
        return __SC_log_send();
      }
    }
  }
  return result;
}

uint64_t sub_100057CF0(uint64_t a1)
{
  if (dword_10007D99C < 0)
  {
    dword_10007D99C = socket(2, 2, 0);
    if (dword_10007D99C < 0)
    {
      if (!qword_10007DF18) {
        qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      }
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v2 = _os_log_pack_size();
        __chkstk_darwin(v2, v3, v4);
        __error();
        uint64_t v5 = _os_log_pack_fill();
        uint64_t v6 = __error();
        uint64_t v7 = strerror(*v6);
        *(_DWORD *)uint64_t v5 = 136315394;
        *(void *)(v5 + 4) = a1;
        *(_WORD *)(v5 + 12) = 2080;
        *(void *)(v5 + 14) = v7;
        __SC_log_send();
      }
    }
  }
  return dword_10007D99C;
}

uint64_t sub_100057E6C(int a1, uint64_t a2, int a3)
{
  long long v15 = 0u;
  long long v16 = 0u;
  __strlcpy_chk();
  LODWORD(v16) = a3 != 0;
  uint64_t v6 = ioctl(a1, 0xC02069A1uLL, &v15);
  if ((v6 & 0x80000000) != 0)
  {
    if (!qword_10007DF18) {
      qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      int v11 = v16;
      uint64_t v12 = __error();
      uint64_t v13 = strerror(*v12);
      *(_DWORD *)uint64_t v10 = 136315650;
      *(void *)(v10 + 4) = a2;
      *(_WORD *)(v10 + 12) = 1024;
      *(_DWORD *)(v10 + 14) = v11;
      *(_WORD *)(v10 + 18) = 2080;
      *(void *)(v10 + 20) = v13;
      __SC_log_send();
    }
  }
  return v6;
}

void sub_100058024(id a1)
{
  if ((dword_10007D99C & 0x80000000) == 0)
  {
    close(dword_10007D99C);
    dword_10007D99C = -1;
  }
}

uint64_t sub_100058098(const __SCNetworkInterface *a1)
{
  uint64_t result = (uint64_t)SCNetworkInterfaceGetBSDName(a1);
  if (result)
  {
    uint64_t v2 = (const void *)result;
    uint64_t result = __SCNetworkInterfaceCreateCapabilities();
    if (result != -1)
    {
      unsigned int v3 = result;
      int valuePtr = result;
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DEF8, v2);
      if (Value)
      {
        CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(Value, @"_CAPABILITIES_");
        if (v5) {
          CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
        }
      }
      uint64_t result = __SCNetworkInterfaceCreateCapabilities();
      if (result != v3)
      {
        unsigned int v6 = result;
        long long v14 = 0u;
        long long v15 = 0u;
        _SC_cfstring_to_cstring();
        *(void *)&long long v15 = __PAIR64__(v3, v6);
        uint64_t result = sub_100057CF0((uint64_t)"_SCNetworkInterfaceSetCapabilities");
        if (result != -1)
        {
          uint64_t result = ioctl(result, 0x8020695AuLL, &v14);
          if (result == -1)
          {
            if (!qword_10007DF18) {
              qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
            }
            _SC_syslog_os_log_mapping();
            uint64_t result = __SC_log_enabled();
            if (result)
            {
              uint64_t v7 = _os_log_pack_size();
              __chkstk_darwin(v7, v8, v9);
              __error();
              uint64_t v10 = _os_log_pack_fill();
              int v11 = __error();
              uint64_t v12 = strerror(*v11);
              *(_DWORD *)uint64_t v10 = 138412546;
              *(void *)(v10 + 4) = v2;
              *(_WORD *)(v10 + 12) = 2080;
              *(void *)(v10 + 14) = v12;
              return __SC_log_send();
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1000582BC(const void *a1, const void *a2)
{
  CFDictionaryRef current = 0;
  CFArrayRef available = 0;
  CFTypeID TypeID = SCNetworkInterfaceGetTypeID();
  if (!a1 || CFGetTypeID(a1) != TypeID)
  {
    goto LABEL_29;
  }
  long long v48 = 0u;
  memset(v49, 0, sizeof(v49));
  long long v46 = 0u;
  unsigned long long v47 = 0u;
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)a1);
  if (!BSDName)
  {
    if (!qword_10007DF18) {
      qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v25 = _os_log_pack_size();
      __chkstk_darwin(v25, v26, v27);
      __error();
      uint64_t v28 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v28 = 138412290;
      *(void *)(v28 + 4) = a1;
      __SC_log_send();
    }
LABEL_29:
    _SCErrorSet();
    return;
  }
  CFStringRef v6 = BSDName;
  if (SCNetworkInterfaceCopyMediaOptions((SCNetworkInterfaceRef)a1, &current, 0, &available, 0))
  {
    uint64_t v7 = sub_100058CF4(a2);
    if (!v7)
    {
      CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_10007DEF8, v6);
      uint64_t v7 = sub_100058CF4(Value);
      if (!v7)
      {
        uint64_t v7 = sub_100058CF4(current);
        if (!v7)
        {
          char v43 = 1;
          goto LABEL_49;
        }
      }
    }
    if (!current || !CFEqual(current, v7))
    {
      CFArrayRef v9 = available;
      v51.length = CFArrayGetCount(available);
      v51.location = 0;
      if (CFArrayContainsValue(v9, v51, v7))
      {
        unsigned int MediaOptions = __SCNetworkInterfaceCreateMediaOptions();
        if (MediaOptions == -1) {
          goto LABEL_48;
        }
        unsigned int v11 = MediaOptions;
        int v12 = sub_100057CF0((uint64_t)"_SCNetworkInterfaceSetMediaOptions");
        if (v12 == -1) {
          goto LABEL_48;
        }
        int v13 = v12;
        long long v48 = 0u;
        memset(v49, 0, sizeof(v49));
        _SC_cfstring_to_cstring();
        if (ioctl(v13, 0xC02C6948uLL, &v48) == -1)
        {
          if (!qword_10007DF18) {
            qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
          }
          _SC_syslog_os_log_mapping();
          if (!__SC_log_enabled()) {
            goto LABEL_48;
          }
        }
        else
        {
          long long v46 = v48;
          unsigned int v14 = v49[0] & 0xF0000000 | v11;
          unsigned long long v47 = v49[0] & 0xF0000000 | (unsigned __int128)v11;
          if (!qword_10007DF18) {
            qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v15 = _os_log_pack_size();
            __chkstk_darwin(v15, v16, v17);
            __error();
            uint64_t v18 = _os_log_pack_fill();
            int v19 = v49[0];
            int v20 = v49[3];
            *(_DWORD *)uint64_t v18 = 67109376;
            *(_DWORD *)(v18 + 4) = v19;
            *(_WORD *)(v18 + 8) = 1024;
            *(_DWORD *)(v18 + 10) = v20;
            __SC_log_send();
          }
          if (!qword_10007DF18) {
            qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
          }
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v21 = _os_log_pack_size();
            __chkstk_darwin(v21, v22, v23);
            __error();
            long long v24 = (_DWORD *)_os_log_pack_fill();
            *long long v24 = 67109120;
            v24[1] = v14;
            __SC_log_send();
          }
          if (ioctl(v13, 0xC0206937uLL, &v46) != -1) {
            goto LABEL_48;
          }
          if (!qword_10007DF18) {
            qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
          }
          _SC_syslog_os_log_mapping();
          if (!__SC_log_enabled()) {
            goto LABEL_48;
          }
        }
        uint64_t v37 = _os_log_pack_size();
        __chkstk_darwin(v37, v38, v39);
        __error();
        uint64_t v40 = _os_log_pack_fill();
        int v41 = __error();
        uint64_t v42 = strerror(*v41);
        *(_DWORD *)uint64_t v40 = 138412546;
        *(void *)(v40 + 4) = v6;
        *(_WORD *)(v40 + 12) = 2080;
        *(void *)(v40 + 14) = v42;
      }
      else
      {
        if (!qword_10007DF18) {
          qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        }
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_48;
        }
        uint64_t v33 = _os_log_pack_size();
        __chkstk_darwin(v33, v34, v35);
        __error();
        uint64_t v36 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v36 = 138412290;
        *(void *)(v36 + 4) = v6;
      }
      __SC_log_send();
    }
LABEL_48:
    char v43 = 0;
LABEL_49:
    if (available) {
      CFRelease(available);
    }
    if (current) {
      CFRelease(current);
    }
    if ((v43 & 1) == 0) {
      CFRelease(v7);
    }
    return;
  }
  if (!qword_10007DF18) {
    qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
  }
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v29 = _os_log_pack_size();
    __chkstk_darwin(v29, v30, v31);
    __error();
    uint64_t v32 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v32 = 138412290;
    *(void *)(v32 + 4) = v6;
    __SC_log_send();
  }
}

void sub_100058AC0(const __SCNetworkInterface *a1, const void *a2)
{
  int mtu_max = -1;
  int mtu_cur = -1;
  int mtu_min = -1;
  CFStringRef BSDName = SCNetworkInterfaceGetBSDName(a1);
  if (BSDName)
  {
    CFStringRef v5 = BSDName;
    int valuePtr = 0;
    if (SCNetworkInterfaceCopyMTU(a1, &mtu_cur, &mtu_min, &mtu_max))
    {
      if ((CFTypeID TypeID = CFDictionaryGetTypeID(), a2)
        && CFGetTypeID(a2) == TypeID
        && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a2, kSCPropNetEthernetMTU),
            CFTypeID v8 = CFNumberGetTypeID(),
            Value)
        && CFGetTypeID(Value) == v8
        || (CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DEF8, v5)) != 0
        && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v9, kSCPropNetEthernetMTU)) != 0)
      {
        CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
        if (valuePtr != mtu_cur && (mtu_min < 0 || valuePtr >= mtu_min) && (mtu_max < 0 || valuePtr <= mtu_max))
        {
          CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(a1);
          if (CFEqual(InterfaceType, kSCNetworkInterfaceTypeBridge)
            && (CFArrayRef MemberInterfaces = (const __CFArray *)SCBridgeInterfaceGetMemberInterfaces()) != 0
            && (CFArrayRef v12 = MemberInterfaces, CFArrayGetCount(MemberInterfaces)))
          {
            CFRetain(v12);
            if (SCBridgeInterfaceSetMemberInterfaces()
              && _SCBridgeInterfaceUpdateConfiguration())
            {
              sub_100058E2C((uint64_t)v5, valuePtr);
              char v13 = 0;
            }
            else
            {
              char v13 = 1;
            }
            CFIndex Count = CFArrayGetCount(v12);
            if (Count >= 1)
            {
              CFIndex v15 = Count;
              for (CFIndex i = 0; i != v15; ++i)
              {
                CFStringRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex(v12, i);
                CFStringRef v18 = SCNetworkInterfaceGetBSDName(ValueAtIndex);
                sub_100058E2C((uint64_t)v18, valuePtr);
              }
            }
            SCBridgeInterfaceSetMemberInterfaces();
            CFRelease(v12);
            if ((v13 & 1) == 0) {
              _SCBridgeInterfaceUpdateConfiguration();
            }
          }
          else
          {
            sub_100058E2C((uint64_t)v5, valuePtr);
          }
        }
      }
    }
  }
}

__CFDictionary *sub_100058CF4(const void *a1)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (!a1) {
    return 0;
  }
  if (CFGetTypeID(a1) != TypeID) {
    return 0;
  }
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetEthernetMediaSubType);
  CFTypeID v4 = CFStringGetTypeID();
  if (!Value || CFGetTypeID(Value) != v4) {
    return 0;
  }
  CFArrayRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, kSCPropNetEthernetMediaSubType, Value);
  CFStringRef v6 = CFDictionaryGetValue((CFDictionaryRef)a1, kSCPropNetEthernetMediaOptions);
  CFTypeID v7 = CFArrayGetTypeID();
  if (!v6 || CFGetTypeID(v6) != v7)
  {
    CFRelease(Mutable);
    return 0;
  }
  CFDictionaryAddValue(Mutable, kSCPropNetEthernetMediaOptions, v6);
  return Mutable;
}

uint64_t sub_100058E2C(uint64_t a1, int a2)
{
  long long v15 = 0u;
  long long v16 = 0u;
  _SC_cfstring_to_cstring();
  LODWORD(v16) = a2;
  uint64_t result = sub_100057CF0((uint64_t)"interfaceSetMTU");
  if (result != -1)
  {
    if (ioctl(result, 0x80206934uLL, &v15) == -1)
    {
      if (!qword_10007DF18) {
        qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      }
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v9 = _os_log_pack_size();
        __chkstk_darwin(v9, v10, v11);
        __error();
        uint64_t v12 = _os_log_pack_fill();
        char v13 = __error();
        unsigned int v14 = strerror(*v13);
        *(_DWORD *)uint64_t v12 = 138412546;
        *(void *)(v12 + 4) = a1;
        *(_WORD *)(v12 + 12) = 2080;
        *(void *)(v12 + 14) = v14;
        return __SC_log_send();
      }
    }
    else
    {
      if (!qword_10007DF18) {
        qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      }
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v5 = _os_log_pack_size();
        __chkstk_darwin(v5, v6, v7);
        __error();
        uint64_t v8 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v8 = 138412546;
        *(void *)(v8 + 4) = a1;
        *(_WORD *)(v8 + 12) = 1024;
        *(_DWORD *)(v8 + 14) = a2;
        return __SC_log_send();
      }
    }
  }
  return result;
}

uint64_t sub_1000590A0(const __CFString *a1, int a2)
{
  uint64_t result = sub_100057CF0((uint64_t)"set_low_data_mode");
  if ((result & 0x80000000) == 0)
  {
    int v5 = result;
    if (CFStringGetCString(a1, buffer, 16, 0x8000100u))
    {
      uint64_t result = sub_100059320(v5, (uint64_t)buffer, a2);
      if ((result & 0x80000000) == 0)
      {
        if (!qword_10007DF18) {
          qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
        }
        _SC_syslog_os_log_mapping();
        uint64_t result = __SC_log_enabled();
        if (result)
        {
          uint64_t v6 = _os_log_pack_size();
          __chkstk_darwin(v6, v7, v8);
          __error();
          uint64_t v9 = _os_log_pack_fill();
          uint64_t v10 = "enable";
          if (!a2) {
            uint64_t v10 = "disable";
          }
          *(_DWORD *)uint64_t v9 = 136315394;
          *(void *)(v9 + 4) = v10;
          *(_WORD *)(v9 + 12) = 2080;
          *(void *)(v9 + 14) = buffer;
          return __SC_log_send();
        }
      }
    }
    else
    {
      if (!qword_10007DF18) {
        qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
      }
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (result)
      {
        uint64_t v11 = _os_log_pack_size();
        __chkstk_darwin(v11, v12, v13);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v14 = 136315394;
        *(void *)(v14 + 4) = "set_low_data_mode";
        *(_WORD *)(v14 + 12) = 2112;
        *(void *)(v14 + 14) = a1;
        return __SC_log_send();
      }
    }
  }
  return result;
}

uint64_t sub_100059320(int a1, uint64_t a2, int a3)
{
  long long v15 = 0u;
  long long v16 = 0u;
  __strlcpy_chk();
  LODWORD(v16) = a3 != 0;
  uint64_t v6 = ioctl(a1, 0xC02069CDuLL, &v15);
  if ((v6 & 0x80000000) != 0)
  {
    if (!qword_10007DF18) {
      qword_10007DF18 = (uint64_t)os_log_create("com.apple.SystemConfiguration", "LinkConfiguration");
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      int v11 = v16;
      uint64_t v12 = __error();
      uint64_t v13 = strerror(*v12);
      *(_DWORD *)uint64_t v10 = 136315650;
      *(void *)(v10 + 4) = a2;
      *(_WORD *)(v10 + 12) = 1024;
      *(_DWORD *)(v10 + 14) = v11;
      *(_WORD *)(v10 + 18) = 2080;
      *(void *)(v10 + 20) = v13;
      __SC_log_send();
    }
  }
  return v6;
}

id sub_1000594D8()
{
  if (!objc_opt_class()) {
    return 0;
  }
  id v1 = objc_alloc_init((Class)CWFInterface);
  [v1 activate];
  id v2 = [[objc_msgSend(v1, "currentScanResult") isMetered];
  [v1 invalidate];

  return v2;
}

uint64_t sub_100059588(uint64_t a1, uint64_t a2)
{
  qword_10007DF40 = a1;
  qword_10007DF48 = a2;
  id v2 = qword_10007DF50;
  if (!qword_10007DF50)
  {
    id v2 = dispatch_queue_create("CategoryManagerServer", 0);
    qword_10007DF50 = (uint64_t)v2;
  }
  mach_service = xpc_connection_create_mach_service("com.apple.SystemConfiguration.NetworkCategoryManager", v2, 1uLL);
  if (mach_service)
  {
    CFTypeID v4 = mach_service;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = sub_100059AC4;
    handler[3] = &unk_100077238;
    void handler[4] = mach_service;
    xpc_connection_set_event_handler(mach_service, handler);
    xpc_connection_activate(v4);
    if (!qword_10007DF50) {
      qword_10007DF50 = (uint64_t)dispatch_queue_create("CategoryManagerServer", 0);
    }
    os_state_add_handler();
    return 1;
  }
  else
  {
    qword_10007DF40 = 0;
    qword_10007DF48 = 0;
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6, v7, v8);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100059764()
{
  uint64_t v4 = 0;
  int v5 = &v4;
  uint64_t v6 = 0x2000000000;
  uint64_t v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  v3[2] = sub_100059854;
  v3[3] = &unk_1000771F8;
  void v3[4] = &v4;
  CFArrayRef v0 = qword_10007DF50;
  if (!qword_10007DF50)
  {
    CFArrayRef v0 = dispatch_queue_create("CategoryManagerServer", 0);
    qword_10007DF50 = (uint64_t)v0;
  }
  dispatch_sync(v0, v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100059854(uint64_t a1)
{
  id v2 = (void *)S_CategorySessions;
  if (S_CategorySessions)
  {
    CFArrayRef Mutable = 0;
    do
    {
      CFDictionaryRef v4 = sub_10005B978(v2);
      if (!Mutable) {
        CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      }
      CFArrayAppendValue(Mutable, v4);
      CFRelease(v4);
      id v2 = (void *)*v2;
    }
    while (v2);
  }
  else
  {
    CFArrayRef Mutable = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = Mutable;
}

void sub_100059924(uint64_t a1)
{
  if (a1)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 0x40000000;
    v2[2] = sub_1000599E8;
    v2[3] = &unk_100077218;
    v2[4] = a1;
    uint64_t v1 = qword_10007DF50;
    if (!qword_10007DF50)
    {
      uint64_t v1 = dispatch_queue_create("CategoryManagerServer", 0);
      qword_10007DF50 = (uint64_t)v1;
    }
    dispatch_sync(v1, v2);
  }
}

CFIndex sub_1000599E8(uint64_t a1)
{
  CFArrayRef v1 = *(const __CFArray **)(a1 + 32);
  CFIndex result = CFArrayGetCount(v1);
  if (result >= 1)
  {
    CFIndex v3 = result;
    int v4 = 0;
    for (CFIndex i = 0; i != v3; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v1, i);
      CFIndex result = sub_10005BC08(ValueAtIndex);
      if (result) {
        int v4 = 1;
      }
    }
    if (v4)
    {
      return sub_10005BF78();
    }
  }
  return result;
}

void sub_100059AC4(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 0x40000000;
    handler[2] = sub_100059DF0;
    handler[3] = &unk_100077258;
    void handler[4] = object;
    xpc_connection_set_event_handler((xpc_connection_t)object, handler);
    uint64_t v10 = qword_10007DF50;
    if (!qword_10007DF50)
    {
      uint64_t v10 = dispatch_queue_create("CategoryManagerServer", 0);
      qword_10007DF50 = (uint64_t)v10;
    }
    xpc_connection_set_target_queue((xpc_connection_t)object, v10);
    xpc_connection_activate((xpc_connection_t)object);
  }
  else
  {
    xpc_type_t v5 = type;
    if (type != (xpc_type_t)&_xpc_type_error)
    {
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        return;
      }
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6, v7, v8);
      __error();
      uint64_t v9 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v9 = 134217984;
      *(void *)(v9 + 4) = v5;
LABEL_11:
      __SC_log_send();
      return;
    }
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    int v12 = __SC_log_enabled();
    if (object != &_xpc_error_connection_invalid)
    {
      if (!v12) {
        return;
      }
      uint64_t v13 = _os_log_pack_size();
      __chkstk_darwin(v13, v14, v15);
      __error();
      uint64_t v16 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v16 = 136315138;
      *(void *)(v16 + 4) = string;
      goto LABEL_11;
    }
    if (v12)
    {
      uint64_t v17 = _os_log_pack_size();
      __chkstk_darwin(v17, v18, v19);
      __error();
      uint64_t v20 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v20 = 136315138;
      *(void *)(v20 + 4) = string;
      __SC_log_send();
    }
    xpc_release(*(xpc_object_t *)(a1 + 32));
  }
}

void sub_100059DF0(uint64_t a1, void *a2)
{
  id v2 = *(_xpc_connection_s **)(a1 + 32);

  sub_100059E4C(v2, a2);
}

void sub_100059E4C(_xpc_connection_s *a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    int int64 = xpc_dictionary_get_int64(object, "Type");
    xpc_object_t reply = xpc_dictionary_create_reply(object);
    uint64_t v10 = reply;
    if (int64 != 3)
    {
      if (int64 == 2)
      {
        unsigned int v11 = sub_10005A6C4(a1, object);
        if (!v10) {
          return;
        }
      }
      else if (int64 == 1)
      {
        unsigned int v11 = sub_10005A1E0(a1, object);
        if (!v10) {
          return;
        }
      }
      else
      {
        unsigned int v11 = 22;
        if (!v10) {
          return;
        }
      }
      goto LABEL_26;
    }
    if (!reply) {
      return;
    }
    CFBooleanRef context = (CFBooleanRef)xpc_connection_get_context(a1);
    if (context)
    {
      if (context != kCFBooleanTrue && context != kCFBooleanFalse) {
        goto LABEL_20;
      }
    }
    if (sub_10005B168(a1))
    {
      string = xpc_dictionary_get_string(object, "Category");
      if (string)
      {
        uint64_t v17 = (char *)string;
        uint64_t v18 = xpc_dictionary_get_string(object, "InterfaceName");
        CFBooleanRef context = (CFBooleanRef)sub_10005AAF0(v17, v18);
        if (context)
        {
LABEL_20:
          uint64_t v14 = (const char *)*((void *)context + 9);
          if (v14) {
            xpc_dictionary_set_string(v10, "ActiveValue", v14);
          }
          unsigned int v11 = 0;
          goto LABEL_26;
        }
        unsigned int v11 = 2;
      }
      else
      {
        unsigned int v11 = 22;
      }
    }
    else
    {
      unsigned int v11 = 1;
    }
LABEL_26:
    xpc_dictionary_set_int64(v10, "Error", v11);
    remote_connection = xpc_dictionary_get_remote_connection(object);
    xpc_connection_send_message(remote_connection, v10);
    xpc_release(v10);
    return;
  }
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (object == &_xpc_error_connection_invalid)
    {
      sub_10005A9AC(a1);
    }
    else if (object == &_xpc_error_connection_interrupted)
    {
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled()) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_4:
      uint64_t v5 = _os_log_pack_size();
      __chkstk_darwin(v5, v6, v7);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
  }
}

uint64_t sub_10005A1E0(_xpc_connection_s *a1, void *a2)
{
  if (xpc_connection_get_context(a1))
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4, v5, v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      pid_t pid = xpc_connection_get_pid(a1);
      *(_DWORD *)uint64_t v7 = 136315650;
      *(void *)(v7 + 4) = "HandleRegister";
      *(_WORD *)(v7 + 12) = 2048;
      *(void *)(v7 + 14) = a1;
      *(_WORD *)(v7 + 22) = 1024;
      *(_DWORD *)(v7 + 24) = pid;
      __SC_log_send();
      return 22;
    }
    return 22;
  }
  if (sub_10005AF10(a1))
  {
    string = xpc_dictionary_get_string(a2, "Category");
    if (!string) {
      return 22;
    }
    unsigned int v11 = (char *)string;
    int v12 = xpc_dictionary_get_string(a2, "InterfaceName");
    int int64 = xpc_dictionary_get_int64(a2, "Flags");
    if (!int64 || (uint64_t result = 22, int64 == 1) && v12)
    {
      if (sub_10005AAF0(v11, v12))
      {
        sub_10005C0B0();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v14 = _os_log_pack_size();
          __chkstk_darwin(v14, v15, v16);
          __error();
          uint64_t v17 = _os_log_pack_fill();
          pid_t v18 = xpc_connection_get_pid(a1);
          *(_DWORD *)uint64_t v17 = 134218498;
          *(void *)(v17 + 4) = a1;
          *(_WORD *)(v17 + 12) = 1024;
          *(_DWORD *)(v17 + 14) = v18;
          *(_WORD *)(v17 + 18) = 2080;
          *(void *)(v17 + 20) = v11;
          __SC_log_send();
        }
        return 17;
      }
      else
      {
        long long v24 = xpc_dictionary_get_string(a2, "ProcessName");
        uint64_t v25 = sub_10005AB90(a1, v24, v11, v12, int64);
        sub_10005C0B0();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v26 = _os_log_pack_size();
          __chkstk_darwin(v26, v27, v28);
          __error();
          uint64_t v29 = _os_log_pack_fill();
          int v30 = *((_DWORD *)v25 + 7);
          uint64_t v31 = *((void *)v25 + 4);
          uint64_t v32 = *((void *)v25 + 5);
          uint64_t v33 = "<any>";
          if (v12) {
            uint64_t v33 = v12;
          }
          *(_DWORD *)uint64_t v29 = 136316162;
          *(void *)(v29 + 4) = v31;
          if (int64) {
            uint64_t v34 = " [no_default]";
          }
          else {
            uint64_t v34 = "";
          }
          *(_WORD *)(v29 + 12) = 1024;
          *(_DWORD *)(v29 + 14) = v30;
          *(_WORD *)(v29 + 18) = 2080;
          *(void *)(v29 + 20) = v32;
          *(_WORD *)(v29 + 28) = 2080;
          *(void *)(v29 + 30) = v33;
          *(_WORD *)(v29 + 38) = 2080;
          *(void *)(v29 + 40) = v34;
          __SC_log_send();
        }
        sub_10005ADDC();
        return 0;
      }
    }
  }
  else
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v19 = _os_log_pack_size();
      __chkstk_darwin(v19, v20, v21);
      __error();
      uint64_t v22 = _os_log_pack_fill();
      pid_t v23 = xpc_connection_get_pid(a1);
      *(_DWORD *)uint64_t v22 = 136315650;
      *(void *)(v22 + 4) = "HandleRegister";
      *(_WORD *)(v22 + 12) = 2048;
      *(void *)(v22 + 14) = a1;
      *(_WORD *)(v22 + 22) = 1024;
      *(_DWORD *)(v22 + 24) = v23;
      __SC_log_send();
    }
    xpc_connection_set_context(a1, kCFBooleanFalse);
    return 1;
  }
  return result;
}

uint64_t sub_10005A6C4(_xpc_connection_s *a1, void *a2)
{
  CFBooleanRef context = (const __CFBoolean *)xpc_connection_get_context(a1);
  if (context)
  {
    CFBooleanRef v5 = context;
    if (context != kCFBooleanTrue && context != kCFBooleanFalse)
    {
      string = xpc_dictionary_get_string(a2, "Value");
      uint64_t v8 = string;
      unint64_t v9 = *((void *)v5 + 8);
      if (string && v9)
      {
        BOOL v10 = strcmp(*((const char **)v5 + 8), string) != 0;
      }
      else
      {
        BOOL v10 = ((unint64_t)string | v9) != 0;
        if (!string)
        {
          uint64_t v16 = 0;
          int v17 = 1;
          if (!v9) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
      }
      uint64_t v16 = strdup(v8);
      int v17 = 0;
      if (!v9)
      {
LABEL_15:
        *((void *)v5 + 8) = v16;
        if (v10)
        {
          pid_t v18 = (const char *)*((void *)v5 + 6);
          sub_10005C0B0();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v19 = _os_log_pack_size();
            __chkstk_darwin(v19, v20, v21);
            __error();
            uint64_t v22 = _os_log_pack_fill();
            int v23 = *((_DWORD *)v5 + 7);
            uint64_t v24 = *((void *)v5 + 4);
            uint64_t v25 = *((void *)v5 + 5);
            uint64_t v26 = "<any>";
            if (v18) {
              uint64_t v26 = v18;
            }
            uint64_t v27 = "<none>";
            *(_DWORD *)uint64_t v22 = 136316162;
            if (!v17) {
              uint64_t v27 = v8;
            }
            *(void *)(v22 + 4) = v24;
            *(_WORD *)(v22 + 12) = 1024;
            *(_DWORD *)(v22 + 14) = v23;
            *(_WORD *)(v22 + 18) = 2080;
            *(void *)(v22 + 20) = v25;
            *(_WORD *)(v22 + 28) = 2080;
            *(void *)(v22 + 30) = v26;
            *(_WORD *)(v22 + 38) = 2080;
            *(void *)(v22 + 40) = v27;
            __SC_log_send();
          }
          sub_10005ADDC();
        }
        return 0;
      }
LABEL_14:
      free((void *)v9);
      goto LABEL_15;
    }
  }
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v11 = _os_log_pack_size();
    __chkstk_darwin(v11, v12, v13);
    __error();
    uint64_t v14 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v14 = 134217984;
    *(void *)(v14 + 4) = a1;
    __SC_log_send();
  }
  return 22;
}

void sub_10005A9AC(_xpc_connection_s *a1)
{
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 134217984;
    *(void *)(v5 + 4) = a1;
    __SC_log_send();
  }
  CFBooleanRef context = (uint64_t *)xpc_connection_get_context(a1);
  if (context)
  {
    if (context != (uint64_t *)kCFBooleanTrue && context != (uint64_t *)kCFBooleanFalse) {
      sub_10005B5AC(context);
    }
  }
}

uint64_t sub_10005AAF0(char *__s2, const char *a2)
{
  for (uint64_t i = S_CategorySessions; i; uint64_t i = *(void *)i)
  {
    if (!strcmp(*(const char **)(i + 40), __s2))
    {
      if (!a2) {
        break;
      }
      uint64_t v5 = *(const char **)(i + 48);
      if (!v5 || !strcmp(a2, v5)) {
        break;
      }
    }
  }
  return i;
}

_OWORD *sub_10005AB90(_xpc_connection_s *a1, const char *a2, const char *a3, const char *a4, int a5)
{
  BOOL v10 = malloc_type_malloc(0x50uLL, 0x10B0040F25E0655uLL);
  *BOOL v10 = 0u;
  v10[1] = 0u;
  void v10[2] = 0u;
  v10[3] = 0u;
  v10[4] = 0u;
  *((void *)v10 + 2) = a1;
  *((_DWORD *)v10 + 7) = xpc_connection_get_pid(a1);
  if (a2) {
    uint64_t v11 = a2;
  }
  else {
    uint64_t v11 = "<unknown>";
  }
  *((void *)v10 + 4) = strdup(v11);
  *((void *)v10 + 5) = strdup(a3);
  *((_DWORD *)v10 + 14) = a5;
  if (a4) {
    *((void *)v10 + 6) = strdup(a4);
  }
  xpc_connection_set_finalizer_f(a1, (xpc_finalizer_t)sub_10005AFCC);
  xpc_connection_set_context(a1, v10);
  uint64_t v12 = S_CategorySessions;
  *(void *)BOOL v10 = S_CategorySessions;
  if (v12) {
    *(void *)(v12 + 8) = v10;
  }
  S_CategorySessions = (uint64_t)v10;
  *((void *)v10 + 1) = &S_CategorySessions;
  *((unsigned char *)v10 + 24) = 1;
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v13 = _os_log_pack_size();
    __chkstk_darwin(v13, v14, v15);
    __error();
    uint64_t v16 = _os_log_pack_fill();
    int v17 = *((_DWORD *)v10 + 7);
    pid_t v18 = "<any>";
    uint64_t v19 = *((void *)v10 + 4);
    uint64_t v20 = *((void *)v10 + 5);
    if (a4) {
      pid_t v18 = a4;
    }
    *(_DWORD *)uint64_t v16 = 136316674;
    *(void *)(v16 + 4) = "CategorySessionCreate";
    *(_WORD *)(v16 + 12) = 2080;
    *(void *)(v16 + 14) = v19;
    *(_WORD *)(v16 + 22) = 1024;
    *(_DWORD *)(v16 + 24) = v17;
    *(_WORD *)(v16 + 28) = 2080;
    *(void *)(v16 + 30) = v20;
    *(_WORD *)(v16 + 38) = 2080;
    *(void *)(v16 + 40) = v18;
    *(_WORD *)(v16 + 48) = 2048;
    *(void *)(v16 + 50) = v10;
    *(_WORD *)(v16 + 58) = 2048;
    *(void *)(v16 + 60) = a1;
    __SC_log_send();
  }
  return v10;
}

void sub_10005ADDC()
{
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v0 = _os_log_pack_size();
    __chkstk_darwin(v0, v1, v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315138;
    *(void *)(v3 + 4) = "SendNotification";
    __SC_log_send();
  }
  if (qword_10007DF48)
  {
    CFRunLoopSourceSignal((CFRunLoopSourceRef)qword_10007DF48);
    if (qword_10007DF40) {
      CFRunLoopWakeUp((CFRunLoopRef)qword_10007DF40);
    }
  }
}

BOOL sub_10005AF10(_xpc_connection_s *a1)
{
  if (!xpc_connection_get_euid(a1)) {
    return 1;
  }
  uint64_t v1 = (void *)xpc_connection_copy_entitlement_value();
  if (v1)
  {
    uint64_t v2 = v1;
    BOOL v3 = xpc_get_type(v1) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v2);
    xpc_release(v2);
  }
  else
  {
    return 0;
  }
  return v3;
}

void sub_10005AFCC(uint64_t a1)
{
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    int v6 = *(_DWORD *)(a1 + 28);
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t v5 = 136316162;
    *(void *)(v5 + 4) = "CategorySessionRelease";
    *(_WORD *)(v5 + 12) = 2080;
    *(void *)(v5 + 14) = v7;
    *(_WORD *)(v5 + 22) = 1024;
    *(_DWORD *)(v5 + 24) = v6;
    *(_WORD *)(v5 + 28) = 2080;
    *(void *)(v5 + 30) = v8;
    *(_WORD *)(v5 + 38) = 2048;
    *(void *)(v5 + 40) = a1;
    __SC_log_send();
  }
  free(*(void **)(a1 + 32));
  free(*(void **)(a1 + 40));
  unint64_t v9 = *(void **)(a1 + 48);
  if (v9) {
    free(v9);
  }
  BOOL v10 = *(void **)(a1 + 64);
  if (v10) {
    free(v10);
  }
  *(void *)(a1 + 64) = 0;
  uint64_t v11 = *(void **)(a1 + 72);
  if (v11) {
    free(v11);
  }
  *(void *)(a1 + 72) = 0;
  if (*(unsigned char *)(a1 + 24)) {
    sub_1000653E4();
  }
  free((void *)a1);
}

uint64_t sub_10005B168(_xpc_connection_s *a1)
{
  CFBooleanRef context = (const __CFBoolean *)xpc_connection_get_context(a1);
  if (context)
  {
    if (context == kCFBooleanFalse)
    {
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (!result) {
        return result;
      }
      uint64_t v15 = _os_log_pack_size();
      __chkstk_darwin(v15, v16, v17);
      __error();
      uint64_t v18 = _os_log_pack_fill();
      pid_t pid = xpc_connection_get_pid(a1);
      *(_DWORD *)uint64_t v18 = 136315650;
      *(void *)(v18 + 4) = "connectionAllowManagerObserverAccess";
      *(_WORD *)(v18 + 12) = 2048;
      *(void *)(v18 + 14) = a1;
      *(_WORD *)(v18 + 22) = 1024;
      *(_DWORD *)(v18 + 24) = pid;
      __SC_log_send();
    }
    else if (context == kCFBooleanTrue)
    {
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v3 = _os_log_pack_size();
        __chkstk_darwin(v3, v4, v5);
        __error();
        uint64_t v6 = _os_log_pack_fill();
        pid_t v7 = xpc_connection_get_pid(a1);
        *(_DWORD *)uint64_t v6 = 136315650;
        *(void *)(v6 + 4) = "connectionAllowManagerObserverAccess";
        *(_WORD *)(v6 + 12) = 2048;
        *(void *)(v6 + 14) = a1;
        *(_WORD *)(v6 + 22) = 1024;
        *(_DWORD *)(v6 + 24) = v7;
        __SC_log_send();
        return 1;
      }
      return 1;
    }
  }
  else
  {
    BOOL v9 = sub_10005AF10(a1);
    sub_10005C0B0();
    if (v9)
    {
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v10 = _os_log_pack_size();
        __chkstk_darwin(v10, v11, v12);
        __error();
        uint64_t v13 = _os_log_pack_fill();
        pid_t v14 = xpc_connection_get_pid(a1);
        *(_DWORD *)uint64_t v13 = 136315650;
        *(void *)(v13 + 4) = "connectionAllowManagerObserverAccess";
        *(_WORD *)(v13 + 12) = 2048;
        *(void *)(v13 + 14) = a1;
        *(_WORD *)(v13 + 22) = 1024;
        *(_DWORD *)(v13 + 24) = v14;
        __SC_log_send();
      }
      xpc_connection_set_context(a1, kCFBooleanTrue);
      return 1;
    }
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v20 = _os_log_pack_size();
      __chkstk_darwin(v20, v21, v22);
      __error();
      uint64_t v23 = _os_log_pack_fill();
      pid_t v24 = xpc_connection_get_pid(a1);
      *(_DWORD *)uint64_t v23 = 136315650;
      *(void *)(v23 + 4) = "connectionAllowManagerObserverAccess";
      *(_WORD *)(v23 + 12) = 2048;
      *(void *)(v23 + 14) = a1;
      *(_WORD *)(v23 + 22) = 1024;
      *(_DWORD *)(v23 + 24) = v24;
      __SC_log_send();
    }
    xpc_connection_set_context(a1, kCFBooleanFalse);
  }
  return 0;
}

void sub_10005B5AC(uint64_t *a1)
{
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136315394;
    *(void *)(v5 + 4) = "CategorySessionInvalidate";
    *(_WORD *)(v5 + 12) = 2048;
    *(void *)(v5 + 14) = a1;
    __SC_log_send();
  }
  if (*((unsigned char *)a1 + 24))
  {
    uint64_t v6 = *a1;
    if (*a1) {
      *(void *)(v6 + 8) = a1[1];
    }
    *(void *)a1[1] = v6;
    *((unsigned char *)a1 + 24) = 0;
  }
  sub_10005ADDC();
}

os_state_data_s *__cdecl sub_10005B6F8(id a1, os_state_hints_s *a2)
{
  return (os_state_data_s *)sub_10005B750();
}

_DWORD *sub_10005B750()
{
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  uint64_t v1 = (void *)S_CategorySessions;
  if (S_CategorySessions)
  {
    do
    {
      CFDictionaryRef v2 = sub_10005B978(v1);
      if (v2)
      {
        CFDictionaryRef v3 = v2;
        CFArrayAppendValue(Mutable, v2);
        CFRelease(v3);
      }
      uint64_t v1 = (void *)*v1;
    }
    while (v1);
  }
  CFDataRef Data = CFPropertyListCreateData(0, Mutable, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  CFRelease(Mutable);
  CFIndex Length = CFDataGetLength(Data);
  size_t v6 = Length + 200;
  if ((unint64_t)(Length + 200) <= 0x8000)
  {
    size_t v12 = Length;
    uint64_t v11 = malloc_type_calloc(1uLL, v6, 0xAA4C9B4BuLL);
    *uint64_t v11 = 1;
    v11[1] = v12;
    __strlcpy_chk();
    BytePtr = CFDataGetBytePtr(Data);
    memcpy(v11 + 50, BytePtr, v12);
  }
  else
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v10 = 136315650;
      *(void *)(v10 + 4) = "CategoryManagerCopyOSStateData";
      *(_WORD *)(v10 + 12) = 2048;
      *(void *)(v10 + 14) = v6;
      *(_WORD *)(v10 + 22) = 1024;
      *(_DWORD *)(v10 + 24) = 0x8000;
      __SC_log_send();
    }
    uint64_t v11 = 0;
  }
  CFRelease(Data);
  return v11;
}

CFDictionaryRef sub_10005B978(void *a1)
{
  CFNumberRef v2 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)a1 + 28);
  CFDictionaryRef v3 = (const char *)a1[4];
  if (v3) {
    CFStringRef v4 = CFStringCreateWithCString(0, v3, 0x8000100u);
  }
  else {
    CFStringRef v4 = 0;
  }
  uint64_t v5 = (const char *)a1[5];
  if (v5) {
    CFStringRef v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
  }
  else {
    CFStringRef v6 = 0;
  }
  uint64_t v7 = (const char *)a1[8];
  if (v7) {
    CFStringRef v8 = CFStringCreateWithCString(0, v7, 0x8000100u);
  }
  else {
    CFStringRef v8 = 0;
  }
  uint64_t v9 = (const char *)a1[9];
  if (v9) {
    CFStringRef v10 = CFStringCreateWithCString(0, v9, 0x8000100u);
  }
  else {
    CFStringRef v10 = 0;
  }
  uint64_t v11 = (const char *)a1[6];
  if (v11) {
    CFStringRef v12 = CFStringCreateWithCString(0, v11, 0x8000100u);
  }
  else {
    CFStringRef v12 = 0;
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  CFIndex v13 = 3;
  CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, a1 + 7);
  CFNumberRef v15 = v14;
  keys[0] = @"ProcessID";
  keys[1] = @"ProcessName";
  values[0] = v2;
  values[1] = (void *)v4;
  keys[2] = @"Category";
  values[2] = (void *)v6;
  if (v12)
  {
    *(void *)&long long v22 = @"InterfaceName";
    *(void *)&long long v19 = v12;
    CFIndex v13 = 4;
  }
  if (v8)
  {
    keys[v13] = @"Value";
    values[v13++] = (void *)v8;
  }
  if (v10)
  {
    keys[v13] = @"ActiveValue";
    values[v13++] = (void *)v10;
  }
  if (v14)
  {
    keys[v13] = @"Flags";
    values[v13++] = v14;
  }
  CFDictionaryRef v16 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v13, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v15) {
    CFRelease(v15);
  }
  return v16;
}

uint64_t sub_10005BC08(const __CFDictionary *a1)
{
  if (!CFDictionaryGetValue(a1, @"Category"))
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4, v5, v6);
      __error();
      uint64_t v7 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v7 = 136315650;
      *(void *)(v7 + 4) = "CategoryManagerServerAckOne";
      *(_WORD *)(v7 + 12) = 2112;
      *(void *)(v7 + 14) = a1;
      *(_WORD *)(v7 + 22) = 2112;
      *(void *)(v7 + 24) = @"Category";
LABEL_19:
      __SC_log_send();
    }
    return 0;
  }
  CFNumberRef v2 = (char *)_SC_cfstring_to_cstring();
  if (CFDictionaryGetValue(a1, @"InterfaceName")) {
    CFDictionaryRef v3 = (char *)_SC_cfstring_to_cstring();
  }
  else {
    CFDictionaryRef v3 = 0;
  }
  if (CFDictionaryGetValue(a1, @"Value")) {
    uint64_t v8 = _SC_cfstring_to_cstring();
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = sub_10005AAF0(v2, v3);
  if (!v9)
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v12 = _os_log_pack_size();
      __chkstk_darwin(v12, v13, v14);
      __error();
      uint64_t v15 = _os_log_pack_fill();
      CFDictionaryRef v16 = "<any>";
      *(_DWORD *)uint64_t v15 = 136315650;
      *(void *)(v15 + 4) = "CategoryManagerServerAckOne";
      *(_WORD *)(v15 + 12) = 2080;
      if (v3) {
        CFDictionaryRef v16 = v3;
      }
      *(void *)(v15 + 14) = v2;
      *(_WORD *)(v15 + 22) = 2080;
      *(void *)(v15 + 24) = v16;
      goto LABEL_19;
    }
    return 0;
  }
  uint64_t v10 = v9;
  unint64_t v11 = *(void *)(v9 + 72);
  if (v8 && v11)
  {
    if (!strcmp(*(const char **)(v9 + 72), (const char *)v8))
    {
LABEL_32:
      uint64_t v17 = 0;
      if (!v2) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    goto LABEL_23;
  }
  if (!(v8 | v11)) {
    goto LABEL_32;
  }
  if (v8)
  {
LABEL_23:
    uint64_t v18 = strdup((const char *)v8);
    if (!v11) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v18 = 0;
  if (v11) {
LABEL_24:
  }
    free((void *)v11);
LABEL_25:
  *(void *)(v10 + 72) = v18;
  xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
  xpc_connection_send_message(*(xpc_connection_t *)(v10 + 16), v19);
  xpc_release(v19);
  uint64_t v17 = 1;
  if (v2) {
LABEL_26:
  }
    CFAllocatorDeallocate(0, v2);
LABEL_27:
  if (v3) {
    CFAllocatorDeallocate(0, v3);
  }
  if (v8) {
    CFAllocatorDeallocate(0, (void *)v8);
  }
  return v17;
}

uint64_t sub_10005BF78()
{
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v0 = _os_log_pack_size();
    __chkstk_darwin(v0, v1, v2);
    __error();
    uint64_t v3 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v3 = 136315394;
    *(void *)(v3 + 4) = "CategoryManagerServerNotifyStore";
    *(_WORD *)(v3 + 12) = 2112;
    *(void *)(v3 + 14) = @"com.apple.scnetworkcategory";
    __SC_log_send();
  }
  return SCDynamicStoreNotifyValue(0, @"com.apple.scnetworkcategory");
}

os_log_t sub_10005C0B0()
{
  os_log_t result = (os_log_t)qword_10007DF58;
  if (!qword_10007DF58)
  {
    os_log_t result = os_log_create("com.apple.SystemConfiguration", "PreferencesMonitor");
    qword_10007DF58 = (uint64_t)result;
  }
  return result;
}

const void *sub_10005C124(const __CFDictionary *a1)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, @"Category");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) == TypeID) {
    return Value;
  }
  return 0;
}

const void *sub_10005C1A8(const __CFDictionary *a1)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, @"InterfaceName");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) == TypeID) {
    return Value;
  }
  return 0;
}

const void *sub_10005C22C(const __CFDictionary *a1)
{
  CFNumberRef Value = CFDictionaryGetValue(a1, @"Value");
  CFTypeID TypeID = CFStringGetTypeID();
  if (!Value) {
    return 0;
  }
  if (CFGetTypeID(Value) == TypeID) {
    return Value;
  }
  return 0;
}

uint64_t sub_10005C2B0(const __CFDictionary *a1)
{
  unsigned int valuePtr = 0;
  CFNumberRef Value = CFDictionaryGetValue(a1, @"Flags");
  CFTypeID TypeID = CFNumberGetTypeID();
  if (!Value || CFGetTypeID(Value) != TypeID) {
    return 0;
  }
  CFNumberGetValue((CFNumberRef)Value, kCFNumberSInt32Type, &valuePtr);
  return valuePtr;
}

void sub_10005C34C()
{
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v0 = _os_log_pack_size();
    __chkstk_darwin(v0, v1, v2);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  if (sub_10005C504())
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v3 = _os_log_pack_size();
      __chkstk_darwin(v3, v4, v5);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
  }
  sub_10005C678((SCPreferencesRef)qword_10007DF60, 2);
}

uint64_t sub_10005C504()
{
  memset(&context, 0, 72);
  context.perform = (void (__cdecl *)(void *))sub_10005D6F4;
  uint64_t v0 = CFRunLoopSourceCreate(0, 0, &context);
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  uint64_t v2 = sub_100059588((uint64_t)Current, (uint64_t)v0);
  if (v2)
  {
    uint64_t v3 = CFRunLoopGetCurrent();
    CFRunLoopAddSource(v3, v0, kCFRunLoopDefaultMode);
  }
  else
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4, v5, v6);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
  }
  CFRelease(v0);
  return v2;
}

void sub_10005C678(SCPreferencesRef prefs, char a2)
{
  if ((a2 & 1) != 0 && (byte_10007DF80 & 1) == 0) {
    SCPreferencesSynchronize(prefs);
  }
  if ((a2 & 2) != 0)
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v4 = _os_log_pack_size();
      __chkstk_darwin(v4, v5, v6);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
    }
    if (qword_10007DF78)
    {
      SCPreferencesRef v11 = 0;
      CFTypeRef v12 = 0;
      CFTypeRef v13 = 0;
      if (sub_10005ECB8(&v11, prefs))
      {
        CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10007DF78);
        if (Count >= 1)
        {
          CFIndex v8 = Count;
          for (CFIndex i = 0; i != v8; ++i)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DF78, i);
            sub_10005EDF0(&v11, ValueAtIndex);
          }
        }
        if (v11) {
          CFRelease(v11);
        }
        if (v13) {
          CFRelease(v13);
        }
        if (v12) {
          CFRelease(v12);
        }
      }
    }
    sub_10005D888(prefs);
    sub_10005DC24(prefs);
    sub_10005DED4((const __SCDynamicStore *)qword_10007DF68, prefs);
    if ((byte_10007DF80 & 1) == 0) {
      SCPreferencesSynchronize(prefs);
    }
  }
}

void sub_10005C858(__CFBundle *a1)
{
  *(_OWORD *)keys = *(_OWORD *)&off_1000772B8;
  values[0] = kCFBooleanTrue;
  values[1] = kCFBooleanFalse;
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v2 = _os_log_pack_size();
    __chkstk_darwin(v2, v3, v4);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    __SC_log_send();
  }
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v5 = _os_log_pack_size();
    __chkstk_darwin(v5, v6, v7);
    __error();
    uint64_t v8 = _os_log_pack_fill();
    CFStringRef Identifier = CFBundleGetIdentifier(a1);
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v8 + 4) = Identifier;
    __SC_log_send();
  }
  qword_10007DF68 = (uint64_t)SCDynamicStoreCreate(0, @"PreferencesMonitor.bundle", (SCDynamicStoreCallBack)sub_10005CEC0, 0);
  if (!qword_10007DF68)
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v15 = _os_log_pack_size();
      __chkstk_darwin(v15, v16, v17);
      __error();
LABEL_27:
      uint64_t v27 = _os_log_pack_fill();
      int v28 = SCError();
      uint64_t v29 = SCErrorString(v28);
      *(_DWORD *)uint64_t v27 = 136315138;
      *(void *)(v27 + 4) = v29;
      __SC_log_send();
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  CFDictionaryRef v10 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  qword_10007DF60 = SCPreferencesCreateWithOptions();
  CFRelease(v10);
  if (!qword_10007DF60)
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_28;
    }
LABEL_26:
    uint64_t v24 = _os_log_pack_size();
    __chkstk_darwin(v24, v25, v26);
    __error();
    goto LABEL_27;
  }
  __SCNetworkConfigurationUpgrade();
  CFPropertyListRef Value = SCPreferencesGetValue((SCPreferencesRef)qword_10007DF60, @"Model");
  CFPropertyListRef v12 = (CFPropertyListRef)_SC_hw_model();
  if (!Value || (CFPropertyListRef v13 = v12, Value == v12) || v12 && CFEqual(Value, v12))
  {
    SCNetworkSetRef v14 = SCNetworkSetCopyCurrent((SCPreferencesRef)qword_10007DF60);
    if (v14)
    {
      byte_10007DF70 = 1;
      CFRelease(v14);
    }
  }
  else
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v18 = _os_log_pack_size();
      __chkstk_darwin(v18, v19, v20);
      __error();
      uint64_t v21 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v21 = 138412546;
      *(void *)(v21 + 4) = Value;
      *(_WORD *)(v21 + 12) = 2112;
      *(void *)(v21 + 14) = v13;
      __SC_log_send();
    }
    sub_10005D390((const __SCPreferences *)qword_10007DF60);
  }
  if (!SCPreferencesSetCallback((SCPreferencesRef)qword_10007DF60, (SCPreferencesCallBack)sub_10005C678, 0))
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  long long v22 = (const __SCPreferences *)qword_10007DF60;
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  if (SCPreferencesScheduleWithRunLoop(v22, Current, kCFRunLoopDefaultMode))
  {
    sub_10005D484((const __SCDynamicStore *)qword_10007DF68);
    sub_10005CEC0((const __SCDynamicStore *)qword_10007DF68, 0);
    return;
  }
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled()) {
    goto LABEL_26;
  }
LABEL_28:
  if (qword_10007DF68) {
    CFRelease((CFTypeRef)qword_10007DF68);
  }
  if (qword_10007DF60) {
    CFRelease((CFTypeRef)qword_10007DF60);
  }
  byte_10007DF70 = 1;
}

void sub_10005CEC0(const __SCDynamicStore *a1, uint64_t a2)
{
  CFDictionaryRef v3 = (const __CFDictionary *)SCDynamicStoreCopyValue(a1, (CFStringRef)qword_10007DFD8);
  if (v3)
  {
    CFDictionaryRef v4 = v3;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v4) == TypeID)
    {
      BOOL v6 = CFDictionaryContainsKey(v4, @"*QUIET*") != 0;
      BOOL v7 = CFDictionaryContainsKey(v4, @"*TIMEOUT*") != 0;
      CFPropertyListRef Value = CFDictionaryGetValue(v4, @"_Excluded_");
      CFTypeID v9 = CFArrayGetTypeID();
      if (Value && CFGetTypeID(Value) != v9) {
        CFPropertyListRef Value = 0;
      }
      if (Value == (const void *)qword_10007DF90
        || Value && qword_10007DF90 && CFEqual(Value, (CFTypeRef)qword_10007DF90)
        || !sub_100060804((const __CFArray *)Value, &qword_10007DFE0, (CFArrayRef *)&qword_10007DF90))
      {
        int v12 = 0;
      }
      else
      {
        if (qword_10007DF90)
        {
          CFStringRef v10 = CFStringCreateByCombiningStrings(0, (CFArrayRef)qword_10007DF90, @",");
        }
        else
        {
          CFStringRef v10 = @"<empty>";
          CFRetain(@"<empty>");
        }
        sub_10005C0B0();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v13 = _os_log_pack_size();
          __chkstk_darwin(v13, v14, v15);
          __error();
          uint64_t v16 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v16 = 138412290;
          *(void *)(v16 + 4) = v10;
          __SC_log_send();
        }
        CFRelease(v10);
        int v12 = 1;
      }
      uint64_t v17 = CFDictionaryGetValue(v4, @"_PreConfigured_");
      CFTypeID v18 = CFArrayGetTypeID();
      if (v17 && CFGetTypeID(v17) != v18) {
        uint64_t v17 = 0;
      }
      if (v17 == (const void *)qword_10007DF88
        || v17 && qword_10007DF88 && CFEqual(v17, (CFTypeRef)qword_10007DF88)
        || !sub_100060804((const __CFArray *)v17, (CFTypeRef *)&qword_10007DFB8, (CFArrayRef *)&qword_10007DF88))
      {
        int v11 = 0;
      }
      else
      {
        if (qword_10007DF88)
        {
          CFStringRef v19 = CFStringCreateByCombiningStrings(0, (CFArrayRef)qword_10007DF88, @",");
        }
        else
        {
          CFStringRef v19 = @"<empty>";
          CFRetain(@"<empty>");
        }
        sub_10005C0B0();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v20 = _os_log_pack_size();
          uint64_t v28 = (uint64_t)&v28;
          __chkstk_darwin(v20, v21, v22);
          __error();
          uint64_t v23 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v23 = 138412290;
          *(void *)(v23 + 4) = v19;
          __SC_log_send();
        }
        CFRelease(v19);
        int v11 = 1;
      }
    }
    else
    {
      int v11 = 0;
      int v12 = 0;
      BOOL v7 = 0;
      BOOL v6 = 0;
    }
    CFRelease(v4);
  }
  else
  {
    int v11 = 0;
    int v12 = 0;
    BOOL v7 = 0;
    BOOL v6 = 0;
  }
  if ((byte_10007DF70 & 1) == 0 && (v7 || v6))
  {
    if (v6) {
      byte_10007DF70 = 1;
    }
    sub_100060B5C((const __SCPreferences *)qword_10007DF60);
    if (v7 && !dword_10007DFE8++)
    {
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v25 = _os_log_pack_size();
        __chkstk_darwin(v25, v26, v27);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
        __SC_log_send();
      }
    }
  }
  if (a2)
  {
    if (v11 | v12) {
      sub_10005C678((SCPreferencesRef)qword_10007DF60, 2);
    }
  }
}

void sub_10005D390(const __SCPreferences *a1)
{
  CFPropertyListRef Value = SCPreferencesGetValue(a1, kSCPrefSystem);
  if (Value)
  {
    CFDictionaryRef v3 = Value;
    CFRetain(Value);
    __SCNetworkConfigurationSaveModel();
    SCPreferencesSetValue(a1, kSCPrefSystem, v3);
    CFRelease(v3);
  }
  else
  {
    __SCNetworkConfigurationSaveModel();
  }
}

void sub_10005D484(const __SCDynamicStore *a1)
{
  qword_10007DFF0 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
  qword_10007DFD8 = (uint64_t)SCDynamicStoreKeyCreate(0, @"%@InterfaceNamer", kSCDynamicStoreDomainPlugin);
  CFRunLoopSourceRef RunLoopSource = SCDynamicStoreCreateRunLoopSource(0, a1, 0);
  if (RunLoopSource)
  {
    CFDictionaryRef v3 = RunLoopSource;
    CFRunLoopRef Current = CFRunLoopGetCurrent();
    CFRunLoopAddSource(Current, v3, kCFRunLoopDefaultMode);
    CFRelease(v3);
    CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
    CFArrayAppendValue(Mutable, (const void *)qword_10007DFF0);
    CFArrayAppendValue(Mutable, (const void *)qword_10007DFD8);
    int v6 = SCDynamicStoreSetNotificationKeys(a1, Mutable, 0);
    CFRelease(Mutable);
    if (v6) {
      return;
    }
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled()) {
      goto LABEL_6;
    }
  }
  else
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
LABEL_6:
      uint64_t v7 = _os_log_pack_size();
      __chkstk_darwin(v7, v8, v9);
      __error();
      uint64_t v10 = _os_log_pack_fill();
      int v11 = SCError();
      int v12 = SCErrorString(v11);
      *(_DWORD *)uint64_t v10 = 136315138;
      *(void *)(v10 + 4) = v12;
      __SC_log_send();
    }
  }
  byte_10007DF70 = 1;
}

void sub_10005D6F4()
{
  uint64_t v0 = (const void *)sub_100059764();
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v1 = _os_log_pack_size();
    __chkstk_darwin(v1, v2, v3);
    __error();
    uint64_t v4 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v4 = 136315394;
    *(void *)(v4 + 4) = "categoryInformationChanged";
    *(_WORD *)(v4 + 12) = 2112;
    *(void *)(v4 + 14) = v0;
    __SC_log_send();
  }
  uint64_t v5 = (const void *)qword_10007DF78;
  if ((const void *)qword_10007DF78 == v0)
  {
    BOOL v6 = 0;
    uint64_t v5 = v0;
    if (v0) {
LABEL_8:
    }
      CFRelease(v5);
  }
  else
  {
    BOOL v6 = 1;
    if (v0 && qword_10007DF78)
    {
      int v7 = CFEqual((CFTypeRef)qword_10007DF78, v0);
      uint64_t v5 = (const void *)qword_10007DF78;
      BOOL v6 = v7 == 0;
    }
    if (v5) {
      goto LABEL_8;
    }
  }
  qword_10007DF78 = (uint64_t)v0;
  if (v6)
  {
    sub_10005C678((SCPreferencesRef)qword_10007DF60, 2);
    sub_100059924((uint64_t)v0);
  }
}

void sub_10005D888(const __SCPreferences *a1)
{
  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_10007DF88)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10007DF88);
    if (Count)
    {
      CFIndex v4 = Count;
      SCNetworkSetRef v5 = SCNetworkSetCopyCurrent(a1);
      if (v5)
      {
        SCNetworkSetRef v6 = v5;
        CFArrayRef v7 = SCNetworkServiceCopyAll(a1);
        if (v7)
        {
          CFArrayRef v8 = v7;
          CFIndex v9 = CFArrayGetCount(v7);
          if (v9 < 1)
          {
            CFRelease(v8);
          }
          else
          {
            CFIndex v10 = v9;
            uint64_t v33 = a1;
            uint64_t v34 = v6;
            int v11 = 0;
            CFIndex v12 = 0;
            CFIndex v35 = v4;
            do
            {
              CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v8, v12);
              Interface = SCNetworkServiceGetInterface(ValueAtIndex);
              if (Interface)
              {
                CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
                if (BSDName)
                {
                  CFStringRef v16 = BSDName;
                  v36.location = 0;
                  v36.length = v4;
                  if (CFArrayContainsValue((CFArrayRef)p_base_props[497], v36, BSDName))
                  {
                    sub_10005C0B0();
                    _SC_syslog_os_log_mapping();
                    if (__SC_log_enabled())
                    {
                      uint64_t v17 = _os_log_pack_size();
                      __chkstk_darwin(v17, v18, v19);
                      __error();
                      uint64_t v20 = _os_log_pack_fill();
                      *(_DWORD *)uint64_t v20 = 138412290;
                      *(void *)(v20 + 4) = v16;
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      __SC_log_send();
                      CFIndex v4 = v35;
                    }
                    if (SCNetworkServiceRemove(ValueAtIndex)
                      || (sub_10005C0B0(), _SC_syslog_os_log_mapping(), !__SC_log_enabled()))
                    {
                      int v11 = 1;
                    }
                    else
                    {
                      uint64_t v21 = _os_log_pack_size();
                      __chkstk_darwin(v21, v22, v23);
                      __error();
                      uint64_t v24 = _os_log_pack_fill();
                      int v25 = SCError();
                      uint64_t v26 = SCErrorString(v25);
                      *(_DWORD *)uint64_t v24 = 136315138;
                      *(void *)(v24 + 4) = v26;
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      __SC_log_send();
                      int v11 = 1;
                      CFIndex v4 = v35;
                    }
                  }
                }
              }
              ++v12;
            }
            while (v10 != v12);
            CFRelease(v8);
            SCNetworkSetRef v6 = v34;
            if (v11 && !SCPreferencesCommitChanges(v33) && SCError() != 30)
            {
              sub_10005C0B0();
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v27 = _os_log_pack_size();
                __chkstk_darwin(v27, v28, v29);
                __error();
                uint64_t v30 = _os_log_pack_fill();
                int v31 = SCError();
                uint64_t v32 = SCErrorString(v31);
                *(_DWORD *)uint64_t v30 = 136315138;
                *(void *)(v30 + 4) = v32;
                __SC_log_send();
              }
            }
          }
        }
        CFRelease(v6);
      }
    }
  }
}

void sub_10005DC24(const __SCPreferences *a1)
{
  p_base_props = &QoSMarkingController__classData.base_props;
  if (qword_10007DF90)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)qword_10007DF90);
    if (Count)
    {
      CFIndex v4 = Count;
      SCNetworkSetRef v5 = SCNetworkSetCopyCurrent(a1);
      if (v5)
      {
        SCNetworkSetRef v6 = v5;
        CFArrayRef v7 = SCNetworkSetCopyServices(v5);
        if (v7)
        {
          CFArrayRef v8 = v7;
          CFIndex v9 = CFArrayGetCount(v7);
          if (v9 >= 1)
          {
            CFIndex v10 = v9;
            CFIndex v11 = 0;
            CFIndex v26 = v4;
            uint64_t v27 = v6;
            do
            {
              CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v8, v11);
              Interface = SCNetworkServiceGetInterface(ValueAtIndex);
              if (Interface)
              {
                CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
                if (BSDName)
                {
                  CFStringRef v15 = BSDName;
                  v28.location = 0;
                  v28.length = v4;
                  if (CFArrayContainsValue((CFArrayRef)p_base_props[498], v28, BSDName))
                  {
                    sub_10005C0B0();
                    _SC_syslog_os_log_mapping();
                    if (__SC_log_enabled())
                    {
                      uint64_t v16 = _os_log_pack_size();
                      __chkstk_darwin(v16, v17, v18);
                      __error();
                      CFIndex v4 = v26;
                      uint64_t v19 = _os_log_pack_fill();
                      *(_DWORD *)uint64_t v19 = 138412290;
                      *(void *)(v19 + 4) = v15;
                      SCNetworkSetRef v6 = v27;
                      __SC_log_send();
                      p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                    }
                    if (!SCNetworkSetRemoveService(v6, ValueAtIndex))
                    {
                      sub_10005C0B0();
                      _SC_syslog_os_log_mapping();
                      if (__SC_log_enabled())
                      {
                        uint64_t v20 = _os_log_pack_size();
                        __chkstk_darwin(v20, v21, v22);
                        __error();
                        uint64_t v23 = _os_log_pack_fill();
                        int v24 = SCError();
                        int v25 = SCErrorString(v24);
                        *(_DWORD *)uint64_t v23 = 136315138;
                        *(void *)(v23 + 4) = v25;
                        CFIndex v4 = v26;
                        SCNetworkSetRef v6 = v27;
                        __SC_log_send();
                        p_base_props = (__objc2_prop_list **)(&QoSMarkingController__classData + 64);
                      }
                    }
                  }
                }
              }
              ++v11;
            }
            while (v10 != v11);
          }
          CFRelease(v8);
        }
        CFRelease(v6);
      }
    }
  }
}

void sub_10005DED4(const __SCDynamicStore *a1, const __SCPreferences *a2)
{
  CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"^%@.*", kSCDynamicStoreDomainSetup);
  CFArrayAppendValue(Mutable, v5);
  CFDictionaryRef v81 = a1;
  CFDictionaryRef v6 = SCDynamicStoreCopyMultiple(a1, 0, Mutable);
  CFRelease(Mutable);
  CFRelease(v5);
  if (v6)
  {
    qword_10007DF98 = (uint64_t)CFDictionaryCreateMutableCopy(0, 0, v6);
    CFRelease(v6);
  }
  else
  {
    qword_10007DF98 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  qword_10007DFA0 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  CFIndex Count = CFDictionaryGetCount((CFDictionaryRef)qword_10007DF98);
  if (Count < 1)
  {
    qword_10007DFA8 = (uint64_t)CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
  }
  else
  {
    CFIndex v8 = Count;
    CFIndex v9 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)qword_10007DF98, v9, 0);
    CFArrayRef v10 = CFArrayCreate(0, v9, v8, &kCFTypeArrayCallBacks);
    qword_10007DFA8 = (uint64_t)CFArrayCreateMutableCopy(0, 0, v10);
    CFRelease(v10);
    CFAllocatorDeallocate(0, v9);
  }
  qword_10007DFB0 = (uint64_t)CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFIndex v11 = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v13 = CFDateCreate(0, Current);
  CFArrayRef v14 = SCPreferencesCopyKeyList(a2);
  CFArrayRef v79 = v14;
  if (!v14 || !CFArrayGetCount(v14))
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_24;
    }
    uint64_t v24 = _os_log_pack_size();
    __chkstk_darwin(v24, v25, v26);
    __error();
    *(_WORD *)_os_log_pack_fill() = 0;
    goto LABEL_23;
  }
  CFStringRef v15 = kSCPrefSystem;
  CFPropertyListRef Value = SCPreferencesGetValue(a2, kSCPrefSystem);
  if (Value)
  {
    uint64_t v17 = Value;
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (CFGetTypeID(v17) != TypeID)
    {
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_24;
      }
LABEL_20:
      uint64_t v27 = _os_log_pack_size();
      __chkstk_darwin(v27, v28, v29);
      __error();
      uint64_t v30 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v30 = 138412290;
      *(void *)(v30 + 4) = v15;
      goto LABEL_23;
    }
    sub_1000603A8(a2, @"/", (const __CFDictionary *)v17);
  }
  CFStringRef v19 = (const __CFString *)SCPreferencesGetValue(a2, kSCPrefCurrentSet);
  if (v19)
  {
    CFStringRef v15 = v19;
    CFTypeID v20 = CFStringGetTypeID();
    if (CFGetTypeID(v15) == v20)
    {
      CFDictionaryRef v21 = SCPreferencesPathGetValue(a2, v15);
      if (!v21)
      {
        sub_10005C0B0();
        _SC_syslog_os_log_mapping();
        if (!__SC_log_enabled()) {
          goto LABEL_24;
        }
        uint64_t v74 = _os_log_pack_size();
        __chkstk_darwin(v74, v75, v76);
        __error();
        uint64_t v77 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v77 = 138412546;
        *(void *)(v77 + 4) = kSCPrefCurrentSet;
        *(_WORD *)(v77 + 12) = 2112;
        *(void *)(v77 + 14) = v15;
        goto LABEL_23;
      }
      CFDictionaryRef v22 = v21;
      CFTypeID v23 = CFDictionaryGetTypeID();
      if (CFGetTypeID(v22) == v23)
      {
        sub_1000603A8(a2, @"/", v22);
        CFDictionarySetValue(v11, kSCDynamicStorePropSetupCurrentSet, v15);
        goto LABEL_24;
      }
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_24;
      }
      goto LABEL_20;
    }
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_24;
    }
    uint64_t v31 = _os_log_pack_size();
    __chkstk_darwin(v31, v32, v33);
    __error();
    uint64_t v34 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v34 = 138412290;
    *(void *)(v34 + 4) = kSCPrefCurrentSet;
LABEL_23:
    __SC_log_send();
  }
LABEL_24:
  CFDateRef v78 = v13;
  CFDictionarySetValue(v11, kSCDynamicStorePropSetupLastUpdated, v13);
  CFDictionaryRef v80 = v11;
  CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DFB0, kSCDynamicStoreDomainSetup, v11);
  if (qword_10007DFB8)
  {
    CFIndex v35 = (__CFDictionary *)qword_10007DFB0;
    CFIndex v82 = CFArrayGetCount((CFArrayRef)qword_10007DFB8);
    if (v82 >= 1)
    {
      CFIndex v36 = 0;
      CFStringRef v83 = (const __CFString *)kSCPropNetServicePrimaryRank;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __SCNetworkInterface *)CFArrayGetValueAtIndex((CFArrayRef)qword_10007DFB8, v36);
        CFStringRef LocalizedDisplayName = SCNetworkInterfaceGetLocalizedDisplayName(ValueAtIndex);
        CFStringRef v39 = @"Preconfigured";
        if (LocalizedDisplayName) {
          CFStringRef v39 = LocalizedDisplayName;
        }
        CFStringRef v84 = v39;
        CFStringRef BSDName = (__CFString *)SCNetworkInterfaceGetBSDName(ValueAtIndex);
        CFStringRef InterfaceType = SCNetworkInterfaceGetInterfaceType(ValueAtIndex);
        if (InterfaceType) {
          CFStringRef v42 = InterfaceType;
        }
        else {
          CFStringRef v42 = kSCValNetInterfaceTypeEthernet;
        }
        CFStringRef v43 = (const __CFString *)_SC_copyInterfaceUUID();
        CFStringRef NetworkServiceEntity = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v43, kSCEntNetIPv4);
        TemplateOverrides = (const void *)__SCNetworkInterfaceGetTemplateOverrides();
        CFTypeID v46 = CFDictionaryGetTypeID();
        if (!TemplateOverrides || CFGetTypeID(TemplateOverrides) != v46)
        {
          TemplateOverrides = (const void *)qword_10007DFC0;
          if (!qword_10007DFC0)
          {
            keys = (void *)kSCPropNetIPv4ConfigMethod;
            values = (void *)kSCValNetIPv4ConfigMethodDHCP;
            TemplateOverrides = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            qword_10007DFC0 = (uint64_t)TemplateOverrides;
          }
        }
        CFDictionarySetValue(v35, NetworkServiceEntity, TemplateOverrides);
        if (NetworkServiceEntity) {
          CFRelease(NetworkServiceEntity);
        }
        CFStringRef v47 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v43, kSCEntNetIPv6);
        long long v48 = (const void *)__SCNetworkInterfaceGetTemplateOverrides();
        CFTypeID v49 = CFDictionaryGetTypeID();
        if (!v48 || CFGetTypeID(v48) != v49)
        {
          long long v48 = (const void *)qword_10007DFC8;
          if (!qword_10007DFC8)
          {
            keys = (void *)kSCPropNetIPv6ConfigMethod;
            values = (void *)kSCValNetIPv6ConfigMethodAutomatic;
            long long v48 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
            qword_10007DFC8 = (uint64_t)v48;
          }
        }
        CFDictionarySetValue(v35, v47, v48);
        if (v47) {
          CFRelease(v47);
        }
        CFStringRef v50 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v43, kSCEntNetInterface);
        keys = (void *)kSCPropNetInterfaceDeviceName;
        CFStringRef v92 = kSCPropNetInterfaceHardware;
        CFStringRef v93 = @"HiddenConfiguration";
        CFStringRef v94 = kSCPropNetInterfaceType;
        CFStringRef v95 = kSCPropUserDefinedName;
        values = BSDName;
        int v87 = (void *)v42;
        CFBooleanRef v88 = kCFBooleanTrue;
        CFStringRef v89 = v42;
        CFRange v51 = (__CFString *)v84;
        CFStringRef v90 = v84;
        CFDictionaryRef v52 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        CFDictionarySetValue(v35, v50, v52);
        if (v50) {
          CFRelease(v50);
        }
        if (v52) {
          CFRelease(v52);
        }
        CFStringRef v53 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v43, kSCEntNetProxies);
        keys = (void *)kSCPropNetProxiesExceptionsList;
        CFStringRef v92 = kSCPropNetProxiesFTPPassive;
        BOOL v54 = (const void *)qword_10007DFD0;
        if (!qword_10007DFD0)
        {
          *(_OWORD *)CFTypeID v96 = *(_OWORD *)&off_1000772C8;
          int valuePtr = 1;
          CFArrayRef v55 = CFArrayCreate(0, (const void **)v96, 2, &kCFTypeArrayCallBacks);
          values = v55;
          CFNumberRef v56 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          int v87 = v56;
          qword_10007DFD0 = (uint64_t)CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFRelease(v55);
          CFNumberRef v57 = v56;
          CFRange v51 = (__CFString *)v84;
          CFRelease(v57);
          BOOL v54 = (const void *)qword_10007DFD0;
        }
        CFDictionarySetValue(v35, v53, v54);
        if (v53) {
          CFRelease(v53);
        }
        int v58 = (void *)__SCNetworkInterfaceGetTemplateOverrides();
        CFTypeID v59 = CFStringGetTypeID();
        if (v58)
        {
          if (CFGetTypeID(v58) == v59) {
            CFDictionaryRef v60 = v58;
          }
          else {
            CFDictionaryRef v60 = 0;
          }
        }
        else
        {
          CFDictionaryRef v60 = 0;
        }
        CFStringRef v61 = SCDynamicStoreKeyCreateNetworkServiceEntity(0, kSCDynamicStoreDomainSetup, v43, 0);
        keys = (void *)kSCPropUserDefinedName;
        CFStringRef v92 = 0;
        values = v51;
        int v87 = 0;
        if (v60)
        {
          CFStringRef v92 = v83;
          int v87 = v60;
          CFIndex v62 = 2;
        }
        else
        {
          CFIndex v62 = 1;
        }
        CFDictionaryRef v63 = CFDictionaryCreate(0, (const void **)&keys, (const void **)&values, v62, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        CFDictionarySetValue(v35, v61, v63);
        if (v61) {
          CFRelease(v61);
        }
        if (v63) {
          CFRelease(v63);
        }
        if (v43) {
          CFRelease(v43);
        }
        ++v36;
      }
      while (v82 != v36);
    }
  }
  CFDictionaryApplyFunction((CFDictionaryRef)qword_10007DFB0, (CFDictionaryApplierFunction)sub_100060704, 0);
  CFIndex v64 = CFArrayGetCount((CFArrayRef)qword_10007DFA0);
  if (v64 >= 1)
  {
    CFIndex v65 = v64;
    for (CFIndex i = 0; i != v65; ++i)
    {
      CFTypeID v67 = CFArrayGetValueAtIndex((CFArrayRef)qword_10007DFA0, i);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_10007DFB0, v67);
    }
  }
  if (!SCDynamicStoreSetMultiple(v81, (CFDictionaryRef)qword_10007DFB0, (CFArrayRef)qword_10007DFA8, 0))
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v68 = _os_log_pack_size();
      __chkstk_darwin(v68, v69, v70);
      __error();
      uint64_t v71 = _os_log_pack_fill();
      int v72 = SCError();
      int v73 = SCErrorString(v72);
      *(_DWORD *)uint64_t v71 = 136315138;
      *(void *)(v71 + 4) = v73;
      __SC_log_send();
    }
  }
  CFRelease((CFTypeRef)qword_10007DF98);
  CFRelease((CFTypeRef)qword_10007DFB0);
  CFRelease((CFTypeRef)qword_10007DFA0);
  CFRelease((CFTypeRef)qword_10007DFA8);
  if (v80) {
    CFRelease(v80);
  }
  if (v78) {
    CFRelease(v78);
  }
  if (v79) {
    CFRelease(v79);
  }
}

uint64_t sub_10005ECB8(void *a1, SCPreferencesRef prefs)
{
  CFIndex v4 = SCNetworkSetCopyCurrent(prefs);
  a1[1] = v4;
  if (v4)
  {
    a1[2] = SCNetworkSetCopyServices(v4);
    *a1 = prefs;
    CFRetain(prefs);
    return 1;
  }
  else
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v6 = _os_log_pack_size();
      __chkstk_darwin(v6, v7, v8);
      __error();
      *(_WORD *)_os_log_pack_fill() = 0;
      __SC_log_send();
      return 0;
    }
  }
  return result;
}

void sub_10005EDF0(SCPreferencesRef *a1, const __CFDictionary *a2)
{
  if (!sub_10005C124(a2))
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
LABEL_8:
    uint64_t v8 = _os_log_pack_size();
    __chkstk_darwin(v8, v9, v10);
    __error();
    uint64_t v11 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v11 = 136315138;
    *(void *)(v11 + 4) = "handleCategoryInfo";
    __SC_log_send();
    return;
  }
  uint64_t v4 = SCNetworkCategoryCreate();
  if (!v4)
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    goto LABEL_8;
  }
  CFStringRef v5 = (const void *)v4;
  uint64_t v6 = sub_10005C22C(a2);
  if (v6) {
    CFArrayRef v7 = (const __CFArray *)SCNetworkCategoryCopyServices();
  }
  else {
    CFArrayRef v7 = 0;
  }
  char v12 = sub_10005C2B0(a2);
  CFDateRef v13 = sub_10005C1A8(a2);
  if (v6 && v7)
  {
    sub_10005F4DC((uint64_t)a1, (uint64_t)v5, (uint64_t)v6, v7, v13);
    CFRelease(v5);
LABEL_18:
    CFRelease(v7);
    return;
  }
  if (v13 && (v12 & 1) != 0) {
    sub_10005F074(a1, v13);
  }
  CFRelease(v5);
  if (v7) {
    goto LABEL_18;
  }
}

void sub_10005F074(SCPreferencesRef *a1, const void *a2)
{
  CFArrayRef v3 = a1[2];
  if (v3)
  {
    CFIndex Count = CFArrayGetCount(v3);
    if (Count < 1) {
      goto LABEL_21;
    }
    CFIndex v7 = Count;
    uint64_t v8 = 0;
    CFIndex v9 = 0;
    *(void *)&long long v6 = 136315650;
    long long v32 = v6;
    *(void *)&long long v6 = 136315906;
    long long v34 = v6;
    uint64_t v33 = a2;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(a1[2], v9);
      Interface = SCNetworkServiceGetInterface(ValueAtIndex);
      if (Interface)
      {
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
        if (BSDName)
        {
          CFStringRef v13 = BSDName;
          if (CFEqual(a2, BSDName))
          {
            if (v8)
            {
              int v14 = SCNetworkSetRemoveService(a1[1], ValueAtIndex);
              sub_10005C0B0();
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v15 = _os_log_pack_size();
                int v35 = v14;
                CFIndex v36 = &v32;
                __chkstk_darwin(v15, v16, v17);
                __error();
                uint64_t v18 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v18 = v34;
                CFStringRef v19 = "SUCCESS";
                if (!v35) {
                  CFStringRef v19 = "FAILED";
                }
                *(void *)(v18 + 4) = "ensureDefaultServiceExistsForInterface";
                *(_WORD *)(v18 + 12) = 2112;
                *(void *)(v18 + 14) = ValueAtIndex;
                *(_WORD *)(v18 + 22) = 2112;
                *(void *)(v18 + 24) = v13;
                *(_WORD *)(v18 + 32) = 2080;
                *(void *)(v18 + 34) = v19;
                a2 = v33;
                __SC_log_send();
              }
            }
            else
            {
              sub_10005C0B0();
              _SC_syslog_os_log_mapping();
              if (__SC_log_enabled())
              {
                uint64_t v20 = _os_log_pack_size();
                CFIndex v36 = &v32;
                __chkstk_darwin(v20, v21, v22);
                __error();
                uint64_t v23 = _os_log_pack_fill();
                *(_DWORD *)uint64_t v23 = v32;
                *(void *)(v23 + 4) = "ensureDefaultServiceExistsForInterface";
                *(_WORD *)(v23 + 12) = 2112;
                *(void *)(v23 + 14) = ValueAtIndex;
                *(_WORD *)(v23 + 22) = 2112;
                *(void *)(v23 + 24) = v13;
                __SC_log_send();
              }
              uint64_t v8 = ValueAtIndex;
            }
          }
        }
      }
      ++v9;
    }
    while (v7 != v9);
    if (!v8)
    {
LABEL_21:
      sub_10005FC34(a1, (uint64_t)a2);
      return;
    }
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    uint64_t v24 = _os_log_pack_size();
    __chkstk_darwin(v24, v25, v26);
    __error();
    uint64_t v27 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v27 = 136315394;
    *(void *)(v27 + 4) = "ensureDefaultServiceExistsForInterface";
    *(_WORD *)(v27 + 12) = 2112;
    *(void *)(v27 + 14) = a2;
  }
  else
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      return;
    }
    uint64_t v28 = _os_log_pack_size();
    __chkstk_darwin(v28, v29, v30);
    __error();
    uint64_t v31 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v31 = 136315138;
    *(void *)(v31 + 4) = "ensureDefaultServiceExistsForInterface";
  }
  __SC_log_send();
}

uint64_t sub_10005F4DC(uint64_t a1, uint64_t a2, uint64_t a3, CFArrayRef theArray, const void *a5)
{
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  uint64_t v68 = a1;
  CFIndex Count = CFArrayGetCount(theArray);
  __chkstk_darwin(Count, v8, v9);
  uint64_t v11 = (CFTypeRef *)((char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v10 >= 0x200) {
    size_t v12 = 512;
  }
  else {
    size_t v12 = v10;
  }
  bzero((char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  CFArrayRef v69 = theArray;
  CFIndex v13 = CFArrayGetCount(theArray);
  uint64_t v15 = v13;
  if (!a5)
  {
    if (v13 < 1) {
      return sub_1000600C0(v68, v11, 0);
    }
    uint64_t v16 = 0;
    CFIndex v40 = 0;
    *(void *)&long long v14 = 136315138;
    long long v64 = v14;
    *(void *)&long long v14 = 136315394;
    long long v65 = v14;
    *(void *)&long long v14 = 136315650;
    long long v63 = v14;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(v69, v40);
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v42 = _os_log_pack_size();
        __chkstk_darwin(v42, v43, v44);
        __error();
        uint64_t v45 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v45 = v65;
        *(void *)(v45 + 4) = "insertCategoryServices";
        *(_WORD *)(v45 + 12) = 2112;
        *(void *)(v45 + 14) = ValueAtIndex;
        __SC_log_send();
      }
      Interface = SCNetworkServiceGetInterface(ValueAtIndex);
      if (Interface)
      {
        CFStringRef v47 = Interface;
        CFStringRef BSDName = SCNetworkInterfaceGetBSDName(Interface);
        if (BSDName)
        {
          CFStringRef v49 = BSDName;
          if (v16 < 1)
          {
LABEL_32:
            v11[v16] = v49;
            sub_10005C0B0();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v51 = _os_log_pack_size();
              __chkstk_darwin(v51, v52, v53);
              __error();
              uint64_t v54 = _os_log_pack_fill();
              *(_DWORD *)uint64_t v54 = v63;
              *(void *)(v54 + 4) = "insertCategoryServices";
              *(_WORD *)(v54 + 12) = 2112;
              *(void *)(v54 + 14) = v49;
              *(_WORD *)(v54 + 22) = 1024;
              *(_DWORD *)(v54 + 24) = v16 + 1;
              __SC_log_send();
            }
            ++v16;
          }
          else
          {
            uint64_t v50 = 0;
            while (!CFEqual(v11[v50], v49))
            {
              if (v16 == ++v50) {
                goto LABEL_32;
              }
            }
          }
          goto LABEL_40;
        }
        sub_10005C0B0();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v59 = _os_log_pack_size();
          __chkstk_darwin(v59, v60, v61);
          __error();
          uint64_t v62 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v62 = v65;
          *(void *)(v62 + 4) = "insertCategoryServices";
          *(_WORD *)(v62 + 12) = 2112;
          *(void *)(v62 + 14) = v47;
          goto LABEL_39;
        }
      }
      else
      {
        sub_10005C0B0();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v55 = _os_log_pack_size();
          __chkstk_darwin(v55, v56, v57);
          __error();
          uint64_t v58 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v58 = v64;
          *(void *)(v58 + 4) = "insertCategoryServices";
LABEL_39:
          __SC_log_send();
        }
      }
LABEL_40:
      if (++v40 == v15) {
        goto LABEL_6;
      }
    }
  }
  *uint64_t v11 = a5;
  uint64_t v16 = 1;
LABEL_6:
  uint64_t result = sub_1000600C0(v68, v11, v16);
  if (v15 >= 1)
  {
    CFIndex v19 = 0;
    *(void *)&long long v18 = 136315650;
    long long v65 = v18;
    *(void *)&long long v18 = 136315394;
    long long v64 = v18;
    while (1)
    {
      uint64_t v20 = (const __SCNetworkService *)CFArrayGetValueAtIndex(v69, v19);
      uint64_t ServiceQoSMarkingPolicy = SCNetworkCategoryGetServiceQoSMarkingPolicy();
      int v22 = SCNetworkSetAddService(*(SCNetworkSetRef *)(v68 + 8), v20);
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      uint64_t result = __SC_log_enabled();
      if (v22) {
        break;
      }
      if (result)
      {
        uint64_t v34 = _os_log_pack_size();
        __chkstk_darwin(v34, v35, v36);
        __error();
        uint64_t v37 = _os_log_pack_fill();
        int v38 = SCError();
        CFStringRef v39 = SCErrorString(v38);
        *(_DWORD *)uint64_t v37 = v65;
        *(void *)(v37 + 4) = "insertCategoryServices";
        *(_WORD *)(v37 + 12) = 2112;
        *(void *)(v37 + 14) = v20;
        *(_WORD *)(v37 + 22) = 2080;
        *(void *)(v37 + 24) = v39;
LABEL_19:
        uint64_t result = __SC_log_send();
      }
LABEL_20:
      if (v15 == ++v19) {
        return result;
      }
    }
    if (result)
    {
      uint64_t v23 = _os_log_pack_size();
      __chkstk_darwin(v23, v24, v25);
      __error();
      uint64_t v26 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v26 = v64;
      *(void *)(v26 + 4) = "insertCategoryServices";
      *(_WORD *)(v26 + 12) = 2112;
      *(void *)(v26 + 14) = v20;
      __SC_log_send();
    }
    uint64_t result = (uint64_t)SCNetworkServiceGetInterface(v20);
    if (!result) {
      goto LABEL_20;
    }
    if (!ServiceQoSMarkingPolicy) {
      goto LABEL_20;
    }
    uint64_t v27 = result;
    int v28 = SCNetworkInterfaceSetQoSMarkingPolicy();
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (!result) {
      goto LABEL_20;
    }
    uint64_t v29 = _os_log_pack_size();
    __chkstk_darwin(v29, v30, v31);
    __error();
    uint64_t v32 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v32 = v65;
    uint64_t v33 = "";
    if (!v28) {
      uint64_t v33 = "FAILED to ";
    }
    *(void *)(v32 + 4) = "insertCategoryServices";
    *(_WORD *)(v32 + 12) = 2080;
    *(void *)(v32 + 14) = v33;
    *(_WORD *)(v32 + 22) = 2112;
    *(void *)(v32 + 24) = v27;
    goto LABEL_19;
  }
  return result;
}

void sub_10005FC34(SCPreferencesRef *a1, uint64_t a2)
{
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v4 = _os_log_pack_size();
    __chkstk_darwin(v4, v5, v6);
    __error();
    uint64_t v7 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v7 = 136315394;
    *(void *)(v7 + 4) = "establishServiceForInterface";
    *(_WORD *)(v7 + 12) = 2112;
    *(void *)(v7 + 14) = a2;
    __SC_log_send();
  }
  uint64_t v8 = (const __SCNetworkInterface *)_SCNetworkInterfaceCreateWithBSDName();
  if (v8)
  {
    uint64_t v9 = v8;
    unint64_t v10 = SCNetworkServiceCreate(*a1, v8);
    uint64_t v11 = _SC_copyInterfaceUUID();
    if (v11)
    {
      size_t v12 = (const void *)v11;
      if (!_SCNetworkServiceSetServiceID())
      {
        sub_10005C0B0();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v13 = _os_log_pack_size();
          __chkstk_darwin(v13, v14, v15);
          __error();
          uint64_t v16 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v16 = 136315394;
          *(void *)(v16 + 4) = "establishServiceForInterface";
          *(_WORD *)(v16 + 12) = 2112;
          *(void *)(v16 + 14) = a2;
          __SC_log_send();
        }
      }
      CFRelease(v12);
    }
    if (SCNetworkServiceEstablishDefaultConfiguration(v10))
    {
      if (SCNetworkSetAddService(a1[1], v10)) {
        goto LABEL_17;
      }
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled()) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      if (!__SC_log_enabled())
      {
LABEL_17:
        CFRelease(v10);
        CFRelease(v9);
        return;
      }
    }
    uint64_t v21 = _os_log_pack_size();
    __chkstk_darwin(v21, v22, v23);
    __error();
    uint64_t v24 = _os_log_pack_fill();
    int v25 = SCError();
    uint64_t v26 = SCErrorString(v25);
    *(_DWORD *)uint64_t v24 = 136315650;
    *(void *)(v24 + 4) = "establishServiceForInterface";
    *(_WORD *)(v24 + 12) = 2112;
    *(void *)(v24 + 14) = a2;
    *(_WORD *)(v24 + 22) = 2080;
    *(void *)(v24 + 24) = v26;
    __SC_log_send();
    goto LABEL_17;
  }
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v17 = _os_log_pack_size();
    __chkstk_darwin(v17, v18, v19);
    __error();
    uint64_t v20 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v20 = 136315394;
    *(void *)(v20 + 4) = "establishServiceForInterface";
    *(_WORD *)(v20 + 12) = 2112;
    *(void *)(v20 + 14) = a2;
    __SC_log_send();
  }
}

uint64_t sub_1000600C0(uint64_t a1, CFTypeRef *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  CFArrayRef v4 = *(const __CFArray **)(a1 + 16);
  if (v4)
  {
    uint64_t result = CFArrayGetCount(v4);
    if (result >= 1)
    {
      uint64_t v9 = result;
      CFIndex v10 = 0;
      *(void *)&long long v8 = 136315906;
      long long v25 = v8;
      uint64_t v26 = v3;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 16), v10);
        uint64_t result = (uint64_t)SCNetworkServiceGetInterface(ValueAtIndex);
        if (result)
        {
          uint64_t result = (uint64_t)SCNetworkInterfaceGetBSDName((SCNetworkInterfaceRef)result);
          if (a3 >= 1)
          {
            size_t v12 = (const void *)result;
            if (result)
            {
              uint64_t result = CFEqual(*a2, (CFTypeRef)result);
              if (result) {
                goto LABEL_12;
              }
              uint64_t v13 = 1;
              do
              {
                uint64_t v14 = v13;
                if (a3 == v13) {
                  break;
                }
                uint64_t result = CFEqual(a2[v13], v12);
                uint64_t v13 = v14 + 1;
              }
              while (!result);
              if (v14 < a3)
              {
LABEL_12:
                int v15 = SCNetworkSetRemoveService(*(SCNetworkSetRef *)(v3 + 8), ValueAtIndex);
                sub_10005C0B0();
                _SC_syslog_os_log_mapping();
                uint64_t result = __SC_log_enabled();
                if (result)
                {
                  uint64_t v16 = _os_log_pack_size();
                  int v28 = &v25;
                  __chkstk_darwin(v16, v17, v18);
                  int v27 = v15;
                  __error();
                  uint64_t v3 = v26;
                  uint64_t v19 = _os_log_pack_fill();
                  *(_DWORD *)uint64_t v19 = v25;
                  uint64_t v20 = "SUCCESS";
                  if (!v27) {
                    uint64_t v20 = "FAILED";
                  }
                  *(void *)(v19 + 4) = "removeServicesForInterfaces";
                  *(_WORD *)(v19 + 12) = 2112;
                  *(void *)(v19 + 14) = ValueAtIndex;
                  *(_WORD *)(v19 + 22) = 2112;
                  *(void *)(v19 + 24) = v12;
                  *(_WORD *)(v19 + 32) = 2080;
                  *(void *)(v19 + 34) = v20;
                  uint64_t result = __SC_log_send();
                }
              }
            }
          }
        }
        ++v10;
      }
      while (v10 != v9);
    }
  }
  else
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    uint64_t result = __SC_log_enabled();
    if (result)
    {
      uint64_t v21 = _os_log_pack_size();
      __chkstk_darwin(v21, v22, v23);
      __error();
      uint64_t v24 = _os_log_pack_fill();
      *(_DWORD *)uint64_t v24 = 136315138;
      *(void *)(v24 + 4) = "removeServicesForInterfaces";
      return __SC_log_send();
    }
  }
  return result;
}

void sub_1000603A8(const __SCPreferences *a1, const void *a2, const __CFDictionary *a3)
{
  CFDictionaryRef v3 = a3;
  BOOL value = 0;
  if (CFDictionaryGetValueIfPresent(a3, kSCResvLink, (const void **)&value)
    && (CFDictionaryRef v3 = SCPreferencesPathGetValue(a1, (CFStringRef)value)) == 0)
  {
    sub_10005C0B0();
    _SC_syslog_os_log_mapping();
    if (__SC_log_enabled())
    {
      uint64_t v9 = _os_log_pack_size();
      __chkstk_darwin(v9, v10, v11);
      __error();
      uint64_t v12 = _os_log_pack_fill();
      uint64_t v13 = value;
      int v14 = SCError();
      int v15 = SCErrorString(v14);
      *(_DWORD *)uint64_t v12 = 138412546;
      *(void *)(v12 + 4) = v13;
      *(_WORD *)(v12 + 12) = 2080;
      *(void *)(v12 + 14) = v15;
      __SC_log_send();
    }
  }
  else if (!CFDictionaryContainsKey(v3, kSCResvInactive))
  {
    CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"%@%@", kSCDynamicStoreDomainSetup, a2);
    CFDictionaryRef v7 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)qword_10007DFB0, v6);
    if (v7) {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, v7);
    }
    else {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    uint64_t v16 = MutableCopy;
    CFIndex Count = CFDictionaryGetCount(v3);
    if (Count >= 1)
    {
      CFIndex v18 = Count;
      CFStringRef v28 = v6;
      CFIndex v19 = 8 * Count;
      uint64_t v20 = (const void **)CFAllocatorAllocate(0, 8 * Count, 0);
      uint64_t v21 = (const void **)CFAllocatorAllocate(0, v19, 0);
      CFDictionaryGetKeysAndValues(v3, v20, v21);
      for (uint64_t i = 0; i != v18; ++i)
      {
        uint64_t v23 = v21[i];
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (v23 && CFGetTypeID(v23) == TypeID)
        {
          int v25 = CFEqual(a2, @"/");
          uint64_t v26 = "";
          if (!v25) {
            uint64_t v26 = "/";
          }
          CFStringRef v27 = CFStringCreateWithFormat(0, 0, @"%@%s%@", a2, v26, v20[i]);
          sub_1000603A8(a1, v27, v21[i]);
          CFRelease(v27);
        }
        else
        {
          CFDictionarySetValue(v16, v20[i], v21[i]);
        }
      }
      CFAllocatorDeallocate(0, v20);
      CFAllocatorDeallocate(0, v21);
      CFStringRef v6 = v28;
    }
    if (CFDictionaryGetCount(v16) >= 1) {
      CFDictionarySetValue((CFMutableDictionaryRef)qword_10007DFB0, v6, v16);
    }
    CFRelease(v16);
    CFRelease(v6);
  }
}

void sub_100060704(void *key, const void *a2)
{
  CFPropertyListRef Value = CFDictionaryGetValue((CFDictionaryRef)qword_10007DF98, key);
  if (Value && CFEqual(Value, a2)) {
    CFArrayAppendValue((CFMutableArrayRef)qword_10007DFA0, key);
  }
  CFArrayRef v5 = (const __CFArray *)qword_10007DFA8;
  v10.length = CFArrayGetCount((CFArrayRef)qword_10007DFA8);
  v10.location = 0;
  FirstIndexOfCFPropertyListRef Value = CFArrayGetFirstIndexOfValue(v5, v10, key);
  if (FirstIndexOfValue != -1)
  {
    CFIndex v7 = FirstIndexOfValue;
    long long v8 = (__CFArray *)qword_10007DFA8;
    CFArrayRemoveValueAtIndex(v8, v7);
  }
}

uint64_t sub_100060804(const __CFArray *a1, CFTypeRef *a2, CFArrayRef *a3)
{
  if (*a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  if (*a3)
  {
    CFIndex Count = CFArrayGetCount(*a3);
    CFRelease(*a3);
    *a3 = 0;
  }
  else
  {
    CFIndex Count = 0;
  }
  if (!a1 || (CFIndex v29 = CFArrayGetCount(a1), v29 < 1))
  {
    char v26 = 0;
    goto LABEL_29;
  }
  CFStringRef v27 = (__CFArray **)a2;
  char v26 = 0;
  CFIndex v6 = 0;
  CFArrayRef v28 = a1;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
    int v8 = 10;
    while (1)
    {
      if (v8 != 10) {
        usleep(0x4E20u);
      }
      uint64_t v9 = _SCNetworkInterfaceCreateWithBSDName();
      if (!v9)
      {
        sub_10005C0B0();
        _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
          uint64_t v15 = _os_log_pack_size();
          __chkstk_darwin(v15, v16, v17);
          __error();
          uint64_t v18 = _os_log_pack_fill();
          *(_DWORD *)uint64_t v18 = 138412290;
          *(void *)(v18 + 4) = ValueAtIndex;
          __SC_log_send();
        }
        goto LABEL_19;
      }
      CFRange v10 = (const void *)v9;
      if (_SCNetworkInterfaceGetIOPath()) {
        break;
      }
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        uint64_t v11 = _os_log_pack_size();
        __chkstk_darwin(v11, v12, v13);
        __error();
        uint64_t v14 = _os_log_pack_fill();
        *(_DWORD *)uint64_t v14 = 138412290;
        *(void *)(v14 + 4) = ValueAtIndex;
        __SC_log_send();
      }
      CFRelease(v10);
LABEL_19:
      if (!--v8)
      {
        a1 = v28;
        goto LABEL_26;
      }
    }
    CFArrayRef Mutable = *a3;
    if (!*a3)
    {
      CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      *a3 = Mutable;
    }
    CFArrayAppendValue(Mutable, ValueAtIndex);
    uint64_t v20 = *v27;
    a1 = v28;
    if (!*v27)
    {
      uint64_t v20 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      *CFStringRef v27 = v20;
    }
    CFArrayAppendValue(v20, v10);
    CFRelease(v10);
    char v26 = 1;
LABEL_26:
    ++v6;
  }
  while (v6 != v29);
LABEL_29:
  if (*a3) {
    BOOL v21 = CFArrayGetCount(*a3) == 0;
  }
  else {
    BOOL v21 = 1;
  }
  BOOL v22 = Count <= 0 || !v21;
  unsigned __int8 v23 = v26;
  if (!v22) {
    return 1;
  }
  return v23;
}

void sub_100060B5C(const __SCPreferences *a1)
{
  for (uint64_t i = a1; ; a1 = i)
  {
    if (SCPreferencesLock(a1, 1u))
    {
      CFPropertyListRef Value = SCPreferencesGetValue(i, @"Model");
      CFPropertyListRef v4 = (CFPropertyListRef)_SC_hw_model();
      if (Value)
      {
        CFPropertyListRef v5 = v4;
        if (Value != v4 && (!v4 || !CFEqual(Value, v4)))
        {
          sub_10005C0B0();
          _SC_syslog_os_log_mapping();
          if (__SC_log_enabled())
          {
            uint64_t v6 = _os_log_pack_size();
            __chkstk_darwin(v6, v7, v8);
            __error();
            uint64_t v9 = _os_log_pack_fill();
            *(_DWORD *)uint64_t v9 = 138412546;
            *(void *)(v9 + 4) = Value;
            *(_WORD *)(v9 + 12) = 2112;
            *(void *)(v9 + 14) = v5;
            __SC_log_send();
          }
          sub_10005D390(i);
        }
      }
      SCNetworkSetRef v10 = SCNetworkSetCopyCurrent(i);
      Default = v10;
      if (v10 || (Default = (const void *)_SCNetworkSetCreateDefault()) != 0)
      {
        if (SCNetworkSetEstablishDefaultConfiguration())
        {
          if (SCPreferencesCommitChanges(i))
          {
            sub_10005C0B0();
            _SC_syslog_os_log_mapping();
            if (__SC_log_enabled())
            {
              uint64_t v12 = _os_log_pack_size();
              __chkstk_darwin(v12, v13, v14);
              __error();
              *(_WORD *)_os_log_pack_fill() = 0;
              __SC_log_send();
            }
            goto LABEL_24;
          }
          int v22 = SCError();
          if (v22 == 30)
          {
            byte_10007DF80 = 1;
LABEL_24:
            SCPreferencesApplyChanges(i);
            SCPreferencesUnlock(i);
LABEL_34:
            CFRelease(Default);
            return;
          }
          int v15 = v22;
          SCPreferencesApplyChanges(i);
        }
        else
        {
          int v15 = SCError();
          if (!v10) {
            SCNetworkSetRemove((SCNetworkSetRef)Default);
          }
        }
      }
      else
      {
        int v15 = SCError();
      }
      sub_10005C0B0();
      _SC_syslog_os_log_mapping();
      int v23 = __SC_log_enabled();
      if (v15)
      {
        if (!v23) {
          goto LABEL_33;
        }
        uint64_t v24 = _os_log_pack_size();
        __chkstk_darwin(v24, v25, v26);
        __error();
        uint64_t v27 = _os_log_pack_fill();
        CFArrayRef v28 = SCErrorString(v15);
        *(_DWORD *)uint64_t v27 = 136315138;
        *(void *)(v27 + 4) = v28;
      }
      else
      {
        if (!v23) {
          goto LABEL_33;
        }
        uint64_t v29 = _os_log_pack_size();
        __chkstk_darwin(v29, v30, v31);
        __error();
        *(_WORD *)_os_log_pack_fill() = 0;
      }
      __SC_log_send();
LABEL_33:
      SCPreferencesUnlock(i);
      if (!Default) {
        return;
      }
      goto LABEL_34;
    }
    int v2 = SCError();
    if (v2 != 3005) {
      break;
    }
    SCPreferencesSynchronize(i);
  }
  int v16 = v2;
  sub_10005C0B0();
  _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    uint64_t v17 = _os_log_pack_size();
    __chkstk_darwin(v17, v18, v19);
    __error();
    uint64_t v20 = _os_log_pack_fill();
    BOOL v21 = SCErrorString(v16);
    *(_DWORD *)uint64_t v20 = 136315138;
    *(void *)(v20 + 4) = v21;
    __SC_log_send();
  }
}

id sub_100061028()
{
  uint64_t v0 = (void *)qword_10007E008;
  if (!qword_10007E008)
  {
    os_log_t v1 = os_log_create("com.apple.SystemConfiguration", "QoSMarking");
    int v2 = (void *)qword_10007E008;
    qword_10007E008 = (uint64_t)v1;

    uint64_t v0 = (void *)qword_10007E008;
  }

  return v0;
}

void sub_10006368C(id a1)
{
  qword_10007E010 = objc_alloc_init(QoSMarkingController);

  _objc_release_x1();
}

void sub_100063FC8(__CFBundle *a1)
{
  int v2 = sub_100061028();
  os_log_type_t v3 = _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(v2, v3);
    CFPropertyListRef v4 = (long long *)_os_log_send_and_compose_impl();
    __SC_log_send2();
    if (v4 != &v34) {
      free(v4);
    }
  }

  CFPropertyListRef v5 = sub_100061028();
  os_log_type_t v6 = _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    os_log_type_enabled(v5, v6);
    uint64_t v7 = v5;
    CFBundleGetIdentifier(a1);
    uint64_t v8 = (long long *)_os_log_send_and_compose_impl();

    __SC_log_send2();
    if (v8 != &v34) {
      free(v8);
    }
  }

  if (objc_opt_class())
  {
    qword_10007E020 = (uint64_t)SCDynamicStoreKeyCreateNetworkInterface(0, kSCDynamicStoreDomainState);
    CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (InfoDictionary && CFGetTypeID(InfoDictionary) == TypeID)
    {
      CFPropertyListRef Value = (void *)CFDictionaryGetValue(InfoDictionary, @"QoSMarking_AppleAudioVideoCalls_BundleIDs");
      CFTypeID v12 = CFArrayGetTypeID();
      if (Value)
      {
        if (CFGetTypeID(Value) == v12) {
          uint64_t v13 = Value;
        }
        else {
          uint64_t v13 = 0;
        }
      }
      else
      {
        uint64_t v13 = 0;
      }
      objc_storeStrong((id *)&qword_10007DFF8, v13);
      uint64_t v14 = (void *)CFDictionaryGetValue(InfoDictionary, @"QoSMarking_AppleAudioVideoCalls_ExecutablePaths");
      CFTypeID v15 = CFArrayGetTypeID();
      if (v14)
      {
        if (CFGetTypeID(v14) == v15) {
          int v16 = v14;
        }
        else {
          int v16 = 0;
        }
      }
      else
      {
        int v16 = 0;
      }
      objc_storeStrong((id *)&qword_10007E000, v16);
    }
    SCDynamicStoreRef v17 = SCDynamicStoreCreate(0, @"QoS Marking Configuraton plug-in", (SCDynamicStoreCallBack)sub_1000646F0, 0);
    if (v17)
    {
      uint64_t v18 = v17;
      CFArrayRef Mutable = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      uint64_t v20 = CFArrayCreateMutable(0, 0, &kCFTypeArrayCallBacks);
      CFArrayAppendValue(Mutable, (const void *)qword_10007E020);
      CFStringRef NetworkInterfaceEntity = SCDynamicStoreKeyCreateNetworkInterfaceEntity(0, kSCDynamicStoreDomainSetup, kSCCompAnyRegex, kSCEntNetQoSMarkingPolicy);
      CFArrayAppendValue(v20, NetworkInterfaceEntity);
      CFRelease(NetworkInterfaceEntity);
      LODWORD(NetworkInterfaceEntity) = SCDynamicStoreSetNotificationKeys(v18, Mutable, v20);
      CFRelease(Mutable);
      CFRelease(v20);
      if (!NetworkInterfaceEntity)
      {
        uint64_t v25 = sub_100061028();
        os_log_type_t v26 = _SC_syslog_os_log_mapping();
        if (__SC_log_enabled()) {
          goto LABEL_33;
        }
        goto LABEL_35;
      }
      int v22 = qword_10007E040;
      if (!qword_10007E040)
      {
        dispatch_queue_t v23 = dispatch_queue_create("com.apple.SystemConfiguration.QoSMarking", 0);
        uint64_t v24 = (void *)qword_10007E040;
        qword_10007E040 = (uint64_t)v23;

        int v22 = qword_10007E040;
      }
      if (!SCDynamicStoreSetDispatchQueue(v18, v22))
      {
        uint64_t v25 = sub_100061028();
        os_log_type_t v26 = _SC_syslog_os_log_mapping();
        if (__SC_log_enabled())
        {
LABEL_33:
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          long long v40 = 0u;
          long long v41 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          long long v36 = 0u;
          long long v37 = 0u;
          long long v34 = 0u;
          long long v35 = 0u;
          os_log_type_enabled(v25, v26);
          uint64_t v25 = v25;
          int v32 = SCError();
          SCErrorString(v32);
          uint64_t v33 = (long long *)_os_log_send_and_compose_impl();

          __SC_log_send2();
          if (v33 != &v34) {
            free(v33);
          }
        }
LABEL_35:

        CFRelease(v18);
      }
    }
    else
    {
      uint64_t v27 = sub_100061028();
      os_log_type_t v28 = _SC_syslog_os_log_mapping();
      if (__SC_log_enabled())
      {
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        os_log_type_enabled(v27, v28);
        uint64_t v29 = v27;
        int v30 = SCError();
        SCErrorString(v30);
        uint64_t v31 = (long long *)_os_log_send_and_compose_impl();

        __SC_log_send2();
        if (v31 != &v34) {
          free(v31);
        }
      }
    }
  }
}

void sub_1000646F0(SCDynamicStoreRef store, CFArrayRef keys)
{
  if (!qword_10007E038) {
    qword_10007E038 = (uint64_t)SCDynamicStoreKeyCreate(0, @"%@/%@/%@/", kSCDynamicStoreDomainSetup, kSCCompNetwork, kSCCompInterface);
  }
  CFDictionaryRef v4 = SCDynamicStoreCopyMultiple(store, keys, 0);
  CFIndex Count = CFArrayGetCount(keys);
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    os_log_type_t v28 = (void *)kSCPropNetQoSMarkingWhitelistedAppIdentifiers;
    uint64_t v27 = (void *)kSCPropNetQoSMarkingAllowListAppIdentifiers;
    do
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(keys, v7);
      if (CFEqual(ValueAtIndex, (CFTypeRef)qword_10007E020))
      {
        if (v4)
        {
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, ValueAtIndex);
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (Value)
          {
            if (CFGetTypeID(Value) == TypeID)
            {
              uint64_t v11 = CFDictionaryGetValue(Value, kSCPropNetInterfaces);
              CFTypeID v12 = CFArrayGetTypeID();
              if (v11)
              {
                if (CFGetTypeID(v11) == v12)
                {
                  uint64_t v14 = +[QoSMarkingController sharedController];
                  [v14 setInterfaces:v11];
                }
              }
            }
          }
        }
        else
        {
          CFDictionaryGetTypeID();
        }
      }
      else
      {
        CFStringRef v15 = (const __CFString *)qword_10007E038;
        if (CFStringHasPrefix(ValueAtIndex, (CFStringRef)qword_10007E038))
        {
          MutableCFDictionaryRef Copy = CFStringCreateMutableCopy(0, 0, ValueAtIndex);
          v30.length = CFStringGetLength(v15);
          v30.CFIndex location = 0;
          CFStringDelete(MutableCopy, v30);
          CFIndex location = CFStringFind(MutableCopy, @"/", 0).location;
          if (location != -1)
          {
            CFIndex v18 = location;
            v31.length = CFStringGetLength(MutableCopy) - location;
            v31.CFIndex location = v18;
            CFStringDelete(MutableCopy, v31);
          }
          if (MutableCopy)
          {
            if (v4)
            {
              CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(v4, ValueAtIndex);
              CFDictionaryRef v20 = v19;
              if (v19)
              {
                BOOL v21 = CFDictionaryGetValue(v19, v28);
                if (v21)
                {
                  int v22 = v21;
                  dispatch_queue_t v23 = CFDictionaryGetValue(v20, v27);
                  uint64_t v24 = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v20);
                  CFDictionaryRef v20 = v24;
                  if (!v23) {
                    CFDictionarySetValue(v24, v27, v22);
                  }
                  CFDictionaryRemoveValue(v20, v28);
                }
                else
                {
                  CFRetain(v20);
                }
              }
            }
            else
            {
              CFDictionaryRef v20 = 0;
            }
            os_log_type_t v26 = +[QoSMarkingController sharedController];
            [v26 setPolicy:v20 forInterface:MutableCopy];

            if (v20) {
              CFRelease(v20);
            }
            CFRelease(MutableCopy);
          }
        }
      }
      ++v7;
    }
    while (v6 != v7);
  }
  if (v4)
  {
    CFRelease(v4);
  }
}

void sub_100064A74(id a1)
{
  byte_10007E028 = os_variant_has_internal_content();
}

void sub_100064AD0(const char *a1, int a2)
{
  int v11 = a2;
  if (sysctlbyname(a1, 0, 0, &v11, 4uLL) != -1)
  {
    os_log_type_t v3 = sub_100061028();
    os_log_type_t v4 = _SC_syslog_os_log_mapping();
    if (!__SC_log_enabled()) {
      goto LABEL_10;
    }
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    os_log_type_enabled(v3, v4);
    int v12 = 136315394;
    uint64_t v13 = (void *)a1;
    __int16 v14 = 1024;
    int v15 = v11;
    CFPropertyListRef v5 = (long long *)_os_log_send_and_compose_impl();
    __SC_log_send2();
    if (v5 == &v16) {
      goto LABEL_10;
    }
    CFIndex v6 = v5;
    goto LABEL_9;
  }
  if (*__error() == 2) {
    return;
  }
  os_log_type_t v3 = sub_100061028();
  os_log_type_t v7 = _SC_syslog_os_log_mapping();
  if (__SC_log_enabled())
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    os_log_type_enabled(v3, v7);
    os_log_type_t v3 = v3;
    uint64_t v8 = __error();
    uint64_t v9 = strerror(*v8);
    int v12 = 136315138;
    uint64_t v13 = v9;
    SCNetworkSetRef v10 = (long long *)_os_log_send_and_compose_impl();

    __SC_log_send2();
    if (v10 != &v16)
    {
      CFIndex v6 = v10;
LABEL_9:
      free(v6);
    }
  }
LABEL_10:
}

void sub_100064D88()
{
  __assert_rtn("pushNotifications", "_SCD.c", 525, "theSession != NULL");
}

void sub_100064DB4()
{
  __assert_rtn("getSession", "session.c", 334, "server != MACH_PORT_NULL");
}

void sub_100064DE0(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "cleanup : %5u", (uint8_t *)v2, 8u);
}

void sub_100064E58()
{
  __assert_rtn("patternRemoveSession", "pattern.c", 423, "pInfo != NULL");
}

void sub_100064E84(int *a1, uint64_t *a2, os_log_t log)
{
  int v3 = *a1;
  uint64_t v4 = *a2;
  v5[0] = 67109378;
  v5[1] = v3;
  __int16 v6 = 2112;
  uint64_t v7 = v4;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "open    : %5u : %@", (uint8_t *)v5, 0x12u);
}

void sub_100064F14(uint64_t a1, NSObject *a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "close   : %5u", (uint8_t *)v3, 8u);
}

void sub_100064F90(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = *(unsigned __int8 *)(a1 + 44);
  int v4 = *(_DWORD *)(a1 + 40);
  int v6 = 136315650;
  if (v3) {
    CFPropertyListRef v5 = "t ";
  }
  else {
    CFPropertyListRef v5 = "  ";
  }
  uint64_t v7 = v5;
  __int16 v8 = 1024;
  int v9 = v4;
  __int16 v10 = 2112;
  uint64_t v11 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "add  %s : %5u : %@", (uint8_t *)&v6, 0x1Cu);
}

void sub_100065044()
{
  sub_10000E730();
  sub_10000E748((void *)&_mh_execute_header, v0, v1, "*copy   : %5u : %@");
}

void sub_1000650B8()
{
  sub_10000E730();
  sub_10000E748((void *)&_mh_execute_header, v0, v1, "*copy   : %5u : %@");
}

void sub_100065124()
{
  __assert_rtn("iterateRegistryBusy", "ifnamer.c", 4007, "newNodes != NULL");
}

void sub_100065150()
{
  __assert_rtn("removeNamingRequestAtIndex", "ifnamer.c", 2947, "S_deferred_list != NULL");
}

void sub_10006517C()
{
}

void sub_1000651A8()
{
  __assert_rtn("watchTrustedStatus", "ifnamer.c", 2484, "key != NULL");
}

void sub_1000651D4()
{
  __assert_rtn("dns_configuration_set", "dns-configuration.c", 1631, "resolvers != NULL");
}

void sub_100065200()
{
  __assert_rtn("add_default_resolver", "dns-configuration.c", 1202, "myDefault != NULL");
}

void sub_10006522C()
{
  __assert_rtn("nwi_state_get_last_ifstate", "network_state_information_priv.c", 250, "state != NULL");
}

void sub_100065258()
{
  __assert_rtn("_nwi_state_update_interface_generations", "network_state_information_priv.c", 669, "old_ifstate != NULL");
}

void sub_100065284()
{
  __assert_rtn("_nwi_state_update_interface_generations", "network_state_information_priv.c", 693, "old_ifstate != NULL");
}

void sub_1000652B0()
{
  __assert_rtn("IPMonitorProcessChanges", "ip_plugin.c", 8608, "services_info != NULL");
}

void sub_1000652DC()
{
  __assert_rtn("ElectionResultsGetPrimary", "ip_plugin.c", 7467, "services_info != NULL");
}

void sub_100065308()
{
  __assert_rtn("accumulate_dns_servers", "ip_plugin.c", 4630, "addr != NULL");
}

void sub_100065334()
{
  __assert_rtn("add_reachability_flags_to_candidate", "ip_plugin.c", 7414, "candidate != NULL");
}

void sub_100065360()
{
  __assert_rtn("add_reachability_flags_to_candidate", "ip_plugin.c", 7415, "services_info != NULL");
}

void sub_10006538C()
{
  __assert_rtn("update_hostname", "set-hostname.c", 522, "localHostName != NULL");
}

void sub_1000653B8()
{
  __assert_rtn("ptr_query_callback", "set-hostname.c", 381, "localHostName != NULL");
}

void sub_1000653E4()
{
  __assert_rtn("CategorySessionRelease", "CategoryManagerServer.c", 287, "session->in_list == false");
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return _CC_SHA256_Final(md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return _CC_SHA256_Init(c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return _CC_SHA256_Update(c, data, len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return _CFAllocatorAllocate(allocator, size, hint);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return _CFArrayContainsValue(theArray, range, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreate(allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return _CFArrayCreateCopy(allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return _CFArrayCreateMutable(allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return _CFArrayCreateMutableCopy(allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return _CFArrayGetCount(theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return _CFArrayGetFirstIndexOfValue(theArray, range, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return _CFArrayGetTypeID();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return _CFArrayGetValueAtIndex(theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return _CFBundleCopyBundleURL(bundle);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return _CFBundleCreate(allocator, bundleURL);
}

CFArrayRef CFBundleCreateBundlesFromDirectory(CFAllocatorRef allocator, CFURLRef directoryURL, CFStringRef bundleType)
{
  return _CFBundleCreateBundlesFromDirectory(allocator, directoryURL, bundleType);
}

void *__cdecl CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName)
{
  return _CFBundleGetFunctionPointerForName(bundle, functionName);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return _CFBundleGetIdentifier(bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return _CFBundleGetInfoDictionary(bundle);
}

Boolean CFBundleLoadExecutableAndReturnError(CFBundleRef bundle, CFErrorRef *error)
{
  return _CFBundleLoadExecutableAndReturnError(bundle, error);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return _CFDataCreateMutable(allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return _CFDataGetMutableBytePtr(theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return _CFDateCompare(theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return _CFDateCreate(allocator, at);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  return _CFDateGetAbsoluteTime(theDate);
}

CFTypeID CFDateGetTypeID(void)
{
  return _CFDateGetTypeID();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryContainsKey(theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreate(allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateCopy(allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateMutableCopy(allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return _CFDictionaryGetTypeID();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return _CFDictionaryGetValueIfPresent(theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFDictionaryRef CFErrorCopyUserInfo(CFErrorRef err)
{
  return _CFErrorCopyUserInfo(err);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return _CFErrorGetCode(err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return _CFErrorGetDomain(err);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return _CFGetAllocator(cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFMachPortRef CFMachPortCreate(CFAllocatorRef allocator, CFMachPortCallBack callout, CFMachPortContext *context, Boolean *shouldFreeInfo)
{
  return _CFMachPortCreate(allocator, callout, context, shouldFreeInfo);
}

CFRunLoopSourceRef CFMachPortCreateRunLoopSource(CFAllocatorRef allocator, CFMachPortRef port, CFIndex order)
{
  return _CFMachPortCreateRunLoopSource(allocator, port, order);
}

mach_port_t CFMachPortGetPort(CFMachPortRef port)
{
  return _CFMachPortGetPort(port);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return _CFNumberCompare(number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return _CFPropertyListCreateData(allocator, propertyList, format, options, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

void CFRunLoopAddTimer(CFRunLoopRef rl, CFRunLoopTimerRef timer, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return _CFRunLoopGetCurrent();
}

void CFRunLoopPerformBlock(CFRunLoopRef rl, CFTypeRef mode, void *block)
{
}

void CFRunLoopRun(void)
{
}

CFRunLoopSourceRef CFRunLoopSourceCreate(CFAllocatorRef allocator, CFIndex order, CFRunLoopSourceContext *context)
{
  return _CFRunLoopSourceCreate(allocator, order, context);
}

void CFRunLoopSourceInvalidate(CFRunLoopSourceRef source)
{
}

void CFRunLoopSourceSignal(CFRunLoopSourceRef source)
{
}

CFRunLoopTimerRef CFRunLoopTimerCreate(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, CFRunLoopTimerCallBack callout, CFRunLoopTimerContext *context)
{
  return _CFRunLoopTimerCreate(allocator, fireDate, interval, flags, order, callout, context);
}

CFRunLoopTimerRef CFRunLoopTimerCreateWithHandler(CFAllocatorRef allocator, CFAbsoluteTime fireDate, CFTimeInterval interval, CFOptionFlags flags, CFIndex order, void *block)
{
  return _CFRunLoopTimerCreateWithHandler(allocator, fireDate, interval, flags, order, block);
}

void CFRunLoopTimerInvalidate(CFRunLoopTimerRef timer)
{
}

Boolean CFRunLoopTimerIsValid(CFRunLoopTimerRef timer)
{
  return _CFRunLoopTimerIsValid(timer);
}

void CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef timer, CFAbsoluteTime fireDate)
{
}

void CFRunLoopWakeUp(CFRunLoopRef rl)
{
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return _CFSetContainsValue(theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return _CFSetCreateMutable(allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return _CFSetGetCount(theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveAllValues(CFMutableSetRef theSet)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFSetSetValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return _CFStringCompare(theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return _CFStringCreateArrayBySeparatingStrings(alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return _CFStringCreateByCombiningStrings(alloc, theArray, separatorString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return _CFStringCreateExternalRepresentation(alloc, theString, encoding, lossByte);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return _CFStringCreateMutable(alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return _CFStringCreateMutableCopy(alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return _CFStringCreateWithFormat(alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return _CFStringCreateWithSubstring(alloc, str, range);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFRange v5 = _CFStringFind(theString, stringToFind, compareOptions);
  CFIndex length = v5.length;
  CFIndex location = v5.location;
  result.CFIndex length = length;
  result.CFIndex location = location;
  return result;
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return _CFStringFindWithOptions(theString, stringToFind, rangeToSearch, searchOptions, result);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return _CFStringGetBytes(theString, range, encoding, lossByte, isExternalRepresentation, buffer, maxBufLen, usedBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return _CFStringGetCString(theString, buffer, bufferSize, encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return _CFStringGetCStringPtr(theString, encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return _CFStringGetMaximumSizeForEncoding(length, encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return _CFStringGetTypeID();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return _CFStringHasPrefix(theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return _CFStringHasSuffix(theString, suffix);
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return _CFURLCreateFromFileSystemRepresentation(allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return _CFURLCreateWithBytes(allocator, URLBytes, length, encoding, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return _CFURLCreateWithString(allocator, URLString, baseURL);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return _CFURLGetFileSystemRepresentation(url, resolveAgainstBase, buffer, maxBufLen);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return _CFURLGetString(anURL);
}

CFDataRef DHCPInfoGetOptionData(CFDictionaryRef info, UInt8 code)
{
  return _DHCPInfoGetOptionData(info, code);
}

FSEventStreamRef FSEventStreamCreate(CFAllocatorRef allocator, FSEventStreamCallback callback, FSEventStreamContext *context, CFArrayRef pathsToWatch, FSEventStreamEventId sinceWhen, CFTimeInterval latency, FSEventStreamCreateFlags flags)
{
  return _FSEventStreamCreate(allocator, callback, context, pathsToWatch, sinceWhen, latency, flags);
}

void FSEventStreamSetDispatchQueue(FSEventStreamRef streamRef, dispatch_queue_t q)
{
}

Boolean FSEventStreamStart(FSEventStreamRef streamRef)
{
  return _FSEventStreamStart(streamRef);
}

kern_return_t IOConnectSetCFProperties(io_connect_t connect, CFTypeRef properties)
{
  return _IOConnectSetCFProperties(connect, properties);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return _IOIteratorNext(iterator);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return _IONotificationPortCreate(mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return _IONotificationPortGetRunLoopSource(notify);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

kern_return_t IORegistryCreateIterator(mach_port_t mainPort, const io_name_t plane, IOOptionBits options, io_iterator_t *iterator)
{
  return _IORegistryCreateIterator(mainPort, plane, options, iterator);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperty(entry, key, allocator, options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return _IORegistryEntryFromPath(mainPort, path);
}

kern_return_t IORegistryEntryGetLocationInPlane(io_registry_entry_t entry, const io_name_t plane, io_name_t location)
{
  return _IORegistryEntryGetLocationInPlane(entry, plane, location);
}

kern_return_t IORegistryEntryGetName(io_registry_entry_t entry, io_name_t name)
{
  return _IORegistryEntryGetName(entry, name);
}

CFMutableDictionaryRef IORegistryEntryIDMatching(uint64_t entryID)
{
  return _IORegistryEntryIDMatching(entryID);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntrySearchCFProperty(entry, plane, key, allocator, options);
}

kern_return_t IORegistryIteratorEnterEntry(io_iterator_t iterator)
{
  return _IORegistryIteratorEnterEntry(iterator);
}

kern_return_t IORegistryIteratorExitEntry(io_iterator_t iterator)
{
  return _IORegistryIteratorExitEntry(iterator);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return _IOServiceAddInterestNotification(notifyPort, service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return _IOServiceAddMatchingNotification(notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

kern_return_t IOServiceGetBusyState(io_service_t service, uint32_t *busyState)
{
  return _IOServiceGetBusyState(service, busyState);
}

uint64_t IOServiceGetBusyStateAndTime()
{
  return _IOServiceGetBusyStateAndTime();
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return _IOServiceGetMatchingServices(mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

uint64_t PAEntitlementDictionaryBelongsToSystemProcess()
{
  return _PAEntitlementDictionaryBelongsToSystemProcess();
}

uint64_t SCBridgeInterfaceCopyAll()
{
  return _SCBridgeInterfaceCopyAll();
}

uint64_t SCBridgeInterfaceGetMemberInterfaces()
{
  return _SCBridgeInterfaceGetMemberInterfaces();
}

uint64_t SCBridgeInterfaceSetMemberInterfaces()
{
  return _SCBridgeInterfaceSetMemberInterfaces();
}

CFStringRef SCDynamicStoreCopyLocalHostName(SCDynamicStoreRef store)
{
  return _SCDynamicStoreCopyLocalHostName(store);
}

CFDictionaryRef SCDynamicStoreCopyMultiple(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return _SCDynamicStoreCopyMultiple(store, keys, patterns);
}

uint64_t SCDynamicStoreCopyProxiesWithOptions()
{
  return _SCDynamicStoreCopyProxiesWithOptions();
}

CFPropertyListRef SCDynamicStoreCopyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreCopyValue(store, key);
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return _SCDynamicStoreCreate(allocator, name, callout, context);
}

CFRunLoopSourceRef SCDynamicStoreCreateRunLoopSource(CFAllocatorRef allocator, SCDynamicStoreRef store, CFIndex order)
{
  return _SCDynamicStoreCreateRunLoopSource(allocator, store, order);
}

CFStringRef SCDynamicStoreKeyCreate(CFAllocatorRef allocator, CFStringRef fmt, ...)
{
  return _SCDynamicStoreKeyCreate(allocator, fmt);
}

CFStringRef SCDynamicStoreKeyCreateComputerName(CFAllocatorRef allocator)
{
  return _SCDynamicStoreKeyCreateComputerName(allocator);
}

CFStringRef SCDynamicStoreKeyCreateHostNames(CFAllocatorRef allocator)
{
  return _SCDynamicStoreKeyCreateHostNames(allocator);
}

CFStringRef SCDynamicStoreKeyCreateNetworkGlobalEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkGlobalEntity(allocator, domain, entity);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterface(CFAllocatorRef allocator, CFStringRef domain)
{
  return _SCDynamicStoreKeyCreateNetworkInterface(allocator, domain);
}

CFStringRef SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef ifname, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkInterfaceEntity(allocator, domain, ifname, entity);
}

CFStringRef SCDynamicStoreKeyCreateNetworkServiceEntity(CFAllocatorRef allocator, CFStringRef domain, CFStringRef serviceID, CFStringRef entity)
{
  return _SCDynamicStoreKeyCreateNetworkServiceEntity(allocator, domain, serviceID, entity);
}

Boolean SCDynamicStoreNotifyValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreNotifyValue(store, key);
}

Boolean SCDynamicStoreRemoveValue(SCDynamicStoreRef store, CFStringRef key)
{
  return _SCDynamicStoreRemoveValue(store, key);
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return _SCDynamicStoreSetDispatchQueue(store, queue);
}

Boolean SCDynamicStoreSetMultiple(SCDynamicStoreRef store, CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFArrayRef keysToNotify)
{
  return _SCDynamicStoreSetMultiple(store, keysToSet, keysToRemove, keysToNotify);
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return _SCDynamicStoreSetNotificationKeys(store, keys, patterns);
}

Boolean SCDynamicStoreSetValue(SCDynamicStoreRef store, CFStringRef key, CFPropertyListRef value)
{
  return _SCDynamicStoreSetValue(store, key, value);
}

int SCError(void)
{
  return _SCError();
}

const char *__cdecl SCErrorString(int status)
{
  return _SCErrorString(status);
}

uint64_t SCNetworkCategoryCopyServices()
{
  return _SCNetworkCategoryCopyServices();
}

uint64_t SCNetworkCategoryCreate()
{
  return _SCNetworkCategoryCreate();
}

uint64_t SCNetworkCategoryGetServiceQoSMarkingPolicy()
{
  return _SCNetworkCategoryGetServiceQoSMarkingPolicy();
}

CFArrayRef SCNetworkInterfaceCopyAll(void)
{
  return _SCNetworkInterfaceCopyAll();
}

Boolean SCNetworkInterfaceCopyMTU(SCNetworkInterfaceRef interface, int *mtu_cur, int *mtu_min, int *mtu_max)
{
  return _SCNetworkInterfaceCopyMTU(interface, mtu_cur, mtu_min, mtu_max);
}

Boolean SCNetworkInterfaceCopyMediaOptions(SCNetworkInterfaceRef interface, CFDictionaryRef *current, CFDictionaryRef *active, CFArrayRef *available, Boolean filter)
{
  return _SCNetworkInterfaceCopyMediaOptions(interface, current, active, available, filter);
}

uint64_t SCNetworkInterfaceGetAutoConfigure()
{
  return _SCNetworkInterfaceGetAutoConfigure();
}

CFStringRef SCNetworkInterfaceGetBSDName(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetBSDName(interface);
}

CFStringRef SCNetworkInterfaceGetHardwareAddressString(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetHardwareAddressString(interface);
}

SCNetworkInterfaceRef SCNetworkInterfaceGetInterface(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetInterface(interface);
}

CFStringRef SCNetworkInterfaceGetInterfaceType(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetInterfaceType(interface);
}

CFStringRef SCNetworkInterfaceGetLocalizedDisplayName(SCNetworkInterfaceRef interface)
{
  return _SCNetworkInterfaceGetLocalizedDisplayName(interface);
}

CFTypeID SCNetworkInterfaceGetTypeID(void)
{
  return _SCNetworkInterfaceGetTypeID();
}

uint64_t SCNetworkInterfaceSetEnableLowDataMode()
{
  return _SCNetworkInterfaceSetEnableLowDataMode();
}

uint64_t SCNetworkInterfaceSetQoSMarkingPolicy()
{
  return _SCNetworkInterfaceSetQoSMarkingPolicy();
}

uint64_t SCNetworkInterfaceSupportsLowDataMode()
{
  return _SCNetworkInterfaceSupportsLowDataMode();
}

uint64_t SCNetworkProxiesCopyMatching()
{
  return _SCNetworkProxiesCopyMatching();
}

uint64_t SCNetworkProxiesCreateProxyAgentData()
{
  return _SCNetworkProxiesCreateProxyAgentData();
}

uint64_t SCNetworkReachabilityCopyResolvedAddress()
{
  return _SCNetworkReachabilityCopyResolvedAddress();
}

uint64_t SCNetworkReachabilityCreateWithOptions()
{
  return _SCNetworkReachabilityCreateWithOptions();
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  return _SCNetworkReachabilityGetFlags(target, flags);
}

Boolean SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  return _SCNetworkReachabilitySetCallback(target, callout, context);
}

Boolean SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef target, dispatch_queue_t queue)
{
  return _SCNetworkReachabilitySetDispatchQueue(target, queue);
}

CFArrayRef SCNetworkServiceCopyAll(SCPreferencesRef prefs)
{
  return _SCNetworkServiceCopyAll(prefs);
}

SCNetworkServiceRef SCNetworkServiceCreate(SCPreferencesRef prefs, SCNetworkInterfaceRef interface)
{
  return _SCNetworkServiceCreate(prefs, interface);
}

Boolean SCNetworkServiceEstablishDefaultConfiguration(SCNetworkServiceRef service)
{
  return _SCNetworkServiceEstablishDefaultConfiguration(service);
}

Boolean SCNetworkServiceGetEnabled(SCNetworkServiceRef service)
{
  return _SCNetworkServiceGetEnabled(service);
}

SCNetworkInterfaceRef SCNetworkServiceGetInterface(SCNetworkServiceRef service)
{
  return _SCNetworkServiceGetInterface(service);
}

Boolean SCNetworkServiceRemove(SCNetworkServiceRef service)
{
  return _SCNetworkServiceRemove(service);
}

Boolean SCNetworkSetAddService(SCNetworkSetRef set, SCNetworkServiceRef service)
{
  return _SCNetworkSetAddService(set, service);
}

SCNetworkSetRef SCNetworkSetCopyCurrent(SCPreferencesRef prefs)
{
  return _SCNetworkSetCopyCurrent(prefs);
}

CFArrayRef SCNetworkSetCopyServices(SCNetworkSetRef set)
{
  return _SCNetworkSetCopyServices(set);
}

uint64_t SCNetworkSetEstablishDefaultConfiguration()
{
  return _SCNetworkSetEstablishDefaultConfiguration();
}

uint64_t SCNetworkSetEstablishDefaultInterfaceConfiguration()
{
  return _SCNetworkSetEstablishDefaultInterfaceConfiguration();
}

Boolean SCNetworkSetRemove(SCNetworkSetRef set)
{
  return _SCNetworkSetRemove(set);
}

Boolean SCNetworkSetRemoveService(SCNetworkSetRef set, SCNetworkServiceRef service)
{
  return _SCNetworkSetRemoveService(set, service);
}

Boolean SCPreferencesApplyChanges(SCPreferencesRef prefs)
{
  return _SCPreferencesApplyChanges(prefs);
}

Boolean SCPreferencesCommitChanges(SCPreferencesRef prefs)
{
  return _SCPreferencesCommitChanges(prefs);
}

CFArrayRef SCPreferencesCopyKeyList(SCPreferencesRef prefs)
{
  return _SCPreferencesCopyKeyList(prefs);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return _SCPreferencesCreate(allocator, name, prefsID);
}

uint64_t SCPreferencesCreateWithOptions()
{
  return _SCPreferencesCreateWithOptions();
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return _SCPreferencesGetValue(prefs, key);
}

Boolean SCPreferencesLock(SCPreferencesRef prefs, Boolean wait)
{
  return _SCPreferencesLock(prefs, wait);
}

CFDictionaryRef SCPreferencesPathGetValue(SCPreferencesRef prefs, CFStringRef path)
{
  return _SCPreferencesPathGetValue(prefs, path);
}

Boolean SCPreferencesPathSetValue(SCPreferencesRef prefs, CFStringRef path, CFDictionaryRef value)
{
  return _SCPreferencesPathSetValue(prefs, path, value);
}

Boolean SCPreferencesScheduleWithRunLoop(SCPreferencesRef prefs, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
  return _SCPreferencesScheduleWithRunLoop(prefs, runLoop, runLoopMode);
}

Boolean SCPreferencesSetCallback(SCPreferencesRef prefs, SCPreferencesCallBack callout, SCPreferencesContext *context)
{
  return _SCPreferencesSetCallback(prefs, callout, context);
}

Boolean SCPreferencesSetValue(SCPreferencesRef prefs, CFStringRef key, CFPropertyListRef value)
{
  return _SCPreferencesSetValue(prefs, key, value);
}

void SCPreferencesSynchronize(SCPreferencesRef prefs)
{
}

Boolean SCPreferencesUnlock(SCPreferencesRef prefs)
{
  return _SCPreferencesUnlock(prefs);
}

uint64_t SCPrint()
{
  return _SCPrint();
}

CFArrayRef SCVLANInterfaceCopyAll(SCPreferencesRef prefs)
{
  return _SCVLANInterfaceCopyAll(prefs);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

CFDictionaryRef SecTaskCopyValuesForEntitlements(SecTaskRef task, CFArrayRef entitlements, CFErrorRef *error)
{
  return _SecTaskCopyValuesForEntitlements(task, entitlements, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

uint32_t SecTaskGetCodeSignStatus(SecTaskRef task)
{
  return _SecTaskGetCodeSignStatus(task);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return __CFRuntimeCreateInstance();
}

uint64_t _CFRuntimeRegisterClass()
{
  return __CFRuntimeRegisterClass();
}

uint64_t _SCBridgeInterfaceUpdateConfiguration()
{
  return __SCBridgeInterfaceUpdateConfiguration();
}

uint64_t _SCControlPrefsCreateWithQueue()
{
  return __SCControlPrefsCreateWithQueue();
}

uint64_t _SCDPluginExecInit()
{
  return __SCDPluginExecInit();
}

uint64_t _SCDynamicStoreCacheClose()
{
  return __SCDynamicStoreCacheClose();
}

uint64_t _SCDynamicStoreCacheCommitChanges()
{
  return __SCDynamicStoreCacheCommitChanges();
}

uint64_t _SCDynamicStoreCacheOpen()
{
  return __SCDynamicStoreCacheOpen();
}

uint64_t _SCDynamicStoreSetSessionWatchLimit()
{
  return __SCDynamicStoreSetSessionWatchLimit();
}

uint64_t _SCErrorSet()
{
  return __SCErrorSet();
}

uint64_t _SCNetworkInterfaceCopyInterfaceInfo()
{
  return __SCNetworkInterfaceCopyInterfaceInfo();
}

uint64_t _SCNetworkInterfaceCreateWithBSDName()
{
  return __SCNetworkInterfaceCreateWithBSDName();
}

uint64_t _SCNetworkInterfaceCreateWithIONetworkInterfaceObject()
{
  return __SCNetworkInterfaceCreateWithIONetworkInterfaceObject();
}

uint64_t _SCNetworkInterfaceGetHardwareAddress()
{
  return __SCNetworkInterfaceGetHardwareAddress();
}

uint64_t _SCNetworkInterfaceGetIOInterfaceNamePrefix()
{
  return __SCNetworkInterfaceGetIOInterfaceNamePrefix();
}

uint64_t _SCNetworkInterfaceGetIOInterfaceType()
{
  return __SCNetworkInterfaceGetIOInterfaceType();
}

uint64_t _SCNetworkInterfaceGetIOInterfaceUnit()
{
  return __SCNetworkInterfaceGetIOInterfaceUnit();
}

uint64_t _SCNetworkInterfaceGetIOPath()
{
  return __SCNetworkInterfaceGetIOPath();
}

uint64_t _SCNetworkInterfaceGetIORegistryEntryID()
{
  return __SCNetworkInterfaceGetIORegistryEntryID();
}

uint64_t _SCNetworkInterfaceIsApplePreconfigured()
{
  return __SCNetworkInterfaceIsApplePreconfigured();
}

uint64_t _SCNetworkInterfaceIsBluetoothPAN()
{
  return __SCNetworkInterfaceIsBluetoothPAN();
}

uint64_t _SCNetworkInterfaceIsBuiltin()
{
  return __SCNetworkInterfaceIsBuiltin();
}

uint64_t _SCNetworkInterfaceIsEphemeral()
{
  return __SCNetworkInterfaceIsEphemeral();
}

uint64_t _SCNetworkInterfaceIsHiddenConfiguration()
{
  return __SCNetworkInterfaceIsHiddenConfiguration();
}

uint64_t _SCNetworkInterfaceIsHiddenInterface()
{
  return __SCNetworkInterfaceIsHiddenInterface();
}

uint64_t _SCNetworkInterfaceIsSelfNamed()
{
  return __SCNetworkInterfaceIsSelfNamed();
}

uint64_t _SCNetworkInterfaceIsTetheredHotspot()
{
  return __SCNetworkInterfaceIsTetheredHotspot();
}

uint64_t _SCNetworkInterfaceIsTrustRequired()
{
  return __SCNetworkInterfaceIsTrustRequired();
}

uint64_t _SCNetworkServiceSetServiceID()
{
  return __SCNetworkServiceSetServiceID();
}

uint64_t _SCNetworkSetCreateDefault()
{
  return __SCNetworkSetCreateDefault();
}

uint64_t _SCPreferencesCopyComputerName()
{
  return __SCPreferencesCopyComputerName();
}

uint64_t _SCSerialize()
{
  return __SCSerialize();
}

uint64_t _SCSerializeData()
{
  return __SCSerializeData();
}

uint64_t _SCUnserialize()
{
  return __SCUnserialize();
}

uint64_t _SCUnserializeData()
{
  return __SCUnserializeData();
}

uint64_t _SCUnserializeString()
{
  return __SCUnserializeString();
}

uint64_t _SCVLANInterfaceUpdateConfiguration()
{
  return __SCVLANInterfaceUpdateConfiguration();
}

uint64_t _SC_CFStringIsValidDNSName()
{
  return __SC_CFStringIsValidDNSName();
}

uint64_t _SC_cfstring_to_cstring()
{
  return __SC_cfstring_to_cstring();
}

uint64_t _SC_copyInterfaceUUID()
{
  return __SC_copyInterfaceUUID();
}

uint64_t _SC_crash()
{
  return __SC_crash();
}

uint64_t _SC_hw_model()
{
  return __SC_hw_model();
}

uint64_t _SC_sendMachMessage()
{
  return __SC_sendMachMessage();
}

uint64_t _SC_sockaddr_to_string()
{
  return __SC_sockaddr_to_string();
}

uint64_t _SC_string_to_sockaddr()
{
  return __SC_string_to_sockaddr();
}

uint64_t _SC_syslog_os_log_mapping()
{
  return __SC_syslog_os_log_mapping();
}

uint64_t _SC_trimDomain()
{
  return __SC_trimDomain();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t __SCDynamicStoreCreatePrivate()
{
  return ___SCDynamicStoreCreatePrivate();
}

uint64_t __SCNetworkConfigurationSaveModel()
{
  return ___SCNetworkConfigurationSaveModel();
}

uint64_t __SCNetworkConfigurationUpgrade()
{
  return ___SCNetworkConfigurationUpgrade();
}

uint64_t __SCNetworkInterfaceCreateCapabilities()
{
  return ___SCNetworkInterfaceCreateCapabilities();
}

uint64_t __SCNetworkInterfaceCreateMediaOptions()
{
  return ___SCNetworkInterfaceCreateMediaOptions();
}

uint64_t __SCNetworkInterfaceGetEnableLowDataModeValue()
{
  return ___SCNetworkInterfaceGetEnableLowDataModeValue();
}

uint64_t __SCNetworkInterfaceGetTemplateOverrides()
{
  return ___SCNetworkInterfaceGetTemplateOverrides();
}

uint64_t __SC_log_enabled()
{
  return ___SC_log_enabled();
}

uint64_t __SC_log_send()
{
  return ___SC_log_send();
}

uint64_t __SC_log_send2()
{
  return ___SC_log_send2();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return ___error();
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

uint64_t __memset_chk()
{
  return ___memset_chk();
}

uint64_t __strlcat_chk()
{
  return ___strlcat_chk();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

void _exit(int a1)
{
}

uint64_t _nwi_state_force_refresh()
{
  return __nwi_state_force_refresh();
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _os_log_pack_fill()
{
  return __os_log_pack_fill();
}

uint64_t _os_log_pack_size()
{
  return __os_log_pack_size();
}

uint64_t _os_log_send_and_compose_impl()
{
  return __os_log_send_and_compose_impl();
}

int asprintf(char **a1, const char *a2, ...)
{
  return _asprintf(a1, a2);
}

int atoi(const char *a1)
{
  return _atoi(a1);
}

uid_t audit_token_to_euid(audit_token_t *atoken)
{
  return _audit_token_to_euid(atoken);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return _audit_token_to_pid(atoken);
}

uint64_t ba_is_process_extension()
{
  return _ba_is_process_extension();
}

kern_return_t bootstrap_check_in(mach_port_t bp, const name_t service_name, mach_port_t *sp)
{
  return _bootstrap_check_in(bp, service_name, sp);
}

const char *__cdecl bootstrap_strerror(kern_return_t r)
{
  return _bootstrap_strerror(r);
}

void bzero(void *a1, size_t a2)
{
}

int chdir(const char *a1)
{
  return _chdir(a1);
}

int close(int a1)
{
  return _close(a1);
}

int closedir(DIR *a1)
{
  return _closedir(a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_after_f(dispatch_time_t when, dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

uint64_t dispatch_mach_cancel()
{
  return _dispatch_mach_cancel();
}

uint64_t dispatch_mach_create_f()
{
  return _dispatch_mach_create_f();
}

uint64_t dispatch_mach_mig_demux()
{
  return _dispatch_mach_mig_demux();
}

uint64_t dispatch_mach_msg_get_msg()
{
  return _dispatch_mach_msg_get_msg();
}

uint64_t dispatch_mach_notify_no_senders()
{
  return _dispatch_mach_notify_no_senders();
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

uint64_t dispatch_set_qos_class_fallback()
{
  return _dispatch_set_qos_class_fallback();
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return _dispatch_workloop_create_inactive(label);
}

uint64_t dns_configuration_copy()
{
  return _dns_configuration_copy();
}

uint64_t dns_configuration_free()
{
  return _dns_configuration_free();
}

uint64_t dns_configuration_notify_key()
{
  return _dns_configuration_notify_key();
}

int dup2(int a1, int a2)
{
  return _dup2(a1, a2);
}

void exit(int a1)
{
}

int fclose(FILE *a1)
{
  return _fclose(a1);
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

FILE *__cdecl fdopen(int a1, const char *a2)
{
  return _fdopen(a1, a2);
}

int fflush(FILE *a1)
{
  return _fflush(a1);
}

char *__cdecl fgetln(FILE *a1, size_t *a2)
{
  return _fgetln(a1, a2);
}

uint64_t fileport_makefd()
{
  return _fileport_makefd();
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

pid_t fork(void)
{
  return _fork();
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return _getaddrinfo(a1, a2, a3, a4);
}

int getdtablesize(void)
{
  return _getdtablesize();
}

char *__cdecl getenv(const char *a1)
{
  return _getenv(a1);
}

int gethostname(char *a1, size_t a2)
{
  return _gethostname(a1, a2);
}

int getifaddrs(ifaddrs **a1)
{
  return _getifaddrs(a1);
}

int getopt_long(int a1, char *const *a2, const char *a3, const option *a4, int *a5)
{
  return _getopt_long(a1, a2, a3, a4, a5);
}

pid_t getpid(void)
{
  return _getpid();
}

pid_t getppid(void)
{
  return _getppid();
}

int gettimeofday(timeval *a1, void *a2)
{
  return _gettimeofday(a1, a2);
}

uid_t getuid(void)
{
  return _getuid();
}

kern_return_t host_get_multiuser_config_flags(host_t host, uint32_t *multiuser_flags)
{
  return _host_get_multiuser_config_flags(host, multiuser_flags);
}

void if_freenameindex(if_nameindex *a1)
{
}

char *__cdecl if_indextoname(unsigned int a1, char *a2)
{
  return _if_indextoname(a1, a2);
}

if_nameindex *if_nameindex(void)
{
  return _if_nameindex();
}

unsigned int if_nametoindex(const char *a1)
{
  return _if_nametoindex(a1);
}

int inet_aton(const char *a1, in_addr *a2)
{
  return _inet_aton(a1, a2);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return _inet_ntop(a1, a2, a3, a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return _inet_pton(a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return _ioctl(a1, a2);
}

int kill(pid_t a1, int a2)
{
  return _kill(a1, a2);
}

uint64_t lockdown_is_host_trusted()
{
  return _lockdown_is_host_trusted();
}

uint64_t mach_absolute_time(void)
{
  return _mach_absolute_time();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return _mach_error_string(error_value);
}

mach_port_t mach_host_self(void)
{
  return _mach_host_self();
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
}

kern_return_t mach_port_construct(ipc_space_t task, mach_port_options_ptr_t options, mach_port_context_t context, mach_port_name_t *name)
{
  return _mach_port_construct(task, options, context, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return _mach_port_deallocate(task, name);
}

kern_return_t mach_port_destruct(ipc_space_t task, mach_port_name_t name, mach_port_delta_t srdelta, mach_port_context_t guard)
{
  return _mach_port_destruct(task, name, srdelta, guard);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return _mach_port_insert_right(task, name, poly, polyPoly);
}

kern_return_t mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt)
{
  return _mach_port_set_attributes(task, name, flavor, port_info, port_infoCnt);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_realloc(ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

uint64_t network_config_check_interface_settings()
{
  return _network_config_check_interface_settings();
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

uint64_t nw_interface_create_with_index()
{
  return _nw_interface_create_with_index();
}

uint64_t nw_nat64_prefixes_resolver_cancel()
{
  return _nw_nat64_prefixes_resolver_cancel();
}

uint64_t nw_nat64_prefixes_resolver_create()
{
  return _nw_nat64_prefixes_resolver_create();
}

uint64_t nw_nat64_prefixes_resolver_set_cancel_handler()
{
  return _nw_nat64_prefixes_resolver_set_cancel_handler();
}

uint64_t nw_nat64_prefixes_resolver_set_update_handler()
{
  return _nw_nat64_prefixes_resolver_set_update_handler();
}

uint64_t nw_nat64_prefixes_resolver_start()
{
  return _nw_nat64_prefixes_resolver_start();
}

uint64_t nw_nat64_write_prefix_to_string()
{
  return _nw_nat64_write_prefix_to_string();
}

nw_parameters_t nw_parameters_create(void)
{
  return _nw_parameters_create();
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
}

uint64_t nw_parameters_set_required_address_family()
{
  return _nw_parameters_set_required_address_family();
}

void nw_release(void *obj)
{
}

uint64_t nwi_ifstate_get_flags()
{
  return _nwi_ifstate_get_flags();
}

uint64_t nwi_ifstate_get_generation()
{
  return _nwi_ifstate_get_generation();
}

uint64_t nwi_ifstate_get_ifname()
{
  return _nwi_ifstate_get_ifname();
}

uint64_t nwi_ifstate_get_next()
{
  return _nwi_ifstate_get_next();
}

uint64_t nwi_ifstate_get_reachability_flags()
{
  return _nwi_ifstate_get_reachability_flags();
}

uint64_t nwi_ifstate_get_signature()
{
  return _nwi_ifstate_get_signature();
}

uint64_t nwi_ifstate_get_vpn_server()
{
  return _nwi_ifstate_get_vpn_server();
}

uint64_t nwi_state_get_first_ifstate()
{
  return _nwi_state_get_first_ifstate();
}

uint64_t nwi_state_get_generation()
{
  return _nwi_state_get_generation();
}

uint64_t nwi_state_get_ifstate()
{
  return _nwi_state_get_ifstate();
}

uint64_t nwi_state_get_interface_names()
{
  return _nwi_state_get_interface_names();
}

uint64_t nwi_state_get_notify_key()
{
  return _nwi_state_get_notify_key();
}

uint64_t nwi_state_get_reachability_flags()
{
  return _nwi_state_get_reachability_flags();
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_enumerationMutation(id obj)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return _opendir(a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_state_add_handler()
{
  return _os_state_add_handler();
}

uint64_t os_variant_has_internal_content()
{
  return _os_variant_has_internal_content();
}

uint64_t os_variant_is_darwinos()
{
  return _os_variant_is_darwinos();
}

void perror(const char *a1)
{
}

int proc_pidpath_audittoken(audit_token_t *audittoken, void *buffer, uint32_t buffersize)
{
  return _proc_pidpath_audittoken(audittoken, buffer, buffersize);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return _pthread_attr_destroy(a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return _pthread_attr_init(a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return _pthread_attr_setdetachstate(a1, a2);
}

int pthread_attr_setscope(pthread_attr_t *a1, int a2)
{
  return _pthread_attr_setscope(a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return _pthread_create(a1, a2, a3, a4);
}

int pthread_setname_np(const char *a1)
{
  return _pthread_setname_np(a1);
}

uint64_t random(void)
{
  return _random();
}

dirent *__cdecl readdir(DIR *a1)
{
  return _readdir(a1);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return _reallocf(__ptr, __size);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return _realpath_DARWIN_EXTSN(a1, a2);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return _recv(a1, a2, a3, a4);
}

int regcomp(regex_t *a1, const char *a2, int a3)
{
  return _regcomp(a1, a2, a3);
}

size_t regerror(int a1, const regex_t *a2, char *a3, size_t a4)
{
  return _regerror(a1, a2, a3, a4);
}

int regexec(const regex_t *a1, const char *a2, size_t a3, regmatch_t __pmatch[], int a5)
{
  return _regexec(a1, a2, a3, __pmatch, a5);
}

void regfree(regex_t *a1)
{
}

uint64_t sa_dst_compare_no_dependencies()
{
  return _sa_dst_compare_no_dependencies();
}

int sem_close(sem_t *a1)
{
  return _sem_close(a1);
}

sem_t *sem_open(const char *a1, int a2, ...)
{
  return _sem_open(a1, a2);
}

int sethostname(const char *a1, int a2)
{
  return _sethostname(a1, a2);
}

int setiopolicy_np(int a1, int a2, int a3)
{
  return _setiopolicy_np(a1, a2, a3);
}

pid_t setsid(void)
{
  return _setsid();
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return _setsockopt(a1, a2, a3, a4, a5);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return _sigaction(a1, a2, a3);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return _socket(a1, a2, a3);
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return _strcasecmp(a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return _strchr(__s, __c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return _strdup(__s1);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return _strlcat(__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return _strlcpy(__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return _strncmp(__s1, __s2, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return _strrchr(__s, __c);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return _strsep(__stringp, __delim);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return _strstr(__s1, __s2);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return _strtol(__str, __endptr, __base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

sysdir_search_path_enumeration_state sysdir_get_next_search_path_enumeration(sysdir_search_path_enumeration_state state, char *path)
{
  return _sysdir_get_next_search_path_enumeration(state, path);
}

sysdir_search_path_enumeration_state sysdir_start_search_path_enumeration(sysdir_search_path_directory_t dir, sysdir_search_path_domain_mask_t domainMask)
{
  return _sysdir_start_search_path_enumeration(dir, domainMask);
}

void syslog(int a1, const char *a2, ...)
{
}

int unlink(const char *a1)
{
  return _unlink(a1);
}

int usleep(useconds_t a1)
{
  return _usleep(a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return _uuid_compare(uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

uint64_t vproc_swap_integer()
{
  return _vproc_swap_integer();
}

pid_t wait4(pid_t a1, int *a2, int a3, rusage *a4)
{
  return _wait4(a1, a2, a3, a4);
}

uint64_t wd_endpoint_activate()
{
  return _wd_endpoint_activate();
}

uint64_t wd_endpoint_add_queue()
{
  return _wd_endpoint_add_queue();
}

uint64_t wd_endpoint_register()
{
  return _wd_endpoint_register();
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return _xpc_array_apply(xarray, applier);
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return _xpc_array_create(objects, count);
}

xpc_object_t xpc_array_create_empty(void)
{
  return _xpc_array_create_empty();
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
}

BOOL xpc_BOOL_get_value(xpc_object_t xBOOL)
{
  return _xpc_BOOL_get_value(xBOOL);
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

uint64_t xpc_connection_copy_entitlement_value()
{
  return _xpc_connection_copy_entitlement_value();
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

void *__cdecl xpc_connection_get_context(xpc_connection_t connection)
{
  return _xpc_connection_get_context(connection);
}

uid_t xpc_connection_get_euid(xpc_connection_t connection)
{
  return _xpc_connection_get_euid(connection);
}

pid_t xpc_connection_get_pid(xpc_connection_t connection)
{
  return _xpc_connection_get_pid(connection);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_set_context(xpc_connection_t connection, void *context)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

void xpc_connection_set_finalizer_f(xpc_connection_t connection, xpc_finalizer_t finalizer)
{
}

void xpc_connection_set_target_queue(xpc_connection_t connection, dispatch_queue_t targetq)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return _xpc_dictionary_create(keys, values, count);
}

xpc_object_t xpc_dictionary_create_empty(void)
{
  return _xpc_dictionary_create_empty();
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return _xpc_dictionary_create_reply(original);
}

int64_t xpc_dictionary_get_int64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_int64(xdict, key);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return _xpc_dictionary_get_remote_connection(xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

uint64_t xpc_dictionary_get_uint64(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_uint64(xdict, key);
}

const uint8_t *__cdecl xpc_dictionary_get_uuid(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_uuid(xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_data(xpc_object_t xdict, const char *key, const void *bytes, size_t length)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

void xpc_release(xpc_object_t object)
{
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return [a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return [a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return [a1 UUIDString];
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return [a1 activate];
}

id objc_msgSend_agentType(void *a1, const char *a2, ...)
{
  return [a1 agentType];
}

id objc_msgSend_agentUUID(void *a1, const char *a2, ...)
{
  return [a1 agentUUID];
}

id objc_msgSend_allInterfaces(void *a1, const char *a2, ...)
{
  return [a1 allInterfaces];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return [a1 allValues];
}

id objc_msgSend_apply(void *a1, const char *a2, ...)
{
  return [a1 apply];
}

id objc_msgSend_applyPolicies(void *a1, const char *a2, ...)
{
  return [a1 applyPolicies];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return [a1 array];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return [a1 BOOLValue];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return [a1 bytes];
}

id objc_msgSend_controlPolicySession(void *a1, const char *a2, ...)
{
  return [a1 controlPolicySession];
}

id objc_msgSend_controllerQueue(void *a1, const char *a2, ...)
{
  return [a1 controllerQueue];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return [a1 copy];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return [a1 count];
}

id objc_msgSend_createPolicySession(void *a1, const char *a2, ...)
{
  return [a1 createPolicySession];
}

id objc_msgSend_currentScanResult(void *a1, const char *a2, ...)
{
  return [a1 currentScanResult];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return [a1 dictionary];
}

id objc_msgSend_drop(void *a1, const char *a2, ...)
{
  return [a1 drop];
}

id objc_msgSend_floatingDNSAgentList(void *a1, const char *a2, ...)
{
  return [a1 floatingDNSAgentList];
}

id objc_msgSend_floatingProxyAgentList(void *a1, const char *a2, ...)
{
  return [a1 floatingProxyAgentList];
}

id objc_msgSend_getAgentData(void *a1, const char *a2, ...)
{
  return [a1 getAgentData];
}

id objc_msgSend_getAgentMapping(void *a1, const char *a2, ...)
{
  return [a1 getAgentMapping];
}

id objc_msgSend_getAgentName(void *a1, const char *a2, ...)
{
  return [a1 getAgentName];
}

id objc_msgSend_getAgentSubType(void *a1, const char *a2, ...)
{
  return [a1 getAgentSubType];
}

id objc_msgSend_getAgentType(void *a1, const char *a2, ...)
{
  return [a1 getAgentType];
}

id objc_msgSend_getAgentUUID(void *a1, const char *a2, ...)
{
  return [a1 getAgentUUID];
}

id objc_msgSend_getAssociatedEntity(void *a1, const char *a2, ...)
{
  return [a1 getAssociatedEntity];
}

id objc_msgSend_getRegistrationObject(void *a1, const char *a2, ...)
{
  return [a1 getRegistrationObject];
}

id objc_msgSend_initializeController(void *a1, const char *a2, ...)
{
  return [a1 initializeController];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return [a1 intValue];
}

id objc_msgSend_internalRegistrationObject(void *a1, const char *a2, ...)
{
  return [a1 internalRegistrationObject];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return [a1 invalidate];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return [a1 isActive];
}

id objc_msgSend_isControllerReady(void *a1, const char *a2, ...)
{
  return [a1 isControllerReady];
}

id objc_msgSend_isMetered(void *a1, const char *a2, ...)
{
  return [a1 isMetered];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return [a1 length];
}

id objc_msgSend_policyDB(void *a1, const char *a2, ...)
{
  return [a1 policyDB];
}

id objc_msgSend_policySession(void *a1, const char *a2, ...)
{
  return [a1 policySession];
}

id objc_msgSend_preferredPolicySession(void *a1, const char *a2, ...)
{
  return [a1 preferredPolicySession];
}

id objc_msgSend_processDNSChanges(void *a1, const char *a2, ...)
{
  return [a1 processDNSChanges];
}

id objc_msgSend_processProxyChanges(void *a1, const char *a2, ...)
{
  return [a1 processProxyChanges];
}

id objc_msgSend_removeAllPolicies(void *a1, const char *a2, ...)
{
  return [a1 removeAllPolicies];
}

id objc_msgSend_sharedController(void *a1, const char *a2, ...)
{
  return [a1 sharedController];
}

id objc_msgSend_shouldUpdateAgent(void *a1, const char *a2, ...)
{
  return [a1 shouldUpdateAgent];
}

id objc_msgSend_unregisterNetworkAgent(void *a1, const char *a2, ...)
{
  return [a1 unregisterNetworkAgent];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return [a1 unsignedIntegerValue];
}

id objc_msgSend_valueForKey_(void *a1, const char *a2, ...)
{
  return [a1 valueForKey:];
}