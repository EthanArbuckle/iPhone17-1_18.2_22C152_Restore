void sub_1000052AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1000052C8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (v15)
  {
    if (qword_100326630 != -1) {
      dispatch_once(&qword_100326630, &stru_1002B6A98);
    }
    v16 = qword_100326638;
    if (os_log_type_enabled((os_log_t)qword_100326638, OS_LOG_TYPE_ERROR))
    {
      int v21 = 141558530;
      uint64_t v22 = 1752392040;
      __int16 v23 = 2112;
      id v24 = v11;
      __int16 v25 = 2112;
      id v26 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "verification failed for %{mask.hash}@: %@", (uint8_t *)&v21, 0x20u);
    }
    v17 = [*(id *)(a1 + 32) verifier];
    uint64_t v18 = *(void *)(a1 + 40);
    v19 = [*(id *)(a1 + 48) data];
    LOBYTE(v18) = [v17 failSMTsIfOverMMD:v18 skipOptInOut:0 proof:v19 underlyingError:v15 errorCode:-306 analyticsData:*(void *)(a1 + 56)];

    if ((v18 & 1) == 0) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
    }
  }
  else
  {
    v20 = [*(id *)(a1 + 32) verifier];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v20 verifyKTSMTsMerged:*(void *)(a1 + 40) mapLeaf:v13 analyticsData:*(void *)(a1 + 56)];
  }
}

void sub_1000054B0(id a1)
{
  qword_100326638 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100005768(uint64_t a1, uint64_t a2)
{
  v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v11 = 0;
  unsigned __int8 v5 = [v3 validatePendingSMTs:a2 singleQuery:v4 error:&v11];
  id v6 = v11;
  if ((v5 & 1) == 0)
  {
    if (qword_100326630 != -1) {
      dispatch_once(&qword_100326630, &stru_1002B6AE0);
    }
    v7 = (void *)qword_100326638;
    if (os_log_type_enabled((os_log_t)qword_100326638, OS_LOG_TYPE_ERROR))
    {
      v8 = *(void **)(a1 + 40);
      v9 = v7;
      v10 = [v8 rpcId];
      *(_DWORD *)buf = 138543618;
      id v13 = v10;
      __int16 v14 = 2112;
      id v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to validate pending SMTs with rpcId %{public}@: %@", buf, 0x16u);
    }
  }
}

void sub_100005898(id a1)
{
  qword_100326638 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000058DC(id a1)
{
  qword_100326638 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100005920(id a1)
{
  qword_100326638 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000059FC(id a1)
{
  qword_100326638 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100005BAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 rpcType])
  {
    if ([v3 rpcType] == (id)1)
    {
      [*(id *)(a1 + 32) validatePendingSMTsForBatchQuery:v3];
    }
    else
    {
      if (qword_100326630 != -1) {
        dispatch_once(&qword_100326630, &stru_1002B6B88);
      }
      uint64_t v4 = (void *)qword_100326638;
      if (os_log_type_enabled((os_log_t)qword_100326638, OS_LOG_TYPE_ERROR))
      {
        unsigned __int8 v5 = v4;
        int v6 = 134217984;
        id v7 = [v3 rpcType];
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "unknown server rpc type: %lld", (uint8_t *)&v6, 0xCu);
      }
    }
  }
  else
  {
    [*(id *)(a1 + 32) validatePendingSMTsForSingleQuery:v3];
  }
}

void sub_100005CCC(id a1)
{
  qword_100326638 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100005D10(id a1)
{
  qword_100326638 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100006358(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000639C(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000063E0(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100006424(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100006468(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000064AC(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000064F0(uint64_t a1)
{
  v2 = [*(id *)(a1 + 32) errors];
  id v3 = [v2 count];

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) errors];
    unsigned __int8 v5 = [v4 allKeys];

    int v6 = [v5 componentsJoinedByString:@","];
    uint64_t v7 = +[NSString stringWithFormat:@"Consistency failed for applications: %@", v6];

    v50[0] = NSMultipleUnderlyingErrorsKey;
    v8 = [*(id *)(a1 + 32) errors];
    v9 = [v8 allValues];
    v50[1] = NSLocalizedDescriptionKey;
    v51[0] = v9;
    v51[1] = v7;
    uint64_t v10 = +[NSDictionary dictionaryWithObjects:v51 forKeys:v50 count:2];

    uint64_t v11 = +[NSError errorWithDomain:@"TransparencyErrorVerify" code:-382 userInfo:v10];
    v39 = v5;
    v36 = (void *)v11;
    v37 = (void *)v10;
    if (([v5 containsObject:kKTApplicationIdentifierIDS] & 1) != 0
      || [v5 containsObject:kKTApplicationIdentifierTLT])
    {
      [*(id *)(a1 + 32) setError:v11];
    }
    else
    {
      if (qword_100326640 != -1) {
        dispatch_once(&qword_100326640, &stru_1002B6CB0);
      }
      v31 = (void *)qword_100326648;
      if (os_log_type_enabled((os_log_t)qword_100326648, OS_LOG_TYPE_ERROR))
      {
        v32 = *(void **)(a1 + 32);
        v33 = v31;
        v34 = [v32 errors];
        v35 = [v34 allValues];
        *(_DWORD *)buf = 138543618;
        uint64_t v47 = v7;
        __int16 v48 = 2112;
        v49 = v35;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "%{public}@: %@", buf, 0x16u);
      }
    }
    v38 = (void *)v7;
    id v12 = +[NSMutableString string];
    id v13 = +[NSMutableString string];
    long long v41 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    id obj = [*(id *)(a1 + 32) failedRevs];
    id v14 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v42;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v42 != v16) {
            objc_enumerationMutation(obj);
          }
          uint64_t v18 = *(void *)(*((void *)&v41 + 1) + 8 * i);
          v19 = [*(id *)(a1 + 32) serverHints];
          v20 = [v19 objectForKeyedSubscript:v18];
          [v12 appendFormat:@"%@/%@,", v18, v20];

          int v21 = [*(id *)(a1 + 32) failedRevs];
          uint64_t v22 = [v21 objectForKeyedSubscript:v18];
          __int16 v23 = [v22 componentsJoinedByString:@","];
          [v13 appendFormat:@"%@:%@", v18, v23];
        }
        id v15 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
      }
      while (v15);
    }

    id v24 = [*(id *)(a1 + 32) backgroundOpId];
    __int16 v25 = [*(id *)(a1 + 32) deps];
    id v26 = [v25 smDataStore];
    v27 = [*(id *)(a1 + 32) name];
    +[KTBackgroundSystemValidationOperation addErrorToBackgroundOp:v24 smDataStore:v26 failureDataString:v13 type:v27 serverHint:v12 failure:v36];
  }
  if (qword_100326640 != -1) {
    dispatch_once(&qword_100326640, &stru_1002B6CD0);
  }
  v28 = qword_100326648;
  if (os_log_type_enabled((os_log_t)qword_100326648, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "VerifyConsistency: end", buf, 2u);
  }
  v29 = [*(id *)(a1 + 32) operationQueue];
  v30 = [*(id *)(a1 + 32) finishedOp];
  [v29 addOperation:v30];
}

void sub_1000069F4(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100006A38(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100007094(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000070D8(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000711C(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100007160(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100007510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_100007548(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_10000758C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000759C(uint64_t a1)
{
}

void sub_1000075A4(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  unsigned __int8 v5 = [v3 deps];
  int v6 = [v5 dataStore];
  uint64_t v7 = [v6 createDownloadRecord:3 moc:v4 application:*(void *)(a1 + 40)];

  [v7 setStartSLHRevision:[[*(id *)(a1 + 48) longLongValue]];
  uint64_t v8 = *(void *)(a1 + 56);
  id v23 = 0;
  v9 = +[NSJSONSerialization dataWithJSONObject:v8 options:0 error:&v23];
  id v10 = v23;
  [v7 setRevisions:v9];

  if (qword_100326640 != -1) {
    dispatch_once(&qword_100326640, &stru_1002B6DB8);
  }
  uint64_t v11 = (void *)qword_100326648;
  if (os_log_type_enabled((os_log_t)qword_100326648, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(a1 + 64);
    id v14 = v11;
    id v15 = [v7 downloadId];
    *(_DWORD *)buf = 138543874;
    uint64_t v25 = v12;
    __int16 v26 = 2114;
    uint64_t v27 = v13;
    __int16 v28 = 2114;
    v29 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "fetching consistency proof for %{public}@ %{public}@ with downloadId %{public}@", buf, 0x20u);
  }
  uint64_t v16 = [v7 downloadId];
  uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;

  v19 = [*(id *)(a1 + 32) deps];
  v20 = [v19 dataStore];
  id v22 = v10;
  [v20 persistWithError:&v22];
  id v21 = v22;
}

void sub_1000077C8(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000780C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v8 = [WeakRetained deps];
  v9 = [v8 publicKeyStore];
  id v10 = [v9 applicationPublicKeyStore:*(void *)(a1 + 32)];

  if ([*(id *)(a1 + 32) isEqual:kKTApplicationIdentifierTLT])
  {
    uint64_t v11 = [WeakRetained deps];
    uint64_t v12 = [v11 publicKeyStore];
    uint64_t v13 = [v12 tltKeyStore];

    id v10 = (void *)v13;
  }
  id v14 = [KTContextVerifier alloc];
  id v15 = [WeakRetained deps];
  uint64_t v16 = [v15 dataStore];
  v57 = [(KTContextVerifier *)v14 initWithApplicationKeyStore:v10 dataStore:v16 applicationID:*(void *)(a1 + 32)];

  uint64_t v68 = 0;
  v69 = &v68;
  uint64_t v70 = 0x3032000000;
  v71 = sub_10000758C;
  v72 = sub_10000759C;
  id v73 = 0;
  if (!v5 || v6)
  {
    if (qword_100326640 != -1) {
      dispatch_once(&qword_100326640, &stru_1002B6E00);
    }
    __int16 v26 = qword_100326648;
    if (os_log_type_enabled((os_log_t)qword_100326648, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v75 = v27;
      __int16 v76 = 2112;
      id v77 = v6;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Failed to fetch consistency proof downloadId %{public}@: %@", buf, 0x16u);
    }
    if (!v6)
    {
      id v6 = +[TransparencyError errorWithDomain:kTransparencyErrorNetwork code:-145 description:@"empty consistency proof response"];
    }
    __int16 v28 = [WeakRetained deps];
    v29 = [v28 dataStore];
    uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    v31 = [WeakRetained deps];
    v32 = [v31 logClient];
    [v29 failHeadDownload:v30 failure:v6 logClient:v32];

    v33 = v69;
    id v34 = v6;
    id v23 = (id)v33[5];
    v33[5] = (uint64_t)v34;
  }
  else
  {
    if ([v5 status] == 1)
    {
      uint64_t v17 = [WeakRetained deps];
      uint64_t v18 = [v17 dataStore];
      uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      id v67 = 0;
      v59[0] = _NSConcreteStackBlock;
      v59[1] = 3221225472;
      v59[2] = sub_100008004;
      v59[3] = &unk_1002B6E88;
      v60 = v57;
      id v20 = v5;
      uint64_t v21 = *(void *)(a1 + 48);
      v65 = &v68;
      uint64_t v66 = v21;
      id v61 = v20;
      id v62 = WeakRetained;
      id v63 = *(id *)(a1 + 32);
      id v64 = *(id *)(a1 + 40);
      unsigned __int8 v22 = [v18 performAndWaitForDownloadId:v19 error:&v67 block:v59];
      id v23 = v67;

      if ((v22 & 1) == 0)
      {
        if (qword_100326640 != -1) {
          dispatch_once(&qword_100326640, &stru_1002B6EA8);
        }
        id v24 = qword_100326648;
        if (os_log_type_enabled((os_log_t)qword_100326648, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          *(_DWORD *)buf = 138543618;
          uint64_t v75 = v25;
          __int16 v76 = 2112;
          id v77 = v23;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "failed to find downloadId %{public}@: %@", buf, 0x16u);
        }
      }
    }
    else
    {
      if (qword_100326640 != -1) {
        dispatch_once(&qword_100326640, &stru_1002B6E20);
      }
      v35 = (id)qword_100326648;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        unsigned int v37 = [v5 status];
        *(_DWORD *)buf = 138543618;
        uint64_t v75 = v36;
        __int16 v76 = 1024;
        LODWORD(v77) = v37;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "server failed to produce consistency proof downloadId %{public}@: %d", buf, 0x12u);
      }

      signed int v38 = [v5 status];
      id v39 = [v5 status];
      uint64_t v40 = +[TransparencyError errorWithDomain:kTransparencyErrorServer, v38, @"server failed to produce consistency proof: %d", v39 code description];
      long long v41 = (void *)v69[5];
      v69[5] = v40;

      id v23 = [WeakRetained deps];
      long long v42 = [v23 dataStore];
      uint64_t v43 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      uint64_t v44 = v69[5];
      v45 = [WeakRetained deps];
      v46 = [v45 logClient];
      [v42 failHeadDownload:v43 failure:v44 logClient:v46];
    }
    id v34 = 0;
  }

  uint64_t v47 = (id *)(v69 + 5);
  id obj = (id)v69[5];
  __int16 v48 = [(KTContextVerifier *)v57 failExpiredSTHsForType:2 error:&obj];
  objc_storeStrong(v47, obj);
  if (v48 && [v48 count])
  {
    if (v5)
    {
      v49 = [v5 metadata];
      v50 = [v49 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];
    }
    else
    {
      v50 = 0;
    }
    v51 = [WeakRetained errors];
    objc_sync_enter(v51);
    v52 = [WeakRetained serverHints];
    [v52 setObject:v50 forKeyedSubscript:*(void *)(a1 + 32)];

    uint64_t v53 = v69[5];
    v54 = [WeakRetained errors];
    [v54 setObject:v53 forKeyedSubscript:*(void *)(a1 + 32)];

    v55 = [WeakRetained failedRevs];
    [v55 setObject:v48 forKeyedSubscript:*(void *)(a1 + 32)];

    objc_sync_exit(v51);
  }
  v56 = [WeakRetained fetchGroup];
  dispatch_group_leave(v56);

  _Block_object_dispose(&v68, 8);
}

void sub_100007F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100007F7C(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100007FC0(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100008004(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableArray array];
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [v3 startSLHRevision];

  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8);
  id obj = *(id *)(v8 + 40);
  id v9 = [v5 verifyConsistencyProofResponse:v6 startRevision:v7 receivedRevisions:v4 error:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);
  if (v9)
  {
    id v10 = [*(id *)(a1 + 48) deps];
    uint64_t v11 = [v10 settings];
    unsigned int v12 = [v11 allowsInternalSecurityPolicies];

    if (v12)
    {
      uint64_t v13 = +[TransparencyAnalytics formatEventName:@"ConsistencyDownload" application:*(void *)(a1 + 56)];
      uint64_t v14 = *(void *)(a1 + 64);
      v38[0] = @"requestedRevisions";
      v38[1] = @"receivedRevisions";
      v39[0] = v14;
      v39[1] = v4;
      id v15 = +[NSDictionary dictionaryWithObjects:v39 forKeys:v38 count:2];
      id v16 = [v15 mutableCopy];

      uint64_t v17 = [*(id *)(a1 + 40) metadata];
      uint64_t v18 = kTransparencyResponseMetadataKeyServerHint;
      uint64_t v19 = [v17 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

      if (v19)
      {
        id v20 = [*(id *)(a1 + 40) metadata];
        uint64_t v21 = [v20 objectForKeyedSubscript:v18];
        [v16 setObject:v21 forKeyedSubscript:v18];
      }
      unsigned __int8 v22 = [*(id *)(a1 + 40) metadata];
      id v23 = [v22 objectForKeyedSubscript:@"APS"];

      if (v23) {
        [v16 setObject:&__kCFBooleanTrue forKeyedSubscript:@"APS"];
      }
      id v24 = [*(id *)(a1 + 48) deps];
      uint64_t v25 = [v24 logger];
      [v25 logHardFailureForEventNamed:v13 withAttributes:v16];
    }
    if (qword_100326640 != -1) {
      dispatch_once(&qword_100326640, &stru_1002B6E60);
    }
    __int16 v26 = qword_100326648;
    if (os_log_type_enabled((os_log_t)qword_100326648, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
      *(_DWORD *)buf = 138543362;
      uint64_t v41 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "consistency proof downloadId %{public}@: verification succeeded", buf, 0xCu);
    }
    __int16 v28 = [*(id *)(a1 + 48) deps];
    v29 = [v28 logClient];
    [v29 deleteDownloadId:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
  }
  else
  {
    if (qword_100326640 != -1) {
      dispatch_once(&qword_100326640, &stru_1002B6E40);
    }
    uint64_t v30 = qword_100326648;
    if (os_log_type_enabled((os_log_t)qword_100326648, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
      uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v41 = v31;
      __int16 v42 = 2112;
      uint64_t v43 = v32;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Consistency proof response verification failed for downloadId %{public}@: %@", buf, 0x16u);
    }
    __int16 v28 = [*(id *)(a1 + 48) deps];
    v29 = [v28 dataStore];
    uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    uint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    v35 = [*(id *)(a1 + 48) deps];
    uint64_t v36 = [v35 logClient];
    [v29 failHeadDownload:v33 failure:v34 logClient:v36];
  }
}

void sub_100008424(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100008468(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000084AC(id a1)
{
  qword_100326648 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100008BE0(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100008C24(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100008C68(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100008FEC(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009030(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009CB8(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009CFC(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009D40(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009D84(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009DC8(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009E0C(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009E50(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100009E94(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10000A0A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ResponseTime"];
  id v7 = +[NSDate kt_dateFromString:v6];

  uint64_t v8 = (*(void *)(a1 + 88) < 6uLL) & (0x31u >> *(void *)(a1 + 88));
  id v9 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  id v21 = 0;
  id v15 = [v9 validatePeer:v10 transparentData:v11 accountKey:v12 loggableDatas:v13 selfVerificationInfo:0 enforceStaticKey:v8 idsResponseTime:v14 responseTime:v7 error:&v21];
  id v16 = v21;
  [*(id *)(a1 + 40) reportValidationTime:*(void *)(a1 + 88) initialResult:*(void *)(a1 + 96) result:v15 idsResponseTime:*(void *)(a1 + 80)];
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v18 = [*(id *)(a1 + 40) analyticsLogger];
  uint64_t v19 = [*(id *)(a1 + 40) applicationID];
  +[KTContext metricsForResult:v15 type:v17 logger:v18 applicationID:v19];

  *a3 = [*(id *)(a1 + 40) analyticsForType:*(void *)(a1 + 88) uri:*(void *)(a1 + 48) accountKey:*(void *)(a1 + 64) serverLoggableDatas:*(void *)(a1 + 72) syncedLoggableDatas:0 transparentData:*(void *)(a1 + 56) selfVerificationInfo:0 responseTime:v7 result:v15 failure:v16 responseMetadata:*(void *)(a1 + 32)];
  if (a2 && v16) {
    *a2 = v16;
  }

  return v15;
}

void sub_10000A550(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000A594(id a1)
{
  qword_100326658 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10000A920(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 96);
  char v15 = *(unsigned char *)(a1 + 128);
  uint64_t v16 = *(void *)(a1 + 104);
  id v31 = 0;
  LOBYTE(v30) = 0;
  LOBYTE(v29) = v15;
  id v17 = [v6 validateSelf:v7 transparentData:v8 accountKey:v9 serverloggableDatas:v10 syncedLoggableDatas:v11 selfVerificationInfo:v12 idsResponseTime:v13 responseTime:v14 optInCheck:v29 cloudDevices:v16 pcsAccountKey:0 kvsOptInHistory:0 isReplay:v30 error:&v31];
  id v18 = v31;
  if (v17 == (id)1) {
    [*(id *)(a1 + 32) clearSelfTicketState:*(void *)(a1 + 40) responseTime:*(void *)(a1 + 96)];
  }
  [*(id *)(a1 + 32) reportValidationTime:1 initialResult:*(void *)(a1 + 120) result:v17 idsResponseTime:*(void *)(a1 + 88)];
  uint64_t v19 = [*(id *)(a1 + 32) analyticsLogger];
  id v20 = [*(id *)(a1 + 32) applicationID];
  +[KTContext metricsForResult:v17 type:1 logger:v19 applicationID:v20];

  id v21 = +[TransparencyAnalytics logger];
  unsigned __int8 v22 = [*(id *)(a1 + 32) applicationID];
  +[KTContext checkAndLogHardErrorIfNecessary:v17 type:1 logger:v21 error:v18 applicationID:v22];

  id v23 = *(void **)(a1 + 32);
  uint64_t v24 = *(void *)(a1 + 64);
  uint64_t v25 = *(void *)(a1 + 48);
  __int16 v26 = [*(id *)(a1 + 80) selfDeviceID];
  uint64_t v27 = +[TransparencyAnalytics logger];
  [v23 selfValidationURIStatus:v24 transparentData:v25 selfDeviceID:v26 logger:v27];

  *a3 = [*(id *)(a1 + 32) analyticsForType:1 uri:*(void *)(a1 + 40) accountKey:*(void *)(a1 + 56) serverLoggableDatas:*(void *)(a1 + 64) syncedLoggableDatas:*(void *)(a1 + 72) transparentData:*(void *)(a1 + 48) selfVerificationInfo:*(void *)(a1 + 80) responseTime:*(void *)(a1 + 96) result:v17 failure:v18 responseMetadata:*(void *)(a1 + 112)];
  if (a2 && v18) {
    *a2 = v18;
  }

  return v17;
}

id sub_10000B048(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = [*(id *)(a1 + 32) verifier];
  id v7 = [v6 handleInsertResponse:*(void *)(a1 + 40) uri:*(void *)(a1 + 48) fetchId:*(void *)(a1 + 56) error:a2 transparentDataHandler:*(void *)(a1 + 64)];

  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = [v8 metadataForInsertResponse:*(void *)(a1 + 40)];
  *a3 = [v8 analyticsForResponse:v9 type:2 uri:*(void *)(a1 + 48) result:v7 ktCapable:1];

  return v7;
}

void sub_10000B6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31)
{
}

void sub_10000B6FC(id a1)
{
  qword_100326668 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000B740(id a1)
{
  qword_100326668 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000B784(id a1)
{
  qword_100326668 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000B7C8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (qword_100326660 != -1) {
    dispatch_once(&qword_100326660, &stru_1002B71A8);
  }
  id v3 = qword_100326668;
  if (os_log_type_enabled((os_log_t)qword_100326668, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Completed fixup %@", (uint8_t *)&v12, 0xCu);
  }
  id v5 = [WeakRetained deps];
  uint64_t v6 = [v5 logger];
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = [*(id *)(a1 + 40) error];
  [v6 logResultForEvent:v7 hardFailure:1 result:v8];

  uint64_t v9 = [*(id *)(a1 + 40) error];

  if (!v9)
  {
    uint64_t v10 = [WeakRetained deps];
    uint64_t v11 = [v10 smDataStore];
    [v11 storeFixup:*(void *)(a1 + 32)];
  }
}

void sub_10000B944(id a1)
{
  qword_100326668 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000C56C(id a1)
{
  qword_100326678 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000C9CC(id a1)
{
  qword_100326678 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000CAE8(id a1)
{
  qword_100326678 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000D5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  objc_destroyWeak(v25);
  objc_destroyWeak(location);
  objc_destroyWeak(&a25);
  _Unwind_Resume(a1);
}

void sub_10000D634(id a1)
{
  qword_100326688 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000D678(id a1)
{
  qword_100326688 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000D6BC(id a1)
{
  qword_100326688 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000D700(id a1)
{
  qword_100326688 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000D744(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setTransaction:0];
}

void sub_10000D788(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v5 || v6)
  {
    if (qword_100326680 != -1) {
      dispatch_once(&qword_100326680, &stru_1002B72F8);
    }
    uint64_t v10 = (void *)qword_100326688;
    if (os_log_type_enabled((os_log_t)qword_100326688, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = v10;
      int v12 = [WeakRetained application];
      uint64_t v13 = [*(id *)(a1 + 32) allObjects];
      uint64_t v14 = [v13 componentsJoinedByString:@","];
      *(_DWORD *)buf = 138413058;
      id v20 = v12;
      __int16 v21 = 2160;
      uint64_t v22 = 1752392040;
      __int16 v23 = 2112;
      uint64_t v24 = v14;
      __int16 v25 = 2112;
      id v26 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "ValidatePendingURIs: failed to get validation context for fetch for %@ for uris %{mask.hash}@: %@", buf, 0x2Au);
    }
    char v15 = [WeakRetained operationQueue];
    uint64_t v16 = [WeakRetained finishedOp];
    [v15 addOperation:v16];
  }
  else
  {
    uint64_t v8 = [*(id *)(a1 + 32) allObjects];
    uint64_t v9 = [WeakRetained opUUID];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10000DA2C;
    v17[3] = &unk_1002B7340;
    v17[4] = WeakRetained;
    id v18 = *(id *)(a1 + 32);
    [v5 queryForUris:v8 userInitiated:0 cachedYoungerThan:0 backgroundOpId:v9 completionHandler:v17];
  }
}

void sub_10000D9E8(id a1)
{
  qword_100326688 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000DA2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_100326680 != -1) {
      dispatch_once(&qword_100326680, &stru_1002B7318);
    }
    uint64_t v4 = (void *)qword_100326688;
    if (os_log_type_enabled((os_log_t)qword_100326688, OS_LOG_TYPE_ERROR))
    {
      id v5 = *(void **)(a1 + 32);
      id v6 = v4;
      uint64_t v7 = [v5 application];
      uint64_t v8 = [*(id *)(a1 + 40) allObjects];
      uint64_t v9 = [v8 componentsJoinedByString:@","];
      int v12 = 138413058;
      uint64_t v13 = v7;
      __int16 v14 = 2160;
      uint64_t v15 = 1752392040;
      __int16 v16 = 2112;
      id v17 = v9;
      __int16 v18 = 2112;
      id v19 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "ValidatePendingURIs: failed to trigger query for %@ for uris %{mask.hash}@: %@", (uint8_t *)&v12, 0x2Au);
    }
  }
  uint64_t v10 = [*(id *)(a1 + 32) operationQueue];
  uint64_t v11 = [*(id *)(a1 + 32) finishedOp];
  [v10 addOperation:v11];
}

void sub_10000DBC0(id a1)
{
  qword_100326688 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000DF5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (qword_100326690 != -1) {
    dispatch_once(&qword_100326690, &stru_1002B7388);
  }
  uint64_t v7 = qword_100326698;
  if (os_log_type_enabled((os_log_t)qword_100326698, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 138412290;
    id v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "IDS returned result %@", (uint8_t *)&v8, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10000E060(id a1)
{
  qword_100326698 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000EB98(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000EBDC(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000EC20(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000EC64(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000ECA8(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000ECEC(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000ED30(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000ED74(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000EDB8(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000F0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000F0CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000F0DC(uint64_t a1)
{
}

void sub_10000F0E4(uint64_t a1, void *a2, unsigned char *a3, id *a4)
{
  id v7 = a2;
  if (a4 && *a4)
  {
    if (qword_1003266A0 != -1) {
      dispatch_once(&qword_1003266A0, &stru_1002B74F0);
    }
    int v8 = qword_1003266A8;
    if (os_log_type_enabled((os_log_t)qword_1003266A8, OS_LOG_TYPE_ERROR))
    {
      id v9 = *a4;
      *(_DWORD *)buf = 138412290;
      id v27 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: failed to get pending SMTs: %@", buf, 0xCu);
    }
    if (*a4) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *a4);
    }
    *a3 = 1;
  }
  else
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v25 = 0;
    uint64_t v11 = [v10 verifyKTSMTSignatures:v7 error:&v25];
    id v12 = v25;
    id v13 = v25;
    if (v11 && [v11 count])
    {
      if (qword_1003266A0 != -1) {
        dispatch_once(&qword_1003266A0, &stru_1002B7530);
      }
      __int16 v14 = qword_1003266A8;
      if (os_log_type_enabled((os_log_t)qword_1003266A8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        id v27 = v15;
        __int16 v28 = 2112;
        id v29 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: %@ SMT signature validation failed: %@", buf, 0x16u);
      }
      if (v13) {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v12);
      }
      [*(id *)(a1 + 48) addObjectsFromArray:v11];
    }
    else
    {
      if (qword_1003266A0 != -1) {
        dispatch_once(&qword_1003266A0, &stru_1002B7510);
      }
      __int16 v16 = qword_1003266A8;
      if (os_log_type_enabled((os_log_t)qword_1003266A8, OS_LOG_TYPE_INFO))
      {
        id v17 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        id v27 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "VerifyPendingSignatures: %@ SMT signature validation succeeded", buf, 0xCu);
      }
    }
    __int16 v18 = [*(id *)(a1 + 56) deps];
    id v19 = [v18 dataStore];
    id v24 = 0;
    unsigned __int8 v20 = [v19 persistAndRefaultObjects:v7 error:&v24];
    id v21 = v24;
    id v22 = v24;

    if ((v20 & 1) == 0)
    {
      if (qword_1003266A0 != -1) {
        dispatch_once(&qword_1003266A0, &stru_1002B7550);
      }
      __int16 v23 = qword_1003266A8;
      if (os_log_type_enabled((os_log_t)qword_1003266A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v27 = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: failed to persist signature verified SMTs: %@", buf, 0xCu);
      }
      if (v22) {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v21);
      }
      *a3 = 1;
    }
  }
}

void sub_10000F458(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000F49C(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000F4E0(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000F524(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000F958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000F984(uint64_t a1, void *a2, unsigned char *a3, id *a4)
{
  id v7 = a2;
  if (a4 && *a4)
  {
    if (qword_1003266A0 != -1) {
      dispatch_once(&qword_1003266A0, &stru_1002B7598);
    }
    int v8 = qword_1003266A8;
    if (os_log_type_enabled((os_log_t)qword_1003266A8, OS_LOG_TYPE_ERROR))
    {
      id v9 = *a4;
      *(_DWORD *)buf = 138412290;
      id v27 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: failed to get pending STH/SMH: %@", buf, 0xCu);
    }
    if (*a4) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), *a4);
    }
    *a3 = 1;
  }
  else
  {
    uint64_t v10 = *(void **)(a1 + 32);
    id v25 = 0;
    uint64_t v11 = [v10 verifySTHs:v7 error:&v25];
    id v12 = v25;
    id v13 = v25;
    if (v11 && [v11 count])
    {
      if (qword_1003266A0 != -1) {
        dispatch_once(&qword_1003266A0, &stru_1002B75D8);
      }
      __int16 v14 = qword_1003266A8;
      if (os_log_type_enabled((os_log_t)qword_1003266A8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        id v27 = v15;
        __int16 v28 = 2112;
        id v29 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: %@ STH/SMH signature validation failed: %@", buf, 0x16u);
      }
      if (v13) {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v12);
      }
      [*(id *)(a1 + 48) addObjectsFromArray:v11];
    }
    else
    {
      if (qword_1003266A0 != -1) {
        dispatch_once(&qword_1003266A0, &stru_1002B75B8);
      }
      __int16 v16 = qword_1003266A8;
      if (os_log_type_enabled((os_log_t)qword_1003266A8, OS_LOG_TYPE_INFO))
      {
        id v17 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        id v27 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "VerifyPendingSignatures: %@ STH/SMH signature validation succeeded", buf, 0xCu);
      }
    }
    __int16 v18 = [*(id *)(a1 + 56) deps];
    id v19 = [v18 dataStore];
    id v24 = 0;
    unsigned __int8 v20 = [v19 persistAndRefaultObjects:v7 error:&v24];
    id v21 = v24;
    id v22 = v24;

    if ((v20 & 1) == 0)
    {
      if (qword_1003266A0 != -1) {
        dispatch_once(&qword_1003266A0, &stru_1002B75F8);
      }
      __int16 v23 = qword_1003266A8;
      if (os_log_type_enabled((os_log_t)qword_1003266A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v27 = v22;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "VerifyPendingSignatures: failed to persist signature verified STHs/SMHs: %@", buf, 0xCu);
      }
      if (v22) {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v21);
      }
      *a3 = 1;
    }
  }
}

void sub_10000FCF8(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000FD3C(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000FD80(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10000FDC4(id a1)
{
  qword_1003266A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100010260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100010284(id a1)
{
  qword_1003266B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000102C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v5 || v6)
  {
    if (qword_1003266B0 != -1) {
      dispatch_once(&qword_1003266B0, &stru_1002B7638);
    }
    __int16 v16 = qword_1003266B8;
    if (os_log_type_enabled((os_log_t)qword_1003266B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "ValidatePendingRequests: failed to get validation context for validating pending requests: %@", buf, 0xCu);
    }
    id v12 = [WeakRetained operationQueue];
    id v17 = [WeakRetained finishedOp];
    [v12 addOperation:v17];
  }
  else
  {
    dispatch_group_t v8 = dispatch_group_create();
    [WeakRetained setFetchGroup:v8];

    id v9 = [WeakRetained deps];
    uint64_t v10 = [v9 dataStore];
    uint64_t v11 = [WeakRetained application];
    id v21 = 0;
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_10001060C;
    v19[3] = &unk_1002B7680;
    v19[4] = WeakRetained;
    id v20 = v5;
    [v10 performForRequestsWithPendingResponses:v11 error:&v21 block:v19];
    id v12 = v21;

    if (qword_1003266B0 != -1) {
      dispatch_once(&qword_1003266B0, &stru_1002B76A0);
    }
    id v13 = qword_1003266B8;
    if (os_log_type_enabled((os_log_t)qword_1003266B8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "ValidatePendingRequests: waiting for fetches to finish validating", buf, 2u);
    }
    __int16 v14 = [WeakRetained fetchGroup];
    uint64_t v15 = [WeakRetained fetchQueue];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000108C8;
    v18[3] = &unk_1002B6CF8;
    v18[4] = WeakRetained;
    dispatch_group_notify(v14, v15, v18);
  }
}

void sub_1000105C8(id a1)
{
  qword_1003266B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001060C(uint64_t a1, void *a2, unsigned char *a3, void *a4)
{
  id v7 = a2;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v8 = [v7 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v8)
  {
    id v10 = v8;
    uint64_t v11 = *(void *)v23;
    *(void *)&long long v9 = 138412290;
    long long v21 = v9;
    do
    {
      id v12 = 0;
      do
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v7);
        }
        uint64_t v13 = *(void *)(*((void *)&v22 + 1) + 8 * (void)v12);
        __int16 v14 = [*(id *)(a1 + 32) fetchGroup:v21];
        dispatch_group_enter(v14);

        [*(id *)(a1 + 32) handleKTRequestDownload:v13 context:*(void *)(a1 + 40)];
        uint64_t v15 = [*(id *)(a1 + 32) deps];
        __int16 v16 = [v15 dataStore];
        LOBYTE(v13) = [v16 persistAndRefaultObject:v13 error:a4];

        if ((v13 & 1) == 0)
        {
          if (qword_1003266B0 != -1) {
            dispatch_once(&qword_1003266B0, &stru_1002B7658);
          }
          id v17 = qword_1003266B8;
          if (os_log_type_enabled((os_log_t)qword_1003266B8, OS_LOG_TYPE_ERROR))
          {
            if (a4) {
              uint64_t v18 = *a4;
            }
            else {
              uint64_t v18 = 0;
            }
            *(_DWORD *)buf = v21;
            uint64_t v27 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "failed to persist pending requests: %@", buf, 0xCu);
          }
          if (a4 && *a4)
          {
            id v19 = [*(id *)(a1 + 32) deps];
            id v20 = [v19 dataStore];
            [v20 reportCoreDataPersistEventForLocation:@"handlePendingQueryRequests" underlyingError:*a4];
          }
          *a3 = 1;
        }
        id v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v7 countByEnumeratingWithState:&v22 objects:v28 count:16];
    }
    while (v10);
  }
}

void sub_100010840(id a1)
{
  qword_1003266B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100010884(id a1)
{
  qword_1003266B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000108C8(uint64_t a1)
{
  v2 = [*(id *)(a1 + 32) errors];
  id v3 = [v2 count];

  if (v3)
  {
    NSErrorUserInfoKey v30 = NSMultipleUnderlyingErrorsKey;
    uint64_t v4 = [*(id *)(a1 + 32) errors];
    id v31 = v4;
    id v5 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];

    id v6 = +[NSError errorWithDomain:@"TransparencyErrorVerify" code:-381 userInfo:v5];
    [*(id *)(a1 + 32) setError:v6];

    id v7 = [*(id *)(a1 + 32) serverHints];
    id v8 = [v7 componentsJoinedByString:@","];

    long long v9 = +[NSMutableString string];
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    id v10 = [*(id *)(a1 + 32) requestIds];
    id v11 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v26;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v26 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = [*(id *)(*((void *)&v25 + 1) + 8 * i) UUIDString];
          [v9 appendFormat:@"%@,", v15];
        }
        id v12 = [v10 countByEnumeratingWithState:&v25 objects:v29 count:16];
      }
      while (v12);
    }

    __int16 v16 = [*(id *)(a1 + 32) backgroundOpId];
    id v17 = [*(id *)(a1 + 32) deps];
    uint64_t v18 = [v17 smDataStore];
    id v19 = [*(id *)(a1 + 32) name];
    id v20 = [*(id *)(a1 + 32) error];
    +[KTBackgroundSystemValidationOperation addErrorToBackgroundOp:v16 smDataStore:v18 failureDataString:v9 type:v19 serverHint:v8 failure:v20];
  }
  if (qword_1003266B0 != -1) {
    dispatch_once(&qword_1003266B0, &stru_1002B76C0);
  }
  long long v21 = qword_1003266B8;
  if (os_log_type_enabled((os_log_t)qword_1003266B8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "ValidatePendingRequests: end", buf, 2u);
  }
  long long v22 = [*(id *)(a1 + 32) operationQueue];
  long long v23 = [*(id *)(a1 + 32) finishedOp];
  [v22 addOperation:v23];
}

void sub_100010BFC(id a1)
{
  qword_1003266B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100010D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100010D30(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v15 = [v11 metadata];
  __int16 v16 = [v15 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

  if (v9 && v10 && v11 && !v12)
  {
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_1000110A8;
    v27[3] = &unk_1002B7710;
    objc_copyWeak(&v30, v13);
    id v28 = v9;
    id v29 = v16;
    [WeakRetained handleKTRequest:v28 queryRequest:v10 queryResponse:v11 completionHandler:v27];

    objc_destroyWeak(&v30);
  }
  else
  {
    id v17 = [v9 type];
    uint64_t v18 = [WeakRetained application];
    id v19 = +[KTContext validateEventName:v17 application:v18];

    id v20 = +[TransparencyAnalytics logger];
    [v20 logResultForEvent:v19 hardFailure:[v9 isDeleted] result:v12];

    if (qword_1003266B0 != -1) {
      dispatch_once(&qword_1003266B0, &stru_1002B7730);
    }
    long long v21 = qword_1003266B8;
    if (os_log_type_enabled((os_log_t)qword_1003266B8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v32 = v12;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "ValidatePendingRequests:background fetch error: %@", buf, 0xCu);
    }
    if (!v12)
    {
      id v12 = +[TransparencyError errorWithDomain:kTransparencyErrorNetwork code:-145 description:@"empty inclusion proof response"];
    }
    [WeakRetained saveRequestFailure:v9 failure:v12];
    long long v22 = [WeakRetained failExpiredRequest:v9 error:v12];
    if (v22)
    {
      long long v23 = [WeakRetained errors];
      [v23 addObject:v12];

      long long v24 = [WeakRetained requestIds];
      [v24 addObject:v22];

      if (v16)
      {
        long long v25 = [WeakRetained serverHints];
        [v25 addObject:v16];
      }
    }
    long long v26 = [WeakRetained fetchGroup];
    dispatch_group_leave(v26);
  }
}

void sub_10001108C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000110A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v12 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v6 = WeakRetained;
  if (a2 == 2)
  {
    id v7 = [WeakRetained failExpiredRequest:*(void *)(a1 + 32) error:v12];
    if (v7)
    {
      id v8 = [v6 errors];
      [v8 addObject:v12];

      id v9 = [v6 requestIds];
      [v9 addObject:v7];

      if (*(void *)(a1 + 40))
      {
        id v10 = [v6 serverHints];
        [v10 addObject:*(void *)(a1 + 40)];
      }
    }
  }
  id v11 = [v6 fetchGroup];
  dispatch_group_leave(v11);
}

void sub_1000111A4(id a1)
{
  qword_1003266B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000113C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000113E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  id v8 = WeakRetained;
  if (!v5 || v6)
  {
    if (qword_1003266B0 != -1) {
      dispatch_once(&qword_1003266B0, &stru_1002B7778);
    }
    id v12 = qword_1003266B8;
    if (os_log_type_enabled((os_log_t)qword_1003266B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v21 = v13;
      __int16 v22 = 2112;
      id v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "ValidatePendingRequests: failed to get validation context for validating pending request %{public}@: %@", buf, 0x16u);
    }
    if (!v6)
    {
      id v6 = +[TransparencyError errorWithDomain:kTransparencyErrorInternal, -167, @"no context for handling pending requestId %@", *(void *)(a1 + 32) code description];
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    id v9 = [WeakRetained deps];
    id v10 = [v9 dataStore];
    uint64_t v11 = *(void *)(a1 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100011660;
    v14[3] = &unk_1002B77C0;
    id v15 = v5;
    id v16 = *(id *)(a1 + 40);
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = v8;
    id v19 = *(id *)(a1 + 56);
    [v10 performAndWaitForRequestId:v11 error:0 block:v14];

    id v6 = v15;
  }
}

void sub_10001161C(id a1)
{
  qword_1003266B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100011660(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 type];
  if (v4 == (id)2) {
    goto LABEL_4;
  }
  if (v4 == (id)1)
  {
    id v9 = [*(id *)(a1 + 56) deps];
    id v10 = [v9 cloudRecords];

    if (v10)
    {
      uint64_t v11 = [_TtC13transparencyd19KTCloudRecordsCache alloc];
      id v12 = [*(id *)(a1 + 56) deps];
      uint64_t v13 = [v12 cloudRecords];
      id v10 = [(KTCloudRecordsCache *)v11 initWithRecords:v13];
    }
    __int16 v14 = *(void **)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 48);
    id v28 = 0;
    [v14 validateSelfKTRequest:v3 queryRequest:v15 queryResponse:v16 selfVerificationInfo:0 optInCheck:0 cloudDevices:v10 transparentData:0 loggableDatas:0 error:&v28];
    id v8 = v28;
  }
  else
  {
    if (!v4)
    {
LABEL_4:
      id v5 = *(void **)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      id v29 = 0;
      [v5 validatePeerOrEnrollKTRequest:v3 queryRequest:v6 queryResponse:v7 transparentData:0 loggableDatas:0 error:&v29];
      id v8 = v29;
      goto LABEL_13;
    }
    if (qword_1003266B0 != -1) {
      dispatch_once(&qword_1003266B0, &stru_1002B7798);
    }
    id v17 = (void *)qword_1003266B8;
    if (os_log_type_enabled((os_log_t)qword_1003266B8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = v17;
      id v19 = [v3 requestId];
      *(_DWORD *)buf = 138543618;
      id v31 = v19;
      __int16 v32 = 2048;
      id v33 = [v3 type];
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "ValidatePendingRequests:deleting requestId %{public}@ with unknown type %lld", buf, 0x16u);
    }
    uint64_t v20 = kTransparencyErrorDecode;
    uint64_t v21 = [v3 requestId];
    id v8 = +[TransparencyError errorWithDomain:v20, -206, @"deleting requestId %@ with unknown type", v21 code description];

    __int16 v22 = [*(id *)(a1 + 56) deps];
    id v23 = [v22 dataStore];
    [v23 deleteObject:v3];

    id v24 = [v3 type];
    long long v25 = [*(id *)(a1 + 56) application];
    long long v26 = +[KTContext validateEventName:v24 application:v25];

    long long v27 = +[TransparencyAnalytics logger];
    [v27 logResultForEvent:v26 hardFailure:1 result:v8];
  }
LABEL_13:
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100011978(id a1)
{
  qword_1003266B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100011CE0(id a1)
{
  qword_1003266B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000126F0(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100012734(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100012BFC(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100012C40(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100012C84(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100012CC8(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100012D0C(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100013450(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100013494(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000134D8(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001351C(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000136B8(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100013B4C(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100013B90(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100013BD4(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100013F08(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100014304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100014328(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100014338(uint64_t a1)
{
}

void sub_100014340(void *a1)
{
  v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = *(void *)(a1[8] + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v2 fetchPeer:v3 application:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (!v6)
  {
    uint64_t v7 = (void *)a1[4];
    uint64_t v8 = a1[5];
    uint64_t v9 = a1[6];
    uint64_t v10 = *(void *)(a1[8] + 8);
    id v14 = *(id *)(v10 + 40);
    uint64_t v6 = [v7 createPeerState:v8 application:v9 error:&v14];
    objc_storeStrong((id *)(v10 + 40), v14);
  }
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = *(void *)(a1[8] + 8);
  id v13 = *(id *)(v12 + 40);
  [v11 cleanseError:&v13];
  objc_storeStrong((id *)(v12 + 40), v13);
  (*(void (**)(void))(a1[7] + 16))();
  *(unsigned char *)(*(void *)(a1[9] + 8) + 24) = 1;
}

void sub_100014600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100014620(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = +[PeerState fetchRequest];
    uint64_t v6 = +[NSPredicate predicateWithFormat:@"application = %@ && (failure != nil || mostRecentSuccess != nil || mostRecentCompleted != nil)", *(void *)(a1 + 40)];
    [v5 setPredicate:v6];

    uint64_t v7 = [*(id *)(a1 + 32) context];
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    id v26 = *(id *)(v8 + 40);
    uint64_t v9 = [v7 executeFetchRequest:v5 error:&v26];
    objc_storeStrong((id *)(v8 + 40), v26);

    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v22 objects:v28 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v23;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v23 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void **)(*((void *)&v22 + 1) + 8 * i);
          [v15 setMostRecentCompleted:0];
          [v15 setMostRecentSuccess:0];
          [v15 setFailure:0];
          [v15 setSeenDate:0];
        }
        id v12 = [v10 countByEnumeratingWithState:&v22 objects:v28 count:16];
      }
      while (v12);
    }

    uint64_t v16 = *(void **)(a1 + 32);
    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8);
    id v21 = *(id *)(v17 + 40);
    [v16 persistWithError:&v21];
    objc_storeStrong((id *)(v17 + 40), v21);
    uint64_t v18 = objc_opt_class();
    uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8);
    id v20 = *(id *)(v19 + 40);
    [v18 cleanseError:&v20];
    objc_storeStrong((id *)(v19 + 40), v20);
  }
}

void sub_100014858(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100014988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000149A0(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = +[PeerState fetchRequest];
    uint64_t v6 = [*(id *)(a1 + 32) context];
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    id v18 = *(id *)(v7 + 40);
    uint64_t v8 = [v6 executeFetchRequest:v5 error:&v18];
    objc_storeStrong((id *)(v7 + 40), v18);

    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    id v17 = *(id *)(v10 + 40);
    [v9 persistWithError:&v17];
    objc_storeStrong((id *)(v10 + 40), v17);
    id v11 = objc_opt_class();
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    id v16 = *(id *)(v12 + 40);
    [v11 cleanseError:&v16];
    objc_storeStrong((id *)(v12 + 40), v16);
    if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      if (qword_1003266C0 != -1) {
        dispatch_once(&qword_1003266C0, &stru_1002B7A98);
      }
      uint64_t v13 = qword_1003266C8;
      if (os_log_type_enabled((os_log_t)qword_1003266C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v21 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "failed to retrieve peer states: %@", buf, 0xCu);
      }
      uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    else
    {
      uint64_t v15 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    v15();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100014BB8(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100014E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100014E40(uint64_t a1)
{
  v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8);
  id obj = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = +[NSBatchUpdateRequest batchUpdateRequestWithEntityName:@"PeerState"];
    uint64_t v6 = +[NSPredicate predicateWithFormat:@"uri IN %@ && application = %@ && failure != nil && seenDate == nil", *(void *)(a1 + 40), *(void *)(a1 + 48)];
    [v5 setPredicate:v6];

    CFStringRef v23 = @"seenDate";
    uint64_t v24 = *(void *)(a1 + 56);
    uint64_t v7 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
    [v5 setPropertiesToUpdate:v7];

    [v5 setResultType:1];
    uint64_t v8 = [*(id *)(a1 + 32) context];
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
    id v19 = *(id *)(v9 + 40);
    uint64_t v10 = [v8 executeRequest:v5 error:&v19];
    objc_storeStrong((id *)(v9 + 40), v19);

    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8);
    id v18 = *(id *)(v12 + 40);
    [v11 persistWithError:&v18];
    objc_storeStrong((id *)(v12 + 40), v18);
    if (!v10)
    {
      if (qword_1003266C0 != -1) {
        dispatch_once(&qword_1003266C0, &stru_1002B7AE0);
      }
      uint64_t v13 = qword_1003266C8;
      if (os_log_type_enabled((os_log_t)qword_1003266C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v22 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "setSeenDate delete: %@", buf, 0xCu);
      }
    }
  }
  uint64_t v15 = objc_opt_class();
  uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8);
  id v17 = *(id *)(v16 + 40);
  [v15 cleanseError:&v17];
  objc_storeStrong((id *)(v16 + 40), v17);
}

void sub_100015098(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000150DC(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000156C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void sub_1000156E4(void *a1, void *a2)
{
  uint64_t v3 = (void *)a1[4];
  id v4 = a2;
  [v4 setUnsigned:value:@"lastIDSCacheUIStatus" [v3 uiStatus]];
  uint64_t v5 = (void *)a1[5];
  uint64_t v6 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v6 + 40);
  [v5 persistAndRefaultObject:v4 error:&obj];

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = *(void *)(a1[6] + 8);
  id v9 = *(id *)(v8 + 40);
  [v7 cleanseError:&v9];
  objc_storeStrong((id *)(v8 + 40), v9);
}

void sub_100015798(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000157DC(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100015820(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100015B24(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100015DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100015DC8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  unint64_t v5 = a1[8];
  if (v5 <= 0xD)
  {
    if (((1 << v5) & 0x20C1) != 0)
    {
      +[TransparencySettings failureIgnorePeriod];
      uint64_t v6 = +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:");
      [v4 setIgnoredFailureExpiry:v6];
    }
    else
    {
      if (v5 != 10) {
        goto LABEL_16;
      }
      if (([v3 optedIn] & 1) == 0) {
        [v4 setTurnedOffIgnored:1];
      }
    }
    uint64_t v7 = (void *)a1[4];
    id v16 = 0;
    unsigned __int8 v8 = [v7 persistWithError:&v16];
    id v9 = v16;
    if ((v8 & 1) == 0)
    {
      if (qword_1003266C0 != -1) {
        dispatch_once(&qword_1003266C0, &stru_1002B7BF0);
      }
      uint64_t v10 = qword_1003266C8;
      if (os_log_type_enabled((os_log_t)qword_1003266C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = a1[5];
        uint64_t v12 = a1[6];
        *(_DWORD *)buf = 138544130;
        uint64_t v18 = v11;
        __int16 v19 = 2160;
        uint64_t v20 = 1752392040;
        __int16 v21 = 2112;
        uint64_t v22 = v12;
        __int16 v23 = 2112;
        id v24 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "failed to save ignore error for application=%{public}@ uri=%{mask.hash}@: %@", buf, 0x2Au);
      }
      id v15 = v9;
      [(id)objc_opt_class() cleanseError:&v15];
      id v13 = v15;
      id v14 = v15;

      if (v14)
      {
        objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), v13);
        id v9 = v14;
      }
      else
      {
        id v9 = 0;
      }
    }
  }
LABEL_16:
}

void sub_100015FC0(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100016004(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001616C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100016184(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(KTOptInStatus);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setEverOptedIn:[v3 everOptedIn]];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setOptedIn:[v3 optedIn]];
  id v7 = [v3 everCompletedVerification];

  unsigned __int8 v8 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);

  return [v8 setEverCompletedVerification:v7];
}

void sub_1000163BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000163D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setDataStore:*(void *)(a1 + 32)];
  id v4 = [*(id *)(a1 + 32) staticKeyStore];
  uint64_t v5 = [v3 verifierResultWithStaticKeyStore:v4];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  id v8 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) uiStatus];
  if (v8 != [v3 lastIDSCacheUIStatus])
  {
    if (qword_1003266C0 != -1) {
      dispatch_once(&qword_1003266C0, &stru_1002B7C80);
    }
    id v9 = (void *)qword_1003266C8;
    if (os_log_type_enabled((os_log_t)qword_1003266C8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = v9;
      id v11 = [v3 lastIDSCacheUIStatus];
      id v12 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) uiStatus];
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 134218754;
      id v19 = v11;
      __int16 v20 = 2048;
      id v21 = v12;
      __int16 v22 = 2160;
      uint64_t v23 = 1752392040;
      __int16 v24 = 2112;
      uint64_t v25 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "verifierResultForPeer cached UI status changed %lld->%llu for %{mask.hash}@, will update IDS cache", buf, 0x2Au);
    }
    id v14 = *(void **)(a1 + 32);
    uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v15 = +[NSArray arrayWithObjects:&v17 count:1];
    [v14 updateIDSCacheWithResults:v15];

    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setSentToIDS:1];
  }
  id v16 = [*(id *)(a1 + 32) peerOverridesStore];
  [v16 applyPeerOverrides:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) peer:v3];

  [*(id *)(a1 + 32) persistAndRefaultObject:v3 error:0];
}

void sub_1000165F8(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100016774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100016788(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v2 = [WeakRetained verifierResultForPeer:*(void *)(a1 + 32) application:*(void *)(a1 + 40)];
}

void sub_100016AD4(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100016D54(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100016D98(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_100016EC4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onQueueSetCachedPeerOptInState:*(unsigned __int8 *)(a1 + 56) uris:*(void *)(a1 + 40) application:*(void *)(a1 + 48) error:0];
}

id sub_100016F90(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onQueueRemoveFailures:*(void *)(a1 + 40) error:0];
}

void sub_1000171E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100017208(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001724C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = +[PeerState fetchRequest];
    uint64_t v6 = +[NSPredicate predicateWithFormat:@"application = %@ && (failure != nil)", *(void *)(a1 + 40)];
    [v5 setPredicate:v6];

    id v7 = [*(id *)(a1 + 32) context];
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    id v25 = *(id *)(v8 + 40);
    id v9 = [v7 executeFetchRequest:v5 error:&v25];
    objc_storeStrong((id *)(v8 + 40), v25);

    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v21 objects:v27 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v22;
      do
      {
        id v14 = 0;
        do
        {
          if (*(void *)v22 != v13) {
            objc_enumerationMutation(v10);
          }
          [*(id *)(*((void *)&v21 + 1) + 8 * (void)v14) setFailure:0];
          id v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        id v12 = [v10 countByEnumeratingWithState:&v21 objects:v27 count:16];
      }
      while (v12);
    }

    id v15 = *(void **)(a1 + 32);
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
    id v20 = *(id *)(v16 + 40);
    [v15 persistWithError:&v20];
    objc_storeStrong((id *)(v16 + 40), v20);
    uint64_t v17 = objc_opt_class();
    uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8);
    id v19 = *(id *)(v18 + 40);
    [v17 cleanseError:&v19];
    objc_storeStrong((id *)(v18 + 40), v19);
  }
}

void sub_10001745C(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000177CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_100017800(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = +[NSBatchUpdateRequest batchUpdateRequestWithEntityName:@"PeerState"];
    uint64_t v6 = +[NSPredicate predicateWithFormat:@"uri IN %@ && application = %@", *(void *)(a1 + 40), *(void *)(a1 + 48)];
    [v5 setPredicate:v6];

    CFStringRef v26 = @"optedIn";
    id v7 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 64)];
    long long v27 = v7;
    uint64_t v8 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
    id v9 = [v8 mutableCopy];

    if (*(unsigned char *)(a1 + 64))
    {
      id v10 = +[NSNumber numberWithBool:1];
      [v9 setObject:v10 forKeyedSubscript:@"everOptedIn"];
    }
    [v5 setPropertiesToUpdate:v9];
    [v5 setResultType:1];
    id v11 = [*(id *)(a1 + 32) context];
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
    id v22 = *(id *)(v12 + 40);
    uint64_t v13 = [v11 executeRequest:v5 error:&v22];
    objc_storeStrong((id *)(v12 + 40), v22);

    id v14 = *(void **)(a1 + 32);
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    id v21 = *(id *)(v15 + 40);
    [v14 persistWithError:&v21];
    objc_storeStrong((id *)(v15 + 40), v21);
    if (!v13)
    {
      if (qword_1003266C0 != -1) {
        dispatch_once(&qword_1003266C0, &stru_1002B7DB8);
      }
      uint64_t v16 = qword_1003266C8;
      if (os_log_type_enabled((os_log_t)qword_1003266C8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v25 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "onQueueSetCachedPeerOptInState delete: %@", buf, 0xCu);
      }
    }
  }
  uint64_t v18 = objc_opt_class();
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
  id v20 = *(id *)(v19 + 40);
  [v18 cleanseError:&v20];
  objc_storeStrong((id *)(v19 + 40), v20);
}

void sub_100017AB0(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100017AF4(id a1)
{
  qword_1003266C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000192A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 40) objectAtColumn:a2];
  id v6 = (id)v4;
  if (v4)
  {
    [*(id *)(a1 + 32) setObject:v4 atIndexedSubscript:a2];
  }
  else
  {
    uint64_t v5 = +[NSNull null];
    [*(id *)(a1 + 32) setObject:v5 atIndexedSubscript:a2];
  }
}

void sub_100019404(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  uint64_t v5 = [*(id *)(a1 + 32) objectAtColumn:a2];
  if (v5) {
    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v6];
  }
}

void sub_100019990(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A1E8(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A22C(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A270(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A2B4(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A2F8(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A33C(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A380(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A3C4(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A408(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A44C(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A490(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A4D4(id a1)
{
  qword_1003266D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A5A0(id a1)
{
  byte_1003266E8 = _os_feature_enabled_impl();
  if (qword_1003266F8 != -1) {
    dispatch_once(&qword_1003266F8, &stru_1002B8010);
  }
  v1 = qword_100326700;
  if (os_log_type_enabled((os_log_t)qword_100326700, OS_LOG_TYPE_INFO))
  {
    if (byte_1003266E8) {
      id v2 = "enabled";
    }
    else {
      id v2 = "disabled";
    }
    int v3 = 136315138;
    uint64_t v4 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Transparency CFUs are %s (via feature flags)", (uint8_t *)&v3, 0xCu);
  }
}

void sub_10001A69C(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001A734(id a1)
{
  if (+[TransparencyFollowup isFollowupEnabled])
  {
    qword_1003266E0 = [[TransparencyFollowup alloc] initWithAnalytics:0];
    _objc_release_x1();
  }
}

void sub_10001AA84(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C240(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001C25C(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C2A0(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C2E4(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C328(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C36C(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C3B0(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C3F4(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C5E8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001C604(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C648(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001C9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10001CA04(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001CBB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001CC48(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10001CF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

void sub_10001CF4C(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001D4D8(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001D51C(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001D560(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001D5A4(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001D5E8(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001D62C(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001D670(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001DA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10001DA98(id a1)
{
  qword_100326700 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001DBB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10001DBDC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained ktFollowupStatus];

  return v2;
}

void sub_10001E50C(id a1)
{
  qword_100326718 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001E550(id a1)
{
  qword_100326718 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001E594(id a1)
{
  qword_100326718 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001ECAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{
}

void sub_10001ECE4(id a1)
{
  qword_100326718 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001ED28(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  uint64_t v4 = [v3 error];

  [WeakRetained setError:v4];
  [WeakRetained setTransaction:0];
}

void sub_10001F688(id a1)
{
  qword_100326718 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001F6CC(id a1)
{
  qword_100326718 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001F904(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v32 = 0;
    id v33 = &v32;
    uint64_t v34 = 0x3032000000;
    v35 = sub_10001FCB0;
    uint64_t v36 = sub_10001FCC0;
    id v37 = 0;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = [*(id *)(a1 + 48) ktLogClient];
    id v7 = [v6 batchQueryMaxURIs];
    uint64_t v8 = (id *)(v33 + 5);
    id obj = (id)v33[5];
    id v9 = +[TransparencyRPCRequestBuilder buildBatchQueryRequests:v4 application:v5 maxURIsPerBatch:v7 error:&obj];
    objc_storeStrong(v8, obj);

    if (v9)
    {
      id v10 = +[NSMutableDictionary dictionary];
      id v11 = +[NSMutableDictionary dictionary];
      uint64_t v12 = [*(id *)(a1 + 48) ktLogClient];
      uint64_t v13 = *(unsigned __int8 *)(a1 + 64);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_10001FD0C;
      v26[3] = &unk_1002B84B8;
      id v30 = &v32;
      id v27 = v10;
      int8x16_t v20 = *(int8x16_t *)(a1 + 40);
      id v14 = (id)v20.i64[0];
      int8x16_t v28 = vextq_s8(v20, v20, 8uLL);
      id v29 = v11;
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_100020530;
      v21[3] = &unk_1002B84E0;
      id v15 = v27;
      id v22 = v15;
      id v16 = v29;
      id v23 = v16;
      id v24 = *(id *)(a1 + 56);
      uint64_t v25 = &v32;
      [v12 fetchBatchQueries:v9 userInitiated:v13 responseHandler:v26 completionHandler:v21];
    }
    else
    {
      if (qword_100326720 != -1) {
        dispatch_once(&qword_100326720, &stru_1002B83E0);
      }
      uint64_t v17 = qword_100326728;
      if (os_log_type_enabled((os_log_t)qword_100326728, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = v33[5];
        *(_DWORD *)buf = 138412290;
        uint64_t v39 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to create query request: %@", buf, 0xCu);
      }
      uint64_t v19 = *(void *)(a1 + 56);
      id v15 = +[SecXPCHelper cleanseErrorForXPC:v33[5]];
      (*(void (**)(uint64_t, void, id))(v19 + 16))(v19, 0, v15);
    }

    _Block_object_dispose(&v32, 8);
  }
}

void sub_10001FC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_10001FCB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001FCC0(uint64_t a1)
{
}

void sub_10001FCC8(id a1)
{
  qword_100326728 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10001FD0C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v10)
  {
    if (qword_100326720 != -1) {
      dispatch_once(&qword_100326720, &stru_1002B8420);
    }
    uint64_t v13 = qword_100326728;
    if (os_log_type_enabled((os_log_t)qword_100326728, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "fetch batch query succeeded", buf, 2u);
    }
    CFStringRef v31 = @"responseDebugDescription";
    id v14 = [v10 diagnosticsJsonDictionary];
    uint64_t v32 = v14;
    id v15 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    id v16 = *(void **)(a1 + 32);
    uint64_t v17 = [v11 UUIDString];
    [v16 setObject:v15 forKeyedSubscript:v17];

    uint64_t v18 = [*(id *)(a1 + 40) xpcContextStore];
    uint64_t v19 = +[NSDate date];
    uint64_t v20 = *(void *)(a1 + 48);
    id v21 = [*(id *)(a1 + 40) ktLogClient];
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_10002011C;
    v29[3] = &unk_1002B8448;
    id v30 = *(id *)(a1 + 56);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472;
    v27[2] = sub_100020400;
    v27[3] = &unk_1002B8490;
    id v28 = v11;
    [v18 handleBatchQueryResponse:v10 queryRequest:v9 receiptDate:v19 fetchId:v28 application:v20 logClient:v21 transparentDataHandler:v29 completionHandler:v27];

    id v22 = v30;
  }
  else
  {
    if (qword_100326720 != -1) {
      dispatch_once(&qword_100326720, &stru_1002B8400);
    }
    id v23 = qword_100326728;
    if (os_log_type_enabled((os_log_t)qword_100326728, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v36 = v12;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "fetch batch query failed: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a5);
    CFStringRef v33 = @"error";
    id v22 = [v12 description];
    uint64_t v34 = v22;
    id v24 = +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
    uint64_t v25 = *(void **)(a1 + 32);
    CFStringRef v26 = [v11 UUIDString];
    [v25 setObject:v24 forKeyedSubscript:v26];
  }
}

void sub_100020094(id a1)
{
  qword_100326728 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000200D8(id a1)
{
  qword_100326728 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002011C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = +[NSMutableDictionary dictionary];
  if (v10)
  {
    id v14 = [v10 mapEntry];
    id v15 = [v14 mapLeaf];

    if (v15)
    {
      id v16 = [v10 mapEntry];
      uint64_t v17 = [v16 mapLeaf];
      uint64_t v18 = +[IdsMapLeaf parseFromData:v17 error:0];

      if (v18)
      {
        uint64_t v19 = [v18 diagnosticsJsonDictionary];
        [v13 setObject:v19 forKeyedSubscript:@"mapLeaf"];
      }
    }
    if (objc_msgSend(v10, "pendingSmtsArray_Count"))
    {
      id v30 = v12;
      uint64_t v31 = a1;
      id v32 = v9;
      uint64_t v20 = +[NSMutableArray array];
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      id v21 = [v10 pendingSmtsArray];
      id v22 = [v21 countByEnumeratingWithState:&v33 objects:v37 count:16];
      if (v22)
      {
        id v23 = v22;
        uint64_t v24 = *(void *)v34;
        do
        {
          for (i = 0; i != v23; i = (char *)i + 1)
          {
            if (*(void *)v34 != v24) {
              objc_enumerationMutation(v21);
            }
            CFStringRef v26 = +[SignedMutationTimestamp signedTypeWithObject:*(void *)(*((void *)&v33 + 1) + 8 * i)];
            id v27 = [v26 diagnosticsJsonDictionary];
            [v20 addObject:v27];
          }
          id v23 = [v21 countByEnumeratingWithState:&v33 objects:v37 count:16];
        }
        while (v23);
      }

      if ([v20 count]) {
        [v13 setObject:v20 forKeyedSubscript:@"pendingSmts"];
      }

      a1 = v31;
      id v9 = v32;
      id v12 = v30;
    }
  }
  if (v11)
  {
    id v28 = [v11 diagnosticsJsonDictionary];
    [v13 setObject:v28 forKeyedSubscript:@"transparentData"];
  }
  if (v12)
  {
    id v29 = [v12 description];
    [v13 setObject:v29 forKeyedSubscript:@"error"];
  }
  [*(id *)(a1 + 32) setObject:v13 forKeyedSubscript:v9];
}

void sub_100020400(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (qword_100326720 != -1) {
    dispatch_once(&qword_100326720, &stru_1002B8468);
  }
  uint64_t v5 = qword_100326728;
  if (os_log_type_enabled((os_log_t)qword_100326728, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138543618;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "failed to handle fetchId %{public}@ batch query: %@", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1000204EC(id a1)
{
  qword_100326728 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100020530(uint64_t a1)
{
  [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"uriData"];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, v2, v4);
}

void sub_100020AF0(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100020B34(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100020B78(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100020BBC(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002127C(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000212C0(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100021304(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100021568(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100021C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v41 - 224), 8);
  _Block_object_dispose((const void *)(v41 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100021C98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100021CA8(uint64_t a1)
{
}

void sub_100021CB0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    uint64_t v40 = a3;
    uint64_t v41 = *(void *)(a1 + 88);
    id v11 = v8;
    id v12 = v7;
    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = [*(id *)(a1 + 40) accountKey];
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    uint64_t v16 = *(void *)(a1 + 96);
    uint64_t v17 = [*(id *)(a1 + 40) idsResponseTime];
    uint64_t v18 = [*(id *)(a1 + 48) metadata];
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
    id obj = *(id *)(v19 + 40);
    uint64_t v20 = v13;
    id v7 = v12;
    id v8 = v11;
    id v21 = [v20 validateAndReportPeerOrEnroll:v7 type:v41 transparentData:v11 accountKey:v14 loggableDatas:v15 initialResult:v16 idsResponseTime:v17 responseMetadata:v18 error:&obj];
    objc_storeStrong((id *)(v19 + 40), obj);
    *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v21;

    if (*(void *)(a1 + 96) == 3)
    {
      [*(id *)(a1 + 40) setVerificationResult:3];
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 3;
    }
    uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
    if (v22 == 3)
    {
      id v23 = v40;
      id v9 = 0;
      if (qword_100326730 != -1) {
        dispatch_once(&qword_100326730, &stru_1002B8668);
      }
      id v30 = (void *)qword_100326738;
      if (!os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      if (*(void *)(a1 + 88)) {
        CFStringRef v31 = @"enroll";
      }
      else {
        CFStringRef v31 = @"peer";
      }
      id v32 = *(void **)(a1 + 40);
      id v27 = v30;
      id v28 = [v32 requestId];
      *(_DWORD *)buf = 138412546;
      uint64_t v44 = (uint64_t)v31;
      __int16 v45 = 2114;
      id v46 = v28;
      id v29 = "Ignoring validate %@ result for requestId %{public}@";
    }
    else
    {
      id v23 = v40;
      id v9 = 0;
      if (v22 != 1)
      {
        if (qword_100326730 != -1) {
          dispatch_once(&qword_100326730, &stru_1002B8688);
        }
        long long v36 = (void *)qword_100326738;
        if (!os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR)) {
          goto LABEL_34;
        }
        if (*(void *)(a1 + 88)) {
          CFStringRef v37 = @"enroll";
        }
        else {
          CFStringRef v37 = @"peer";
        }
        signed int v38 = *(void **)(a1 + 40);
        id v27 = v36;
        id v28 = [v38 requestId];
        uint64_t v39 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138412802;
        uint64_t v44 = (uint64_t)v37;
        __int16 v45 = 2114;
        id v46 = v28;
        __int16 v47 = 2112;
        id v48 = v39;
        id v29 = "Validate %@ failed for requestId %{public}@: %@";
        long long v33 = v27;
        os_log_type_t v34 = OS_LOG_TYPE_ERROR;
        uint32_t v35 = 32;
        goto LABEL_33;
      }
      if (qword_100326730 != -1) {
        dispatch_once(&qword_100326730, &stru_1002B8648);
      }
      uint64_t v24 = (void *)qword_100326738;
      if (!os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      if (*(void *)(a1 + 88)) {
        CFStringRef v25 = @"enroll";
      }
      else {
        CFStringRef v25 = @"peer";
      }
      CFStringRef v26 = *(void **)(a1 + 40);
      id v27 = v24;
      id v28 = [v26 requestId];
      *(_DWORD *)buf = 138412546;
      uint64_t v44 = (uint64_t)v25;
      __int16 v45 = 2114;
      id v46 = v28;
      id v29 = "Validate %@ succeeded for requestId %{public}@";
    }
    long long v33 = v27;
    os_log_type_t v34 = OS_LOG_TYPE_DEFAULT;
    uint32_t v35 = 22;
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v33, v34, v29, buf, v35);

LABEL_34:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), v23);
    goto LABEL_35;
  }
  if (qword_100326730 != -1) {
    dispatch_once(&qword_100326730, &stru_1002B8628);
  }
  id v10 = qword_100326738;
  if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 141558530;
    uint64_t v44 = 1752392040;
    __int16 v45 = 2112;
    id v46 = v7;
    __int16 v47 = 2112;
    id v48 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "verification failed for %{mask.hash}@: %@", buf, 0x20u);
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a4);
  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
LABEL_35:
}

void sub_10002215C(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000221A0(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000221E4(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100022228(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002226C(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100022620(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100022D78(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100022DD0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(*(void *)(a1 + 88) + 8);
    id v71 = *(id *)(v13 + 40);
    id v72 = 0;
    id v14 = [v11 deserializeSyncedLoggableDatas:v12 loggableDatas:&v72 error:&v71];
    id v15 = v72;
    objc_storeStrong((id *)(v13 + 40), v71);
    *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = v14;
    if (v14 != (id)1)
    {
LABEL_33:

      goto LABEL_34;
    }
    id v67 = a3;
    uint64_t v16 = *(void **)(a1 + 48);
    uint64_t v17 = [v8 uriVRFOutput];
    [v16 setWithUriVRFHash:v17];

    uint64_t v66 = *(void **)(a1 + 32);
    uint64_t v18 = [*(id *)(a1 + 40) accountKey];
    uint64_t v64 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40);
    v65 = (void *)v18;
    char v62 = *(unsigned char *)(a1 + 128);
    uint64_t v19 = *(void *)(a1 + 48);
    uint64_t v63 = *(void *)(a1 + 56);
    id v68 = v7;
    id v69 = v15;
    uint64_t v20 = *(void *)(a1 + 64);
    uint64_t v21 = *(void *)(a1 + 72);
    char v22 = *(unsigned char *)(a1 + 129);
    id v23 = v8;
    uint64_t v24 = *(void *)(a1 + 120);
    CFStringRef v25 = [*(id *)(a1 + 40) idsResponseTime];
    CFStringRef v26 = [*(id *)(a1 + 80) metadata];
    uint64_t v27 = *(void *)(*(void *)(a1 + 88) + 8);
    id obj = *(id *)(v27 + 40);
    uint64_t v61 = v24;
    id v8 = v23;
    LOBYTE(v60) = v22;
    uint64_t v59 = v20;
    id v7 = v68;
    LOBYTE(v58) = v62;
    id v28 = [v66 validateAndReportSelf:v68 transparentData:v23 accountKey:v65 serverloggableDatas:v64 syncedLoggableDatas:v69 selfVerificationInfo:v63 optInCheck:v58 cloudDevices:v19 pcsAccountKey:v59 kvsOptInHistory:v21 isReplay:v60 initialResult:v61 idsResponseTime:v25 responseMetadata:v26 error:&obj];
    objc_storeStrong((id *)(v27 + 40), obj);
    *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = v28;

    if (*(void *)(a1 + 120) == 3)
    {
      [*(id *)(a1 + 40) setVerificationResult:3];
      *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = 3;
    }
    uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24);
    if (v29 == 3)
    {
      if (qword_100326730 != -1) {
        dispatch_once(&qword_100326730, &stru_1002B8750);
      }
      id v9 = 0;
      signed int v38 = (void *)qword_100326738;
      if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v39 = *(void **)(a1 + 40);
        uint64_t v40 = v38;
        uint64_t v41 = [v39 requestId];
        *(_DWORD *)buf = 138543362;
        uint64_t v74 = (uint64_t)v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Ignoring validate self result for requestId %{public}@", buf, 0xCu);
      }
      goto LABEL_32;
    }
    if (v29 == 1)
    {
      id v9 = 0;
      if (qword_100326730 != -1) {
        dispatch_once(&qword_100326730, &stru_1002B8730);
      }
      id v30 = (void *)qword_100326738;
      if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v31 = *(void **)(a1 + 40);
        id v32 = v30;
        long long v33 = [v31 requestId];
        *(_DWORD *)buf = 138543362;
        uint64_t v74 = (uint64_t)v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Validate self succeeded for requestId %{public}@", buf, 0xCu);
      }
      os_log_type_t v34 = [*(id *)(a1 + 32) dataStore];
      uint32_t v35 = [*(id *)(a1 + 32) applicationID];
      [v34 clearSelfValidationFollowups:v35 uri:v68 error:0];

      long long v36 = [*(id *)(a1 + 32) dataStore];
      CFStringRef v37 = [*(id *)(a1 + 32) applicationID];
      [v36 clearSelfFailureRelatedData:v37 uri:v68 error:0];
    }
    else
    {
      id v9 = 0;
      if (qword_100326730 != -1) {
        dispatch_once(&qword_100326730, &stru_1002B8770);
      }
      __int16 v42 = (void *)qword_100326738;
      if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = *(void **)(a1 + 40);
        uint64_t v44 = v42;
        __int16 v45 = [v43 requestId];
        id v46 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
        *(_DWORD *)buf = 138543618;
        uint64_t v74 = (uint64_t)v45;
        __int16 v75 = 2112;
        id v76 = v46;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Validate self failed for requestId %{public}@: %@", buf, 0x16u);
      }
      __int16 v47 = [*(id *)(a1 + 40) idsResponseTime];
      id v48 = [*(id *)(a1 + 40) accountKey];
      unsigned int v49 = [v8 optInAfter:v47 accountKey:v48];

      if (!v49) {
        goto LABEL_32;
      }
      if (qword_100326730 != -1) {
        dispatch_once(&qword_100326730, &stru_1002B8790);
      }
      v50 = (void *)qword_100326738;
      if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_DEFAULT))
      {
        v51 = *(void **)(a1 + 32);
        v52 = v50;
        uint64_t v53 = [v51 applicationID];
        *(_DWORD *)buf = 141558530;
        uint64_t v74 = 1752392040;
        __int16 v75 = 2112;
        id v76 = v68;
        __int16 v77 = 2112;
        id v78 = v53;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Clearing IDS cache for %{mask.hash}@[%@]", buf, 0x20u);
      }
      v54 = [*(id *)(a1 + 32) stateMachine];
      v55 = [*(id *)(a1 + 40) uri];
      v56 = [*(id *)(a1 + 32) applicationID];
      [v54 clearIDSCacheForUri:v55 application:v56];

      long long v36 = [*(id *)(a1 + 32) stateMachine];
      [v36 triggerSelfValidate:1.0];
    }

LABEL_32:
    v57 = +[TransparencyManagedDataStore serializeLoggableDatas:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40)];
    [*(id *)(a1 + 40) setServerLoggableDatas:v57];

    [*(id *)(a1 + 32) writeLoggableDatas:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) request:*(void *)(a1 + 40)];
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40), v67);
    id v15 = v69;
    goto LABEL_33;
  }
  if (qword_100326730 != -1) {
    dispatch_once(&qword_100326730, &stru_1002B8710);
  }
  id v10 = qword_100326738;
  if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 141558530;
    uint64_t v74 = 1752392040;
    __int16 v75 = 2112;
    id v76 = v7;
    __int16 v77 = 2112;
    id v78 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "verification failed for %{mask.hash}@: %@", buf, 0x20u);
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), a4);
  *(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = 0;
LABEL_34:
}

void sub_1000234E0(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100023524(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100023568(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000235AC(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000235F0(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100023634(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002392C(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100023970(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100023EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100023EF0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    CFStringRef v37 = a3;
    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = [*(id *)(a1 + 40) accountKey];
    uint64_t v13 = *(void *)(a1 + 96);
    uint64_t v14 = *(void *)(a1 + 48);
    id v15 = [*(id *)(a1 + 40) idsResponseTime];
    uint64_t v16 = [*(id *)(a1 + 32) metadataForInsertResponse:*(void *)(a1 + 56)];
    uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 8);
    id obj = *(id *)(v17 + 40);
    id v38 = v7;
    id v18 = [v11 validateAndReportEnroll:v7 transparentData:v8 accountKey:v12 loggableDatas:v14 initialResult:v13 idsResponseTime:v15 responseMetadata:v16 error:&obj];
    objc_storeStrong((id *)(v17 + 40), obj);
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = v18;

    if (*(void *)(a1 + 96) == 3)
    {
      [*(id *)(a1 + 40) setVerificationResult:3];
      *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 3;
    }
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24);
    id v9 = 0;
    if (v19 == 3)
    {
      id v7 = v38;
      if (qword_100326730 != -1) {
        dispatch_once(&qword_100326730, &stru_1002B8878);
      }
      uint64_t v20 = v37;
      uint64_t v27 = (void *)qword_100326738;
      if (!os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_26;
      }
      id v28 = *(void **)(a1 + 40);
      CFStringRef v26 = v27;
      uint64_t v29 = [v28 requestId];
      *(_DWORD *)buf = 138543362;
      uint64_t v41 = (uint64_t)v29;
      id v30 = "Ignoring validate enrollment result for requestId %{public}@";
      uint64_t v31 = v26;
      os_log_type_t v32 = OS_LOG_TYPE_DEFAULT;
      uint32_t v33 = 12;
    }
    else
    {
      id v7 = v38;
      if (v19 == 1)
      {
        uint64_t v20 = v37;
        if (qword_100326730 != -1) {
          dispatch_once(&qword_100326730, &stru_1002B8858);
        }
        uint64_t v21 = (void *)qword_100326738;
        if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_DEFAULT))
        {
          char v22 = *(void **)(a1 + 40);
          id v23 = v21;
          uint64_t v24 = [v22 requestId];
          *(_DWORD *)buf = 138543362;
          uint64_t v41 = (uint64_t)v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Validate enrollment succeeded for requestId %{public}@", buf, 0xCu);
        }
        CFStringRef v25 = *(void **)(a1 + 32);
        CFStringRef v26 = [*(id *)(a1 + 40) accountKey];
        [v25 recordEnrollOptInRecord:v38 accountKey:v26 transparentData:v8 cloudOptIn:*(void *)(a1 + 64)];
        goto LABEL_25;
      }
      uint64_t v20 = v37;
      if (qword_100326730 != -1) {
        dispatch_once(&qword_100326730, &stru_1002B8898);
      }
      os_log_type_t v34 = (void *)qword_100326738;
      if (!os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR)) {
        goto LABEL_26;
      }
      uint32_t v35 = *(void **)(a1 + 40);
      CFStringRef v26 = v34;
      uint64_t v29 = [v35 requestId];
      long long v36 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v41 = (uint64_t)v29;
      __int16 v42 = 2112;
      id v43 = v36;
      id v30 = "Validate enrollment failed for requestId %{public}@: %@";
      uint64_t v31 = v26;
      os_log_type_t v32 = OS_LOG_TYPE_ERROR;
      uint32_t v33 = 22;
    }
    _os_log_impl((void *)&_mh_execute_header, v31, v32, v30, buf, v33);

LABEL_25:
LABEL_26:
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v20);
    goto LABEL_27;
  }
  if (qword_100326730 != -1) {
    dispatch_once(&qword_100326730, &stru_1002B8838);
  }
  id v10 = qword_100326738;
  if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 141558530;
    uint64_t v41 = 1752392040;
    __int16 v42 = 2112;
    id v43 = v7;
    __int16 v44 = 2112;
    id v45 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "verification failed for %{mask.hash}@: %@", buf, 0x20u);
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a4);
  *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
LABEL_27:
}

void sub_100024368(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000243AC(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000243F0(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100024434(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100024478(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100024920(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100024964(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000249A8(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100024C48(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100024FD4(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100025018(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002505C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [a1[4] dataStore];
  id v8 = a1[5];
  id v22 = 0;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1000251C4;
  v15[3] = &unk_1002B8A28;
  id v9 = v6;
  id v16 = v9;
  id v21 = a1[7];
  id v10 = v5;
  id v17 = v10;
  id v18 = a1[6];
  id v11 = a1[5];
  id v12 = a1[4];
  id v19 = v11;
  id v20 = v12;
  unsigned __int8 v13 = [v7 performAndWaitForFetchId:v8 error:&v22 block:v15];
  id v14 = v22;

  if ((v13 & 1) == 0) {
    (*((void (**)(void))a1[7] + 2))();
  }
}

void sub_1000251C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 request];
  if (*(void *)(a1 + 32))
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  else
  {
    if (qword_100326730 != -1) {
      dispatch_once(&qword_100326730, &stru_1002B89C0);
    }
    id v5 = (void *)qword_100326738;
    if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_INFO))
    {
      id v6 = v5;
      id v7 = [v4 requestId];
      *(_DWORD *)buf = 138543362;
      id v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "handling fetched response for requestId %{public}@", buf, 0xCu);
    }
    id v8 = [v3 requestData];
    id v20 = 0;
    id v9 = +[TransparencyGPBMessage parseFromData:v8 error:&v20];
    id v10 = v20;

    if (!*(void *)(a1 + 48))
    {
      if (qword_100326730 != -1) {
        dispatch_once(&qword_100326730, &stru_1002B89E0);
      }
      id v11 = qword_100326738;
      if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR))
      {
        id v12 = *(void **)(a1 + 56);
        *(_DWORD *)buf = 138543618;
        id v22 = v12;
        __int16 v23 = 2112;
        id v24 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "parse saved queryRequest for fetchId %{public}@ failed after fetch: %@", buf, 0x16u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
  unsigned __int8 v13 = [*(id *)(a1 + 64) dataStore];
  [v13 deleteObject:v3];

  id v14 = [*(id *)(a1 + 64) dataStore];
  id v19 = 0;
  unsigned __int8 v15 = [v14 persistAndRefaultObject:v3 error:&v19];
  id v16 = v19;

  if ((v15 & 1) == 0)
  {
    if (qword_100326730 != -1) {
      dispatch_once(&qword_100326730, &stru_1002B8A00);
    }
    id v17 = qword_100326738;
    if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "failed to delete fetch record after fetch: %@", buf, 0xCu);
    }
    id v18 = [*(id *)(a1 + 64) dataStore];
    [v18 reportCoreDataPersistEventForLocation:@"fetchRecordDelete" underlyingError:v16];
  }
}

void sub_1000254E8(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002552C(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100025570(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100025818(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100025C80(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100025CC4(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100025D08(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  unsigned __int8 v13 = v12;
  if (!v11 || !v10 || !v9 || v12)
  {
    if (!v11 || v12)
    {
      id v19 = *(void **)(a1 + 32);
      id v20 = [v9 uri];
      id v21 = [v9 accountKey];
      id v27 = 0;
      unsigned int v22 = [v19 peerStaticKeyFallback:v20 accountKey:v21 transparentData:&v27];
      id v17 = v27;

      if (v22)
      {
        __int16 v23 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
LABEL_20:
        v23();
        goto LABEL_21;
      }
    }
    else
    {
      if (qword_100326730 != -1) {
        dispatch_once(&qword_100326730, &stru_1002B8AD0);
      }
      id v18 = qword_100326738;
      if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        id v32 = v11;
        __int16 v33 = 2112;
        uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "validatePeer static key: %@/%@", buf, 0x16u);
      }
    }
    id v24 = [*(id *)(a1 + 32) applicationID];
    id v17 = +[KTContext validateEventName:0 application:v24];

    CFStringRef v25 = +[TransparencyAnalytics logger];
    [v25 logResultForEvent:v17 hardFailure:[v9 isDeleted] result:v13];

    if (qword_100326730 != -1) {
      dispatch_once(&qword_100326730, &stru_1002B8AF0);
    }
    CFStringRef v26 = qword_100326738;
    if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v32 = v13;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "validatePeer fetch error: %@", buf, 0xCu);
    }
    __int16 v23 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    goto LABEL_20;
  }
  id v14 = *(void **)(a1 + 32);
  id v29 = 0;
  id v30 = 0;
  id v28 = 0;
  [v14 validatePeerOrEnrollKTRequest:v9 queryRequest:v10 queryResponse:v11 transparentData:&v30 loggableDatas:&v29 error:&v28];
  id v15 = v30;
  id v16 = v29;
  id v17 = v28;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

LABEL_21:
}

void sub_10002604C(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100026090(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000260D4(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100026430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 144), 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10002646C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v9;
  id v20 = v9;

  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v10;
  id v16 = v10;

  uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v11;
  id v19 = v11;

  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10002654C(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100026A58(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100026A9C(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100026AE0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = v9;
  if (a4 && a3 && a2 && !v9)
  {
    id v11 = *(void **)(a1 + 32);
    uint64_t v19 = 0;
    id v12 = a2;
    [v11 validatePeerOrEnrollKTRequest:v12 queryRequest:a3 queryResponse:a4 transparentData:0 loggableDatas:0 error:&v19];
  }
  else
  {
    uint64_t v13 = *(void **)(a1 + 32);
    id v14 = a2;
    uint64_t v15 = [v13 applicationID];
    id v12 = +[KTContext validateEventName:2 application:v15];

    id v16 = +[TransparencyAnalytics logger];
    id v17 = [v14 isDeleted];

    [v16 logResultForEvent:v12 hardFailure:v17 result:v10];
    if (qword_100326730 != -1) {
      dispatch_once(&qword_100326730, &stru_1002B8BE0);
    }
    uint64_t v18 = qword_100326738;
    if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "validateEnrollment fetch error: %@", buf, 0xCu);
    }
  }
}

void sub_100026C94(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100026CD8(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100026D1C(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100026EE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 verificationResult];
  if (*(unsigned char *)(a1 + 48)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v4 == (id)2;
  }
  if (v5)
  {
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 49);
    id v14 = _NSConcreteStackBlock;
    uint64_t v15 = 3221225472;
    id v16 = sub_100027054;
    id v17 = &unk_1002B8C70;
    id v18 = v3;
    id v19 = *(id *)(a1 + 40);
    [v6 fetchAndValidatePeerKTRequest:v18 fetchNow:v7 completionHandler:&v14];
  }
  else
  {
    id v8 = v4;
    id v9 = objc_alloc((Class)KTVerifierResult);
    id v10 = [v3 uri];
    id v11 = [v3 application];
    id v12 = [v9 initWithUri:v10 application:v11 ktResult:v8];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  uint64_t v13 = [*(id *)(a1 + 32) dataStore:v14, v15, v16, v17];
  [v13 refaultObject:v3];
}

void sub_100027054(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = objc_alloc((Class)KTVerifierResult);
  uint64_t v13 = [*(id *)(a1 + 32) uri];
  id v14 = [*(id *)(a1 + 32) application];
  id v15 = [v12 initWithUri:v13 application:v14 ktResult:a2 transparentData:v11 loggableDatas:v10];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000273BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 168), 8);
  _Block_object_dispose((const void *)(v26 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1000273F8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v4 = *(void **)(v3 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
  id v13 = *(id *)(v5 + 40);
  id obj = v4;
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8);
  id v12 = *(id *)(v8 + 40);
  id v9 = a2;
  id v10 = [v6 fetchAndValidateEnrollKTRequest:v9 transparentData:&obj loggableDatas:&v13 cloudOptIn:v7 error:&v12];
  objc_storeStrong((id *)(v3 + 40), obj);
  objc_storeStrong((id *)(v5 + 40), v13);
  objc_storeStrong((id *)(v8 + 40), v12);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v10;
  id v11 = [*(id *)(a1 + 32) dataStore];
  [v11 refaultObject:v9];
}

void sub_100027B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void sub_100027B2C(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100027B70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v32 = 0;
  uint64_t v5 = +[TransparencyGPBMessage parseFromData:v4 error:&v32];
  id v6 = v32;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 56);
    id v31 = v6;
    uint64_t v8 = +[TransparencyGPBMessage parseFromData:v7 error:&v31];
    id v9 = v31;

    id v10 = [[*(id *)(a1 + 64) kt_dateToString];
    [v8 setMetadataValue:v10 key:@"ResponseTime"];

    id v11 = *(void **)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 72);
    uint64_t v13 = *(void *)(a1 + 80);
    id v29 = 0;
    id v30 = 0;
    LOBYTE(v28) = 1;
    id v14 = [v11 validateSelfKTRequest:v3 queryRequest:v5 queryResponse:v8 selfVerificationInfo:v12 optInCheck:0 cloudDevices:0 pcsAccountKey:v13 kvsOptInHistory:0 isReplay:v28 transparentData:&v30 loggableDatas:0 error:&v29];
    id v15 = v30;
    id v16 = v29;
    id v17 = [*(id *)(a1 + 72) diagnosticsJsonDictionary];
    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setKtVerificationInfoDiagnosticsJson:v17];

    id v18 = [v15 diagnosticsJsonDictionary];
    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setTransparentDataDiagnosticsJson:v18];

    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setRequestTime:*(void *)(a1 + 64)];
    if ((unint64_t)v14 > 3) {
      CFStringRef v19 = @"Unknown";
    }
    else {
      CFStringRef v19 = *(&off_1002B8D88 + (void)v14);
    }
    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setResult:v19];
    if (v16) {
      [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setError:v16];
    }
    [*(id *)(a1 + 88) setObject:*(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) forKeyedSubscript:*(void *)(a1 + 96)];
    if (qword_100326730 != -1) {
      dispatch_once(&qword_100326730, &stru_1002B8D20);
    }
    __int16 v23 = qword_100326738;
    if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = *(void *)(a1 + 40);
      CFStringRef v25 = *(void **)(a1 + 96);
      *(_DWORD *)buf = 138543618;
      uint64_t v34 = v24;
      __int16 v35 = 2112;
      id v36 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "ReplaySelfValidate: deleting requestId %{public}@ for %@", buf, 0x16u);
    }
    uint64_t v26 = [*(id *)(a1 + 48) dataStore];
    [v26 deleteObject:v3];

    id v27 = [*(id *)(a1 + 48) dataStore];
    [v27 persistWithError:0];

    id v6 = v9;
  }
  else
  {
    if (qword_100326730 != -1) {
      dispatch_once(&qword_100326730, &stru_1002B8D00);
    }
    id v20 = qword_100326738;
    if (os_log_type_enabled((os_log_t)qword_100326738, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v34 = v21;
      __int16 v35 = 2112;
      id v36 = v6;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "ReplayValidateSelf: failed to parse cached queryRequest for requestId %{public}@: %@", buf, 0x16u);
    }
    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setResult:@"Failed"];
    [*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40) setError:v6];
    unsigned int v22 = [*(id *)(a1 + 48) dataStore];
    [v22 deleteObject:v3];

    uint64_t v8 = [*(id *)(a1 + 48) dataStore];
    [v8 persistWithError:0];
  }
}

void sub_100027F58(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100027F9C(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100027FE0(id a1)
{
  qword_100326738 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002836C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100028390(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000283D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v41 = a3;
  id v8 = a4;
  from = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v50 = v7;
  id v43 = v8;
  if (!v7 || v8)
  {
    if (qword_100326740 != -1) {
      dispatch_once(&qword_100326740, &stru_1002B8DC8);
    }
    id v38 = qword_100326748;
    if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v68 = v43;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to fetch self verification info: %@", buf, 0xCu);
    }
    [WeakRetained setError:v43, v41];
    dispatch_group_t group = [WeakRetained operationQueue];
    __int16 v47 = [WeakRetained finishedOp];
    [group addOperation:v47];
  }
  else
  {
    if (qword_100326740 != -1) {
      dispatch_once(&qword_100326740, &stru_1002B8DE8);
    }
    id v10 = (void *)qword_100326748;
    if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_DEBUG))
    {
      id v11 = v10;
      uint64_t v12 = [v7 uriToServerLoggableDatas:v41];
      uint64_t v13 = [v12 allKeys];
      *(_DWORD *)buf = 138412290;
      id v68 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "ValidateSelf: got self verification info for %@", buf, 0xCu);
    }
    [WeakRetained setSelfInfo:v7, v41];
    id v14 = [v7 uriToServerLoggableDatas];
    BOOL v15 = [v14 count] == 0;

    if (v15)
    {
      if (qword_100326740 != -1) {
        dispatch_once(&qword_100326740, &stru_1002B8E08);
      }
      uint64_t v39 = qword_100326748;
      if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "FetchKTSelf: no uriToServerLoggableDatas", buf, 2u);
      }
      uint64_t v40 = +[NSError errorWithDomain:kTransparencyErrorServer code:-336 userInfo:0];
      [WeakRetained setError:v40];

      dispatch_group_t group = [WeakRetained operationQueue];
      __int16 v47 = [WeakRetained finishedOp];
      [group addOperation:v47];
    }
    else
    {
      id v45 = +[NSMutableSet set];
      dispatch_group_t group = dispatch_group_create();
      id v16 = [WeakRetained deps];
      id v17 = [v16 stateMonitor];
      [v17 setPendingChanges:1];

      id v18 = [v7 syncedLoggableDatas];
      __int16 v47 = +[TransparencyManagedDataStore serializeLoggableDatas:v18];

      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      id obj = [v7 uriToServerLoggableDatas];
      id v19 = [obj countByEnumeratingWithState:&v62 objects:v66 count:16];
      if (v19)
      {
        uint64_t v48 = *(void *)v63;
        do
        {
          id v20 = 0;
          do
          {
            if (*(void *)v63 != v48) {
              objc_enumerationMutation(obj);
            }
            uint64_t v21 = *(void *)(*((void *)&v62 + 1) + 8 * (void)v20);
            unsigned int v22 = [v50 uriToServerLoggableDatas];
            __int16 v23 = [v22 objectForKeyedSubscript:v21];

            uint64_t v24 = [WeakRetained application];
            CFStringRef v25 = +[TransparencyApplication addApplicationPrefixForIdentifier:v24 uri:v21];

            uint64_t v26 = [v23 accountKey];
            LODWORD(v24) = v26 == 0;

            if (v24)
            {
              __int16 v33 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-389 description:@"accountKey is nil for KTVerificationInfo"];
              uint64_t v34 = [WeakRetained selfErrors];
              [v34 setObject:v33 forKeyedSubscript:v25];
            }
            else
            {
              id v27 = [v23 accountKey];
              [v45 addObject:v27];

              dispatch_group_enter(group);
              if (qword_100326740 != -1) {
                dispatch_once(&qword_100326740, &stru_1002B8E28);
              }
              uint64_t v28 = qword_100326748;
              if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                id v68 = v25;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "ValidateSelf: getting KT data for %@", buf, 0xCu);
              }
              id v29 = [WeakRetained deps];
              id v30 = [v29 smDataStore];
              id v31 = [WeakRetained application];
              v54[0] = _NSConcreteStackBlock;
              v54[1] = 3221225472;
              v54[2] = sub_100028CD8;
              v54[3] = &unk_1002B8FC0;
              id v32 = v25;
              id v55 = v32;
              id v56 = WeakRetained;
              v57 = group;
              objc_copyWeak(&v61, from);
              id v58 = v23;
              id v59 = v47;
              id v60 = v50;
              [v30 fetchKTInfoForApplication:v31 uri:v32 complete:v54];

              objc_destroyWeak(&v61);
              __int16 v33 = v55;
            }

            id v20 = (char *)v20 + 1;
          }
          while (v19 != v20);
          id v19 = [obj countByEnumeratingWithState:&v62 objects:v66 count:16];
        }
        while (v19);
      }

      if (qword_100326740 != -1) {
        dispatch_once(&qword_100326740, &stru_1002B8FE0);
      }
      __int16 v35 = qword_100326748;
      if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "ValidateSelf: waiting for uris to finish validating", buf, 2u);
      }
      id v36 = [WeakRetained uriQueue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100029D3C;
      block[3] = &unk_1002B7D58;
      id v52 = v45;
      id v53 = WeakRetained;
      id v37 = v45;
      dispatch_group_notify(group, v36, block);
    }
  }
}

void sub_100028BAC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100028BC8(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100028C0C(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100028C50(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100028C94(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100028CD8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v43 = a5;
  id v14 = a6;
  id v45 = v11;
  id v46 = v12;
  __int16 v44 = v14;
  if (v11 && v12 && v13 && !v14)
  {
    BOOL v15 = [*(id *)(a1 + 40) cachedTimes];
    [v15 setObject:v13 forKeyedSubscript:*(void *)(a1 + 32)];

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 80));
    if (qword_100326740 != -1) {
      dispatch_once(&qword_100326740, &stru_1002B8E68);
    }
    id v17 = qword_100326748;
    if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v60 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "ValidateSelf: creating requestId for %@", buf, 0xCu);
    }
    id v19 = [*(id *)(a1 + 56) serverLoggableDatas];
    id v41 = +[TransparencyManagedDataStore serializeLoggableDatas:v19];

    id v20 = [WeakRetained deps];
    uint64_t v21 = [v20 dataStore];
    uint64_t v22 = *(void *)(a1 + 32);
    __int16 v23 = [WeakRetained application];
    uint64_t v24 = [*(id *)(a1 + 56) accountKey];
    uint64_t v25 = *(void *)(a1 + 64);
    uint64_t v26 = [*(id *)(a1 + 56) idsResponseTime];
    id v58 = 0;
    __int16 v42 = [v21 createRequestWithUri:v22 application:v23 accountKey:v24 serverData:v41 syncedData:v25 idsResponseTime:v26 queryRequest:v45 queryResponse:v46 responseDate:v13 type:1 clientId:0 error:&v58];
    id v40 = v58;

    if (v42)
    {
      if (qword_100326740 != -1) {
        dispatch_once(&qword_100326740, &stru_1002B8EA8);
      }
      id v27 = qword_100326748;
      if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138543874;
        uint64_t v60 = (uint64_t)v42;
        __int16 v61 = 2160;
        uint64_t v62 = 1752392040;
        __int16 v63 = 2112;
        id v64 = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "ValidateSelf: created requestId %{public}@ for %{mask.hash}@", buf, 0x20u);
      }
      id v29 = [WeakRetained deps];
      id v30 = [v29 contextStore];
      id v31 = [WeakRetained application];
      id v32 = [WeakRetained deps];
      __int16 v33 = [v32 logClient];
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v47[2] = sub_100029438;
      v47[3] = &unk_1002B8F98;
      id v48 = v42;
      id v49 = WeakRetained;
      id v50 = *(id *)(a1 + 32);
      id v51 = *(id *)(a1 + 48);
      objc_copyWeak(&v57, (id *)(a1 + 80));
      id v52 = v45;
      id v53 = v46;
      id v54 = v43;
      id v55 = v13;
      id v56 = *(id *)(a1 + 72);
      [v30 contextForApplication:v31 logClient:v33 fetchState:1 completionHandler:v47];

      objc_destroyWeak(&v57);
    }
    else
    {
      if (qword_100326740 != -1) {
        dispatch_once(&qword_100326740, &stru_1002B8E88);
      }
      id v37 = qword_100326748;
      if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_ERROR))
      {
        uint64_t v38 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 141558530;
        uint64_t v60 = 1752392040;
        __int16 v61 = 2112;
        uint64_t v62 = v38;
        __int16 v63 = 2112;
        id v64 = v40;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to save KTRequest for %{mask.hash}@: %@", buf, 0x20u);
      }
      uint64_t v39 = [WeakRetained selfErrors];
      [v39 setObject:v40 forKeyedSubscript:*(void *)(a1 + 32)];

      dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
    }
  }
  else
  {
    if (qword_100326740 != -1) {
      dispatch_once(&qword_100326740, &stru_1002B8E48);
    }
    uint64_t v34 = qword_100326748;
    if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 141558530;
      uint64_t v60 = 1752392040;
      __int16 v61 = 2112;
      uint64_t v62 = v35;
      __int16 v63 = 2112;
      id v64 = v44;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to fetch KT data for %{mask.hash}@: %@", buf, 0x20u);
    }
    id v36 = [*(id *)(a1 + 40) selfErrors];
    [v36 setObject:v44 forKeyedSubscript:*(void *)(a1 + 32)];

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
}

void sub_10002930C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100029328(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002936C(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000293B0(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000293F4(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100029438(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    if (qword_100326740 != -1) {
      dispatch_once(&qword_100326740, &stru_1002B8EC8);
    }
    id v17 = qword_100326748;
    if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v32 = v18;
      __int16 v33 = 2112;
      uint64_t v34 = (uint64_t)v7;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to get validation context for validating requestId %{public}@: %@", buf, 0x16u);
    }
    id v19 = [*(id *)(a1 + 40) selfErrors];
    [v19 setObject:v7 forKeyedSubscript:*(void *)(a1 + 48)];

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 104));
    id v9 = [WeakRetained deps];
    id v10 = [v9 dataStore];
    uint64_t v11 = *(void *)(a1 + 32);
    id v30 = 0;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000297A4;
    v20[3] = &unk_1002B8F50;
    id v21 = *(id *)(a1 + 64);
    id v22 = *(id *)(a1 + 32);
    id v23 = WeakRetained;
    id v24 = *(id *)(a1 + 48);
    id v25 = *(id *)(a1 + 72);
    id v26 = *(id *)(a1 + 80);
    id v27 = *(id *)(a1 + 88);
    id v28 = v5;
    id v29 = *(id *)(a1 + 96);
    unsigned __int8 v12 = [v10 performAndWaitForRequestId:v11 error:&v30 block:v20];
    id v13 = v30;

    if ((v12 & 1) == 0)
    {
      if (qword_100326740 != -1) {
        dispatch_once(&qword_100326740, &stru_1002B8F70);
      }
      id v14 = qword_100326748;
      if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        uint64_t v16 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138543874;
        uint64_t v32 = v15;
        __int16 v33 = 2160;
        uint64_t v34 = 1752392040;
        __int16 v35 = 2112;
        uint64_t v36 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to find request for requestId %{public}@ for %{mask.hash}@", buf, 0x20u);
      }
    }

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
  }
}

void sub_100029760(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000297A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v37 = 0;
  id v5 = +[TransparencyGPBMessage parseFromData:v4 error:&v37];
  id v6 = v37;
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    id v36 = v6;
    id v8 = +[TransparencyGPBMessage parseFromData:v7 error:&v36];
    id v32 = v36;

    uint64_t v9 = *(void *)(a1 + 72);
    if (v9) {
      [v8 setMetadataValue:v9 key:kTransparencyResponseMetadataKeyServerHint];
    }
    id v10 = [*(id *)(a1 + 80) kt_dateToString];
    [v8 setMetadataValue:v10 key:@"ResponseTime"];

    uint64_t v11 = [*(id *)(a1 + 48) deps];
    unsigned __int8 v12 = [v11 cloudRecords];

    if (v12)
    {
      id v13 = [_TtC13transparencyd19KTCloudRecordsCache alloc];
      id v14 = [*(id *)(a1 + 48) deps];
      uint64_t v15 = [v14 cloudRecords];
      unsigned __int8 v12 = [(KTCloudRecordsCache *)v13 initWithRecords:v15];
    }
    id v16 = [*(id *)(a1 + 48) isOptInSelfValidation];
    id v17 = *(void **)(a1 + 88);
    uint64_t v18 = *(void *)(a1 + 96);
    id v34 = 0;
    id v35 = 0;
    id v33 = 0;
    id v19 = [v17 validateSelfKTRequest:v3 queryRequest:v5 queryResponse:v8 selfVerificationInfo:v18 optInCheck:v16 cloudDevices:v12 transparentData:&v35 loggableDatas:&v34 error:&v33];
    id v20 = v35;
    id v21 = v34;
    id v22 = v33;
    if (v19 == (id)2)
    {
      if (qword_100326740 != -1) {
        dispatch_once(&qword_100326740, &stru_1002B8F28);
      }
      id v23 = qword_100326748;
      if (!os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 138412290;
      id v39 = v22;
      id v24 = "ValidateSelf: self verification pending: %@";
    }
    else
    {
      if (v19) {
        goto LABEL_22;
      }
      if (qword_100326740 != -1) {
        dispatch_once(&qword_100326740, &stru_1002B8F08);
      }
      id v23 = qword_100326748;
      if (!os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_ERROR)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 138412290;
      id v39 = v22;
      id v24 = "ValidateSelf: self verification failed: %@";
    }
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, buf, 0xCu);
LABEL_22:
    id v27 = [*(id *)(a1 + 48) transparentDatas];
    [v27 setObject:v20 forKeyedSubscript:*(void *)(a1 + 56)];

    id v28 = +[NSNumber numberWithUnsignedInteger:v19];
    id v29 = [*(id *)(a1 + 48) selfResults];
    [v29 setObject:v28 forKeyedSubscript:*(void *)(a1 + 56)];

    if (v22)
    {
      id v30 = [*(id *)(a1 + 48) selfErrors];
      [v30 setObject:v22 forKeyedSubscript:*(void *)(a1 + 56)];
    }
    id v31 = [*(id *)(a1 + 48) selfInfo];
    [v31 updateUri:*(void *)(a1 + 56) serverLoggableDatas:v21];

    id v6 = v32;
    goto LABEL_25;
  }
  if (qword_100326740 != -1) {
    dispatch_once(&qword_100326740, &stru_1002B8EE8);
  }
  id v25 = qword_100326748;
  if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_ERROR))
  {
    id v26 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138543618;
    id v39 = v26;
    __int16 v40 = 2112;
    id v41 = v6;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "ValidateSelf: failed to parse cached queryRequest for requestId %{public}@: %@", buf, 0x16u);
  }
  id v8 = [*(id *)(a1 + 48) selfErrors];
  [v8 setObject:v6 forKeyedSubscript:*(void *)(a1 + 56)];
LABEL_25:
}

void sub_100029BE8(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100029C2C(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100029C70(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100029CB4(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100029CF8(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100029D3C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count] != (id)1)
  {
    CFStringRef v40 = @"publicKeys";
    uint64_t v2 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) count]);
    id v41 = v2;
    id v3 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
    uint64_t v4 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-379 underlyingError:0 userinfo:v3 description:@"public key count is not expected 1"];
    id v5 = [*(id *)(a1 + 40) selfErrors];
    [v5 setObject:v4 forKeyedSubscript:@"publicKeys"];
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_10002A23C;
  v35[3] = &unk_1002B9028;
  v35[4] = *(void *)(a1 + 40);
  char v6 = sub_10002A23C((uint64_t)v35);
  id v7 = [*(id *)(a1 + 40) deps];
  id v8 = [v7 cloudRecords];
  if (([v8 disableKTSyncabledKVSStore] & 1) != 0
    || ([*(id *)(a1 + 40) isOptInSelfValidation] & 1) != 0)
  {
    goto LABEL_11;
  }

  if (v6) {
    goto LABEL_12;
  }
  uint64_t v9 = [*(id *)(a1 + 40) deps];
  id v10 = [v9 accountKeyService];
  uint64_t v11 = [v10 accountKeyService:kKTApplicationIdentifierIDS];
  id v34 = 0;
  id v8 = [v11 publicPublicKey:&v34];
  id v12 = v34;

  if (!v8)
  {
    uint64_t v15 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-271 underlyingError:v12 userinfo:0 description:@"no opt-in state due to missing account key"];
    id v16 = [*(id *)(a1 + 40) selfErrors];
    [v16 setObject:v15 forKeyedSubscript:@"optIn"];
    id v7 = v12;
    goto LABEL_10;
  }
  id v13 = *(void **)(a1 + 40);
  id v33 = v12;
  unsigned __int8 v14 = [v13 validateOptInStatusWithAccountKey:v8 error:&v33];
  id v7 = v33;

  if ((v14 & 1) == 0)
  {
    uint64_t v15 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-364 underlyingError:v7 userinfo:0 description:@"optInMismatch"];
    id v16 = [*(id *)(a1 + 40) selfErrors];
    [v16 setObject:v15 forKeyedSubscript:@"optIn"];
LABEL_10:
  }
LABEL_11:

LABEL_12:
  if (qword_100326740 != -1) {
    dispatch_once(&qword_100326740, &stru_1002B9048);
  }
  id v17 = (void *)qword_100326748;
  if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void **)(a1 + 40);
    id v19 = v17;
    id v20 = [v18 selfErrors];
    *(_DWORD *)buf = 138412290;
    id v39 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "ValidateSelf: finished: %@", buf, 0xCu);
  }
  id v21 = [*(id *)(a1 + 40) selfErrors];
  id v22 = [v21 count];

  if (v22)
  {
    id v23 = [*(id *)(a1 + 40) selfErrors];
    id v24 = [v23 allKeys];

    id v25 = [v24 componentsJoinedByString:@","];
    id v26 = +[NSString stringWithFormat:@"uris failed: %@", v25];

    v36[0] = NSMultipleUnderlyingErrorsKey;
    id v27 = [*(id *)(a1 + 40) selfErrors];
    id v28 = [v27 allValues];
    v36[1] = NSLocalizedDescriptionKey;
    v37[0] = v28;
    v37[1] = v26;
    id v29 = +[NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:2];

    id v30 = +[NSError errorWithDomain:@"TransparencyErrorVerify" code:-320 userInfo:v29];
    [*(id *)(a1 + 40) setError:v30];
  }
  [*(id *)(a1 + 40) fillStatus];
  id v31 = [*(id *)(a1 + 40) operationQueue];
  id v32 = [*(id *)(a1 + 40) finishedOp];
  [v31 addOperation:v32];
}

uint64_t sub_10002A23C(uint64_t a1)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v2 = [*(id *)(a1 + 32) transparentDatas];
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        id v8 = [*(id *)(a1 + 32) transparentDatas];
        uint64_t v9 = [v8 objectForKeyedSubscript:v7];

        if (!v9)
        {
          if (qword_100326740 != -1) {
            dispatch_once(&qword_100326740, &stru_1002B9000);
          }
          uint64_t v11 = qword_100326748;
          if (os_log_type_enabled((os_log_t)qword_100326748, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 141558274;
            uint64_t v18 = 1752392040;
            __int16 v19 = 2112;
            uint64_t v20 = v7;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "No transparentData for URI %{mask.hash}@, skipping opt-in checks", buf, 0x16u);
          }
          uint64_t v10 = 1;
          goto LABEL_15;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v21 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v10 = 0;
LABEL_15:

  return v10;
}

void sub_10002A400(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002A444(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_10002A488(unint64_t a1)
{
  if (a1 > 4) {
    return 0;
  }
  else {
    return dword_100285630[a1];
  }
}

void sub_10002AAAC(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002AAF0(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002AD50(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002AD94(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002AEC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = +[NSMutableArray array];
  id v8 = [v6 accountOptInHistory:*(void *)(a1 + 32)];
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v18 = a1;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v10 = [v8 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v20;
      do
      {
        long long v13 = v9;
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v20 != v12) {
            objc_enumerationMutation(v13);
          }
          long long v15 = *(void **)(*((void *)&v19 + 1) + 8 * i);
          long long v16 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)(unint64_t)[v15 timestampMs] / 1000.0);
          id v17 = [objc_alloc((Class)KTOptIOLogState) initWithURI:v5 smtTimestamp:v16 optIn:[v15 optIn]];
          [v7 addObject:v17];
        }
        uint64_t v9 = v13;
        id v11 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }
      while (v11);
    }
    [*(id *)(v18 + 40) setObject:v7 forKeyedSubscript:v5];
  }
}

void sub_10002B7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_10002B820(id a1)
{
  qword_100326748 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_10002B864(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002B874(uint64_t a1)
{
}

void sub_10002B87C(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = a2;
    uint64_t v4 = [v3 kt_hexString];
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    id v10 = +[KTAccountPublicID ktAccountPublicIDWithPublicKeyInfo:v3 error:0];

    uint64_t v7 = [v10 publicAccountIdentity];
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;
  }
}

void sub_10002BF64(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002BFA8(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002C1A0(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002C1E4(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002C5AC(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002C5F0(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002C634(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002C678(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002C6BC(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002C8F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = [v5 serverLoggableDatas];
    id v51 = 0;
    uint64_t v8 = +[TransparencyManagedDataStore deserializeLoggableDatas:v7 error:&v51];
    id v9 = v51;

    [*(id *)(a1 + 32) setSelfDevices:v8];
    if (!v8)
    {
      if (qword_100326750 != -1) {
        dispatch_once(&qword_100326750, &stru_1002B92A0);
      }
      id v10 = qword_100326758;
      if (os_log_type_enabled((os_log_t)qword_100326758, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v54 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "FillStatus: no self loggable datas: %@", buf, 0xCu);
      }
    }
    id v11 = [v5 verificationResult];
    if (v11)
    {
      if (v11 == (id)1)
      {
        if (qword_100326750 != -1) {
          dispatch_once(&qword_100326750, &stru_1002B92C0);
        }
        uint64_t v12 = qword_100326758;
        if (os_log_type_enabled((os_log_t)qword_100326758, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "FillStatus: setting selfStatus to OK", buf, 2u);
        }
        uint64_t v13 = 0;
      }
      else
      {
        if (qword_100326750 != -1) {
          dispatch_once(&qword_100326750, &stru_1002B9340);
        }
        long long v21 = qword_100326758;
        if (os_log_type_enabled((os_log_t)qword_100326758, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          uint64_t v13 = 2;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "FillStatus: setting selfStatus to Unavailable", buf, 2u);
        }
        else
        {
          uint64_t v13 = 2;
        }
      }
    }
    else
    {
      id v41 = v9;
      uint64_t v42 = a1;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v15 = v8;
      id v16 = [v15 countByEnumeratingWithState:&v47 objects:v57 count:16];
      if (v16)
      {
        id v17 = v16;
        uint64_t v18 = *(void *)v48;
        uint64_t v13 = 3;
        while (2)
        {
          for (i = 0; i != v17; i = (char *)i + 1)
          {
            if (*(void *)v48 != v18) {
              objc_enumerationMutation(v15);
            }
            long long v20 = *(void **)(*((void *)&v47 + 1) + 8 * i);
            if (![v20 result])
            {
              if (qword_100326750 != -1) {
                dispatch_once(&qword_100326750, &stru_1002B92E0);
              }
              long long v22 = (void *)qword_100326758;
              if (os_log_type_enabled((os_log_t)qword_100326758, OS_LOG_TYPE_ERROR))
              {
                id v23 = v22;
                id v24 = [v20 deviceID];
                id v25 = [v20 deviceIdHash];
                *(_DWORD *)buf = 138412546;
                id v54 = v24;
                __int16 v55 = 2112;
                id v56 = v25;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "FillStatus: failing device is: %@[%@]", buf, 0x16u);
              }
              uint64_t v13 = 1;
              goto LABEL_39;
            }
          }
          id v17 = [v15 countByEnumeratingWithState:&v47 objects:v57 count:16];
          if (v17) {
            continue;
          }
          break;
        }
      }
      else
      {
        uint64_t v13 = 3;
      }
LABEL_39:

      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      id v26 = [v5 failures];
      id v27 = [v26 allObjects];

      id v28 = [v27 countByEnumeratingWithState:&v43 objects:v52 count:16];
      if (v28)
      {
        id v29 = v28;
        id v39 = v8;
        id v40 = v6;
        uint64_t v30 = *(void *)v44;
        while (2)
        {
          for (j = 0; j != v29; j = (char *)j + 1)
          {
            if (*(void *)v44 != v30) {
              objc_enumerationMutation(v27);
            }
            id v32 = *(void **)(*((void *)&v43 + 1) + 8 * (void)j);
            id v33 = [v32 errorDomain:v39];
            if ([v33 isEqual:@"com.apple.Transparency"])
            {
              if ([v32 errorCode] == (id)7)
              {

LABEL_54:
                if (qword_100326750 != -1) {
                  dispatch_once(&qword_100326750, &stru_1002B9300);
                }
                id v9 = v41;
                a1 = v42;
                uint64_t v8 = v39;
                id v35 = qword_100326758;
                if (os_log_type_enabled((os_log_t)qword_100326758, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  id v54 = v32;
                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "FillStatus: opt-in failure %@", buf, 0xCu);
                }
                uint64_t v13 = 4;
                id v6 = v40;
                goto LABEL_59;
              }
              id v34 = [v32 errorCode];

              if (v34 == (id)10) {
                goto LABEL_54;
              }
            }
            else
            {
            }
          }
          id v29 = [v27 countByEnumeratingWithState:&v43 objects:v52 count:16];
          if (v29) {
            continue;
          }
          break;
        }
        uint64_t v8 = v39;
        id v6 = v40;
      }
      a1 = v42;
      id v9 = v41;
LABEL_59:

      if (qword_100326750 != -1) {
        dispatch_once(&qword_100326750, &stru_1002B9320);
      }
      id v36 = (void *)qword_100326758;
      if (os_log_type_enabled((os_log_t)qword_100326758, OS_LOG_TYPE_DEFAULT))
      {
        id v37 = v36;
        uint64_t v38 = +[NSNumber numberWithUnsignedInteger:v13];
        *(_DWORD *)buf = 138412290;
        id v54 = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "FillStatus: setting selfStatus to failure type %@", buf, 0xCu);
      }
    }
    [*(id *)(a1 + 32) setSelfStatus:v13];
  }
  else
  {
    if (qword_100326750 != -1) {
      dispatch_once(&qword_100326750, &stru_1002B9360);
    }
    long long v14 = qword_100326758;
    if (os_log_type_enabled((os_log_t)qword_100326758, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v54 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "FillStatus: no recent self validation: %@", buf, 0xCu);
    }
    [*(id *)(a1 + 32) setSelfStatus:2];
  }
}

void sub_10002CF80(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002CFC4(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002D008(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002D04C(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002D090(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002D0D4(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002D118(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002D15C(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002D400(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002D444(id a1)
{
  qword_100326758 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002DA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002DA5C(id a1)
{
  qword_100326768 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002DAA0(id a1)
{
  qword_100326768 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002DAE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v6)
  {
    if (qword_100326760 != -1) {
      dispatch_once(&qword_100326760, &stru_1002B9448);
    }
    id v9 = qword_100326768;
    if (os_log_type_enabled((os_log_t)qword_100326768, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v20 = (uint64_t)v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "FillStatus: failed to get context: %@", buf, 0xCu);
    }
    id v10 = [WeakRetained operationQueue];
    id v11 = [WeakRetained finishedOp];
    [v10 addOperation:v11];
  }
  else
  {
    if (qword_100326760 != -1) {
      dispatch_once(&qword_100326760, &stru_1002B9468);
    }
    uint64_t v12 = (void *)qword_100326768;
    if (os_log_type_enabled((os_log_t)qword_100326768, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      long long v14 = v12;
      id v15 = [WeakRetained reason];
      *(_DWORD *)buf = 141558530;
      uint64_t v20 = 1752392040;
      __int16 v21 = 2112;
      uint64_t v22 = v13;
      __int16 v23 = 2114;
      id v24 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "querying KT server for opt-in state of %{mask.hash}@ for reason %{public}@", buf, 0x20u);
    }
    id v16 = [*(id *)(a1 + 32) prefixedURI];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10002DE00;
    v17[3] = &unk_1002B94D0;
    objc_copyWeak(&v18, v7);
    [v5 optInStateForUri:v16 completionHandler:v17];

    objc_destroyWeak(&v18);
  }
}

void sub_10002DD5C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10002DD78(id a1)
{
  qword_100326768 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002DDBC(id a1)
{
  qword_100326768 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002DE00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v5)
  {
    if (qword_100326760 != -1) {
      dispatch_once(&qword_100326760, &stru_1002B9488);
    }
    uint64_t v7 = qword_100326768;
    if (os_log_type_enabled((os_log_t)qword_100326768, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138412290;
      id v14 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "FillStatus: failed to check server opt-in: %@", (uint8_t *)&v13, 0xCu);
    }
LABEL_11:
    [WeakRetained retry];
    goto LABEL_12;
  }
  if (qword_100326760 != -1) {
    dispatch_once(&qword_100326760, &stru_1002B94A8);
  }
  uint64_t v8 = qword_100326768;
  if (os_log_type_enabled((os_log_t)qword_100326768, OS_LOG_TYPE_INFO))
  {
    int v13 = 134217984;
    id v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "FillStatus: setting server opt-in state to %lu", (uint8_t *)&v13, 0xCu);
  }
  id v9 = [WeakRetained deps];
  id v10 = [v9 stateMonitor];
  [v10 setServerOptInState:a2];

  if (a2 == (void *)2) {
    goto LABEL_11;
  }
LABEL_12:
  id v11 = [WeakRetained operationQueue];
  uint64_t v12 = [WeakRetained finishedOp];
  [v11 addOperation:v12];
}

void sub_10002DFD8(id a1)
{
  qword_100326768 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002E01C(id a1)
{
  qword_100326768 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002E1B4(id a1)
{
  qword_100326768 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002EA9C(id a1)
{
  qword_100326778 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002EAE0(id a1)
{
  qword_100326778 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002EB24(id a1)
{
  qword_100326778 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002EB68(id a1)
{
  qword_100326778 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002EBAC(id a1)
{
  qword_100326778 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002ED68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location, char a17)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002ED98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10002EDA8(uint64_t a1)
{
}

void sub_10002EDB0(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if ([v5 count])
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    id obj = *(id *)(v8 + 40);
    id v9 = [WeakRetained verifyMapHeadMMDs:v5 application:v7 error:&obj];
    objc_storeStrong((id *)(v8 + 40), obj);
    if (v9)
    {
      id v10 = +[NSString stringWithFormat:@"%@-SmhMMD", *(void *)(a1 + 32)];
      id v11 = [WeakRetained failedSMHs];
      [v11 setObject:v9 forKeyedSubscript:v10];

      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v13 = [WeakRetained errors];
      [v13 setObject:v12 forKeyedSubscript:v10];
    }
    id v14 = [WeakRetained deps];
    id v15 = [v14 dataStore];
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    id v22 = *(id *)(v16 + 40);
    unsigned __int8 v17 = [v15 persistAndRefaultObjects:v5 error:&v22];
    objc_storeStrong((id *)(v16 + 40), v22);

    if ((v17 & 1) == 0)
    {
      if (qword_100326770 != -1) {
        dispatch_once(&qword_100326770, &stru_1002B95D8);
      }
      id v18 = qword_100326778;
      if (os_log_type_enabled((os_log_t)qword_100326778, OS_LOG_TYPE_ERROR))
      {
        uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v25 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "VerifyMapHeadMMD: failed to save MMD verified SMHs: %@", buf, 0xCu);
      }
      if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
      {
        uint64_t v20 = [WeakRetained deps];
        __int16 v21 = [v20 dataStore];
        [v21 reportCoreDataPersistEventForLocation:@"verifyMapHeadMMDs" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
      }
      *a3 = 1;
    }
  }
}

void sub_10002F028(id a1)
{
  qword_100326778 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002F52C(id a1)
{
  qword_100326778 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002FE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002FE7C(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002FEC0(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002FF04(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10002FF48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) log];
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (v6)
  {
    if (!v8) {
      goto LABEL_7;
    }
    int v20 = 138412290;
    id v21 = v6;
    id v9 = "Failed to load Core Data stack: %@";
  }
  else
  {
    if (!v8) {
      goto LABEL_7;
    }
    int v20 = 138412290;
    id v21 = v5;
    id v9 = "Load Core Data complete: %@";
  }
  _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v20, 0xCu);
LABEL_7:

  id v10 = *(id *)(a1 + 32);
  objc_sync_enter(v10);
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v12 = *(void *)(v11 + 24);
  if (!v12) {
    __assert_rtn("-[StaticKeyController initCloudDataStore:idsDelegate:configurationStore:notificationCenter:complete:]_block_invoke", "StaticKeyController.m", 155, "storeCount >= 1");
  }
  *(void *)(v11 + 24) = v12 - 1;
  BOOL v13 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == 0;
  objc_sync_exit(v10);

  if (v13)
  {
    id v14 = +[NSNotificationCenter defaultCenter];
    id v15 = *(void **)(a1 + 32);
    uint64_t v16 = [v15 cloudContainer];
    unsigned __int8 v17 = [v16 persistentStoreCoordinator];
    [v14 addObserver:v15 selector:"remoteUpdate:" name:NSPersistentStoreRemoteChangeNotification object:v17];

    id v18 = [*(id *)(a1 + 32) queue];
    dispatch_resume(v18);

    (*(void (**)(void, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), v19);
  }
}

void sub_100030158(_Unwind_Exception *exception_object)
{
}

void sub_100030430(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = [*(id *)(a1 + 32) log];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      id v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Failed to load Core Data stack: %@", (uint8_t *)&v6, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100030638(uint64_t a1)
{
  id v2 = (id)os_transaction_create();
  [*(id *)(a1 + 32) processCoreDataHistory];
}

void sub_1000309D8(uint64_t a1)
{
  uint64_t v1 = a1;
  id v2 = +[NSPersistentHistoryChangeRequest fetchHistoryAfterToken:*(void *)(a1 + 32)];
  [v2 setResultType:5];
  id v3 = *(void **)(v1 + 40);
  id v56 = 0;
  id v4 = [v3 executeRequest:v2 error:&v56];
  id v5 = v56;
  int v6 = v5;
  if (v4)
  {
    uint64_t v38 = v4;
    id v39 = v2;
    id v7 = [v4 result];
    BOOL v8 = [*(id *)(v1 + 48) fetchContactsSyncToken];

    if (!v8)
    {
      if (qword_100326780 != -1) {
        dispatch_once(&qword_100326780, &stru_1002B96F0);
      }
      id v9 = qword_100326788;
      if (os_log_type_enabled((os_log_t)qword_100326788, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "processCoreDataHistory no previously existing sync token", buf, 2u);
      }
      id v10 = [*(id *)(v1 + 48) contactStore];
      uint64_t v11 = [*(id *)(v1 + 48) configurationStore];
      [v10 fetchAndStoreContactsSyncTokenWithConfigStore:v11];
    }
    id v37 = v6;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    id obj = v7;
    id v42 = [obj countByEnumeratingWithState:&v52 objects:v62 count:16];
    uint64_t v12 = 0;
    if (v42)
    {
      uint64_t v41 = *(void *)v53;
      do
      {
        uint64_t v13 = 0;
        id v14 = v12;
        do
        {
          long long v44 = v14;
          if (*(void *)v53 != v41) {
            objc_enumerationMutation(obj);
          }
          uint64_t v45 = v13;
          id v15 = *(void **)(*((void *)&v52 + 1) + 8 * v13);
          long long v48 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v43 = v15;
          uint64_t v16 = [v15 changes];
          id v17 = [v16 countByEnumeratingWithState:&v48 objects:v61 count:16];
          if (v17)
          {
            id v18 = v17;
            long long v46 = v16;
            uint64_t v47 = *(void *)v49;
            do
            {
              for (i = 0; i != v18; i = (char *)i + 1)
              {
                if (*(void *)v49 != v47) {
                  objc_enumerationMutation(v16);
                }
                int v20 = *(void **)(*((void *)&v48 + 1) + 8 * i);
                id v21 = [v20 changedObjectID];
                id v22 = [v21 entityName];
                unsigned int v23 = [v22 isEqual:@"STStaticKeyHandle"];

                if (v23)
                {
                  id v24 = [v20 changeType];
                  if ((unint64_t)v24 >= 2)
                  {
                    if (v24 == (id)2)
                    {
                      id v28 = [v20 tombstone];
                      id v32 = [v28 objectForKeyedSubscript:@"idsID"];
                      goto LABEL_29;
                    }
                    id v32 = 0;
                  }
                  else
                  {
                    uint64_t v25 = v1;
                    id v26 = *(void **)(v1 + 40);
                    id v27 = [v20 changedObjectID];
                    id v28 = [v26 existingObjectWithID:v27 error:0];

                    id v29 = [v28 entity];
                    uint64_t v30 = [v29 name];
                    unsigned __int8 v31 = [v30 isEqual:@"STStaticKeyHandle"];

                    if (v31)
                    {
                      id v32 = [v28 valueForKey:@"idsID"];
                    }
                    else
                    {
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
                      {
                        id v33 = [v20 changedObjectID];
                        id v34 = [v33 entityName];
                        *(_DWORD *)buf = 138412546;
                        CFStringRef v58 = @"STStaticKeyHandle";
                        __int16 v59 = 2112;
                        uint64_t v60 = v34;
                        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "not %@: %@", buf, 0x16u);
                      }
                      id v32 = 0;
                    }
                    uint64_t v1 = v25;
                    uint64_t v16 = v46;
LABEL_29:
                  }
                  objc_opt_class();
                  if (objc_opt_isKindOfClass()) {
                    [*(id *)(v1 + 56) addObject:v32];
                  }

                  continue;
                }
              }
              id v18 = [v16 countByEnumeratingWithState:&v48 objects:v61 count:16];
            }
            while (v18);
          }

          uint64_t v12 = [v43 token];

          uint64_t v13 = v45 + 1;
          id v14 = v12;
        }
        while ((id)(v45 + 1) != v42);
        id v42 = [obj countByEnumeratingWithState:&v52 objects:v62 count:16];
      }
      while (v42);
    }

    if ([obj count])
    {
      id v35 = [*(id *)(v1 + 48) dataFromHistoryToken:v12];
      id v36 = [*(id *)(v1 + 48) configurationStore];
      [v36 setSettingsData:@"CoreDataSyncToken" data:v35];
    }
    id v4 = v38;
    id v2 = v39;
    int v6 = v37;
    goto LABEL_42;
  }
  if (v5)
  {
    id obj = [*(id *)(v1 + 48) configurationStore];
    [obj setSettingsData:@"CoreDataSyncToken" data:0];
LABEL_42:
  }
}

void sub_100030F20(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000314CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000314E4(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSCloudKitMirroringRequestOptions);
  id v3 = objc_alloc((Class)NSCloudKitMirroringImportRequest);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10003163C;
  v13[3] = &unk_1002B9740;
  uint64_t v4 = *(void *)(a1 + 48);
  v13[4] = *(void *)(a1 + 32);
  v13[5] = v4;
  id v5 = [v3 initWithOptions:v2 completionBlock:v13];
  int v6 = *(void **)(a1 + 40);
  id v12 = 0;
  id v7 = [v6 executeRequest:v5 error:&v12];
  id v8 = v12;

  id v9 = [*(id *)(a1 + 32) log];
  id v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "import request finished", v11, 2u);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    sub_100218800();
  }
}

void sub_10003163C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 success]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  uint64_t v4 = [*(id *)(a1 + 32) log];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "import result: %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10003182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100031844(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSCloudKitMirroringRequestOptions);
  id v3 = objc_alloc((Class)NSCloudKitMirroringExportRequest);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10003199C;
  v13[3] = &unk_1002B9740;
  uint64_t v4 = *(void *)(a1 + 48);
  v13[4] = *(void *)(a1 + 32);
  v13[5] = v4;
  id v5 = [v3 initWithOptions:v2 completionBlock:v13];
  id v6 = *(void **)(a1 + 40);
  id v12 = 0;
  id v7 = [v6 executeRequest:v5 error:&v12];
  id v8 = v12;

  id v9 = [*(id *)(a1 + 32) log];
  id v10 = v9;
  if (v7)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "export request finished", v11, 2u);
    }
  }
  else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    sub_100218868();
  }
}

void sub_10003199C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 success]) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  uint64_t v4 = [*(id *)(a1 + 32) log];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "export result: %@", (uint8_t *)&v5, 0xCu);
  }
}

id sub_100031B48(uint64_t a1)
{
  [*(id *)(a1 + 32) importFromCloud];
  [*(id *)(a1 + 32) exportToCloud];
  id v2 = *(void **)(a1 + 32);

  return [v2 consumeContactsChangeHistory];
}

void sub_100031E08(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSCloudKitMirroringRequestOptions);
  id v3 = objc_alloc((Class)NSCloudKitMirroringResetZoneRequest);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100031F5C;
  v12[3] = &unk_1002B9790;
  v12[4] = *(void *)(a1 + 32);
  id v4 = [v3 initWithOptions:v2 completionBlock:v12];
  int v5 = *(void **)(a1 + 40);
  id v11 = 0;
  id v6 = [v5 executeRequest:v4 error:&v11];
  id v7 = v11;

  id v8 = [*(id *)(a1 + 32) log];
  id v9 = v8;
  if (v6)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "reset request finished", v10, 2u);
    }
  }
  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    sub_10021896C();
  }
}

void sub_100031F5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) log];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "reset zone: %@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_100032694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1000326D0(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_100032714(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100032724(uint64_t a1)
{
}

void sub_10003272C(uint64_t a1)
{
  id v2 = +[KTCoreDataSTStaticKey fetchRequest];
  if (*(void *)(a1 + 32)) {
    +[NSPredicate predicateWithFormat:@"contactExternalIdentifier == %@", *(void *)(a1 + 32)];
  }
  else {
  id v3 = +[NSPredicate predicateWithFormat:@"contactIdentifier == %@", *(void *)(a1 + 40)];
  }
  [v2 setPredicate:v3];

  id v4 = +[NSMutableSet set];
  int v5 = *(void **)(a1 + 48);
  uint64_t v6 = *(void *)(*(void *)(a1 + 80) + 8);
  id obj = *(id *)(v6 + 40);
  id v7 = [v5 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v74 = v7;
  if ([v7 count])
  {
    id v8 = [v7 firstObject];
    id v9 = [v8 publicIdentity];
    unsigned __int8 v10 = [v9 isEqual:*(void *)(a1 + 56)];

    if (v10)
    {
      id v11 = v8;
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = [v8 publicIdentity];
      id v11 = v8;
      [v8 setPublicIdentity:*(void *)(a1 + 56)];
    }
    uint64_t v19 = *(void *)(a1 + 56);
    id v18 = *(void **)(a1 + 64);
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(*(void *)(a1 + 80) + 8);
    id v101 = *(id *)(v21 + 40);
    id v17 = [v18 fetchHandles:v19 moc:v20 error:&v101];
    objc_storeStrong((id *)(v21 + 40), v101);
    id v22 = *(void **)(a1 + 64);
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8);
    id v100 = *(id *)(v24 + 40);
    __int16 v77 = (void *)v12;
    uint64_t v25 = [v22 fetchHandles:v12 moc:v23 error:&v100];
    objc_storeStrong((id *)(v24 + 40), v100);
    if (v17)
    {
      long long v98 = 0u;
      long long v99 = 0u;
      long long v96 = 0u;
      long long v97 = 0u;
      id v26 = v17;
      id v27 = [v26 countByEnumeratingWithState:&v96 objects:v109 count:16];
      if (v27)
      {
        id v28 = v27;
        uint64_t v29 = *(void *)v97;
        do
        {
          for (i = 0; i != v28; i = (char *)i + 1)
          {
            if (*(void *)v97 != v29) {
              objc_enumerationMutation(v26);
            }
            [v4 addObject:*(void *)(*((void *)&v96 + 1) + 8 * i)];
          }
          id v28 = [v26 countByEnumeratingWithState:&v96 objects:v109 count:16];
        }
        while (v28);
      }
    }
    if (v25)
    {
      long long v94 = 0u;
      long long v95 = 0u;
      long long v92 = 0u;
      long long v93 = 0u;
      id v31 = v25;
      id v32 = [v31 countByEnumeratingWithState:&v92 objects:v108 count:16];
      if (v32)
      {
        id v33 = v32;
        uint64_t v34 = *(void *)v93;
        do
        {
          for (j = 0; j != v33; j = (char *)j + 1)
          {
            if (*(void *)v93 != v34) {
              objc_enumerationMutation(v31);
            }
            [v4 addObject:*(void *)(*((void *)&v92 + 1) + 8 * (void)j)];
          }
          id v33 = [v31 countByEnumeratingWithState:&v92 objects:v108 count:16];
        }
        while (v33);
      }
    }
    id v7 = v74;
  }
  else
  {
    uint64_t v13 = [*(id *)(a1 + 64) log];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v107 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "storeStaticKey will create new record, failed to fetch: %@", buf, 0xCu);
    }

    uint64_t v15 = *(void *)(*(void *)(a1 + 80) + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = 0;

    id v11 = +[NSEntityDescription insertNewObjectForEntityForName:@"STStaticKey" inManagedObjectContext:*(void *)(a1 + 48)];
    [v11 setPublicIdentity:*(void *)(a1 + 56)];
    +[NSMutableSet set];
    __int16 v77 = 0;
    id v4 = v17 = v4;
  }

  if (*(void *)(a1 + 40)) {
    [v11 setContactIdentifier:];
  }
  if (*(void *)(a1 + 32)) {
    [v11 setContactExternalIdentifier:];
  }
  if (*(void *)(a1 + 72))
  {
    id v72 = v11;
    id v73 = v2;
    uint64_t v76 = a1;
    id v36 = +[NSMutableDictionary dictionary];
    id v37 = +[NSMutableSet set];
    long long v88 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    __int16 v75 = v4;
    uint64_t v38 = [v4 allObjects];
    id v39 = [v38 countByEnumeratingWithState:&v88 objects:v105 count:16];
    if (!v39) {
      goto LABEL_50;
    }
    id v40 = v39;
    uint64_t v41 = *(void *)v89;
    while (1)
    {
      for (k = 0; k != v40; k = (char *)k + 1)
      {
        if (*(void *)v89 != v41) {
          objc_enumerationMutation(v38);
        }
        long long v43 = *(void **)(*((void *)&v88 + 1) + 8 * (void)k);
        long long v44 = [v43 idsID];
        uint64_t v45 = [v36 objectForKeyedSubscript:v44];
        if (v45)
        {

LABEL_42:
          [v37 addObject:v43];
          continue;
        }
        if (v77)
        {
          long long v46 = [v43 publicIdentity];
          unsigned int v47 = [v46 isEqualToString:v77];

          if (v47) {
            goto LABEL_42;
          }
        }
        else
        {
        }
        long long v48 = [v43 idsID];
        [v36 setObject:v43 forKeyedSubscript:v48];
      }
      id v40 = [v38 countByEnumeratingWithState:&v88 objects:v105 count:16];
      if (!v40)
      {
LABEL_50:

        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        id v49 = *(id *)(v76 + 72);
        id v50 = [v49 countByEnumeratingWithState:&v84 objects:v104 count:16];
        if (v50)
        {
          id v51 = v50;
          uint64_t v52 = *(void *)v85;
          do
          {
            for (m = 0; m != v51; m = (char *)m + 1)
            {
              if (*(void *)v85 != v52) {
                objc_enumerationMutation(v49);
              }
              uint64_t v54 = *(void *)(*((void *)&v84 + 1) + 8 * (void)m);
              long long v55 = [v36 objectForKeyedSubscript:v54];

              if (v55)
              {
                [v36 setObject:0 forKeyedSubscript:v54];
              }
              else
              {
                id v56 = +[NSEntityDescription insertNewObjectForEntityForName:@"STStaticKeyHandle" inManagedObjectContext:*(void *)(v76 + 48)];
                [v56 setIdsID:v54];
                [v56 setValidated:0];
                [v56 setPublicIdentity:*(void *)(v76 + 56)];
                [v75 addObject:v56];
              }
            }
            id v51 = [v49 countByEnumeratingWithState:&v84 objects:v104 count:16];
          }
          while (v51);
        }

        id v57 = [v36 allValues];
        [v37 addObjectsFromArray:v57];

        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        id v58 = v37;
        id v59 = [v58 countByEnumeratingWithState:&v80 objects:v103 count:16];
        id v2 = v73;
        id v4 = v75;
        a1 = v76;
        if (v59)
        {
          id v60 = v59;
          uint64_t v61 = *(void *)v81;
          do
          {
            for (n = 0; n != v60; n = (char *)n + 1)
            {
              if (*(void *)v81 != v61) {
                objc_enumerationMutation(v58);
              }
              [*(id *)(v76 + 48) deleteObject:*(void *)(*((void *)&v80 + 1) + 8 * (void)n)];
            }
            id v60 = [v58 countByEnumeratingWithState:&v80 objects:v103 count:16];
          }
          while (v60);
        }

        id v7 = v74;
        id v11 = v72;
        break;
      }
    }
  }
  __int16 v63 = *(void **)(a1 + 48);
  uint64_t v64 = *(void *)(*(void *)(a1 + 80) + 8);
  id v79 = *(id *)(v64 + 40);
  unsigned int v65 = [v63 save:&v79];
  objc_storeStrong((id *)(v64 + 40), v79);
  if (v65)
  {
    uint64_t v66 = *(void **)(a1 + 64);
    uint64_t v67 = *(void *)(a1 + 48);
    uint64_t v68 = *(void *)(*(void *)(a1 + 80) + 8);
    id v78 = *(id *)(v68 + 40);
    uint64_t v69 = [v66 mapStaticKeyToStoreEntry:v11 handles:v4 moc:v67 error:&v78];
    objc_storeStrong((id *)(v68 + 40), v78);
    uint64_t v70 = *(void *)(*(void *)(a1 + 88) + 8);
    id v71 = *(void **)(v70 + 40);
    *(void *)(v70 + 40) = v69;
  }
}

id sub_100032EFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) exportToCloud];
}

void sub_100033620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100033648(void *a1)
{
  id v2 = +[KTCoreDataSTStaticKey fetchRequest];
  id v3 = +[NSPredicate predicateWithFormat:@"publicIdentity == %@", a1[4]];
  [v2 setPredicate:v3];

  id v4 = (void *)a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  id v7 = [v6 firstObject];
  if (v7)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = a1[5];
    unsigned __int8 v10 = (void *)a1[6];
    uint64_t v11 = *(void *)(a1[7] + 8);
    id v20 = *(id *)(v11 + 40);
    uint64_t v12 = [v10 fetchHandles:v8 moc:v9 error:&v20];
    objc_storeStrong((id *)(v11 + 40), v20);
    uint64_t v14 = a1[5];
    uint64_t v13 = (void *)a1[6];
    uint64_t v15 = *(void *)(a1[7] + 8);
    id v19 = *(id *)(v15 + 40);
    uint64_t v16 = [v13 mapStaticKeyToStoreEntry:v7 handles:v12 moc:v14 error:&v19];
    objc_storeStrong((id *)(v15 + 40), v19);
    uint64_t v17 = *(void *)(a1[8] + 8);
    id v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;
  }
}

void sub_100033984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000339A8(void *a1)
{
  id v2 = +[NSFetchRequest fetchRequestWithEntityName:@"STStaticKeyHandle"];
  id v3 = +[NSPredicate predicateWithFormat:@"idsID == %@", a1[4]];
  [v2 setPredicate:v3];

  id v4 = (void *)a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  id v7 = [v6 firstObject];
  if (v7)
  {
    uint64_t v8 = +[KTCoreDataSTStaticKey fetchRequest];
    uint64_t v9 = [v7 publicIdentity];
    unsigned __int8 v10 = +[NSPredicate predicateWithFormat:@"publicIdentity == %@", v9];
    [v8 setPredicate:v10];

    uint64_t v11 = (void *)a1[5];
    uint64_t v12 = *(void *)(a1[7] + 8);
    id v28 = *(id *)(v12 + 40);
    uint64_t v13 = [v11 executeFetchRequest:v8 error:&v28];
    objc_storeStrong((id *)(v12 + 40), v28);
    if (v13)
    {
      uint64_t v14 = [v13 firstObject];
      if (v14)
      {
        uint64_t v15 = (void *)a1[6];
        uint64_t v16 = [v7 publicIdentity];
        uint64_t v17 = a1[5];
        uint64_t v18 = *(void *)(a1[7] + 8);
        id v27 = *(id *)(v18 + 40);
        id v19 = [v15 fetchHandles:v16 moc:v17 error:&v27];
        objc_storeStrong((id *)(v18 + 40), v27);

        uint64_t v21 = a1[5];
        id v20 = (void *)a1[6];
        uint64_t v22 = *(void *)(a1[7] + 8);
        id v26 = *(id *)(v22 + 40);
        uint64_t v23 = [v20 mapStaticKeyToStoreEntry:v14 handles:v19 moc:v21 error:&v26];
        objc_storeStrong((id *)(v22 + 40), v26);
        uint64_t v24 = *(void *)(a1[8] + 8);
        uint64_t v25 = *(void **)(v24 + 40);
        *(void *)(v24 + 40) = v23;
      }
    }
  }
}

void sub_100033ED4(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100033F18(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100033F5C(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100033FA0(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100034164(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_1000341A8(uint64_t a1)
{
  if (qword_100326780 != -1) {
    dispatch_once(&qword_100326780, &stru_1002B98C0);
  }
  id v2 = qword_100326788;
  if (os_log_type_enabled((os_log_t)qword_100326788, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Doing initial cloud sync", v4, 2u);
  }
  return [*(id *)(a1 + 32) importFromCloud];
}

void sub_100034240(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100034464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100034488(void *a1)
{
  id v2 = +[KTCoreDataSTStaticKey fetchRequest];
  id v3 = +[NSPredicate predicateWithFormat:@"contactIdentifier == %@", a1[4]];
  [v2 setPredicate:v3];

  id v4 = (void *)a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  id v7 = [v6 firstObject];
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = (void *)a1[6];
    unsigned __int8 v10 = [v7 publicIdentity];
    uint64_t v11 = a1[5];
    uint64_t v12 = *(void *)(a1[7] + 8);
    id v21 = *(id *)(v12 + 40);
    uint64_t v13 = [v9 fetchHandles:v10 moc:v11 error:&v21];
    objc_storeStrong((id *)(v12 + 40), v21);

    uint64_t v15 = a1[5];
    uint64_t v14 = (void *)a1[6];
    uint64_t v16 = *(void *)(a1[7] + 8);
    id v20 = *(id *)(v16 + 40);
    uint64_t v17 = [v14 mapStaticKeyToStoreEntry:v8 handles:v13 moc:v15 error:&v20];
    objc_storeStrong((id *)(v16 + 40), v20);
    uint64_t v18 = *(void *)(a1[8] + 8);
    id v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;
  }
}

void sub_1000347EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100034810(void *a1)
{
  id v2 = +[KTCoreDataSTStaticKey fetchRequest];
  id v3 = +[NSPredicate predicateWithFormat:@"contactExternalIdentifier == %@", a1[4]];
  [v2 setPredicate:v3];

  id v4 = (void *)a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  id v7 = [v6 firstObject];
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = (void *)a1[6];
    unsigned __int8 v10 = [v7 publicIdentity];
    uint64_t v11 = a1[5];
    uint64_t v12 = *(void *)(a1[7] + 8);
    id v21 = *(id *)(v12 + 40);
    uint64_t v13 = [v9 fetchHandles:v10 moc:v11 error:&v21];
    objc_storeStrong((id *)(v12 + 40), v21);

    uint64_t v15 = a1[5];
    uint64_t v14 = (void *)a1[6];
    uint64_t v16 = *(void *)(a1[7] + 8);
    id v20 = *(id *)(v16 + 40);
    uint64_t v17 = [v14 mapStaticKeyToStoreEntry:v8 handles:v13 moc:v15 error:&v20];
    objc_storeStrong((id *)(v16 + 40), v20);
    uint64_t v18 = *(void *)(a1[8] + 8);
    id v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;
  }
}

void sub_100034D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100034D68(uint64_t a1)
{
  id v2 = +[KTCoreDataSTStaticKey fetchRequest];
  id v3 = +[NSPredicate predicateWithFormat:@"publicIdentity == %@", *(void *)(a1 + 32)];
  [v2 setPredicate:v3];

  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v5 + 40);
  id v28 = v2;
  uint64_t v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v35 objects:v41 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v36;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v36 != v10) {
          objc_enumerationMutation(v7);
        }
        [*(id *)(a1 + 40) deleteObject:*(void *)(*((void *)&v35 + 1) + 8 * i)];
      }
      id v9 = [v7 countByEnumeratingWithState:&v35 objects:v41 count:16];
    }
    while (v9);
  }

  uint64_t v12 = +[KTCoreDataSTHandle fetchRequest];
  uint64_t v13 = +[NSPredicate predicateWithFormat:@"publicIdentity == %@", *(void *)(a1 + 32)];
  [v12 setPredicate:v13];

  uint64_t v14 = *(void **)(a1 + 40);
  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
  id v34 = *(id *)(v15 + 40);
  uint64_t v16 = [v14 executeFetchRequest:v12 error:&v34];
  objc_storeStrong((id *)(v15 + 40), v34);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v17 = v16;
  id v18 = [v17 countByEnumeratingWithState:&v30 objects:v40 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v31;
    do
    {
      for (j = 0; j != v19; j = (char *)j + 1)
      {
        if (*(void *)v31 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v22 = *(void **)(*((void *)&v30 + 1) + 8 * (void)j);
        uint64_t v23 = *(void **)(a1 + 48);
        uint64_t v24 = [v22 idsID];
        [v23 addObject:v24];

        [*(id *)(a1 + 40) deleteObject:v22];
      }
      id v19 = [v17 countByEnumeratingWithState:&v30 objects:v40 count:16];
    }
    while (v19);
  }

  uint64_t v25 = *(void **)(a1 + 40);
  uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8);
  id v29 = *(id *)(v26 + 40);
  unsigned int v27 = [v25 save:&v29];
  objc_storeStrong((id *)(v26 + 40), v29);
  if (v27) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  }
}

void sub_100035288(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000352B4(uint64_t a1)
{
  id v2 = +[KTCoreDataSTStaticKey fetchRequest];
  id v3 = +[NSPredicate predicateWithFormat:@"contactIdentifier == %@", *(void *)(a1 + 32)];
  [v2 setPredicate:v3];

  id v4 = +[NSMutableSet set];
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v6 + 40);
  long long v32 = v2;
  id v7 = [v5 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v39 objects:v45 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v40;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v40 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v39 + 1) + 8 * i);
        uint64_t v14 = [v13 publicIdentity];
        [v4 addObject:v14];

        [*(id *)(a1 + 40) deleteObject:v13];
      }
      id v10 = [v8 countByEnumeratingWithState:&v39 objects:v45 count:16];
    }
    while (v10);
  }

  uint64_t v15 = +[KTCoreDataSTHandle fetchRequest];
  uint64_t v16 = +[NSPredicate predicateWithFormat:@"publicIdentity IN %@", v4];
  [v15 setPredicate:v16];

  id v17 = *(void **)(a1 + 40);
  uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
  id v38 = *(id *)(v18 + 40);
  long long v31 = v15;
  id v19 = [v17 executeFetchRequest:v15 error:&v38];
  objc_storeStrong((id *)(v18 + 40), v38);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v20 = v19;
  id v21 = [v20 countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v35;
    do
    {
      for (j = 0; j != v22; j = (char *)j + 1)
      {
        if (*(void *)v35 != v23) {
          objc_enumerationMutation(v20);
        }
        uint64_t v25 = *(void **)(*((void *)&v34 + 1) + 8 * (void)j);
        uint64_t v26 = *(void **)(a1 + 48);
        unsigned int v27 = [v25 idsID];
        [v26 addObject:v27];

        [*(id *)(a1 + 40) deleteObject:v25];
      }
      id v22 = [v20 countByEnumeratingWithState:&v34 objects:v44 count:16];
    }
    while (v22);
  }

  id v28 = *(void **)(a1 + 40);
  uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8);
  id v33 = *(id *)(v29 + 40);
  unsigned int v30 = [v28 save:&v33];
  objc_storeStrong((id *)(v29 + 40), v33);
  if (v30) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v8 count] != 0;
  }
}

void sub_100035830(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10003585C(uint64_t a1)
{
  id v2 = +[NSMutableSet set];
  id v3 = +[KTCoreDataSTStaticKey fetchRequest];
  id v4 = +[NSPredicate predicateWithFormat:@"contactExternalIdentifier == %@", *(void *)(a1 + 32)];
  [v3 setPredicate:v4];

  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v6 + 40);
  long long v32 = v3;
  id v7 = [v5 executeFetchRequest:v3 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v8 = v7;
  id v9 = [v8 countByEnumeratingWithState:&v39 objects:v45 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v40;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v40 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v39 + 1) + 8 * i);
        uint64_t v14 = [v13 publicIdentity];
        [v2 addObject:v14];

        [*(id *)(a1 + 40) deleteObject:v13];
      }
      id v10 = [v8 countByEnumeratingWithState:&v39 objects:v45 count:16];
    }
    while (v10);
  }

  uint64_t v15 = +[KTCoreDataSTHandle fetchRequest];
  uint64_t v16 = +[NSPredicate predicateWithFormat:@"publicIdentity IN %@", v2];
  [v15 setPredicate:v16];

  id v17 = *(void **)(a1 + 40);
  uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
  id v38 = *(id *)(v18 + 40);
  long long v31 = v15;
  id v19 = [v17 executeFetchRequest:v15 error:&v38];
  objc_storeStrong((id *)(v18 + 40), v38);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v20 = v19;
  id v21 = [v20 countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v35;
    do
    {
      for (j = 0; j != v22; j = (char *)j + 1)
      {
        if (*(void *)v35 != v23) {
          objc_enumerationMutation(v20);
        }
        uint64_t v25 = *(void **)(*((void *)&v34 + 1) + 8 * (void)j);
        uint64_t v26 = *(void **)(a1 + 48);
        unsigned int v27 = [v25 idsID];
        [v26 addObject:v27];

        [*(id *)(a1 + 40) deleteObject:v25];
      }
      id v22 = [v20 countByEnumeratingWithState:&v34 objects:v44 count:16];
    }
    while (v22);
  }

  id v28 = *(void **)(a1 + 40);
  uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8);
  id v33 = *(id *)(v29 + 40);
  unsigned int v30 = [v28 save:&v33];
  objc_storeStrong((id *)(v29 + 40), v33);
  if (v30) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v8 count] != 0;
  }
}

void sub_100035D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100035D30(uint64_t a1)
{
  id v2 = +[KTCoreDataSTStaticKey fetchRequest];
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v3 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  if (v5)
  {
    uint64_t v15 = v2;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v21 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        for (i = 0; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          uint64_t v12 = [v11 publicIdentity];

          if (v12)
          {
            uint64_t v13 = [v11 publicIdentity];
            uint64_t v14 = +[KTAccountPublicID ktAccountPublicIDWithStorageString:v13 error:0];

            if (v14) {
              [*(id *)(a1 + 40) addObject:v14];
            }
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v21 count:16];
      }
      while (v8);
    }

    id v2 = v15;
  }
}

void sub_100036090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000360B4(uint64_t a1)
{
  id v2 = +[NSFetchRequest fetchRequestWithEntityName:@"STStaticKeyHandle"];
  id v3 = +[NSPredicate predicateWithFormat:@"idsID == %@", *(void *)(a1 + 32)];
  [v2 setPredicate:v3];

  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v5 + 40);
  id v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10003620C;
    v11[3] = &unk_1002B98E0;
    int v12 = *(_DWORD *)(a1 + 64);
    [v6 enumerateObjectsUsingBlock:v11];
    id v7 = *(void **)(a1 + 40);
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    id v10 = *(id *)(v8 + 40);
    unsigned int v9 = [v7 save:&v10];
    objc_storeStrong((id *)(v8 + 40), v10);
    if (v9) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
    }
  }
}

id sub_10003620C(uint64_t a1, void *a2)
{
  return [a2 setError:*(unsigned int *)(a1 + 32)];
}

void sub_1000367B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000367D8(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003681C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (v5)
  {
    if (qword_100326780 != -1) {
      dispatch_once(&qword_100326780, &stru_1002B9948);
    }
    id v6 = qword_100326788;
    if (os_log_type_enabled((os_log_t)qword_100326788, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v35 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, " fetch handles return error with %@, continuing anyway", buf, 0xCu);
    }
  }
  unsigned int v27 = v5;
  id v7 = [*(id *)(a1 + 32) copy];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v26 = v7;
  id obj = [v7 handles];
  id v8 = [obj countByEnumeratingWithState:&v30 objects:v38 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v31;
    uint64_t v11 = kKTApplicationIdentifierIDS;
    do
    {
      int v12 = 0;
      do
      {
        if (*(void *)v31 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v13 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v12);
        uint64_t v14 = +[TransparencyApplication addApplicationPrefixForIdentifier:v11 uri:v13];
        uint64_t v15 = [v4 objectForKeyedSubscript:v14];
        if (v15)
        {
          long long v16 = [*(id *)(a1 + 32) handles];
          long long v17 = [v16 objectForKeyedSubscript:v13];

          if (v17)
          {
            if (qword_100326780 != -1) {
              dispatch_once(&qword_100326780, &stru_1002B9988);
            }
            long long v18 = (void *)qword_100326788;
            if (os_log_type_enabled((os_log_t)qword_100326788, OS_LOG_TYPE_DEFAULT))
            {
              long long v19 = v18;
              unsigned int v20 = [v15 succeed];
              *(_DWORD *)buf = 138412546;
              id v35 = v13;
              __int16 v36 = 1024;
              unsigned int v37 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " updating handle %@ with %d", buf, 0x12u);
            }
            [v17 setValid:[v15 succeed] == (id)1];
            id v21 = +[NSDate date];
            [v17 setValidationDate:v21];
          }
        }
        else
        {
          if (qword_100326780 != -1) {
            dispatch_once(&qword_100326780, &stru_1002B9968);
          }
          id v22 = qword_100326788;
          if (os_log_type_enabled((os_log_t)qword_100326788, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            id v35 = v14;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, " imHandle %@ not found", buf, 0xCu);
          }
        }

        int v12 = (char *)v12 + 1;
      }
      while (v9 != v12);
      id v9 = [obj countByEnumeratingWithState:&v30 objects:v38 count:16];
    }
    while (v9);
  }

  uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = v26;
  id v25 = v26;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_100036BCC(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100036C10(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100036C54(id a1)
{
  qword_100326788 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000377D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000377F0(uint64_t result, uint64_t a2, unsigned char *a3)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  *a3 = 1;
  return result;
}

void sub_100037828(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100037850(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_100037890(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_100037C4C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100037D64(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100038D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, uint64_t a13, id *a14, id *a15, id *a16, id *a17, id *a18, id *a19, id *a20)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(v20);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(location);
  objc_destroyWeak(a14);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak(a17);
  objc_destroyWeak(a18);
  objc_destroyWeak(a19);
  objc_destroyWeak(a20);
  objc_destroyWeak((id *)(v27 - 128));
  _Unwind_Resume(a1);
}

void sub_100038E90(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002B9A38);
  }
  uint64_t v4 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Octagon changed: %{BOOL}d", (uint8_t *)v6, 8u);
  }
  id v5 = [WeakRetained stateMachine];
  [v5 handleFlag:@"OctagonTrustChanged"];
}

void sub_100038F94(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100038FD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002B9A80);
  }
  id v5 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 138543362;
    id v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CKKS view changed: %{public}@", (uint8_t *)&v9, 0xCu);
  }
  if (!v3 || [v3 isEqual:@"Manatee"])
  {
    id v6 = [WeakRetained stateMachine];
    [v6 handleFlag:@"ManateeViewChanged"];

    id v7 = [WeakRetained deps];
    id v8 = [v7 logger];
    +[KTContext updateEligibilityThreshold:v8];
  }
}

void sub_100039140(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100039184(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002B9AC8);
  }
  id v5 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543362;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "IDS status: %{public}@", (uint8_t *)&v7, 0xCu);
  }
  id v6 = [WeakRetained stateMachine];
  [v6 handleFlag:@"IDSStatusChanged"];

  [WeakRetained newServerOptInFetch:@"idsStatusObserver"];
}

void sub_1000392A4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000392E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerPublicKeyFetch];
}

void sub_100039328(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerEnsureIdentity];
}

void sub_100039368(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerGetPrimaryAccount];
}

void sub_1000393A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained maybeCreateNewCKFetch];
}

void sub_1000393E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerCheckKTAccountKey];
}

void sub_100039428(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerCheckIDSRegistration];
}

void sub_100039468(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerKTAccountKeySignature:0.0];
}

id sub_1000394AC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) triggerCheckAccountIdentityChanged];
}

void sub_1000394B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained maybeCreateServerOptInFetch];
}

void sub_1000394F4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained validatePendingURIsAndRequests];
}

void sub_100039534(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = [WeakRetained signatureQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100039618;
  block[3] = &unk_1002B6CF8;
  id v7 = WeakRetained;
  id v3 = WeakRetained;
  dispatch_async(v2, block);

  uint64_t v4 = [v3 deps];
  id v5 = [v4 flagHandler];
  [v5 cancelPendingFlag:@"ValidateSelf"];
}

id sub_100039618(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) signaturesComplete];
  [v2 fulfill];

  id result = [*(id *)(a1 + 32) shouldPokeIDSUponSigning];
  if (result)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    return [v4 triggerRegistrationDataNeedsUpdate:@"updated"];
  }
  return result;
}

void sub_100039684(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained manateeViewChangedScheduler];
  [v1 trigger];
}

uint64_t sub_1000396DC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained stateMachineQueue];
    dispatch_sync(v3, &stru_1002B9B38);
  }
  return 1;
}

void sub_100039AD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002B9B80);
    }
    uint64_t v4 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      int v5 = 138412290;
      id v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "error closing eligibility db %@", (uint8_t *)&v5, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100039BBC(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100039C00(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100039DC8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

id sub_100039E00(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v16 = +[NSMutableDictionary dictionary];
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  uint64_t v3 = dispatch_group_create();
  id v4 = [WeakRetained statusReporting];

  if (v4)
  {
    uint64_t v15 = v2;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v5 = [&off_1002DA498 countByEnumeratingWithState:&v22 objects:v26 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v23;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v23 != v7) {
            objc_enumerationMutation(&off_1002DA498);
          }
          uint64_t v9 = *(void *)(*((void *)&v22 + 1) + 8 * i);
          dispatch_group_enter(v3);
          id v10 = [WeakRetained statusReporting];
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          v19[2] = sub_10003A0C8;
          v19[3] = &unk_1002B9BF0;
          v19[4] = v9;
          void v19[5] = WeakRetained;
          id v20 = v16;
          id v21 = v3;
          [v10 aggregateResultWithSamples:30 element:v9 completionHandler:v19];
        }
        id v6 = [&off_1002DA498 countByEnumeratingWithState:&v22 objects:v26 count:16];
      }
      while (v6);
    }
    uint64_t v11 = [WeakRetained metricsQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003A2A4;
    block[3] = &unk_1002B6CF8;
    dispatch_semaphore_t v2 = v15;
    int v12 = v15;
    long long v18 = v12;
    dispatch_group_notify(v3, v11, block);

    dispatch_time_t v13 = dispatch_time(0, 1000000000);
    id v4 = 0;
    if (!dispatch_semaphore_wait(v12, v13)) {
      id v4 = v16;
    }
  }

  return v4;
}

void sub_10003A0C8(id *a1, uint64_t a2)
{
  id v4 = [a1[4] stringByAppendingString:@"Eligible30"];
  os_unfair_lock_lock((os_unfair_lock_t)a1[5] + 3);
  id v5 = +[NSNumber numberWithBool:a2];
  [a1[6] setObject:v5 forKeyedSubscript:v4];

  os_unfair_lock_unlock((os_unfair_lock_t)a1[5] + 3);
  id v6 = [a1[5] statusReporting];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10003A200;
  v7[3] = &unk_1002B9BF0;
  long long v8 = *((_OWORD *)a1 + 2);
  id v9 = a1[6];
  id v10 = a1[7];
  [v6 aggregateResultWithSamples:60 element:(void)v8 completionHandler:v7];
}

void sub_10003A200(uint64_t a1, uint64_t a2)
{
  id v5 = [*(id *)(a1 + 32) stringByAppendingString:@"Eligible60"];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 12));
  id v4 = +[NSNumber numberWithBool:a2];
  [*(id *)(a1 + 48) setObject:v4 forKeyedSubscript:v5];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 40) + 12));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

intptr_t sub_10003A2A4(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_10003A2AC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  dispatch_semaphore_t v2 = +[NSMutableDictionary dictionary];
  uint64_t v3 = +[NSNumber numberWithLongLong:kTransparencyAnalyticsVersion];
  [v2 setObject:v3 forKeyedSubscript:kTransparencyAnalyticsVersionKey];

  id v57 = WeakRetained;
  id v4 = [WeakRetained deps];
  id v5 = [v4 settings];
  id v6 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v5 getEnvironment]);
  uint64_t v7 = v2;
  [v2 setObject:v6 forKeyedSubscript:kTransparencyAnalyticsEnvironmentKey];

  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id obj = +[TransparencyAnalytics analyticsApplications];
  id v55 = [obj countByEnumeratingWithState:&v66 objects:v72 count:16];
  if (v55)
  {
    uint64_t v54 = *(void *)v67;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v67 != v54) {
          objc_enumerationMutation(obj);
        }
        uint64_t v56 = v8;
        uint64_t v9 = *(void *)(*((void *)&v66 + 1) + 8 * v8);
        long long v62 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v65 = 0u;
        id v10 = +[KTContext analyticsSuccessNames];
        id v11 = [v10 countByEnumeratingWithState:&v62 objects:v71 count:16];
        if (v11)
        {
          id v12 = v11;
          uint64_t v13 = *(void *)v63;
          do
          {
            for (i = 0; i != v12; i = (char *)i + 1)
            {
              if (*(void *)v63 != v13) {
                objc_enumerationMutation(v10);
              }
              uint64_t v15 = +[KTContext successMetricsKey:v9 validationName:*(void *)(*((void *)&v62 + 1) + 8 * i)];
              if (v15)
              {
                long long v16 = [v57 deps];
                long long v17 = [v16 logger];
                long long v18 = [v17 fuzzyTimeSinceLastSuccess:v15];
                [v7 setObject:v18 forKeyedSubscript:v15];
              }
            }
            id v12 = [v10 countByEnumeratingWithState:&v62 objects:v71 count:16];
          }
          while (v12);
        }

        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        long long v19 = +[KTContext analyticsSelfFlagNames];
        id v20 = [v19 countByEnumeratingWithState:&v58 objects:v70 count:16];
        if (v20)
        {
          id v21 = v20;
          uint64_t v22 = *(void *)v59;
          do
          {
            for (j = 0; j != v21; j = (char *)j + 1)
            {
              if (*(void *)v59 != v22) {
                objc_enumerationMutation(v19);
              }
              long long v24 = +[KTContext selfStatusFlagMetricsKey:v9 name:*(void *)(*((void *)&v58 + 1) + 8 * (void)j)];
              if (v24)
              {
                long long v25 = [v57 deps];
                uint64_t v26 = [v25 logger];
                uint64_t v27 = [v26 numberPropertyForKey:v24];
                [v7 setObject:v27 forKeyedSubscript:v24];
              }
            }
            id v21 = [v19 countByEnumeratingWithState:&v58 objects:v70 count:16];
          }
          while (v21);
        }

        uint64_t v8 = v56 + 1;
      }
      while ((id)(v56 + 1) != v55);
      id v55 = [obj countByEnumeratingWithState:&v66 objects:v72 count:16];
    }
    while (v55);
  }

  id v28 = [v57 smState];
  uint64_t v29 = v7;
  [v7 setObject:v28 forKeyedSubscript:@"smState"];

  long long v30 = [v57 metricsRegistration_ktView];
  if ([v30 count]) {
    [v7 addEntriesFromDictionary:v30];
  }
  long long v31 = [v57 metricsRegistration_idsView];
  if ([v31 count]) {
    [v29 addEntriesFromDictionary:v31];
  }
  long long v32 = [v57 deps];
  long long v33 = [v32 logger];
  long long v34 = [v33 fuzzyTimeSinceDateKey:off_10031E4C8];
  [v29 setObject:v34 forKeyedSubscript:@"idsRegPoke"];

  id v35 = [v57 deps];
  __int16 v36 = [v35 logger];
  unsigned int v37 = [v36 fuzzyTimeSinceDateKey:off_10031E4D0];
  [v29 setObject:v37 forKeyedSubscript:@"idsRegValid"];

  id v38 = [v57 deps];
  long long v39 = [v38 idsConfigBag];
  long long v40 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v39 ktDisable]);
  [v29 setObject:v40 forKeyedSubscript:@"idsKTDisable"];

  long long v41 = [v57 deps];
  long long v42 = [v41 idsAccountTracker];
  long long v43 = [v42 messagesStatus];

  if (v43)
  {
    long long v44 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v43 status] == (id)3);
    [v29 setObject:v44 forKeyedSubscript:@"messages"];
  }
  uint64_t v45 = [v57 deps];
  long long v46 = +[KTFillStatusOperation memoizedKTSelfStatusResult:v45];

  if (v46 && ([v46 pendingStatusChanges] & 1) == 0)
  {
    unsigned int v47 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v46 optIn]);
    [v29 setObject:v47 forKeyedSubscript:@"optIn"];

    if ([v46 everOptIn])
    {
      long long v48 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v46 everOptIn]);
      [v29 setObject:v48 forKeyedSubscript:@"everOptIn"];
    }
    id v49 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v46 accountStatus]);
    [v29 setObject:v49 forKeyedSubscript:@"accountStatus"];

    id v50 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v46 selfStatus]);
    [v29 setObject:v50 forKeyedSubscript:@"selfStatus"];

    id v51 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v46 systemStatus]);
    [v29 setObject:v51 forKeyedSubscript:@"systemStatus"];
  }

  return v29;
}

void sub_10003AA9C(uint64_t a1)
{
  [*(id *)(a1 + 32) setCloudKitAccountInfo:*(void *)(a1 + 40)];
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002B9C10);
  }
  dispatch_semaphore_t v2 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CK account changed to: %@", (uint8_t *)&v5, 0xCu);
  }
  id v4 = [*(id *)(a1 + 32) stateMachine];
  [v4 _onqueueHandleFlag:@"CKAccountChanged"];
}

void sub_10003AB94(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003AD1C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003AFCC(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003B2B4(uint64_t a1)
{
  uint64_t v3 = [[KTPendingFlag alloc] initWithFlag:@"CheckAccountSignatures" conditions:0 delayInSeconds:*(double *)(a1 + 40)];
  dispatch_semaphore_t v2 = [*(id *)(a1 + 32) stateMachine];
  [v2 _onqueueHandlePendingFlagLater:v3];
}

void sub_10003B56C(uint64_t a1, uint64_t a2)
{
  id v3 = +[KTStateTransitionWatcher stripUnexpectedPathError:a2];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10003B9E4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003BA28(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003BA6C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003BB74(uint64_t a1)
{
  [*(id *)(a1 + 32) setSelfValidationResult:*(void *)(a1 + 40)];
  dispatch_semaphore_t v2 = [*(id *)(a1 + 32) queue];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10003BC14;
  v3[3] = &unk_1002B9C78;
  v3[5] = *(void *)(a1 + 48);
  v3[4] = *(void *)(a1 + 32);
  dispatch_async(v2, v3);
}

void sub_10003BC14(uint64_t a1)
{
  id v3 = [[KTPendingFlag alloc] initWithFlag:@"RepairIDSFlag" conditions:2 delayInSeconds:*(double *)(a1 + 40)];
  dispatch_semaphore_t v2 = [*(id *)(a1 + 32) stateMachine];
  [v2 handlePendingFlag:v3];
}

void sub_10003BDDC(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10003BEF4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) maybeCreateNewCKFetchOnQueue];
}

void sub_10003BFF4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003C43C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003C480(id *a1)
{
  dispatch_semaphore_t v2 = [a1[4] queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003C538;
  block[3] = &unk_1002B9DD0;
  id v3 = a1[5];
  id v4 = a1[4];
  id v6 = v3;
  id v7 = v4;
  id v8 = a1[6];
  dispatch_async(v2, block);
}

void sub_10003C538(uint64_t a1)
{
  dispatch_semaphore_t v2 = [*(id *)(a1 + 32) error];
  if (v2)
  {
    if ([*(id *)(a1 + 32) shouldRetry])
    {
      id v3 = *(void **)(a1 + 40);
      id v4 = [*(id *)(a1 + 32) error];
      int v5 = [*(id *)(a1 + 40) ckFetchScheduler];
      [v3 inspectErrorForRetryAfter:v4 trigger:v5];

      id v6 = [*(id *)(a1 + 40) deps];
      id v7 = [v6 reachabilityTracker];
      LODWORD(v5) = [v7 isNetworkError:v2];

      id v8 = [*(id *)(a1 + 40) ckFetchReasons];
      uint64_t v9 = v8;
      if (v5)
      {
        [v8 addObject:off_10031E558];

        uint64_t v9 = [*(id *)(a1 + 40) deps];
        id v10 = [v9 networkTimeout];
        [v10 networkWithFeedback:1];
      }
      else
      {
        [v8 addObject:off_10031E560];
      }

      uint64_t v22 = [*(id *)(a1 + 40) ckFetchReasons];
      [v22 unionSet:*(void *)(a1 + 48)];

      if ([*(id *)(a1 + 40) isCloudKitManateeAcountAvailable])
      {
        long long v23 = [*(id *)(a1 + 40) specificUser];

        if (v23)
        {
          [*(id *)(a1 + 40) setNewCKRequests:1];
LABEL_22:
          long long v24 = [*(id *)(a1 + 40) ckFetchScheduler];
          [v24 trigger];
        }
      }
    }
    else
    {
      if (qword_100326790 != -1) {
        dispatch_once(&qword_100326790, &stru_1002B9DA8);
      }
      id v21 = qword_100326798;
      if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        long long v30 = v2;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Fetcher don't advice retry on error: %{public}@", buf, 0xCu);
      }
    }
  }
  else
  {
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v11 = [*(id *)(a1 + 40) inflightCKFetchDependencies];
    id v12 = [v11 countByEnumeratingWithState:&v25 objects:v31 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v26;
      do
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v26 != v14) {
            objc_enumerationMutation(v11);
          }
          uint64_t v16 = *(void *)(*((void *)&v25 + 1) + 8 * i);
          long long v17 = [*(id *)(a1 + 40) operationQueue];
          [v17 addOperation:v16];
        }
        id v13 = [v11 countByEnumeratingWithState:&v25 objects:v31 count:16];
      }
      while (v13);
    }

    long long v18 = [*(id *)(a1 + 40) inflightCKFetchDependencies];
    [v18 removeAllObjects];

    long long v19 = [*(id *)(a1 + 40) deps];
    id v20 = [v19 networkTimeout];
    [v20 networkWithFeedback:0];

    if ([*(id *)(a1 + 40) newCKRequests]) {
      goto LABEL_22;
    }
  }
  [*(id *)(a1 + 40) setLastCKFetch:*(void *)(a1 + 32)];
  [*(id *)(a1 + 40) setCurrentCKFetch:0];
}

void sub_10003C88C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003CB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003CB5C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_10003CBA0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10003CBB0(uint64_t a1)
{
}

void sub_10003CBB8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) successfulCKFetchDependency];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  [*(id *)(a1 + 32) setNewCKRequests:1];
  int v5 = [*(id *)(a1 + 32) ckFetchReasons];
  [v5 unionSet:*(void *)(a1 + 40)];

  id v6 = [*(id *)(a1 + 32) ckFetchScheduler];
  [v6 trigger];
}

void sub_10003CF8C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003D248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003D264(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = [a3 dateByAddingTimeInterval:*(double *)(a1 + 48)];
  if (!a3 || (v7 = v5, v6 = (char *)[v5 compare:*(void *)(a1 + 32)] + 1 == 0, int v5 = v7, v6)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_10003D44C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003D630(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003D8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003D900(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v21 = 0;
  unsigned __int8 v3 = [v2 waitUntilReadyForRPCForOperation:@"background-validation" fast:0 error:&v21];
  id v4 = v21;
  if (v3)
  {
    int v5 = [KTBackgroundSystemValidationOperation alloc];
    BOOL v6 = [*(id *)(a1 + 32) deps];
    id v7 = [(KTBackgroundSystemValidationOperation *)v5 initWithDependencies:v6];

    [*(id *)(a1 + 32) setLastDutyCycle:v7];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10003DAF4;
    v17[3] = &unk_1002B9EE8;
    id v8 = *(void **)(a1 + 40);
    void v17[4] = *(void *)(a1 + 32);
    long long v18 = v7;
    id v19 = v8;
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v9 = v7;
    id v10 = +[NSBlockOperation blockOperationWithBlock:v17];
    [v10 addNullableDependency:v9];
    id v11 = [*(id *)(a1 + 32) deps];
    id v12 = [v11 reachabilityTracker];
    id v13 = [v12 reachabilityDependency];
    [(KTBackgroundSystemValidationOperation *)v9 addNullableDependency:v13];

    uint64_t v14 = [*(id *)(a1 + 32) operationQueue];
    [v14 addOperation:v9];

    uint64_t v15 = [*(id *)(a1 + 32) operationQueue];
    [v15 addOperation:v10];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v9 = *(KTBackgroundSystemValidationOperation **)(v16 + 40);
    *(void *)(v16 + 40) = 0;
  }
}

void sub_10003DAF4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) queue];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10003DBB4;
  v5[3] = &unk_1002B9EC0;
  id v8 = *(id *)(a1 + 48);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  uint64_t v9 = *(void *)(a1 + 56);
  dispatch_async(v2, v5);
}

void sub_10003DBB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) error];
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
  uint64_t v4 = [*(id *)(a1 + 32) error];

  if (!v4)
  {
    int v5 = [*(id *)(a1 + 40) deps];
    id v6 = [v5 smDataStore];
    [v6 setSettingsNumber:off_10031E2A8 number:&off_1002D9C60];

    uint64_t v7 = [*(id *)(a1 + 40) deps];
    id v8 = [v7 smDataStore];
    [v8 setSettingsData:off_10031E2C8 data:0];
  }
  [*(id *)(a1 + 40) triggerStatusUpdate:kKTApplicationIdentifierIDS];
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002B9E98);
  }
  uint64_t v9 = (void *)qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEBUG))
  {
    id v10 = *(void **)(a1 + 32);
    id v11 = v9;
    id v12 = [v10 opUUID];
    int v15 = 138543362;
    uint64_t v16 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BackgroundSystemValidation: end %{public}@", (uint8_t *)&v15, 0xCu);
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = 0;
}

void sub_10003DD8C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003DF9C(uint64_t a1)
{
  id v3 = [[KTPendingFlag alloc] initWithFlag:@"StatusUpdate" delayInSeconds:0.0];
  uint64_t v2 = [*(id *)(a1 + 32) stateMachine];
  [v2 handlePendingFlag:v3];
}

void sub_10003E1F8(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003E23C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003E374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003E38C(uint64_t a1)
{
  uint64_t v2 = [KTValidatePendingURIsOperation alloc];
  uint64_t v3 = kKTApplicationIdentifierIDS;
  uint64_t v4 = [*(id *)(a1 + 32) deps];
  int v5 = [(KTValidatePendingURIsOperation *)v2 initWithApplication:v3 opId:0 dependencies:v4];

  id v6 = [KTValidatePendingRequestsOperation alloc];
  uint64_t v7 = [*(id *)(a1 + 32) deps];
  id v8 = [(KTValidatePendingRequestsOperation *)v6 initWithApplication:v3 dependencies:v7 opId:0];

  uint64_t v9 = [KTFillStatusOperation alloc];
  id v10 = [*(id *)(a1 + 32) deps];
  id v11 = [(KTFillStatusOperation *)v9 initWithApplication:v3 initialFill:1 dependencies:v10 intendedState:@"Ready" errorState:@"Ready"];

  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10003E62C;
  v23[3] = &unk_1002B9F78;
  long long v24 = *(_OWORD *)(a1 + 32);
  id v12 = +[NSBlockOperation blockOperationWithBlock:v23];
  [v12 addNullableDependency:v5];
  [v12 addNullableDependency:v8];
  [v12 addNullableDependency:v11];
  uint64_t v13 = [*(id *)(a1 + 32) deps];
  uint64_t v14 = [v13 reachabilityTracker];
  int v15 = [v14 reachabilityDependency];
  [(KTValidatePendingURIsOperation *)v5 addNullableDependency:v15];

  uint64_t v16 = [*(id *)(a1 + 32) deps];
  long long v17 = [v16 reachabilityTracker];
  long long v18 = [v17 reachabilityDependency];
  [(KTValidatePendingRequestsOperation *)v8 addNullableDependency:v18];

  [(KTFillStatusOperation *)v11 addNullableDependency:v8];
  id v19 = [*(id *)(a1 + 32) operationQueue];
  [v19 addOperation:v5];

  uint64_t v20 = [*(id *)(a1 + 32) operationQueue];
  [v20 addOperation:v8];

  id v21 = [*(id *)(a1 + 32) operationQueue];
  [v21 addOperation:v11];

  uint64_t v22 = [*(id *)(a1 + 32) operationQueue];
  [v22 addOperation:v12];
}

void sub_10003E62C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) queue];
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10003E6BC;
  v3[3] = &unk_1002B9F78;
  long long v4 = *(_OWORD *)(a1 + 32);
  dispatch_async(v2, v3);
}

void sub_10003E6BC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) pendingValidationsComplete];
  [v2 fulfill];

  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0;
}

void sub_10003E970(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_10003E984(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained deps];
  uint64_t v2 = [v1 logger];
  uint64_t v3 = +[NSDate date];
  [v2 setDateProperty:v3 forKey:off_10031E4D0];

  long long v4 = [WeakRetained successfulIDSRegistrationCheck];
  [v4 fulfill];

  int v5 = objc_alloc_init(KTCondition);
  [WeakRetained setSuccessfulIDSRegistrationCheck:v5];
}

void sub_10003ED40(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003EFCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3) {
    goto LABEL_2;
  }
  id v6 = [*(id *)(a1 + 32) lastValidateSelf];

  if (!v6)
  {
    id v3 = +[TransparencyError errorWithDomain:kTransparencyErrorInternal code:-319 description:@"no prior self validation operation"];
LABEL_2:
    id v7 = +[KTStateTransitionWatcher stripUnexpectedPathError:v3];

    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = +[SecXPCHelper cleanseErrorForXPC:v7];
    (*(void (**)(uint64_t, void, void, void, void *))(v4 + 16))(v4, 0, 0, 0, v5);

    goto LABEL_5;
  }
  id v7 = [*(id *)(a1 + 32) lastValidateSelf];
  [v7 handleOperationResults:*(void *)(a1 + 40)];
LABEL_5:
}

void sub_10003F190(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v12 = a3;
  id v8 = a5;
  uint64_t v9 = +[NSNumber numberWithUnsignedInteger:a2];
  [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"selfFetchResult"];

  if (v8)
  {
    id v10 = [v8 description];
    [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"selfFetchError"];
  }
  id v11 = [v12 diagnosticsJsonDictionary];
  [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"diagnostics"];
}

void sub_10003F364(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  long long v23 = v8;
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002BA008);
  }
  id v10 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    id v34 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "fetchSelfVerificationInfoForApplication: %@", buf, 0xCu);
  }
  if (v9)
  {
    CFStringRef v31 = @"error";
    id v11 = [v9 description];
    long long v32 = v11;
    id v12 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:@"fetchError"];
  }
  uint64_t v13 = +[NSMutableDictionary dictionary];
  uint64_t v14 = [v7 uriToServerLoggableDatas];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  v28[2] = sub_10003F6B4;
  v28[3] = &unk_1002BA030;
  id v15 = v13;
  id v29 = v15;
  [v14 enumerateKeysAndObjectsUsingBlock:v28];

  uint64_t v16 = +[NSMutableArray array];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v17 = [v7 syncedLoggableDatas];
  id v18 = [v17 countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v25;
    do
    {
      for (i = 0; i != v19; i = (char *)i + 1)
      {
        if (*(void *)v25 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v22 = [*(id *)(*((void *)&v24 + 1) + 8 * i) diagnosticsJsonDictionary];
        [v16 addObject:v22];
      }
      id v19 = [v17 countByEnumeratingWithState:&v24 objects:v30 count:16];
    }
    while (v19);
  }

  if ([v15 count]) {
    [*(id *)(a1 + 32) setObject:v15 forKeyedSubscript:@"serverLoggableDatas"];
  }
  if ([v16 count]) {
    [*(id *)(a1 + 32) setObject:v16 forKeyedSubscript:@"syncedLoggableDatas"];
  }
}

void sub_10003F670(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10003F6B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[NSMutableArray array];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v8 = [v6 serverLoggableDatas];
  id v9 = [v8 countByEnumeratingWithState:&v15 objects:v21 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v16;
    do
    {
      id v12 = 0;
      do
      {
        if (*(void *)v16 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = [*(id *)(*((void *)&v15 + 1) + 8 * (void)v12) diagnosticsJsonDictionary];
        [v7 addObject:v13];

        id v12 = (char *)v12 + 1;
      }
      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v15 objects:v21 count:16];
    }
    while (v10);
  }

  CFStringRef v19 = @"loggableData";
  uint64_t v20 = v7;
  uint64_t v14 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
  [*(id *)(a1 + 32) setObject:v14 forKeyedSubscript:v5];
}

void sub_10003FBCC(uint64_t a1)
{
  v172 = +[NSMutableDictionary dictionary];
  uint64_t v2 = +[NSMutableDictionary dictionary];
  dispatch_semaphore_t v3 = dispatch_semaphore_create(0);
  uint64_t v4 = [*(id *)(a1 + 32) deps];
  id v5 = [v4 idsOperations];
  v183[0] = _NSConcreteStackBlock;
  v183[1] = 3221225472;
  v183[2] = sub_100040F0C;
  v183[3] = &unk_1002BA0A8;
  v183[4] = *(void *)(a1 + 32);
  id v170 = v2;
  id v184 = v170;
  dispatch_semaphore_t dsema = v3;
  dispatch_semaphore_t v185 = dsema;
  [v5 fetchKTRegistrationStatus:v183];

  id v6 = +[NSMutableDictionary dictionary];
  long long v179 = 0u;
  long long v180 = 0u;
  long long v181 = 0u;
  long long v182 = 0u;
  uint64_t v176 = a1;
  id v7 = [*(id *)(a1 + 32) deps];
  id v8 = [v7 publicKeyStore];
  id v9 = [v8 applicationKeyStores];

  id obj = v9;
  id v10 = [v9 countByEnumeratingWithState:&v179 objects:v186 count:16];
  v175 = v6;
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v180;
    do
    {
      for (i = 0; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v180 != v12) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void *)(*((void *)&v179 + 1) + 8 * i);
        long long v15 = [*(id *)(v176 + 32) deps];
        long long v16 = [v15 publicKeyStore];
        long long v17 = [v16 applicationKeyStores];
        long long v18 = [v17 objectForKeyedSubscript:v14];

        CFStringRef v19 = +[NSMutableDictionary dictionary];
        uint64_t v20 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v18 tltLogBeginningMs]);
        [v19 setObject:v20 forKeyedSubscript:@"tltLogBeginMs"];

        id v21 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v18 patLogBeginningMs]);
        [v19 setObject:v21 forKeyedSubscript:@"patLogBeginMs"];

        uint64_t v22 = [v18 vrfKey];
        long long v23 = [v22 vrfKey];
        long long v24 = [v23 kt_hexString];
        [v19 setObject:v24 forKeyedSubscript:@"vrfKey"];

        long long v25 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v18 inResetWindow]);
        [v19 setObject:v25 forKeyedSubscript:@"inResetWindow"];

        id v6 = v175;
        [v175 setObject:v19 forKeyedSubscript:v14];
      }
      id v11 = [obj countByEnumeratingWithState:&v179 objects:v186 count:16];
    }
    while (v11);
  }

  if ([v6 count]) {
    [v172 setObject:v6 forKeyedSubscript:@"trees"];
  }
  long long v26 = [*(id *)(v176 + 32) pcsOperation];
  long long v27 = [v26 getCurrentKTPCSIdentity:off_100325BD8 error:0];

  id obja = v27;
  if (v27)
  {
    [v27 identity];
    uint64_t v28 = PCSIdentityGetPublicKey();
  }
  else
  {
    uint64_t v28 = 0;
  }
  v169 = (void *)v28;
  if (v28) {
    CFStringRef v29 = (const __CFString *)v28;
  }
  else {
    CFStringRef v29 = @"<no-key>";
  }
  [v172 setObject:v29 forKeyedSubscript:@"accountKey"];
  long long v30 = [*(id *)(v176 + 32) deps];
  CFStringRef v31 = [v30 accountKeyService];
  uint64_t v32 = kKTApplicationIdentifierIDS;
  id v33 = [v31 copyCachedPCSIdentityForApplication:kKTApplicationIdentifierIDS];

  if (v33)
  {
    [v33 identity];
    uint64_t v34 = PCSIdentityGetPublicKey();
  }
  else
  {
    uint64_t v34 = 0;
  }
  v167 = (void *)v34;
  if (v34) {
    CFStringRef v35 = (const __CFString *)v34;
  }
  else {
    CFStringRef v35 = @"<no-key>";
  }
  [v172 setObject:v35 forKeyedSubscript:@"accountKeyCache"];
  __int16 v36 = +[NSMutableDictionary dictionary];
  unsigned int v37 = [*(id *)(v176 + 32) deps];
  id v38 = [v37 smDataStore];
  v177[0] = _NSConcreteStackBlock;
  v177[1] = 3221225472;
  v177[2] = sub_1000410D0;
  v177[3] = &unk_1002BA0D0;
  id v39 = v36;
  id v178 = v39;
  [v38 fetchIDMSDeviceList:v177];

  if ([v39 count]) {
    [v172 setObject:v39 forKeyedSubscript:@"devices"];
  }
  long long v40 = *(void **)(v176 + 32);
  long long v41 = [v40 lastValidateSelf];
  long long v42 = [v40 validateSelfDiagnostics:v41];

  long long v43 = *(void **)(v176 + 32);
  long long v44 = [v43 lastValidateSelfOptIn];
  uint64_t v45 = [v43 validateSelfDiagnostics:v44];

  v168 = v33;
  v166 = v45;
  if ([v42 count] || objc_msgSend(v45, "count", v45))
  {
    [v172 setObject:v42 forKeyedSubscript:@"lastValidateSelf" v166];
    [v172 setObject:v45 forKeyedSubscript:@"lastValidateSelfOptIn"];
  }
  else
  {
    v165 = [*(id *)(v176 + 32) missingValidateSelfFallbackDiagnostics];
    [v172 setObject:v165 forKeyedSubscript:@"missingValidateSelfFallback"];
  }
  long long v46 = [*(id *)(v176 + 32) deps];
  unsigned int v47 = [v46 lockStateTracker];
  long long v48 = [v47 description];
  [v172 setObject:v48 forKeyedSubscript:@"lockstate"];

  id v49 = [*(id *)(v176 + 32) deps];
  id v50 = [v49 logger];
  id v51 = [v50 nfsReporting];
  [v172 setObject:v51 forKeyedSubscript:@"nfs"];

  uint64_t v52 = [*(id *)(v176 + 32) deps];
  long long v53 = [v52 kvs];
  uint64_t v54 = +[KTOptInManagerServer getOptInHistoryDiagnostic:v32 store:v53];
  [v172 setObject:v54 forKeyedSubscript:@"IDSKVSOptInHistory"];

  id v55 = [*(id *)(v176 + 32) deps];
  uint64_t v56 = [v55 cloudRecords];
  id v57 = [v56 sysdiagnose];
  [v172 setObject:v57 forKeyedSubscript:@"cloudRecords"];

  long long v58 = [*(id *)(v176 + 32) deps];
  long long v59 = [v58 networkTimeout];
  long long v60 = [v59 sysdiagnose];
  [v172 setObject:v60 forKeyedSubscript:@"networkTimeout"];

  long long v61 = [*(id *)(v176 + 32) launch];
  long long v62 = [v61 eventsByTime];
  [v172 setObject:v62 forKeyedSubscript:@"launch"];

  long long v63 = [*(id *)(v176 + 32) deps];
  long long v64 = [v63 idsConfigBag];
  long long v65 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v64 ktDisable]);
  [v172 setObject:v65 forKeyedSubscript:@"idsKTDisable"];

  long long v66 = [*(id *)(v176 + 32) deps];
  long long v67 = [v66 stateMonitor];
  long long v68 = [v67 ktStatus];
  long long v69 = [v68 diagnosticsJsonDictionary];
  [v172 setObject:v69 forKeyedSubscript:@"status"];

  uint64_t v70 = [*(id *)(v176 + 32) deps];
  id v71 = +[KTFillStatusOperation memoizedKTSelfStatusResult:v70];
  id v72 = [v71 diagnosticsJsonDictionary];
  [v172 setObject:v72 forKeyedSubscript:@"memoizedStatus"];

  id v73 = [*(id *)(v176 + 32) deps];
  uint64_t v74 = [v73 idsAccountTracker];
  __int16 v75 = [v74 messagesStatus];

  if (v75)
  {
    uint64_t v76 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v75 status] == (id)3);
    [v172 setObject:v76 forKeyedSubscript:@"messages"];
  }
  __int16 v77 = +[NSMutableDictionary dictionary];
  id v78 = [*(id *)(v176 + 32) lastFetchIDMS];

  if (v78)
  {
    id v79 = [*(id *)(v176 + 32) lastFetchIDMS];
    long long v80 = [v79 description];
    [v77 setObject:v80 forKeyedSubscript:@"fetchIDMS"];
  }
  long long v81 = [*(id *)(v176 + 32) lastValidateSelf];

  if (v81)
  {
    long long v82 = [*(id *)(v176 + 32) lastValidateSelf];
    long long v83 = [v82 description];
    [v77 setObject:v83 forKeyedSubscript:@"validateSelf"];
  }
  long long v84 = [*(id *)(v176 + 32) lastValidateSelfOptIn];

  if (v84)
  {
    long long v85 = [*(id *)(v176 + 32) lastValidateSelfOptIn];
    long long v86 = [v85 description];
    [v77 setObject:v86 forKeyedSubscript:@"validateSelfOptIn"];
  }
  long long v87 = [*(id *)(v176 + 32) lastSignalIDS];

  if (v87)
  {
    long long v88 = [*(id *)(v176 + 32) lastSignalIDS];
    long long v89 = [v88 description];
    [v77 setObject:v89 forKeyedSubscript:@"signalIDS"];
  }
  long long v90 = [*(id *)(v176 + 32) lastFetchIDSSelf];

  if (v90)
  {
    long long v91 = [*(id *)(v176 + 32) lastFetchIDSSelf];
    long long v92 = [v91 description];
    [v77 setObject:v92 forKeyedSubscript:@"fetchIDSSelf"];
  }
  long long v93 = [*(id *)(v176 + 32) lastFetchKTSelf];

  if (v93)
  {
    long long v94 = [*(id *)(v176 + 32) lastFetchKTSelf];
    long long v95 = [v94 description];
    [v77 setObject:v95 forKeyedSubscript:@"fetchKTSelf"];
  }
  long long v96 = [*(id *)(v176 + 32) lastRegistration];

  if (v96)
  {
    long long v97 = [*(id *)(v176 + 32) lastRegistration];
    long long v98 = [v97 description];
    [v77 setObject:v98 forKeyedSubscript:@"lastRegistration"];
  }
  long long v99 = [*(id *)(v176 + 32) lastForceSyncKVS];

  if (v99)
  {
    id v100 = [*(id *)(v176 + 32) lastForceSyncKVS];
    id v101 = [v100 description];
    [v77 setObject:v101 forKeyedSubscript:@"forceSyncKVS"];
  }
  v102 = [*(id *)(v176 + 32) lastCKFetch];

  if (v102)
  {
    v103 = [*(id *)(v176 + 32) lastCKFetch];
    v104 = [v103 description];
    [v77 setObject:v104 forKeyedSubscript:@"lastCKFetch"];
  }
  v105 = [*(id *)(v176 + 32) lastPublicKeyRefresh];

  if (v105)
  {
    v106 = [*(id *)(v176 + 32) lastPublicKeyRefresh];
    uint64_t v107 = [v106 description];
    [v77 setObject:v107 forKeyedSubscript:@"publicKeyRefresh"];
  }
  v108 = [*(id *)(v176 + 32) lastCheckIDSRegistration];

  if (v108)
  {
    v109 = [*(id *)(v176 + 32) lastCheckIDSRegistration];
    v110 = [v109 description];
    [v77 setObject:v110 forKeyedSubscript:@"checkIDSRegistration"];
  }
  v111 = [*(id *)(v176 + 32) lastDutyCycle];

  if (v111)
  {
    v112 = [*(id *)(v176 + 32) lastDutyCycle];
    v113 = [v112 description];
    [v77 setObject:v113 forKeyedSubscript:@"lastDutyCycle"];
  }
  [v172 setObject:v77 forKeyedSubscript:@"ops"];
  v114 = +[NSMutableDictionary dictionary];
  v115 = [*(id *)(v176 + 32) deps];
  v116 = +[KTFetchCloudStorageOperation lastCKFetchWithDeps:v115];
  v117 = [v116 description];
  [v114 setObject:v117 forKeyedSubscript:@"ck-fetch"];

  v118 = [*(id *)(v176 + 32) lastPush];
  v119 = [v118 description];
  [v114 setObject:v119 forKeyedSubscript:@"push"];

  v120 = [*(id *)(v176 + 32) lastSelfValidate];
  v121 = [v120 description];
  [v114 setObject:v121 forKeyedSubscript:@"self-validate"];

  v122 = [*(id *)(v176 + 32) deps];
  v123 = +[KTFetchIDSSelfOperation lastSelfIDSFetch:v122];
  v124 = [v123 description];
  [v114 setObject:v124 forKeyedSubscript:@"idsSelfFetch"];

  v125 = [*(id *)(v176 + 32) deps];
  v126 = [v125 logger];
  v127 = [v126 datePropertyForKey:off_10031E4C8];
  v128 = [v127 description];
  [v114 setObject:v128 forKeyedSubscript:@"idsRegPoke"];

  v129 = [*(id *)(v176 + 32) deps];
  v130 = [v129 logger];
  v131 = [v130 datePropertyForKey:off_10031E4D0];
  v132 = [v131 description];
  [v114 setObject:v132 forKeyedSubscript:@"idsRegValid"];

  v133 = [*(id *)(v176 + 32) deps];
  v134 = [v133 logger];
  v135 = [v134 datePropertyForKey:off_10031E4D8];
  v136 = [v135 description];
  [v114 setObject:v136 forKeyedSubscript:@"idsRegEnroll"];

  v137 = [*(id *)(v176 + 32) deps];
  v138 = +[KTBackgroundSystemValidationOperation lastDutyCycle:v137];
  v139 = [v138 description];
  [v114 setObject:v139 forKeyedSubscript:@"bkValidate"];

  v140 = [*(id *)(v176 + 32) deps];
  v141 = +[KTBackgroundSystemValidationOperation lastDutyCycleSuccess:v140];
  v142 = [v141 description];
  [v114 setObject:v142 forKeyedSubscript:@"bkSuccess"];

  [v172 setObject:v114 forKeyedSubscript:@"lasts"];
  [v172 setObject:*(void *)(v176 + 40) forKeyedSubscript:@"pendingFlags"];
  v143 = [*(id *)(v176 + 32) stateMachine];
  v144 = [v143 currentState];
  [v172 setObject:v144 forKeyedSubscript:@"state"];

  v145 = [*(id *)(v176 + 32) accountFirstSeenDate];
  v146 = [v145 description];
  [v172 setObject:v146 forKeyedSubscript:@"accountFirstSeen"];

  v147 = +[TransparencySettings cfPrefsJson];
  [v172 setObject:v147 forKeyedSubscript:@"cfprefs"];

  v148 = [*(id *)(v176 + 32) deps];
  v149 = +[KTBackgroundSystemValidationOperation sysdiagnoseInfo:v148];
  [v172 setObject:v149 forKeyedSubscript:@"backgroundOp"];

  v150 = [*(id *)(v176 + 32) deps];
  v151 = [v150 lockStateTracker];
  v152 = [v151 description];
  [v172 setObject:v152 forKeyedSubscript:@"lockstate"];

  v153 = [*(id *)(v176 + 32) deps];
  v154 = [v153 reachabilityTracker];
  if ([v154 currentReachability]) {
    CFStringRef v155 = @"network";
  }
  else {
    CFStringRef v155 = @"no-network";
  }
  [v172 setObject:v155 forKeyedSubscript:@"reachability"];

  v156 = [*(id *)(v176 + 32) deps];
  v157 = [v156 cloudKitAccountTracker];
  v158 = [v157 description];
  [v172 setObject:v158 forKeyedSubscript:@"cloudkitaccounttracker"];

  v159 = [*(id *)(v176 + 32) ckFetchScheduler];
  v160 = [v159 description];
  [v172 setObject:v160 forKeyedSubscript:@"fetcher"];

  dispatch_time_t v161 = dispatch_time(0, 1000000000);
  if (dispatch_semaphore_wait(dsema, v161))
  {
    [v172 setObject:@"timeout" forKeyedSubscript:@"ids-kt"];
    v162 = v170;
  }
  else
  {
    v162 = v170;
    [v172 setObject:v170 forKeyedSubscript:@"ids-kt"];
  }
  uint64_t v163 = *(void *)(v176 + 48);
  v164 = +[TransparencySettings jsonDictFromPlistDict:v172];
  (*(void (**)(uint64_t, void *))(v163 + 16))(v163, v164);
}

void sub_100040F0C(uint64_t a1, void *a2)
{
  dispatch_semaphore_t v3 = [a2 ktApplicationToKTRegStatus];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100040FB8;
  v5[3] = &unk_1002BA080;
  uint64_t v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:v5];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100040FB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v13 = +[NSMutableDictionary dictionary];
  id v7 = *(void **)(a1 + 32);
  id v8 = [v5 registeredKTData];
  id v9 = [v7 idsKTData:v8];
  [v13 setObject:v9 forKeyedSubscript:@"reg"];

  id v10 = *(void **)(a1 + 32);
  id v11 = [v5 unregisteredKTData];

  uint64_t v12 = [v10 idsKTData:v11];
  [v13 setObject:v12 forKeyedSubscript:@"unreg"];

  [*(id *)(a1 + 40) setObject:v13 forKeyedSubscript:v6];
}

void sub_1000410D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v28 = a3;
  id v8 = a4;
  id v9 = v8;
  if (v8)
  {
    CFStringRef v35 = @"error";
    id v10 = [v8 description];
    __int16 v36 = v10;
    id v11 = +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];
    [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"fetch_error"];
  }
  long long v27 = v9;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = v7;
  id v12 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = *(void *)v31;
    do
    {
      long long v15 = 0;
      do
      {
        if (*(void *)v31 != v14) {
          objc_enumerationMutation(obj);
        }
        long long v16 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v15);
        long long v17 = +[NSMutableDictionary dictionary];
        long long v18 = [v16 name];
        [v17 setObject:v18 forKeyedSubscript:@"name"];

        CFStringRef v19 = [v16 deviceID];
        [v17 setObject:v19 forKeyedSubscript:@"deviceID"];

        uint64_t v20 = [v16 pushToken];
        [v17 setObject:v20 forKeyedSubscript:@"pushToken"];

        id v21 = [v16 osVersion];
        [v17 setObject:v21 forKeyedSubscript:@"osVersion"];

        uint64_t v22 = [v16 model];
        [v17 setObject:v22 forKeyedSubscript:@"model"];

        long long v23 = [v16 build];
        [v17 setObject:v23 forKeyedSubscript:@"build"];

        long long v24 = [v16 serial];
        [v17 setObject:v24 forKeyedSubscript:@"serial"];

        long long v25 = *(void **)(a1 + 32);
        long long v26 = [v16 deviceID];
        [v25 setObject:v17 forKeyedSubscript:v26];

        long long v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      id v13 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    }
    while (v13);
  }
}

void sub_10004147C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) deps];
  dispatch_semaphore_t v3 = [v2 stateMonitor];
  uint64_t v4 = [v3 statusFilled];
  +[TransparencySettings uiBlockingNetworkTimeout];
  id v6 = [v4 wait:(uint64_t)(v5 * 1000000000.0)];

  if (v6)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA118);
    }
    id v7 = (void *)qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      id v8 = *(void **)(a1 + 32);
      id v9 = v7;
      id v10 = [v8 deps];
      id v11 = [v10 stateMonitor];
      id v12 = [v11 ktStatus];
      id v13 = [v12 simpleStatus];
      int v18 = 138412290;
      CFStringRef v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "returning partially filled status: %@", (uint8_t *)&v18, 0xCu);
    }
  }
  uint64_t v14 = *(void *)(a1 + 40);
  long long v15 = [*(id *)(a1 + 32) deps];
  long long v16 = [v15 stateMonitor];
  long long v17 = [v16 ktStatus];
  (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v17, 0);
}

void sub_100041654(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000418A0(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000418E4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100041A0C(uint64_t a1, void *a2)
{
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id obj = [a2 allValues];
  id v3 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v15;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v8 = [v7 metricsTimeToCreate];
        id v9 = +[SFAnalytics fuzzyNumber:v8];
        id v10 = *(void **)(a1 + 32);
        id v11 = [v7 application];
        id v12 = +[NSString stringWithFormat:@"KTReg%@", v11];
        [v10 setObject:v9 forKeyedSubscript:v12];
      }
      id v4 = [obj countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
}

void sub_100041EA8(uint64_t a1, void *a2)
{
  id v3 = [a2 ktApplicationToKTRegStatus];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100041F54;
  v6[3] = &unk_1002BA080;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v7 = v4;
  uint64_t v8 = v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v6];

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_100041F54(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = a3;
  id v7 = a2;
  uint64_t v8 = [v6 registeredKTData];
  id v9 = [v5 idsKTData:v8];
  id v10 = *(void **)(a1 + 32);
  id v11 = +[NSString stringWithFormat:@"reg-%@", v7];
  [v10 setObject:v9 forKeyedSubscript:v11];

  id v12 = *(void **)(a1 + 40);
  id v16 = [v6 unregisteredKTData];

  id v13 = [v12 idsKTData:v16];
  long long v14 = *(void **)(a1 + 32);
  long long v15 = +[NSString stringWithFormat:@"unreg-%@", v7];

  [v14 setObject:v13 forKeyedSubscript:v15];
}

void sub_100044854(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1000448F0(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100044934(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = [[KTPendingFlag alloc] initWithFlag:@"PokeIDS" conditions:2 delayInSeconds:0.0];
  id v4 = [*(id *)(a1 + 32) stateMachine];
  [v4 handlePendingFlag:v6];

  uint64_t v5 = [v3 intendedState];
  [v3 setNextState:v5];
}

void sub_1000449EC(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) checkAccountKeyChanged];
  if (v2 == 1)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA250);
    }
    id v12 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "PCS KT identity no change, all is good", (uint8_t *)&v20, 2u);
    }
  }
  else
  {
    if (v2 == 2)
    {
      if (qword_100326790 != -1) {
        dispatch_once(&qword_100326790, &stru_1002BA230);
      }
      id v13 = (void *)qword_100326798;
      if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
      {
        long long v14 = *(void **)(a1 + 32);
        long long v15 = v13;
        id v16 = [v14 deps];
        long long v17 = [v16 stateMonitor];
        int v18 = [v17 ktStatus];
        CFStringRef v19 = [v18 accountKey];
        int v20 = 138412290;
        id v21 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "PCS KT Identity no longer exists, ensure identity: %@", (uint8_t *)&v20, 0xCu);
      }
      id v10 = *(void **)(a1 + 40);
      id v11 = off_1002CAA68;
    }
    else
    {
      if (v2 != 3) {
        return;
      }
      if (qword_100326790 != -1) {
        dispatch_once(&qword_100326790, &stru_1002BA210);
      }
      id v3 = (void *)qword_100326798;
      if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
      {
        id v4 = *(void **)(a1 + 32);
        uint64_t v5 = v3;
        id v6 = [v4 deps];
        id v7 = [v6 stateMonitor];
        uint64_t v8 = [v7 ktStatus];
        id v9 = [v8 accountKey];
        int v20 = 138412290;
        id v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PCS KT Identity changed, asking for new signatures: %@", (uint8_t *)&v20, 0xCu);
      }
      id v10 = *(void **)(a1 + 40);
      id v11 = off_1002CAA38;
    }
    [v10 setFlag:*v11];
  }
}

void sub_100044C90(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100044CD4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100044D18(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100044D5C(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v8 = [WeakRetained checkKTAccountKeyScheduler];
    if (a3 == 0.0)
    {
      if (!v5)
      {
        id v12 = [v7 checkKTSignatureScheduler];
        [v12 trigger];

        goto LABEL_11;
      }
      [v7 inspectErrorForRetryAfter:v5 trigger:v8];
    }
    else
    {
      if (qword_100326790 != -1) {
        dispatch_once(&qword_100326790, &stru_1002BA298);
      }
      id v9 = (void *)qword_100326798;
      if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = v9;
        id v11 = [v8 name];
        int v13 = 138412802;
        long long v14 = v11;
        __int16 v15 = 2048;
        double v16 = a3;
        __int16 v17 = 2112;
        id v18 = v5;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CKKS sync operation asked to retry later, scheduling %@ delay for %.1f seconds: %@", (uint8_t *)&v13, 0x20u);
      }
      [v8 waitUntil:1000000000 * (unint64_t)a3];
    }
    [v8 trigger];
LABEL_11:
  }
}

void sub_100044F04(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100044F48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) deps];
  id v5 = [v4 lockStateTracker];
  id v6 = [*(id *)(a1 + 40) error];
  unsigned int v7 = [v5 isLockedError:v6];

  if (v7)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA2E0);
    }
    uint64_t v8 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_INFO))
    {
      LOWORD(v45) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Device is locked, pending ensure identity on unlock", (uint8_t *)&v45, 2u);
    }
    id v9 = [KTPendingFlag alloc];
    uint64_t v10 = 3;
LABEL_13:
    double v16 = [(KTPendingFlag *)v9 initWithFlag:@"EnsureIdentity" conditions:v10];
    __int16 v17 = [*(id *)(a1 + 32) deps];
    id v18 = [v17 flagHandler];
    [v18 handlePendingFlag:v16];

    CFStringRef v19 = [*(id *)(a1 + 32) deps];
    int v20 = [v19 stateMonitor];
    [v20 setAccountStatus:3];

    [v3 setNextState:@"RetryEnsureAccountIdentity"];
    goto LABEL_14;
  }
  id v11 = [*(id *)(a1 + 32) deps];
  id v12 = [v11 reachabilityTracker];
  int v13 = objc_opt_class();
  long long v14 = [*(id *)(a1 + 40) error];
  LODWORD(v13) = [v13 isNetworkError:v14];

  if (v13)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA300);
    }
    __int16 v15 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_INFO))
    {
      LOWORD(v45) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Device have network issues, pending ensure identity on network", (uint8_t *)&v45, 2u);
    }
    id v9 = [KTPendingFlag alloc];
    uint64_t v10 = 2;
    goto LABEL_13;
  }
  id v21 = [*(id *)(a1 + 40) error];

  if (v21)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA320);
    }
    uint64_t v22 = (void *)qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      long long v23 = *(void **)(a1 + 40);
      long long v24 = v22;
      long long v25 = [v23 error];
      int v45 = 138412290;
      long long v46 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Device have issues %@, triggering retry", (uint8_t *)&v45, 0xCu);
    }
    long long v26 = [*(id *)(a1 + 32) retryEnsureIdentity];
    [v26 trigger];

    long long v27 = [*(id *)(a1 + 32) deps];
    id v28 = [v27 stateMonitor];
    [v28 setAccountStatus:3];

    [v3 setNextState:@"RetryEnsureAccountIdentity"];
    goto LABEL_14;
  }
  if ([*(id *)(a1 + 40) identityCreated])
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA340);
    }
    CFStringRef v29 = (void *)qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
    {
      long long v30 = *(void **)(a1 + 40);
      long long v31 = v29;
      long long v32 = [v30 identity];
      int v45 = 138412290;
      long long v46 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Identity created, make sure we check signatures: %@", (uint8_t *)&v45, 0xCu);
    }
    long long v33 = [[KTPendingFlag alloc] initWithFlag:@"CheckAccountSignatures" conditions:0];
    uint64_t v34 = [*(id *)(a1 + 32) deps];
    CFStringRef v35 = [v34 flagHandler];
    [v35 handlePendingFlag:v33];
  }
  else
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA360);
    }
    __int16 v36 = (void *)qword_100326798;
    if (!os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_INFO)) {
      goto LABEL_32;
    }
    unsigned int v37 = *(void **)(a1 + 40);
    long long v33 = v36;
    uint64_t v34 = [v37 identity];
    int v45 = 138412290;
    long long v46 = v34;
    _os_log_impl((void *)&_mh_execute_header, &v33->super, OS_LOG_TYPE_INFO, "Have identity, all good: %@", (uint8_t *)&v45, 0xCu);
  }

LABEL_32:
  id v38 = [*(id *)(a1 + 40) identity];

  if (v38)
  {
    id v39 = [*(id *)(a1 + 32) deps];
    long long v40 = [v39 stateMonitor];
    long long v41 = [*(id *)(a1 + 40) identity];
    [v40 setKTAccountKey:v41];
  }
  long long v42 = [*(id *)(a1 + 32) deps];
  long long v43 = [v42 stateMonitor];
  [v43 setAccountStatus:4];

  long long v44 = [v3 intendedState];
  [v3 setNextState:v44];

LABEL_14:
}

void sub_100045514(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100045558(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004559C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000455E0(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100045624(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100045668(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [KTCheckIDSRegistrationOperation alloc];
  id v5 = [*(id *)(a1 + 32) deps];
  uint64_t v6 = kKTApplicationIdentifierIDS;
  unsigned int v7 = [*(id *)(a1 + 32) pcsOperation];
  uint64_t v8 = [(KTCheckIDSRegistrationOperation *)v4 initWithDependencies:v5 application:v6 pcs:v7 idsRegistrationInterface:*(void *)(a1 + 32)];

  int v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472;
  __int16 v15 = sub_1000457F0;
  double v16 = &unk_1002B7D58;
  uint64_t v17 = *(void *)(a1 + 32);
  id v18 = v8;
  id v9 = v8;
  uint64_t v10 = +[KTResultOperation named:@"ids-reg-finish" withBlock:&v13];
  [v10 addNullableDependency:v9, v13, v14, v15, v16, v17];
  [v3 dependOnBeforeGroupFinished:v10];

  [*(id *)(a1 + 32) setLastCheckIDSRegistration:v9];
  id v11 = [*(id *)(a1 + 32) operationQueue];
  [v11 addOperation:v9];

  id v12 = [*(id *)(a1 + 32) operationQueue];
  [v12 addOperation:v10];
}

void sub_1000457F0(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) deps];
  id v3 = [v2 logger];
  id v4 = [*(id *)(a1 + 40) error];
  [v3 logResultForEvent:@"CheckIDSRegistration" hardFailure:0 result:v4];

  id v5 = [*(id *)(a1 + 40) error];

  if (v5)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA380);
    }
    uint64_t v6 = (void *)qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      unsigned int v7 = *(void **)(a1 + 40);
      uint64_t v8 = v6;
      id v9 = [v7 error];
      int v10 = 138543362;
      id v11 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CheckIDSRegistrationOperation failed, trying again: %{public}@", (uint8_t *)&v10, 0xCu);
    }
  }
}

void sub_10004594C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100045990(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = [WeakRetained deps];
  unsigned int v7 = [v6 staticKeyStore];
  uint64_t v8 = +[NSDate date];
  id v9 = [WeakRetained deps];
  int v10 = [v9 dew];
  [v10 coreDataInitialDelaySync];
  [v7 launchCloudSyncing:v8];

  id v11 = [WeakRetained deps];
  uint64_t v12 = [v11 ckdatabase];
  if (v12)
  {
    int v13 = (void *)v12;
    uint64_t v14 = [WeakRetained deps];
    __int16 v15 = [v14 cloudRecords];

    if (v15)
    {
      double v16 = [WeakRetained deps];
      uint64_t v17 = [v16 cloudRecords];
      id v18 = [v17 cloudKitZones];

      if ([v18 count])
      {
        uint64_t v34 = [_TtC13transparencyd11KTZoneSetup alloc];
        CFStringRef v35 = [WeakRetained deps];
        long long v33 = [v35 ckdatabase];
        CFStringRef v19 = [WeakRetained deps];
        [v19 logger];
        int v20 = v36 = v3;
        id v21 = [WeakRetained deps];
        uint64_t v22 = [v21 dataStore];
        long long v23 = [v22 controller];
        long long v24 = [v23 backgroundContext];
        long long v25 = [(KTZoneSetup *)v34 initWithCkdatabase:v33 analytics:v20 context:v24 zoneCreate:v18];

        id v3 = v36;
      }
      else
      {
        long long v25 = 0;
      }
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      void v37[2] = sub_100045DB8;
      v37[3] = &unk_1002BA410;
      objc_copyWeak(&v41, v4);
      long long v27 = v25;
      id v38 = v27;
      id v28 = v3;
      id v39 = v28;
      id v29 = v18;
      id v40 = v29;
      long long v30 = +[NSBlockOperation blockOperationWithBlock:v37];
      [v28 dependOnBeforeGroupFinished:v30];
      [v30 addNullableDependency:v27];
      if (v27)
      {
        long long v31 = [WeakRetained operationQueue];
        [v31 addOperation:v27];
      }
      long long v32 = [WeakRetained operationQueue];
      [v32 addOperation:v30];

      objc_destroyWeak(&v41);
      goto LABEL_15;
    }
  }
  else
  {
  }
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002BA3C8);
  }
  long long v26 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "zone setup have no cloudRecords", buf, 2u);
  }
  [v3 setNextState:@"InitialSignRegistrationData"];
LABEL_15:
}

void sub_100045D5C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100045D74(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100045DB8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if ([*(id *)(a1 + 32) initialFetch])
  {
    [*(id *)(a1 + 40) setNextState:@"ProcessIncomingInitial"];
    id v3 = [WeakRetained launch];
    [v3 setFirstLaunch:1];
  }
  else
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA3E8);
    }
    id v4 = (void *)qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = *(void **)(a1 + 48);
      uint64_t v6 = v4;
      v12[0] = 67109120;
      v12[1] = [v5 count];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "already done initial fetch: %d", (uint8_t *)v12, 8u);
    }
    [*(id *)(a1 + 40) setNextState:@"InitialSignRegistrationData"];
  }
  unsigned int v7 = [WeakRetained deps];
  uint64_t v8 = [v7 cloudRecords];
  unsigned int v9 = [v8 havePendingRecords];

  if (v9)
  {
    int v10 = [[KTPendingFlag alloc] initWithFlag:@"CloudKitOutgoing" conditions:2 delayInSeconds:5.0];
    id v11 = [WeakRetained stateMachine];
    [v11 handlePendingFlag:v10];
  }
}

void sub_100045F7C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100045FC0(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [*(id *)(a1 + 32) error];

  if (v3)
  {
    id v4 = *(void **)(a1 + 40);
    id v5 = [*(id *)(a1 + 32) error];
    uint64_t v6 = [*(id *)(a1 + 40) ckFetchScheduler];
    [v4 inspectErrorForRetryAfter:v5 trigger:v6];
  }
  else
  {
    id v5 = [v7 intendedState];
    [v7 setNextState:v5];
  }
}

void sub_10004607C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) newCKFetch:@"stateTransition"];
}

void sub_1000460B0(uint64_t a1, void *a2)
{
  id v50 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v4 = kKTApplicationIdentifierIDS;
  id v5 = [KTEnsureAccountIdentityOperation alloc];
  uint64_t v6 = [WeakRetained deps];
  id v7 = [WeakRetained pcsOperation];
  uint64_t v8 = [(KTEnsureAccountIdentityOperation *)v5 initWithDependencies:v6 pcsOperation:v7];

  v59[0] = _NSConcreteStackBlock;
  v59[1] = 3221225472;
  v59[2] = sub_1000466A8;
  v59[3] = &unk_1002B7D58;
  unsigned int v9 = v8;
  long long v60 = v9;
  id v61 = WeakRetained;
  int v10 = +[NSBlockOperation blockOperationWithBlock:v59];
  uint64_t v52 = v9;
  [v10 addNullableDependency:v9];
  id v11 = [KTEnrollmentRegistrationSignature alloc];
  uint64_t v12 = [WeakRetained deps];
  int v13 = [(KTEnrollmentRegistrationSignature *)v11 initWithDependencies:v12 forceUpdate:0 intendedState:@"Ready" errorState:@"Ready" idsRegistrationInterface:WeakRetained signatureTracker:WeakRetained];

  uint64_t v14 = v13;
  long long v48 = v10;
  [(KTEnrollmentRegistrationSignature *)v13 addNullableDependency:v10];
  __int16 v15 = +[NSSet setWithObject:off_10031E570];
  double v16 = [WeakRetained requestSuccessfulCKFetchForManyReasons:v15];

  if (v16)
  {
    uint64_t v17 = [WeakRetained deps];
    id v18 = [v17 dew];
    [v18 selfValidateCloudKitTimeout];
    double v20 = v19;

    id v21 = +[KTResultOperation operationWithBlock:&stru_1002BA458];
    id v22 = [v21 timeout:(unint64_t)(v20 * 1000000000.0)];
    [v21 addNullableDependency:v16];
  }
  else
  {
    id v21 = 0;
  }
  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472;
  v56[2] = sub_100046724;
  v56[3] = &unk_1002B7D58;
  id v23 = v21;
  id v57 = v23;
  id v58 = v16;
  id v49 = v16;
  long long v24 = +[NSBlockOperation blockOperationWithBlock:v56];
  long long v25 = v24;
  if (v24) {
    [v24 addNullableDependency:v23];
  }
  long long v26 = [KTFetchIDSSelfOperation alloc];
  long long v27 = [WeakRetained deps];
  id v28 = v4;
  id v29 = [(KTFetchIDSSelfOperation *)v26 initWithApplication:v4 dependencies:v27 intendedState:@"Ready" errorState:@"Ready"];

  [(KTFetchIDSSelfOperation *)v29 addNullableDependency:v14];
  [(KTFetchIDSSelfOperation *)v29 addNullableDependency:v23];
  long long v30 = [KTFetchKTSelfOperation alloc];
  long long v31 = [WeakRetained deps];
  unsigned int v47 = v28;
  long long v32 = [(KTFetchKTSelfOperation *)v30 initWithApplication:v28 dependencies:v31 intendedState:@"Ready" errorState:@"Ready"];

  [(KTFetchKTSelfOperation *)v32 addNullableDependency:v14];
  [(KTFetchKTSelfOperation *)v32 addNullableDependency:v23];
  [(KTResultOperation *)v32 addSuccessDependency:v29];
  long long v33 = [KTValidateSelfOperation alloc];
  uint64_t v34 = [WeakRetained deps];
  CFStringRef v35 = [(KTValidateSelfOperation *)v33 initWithApplication:v28 dependencies:v34 isOptInSelfValidation:0];

  [(KTValidateSelfOperation *)v35 addNullableDependency:v23];
  [(KTResultOperation *)v35 addSuccessDependency:v32];
  [(KTResultOperation *)v35 addSuccessDependency:v29];
  [WeakRetained setLastValidateSelf:v35];
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472;
  v53[2] = sub_1000469E4;
  v53[3] = &unk_1002B7D58;
  id v54 = v50;
  id v55 = v35;
  id v36 = v35;
  id v51 = v50;
  unsigned int v37 = +[NSBlockOperation named:@"validate-self-finish" withBlock:v53];
  [v37 addNullableDependency:v36];
  [v51 dependOnBeforeGroupFinished:v37];
  id v38 = [WeakRetained operationQueue];
  [v38 addOperation:v23];

  id v39 = [WeakRetained operationQueue];
  [v39 addOperation:v25];

  id v40 = [WeakRetained operationQueue];
  [v40 addOperation:v52];

  id v41 = [WeakRetained operationQueue];
  [v41 addOperation:v48];

  long long v42 = [WeakRetained operationQueue];
  [v42 addOperation:v14];

  long long v43 = [WeakRetained operationQueue];
  [v43 addOperation:v32];

  long long v44 = [WeakRetained operationQueue];
  [v44 addOperation:v29];

  int v45 = [WeakRetained operationQueue];
  [v45 addOperation:v36];

  long long v46 = [WeakRetained operationQueue];
  [v46 addOperation:v37];
}

void sub_1000466A8(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) error];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 40) retryEnsureIdentity];
    [v3 trigger];
  }
}

void sub_100046724(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isCancelled])
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA478);
    }
    uint64_t v2 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      id v3 = *(void **)(a1 + 40);
      int v14 = 138543362;
      __int16 v15 = v3;
      id v4 = "CloudKit fetch timed out: %{public}@";
      id v5 = v2;
      os_log_type_t v6 = OS_LOG_TYPE_ERROR;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v4, (uint8_t *)&v14, 0xCu);
    }
  }
  else
  {
    id v7 = [*(id *)(a1 + 40) error];

    if (v7)
    {
      if (qword_100326790 != -1) {
        dispatch_once(&qword_100326790, &stru_1002BA498);
      }
      uint64_t v8 = (void *)qword_100326798;
      if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
      {
        unsigned int v9 = *(void **)(a1 + 40);
        int v10 = v8;
        id v11 = [v9 error];
        int v14 = 138543362;
        __int16 v15 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CloudKit fetch failed: %{public}@", (uint8_t *)&v14, 0xCu);
      }
    }
    else
    {
      if (qword_100326790 != -1) {
        dispatch_once(&qword_100326790, &stru_1002BA4B8);
      }
      uint64_t v12 = qword_100326798;
      if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(void **)(a1 + 40);
        int v14 = 138412290;
        __int16 v15 = v13;
        id v4 = "CloudKit fetch complete: %@{public}";
        id v5 = v12;
        os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_15;
      }
    }
  }
}

void sub_100046918(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004695C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000469A0(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000469E4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 40) error];
  [*(id *)(a1 + 32) setError:v2];

  id v3 = [*(id *)(a1 + 32) intendedState];
  [*(id *)(a1 + 32) setNextState:v3];
}

void sub_100046A5C(uint64_t a1, void *a2)
{
  id v41 = a2;
  id v3 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = [WeakRetained optInStates];
  long long v42 = [v5 currentTarget];

  os_log_type_t v6 = [WeakRetained optInStates];
  id v7 = [v6 targetOptInStates];
  uint64_t v8 = [v7 objectForKeyedSubscript:v42];

  if (v8)
  {
    unsigned int v9 = [_TtC13transparencyd28KTFetchCloudStorageOperation alloc];
    int v10 = [WeakRetained deps];
    id v11 = [WeakRetained deps];
    uint64_t v12 = [v11 dataStore];
    int v13 = [v12 controller];
    int v14 = [v13 backgroundContext];
    id v40 = [(KTFetchCloudStorageOperation *)v9 initWithDeps:v10 initialFetch:0 userInteractive:1 reason:@"optIn" context:v14];

    __int16 v15 = [KTCheckIDSRegistrationOperation alloc];
    double v16 = [WeakRetained deps];
    uint64_t v17 = [WeakRetained pcsOperation];
    uint64_t v18 = kKTApplicationIdentifierIDS;
    double v19 = [(KTCheckIDSRegistrationOperation *)v15 initWithDependencies:v16 application:kKTApplicationIdentifierIDS pcs:v17 idsRegistrationInterface:WeakRetained];

    double v20 = [KTFetchIDSSelfOperation alloc];
    id v21 = [WeakRetained deps];
    id v22 = [(KTFetchIDSSelfOperation *)v20 initWithApplication:v18 dependencies:v21 intendedState:@"Ready" errorState:@"Ready"];

    id v23 = [KTFetchKTSelfOperation alloc];
    long long v24 = [WeakRetained deps];
    long long v25 = [(KTFetchKTSelfOperation *)v23 initWithApplication:v18 dependencies:v24 intendedState:@"Ready" errorState:@"Ready"];

    long long v26 = [KTValidateSelfOperation alloc];
    long long v27 = [WeakRetained deps];
    id v28 = [(KTValidateSelfOperation *)v26 initWithApplication:v18 dependencies:v27 isOptInSelfValidation:1];

    [(KTResultOperation *)v25 addSuccessDependency:v22];
    [(KTValidateSelfOperation *)v28 addNullableDependency:v40];
    [(KTResultOperation *)v28 addSuccessDependency:v25];
    [(KTResultOperation *)v28 addSuccessDependency:v22];
    [WeakRetained setLastValidateSelfOptIn:v28];
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    v43[2] = sub_100046FFC;
    v43[3] = &unk_1002BA520;
    objc_copyWeak(&v49, v3);
    id v29 = v28;
    long long v44 = v29;
    id v45 = v8;
    id v30 = v41;
    id v46 = v30;
    long long v31 = v19;
    unsigned int v47 = v31;
    id v48 = v42;
    long long v32 = +[KTResultOperation operationWithBlock:v43];
    [v32 addNullableDependency:v29];
    [v32 addNullableDependency:v31];
    [v30 dependOnBeforeGroupFinished:v32];
    long long v33 = [WeakRetained operationQueue];
    [v33 addOperation:v40];

    uint64_t v34 = [WeakRetained operationQueue];
    [v34 addOperation:v31];

    CFStringRef v35 = [WeakRetained operationQueue];
    [v35 addOperation:v25];

    id v36 = [WeakRetained operationQueue];
    [v36 addOperation:v22];

    unsigned int v37 = [WeakRetained operationQueue];
    [v37 addOperation:v29];

    id v38 = [WeakRetained operationQueue];
    [v38 addOperation:v32];

    objc_destroyWeak(&v49);
  }
  else
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA4D8);
    }
    id v39 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v51 = v42;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Warning: no target application available: %@", buf, 0xCu);
    }
    id v22 = [WeakRetained optInStates];
    [(KTFetchIDSSelfOperation *)v22 setCurrentTarget:0];
  }
}

void sub_100046F98(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100046FB8(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100046FFC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  id v3 = [*(id *)(a1 + 32) error];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) error];
    [*(id *)(a1 + 40) setError:v4];

    id v5 = [*(id *)(a1 + 32) error];
    [*(id *)(a1 + 48) setError:v5];

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100047244;
    v14[3] = &unk_1002B9FE8;
    os_log_type_t v6 = *(void **)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    [v6 handleOperationResults:v14];
    id v7 = [WeakRetained optInStates];
    [v7 completedCurrentTarget];
  }
  else if ([*(id *)(a1 + 56) checkIDSResult] == (id)1)
  {
    uint64_t v8 = [*(id *)(a1 + 48) intendedState];
    [*(id *)(a1 + 48) setNextState:v8];
  }
  else
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA4F8);
    }
    unsigned int v9 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138412290;
      uint64_t v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "IDS have not completed KT registration: %@", buf, 0xCu);
    }
    id v11 = [*(id *)(a1 + 56) error];
    [*(id *)(a1 + 40) setError:v11];

    uint64_t v12 = [*(id *)(a1 + 56) error];
    [*(id *)(a1 + 48) setError:v12];

    int v13 = [WeakRetained optInStates];
    [v13 completedCurrentTarget];
  }
}

id sub_100047244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) setLoggableData:a4];
}

void sub_100047250(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100047294(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 error];

  if (!v5)
  {
    os_log_type_t v6 = [[KTPendingFlag alloc] initWithFlag:@"PokeIDS" conditions:2 delayInSeconds:0.0];
    id v7 = [*(id *)(a1 + 40) stateMachine];
    [v7 handlePendingFlag:v6];
  }
  id v8 = [v4 intendedState];
  [v4 setNextState:v8];
}

void sub_100047364(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  os_log_type_t v6 = [WeakRetained deps];
  id v7 = [v6 publicKeyStore];
  [v7 clearForEnvironmentChange];

  id v8 = +[KTResultOperation named:@"reset-configure-client" withBlock:&stru_1002BA540];
  unsigned int v9 = [WeakRetained deps];
  uint64_t v10 = [v9 dew];
  [v10 resetEnvLogClientNetworkTimeout];
  id v12 = [v8 timeout:(unint64_t)(v11 * 1000000000.0)];

  [v3 dependOnBeforeGroupFinished:v8];
  int v13 = [WeakRetained deps];
  int v14 = [v13 logClient];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10004751C;
  v16[3] = &unk_1002BA588;
  objc_copyWeak(&v18, v4);
  id v15 = v8;
  id v17 = v15;
  [v14 configure:v16];

  objc_destroyWeak(&v18);
}

void sub_100047504(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10004751C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002BA560);
  }
  id v5 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543362;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "environment switch log client: %{public}@", (uint8_t *)&v7, 0xCu);
  }
  [*(id *)(a1 + 32) setError:v3];
  os_log_type_t v6 = [WeakRetained operationQueue];
  [v6 addOperation:*(void *)(a1 + 32)];
}

void sub_100047630(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100047674(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 deps];
  os_log_type_t v6 = [v5 accountKeyService];
  [v6 clearCachedPCSIdentities];

  int v7 = [*(id *)(a1 + 32) deps];
  id v8 = [v7 accountStateHolder];
  [v8 clearAccountMetadata];

  unsigned int v9 = [*(id *)(a1 + 32) deps];
  uint64_t v10 = [v9 smDataStore];
  id v27 = 0;
  unsigned __int8 v11 = [v10 clearDataStore:&v27];
  id v12 = v27;

  if ((v11 & 1) == 0)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA5A8);
    }
    int v13 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v29 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "dataStore clearDataStore failed: %@", buf, 0xCu);
    }
  }
  int v14 = [*(id *)(a1 + 32) deps];
  id v15 = [v14 dataStore];
  id v26 = 0;
  unsigned __int8 v16 = [v15 clearState:&v26];
  id v17 = v26;

  if ((v16 & 1) == 0)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA5C8);
    }
    id v18 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v29 = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "dataStore clearState failed: %@", buf, 0xCu);
    }
  }
  double v19 = [*(id *)(a1 + 32) deps];
  double v20 = [v19 cloudRecords];
  [v20 clearDataStore:0];

  [*(id *)(a1 + 32) resetLastAccountOperations];
  [*(id *)(a1 + 32) clearAccountMetrics];
  id v21 = [*(id *)(a1 + 32) deps];
  id v22 = [v21 stateMonitor];
  [v22 reset];

  [*(id *)(a1 + 32) setSpecificUser:0];
  [*(id *)(a1 + 32) setPcsOperation:0];
  [*(id *)(a1 + 32) clearAllFollowups:@"reset-local-state"];
  id v23 = [*(id *)(a1 + 32) deps];
  long long v24 = [v23 stateMonitor];
  [v24 setPendingChanges:1];

  long long v25 = [v4 intendedState];
  [v4 setNextState:v25];
}

void sub_100047990(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000479D4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100047A18(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 deps];
  os_log_type_t v6 = [v5 cloudRecords];
  [v6 clearLocalCloudState];

  int v7 = [*(id *)(a1 + 32) deps];
  id v8 = [v7 cloudRecords];
  [v8 clearDataStore:1];

  id v9 = [v4 intendedState];
  [v4 setNextState:v9];
}

void sub_100047ADC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 pokeIDS];
  [v4 trigger];

  id v5 = [v3 intendedState];
  [v3 setNextState:v5];
}

id sub_100047BE0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueMaybeCreateNewServerOptInFetch];
}

void sub_100047D78(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100048040(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000480D0;
  block[3] = &unk_1002B6CF8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v2, block);
}

id sub_1000480D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setCurrentServerOptInFetch:0];
}

void sub_100048324(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100048368(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) serverOptInFetchReasons];
  [v2 unionSet:*(void *)(a1 + 40)];

  if (*(double *)(a1 + 48) > 0.0)
  {
    id v3 = [*(id *)(a1 + 32) serverOptInScheduler];
    [v3 waitUntil:(unint64_t)(*(double *)(a1 + 48) * 1000000000.0)];
  }
  id v4 = [*(id *)(a1 + 32) serverOptInScheduler];
  [v4 trigger];
}

void sub_1000484DC(id a1, KTBAAKey *a2)
{
  uint64_t v2 = a2;
  id v3 = [(KTBAAKey *)v2 error];

  if (v3)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA668);
    }
    id v4 = (void *)qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      id v5 = v4;
      os_log_type_t v6 = [(KTBAAKey *)v2 error];
      int v7 = 138412290;
      id v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error fetching BAA cert from triggerBAACertFetcher: %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_1000485E8(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000486A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA688);
    }
    int v7 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error getting opt in state to post a followup CFU after receiving IDS disable notification: %@", buf, 0xCu);
    }
  }
  id v8 = [*(id *)(a1 + 32) deps];
  id v9 = [v8 followup];
  uint64_t v10 = kKTApplicationIdentifierIDS;
  unsigned __int8 v11 = +[NSUUID UUID];
  id v12 = [*(id *)(a1 + 32) deps];
  int v13 = [v12 idsConfigBag];
  int v14 = [v13 kbInfoArticleUrl];
  [v9 postFollowup:v10 type:6 eventId:v11 errorCode:-390 optInState:v5 infoLink:v14 additionalInfo:0 error:0];
}

void sub_10004884C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100048938(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSMutableArray);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = v3;
  id v5 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v22;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        if (*(unsigned char *)(a1 + 40))
        {
          id v10 = objc_alloc((Class)KTVerifierResult);
          unsigned __int8 v11 = [v9 uri];
          id v12 = [v9 application];
          id v13 = [v10 initWithUri:v11 application:v12];

          [v13 setUiStatus:3];
        }
        else
        {
          int v14 = [*(id *)(a1 + 32) deps];
          id v15 = [v14 dataStore];
          id v16 = [v9 uri];
          id v17 = [v9 application];
          id v13 = [v15 verifierResultForPeer:v16 application:v17];
        }
        [v4 addObject:v13];
      }
      id v6 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v6);
  }

  id v18 = [*(id *)(a1 + 32) deps];
  double v19 = [v18 idsOperations];
  [v19 peerVerificationFinishedWithResults:v4];
}

void sub_100048C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100048C6C(uint64_t a1, void *a2)
{
  id v153 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!_os_feature_enabled_impl()) {
    goto LABEL_10;
  }
  if (![WeakRetained isKTDisabled])
  {
    id v10 = [WeakRetained deps];
    unsigned __int8 v11 = [v10 stateMonitor];
    [v11 setSystemStatus:0];

    id v12 = [WeakRetained deps];
    id v13 = [v12 stateMonitor];
    [v13 setAccountStatus:4];

    [WeakRetained updateKTDisabledForIDS:0];
    int v14 = [WeakRetained deps];
    id v15 = [v14 followup];
    id v167 = 0;
    [v15 clearFollowupsByType:kKTApplicationIdentifierIDS type:6 error:&v167];
    id v16 = v167;

    if (v16)
    {
      if (qword_100326790 != -1) {
        dispatch_once(&qword_100326790, &stru_1002BA6F8);
      }
      id v17 = qword_100326798;
      if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)v169 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Error clearing IDS disable CFU %@", buf, 0xCu);
      }
    }

LABEL_10:
    id v18 = [WeakRetained initializedComplete];
    [v18 fulfill];

    double v19 = [WeakRetained deps];
    double v20 = [v19 lockStateTracker];
    unsigned __int8 v21 = [v20 hasBeenUnlocked];

    if ((v21 & 1) == 0)
    {
      id v9 = off_1002CA9D8;
      goto LABEL_16;
    }
    long long v22 = [WeakRetained statusReporting];

    if (!v22)
    {
      long long v23 = [WeakRetained deps];
      long long v24 = [v23 eligibilitySupport];
      id v166 = 0;
      long long v25 = [v24 eligibilityContainerPathAndReturnError:&v166];
      id v26 = v166;

      if (!v25 || v26)
      {
        if (qword_100326790 != -1) {
          dispatch_once(&qword_100326790, &stru_1002BA718);
        }
        long long v33 = qword_100326798;
        if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)v169 = v26;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Error initializing eligibility status reporter %@", buf, 0xCu);
        }
      }
      else
      {
        id v27 = [_TtC13transparencyd28KTEligibilityStatusReporting alloc];
        id v28 = [WeakRetained deps];
        id v29 = [v28 idsReporting];
        id v30 = [WeakRetained deps];
        long long v31 = [v30 eligibilitySupport];
        id v165 = 0;
        long long v32 = [(KTEligibilityStatusReporting *)v27 initWithPath:v25 idsReporting:v29 eligibilitySupport:v31 error:&v165];
        id v26 = v165;
        [WeakRetained setStatusReporting:v32];
      }
    }
    uint64_t v34 = [WeakRetained deps];
    CFStringRef v35 = [v34 accountOperations];
    id v164 = 0;
    id v36 = [v35 primaryAccount:&v164];
    id v37 = v164;

    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA738);
    }
    id v38 = (void *)qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
    {
      if (v36) {
        CFStringRef v39 = @"yes";
      }
      else {
        CFStringRef v39 = @"no";
      }
      id v40 = v38;
      id v41 = [v36 aa_personID];
      long long v42 = [v36 aa_altDSID];
      *(_DWORD *)buf = 138544130;
      *(void *)v169 = v39;
      *(_WORD *)&v169[8] = 2112;
      *(void *)&v169[10] = v41;
      __int16 v170 = 2112;
      v171 = v42;
      __int16 v172 = 2112;
      id v173 = v37;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "TransparencyAccount Primary account found %{public}@ %@ %@: %@", buf, 0x2Au);
    }
    if (v36)
    {
      long long v43 = [WeakRetained deps];
      long long v44 = [v43 accountOperations];
      id v45 = [WeakRetained deps];
      id v46 = [v45 idsAccountTracker];
      id v163 = v37;
      unsigned int v47 = (char *)[v44 ktAccountStatus:v36 idsAccountsTracker:v46 error:&v163];
      id v152 = v163;

      id v48 = [WeakRetained deps];
      id v49 = [v48 stateMonitor];
      id v50 = [WeakRetained deps];
      id v51 = [v50 idsAccountTracker];
      [v49 setIDSAccountStatus:[v51 idsAccountType]];

      if ((unint64_t)(v47 - 1) < 2)
      {
        if (qword_100326790 != -1) {
          dispatch_once(&qword_100326790, &stru_1002BA7B8);
        }
        id v52 = v152;
        long long v53 = qword_100326798;
        if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)v169 = v47;
          *(_WORD *)&v169[4] = 2112;
          *(void *)&v169[6] = v152;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "TransparencyAccount no account: %d: %@", buf, 0x12u);
        }
        id v54 = [WeakRetained deps];
        id v55 = [v54 stateMonitor];
        [v55 setAccountStatus:5];

        [v153 setNextState:@"NoAccount"];
        goto LABEL_139;
      }
      if (v47 == (char *)3)
      {
        long long v60 = [WeakRetained deps];
        id v61 = [v60 stateMonitor];
        [v61 setAccountStatus:5];

        [WeakRetained newServerOptInFetch:@"noCloudKitAccount"];
        [v153 setNextState:@"NoAccount"];
        id v37 = v152;
LABEL_140:

        goto LABEL_141;
      }
      id v72 = [v36 aa_altDSID];
      if (!v72)
      {
        if (qword_100326790 != -1) {
          dispatch_once(&qword_100326790, &stru_1002BA7D8);
        }
        id v52 = v152;
        v124 = qword_100326798;
        if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_ERROR, "TransparencyAccount no altDSID", buf, 2u);
        }
        v125 = [WeakRetained deps];
        v126 = [v125 stateMonitor];
        [v126 setAccountStatus:5];

        [v153 setNextState:@"NoAccount"];
        goto LABEL_138;
      }
      id v73 = [WeakRetained deps];
      uint64_t v74 = [v73 settings];
      id v75 = [v74 getEnvironment];

      if (qword_100326790 != -1) {
        dispatch_once(&qword_100326790, &stru_1002BA7F8);
      }
      uint64_t v76 = qword_100326798;
      if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v169 = v75;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Environment at start time: %d", buf, 8u);
      }
      __int16 v77 = [WeakRetained deps];
      id v78 = [v77 settings];
      unsigned int v79 = [v78 systemFailureFeatureEnabled];

      long long v80 = [WeakRetained deps];
      long long v81 = [v80 accountStateHolder];
      long long v82 = [v81 loadAccountMetadata];

      if (v82
        && ([v82 altDSID], long long v83 = objc_claimAutoreleasedReturnValue(), v83, v83))
      {
        long long v84 = [v82 altDSID];
        unsigned __int8 v85 = [v84 isEqual:v72];

        if ((v85 & 1) == 0)
        {
          if (qword_100326790 != -1) {
            dispatch_once(&qword_100326790, &stru_1002BA840);
          }
          id v52 = v152;
          v136 = qword_100326798;
          if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_ERROR, "Account have switch since last load, start over", buf, 2u);
          }
          v137 = off_1002CA950;
LABEL_117:
          [v153 setNextState:*v137];
LABEL_137:

LABEL_138:
LABEL_139:
          id v37 = v52;
          goto LABEL_140;
        }
        if ([v82 environment] != v75)
        {
          if (qword_100326790 != -1) {
            dispatch_once(&qword_100326790, &stru_1002BA860);
          }
          id v52 = v152;
          v142 = qword_100326798;
          if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_ERROR, "Environment switched since last load, starting over", buf, 2u);
          }
          [v153 setNextState:@"EnvironmentSwitch"];
          v132 = [WeakRetained deps];
          v133 = [v132 accountStateHolder];
          v134 = v133;
          v158[0] = _NSConcreteStackBlock;
          v158[1] = 3221225472;
          v158[2] = sub_10004A660;
          v158[3] = &unk_1002BA880;
          v158[4] = v75;
          v135 = v158;
          goto LABEL_123;
        }
        if (v79 != [v82 hasBeenEnabled])
        {
          if (qword_100326790 != -1) {
            dispatch_once(&qword_100326790, &stru_1002BA8A0);
          }
          long long v86 = qword_100326798;
          if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "Feature state changed", buf, 2u);
          }
          long long v87 = [WeakRetained deps];
          long long v88 = [v87 accountStateHolder];
          v156[0] = _NSConcreteStackBlock;
          v156[1] = 3221225472;
          v156[2] = sub_10004A6E8;
          v156[3] = &unk_1002BA8C0;
          char v157 = v79;
          [v88 persistAccountChanges:v156];

          if ((v79 & 1) == 0) {
            [WeakRetained clearAllFollowups:@"clear all CFU since feature is now off"];
          }
        }
      }
      else
      {
        long long v89 = [WeakRetained deps];
        long long v90 = [v89 accountStateHolder];
        v159[0] = _NSConcreteStackBlock;
        v159[1] = 3221225472;
        v159[2] = sub_10004A57C;
        v159[3] = &unk_1002BA820;
        char v162 = v79;
        id v160 = v72;
        id v161 = v75;
        [v90 persistAccountChanges:v159];
      }
      long long v91 = [WeakRetained deps];
      long long v92 = [v91 logClient];
      id v93 = [v92 currentEnvironment];

      if (v93 == v75)
      {
        [WeakRetained addEvent:@"AccountPresent"];
        long long v94 = [[KTActualSpecificUser alloc] initWithACAccount:v36];
        [WeakRetained setSpecificUser:v94];

        long long v95 = [WeakRetained deps];
        id v96 = [[[v95 pcsOperationsClass] alloc];
        uint64_t v97 = [WeakRetained specificUser];
        id v98 = [v96 initWithSpecificUser:v97];
        [WeakRetained setPcsOperation:v98];

        [WeakRetained newServerOptInFetch:@"accountPresent"];
        long long v99 = [WeakRetained deps];
        id v100 = [v99 octagonOperations];
        LOBYTE(v97) = [v100 getCachedOctagonStatus];

        if (v97)
        {
          [WeakRetained storeEligiblilitySuccess:@"octagon"];
          [WeakRetained addEvent:@"OctagonReady"];
          id v101 = [WeakRetained deps];
          v102 = [v101 octagonOperations];
          id v154 = 0;
          unsigned __int8 v103 = [v102 ckksViewReady:@"Manatee" error:&v154];
          id v104 = v154;

          if (v103)
          {
            [WeakRetained addEvent:@"CKKSManateeReady"];
            [WeakRetained storeEligiblilitySuccess:@"ckks"];
            v151 = [WeakRetained accountFirstSeenDate];
            if (!v151)
            {
              v105 = [WeakRetained deps];
              v106 = [v105 logger];
              uint64_t v107 = +[NSDate date];
              [v106 setDateProperty:v107 forKey:off_10031E4E0];
            }
            if (qword_100326790 != -1) {
              dispatch_once(&qword_100326790, &stru_1002BA940);
            }
            v108 = qword_100326798;
            if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_INFO, "initializingOperation: Checking for a cached BAA certificate and triggering a network fetch if cert is missing or expired.", buf, 2u);
            }
            v109 = [WeakRetained deps];
            v110 = [v109 certFetcher];
            [v110 getDeviceCertWithForcedFetch:0 completionHandler:&stru_1002BA960];

            v111 = [WeakRetained deps];
            v112 = [v111 rebootTracker];
            v113 = [v112 getLastRebootTime];

            v114 = [WeakRetained deps];
            v115 = [v114 smDataStore];
            v116 = [v115 getSettingsDate:off_10031E4F0];

            if (!v116
              || v113 != v116
              && ([v113 earlierDate:v116],
                  v117 = objc_claimAutoreleasedReturnValue(),
                  v117,
                  v117 == v116))
            {
              if (qword_100326790 != -1) {
                dispatch_once(&qword_100326790, &stru_1002BA9A0);
              }
              v118 = v113;
              v119 = qword_100326798;
              if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "Device has rebooted since last initializing, fetching CK records", buf, 2u);
              }
              v120 = [[KTPendingFlag alloc] initWithFlag:@"CloudKitIncoming" conditions:2 delayInSeconds:0.0];
              v121 = [WeakRetained stateMachine];
              [v121 handlePendingFlag:v120];

              v122 = [WeakRetained deps];
              v123 = [v122 smDataStore];
              [v123 setSettingsDate:off_10031E4F0 date:v118];

              v113 = v118;
            }
            [v153 setNextState:@"KTStateFixups"];

            id v52 = v152;
            goto LABEL_136;
          }
          if (qword_100326790 != -1) {
            dispatch_once(&qword_100326790, &stru_1002BA920);
          }
          id v52 = v152;
          v143 = qword_100326798;
          if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)v169 = v104;
            _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEFAULT, "TransparencyAccount waiting for Manatee view: %@", buf, 0xCu);
          }
          v144 = [WeakRetained deps];
          v145 = [v144 octagonOperations];
          v146 = (char *)[v145 ckksGetKnownBadState:@"Manatee"];

          if ((unint64_t)v146 < 2)
          {
            v147 = [WeakRetained deps];
            v148 = [v147 stateMonitor];
            v149 = v148;
            uint64_t v150 = 3;
          }
          else if ((unint64_t)(v146 - 2) >= 2)
          {
            if (v146 != (char *)4)
            {
LABEL_135:
              [v153 setNextState:@"WaitForCKKS"];
LABEL_136:

              goto LABEL_137;
            }
            v147 = [WeakRetained deps];
            v148 = [v147 stateMonitor];
            v149 = v148;
            uint64_t v150 = 5;
          }
          else
          {
            v147 = [WeakRetained deps];
            v148 = [v147 stateMonitor];
            v149 = v148;
            uint64_t v150 = 2;
          }
          [v148 setAccountStatus:v150];

          goto LABEL_135;
        }
        if (qword_100326790 != -1) {
          dispatch_once(&qword_100326790, &stru_1002BA900);
        }
        id v52 = v152;
        v138 = qword_100326798;
        if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "TransparencyAccount waiting for Octagon", buf, 2u);
        }
        v139 = [WeakRetained deps];
        v140 = [v139 stateMonitor];
        [v140 setAccountStatus:2];

        v141 = +[TransparencyError errorWithDomain:kTransparencyErrorEligibility code:-395 description:@"octagon status is pending or untrusted"];
        [WeakRetained storeEligiblilityFailure:@"octagon" error:v141];

        v137 = off_1002CA8D8;
        goto LABEL_117;
      }
      if (qword_100326790 != -1) {
        dispatch_once(&qword_100326790, &stru_1002BA8E0);
      }
      id v52 = v152;
      v127 = (void *)qword_100326798;
      if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
      {
        v128 = v127;
        v129 = [WeakRetained deps];
        v130 = [v129 logClient];
        id v131 = [v130 currentEnvironment];
        *(_DWORD *)buf = 134218240;
        *(void *)v169 = v131;
        *(_WORD *)&v169[8] = 2048;
        *(void *)&v169[10] = v75;
        _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_ERROR, "Environment for logClient (%lu) != current environment (%lu). Clearing state & reconfiguring", buf, 0x16u);
      }
      [v153 setNextState:@"EnvironmentSwitch"];
      v132 = [WeakRetained deps];
      v133 = [v132 accountStateHolder];
      v134 = v133;
      v155[0] = _NSConcreteStackBlock;
      v155[1] = 3221225472;
      v155[2] = sub_10004A770;
      v155[3] = &unk_1002BA880;
      v155[4] = v75;
      v135 = v155;
LABEL_123:
      [v133 persistAccountChanges:v135];

      goto LABEL_137;
    }
    uint64_t v56 = [v37 userInfo];
    id v57 = [v56 objectForKeyedSubscript:NSUnderlyingErrorKey];

    if (!+[TransparencyAccount isAccountsErrorRetryable:v37])
    {
      if (!v57) {
        goto LABEL_49;
      }
      long long v59 = [v57 domain];
      if (![v59 isEqual:ACErrorDomain]) {
        goto LABEL_48;
      }
      id v62 = [v57 code];

      if (v62 != (id)10002)
      {
LABEL_49:
        long long v63 = [WeakRetained deps];
        long long v64 = [v63 stateMonitor];
        [v64 setAccountStatus:5];

        long long v65 = [WeakRetained deps];
        long long v66 = [v65 accountStateHolder];
        long long v67 = [v66 loadAccountMetadata];

        if (v67
          && ([v67 altDSID], long long v68 = objc_claimAutoreleasedReturnValue(), v68, v68))
        {
          if (qword_100326790 != -1) {
            dispatch_once(&qword_100326790, &stru_1002BA778);
          }
          long long v69 = qword_100326798;
          if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "User seems to have logged out, cleaning state", buf, 2u);
          }
          uint64_t v70 = off_1002CA950;
        }
        else
        {
          if (qword_100326790 != -1) {
            dispatch_once(&qword_100326790, &stru_1002BA798);
          }
          id v71 = qword_100326798;
          if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Still no account", buf, 2u);
          }
          uint64_t v70 = off_1002CA880;
        }
        [v153 setNextState:*v70];

        goto LABEL_140;
      }
    }
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA758);
    }
    id v58 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "Failed to get primary account due to XPC issue; triggering retry",
        buf,
        2u);
    }
    long long v59 = [WeakRetained retryGetPrimaryAccount];
    [v59 trigger];
LABEL_48:

    goto LABEL_49;
  }
  id v4 = +[TransparencyAnalytics logger];
  [v4 noteEventNamed:@"ktDisabledEvent"];

  id v5 = [WeakRetained deps];
  id v6 = [v5 stateMonitor];
  [v6 setSystemStatus:5];

  uint64_t v7 = [WeakRetained deps];
  id v8 = [v7 stateMonitor];
  [v8 setAccountStatus:6];

  [WeakRetained postKTDisabledFollowup];
  [WeakRetained updateKTDisabledForIDS:1];
  id v9 = off_1002CA9E0;
LABEL_16:
  [v153 setNextState:*v9];
LABEL_141:
}

void sub_10004A318(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A35C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A3A0(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A3E4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A428(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A46C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A4B0(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A4F4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A538(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10004A57C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setAltDSID:*(void *)(a1 + 32)];
  [v3 setHasBeenEnabled:*(unsigned __int8 *)(a1 + 48)];
  [v3 setEnvironment:*(void *)(a1 + 40)];

  return v3;
}

void sub_10004A5D8(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A61C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10004A660(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setEnvironment:*(void *)(a1 + 32)];

  return v3;
}

void sub_10004A6A4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10004A6E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setHasBeenEnabled:*(unsigned __int8 *)(a1 + 32)];

  return v3;
}

void sub_10004A72C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10004A770(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setEnvironment:*(void *)(a1 + 32)];

  return v3;
}

void sub_10004A7B4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A7F8(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A83C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A880(id a1, KTBAAKey *a2)
{
  uint64_t v2 = a2;
  id v3 = [(KTBAAKey *)v2 error];

  if (v3)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BA980);
    }
    id v4 = (void *)qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      id v5 = v4;
      id v6 = [(KTBAAKey *)v2 error];
      int v7 = 138412290;
      id v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error fetching BAA cert from KTStateInitializing: %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_10004A98C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004A9D0(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004AB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004AB28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = [WeakRetained deps];
  id v6 = [v5 accountOperations];
  id v21 = 0;
  int v7 = [v6 primaryAccount:&v21];
  id v8 = v21;

  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002BA9E8);
  }
  id v9 = (void *)qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
  {
    if (v7) {
      CFStringRef v10 = @"yes";
    }
    else {
      CFStringRef v10 = @"no";
    }
    unsigned __int8 v11 = v9;
    id v12 = [v7 aa_personID];
    id v13 = [v7 aa_altDSID];
    *(_DWORD *)buf = 138544130;
    CFStringRef v23 = v10;
    __int16 v24 = 2112;
    long long v25 = v12;
    __int16 v26 = 2112;
    id v27 = v13;
    __int16 v28 = 2112;
    id v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "TransparencyAccount Primary account found %{public}@ %@ %@: %@", buf, 0x2Au);
  }
  if (v7)
  {
    int v14 = [WeakRetained deps];
    id v15 = [v14 accountStateHolder];
    id v16 = [v15 loadAccountMetadata];

    if (v16
      && ([v16 altDSID],
          id v17 = objc_claimAutoreleasedReturnValue(),
          objc_msgSend(v7, "aa_altDSID"),
          id v18 = objc_claimAutoreleasedReturnValue(),
          unsigned __int8 v19 = [v17 isEqual:v18],
          v18,
          v17,
          (v19 & 1) != 0))
    {
      double v20 = [v3 intendedState];
      [v3 setNextState:v20];
    }
    else
    {
      [v3 setNextState:@"ResetLocalState"];
    }
  }
  else
  {
    [v3 setNextState:@"ResetLocalState"];
  }
}

void sub_10004AD9C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

intptr_t sub_10004B120(uint64_t a1)
{
  [*(id *)(a1 + 32) newServerOptInFetch:@"optOutWhenNotEligible"];
  uint64_t v2 = *(NSObject **)(a1 + 40);

  return dispatch_semaphore_signal(v2);
}

void sub_10004B8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004B920(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004B964(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004B9A8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) optInStates];
  id v3 = [v2 targetOptInStates];
  id v4 = [v3 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v4)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    id v7 = [*(id *)(a1 + 32) optInStates];
    id v6 = [v7 targetOptInStates];
    [v6 setObject:v5 forKeyedSubscript:*(void *)(a1 + 40)];
  }
}

void sub_10004BC70(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004BCB4(uint64_t a1)
{
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002BAAB8);
  }
  uint64_t v2 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "IDS registration timeout hit", v7, 2u);
  }
  id v3 = [*(id *)(a1 + 32) timer];
  dispatch_source_cancel(v3);

  id v4 = [*(id *)(a1 + 32) checkIDSTimer];
  dispatch_source_cancel(v4);

  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = +[NSError errorWithDomain:kTransparencyErrorIDSRegistrationTimeout code:-391 userInfo:0];
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
}

void sub_10004BDB8(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004BF2C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v6 = a2;
  id v4 = [v3 timer];
  dispatch_source_cancel(v4);

  uint64_t v5 = [*(id *)(a1 + 32) checkIDSTimer];
  dispatch_source_cancel(v5);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10004C12C(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10004C1BC;
  v2[3] = &unk_1002BAB00;
  v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  [v1 checkIDSHealth:v2];
}

void sub_10004C1BC(uint64_t a1, void *a2)
{
  if ([a2 isEqualToString:@"hsa2upsell"])
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BAAD8);
    }
    id v3 = (void *)qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_INFO))
    {
      id v4 = *(void **)(a1 + 32);
      uint64_t v5 = v3;
      id v6 = [v4 deps];
      id v7 = [v6 idsOperations];
      [v7 sleepTimeBetweenIDSCheckups];
      int v10 = 134217984;
      uint64_t v11 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "_waitForIDSRegistration, unregistered with IDS, will try again in %f seconds", (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    id v9 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v9();
  }
}

void sub_10004C324(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004C598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004C5C0(uint64_t a1, void *a2)
{
  id v9 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v4 = [KTCheckIDSRegistrationOperation alloc];
    uint64_t v5 = [WeakRetained deps];
    uint64_t v6 = kKTApplicationIdentifierIDS;
    id v7 = [WeakRetained pcsOperation];
    uint64_t v8 = [(KTCheckIDSRegistrationOperation *)v4 initWithDependencies:v5 application:v6 pcs:v7 idsRegistrationInterface:*(void *)(a1 + 32)];

    [v9 runBeforeGroupFinished:v8];
  }
}

void sub_10004C698(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BAB48);
    }
    id v4 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "failed to check self validation: %@", buf, 0xCu);
    }
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = +[NSString stringWithFormat:@"timeout: %@", v3];
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = [*(id *)(a1 + 32) reason];
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  }
}

void sub_10004C7E0(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004CDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10004CDE4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10004CE28(uint64_t a1)
{
  return [*(id *)(a1 + 32) setShouldPokeIDSUponSigning:0];
}

void sub_10004CE34(uint64_t a1, void *a2, int a3, int a4, void *a5)
{
  id v34 = a2;
  id v33 = a5;
  uint64_t v49 = 0;
  id v50 = &v49;
  uint64_t v51 = 0x3032000000;
  id v52 = sub_10003CBA0;
  long long v53 = sub_10003CBB0;
  id v54 = 0;
  id v54 = +[NSDate now];
  id v36 = +[NSMutableDictionary dictionary];
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  uint64_t v6 = [v34 allValues];
  id v7 = [v6 countByEnumeratingWithState:&v45 objects:v57 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v46;
    do
    {
      id v9 = 0;
      do
      {
        if (*(void *)v46 != v8) {
          objc_enumerationMutation(v6);
        }
        id v10 = *(void **)(*((void *)&v45 + 1) + 8 * (void)v9);
        uint64_t v11 = [v10 uploadedAt];
        if (v11
          && ([v10 uploadedAt],
              id v12 = objc_claimAutoreleasedReturnValue(),
              BOOL v13 = [v12 compare:v50[5]] == (id)-1,
              v12,
              v11,
              v13))
        {
          int v14 = [v10 application];
          [v36 setValue:v10 forKey:v14];
        }
        else
        {
          if (qword_100326790 != -1) {
            dispatch_once(&qword_100326790, &stru_1002BABB0);
          }
          int v14 = (id)qword_100326798;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            id v15 = [v10 application];
            *(_DWORD *)buf = 138543362;
            uint64_t v56 = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "updateClientData callback: Skipping rdata for application %{public}@ because it has not been uploaded to CloudKit", buf, 0xCu);
          }
        }

        id v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      id v7 = [v6 countByEnumeratingWithState:&v45 objects:v57 count:16];
    }
    while (v7);
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), v36);
  if (a4)
  {
    id v16 = [*(id *)(a1 + 32) deps];
    id v17 = [v16 stateMonitor];
    [v17 setAccountStatus:3];
  }
  id v18 = objc_alloc_init((Class)TransparencyIDSRegistrationResponse);
  if (a3)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BABD0);
    }
    unsigned __int8 v19 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "New keys inserted. Waiting while we try to make signatures.", buf, 2u);
    }
    double v20 = +[TransparencyAnalytics logger];
    id v21 = [*(id *)(a1 + 32) smState];
    [v20 setNumberProperty:v21 forKey:@"stateAtSigFetchStart"];

    long long v22 = objc_alloc_init(KTCondition);
    [*(id *)(a1 + 32) setSignaturesComplete:v22];

    [*(id *)(a1 + 32) triggerKTAccountKeySignature:0.0];
    CFStringRef v23 = [*(id *)(a1 + 32) signaturesComplete];
    [v23 wait:5000000000];

    __int16 v24 = [*(id *)(a1 + 32) signatureQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10004D530;
    block[3] = &unk_1002BAC80;
    long long v25 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    long long v43 = &v49;
    id v26 = v25;
    uint64_t v27 = *(void *)(a1 + 56);
    id v39 = v26;
    uint64_t v44 = v27;
    id v40 = v18;
    id v42 = *(id *)(a1 + 48);
    id v41 = v33;
    dispatch_async(v24, block);
  }
  else
  {
    [*(id *)(a1 + 32) triggerStatusUpdate:kKTApplicationIdentifierIDS];
    __int16 v28 = [*(id *)(a1 + 32) signatureQueue];
    v37[0] = _NSConcreteStackBlock;
    v37[1] = 3221225472;
    void v37[2] = sub_10004DAAC;
    v37[3] = &unk_1002B6CF8;
    void v37[4] = *(void *)(a1 + 32);
    dispatch_async(v28, v37);

    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BACA0);
    }
    id v29 = (id)qword_100326798;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v30 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) count];
      *(_DWORD *)buf = 67109120;
      LODWORD(v56) = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Returning existing signatures: %d. insertedKeys [0]", buf, 8u);
    }

    [v18 setRegistrationData:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }

  _Block_object_dispose(&v49, 8);
}

void sub_10004D470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_10004D4A8(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004D4EC(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004D530(uint64_t a1)
{
  [*(id *)(a1 + 32) setShouldPokeIDSUponSigning:1];
  uint64_t v2 = +[NSDate now];
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002BABF0);
  }
  uint64_t v5 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Trying to fetch signatures again.", buf, 2u);
  }
  uint64_t v6 = [*(id *)(a1 + 40) requests];
  id v7 = [v6 allKeys];

  uint64_t v8 = [*(id *)(a1 + 32) deps];
  id v9 = [v8 smDataStore];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_10004D804;
  v16[3] = &unk_1002BAC38;
  long long v17 = *(_OWORD *)(a1 + 72);
  [v9 fetchDeviceSignature:v7 complete:v16];

  id v10 = +[TransparencyAnalytics logger];
  uint64_t v11 = [*(id *)(a1 + 32) smState];
  [v10 setNumberProperty:v11 forKey:@"stateAtSigFetchEnd"];

  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002BAC58);
  }
  id v12 = (void *)qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v13 = *(void **)(*(void *)(*(void *)(a1 + 80) + 8) + 40);
    int v14 = v12;
    unsigned int v15 = [v13 count];
    *(_DWORD *)buf = 67109120;
    unsigned int v19 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Returning existing signatures: %d. insertedKeys [1]", buf, 8u);
  }
  [*(id *)(a1 + 48) setRegistrationData:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_10004D7C0(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004D804(uint64_t a1, void *a2)
{
  if (a2)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    uint64_t v3 = [a2 allValues];
    id v4 = [v3 countByEnumeratingWithState:&v20 objects:v26 count:16];
    if (v4)
    {
      id v6 = v4;
      uint64_t v7 = *(void *)v21;
      *(void *)&long long v5 = 138543362;
      long long v19 = v5;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v21 != v7) {
            objc_enumerationMutation(v3);
          }
          id v9 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v8);
          uint64_t v10 = [v9 uploadedAt:v19];
          if (v10
            && (uint64_t v11 = (void *)v10,
                [v9 uploadedAt],
                id v12 = objc_claimAutoreleasedReturnValue(),
                id v13 = [v12 compare:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)],
                v12,
                v11,
                v13 == (id)-1))
          {
            long long v17 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
            id v18 = [v9 application];
            [v17 setValue:v9 forKey:v18];
          }
          else
          {
            if (qword_100326790 != -1) {
              dispatch_once(&qword_100326790, &stru_1002BAC10);
            }
            int v14 = (void *)qword_100326798;
            if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v15 = v14;
              id v16 = [v9 application];
              *(_DWORD *)buf = v19;
              long long v25 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "fetchDeviceSignature callback: Skipping rdata for application %{public}@ because it has not been uploaded to CloudKit", buf, 0xCu);
            }
          }
          uint64_t v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v3 countByEnumeratingWithState:&v20 objects:v26 count:16];
      }
      while (v6);
    }
  }
}

void sub_10004DA24(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004DA68(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10004DAAC(uint64_t a1)
{
  return [*(id *)(a1 + 32) setShouldPokeIDSUponSigning:1];
}

void sub_10004DAB8(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004DBC4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    id v3 = objc_alloc_init((Class)TransparencyIDSRegistrationResponse);
    [v3 setRegistrationData:v4];
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

id sub_10004DD84(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else {
    return [*(id *)(a1 + 32) transparencyDumpKTRegistrationData:*(void *)(a1 + 40)];
  }
}

void sub_10004E6A4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004EA68(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002BAD48);
  }
  id v3 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    long long v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "cloud-data-reset: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10004EB38(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004EC70(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004EE14(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004F06C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004F0B0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002BADE8);
  }
  id v3 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    long long v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "ids-server-bag-update: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_10004F180(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004F1C4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004F44C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004F490(id a1, BOOL a2, NSError *a3)
{
  int v4 = a3;
  if (v4 || !a2)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BAE88);
    }
    long long v5 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138543362;
      uint64_t v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Did not store eligiblity result, error %{public}@", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_10004F56C(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004F6DC(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004F720(id a1, BOOL a2, NSError *a3)
{
  int v4 = a3;
  if (v4 || !a2)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BAEE8);
    }
    long long v5 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138543362;
      uint64_t v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Did not store eligiblity result, error  %{public}@", (uint8_t *)&v6, 0xCu);
    }
  }
}

void sub_10004F7FC(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004F9F4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004FA38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v7 = +[NSDate now];
  uint64_t v8 = [v5 lastReport];
  [v7 timeIntervalSinceDate:v8];
  double v10 = v9;
  [v5 timeBetweenReports];
  double v12 = v11;

  if (v10 < v12)
  {
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BAF28);
    }
    id v13 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Last eligibility report was too recent, skipping report", buf, 2u);
    }
    uint64_t v14 = *(void *)(a1 + 40);
    unsigned int v15 = +[TransparencyError errorWithDomain:@"transparencyd.KTEligibilityError" code:10 description:@"Last eligibility report was too recent, skipping report"];
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0, v15);
  }
  else
  {
LABEL_8:
    id v16 = [*(id *)(a1 + 32) statusReporting];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10004FC5C;
    v18[3] = &unk_1002BAFD8;
    long long v17 = *(void **)(a1 + 40);
    v18[4] = *(void *)(a1 + 32);
    id v19 = v17;
    [v16 iCloudAnalyticsEnabledWithCompletionHandler:v18];
  }
}

void sub_10004FC18(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004FC5C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2)
  {
    uint64_t v7 = [*(id *)(a1 + 32) statusReporting];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10004FE6C;
    v10[3] = &unk_1002BAF70;
    id v11 = *(id *)(a1 + 40);
    [v7 reportWithCompletionHandler:v10];
  }
  else
  {
    if (v5)
    {
      if (qword_100326790 != -1) {
        dispatch_once(&qword_100326790, &stru_1002BAF90);
      }
      uint64_t v8 = qword_100326798;
      if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "iCloudAnalytics error %@", buf, 0xCu);
      }
    }
    else
    {
      id v6 = +[TransparencyError errorWithDomain:@"transparencyd.KTEligibilityError" code:8 description:@"iCloudAnalytics not enabled"];
    }
    if (qword_100326790 != -1) {
      dispatch_once(&qword_100326790, &stru_1002BAFB0);
    }
    double v9 = qword_100326798;
    if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "iCloudAnalytics not enabled, not reporting eligibility", buf, 2u);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10004FE6C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (qword_100326790 != -1) {
    dispatch_once(&qword_100326790, &stru_1002BAF48);
  }
  id v6 = qword_100326798;
  if (os_log_type_enabled((os_log_t)qword_100326798, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109120;
    v7[1] = a2 == 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "KT Eligibility IDS recommendation %d", (uint8_t *)v7, 8u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10004FF70(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004FFB4(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10004FFF8(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100050204(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_100050248(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100050374(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100050498(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1000505CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000507FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100050820(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100050864(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = [WeakRetained statusReporting];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100050918;
  v5[3] = &unk_1002BB0B0;
  id v4 = *(id *)(a1 + 32);
  void v5[4] = WeakRetained;
  id v6 = v4;
  [v3 reportWithCompletionHandler:v5];
}

void sub_100050918(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2 == 0);
  id v3 = [*(id *)(a1 + 32) statusReporting];
  [v3 clearReportOverridesWithCompletionHandler:&stru_1002BB088];
}

void sub_100050B74(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100050BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  +[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, v4);
}

void sub_10005110C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100051128(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005116C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[SecXPCHelper cleanseErrorForXPC:a2];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000511D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100051298;
  block[3] = &unk_1002B7A58;
  id v9 = v3;
  long long v7 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v7;
  long long v10 = v7;
  id v6 = v3;
  dispatch_async(v4, block);
}

void sub_100051298(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    uint64_t v3 = *(void *)(a1[6] + 8);
    uint64_t v5 = *(void *)(v3 + 40);
    id v4 = (id *)(v3 + 40);
    if (!v5) {
      objc_storeStrong(v4, v2);
    }
  }
  id v6 = a1[5];

  dispatch_group_leave(v6);
}

void sub_1000512E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_100051DFC(id a1)
{
  qword_100326798 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000520F4(id a1)
{
  qword_1003267A8 = +[NSSet setWithArray:&off_1002DA4B0];

  _objc_release_x1();
}

void sub_1000522C4(id a1)
{
  qword_1003267B8 = +[NSSet setWithArray:&off_1002DA4C8];

  _objc_release_x1();
}

void sub_1000534A8(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSNumber numberWithBool:a2];
  [*(id *)(a1 + 32) setObject:v3 forKeyedSubscript:@"selfOptIn"];
}

void sub_1000535EC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 48);
  if (v1 <= 6)
  {
    uint64_t v3 = (uint64_t)*(&off_1002BB330 + v1);
    uint64_t v4 = *(void *)(a1 + 56);
    if (v4 == 1)
    {
      uint64_t v5 = +[KTEligibilityStatusResult statusResultWithSuccessWithElement:v3];
    }
    else
    {
      if (v4) {
        return;
      }
      uint64_t v5 = +[KTEligibilityStatusResult statusResultWithFailureWithElement:v3 error:*(void *)(a1 + 32)];
    }
    id v6 = (void *)v5;
    if (v5)
    {
      long long v7 = [*(id *)(a1 + 40) eligibilityStatusReporter];
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_1000536E4;
      v8[3] = &unk_1002BB280;
      v8[4] = *(void *)(a1 + 40);
      [v7 storeWithStatus:v6 completionHandler:v8];
    }
  }
}

void sub_1000536E4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5 && (a2 & 1) == 0)
  {
    if (qword_1003267C0 != -1) {
      dispatch_once(&qword_1003267C0, &stru_1002BB258);
    }
    id v6 = qword_1003267C8;
    if (os_log_type_enabled((os_log_t)qword_1003267C8, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error storing eligibility metric %{public}@", (uint8_t *)&v8, 0xCu);
    }
  }
  long long v7 = [*(id *)(a1 + 32) storedEligibilityResult];
  [v7 fulfill];
}

void sub_1000537E4(id a1)
{
  qword_1003267C8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000542DC(id a1)
{
  qword_1003267D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100054320(id a1)
{
  qword_1003267D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100054508(id a1)
{
  qword_1003267D8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100054AC8(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100054B0C(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100054B50(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100054B94(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100054BD8(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100054C1C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) errors];
  id v3 = [v2 count];

  if (v3)
  {
    uint64_t v4 = [*(id *)(a1 + 32) errors];
    id v5 = [v4 allKeys];

    id v34 = v5;
    id v6 = [v5 componentsJoinedByString:@","];
    uint64_t v7 = +[NSString stringWithFormat:@"Inclusion failed for applications: %@", v6];

    v42[0] = NSMultipleUnderlyingErrorsKey;
    int v8 = [*(id *)(a1 + 32) errors];
    id v9 = [v8 allValues];
    v42[1] = NSLocalizedDescriptionKey;
    v43[0] = v9;
    id v33 = (void *)v7;
    v43[1] = v7;
    uint64_t v10 = +[NSDictionary dictionaryWithObjects:v43 forKeys:v42 count:2];

    long long v32 = (void *)v10;
    id v11 = +[NSError errorWithDomain:@"TransparencyErrorVerify" code:-385 userInfo:v10];
    [*(id *)(a1 + 32) setError:v11];

    double v12 = +[NSMutableString string];
    id v13 = +[NSMutableString string];
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id obj = [*(id *)(a1 + 32) failedRevs];
    id v14 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v38;
      do
      {
        for (i = 0; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v38 != v16) {
            objc_enumerationMutation(obj);
          }
          uint64_t v18 = *(void *)(*((void *)&v37 + 1) + 8 * i);
          id v19 = [*(id *)(a1 + 32) serverHints];
          long long v20 = [v19 objectForKeyedSubscript:v18];
          [v12 appendFormat:@"%@/%@,", v18, v20];

          long long v21 = [*(id *)(a1 + 32) failedRevs];
          long long v22 = [v21 objectForKeyedSubscript:v18];
          long long v23 = [v22 componentsJoinedByString:@","];
          [v13 appendFormat:@"%@:%@", v18, v23];
        }
        id v15 = [obj countByEnumeratingWithState:&v37 objects:v41 count:16];
      }
      while (v15);
    }

    __int16 v24 = [*(id *)(a1 + 32) backgroundOpId];
    long long v25 = [*(id *)(a1 + 32) deps];
    id v26 = [v25 smDataStore];
    uint64_t v27 = [*(id *)(a1 + 32) name];
    __int16 v28 = [*(id *)(a1 + 32) error];
    +[KTBackgroundSystemValidationOperation addErrorToBackgroundOp:v24 smDataStore:v26 failureDataString:v13 type:v27 serverHint:v12 failure:v28];
  }
  if (qword_1003267E0 != -1) {
    dispatch_once(&qword_1003267E0, &stru_1002BB468);
  }
  id v29 = qword_1003267E8;
  if (os_log_type_enabled((os_log_t)qword_1003267E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "VerifyRevisionInclusion: end", buf, 2u);
  }
  unsigned int v30 = [*(id *)(a1 + 32) operationQueue];
  long long v31 = [*(id *)(a1 + 32) finishedOp];
  [v30 addOperation:v31];
}

void sub_100055044(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000552F4(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000554E4(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000557A4(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100055AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

void sub_100055B2C(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_100055B70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100055B80(uint64_t a1)
{
}

void sub_100055B88(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 deps];
  id v6 = [v5 dataStore];
  uint64_t v7 = [v6 createDownloadRecord:*(void *)(a1 + 64) moc:v4 application:*(void *)(a1 + 40)];

  int v8 = +[NSJSONSerialization dataWithJSONObject:*(void *)(a1 + 48) options:0 error:*(void *)(a1 + 72)];
  [v7 setRevisions:v8];

  if (qword_1003267E0 != -1) {
    dispatch_once(&qword_1003267E0, &stru_1002BB508);
  }
  id v9 = (void *)qword_1003267E8;
  if (os_log_type_enabled((os_log_t)qword_1003267E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void **)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    double v12 = v9;
    id v13 = [v7 downloadId];
    *(_DWORD *)buf = 138543874;
    id v26 = v10;
    __int16 v27 = 2114;
    uint64_t v28 = v11;
    __int16 v29 = 2114;
    unsigned int v30 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Fetching Inclusion Proofs for %{public}@ %{public}@ with downloadId %{public}@", buf, 0x20u);
  }
  uint64_t v14 = [v7 downloadId];
  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;

  long long v17 = [*(id *)(a1 + 32) deps];
  uint64_t v18 = [v17 dataStore];
  id v24 = 0;
  unsigned __int8 v19 = [v18 persistWithError:&v24];
  id v20 = v24;

  if ((v19 & 1) == 0)
  {
    if (qword_1003267E0 != -1) {
      dispatch_once(&qword_1003267E0, &stru_1002BB528);
    }
    long long v21 = qword_1003267E8;
    if (os_log_type_enabled((os_log_t)qword_1003267E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "failed to save downloadRecord: %@", buf, 0xCu);
    }
    long long v22 = [*(id *)(a1 + 32) deps];
    long long v23 = [v22 dataStore];
    [v23 reportCoreDataPersistEventForLocation:@"verifyConsistency" underlyingError:v20];
  }
}

void sub_100055E28(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100055E6C(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100055EB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  int v8 = [WeakRetained deps];
  id v9 = [v8 publicKeyStore];
  id v72 = [v9 applicationPublicKeyStore:*(void *)(a1 + 32)];

  uint64_t v10 = [KTContextVerifier alloc];
  uint64_t v11 = [WeakRetained deps];
  double v12 = [v11 dataStore];
  id v13 = [(KTContextVerifier *)v10 initWithApplicationKeyStore:v72 dataStore:v12 applicationID:*(void *)(a1 + 32)];

  id v71 = +[NSMutableArray array];
  if (!v5 || v6)
  {
    if (qword_1003267E0 != -1) {
      dispatch_once(&qword_1003267E0, &stru_1002BB570);
    }
    id v36 = qword_1003267E8;
    if (os_log_type_enabled((os_log_t)qword_1003267E8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v78 = v37;
      __int16 v79 = 2112;
      id v80 = v6;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Failed inclusion proof downloadId %{public}@: %@", buf, 0x16u);
    }
    if (!v6)
    {
      id v6 = +[TransparencyError errorWithDomain:kTransparencyErrorNetwork code:-145 description:@"empty inclusion proof response"];
    }
    long long v38 = [WeakRetained deps];
    long long v39 = [v38 dataStore];
    uint64_t v40 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v41 = [WeakRetained deps];
    id v42 = [v41 logClient];
    [v39 failHeadDownload:v40 failure:v6 logClient:v42];

    id v15 = v6;
    long long v43 = v15;
  }
  else
  {
    if ([v5 status] == 1)
    {
      id v74 = 0;
      unsigned __int8 v14 = [(KTContextVerifier *)v13 verifyRevisionLogInclusionProofResponse:v5 receivedRevisions:v71 error:&v74];
      id v15 = v74;
      if (v14)
      {
        uint64_t v16 = [WeakRetained deps];
        long long v17 = [v16 settings];
        unsigned int v18 = [v17 allowsInternalSecurityPolicies];

        if (v18)
        {
          unsigned __int8 v19 = +[TransparencyAnalytics formatEventName:@"InclusionDownload" application:*(void *)(a1 + 32)];
          uint64_t v20 = *(void *)(a1 + 40);
          v75[0] = @"requestedRevisions";
          v75[1] = @"receivedRevisions";
          v76[0] = v20;
          v76[1] = v71;
          long long v21 = +[NSDictionary dictionaryWithObjects:v76 forKeys:v75 count:2];
          id v22 = [v21 mutableCopy];

          long long v23 = [v5 metadata];
          uint64_t v24 = kTransparencyResponseMetadataKeyServerHint;
          long long v25 = [v23 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

          if (v25)
          {
            id v26 = [v5 metadata];
            __int16 v27 = [v26 objectForKeyedSubscript:v24];
            [v22 setObject:v27 forKeyedSubscript:v24];
          }
          uint64_t v28 = [v5 metadata];
          __int16 v29 = [v28 objectForKeyedSubscript:@"APS"];

          if (v29) {
            [v22 setObject:&__kCFBooleanTrue forKeyedSubscript:@"APS"];
          }
          unsigned int v30 = [WeakRetained deps];
          long long v31 = [v30 logger];
          [v31 logHardFailureForEventNamed:v19 withAttributes:v22];
        }
        if (qword_1003267E0 != -1) {
          dispatch_once(&qword_1003267E0, &stru_1002BB5D0);
        }
        long long v32 = qword_1003267E8;
        if (os_log_type_enabled((os_log_t)qword_1003267E8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          *(_DWORD *)buf = 138543362;
          uint64_t v78 = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Revision log inclusion proof downloadId %{public}@: verification succeeded", buf, 0xCu);
        }
        id v34 = [WeakRetained deps];
        CFStringRef v35 = [v34 logClient];
        [v35 deleteDownloadId:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
      }
      else
      {
        if (qword_1003267E0 != -1) {
          dispatch_once(&qword_1003267E0, &stru_1002BB5B0);
        }
        id v54 = qword_1003267E8;
        if (os_log_type_enabled((os_log_t)qword_1003267E8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v55 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          *(_DWORD *)buf = 138543618;
          uint64_t v78 = v55;
          __int16 v79 = 2112;
          id v80 = v15;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "Inclusion proof response donwloadId %{public}@: verification failed %@", buf, 0x16u);
        }
        uint64_t v56 = [WeakRetained deps];
        id v57 = [v56 dataStore];
        uint64_t v58 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        long long v59 = [WeakRetained deps];
        long long v60 = [v59 logClient];
        [v57 failHeadDownload:v58 failure:v15 logClient:v60];
      }
    }
    else
    {
      if (qword_1003267E0 != -1) {
        dispatch_once(&qword_1003267E0, &stru_1002BB590);
      }
      uint64_t v44 = (void *)qword_1003267E8;
      if (os_log_type_enabled((os_log_t)qword_1003267E8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v45 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        long long v46 = v44;
        *(_DWORD *)buf = 138543618;
        uint64_t v78 = v45;
        __int16 v79 = 1024;
        LODWORD(v80) = [v5 status];
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "server failed to produce inclusion proof for downloadId %{public}@: %d", buf, 0x12u);
      }
      signed int v47 = [v5 status];
      id v48 = [v5 status];
      id v15 = +[TransparencyError errorWithDomain:kTransparencyErrorServer, v47, @"server failed to produce inclusion proof: %d", v48 code description];
      uint64_t v49 = [WeakRetained deps];
      id v50 = [v49 dataStore];
      uint64_t v51 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      id v52 = [WeakRetained deps];
      long long v53 = [v52 logClient];
      [v50 failHeadDownload:v51 failure:v15 logClient:v53];
    }
    long long v43 = 0;
  }
  id v73 = v15;
  id v61 = [(KTContextVerifier *)v13 failExpiredSTHsForType:1 error:&v73];
  id v62 = v73;

  if (v61 && [v61 count])
  {
    if (v5)
    {
      long long v63 = [v5 metadata];
      long long v64 = [v63 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];
    }
    else
    {
      long long v64 = 0;
    }
    long long v65 = +[NSString stringWithFormat:@"%@%lu", *(void *)(a1 + 32), *(void *)(a1 + 64)];
    long long v66 = [WeakRetained errors];
    objc_sync_enter(v66);
    long long v67 = [WeakRetained serverHints];
    [v67 setObject:v64 forKeyedSubscript:v65];

    long long v68 = [WeakRetained errors];
    [v68 setObject:v62 forKeyedSubscript:v65];

    long long v69 = [WeakRetained failedRevs];
    [v69 setObject:v61 forKeyedSubscript:v65];

    objc_sync_exit(v66);
  }
  uint64_t v70 = [WeakRetained fetchGroup];
  dispatch_group_leave(v70);
}

void sub_100056748(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100056764(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000567A8(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000567EC(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100056830(id a1)
{
  qword_1003267E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100056ECC(id a1)
{
  qword_1003267F8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100056F10(id a1)
{
  qword_1003267F8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100056F54(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a2 && !v5) {
    goto LABEL_3;
  }
  if (qword_1003267F0 != -1) {
    dispatch_once(&qword_1003267F0, &stru_1002BB658);
  }
  uint64_t v7 = qword_1003267F8;
  if (os_log_type_enabled((os_log_t)qword_1003267F8, OS_LOG_TYPE_ERROR))
  {
    int v16 = 138412290;
    long long v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "createManateeIdentity: %@", (uint8_t *)&v16, 0xCu);
  }
  if (v6)
  {
    if (qword_1003267F0 != -1) {
      dispatch_once(&qword_1003267F0, &stru_1002BB678);
    }
    int v8 = qword_1003267F8;
    if (os_log_type_enabled((os_log_t)qword_1003267F8, OS_LOG_TYPE_ERROR))
    {
      int v16 = 138412290;
      long long v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "createManateeIdentity: %@", (uint8_t *)&v16, 0xCu);
    }
    [*(id *)(a1 + 32) setError:v6];
  }
  else
  {
    if (a2)
    {
LABEL_3:
      [*(id *)(a1 + 32) setIdentityCreated:1];
      [*(id *)(a1 + 32) setIdentity:PCSIdentityGetPublicKey()];
      goto LABEL_14;
    }
    uint64_t v11 = +[TransparencyError errorWithDomain:kTransparencyErrorInterface code:-327 description:@"Identity creation failed"];
    [*(id *)(a1 + 32) setError:v11];

    if (qword_1003267F0 != -1) {
      dispatch_once(&qword_1003267F0, &stru_1002BB698);
    }
    double v12 = (void *)qword_1003267F8;
    if (os_log_type_enabled((os_log_t)qword_1003267F8, OS_LOG_TYPE_ERROR))
    {
      id v13 = *(void **)(a1 + 32);
      unsigned __int8 v14 = v12;
      id v15 = [v13 error];
      int v16 = 138412290;
      long long v17 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "createManateeIdentity no identity returned: %@", (uint8_t *)&v16, 0xCu);
    }
  }
LABEL_14:
  id v9 = [*(id *)(a1 + 32) operationQueue];
  uint64_t v10 = [*(id *)(a1 + 32) finishedOp];
  [v9 addOperation:v10];

  [*(id *)(a1 + 32) setTransaction:0];
}

void sub_1000571F8(id a1)
{
  qword_1003267F8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005723C(id a1)
{
  qword_1003267F8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100057280(id a1)
{
  qword_1003267F8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000575A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100057844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  objc_destroyWeak(v21);
  _Block_object_dispose(&a21, 8);
  objc_destroyWeak((id *)(v22 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_10005788C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005789C(uint64_t a1)
{
}

void sub_1000578A4(id a1)
{
  qword_100326808 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000578E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id to = 0;
  objc_copyWeak(&to, (id *)(a1 + 32));
  id v7 = objc_loadWeakRetained(&to);

  if (v7)
  {
    if ([v5 isEqual:@"TransparencySFASettings"])
    {
      if (qword_100326800 != -1) {
        dispatch_once(&qword_100326800, &stru_1002BB700);
      }
      int v8 = qword_100326808;
      if (os_log_type_enabled((os_log_t)qword_100326808, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Updating configuration for SFA", buf, 2u);
      }
      id v9 = objc_loadWeakRetained(&to);
      uint64_t v10 = [v9 delegate];
      [v10 updateSFAConfigurationWithData:v6];
    }
    if ([v5 isEqual:@"TransparencyDewSettings"])
    {
      if (qword_100326800 != -1) {
        dispatch_once(&qword_100326800, &stru_1002BB720);
      }
      uint64_t v11 = qword_100326808;
      if (os_log_type_enabled((os_log_t)qword_100326808, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)unsigned __int8 v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Updating configuration for dew", v14, 2u);
      }
      id v12 = objc_loadWeakRetained(&to);
      id v13 = [v12 delegate];
      [v13 updateDewConfigurationWithData:v6];
    }
  }
  objc_destroyWeak(&to);
}

void sub_100057AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void sub_100057ABC(id a1)
{
  qword_100326808 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100057B00(id a1)
{
  qword_100326808 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100057B44(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_100326800 != -1) {
    dispatch_once(&qword_100326800, &stru_1002BB768);
  }
  id v3 = qword_100326808;
  if (os_log_type_enabled((os_log_t)qword_100326808, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138543362;
    id v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Updating configuration done: %{public}@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100057C14(id a1)
{
  qword_100326808 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100057DA4(id a1)
{
  qword_100326808 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100058160(id a1)
{
  qword_100326808 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000581A4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (qword_100326800 != -1) {
      dispatch_once(&qword_100326800, &stru_1002BB7F0);
    }
    uint64_t v10 = qword_100326808;
    if (os_log_type_enabled((os_log_t)qword_100326808, OS_LOG_TYPE_ERROR))
    {
      int v15 = 138543362;
      id v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "ConfigurationData not present/wrong type: %{public}@", (uint8_t *)&v15, 0xCu);
    }
  }
  else
  {
    uint64_t v11 = [v7 recordID];
    id v12 = [v11 recordName];

    if (v12)
    {
      id v13 = [v7 objectForKeyedSubscript:@"configurationData"];
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      }
      else
      {
        if (qword_100326800 != -1) {
          dispatch_once(&qword_100326800, &stru_1002BB810);
        }
        unsigned __int8 v14 = qword_100326808;
        if (os_log_type_enabled((os_log_t)qword_100326808, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v15) = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "ConfigurationData not present/wrong type", (uint8_t *)&v15, 2u);
        }
      }
    }
  }
}

void sub_100058394(id a1)
{
  qword_100326808 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000583D8(id a1)
{
  qword_100326808 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_10005841C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100059060(id a1)
{
  qword_100326818 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000590A4(id a1)
{
  qword_100326818 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000590E8(id a1)
{
  qword_100326818 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005912C(id a1)
{
  qword_100326818 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100059170(id a1)
{
  qword_100326818 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000596A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000596C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000596D4(uint64_t a1)
{
}

void sub_1000596DC(uint64_t a1)
{
  id v2 = +[NSFetchRequest fetchRequestWithEntityName:@"KTRequest"];
  [v2 setPropertiesToFetch:&off_1002DA4E0];
  [v2 setResultType:2];
  [v2 setFetchLimit:1];
  id v3 = +[NSSortDescriptor sortDescriptorWithKey:@"sequenceId" ascending:0];
  unsigned __int8 v14 = v3;
  int v4 = +[NSArray arrayWithObjects:&v14 count:1];
  [v2 setSortDescriptors:v4];

  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v6 + 40);
  id v7 = [v5 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);
  if (v7 && [v7 count])
  {
    id v8 = [v7 objectAtIndexedSubscript:0];
    uint64_t v9 = [v8 objectForKeyedSubscript:@"sequenceId"];

    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = (char *)[v9 longLongValue] + 1;
  }
  else if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    [*(id *)(a1 + 40) reportCoreDataEventForEntity:@"KTRequest" write:0 code:-126 underlyingError:nil];
  }
  uint64_t v10 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

void sub_10005994C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v6)
  {
    if (qword_100326810 != -1) {
      dispatch_once(&qword_100326810, &stru_1002BB928);
    }
    id v8 = (void *)qword_100326818;
    if (os_log_type_enabled((os_log_t)qword_100326818, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = v8;
      uint64_t v10 = [v5 URL];
      *(_DWORD *)buf = 138412290;
      CFStringRef v27 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Loaded store at %@", buf, 0xCu);
    }
    uint64_t v11 = *(void **)(a1 + 32);
    id v25 = 0;
    unsigned int v12 = [v11 createContexts:&v25];
    id v13 = v25;
    unsigned __int8 v14 = v13;
    if (v12)
    {
      int v15 = *(void **)(a1 + 32);
      id v16 = [v15 logger];
      long long v17 = +[TransparencyFollowup instance];
      id v24 = v14;
      unsigned int v18 = [v15 createDataStores:v16 followup:v17 error:&v24];
      id v7 = v24;

      if (v18) {
        goto LABEL_20;
      }
    }
    else
    {
      id v7 = v13;
    }
  }
  if (qword_100326810 != -1) {
    dispatch_once(&qword_100326810, &stru_1002BB948);
  }
  unsigned __int8 v19 = (void *)qword_100326818;
  if (os_log_type_enabled((os_log_t)qword_100326818, OS_LOG_TYPE_ERROR))
  {
    uint64_t v20 = *(void **)(a1 + 32);
    long long v21 = v19;
    unsigned int v22 = [v20 movedDatabase];
    CFStringRef v23 = &stru_1002CE4C0;
    if (v22) {
      CFStringRef v23 = @" again";
    }
    *(_DWORD *)buf = 138412546;
    CFStringRef v27 = v23;
    __int16 v28 = 2112;
    id v29 = v7;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to load stack%@: %@", buf, 0x16u);
  }
  if (![*(id *)(a1 + 32) shouldMoveAsideDatabase:v7]
    || ![*(id *)(a1 + 32) moveAsideDatabase:v7])
  {
    [*(id *)(a1 + 32) reportCoreDataEventForEntity:@"Initialization" hardFailure:1 write:1 code:-127 underlyingError:v7];
    [*(id *)(a1 + 32) setPersistentContainer:0];
LABEL_20:
    [*(id *)(a1 + 32) setupComplete];
    goto LABEL_21;
  }
  [*(id *)(a1 + 32) reportCoreDataEventForEntity:@"Initialization" hardFailure:0 write:1 code:-127 underlyingError:v7];
  [*(id *)(a1 + 32) setMovedDatabase:1];
  [*(id *)(a1 + 32) loadPersistentStores];
LABEL_21:
}

void sub_100059C40(id a1)
{
  qword_100326818 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100059C84(id a1)
{
  qword_100326818 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005A0E4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const __CFString *a11, const __CFString *a12, const __CFString *a13, const __CFString *a14, const __CFString *a15, _UNKNOWN **a16, uint64_t a17, void *a18, const __CFString *a19, void *a20,long long buf)
{
  if (a2 == 1)
  {
    id v23 = objc_begin_catch(a1);
    if (qword_100326810 != -1) {
      dispatch_once(&qword_100326810, &stru_1002BB9D0);
    }
    id v24 = qword_100326818;
    if (os_log_type_enabled((os_log_t)qword_100326818, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CoreData context save exception: %@", (uint8_t *)&buf, 0xCu);
    }
    id v25 = +[NSMutableDictionary dictionary];
    id v26 = [v23 name];
    [v25 setValue:v26 forKey:@"CoreDataExceptionName"];

    CFStringRef v27 = [v23 reason];
    [v25 setValue:v27 forKey:@"CoreDataExceptionReason"];

    __int16 v28 = [v23 userInfo];
    [v25 setValue:v28 forKey:@"CoreDataExceptionUserInfo"];

    if (v21 && *v21) {
      [v25 setValue:*v21 forKey:NSUnderlyingErrorKey];
    }
    id v29 = objc_alloc((Class)NSError);
    uint64_t v30 = kTransparencyErrorDatabase;
    id v31 = [v29 initWithDomain:kTransparencyErrorDatabase code:-110 userInfo:v25];
    uint64_t v40 = [v23 reason];
    long long v32 = +[TransparencyError errorWithDomain:v30 code:-110 underlyingError:v31 description:@"Error persisting to database: %@"];

    uint64_t v33 = [v22 logger];
    a11 = @"errorCode";
    a12 = @"errorDomain";
    a16 = &off_1002D9CD8;
    a17 = v30;
    a13 = @"exceptionName";
    id v34 = [v23 name];
    a18 = v34;
    a19 = @"Persistence";
    a14 = @"entityType";
    a15 = @"write";
    a20 = &__kCFBooleanTrue;
    CFStringRef v35 = +[NSDictionary dictionaryWithObjects:&a16 forKeys:&a11 count:5];
    [v33 logHardFailureForEventNamed:@"ktCoreDataEvent" withAttributes:v35];

    if (qword_100326810 != -1) {
      dispatch_once(&qword_100326810, &stru_1002BB9F0);
    }
    id v36 = (id)qword_100326818;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = [v23 reason];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Error saving to database: %@", (uint8_t *)&buf, 0xCu);
    }
    long long v38 = +[SecXPCHelper cleanseErrorForXPC:v32];

    if (v38) {
      BOOL v39 = v21 != 0;
    }
    else {
      BOOL v39 = 0;
    }
    if (v39) {
      *long long v21 = v38;
    }

    objc_end_catch();
    JUMPOUT(0x10005A070);
  }
  _Unwind_Resume(a1);
}

void sub_10005A458(id a1)
{
  qword_100326818 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005A49C(id a1)
{
  qword_100326818 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005A4E0(id a1)
{
  qword_100326818 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005A524(id a1)
{
  qword_100326818 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005AAA0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005AB50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005AE44(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005AE88(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005B020(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005B03C(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005B820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10005B840(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_10005B884(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005B894(uint64_t a1)
{
}

void sub_10005B89C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_100326820 != -1) {
      dispatch_once(&qword_100326820, &stru_1002BBA90);
    }
    id v7 = qword_100326828;
    if (os_log_type_enabled((os_log_t)qword_100326828, OS_LOG_TYPE_ERROR))
    {
      int v14 = 138412546;
      id v15 = v5;
      __int16 v16 = 2112;
      id v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "ContextStore configuration error for %@: %@", (uint8_t *)&v14, 0x16u);
    }
    if ([v5 isEqualToString:*(void *)(a1 + 32)]) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
    }
  }
  else
  {
    id v8 = *(void **)(a1 + 40);
    uint64_t v9 = [v8 dataStore];
    uint64_t v10 = [*(id *)(a1 + 40) staticKeyStore];
    uint64_t v11 = *(void *)(a1 + 48);
    unsigned int v12 = [*(id *)(a1 + 40) stateMachine];
    id v13 = [v8 createContextForApplication:v5 dataStore:v9 staticKeyStore:v10 logClient:v11 stateMachine:v12];
  }
}

void sub_10005BA34(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005BA78(uint64_t a1, void *a2)
{
  id v14 = a2;
  id v3 = [*(id *)(a1 + 32) contexts];
  id v4 = [v3 count];

  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = [v5 dataStore];
    id v7 = [*(id *)(a1 + 32) staticKeyStore];
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = [*(id *)(a1 + 32) stateMachine];
    id v10 = [v5 createContextForTLT:v6 staticKeyStore:v7 logClient:v8 stateMachine:v9];
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v11 = [*(id *)(a1 + 32) contexts];
    unsigned int v12 = [v11 objectForKeyedSubscript:*(void *)(a1 + 48)];

    if (v12)
    {
      id v13 = 0;
    }
    else
    {
      id v13 = v14;
      if (!v13)
      {
        id v13 = +[TransparencyError errorWithDomain:kTransparencyErrorInternal, -148, @"Failed to configure public key store for %@", *(void *)(a1 + 48) code description];
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_10005BC08(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005BE0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v10 = v5;
  if (!a2 || v5)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    id v7 = [objc_alloc((Class)KTVerifierResult) initWithUri:*(void *)(a1 + 32) application:*(void *)(a1 + 40) ktResult:0];
    (*(void (**)(uint64_t, id, id))(v6 + 16))(v6, v7, v10);

    uint64_t v8 = +[TransparencyAnalytics logger];
    uint64_t v9 = +[KTContext validateEventName:0 application:*(void *)(a1 + 40)];
    [v8 logResultForEvent:v9 hardFailure:0 result:v10];
  }
  else
  {
    [a2 validatePeerRequestId:*(void *)(a1 + 48) revalidate:*(unsigned __int8 *)(a1 + 64) fetchNow:*(unsigned __int8 *)(a1 + 65) completionHandler:*(void *)(a1 + 56)];
  }
}

void sub_10005C0BC(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2 || v5)
  {
    (*(void (**)(void))(a1[7] + 16))();
    unsigned int v12 = +[TransparencyAnalytics logger];
    id v13 = +[KTContext validateEventName:2 application:a1[4]];
    [v12 logResultForEvent:v13 hardFailure:0 result:v6];
  }
  else
  {
    id v15 = 0;
    id v16 = 0;
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    id v14 = 0;
    [a2 validateEnrollmentRequestId:v7 transparentData:&v16 loggableDatas:&v15 cloudOptIn:v8 error:&v14];
    id v9 = v16;
    id v10 = v15;
    id v11 = v14;
    (*(void (**)(void))(a1[7] + 16))();
  }
}

void sub_10005C3DC(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005C420(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005C654(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005C698(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005C6DC(id a1, NSString *a2, NSError *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (v5)
  {
    if (qword_100326820 != -1) {
      dispatch_once(&qword_100326820, &stru_1002BBC30);
    }
    uint64_t v6 = qword_100326828;
    if (os_log_type_enabled((os_log_t)qword_100326828, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412546;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      id v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Failed to update key store for %@ with error %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_10005C7D4(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005C89C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005C980(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2 || v5)
  {
    unsigned int v12 = +[TransparencyAnalytics logger];
    id v13 = +[TransparencyAnalytics formatEventName:@"VerifyInclusionProofEvent" application:*(void *)(a1 + 32)];
    [v12 logResultForEvent:v13 hardFailure:0 result:v6];
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v14 = 0;
    unsigned int v8 = [a2 verifyInclusionProofDownload:v7 error:&v14];
    id v9 = v14;
    id v10 = v9;
    if (!v8 || v9)
    {
      if (qword_100326820 != -1) {
        dispatch_once(&qword_100326820, &stru_1002BBC50);
      }
      id v11 = qword_100326828;
      if (os_log_type_enabled((os_log_t)qword_100326828, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "failed to handle inclusion proof download: %@", buf, 0xCu);
      }
    }
  }
}

void sub_10005CAE8(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005CBFC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (!a2 || v5)
  {
    id v11 = +[TransparencyAnalytics logger];
    unsigned int v12 = +[TransparencyAnalytics formatEventName:@"VerifyConsistencyProofEvent" application:*(void *)(a1 + 32)];
    [v11 logResultForEvent:v12 hardFailure:0 result:v6];
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v13 = 0;
    id v8 = [a2 verifyConsistencyProofDownload:v7 error:&v13];
    id v9 = v13;
    if (v8 != (id)1)
    {
      if (qword_100326820 != -1) {
        dispatch_once(&qword_100326820, &stru_1002BBC98);
      }
      id v10 = qword_100326828;
      if (os_log_type_enabled((os_log_t)qword_100326828, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "failed to handle consistency proof download: %@", buf, 0xCu);
      }
    }
  }
}

void sub_10005CD64(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005CEC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (!a2 || v5)
  {
    uint64_t v6 = +[TransparencyAnalytics logger];
    uint64_t v7 = +[TransparencyAnalytics formatEventName:@"VerifyUnknownProofEvent" application:*(void *)(a1 + 32)];
    [v6 logResultForEvent:v7 hardFailure:0 result:v8];
  }
  else
  {
    uint64_t v6 = [*(id *)(a1 + 40) dataStore];
    [v6 failHeadDownload:*(void *)(a1 + 48) failure:*(void *)(a1 + 56) logClient:*(void *)(a1 + 64)];
  }
}

void sub_10005D048(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = [a3 transcript];
  id v4 = [v5 serialize];
  [v3 addObject:v4];
}

void sub_10005D4B8(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005D4FC(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005D540(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005D584(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    id v9 = +[TransparencyAnalytics formatEventName:@"RetrieveTLTSTHEvent" application:kKTApplicationIdentifierTLT];
    id v11 = +[TransparencyAnalytics logger];
    [v11 logResultForEvent:v9 hardFailure:0 result:v7];

    if (qword_100326820 != -1) {
      dispatch_once(&qword_100326820, &stru_1002BBD68);
    }
    unsigned int v12 = qword_100326828;
    if (os_log_type_enabled((os_log_t)qword_100326828, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "failed to get context for TLT STH retrieval: %@", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    if (qword_100326820 != -1) {
      dispatch_once(&qword_100326820, &stru_1002BBD88);
    }
    id v8 = qword_100326828;
    if (os_log_type_enabled((os_log_t)qword_100326828, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "retrieving STH for gossip", buf, 2u);
    }
    id v14 = 0;
    id v9 = [v5 retrieveTLTSTH:&v14];
    id v10 = v14;
    if (v9)
    {
      [*(id *)(a1 + 32) setCachedGossip:v9];
    }
    else
    {
      id v13 = +[NSData data];
      [*(id *)(a1 + 32) setCachedGossip:v13];
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_10005D7CC(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005D810(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005D95C(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (!a2 || v5)
  {
    id v6 = +[TransparencyAnalytics logger];
    uint64_t v7 = +[TransparencyAnalytics formatEventName:@"ReceivedSTHsFromPeersEvent" application:kKTApplicationIdentifierTLT];
    [v6 logResultForEvent:v7 hardFailure:0 result:v8];

    (*(void (**)(void))(a1[6] + 16))();
  }
  else
  {
    [a2 processSTHsFromPeers:a1[4] verifier:a1[5] completionHandler:a1[6]];
  }
}

void sub_10005DB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10005DB50(uint64_t a1, uint64_t a2, void *a3)
{
  id result = [a3 contextShouldGossip];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) |= result;
  return result;
}

void sub_10005DC70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v7 = v5;
  if (!a2 || v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    id v6 = +[TransparencyAnalytics logger];
    [v6 logResultForEvent:@"KTAccountKeySign" hardFailure:0 result:v7];
  }
  else
  {
    id v6 = [a2 accountKeyServer];
    [v6 signData:*(void *)(a1 + 32) completionBlock:*(void *)(a1 + 40)];
  }
}

void sub_10005DDE4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v7 = v5;
  if (!a2 || v5)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    id v6 = +[TransparencyAnalytics logger];
    [v6 logResultForEvent:@"KTAccountKeyRoll" hardFailure:0 result:v7];
  }
  else
  {
    id v6 = [a2 accountKeyServer];
    [v6 rollKey:*(void *)(a1 + 32)];
  }
}

void sub_10005DF74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v8 = v5;
  if (!a2 || v5)
  {
    id v6 = +[TransparencyAnalytics formatEventName:@"OptInServerGet" application:*(void *)(a1 + 32)];
    id v7 = +[TransparencyAnalytics logger];
    [v7 logResultForEvent:v6 hardFailure:0 result:v8];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v6 = [a2 optInServer];
    [v6 getOptInState:*(unsigned __int8 *)(a1 + 48) completionBlock:*(void *)(a1 + 40)];
  }
}

void sub_10005E130(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v10 = v5;
  if (!a2 || v5)
  {
    id v6 = +[TransparencyAnalytics formatEventName:@"OptInServerSet" application:*(void *)(a1 + 32)];
    id v9 = +[TransparencyAnalytics logger];
    [v9 logResultForEvent:v6 hardFailure:0 result:v10];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v6 = [a2 optInServer];
    uint64_t v7 = *(void *)(a1 + 56);
    id v8 = [*(id *)(a1 + 40) dataStore];
    [v6 changeOptInState:v7 dataStore:v8 completionBlock:*(void *)(a1 + 48)];
  }
}

void sub_10005E3A0(void *a1, void *a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    id v9 = *(void (**)(void))(a1[8] + 16);
    v9();
  }
  else
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    uint64_t v6 = a1[6];
    uint64_t v7 = a1[7];
    id v10 = 0;
    [a2 handleBatchQueryResponse:v4 queryRequest:v5 receiptDate:v6 fetchId:v7 error:&v10 transparentDataHandler:a1[9]];
    id v8 = v10;
    (*(void (**)(void))(a1[8] + 16))();
  }
}

void sub_10005E580(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    if (qword_100326820 != -1) {
      dispatch_once(&qword_100326820, &stru_1002BBEC0);
    }
    id v8 = qword_100326828;
    if (os_log_type_enabled((os_log_t)qword_100326828, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Context for application %@ unavailable", buf, 0xCu);
    }
    id v10 = +[TransparencyError errorWithDomain:kTransparencyErrorInternal, -167, v7, @"Context for application %@ unavailable", *(void *)(a1 + 32) code underlyingError description];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    [v5 queryForUris:*(void *)(a1 + 40) userInitiated:*(unsigned __int8 *)(a1 + 64) cachedYoungerThan:*(void *)(a1 + 48) completionHandler:*(void *)(a1 + 56)];
  }
}

void sub_10005E6E0(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10005E894(void *a1, void *a2, uint64_t a3)
{
  if (!a2 || a3) {
    return (id)(*(uint64_t (**)(void))(a1[9] + 16))();
  }
  else {
    return _[a2 replaySelfValidate:a1[4] pcsAccountKey:a1[5] queryRequest:a1[6] queryResponse:a1[7] responseTime:a1[8] completionHandler:a1[9]];
  }
}

void sub_10005E9D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v9 = v5;
  if (!a2 || v5)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = [*(id *)(a1 + 32) allKeys];
    id v8 = +[KTVerifierResult resultsForUris:v7 application:*(void *)(a1 + 40) failure:v9];
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);
  }
  else
  {
    [a2 validatePeers:*(void *)(a1 + 32) fetchNow:*(unsigned __int8 *)(a1 + 56) completionBlock:*(void *)(a1 + 48)];
  }
}

void sub_10005EC70(id a1)
{
  qword_100326828 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005F44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 184), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005F478(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005F488(uint64_t a1)
{
}

void sub_10005F490(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) dataStore];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v2 createSingleQuery:v3 backgroundOpId:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(*(void *)(a1 + 56) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_10005F518(id a1)
{
  qword_100326838 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005F55C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v15 = +[TransparencyError errorWithDomain:kTransparencyErrorNetwork, -329, v6, @"Failed to get a response for single query rpc with id: %@", *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) code underlyingError description];
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    id v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    if (qword_100326830 != -1) {
      dispatch_once(&qword_100326830, &stru_1002BBFC0);
    }
    unsigned int v18 = qword_100326838;
    if (os_log_type_enabled((os_log_t)qword_100326838, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v30 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to get a response for single query rpc with id: %@", buf, 0xCu);
    }
    uint64_t v20 = [*(id *)(a1 + 32) dataStore];
    uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8);
    id v28 = *(id *)(v22 + 40);
    [v20 failRpcId:v21 failure:v7 error:&v28];
    objc_storeStrong((id *)(v22 + 40), v28);
  }
  else
  {
    uint64_t v8 = [*(id *)(a1 + 32) dataStore];
    uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v26 = (void *)v8;
    id v24 = [v5 data];
    id v9 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v5 status]);
    id v23 = [v5 metadata];
    id v10 = [v23 objectForKeyedSubscript:@"APS"];
    id v11 = [v5 metadata];
    uint64_t v12 = [v11 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8);
    id obj = *(id *)(v13 + 40);
    unsigned int v14 = [v26 setResponseForRpcId:v25 response:v24 responseStatus:v9 usedReversePush:v10 != 0 serverHint:v12 error:&obj];
    objc_storeStrong((id *)(v13 + 40), obj);

    uint64_t v7 = 0;
    if (v14)
    {
      [*(id *)(a1 + 32) validatePendingPeersForRpcId:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
      [*(id *)(a1 + 32) validatePendingSMTsForRpcId:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
    }
  }
}

void sub_10005F848(id a1)
{
  qword_100326838 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005FC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_10005FCB8(id a1)
{
  qword_100326838 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005FCFC(id a1)
{
  qword_100326838 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005FD40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if (qword_100326830 != -1) {
      dispatch_once(&qword_100326830, &stru_1002BC048);
    }
    uint64_t v7 = qword_100326838;
    if (os_log_type_enabled((os_log_t)qword_100326838, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v11 = 141558530;
      uint64_t v12 = 1752392040;
      __int16 v13 = 2112;
      uint64_t v14 = v8;
      __int16 v15 = 2114;
      id v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Created RPCSingleQuery for %{mask.hash}@ with rpcId %{public}@", (uint8_t *)&v11, 0x20u);
    }
  }
  else
  {
    if (qword_100326830 != -1) {
      dispatch_once(&qword_100326830, &stru_1002BC068);
    }
    id v9 = qword_100326838;
    if (os_log_type_enabled((os_log_t)qword_100326838, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 141558530;
      uint64_t v12 = 1752392040;
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to create RPCSingleQuery for %{mask.hash}@: %@", (uint8_t *)&v11, 0x20u);
    }
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
  }
}

void sub_10005FEFC(id a1)
{
  qword_100326838 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10005FF40(id a1)
{
  qword_100326838 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000602A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000602D4(id a1)
{
  qword_100326838 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100060318(id a1)
{
  qword_100326838 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006035C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!v5 || v6)
  {
    if (qword_100326830 != -1) {
      dispatch_once(&qword_100326830, &stru_1002BC0F0);
    }
    id v17 = qword_100326838;
    if (os_log_type_enabled((os_log_t)qword_100326838, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v22 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "optInStateForUri: failed to check opt-in, network failure: %@", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v8 = [v5 metadata];
    id v9 = [v8 objectForKeyedSubscript:@"ResponseTime"];
    uint64_t v10 = +[NSDate kt_dateFromString:v9];

    int v11 = [WeakRetained verifier];
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    id v20 = 0;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100060644;
    v18[3] = &unk_1002BC138;
    id v19 = *(id *)(a1 + 48);
    id v14 = [v11 handleQueryResponse:v5 queryRequest:v12 receiptDate:v10 fetchId:v13 error:&v20 transparentDataHandler:v18];
    id v15 = v20;

    if (v14 != (id)1)
    {
      if (qword_100326830 != -1) {
        dispatch_once(&qword_100326830, &stru_1002BC158);
      }
      id v16 = qword_100326838;
      if (os_log_type_enabled((os_log_t)qword_100326838, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v22 = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "optInStateForUri: failed to check opt-in, KT server failure: %@", buf, 0xCu);
      }
    }
  }
}

void sub_100060600(id a1)
{
  qword_100326838 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100060644(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (qword_100326830 != -1) {
      dispatch_once(&qword_100326830, &stru_1002BC110);
    }
    uint64_t v10 = qword_100326838;
    if (os_log_type_enabled((os_log_t)qword_100326838, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138412290;
      id v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "optInStateForUri: failed to verify opt-in, KT server failure: %@", (uint8_t *)&v13, 0xCu);
    }
    int v11 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 32);
    [v8 currentAccountOptInState];
    int v11 = *(void (**)(void))(v12 + 16);
  }
  v11();
}

void sub_100060788(id a1)
{
  qword_100326838 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000607CC(id a1)
{
  qword_100326838 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100061DBC(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100061E00(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_100061E48(uint64_t a1)
{
  return _[*(id *)(a1 + 32) performInitialDispatches];
}

id sub_100061E50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) generateFallbackSysdiagnose];
}

uint64_t sub_100061FF0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100062000(uint64_t a1)
{
}

void sub_100062008(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
}

void sub_100062318(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000625BC(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000629D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_100062A00(uint64_t a1)
{
  v16[0] = 0;
  v16[1] = v16;
  v16[2] = 0x3032000000;
  v16[3] = sub_100061FF0;
  void v16[4] = sub_100062000;
  id v17 = 0;
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
  uint64_t v4 = [*(id *)(a1 + 32) xpcDataStore];
  id v15 = 0;
  id v5 = [v2 addValidateRequest:v3 dataStore:v4 error:&v15];
  id v6 = v15;
  id v17 = v5;

  id v7 = [*(id *)(a1 + 32) deps];
  id v8 = [v7 settings];
  unsigned __int8 v9 = [v8 getBool:kTransparencyFlagDisableAsyncValidation];

  if ((v9 & 1) == 0)
  {
    uint64_t v10 = *(void **)(a1 + 32);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100062BC8;
    v11[3] = &unk_1002BC290;
    void v11[4] = v10;
    id v14 = v16;
    id v12 = *(id *)(a1 + 40);
    id v13 = *(id *)(a1 + 48);
    [v10 runAsynchronousTransactionName:"com.apple.transparencyd.validatePeer" block:v11];
  }
  _Block_object_dispose(v16, 8);
}

void sub_100062BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100062BC8(uint64_t a1)
{
  [*(id *)(a1 + 32) logStartEvent:@"validatePeerUri-Async"];
  uint64_t v2 = [*(id *)(a1 + 32) workloopContextStore];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) ktLogClient];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_100062CAC;
  v7[3] = &unk_1002BC268;
  void v7[4] = *(void *)(a1 + 32);
  [v2 validatePeerRequestId:v4 uri:v5 application:v3 logClient:v6 completionHandler:v7];
}

id sub_100062CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (a3) {
    return [v3 logFinishFailureEvent:@"validatePeerUri-Async" error:a3];
  }
  else {
    return [v3 logFinishSuccessEvent:@"validatePeerUri-Async"];
  }
}

void sub_100062F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100062F94(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v41 = 0;
  id v42 = &v41;
  uint64_t v43 = 0x3032000000;
  uint64_t v44 = sub_100061FF0;
  uint64_t v45 = sub_100062000;
  id v46 = 0;
  uint64_t v4 = [v3 uri];
  unsigned __int8 v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  if ((v5 & 1) == 0)
  {
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    id v16 = [v3 uri];
    uint64_t v17 = +[TransparencyError errorWithDomain:kTransparencyErrorInterface, -159, @"Request associated with UUID %@ does not have expected uri %@. Got %@", v14, v15, v16 code description];
    uint64_t v18 = *(void *)(*(void *)(a1 + 64) + 8);
    id v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;

    [*(id *)(a1 + 48) logFinishFailureEvent:@"validatePeerResult" error:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    id v20 = [objc_alloc((Class)KTVerifierResult) initWithUri:*(void *)(a1 + 32) application:0 ktResult:0];
    uint64_t v21 = (void *)v42[5];
    v42[5] = (uint64_t)v20;

    uint64_t v22 = v42[5];
    uint64_t v23 = *(void *)(a1 + 56);
    id v24 = [*(id *)(a1 + 48) cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    (*(void (**)(uint64_t, uint64_t, void *))(v23 + 16))(v23, v22, v24);
LABEL_7:

    goto LABEL_8;
  }
  if ([v3 type] && objc_msgSend(v3, "type") != (id)1)
  {
    uint64_t v25 = *(void *)(a1 + 40);
    id v26 = [v3 type];
    uint64_t v27 = +[TransparencyError errorWithDomain:kTransparencyErrorInterface, -124, @"Request associated with UUID %@ is not of expected type %llu. Got %lld.", v25, 0, v26 code description];
    uint64_t v28 = *(void *)(*(void *)(a1 + 64) + 8);
    id v29 = *(void **)(v28 + 40);
    *(void *)(v28 + 40) = v27;

    [*(id *)(a1 + 48) logFinishFailureEvent:@"validatePeerResult" error:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    id v30 = objc_alloc((Class)KTVerifierResult);
    uint64_t v31 = *(void *)(a1 + 32);
    long long v32 = [v3 application];
    id v33 = [v30 initWithUri:v31 application:v32 ktResult:0];
    id v34 = (void *)v42[5];
    v42[5] = (uint64_t)v33;

    uint64_t v35 = v42[5];
    uint64_t v36 = *(void *)(a1 + 56);
    id v24 = [*(id *)(a1 + 48) cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
    (*(void (**)(uint64_t, uint64_t, void *))(v36 + 16))(v36, v35, v24);
    goto LABEL_7;
  }
  id v6 = [*(id *)(a1 + 48) xpcContextStore];
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  unsigned __int8 v9 = [v3 application];
  uint64_t v10 = [*(id *)(a1 + 48) ktLogClient];
  uint64_t v11 = *(unsigned __int8 *)(a1 + 72);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  void v37[2] = sub_100063344;
  v37[3] = &unk_1002BC2E0;
  id v13 = *(void **)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  BOOL v39 = &v41;
  uint64_t v40 = v12;
  void v37[4] = *(void *)(a1 + 48);
  id v38 = v13;
  [v6 validatePeerRequestId:v7 uri:v8 application:v9 logClient:v10 revalidate:1 fetchNow:v11 completionHandler:v37];

LABEL_8:
  _Block_object_dispose(&v41, 8);
}

void sub_10006332C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100063344(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
  uint64_t v7 = *(void **)(a1 + 32);
  if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)) {
    [v7 logFinishFailureEvent:@"validatePeerResult"];
  }
  else {
    [v7 logFinishSuccessEvent:@"validatePeerResult"];
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = [*(id *)(a1 + 32) cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  (*(void (**)(uint64_t, uint64_t, void *))(v9 + 16))(v9, v8, v10);
}

void sub_1000637EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100063824(uint64_t a1)
{
  v12[0] = 0;
  v12[1] = v12;
  _DWORD v12[2] = 0x3032000000;
  v12[3] = sub_100061FF0;
  v12[4] = sub_100062000;
  id v13 = 0;
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  uint64_t v4 = [*(id *)(a1 + 32) xpcDataStore];
  id v11 = 0;
  unsigned __int8 v5 = [v2 addValidateRequest:v3 dataStore:v4 error:&v11];
  id v6 = v11;
  id v13 = v5;

  if ((+[TransparencySettings getBool:kTransparencyFlagDisableAsyncValidation] & 1) == 0)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000639B0;
    v8[3] = &unk_1002B7A58;
    v8[4] = v7;
    uint64_t v10 = v12;
    id v9 = *(id *)(a1 + 40);
    [v7 runAsynchronousTransactionName:"com.apple.transparencyd.validateEnrollment" block:v8];
  }
  _Block_object_dispose(v12, 8);
}

void sub_100063998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000639B0(uint64_t a1)
{
  [*(id *)(a1 + 32) logStartEvent:@"validateEnrollmentUri-Async"];
  uint64_t v2 = [*(id *)(a1 + 32) workloopContextStore];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  unsigned __int8 v5 = [*(id *)(a1 + 32) ktLogClient];
  id v6 = [*(id *)(a1 + 32) deps];
  uint64_t v7 = [v6 cloudRecords];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100063AC0;
  v8[3] = &unk_1002BC330;
  v8[4] = *(void *)(a1 + 32);
  [v2 validateEnrollmentRequestId:v4 application:v3 logClient:v5 cloudOptIn:v7 completionHandler:v8];
}

id sub_100063AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v5 = *(void **)(a1 + 32);
  if (a5) {
    return [v5 logFinishFailureEvent:@"validateEnrollmentUri-Async" error:a5];
  }
  else {
    return [v5 logFinishSuccessEvent:@"validateEnrollmentUri-Async"];
  }
}

void sub_100063CFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 uri];
  unsigned __int8 v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  if ((v5 & 1) == 0)
  {
    uint64_t v13 = kTransparencyErrorInterface;
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    id v16 = [v3 uri];
    uint64_t v17 = +[TransparencyError errorWithDomain:v13, -159, @"Request associated with UUID %@ does not have expected uri %@. Got %@", v14, v15, v16 code description];

LABEL_6:
    [*(id *)(a1 + 48) logFinishFailureEvent:@"validateEnrollmentUriResult" error:v17];
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 32);
    id v20 = [v3 verificationResult];
    uint64_t v21 = [*(id *)(a1 + 48) cleanseErrorForXPC:v17];
    (*(void (**)(uint64_t, uint64_t, id, void, void, void *))(v18 + 16))(v18, v19, v20, 0, 0, v21);

    goto LABEL_7;
  }
  if ([v3 type] != (id)2)
  {
    uint64_t v17 = +[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorInterface, -124, @"Request associated with UUID %@ is not of expected type %llu. Got %lld.", *(void *)(a1 + 40), 2, [v3 type]);
    goto LABEL_6;
  }
  id v6 = [*(id *)(a1 + 48) xpcContextStore];
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = [v3 application];
  id v9 = [*(id *)(a1 + 48) ktLogClient];
  uint64_t v10 = [*(id *)(a1 + 48) deps];
  id v11 = [v10 cloudRecords];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_100063F78;
  v22[3] = &unk_1002BC380;
  uint64_t v12 = *(void **)(a1 + 56);
  v22[4] = *(void *)(a1 + 48);
  id v24 = v12;
  id v23 = *(id *)(a1 + 32);
  [v6 validateEnrollmentRequestId:v7 application:v8 logClient:v9 cloudOptIn:v11 completionHandler:v22];

LABEL_7:
}

void sub_100063F78(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9 = *(void **)(a1 + 32);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  [v9 logFinishSuccessEvent:@"validateEnrollmentUriResult"];
  id v13 = [v12 verifiedAccountOptInState];

  BOOL v14 = v13 == (id)1;
  uint64_t v15 = [*(id *)(a1 + 32) deps];
  id v16 = [v15 logger];
  uint64_t v17 = +[NSDate date];
  [v16 setDateProperty:v17 forKey:off_10031E4D8];

  uint64_t v19 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  id v20 = [*(id *)(a1 + 32) cleanseErrorForXPC:v10];

  (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, id, id))(v18 + 16))(v18, v19, a2, v14, v11, v20);
}

id sub_100064214(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 logFinishSuccessEvent:@"GetLoggableDataForDeviceID"];
}

void sub_100064464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006447C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  unsigned __int8 v5 = [v3 xpcContextStore];
  id v8 = 0;
  [v5 ignoreFailure:v4 error:&v8];

  id v6 = v8;
  id v7 = v8;

  if (v7) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v6);
  }
}

void sub_1000648E4(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  unsigned __int8 v5 = *(void **)(a1 + 32);
  id v6 = a3;
  if (v11)
  {
    [v5 logFinishSuccessEvent:@"copyApplicationState"];
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = [v11 copyState];
    id v9 = [*(id *)(a1 + 32) cleanseErrorForXPC:v6];

    (*(void (**)(uint64_t, id, void *))(v7 + 16))(v7, v8, v9);
  }
  else
  {
    [v5 logFinishFailureEvent:@"copyApplicationState" error:v6];
    uint64_t v10 = *(void *)(a1 + 40);
    id v8 = [*(id *)(a1 + 32) cleanseErrorForXPC:v6];

    (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0, v8);
  }
}

void sub_100064B1C(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100064CB8(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100064E50(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000652B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v8 = a2;
  if (v8)
  {
    [*(id *)(a1 + 32) logFinishSuccessEvent:@"copyApplicationTranscript"];
    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = [v8 transcript];
    uint64_t v7 = [v6 serialize];
    (*(void (**)(uint64_t, void *, void))(v5 + 16))(v5, v7, 0);
  }
  else
  {
    id v6 = +[TransparencyError errorWithDomain:kTransparencyErrorInternal, -167, a3, @"Context for application %@ unavailable", *(void *)(a1 + 40) code underlyingError description];
    [*(id *)(a1 + 32) logFinishFailureEvent:@"copyApplicationTranscript" error:v6];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1000654A4(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  if (a2) {
    [v4 logFinishFailureEvent:@"forceConfigUpdate" error:v5];
  }
  else {
    [v4 logFinishSuccessEvent:@"forceConfigUpdate"];
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) cleanseErrorForXPC:v5];

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_1000656C4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v7 = v6;
  if (a3) {
    [v5 logFinishFailureEvent:@"forceApplicationConfig" error:v6];
  }
  else {
    [v5 logFinishSuccessEvent:@"forceApplicationConfig"];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100065A94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32)
    && ([v3 uri],
        id v5 = objc_claimAutoreleasedReturnValue(),
        unsigned __int8 v6 = [v5 isEqualToString:*(void *)(a1 + 32)],
        v5,
        (v6 & 1) == 0))
  {
    uint64_t v15 = kTransparencyErrorInterface;
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v18 = [v4 uri];
    uint64_t v19 = +[TransparencyError errorWithDomain:v15, -159, @"Request associated with UUID %@ does not have expected uri %@. Got %@", v16, v17, v18 code description];

    [*(id *)(a1 + 48) logFinishFailureEvent:@"forceValidateUUID" error:v19];
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = [*(id *)(a1 + 48) cleanseErrorForXPC:v19];
    (*(void (**)(uint64_t, uint64_t, void, void, void, void *))(v21 + 16))(v21, v20, 0, 0, 0, v22);
  }
  else
  {
    id v7 = [v4 type];
    if (v7 == (id)2)
    {
      id v23 = [*(id *)(a1 + 48) xpcContextStore];
      uint64_t v24 = *(void *)(a1 + 40);
      uint64_t v25 = [v4 application];
      id v26 = [*(id *)(a1 + 48) ktLogClient];
      uint64_t v27 = [*(id *)(a1 + 48) deps];
      uint64_t v28 = [v27 cloudRecords];
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472;
      void v36[2] = sub_100065F3C;
      v36[3] = &unk_1002BC380;
      id v29 = *(void **)(a1 + 56);
      v36[4] = *(void *)(a1 + 48);
      id v38 = v29;
      id v37 = v4;
      [v23 validateEnrollmentRequestId:v24 application:v25 logClient:v26 cloudOptIn:v28 completionHandler:v36];

      BOOL v14 = v38;
      goto LABEL_9;
    }
    if (v7 == (id)1)
    {
      uint64_t v30 = *(void *)(a1 + 56);
      uint64_t v31 = [v4 uri];
      long long v32 = *(void **)(a1 + 48);
      id v33 = NSStringFromSelector(*(SEL *)(a1 + 64));
      id v34 = +[NSString stringWithFormat:@"KTValidateTypeSelf in %@", v33];
      uint64_t v35 = [v32 unimplementedError:v34];
      (*(void (**)(uint64_t, void *, void, void, void, void *))(v30 + 16))(v30, v31, 0, 0, 0, v35);

      goto LABEL_11;
    }
    if (!v7)
    {
      id v8 = [*(id *)(a1 + 48) xpcContextStore];
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      id v11 = [v4 application];
      id v12 = [*(id *)(a1 + 48) ktLogClient];
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      void v39[2] = sub_100065E2C;
      v39[3] = &unk_1002BC4D0;
      id v13 = *(void **)(a1 + 56);
      v39[4] = *(void *)(a1 + 48);
      id v41 = v13;
      id v40 = v4;
      [v8 validatePeerRequestId:v9 uri:v10 application:v11 logClient:v12 revalidate:1 fetchNow:0 completionHandler:v39];

      BOOL v14 = v41;
LABEL_9:
    }
  }
LABEL_11:
}

void sub_100065E2C(uint64_t a1, void *a2, void *a3)
{
  unsigned __int8 v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"forceValidateUUID" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"forceValidateUUID"];
  }
  uint64_t v9 = *(void *)(a1 + 48);
  id v14 = [*(id *)(a1 + 40) uri];
  id v10 = [v8 succeed];
  id v11 = [v8 optedIn];
  id v12 = [v8 loggableDatas];

  id v13 = [*(id *)(a1 + 32) cleanseErrorForXPC:v7];

  (*(void (**)(uint64_t, id, id, id, void *, void *))(v9 + 16))(v9, v14, v10, v11, v12, v13);
}

void sub_100065F3C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v10 = *(void **)(a1 + 32);
  id v11 = a5;
  id v12 = a4;
  id v13 = a3;
  if (a5) {
    [v10 logFinishFailureEvent:@"forceValidateUUID" error:v11];
  }
  else {
    [v10 logFinishSuccessEvent:@"forceValidateUUID"];
  }
  id v14 = [v13 verifiedAccountOptInState];

  uint64_t v15 = *(void *)(a1 + 48);
  id v17 = [*(id *)(a1 + 40) uri];
  uint64_t v16 = [*(id *)(a1 + 32) cleanseErrorForXPC:v11];

  (*(void (**)(uint64_t, id, uint64_t, BOOL, id, void *))(v15 + 16))(v15, v17, a2, v14 == (id)1, v12, v16);
}

void sub_1000660F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = [*(id *)(a1 + 32) cleanseErrorForXPC:a6];
  (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a3, v8);
}

void sub_100066320(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setVerificationResult:2];
  [v3 setResponseTime:0];
  [v3 setQueryResponse:0];

  id v4 = [*(id *)(a1 + 32) xpcDataStore];
  id v9 = 0;
  unsigned __int8 v5 = [v4 persistWithError:&v9];
  id v6 = v9;

  if ((v5 & 1) == 0)
  {
    if (qword_100326840 != -1) {
      dispatch_once(&qword_100326840, &stru_1002BC540);
    }
    uint64_t v7 = qword_100326848;
    if (os_log_type_enabled((os_log_t)qword_100326848, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to save request reset to pending: %@", buf, 0xCu);
    }
    id v8 = [*(id *)(a1 + 32) xpcDataStore];
    [v8 reportCoreDataPersistEventForLocation:@"resetToPending" underlyingError:v6];
  }
}

void sub_100066478(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100066684(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000666C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_100326840 != -1) {
    dispatch_once(&qword_100326840, &stru_1002BC5A8);
  }
  id v4 = qword_100326848;
  if (os_log_type_enabled((os_log_t)qword_100326848, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "runDutyCycle done: %@", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }
}

void sub_1000667C0(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006704C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_100067078(void *a1)
{
  if (qword_100326840 != -1) {
    dispatch_once(&qword_100326840, &stru_1002BC5C8);
  }
  uint64_t v2 = qword_100326848;
  if (os_log_type_enabled((os_log_t)qword_100326848, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = a1[7];
    *(_DWORD *)buf = 134217984;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to get gossip message within %fs", buf, 0xCu);
  }
  id v4 = +[TransparencyError errorWithDomain:kTransparencyErrorNetwork, -151, @"failed to get gossip message within %fs", a1[7] code description];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[5] + 8) + 32));
  uint64_t v5 = *(void *)(a1[6] + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  if (v6)
  {
    *(void *)(v5 + 40) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[5] + 8) + 32));
    (*(void (**)(void))(a1[4] + 16))();
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[5] + 8) + 32));
  }
}

void sub_1000671E0(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100067224(void *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)a1[4];
  if (!v10 || v5) {
    [v6 logFinishFailureEvent:@"retrieveCurrentVerifiedTLTSTH" error:v5];
  }
  else {
    [v6 logFinishSuccessEvent:@"retrieveCurrentVerifiedTLTSTH"];
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[6] + 8) + 32));
  int v7 = *(NSObject **)(*(void *)(a1[7] + 8) + 40);
  if (v7)
  {
    dispatch_source_cancel(v7);
    uint64_t v8 = *(void *)(a1[7] + 8);
    id v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[6] + 8) + 32));
    (*(void (**)(void))(a1[5] + 16))();
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[6] + 8) + 32));
  }
}

void sub_100067620(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10006764C(void *a1)
{
  if (qword_100326840 != -1) {
    dispatch_once(&qword_100326840, &stru_1002BC638);
  }
  uint64_t v2 = qword_100326848;
  if (os_log_type_enabled((os_log_t)qword_100326848, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = a1[7];
    *(_DWORD *)buf = 134217984;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to get gossip message within %fs", buf, 0xCu);
  }
  id v4 = +[TransparencyError errorWithDomain:kTransparencyErrorNetwork, -151, @"failed to get gossip message within %fs", a1[7] code description];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[5] + 8) + 32));
  uint64_t v5 = *(void *)(a1[6] + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  if (v6)
  {
    *(void *)(v5 + 40) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[5] + 8) + 32));
    (*(void (**)(void))(a1[4] + 16))();
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[5] + 8) + 32));
  }
}

void sub_1000677B0(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000677F4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  id v8 = v3;
  if (v3) {
    [v4 logFinishFailureEvent:@"receivedSTHsFromPeers" error:nil];
  }
  else {
    [v4 logFinishSuccessEvent:@"receivedSTHsFromPeers"];
  }
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1[6] + 8) + 32));
  uint64_t v5 = *(NSObject **)(*(void *)(a1[7] + 8) + 40);
  if (v5)
  {
    dispatch_source_cancel(v5);
    uint64_t v6 = *(void *)(a1[7] + 8);
    int v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[6] + 8) + 32));
    (*(void (**)(void))(a1[5] + 16))();
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1[6] + 8) + 32));
  }
}

void sub_1000679F4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = *(void **)(a1 + 32);
  id v11 = a5;
  id v12 = a4;
  id v13 = a3;
  id v14 = a2;
  if (a5) {
    [v10 logFinishFailureEvent:@"accountKeySignData" error:v11];
  }
  else {
    [v10 logFinishSuccessEvent:@"accountKeySignData"];
  }
  uint64_t v15 = *(void *)(a1 + 40);
  id v16 = +[SecXPCHelper cleanseErrorForXPC:v11];

  (*(void (**)(uint64_t, id, id, id, id))(v15 + 16))(v15, v14, v13, v12, v16);
}

void sub_100067C00(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"accountKeyRoll" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"accountKeyRoll"];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = +[SecXPCHelper cleanseErrorForXPC:v7];

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

uint64_t sub_100067D7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000680C8(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006810C(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100068150(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100068194(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100068344(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100068450(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = +[SecXPCHelper cleanseErrorForXPC:a3];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100068584(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = +[SecXPCHelper cleanseErrorForXPC:a3];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_1000686B8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = +[SecXPCHelper cleanseErrorForXPC:a3];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_1000687EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[SecXPCHelper cleanseErrorForXPC:a2];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100068900(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = +[SecXPCHelper cleanseErrorForXPC:a3];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100068A64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[SecXPCHelper cleanseErrorForXPC:a2];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100068BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = +[SecXPCHelper cleanseErrorForXPC:a2];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100068CD8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = +[SecXPCHelper cleanseErrorForXPC:a3];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100068E3C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = +[SecXPCHelper cleanseErrorForXPC:a3];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100068FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  +[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, v4);
}

void sub_1000690DC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = +[SecXPCHelper cleanseErrorForXPC:a3];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_10006922C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  id v6 = +[SecXPCHelper cleanseErrorForXPC:a3];
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);
}

void sub_100069390(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  +[SecXPCHelper cleanseErrorForXPC:](SecXPCHelper, "cleanseErrorForXPC:");
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, a2, v4);
}

void sub_100069664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100069688(uint64_t a1, unsigned int a2, void *a3, void *a4)
{
  id v14 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v9 = objc_alloc((Class)KTOptInState);
  id v10 = [*(id *)(a1 + 32) application];
  id v11 = [v9 initWithApplication:v10];

  if (v7)
  {
    [v11 setState:2];
    [WeakRetained logFinishFailureEvent:@"GetOptIn" error:v7];
  }
  else
  {
    [WeakRetained logFinishSuccessEvent:@"GetOptIn"];
    [v11 setState:a2];
    [v11 setSmtTimestamp:v14];
  }
  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = +[SecXPCHelper cleanseErrorForXPC:v7];

  (*(void (**)(uint64_t, id, void *))(v12 + 16))(v12, v11, v13);
}

void sub_100069914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100069938(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = (id *)(a1 + 40);
  id v8 = a4;
  id v9 = a3;
  id WeakRetained = objc_loadWeakRetained(v7);
  id v13 = WeakRetained;
  if (v8) {
    [WeakRetained logFinishFailureEvent:@"SetOptIn" error:v8];
  }
  else {
    [WeakRetained logFinishSuccessEvent:@"SetOptIn"];
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = +[SecXPCHelper cleanseErrorForXPC:v8];

  (*(void (**)(uint64_t, uint64_t, id, void *))(v11 + 16))(v11, a2, v9, v12);
}

void sub_100069C1C(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"GetStatus" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"GetStatus"];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v11 = [v8 simpleStatus];

  id v10 = +[SecXPCHelper cleanseErrorForXPC:v7];

  (*(void (**)(uint64_t, id, void *))(v9 + 16))(v9, v11, v10);
}

void sub_100069DD8(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"GetSelfStatus" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"GetSelfStatus"];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = +[SecXPCHelper cleanseErrorForXPC:v7];

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

void sub_100069FA8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = *(void **)(a1 + 32);
  id v8 = a4;
  id v9 = a3;
  if (a2 == 1) {
    [v7 logFinishSuccessEvent:@"GetKTErrorForEventId"];
  }
  else {
    [v7 logFinishFailureEvent:@"GetKTErrorForEventId" error:v8];
  }
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = +[SecXPCHelper cleanseErrorForXPC:v8];

  (*(void (**)(uint64_t, uint64_t, id, id))(v10 + 16))(v10, a2, v9, v11);
}

void sub_10006A180(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  if (a2) {
    [v4 logFinishFailureEvent:@"IgnoreKTErrorEvent" error:v5];
  }
  else {
    [v4 logFinishSuccessEvent:@"IgnoreKTErrorEvent"];
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = +[SecXPCHelper cleanseErrorForXPC:v5];

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_10006A3A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"getAuditorReport" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"getAuditorReport"];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = +[SecXPCHelper cleanseErrorForXPC:v7];

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

void sub_10006A5A4(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  if (a2) {
    [v4 logFinishFailureEvent:@"makeAuditorReport" error:v5];
  }
  else {
    [v4 logFinishSuccessEvent:@"makeAuditorReport"];
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = +[SecXPCHelper cleanseErrorForXPC:v5];

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_10006A998(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006A9DC(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006AF5C(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006AFA0(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006B2A4(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006B2E8(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006B5AC(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006B5F0(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006B8B4(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006B8F8(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006BAF8(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006BB3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (qword_100326840 != -1) {
      dispatch_once(&qword_100326840, &stru_1002BCA60);
    }
    id v7 = qword_100326848;
    if (os_log_type_enabled((os_log_t)qword_100326848, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v32 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error fetching opt in state to check static key store mapping %{public}@", buf, 0xCu);
    }
  }
  if ([v5 state])
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    id v30 = 0;
    id v10 = [v8 ensureContactFieldsPresent:v9 error:&v30];
    id v11 = v30;
    if (!v10)
    {
      uint64_t v26 = *(void *)(a1 + 48);
      uint64_t v22 = [*(id *)(a1 + 32) cleanseErrorForXPC:v11];
      (*(void (**)(uint64_t, void, void *))(v26 + 16))(v26, 0, v22);
      goto LABEL_23;
    }
    uint64_t v12 = [*(id *)(a1 + 32) staticKeyController];
    id v13 = [v10 externalURI];
    id v29 = v11;
    id v14 = [v12 findStaticKeyByContactExternalURI:v13 error:&v29];
    id v15 = v29;

    if (!v14)
    {
      if (qword_100326840 != -1) {
        dispatch_once(&qword_100326840, &stru_1002BCAA0);
      }
      id v16 = (void *)qword_100326848;
      if (os_log_type_enabled((os_log_t)qword_100326848, OS_LOG_TYPE_ERROR))
      {
        id v17 = v16;
        uint64_t v18 = [v10 externalURI];
        *(_DWORD *)buf = 138412546;
        id v32 = v18;
        __int16 v33 = 2112;
        id v34 = v15;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "findStaticKeyStoreMappingByContactExternalURI: %@ error: %@", buf, 0x16u);
      }
      uint64_t v19 = [*(id *)(a1 + 32) staticKeyController];
      uint64_t v20 = [v10 identifier];
      id v28 = v15;
      id v14 = [v19 findStaticKeyByContactIdentifier:v20 error:&v28];
      id v11 = v28;

      if (!v14)
      {
        uint64_t v22 = 0;
        goto LABEL_16;
      }
      id v15 = v11;
    }
    uint64_t v21 = [*(id *)(a1 + 32) staticKeyController];
    id v27 = v15;
    uint64_t v22 = [v21 validateStoreEntry:v14 error:&v27];
    id v11 = v27;

LABEL_16:
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = [*(id *)(a1 + 32) cleanseErrorForXPC:v11];
    (*(void (**)(uint64_t, void *, void *))(v23 + 16))(v23, v22, v24);

LABEL_23:
    goto LABEL_24;
  }
  if (qword_100326840 != -1) {
    dispatch_once(&qword_100326840, &stru_1002BCA80);
  }
  uint64_t v25 = qword_100326848;
  if (os_log_type_enabled((os_log_t)qword_100326848, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Ignoring static key store entry request because user is not opted into KT", buf, 2u);
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_24:
}

void sub_10006BF00(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006BF44(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006BF88(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006C19C(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006C390(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006C584(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006C840(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006C884(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006CB00(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006CB44(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_10006D218(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 tapToRadar];
  [v3 clearTapToRadarWithUnique:*(void *)(a1 + 32)];

  id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v4();
}

void sub_10006D408(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) result];
  uint64_t v3 = [*(id *)(a1 + 32) error];
  (*(void (**)(uint64_t, id, void *))(v2 + 16))(v2, v4, v3);
}

void sub_10006D71C(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006D848(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void **)(a1 + 32);
  id v7 = a3;
  id v8 = a2;
  if (a3) {
    [v6 logFinishFailureEvent:@"fetchBatchQuery" error:v7];
  }
  else {
    [v6 logFinishSuccessEvent:@"fetchBatchQuery"];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = +[SecXPCHelper cleanseErrorForXPC:v7];

  (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v8, v10);
}

void sub_10006DECC(uint64_t a1, void *a2, uint64_t a3)
{
  id v7 = a2;
  id v5 = *(void **)(a1 + 32);
  if (a3)
  {
    [v5 logFinishFailureEvent:@"triggerTapToRadarNotification" error:a3];
  }
  else
  {
    [v5 logFinishSuccessEvent:@"triggerTapToRadarNotification"];
    id v6 = [v7 tapToRadar];
    [v6 presentTapToRadarError:@"triggerTapToRadarNotification" title:@"Contact Key Verification Error" message:@"Please attach sysdiagnose from all devices"];
  }
}

uint64_t sub_10006E018(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10006E234(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10006E328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006E340(uint64_t a1, uint64_t a2)
{
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addEntriesFromDictionary:a2];
  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:@"true" forKeyedSubscript:@"isFallback"];
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  id v16 = 0;
  id v4 = +[NSJSONSerialization dataWithJSONObject:v3 options:1 error:&v16];
  id v5 = v16;
  id v15 = 0;
  id v6 = +[TransparencyFileSupport transparencyFilesPath:&v15];
  id v7 = v15;
  id v8 = [v6 URLByAppendingPathComponent:@"transparency_start.log" isDirectory:0];

  uint64_t v9 = +[NSFileManager defaultManager];
  id v10 = [v8 relativePath];
  NSFileAttributeKey v19 = NSFileProtectionKey;
  NSFileProtectionType v20 = NSFileProtectionNone;
  id v11 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
  unsigned __int8 v12 = [v9 createFileAtPath:v10 contents:v4 attributes:v11];

  if ((v12 & 1) == 0)
  {
    if (qword_100326840 != -1) {
      dispatch_once(&qword_100326840, &stru_1002BCCB0);
    }
    id v13 = qword_100326848;
    if (os_log_type_enabled((os_log_t)qword_100326848, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "transparencyd: create fallback sysdiagnose error %@", buf, 0xCu);
    }
  }
  id v14 = [v8 absoluteString];
  [v4 writeToFile:v14 atomically:1];
}

void sub_10006E594(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006E9A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006EAF0;
  block[3] = &unk_1002B7D58;
  id v7 = *(NSObject **)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  id v8 = v5;
  id v15 = v8;
  dispatch_sync(v7, block);
  if (v6)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_10006EB48;
    v10[3] = &unk_1002B7D58;
    uint64_t v9 = *(NSObject **)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    id v12 = v6;
    dispatch_sync(v9, v10);
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  }
}

id sub_10006EAF0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if ([*(id *)(a1 + 40) state] == (id)1) {
    CFStringRef v2 = @"true";
  }
  else {
    CFStringRef v2 = @"false";
  }

  return [v1 setValue:v2 forKey:@"optedIn"];
}

void sub_10006EB48(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) description];
  [*(id *)(a1 + 32) setObject:v2 forKeyedSubscript:@"error"];
}

void sub_10006EBA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10006EC60;
  v6[3] = &unk_1002B7D58;
  id v4 = *(NSObject **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v8 = v3;
  id v5 = v3;
  dispatch_sync(v4, v6);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

id sub_10006EC60(uint64_t a1)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"stateMachine"];
}

void sub_10006EC70(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[NSMutableArray array];
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v53 = v3;
  id v5 = [v3 registrationData];
  id v6 = [v5 allValues];

  id obj = v6;
  id v7 = [v6 countByEnumeratingWithState:&v58 objects:v62 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v59;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v59 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v58 + 1) + 8 * (void)v10);
        id v12 = +[NSMutableDictionary dictionary];
        id v13 = [v11 application];
        [v12 setObject:v13 forKeyedSubscript:@"app"];

        id v14 = [v11 signature];
        id v15 = [v14 kt_hexString];
        [v12 setObject:v15 forKeyedSubscript:@"signature"];

        id v16 = [v11 publicKey];
        id v17 = [v16 kt_hexString];
        [v12 setObject:v17 forKeyedSubscript:@"publicKey"];

        id v18 = [v11 orderedTimestamp];
        NSFileAttributeKey v19 = [v18 kt_toISO_8601_UTCString];
        [v12 setObject:v19 forKeyedSubscript:@"orderedTimestamp"];

        NSFileProtectionType v20 = [v11 tbsKTIDSRegistrationData];
        uint64_t v21 = [v20 kt_hexString];
        [v12 setObject:v21 forKeyedSubscript:@"tbs"];

        uint64_t v22 = [v11 createdAt];
        uint64_t v23 = [v22 description];
        [v12 setObject:v23 forKeyedSubscript:@"createdAt"];

        uint64_t v24 = [v11 signedAt];
        uint64_t v25 = [v24 description];
        [v12 setObject:v25 forKeyedSubscript:@"signedAt"];

        uint64_t v26 = [v11 uploadedAt];
        id v27 = [v26 description];
        [v12 setObject:v27 forKeyedSubscript:@"uploadedAt"];

        id v28 = [v11 pushToken];
        id v29 = [v28 kt_hexString];
        [v12 setObject:v29 forKeyedSubscript:@"pushToken"];

        uint64_t v30 = [v11 createdAt];
        if (v30)
        {
          uint64_t v31 = (void *)v30;
          id v32 = [v11 signedAt];

          if (v32)
          {
            __int16 v33 = [v11 signedAt];
            id v34 = [v11 createdAt];
            [v33 timeIntervalSinceDate:v34];
            double v36 = v35;

            id v37 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", +[SFAnalytics fuzzyInteger:(uint64_t)v36]);
            [v12 setObject:v37 forKeyedSubscript:@"delay"];
          }
        }
        uint64_t v38 = [v11 signedAt];
        if (v38)
        {
          BOOL v39 = (void *)v38;
          id v40 = [v11 uploadedAt];

          if (v40)
          {
            id v41 = [v11 uploadedAt];
            id v42 = [v11 signedAt];
            [v41 timeIntervalSinceDate:v42];
            double v44 = v43;

            uint64_t v45 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", +[SFAnalytics fuzzyInteger:(uint64_t)v44]);
            [v12 setObject:v45 forKeyedSubscript:@"networkDelay"];
          }
        }
        id v46 = [*(id *)(a1 + 32) deps];
        signed int v47 = [v46 settings];
        unsigned int v48 = [v47 allowsInternalSecurityPolicies];

        if (v48)
        {
          uint64_t v49 = [v11 altDSID];
          [v12 setObject:v49 forKeyedSubscript:@"altDSID"];

          id v50 = [v11 dsid];
          [v12 setObject:v50 forKeyedSubscript:@"dsid"];
        }
        [v4 addObject:v12];

        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [obj countByEnumeratingWithState:&v58 objects:v62 count:16];
    }
    while (v8);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10006F220;
  block[3] = &unk_1002B7D58;
  uint64_t v51 = *(NSObject **)(a1 + 40);
  id v56 = *(id *)(a1 + 48);
  id v57 = v4;
  id v52 = v4;
  dispatch_sync(v51, block);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

id sub_10006F220(uint64_t a1)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"registration"];
}

void sub_10006F230(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = +[NSMutableDictionary dictionary];
  if (!v4)
  {
    if (qword_100326840 != -1) {
      dispatch_once(&qword_100326840, &stru_1002BCD70);
    }
    id v7 = qword_100326848;
    if (os_log_type_enabled((os_log_t)qword_100326848, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v35 = v5;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "KTIDStaticKeyStore listStaticKey: %@", buf, 0xCu);
    }
    [v6 setObject:&__kCFBooleanTrue forKeyedSubscript:@"failed"];
    id v8 = [v5 description];
    [v6 setObject:v8 forKeyedSubscript:@"error"];
  }
  uint64_t v9 = +[NSMutableDictionary dictionary];
  if (+[TransparencyAnalytics hasInternalDiagnostics])
  {
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v10 = v4;
    id v11 = [v10 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v11)
    {
      id v12 = v11;
      id v19 = v5;
      uint64_t v13 = *(void *)v30;
      do
      {
        for (i = 0; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v30 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          id v16 = [v15 publicAccountIdentity];
          if (v16)
          {
            id v17 = *(void **)(a1 + 32);
            v24[0] = _NSConcreteStackBlock;
            v24[1] = 3221225472;
            v24[2] = sub_10006F5F4;
            v24[3] = &unk_1002BCDB8;
            id v25 = v9;
            uint64_t v26 = v15;
            id v27 = v6;
            id v28 = v16;
            [v17 findStaticKeyStoreMappingByKey:v15 complete:v24];
          }
        }
        id v12 = [v10 countByEnumeratingWithState:&v29 objects:v33 count:16];
      }
      while (v12);
      id v5 = v19;
    }
  }
  else
  {
    +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v6 count]);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    [v9 setObject:v10 forKeyedSubscript:@"peers"];
  }

  if ([v6 count])
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10006F830;
    block[3] = &unk_1002B7D58;
    id v18 = *(NSObject **)(a1 + 40);
    id v22 = *(id *)(a1 + 48);
    id v23 = v6;
    dispatch_sync(v18, block);
  }
}

void sub_10006F5B0(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10006F5F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = [v5 mappings];
    [*(id *)(a1 + 32) setObject:v7 forKeyedSubscript:@"mappings"];

    id v8 = [v5 contactIdentifier];
    [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"contactIdentifier"];

    uint64_t v9 = [v5 contactExternalURI];
    [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:@"contactExternalURI"];

    id v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v5 valid]);
    id v11 = *(void **)(a1 + 32);
    CFStringRef v12 = @"valid";
  }
  else
  {
    if (qword_100326840 != -1) {
      dispatch_once(&qword_100326840, &stru_1002BCD90);
    }
    uint64_t v13 = qword_100326848;
    if (os_log_type_enabled((os_log_t)qword_100326848, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 40);
      int v15 = 138412546;
      uint64_t v16 = v14;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "KTIDStaticKeyStore findByIdentifier: %@: %@", (uint8_t *)&v15, 0x16u);
    }
    [*(id *)(a1 + 32) setObject:&__kCFBooleanTrue forKeyedSubscript:@"failed"];
    id v10 = [v6 description];
    id v11 = *(void **)(a1 + 32);
    CFStringRef v12 = @"error";
  }
  [v11 setObject:v10 forKeyedSubscript:v12];

  [*(id *)(a1 + 48) setObject:*(void *)(a1 + 32) forKeyedSubscript:*(void *)(a1 + 56)];
}

void sub_10006F7EC(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10006F830(uint64_t a1)
{
  return [*(id *)(a1 + 32) setObject:*(void *)(a1 + 40) forKeyedSubscript:@"static_key_peers"];
}

void sub_10006F840(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_10006F884(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10006F9D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[NSMutableArray array];
  if (!v5 || v6)
  {
    uint64_t v21 = *(void *)(a1 + 48);
    id v22 = +[SecXPCHelper cleanseErrorForXPC:v6];
    (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0, v22);
  }
  else
  {
    id v23 = 0;
    id v24 = v5;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id obj = v5;
    id v8 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v26 = *(void *)v31;
      do
      {
        id v10 = 0;
        do
        {
          id v11 = v7;
          if (*(void *)v31 != v26) {
            objc_enumerationMutation(obj);
          }
          CFStringRef v12 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v10);
          id v13 = objc_alloc_init((Class)KTDeviceStatus);
          [v13 setIdms:v12];
          id v14 = [v12 pushToken];
          int v15 = +[NSData kt_dataWithHexString:](NSData, "kt_dataWithHexString:", [v14 UTF8String]);

          uint64_t v16 = [*(id *)(a1 + 32) xpcDataStore];
          uint64_t v17 = *(void *)(a1 + 40);
          id v29 = 0;
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472;
          v27[2] = sub_10006FC94;
          v27[3] = &unk_1002BCE28;
          id v18 = v13;
          id v28 = v18;
          unsigned __int8 v19 = [v16 performAndWaitForDeviceId:v15 application:v17 error:&v29 block:v27];
          id v20 = v29;

          if ((v19 & 1) == 0) {
            [v18 setLoggableDataError:v20];
          }
          id v7 = v11;
          [v11 addObject:v18, v23, v24];

          id v10 = (char *)v10 + 1;
        }
        while (v9 != v10);
        id v9 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
      }
      while (v9);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    id v6 = v23;
    id v5 = v24;
  }
}

id sub_10006FC94(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) setLoggableData:a2];
}

uint64_t sub_10006FD4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10006FFA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000700CC(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  id v5 = a2;
  if (a2) {
    [v4 logFinishFailureEvent:@"initiateQueryForUris" error:v5];
  }
  else {
    [v4 logFinishSuccessEvent:@"initiateQueryForUris"];
  }
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = [*(id *)(a1 + 32) cleanseErrorForXPC:v5];

  (*(void (**)(uint64_t, id))(v6 + 16))(v6, v7);
}

void sub_1000702A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [*(id *)(a1 + 32) cleanseErrorForXPC:a2];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100070B58(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (qword_100326840 != -1) {
    dispatch_once(&qword_100326840, &stru_1002BCEB8);
  }
  id v3 = qword_100326848;
  if (os_log_type_enabled((os_log_t)qword_100326848, OS_LOG_TYPE_INFO))
  {
    int v4 = 138412290;
    id v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "uploadedDeviceSignature:tbs:complete: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_100070C28(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10007101C(id a1)
{
  qword_100326848 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100071AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100071B04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100071B14(uint64_t a1)
{
}

void sub_100071B1C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = a2;
  LOBYTE(v3) = [v3 verifyInclusionProofDownloadRecord:v5 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = (_BYTE)v3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    if (qword_100326850 != -1) {
      dispatch_once(&qword_100326850, &stru_1002BCF18);
    }
    uint64_t v6 = qword_100326858;
    if (os_log_type_enabled((os_log_t)qword_100326858, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      uint64_t v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "revision log inclusion proof downloadId %{public}@: verification succeeded", buf, 0xCu);
    }
    id v8 = [*(id *)(a1 + 32) logClient];
    id v9 = [v5 downloadId];

    [v8 deleteDownloadId:v9];
  }
  else
  {
    if (qword_100326850 != -1) {
      dispatch_once(&qword_100326850, &stru_1002BCEF8);
    }
    id v10 = qword_100326858;
    if (os_log_type_enabled((os_log_t)qword_100326858, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v25 = v11;
      __int16 v26 = 2112;
      uint64_t v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "failed to verify inclusion proof downloadId %{public}@: %@", buf, 0x16u);
    }
    id v8 = [*(id *)(a1 + 32) dataStore];
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    id v22 = *(id *)(v13 + 40);
    [v8 failHeadDownloadRecord:v5];

    id v14 = v22;
    id v9 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v14;
  }

  uint64_t v15 = [*(id *)(a1 + 32) dataStore];
  uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8);
  id v21 = *(id *)(v16 + 40);
  unsigned __int8 v17 = [v15 persistWithError:&v21];
  objc_storeStrong((id *)(v16 + 40), v21);

  if ((v17 & 1) == 0)
  {
    if (qword_100326850 != -1) {
      dispatch_once(&qword_100326850, &stru_1002BCF38);
    }
    uint64_t v18 = qword_100326858;
    if (os_log_type_enabled((os_log_t)qword_100326858, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v25 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "failed to save inclusion proof results: %@", buf, 0xCu);
    }
    id v20 = [*(id *)(a1 + 32) dataStore];
    [v20 reportCoreDataPersistEventForLocation:@"handleInclusionDownload" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
}

void sub_100071E38(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100071E7C(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100071EC0(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100071F04(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100072214(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100072258(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000724FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100072528(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v4 + 40);
  id v5 = a2;
  id v6 = [v3 verifyConsistencyProofDownloadRecord:v5 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v6;
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) == 1)
  {
    if (qword_100326850 != -1) {
      dispatch_once(&qword_100326850, &stru_1002BD000);
    }
    uint64_t v7 = qword_100326858;
    if (os_log_type_enabled((os_log_t)qword_100326858, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543362;
      uint64_t v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "consistency proof downloadId %{public}@: verification succeeded", buf, 0xCu);
    }
    id v9 = [*(id *)(a1 + 32) logClient];
    id v10 = [v5 downloadId];

    [v9 deleteDownloadId:v10];
    uint64_t v11 = [*(id *)(a1 + 32) contextStore];
    [v11 clearGossip];
  }
  else
  {
    if (qword_100326850 != -1) {
      dispatch_once(&qword_100326850, &stru_1002BCFE0);
    }
    uint64_t v12 = qword_100326858;
    if (os_log_type_enabled((os_log_t)qword_100326858, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v26 = v13;
      __int16 v27 = 2112;
      uint64_t v28 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "failed to verify consistency proof for downloadId %{public}@: %@", buf, 0x16u);
    }
    uint64_t v11 = [*(id *)(a1 + 32) dataStore];
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    id v23 = *(id *)(v15 + 40);
    [v11 failHeadDownloadRecord:v5];

    objc_storeStrong((id *)(v15 + 40), v23);
  }

  uint64_t v16 = [*(id *)(a1 + 32) dataStore];
  uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
  id v22 = *(id *)(v17 + 40);
  unsigned __int8 v18 = [v16 persistWithError:&v22];
  objc_storeStrong((id *)(v17 + 40), v22);

  if ((v18 & 1) == 0)
  {
    if (qword_100326850 != -1) {
      dispatch_once(&qword_100326850, &stru_1002BD020);
    }
    uint64_t v19 = qword_100326858;
    if (os_log_type_enabled((os_log_t)qword_100326858, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "failed to save consistency proof results: %@", buf, 0xCu);
    }
    id v21 = [*(id *)(a1 + 32) dataStore];
    [v21 reportCoreDataPersistEventForLocation:@"handleConsistencyDownload" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
}

void sub_100072858(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10007289C(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000728E0(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100072924(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100072D7C(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100072DC0(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100072E04(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100072E48(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100073E10(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100073E54(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100073E98(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100073EDC(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100073F20(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100073F64(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100073FA8(id a1)
{
  qword_100326858 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100074444(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100074488(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100074A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t sub_100074AAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100074ABC(uint64_t a1)
{
}

void sub_100074AC4(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100074B08(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    if (qword_100326860 != -1) {
      dispatch_once(&qword_100326860, &stru_1002BD220);
    }
    id v10 = qword_100326868;
    if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 141558530;
      uint64_t v51 = 1752392040;
      __int16 v52 = 2112;
      id v53 = v7;
      __int16 v54 = 2112;
      id v55 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "verification failed for %{mask.hash}@: %@", buf, 0x20u);
    }
    id v11 = objc_alloc((Class)KTVerifierResult);
    id v12 = [*(id *)(a1 + 32) application];
    id v13 = [v11 initWithUri:v7 application:v12 failure:v9];
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;
LABEL_7:

    goto LABEL_25;
  }
  id v16 = [*(id *)(a1 + 32) getUnsigned:"verificationResult"];
  uint64_t v17 = *(void *)(a1 + 72);
  unsigned __int8 v18 = *(void **)(a1 + 40);
  uint64_t v19 = [*(id *)(a1 + 32) accountKey];
  uint64_t v20 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) loggableDatas];
  id v21 = [*(id *)(a1 + 32) idsResponseTime];
  id v22 = [*(id *)(a1 + 48) metadata];
  id v49 = 0;
  id v23 = [v18 validateAndReportPeerOrEnroll:v7 type:v17 transparentData:v8 accountKey:v19 loggableDatas:v20 initialResult:v16 idsResponseTime:v21 responseMetadata:v22 error:&v49];
  id v12 = v49;

  if (v23 == (id)1)
  {
    if (qword_100326860 != -1) {
      dispatch_once(&qword_100326860, &stru_1002BD240);
    }
    id v9 = 0;
    id v24 = (void *)qword_100326868;
    if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(void **)(a1 + 32);
      uint64_t v26 = v24;
      __int16 v27 = [v25 verificationId];
      *(_DWORD *)buf = 138543362;
      uint64_t v51 = (uint64_t)v27;
      uint64_t v28 = "Validate peer succeeded for verificationId %{public}@";
      id v29 = v26;
      os_log_type_t v30 = OS_LOG_TYPE_DEFAULT;
      uint32_t v31 = 12;
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v29, v30, v28, buf, v31);
    }
  }
  else
  {
    if (qword_100326860 != -1) {
      dispatch_once(&qword_100326860, &stru_1002BD260);
    }
    id v9 = 0;
    long long v32 = (void *)qword_100326868;
    if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_ERROR))
    {
      long long v33 = *(void **)(a1 + 32);
      uint64_t v26 = v32;
      __int16 v27 = [v33 verificationId];
      *(_DWORD *)buf = 138543618;
      uint64_t v51 = (uint64_t)v27;
      __int16 v52 = 2112;
      id v53 = v12;
      uint64_t v28 = "Validate Peer failed for verificationId %{public}@: %@";
      id v29 = v26;
      os_log_type_t v30 = OS_LOG_TYPE_ERROR;
      uint32_t v31 = 22;
      goto LABEL_17;
    }
  }
  id v34 = objc_alloc((Class)KTVerifierResult);
  id v35 = [*(id *)(a1 + 32) application];
  double v36 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) loggableDatas];
  id v37 = [v34 initWithUri:v7 application:v35 ktResult:v23 transparentData:v8 loggableDatas:v36];
  uint64_t v38 = *(void *)(*(void *)(a1 + 56) + 8);
  BOOL v39 = *(void **)(v38 + 40);
  *(void *)(v38 + 40) = v37;

  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setFailure:v12];
  if (!v23)
  {
    id v40 = [*(id *)(a1 + 32) idsResponseTime];
    id v41 = [*(id *)(a1 + 32) accountKey];
    unsigned int v42 = [v8 optInAfter:v40 accountKey:v41];

    if (v42)
    {
      if (qword_100326860 != -1) {
        dispatch_once(&qword_100326860, &stru_1002BD280);
      }
      double v43 = (void *)qword_100326868;
      if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_DEFAULT))
      {
        double v44 = *(void **)(a1 + 40);
        uint64_t v45 = v43;
        id v46 = [v44 applicationID];
        *(_DWORD *)buf = 141558530;
        uint64_t v51 = 1752392040;
        __int16 v52 = 2112;
        id v53 = v7;
        __int16 v54 = 2112;
        id v55 = v46;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Clearing IDS cache for %{mask.hash}@[%@]", buf, 0x20u);
      }
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setOptedIn:0];
      [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setOptInTernaryState:0];
      uint64_t v15 = [*(id *)(a1 + 40) stateMachine];
      signed int v47 = [*(id *)(a1 + 32) uri];
      unsigned int v48 = [*(id *)(a1 + 40) applicationID];
      [v15 clearIDSCacheForUri:v47 application:v48];

      goto LABEL_7;
    }
  }
LABEL_25:
}

void sub_100075074(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000750B8(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000750FC(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100075140(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100075648(id *a1, void *a2)
{
  id v3 = a2;
  if ([v3 getUnsigned:"verificationResult"] == (id)2)
  {
    uint64_t v4 = [v3 idsResponseTime];
    if (!v4)
    {
      uint64_t v4 = [v3 creationTime];
    }
    id v5 = [a1[6] dataStore];
    id v6 = [v3 uri];
    id v7 = [a1[6] applicationID];
    id v42 = 0;
    id v8 = [v5 getLatestSuccessfulSingleQueryForUri:v6 application:v7 requestYoungerThan:v4 error:&v42];
    id v9 = v42;

    if (v8)
    {
      id v10 = [a1[6] dataStore];
      id v41 = v9;
      uint32_t v31 = _NSConcreteStackBlock;
      uint64_t v32 = 3221225472;
      long long v33 = sub_100075B9C;
      id v34 = &unk_1002BD358;
      id v11 = v8;
      id v35 = v11;
      id v36 = a1[4];
      id v12 = a1[5];
      id v13 = a1[6];
      id v37 = v12;
      id v38 = v13;
      id v14 = v3;
      id v39 = v14;
      id v40 = a1[7];
      unsigned __int8 v15 = [v10 performAndWaitForRpcId:v11 error:&v41 block:&v31];
      id v16 = v41;

      if ((v15 & 1) == 0)
      {
        if (qword_100326860 != -1) {
          dispatch_once(&qword_100326860, &stru_1002BD378);
        }
        uint64_t v17 = qword_100326868;
        if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138543618;
          id v44 = v11;
          __int16 v45 = 2112;
          uint64_t v46 = (uint64_t)v16;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "failed to find ServerRPC %{public}@: %@", buf, 0x16u);
        }
        unsigned __int8 v18 = [a1[6] dataStore:v31, v32, v33, v34];
        uint64_t v19 = [v18 onMocSetPendingResultForVerification:v14];

        (*((void (**)(void))a1[7] + 2))();
      }

      uint64_t v20 = v35;
      id v9 = v16;
    }
    else
    {
      if (qword_100326860 != -1) {
        dispatch_once(&qword_100326860, &stru_1002BD2E8);
      }
      __int16 v27 = qword_100326868;
      if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_DEFAULT))
      {
        id v28 = a1[4];
        id v29 = a1[5];
        *(_DWORD *)buf = 138543874;
        id v44 = v28;
        __int16 v45 = 2160;
        uint64_t v46 = 1752392040;
        __int16 v47 = 2112;
        id v48 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "validatePeer: no successful rpc for %{public}@ for %{mask.hash}@", buf, 0x20u);
      }
      os_log_type_t v30 = [a1[6] dataStore];
      uint64_t v20 = [v30 onMocSetPendingResultForVerification:v3];

      (*((void (**)(void))a1[7] + 2))();
    }

    goto LABEL_24;
  }
  if (qword_100326860 != -1) {
    dispatch_once(&qword_100326860, &stru_1002BD2C8);
  }
  id v21 = qword_100326868;
  if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_DEFAULT))
  {
    id v22 = a1[4];
    id v23 = a1[5];
    *(_DWORD *)buf = 138543874;
    id v44 = v22;
    __int16 v45 = 2160;
    uint64_t v46 = 1752392040;
    __int16 v47 = 2112;
    id v48 = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "validatePeer: reusing completed result %{public}@ for %{mask.hash}@", buf, 0x20u);
  }
  id v24 = [a1[6] dataStore];
  uint64_t v25 = [v3 uri];
  uint64_t v26 = [a1[6] applicationID];
  id v9 = [v24 verifierResultForPeer:v25 application:v26];

  if (v9)
  {
    (*((void (**)(void))a1[7] + 2))();
LABEL_24:
  }
}

void sub_100075B14(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100075B58(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100075B9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_100326860 != -1) {
    dispatch_once(&qword_100326860, &stru_1002BD308);
  }
  uint64_t v4 = qword_100326868;
  if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138544130;
    uint64_t v14 = v5;
    __int16 v15 = 2114;
    uint64_t v16 = v6;
    __int16 v17 = 2160;
    uint64_t v18 = 1752392040;
    __int16 v19 = 2112;
    uint64_t v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "validatePeer: validating rpc %{public}@ for %{public}@ for %{mask.hash}@", buf, 0x2Au);
  }
  id v9 = *(void **)(a1 + 56);
  id v8 = *(void **)(a1 + 64);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100075D78;
  v10[3] = &unk_1002BD330;
  void v10[4] = v9;
  id v11 = v8;
  id v12 = *(id *)(a1 + 72);
  [v9 validatePeerIDSKTVerification:v11 serverRPC:v3 completionBlock:v10];
}

void sub_100075D34(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100075D78(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [*(id *)(a1 + 32) dataStore];
  uint64_t v4 = [*(id *)(a1 + 40) uri];
  uint64_t v5 = [*(id *)(a1 + 32) applicationID];
  uint64_t v6 = [v3 verifierResultForPeer:v4 application:v5];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_100075E48(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000762B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void sub_1000762FC(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (qword_100326860 != -1) {
    dispatch_once(&qword_100326860, &stru_1002BD3C0);
  }
  uint64_t v6 = (void *)qword_100326868;
  if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = v6;
    [v5 uiStatus];
    id v8 = KTUIStatusGetString();
    id v9 = [v5 uri];
    int v10 = 138543874;
    id v11 = v8;
    __int16 v12 = 2160;
    uint64_t v13 = 1752392040;
    __int16 v14 = 2112;
    __int16 v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "validatePeers: UIStatus %{public}@ for uri %{mask.hash}@", (uint8_t *)&v10, 0x20u);
  }
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v5];
  [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
  if (([v5 sentToIDS] & 1) == 0) {
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:v5];
  }
  if (a3) {
    [*(id *)(a1 + 48) addObject:*(void *)(a1 + 40)];
  }
}

void sub_100076484(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000764C8(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10007650C(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    if (qword_100326860 != -1) {
      dispatch_once(&qword_100326860, &stru_1002BD448);
    }
    id v3 = qword_100326868;
    if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_ERROR))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "failed to kick off query for validatePeers uris with no current RPC: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1000765E0(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100076974(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000769B8(uint64_t a1, void *a2)
{
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v21;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v21 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v6);
        if (qword_100326860 != -1) {
          dispatch_once(&qword_100326860, &stru_1002BD488);
        }
        id v8 = (void *)qword_100326868;
        if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_DEBUG))
        {
          id v9 = v8;
          int v10 = [v7 verificationId];
          id v11 = [*(id *)(a1 + 32) rpcId];
          *(_DWORD *)buf = 138543618;
          uint64_t v25 = v10;
          __int16 v26 = 2114;
          __int16 v27 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "performing peer validation for verificationId %{public}@ with received rpcId %{public}@", buf, 0x16u);
        }
        __int16 v12 = *(void **)(a1 + 32);
        uint64_t v13 = *(void **)(a1 + 40);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        v17[2] = sub_100076C38;
        v17[3] = &unk_1002BD4D0;
        void v17[4] = v7;
        id v14 = v12;
        uint64_t v15 = *(void *)(a1 + 40);
        id v18 = v14;
        uint64_t v19 = v15;
        [v13 validatePeerIDSKTVerification:v7 singleQuery:v14 completionBlock:v17];

        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v20 objects:v28 count:16];
    }
    while (v4);
  }
}

void sub_100076BF4(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100076C38(id *a1, void *a2)
{
  id v3 = a2;
  if (qword_100326860 != -1) {
    dispatch_once(&qword_100326860, &stru_1002BD4A8);
  }
  id v4 = (void *)qword_100326868;
  if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_INFO))
  {
    id v5 = a1[4];
    uint64_t v6 = v4;
    id v7 = [v5 verificationId];
    id v8 = [a1[5] rpcId];
    [v3 succeed];
    id v9 = KTResultGetString();
    int v14 = 138543874;
    uint64_t v15 = v7;
    __int16 v16 = 2114;
    __int16 v17 = v8;
    __int16 v18 = 2112;
    uint64_t v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "verificationId %{public}@ with rpcId %{public}@ result: %@", (uint8_t *)&v14, 0x20u);
  }
  int v10 = [a1[6] dataStore];
  id v11 = [a1[4] uri];
  __int16 v12 = [a1[4] application];
  id v13 = [v10 verifierResultForPeer:v11 application:v12];
}

void sub_100076DD8(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100076E1C(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100076E60(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100076F3C(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000770EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 rpcType])
  {
    if ([v3 rpcType] == (id)1)
    {
      [*(id *)(a1 + 32) validatePendingPeersForBatchQuery:v3];
    }
    else
    {
      if (qword_100326860 != -1) {
        dispatch_once(&qword_100326860, &stru_1002BD550);
      }
      id v4 = (void *)qword_100326868;
      if (os_log_type_enabled((os_log_t)qword_100326868, OS_LOG_TYPE_ERROR))
      {
        id v5 = v4;
        int v6 = 134217984;
        id v7 = [v3 rpcType];
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "unknown server rpc type: %lld", (uint8_t *)&v6, 0xCu);
      }
    }
  }
  else
  {
    [*(id *)(a1 + 32) validatePendingPeersForSingleQuery:v3];
  }
}

void sub_10007720C(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100077250(id a1)
{
  qword_100326868 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000774C0(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100077504(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100077808(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10007784C(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100077B08(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100077B4C(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t start()
{
  +[NSError _setFileNameLocalizationEnabled:0];
  bzero(buf, 0x400uLL);
  if (!_set_user_dir_suffix()
    || !confstr(65537, (char *)buf, 0x400uLL)
    || mkdir((const char *)buf, 0x1C0u) && *__error() != 17)
  {
    if (qword_100326870 != -1) {
      dispatch_once(&qword_100326870, &stru_1002BD798);
    }
    long long v20 = (void *)qword_100326878;
    if (os_log_type_enabled((os_log_t)qword_100326878, OS_LOG_TYPE_ERROR))
    {
      long long v21 = v20;
      int v22 = *__error();
      long long v23 = __error();
      id v24 = strerror(*v23);
      *(_DWORD *)id v41 = 67109378;
      int v42 = v22;
      __int16 v43 = 2080;
      id v44 = v24;
      uint64_t v25 = "failed to initialize temporary directory (%d): %s";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, v25, v41, 0x12u);
    }
LABEL_24:
    exit(1);
  }
  v0 = realpath_DARWIN_EXTSN((const char *)buf, 0);
  if (!v0)
  {
    if (qword_100326870 != -1) {
      dispatch_once(&qword_100326870, &stru_1002BD7B8);
    }
    __int16 v26 = (void *)qword_100326878;
    if (os_log_type_enabled((os_log_t)qword_100326878, OS_LOG_TYPE_ERROR))
    {
      long long v21 = v26;
      int v27 = *__error();
      id v28 = __error();
      id v29 = strerror(*v28);
      *(_DWORD *)id v41 = 67109378;
      int v42 = v27;
      __int16 v43 = 2080;
      id v44 = v29;
      uint64_t v25 = "failed to resolve temporary directory (%d): %s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  uint64_t v1 = v0;
  setenv("SQLITE_TMPDIR", v0, 1);
  free(v1);
  id v3 = objc_alloc_init(transparencyd);
  id v4 = objc_alloc_init(MainServiceDelegate);
  [(MainServiceDelegate *)v4 setDaemonContext:v3];
  dispatch_workloop_t v5 = dispatch_workloop_create("com.apple.transparencyd.xpc");
  [(MainServiceDelegate *)v4 setXpcQueue:v5];

  int v6 = objc_alloc_init(KTIDSSupportServiceDelegate);
  [(KTIDSSupportServiceDelegate *)v6 setDaemonContext:v3];
  id v7 = [(MainServiceDelegate *)v4 xpcQueue];
  [(KTIDSSupportServiceDelegate *)v6 setXpcQueue:v7];

  id v8 = objc_alloc_init(KTAccountsSupportServiceDelegate);
  [(KTAccountsSupportServiceDelegate *)v8 setDaemonContext:v3];
  id v9 = [(MainServiceDelegate *)v4 xpcQueue];
  [(KTAccountsSupportServiceDelegate *)v8 setXpcQueue:v9];

  os_log_type_t v30 = [[KTSignalTermHandler alloc] initWithSIGTERMNotification:&stru_1002BD650];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1000782A8;
  handler[3] = &unk_1002BD6D8;
  int v10 = v4;
  id v40 = v10;
  xpc_activity_register("com.apple.transparencyd.dutycycle", XPC_ACTIVITY_CHECK_IN, handler);
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472;
  void v37[2] = sub_100078630;
  v37[3] = &unk_1002BD6D8;
  id v11 = v3;
  id v38 = v11;
  xpc_activity_register("com.apple.transparencyd.self-validate", XPC_ACTIVITY_CHECK_IN, v37);
  uint64_t v32 = _NSConcreteStackBlock;
  uint64_t v33 = 3221225472;
  id v34 = sub_100078838;
  id v35 = &unk_1002BD6D8;
  __int16 v12 = v11;
  id v36 = v12;
  xpc_activity_register("com.apple.transparencyd.24h", XPC_ACTIVITY_CHECK_IN, &v32);
  id v13 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.transparencyd"];
  [v13 setDelegate:v10];
  [v13 resume];
  id v14 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.transparencyd.ids-support"];
  [v14 setDelegate:v6];
  [v14 resume];
  id v15 = [objc_alloc((Class)NSXPCListener) initWithMachServiceName:@"com.apple.transparencyd.accounts-support"];
  [v15 setDelegate:v8];
  [v15 resume];

  if (qword_100326870 != -1) {
    dispatch_once(&qword_100326870, &stru_1002BD758);
  }
  __int16 v16 = qword_100326878;
  if (os_log_type_enabled((os_log_t)qword_100326878, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "transparencyd accepting work", buf, 2u);
  }
  __int16 v17 = +[NSRunLoop mainRunLoop];
  [v17 run];

  if (qword_100326870 != -1) {
    dispatch_once(&qword_100326870, &stru_1002BD778);
  }
  __int16 v18 = qword_100326878;
  if (os_log_type_enabled((os_log_t)qword_100326878, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "transparencyd stopping", buf, 2u);
  }

  return 1;
}

void sub_1000781D8(id a1)
{
  if (qword_100326870 != -1) {
    dispatch_once(&qword_100326870, &stru_1002BD670);
  }
  uint64_t v1 = qword_100326878;
  if (os_log_type_enabled((os_log_t)qword_100326878, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Received signal SIGTERM. Will terminate when clean.", v2, 2u);
  }
}

void sub_100078264(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000782A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (qword_100326870 != -1) {
    dispatch_once(&qword_100326870, &stru_1002BD690);
  }
  int v6 = qword_100326878;
  if (os_log_type_enabled((os_log_t)qword_100326878, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    xpc_activity_state_t v18 = state;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "XPC dutycycle activity triggered, state: %ld", buf, 0xCu);
  }
  if (state == 2)
  {
    id v7 = xpc_activity_copy_dispatch_queue();
    *(_DWORD *)buf = 0;
    dispatch_qos_class_t qos_class = dispatch_queue_get_qos_class(v7, (int *)buf);
    id v9 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    int v10 = dispatch_queue_attr_make_with_qos_class(v9, qos_class, *(int *)buf);

    id v11 = [*(id *)(a1 + 32) daemonContext];
    __int16 v12 = [v11 workloop];
    id v13 = dispatch_queue_create_with_target_V2("com.apple.transparencyd.dutycycle.workloop", v10, v12);

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_100078500;
    v14[3] = &unk_1002B7D58;
    id v15 = v3;
    id v16 = *(id *)(a1 + 32);
    dispatch_sync(v13, v14);
  }
}

void sub_1000784BC(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100078500(uint64_t a1)
{
  uint64_t v2 = *(_xpc_activity_s **)(a1 + 32);
  if (v2 && xpc_activity_should_defer(v2) && xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 3))
  {
    if (qword_100326870 != -1) {
      dispatch_once(&qword_100326870, &stru_1002BD6B0);
    }
    id v3 = qword_100326878;
    if (os_log_type_enabled((os_log_t)qword_100326878, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "duty cycle deferred", buf, 2u);
    }
  }
  else
  {
    id v4 = [*(id *)(a1 + 40) daemonContext];
    [v4 runDutyCycleForActivity:*(void *)(a1 + 32)];
  }
}

void sub_1000785EC(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100078630(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (qword_100326870 != -1) {
    dispatch_once(&qword_100326870, &stru_1002BD6F8);
  }
  dispatch_workloop_t v5 = qword_100326878;
  if (os_log_type_enabled((os_log_t)qword_100326878, OS_LOG_TYPE_INFO))
  {
    int v7 = 134217984;
    xpc_activity_state_t v8 = state;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "XPC self-validate activity triggered, state: %ld", (uint8_t *)&v7, 0xCu);
  }
  if (state == 2)
  {
    if (+[TransparencySettings enableSelfValidationXPCActivity])
    {
      [*(id *)(a1 + 32) selfValidateNotification:v3];
    }
    else
    {
      if (qword_100326870 != -1) {
        dispatch_once(&qword_100326870, &stru_1002BD718);
      }
      int v6 = qword_100326878;
      if (os_log_type_enabled((os_log_t)qword_100326878, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v7) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "XPC self-validate activity ignored by setting on internal build", (uint8_t *)&v7, 2u);
      }
      xpc_activity_set_state(v3, 5);
    }
  }
}

void sub_1000787B0(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000787F4(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100078838(uint64_t a1, void *a2)
{
  id v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (qword_100326870 != -1) {
    dispatch_once(&qword_100326870, &stru_1002BD738);
  }
  dispatch_workloop_t v5 = qword_100326878;
  if (os_log_type_enabled((os_log_t)qword_100326878, OS_LOG_TYPE_INFO))
  {
    int v7 = 134217984;
    xpc_activity_state_t v8 = state;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "XPC settings activity triggered, state: %ld", (uint8_t *)&v7, 0xCu);
  }
  if (state == 2)
  {
    int v6 = [*(id *)(a1 + 32) globalSettings];
    [v6 fetchSettings:v3 force:0];

    [*(id *)(a1 + 32) xpc24HrNotification:v3];
  }
}

void sub_100078950(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100078994(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1000789D8(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100078A1C(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100078A60(id a1)
{
  qword_100326878 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_100078AA4()
{
  return 0;
}

void sub_100078AB0()
{
}

void sub_100078AD8()
{
  qword_10032F468 = (uint64_t)&off_1002BD7E8;
}

uint64_t *sub_100078AEC()
{
  if (qword_100326880 != -1) {
    swift_once();
  }
  return &qword_10032F468;
}

uint64_t sub_100078B38()
{
  return sub_100078ED4(&qword_100326880);
}

void sub_100078B5C(uint64_t a1@<X8>)
{
  sub_100080C44();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t sub_100078B90()
{
  return *(void *)v0;
}

uint64_t sub_100078B98@<X0>(void *a1@<X8>)
{
  return sub_100078F88(&qword_100326880, &qword_10032F468, a1);
}

void sub_100078BBC(uint64_t a1@<X8>)
{
  sub_100080C44();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

void sub_100078BF4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100078C04(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100087900();

  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_100078C54(uint64_t a1, uint64_t *a2)
{
  return sub_100078C70(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

BOOL sub_100078C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

uint64_t sub_100078C90(uint64_t a1, char a2)
{
  if (a2) {
    return 0;
  }
  return result;
}

void sub_100078C9C()
{
  qword_10032F470 = (uint64_t)&off_1002BD888;
}

uint64_t *sub_100078CB0()
{
  if (qword_100326888 != -1) {
    swift_once();
  }
  return &qword_10032F470;
}

uint64_t sub_100078CFC()
{
  return sub_100078ED4(&qword_100326888);
}

uint64_t sub_100078D20@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result == 0;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_100078D38()
{
  if (v0[8]) {
    return 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t sub_100078D50@<X0>(void *a1@<X8>)
{
  return sub_100078F88(&qword_100326888, &qword_10032F470, a1);
}

void *sub_100078D74@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result == 0;
  *(void *)a2 = *result;
  char v3 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void sub_100078D90(void *a1@<X8>)
{
  if (*(unsigned char *)(v1 + 8)) {
    *a1 = 0;
  }
  else {
    *a1 = *(void *)v1;
  }
}

uint64_t sub_100078DAC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000826F8();

  return Enum.hash(into:)(a1, a2, v4);
}

BOOL sub_100078DF8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (a1[1]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a1;
  }
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v2 = 0;
  }
  return v3 == v2;
}

BOOL sub_100078E3C(BOOL result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

void sub_100078E50()
{
  qword_10032F478 = (uint64_t)&off_1002BD8B8;
}

uint64_t *sub_100078E64()
{
  if (qword_100326890 != -1) {
    swift_once();
  }
  return &qword_10032F478;
}

uint64_t sub_100078EB0()
{
  return sub_100078ED4(&qword_100326890);
}

uint64_t sub_100078ED4(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void sub_100078F20(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

unint64_t sub_100078F30@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_100078F48()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t sub_100078F64@<X0>(void *a1@<X8>)
{
  return sub_100078F88(&qword_100326890, &qword_10032F478, a1);
}

uint64_t sub_100078F88@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;

  return swift_bridgeObjectRetain();
}

void *sub_100078FE0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void sub_100078FFC(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

Swift::Int sub_10007901C()
{
  return Hasher._finalize()();
}

uint64_t sub_100079088(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100080FC8();

  return Enum.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000790D4()
{
  return Hasher._finalize()();
}

BOOL sub_10007913C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((unsigned char *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

void *variable initialization expression of KTStoreOptInOperation.storedRecords()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_100079184()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10007918C(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*sub_1000791B8())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000791D8()
{
  return 0;
}

uint64_t sub_1000791E4()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_100080C58(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_100079218(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100080CB0(*(void *)(v2 + 8), *(void *)(v2 + 16));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*sub_100079250())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t (*sub_100079270())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100079294@<X0>(uint64_t a1@<X8>)
{
  return sub_10007948C(type metadata accessor for SASAnnounce, a1);
}

uint64_t sub_1000792AC(uint64_t a1)
{
  return sub_100079524(a1, type metadata accessor for SASAnnounce);
}

uint64_t (*sub_1000792C4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10007930C@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = &_swiftEmptyArrayStorage;
  *(_OWORD *)(a1 + 8) = xmmword_1002856B0;
  *(_OWORD *)(a1 + 24) = xmmword_1002856B0;
  type metadata accessor for SASAnnounce(0);
  return UnknownStorage.init()();
}

uint64_t sub_10007935C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100080C58(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t sub_100079390(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100080CB0(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*sub_1000793C8())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000793E8()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100080C58(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t sub_10007941C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100080CB0(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*sub_100079454())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100079474@<X0>(uint64_t a1@<X8>)
{
  return sub_10007948C(type metadata accessor for SASCommit, a1);
}

uint64_t sub_10007948C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10007950C(uint64_t a1)
{
  return sub_100079524(a1, type metadata accessor for SASCommit);
}

uint64_t sub_100079524(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_1000795A0())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000795E8@<X0>(_OWORD *a1@<X8>)
{
  return sub_100079AF0((void (*)(void))type metadata accessor for SASCommit, a1);
}

uint64_t sub_100079600@<X0>(uint64_t a1@<X8>)
{
  return sub_10007A434(type metadata accessor for SASSelected, a1);
}

uint64_t sub_100079618(uint64_t a1)
{
  return sub_10007A4CC(a1, type metadata accessor for SASSelected);
}

uint64_t (*sub_100079630())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100079678@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002856B0;
  type metadata accessor for SASSelected(0);
  return UnknownStorage.init()();
}

uint64_t sub_1000796B8()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_1000796C4(uint64_t result, char a2)
{
  *(void *)(v2 + 16) = result;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return result;
}

uint64_t sub_1000796D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASTeardown(0) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10007974C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASTeardown(0) + 24);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_1000797C4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10007980C@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1002856B0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  type metadata accessor for SASTeardown(0);
  return UnknownStorage.init()();
}

uint64_t sub_100079858()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_100080C58(v1, *(void *)(v0 + 56));
  return v1;
}

uint64_t sub_10007988C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100080CB0(*(void *)(v2 + 48), *(void *)(v2 + 56));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*sub_1000798C4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1000798E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASSetupB(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10007995C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASSetupB(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_1000799D4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100079A1C@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002856B0;
  a1[1] = xmmword_1002856B0;
  a1[2] = xmmword_1002856B0;
  a1[3] = xmmword_1002856B0;
  type metadata accessor for SASSetupB(0);
  return UnknownStorage.init()();
}

uint64_t sub_100079A60@<X0>(uint64_t a1@<X8>)
{
  return sub_10007948C(type metadata accessor for SASReveal, a1);
}

uint64_t sub_100079A78(uint64_t a1)
{
  return sub_100079524(a1, type metadata accessor for SASReveal);
}

uint64_t (*sub_100079A90())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100079AD8@<X0>(_OWORD *a1@<X8>)
{
  return sub_100079AF0((void (*)(void))type metadata accessor for SASReveal, a1);
}

uint64_t sub_100079AF0@<X0>(void (*a1)(void)@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_1002856B0;
  a2[1] = xmmword_1002856B0;
  a2[2] = xmmword_1002856B0;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t sub_100079B3C()
{
  uint64_t v1 = *(void *)v0;
  sub_100080C58(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_100079B70(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100080CB0(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t variable initialization expression of KTSwiftDB.db()
{
  return 0;
}

uint64_t sub_100079BB0()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100079BB8(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_100079BC0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_100080C58(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t sub_100079BF4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100080CB0(*(void *)(v2 + 24), *(void *)(v2 + 32));
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t sub_100079C2C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007948C(type metadata accessor for SASConfirm, a1);
}

uint64_t sub_100079C44(uint64_t a1)
{
  return sub_100079524(a1, type metadata accessor for SASConfirm);
}

uint64_t (*sub_100079C5C())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100079CA4@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1002856B0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xC000000000000000;
  type metadata accessor for SASConfirm(0);
  return UnknownStorage.init()();
}

uint64_t sub_100079CF0()
{
  return 0;
}

uint64_t sub_100079CFC()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100079D2C(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t sub_100079D64()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100079D6C(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t sub_100079D98@<X0>(uint64_t a1@<X8>)
{
  return sub_10007948C(type metadata accessor for ErrorDomainCode, a1);
}

uint64_t sub_100079DB0(uint64_t a1)
{
  return sub_100079524(a1, type metadata accessor for ErrorDomainCode);
}

uint64_t (*sub_100079DC8())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100079E10@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = _swiftEmptyArrayStorage;
  type metadata accessor for ErrorDomainCode(0);
  return UnknownStorage.init()();
}

uint64_t sub_100079E58@<X0>(void *a1@<X8>)
{
  sub_100080E08(&qword_10031ED00);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for IDSFailingDevice(0);
  sub_100080E6C(v1 + *(int *)(v5 + 24), (uint64_t)v4);
  uint64_t v6 = type metadata accessor for ErrorDomainCode(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) != 1) {
    return sub_100080ED4((uint64_t)v4, (uint64_t)a1);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = &_swiftEmptyArrayStorage;
  UnknownStorage.init()();
  return sub_100087A1C((uint64_t)v4, &qword_10031ED00);
}

uint64_t sub_100079F6C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for IDSFailingDevice(0) + 24);
  sub_100087A1C(v3, &qword_10031ED00);
  sub_100080ED4(a1, v3);
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_10007A004(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_100080E08(&qword_10031ED00);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for ErrorDomainCode(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  void v3[4] = malloc(v9);
  int v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for IDSFailingDevice(0) + 24);
  *((_DWORD *)v3 + 12) = v11;
  sub_100080E6C(v1 + v11, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    void *v10 = 0;
    v10[1] = 0xE000000000000000;
    v10[2] = 0;
    v10[3] = &_swiftEmptyArrayStorage;
    UnknownStorage.init()();
    sub_100087A1C((uint64_t)v5, &qword_10031ED00);
  }
  else
  {
    sub_100080ED4((uint64_t)v5, (uint64_t)v10);
  }
  return sub_10007A18C;
}

void sub_10007A18C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(int *)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  uint64_t v7 = *(void *)(*(void *)a1 + 24);
  uint64_t v8 = *(void **)(*(void *)a1 + 8);
  uint64_t v9 = **(void **)a1 + v3;
  if (a2)
  {
    sub_100087954(*(void *)(*(void *)a1 + 40), (uint64_t)v4, type metadata accessor for ErrorDomainCode);
    sub_100087A1C(v9, &qword_10031ED00);
    sub_100080ED4((uint64_t)v4, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    sub_1000879BC((uint64_t)v5, type metadata accessor for ErrorDomainCode);
  }
  else
  {
    sub_100087A1C(**(void **)a1 + v3, &qword_10031ED00);
    sub_100080ED4((uint64_t)v5, v9);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);

  free(v2);
}

BOOL sub_10007A2B4()
{
  sub_100080E08(&qword_10031ED00);
  __chkstk_darwin();
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for IDSFailingDevice(0);
  sub_100080E6C(v0 + *(int *)(v3 + 24), (uint64_t)v2);
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0);
  BOOL v5 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v2, 1, v4) != 1;
  sub_100087A1C((uint64_t)v2, &qword_10031ED00);
  return v5;
}

uint64_t sub_10007A394()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for IDSFailingDevice(0) + 24);
  sub_100087A1C(v1, &qword_10031ED00);
  uint64_t v2 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_10007A41C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007A434(type metadata accessor for IDSFailingDevice, a1);
}

uint64_t sub_10007A434@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10007A4B4(uint64_t a1)
{
  return sub_10007A4CC(a1, type metadata accessor for IDSFailingDevice);
}

uint64_t sub_10007A4CC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_10007A548())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10007A590@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002856B0;
  uint64_t v2 = type metadata accessor for IDSFailingDevice(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 24);
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 1, 1, v4);
}

uint64_t sub_10007A628@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_10007A694()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10007A6C4(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t sub_10007A6FC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10007A72C(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t sub_10007A764()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_10007A76C(uint64_t result)
{
  *(void *)(v1 + 48) = result;
  return result;
}

uint64_t sub_10007A774()
{
  return *(void *)(v0 + 56);
}

uint64_t sub_10007A77C(uint64_t result)
{
  *(void *)(v1 + 56) = result;
  return result;
}

uint64_t (*sub_10007A784())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10007A7A4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10007A7AC(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_10007A7D8())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10007A7F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASTTR(0) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10007A870(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SASTTR(0) + 40);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_10007A8E8())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10007A930@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = _swiftEmptyArrayStorage;
  type metadata accessor for SASTTR(0);
  return UnknownStorage.init()();
}

uint64_t sub_10007A984()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F480);
  sub_100080F90(v0, (uint64_t)qword_10032F480);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1002856C0;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 0;
  *(void *)unint64_t v5 = "announce";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "commit";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  int v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)uint64_t v11 = "selected";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  __int16 v12 = (void *)(v4 + 3 * v2);
  id v13 = (char *)v12 + v1[14];
  *__int16 v12 = 3;
  *(void *)id v13 = "teardown";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  id v14 = (void *)(v4 + 4 * v2);
  id v15 = (char *)v14 + v1[14];
  *id v14 = 4;
  *(void *)id v15 = "setupB";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  id v16 = (void *)(v4 + 5 * v2);
  __int16 v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)__int16 v17 = "revealA";
  *((void *)v17 + 1) = 7;
  v17[16] = 2;
  v8();
  xpc_activity_state_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *xpc_activity_state_t v18 = 6;
  *(void *)uint64_t v19 = "confirm";
  *((void *)v19 + 1) = 7;
  v19[16] = 2;
  v8();
  long long v20 = (void *)(v4 + 7 * v2);
  long long v21 = (char *)v20 + v1[14];
  void *v20 = 7;
  *(void *)long long v21 = "tapToRadar";
  *((void *)v21 + 1) = 10;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007ACB0()
{
  return sub_10007F488(&qword_100326898, (uint64_t)qword_10032F480);
}

uint64_t sub_10007ACD4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_100326898, (uint64_t)qword_10032F480, a1);
}

uint64_t sub_10007ACF8@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_100326898, (uint64_t)qword_10032F480, a1);
}

uint64_t sub_10007AD1C(uint64_t a1)
{
  return sub_10007BC78(a1, qword_10032F498, 0, (uint64_t)"newerSession", 12);
}

uint64_t sub_10007AD38()
{
  return sub_10007F488(&qword_1003268A0, (uint64_t)qword_10032F498);
}

uint64_t sub_10007AD5C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_1003268A0, (uint64_t)qword_10032F498, a1);
}

uint64_t sub_10007AD80@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_1003268A0, (uint64_t)qword_10032F498, a1);
}

uint64_t sub_10007ADA4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F4B0);
  sub_100080F90(v0, (uint64_t)qword_10032F4B0);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856D0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "HMAC_SHA256_VERSION_1";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  int v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)int v10 = "HMAC_SHA256_VERSION_2";
  *((void *)v10 + 1) = 21;
  uint8_t v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007AF5C()
{
  return sub_10007F488(&qword_1003268A8, (uint64_t)qword_10032F4B0);
}

uint64_t sub_10007AF80@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_1003268A8, (uint64_t)qword_10032F4B0, a1);
}

uint64_t sub_10007AFA4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_1003268A8, (uint64_t)qword_10032F4B0, a1);
}

const char *sub_10007AFC8()
{
  return "SASAnnounce";
}

uint64_t sub_10007AFD4()
{
  return 0x756F6E6E41534153;
}

uint64_t sub_10007AFF4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F4C8);
  sub_100080F90(v0, (uint64_t)qword_10032F4C8);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856E0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "aProtocolVersion";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  int v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)int v10 = "sessionID";
  *((void *)v10 + 1) = 9;
  uint8_t v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 6;
  *(void *)uint64_t v11 = "peerSessionID";
  *(void *)(v11 + 8) = 13;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007B1F8()
{
  return sub_10007F488(&qword_1003268B0, (uint64_t)qword_10032F4C8);
}

uint64_t sub_10007B21C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_1003268B0, (uint64_t)qword_10032F4C8, a1);
}

uint64_t sub_10007B240()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 6 || result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      else if (result == 1)
      {
        sub_100080FC8();
        dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10007B338()
{
  if (!*(void *)(*v0 + 16)
    || (sub_100080FC8(), uint64_t result = dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)(), !v1))
  {
    uint64_t v3 = v0[1];
    unint64_t v4 = v0[2];
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
        if (!v1)
        {
LABEL_10:
          uint64_t v5 = v0[3];
          unint64_t v6 = v0[4];
          switch(v6 >> 62)
          {
            case 1uLL:
              if ((int)v5 != v5 >> 32) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 2uLL:
              if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 3uLL:
              goto LABEL_17;
            default:
              if ((v6 & 0xFF000000000000) == 0) {
                goto LABEL_17;
              }
LABEL_16:
              uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
              if (!v1)
              {
LABEL_17:
                type metadata accessor for SASAnnounce(0);
                uint64_t result = UnknownStorage.traverse<A>(visitor:)();
              }
              break;
          }
        }
        break;
    }
  }
  return result;
}

Swift::Int sub_10007B4F8()
{
  return sub_10007F94C((void (*)(void))type metadata accessor for SASAnnounce, &qword_10031ED10, (void (*)(uint64_t))type metadata accessor for SASAnnounce);
}

uint64_t sub_10007B540@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = &_swiftEmptyArrayStorage;
  *(_OWORD *)(a1 + 8) = xmmword_1002856B0;
  *(_OWORD *)(a1 + 24) = xmmword_1002856B0;
  return UnknownStorage.init()();
}

uint64_t (*sub_10007B588())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10007B5AC()
{
  return sub_10007B240();
}

uint64_t sub_10007B5C4()
{
  return sub_10007B338();
}

uint64_t sub_10007B5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000826B0(&qword_10031F478, (void (*)(uint64_t))type metadata accessor for SASAnnounce);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007B660@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_1003268B0, (uint64_t)qword_10032F4C8, a1);
}

uint64_t sub_10007B684(uint64_t a1)
{
  uint64_t v2 = sub_1000826B0(&qword_10031EDF8, (void (*)(uint64_t))type metadata accessor for SASAnnounce);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007B6F4()
{
  sub_1000826B0(&qword_10031EDF8, (void (*)(uint64_t))type metadata accessor for SASAnnounce);

  return Message.hash(into:)();
}

const char *sub_10007B774()
{
  return "SASCommit";
}

uint64_t sub_10007B780()
{
  return 0x696D6D6F43534153;
}

uint64_t sub_10007B79C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F4E0);
  sub_100080F90(v0, (uint64_t)qword_10032F4E0);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856E0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "sessionID";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  int v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)int v10 = "publicInfo";
  *((void *)v10 + 1) = 10;
  uint8_t v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "aCommitRandom";
  *(void *)(v11 + 8) = 13;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007B9A0()
{
  return sub_10007F488(&qword_1003268B8, (uint64_t)qword_10032F4E0);
}

uint64_t sub_10007B9C4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_1003268B8, (uint64_t)qword_10032F4E0, a1);
}

uint64_t sub_10007B9E8()
{
  return sub_10007D53C();
}

uint64_t sub_10007BA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007D610(a1, a2, a3, (void (*)(void))type metadata accessor for SASCommit);
}

uint64_t sub_10007BA2C(uint64_t a1, uint64_t a2)
{
  return sub_10008162C(a1, a2, type metadata accessor for SASCommit) & 1;
}

Swift::Int sub_10007BA5C()
{
  return sub_10007F94C((void (*)(void))type metadata accessor for SASCommit, &qword_10031ED18, (void (*)(uint64_t))type metadata accessor for SASCommit);
}

uint64_t sub_10007BAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000826B0(&qword_10031F470, (void (*)(uint64_t))type metadata accessor for SASCommit);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007BB24@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_1003268B8, (uint64_t)qword_10032F4E0, a1);
}

uint64_t sub_10007BB48(uint64_t a1)
{
  uint64_t v2 = sub_1000826B0(&qword_10031EE10, (void (*)(uint64_t))type metadata accessor for SASCommit);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007BBB4()
{
  sub_1000826B0(&qword_10031EE10, (void (*)(uint64_t))type metadata accessor for SASCommit);

  return Message.hash(into:)();
}

const char *sub_10007BC30()
{
  return "SASSelected";
}

uint64_t sub_10007BC3C()
{
  return 0x63656C6553534153;
}

uint64_t sub_10007BC5C(uint64_t a1)
{
  return sub_10007BC78(a1, qword_10032F4F8, 1, (uint64_t)"sessionID", 9);
}

uint64_t sub_10007BC78(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for _NameMap();
  sub_100087A78(v9, a2);
  sub_100080F90(v9, (uint64_t)a2);
  sub_100080E08(&qword_10031F498);
  int v10 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1002856F0;
  unint64_t v13 = v12 + v11 + v10[14];
  *(void *)(v12 + v11) = a3;
  *(void *)unint64_t v13 = a4;
  *(void *)(v13 + 8) = a5;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007BDDC()
{
  return sub_10007F488(&qword_1003268C0, (uint64_t)qword_10032F4F8);
}

uint64_t sub_10007BE00@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_1003268C0, (uint64_t)qword_10032F4F8, a1);
}

uint64_t sub_10007BE24()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularBytesField(value:)();
    }
  }
  return result;
}

uint64_t sub_10007BE94()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        type metadata accessor for SASSelected(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
      return result;
  }
}

Swift::Int sub_10007BF88()
{
  return sub_10007F94C((void (*)(void))type metadata accessor for SASSelected, &qword_10031ED20, (void (*)(uint64_t))type metadata accessor for SASSelected);
}

uint64_t sub_10007BFD0@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002856B0;
  return UnknownStorage.init()();
}

uint64_t (*sub_10007C004())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10007C028()
{
  return sub_10007BE24();
}

uint64_t sub_10007C040()
{
  return sub_10007BE94();
}

uint64_t sub_10007C058(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000826B0(&qword_10031F468, (void (*)(uint64_t))type metadata accessor for SASSelected);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007C0D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_1003268C0, (uint64_t)qword_10032F4F8, a1);
}

uint64_t sub_10007C0F8(uint64_t a1)
{
  uint64_t v2 = sub_1000826B0(&qword_10031EE28, (void (*)(uint64_t))type metadata accessor for SASSelected);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007C164()
{
  sub_1000826B0(&qword_10031EE28, (void (*)(uint64_t))type metadata accessor for SASSelected);

  return Message.hash(into:)();
}

const char *sub_10007C1E0()
{
  return "SASTeardown";
}

uint64_t sub_10007C1EC()
{
  return 0x6472616554534153;
}

uint64_t sub_10007C20C(uint64_t a1)
{
  return sub_10007C22C(a1, qword_10032F510, (uint64_t)"sessionID", (uint64_t)"reason", 6);
}

uint64_t sub_10007C22C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for _NameMap();
  sub_100087A78(v7, a2);
  sub_100080F90(v7, (uint64_t)a2);
  sub_100080E08(&qword_10031F498);
  uint64_t v8 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v9 = *(void *)(*(void *)v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1002856D0;
  uint64_t v12 = (void *)(v11 + v10);
  unint64_t v13 = v11 + v10 + v8[14];
  *uint64_t v12 = 1;
  *(void *)unint64_t v13 = a3;
  *(void *)(v13 + 8) = 9;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v15 = type metadata accessor for _NameMap.NameDescription();
  id v16 = *(void (**)(void))(*(void *)(v15 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v16)(v13, v14, v15);
  __int16 v17 = (char *)v12 + v9 + v8[14];
  *(void *)((char *)v12 + v9) = 2;
  *(void *)__int16 v17 = a4;
  *((void *)v17 + 1) = a5;
  v17[16] = 2;
  v16();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007C3DC()
{
  return sub_10007F488(&qword_1003268C8, (uint64_t)qword_10032F510);
}

uint64_t sub_10007C400@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_1003268C8, (uint64_t)qword_10032F510, a1);
}

uint64_t sub_10007C424()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_1000826F8();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10007C508()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v3 = *(void *)(v0 + 8);
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        if ((*(unsigned char *)(v0 + 24) & 1) != 0
          || !*(void *)(v0 + 16)
          || (sub_1000826F8(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for SASTeardown(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
      return result;
  }
}

Swift::Int sub_10007C650()
{
  return sub_10007F94C((void (*)(void))type metadata accessor for SASTeardown, &qword_10031ED30, (void (*)(uint64_t))type metadata accessor for SASTeardown);
}

uint64_t sub_10007C698@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1002856B0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return UnknownStorage.init()();
}

uint64_t sub_10007C6D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10007C740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_10007C7B0())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10007C7D4()
{
  return sub_10007C424();
}

uint64_t sub_10007C7EC()
{
  return sub_10007C508();
}

uint64_t sub_10007C804(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000826B0(&qword_10031F460, (void (*)(uint64_t))type metadata accessor for SASTeardown);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007C880@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_1003268C8, (uint64_t)qword_10032F510, a1);
}

uint64_t sub_10007C8A4(uint64_t a1)
{
  uint64_t v2 = sub_1000826B0(&qword_10031EE40, (void (*)(uint64_t))type metadata accessor for SASTeardown);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007C910()
{
  sub_1000826B0(&qword_10031EE40, (void (*)(uint64_t))type metadata accessor for SASTeardown);

  return Message.hash(into:)();
}

const char *sub_10007C98C()
{
  return "SASSetupB";
}

uint64_t sub_10007C998()
{
  return 0x7075746553534153;
}

uint64_t sub_10007C9B4()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F528);
  sub_100080F90(v0, (uint64_t)qword_10032F528);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100285700;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "sessionID";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "bRandom";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "publicInfo";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 4;
  *(void *)uint64_t v14 = "peerSessionID";
  *((void *)v14 + 1) = 13;
  uint8_t v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007CBEC()
{
  return sub_10007F488(&qword_1003268D0, (uint64_t)qword_10032F528);
}

uint64_t sub_10007CC10@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_1003268D0, (uint64_t)qword_10032F528, a1);
}

uint64_t sub_10007CC34()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10007CD14()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = v0[2];
        unint64_t v6 = v0[3];
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
            if (!v1)
            {
LABEL_15:
              uint64_t v7 = v0[4];
              unint64_t v8 = v0[5];
              switch(v8 >> 62)
              {
                case 1uLL:
                  if ((int)v7 != v7 >> 32) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 2uLL:
                  if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 3uLL:
                  goto LABEL_22;
                default:
                  if ((v8 & 0xFF000000000000) == 0) {
                    goto LABEL_22;
                  }
LABEL_21:
                  uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
                  if (!v1)
                  {
LABEL_22:
                    uint64_t v9 = v0[6];
                    unint64_t v10 = v0[7];
                    switch(v10 >> 62)
                    {
                      case 1uLL:
                        if ((int)v9 != v9 >> 32) {
                          goto LABEL_28;
                        }
                        goto LABEL_29;
                      case 2uLL:
                        if (*(void *)(v9 + 16) != *(void *)(v9 + 24)) {
                          goto LABEL_28;
                        }
                        goto LABEL_29;
                      case 3uLL:
                        goto LABEL_29;
                      default:
                        if ((v10 & 0xFF000000000000) == 0) {
                          goto LABEL_29;
                        }
LABEL_28:
                        uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
                        if (!v1)
                        {
LABEL_29:
                          type metadata accessor for SASSetupB(0);
                          uint64_t result = UnknownStorage.traverse<A>(visitor:)();
                        }
                        break;
                    }
                  }
                  break;
              }
            }
            break;
        }
      }
      return result;
  }
}

Swift::Int sub_10007CF94()
{
  return sub_10007F94C((void (*)(void))type metadata accessor for SASSetupB, &qword_10031ED38, (void (*)(uint64_t))type metadata accessor for SASSetupB);
}

uint64_t sub_10007CFDC@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002856B0;
  a1[1] = xmmword_1002856B0;
  a1[2] = xmmword_1002856B0;
  a1[3] = xmmword_1002856B0;
  return UnknownStorage.init()();
}

uint64_t sub_10007D00C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10007D07C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_10007D0EC())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10007D110()
{
  return sub_10007CC34();
}

uint64_t sub_10007D128()
{
  return sub_10007CD14();
}

uint64_t sub_10007D140(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000826B0(&qword_10031F458, (void (*)(uint64_t))type metadata accessor for SASSetupB);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007D1BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_1003268D0, (uint64_t)qword_10032F528, a1);
}

uint64_t sub_10007D1E0(uint64_t a1)
{
  uint64_t v2 = sub_1000826B0(&qword_10031EE58, (void (*)(uint64_t))type metadata accessor for SASSetupB);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D24C()
{
  sub_1000826B0(&qword_10031EE58, (void (*)(uint64_t))type metadata accessor for SASSetupB);

  return Message.hash(into:)();
}

const char *sub_10007D2C8()
{
  return "SASReveal";
}

uint64_t sub_10007D2D4()
{
  return 0x6165766552534153;
}

uint64_t sub_10007D2F0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F540);
  sub_100080F90(v0, (uint64_t)qword_10032F540);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856E0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "sessionID";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "aRandom";
  *((void *)v10 + 1) = 7;
  uint8_t v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "peerSessionID";
  *(void *)(v11 + 8) = 13;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007D4F4()
{
  return sub_10007F488(&qword_1003268D8, (uint64_t)qword_10032F540);
}

uint64_t sub_10007D518@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_1003268D8, (uint64_t)qword_10032F540, a1);
}

uint64_t sub_10007D53C()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10007D5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007D610(a1, a2, a3, (void (*)(void))type metadata accessor for SASReveal);
}

uint64_t sub_10007D610(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v6 = *v4;
  unint64_t v7 = v4[1];
  switch(v7 >> 62)
  {
    case 1uLL:
      if ((int)v6 != v6 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v6 + 16) != *(void *)(v6 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v7 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v5)
      {
LABEL_8:
        uint64_t v10 = v4[2];
        unint64_t v11 = v4[3];
        switch(v11 >> 62)
        {
          case 1uLL:
            if ((int)v10 != v10 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v10 + 16) != *(void *)(v10 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v11 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
            if (!v5)
            {
LABEL_15:
              uint64_t v12 = v4[4];
              unint64_t v13 = v4[5];
              switch(v13 >> 62)
              {
                case 1uLL:
                  if ((int)v12 != v12 >> 32) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 2uLL:
                  if (*(void *)(v12 + 16) != *(void *)(v12 + 24)) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                case 3uLL:
                  goto LABEL_22;
                default:
                  if ((v13 & 0xFF000000000000) == 0) {
                    goto LABEL_22;
                  }
LABEL_21:
                  uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
                  if (!v5)
                  {
LABEL_22:
                    a4(0);
                    uint64_t result = UnknownStorage.traverse<A>(visitor:)();
                  }
                  break;
              }
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_10007D818(uint64_t a1, uint64_t a2)
{
  return sub_10008162C(a1, a2, type metadata accessor for SASReveal) & 1;
}

Swift::Int sub_10007D848()
{
  return sub_10007F94C((void (*)(void))type metadata accessor for SASReveal, &qword_10031ED40, (void (*)(uint64_t))type metadata accessor for SASReveal);
}

uint64_t sub_10007D890@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_1002856B0;
  a1[1] = xmmword_1002856B0;
  a1[2] = xmmword_1002856B0;
  return UnknownStorage.init()();
}

uint64_t sub_10007D8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000826B0(&qword_10031F450, (void (*)(uint64_t))type metadata accessor for SASReveal);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007D93C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_1003268D8, (uint64_t)qword_10032F540, a1);
}

uint64_t sub_10007D960(uint64_t a1)
{
  uint64_t v2 = sub_1000826B0(&qword_10031EE70, (void (*)(uint64_t))type metadata accessor for SASReveal);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007D9CC()
{
  sub_1000826B0(&qword_10031EE70, (void (*)(uint64_t))type metadata accessor for SASReveal);

  return Message.hash(into:)();
}

const char *sub_10007DA48()
{
  return "SASConfirm";
}

uint64_t sub_10007DA54()
{
  return 0x69666E6F43534153;
}

uint64_t sub_10007DA70()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F558);
  sub_100080F90(v0, (uint64_t)qword_10032F558);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856E0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "sessionID";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "sentTime";
  *((void *)v10 + 1) = 8;
  uint8_t v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "peerSessionID";
  *(void *)(v11 + 8) = 13;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007DC74()
{
  return sub_10007F488(&qword_1003268E0, (uint64_t)qword_10032F558);
}

uint64_t sub_10007DC98@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_1003268E0, (uint64_t)qword_10032F558, a1);
}

uint64_t sub_10007DCBC()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      switch(result)
      {
        case 3:
          goto LABEL_10;
        case 2:
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          break;
        case 1:
LABEL_10:
          dispatch thunk of Decoder.decodeSingularBytesField(value:)();
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10007DD74()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        if (!v0[2] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
        {
          uint64_t v5 = v0[3];
          unint64_t v6 = v0[4];
          switch(v6 >> 62)
          {
            case 1uLL:
              if ((int)v5 != v5 >> 32) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 2uLL:
              if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 3uLL:
              goto LABEL_17;
            default:
              if ((v6 & 0xFF000000000000) == 0) {
                goto LABEL_17;
              }
LABEL_16:
              uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
              if (!v1)
              {
LABEL_17:
                type metadata accessor for SASConfirm(0);
                uint64_t result = UnknownStorage.traverse<A>(visitor:)();
              }
              break;
          }
        }
      }
      return result;
  }
}

Swift::Int sub_10007DF14()
{
  return sub_10007F94C((void (*)(void))type metadata accessor for SASConfirm, &qword_10031ED48, (void (*)(uint64_t))type metadata accessor for SASConfirm);
}

uint64_t sub_10007DF5C@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1002856B0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xC000000000000000;
  return UnknownStorage.init()();
}

uint64_t sub_10007DF94()
{
  return sub_10007DCBC();
}

uint64_t sub_10007DFAC()
{
  return sub_10007DD74();
}

uint64_t sub_10007DFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000826B0(&qword_10031F448, (void (*)(uint64_t))type metadata accessor for SASConfirm);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007E040@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_1003268E0, (uint64_t)qword_10032F558, a1);
}

uint64_t sub_10007E064(uint64_t a1)
{
  uint64_t v2 = sub_1000826B0(&qword_10031EE88, (void (*)(uint64_t))type metadata accessor for SASConfirm);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007E0D0()
{
  sub_1000826B0(&qword_10031EE88, (void (*)(uint64_t))type metadata accessor for SASConfirm);

  return Message.hash(into:)();
}

void *sub_10007E14C()
{
  return &unk_100285790;
}

uint64_t sub_10007E158()
{
  return 0x6D6F44726F727245;
}

uint64_t sub_10007E17C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F570);
  sub_100080F90(v0, (uint64_t)qword_10032F570);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856E0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "errorDomain";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "errorCode";
  *((void *)v10 + 1) = 9;
  uint8_t v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "underlyingErrors";
  *(void *)(v11 + 8) = 16;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007E380()
{
  return sub_10007F488(&qword_1003268E8, (uint64_t)qword_10032F570);
}

uint64_t sub_10007E3A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_1003268E8, (uint64_t)qword_10032F570, a1);
}

uint64_t sub_10007E3C8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for ErrorDomainCode(0);
    sub_1000826B0(&qword_10031ED50, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_10007E504()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!v0[2] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0[3] + 16)
        || (type metadata accessor for ErrorDomainCode(0),
            sub_1000826B0(&qword_10031ED50, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode),
            uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for ErrorDomainCode(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

Swift::Int sub_10007E654()
{
  return sub_10007F94C((void (*)(void))type metadata accessor for ErrorDomainCode, &qword_10031ED58, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode);
}

uint64_t sub_10007E69C@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_10007E6D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10007E740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_10007E7B0()
{
  return sub_10007E3C8();
}

uint64_t sub_10007E7C8()
{
  return sub_10007E504();
}

uint64_t sub_10007E7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000826B0(&qword_10031F440, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007E85C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_1003268E8, (uint64_t)qword_10032F570, a1);
}

uint64_t sub_10007E880(uint64_t a1)
{
  uint64_t v2 = sub_1000826B0(&qword_10031ED50, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007E8EC()
{
  sub_1000826B0(&qword_10031ED50, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode);

  return Message.hash(into:)();
}

void *sub_10007E968()
{
  return &unk_1002BD7D8;
}

unint64_t sub_10007E974()
{
  return 0xD000000000000010;
}

uint64_t sub_10007E990(uint64_t a1)
{
  return sub_10007C22C(a1, qword_10032F588, (uint64_t)"pushToken", (uint64_t)"error", 5);
}

uint64_t sub_10007E9B0()
{
  return sub_10007F488(&qword_1003268F0, (uint64_t)qword_10032F588);
}

uint64_t sub_10007E9D4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_1003268F0, (uint64_t)qword_10032F588, a1);
}

uint64_t sub_10007E9F8()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for IDSFailingDevice(0);
        type metadata accessor for ErrorDomainCode(0);
        sub_1000826B0(&qword_10031ED50, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBytesField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10007EB20()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
      if (!v1)
      {
LABEL_8:
        uint64_t result = sub_10007EC30((uint64_t)v0);
        if (!v1)
        {
          type metadata accessor for IDSFailingDevice(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
      return result;
  }
}

uint64_t sub_10007EC30(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_10031ED00);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for IDSFailingDevice(0);
  sub_100080E6C(a1 + *(int *)(v9 + 24), (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1) {
    return sub_100087A1C((uint64_t)v4, &qword_10031ED00);
  }
  sub_100080ED4((uint64_t)v4, (uint64_t)v8);
  sub_1000826B0(&qword_10031ED50, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_1000879BC((uint64_t)v8, type metadata accessor for ErrorDomainCode);
}

Swift::Int sub_10007EE1C()
{
  return sub_10007F94C((void (*)(void))type metadata accessor for IDSFailingDevice, &qword_10031ED60, (void (*)(uint64_t))type metadata accessor for IDSFailingDevice);
}

uint64_t sub_10007EE64@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_1002856B0;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

uint64_t sub_10007EEF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10007EF64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_10007EFD4()
{
  return sub_10007E9F8();
}

uint64_t sub_10007EFEC()
{
  return sub_10007EB20();
}

uint64_t sub_10007F004(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000826B0(&qword_10031F438, (void (*)(uint64_t))type metadata accessor for IDSFailingDevice);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007F080@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_1003268F0, (uint64_t)qword_10032F588, a1);
}

uint64_t sub_10007F0A4(uint64_t a1)
{
  uint64_t v2 = sub_1000826B0(&qword_10031ED68, (void (*)(uint64_t))type metadata accessor for IDSFailingDevice);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10007F110()
{
  sub_1000826B0(&qword_10031ED68, (void (*)(uint64_t))type metadata accessor for IDSFailingDevice);

  return Message.hash(into:)();
}

const char *sub_10007F18C()
{
  return "SASTTR";
}

uint64_t sub_10007F198()
{
  return 0x525454534153;
}

uint64_t sub_10007F1AC()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F5A0);
  sub_100080F90(v0, (uint64_t)qword_10032F5A0);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100285710;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "unique";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "title";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "description";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *unint64_t v13 = 4;
  *(void *)uint64_t v14 = "relatedRadar";
  *((void *)v14 + 1) = 12;
  uint8_t v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  id v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 5;
  *(void *)id v16 = "radar";
  *((void *)v16 + 1) = 5;
  v16[16] = 2;
  v9();
  __int16 v17 = (void *)(v5 + 5 * v2);
  xpc_activity_state_t v18 = (char *)v17 + v1[14];
  void *v17 = 6;
  *(void *)xpc_activity_state_t v18 = "idsFailingDevices";
  *((void *)v18 + 1) = 17;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10007F464()
{
  return sub_10007F488(qword_1003268F8, (uint64_t)qword_10032F5A0);
}

uint64_t sub_10007F488(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for _NameMap();

  return sub_100080F90(v3, a2);
}

uint64_t sub_10007F4DC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(qword_1003268F8, (uint64_t)qword_10032F5A0, a1);
}

uint64_t sub_10007F500@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = sub_100080F90(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_10007F598()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          goto LABEL_5;
        case 6:
          type metadata accessor for IDSFailingDevice(0);
          sub_1000826B0(&qword_10031ED68, (void (*)(uint64_t))type metadata accessor for IDSFailingDevice);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10007F730()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v7 = v0[5];
      uint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v8 = v0[4] & 0xFFFFFFFFFFFFLL;
      }
      if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!v0[6] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
        {
          if (!v0[7] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
          {
            if (!*(void *)(v0[8] + 16)
              || (type metadata accessor for IDSFailingDevice(0),
                  sub_1000826B0(&qword_10031ED68, (void (*)(uint64_t))type metadata accessor for IDSFailingDevice), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for SASTTR(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

Swift::Int sub_10007F904()
{
  return sub_10007F94C((void (*)(void))type metadata accessor for SASTTR, &qword_10031ED70, (void (*)(uint64_t))type metadata accessor for SASTTR);
}

Swift::Int sub_10007F94C(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_10007F9D4@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = &_swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_10007FA14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10007FA84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_10007FAF4())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10007FB18()
{
  return sub_10007F598();
}

uint64_t sub_10007FB30()
{
  return sub_10007F730();
}

uint64_t sub_10007FB48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000826B0(&qword_10031F430, (void (*)(uint64_t))type metadata accessor for SASTTR);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10007FBC4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(qword_1003268F8, (uint64_t)qword_10032F5A0, a1);
}

uint64_t sub_10007FBE8@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for _NameMap();
  uint64_t v6 = sub_100080F90(v5, a2);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_10007FC84(uint64_t a1)
{
  uint64_t v2 = sub_1000826B0((unint64_t *)&unk_100321310, (void (*)(uint64_t))type metadata accessor for SASTTR);

  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_10007FCF0()
{
  return Hasher._finalize()();
}

uint64_t sub_10007FD48()
{
  sub_1000826B0((unint64_t *)&unk_100321310, (void (*)(uint64_t))type metadata accessor for SASTTR);

  return Message.hash(into:)();
}

Swift::Int sub_10007FDC4()
{
  return Hasher._finalize()();
}

uint64_t sub_10007FE18@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  unint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_100080C58(a2, a3);
      unint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x10008007CLL);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_100080CB0(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      __int16 v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_10008008C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100080E08(&qword_10031ED00);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100080E08(&qword_10031F490);
  __chkstk_darwin(v65);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = type metadata accessor for IDSFailingDevice(0);
  uint64_t v13 = __chkstk_darwin(v67);
  uint64_t v15 = (uint64_t *)((char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13);
  uint64_t v18 = (uint64_t *)((char *)&v55 - v17);
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19 != *(void *)(a2 + 16)) {
    goto LABEL_55;
  }
  if (!v19 || a1 == a2)
  {
    char v52 = 1;
    return v52 & 1;
  }
  uint64_t v63 = v4;
  long long v64 = v12;
  long long v58 = v7;
  long long v59 = v10;
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v61 = 0;
  id v62 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v60 = *(void *)(v16 + 72);
  uint64_t v21 = v19 - 1;
  uint64_t v56 = a2;
  uint64_t v57 = a1;
  while (2)
  {
    sub_100087954(a1 + v20, (uint64_t)v18, type metadata accessor for IDSFailingDevice);
    sub_100087954(a2 + v20, (uint64_t)v15, type metadata accessor for IDSFailingDevice);
    uint64_t v22 = *v18;
    unint64_t v23 = v18[1];
    uint64_t v24 = *v15;
    unint64_t v25 = v15[1];
    uint64_t v26 = 0;
    switch(v23 >> 62)
    {
      case 1uLL:
        LODWORD(v26) = HIDWORD(v22) - v22;
        if (__OFSUB__(HIDWORD(v22), v22))
        {
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
        }
        uint64_t v26 = (int)v26;
        break;
      case 2uLL:
        uint64_t v28 = *(void *)(v22 + 16);
        uint64_t v27 = *(void *)(v22 + 24);
        BOOL v29 = __OFSUB__(v27, v28);
        uint64_t v26 = v27 - v28;
        if (!v29) {
          break;
        }
        goto LABEL_58;
      case 3uLL:
        break;
      default:
        uint64_t v26 = BYTE6(v23);
        break;
    }
    uint64_t v66 = v21;
    switch(v25 >> 62)
    {
      case 1uLL:
        LODWORD(v30) = HIDWORD(v24) - v24;
        if (__OFSUB__(HIDWORD(v24), v24)) {
          goto LABEL_59;
        }
        uint64_t v30 = (int)v30;
LABEL_15:
        if (v26 != v30) {
          goto LABEL_54;
        }
        if (v26 >= 1)
        {
          switch(v23 >> 62)
          {
            case 1uLL:
              uint64_t v55 = (v22 >> 32) - (int)v22;
              if (v22 >> 32 < (int)v22) {
                goto LABEL_61;
              }
              sub_100080C58(v22, v23);
              uint64_t v33 = __DataStorage._bytes.getter();
              if (!v33) {
                goto LABEL_25;
              }
              uint64_t v34 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v22, v34)) {
                goto LABEL_63;
              }
              v33 += (int)v22 - v34;
LABEL_25:
              __DataStorage._length.getter();
              uint64_t v35 = v61;
              sub_10007FE18(v33, v24, v25, (char *)__s1);
              uint64_t v61 = v35;
              sub_100080CB0(v22, v23);
              break;
            case 2uLL:
              uint64_t v36 = *(void *)(v22 + 16);
              uint64_t v37 = *(void *)(v22 + 24);
              swift_retain();
              swift_retain();
              uint64_t v38 = __DataStorage._bytes.getter();
              if (!v38) {
                goto LABEL_29;
              }
              uint64_t v39 = __DataStorage._offset.getter();
              if (__OFSUB__(v36, v39)) {
                goto LABEL_64;
              }
              v38 += v36 - v39;
LABEL_29:
              if (__OFSUB__(v37, v36)) {
                goto LABEL_62;
              }
              __DataStorage._length.getter();
              uint64_t v40 = v61;
              sub_10007FE18(v38, v24, v25, (char *)__s1);
              uint64_t v61 = v40;
              swift_release();
              swift_release();
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              goto LABEL_33;
            default:
              __s1[0] = v22;
              LOWORD(__s1[1]) = v23;
              BYTE2(__s1[1]) = BYTE2(v23);
              BYTE3(__s1[1]) = BYTE3(v23);
              BYTE4(__s1[1]) = BYTE4(v23);
              BYTE5(__s1[1]) = BYTE5(v23);
LABEL_33:
              uint64_t v42 = v61;
              sub_10007FE18((uint64_t)__s1, v24, v25, &v68);
              uint64_t v61 = v42;
              char v41 = v68;
              goto LABEL_34;
          }
          char v41 = __s1[0];
          a2 = v56;
LABEL_34:
          a1 = v57;
          if ((v41 & 1) == 0) {
            goto LABEL_54;
          }
        }
LABEL_35:
        uint64_t v43 = *(int *)(v67 + 24);
        uint64_t v44 = (uint64_t)v15 + v43;
        uint64_t v45 = (uint64_t)v64;
        uint64_t v46 = (uint64_t)&v64[*(int *)(v65 + 48)];
        sub_100080E6C((uint64_t)v18 + v43, (uint64_t)v64);
        sub_100080E6C(v44, v46);
        uint64_t v47 = v63;
        id v48 = *v62;
        if ((*v62)(v45, 1, v63) == 1)
        {
          if (v48(v46, 1, v47) != 1)
          {
            id v53 = &qword_10031F490;
            goto LABEL_53;
          }
          sub_100087A1C(v45, &qword_10031ED00);
LABEL_45:
          type metadata accessor for UnknownStorage();
          sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
          sub_1000879BC((uint64_t)v15, type metadata accessor for IDSFailingDevice);
          sub_1000879BC((uint64_t)v18, type metadata accessor for IDSFailingDevice);
          uint64_t v21 = v66 - 1;
          if ((v52 & 1) == 0) {
            return v52 & 1;
          }
          v20 += v60;
          if (!v66) {
            return v52 & 1;
          }
          continue;
        }
        id v49 = v59;
        sub_100080E6C(v45, (uint64_t)v59);
        if (v48(v46, 1, v47) != 1)
        {
          id v50 = v58;
          sub_100080ED4(v46, (uint64_t)v58);
          if ((*v49 != *v50 || v49[1] != v50[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
            || v49[2] != v50[2]
            || (sub_100080940(v49[3], v50[3]) & 1) == 0)
          {
            sub_1000879BC((uint64_t)v50, type metadata accessor for ErrorDomainCode);
            id v53 = &qword_10031ED00;
            goto LABEL_52;
          }
          type metadata accessor for UnknownStorage();
          sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v51 = dispatch thunk of static Equatable.== infix(_:_:)();
          sub_1000879BC((uint64_t)v50, type metadata accessor for ErrorDomainCode);
          sub_1000879BC((uint64_t)v49, type metadata accessor for ErrorDomainCode);
          sub_100087A1C((uint64_t)v64, &qword_10031ED00);
          if ((v51 & 1) == 0) {
            goto LABEL_54;
          }
          goto LABEL_45;
        }
        id v53 = &qword_10031F490;
LABEL_52:
        sub_1000879BC((uint64_t)v49, type metadata accessor for ErrorDomainCode);
        uint64_t v45 = (uint64_t)v64;
LABEL_53:
        sub_100087A1C(v45, v53);
LABEL_54:
        sub_1000879BC((uint64_t)v15, type metadata accessor for IDSFailingDevice);
        sub_1000879BC((uint64_t)v18, type metadata accessor for IDSFailingDevice);
LABEL_55:
        char v52 = 0;
        return v52 & 1;
      case 2uLL:
        uint64_t v32 = *(void *)(v24 + 16);
        uint64_t v31 = *(void *)(v24 + 24);
        BOOL v29 = __OFSUB__(v31, v32);
        uint64_t v30 = v31 - v32;
        if (!v29) {
          goto LABEL_15;
        }
        goto LABEL_60;
      case 3uLL:
        if (v26) {
          goto LABEL_54;
        }
        goto LABEL_35;
      default:
        uint64_t v30 = BYTE6(v25);
        goto LABEL_15;
    }
  }
}

uint64_t sub_100080940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  unint64_t v10 = (uint64_t *)((char *)&v19 - v9);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16))
  {
LABEL_20:
    char v15 = 0;
    return v15 & 1;
  }
  if (v11 && a1 != a2)
  {
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v20 = *(void *)(v8 + 72);
    uint64_t v13 = v11 - 1;
    while (1)
    {
      sub_100087954(a1 + v12, (uint64_t)v10, type metadata accessor for ErrorDomainCode);
      sub_100087954(a2 + v12, (uint64_t)v7, type metadata accessor for ErrorDomainCode);
      BOOL v14 = *v10 == *v7 && v10[1] == v7[1];
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || v10[2] != v7[2]
        || (sub_100080940(v10[3], v7[3]) & 1) == 0)
      {
        break;
      }
      type metadata accessor for UnknownStorage();
      sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_1000879BC((uint64_t)v7, type metadata accessor for ErrorDomainCode);
      sub_1000879BC((uint64_t)v10, type metadata accessor for ErrorDomainCode);
      BOOL v17 = v13-- != 0;
      if (v15)
      {
        v12 += v20;
        if (v17) {
          continue;
        }
      }
      return v15 & 1;
    }
    sub_1000879BC((uint64_t)v7, type metadata accessor for ErrorDomainCode);
    sub_1000879BC((uint64_t)v10, type metadata accessor for ErrorDomainCode);
    goto LABEL_20;
  }
  char v15 = 1;
  return v15 & 1;
}

uint64_t sub_100080BB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned char *)(a1 + 40);
    uint64_t v4 = (unsigned char *)(a2 + 40);
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      if (*v3) {
        uint64_t v6 = *((void *)v3 - 1) != 0;
      }
      else {
        uint64_t v6 = *((void *)v3 - 1);
      }
      if (*v4 == 1)
      {
        if (v5)
        {
          if (v6 != 1) {
            return 0;
          }
        }
        else if (v6)
        {
          return 0;
        }
      }
      else if (v6 != v5)
      {
        return 0;
      }
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_100080C58(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100080CB0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t type metadata accessor for SASAnnounce(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_100329000);
}

uint64_t type metadata accessor for SASCommit(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_100329010);
}

uint64_t type metadata accessor for SASSelected(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_100329020);
}

uint64_t type metadata accessor for SASTeardown(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_100329030);
}

uint64_t type metadata accessor for SASSetupB(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_100329040);
}

uint64_t type metadata accessor for SASReveal(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_100329050);
}

uint64_t type metadata accessor for SASConfirm(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_100329060);
}

uint64_t type metadata accessor for ErrorDomainCode(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_100329070);
}

uint64_t sub_100080E08(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for IDSFailingDevice(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_100329080);
}

uint64_t sub_100080E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100080E08(&qword_10031ED00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100080ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SASTTR(uint64_t a1)
{
  return sub_100080F58(a1, qword_100329090);
}

uint64_t sub_100080F58(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100080F90(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_100080FC8()
{
  unint64_t result = qword_10031ED08;
  if (!qword_10031ED08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031ED08);
  }
  return result;
}

uint64_t sub_10008101C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10007FE18((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1000810F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_10007FE18(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_1000811AC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x100081414);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_100080C58(a3, a4);
                  sub_100080C58(a1, a2);
                  char v17 = sub_1000810F4((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_100080CB0(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_100080C58(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_1000810F4(v21, v22, v20, a3, a4);
                  sub_100080CB0(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_100080C58(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_100080C58(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_10008101C(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_100080CB0(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100081444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((sub_1000811AC(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (sub_1000811AC(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0
    && (sub_1000811AC(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a2 + 32), *(void *)(a2 + 40)) & 1) != 0
    && (sub_1000811AC(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a2 + 48), *(void *)(a2 + 56)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for SASSetupB(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 32), v4);
    v12(v8, a2 + *(int *)(v11 + 32), v4);
    sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_10008162C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v18 - v11;
  if ((sub_1000811AC(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (sub_1000811AC(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0
    && (sub_1000811AC(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a2 + 32), *(void *)(a2 + 40)) & 1) != 0)
  {
    uint64_t v13 = a3(0);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v14(v12, a1 + *(int *)(v13 + 28), v6);
    v14(v10, a2 + *(int *)(v13 + 28), v6);
    sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
    v16(v10, v6);
    v16(v12, v6);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_10008180C(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      if (*((void *)a1 + 4) == *((void *)a2 + 4) && *((void *)a1 + 5) == *((void *)a2 + 5)
        || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
        if (*((void *)a1 + 6) == *((void *)a2 + 6)
          && *((void *)a1 + 7) == *((void *)a2 + 7)
          && (sub_10008008C(*((void *)a1 + 8), *((void *)a2 + 8)) & 1) != 0)
        {
          uint64_t v14 = type metadata accessor for SASTTR(0);
          char v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
          v15(v10, &a1[*(int *)(v14 + 40)], v4);
          v15(v8, &a2[*(int *)(v14 + 40)], v4);
          sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
          v16(v8, v4);
          v16(v10, v4);
        }
        else
        {
          char v12 = 0;
        }
      }
    }
  }
  return v12 & 1;
}

uint64_t sub_100081A54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v45 - v8;
  uint64_t v10 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v53 = *(void *)(v10 - 8);
  uint64_t v54 = v10;
  __chkstk_darwin(v10);
  char v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100080E08(&qword_10031F490);
  __chkstk_darwin(v13);
  char v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100080E08(&qword_10031ED00);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  unint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v45 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v45 - v23;
  if ((sub_1000811AC(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_8;
  }
  id v49 = v7;
  id v50 = v19;
  uint64_t v46 = v12;
  id v48 = v9;
  uint64_t v25 = type metadata accessor for IDSFailingDevice(0);
  sub_100080E6C(a1 + *(int *)(v25 + 24), (uint64_t)v24);
  sub_100080E6C(a2 + *(int *)(v25 + 24), (uint64_t)v22);
  uint64_t v26 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_100080E6C((uint64_t)v24, (uint64_t)v15);
  sub_100080E6C((uint64_t)v22, v26);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
  int v28 = v27(v15, 1, v54);
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v31 = (uint64_t)v15;
  uint64_t v47 = v29;
  if (v28 == 1)
  {
    uint64_t v32 = v25;
    sub_100087A1C((uint64_t)v22, &qword_10031ED00);
    sub_100087A1C((uint64_t)v24, &qword_10031ED00);
    if (v27((char *)v26, 1, v54) == 1)
    {
      sub_100087A1C(v31, &qword_10031ED00);
LABEL_11:
      uint64_t v39 = v51;
      uint64_t v38 = v52;
      uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
      char v41 = v48;
      v40(v48, v30 + *(int *)(v32 + 20), v52);
      uint64_t v42 = v47 + *(int *)(v32 + 20);
      uint64_t v43 = v49;
      v40(v49, v42, v38);
      sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v44 = *(void (**)(char *, uint64_t))(v39 + 8);
      v44(v43, v38);
      v44(v41, v38);
      return v34 & 1;
    }
    goto LABEL_7;
  }
  uint64_t v33 = v50;
  sub_100080E6C((uint64_t)v15, (uint64_t)v50);
  if (v27((char *)v26, 1, v54) == 1)
  {
    sub_100087A1C((uint64_t)v22, &qword_10031ED00);
    sub_100087A1C((uint64_t)v24, &qword_10031ED00);
    sub_1000879BC((uint64_t)v33, type metadata accessor for ErrorDomainCode);
LABEL_7:
    sub_100087A1C(v31, &qword_10031F490);
    goto LABEL_8;
  }
  uint64_t v32 = v25;
  uint64_t v36 = v46;
  sub_100080ED4(v26, (uint64_t)v46);
  char v37 = sub_100081F4C(v33, v36);
  sub_1000879BC((uint64_t)v36, type metadata accessor for ErrorDomainCode);
  sub_100087A1C((uint64_t)v22, &qword_10031ED00);
  sub_100087A1C((uint64_t)v24, &qword_10031ED00);
  sub_1000879BC((uint64_t)v33, type metadata accessor for ErrorDomainCode);
  sub_100087A1C(v31, &qword_10031ED00);
  if (v37) {
    goto LABEL_11;
  }
LABEL_8:
  char v34 = 0;
  return v34 & 1;
}

uint64_t sub_100081F4C(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    if (*((void *)a1 + 2) == *((void *)a2 + 2)
      && (sub_100080940(*((void *)a1 + 3), *((void *)a2 + 3)) & 1) != 0)
    {
      uint64_t v13 = type metadata accessor for ErrorDomainCode(0);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v14(v10, &a1[*(int *)(v13 + 28)], v4);
      v14(v8, &a2[*(int *)(v13 + 28)], v4);
      sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      v15(v10, v4);
    }
    else
    {
      char v12 = 0;
    }
  }
  return v12 & 1;
}

uint64_t sub_100082138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  if ((sub_1000811AC(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_7;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0)
    {
      uint64_t v11 = 0;
      goto LABEL_8;
    }
LABEL_9:
    uint64_t v13 = type metadata accessor for SASTeardown(0);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v14(v10, a1 + *(int *)(v13 + 24), v4);
    v14(v8, a2 + *(int *)(v13 + 24), v4);
    sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    char v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
    return v12 & 1;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a2 + 24))
  {
    if (v11) {
      goto LABEL_7;
    }
    goto LABEL_9;
  }
LABEL_8:
  if (v11 == *(void *)(a2 + 16)) {
    goto LABEL_9;
  }
LABEL_7:
  char v12 = 0;
  return v12 & 1;
}

uint64_t sub_100082320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (sub_1000811AC(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v11 = type metadata accessor for SASSelected(0);
    char v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 20), v4);
    v12(v8, a2 + *(int *)(v11 + 20), v4);
    sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1000824D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((sub_100080BB8(*(void *)a1, *(void *)a2) & 1) != 0
    && (sub_1000811AC(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)) & 1) != 0
    && (sub_1000811AC(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 24), *(void *)(a2 + 32)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for SASAnnounce(0);
    char v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 28), v4);
    v12(v8, a2 + *(int *)(v11 + 28), v4);
    sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1000826B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000826F8()
{
  unint64_t result = qword_10031ED28;
  if (!qword_10031ED28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031ED28);
  }
  return result;
}

uint64_t sub_10008274C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((sub_1000811AC(*a1, a1[1], *a2, a2[1]) & 1) != 0
    && a1[2] == a2[2]
    && (sub_1000811AC(a1[3], a1[4], a2[3], a2[4]) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for SASConfirm(0);
    char v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 28), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 28), v4);
    sub_1000826B0(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

unint64_t sub_100082928()
{
  unint64_t result = qword_10031ED78;
  if (!qword_10031ED78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031ED78);
  }
  return result;
}

unint64_t sub_100082980()
{
  unint64_t result = qword_10031ED80;
  if (!qword_10031ED80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031ED80);
  }
  return result;
}

uint64_t sub_1000829D4()
{
  return sub_100082CA4(&qword_10031ED88, &qword_10031ED90);
}

uint64_t sub_1000829FC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_100082A48()
{
  unint64_t result = qword_10031ED98;
  if (!qword_10031ED98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031ED98);
  }
  return result;
}

unint64_t sub_100082AA0()
{
  unint64_t result = qword_10031EDA0;
  if (!qword_10031EDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031EDA0);
  }
  return result;
}

unint64_t sub_100082AF8()
{
  unint64_t result = qword_10031EDA8;
  if (!qword_10031EDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031EDA8);
  }
  return result;
}

uint64_t sub_100082B4C()
{
  return sub_100082CA4(&qword_10031EDB0, &qword_10031EDB8);
}

unint64_t sub_100082B78()
{
  unint64_t result = qword_10031EDC0;
  if (!qword_10031EDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031EDC0);
  }
  return result;
}

unint64_t sub_100082BD0()
{
  unint64_t result = qword_10031EDC8;
  if (!qword_10031EDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031EDC8);
  }
  return result;
}

unint64_t sub_100082C28()
{
  unint64_t result = qword_10031EDD0;
  if (!qword_10031EDD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031EDD0);
  }
  return result;
}

uint64_t sub_100082C7C()
{
  return sub_100082CA4(&qword_10031EDD8, &qword_10031EDE0);
}

uint64_t sub_100082CA4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000829FC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100082CF8()
{
  unint64_t result = qword_10031EDE8;
  if (!qword_10031EDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031EDE8);
  }
  return result;
}

uint64_t sub_100082D4C()
{
  return sub_1000826B0(&qword_10031EDF0, (void (*)(uint64_t))type metadata accessor for SASAnnounce);
}

uint64_t sub_100082D94()
{
  return sub_1000826B0(&qword_10031EDF8, (void (*)(uint64_t))type metadata accessor for SASAnnounce);
}

uint64_t sub_100082DDC()
{
  return sub_1000826B0(&qword_10031ED10, (void (*)(uint64_t))type metadata accessor for SASAnnounce);
}

uint64_t sub_100082E24()
{
  return sub_1000826B0(&qword_10031EE00, (void (*)(uint64_t))type metadata accessor for SASAnnounce);
}

uint64_t sub_100082E6C()
{
  return sub_1000826B0(&qword_10031EE08, (void (*)(uint64_t))type metadata accessor for SASCommit);
}

uint64_t sub_100082EB4()
{
  return sub_1000826B0(&qword_10031EE10, (void (*)(uint64_t))type metadata accessor for SASCommit);
}

uint64_t sub_100082EFC()
{
  return sub_1000826B0(&qword_10031ED18, (void (*)(uint64_t))type metadata accessor for SASCommit);
}

uint64_t sub_100082F44()
{
  return sub_1000826B0(&qword_10031EE18, (void (*)(uint64_t))type metadata accessor for SASCommit);
}

uint64_t sub_100082F8C()
{
  return sub_1000826B0(&qword_10031EE20, (void (*)(uint64_t))type metadata accessor for SASSelected);
}

uint64_t sub_100082FD4()
{
  return sub_1000826B0(&qword_10031EE28, (void (*)(uint64_t))type metadata accessor for SASSelected);
}

uint64_t sub_10008301C()
{
  return sub_1000826B0(&qword_10031ED20, (void (*)(uint64_t))type metadata accessor for SASSelected);
}

uint64_t sub_100083064()
{
  return sub_1000826B0(&qword_10031EE30, (void (*)(uint64_t))type metadata accessor for SASSelected);
}

uint64_t sub_1000830AC()
{
  return sub_1000826B0(&qword_10031EE38, (void (*)(uint64_t))type metadata accessor for SASTeardown);
}

uint64_t sub_1000830F4()
{
  return sub_1000826B0(&qword_10031EE40, (void (*)(uint64_t))type metadata accessor for SASTeardown);
}

uint64_t sub_10008313C()
{
  return sub_1000826B0(&qword_10031ED30, (void (*)(uint64_t))type metadata accessor for SASTeardown);
}

uint64_t sub_100083184()
{
  return sub_1000826B0(&qword_10031EE48, (void (*)(uint64_t))type metadata accessor for SASTeardown);
}

uint64_t sub_1000831CC()
{
  return sub_1000826B0(&qword_10031EE50, (void (*)(uint64_t))type metadata accessor for SASSetupB);
}

uint64_t sub_100083214()
{
  return sub_1000826B0(&qword_10031EE58, (void (*)(uint64_t))type metadata accessor for SASSetupB);
}

uint64_t sub_10008325C()
{
  return sub_1000826B0(&qword_10031ED38, (void (*)(uint64_t))type metadata accessor for SASSetupB);
}

uint64_t sub_1000832A4()
{
  return sub_1000826B0(&qword_10031EE60, (void (*)(uint64_t))type metadata accessor for SASSetupB);
}

uint64_t sub_1000832EC()
{
  return sub_1000826B0(&qword_10031EE68, (void (*)(uint64_t))type metadata accessor for SASReveal);
}

uint64_t sub_100083334()
{
  return sub_1000826B0(&qword_10031EE70, (void (*)(uint64_t))type metadata accessor for SASReveal);
}

uint64_t sub_10008337C()
{
  return sub_1000826B0(&qword_10031ED40, (void (*)(uint64_t))type metadata accessor for SASReveal);
}

uint64_t sub_1000833C4()
{
  return sub_1000826B0(&qword_10031EE78, (void (*)(uint64_t))type metadata accessor for SASReveal);
}

uint64_t sub_10008340C()
{
  return sub_1000826B0(&qword_10031EE80, (void (*)(uint64_t))type metadata accessor for SASConfirm);
}

uint64_t sub_100083454()
{
  return sub_1000826B0(&qword_10031EE88, (void (*)(uint64_t))type metadata accessor for SASConfirm);
}

uint64_t sub_10008349C()
{
  return sub_1000826B0(&qword_10031ED48, (void (*)(uint64_t))type metadata accessor for SASConfirm);
}

uint64_t sub_1000834E4()
{
  return sub_1000826B0(&qword_10031EE90, (void (*)(uint64_t))type metadata accessor for SASConfirm);
}

uint64_t sub_10008352C()
{
  return sub_1000826B0(&qword_10031EE98, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode);
}

uint64_t sub_100083574()
{
  return sub_1000826B0(&qword_10031ED50, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode);
}

uint64_t sub_1000835BC()
{
  return sub_1000826B0(&qword_10031ED58, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode);
}

uint64_t sub_100083604()
{
  return sub_1000826B0(&qword_10031EEA0, (void (*)(uint64_t))type metadata accessor for ErrorDomainCode);
}

uint64_t sub_10008364C()
{
  return sub_1000826B0(&qword_10031EEA8, (void (*)(uint64_t))type metadata accessor for IDSFailingDevice);
}

uint64_t sub_100083694()
{
  return sub_1000826B0(&qword_10031ED68, (void (*)(uint64_t))type metadata accessor for IDSFailingDevice);
}

uint64_t sub_1000836DC()
{
  return sub_1000826B0(&qword_10031ED60, (void (*)(uint64_t))type metadata accessor for IDSFailingDevice);
}

uint64_t sub_100083724()
{
  return sub_1000826B0(&qword_10031EEB0, (void (*)(uint64_t))type metadata accessor for IDSFailingDevice);
}

uint64_t sub_10008376C()
{
  return sub_1000826B0(&qword_10031EEB8, (void (*)(uint64_t))type metadata accessor for SASTTR);
}

uint64_t sub_1000837B4()
{
  return sub_1000826B0((unint64_t *)&unk_100321310, (void (*)(uint64_t))type metadata accessor for SASTTR);
}

uint64_t sub_1000837FC()
{
  return sub_1000826B0(&qword_10031ED70, (void (*)(uint64_t))type metadata accessor for SASTTR);
}

uint64_t sub_100083844()
{
  return sub_1000826B0(&qword_10031EEC0, (void (*)(uint64_t))type metadata accessor for SASTTR);
}

uint64_t initializeBufferWithCopyOfBuffer for SASIDSProtocolNumbers(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SASIDSProtocolNumbers()
{
  return &type metadata for SASIDSProtocolNumbers;
}

ValueMetadata *type metadata accessor for SASTeardownReason()
{
  return &type metadata for SASTeardownReason;
}

uint64_t getEnumTagSinglePayload for SASProtocol(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SASProtocol(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_100083914(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100083930(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SASProtocol()
{
  return &type metadata for SASProtocol;
}

uint64_t *sub_100083960(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    unint64_t v9 = a2[2];
    swift_bridgeObjectRetain();
    sub_100080C58(v8, v9);
    a1[1] = v8;
    a1[2] = v9;
    uint64_t v10 = a2[3];
    unint64_t v11 = a2[4];
    sub_100080C58(v10, v11);
    a1[3] = v10;
    a1[4] = v11;
    uint64_t v12 = *(int *)(a3 + 28);
    char v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_100083A60(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_100080CB0(*(void *)(a1 + 8), *(void *)(a1 + 16));
  sub_100080CB0(*(void *)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100083AE8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  unint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  sub_100080C58(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  uint64_t v8 = a2[3];
  unint64_t v9 = a2[4];
  sub_100080C58(v8, v9);
  a1[3] = v8;
  a1[4] = v9;
  uint64_t v10 = *(int *)(a3 + 28);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

void *sub_100083BA0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  sub_100080C58(v6, v7);
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  sub_100080CB0(v8, v9);
  uint64_t v10 = a2[3];
  unint64_t v11 = a2[4];
  sub_100080C58(v10, v11);
  uint64_t v12 = a1[3];
  unint64_t v13 = a1[4];
  a1[3] = v10;
  a1[4] = v11;
  sub_100080CB0(v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_100083C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100083D00(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_100080CB0(v6, v7);
  uint64_t v8 = a1[3];
  unint64_t v9 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  sub_100080CB0(v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_100083DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100083DC0);
}

uint64_t sub_100083DC0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100083E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100083E84);
}

void *sub_100083E84(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100083F2C()
{
  return sub_1000862B4();
}

uint64_t sub_100083F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100083F74);
}

uint64_t sub_100083F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100083F8C);
}

uint64_t sub_100083F90()
{
  return sub_1000862B4();
}

uint64_t *sub_100083FA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100080C58(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_10008408C(uint64_t a1, uint64_t a2)
{
  sub_100080CB0(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_100084108(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_1000841A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100080CB0(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_100084240(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1000842BC(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100080CB0(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_10008434C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100084360);
}

uint64_t sub_100084360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10008441C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100084430);
}

void *sub_100084430(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *unint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000844E0()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100084578(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_100080C58(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_100084670(uint64_t a1, uint64_t a2)
{
  sub_100080CB0(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_1000846EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_100080C58(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_100084794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_100080C58(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_100080CB0(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_100084844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000848D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100080CB0(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100084970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100084984);
}

uint64_t sub_100084984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100084A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100084A54);
}

void *sub_100084A54(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100084B04()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100084BA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100080C58(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_100080C58(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_100080C58(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = a2[6];
    unint64_t v14 = a2[7];
    sub_100080C58(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return a1;
}

uint64_t sub_100084CC8(uint64_t a1, uint64_t a2)
{
  sub_100080CB0(*(void *)a1, *(void *)(a1 + 8));
  sub_100080CB0(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_100080CB0(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_100080CB0(*(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_100084D5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100080C58(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_100080C58(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  sub_100080C58(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t *sub_100084E30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100080CB0(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_100080C58(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100080CB0(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_100080C58(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_100080CB0(v16, v17);
  uint64_t v18 = a2[6];
  unint64_t v19 = a2[7];
  sub_100080C58(v18, v19);
  uint64_t v20 = a1[6];
  unint64_t v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_100080CB0(v20, v21);
  uint64_t v22 = *(int *)(a3 + 32);
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  return a1;
}

_OWORD *sub_100084F24(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  long long v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 32);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t *sub_100084FA8(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100080CB0(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100080CB0(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_100080CB0(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_100080CB0(v12, v13);
  uint64_t v14 = *(int *)(a3 + 32);
  unint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_100085068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008507C);
}

uint64_t sub_10008507C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100085138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008514C);
}

void *sub_10008514C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  long long v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 32);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000851FC()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100085298(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100080C58(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_100080C58(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_100080C58(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = *(int *)(a3 + 28);
    uint64_t v14 = (char *)a1 + v13;
    unint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_1000853A8(uint64_t a1, uint64_t a2)
{
  sub_100080CB0(*(void *)a1, *(void *)(a1 + 8));
  sub_100080CB0(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_100080CB0(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_100085434(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100080C58(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_100080C58(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *sub_1000854F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100080CB0(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_100080C58(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100080CB0(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_100080C58(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_100080CB0(v16, v17);
  uint64_t v18 = *(int *)(a3 + 28);
  unint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *sub_1000855CC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_100085650(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100080CB0(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100080CB0(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_100080CB0(v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  unint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_100085700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100085714);
}

uint64_t sub_100085718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008572C);
}

uint64_t *sub_100085730(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100080C58(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    unint64_t v10 = a2[4];
    sub_100080C58(v9, v10);
    a1[3] = v9;
    a1[4] = v10;
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = (char *)a1 + v11;
    unint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_100085834(uint64_t a1, uint64_t a2)
{
  sub_100080CB0(*(void *)a1, *(void *)(a1 + 8));
  sub_100080CB0(*(void *)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_1000858B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  unint64_t v9 = a2[4];
  sub_100080C58(v8, v9);
  a1[3] = v8;
  a1[4] = v9;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *sub_10008596C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100080CB0(v8, v9);
  a1[2] = a2[2];
  uint64_t v10 = a2[3];
  unint64_t v11 = a2[4];
  sub_100080C58(v10, v11);
  uint64_t v12 = a1[3];
  unint64_t v13 = a1[4];
  a1[3] = v10;
  a1[4] = v11;
  sub_100080CB0(v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_100085A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100085ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100080CB0(v6, v7);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 24);
  unint64_t v10 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  sub_100080CB0(v9, v10);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_100085B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100085B78);
}

uint64_t sub_100085B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100085C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100085C4C);
}

void *sub_100085C50(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100085D00()
{
  return sub_1000862B4();
}

uint64_t *sub_100085D1C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    uint64_t *v3 = *a2;
    char v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t sub_100085E14(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100085E94(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *sub_100085F3C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *sub_100085FF8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *sub_100086074(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100086110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100086124);
}

uint64_t sub_100086124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000861D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000861E8);
}

uint64_t sub_1000861E8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100086290()
{
  return sub_1000862B4();
}

uint64_t sub_1000862B4()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100086348(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100080C58(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for ErrorDomainCode(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_100080E08(&qword_10031ED00);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v21;
      uint64_t v22 = v16[3];
      v15[2] = v16[2];
      v15[3] = v22;
      uint64_t v23 = *(int *)(v17 + 28);
      uint64_t v24 = (char *)v15 + v23;
      uint64_t v25 = (char *)v16 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13(v24, v25, v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_10008653C(uint64_t a1, uint64_t a2)
{
  sub_100080CB0(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for ErrorDomainCode(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t *sub_10008665C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_100080E08(&qword_10031ED00);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    uint64_t v20 = v15[3];
    v14[2] = v15[2];
    v14[3] = v20;
    uint64_t v21 = *(int *)(v16 + 28);
    uint64_t v22 = (char *)v14 + v21;
    uint64_t v23 = (char *)v15 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v22, v23, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t *sub_100086800(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100080CB0(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v28 = *(void *)(v13 - 8);
  uint64_t v29 = v13;
  uint64_t v14 = *(void (**)(char *, char *))(v28 + 24);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      void *v16 = *v17;
      v16[1] = v17[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v16[2] = v17[2];
      v16[3] = v17[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v14)((char *)v16 + *(int *)(v18 + 28), (char *)v17 + *(int *)(v18 + 28), v29);
      return a1;
    }
    sub_1000879BC((uint64_t)v16, type metadata accessor for ErrorDomainCode);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v26 = sub_100080E08(&qword_10031ED00);
    memcpy(v16, v17, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  void *v16 = *v17;
  v16[1] = v17[1];
  v16[2] = v17[2];
  v16[3] = v17[3];
  uint64_t v22 = *(int *)(v18 + 28);
  uint64_t v23 = (char *)v16 + v22;
  uint64_t v24 = (char *)v17 + v22;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v25(v23, v24, v29);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

_OWORD *sub_100086A80(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100080E08(&qword_10031ED00);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    *uint64_t v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *sub_100086BF4(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100080CB0(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v25 = *(void *)(v11 - 8);
  uint64_t v26 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v25 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v23 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v23;
      swift_bridgeObjectRelease();
      uint64_t v24 = v15[3];
      v14[2] = v15[2];
      v14[3] = v24;
      swift_bridgeObjectRelease();
      ((void (*)(char *, char *, uint64_t))v12)((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v26);
      return a1;
    }
    sub_1000879BC((uint64_t)v14, type metadata accessor for ErrorDomainCode);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v21 = sub_100080E08(&qword_10031ED00);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  long long v20 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((_OWORD *)v14 + 1) = v20;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v26);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_100086E1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100086E30);
}

uint64_t sub_100086E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100080E08(&qword_10031ED00);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_100086F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100086F80);
}

void *sub_100086F80(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100080E08(&qword_10031ED00);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1000870B8()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_10008718C();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_10008718C()
{
  if (!qword_10031F360)
  {
    type metadata accessor for ErrorDomainCode(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10031F360);
    }
  }
}

void *sub_1000871E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    void *v3 = *a2;
    char v3 = (void *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    uint64_t v6 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v6;
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    uint64_t v8 = *(int *)(a3 + 40);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    *(void *)(a1 + 64) = a2[8];
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  return v3;
}

uint64_t sub_10008730C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_10008739C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

void *sub_100087474(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_100087578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_100087604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_1000876C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000876DC);
}

uint64_t sub_1000876DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10008778C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000877A0);
}

uint64_t sub_1000877A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 40);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100087848()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100087900()
{
  unint64_t result = qword_10031F480;
  if (!qword_10031F480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031F480);
  }
  return result;
}

uint64_t sub_100087954(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000879BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100087A1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100080E08(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_100087A78(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void *sub_100087B20()
{
  return &unk_1002BDB78;
}

unint64_t sub_100087B2C()
{
  return 0xD000000000000018;
}

uint64_t variable initialization expression of KTEligibilityDB.schemaVersion()
{
  return 1;
}

unint64_t sub_100087B50()
{
  return 0xD000000000000013;
}

void sub_100087B6C()
{
}

Swift::Int sub_100087B94()
{
  return Hasher._finalize()();
}

Swift::Int sub_100087BD8()
{
  return Hasher._finalize()();
}

uint64_t sub_100087C18(uint64_t a1)
{
  unint64_t v2 = sub_100089CB4();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100087C54(uint64_t a1)
{
  unint64_t v2 = sub_100089CB4();

  return Error<>._code.getter(a1, v2);
}

id static KTSwiftDB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  unint64_t v4 = *(void **)(a1 + 16);
  if (v4 && (swift_beginAccess(), *(void *)(a2 + 16))) {
    return [v4 isEqual:];
  }
  else {
    return 0;
  }
}

void *sub_100087D24()
{
  swift_beginAccess();
  unint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

void sub_100087D68(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;
}

uint64_t (*sub_100087DB0())()
{
  return j__swift_endAccess;
}

uint64_t KTSwiftDB.__allocating_init(url:)(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_10031F4B0);
  __chkstk_darwin(v2 - 8);
  unint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  sub_10008813C(a1, (uint64_t)v4);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    URL._bridgeToObjectiveC()(v8);
    uint64_t v9 = v10;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  id v11 = [objc_allocWithZone((Class)KTSDBObjc) initDatabaseWithURL:v9];

  sub_100087A1C(a1, &qword_10031F4B0);
  if (v11)
  {
    swift_beginAccess();
    uint64_t v12 = *(void **)(v5 + 16);
    *(void *)(v5 + 16) = v11;
  }
  else
  {
    swift_release();
    return 0;
  }
  return v5;
}

uint64_t KTSwiftDB.init(url:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100080E08(&qword_10031F4B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v2 + 16) = 0;
  sub_10008813C(a1, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
  {
    URL._bridgeToObjectiveC()(v9);
    uint64_t v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  id v12 = [objc_allocWithZone((Class)KTSDBObjc) initDatabaseWithURL:v10];

  sub_100087A1C(a1, &qword_10031F4B0);
  if (v12)
  {
    swift_beginAccess();
    uint64_t v13 = *(void **)(v2 + 16);
    *(void *)(v2 + 16) = v12;
  }
  else
  {
    swift_release();
    return 0;
  }
  return v2;
}

uint64_t sub_10008813C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100080E08(&qword_10031F4B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000881A4()
{
  uint64_t v1 = (void **)(v0 + 16);
  swift_beginAccess();
  uint64_t v2 = *(void **)(v0 + 16);
  if (v2)
  {
    [v2 close];
    uint64_t v3 = *v1;
    void *v1 = 0;
  }
}

void sub_100088200()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 executeSQLStmt:v3];
  }
}

void sub_10008828C()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = v1;
    NSString v3 = String._bridgeToObjectiveC()();
    id v7 = 0;
    id v4 = [v2 prepareStatement:v3 error:&v7];

    if (v4)
    {
      id v5 = v7;

      type metadata accessor for KTSwiftDB.SQLStatement();
      *(void *)(swift_allocObject() + 16) = v4;
    }
    else
    {
      id v6 = v7;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  else
  {
    sub_1000883CC();
    swift_allocError();
    swift_willThrow();
  }
}

unint64_t sub_1000883CC()
{
  unint64_t result = qword_10031F4B8;
  if (!qword_10031F4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031F4B8);
  }
  return result;
}

uint64_t sub_100088420(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t type metadata accessor for KTSwiftDB.SQLStatement()
{
  return self;
}

id sub_100088478()
{
  return *(id *)(v0 + 16);
}

uint64_t sub_100088480(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

id sub_10008848C()
{
  return [*(id *)(v0 + 16) reset];
}

void sub_10008849C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

id sub_1000884BC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(v2 + 16) bindInt:a2 column:a1];
}

id sub_1000884D4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(v2 + 16) bindInt64:a2 column:a1];
}

void sub_1000884EC(uint64_t a1)
{
  NSString v3 = *(void **)(v1 + 16);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  [v3 bindDate:isa column:a1];
}

id sub_100088558(uint64_t a1)
{
  return [*(id *)(v1 + 16) bindDouble:a1 column:];
}

void sub_10008856C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10008858C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), SEL *a5)
{
  uint64_t v8 = *(void **)(v5 + 16);
  id v9 = (id)a4(a2, a3);
  [v8 *a5:v9 a1];
}

id sub_100088600(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 16);
  id v6 = (void *)swift_allocObject();
  _DWORD v6[2] = a1;
  v6[3] = a2;
  aBlock[4] = sub_100088780;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000887E8;
  aBlock[3] = &unk_1002BDBB0;
  id v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  LODWORD(a2) = [v5 steps:v7 error:aBlock];
  _Block_release(v7);
  id result = aBlock[0];
  if (!a2)
  {
    id v9 = result;
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
  return result;
}

uint64_t sub_100088748()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100088780(uint64_t a1)
{
  NSString v3 = *(uint64_t (**)(uint64_t))(v1 + 16);
  type metadata accessor for KTSwiftDB.SQLRow();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  swift_unknownObjectRetain();
  LOBYTE(a1) = v3(v4);
  swift_release();
  return a1 & 1;
}

uint64_t sub_1000887E8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  return v1 & 1;
}

uint64_t sub_100088844(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100088854()
{
  return swift_release();
}

uint64_t sub_10008885C()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v13 = 0;
  id v2 = [v1 stepWithError:&v13];
  id v3 = v13;
  if (v2)
  {
    id v4 = v2;
    type metadata accessor for KTSwiftDB.SQLRow();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    id v6 = v3;
  }
  else
  {
    id v7 = v13;
    uint64_t v8 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    id v13 = v8;
    swift_errorRetain();
    sub_100080E08(&qword_10031F4C0);
    type metadata accessor for KTSDBObjcError(0);
    uint64_t v5 = v9;
    if (swift_dynamicCast()
      && (sub_100089964(&qword_10031F4C8, type metadata accessor for KTSDBObjcError),
          _BridgedStoredNSError.code.getter(),
          v12,
          v11 == 2))
    {
      swift_errorRelease();
      swift_errorRelease();
      return 0;
    }
    else
    {
      swift_errorRelease();
      swift_willThrow();
    }
  }
  return v5;
}

uint64_t KTSwiftDB.deinit()
{
  return v0;
}

uint64_t KTSwiftDB.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_100088A54()
{
  return swift_unknownObjectRetain();
}

void type metadata accessor for KTSDBObjcError(uint64_t a1)
{
}

uint64_t sub_100088A70(uint64_t a1)
{
  id v2 = [*(id *)(v1 + 16) textAtColumn:a1];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100088ACC(uint64_t a1)
{
  return [*(id *)(v1 + 16) intAtColumn:a1];
}

id sub_100088B0C(uint64_t a1)
{
  return [*(id *)(v1 + 16) int64AtColumn:a1];
}

uint64_t sub_100088B38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = [*(id *)(v2 + 16) dateAtColumn:a1];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = type metadata accessor for Date();
  id v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(a2, 0, 1, v5);
}

uint64_t sub_100088BD0(uint64_t a1)
{
  id v2 = [*(id *)(v1 + 16) blobAtColumn:a1];
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

double sub_100088C2C(uint64_t a1)
{
  [*(id *)(v1 + 16) doubleAtColumn:a1];
  return result;
}

unint64_t sub_100088C5C()
{
  id v1 = [*(id *)(v0 + 16) allObjectsByColumnName];
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v3 = sub_100088CD4(v2);
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_100088CD4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100080E08(&qword_10031F790);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v9 = (v5 - 1) & v5;
      unint64_t v10 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v11 = v7;
    }
    else
    {
      int64_t v12 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v12 >= v27)
      {
LABEL_33:
        sub_100089D64();
        return (unint64_t)v2;
      }
      unint64_t v13 = *(void *)(v28 + 8 * v12);
      int64_t v11 = v7 + 1;
      if (!v13)
      {
        int64_t v11 = v7 + 2;
        if (v7 + 2 >= v27) {
          goto LABEL_33;
        }
        unint64_t v13 = *(void *)(v28 + 8 * v11);
        if (!v13)
        {
          int64_t v11 = v7 + 3;
          if (v7 + 3 >= v27) {
            goto LABEL_33;
          }
          unint64_t v13 = *(void *)(v28 + 8 * v11);
          if (!v13)
          {
            int64_t v11 = v7 + 4;
            if (v7 + 4 >= v27) {
              goto LABEL_33;
            }
            unint64_t v13 = *(void *)(v28 + 8 * v11);
            if (!v13)
            {
              int64_t v14 = v7 + 5;
              if (v7 + 5 >= v27) {
                goto LABEL_33;
              }
              unint64_t v13 = *(void *)(v28 + 8 * v14);
              if (!v13)
              {
                while (1)
                {
                  int64_t v11 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    goto LABEL_38;
                  }
                  if (v11 >= v27) {
                    goto LABEL_33;
                  }
                  unint64_t v13 = *(void *)(v28 + 8 * v11);
                  ++v14;
                  if (v13) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v11 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v9 = (v13 - 1) & v13;
      unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
    }
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    sub_100089D08(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v37);
    v36[0] = v17;
    v36[1] = v16;
    sub_100089D08((uint64_t)v37, (uint64_t)v32);
    swift_bridgeObjectRetain_n();
    sub_100087A1C((uint64_t)v36, &qword_10031F798);
    if (!swift_dynamicCast())
    {
      uint64_t v31 = 0;
      long long v29 = 0u;
      long long v30 = 0u;
      swift_bridgeObjectRelease();
      sub_100087A1C((uint64_t)&v29, &qword_10031F7A0);
      sub_100089D64();
      swift_release();
      return 0;
    }
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    unint64_t result = sub_100089D6C(v17, v16);
    unint64_t v18 = result;
    if (v19)
    {
      uint64_t v8 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v8 = v17;
      v8[1] = v16;
      unint64_t result = sub_100089DE4((uint64_t)&v29, v2[7] + 40 * v18);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v20 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v20 = v17;
    v20[1] = v16;
    uint64_t v21 = v2[7] + 40 * result;
    long long v22 = v29;
    long long v23 = v30;
    *(void *)(v21 + 32) = v31;
    *(_OWORD *)uint64_t v21 = v22;
    *(_OWORD *)(v21 + 16) = v23;
    uint64_t v24 = v2[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_36;
    }
    v2[2] = v26;
LABEL_8:
    int64_t v7 = v11;
    unint64_t v5 = v9;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100089060()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100089080()
{
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 24, 7);
}

id sub_1000890B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v2 + 16);
  if (v4 && (swift_beginAccess(), *(void *)(v3 + 16))) {
    return [v4 isEqual:];
  }
  else {
    return 0;
  }
}

id sub_100089134()
{
  return *v0;
}

uint64_t sub_10008913C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_100089144@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t type metadata accessor for KTSwiftDB.SQLRow()
{
  return self;
}

unint64_t sub_10008917C()
{
  unint64_t result = qword_10031F4D0;
  if (!qword_10031F4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031F4D0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KTSwiftDBError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for KTSwiftDBError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000892C4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t variable initialization expression of KTUpdateCloudStorageOperation.shouldRetry()
{
  return 0;
}

ValueMetadata *type metadata accessor for KTSwiftDBError()
{
  return &type metadata for KTSwiftDBError;
}

uint64_t type metadata accessor for KTSwiftDB()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for KTSwiftDB.SQLStepResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for KTSwiftDB.SQLStepResult()
{
  return swift_release();
}

void *assignWithCopy for KTSwiftDB.SQLStepResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for KTSwiftDB.SQLStepResult(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void *assignWithTake for KTSwiftDB.SQLStepResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for KTSwiftDB.SQLStepResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for KTSwiftDB.SQLStepResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_100089480(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100089498(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for KTSwiftDB.SQLStepResult()
{
  return &type metadata for KTSwiftDB.SQLStepResult;
}

uint64_t sub_1000894C8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000894D8(uint64_t a1)
{
  uint64_t v2 = sub_100089964(&qword_10031F4C8, type metadata accessor for KTSDBObjcError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100089544(uint64_t a1)
{
  uint64_t v2 = sub_100089964(&qword_10031F4C8, type metadata accessor for KTSDBObjcError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000895B0(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100089964(&qword_10031F4C8, type metadata accessor for KTSDBObjcError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100089640()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100089678(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100089964(&qword_10031F4C8, type metadata accessor for KTSDBObjcError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000896F4()
{
  return Hasher._finalize()();
}

uint64_t sub_100089754(uint64_t a1)
{
  uint64_t v2 = sub_100089964(&qword_10031F750, type metadata accessor for KTSDBObjcError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000897C0(uint64_t a1)
{
  uint64_t v2 = sub_100089964(&qword_10031F750, type metadata accessor for KTSDBObjcError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10008982C(uint64_t a1)
{
  uint64_t v2 = sub_100089964(&qword_10031F4C8, type metadata accessor for KTSDBObjcError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100089898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100089964(&qword_10031F4C8, type metadata accessor for KTSDBObjcError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10008991C()
{
  return sub_100089964(&qword_10031F740, type metadata accessor for KTSDBObjcError);
}

uint64_t sub_100089964(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000899AC()
{
  return sub_100089964(&qword_10031F748, type metadata accessor for KTSDBObjcError);
}

uint64_t sub_1000899F4()
{
  return sub_100089964(&qword_10031F750, type metadata accessor for KTSDBObjcError);
}

uint64_t sub_100089A3C()
{
  return sub_100089964(&qword_10031F758, type metadata accessor for KTSDBObjcError);
}

uint64_t sub_100089A84()
{
  return sub_100089964(&qword_10031F760, type metadata accessor for KTSDBObjcError);
}

uint64_t sub_100089ACC()
{
  return sub_100089964(&qword_10031F768, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

void sub_100089B28(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_100089B70()
{
  return sub_100089964((unint64_t *)&unk_10031F770, type metadata accessor for Code);
}

unint64_t sub_100089BBC()
{
  unint64_t result = qword_100320B80;
  if (!qword_100320B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100320B80);
  }
  return result;
}

uint64_t sub_100089C10()
{
  return sub_100089964(&qword_10031F780, type metadata accessor for Code);
}

uint64_t sub_100089C58()
{
  return sub_100089964(&qword_10031F4C8, type metadata accessor for KTSDBObjcError);
}

BOOL sub_100089CA0(void *a1, void *a2)
{
  return *a1 == *a2;
}

unint64_t sub_100089CB4()
{
  unint64_t result = qword_10031F788;
  if (!qword_10031F788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031F788);
  }
  return result;
}

uint64_t sub_100089D08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100089D64()
{
  return swift_release();
}

unint64_t sub_100089D6C(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100089E40(a1, a2, v4);
}

uint64_t sub_100089DE4(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_100089E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_100089F30()
{
  id v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd28MockIDSEventReportingManager_rec);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_100089F78(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13transparencyd28MockIDSEventReportingManager_rec);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*sub_100089FC4())()
{
  return j__swift_endAccess;
}

id KTUpdateCloudStorageOperation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id sub_10008A054()
{
  v0[OBJC_IVAR____TtC13transparencyd28MockIDSEventReportingManager_rec] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MockIDSEventReportingManager();
  return [super init];
}

uint64_t type metadata accessor for MockIDSEventReportingManager()
{
  return self;
}

uint64_t sub_10008A104()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10031F820 + dword_10031F820);
  id v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10008A1A4;
  return v3();
}

uint64_t sub_10008A1A4(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

unint64_t sub_10008A2A4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_10031F8A8);
  objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100089D6C(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10008A3B8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_10031F8A0);
  objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100089D6C(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10008A4D4(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100080E08(&qword_10031F890);
    objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_100080E08(&qword_10031F898);
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_10008B89C(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_10008B89C(v35, v36);
    sub_10008B89C(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_10008B89C(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_100089D64();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10008AA18(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  void v3[4] = _Block_copy(aBlock);
  unint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_10031F820 + dword_10031F820);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  void *v7 = v3;
  v7[1] = sub_10008AAE8;
  return v9();
}

uint64_t sub_10008AAE8(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  id v6 = *(void **)(*v2 + 24);
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  if (v3)
  {
    a1 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    Class isa = 0;
    uint64_t v10 = (void *)a1;
  }
  else if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    a1 = 0;
    uint64_t v10 = isa;
  }
  else
  {
    Class isa = 0;
    uint64_t v10 = 0;
  }
  unint64_t v11 = *(void (***)(void, void, void))(v5 + 32);
  ((void (**)(void, Class, uint64_t))v11)[2](v11, isa, a1);

  _Block_release(v11);
  unint64_t v12 = *(uint64_t (**)(void))(v8 + 8);
  return v12();
}

id sub_10008ACB8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MockIDSEventReportingManager();
  return [super dealloc];
}

uint64_t sub_10008ACEC(uint64_t a1, uint64_t a2, int *a3)
{
  id v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10008B8AC;
  return v6();
}

uint64_t sub_10008ADB8(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_10008B8AC;
  return v7();
}

uint64_t sub_10008AE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10008B74C(a1);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10008B028(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10008B104;
  return v6(a1);
}

uint64_t sub_10008B104()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10008B1FC()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(sub_10008B21C, 0, 0);
}

uint64_t sub_10008B21C()
{
  uint64_t v1 = *(void **)(v0 + 128);
  sub_100080E08(&qword_10031F880);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002856F0;
  *(void *)(inited + 32) = 0x722D74726F706572;
  *(void *)(inited + 40) = 0xEF65736E6F707365;
  sub_100080E08(&qword_10031F888);
  uint64_t v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_1002856F0;
  uint64_t v4 = sub_1000EAA1C();
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v5;
  uint64_t v7 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x58);
  uint64_t v8 = swift_bridgeObjectRetain();
  *(unsigned char *)(v3 + 48) = v7(v8) & 1;
  *(void *)(inited + 48) = sub_10008A2A4(v3);
  unint64_t v9 = sub_10008A3B8(inited);
  uint64_t v10 = sub_10008A4D4(v9);
  swift_bridgeObjectRelease();
  unint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v11(v10);
}

uint64_t sub_10008B378()
{
  _Block_release(*(const void **)(v0 + 32));

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10008B3C0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v4 = (void *)v0[4];
  uint64_t v3 = (void *)v0[5];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10008B484;
  uint64_t v6 = (uint64_t (*)(void *, void *, void *))((char *)&dword_10031F858 + dword_10031F858);
  return v6(v2, v4, v3);
}

uint64_t sub_10008B484()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10008B57C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10008B8AC;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100321DF0 + dword_100321DF0);
  return v6(v2, v3, v4);
}

uint64_t sub_10008B640()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10008B680(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10008B8AC;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100321E00 + dword_100321E00);
  return v8(a1, v4, v5, v6);
}

uint64_t sub_10008B74C(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_10031F850);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10008B7AC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008B7E4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10008B484;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100321E10 + dword_100321E10);
  return v6(a1, v4);
}

_OWORD *sub_10008B89C(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10008B8B0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100087A78(v0, qword_100329828);
  sub_100080F90(v0, (uint64_t)qword_100329828);
  return Logger.init(transparencyCategory:)();
}

void sub_10008B910()
{
  byte_100329848 = 1;
  qword_100329850 = 0xED00006863746546;
}

void sub_10008B938()
{
  byte_100329860 = 1;
  qword_100329868 = 0xEB00000000686374;
}

uint64_t sub_10008B95C()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_10008B9A4(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*sub_10008B9F0())()
{
  return j__swift_endAccess;
}

unint64_t variable initialization expression of KTFetchCloudStorageOperation.serverChangeTokens()
{
  return sub_10008BA58((uint64_t)&_swiftEmptyArrayStorage);
}

unint64_t sub_10008BA58(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    long long v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08((uint64_t *)&unk_10031F9D0);
  long long v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = *(v4 - 1);
    id v7 = v5;
    unint64_t result = sub_10008D76C((uint64_t)v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10008BB64()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10008BBB0(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_serverChangeTokens);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_10008BC04())()
{
  return j_j__swift_endAccess;
}

id sub_10008BC60()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_context);
}

uint64_t sub_10008BC70()
{
  return swift_retain();
}

uint64_t sub_10008BC80()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_initialFetch);
}

uint64_t sub_10008BC90()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_reason);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t KTFetchCloudStorageOperation.shouldRetry.getter()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xD8))();
}

uint64_t static KTFetchCloudStorageOperation.lastCKFetch(deps:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = [a1 smDataStore];
  if (qword_100329858 != -1) {
    swift_once();
  }
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 getSettingsDate:v4];

  swift_unknownObjectRelease();
  if (v5)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = type metadata accessor for Date();
    id v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    uint64_t v8 = v6;
    uint64_t v9 = a2;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    id v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v8 = v11;
    uint64_t v9 = a2;
    uint64_t v10 = 1;
  }

  return v7(v9, v10, 1, v8);
}

id KTFetchCloudStorageOperation.__allocating_init(deps:initialFetch:userInteractive:reason:context:)(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v13 = objc_allocWithZone(v6);
  id v14 = sub_10008DF60(a1, a2, a3, a4, a5, a6);

  return v14;
}

id KTFetchCloudStorageOperation.init(deps:initialFetch:userInteractive:reason:context:)(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v8 = sub_10008DF60(a1, a2, a3, a4, a5, a6);

  return v8;
}

uint64_t sub_10008C280(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3)
    {
LABEL_3:
      Swift::Int v4 = (Swift::Int)&_swiftEmptyDictionarySingleton;
      uint64_t v5 = 4;
      long long v33 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)(v1
                                                                     + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler)
                                                       + 96);
      uint64_t v32 = v3;
      while (1)
      {
        uint64_t v1 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0) {
          id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v8 = *(id *)(a1 + 8 * v5);
        }
        uint64_t v9 = v8;
        uint64_t v10 = v5 - 3;
        if (__OFADD__(v1, 1))
        {
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        id v11 = [objc_allocWithZone((Class)CKFetchRecordZoneChangesConfiguration) init];
        id v12 = [v9 zoneName];
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        int64_t v16 = (void *)v33(v13, v15);
        swift_bridgeObjectRelease();
        [v11 setPreviousServerChangeToken:v16];

        if ((v4 & 0xC000000000000001) != 0)
        {
          if (v4 < 0) {
            uint64_t v1 = v4;
          }
          else {
            uint64_t v1 = v4 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v17 = __CocoaDictionary.count.getter();
          if (__OFADD__(v17, 1)) {
            goto LABEL_27;
          }
          Swift::Int v4 = sub_10008D8CC(v1, v17 + 1);
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v1 = v4;
        unint64_t v20 = sub_10008D76C((uint64_t)v9);
        uint64_t v21 = *(void *)(v4 + 16);
        BOOL v22 = (v19 & 1) == 0;
        uint64_t v23 = v21 + v22;
        if (__OFADD__(v21, v22)) {
          goto LABEL_26;
        }
        char v24 = v19;
        if (*(void *)(v4 + 24) >= v23)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_10008DDD0();
          }
        }
        else
        {
          sub_10008DB20(v23, isUniquelyReferenced_nonNull_native);
          unint64_t v25 = sub_10008D76C((uint64_t)v9);
          if ((v24 & 1) != (v26 & 1))
          {
            sub_10008E0A0(0, &qword_10031F8E0);
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v20 = v25;
        }
        uint64_t v1 = v32;
        if (v24)
        {
          uint64_t v6 = *(void *)(v4 + 56);
          id v7 = *(void **)(v6 + 8 * v20);
          *(void *)(v6 + 8 * v20) = v11;
        }
        else
        {
          *(void *)(v4 + 8 * (v20 >> 6) + 64) |= 1 << v20;
          *(void *)(*(void *)(v4 + 48) + 8 * v20) = v9;
          *(void *)(*(void *)(v4 + 56) + 8 * v20) = v11;
          uint64_t v27 = *(void *)(v4 + 16);
          BOOL v28 = __OFADD__(v27, 1);
          uint64_t v29 = v27 + 1;
          if (v28) {
            goto LABEL_28;
          }
          *(void *)(v4 + 16) = v29;
          id v30 = v9;
        }

        swift_bridgeObjectRelease();
        ++v5;
        if (v10 == v32) {
          goto LABEL_31;
        }
      }
    }
  }
  Swift::Int v4 = (Swift::Int)&_swiftEmptyDictionarySingleton;
LABEL_31:
  swift_bridgeObjectRelease();
  return v4;
}

Swift::Void __swiftcall KTFetchCloudStorageOperation.groupStart()()
{
  uint64_t v1 = *(void **)((char *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps);
  id v2 = [v1 ckdatabase];
  if (v2)
  {
    id v23 = v2;
    id v3 = [v1 cloudRecords];
    if (v3)
    {
      Swift::Int v4 = v3;
      Class isa = (Class)[v3 cloudKitZones];
      if (!isa)
      {
        sub_10008E0A0(0, &qword_10031F8E0);
        static Array._unconditionallyBridgeFromObjectiveC(_:)();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      sub_10008E0A0(0, &qword_10031F8E0);
      uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v7 = [objc_allocWithZone((Class)NSBlockOperation) init];
      [v0 dependOnBeforeGroupFinished:v7];
      id v8 = [objc_allocWithZone((Class)CKFetchRecordZoneChangesOperation) init];
      uint64_t v9 = *(void **)((char *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_fetchOperation);
      *(void *)((char *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_fetchOperation) = v8;
      id v10 = v8;

      (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x118))(v6);
      swift_bridgeObjectRelease();
      sub_10008E0A0(0, &qword_10031F8F8);
      sub_10008E0DC();
      Class v11 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v10 setConfigurationsByRecordZoneID:v11];

      [v10 setRecordZoneIDs:isa];
      if (*((unsigned char *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_initialFetch) == 1) {
        [v4 clearDataStore:1];
      }
      if (*((unsigned char *)v0 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_userInteractive) == 1) {
        [v10 setQualityOfService:25];
      }
      id v12 = v10;
      NSString v13 = String._bridgeToObjectiveC()();
      [v12 setName:v13];

      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = v0;
      aBlock[4] = sub_10008E17C;
      aBlock[5] = v14;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10008CA68;
      aBlock[3] = &unk_1002BDE08;
      uint64_t v15 = _Block_copy(aBlock);
      int64_t v16 = v0;
      swift_release();
      [v12 setRecordZoneChangeTokensUpdatedBlock:v15];
      _Block_release(v15);
      *(void *)(swift_allocObject() + 16) = v16;
      uint64_t v17 = v16;
      CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter();
      *(void *)(swift_allocObject() + 16) = v4;
      swift_unknownObjectRetain();
      CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter();
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v17;
      *(void *)(v18 + 24) = v4;
      char v19 = v17;
      swift_unknownObjectRetain();
      CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter();
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = v7;
      uint64_t v21 = v19;
      id v22 = v7;
      CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter();
      [v23 addOperation:v12];

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

uint64_t sub_10008CA68(uint64_t a1, void *a2, void *a3, void *a4)
{
  Swift::Int v4 = a4;
  id v7 = *(void (**)(void *, void *, void *, unint64_t))(a1 + 32);
  if (a4)
  {
    swift_retain();
    id v8 = a2;
    id v9 = a3;
    id v10 = v4;
    Swift::Int v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    swift_retain();
    id v13 = a2;
    id v14 = a3;
    unint64_t v12 = 0xF000000000000000;
  }
  v7(a2, a3, v4, v12);

  sub_10008FCD4((uint64_t)v4, v12);

  return swift_release();
}

uint64_t sub_10008CB30(void *a1)
{
  if (a1)
  {
    [a1 setZoneCreated:0];
    [a1 setZoneSubscribed:0];
    [a1 setServerChangeToken:0];
  }
  return 1;
}

void KTFetchCloudStorageOperation.init()()
{
}

id KTFetchCloudStorageOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTFetchCloudStorageOperation();
  return [super dealloc];
}

uint64_t sub_10008CD58()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_10008CD68(uint64_t a1)
{
  uint64_t v2 = sub_10008FCFC(&qword_10031F9C0, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10008CDD4(uint64_t a1)
{
  uint64_t v2 = sub_10008FCFC(&qword_10031F9C0, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10008CE40(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10008FCFC(&qword_10031F9C0, type metadata accessor for CKError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_10008CED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10008FCFC(&qword_10031F9C0, type metadata accessor for CKError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10008CF4C(uint64_t a1)
{
  uint64_t v2 = sub_10008FCFC((unint64_t *)&unk_10031F9F0, type metadata accessor for CKError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10008CFB8(uint64_t a1)
{
  uint64_t v2 = sub_10008FCFC((unint64_t *)&unk_10031F9F0, type metadata accessor for CKError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10008D024(uint64_t a1)
{
  uint64_t v2 = sub_10008FCFC(&qword_10031F9C0, type metadata accessor for CKError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10008D090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10008FCFC(&qword_10031F9C0, type metadata accessor for CKError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10008D114(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10008D1E8(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100089D08((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100089D08((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10008FBC4((uint64_t)v12);
  return v7;
}

uint64_t sub_10008D1E8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_10008D3A4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_10008D3A4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10008D43C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_10008D61C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_10008D61C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10008D43C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10008D5B4(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_10008D5B4(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100080E08((uint64_t *)&unk_10031F9B0);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10008D61C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100080E08((uint64_t *)&unk_10031F9B0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_10008D76C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10008D7B0(a1, v4);
}

unint64_t sub_10008D7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10008E0A0(0, &qword_10031F8E0);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

Swift::Int sub_10008D8CC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100080E08(&qword_10031F9C8);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      sub_10008E0A0(0, &qword_10031F8E0);
      do
      {
        swift_dynamicCast();
        sub_10008E0A0(0, &qword_10031F8F8);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_10008DB20(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_10008DB20(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100080E08(&qword_10031F9C8);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v36 = v2;
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v15 << 6);
      }
      else
      {
        if (__OFADD__(v15++, 1)) {
          goto LABEL_38;
        }
        if (v15 >= v12)
        {
LABEL_31:
          swift_release();
          uint64_t v3 = v36;
          if (v37)
          {
            uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
            if (v35 >= 64) {
              bzero((void *)(v5 + 64), ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
            }
            else {
              void *v9 = -1 << v35;
            }
            *(void *)(v5 + 16) = 0;
          }
          break;
        }
        unint64_t v24 = v9[v15];
        if (!v24)
        {
          int64_t v25 = v15 + 1;
          if (v15 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v24 = v9[v25];
          if (!v24)
          {
            while (1)
            {
              int64_t v15 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                break;
              }
              if (v15 >= v12) {
                goto LABEL_31;
              }
              unint64_t v24 = v9[v15];
              ++v25;
              if (v24) {
                goto LABEL_20;
              }
            }
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
            return result;
          }
          ++v15;
        }
LABEL_20:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }
      uint64_t v26 = 8 * v22;
      uint64_t v27 = *(void **)(*(void *)(v5 + 48) + v26);
      BOOL v28 = *(void **)(*(void *)(v5 + 56) + v26);
      if ((v37 & 1) == 0)
      {
        id v29 = v27;
        id v30 = v28;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      uint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          BOOL v33 = v18 == v32;
          if (v18 == v32) {
            unint64_t v18 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v13 + 8 * v18);
        }
        while (v34 == -1);
        unint64_t v19 = __clz(__rbit64(~v34)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t v20 = 8 * v19;
      *(void *)(*(void *)(v7 + 48) + v20) = v27;
      *(void *)(*(void *)(v7 + 56) + v20) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

id sub_10008DDD0()
{
  uint64_t v1 = v0;
  sub_100080E08(&qword_10031F9C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_24:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_26;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    if (!v21) {
      break;
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_24;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

id sub_10008DF60(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, void *a6)
{
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_fetchOperation] = 0;
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_previousServerChangeToken] = 0;
  v6[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_shouldRetryStorage] = 0;
  uint64_t v13 = OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_serverChangeTokens;
  unint64_t v14 = v6;
  *(void *)&v6[v13] = sub_10008BA58((uint64_t)&_swiftEmptyArrayStorage);
  Date.init()();
  *(void *)&v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps] = a1;
  *(void *)&v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_context] = a6;
  v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_initialFetch] = a2;
  v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_userInteractive] = a3;
  type metadata accessor for KTCKZone();
  id v15 = a6;
  id v16 = a1;
  *(void *)&v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler] = sub_100088420((uint64_t)v15);
  unint64_t v17 = &v14[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_reason];
  void *v17 = a4;
  v17[1] = a5;

  v19.receiver = v14;
  v19.super_class = (Class)type metadata accessor for KTFetchCloudStorageOperation();
  return [super init];
}

uint64_t sub_10008E0A0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_10008E0DC()
{
  unint64_t result = qword_10031F900;
  if (!qword_10031F900)
  {
    sub_10008E0A0(255, &qword_10031F8E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031F900);
  }
  return result;
}

uint64_t sub_10008E144()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008E17C(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = *(void *)(*(void *)(v2 + 16) + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
    id v6 = a2;
    id v7 = [v4 zoneName];
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    uint64_t v11 = *(void (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 104);
    id v12 = v6;
    v11(v8, v10, a2);

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10008E258(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10008E268()
{
  return swift_release();
}

void sub_10008E270(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  id v6 = a2;
  uint64_t v8 = *(void **)(v5 + 16);
  uint64_t v9 = *(void **)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps);
  if ((a5 & 0x100) == 0)
  {
    id v10 = a2;
    id v11 = [v9 logger];
    if (qword_100329840 != -1) {
      swift_once();
    }
    NSString v12 = String._bridgeToObjectiveC()();
    [v11 logResultForEvent:v12 hardFailure:1 result:0];

    if (qword_100329820 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100080F90(v13, (uint64_t)qword_100329828);
    id v14 = a1;
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      unint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v97 = (void *)swift_slowAlloc();
      long long v94 = v6;
      *(_DWORD *)unint64_t v17 = 136315138;
      id v18 = [v14 zoneName];
      objc_super v19 = v8;
      uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v22 = v21;

      uint64_t v23 = v20;
      uint64_t v8 = v19;
      id v96 = (id)sub_10008D114(v23, v22, (uint64_t *)&v97);
      id v6 = v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "zone fetch success: %s ", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v43 = *(void *)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
    id v44 = [v14 zoneName];
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v47 = v46;

    id v48 = *(void (**)(uint64_t, uint64_t, void *))(*(void *)v43 + 104);
    id v49 = v10;
    v48(v45, v47, v6);

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v24 = a5;
  swift_errorRetain();
  id v27 = [v9 logger];
  if (qword_100329840 != -1) {
    swift_once();
  }
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = (void *)_convertErrorToNSError(_:)();
  [v27 logResultForEvent:v28 hardFailure:1 result:v29];

  if (qword_100329820 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_100080F90(v30, (uint64_t)qword_100329828);
  id v31 = a1;
  sub_10008FC18(v6, a3, a4, v24, 1);
  id v32 = v31;
  sub_10008FC18(v6, a3, a4, v24, 1);
  BOOL v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  uint64_t v95 = a3;
  id v88 = v32;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    long long v83 = (void *)swift_slowAlloc();
    uint64_t v97 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315394;
    unsigned int v91 = v24;
    id v36 = [v32 zoneName];
    unsigned __int8 v85 = v9;
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = a4;
    uint64_t v39 = v8;
    uint64_t v40 = v6;
    unint64_t v42 = v41;

    sub_10008D114(v37, v42, (uint64_t *)&v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v6 = v40;
    uint64_t v8 = v39;
    a4 = v38;
    swift_bridgeObjectRelease();

    *(_WORD *)(v35 + 12) = 2112;
    swift_errorRetain();
    id v96 = (id)_swift_stdlib_bridgeErrorToNSError();
    uint64_t v24 = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v83 = v96;
    uint64_t v9 = v85;
    sub_10008FC80(v6, v95, v38, v91, 1);
    sub_10008FC80(v6, v95, v38, v91, 1);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "zone fetch fail: %s %@", (uint8_t *)v35, 0x16u);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10008FC80(v6, a3, a4, v24, 1);
    sub_10008FC80(v6, a3, a4, v24, 1);
  }
  uint64_t v97 = v6;
  swift_errorRetain();
  sub_100080E08(&qword_10031F4C0);
  type metadata accessor for CKError(0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_28;
  }
  sub_10008FCFC(&qword_10031F9C0, type metadata accessor for CKError);
  _BridgedStoredNSError.code.getter();
  if (v97 == (void *)5)
  {
LABEL_27:

LABEL_28:
    id v57 = 0;
    goto LABEL_31;
  }
  if (v97 == (void *)21)
  {
    id v84 = v96;
    os_log_t log = (os_log_t)a4;
    unsigned int v92 = v24;
    uint64_t v68 = *(void *)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
    id v69 = [v32 zoneName];
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v72 = v71;

    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v68 + 104))(v70, v72, 0);
    swift_bridgeObjectRelease();
    id v73 = objc_allocWithZone((Class)KTPendingFlag);
    NSString v74 = String._bridgeToObjectiveC()();
    id v57 = [v73 initWithFlag:v74 delayInSeconds:0.1];

    id v58 = v88;
    long long v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      long long v87 = v9;
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      id v96 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 136315138;
      id v75 = [v58 zoneName];
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      long long v90 = v8;
      __int16 v77 = v6;
      unint64_t v79 = v78;

      uint64_t v9 = v87;
      sub_10008D114(v76, v79, (uint64_t *)&v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v6 = v77;
      uint64_t v8 = v90;
      swift_bridgeObjectRelease();

      uint64_t v67 = "will re-fetch the zone %s";
      goto LABEL_25;
    }
LABEL_29:

    goto LABEL_30;
  }
  if (v97 != (void *)26)
  {
    (*(void (**)(uint64_t))((swift_isaMask & *v8) + 0xE0))(1);
    goto LABEL_27;
  }
  id v84 = v96;
  os_log_t log = (os_log_t)a4;
  unsigned int v92 = v24;
  uint64_t v50 = *(void *)((char *)v8 + OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_zoneHandler);
  id v51 = [v32 zoneName];
  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v54 = v53;

  (*(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), void))(*(void *)v50 + 120))(v52, v54, sub_10008CB30, 0);
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v55 = objc_allocWithZone((Class)KTPendingFlag);
  NSString v56 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v57 = [v55 initWithFlag:v56 delayInSeconds:0.1];

  id v58 = v88;
  long long v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v59, v60)) {
    goto LABEL_29;
  }
  long long v86 = v9;
  uint64_t v61 = (uint8_t *)swift_slowAlloc();
  id v96 = (id)swift_slowAlloc();
  *(_DWORD *)uint64_t v61 = 136315138;
  id v62 = [v58 zoneName];
  uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v89 = v8;
  long long v64 = v6;
  unint64_t v66 = v65;

  uint64_t v9 = v86;
  sub_10008D114(v63, v66, (uint64_t *)&v96);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  id v6 = v64;
  uint64_t v8 = v89;
  swift_bridgeObjectRelease();

  uint64_t v67 = "will recreate the zone %s";
LABEL_25:
  _os_log_impl((void *)&_mh_execute_header, v59, v60, v67, v61, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_30:
  uint64_t v24 = v92;
  a4 = (unint64_t)log;
LABEL_31:
  id v80 = (void *)_convertErrorToNSError(_:)();
  [v8 setError:v80];

  sub_10008FC80(v6, v95, a4, v24, 1);
  if (v57)
  {
    id v81 = v57;
    id v82 = [v9 flagHandler];
    if (v82)
    {
      [v82 handlePendingFlag:v81];

      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

uint64_t sub_10008EEF4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

id sub_10008EF2C(void *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (qword_100329820 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100080F90(v4, (uint64_t)qword_100329828);
  id v5 = a1;
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "delete block: %@", v8, 0xCu);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return [v3 deleteRecordIDWithCkrecordID:v5];
}

uint64_t sub_10008F0DC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10008F11C(void *a1, void *a2, char a3)
{
  char v4 = a3;
  if (a3)
  {
    os_log_type_t v7 = *(void **)(v3 + 16);
    swift_errorRetain();
    if (qword_100329820 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100080F90(v8, (uint64_t)qword_100329828);
    sub_10008FBAC(a2, 1);
    id v9 = a1;
    sub_10008FBAC(a2, 1);
    id v10 = v9;
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      char v31 = v4;
      id v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412546;
      id v15 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v14 = v10;

      *(_WORD *)(v13 + 12) = 2112;
      swift_errorRetain();
      uint64_t v33 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v14[1] = v33;
      sub_10008FBB8(a2, 1);
      sub_10008FBB8(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "merge error: %@ %@", (uint8_t *)v13, 0x16u);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      char v4 = v31;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10008FBB8(a2, 1);
      sub_10008FBB8(a2, 1);
    }

    id v29 = (void *)_convertErrorToNSError(_:)();
    [v7 setError:v29];
  }
  else
  {
    os_log_type_t v16 = *(void **)(v3 + 24);
    uint64_t v17 = qword_100329820;
    id v18 = a2;
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100080F90(v19, (uint64_t)qword_100329828);
    sub_10008FBAC(a2, 0);
    id v20 = a1;
    sub_10008FBAC(a2, 0);
    id v21 = v20;
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      char v32 = v4;
      uint64_t v24 = swift_slowAlloc();
      int64_t v25 = (void *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 138412546;
      id v26 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int64_t v25 = v21;

      *(_WORD *)(v24 + 12) = 2080;
      uint64_t v27 = CKRecord.recordType.getter();
      sub_10008D114(v27, v28, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10008FBB8(a2, 0);
      sub_10008FBB8(a2, 0);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "merge block: %@[%s]", (uint8_t *)v24, 0x16u);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      char v4 = v32;
      swift_slowDealloc();

      [v16 updatedRecordWithCkrecord:v18, v22];
    }
    else
    {

      sub_10008FBB8(a2, 0);
      sub_10008FBB8(a2, 0);

      [v16 updatedRecordWithCkrecord:v18 log:log];
    }
  }
  sub_10008FBB8(a2, v4 & 1);
}

uint64_t sub_10008F5E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10008F624(uint64_t a1, char a2)
{
  char v4 = *(char **)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 24);
  id v5 = off_10031F000;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100329820 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100080F90(v14, (uint64_t)qword_100329828);
    swift_errorRetain();
    swift_errorRetain();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      id v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      swift_errorRetain();
      uint64_t v26 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v18 = v26;
      sub_10008FBA0(a1, 1);
      sub_10008FBA0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "fetchRecordZoneChangesResultBlock: %@", v17, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      id v5 = off_10031F000;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10008FBA0(a1, 1);
      sub_10008FBA0(a1, 1);
    }

    uint64_t v19 = (void *)_convertErrorToNSError(_:)();
    [v4 setError:v19];

    sub_10008FBA0(a1, 1);
  }
  else
  {
    id v6 = [*(id *)&v4[OBJC_IVAR____TtC13transparencyd28KTFetchCloudStorageOperation_deps] smDataStore];
    if (qword_100329858 != -1) {
      swift_once();
    }
    NSString v7 = String._bridgeToObjectiveC()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    [v6 setSettingsDate:v7 date:isa];

    swift_unknownObjectRelease();
    if (qword_100329820 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100080F90(v9, (uint64_t)qword_100329828);
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "fetchRecordZoneChangesResultBlock", v12, 2u);
      swift_slowDealloc();
    }
  }
  id v20 = [*(id *)((char *)v5[285] + (void)v4) logger];
  NSString v21 = String._bridgeToObjectiveC()();
  id v22 = [v4 error];
  if (v22)
  {
    os_log_type_t v23 = v22;
    uint64_t v24 = (void *)_convertErrorToNSError(_:)();
  }
  else
  {
    uint64_t v24 = 0;
  }
  [v20 logResultForEvent:v21 hardFailure:0 result:v24];

  id v25 = [v4 operationQueue];
  [v25 addOperation:v3];
}

uint64_t type metadata accessor for KTFetchCloudStorageOperation()
{
  uint64_t result = qword_100329878;
  if (!qword_100329878) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10008FAB8()
{
  return type metadata accessor for KTFetchCloudStorageOperation();
}

uint64_t sub_10008FAC0()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10008FBA0(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

id sub_10008FBAC(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

void sub_10008FBB8(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_10008FBC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10008FC18(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return swift_errorRetain();
  }
  else
  {
    id v9 = a1;
    return sub_10008FC6C(a2, a3);
  }
}

uint64_t sub_10008FC6C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100080C58(a1, a2);
  }
  return a1;
}

uint64_t sub_10008FC80(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return swift_errorRelease();
  }
  else
  {

    return sub_10008FCD4(a2, a3);
  }
}

uint64_t sub_10008FCD4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100080CB0(a1, a2);
  }
  return a1;
}

void type metadata accessor for CKError(uint64_t a1)
{
}

uint64_t sub_10008FCFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008FD44()
{
  return sub_10008FCFC((unint64_t *)&unk_10031F9E0, type metadata accessor for CKError);
}

uint64_t sub_10008FD8C()
{
  return sub_10008FCFC((unint64_t *)&unk_100320B50, type metadata accessor for CKError);
}

uint64_t sub_10008FDD4()
{
  return sub_10008FCFC((unint64_t *)&unk_10031F9F0, type metadata accessor for CKError);
}

uint64_t sub_10008FE1C()
{
  return sub_10008FCFC((unint64_t *)&unk_100320B60, type metadata accessor for CKError);
}

uint64_t sub_10008FE64()
{
  return sub_10008FCFC((unint64_t *)&unk_10031FA00, type metadata accessor for CKError);
}

uint64_t sub_10008FEAC()
{
  return sub_10008FCFC((unint64_t *)&unk_100320B70, _s3__C4CodeOMa_0);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

uint64_t sub_10008FF08()
{
  return sub_10008FCFC((unint64_t *)&unk_10031FA10, _s3__C4CodeOMa_0);
}

uint64_t sub_10008FF50()
{
  return sub_10008FCFC((unint64_t *)&unk_10031FA20, _s3__C4CodeOMa_0);
}

uint64_t sub_10008FF98()
{
  return sub_10008FCFC(&qword_10031F9C0, type metadata accessor for CKError);
}

void sub_10008FFE0()
{
}

uint64_t sub_10008FFFC()
{
  swift_beginAccess();
  return *(void *)(v0 + 16);
}

uint64_t sub_100090030(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_100090070())()
{
  return j_j__swift_endAccess;
}

void sub_1000900C4()
{
  qword_10032F5B8 = 0x3436746E49;
  unk_10032F5C0 = 0xE500000000000000;
}

uint64_t *sub_1000900E4()
{
  if (qword_100329D10 != -1) {
    swift_once();
  }
  return &qword_10032F5B8;
}

uint64_t sub_100090130()
{
  return sub_100090B24(&qword_100329D10, &qword_10032F5B8);
}

uint64_t sub_100090158(uint64_t a1, uint64_t a2)
{
  return sub_100090BBC(a1, a2, &qword_100329D10, &qword_10032F5B8, &qword_10032F5C0);
}

uint64_t (*sub_100090180())()
{
  if (qword_100329D10 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_100090208()
{
  return v0;
}

uint64_t sub_100090210()
{
  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_100090220@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88))();
  *a1 = result;
  return result;
}

uint64_t sub_10009026C(uint64_t a1, uint64_t a2)
{
  return sub_100090E04(a1, a2, &qword_100329D10, &qword_10032F5B8);
}

double sub_100090294()
{
  swift_beginAccess();
  return *(double *)(v0 + 16);
}

uint64_t sub_1000902C8(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 16) = a1;
  return result;
}

void sub_100090308()
{
  unk_10032F5D5 = 0;
  unk_10032F5D6 = -5120;
}

uint64_t *sub_100090334()
{
  if (qword_100329D18 != -1) {
    swift_once();
  }
  return &qword_10032F5C8;
}

uint64_t sub_100090380()
{
  return sub_100090B24(&qword_100329D18, &qword_10032F5C8);
}

uint64_t sub_1000903A8(uint64_t a1, uint64_t a2)
{
  return sub_100090BBC(a1, a2, &qword_100329D18, &qword_10032F5C8, &unk_10032F5D0);
}

uint64_t (*sub_1000903D0())()
{
  if (qword_100329D18 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_100090458(double a1)
{
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a1;
  return result;
}

uint64_t sub_10009048C(double a1)
{
  uint64_t result = v1;
  *(double *)(v1 + 16) = a1;
  return result;
}

void sub_100090498(double *a1@<X8>)
{
  *a1 = (*(double (**)(void))(**(void **)v1 + 88))();
}

uint64_t sub_1000904E4(uint64_t a1, uint64_t a2)
{
  return sub_100090E04(a1, a2, &qword_100329D18, &qword_10032F5C8);
}

uint64_t sub_10009050C()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100090558(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

void sub_1000905AC()
{
  qword_10032F5D8 = 0x676E69727453;
  unk_10032F5E0 = 0xE600000000000000;
}

uint64_t *sub_1000905CC()
{
  if (qword_100329D20 != -1) {
    swift_once();
  }
  return &qword_10032F5D8;
}

uint64_t sub_100090618()
{
  return sub_100090B24(&qword_100329D20, &qword_10032F5D8);
}

uint64_t sub_100090640(uint64_t a1, uint64_t a2)
{
  return sub_100090BBC(a1, a2, &qword_100329D20, &qword_10032F5D8, &qword_10032F5E0);
}

uint64_t (*sub_100090668())()
{
  if (qword_100329D20 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1000906F0(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_100090730(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t sub_10009073C()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10009075C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_100090794@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88))();
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000907E0(uint64_t a1, uint64_t a2)
{
  return sub_100090E04(a1, a2, &qword_100329D20, &qword_10032F5D8);
}

uint64_t sub_100090808()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_10009083C(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  return result;
}

void sub_10009087C()
{
  qword_10032F5E8 = 1819242306;
  unk_10032F5F0 = 0xE400000000000000;
}

uint64_t *sub_100090898()
{
  if (qword_100329D28 != -1) {
    swift_once();
  }
  return &qword_10032F5E8;
}

uint64_t sub_1000908E4()
{
  return sub_100090B24(&qword_100329D28, &qword_10032F5E8);
}

uint64_t sub_10009090C(uint64_t a1, uint64_t a2)
{
  return sub_100090BBC(a1, a2, &qword_100329D28, &qword_10032F5E8, &qword_10032F5F0);
}

uint64_t (*sub_100090934())()
{
  if (qword_100329D28 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1000909BC(char a1)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = a1;
  return result;
}

uint64_t sub_1000909F0(char a1)
{
  *(unsigned char *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_1000909FC()
{
  return _swift_deallocClassInstance(v0, 17, 7);
}

uint64_t sub_100090A0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100090A5C(uint64_t a1, uint64_t a2)
{
  return sub_100090E04(a1, a2, &qword_100329D28, &qword_10032F5E8);
}

void sub_100090A8C()
{
  qword_10032F5F8 = 0x73676E69727453;
  unk_10032F600 = 0xE700000000000000;
}

uint64_t *sub_100090AB0()
{
  if (qword_100329D30 != -1) {
    swift_once();
  }
  return &qword_10032F5F8;
}

uint64_t sub_100090AFC()
{
  return sub_100090B24(&qword_100329D30, &qword_10032F5F8);
}

uint64_t sub_100090B24(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_100090B94(uint64_t a1, uint64_t a2)
{
  return sub_100090BBC(a1, a2, &qword_100329D30, &qword_10032F5F8, &qword_10032F600);
}

uint64_t sub_100090BBC(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  if (*a3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a4 = a1;
  *a5 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_100090C38())()
{
  if (qword_100329D30 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_100090CC0()
{
  return StringProtocol.contains<A>(_:)() & 1;
}

unint64_t sub_100090D14()
{
  unint64_t result = qword_10031FB50;
  if (!qword_10031FB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10031FB50);
  }
  return result;
}

uint64_t sub_100090D68()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100090D88()
{
  return sub_1000928D0(24);
}

uint64_t sub_100090D90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 88))();
  *a1 = result;
  return result;
}

uint64_t sub_100090DDC(uint64_t a1, uint64_t a2)
{
  return sub_100090E04(a1, a2, &qword_100329D30, &qword_10032F5F8);
}

uint64_t sub_100090E04(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_100090E78()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t sub_100090EBC(void *a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)v1 + 120))(*a1, a1[1]) & 1;
}

double sub_100090F0C()
{
  swift_beginAccess();
  return *(double *)(v0 + 24);
}

uint64_t sub_100090F40(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 24) = a1;
  return result;
}

uint64_t (*sub_100090F80())()
{
  return j_j__swift_endAccess;
}

double sub_100090FD4()
{
  swift_beginAccess();
  return *(double *)(v0 + 32);
}

uint64_t sub_100091008(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 32) = a1;
  return result;
}

uint64_t (*sub_100091048())()
{
  return j_j__swift_endAccess;
}

double sub_10009109C(double a1)
{
  if ((*(double (**)(void))(*(void *)v1 + 136))() <= a1 && (*(double (**)(void))(*(void *)v1 + 160))() >= a1) {
    return a1;
  }
  uint64_t v3 = *(void (**)(void))(*(void *)v1 + 88);

  v3();
  return result;
}

double *sub_100091154(double a1, double a2, double a3)
{
  double result = (double *)swift_allocObject();
  result[3] = a2;
  result[4] = a3;
  result[2] = a1;
  return result;
}

double *sub_10009119C(double a1, double a2, double a3)
{
  double result = v3;
  v3[3] = a2;
  void v3[4] = a3;
  v3[2] = a1;
  return result;
}

void sub_1000911AC()
{
}

void sub_1000911DC(double *a1@<X0>, double *a2@<X8>)
{
  *a2 = (*(double (**)(double))(**(void **)v2 + 184))(*a1);
}

uint64_t sub_10009122C()
{
  swift_beginAccess();
  return *(void *)(v0 + 32);
}

uint64_t sub_100091260(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return result;
}

uint64_t sub_1000912A0(uint64_t a1)
{
  if ((*(uint64_t (**)(void))(*(void *)v1 + 136))() <= a1 && (*(uint64_t (**)(void))(*(void *)v1 + 160))() >= a1) {
    return a1;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v1 + 88);

  return v3();
}

void *sub_100091358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (void *)swift_allocObject();
  result[3] = a2;
  result[4] = a3;
  result[2] = a1;
  return result;
}

void *sub_1000913A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  void v3[4] = a3;
  v3[2] = a1;
  return v3;
}

void sub_1000913B0()
{
}

uint64_t sub_1000913E0()
{
  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_1000913F0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 184))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100091440(uint64_t a1)
{
  return a1;
}

uint64_t sub_100091474@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)v2 + 120))(*a1, a1[1]);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1000914C8(char a1)
{
  return a1 & 1;
}

uint64_t sub_1000914D0@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 120))(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_100091524()
{
  return *(void *)(v0 + 32);
}

uint64_t sub_10009152C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10009155C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

id sub_100091570()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 24);

  return v1;
}

void sub_1000915B4(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 24);
  *(void *)(v1 + 24) = a1;
}

uint64_t sub_1000915FC()
{
  uint64_t v0 = swift_allocObject();
  sub_100091634();
  return v0;
}

uint64_t sub_100091634()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  *(void *)(v0 + 16) = sub_100091874((uint64_t)&_swiftEmptyArrayStorage);
  sub_1000919E8();
  static DispatchQoS.unspecified.getter();
  v8[1] = &_swiftEmptyArrayStorage;
  sub_1000972DC((unint64_t *)&unk_1003223A0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100080E08(&qword_10031FB60);
  sub_100091A28();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  *(void *)(v0 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  return v0;
}

unint64_t sub_100091874(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_100320640);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v21 = v2 + 64;
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v22 = v4;
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    uint64_t v9 = v5[1];
    uint64_t v11 = v5[2];
    uint64_t v10 = v5[3];
    uint64_t v12 = v5[4];
    uint64_t v23 = v5[5];
    uint64_t v13 = v5[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100089D6C(v6, v7);
    if (v15) {
      break;
    }
    *(void *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    os_log_type_t v16 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v16 = v6;
    v16[1] = v7;
    uint64_t v17 = (void *)(v3[7] + 56 * result);
    void *v17 = v8;
    v17[1] = v9;
    v17[2] = v11;
    v17[3] = v10;
    void v17[4] = v12;
    void v17[5] = v23;
    v17[6] = v13;
    uint64_t v18 = v3[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v3[2] = v20;
    v5 += 9;
    uint64_t v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000919E8()
{
  unint64_t result = qword_10031FB58;
  if (!qword_10031FB58)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10031FB58);
  }
  return result;
}

unint64_t sub_100091A28()
{
  unint64_t result = qword_1003223B0;
  if (!qword_1003223B0)
  {
    sub_1000829FC(&qword_10031FB60);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003223B0);
  }
  return result;
}

unint64_t sub_100091A84(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_100320628);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100098440(v6, (uint64_t)&v15, &qword_100320630);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_100089D6C(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_100098428(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100091BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v3 + 120))();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 32) = a2;
  long long v9 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 56) = v9;
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a3 + 32);
  *(void *)(v8 + 88) = *(void *)(a3 + 48);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_100091DDC;
  *(void *)(v10 + 24) = v8;
  void v14[4] = sub_100091FB0;
  v14[5] = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100091FD8;
  v14[3] = &unk_1002BDF68;
  uint64_t v11 = _Block_copy(v14);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100092018(a3);
  swift_retain();
  swift_release();
  dispatch_sync(v7, v11);

  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100091D84()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100091DDC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(uint64_t (**)(unsigned char *))(**(void **)(v0 + 16) + 112);
  swift_bridgeObjectRetain();
  sub_100092018(v0 + 40);
  uint64_t v4 = (uint64_t (*)(unsigned char *, void))v3(v10);
  uint64_t v6 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v6;
  *uint64_t v6 = 0x8000000000000000;
  sub_100095C08(v0 + 40, v1, v2, isUniquelyReferenced_nonNull_native);
  *uint64_t v6 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4(v10, 0);
}

uint64_t sub_100091EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_100098428((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_100095DA0(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100087A1C(a1, &qword_10031FB70);
    sub_100095290(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_100087A1C((uint64_t)v9, &qword_10031FB70);
  }
}

uint64_t sub_100091FA0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100091FB0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100091FD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100092000(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100092010()
{
  return swift_release();
}

uint64_t sub_100092018(uint64_t a1)
{
  return a1;
}

uint64_t sub_100092064()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 120))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1000921C0;
  *(void *)(v2 + 24) = v0;
  void v5[4] = sub_1000984E8;
  void v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100091FD8;
  v5[3] = &unk_1002BDFB8;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);

  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000921C0()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 96))();
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v24 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v25 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v8 = v7 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v21 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v21 >= v25) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v21);
    ++v3;
    if (!v22)
    {
      int64_t v3 = v21 + 1;
      if (v21 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v3);
      if (!v22)
      {
        int64_t v3 = v21 + 2;
        if (v21 + 2 >= v25) {
          goto LABEL_23;
        }
        unint64_t v22 = *(void *)(v24 + 8 * v3);
        if (!v22)
        {
          int64_t v3 = v21 + 3;
          if (v21 + 3 >= v25) {
            goto LABEL_23;
          }
          unint64_t v22 = *(void *)(v24 + 8 * v3);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v22 - 1) & v22;
    unint64_t v8 = __clz(__rbit64(v22)) + (v3 << 6);
LABEL_5:
    uint64_t v9 = (uint64_t *)(*(void *)(v2 + 56) + 56 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v13 = v9[2];
    uint64_t v12 = (void *)v9[3];
    uint64_t v15 = v9[5];
    uint64_t v14 = (void *)v9[6];
    sub_100080E08(&qword_100320638);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1002856F0;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = 2108704;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    swift_bridgeObjectRetain();
    v18._countAndFlagsBits = v15;
    v18._object = v14;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 2108704;
    v19._object = (void *)0xE300000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRetain();
    v20._countAndFlagsBits = v13;
    v20._object = v12;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 32) = v10;
    *(void *)(v16 + 40) = v11;
    print(_:separator:terminator:)();
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v23 = v21 + 4;
  if (v23 < v25)
  {
    unint64_t v22 = *(void *)(v24 + 8 * v23);
    if (!v22)
    {
      while (1)
      {
        int64_t v3 = v23 + 1;
        if (__OFADD__(v23, 1)) {
          goto LABEL_27;
        }
        if (v3 >= v25) {
          goto LABEL_23;
        }
        unint64_t v22 = *(void *)(v24 + 8 * v3);
        ++v23;
        if (v22) {
          goto LABEL_22;
        }
      }
    }
    int64_t v3 = v23;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t sub_100092490()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000924A0()
{
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1000924C8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

void *sub_100092508()
{
  return &unk_100287260;
}

uint64_t sub_100092514()
{
  return -1;
}

BOOL sub_10009251C(uint64_t a1)
{
  return a1 == -1;
}

unint64_t sub_100092528()
{
  return sub_100091A84((uint64_t)&_swiftEmptyArrayStorage);
}

uint64_t sub_100092534()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10009256C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000925B4()
{
  swift_beginAccess();
  return *(void *)(v0 + 24);
}

uint64_t sub_1000925E8(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t sub_100092628()
{
  (*(void (**)(void))(*(void *)v0 + 128))(0);
  unint64_t v1 = sub_100091A84((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v2 = *(uint64_t (**)(unint64_t))(*(void *)v0 + 104);

  return v2(v1);
}

void (*sub_1000926A0(uint64_t a1, uint64_t a2, uint64_t a3))(unsigned char *, void)
{
  uint64_t result = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v3 + 136))(v12);
  if (__OFADD__(*v8, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v8;
    result(v12, 0);
    sub_1000927A4(a3, (uint64_t)v12);
    uint64_t v9 = *(uint64_t (**)(unsigned char *))(*(void *)v3 + 112);
    swift_bridgeObjectRetain();
    uint64_t v10 = (uint64_t (*)(unsigned char *, void))v9(v11);
    sub_100091EC8((uint64_t)v12, a1, a2);
    return (void (*)(unsigned char *, void))v10(v11, 0);
  }
  return result;
}

uint64_t sub_1000927A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100092808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 96);
  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = v7(v8);
  if (*(void *)(v9 + 16) && (unint64_t v10 = sub_100089D6C(a1, a2), (v11 & 1) != 0))
  {
    sub_1000927A4(*(void *)(v9 + 56) + 40 * v10, a3);
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000928C8()
{
  return sub_1000928D0(32);
}

uint64_t sub_1000928D0(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v1, a1, 7);
}

uint64_t sub_100092914()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = sub_100091A84((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v0 + 24) = 0;
  return v0;
}

uint64_t sub_100092958()
{
  *(void *)(v0 + 16) = sub_100091A84((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v0 + 24) = 0;
  return v0;
}

uint64_t sub_100092980()
{
  type metadata accessor for DewGlobalState();
  uint64_t v0 = swift_allocObject();
  uint64_t result = sub_100091634();
  qword_100329D40 = v0;
  return result;
}

char *sub_1000929BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  swift_allocObject();
  uint64_t v16 = sub_100096DD8(a1, a2, a3, a4, a5, a6, a7);

  (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 80) - 8) + 8))(a4);
  swift_bridgeObjectRelease();
  return v16;
}

char *sub_100092A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = *v7;
  char v11 = sub_100096DD8(a1, a2, a3, a4, a5, a6, a7);

  (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 80) - 8) + 8))(a4);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100092B20(uint64_t a1)
{
  *(void *)(v1 + *(void *)(*(void *)v1 + 120)) = -1;
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 112);
  swift_beginAccess();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(v3, a1, AssociatedTypeWitness);
  return swift_endAccess();
}

uint64_t sub_100092C14@<X0>(uint64_t a1@<X8>)
{
  void (*v21)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  char *v25;
  uint64_t v26;
  char v27;
  void (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void v37[3];
  uint64_t v38;
  uint64_t v39;
  long long v40;
  long long v41;

  uint64_t v2 = v1;
  uint64_t v4 = (void *)*v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v13 = v4[15];
  if (*(void *)((char *)v2 + v13) == -1)
  {
    int64_t v25 = (char *)v2 + v4[14];
    swift_beginAccess();
  }
  else
  {
    char v32 = v12;
    uint64_t v33 = v9;
    os_log_type_t v34 = (char *)&v32 - v10;
    uint64_t v35 = v11;
    id v36 = a1;
    uint64_t v14 = *(void *)((char *)v2 + v4[16]);
    uint64_t v15 = OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides;
    uint64_t v16 = *(uint64_t (**)(uint64_t))(**(void **)(v14
                                                          + OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides)
                                            + 120);
    uint64_t v17 = swift_retain();
    uint64_t v18 = v16(v17);
    swift_release();
    if (*(void *)((char *)v2 + v13) < v18)
    {
      *(void *)((char *)v2 + v13) = v18;
      uint64_t v19 = v2[2];
      uint64_t v20 = v2[3];
      int64_t v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(**(void **)(v14 + v15) + 160);
      swift_retain();
      v21(v37, v19, v20);
      swift_release();
      unint64_t v22 = v38;
      if (v38)
      {
        int64_t v23 = v39;
        sub_100097048(v37, v38);
        uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v23 + 16);
        *((void *)&v41 + 1) = swift_getAssociatedTypeWitness();
        sub_10009708C((uint64_t *)&v40);
        v24(v22, v23);
        sub_10008FBC4((uint64_t)v37);
      }
      else
      {
        sub_100087A1C((uint64_t)v37, &qword_10031FB70);
        uint64_t v40 = 0u;
        unint64_t v41 = 0u;
      }
      sub_100080E08(&qword_10031FB78);
      uint64_t v26 = v35;
      uint64_t v27 = swift_dynamicCast();
      unint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
      if (v27)
      {
        v28(v26, 0, 1, AssociatedTypeWitness);
        id v29 = v34;
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v34, v26, AssociatedTypeWitness);
        uint64_t v30 = (char *)v2 + *(void *)(*v2 + 112);
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))(v8 + 24))(v30, v29, AssociatedTypeWitness);
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v8 + 8))(v29, AssociatedTypeWitness);
      }
      else
      {
        v28(v26, 1, 1, AssociatedTypeWitness);
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v26, v33);
      }
    }
    int64_t v25 = (char *)v2 + *(void *)(*v2 + 112);
    swift_beginAccess();
    a1 = v36;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 16))(a1, v25, AssociatedTypeWitness);
}

uint64_t sub_10009308C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 112);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);

  return v0;
}

uint64_t sub_100093178()
{
  sub_10009308C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000931D0@<X0>(uint64_t a1@<X8>)
{
  return sub_100095280(v1 + 16, a1);
}

uint64_t sub_1000931DC()
{
  return *(void *)(v0 + 72);
}

void *sub_1000931E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  swift_allocObject();
  uint64_t v14 = sub_1000970F0(a1, a2, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease();
  return v14;
}

void *sub_100093278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = sub_1000970F0(a1, a2, a3, a4, a5, a6, a7);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000932AC(uint64_t a1)
{
  *(void *)(v1 + 80) = a1;
  *(void *)(v1 + 88) = -1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000932EC()
{
  (*(void (**)(void))(*(void *)v0 + 208))();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  char v1 = Set.contains(_:)();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t sub_1000933A8()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void v15[3];
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;

  char v1 = v0;
  if (v0[11] == -1) {
    return swift_bridgeObjectRetain();
  }
  uint64_t v2 = v0[12];
  uint64_t v3 = OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides;
  uint64_t v4 = *(uint64_t (**)(uint64_t))(**(void **)(v2
                                                       + OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides)
                                         + 120);
  uint64_t v5 = swift_retain();
  uint64_t v6 = v4(v5);
  swift_release();
  if (v1[11] >= v6) {
    return swift_bridgeObjectRetain();
  }
  v1[11] = v6;
  uint64_t v7 = *(void *)(v2 + v3);
  uint64_t v8 = v1[2];
  uint64_t v9 = v1[3];
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v7 + 160);
  swift_retain();
  v10(v15, v8, v9);
  swift_release();
  uint64_t v11 = v16;
  if (!v16)
  {
    sub_100087A1C((uint64_t)v15, &qword_10031FB70);
    uint64_t v18 = 0u;
    uint64_t v19 = 0u;
    goto LABEL_8;
  }
  uint64_t v12 = v17;
  sub_100097048(v15, v16);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 16);
  *((void *)&v19 + 1) = swift_getAssociatedTypeWitness();
  sub_10009708C((uint64_t *)&v18);
  v13(v11, v12);
  sub_10008FBC4((uint64_t)v15);
  if (!*((void *)&v19 + 1))
  {
LABEL_8:
    sub_100087A1C((uint64_t)&v18, &qword_10031FB78);
    return swift_bridgeObjectRetain();
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  if (swift_dynamicCast())
  {
    v1[10] = v15[0];
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000935EC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_100093644()
{
  sub_1000935EC();

  return _swift_deallocClassInstance(v0, 104, 7);
}

uint64_t sub_100093678()
{
  return swift_retain();
}

uint64_t sub_100093688()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_100093698@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_logger;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t DewConfiguration.__allocating_init(settings:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  uint64_t ObjectType = swift_getObjectType();
  type metadata accessor for DewGlobalOverrides();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_100091A84((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v5 + 24) = 0;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(ObjectType + 104))(v5, a1);
  swift_deallocPartialClassInstance();
  return v6;
}

uint64_t DewConfiguration.init(settings:)(uint64_t a1)
{
  uint64_t ObjectType = swift_getObjectType();
  type metadata accessor for DewGlobalOverrides();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100091A84((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v3 + 24) = 0;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(ObjectType + 104))(v3, a1);
  swift_deallocPartialClassInstance();
  return v4;
}

char *sub_100093974(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1000939B8(a1, a2);
}

char *sub_1000939B8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides] = a1;
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd16DewConfiguration_settings] = a2;
  swift_unknownObjectRetain();
  uint64_t v9 = v2;
  swift_retain();
  Logger.init(subsystem:category:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v9[OBJC_IVAR____TtC13transparencyd16DewConfiguration_logger], v8, v5);

  uint64_t v10 = (objc_class *)type metadata accessor for DewConfiguration();
  v24.receiver = v9;
  v24.super_class = v10;
  uint64_t v11 = (char *)[super init];
  uint64_t v12 = v11;
  uint64_t v13 = *(void **)&v11[OBJC_IVAR____TtC13transparencyd16DewConfiguration_settings];
  if (v13)
  {
    uint64_t v14 = v11;
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v13 getSettingsData:v15];

    uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "dew loading cached cloud configuration", v22, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, unint64_t))((swift_isaMask & *(void *)v14) + 0x80))(v17, v19);
    swift_release();
    swift_unknownObjectRelease();
    sub_100080CB0(v17, v19);
  }
  else
  {
    swift_release();
    swift_unknownObjectRelease();
  }
  return v12;
}

uint64_t sub_100093C74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

uint64_t sub_100093CB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "resetCloudConfiguration", v4, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(void))(**(void **)(v1 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides)
                              + 144))();
}

uint64_t sub_100093D88(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_100080E08(&qword_10031FB88);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v23[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for CloudConfiguration(0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = &v23[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = a1;
  unint64_t v26 = a2;
  uint64_t v24 = 0;
  memset(&v23[16], 0, 32);
  sub_100080C58(a1, a2);
  BinaryDecodingOptions.init()();
  sub_1000972DC(&qword_10031FB90, (void (*)(uint64_t))type metadata accessor for CloudConfiguration);
  Message.init<A>(serializedBytes:extensions:partial:options:)();
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  sub_100098314((uint64_t)v9, (uint64_t)v13, type metadata accessor for CloudConfiguration);
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(*(void *)v13 + 16);
  if (v15)
  {
    uint64_t v16 = *(void *)(type metadata accessor for DewValue(0) - 8);
    uint64_t v17 = (void *)(v14 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)));
    uint64_t v18 = *(void *)(v16 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_1000940E8(v17, v3);
      uint64_t v17 = (void *)((char *)v17 + v18);
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  unint64_t v19 = *(void **)(v3 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_settings);
  if (v19)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v19 setSettingsData:v20 data:isa];
  }
  return sub_10009837C((uint64_t)v13, type metadata accessor for CloudConfiguration);
}

uint64_t sub_1000940E8(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Strings(0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100080E08(&qword_100320618);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (void *)((char *)v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v47 - v11;
  uint64_t v13 = type metadata accessor for ConfigurationValue(0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DewValue(0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (void *)((char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000982B0((uint64_t)a1, (uint64_t)v18);
  unint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v48 = a2;
    os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    id v49 = a1;
    v53[0] = v22;
    uint64_t v50 = v6;
    id v51 = v12;
    *(_DWORD *)os_log_type_t v21 = 136315138;
    v47[1] = v21 + 4;
    int64_t v23 = v10;
    uint64_t v24 = *v18;
    unint64_t v25 = v18[1];
    swift_bridgeObjectRetain();
    uint64_t v26 = v24;
    uint64_t v10 = v23;
    uint64_t v52 = sub_10008D114(v26, v25, v53);
    a2 = v48;
    uint64_t v12 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v6 = v50;
    swift_bridgeObjectRelease();
    sub_10009837C((uint64_t)v18, type metadata accessor for DewValue);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "cloud dew configuration: %s", v21, 0xCu);
    swift_arrayDestroy();
    a1 = v49;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10009837C((uint64_t)v18, type metadata accessor for DewValue);
  }
  sub_100107858((uint64_t)v15);
  sub_100098440((uint64_t)v15, (uint64_t)v12, &qword_100320618);
  sub_10009837C((uint64_t)v15, type metadata accessor for ConfigurationValue);
  uint64_t v27 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v12, 1, v27) != 1)
  {
    sub_100098440((uint64_t)v12, (uint64_t)v10, &qword_100320618);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v35 = *v10;
        uint64_t v36 = v10[1];
        uint64_t v29 = *(void *)(a2 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides);
        uint64_t v30 = *a1;
        uint64_t v31 = a1[1];
        uint64_t v32 = type metadata accessor for DewTypeString();
        uint64_t v33 = swift_allocObject();
        *(void *)(v33 + 16) = v35;
        *(void *)(v33 + 24) = v36;
        os_log_type_t v34 = &off_10031FC18;
        goto LABEL_10;
      case 2u:
        char v37 = *(unsigned char *)v10;
        uint64_t v29 = *(void *)(a2 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides);
        uint64_t v30 = *a1;
        uint64_t v31 = a1[1];
        uint64_t v32 = type metadata accessor for DewTypeBool();
        uint64_t v33 = swift_allocObject();
        *(unsigned char *)(v33 + 16) = v37;
        os_log_type_t v34 = &off_10031FC38;
        goto LABEL_10;
      case 3u:
        uint64_t v38 = *v10;
        uint64_t v29 = *(void *)(a2 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides);
        uint64_t v30 = *a1;
        uint64_t v31 = a1[1];
        uint64_t v32 = type metadata accessor for DewTypeTimeInterval();
        uint64_t v33 = swift_allocObject();
        *(void *)(v33 + 16) = v38;
        os_log_type_t v34 = &off_10031FBF8;
        goto LABEL_10;
      case 4u:
        sub_100098314((uint64_t)v10, (uint64_t)v6, type metadata accessor for Strings);
        uint64_t v39 = *(void *)(a2 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides);
        uint64_t v40 = *a1;
        uint64_t v41 = a1[1];
        uint64_t v42 = swift_bridgeObjectRetain();
        uint64_t v43 = sub_100097324(v42);
        swift_bridgeObjectRelease();
        uint64_t v44 = type metadata accessor for DewTypeStrings();
        uint64_t v45 = swift_allocObject();
        *(void *)(v45 + 16) = v43;
        uint64_t v54 = v44;
        id v55 = &off_10031FC58;
        v53[0] = v45;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v39 + 152))(v40, v41, v53);
        sub_10009837C((uint64_t)v6, type metadata accessor for Strings);
        goto LABEL_12;
      default:
        uint64_t v28 = *v10;
        uint64_t v29 = *(void *)(a2 + OBJC_IVAR____TtC13transparencyd16DewConfiguration_dewOverrides);
        uint64_t v30 = *a1;
        uint64_t v31 = a1[1];
        uint64_t v32 = type metadata accessor for DewTypeInt64();
        uint64_t v33 = swift_allocObject();
        *(void *)(v33 + 16) = v28;
        os_log_type_t v34 = &off_10031FBD8;
LABEL_10:
        uint64_t v54 = v32;
        id v55 = v34;
        v53[0] = v33;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v29 + 152))(v30, v31, v53);
LABEL_12:
        sub_10008FBC4((uint64_t)v53);
        break;
    }
  }
  return sub_100087A1C((uint64_t)v12, &qword_100320618);
}

void DewConfiguration.init()()
{
}

id DewConfiguration.__deallocating_deinit()
{
  return sub_10009519C(0, type metadata accessor for DewConfiguration);
}

id sub_1000947C0()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  swift_beginAccess();
  uint64_t v2 = *v1;

  return v2;
}

void sub_100094818(void *a1)
{
  uint64_t v3 = (void **)(v1 + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config);
  swift_beginAccess();
  uint64_t v4 = *v3;
  void *v3 = a1;
}

id sub_10009486C(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1000973BC(a1);
  swift_unknownObjectRelease();
  return v4;
}

id sub_1000948B0(uint64_t a1)
{
  id v1 = sub_1000973BC(a1);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_100094928()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x90))();
}

double sub_1000949D8()
{
  return sub_100094CC8(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidsationEnrollment);
}

uint64_t sub_1000949F0(double a1)
{
  return sub_100094BEC(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidsationEnrollment, a1);
}

double sub_100094A08()
{
  return sub_100094CC8(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_initialDelaySync);
}

uint64_t sub_100094A20(double a1)
{
  return sub_100094BEC(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_initialDelaySync, a1);
}

uint64_t sub_100094A38()
{
  return sub_100094A5C(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_validatePendingURILimitConfig);
}

uint64_t sub_100094A50()
{
  return sub_100094A5C(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_validatePendingSMTLimitConfig);
}

uint64_t sub_100094A5C(void *a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v1 + *a1) + 200))(&v3);
  uint64_t result = v3;
  if (v3 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100094B0C(char *a1, uint64_t a2, void *a3)
{
  void (*v3)(uint64_t *__return_ptr);
  char *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  uint64_t v3 = *(void (**)(uint64_t *__return_ptr))(**(void **)&a1[*a3] + 200);
  id v4 = a1;
  v3(&v7);
  uint64_t v5 = v7;
  if (v7 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {

    return v5;
  }
  return result;
}

double sub_100094BC8()
{
  return sub_100094CC8(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidateCloudKitTimeoutConfig);
}

uint64_t sub_100094BE0(double a1)
{
  return sub_100094BEC(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidateCloudKitTimeoutConfig, a1);
}

uint64_t sub_100094BEC(void *a1, double a2)
{
  uint64_t v3 = *(void *)(v2 + *a1);
  double v5 = a2;
  return (*(uint64_t (**)(double *))(*(void *)v3 + 192))(&v5);
}

void sub_100094C50(char *a1, double a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)&a1[*a4];
  double v7 = a2;
  double v5 = *(void (**)(double *))(*(void *)v4 + 192);
  uint64_t v6 = a1;
  v5(&v7);
}

double sub_100094CBC()
{
  return sub_100094CC8(&OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_resetEnvLogClientNetworkTimeoutConfig);
}

double sub_100094CC8(void *a1)
{
  (*(void (**)(double *__return_ptr))(**(void **)(v1 + *a1) + 200))(&v3);
  return v3;
}

double sub_100094D2C(char *a1, uint64_t a2, void *a3)
{
  void (*v3)(double *__return_ptr);
  char *v4;
  double v6;

  double v3 = *(void (**)(double *__return_ptr))(**(void **)&a1[*a3] + 200);
  uint64_t v4 = a1;
  v3(&v6);

  return v6;
}

uint64_t sub_100094D98()
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v0
                                                              + OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_fastWatchDogExit)
                                                + 200))(&v2);
  return v2;
}

uint64_t sub_100094E64()
{
  if (qword_100329D38 != -1) {
    swift_once();
  }
  return (*(uint64_t (**)(void))(*(void *)qword_100329D40 + 160))();
}

void sub_100094F78(uint64_t a1, uint64_t a2)
{
  double v5 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x90))();
  (*(void (**)(uint64_t, uint64_t))((swift_isaMask & *v5) + 0x80))(a1, a2);
}

void sub_100095124()
{
}

id sub_100095184(uint64_t a1)
{
  return sub_10009519C(a1, type metadata accessor for DewConfigurationObjectiveC);
}

id sub_10009519C(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return [super dealloc];
}

uint64_t sub_100095280(uint64_t a1, uint64_t a2)
{
  return initializeWithCopy for DewName(a2, a1);
}

double sub_100095290@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  objc_super v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100089D6C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *objc_super v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10009615C();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100098428((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    sub_100095A1C(v8, v11);
    *objc_super v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10009539C(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100080E08(&qword_100320640);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v37 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }
      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              double v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v13 = v24;
          }
        }
LABEL_30:
        unint64_t v10 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = *(void *)(v5 + 56) + 56 * v21;
      uint64_t v33 = *(void *)(v32 + 8);
      uint64_t v34 = *(void *)(v32 + 24);
      uint64_t v41 = *(void *)v32;
      uint64_t v42 = *(void *)(v32 + 16);
      long long v43 = *(_OWORD *)(v32 + 32);
      uint64_t v35 = *(void *)(v32 + 48);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *uint64_t v18 = v30;
      v18[1] = v31;
      uint64_t v19 = *(void *)(v7 + 56) + 56 * v17;
      *(void *)uint64_t v19 = v41;
      *(void *)(v19 + 8) = v33;
      *(void *)(v19 + 16) = v42;
      *(void *)(v19 + 24) = v34;
      *(_OWORD *)(v19 + 32) = v43;
      *(void *)(v19 + 48) = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000956F4(uint64_t a1, char a2)
{
  double v3 = v2;
  uint64_t v5 = *v2;
  sub_100080E08(&qword_100320628);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          double v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    char v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      sub_100098428(v25, (uint64_t)v38);
    }
    else
    {
      sub_1000927A4((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_100098428(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  double v3 = v34;
  uint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

unint64_t sub_100095A1C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          unint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          unint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *unint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          int64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  uint64_t *v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100095C08(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100089D6C(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_18;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100095F68();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 56 * v12;
      return sub_1000984A4(a1, v19);
    }
    goto LABEL_13;
  }
  sub_10009539C(v15, a4 & 1);
  unint64_t v21 = sub_100089D6C(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_19:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  int64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_13:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  BOOL v23 = (uint64_t *)(v18[6] + 16 * v12);
  *BOOL v23 = a2;
  v23[1] = a3;
  uint64_t v24 = v18[7] + 56 * v12;
  long long v25 = *(_OWORD *)a1;
  long long v26 = *(_OWORD *)(a1 + 16);
  long long v27 = *(_OWORD *)(a1 + 32);
  *(void *)(v24 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(v24 + 16) = v26;
  *(_OWORD *)(v24 + 32) = v27;
  *(_OWORD *)uint64_t v24 = v25;
  uint64_t v28 = v18[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v18[2] = v30;

  return swift_bridgeObjectRetain();
}

uint64_t sub_100095DA0(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100089D6C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10009615C();
      goto LABEL_7;
    }
    sub_1000956F4(v15, a4 & 1);
    unint64_t v21 = sub_100089D6C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    sub_10008FBC4(v19);
    return sub_100098428(a1, v19);
  }
LABEL_13:
  sub_100095EF8(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100095EF8(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_100098428(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_100095F68()
{
  uint64_t v1 = v0;
  sub_100080E08(&qword_100320640);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v30 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v13) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v6 + 8 * v30);
    ++v9;
    if (!v31)
    {
      int64_t v9 = v30 + 1;
      if (v30 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v31 = *(void *)(v6 + 8 * v9);
      if (!v31) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v31 - 1) & v31;
    unint64_t v15 = __clz(__rbit64(v31)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 56 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    uint64_t v23 = *(void *)(v21 + 8);
    uint64_t v24 = *(void *)(v21 + 16);
    uint64_t v25 = *(void *)(v21 + 24);
    uint64_t v26 = *(void *)(v21 + 48);
    long long v27 = (void *)(*(void *)(v4 + 48) + v16);
    long long v28 = *(_OWORD *)(v21 + 32);
    void *v27 = v19;
    v27[1] = v18;
    uint64_t v29 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v29 = v22;
    *(void *)(v29 + 8) = v23;
    *(void *)(v29 + 16) = v24;
    *(void *)(v29 + 24) = v25;
    *(_OWORD *)(v29 + 32) = v28;
    *(void *)(v29 + 48) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v32 = v30 + 2;
  if (v32 >= v13) {
    goto LABEL_26;
  }
  unint64_t v31 = *(void *)(v6 + 8 * v32);
  if (v31)
  {
    int64_t v9 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v6 + 8 * v9);
    ++v32;
    if (v31) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10009615C()
{
  uint64_t v1 = v0;
  sub_100080E08(&qword_100320628);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_1000927A4(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_100098428(v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100096348(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1000967D8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000964F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100080E08(&qword_100320620);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    int64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *BOOL v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

Swift::Int sub_1000967D8(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1000964F8();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100096974();
      goto LABEL_22;
    }
    sub_100096B28();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_100096974()
{
  uint64_t v1 = v0;
  sub_100080E08(&qword_100320620);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    BOOL v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100096B28()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100080E08(&qword_100320620);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    BOOL v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *int64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

char *sub_100096DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8 = (char *)v7;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v29 = a1;
  uint64_t v30 = a3;
  uint64_t v10 = *(void *)(*v7 + 88);
  uint64_t v11 = *(void *)(*v7 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v15 = (char *)&v29 - v14;
  int64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 24);
  swift_bridgeObjectRetain();
  uint64_t v17 = v16(v11, v10);
  uint64_t v18 = a2;
  uint64_t v19 = v29;
  _DWORD v7[2] = v29;
  uint64_t v20 = v7 + 2;
  uint64_t v21 = v31;
  v7[3] = v18;
  void v7[4] = v21;
  uint64_t v22 = v30;
  void v7[5] = v32;
  v7[6] = v22;
  v7[7] = v17;
  v7[8] = v23;
  v7[9] = v22;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v11, v10);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v8[*(void *)(*(void *)v8 + 112)], v15, AssociatedTypeWitness);
  *(void *)((char *)v7 + *(void *)(*v7 + 120)) = 0;
  unint64_t v24 = v34;
  *(void *)((char *)v7 + *(void *)(*v7 + 128)) = v34;
  uint64_t v25 = qword_100329D38;
  id v26 = v24;
  if (v25 != -1) {
    swift_once();
  }
  long long v27 = *((_OWORD *)v8 + 2);
  v35[0] = *v20;
  v35[1] = v27;
  _OWORD v35[2] = *((_OWORD *)v8 + 3);
  uint64_t v36 = *((void *)v8 + 8);
  (*(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)qword_100329D40 + 152))(v19, v18, v35);
  return v8;
}

void *sub_100097048(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t *sub_10009708C(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void *sub_1000970F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  unint64_t v8 = v7;
  uint64_t v14 = *v7;
  uint64_t v15 = *(void *)(*v7 + 80);
  uint64_t v16 = *(void *)(*(void *)(v14 + 88) + 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 24);
  swift_bridgeObjectRetain();
  uint64_t v18 = v17(v15, v16);
  uint64_t v19 = a1;
  void v8[2] = a1;
  v8[3] = a2;
  v8[4] = a6;
  void v8[5] = a7;
  v8[6] = a3;
  v8[7] = v18;
  v8[8] = v20;
  v8[9] = a3;
  v8[10] = a4;
  v8[11] = 0;
  v8[12] = a5;
  uint64_t v21 = qword_100329D38;
  id v22 = a5;
  if (v21 != -1) {
    swift_once();
  }
  long long v23 = *((_OWORD *)v8 + 2);
  v28[0] = *((_OWORD *)v8 + 1);
  v28[1] = v23;
  v28[2] = *((_OWORD *)v8 + 3);
  uint64_t v29 = v8[8];
  unint64_t v24 = *(void (**)(uint64_t, uint64_t, _OWORD *))(*(void *)qword_100329D40 + 152);
  sub_100092018((uint64_t)v28);
  v24(v19, a2, v28);

  sub_1000983DC((uint64_t)v28);
  return v8;
}

uint64_t type metadata accessor for DewGlobalOverrides()
{
  return self;
}

uint64_t type metadata accessor for DewConfiguration()
{
  uint64_t result = qword_100329E48;
  if (!qword_100329E48) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000972DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100097324(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100096348(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

id sub_1000973BC(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)type metadata accessor for DewConfiguration());
  uint64_t ObjectType = swift_getObjectType();
  type metadata accessor for DewGlobalOverrides();
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectRetain();
  Swift::Int v6 = v1;
  *(void *)(v5 + 16) = sub_100091A84((uint64_t)&_swiftEmptyArrayStorage);
  *(void *)(v5 + 24) = 0;
  Swift::Int v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(ObjectType + 104))(v5, a1);
  uint64_t v8 = v6;
  swift_deallocPartialClassInstance();
  NSString v56 = (void **)&v6[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config];
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_config] = v7;
  sub_100080E08(&qword_100320600);
  uint64_t v9 = (void *)swift_allocObject();
  uint64_t v10 = qword_100329D18;
  id v11 = v7;
  if (v10 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v12 = qword_10032F5C8;
  uint64_t v13 = unk_10032F5D0;
  long long v9[2] = 0xD000000000000026;
  v9[3] = 0x800000010024DC30;
  v9[4] = 0xD000000000000090;
  v9[5] = 0x800000010024DC60;
  v9[6] = 0;
  v9[7] = v12;
  v9[8] = v13;
  v9[9] = 0;
  v9[10] = 0x4024000000000000;
  v9[11] = 0;
  v9[12] = v11;
  uint64_t v14 = qword_100329D38;
  id v15 = v11;
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  long long v16 = *((_OWORD *)v9 + 2);
  v83[0] = *((_OWORD *)v9 + 1);
  v83[1] = v16;
  v83[2] = *((_OWORD *)v9 + 3);
  uint64_t v84 = v9[8];
  (*(void (**)(unint64_t, unint64_t, _OWORD *))(*(void *)qword_100329D40 + 152))(0xD000000000000026, 0x800000010024DC30, v83);

  *(void *)&v8[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidsationEnrollment] = v9;
  swift_beginAccess();
  uint64_t v17 = *v56;
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = unk_10032F5D0;
  id v57 = v8;
  *(void *)&long long v79 = 0xD00000000000001ALL;
  *((void *)&v79 + 1) = 0x800000010024DD00;
  *(void *)&long long v80 = 0xD000000000000089;
  *((void *)&v80 + 1) = 0x800000010024DD20;
  *(void *)&long long v81 = 1;
  *((void *)&v81 + 1) = qword_10032F5C8;
  uint64_t v82 = unk_10032F5D0;
  long long v20 = v80;
  *(_OWORD *)(v18 + 16) = v79;
  *(_OWORD *)(v18 + 32) = v20;
  *(_OWORD *)(v18 + 48) = v81;
  *(void *)(v18 + 64) = v19;
  *(void *)(v18 + 72) = 1;
  *(void *)(v18 + 80) = 0x4024000000000000;
  *(void *)(v18 + 88) = 0;
  *(void *)(v18 + 96) = v17;
  uint64_t v21 = *(void (**)(unint64_t, unint64_t, long long *))(*(void *)qword_100329D40 + 152);
  id v22 = v17;
  swift_bridgeObjectRetain();
  v21(0xD00000000000001ALL, 0x800000010024DD00, &v79);

  *(void *)&v8[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_initialDelaySync] = v18;
  long long v23 = *v56;
  sub_100080E08(&qword_100320608);
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = qword_100329D10;
  id v26 = v23;
  if (v25 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *(void *)&long long v75 = 0xD000000000000019;
  *((void *)&v75 + 1) = 0x800000010024DDB0;
  *(void *)&long long v76 = 0xD00000000000003CLL;
  *((void *)&v76 + 1) = 0x800000010024DDD0;
  *(void *)&long long v77 = 1;
  *((void *)&v77 + 1) = qword_10032F5B8;
  uint64_t v78 = qword_10032F5C0;
  *(void *)(v24 + 64) = qword_10032F5C0;
  long long v27 = v76;
  *(_OWORD *)(v24 + 16) = v75;
  *(_OWORD *)(v24 + 32) = v27;
  *(_OWORD *)(v24 + 48) = v77;
  *(_OWORD *)(v24 + 72) = xmmword_100287250;
  *(void *)(v24 + 88) = 0;
  *(void *)(v24 + 96) = v26;
  uint64_t v28 = *(void (**)(unint64_t, unint64_t, long long *))(*(void *)qword_100329D40 + 152);
  id v29 = v26;
  swift_bridgeObjectRetain();
  v28(0xD000000000000019, 0x800000010024DDB0, &v75);

  *(void *)&v8[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_validatePendingURILimitConfig] = v24;
  uint64_t v30 = *v56;
  uint64_t v31 = swift_allocObject();
  *(void *)&long long v71 = 0xD000000000000019;
  *((void *)&v71 + 1) = 0x800000010024DE10;
  *(void *)&long long v72 = 0xD00000000000003CLL;
  *((void *)&v72 + 1) = 0x800000010024DE30;
  *(void *)&long long v73 = 1;
  *((void *)&v73 + 1) = qword_10032F5B8;
  uint64_t v74 = qword_10032F5C0;
  *(void *)(v31 + 64) = qword_10032F5C0;
  long long v32 = v72;
  *(_OWORD *)(v31 + 16) = v71;
  *(_OWORD *)(v31 + 32) = v32;
  *(_OWORD *)(v31 + 48) = v73;
  *(_OWORD *)(v31 + 72) = xmmword_100287250;
  *(void *)(v31 + 88) = 0;
  *(void *)(v31 + 96) = v30;
  uint64_t v33 = *(void (**)(unint64_t, unint64_t, long long *))(*(void *)qword_100329D40 + 152);
  id v34 = v30;
  swift_bridgeObjectRetain();
  v33(0xD000000000000019, 0x800000010024DE10, &v71);

  *(void *)&v57[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_validatePendingSMTLimitConfig] = v31;
  int64_t v35 = *v56;
  uint64_t v36 = swift_allocObject();
  uint64_t v37 = unk_10032F5D0;
  *(void *)&long long v67 = 0xD00000000000001ALL;
  *((void *)&v67 + 1) = 0x800000010024DD00;
  *(void *)&long long v68 = 0xD000000000000089;
  *((void *)&v68 + 1) = 0x800000010024DD20;
  *(void *)&long long v69 = 1;
  *((void *)&v69 + 1) = qword_10032F5C8;
  uint64_t v70 = unk_10032F5D0;
  long long v38 = v68;
  *(_OWORD *)(v36 + 16) = v67;
  *(_OWORD *)(v36 + 32) = v38;
  *(_OWORD *)(v36 + 48) = v69;
  *(void *)(v36 + 64) = v37;
  *(void *)(v36 + 72) = 1;
  *(void *)(v36 + 80) = 0x4024000000000000;
  *(void *)(v36 + 88) = 0;
  *(void *)(v36 + 96) = v35;
  uint64_t v39 = *(void (**)(unint64_t, unint64_t, long long *))(*(void *)qword_100329D40 + 152);
  id v40 = v35;
  swift_bridgeObjectRetain();
  v39(0xD00000000000001ALL, 0x800000010024DD00, &v67);

  *(void *)&v57[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_selfValidateCloudKitTimeoutConfig] = v36;
  uint64_t v41 = *v56;
  uint64_t v42 = swift_allocObject();
  uint64_t v43 = unk_10032F5D0;
  *(void *)&long long v63 = 0xD000000000000021;
  *((void *)&v63 + 1) = 0x800000010024DE70;
  *(void *)&long long v64 = 0xD000000000000046;
  *((void *)&v64 + 1) = 0x800000010024DEA0;
  *(void *)&long long v65 = 1;
  *((void *)&v65 + 1) = qword_10032F5C8;
  uint64_t v66 = unk_10032F5D0;
  long long v44 = v64;
  *(_OWORD *)(v42 + 16) = v63;
  *(_OWORD *)(v42 + 32) = v44;
  *(_OWORD *)(v42 + 48) = v65;
  *(void *)(v42 + 64) = v43;
  *(void *)(v42 + 72) = 1;
  *(void *)(v42 + 80) = 0x403E000000000000;
  *(void *)(v42 + 88) = 0;
  *(void *)(v42 + 96) = v41;
  uint64_t v45 = *(void (**)(unint64_t, unint64_t, long long *))(*(void *)qword_100329D40 + 152);
  id v46 = v41;
  swift_bridgeObjectRetain();
  v45(0xD000000000000021, 0x800000010024DE70, &v63);

  *(void *)&v57[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_resetEnvLogClientNetworkTimeoutConfig] = v42;
  uint64_t v47 = *v56;
  sub_100080E08(&qword_100320610);
  uint64_t v48 = swift_allocObject();
  uint64_t v49 = qword_100329D28;
  id v50 = v47;
  if (v49 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v51 = qword_10032F5F0;
  *(void *)&long long v59 = 0xD000000000000012;
  *((void *)&v59 + 1) = 0x800000010024DEF0;
  *(void *)&long long v60 = 0xD00000000000002DLL;
  *((void *)&v60 + 1) = 0x800000010024DF10;
  *(void *)&long long v61 = 1;
  *((void *)&v61 + 1) = qword_10032F5E8;
  uint64_t v62 = qword_10032F5F0;
  long long v52 = v60;
  *(_OWORD *)(v48 + 16) = v59;
  *(_OWORD *)(v48 + 32) = v52;
  *(_OWORD *)(v48 + 48) = v61;
  *(void *)(v48 + 64) = v51;
  *(void *)(v48 + 72) = 1;
  *(unsigned char *)(v48 + 80) = 1;
  *(void *)(v48 + 88) = 0;
  *(void *)(v48 + 96) = v50;
  uint64_t v53 = *(void (**)(unint64_t, unint64_t, long long *))(*(void *)qword_100329D40 + 152);
  id v54 = v50;
  swift_bridgeObjectRetain();
  v53(0xD000000000000012, 0x800000010024DEF0, &v59);

  *(void *)&v57[OBJC_IVAR____TtC13transparencyd26DewConfigurationObjectiveC_fastWatchDogExit] = v48;
  v58.receiver = v57;
  v58.super_class = (Class)type metadata accessor for DewConfigurationObjectiveC();
  return [super init];
}

uint64_t type metadata accessor for DewConfigurationObjectiveC()
{
  return self;
}

void *sub_100097C8C()
{
  return &protocol witness table for String;
}

uint64_t type metadata accessor for DewTypeInt64()
{
  return self;
}

uint64_t type metadata accessor for DewTypeTimeInterval()
{
  return self;
}

uint64_t type metadata accessor for DewTypeString()
{
  return self;
}

uint64_t type metadata accessor for DewTypeBool()
{
  return self;
}

uint64_t type metadata accessor for DewTypeStrings()
{
  return self;
}

uint64_t type metadata accessor for DewConfigurationTimeInterval()
{
  return self;
}

uint64_t type metadata accessor for DewConfigurationInt()
{
  return self;
}

uint64_t type metadata accessor for DewConfigurationString()
{
  return self;
}

uint64_t type metadata accessor for DewConfigurationBool()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for DewName(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for DewName()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DewName(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DewName(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for DewName(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DewName(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DewName(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DewName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DewName()
{
  return &type metadata for DewName;
}

uint64_t type metadata accessor for DewGlobalState()
{
  return self;
}

uint64_t sub_100098094()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for DewConfigurationObject()
{
  return sub_1000984B4();
}

uint64_t sub_100098178()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for DewMatchObject()
{
  return sub_1000984B4();
}

uint64_t sub_100098200()
{
  return type metadata accessor for DewConfiguration();
}

uint64_t sub_100098208()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000982B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DewValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100098314(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10009837C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000983DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100098428(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100098440(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100080E08(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000984A4(uint64_t a1, uint64_t a2)
{
  return assignWithTake for DewName(a2, a1);
}

uint64_t sub_1000984B4()
{
  return swift_getGenericMetadata();
}

uint64_t sub_100098514()
{
  uint64_t v1 = *(void *)v0;
  sub_10008FC6C(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_100098548()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10008FC6C(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t sub_10009857C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CloudDeviceData(0) + 24);

  return sub_1000985E0(v3, a1);
}

uint64_t type metadata accessor for CloudDeviceData(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_100329F90);
}

uint64_t sub_1000985E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100098648()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CloudDeviceData(0) + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100098688()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CloudDeviceData(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000986C8()
{
  type metadata accessor for CloudDeviceData(0);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000986FC()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for CloudDeviceData(0) + 40));
}

uint64_t sub_100098720(char a1)
{
  return *(void *)&aPushtokedata[8 * a1];
}

BOOL sub_100098740(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100098754()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10009879C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000987C8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10009880C()
{
  return sub_100098720(*v0);
}

uint64_t sub_100098814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000A35DC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10009883C(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_100098848(uint64_t a1)
{
  unint64_t v2 = sub_100098BD4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100098884(uint64_t a1)
{
  unint64_t v2 = sub_100098BD4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000988C0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100080E08(&qword_100320648);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100097048(a1, a1[3]);
  sub_100098BD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v13 = *v3;
  char v12 = 0;
  sub_100098C28();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    long long v13 = v3[1];
    char v12 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v9 = type metadata accessor for CloudDeviceData(0);
    LOBYTE(v13) = 2;
    type metadata accessor for Date();
    sub_100099260(&qword_100320CF0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v13) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v13 = *(void *)((char *)v3 + *(int *)(v9 + 36));
    char v12 = 5;
    sub_100080E08((uint64_t *)&unk_100320660);
    sub_100099310((unint64_t *)&unk_100321960);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100098BD4()
{
  unint64_t result = qword_100329E80[0];
  if (!qword_100329E80[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100329E80);
  }
  return result;
}

unint64_t sub_100098C28()
{
  unint64_t result = qword_100320650;
  if (!qword_100320650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100320650);
  }
  return result;
}

uint64_t sub_100098C7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v4 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100080E08(&qword_100320670);
  __chkstk_darwin(v27);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for CloudDeviceData(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v28 = a1;
  sub_100097048(a1, v12);
  sub_100098BD4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10008FBC4((uint64_t)v28);
  }
  uint64_t v24 = v6;
  uint64_t v25 = v11;
  char v30 = 0;
  sub_10009920C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v13 = (uint64_t)v25;
  *uint64_t v25 = v29;
  char v30 = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(_OWORD *)(v13 + 16) = v29;
  type metadata accessor for Date();
  LOBYTE(v29) = 2;
  sub_100099260((unint64_t *)&unk_100320680, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v14 = (uint64_t)v24;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1000992A8(v14, v13 + v9[6]);
  LOBYTE(v29) = 3;
  uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  long long v16 = (uint64_t *)(v13 + v9[7]);
  uint64_t *v16 = v15;
  v16[1] = v17;
  LOBYTE(v29) = 4;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v19 = (uint64_t *)(v13 + v9[8]);
  uint64_t *v19 = v18;
  v19[1] = v20;
  sub_100080E08((uint64_t *)&unk_100320660);
  char v30 = 5;
  sub_100099310((unint64_t *)&unk_100321B90);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  *(void *)(v13 + v9[9]) = v29;
  LOBYTE(v29) = 6;
  char v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  MEMORY[8](v8, v27);
  *(unsigned char *)(v13 + v9[10]) = v21;
  sub_100099374(v13, v26);
  sub_10008FBC4((uint64_t)v28);
  return sub_1000993D8(v13);
}

unint64_t sub_10009920C()
{
  unint64_t result = qword_100320678;
  if (!qword_100320678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100320678);
  }
  return result;
}

uint64_t sub_100099260(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000992A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100099310(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000829FC((uint64_t *)&unk_100320660);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100099374(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudDeviceData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000993D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudDeviceData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100099434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, char a12)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  uint64_t v17 = (int *)type metadata accessor for CloudDeviceData(0);
  uint64_t result = sub_1000992A8(a5, (uint64_t)a9 + v17[6]);
  uint64_t v19 = (void *)((char *)a9 + v17[7]);
  void *v19 = a6;
  v19[1] = a7;
  uint64_t v20 = (void *)((char *)a9 + v17[8]);
  void *v20 = a8;
  v20[1] = a10;
  *(void *)((char *)a9 + v17[9]) = a11;
  *((unsigned char *)a9 + v17[10]) = a12;
  return result;
}

uint64_t sub_1000994D8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100098C7C(a1, a2);
}

uint64_t sub_1000994F0(void *a1)
{
  return sub_1000988C0(a1);
}

uint64_t sub_100099508()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100087A78(v0, qword_100329E68);
  sub_100080F90(v0, (uint64_t)qword_100329E68);
  return Logger.init(transparencyCategory:)();
}

uint64_t sub_100099570()
{
  return 0x76654464756F6C43;
}

id sub_100099590()
{
  swift_beginAccess();
  Swift::UInt v1 = *(void **)(v0 + 32);

  return v1;
}

void sub_1000995D4(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = a1;
}

id sub_10009961C()
{
  return *(id *)(v0 + 40);
}

uint64_t sub_100099624()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10009962C()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100099670()
{
  return swift_unknownObjectRelease();
}

void (*sub_1000996C4(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  void v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_100099740;
}

void sub_100099740(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

void *sub_1000997C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  _DWORD v6[2] = 0x76654464756F6C43;
  v6[3] = 0xEB00000000656369;
  swift_unknownObjectWeakInit();
  v6[8] = 0x404B800000000000;
  void v6[4] = a1;
  v6[5] = a2;
  v6[6] = a3;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v6;
}

void *sub_100099884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = 0x76654464756F6C43;
  v3[3] = 0xEB00000000656369;
  swift_unknownObjectWeakInit();
  v3[8] = 0x404B800000000000;
  void v3[4] = a1;
  v3[5] = a2;
  void v3[6] = a3;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v3;
}

double sub_100099934()
{
  return 55.0;
}

double sub_100099944()
{
  swift_beginAccess();
  return *(double *)(v0 + 64);
}

uint64_t sub_100099978(double a1)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v1 + 64) = a1;
  return result;
}

uint64_t (*sub_1000999B8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_100099A0C()
{
  (*(void (**)(void))(*(void *)v0 + 208))();
  return Date.addingTimeInterval(_:)();
}

uint64_t sub_100099A80(uint64_t a1)
{
  uint64_t v3 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v17 - v11;
  sub_1000985E0(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_100087A1C((uint64_t)v5, (uint64_t *)&unk_10031F9A0);
    char v13 = 1;
  }
  else
  {
    uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
    (*(void (**)(uint64_t))(*(void *)v1 + 208))(v14);
    Date.addingTimeInterval(_:)();
    char v13 = static Date.< infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
    v15(v10, v6);
    v15(v12, v6);
  }
  return v13 & 1;
}

uint64_t sub_100099CA4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v5 + 304))();
  if (result)
  {
    uint64_t v12 = (void *)result;
    if (qword_100329E60 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100080F90(v13, (uint64_t)qword_100329E68);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    id v15 = v12;
    long long v16 = Logger.logObject.getter();
    uint64_t v34 = a1;
    if (os_log_type_enabled(v16, v14))
    {
      unint64_t v31 = a2;
      id v32 = (id)a3;
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315138;
      id v18 = [v15 recordName];
      uint64_t v19 = v15;
      uint64_t v20 = a5;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;

      a2 = v31;
      uint64_t v24 = v21;
      a5 = v20;
      id v15 = v19;
      sub_10008D114(v24, v23, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a1 = v34;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v14, "updating record %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = (uint64_t)v32;
      swift_slowDealloc();
    }
    else
    {
    }
    id v33 = (id)(*(uint64_t (**)(void))(*(void *)v6 + 152))();
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = v15;
    v25[3] = v6;
    v25[4] = a1;
    v25[5] = a2;
    v25[6] = a3;
    v25[7] = a4;
    v25[8] = a5;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = sub_10009AC58;
    *(void *)(v26 + 24) = v25;
    aBlock[4] = (uint64_t)sub_100091FB0;
    aBlock[5] = v26;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100091FD8;
    aBlock[3] = (uint64_t)&unk_1002BE288;
    uint64_t v27 = _Block_copy(aBlock);
    uint64_t v28 = v15;
    long long v29 = v27;
    id v30 = v28;
    swift_retain();
    sub_100080C58(v34, a2);
    sub_100080C58(a3, a4);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    [v33 performBlockAndWait:v29];

    _Block_release(v29);
    LOBYTE(v29) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v29) {
      __break(1u);
    }
  }
  return result;
}

void sub_10009A084(void *a1, void *a2, uint64_t a3, uint8_t *a4, uint8_t *a5, void *a6, void *a7)
{
  unsigned int v91 = a7;
  id v88 = a5;
  long long v89 = a6;
  uint64_t v86 = a3;
  long long v87 = a4;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  long long v94 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v95 = (char *)&v83 - v13;
  uint64_t v14 = type metadata accessor for String.Encoding();
  uint64_t v92 = *(void *)(v14 - 8);
  uint64_t v93 = v14;
  __chkstk_darwin(v14);
  long long v90 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1002856F0;
  id v18 = [a1 recordName];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v21 = v20;

  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000A56A8();
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  unint64_t v22 = NSPredicate.init(format:_:)();
  [v16 setPredicate:v22];

  id v98 = 0;
  id v23 = [v16 execute:&v98];
  id v24 = v98;
  uint64_t v96 = v10;
  if (v23)
  {
    uint64_t v25 = v23;
    sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
    unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v27 = v24;

    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v45)
      {
LABEL_4:
        if ((v26 & 0xC000000000000001) != 0)
        {
          id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_37:
            swift_once();
LABEL_8:
            uint64_t v29 = type metadata accessor for Logger();
            sub_100080F90(v29, (uint64_t)qword_100329E68);
            id v30 = a1;
            unint64_t v31 = Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v31, v32))
            {
              unsigned __int8 v85 = a2;
              id v33 = (uint8_t *)swift_slowAlloc();
              long long v89 = (void *)swift_slowAlloc();
              id v98 = v89;
              id v88 = v33;
              *(_DWORD *)id v33 = 136315138;
              long long v87 = v33 + 4;
              id v34 = v16;
              id v35 = [v30 recordName];
              uint64_t v36 = v9;
              uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v39 = v38;

              id v16 = v34;
              uint64_t v40 = v37;
              uint64_t v9 = v36;
              uint64_t v97 = sub_10008D114(v40, v39, (uint64_t *)&v98);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              a2 = v85;
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v31, v32, "self: updating existing record %s", v88, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              NSString v41 = (NSString)a2[6];
              if (!v41) {
                goto LABEL_13;
              }
            }
            else
            {

              NSString v41 = (NSString)a2[6];
              if (!v41)
              {
LABEL_13:
                id v43 = v21;
                NSString v44 = 0;
                goto LABEL_26;
              }
            }
LABEL_25:
            id v65 = v21;
            id v66 = [v41 osVersion];
            static String._unconditionallyBridgeFromObjectiveC(_:)();

            NSString v44 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
LABEL_26:
            [v21 setOsVersion:v44];

            if (v41)
            {
              NSString v41 = [v41 serialNumber];
              if (v41)
              {
                static String._unconditionallyBridgeFromObjectiveC(_:)();

                NSString v41 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease();
              }
            }
            [v21 setSerialNumber:v41];

            sub_10008E0A0(0, &qword_100320AD8);
            Class isa = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
            [v21 setInjected:isa];

            Class v68 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
            [v21 setLocal:v68];

            id v98 = v91;
            sub_100080E08((uint64_t *)&unk_100320660);
            sub_1000A2508();
            BidirectionalCollection<>.joined(separator:)();
            long long v69 = v90;
            static String.Encoding.utf8.getter();
            uint64_t v70 = String.data(using:allowLossyConversion:)();
            unint64_t v72 = v71;
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v92 + 8))(v69, v93);
            Class v73 = 0;
            if (v72 >> 60 != 15)
            {
              Class v73 = Data._bridgeToObjectiveC()().super.isa;
              sub_10008FCD4(v70, v72);
            }
            [v21 setApplications:v73];

            NSString v74 = String._bridgeToObjectiveC()();
            [v21 setCkstate:v74];

            long long v75 = v94;
            Date.init()();
            long long v76 = v95;
            (*(void (**)(char *))(*a2 + 232))(v75);
            long long v77 = *(void (**)(char *, uint64_t))(v96 + 8);
            v77(v75, v9);
            Class v78 = Date._bridgeToObjectiveC()().super.isa;
            v77(v76, v9);
            [v21 setTimeToLive:v78];

            long long v79 = (void *)(*(uint64_t (**)(void))(*a2 + 152))();
            id v98 = 0;
            unsigned int v80 = [v79 save:&v98];

            if (v80)
            {
              id v81 = v98;
            }
            else
            {
              id v82 = v98;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();
              id v16 = v21;
            }
            goto LABEL_34;
          }
          id v28 = *(id *)(v26 + 32);
        }
        id v21 = v28;
        swift_bridgeObjectRelease();
        if (qword_100329E60 == -1) {
          goto LABEL_8;
        }
        goto LABEL_37;
      }
    }
    else if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_4;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v42 = v98;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  if (qword_100329E60 != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  sub_100080F90(v46, (uint64_t)qword_100329E68);
  os_log_type_t v47 = static os_log_type_t.error.getter();
  id v48 = a1;
  uint64_t v49 = Logger.logObject.getter();
  if (os_log_type_enabled(v49, v47))
  {
    id v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v84 = (void *)swift_slowAlloc();
    id v98 = v84;
    *(_DWORD *)id v50 = 136315138;
    unsigned __int8 v85 = a2;
    id v51 = v16;
    id v52 = [v48 recordName:v50 + 4, v84];
    uint64_t v53 = v9;
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v56 = v55;

    id v16 = v51;
    uint64_t v57 = v54;
    uint64_t v9 = v53;
    uint64_t v97 = sub_10008D114(v57, v56, (uint64_t *)&v98);
    a2 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v47, "creating new record %s", v50, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  objc_super v58 = (void *)(*(uint64_t (**)(void))(*a2 + 152))();
  id v59 = [objc_allocWithZone((Class)CloudDevice) initWithContext:v58];

  if (v59)
  {
    id v60 = v59;
    NSString v61 = [v48 recordName];
    if (!v61)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v61 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v60 setRecordID:v61];

    id v62 = v60;
    Class v63 = Data._bridgeToObjectiveC()().super.isa;
    [v62 setPushToken:v63];

    id v21 = v62;
    Class v64 = Data._bridgeToObjectiveC()().super.isa;
    [v21 setRegistrationData:v64];

    NSString v41 = (NSString)a2[6];
    if (!v41) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_34:
}

uint64_t sub_10009AC00()
{
  swift_release();
  sub_100080CB0(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_100080CB0(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_10009AC58()
{
  sub_10009A084(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(uint8_t **)(v0 + 40), *(uint8_t **)(v0 + 48), *(void **)(v0 + 56), *(void **)(v0 + 64));
}

uint64_t sub_10009AC6C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009AC7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10009AC8C()
{
  return swift_release();
}

uint64_t sub_10009AC94(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v6 + 304))();
  if (!v13) {
    return 0;
  }
  uint64_t v14 = (void *)v13;
  unsigned __int8 v31 = 0;
  id v29 = (id)(*(uint64_t (**)(void))(*(void *)v6 + 152))();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v14;
  v15[3] = &v31;
  void v15[4] = a3;
  v15[5] = a4;
  v15[6] = a1;
  v15[7] = a2;
  v15[8] = v6;
  v15[9] = a5;
  v15[10] = a6;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1000A0848;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = (uint64_t)sub_1000984E8;
  aBlock[5] = v16;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100091FD8;
  aBlock[3] = (uint64_t)&unk_1002BE300;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = v14;
  sub_100080C58(a3, a4);
  sub_100080C58(a1, a2);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v29 performBlockAndWait:v17];

  _Block_release(v17);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (qword_100329E60 != -1) {
LABEL_11:
  }
    swift_once();
  uint64_t v20 = type metadata accessor for Logger();
  sub_100080F90(v20, (uint64_t)qword_100329E68);
  os_log_type_t v21 = static os_log_type_t.info.getter();
  sub_100080C58(a1, a2);
  sub_100080C58(a1, a2);
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = v21;
  if (os_log_type_enabled(v22, v21))
  {
    uint64_t v24 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 67109378;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 8) = 2080;
    uint64_t v25 = sub_1000CEB28(a1, a2);
    sub_10008D114(v25, v26, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100080CB0(a1, a2);
    sub_100080CB0(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "should update record %{BOOL}d %s", (uint8_t *)v24, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_100080CB0(a1, a2);
    sub_100080CB0(a1, a2);
  }

  swift_beginAccess();
  uint64_t v27 = v31;
  swift_release();
  return v27;
}

uint64_t sub_10009B0B4(void *a1, unsigned char *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v112 = a7;
  unint64_t v116 = a6;
  uint64_t v119 = a5;
  unint64_t v120 = a4;
  uint64_t v124 = a3;
  v121 = a2;
  uint64_t v111 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  v110 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1002856F0;
  id v18 = [a1 recordName];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000A56A8();
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  unint64_t v22 = NSPredicate.init(format:_:)();
  [v16 setPredicate:v22];

  __s1[0] = 0;
  id v23 = [v16 execute:__s1];
  id v24 = __s1[0];
  if (v23)
  {
    uint64_t v25 = v23;
    sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
    unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v27 = v24;

    uint64_t v101 = a8;
    id v109 = v16;
    v108 = v15;
    if (v26 >> 62) {
      goto LABEL_107;
    }
    uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
LABEL_4:
    id v29 = v121;
    unint64_t v30 = v26;
    if (v28)
    {
      if (v28 < 1)
      {
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
      }
      uint64_t v31 = 0;
      uint64_t v123 = 0;
      unint64_t v32 = v26 & 0xC000000000000001;
      BOOL v33 = __OFSUB__(HIDWORD(v124), v124);
      BOOL v114 = v33;
      uint64_t v113 = HIDWORD(v124) - (int)v124;
      uint64_t v126 = BYTE6(v120);
      BOOL v34 = __OFSUB__(HIDWORD(v119), v119);
      BOOL v103 = v34;
      uint64_t v102 = HIDWORD(v119) - (int)v119;
      uint64_t v118 = BYTE6(v116);
      uint64_t v104 = a9;
      v106 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v105 = (void (**)(char *, uint64_t))(v11 + 8);
      id v35 = &selRef_processSTHsFromGossipPeers_verifier_error_;
      unint64_t v125 = v120 >> 62;
      unint64_t v117 = v116 >> 62;
      uint64_t v115 = v28;
      unint64_t v122 = v26 & 0xC000000000000001;
      unint64_t v107 = v26;
      while (1)
      {
        if (v32) {
          id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v36 = *(id *)(v30 + 8 * v31 + 32);
        }
        uint64_t v37 = v36;
        id v38 = [v36 v35[84]];
        if (!v38) {
          goto LABEL_14;
        }
        unint64_t v39 = v38;
        uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v26 = v40;

        id v41 = [v37 pushToken];
        if (!v41) {
          break;
        }
        id v42 = v41;
        uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v127 = v44;

        uint64_t v45 = 0;
        switch(v26 >> 62)
        {
          case 1uLL:
            LODWORD(v45) = HIDWORD(v11) - v11;
            if (__OFSUB__(HIDWORD(v11), v11))
            {
              __break(1u);
LABEL_104:
              __break(1u);
LABEL_105:
              __break(1u);
LABEL_106:
              __break(1u);
LABEL_107:
              swift_bridgeObjectRetain();
              uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
              goto LABEL_4;
            }
            uint64_t v45 = (int)v45;
LABEL_26:
            uint64_t v49 = v126;
            switch(v125)
            {
              case 1uLL:
                uint64_t v49 = v113;
                if (v114) {
                  goto LABEL_105;
                }
                goto LABEL_30;
              case 2uLL:
                uint64_t v51 = *(void *)(v124 + 16);
                uint64_t v50 = *(void *)(v124 + 24);
                BOOL v48 = __OFSUB__(v50, v51);
                uint64_t v49 = v50 - v51;
                if (!v48) {
                  goto LABEL_30;
                }
                goto LABEL_106;
              case 3uLL:
                if (!v45) {
                  goto LABEL_52;
                }
                goto LABEL_66;
              default:
LABEL_30:
                if (v45 != v49) {
                  goto LABEL_66;
                }
                if (v45 < 1) {
                  goto LABEL_52;
                }
                break;
            }
            switch(v26 >> 62)
            {
              case 1uLL:
                if (v11 >> 32 < (int)v11) {
                  goto LABEL_113;
                }
                sub_100080C58(v11, v26);
                uint64_t v52 = __DataStorage._bytes.getter();
                if (v52)
                {
                  uint64_t v53 = v52;
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v11, v54)) {
                    goto LABEL_115;
                  }
                  uint64_t v55 = v53 + (int)v11 - v54;
                }
                else
                {
                  uint64_t v55 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v63 = v123;
                sub_10007FE18(v55, v124, v120, (char *)__s1);
                uint64_t v123 = v63;
                sub_100080CB0(v11, v26);
                goto LABEL_51;
              case 2uLL:
                uint64_t v56 = *(void *)(v11 + 16);
                uint64_t v100 = *(void *)(v11 + 24);
                swift_retain();
                swift_retain();
                uint64_t v57 = __DataStorage._bytes.getter();
                if (v57)
                {
                  uint64_t v58 = v57;
                  uint64_t v59 = __DataStorage._offset.getter();
                  if (__OFSUB__(v56, v59)) {
                    goto LABEL_116;
                  }
                  uint64_t v60 = v58 + v56 - v59;
                }
                else
                {
                  uint64_t v60 = 0;
                }
                if (__OFSUB__(v100, v56)) {
                  goto LABEL_114;
                }
                __DataStorage._length.getter();
                uint64_t v62 = v123;
                sub_10007FE18(v60, v124, v120, (char *)__s1);
                uint64_t v123 = v62;
                swift_release();
                swift_release();
LABEL_51:
                id v29 = v121;
                unint64_t v32 = v122;
                uint64_t v28 = v115;
                if (((uint64_t)__s1[0] & 1) == 0) {
                  goto LABEL_66;
                }
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                goto LABEL_44;
              default:
                __s1[0] = (id)v11;
                LOWORD(__s1[1]) = v26;
                BYTE2(__s1[1]) = BYTE2(v26);
                BYTE3(__s1[1]) = BYTE3(v26);
                BYTE4(__s1[1]) = BYTE4(v26);
                BYTE5(__s1[1]) = BYTE5(v26);
LABEL_44:
                uint64_t v61 = v123;
                sub_10007FE18((uint64_t)__s1, v124, v120, &v128);
                uint64_t v123 = v61;
                unint64_t v32 = v122;
                if ((v128 & 1) == 0) {
                  goto LABEL_66;
                }
                break;
            }
LABEL_52:
            uint64_t v64 = 0;
            switch(v127 >> 62)
            {
              case 1uLL:
                LODWORD(v64) = HIDWORD(v43) - v43;
                if (__OFSUB__(HIDWORD(v43), v43))
                {
                  __break(1u);
LABEL_109:
                  __break(1u);
LABEL_110:
                  __break(1u);
LABEL_111:
                  __break(1u);
                  goto LABEL_112;
                }
                uint64_t v64 = (int)v64;
LABEL_57:
                uint64_t v67 = v118;
                switch(v117)
                {
                  case 1uLL:
                    uint64_t v67 = v102;
                    if (v103) {
                      goto LABEL_110;
                    }
                    goto LABEL_61;
                  case 2uLL:
                    uint64_t v69 = *(void *)(v119 + 16);
                    uint64_t v68 = *(void *)(v119 + 24);
                    BOOL v48 = __OFSUB__(v68, v69);
                    uint64_t v67 = v68 - v69;
                    if (!v48) {
                      goto LABEL_61;
                    }
                    goto LABEL_111;
                  case 3uLL:
                    if (v64) {
                      goto LABEL_66;
                    }
                    goto LABEL_80;
                  default:
LABEL_61:
                    if (v64 != v67) {
                      goto LABEL_66;
                    }
                    if (v64 < 1) {
                      goto LABEL_80;
                    }
                    break;
                }
                switch(v127 >> 62)
                {
                  case 1uLL:
                    if (v43 >> 32 < (int)v43) {
                      goto LABEL_117;
                    }
                    sub_100080C58(v43, v127);
                    uint64_t v70 = __DataStorage._bytes.getter();
                    if (v70)
                    {
                      uint64_t v71 = v70;
                      uint64_t v72 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v43, v72)) {
                        goto LABEL_119;
                      }
                      uint64_t v73 = v71 + (int)v43 - v72;
                    }
                    else
                    {
                      uint64_t v73 = 0;
                    }
                    __DataStorage._length.getter();
                    uint64_t v97 = v123;
                    sub_10007FE18(v73, v119, v116, (char *)__s1);
                    uint64_t v123 = v97;
                    sub_100080CB0(v43, v127);
                    goto LABEL_99;
                  case 2uLL:
                    uint64_t v74 = *(void *)(v43 + 16);
                    uint64_t v75 = *(void *)(v43 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v76 = __DataStorage._bytes.getter();
                    if (v76)
                    {
                      uint64_t v77 = v76;
                      uint64_t v78 = __DataStorage._offset.getter();
                      if (__OFSUB__(v74, v78)) {
                        goto LABEL_120;
                      }
                      uint64_t v79 = v74;
                      uint64_t v80 = v77 + v74 - v78;
                      if (__OFSUB__(v75, v79)) {
                        goto LABEL_118;
                      }
                    }
                    else
                    {
                      uint64_t v95 = v74;
                      uint64_t v80 = 0;
                      if (__OFSUB__(v75, v95)) {
                        goto LABEL_118;
                      }
                    }
                    __DataStorage._length.getter();
                    uint64_t v96 = v123;
                    sub_10007FE18(v80, v119, v116, (char *)__s1);
                    uint64_t v123 = v96;
                    swift_release();
                    swift_release();
LABEL_99:
                    id v29 = v121;
                    unint64_t v32 = v122;
                    uint64_t v28 = v115;
                    if (((uint64_t)__s1[0] & 1) == 0)
                    {
LABEL_66:
                      sub_100080CB0(v11, v26);
                      sub_100080CB0(v43, v127);
LABEL_67:
                      unsigned char *v29 = 1;
                      goto LABEL_68;
                    }
LABEL_80:
                    id v82 = [v37 timeToLive];
                    if (v82)
                    {
                      uint64_t v83 = v82;
                      uint64_t v84 = (uint64_t)v108;
                      static Date._unconditionallyBridgeFromObjectiveC(_:)();

                      uint64_t v85 = 0;
                    }
                    else
                    {
                      uint64_t v85 = 1;
                      uint64_t v84 = (uint64_t)v108;
                    }
                    uint64_t v86 = v111;
                    (*v106)(v84, v85, 1, v111);
                    long long v87 = v110;
                    Date.init()();
                    char v88 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v112 + 240))(v84, v87);
                    (*v105)(v87, v86);
                    sub_100087A1C(v84, (uint64_t *)&unk_10031F9A0);
                    if (v88)
                    {
                      sub_100080CB0(v11, v26);
                      sub_100080CB0(v43, v127);
                      unsigned char *v29 = 1;
                      unint64_t v30 = v107;
                      uint64_t v28 = v115;
                      unint64_t v32 = v122;
                    }
                    else
                    {
                      unint64_t v30 = v107;
                      uint64_t v28 = v115;
                      unint64_t v32 = v122;
                      if (v104)
                      {
                        id v89 = [v37 osVersion];
                        if (!v89)
                        {
                          sub_100080CB0(v11, v26);
                          sub_100080CB0(v43, v127);
                          id v29 = v121;
                          goto LABEL_67;
                        }
                        long long v90 = v89;
                        uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        uint64_t v93 = v92;

                        if (v91 == v101 && v93 == v104)
                        {
                          swift_bridgeObjectRelease();
                          sub_100080CB0(v11, v26);
                          sub_100080CB0(v43, v127);
                          id v29 = v121;
                          unint64_t v32 = v122;
                        }
                        else
                        {
                          char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          sub_100080CB0(v11, v26);
                          sub_100080CB0(v43, v127);
                          id v29 = v121;
                          if ((v94 & 1) == 0) {
                            unsigned char *v121 = 1;
                          }
                          unint64_t v32 = v122;
                        }
                      }
                      else
                      {
                        sub_100080CB0(v11, v26);
                        sub_100080CB0(v43, v127);
                      }
                    }
LABEL_68:
                    id v35 = &selRef_processSTHsFromGossipPeers_verifier_error_;
                    break;
                  case 3uLL:
                    memset(__s1, 0, 14);
                    goto LABEL_79;
                  default:
                    __s1[0] = (id)v43;
                    LODWORD(__s1[1]) = v127;
                    WORD2(__s1[1]) = WORD2(v127);
LABEL_79:
                    uint64_t v81 = v123;
                    sub_10007FE18((uint64_t)__s1, v119, v116, &v128);
                    uint64_t v123 = v81;
                    unint64_t v32 = v122;
                    if (v128) {
                      goto LABEL_80;
                    }
                    goto LABEL_66;
                }
                break;
              case 2uLL:
                uint64_t v66 = *(void *)(v43 + 16);
                uint64_t v65 = *(void *)(v43 + 24);
                BOOL v48 = __OFSUB__(v65, v66);
                uint64_t v64 = v65 - v66;
                if (!v48) {
                  goto LABEL_57;
                }
                goto LABEL_109;
              case 3uLL:
                goto LABEL_57;
              default:
                uint64_t v64 = BYTE6(v127);
                goto LABEL_57;
            }
            break;
          case 2uLL:
            uint64_t v47 = *(void *)(v11 + 16);
            uint64_t v46 = *(void *)(v11 + 24);
            BOOL v48 = __OFSUB__(v46, v47);
            uint64_t v45 = v46 - v47;
            if (!v48) {
              goto LABEL_26;
            }
            goto LABEL_104;
          case 3uLL:
            goto LABEL_26;
          default:
            uint64_t v45 = BYTE6(v26);
            goto LABEL_26;
        }
LABEL_15:

        if (v28 == ++v31) {
          goto LABEL_101;
        }
      }
      sub_100080CB0(v11, v26);
LABEL_14:
      unsigned char *v29 = 1;
      goto LABEL_15;
    }
LABEL_101:

    return swift_bridgeObjectRelease_n();
  }
  else
  {
    id v99 = __s1[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return swift_errorRelease();
  }
}

uint64_t sub_10009BE00(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  id v21 = 0;
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v4 + 304))();
  if (!v9)
  {
    id v17 = 0;
    uint64_t v19 = 0;
    goto LABEL_5;
  }
  uint64_t v10 = (void *)v9;
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v4 + 152))();
  uint64_t v12 = (void *)swift_allocObject();
  _DWORD v12[2] = v10;
  uint64_t v12[3] = a3;
  v12[4] = a4;
  void v12[5] = a1;
  v12[6] = a2;
  v12[7] = &v21;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_1000A08E8;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = sub_1000984E8;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BE378;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v10;
  sub_100080C58(a3, a4);
  sub_100080C58(a1, a2);
  swift_retain();
  swift_release();
  [(id)v11 performBlockAndWait:v14];

  _Block_release(v14);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v11 & 1) == 0)
  {
    id v17 = v21;
    id v18 = v21;
    uint64_t v19 = sub_1000A08E8;
LABEL_5:

    sub_1000A0890((uint64_t)v19);
    return (uint64_t)v17;
  }
  __break(1u);
  return result;
}

uint64_t sub_10009C038()
{
  uint64_t v8 = &_swiftEmptyArrayStorage;
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 152))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v8;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000A0DF0;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000984E8;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BE3F0;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(id)v1 performBlockAndWait:v4];

  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v8;
    swift_release();
    return (uint64_t)v6;
  }
  return result;
}

uint64_t sub_10009C1C8()
{
  uint64_t v8 = &_swiftEmptyArrayStorage;
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 152))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v8;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000A11BC;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000984E8;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BE468;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [(id)v1 performBlockAndWait:v4];

  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v8;
    swift_release();
    return (uint64_t)v6;
  }
  return result;
}

uint64_t sub_10009C358(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v4 + 304))();
  if (result)
  {
    uint64_t v10 = (void *)result;
    uint64_t v31 = a1;
    if (qword_100329E60 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100080F90(v11, (uint64_t)qword_100329E68);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    id v13 = v10;
    uint64_t v14 = Logger.logObject.getter();
    if (os_log_type_enabled(v14, v12))
    {
      os_log_type_t type = v12;
      id v15 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)id v15 = 136315138;
      buf = v15;
      id v16 = [v13 recordName];
      os_log_t log = v14;
      unint64_t v17 = a2;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      uint64_t v21 = v18;
      a2 = v17;
      aBlock[7] = sub_10008D114(v21, v20, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, log, type, "adding device record %s", buf, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    typea = (void *)(*(uint64_t (**)(void))(*(void *)v5 + 152))();
    unint64_t v22 = (void *)swift_allocObject();
    v22[2] = v13;
    v22[3] = v5;
    v22[4] = v31;
    void v22[5] = a2;
    v22[6] = a3;
    v22[7] = a4;
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = sub_1000A1660;
    *(void *)(v23 + 24) = v22;
    aBlock[4] = (uint64_t)sub_1000984E8;
    aBlock[5] = v23;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100091FD8;
    aBlock[3] = (uint64_t)&unk_1002BE4E0;
    id v24 = _Block_copy(aBlock);
    id v28 = v13;
    swift_retain();
    sub_100080C58(v31, a2);
    sub_100080C58(a3, a4);
    swift_retain();
    swift_release();
    [typea performBlockAndWait:v24];

    _Block_release(v24);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
  return result;
}

void sub_10009C724(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)v4 + 304))();
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    if (qword_100329E60 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100080F90(v12, (uint64_t)qword_100329E68);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    sub_100080C58(a1, a2);
    sub_100080C58(a3, a4);
    sub_100080C58(a1, a2);
    sub_100080C58(a3, a4);
    uint64_t v14 = Logger.logObject.getter();
    if (os_log_type_enabled(v14, v13))
    {
      id v24 = v11;
      uint64_t v15 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      sub_100080C58(a1, a2);
      uint64_t v16 = Data.description.getter();
      uint64_t v23 = v14;
      unint64_t v18 = v17;
      sub_100080CB0(a1, a2);
      sub_10008D114(v16, v18, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080CB0(a1, a2);
      sub_100080CB0(a1, a2);
      *(_WORD *)(v15 + 12) = 2080;
      sub_100080C58(a3, a4);
      uint64_t v19 = Data.description.getter();
      unint64_t v21 = v20;
      sub_100080CB0(a3, a4);
      sub_10008D114(v19, v21, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100080CB0(a3, a4);
      sub_100080CB0(a3, a4);
      uint64_t v14 = v23;
      _os_log_impl((void *)&_mh_execute_header, v23, v13, "deleting record %s %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v11 = v24;
      swift_slowDealloc();
    }
    else
    {
      sub_100080CB0(a1, a2);
      sub_100080CB0(a1, a2);
      sub_100080CB0(a3, a4);
      sub_100080CB0(a3, a4);
    }

    unint64_t v22 = (void *)(*(uint64_t (**)(void))(*(void *)v5 + 152))();
    __chkstk_darwin(v22);
    NSManagedObjectContext.performAndWait<A>(_:)();
  }
}

Class sub_10009CAC0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for SHA256();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SHA256Digest();
  uint64_t v45 = *(void *)(v14 - 8);
  uint64_t v46 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v44 = (char *)&v43 - v18;
  uint64_t v49 = a1;
  int64_t v50 = a2;
  sub_100080C58(a1, a2);
  sub_100080C58(a3, a4);
  sub_1000A22E4(a3, a4);
  sub_100080CB0(a3, a4);
  uint64_t v19 = v49;
  unint64_t v20 = v50;
  sub_100099260((unint64_t *)&unk_100320690, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  uint64_t v43 = v5;
  switch(v20 >> 62)
  {
    case 1uLL:
      if (v19 >> 32 < (int)v19) {
        goto LABEL_24;
      }
      sub_100080C58(v19, v20);
      sub_1000A2204((int)v19, v19 >> 32);
      break;
    case 2uLL:
      uint64_t v21 = *(void *)(v19 + 16);
      uint64_t v22 = *(void *)(v19 + 24);
      sub_100080C58(v19, v20);
      swift_retain();
      swift_retain();
      sub_1000A2204(v21, v22);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v48, 0, 14);
      goto LABEL_7;
    default:
      v48[0] = v19;
      LOWORD(v48[1]) = v20;
      BYTE2(v48[1]) = BYTE2(v20);
      BYTE3(v48[1]) = BYTE3(v20);
      BYTE4(v48[1]) = BYTE4(v20);
      BYTE5(v48[1]) = BYTE5(v20);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  sub_100080CB0(v19, v20);
  uint64_t v23 = v44;
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_100080CB0(v19, v20);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v17, v23, v46);
  sub_100099260(&qword_100320D00, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v24 = v49;
  unint64_t v25 = v50;
  int64_t v26 = *(void *)(v49 + 16);
  if (v50 != v26)
  {
    if (v50 < v26)
    {
      id v27 = (char *)&_swiftEmptyArrayStorage;
      long long v47 = xmmword_1002856F0;
      while ((v25 & 0x8000000000000000) == 0)
      {
        if (v25 >= *(void *)(v24 + 16)) {
          goto LABEL_22;
        }
        char v35 = *(unsigned char *)(v24 + 32 + v25);
        sub_100080E08((uint64_t *)&unk_1003206A0);
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = v47;
        *(void *)(v36 + 56) = &type metadata for UInt8;
        *(void *)(v36 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v36 + 32) = v35;
        uint64_t v37 = String.init(format:_:)();
        uint64_t v39 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v27 = sub_1000A0478(0, *((void *)v27 + 2) + 1, 1, v27);
        }
        unint64_t v41 = *((void *)v27 + 2);
        unint64_t v40 = *((void *)v27 + 3);
        if (v41 >= v40 >> 1) {
          id v27 = sub_1000A0478((char *)(v40 > 1), v41 + 1, 1, v27);
        }
        ++v25;
        *((void *)v27 + 2) = v41 + 1;
        id v42 = &v27[16 * v41];
        *((void *)v42 + 4) = v37;
        *((void *)v42 + 5) = v39;
        if (v26 == v25) {
          goto LABEL_10;
        }
      }
      __break(1u);
LABEL_22:
      __break(1u);
    }
    __break(1u);
LABEL_24:
    __break(1u);
  }
  id v27 = (char *)&_swiftEmptyArrayStorage;
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v49 = (uint64_t)v27;
  sub_100080E08((uint64_t *)&unk_100320660);
  sub_1000A2508();
  uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v30 = v29;
  swift_bridgeObjectRelease();
  sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
  id v31 = *(id *)(v43 + 40);
  v32._countAndFlagsBits = v28;
  v32._object = v30;
  Class isa = CKRecordID.init(recordName:zoneID:)(v32, (CKRecordZoneID)v31).super.isa;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v46);
  return isa;
}

CKRecordID sub_10009D0B4(void *a1)
{
  id v3 = [a1 recordID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
    id v8 = v1[5];
    v9._countAndFlagsBits = v5;
    v9._object = v7;
    return CKRecordID.init(recordName:zoneID:)(v9, (CKRecordZoneID)v8);
  }
  else
  {
    result.super.Class isa = (Class)[a1 registrationData];
    if (result.super.isa)
    {
      Class isa = result.super.isa;
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      id v15 = [a1 pushToken];
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v19 = v18;

        uint64_t v20 = (*((uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t))*v1 + 38))(v17, v19, v12, v14);
        sub_100080CB0(v17, v19);
        sub_100080CB0(v12, v14);
        return (CKRecordID)v20;
      }
      else
      {
        sub_100080CB0(v12, v14);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10009D228(void *a1)
{
  uint64_t v2 = v1;
  if (qword_100329E60 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100080F90(v4, (uint64_t)qword_100329E68);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)id v8 = 136315138;
    id v9 = [v5 recordID:v8 + 4];
    id v10 = [v9 recordName];

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    sub_10008D114(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "merging cloud device: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  unint64_t v14 = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 152))();
  __chkstk_darwin(v14);
  NSManagedObjectContext.performAndWait<A>(_:)();

  return v16;
}

void sub_10009D4AC(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v114 = a2;
  v110 = a3;
  uint64_t v115 = type metadata accessor for Logger();
  uint64_t v112 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v111 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for String.Encoding();
  uint64_t v101 = *(void *)(v6 - 8);
  uint64_t v102 = v6;
  __chkstk_darwin(v6);
  uint64_t v100 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v8 - 8);
  uint64_t v103 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100080E08(&qword_100320A58);
  __chkstk_darwin(v10 - 8);
  v105 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for CloudDeviceData(0);
  uint64_t v104 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  unint64_t v107 = (uint64_t *)((char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v13 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1002856F0;
  id v113 = a1;
  id v15 = [a1 recordID];
  id v16 = [v15 recordName];

  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_1000A56A8();
  *(void *)(v14 + 32) = v17;
  *(void *)(v14 + 40) = v19;
  uint64_t v20 = NSPredicate.init(format:_:)();
  [v13 setPredicate:v20];

  v117[0] = 0;
  id v109 = v13;
  id v21 = [v13 execute:v117];
  id v22 = v117[0];
  if (!v21)
  {
    id v31 = v117[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v32 = swift_errorRelease();
    uint64_t v26 = 0;
LABEL_10:
    BOOL v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v114 + 152))(v32);
    id v35 = [objc_allocWithZone((Class)CloudDevice) initWithContext:v34];

    if (!v35) {
      goto LABEL_31;
    }
    id v30 = v35;
    id v27 = v113;
    id v36 = [v113 recordID];
    NSString v37 = [v36 recordName];

    if (!v37)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v30 setRecordID:v37];

    goto LABEL_14;
  }
  uint64_t v23 = v21;
  sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
  unint64_t v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v25 = v22;

  if (!(v24 >> 62))
  {
    uint64_t v26 = v3;
    if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v26 = v3;
  if (!v33)
  {
LABEL_9:
    uint64_t v32 = swift_bridgeObjectRelease();
    goto LABEL_10;
  }
LABEL_4:
  if ((v24 & 0xC000000000000001) != 0)
  {
    id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
    id v27 = v113;
LABEL_14:
    uint64_t v28 = v115;
    uint64_t v29 = v108;
    goto LABEL_15;
  }
  id v27 = v113;
  uint64_t v28 = v115;
  uint64_t v29 = v108;
  if (!*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    __break(1u);
  }
  id v30 = *(id *)(v24 + 32);
  swift_bridgeObjectRelease();
LABEL_15:
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  id v38 = v30;
  uint64_t v39 = JSONDecoder.init()();
  id v40 = [v27 encryptedValues];
  NSString v41 = String._bridgeToObjectiveC()();
  id v42 = [v40 objectForKeyedSubscript:v41];
  swift_unknownObjectRelease();

  if (v42)
  {
    uint64_t v116 = (uint64_t)v42;
    sub_100080E08(&qword_100320AC0);
    char v43 = swift_dynamicCast();
    uint64_t v45 = v111;
    uint64_t v44 = v112;
    if (v43)
    {
      id v46 = v117[0];
      id v47 = v117[1];
      sub_100099260(&qword_100320AC8, (void (*)(uint64_t))type metadata accessor for CloudDeviceData);
      uint64_t v48 = v39;
      uint64_t v49 = (uint64_t)v105;
      uint64_t v106 = v48;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      if (!v26)
      {
        uint64_t v26 = 0;
        uint64_t v98 = (uint64_t)v46;
        unint64_t v99 = (unint64_t)v47;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v49, 0, 1, v29);
        uint64_t v73 = v107;
        sub_1000A5A28(v49, (uint64_t)v107, type metadata accessor for CloudDeviceData);
        unint64_t v74 = v73[1];
        if (v74 >> 60 == 15)
        {
          Class isa = 0;
        }
        else
        {
          uint64_t v76 = *v107;
          sub_100080C58(*v107, v74);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v77 = v76;
          uint64_t v73 = v107;
          sub_10008FCD4(v77, v74);
        }
        uint64_t v39 = v106;
        [v38 setPushToken:isa];

        unint64_t v78 = v73[3];
        uint64_t v28 = v115;
        if (v78 >> 60 == 15)
        {
          Class v79 = 0;
        }
        else
        {
          uint64_t v80 = v107[2];
          sub_100080C58(v80, v78);
          Class v79 = Data._bridgeToObjectiveC()().super.isa;
          uint64_t v81 = v80;
          uint64_t v73 = v107;
          sub_10008FCD4(v81, v78);
        }
        [v38 setRegistrationData:v79];

        uint64_t v82 = v103;
        sub_1000985E0((uint64_t)v73 + *(int *)(v29 + 24), v103);
        uint64_t v83 = type metadata accessor for Date();
        uint64_t v84 = *(void *)(v83 - 8);
        Class v85 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83) != 1)
        {
          Class v85 = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v82, v83);
        }
        [v38 setTimeToLive:v85];

        uint64_t v86 = (int *)v108;
        long long v87 = *(void **)((char *)v73 + *(int *)(v108 + 36));
        if (v87)
        {
          v117[0] = v87;
          swift_bridgeObjectRetain();
          sub_100080E08((uint64_t *)&unk_100320660);
          sub_1000A2508();
          BidirectionalCollection<>.joined(separator:)();
          swift_bridgeObjectRelease();
          char v88 = v100;
          static String.Encoding.utf8.getter();
          uint64_t v89 = String.data(using:allowLossyConversion:)();
          unint64_t v91 = v90;
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v101 + 8))(v88, v102);
          id v27 = v113;
          if (v91 >> 60 == 15)
          {
            Class v92 = 0;
          }
          else
          {
            Class v92 = Data._bridgeToObjectiveC()().super.isa;
            sub_10008FCD4(v89, v91);
          }
          uint64_t v86 = (int *)v108;
        }
        else
        {
          Class v92 = 0;
          id v27 = v113;
        }
        [v38 setApplications:v92];

        if (*(uint64_t *)((char *)v107 + v86[7] + 8))
        {
          swift_bridgeObjectRetain();
          NSString v93 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v93 = 0;
        }
        uint64_t v45 = v111;
        [v38 setOsVersion:v93];

        if (*(uint64_t *)((char *)v107 + v86[8] + 8))
        {
          swift_bridgeObjectRetain();
          NSString v94 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        else
        {
          NSString v94 = 0;
        }
        uint64_t v44 = v112;
        [v38 setSerialNumber:v94];

        NSString v95 = String._bridgeToObjectiveC()();
        [v38 setCkstate:v95];

        if (*((unsigned char *)v107 + v86[10]) == 2)
        {
          [v38 setInjected:0];
          sub_100080CB0(v98, v99);
        }
        else
        {
          Class v96 = Bool._bridgeToObjectiveC()().super.super.isa;
          [v38 setInjected:v96];
          sub_100080CB0(v98, v99);
        }
        sub_1000993D8((uint64_t)v107);
        goto LABEL_21;
      }
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v104 + 56))(v49, 1, 1, v29);
      sub_100080CB0((uint64_t)v46, (unint64_t)v47);
      sub_100087A1C(v49, &qword_100320A58);
      uint64_t v26 = 0;
      uint64_t v39 = v106;
      uint64_t v28 = v115;
      id v27 = v113;
    }
  }
  else
  {
    uint64_t v45 = v111;
    uint64_t v44 = v112;
  }
  NSString v50 = String._bridgeToObjectiveC()();
  [v38 setCkstate:v50];

LABEL_21:
  if (qword_100329E60 != -1) {
    swift_once();
  }
  uint64_t v51 = sub_100080F90(v28, (uint64_t)qword_100329E68);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v45, v51, v28);
  id v52 = v38;
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v106 = v39;
    uint64_t v108 = v26;
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    v117[0] = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v55 = 136315138;
    id v56 = [v52 pushToken];
    if (v56)
    {
      uint64_t v57 = v56;
      uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v60 = v59;

      uint64_t v61 = sub_1000CEB28(v58, v60);
      unint64_t v63 = v62;
      uint64_t v64 = v58;
      id v27 = v113;
      sub_100080CB0(v64, v60);
    }
    else
    {
      unint64_t v63 = 0xE100000000000000;
      uint64_t v61 = 45;
    }
    uint64_t v116 = sub_10008D114(v61, v63, (uint64_t *)v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "merged cloud device: %s", v55, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v112 + 8))(v111, v115);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v28);
  }
  uint64_t v65 = v114;
  uint64_t v66 = (*(uint64_t (**)(id, id))(*(void *)v114 + 384))(v52, v27);
  uint64_t v67 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v65 + 152))(v66);
  v117[0] = 0;
  unsigned int v68 = [v67 save:v117];

  if (!v68)
  {
    id v72 = v117[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();

    swift_errorRelease();
    LOBYTE(v35) = 1;
    id v70 = v52;
    uint64_t v71 = v110;
    goto LABEL_33;
  }
  id v69 = v117[0];
  swift_release();

  LOBYTE(v35) = 1;
LABEL_31:
  id v70 = v109;
  uint64_t v71 = v110;
LABEL_33:

  *uint64_t v71 = (_BYTE)v35;
}

uint64_t sub_10009E354(void *a1)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152))();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1000A25C0;
  *(void *)(v5 + 24) = v4;
  void v10[4] = sub_1000984E8;
  void v10[5] = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100091FD8;
  v10[3] = &unk_1002BE558;
  uint64_t v6 = _Block_copy(v10);
  id v7 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

Class sub_10009E4E4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (int *)type metadata accessor for CloudDeviceData(0);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v10 - 8);
  id v11 = [a1 ckrecord];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v15 = 0xF000000000000000;
  }
  uint64_t v16 = type metadata accessor for KTCloudRecords();
  Class isa = (Class)(*(uint64_t (**)(uint64_t, unint64_t))(v16 + 440))(v13, v15);
  sub_10008FCD4(v13, v15);
  if (!isa)
  {
    uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v2 + 312))(a1);
    if (!v18) {
      return 0;
    }
    v19.super.Class isa = (Class)v18;
    sub_10008E0A0(0, &qword_100321980);
    v20._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v2 + 128))();
    Class isa = CKRecord.init(recordType:recordID:)(v20, v19).super.isa;
  }
  id v21 = [a1 applications];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;
  }
  else
  {
    uint64_t v23 = 0;
    unint64_t v25 = 0xC000000000000000;
  }
  static String.Encoding.utf8.getter();
  unint64_t v70 = v25;
  uint64_t v26 = String.init(data:encoding:)();
  if (v27)
  {
    uint64_t v73 = v26;
    unint64_t v74 = v27;
    uint64_t v71 = 44;
    unint64_t v72 = 0xE100000000000000;
    sub_100090D14();
    uint64_t v68 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v68 = 0;
  }
  id v28 = [a1 pushToken];
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v66 = v31;
    uint64_t v67 = v30;
  }
  else
  {
    unint64_t v66 = 0xF000000000000000;
    uint64_t v67 = 0;
  }
  id v32 = [a1 registrationData];
  if (v32)
  {
    uint64_t v33 = v32;
    uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v64 = v35;
    uint64_t v65 = v34;
  }
  else
  {
    unint64_t v64 = 0xF000000000000000;
    uint64_t v65 = 0;
  }
  id v36 = [a1 timeToLive];
  if (v36)
  {
    NSString v37 = v36;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v38 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v6, 0, 1, v38);
  }
  else
  {
    uint64_t v39 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v6, 1, 1, v39);
  }
  id v40 = [a1 osVersion];
  uint64_t v69 = v23;
  if (v40)
  {
    NSString v41 = v40;
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v44 = v43;
  }
  else
  {
    uint64_t v42 = 0;
    uint64_t v44 = 0;
  }
  Class v45 = isa;
  id v46 = [a1 serialNumber];
  if (v46)
  {
    id v47 = v46;
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v50 = v49;
  }
  else
  {
    uint64_t v48 = 0;
    uint64_t v50 = 0;
  }
  id v51 = [a1 injected];
  if (v51)
  {
    id v52 = v51;
    unsigned __int8 v53 = [v51 BOOLValue];
  }
  else
  {
    unsigned __int8 v53 = 2;
  }
  unint64_t v54 = v66;
  uint64_t *v9 = v67;
  v9[1] = v54;
  unint64_t v55 = v64;
  long long v9[2] = v65;
  v9[3] = v55;
  sub_1000992A8((uint64_t)v6, (uint64_t)v9 + v7[6]);
  id v56 = (uint64_t *)((char *)v9 + v7[7]);
  uint64_t *v56 = v42;
  v56[1] = v44;
  uint64_t v57 = (uint64_t *)((char *)v9 + v7[8]);
  uint64_t *v57 = v48;
  v57[1] = v50;
  *(uint64_t *)((char *)v9 + v7[9]) = v68;
  *((unsigned char *)v9 + v7[10]) = v53;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100099260((unint64_t *)&unk_1003206C0, (void (*)(uint64_t))type metadata accessor for CloudDeviceData);
  uint64_t v58 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v60 = v59;
  id v61 = [(objc_class *)v45 encryptedValues];
  swift_getObjectType();
  uint64_t v75 = &type metadata for Data;
  uint64_t v76 = &protocol witness table for Data;
  uint64_t v73 = v58;
  unint64_t v74 = v60;
  sub_100080C58(v58, v60);
  CKRecordKeyValueSetting.subscript.setter();
  swift_release();
  sub_100080CB0(v69, v70);
  swift_unknownObjectRelease();
  sub_100080CB0(v58, v60);
  sub_1000993D8((uint64_t)v9);
  return v45;
}

uint64_t sub_10009EB00()
{
  unsigned __int8 v9 = 0;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = &v9;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000A291C;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000984E8;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BE5D0;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v9;
    swift_release();
    return v7;
  }
  return result;
}

uint64_t sub_10009EC90()
{
  unsigned __int8 v9 = &_swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v9;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000A2B18;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000984E8;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BE648;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v9;
    swift_release();
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_10009EE28()
{
  unsigned __int8 v9 = &_swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v9;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000A2B40;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000984E8;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BE6C0;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v9;
    swift_release();
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_10009EFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = &_swiftEmptyArrayStorage;
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 152))();
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  void v8[5] = &v30;
  v8[6] = v3;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1000A2D84;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_1000984E8;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BE738;
  uint64_t v10 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v28 = v3;
  swift_retain();
  swift_retain();
  swift_release();
  [v7 performBlockAndWait:v10];

  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else if (qword_100329E60 == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  uint64_t v12 = type metadata accessor for Logger();
  sub_100080F90(v12, (uint64_t)qword_100329E68);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v15 = 134217984;
    swift_beginAccess();
    aBlock[0] = v30[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "record update device cloudstate: %ld", v15, 0xCu);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v16 = v30;
  uint64_t v17 = v30[2];
  if (v17)
  {
    uint64_t v18 = *(void *)(type metadata accessor for KTCloudDevice.CloudState(0) - 8);
    CKRecordID v19 = (char *)v16 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    Swift::String v20 = *(uint64_t (**)(uint64_t))(*(void *)v28 + 176);
    uint64_t v21 = *(void *)(v18 + 72);
    uint64_t v22 = swift_bridgeObjectRetain();
    do
    {
      uint64_t v22 = v20(v22);
      if (v22)
      {
        uint64_t v23 = (void *)v22;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        Class v25 = Data._bridgeToObjectiveC()().super.isa;
        Class v26 = Date._bridgeToObjectiveC()().super.isa;
        [v23 cloudDeviceUploadedWithPushToken:isa tbsRegistrationData:v25 uploadedAt:v26];

        uint64_t v22 = swift_unknownObjectRelease();
      }
      v19 += v21;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_10009F3CC(void **a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v68 = a4;
  uint64_t v69 = a2;
  uint64_t v70 = a3;
  uint64_t v6 = type metadata accessor for KTCloudDevice.CloudState(0);
  uint64_t v66 = *(void *)(v6 - 8);
  uint64_t v67 = v6;
  __chkstk_darwin(v6);
  uint64_t v71 = (uint64_t *)((char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_t v76 = (os_log_t)type metadata accessor for Date();
  Class isa = v76[-1].isa;
  __chkstk_darwin(v76);
  uint64_t v73 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  id v11 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1002856F0;
  id v13 = [v10 recordName];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_1000A56A8();
  *(void *)(v12 + 32) = v14;
  *(void *)(v12 + 40) = v16;
  uint64_t v17 = NSPredicate.init(format:_:)();
  [v11 setPredicate:v17];

  id v77 = 0;
  id v18 = [v11 execute:&v77];
  id v19 = v77;
  if (v18)
  {
    Swift::String v20 = v18;
    uint64_t v10 = v4;
    Class v21 = isa;
    sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
    unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v23 = v19;

    unint64_t v24 = v22;
    uint64_t v63 = v4;
    id v64 = v11;
    if (v22 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v25 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    Class v26 = v73;
    if (!v25)
    {
LABEL_30:

      swift_bridgeObjectRelease_n();
      return;
    }
    if (v25 >= 1)
    {
      uint64_t v27 = 0;
      unint64_t v75 = v22 & 0xC000000000000001;
      uint64_t v65 = (void (**)(uint64_t, char *, os_log_t))((char *)v21 + 16);
      unint64_t v72 = (void (**)(char *, os_log_t))((char *)v21 + 8);
      BOOL v29 = v69 == 1701736292 && v70 == 0xE400000000000000;
      BOOL v74 = v29;
      do
      {
        if (v75) {
          id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v30 = *(id *)(v24 + 8 * v27 + 32);
        }
        unint64_t v31 = v30;
        NSString v32 = String._bridgeToObjectiveC()();
        [v31 setCkstate:v32];

        if (v74 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          uint64_t v33 = v25;
          Date.init()();
          id v34 = [v31 pushToken];
          if (v34)
          {
            unint64_t v35 = v34;
            unint64_t v36 = v24;
            uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v39 = v38;

            id v40 = [v31 registrationData];
            if (v40)
            {
              NSString v41 = v40;
              uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v44 = v43;

              Class v45 = v71;
              (*v65)((uint64_t)v71 + *(int *)(v67 + 24), v73, v76);
              uint64_t *v45 = v37;
              v45[1] = v39;
              v45[2] = v42;
              v45[3] = v44;
              id v46 = v68;
              unint64_t v47 = *v68;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              unint64_t *v46 = v47;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                unint64_t v47 = sub_1000A0588(0, *(void *)(v47 + 16) + 1, 1, v47);
                *uint64_t v68 = v47;
              }
              unint64_t v50 = *(void *)(v47 + 16);
              unint64_t v49 = *(void *)(v47 + 24);
              Class v26 = v73;
              if (v50 >= v49 >> 1)
              {
                unint64_t v47 = sub_1000A0588(v49 > 1, v50 + 1, 1, v47);
                *uint64_t v68 = v47;
              }
              *(void *)(v47 + 16) = v50 + 1;
              sub_1000A5A28((uint64_t)v71, v47+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(void *)(v66 + 72) * v50, type metadata accessor for KTCloudDevice.CloudState);
              (*v72)(v26, v76);
            }
            else
            {
              Class v26 = v73;
              (*v72)(v73, v76);
              sub_100080CB0(v37, v39);
            }
            unint64_t v24 = v36;
          }
          else
          {
            (*v72)(v26, v76);
          }
          uint64_t v25 = v33;
        }

        ++v27;
      }
      while (v25 != v27);
      goto LABEL_30;
    }
    __break(1u);
  }
  else
  {
    id v51 = v77;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100329E60 == -1) {
      goto LABEL_32;
    }
  }
  swift_once();
LABEL_32:
  uint64_t v52 = type metadata accessor for Logger();
  sub_100080F90(v52, (uint64_t)qword_100329E68);
  id v53 = v10;
  swift_errorRetain();
  id v54 = v53;
  swift_errorRetain();
  unint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = swift_slowAlloc();
    uint64_t v58 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v57 = 138412546;
    id v64 = v11;
    id v77 = v54;
    id v59 = v54;
    os_log_t v76 = v55;
    id v60 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v58 = v54;

    *(_WORD *)(v57 + 12) = 2112;
    swift_errorRetain();
    id v61 = (void *)_swift_stdlib_bridgeErrorToNSError();
    id v77 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v58[1] = v61;
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v62 = v76;
    _os_log_impl((void *)&_mh_execute_header, v76, v56, "record to update not found %@: %@", (uint8_t *)v57, 0x16u);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_10009FBC4(void *a1)
{
  uint64_t v12 = 0;
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152))();
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = a1;
  v4[3] = &v12;
  v4[4] = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1000A2F9C;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_1000984E8;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BE7B0;
  uint64_t v6 = _Block_copy(aBlock);
  id v7 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v12;
    swift_release();
    return v10;
  }
  return result;
}

uint64_t sub_10009FD68(void *a1, void *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(void *))(type metadata accessor for KTCloudRecords() + 448);
  id v5 = a2;
  uint64_t v6 = v4(a2);
  if (v7 >> 60 == 15)
  {

    return 0;
  }
  uint64_t v9 = v6;
  unint64_t v10 = v7;
  id v11 = [a1 ckrecord];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    sub_10008FC6C(v9, v10);
    sub_100080C58(v13, v15);
    LOBYTE(v12) = sub_1000811AC(v13, v15, v9, v10);
    sub_10008FCD4(v9, v10);
    sub_100080CB0(v13, v15);
    sub_100080CB0(v13, v15);
    if (v12)
    {

      sub_10008FCD4(v9, v10);
      return 0;
    }
  }
  else
  {
    sub_100080C58(v9, v10);
    sub_10008FCD4(0, 0xF000000000000000);
    sub_10008FCD4(v9, v10);
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a1 setCkrecord:isa];

  sub_10008FCD4(v9, v10);
  return 1;
}

uint64_t sub_10009FF04(char a1)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152))();
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1000A39E0;
  *(void *)(v5 + 24) = v4;
  v9[4] = sub_1000984E8;
  v9[5] = v5;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  long long v9[2] = sub_100091FD8;
  v9[3] = &unk_1002BE828;
  uint64_t v6 = _Block_copy(v9);
  swift_retain();
  swift_retain();
  swift_release();
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A008C()
{
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  sub_1000A3E38(v0 + 56);
  return v0;
}

uint64_t sub_1000A00CC()
{
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  sub_1000A3E38(v0 + 56);

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_1000A0124()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 128))();
}

uint64_t sub_1000A0168()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 320))() & 1;
}

uint64_t sub_1000A01B8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 328))();
}

uint64_t sub_1000A0204()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 352))();
}

uint64_t sub_1000A0250()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 360))();
}

uint64_t sub_1000A029C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 344))() & 1;
}

uint64_t sub_1000A02EC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 368))();
}

uint64_t sub_1000A0338()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 376))();
}

uint64_t sub_1000A0384()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 336))();
}

uint64_t sub_1000A03D0()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 312))();
}

uint64_t sub_1000A041C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 392))();
}

char *sub_1000A0478(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100080E08(&qword_100320AD0);
      unint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_1000A3884(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A0588(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100080E08(&qword_100320A50);
  uint64_t v10 = *(void *)(type metadata accessor for KTCloudDevice.CloudState(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for KTCloudDevice.CloudState(0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000A58D0(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

uint64_t sub_1000A07F0()
{
  sub_100080CB0(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_100080CB0(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000A0848()
{
  return sub_10009B0B4(*(void **)(v0 + 16), *(unsigned char **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80));
}

uint64_t sub_1000A0880()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A0890(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1000A08A0()
{
  sub_100080CB0(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_100080CB0(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1000A08E8()
{
  uint64_t v1 = (void *)v0[2];
  unint64_t v50 = v0[4];
  uint64_t v48 = v0[5];
  uint64_t v46 = v0[3];
  unint64_t v47 = v0[6];
  Class v45 = (void **)v0[7];
  id v2 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1002856F0;
  id v4 = [v1 recordName];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_1000A56A8();
  *(void *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = v7;
  uint64_t v8 = NSPredicate.init(format:_:)();
  [v2 setPredicate:v8];

  id v51 = 0;
  id v9 = [v2 execute:&v51];
  id v10 = v51;
  if (!v9)
  {
    id v42 = v51;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return;
  }
  uint64_t v11 = v9;
  uint64_t v43 = v2;
  sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = v10;

  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v15 = v46;
    if (v14) {
      goto LABEL_4;
    }
LABEL_27:
    swift_bridgeObjectRelease_n();

    return;
  }
  uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v15 = v46;
  if (!v14) {
    goto LABEL_27;
  }
LABEL_4:
  if (v14 >= 1)
  {
    uint64_t v16 = 0;
    unint64_t v17 = v12 & 0xC000000000000001;
    uint64_t v49 = v14;
    unint64_t v44 = v12;
    while (1)
    {
      if (v17) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(v12 + 8 * v16 + 32);
      }
      id v19 = v18;
      id v20 = [v18 registrationData:v43];
      if (!v20) {
        goto LABEL_7;
      }
      Class v21 = v20;
      uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;

      id v25 = [v19 pushToken];
      if (v25)
      {
        Class v26 = v25;
        uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;

        if (sub_1000811AC(v22, v24, v15, v50) & 1) != 0 && (sub_1000811AC(v27, v29, v48, v47))
        {
          id v30 = [v19 ckstate];
          if (!v30) {
            goto LABEL_23;
          }
          unint64_t v31 = v30;
          uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v34 = v33;

          if (!v34) {
            goto LABEL_23;
          }
          if (v32 == 0x646574656C6564 && v34 == 0xE700000000000000)
          {
            swift_bridgeObjectRelease();
            goto LABEL_22;
          }
          char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v35)
          {
LABEL_22:
            sub_100080CB0(v27, v29);
            sub_100080CB0(v22, v24);
          }
          else
          {
LABEL_23:
            id v36 = objc_allocWithZone((Class)KTLoggableData);
            sub_100080C58(v22, v24);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            id v38 = [v36 initWithClientData:isa];
            sub_100080CB0(v22, v24);

            Class v39 = Data._bridgeToObjectiveC()().super.isa;
            [v38 setDeviceID:v39];

            id v40 = [v19 osVersion];
            [v38 setBuild:v40];
            sub_100080CB0(v22, v24);
            sub_100080CB0(v27, v29);

            NSString v41 = *v45;
            uint64_t *v45 = v38;
          }
          uint64_t v15 = v46;
          uint64_t v14 = v49;
          unint64_t v12 = v44;
          goto LABEL_7;
        }
        sub_100080CB0(v27, v29);
        sub_100080CB0(v22, v24);
        uint64_t v14 = v49;
      }
      else
      {
        sub_100080CB0(v22, v24);
      }
LABEL_7:
      ++v16;

      if (v14 == v16) {
        goto LABEL_27;
      }
    }
  }
  __break(1u);
}

uint64_t sub_1000A0DD0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A0DE0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000A0DF0()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = [self fetchRequest];
  id v40 = 0;
  id v3 = [v2 execute:&v40];
  id v4 = v40;
  if (!v3)
  {
    id v35 = v40;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return;
  }
  uint64_t v5 = v3;
  sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = v4;

  id v36 = v2;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_4;
    }
LABEL_26:
    swift_bridgeObjectRelease_n();

    return;
  }
  uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_26;
  }
LABEL_4:
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v6 & 0xC000000000000001;
    uint64_t v11 = &selRef_processSTHsFromGossipPeers_verifier_error_;
    uint64_t v38 = v8;
    unint64_t v39 = v6;
    unint64_t v37 = v6 & 0xC000000000000001;
    while (1)
    {
      if (v10) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(v6 + 8 * v9 + 32);
      }
      id v13 = v12;
      id v14 = [v12 v11[84] v36];
      if (!v14) {
        goto LABEL_7;
      }
      uint64_t v15 = v14;
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      id v19 = [v13 pushToken];
      if (v19) {
        break;
      }
      sub_100080CB0(v16, v18);
LABEL_7:
      ++v9;

      if (v8 == v9) {
        goto LABEL_26;
      }
    }
    id v20 = v19;
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;

    id v24 = [v13 ckstate];
    if (v24)
    {
      id v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;

      if (v28)
      {
        if (v26 == 0x646574656C6564 && v28 == 0xE700000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_19:
          sub_100080CB0(v21, v23);
          sub_100080CB0(v16, v18);
LABEL_23:
          uint64_t v8 = v38;
          unint64_t v6 = v39;
          unint64_t v10 = v37;
          uint64_t v11 = &selRef_processSTHsFromGossipPeers_verifier_error_;
          goto LABEL_7;
        }
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v29) {
          goto LABEL_19;
        }
      }
    }
    id v30 = objc_allocWithZone((Class)KTLoggableData);
    sub_100080C58(v16, v18);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v32 = [v30 initWithClientData:isa];
    sub_100080CB0(v16, v18);

    Class v33 = Data._bridgeToObjectiveC()().super.isa;
    [v32 setDeviceID:v33];

    id v34 = v32;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    sub_100080CB0(v16, v18);
    sub_100080CB0(v21, v23);

    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_1000A119C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A11AC()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000A11BC()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = [self fetchRequest];
  id v43 = 0;
  id v3 = [v2 execute:&v43];
  id v4 = v43;
  if (!v3)
  {
    id v38 = v43;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return;
  }
  uint64_t v5 = v3;
  sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = v4;

  unint64_t v39 = v2;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_4;
    }
LABEL_26:
    swift_bridgeObjectRelease_n();

    return;
  }
  uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_26;
  }
LABEL_4:
  if (v8 >= 1)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v6 & 0xC000000000000001;
    uint64_t v11 = &selRef_processSTHsFromGossipPeers_verifier_error_;
    uint64_t v41 = v8;
    unint64_t v42 = v6;
    unint64_t v40 = v6 & 0xC000000000000001;
    while (1)
    {
      if (v10) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v12 = *(id *)(v6 + 8 * v9 + 32);
      }
      id v13 = v12;
      id v14 = [v12 v11[84]:v39];
      if (!v14) {
        goto LABEL_7;
      }
      uint64_t v15 = v14;
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      id v19 = [v13 pushToken];
      if (v19) {
        break;
      }
      sub_100080CB0(v16, v18);
LABEL_7:
      ++v9;

      if (v8 == v9) {
        goto LABEL_26;
      }
    }
    id v20 = v19;
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;

    id v24 = [v13 ckstate];
    if (v24)
    {
      id v25 = v24;
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;

      if (v28)
      {
        if (v26 == 0x646574656C6564 && v28 == 0xE700000000000000)
        {
          swift_bridgeObjectRelease();
LABEL_19:
          sub_100080CB0(v21, v23);
          sub_100080CB0(v16, v18);
LABEL_23:
          uint64_t v8 = v41;
          unint64_t v6 = v42;
          unint64_t v10 = v40;
          uint64_t v11 = &selRef_processSTHsFromGossipPeers_verifier_error_;
          goto LABEL_7;
        }
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v29) {
          goto LABEL_19;
        }
      }
    }
    id v30 = objc_allocWithZone((Class)KTLoggableData);
    sub_100080C58(v16, v18);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v32 = [v30 initWithClientData:isa];
    sub_100080CB0(v16, v18);

    Class v33 = Data._bridgeToObjectiveC()().super.isa;
    [v32 setDeviceID:v33];

    id v34 = [objc_allocWithZone((Class)TransparencyCloudDevice) init];
    [v34 setLoggableData:v32];
    id v35 = [v13 ckstate];
    [v34 setState:v35];

    id v36 = [v13 serialNumber];
    [v34 setSerialNumber:v36];

    id v37 = v34;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    sub_100080CB0(v16, v18);
    sub_100080CB0(v21, v23);

    goto LABEL_23;
  }
  __break(1u);
}

uint64_t sub_1000A1600()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A1610()
{
  swift_release();
  sub_100080CB0(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_100080CB0(*(void *)(v0 + 48), *(void *)(v0 + 56));

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1000A1660()
{
  id v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  id v3 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856F0;
  id v5 = [v2 recordName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000A56A8();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v9];

  id v55 = 0;
  id v10 = [v3 execute:&v55];
  id v11 = v55;
  if (v10)
  {
    id v12 = v10;
    sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
    unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v14 = v11;

    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      id v15 = (id)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v15)
      {
LABEL_4:
        if ((v13 & 0xC000000000000001) != 0)
        {
          id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_30;
          }
          id v16 = *(id *)(v13 + 32);
        }
        id v15 = v16;
        swift_bridgeObjectRelease();
        if (qword_100329E60 == -1)
        {
LABEL_8:
          uint64_t v17 = type metadata accessor for Logger();
          sub_100080F90(v17, (uint64_t)qword_100329E68);
          id v18 = v2;
          id v19 = Logger.logObject.getter();
          os_log_type_t v20 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v19, v20))
          {
            id v54 = v3;
            uint64_t v21 = (uint8_t *)swift_slowAlloc();
            id v55 = (id)swift_slowAlloc();
            *(_DWORD *)uint64_t v21 = 136315138;
            id v22 = [v18 recordName];
            uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v25 = v24;

            sub_10008D114(v23, v25, (uint64_t *)&v55);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            id v3 = v54;
            swift_bridgeObjectRelease();

            _os_log_impl((void *)&_mh_execute_header, v19, v20, "add device: updating existing record %s", v21, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
LABEL_24:
          sub_10008E0A0(0, &qword_100320AD8);
          id v46 = v15;
          Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
          [v46 setInjected:isa];

          Class v48 = NSNumber.init(BOOLeanLiteral:)(0).super.super.isa;
          [v46 setLocal:v48];

          NSString v49 = String._bridgeToObjectiveC()();
          [v46 setCkstate:v49];

          unint64_t v50 = (void *)(*(uint64_t (**)(id))(*(void *)v1 + 152))([v46 setTimeToLive:0]);
          id v55 = 0;
          unsigned int v51 = [v50 save:&v55];

          if (v51)
          {
            id v52 = v55;
          }
          else
          {
            id v53 = v55;
            _convertNSErrorToError(_:)();

            swift_willThrow();
            swift_errorRelease();
            id v3 = v46;
          }
          goto LABEL_27;
        }
LABEL_30:
        swift_once();
        goto LABEL_8;
      }
    }
    else
    {
      id v15 = *(id *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v15) {
        goto LABEL_4;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    id v26 = v55;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  if (qword_100329E60 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100080F90(v27, (uint64_t)qword_100329E68);
  os_log_type_t v28 = static os_log_type_t.error.getter();
  id v29 = v2;
  id v30 = Logger.logObject.getter();
  os_log_type_t v31 = v28;
  if (os_log_type_enabled(v30, v28))
  {
    id v32 = (uint8_t *)swift_slowAlloc();
    id v55 = (id)swift_slowAlloc();
    *(_DWORD *)id v32 = 136315138;
    uint64_t v33 = v1;
    id v34 = [v29 recordName];
    uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v36 = v3;
    unint64_t v38 = v37;

    uint64_t v1 = v33;
    sub_10008D114(v35, v38, (uint64_t *)&v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v3 = v36;
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v30, v31, "creating new record %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  unint64_t v39 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152))();
  id v40 = [objc_allocWithZone((Class)CloudDevice) initWithContext:v39];

  if (v40)
  {
    id v41 = v40;
    NSString v42 = [v29 recordName];
    if (!v42)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v41 setRecordID:v42];

    id v43 = v41;
    Class v44 = Data._bridgeToObjectiveC()().super.isa;
    [v43 setPushToken:v44];

    id v15 = v43;
    Class v45 = Data._bridgeToObjectiveC()().super.isa;
    [v15 setRegistrationData:v45];

    goto LABEL_24;
  }
LABEL_27:
}

uint64_t sub_1000A1E64()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000A1E74()
{
  id v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  id v3 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856F0;
  id v5 = [v2 recordName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000A56A8();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v9];

  id v25 = 0;
  id v10 = [v3 execute:&v25];
  id v11 = v25;
  if (!v10)
  {
LABEL_13:
    id v24 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  id v12 = v10;
  sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = v11;

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v15) {
      goto LABEL_11;
    }
  }
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(v13 + 8 * v16 + 32);
      }
      id v18 = v17;
      ++v16;
      NSString v19 = String._bridgeToObjectiveC()();
      [v18 setCkstate:v19];
    }
    while (v15 != v16);
LABEL_11:
    uint64_t v20 = swift_bridgeObjectRelease_n();
    uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 152))(v20);
    id v25 = 0;
    unsigned __int8 v22 = [v21 save:&v25];

    id v11 = v25;
    if (v22)
    {
      id v23 = v25;

      return;
    }
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t sub_1000A2170(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A2204(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_100099260((unint64_t *)&unk_100320690, (void (*)(uint64_t))&type metadata accessor for SHA256);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000A22E4(uint64_t a1, unint64_t a2)
{
  v10[3] = &type metadata for Data;
  void v10[4] = &protocol witness table for Data;
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = sub_100097048(v10, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_100080C58(a1, a2);
      sub_100080C58(v5, v6);
      sub_1000A2170((int)v5, v5 >> 32);
      sub_100080CB0(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_100080C58(a1, a2);
      swift_retain();
      swift_retain();
      sub_1000A2170(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_100080C58(a1, a2);
      Data._Representation.append(contentsOf:)();
      break;
  }
  return sub_10008FBC4((uint64_t)v10);
}

unint64_t sub_1000A2508()
{
  unint64_t result = qword_100321970;
  if (!qword_100321970)
  {
    sub_1000829FC((uint64_t *)&unk_100320660);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321970);
  }
  return result;
}

void sub_1000A2564(unsigned char *a1@<X8>)
{
  sub_10009D4AC(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1000A2580()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000A25C0()
{
  id v2 = *(void **)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  id v3 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856F0;
  id v5 = [v2 recordName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000A56A8();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v9];

  id v26 = 0;
  id v10 = [v3 execute:&v26];
  id v11 = v26;
  if (!v10)
  {
LABEL_14:
    id v25 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return;
  }
  id v12 = v10;
  sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = v11;

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    if (!v15) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v15) {
      goto LABEL_12;
    }
  }
  uint64_t v16 = *(uint64_t (**)(void))(*(void *)v1 + 152);
  if (v15 >= 1)
  {
    uint64_t v17 = 0;
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(v13 + 8 * v17 + 32);
      }
      NSString v19 = v18;
      ++v17;
      uint64_t v20 = (void *)v16();
      [v20 deleteObject:v19];
    }
    while (v15 != v17);
LABEL_12:
    uint64_t v21 = swift_bridgeObjectRelease_n();
    unsigned __int8 v22 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 152))(v21);
    id v26 = 0;
    unsigned __int8 v23 = [v22 save:&v26];

    id v11 = v26;
    if (v23)
    {
      id v24 = v26;

      return;
    }
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t sub_1000A28D4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A28E4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000A291C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = *(unsigned char **)(v0 + 24);
  id v3 = [self fetchRequest];
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856D0;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v5 = sub_1000A56A8();
  *(void *)(v4 + 64) = v5;
  *(void *)(v4 + 32) = 0x676E696F6774756FLL;
  *(void *)(v4 + 40) = 0xE800000000000000;
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v5;
  *(void *)(v4 + 72) = 0x646574656C6564;
  *(void *)(v4 + 80) = 0xE700000000000000;
  uint64_t v6 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v6];

  id v8 = (id)(*(uint64_t (**)(void))(*(void *)v1 + 152))();
  sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
  uint64_t v7 = NSManagedObjectContext.count<A>(for:)();

  if (v7 >= 1) {
    unsigned char *v2 = 1;
  }
}

uint64_t sub_1000A2B08()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A2B18()
{
  return sub_1000A2B58(0x676E696F6774756FLL, 0xE800000000000000);
}

uint64_t sub_1000A2B30()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A2B40()
{
  return sub_1000A2B58(0x646574656C6564, 0xE700000000000000);
}

uint64_t sub_1000A2B58(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  id v7 = [self fetchRequest];
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1002856F0;
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000A56A8();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v9];

  id v18 = 0;
  id v10 = [v7 execute:&v18];
  id v11 = v18;
  if (v10)
  {
    id v12 = v10;
    sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
    unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v14 = v11;

    swift_retain();
    uint64_t v15 = sub_1000A56FC(v13, v5);
    swift_release();

    swift_bridgeObjectRelease();
    *uint64_t v6 = v15;
    return swift_bridgeObjectRelease();
  }
  else
  {
    id v17 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return swift_errorRelease();
  }
}

uint64_t sub_1000A2D2C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A2D3C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

id sub_1000A2D84()
{
  unint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = (unint64_t *)v0[5];
  uint64_t v5 = v0[6];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v6 = (uint64_t)result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain();
    if (!v6) {
      goto LABEL_10;
    }
  }
  if (v6 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v1 + 8 * v8 + 32);
    }
    id v10 = v9;
    ++v8;
    id v16 = v9;
    sub_10009F3CC(&v16, v2, v3, v4);
  }
  while (v6 != v8);
LABEL_10:
  uint64_t v11 = swift_bridgeObjectRelease();
  id v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 152))(v11);
  id v16 = 0;
  unsigned __int8 v13 = [v12 save:&v16];

  id v14 = v16;
  if (v13)
  {
    return v14;
  }
  else
  {
    id v15 = v16;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (id)swift_errorRelease();
  }
}

uint64_t sub_1000A2F2C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for KTCloudDevice.CloudState(uint64_t a1)
{
  return sub_100080F58(a1, qword_100329FA0);
}

uint64_t sub_1000A2F5C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000A2F9C()
{
  unint64_t v1 = v0[2];
  uint64_t v2 = (id *)v0[3];
  uint64_t v3 = v0[4];
  id v4 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1002856F0;
  id v6 = [(id)v1 recordName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1000A56A8();
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  id v10 = NSPredicate.init(format:_:)();
  [v4 setPredicate:v10];

  id v43 = 0;
  id v11 = [v4 execute:&v43];
  id v12 = v43;
  if (!v11)
  {
    id v26 = v43;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    if (qword_100329E60 == -1)
    {
LABEL_12:
      uint64_t v27 = type metadata accessor for Logger();
      sub_100080F90(v27, (uint64_t)qword_100329E68);
      os_log_type_t v28 = static os_log_type_t.error.getter();
      id v29 = (id *)(id)v1;
      id v30 = Logger.logObject.getter();
      os_log_type_t v31 = v28;
      if (!os_log_type_enabled(v30, v28))
      {

LABEL_23:
        return;
      }
      id v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = (void *)swift_slowAlloc();
      *(_DWORD *)id v32 = 138412290;
      id v43 = v29;
      id v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v33 = v29;

      _os_log_impl((void *)&_mh_execute_header, v30, v31, "record not found %@", v32, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
LABEL_21:
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_23;
    }
LABEL_26:
    swift_once();
    goto LABEL_12;
  }
  unsigned __int8 v13 = v11;
  sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
  unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = v12;

  if (!(v1 >> 62))
  {
    uint64_t v15 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_4;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    if (qword_100329E60 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100080F90(v36, (uint64_t)qword_100329E68);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    swift_bridgeObjectRetain();
    id v30 = Logger.logObject.getter();
    os_log_type_t v38 = v37;
    if (!os_log_type_enabled(v30, v37))
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_23;
    }
    unint64_t v39 = (uint8_t *)swift_slowAlloc();
    id v43 = (id)swift_slowAlloc();
    *(_DWORD *)unint64_t v39 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v40 = Array.description.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    sub_10008D114(v40, v42, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v30, v38, "no response %s", v39, 0xCu);
    swift_arrayDestroy();
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_17;
  }
LABEL_4:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_26;
  }
  id v16 = *(id *)(v1 + 32);
LABEL_7:
  id v17 = v16;
  swift_bridgeObjectRelease_n();
  uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v3 + 336))(v17);
  id v19 = *v2;
  id *v2 = (id)v18;

  id v20 = *v2;
  uint64_t v21 = *(uint64_t (**)(void *, id))(*(void *)v3 + 384);
  id v22 = *v2;
  LOBYTE(v20) = v21(v17, v20);

  if ((v20 & 1) == 0)
  {
LABEL_10:

    return;
  }
  unsigned __int8 v23 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 152))();
  id v43 = 0;
  unsigned int v24 = [v23 save:&v43];

  if (v24)
  {
    id v25 = v43;
    goto LABEL_10;
  }
  id v35 = v43;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRelease();
}

uint64_t sub_1000A35CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A35DC(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x656B6F5468737570 && a2 == 0xE90000000000006ELL;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7107700 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F6973726556736FLL && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1936748641 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x64657463656A6E69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

unint64_t sub_1000A3884(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v4 < 0 || (unint64_t v5 = a4 + 16 * a1 + 32, v6 = a3 + 16 * v4, v5 < v6) && v5 + 16 * v4 > a3)
  {
LABEL_7:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1000A3978);
  }
  swift_arrayInitWithCopy();
  return v6;
}

uint64_t sub_1000A39A8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000A39E0()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  id v3 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithEntityName:v4];

  if (v1 == 1)
  {
    sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
    unint64_t v6 = NSPredicate.init(format:_:)();
    [v5 setPredicate:v6];
  }
  id v7 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v5];
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)v2 + 152);
  uint64_t v9 = (void *)v8();
  id v32 = 0;
  id v10 = [v9 executeRequest:v7 error:&v32];

  if (v10)
  {
    id v11 = v32;

    if (!v1) {
      goto LABEL_19;
    }
  }
  else
  {
    id v12 = v32;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    if (!v1) {
      goto LABEL_19;
    }
  }
  id v13 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  id v14 = NSPredicate.init(format:_:)();
  [v13 setPredicate:v14];

  id v32 = 0;
  id v15 = [v13 execute:&v32];
  id v16 = v32;
  if (v15)
  {
    id v17 = v15;
    sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
    unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v19 = v16;

    os_log_type_t v31 = v8;
    id v30 = v13;
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v20)
      {
LABEL_10:
        if (v20 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v21 = 0;
        do
        {
          if ((v18 & 0xC000000000000001) != 0) {
            id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v22 = *(id *)(v18 + 8 * v21 + 32);
          }
          unsigned __int8 v23 = v22;
          [v22 setCkrecord:0, v30];
          ++v21;
          NSString v24 = String._bridgeToObjectiveC()();
          [v23 setCkstate:v24];
        }
        while (v20 != v21);
      }
    }
    swift_bridgeObjectRelease_n();

    uint64_t v8 = v31;
    goto LABEL_19;
  }
  id v25 = v32;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRelease();
LABEL_19:
  id v26 = (void *)v8();
  id v32 = 0;
  unsigned int v27 = [v26 save:&v32];

  if (v27)
  {
    id v28 = v32;
  }
  else
  {
    id v29 = v32;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    id v5 = v7;
  }
}

uint64_t sub_1000A3E28()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A3E38(uint64_t a1)
{
  return a1;
}

_OWORD *sub_1000A3E60(_OWORD *a1, uint64_t a2, int *a3)
{
  NSString v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *(void *)a2;
    *(void *)NSString v4 = *(void *)a2;
    NSString v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      uint64_t v9 = *(void *)a2;
      sub_100080C58(*(void *)a2, *(void *)(a2 + 8));
      *(void *)NSString v4 = v9;
      *((void *)v4 + 1) = v7;
    }
    id v10 = (uint64_t *)(a2 + 16);
    unint64_t v11 = *(void *)(a2 + 24);
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v12 = *v10;
      sub_100080C58(*v10, *(void *)(a2 + 24));
      *((void *)v4 + 2) = v12;
      *((void *)v4 + 3) = v11;
    }
    uint64_t v13 = a3[6];
    id v14 = (char *)v4 + v13;
    id v15 = (const void *)(a2 + v13);
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_100080E08((uint64_t *)&unk_10031F9A0);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v19 = a3[7];
    uint64_t v20 = a3[8];
    uint64_t v21 = (void *)((char *)v4 + v19);
    id v22 = (void *)(a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    NSString v24 = (void *)((char *)v4 + v20);
    id v25 = (void *)(a2 + v20);
    uint64_t v26 = v25[1];
    *NSString v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = a3[10];
    *(void *)((char *)v4 + a3[9]) = *(void *)(a2 + a3[9]);
    *((unsigned char *)v4 + v27) = *(unsigned char *)(a2 + v27);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000A4094(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_100080CB0(*a1, v4);
  }
  unint64_t v5 = a1[3];
  if (v5 >> 60 != 15) {
    sub_100080CB0(a1[2], v5);
  }
  unint64_t v6 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A41C0(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v7 = *a2;
    sub_100080C58(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }
  uint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_100080C58(*v8, a2[3]);
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v9;
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[7];
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (uint64_t *)((char *)a2 + v17);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  id v22 = (void *)(a1 + v18);
  uint64_t v23 = (uint64_t *)((char *)a2 + v18);
  uint64_t v24 = v23[1];
  *id v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[10];
  *(void *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(unsigned char *)(a1 + v25) = *((unsigned char *)a2 + v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1000A43A4(uint64_t *a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *(void *)a2;
      sub_100080C58(*(void *)a2, *(void *)(a2 + 8));
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1000A46A8((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)a2;
  sub_100080C58(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_100080CB0(v9, v10);
LABEL_8:
  uint64_t v11 = (uint64_t *)(a2 + 16);
  unint64_t v12 = *(void *)(a2 + 24);
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = *v11;
      sub_100080C58(*v11, *(void *)(a2 + 24));
      a1[2] = v13;
      a1[3] = v12;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
    sub_1000A46A8((uint64_t)(a1 + 2));
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  uint64_t v14 = *v11;
  sub_100080C58(*v11, *(void *)(a2 + 24));
  uint64_t v15 = a1[2];
  unint64_t v16 = a1[3];
  a1[2] = v14;
  a1[3] = v12;
  sub_100080CB0(v15, v16);
LABEL_15:
  uint64_t v17 = a3[6];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)(a2 + v17);
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  id v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
      goto LABEL_21;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_20;
  }
  if (v24)
  {
LABEL_20:
    uint64_t v25 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_21;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_21:
  uint64_t v26 = a3[7];
  uint64_t v27 = (uint64_t *)((char *)a1 + v26);
  id v28 = (void *)(a2 + v26);
  void *v27 = *v28;
  v27[1] = v28[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[8];
  id v30 = (uint64_t *)((char *)a1 + v29);
  os_log_type_t v31 = (void *)(a2 + v29);
  void *v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1000A46A8(uint64_t a1)
{
  return a1;
}

_OWORD *sub_1000A46FC(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  uint64_t v14 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  return a1;
}

uint64_t sub_1000A4848(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1000A46A8(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_100080CB0(v8, v6);
LABEL_6:
  uint64_t v9 = (_OWORD *)(a2 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v9;
    goto LABEL_11;
  }
  unint64_t v11 = *(void *)(a2 + 24);
  if (v11 >> 60 == 15)
  {
    sub_1000A46A8(a1 + 16);
    goto LABEL_9;
  }
  uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)v9;
  *(void *)(a1 + 24) = v11;
  sub_100080CB0(v12, v10);
LABEL_11:
  uint64_t v13 = a3[6];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, void *, uint64_t))(v17 + 40))(v14, v15, v16);
      goto LABEL_17;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_16;
  }
  if (v20)
  {
LABEL_16:
    uint64_t v21 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_17;
  }
  (*(void (**)(void *, void *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_17:
  uint64_t v22 = a3[7];
  int v23 = (void *)(a1 + v22);
  int v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *int v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[8];
  id v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  void *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1000A4AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A4AD8);
}

uint64_t sub_1000A4AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_1000A4BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A4BC4);
}

uint64_t sub_1000A4BC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  }
  return result;
}

void sub_1000A4C8C()
{
  sub_1000A4D44();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000A4D44()
{
  if (!qword_100320790)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100320790);
    }
  }
}

uint64_t type metadata accessor for KTCloudDevice()
{
  return self;
}

uint64_t *sub_1000A4DC0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100080C58(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_100080C58(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    unint64_t v12 = (char *)a1 + v11;
    int v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_1000A4EBC(uint64_t a1, uint64_t a2)
{
  sub_100080CB0(*(void *)a1, *(void *)(a1 + 8));
  sub_100080CB0(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_1000A4F40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100080C58(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  unint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *sub_1000A4FEC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100080C58(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100080CB0(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_100080C58(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100080CB0(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_1000A50A8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1000A5124(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100080CB0(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100080CB0(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000A51C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A51D8);
}

uint64_t sub_1000A51D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000A5294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A52A8);
}

void *sub_1000A52A8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000A5358()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for CloudDeviceData.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CloudDeviceData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CloudDeviceData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A5558);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t sub_1000A5580(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000A5588(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CloudDeviceData.CodingKeys()
{
  return &type metadata for CloudDeviceData.CodingKeys;
}

unint64_t sub_1000A55A4()
{
  unint64_t result = qword_10032A0B0[0];
  if (!qword_10032A0B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10032A0B0);
  }
  return result;
}

unint64_t sub_1000A55FC()
{
  unint64_t result = qword_10032A1C0;
  if (!qword_10032A1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032A1C0);
  }
  return result;
}

unint64_t sub_1000A5654()
{
  unint64_t result = qword_10032A1C8[0];
  if (!qword_10032A1C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10032A1C8);
  }
  return result;
}

unint64_t sub_1000A56A8()
{
  unint64_t result = qword_100320A40;
  if (!qword_100320A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100320A40);
  }
  return result;
}

void *sub_1000A56FC(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    while (1)
    {
      id v5 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v4);
      unsigned int v6 = v5;
      uint64_t v7 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v8 = [v5 recordID];
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v12 = v11;

        sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
        id v13 = *(id *)(a2 + 40);
        v14._countAndFlagsBits = v10;
        v14._object = v12;
        CKRecordID.init(recordName:zoneID:)(v14, (CKRecordZoneID)v13);

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)&_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
      }
      ++v4;
      if (v7 == v3) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_1000A58D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for KTCloudDevice.CloudState(0) - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000A5A28(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000A5AF8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100087A78(v0, qword_10032A258);
  sub_100080F90(v0, (uint64_t)qword_10032A258);
  return Logger.init(transparencyCategory:)();
}

id KTUpdateCloudDeviceOperation.__allocating_init(deps:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = objc_allocWithZone(v2);
  v5[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_shouldRetry] = 0;
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps] = a1;
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_context] = a2;
  v7.receiver = v5;
  v7.super_class = v2;
  return [super init];
}

id KTUpdateCloudDeviceOperation.init(deps:context:)(uint64_t a1, uint64_t a2)
{
  v2[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_shouldRetry] = 0;
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps] = a1;
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_context] = a2;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for KTUpdateCloudDeviceOperation();
  return [super init];
}

uint64_t type metadata accessor for KTUpdateCloudDeviceOperation()
{
  return self;
}

Swift::Void __swiftcall KTUpdateCloudDeviceOperation.groupStart()()
{
  unint64_t v1 = v0;
  int v2 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps];
  id v3 = [v2 ckdatabase];
  if (!v3) {
    return;
  }
  id v19 = v3;
  id v4 = [v2 cloudRecords];
  if (!v4)
  {
    uint64_t v16 = v19;
    goto LABEL_8;
  }
  id v5 = v4;
  id v6 = [v4 pendingRecords];
  sub_10008E0A0(0, &qword_100321980);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_5;
    }
  }
  else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_5:
    v22.value._rawValue = (void *)sub_10008E0A0(0, (unint64_t *)&qword_100320B00);
    v21.value._rawValue = (void *)v7;
    v21.is_nil = 0;
    Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v21, v22).super.super.super.super.isa;
    [(objc_class *)isa setQualityOfService:25];
    uint64_t v9 = isa;
    NSString v10 = String._bridgeToObjectiveC()();
    [(objc_class *)v9 setName:v10];

    id v11 = [objc_allocWithZone((Class)NSBlockOperation) init];
    [v1 dependOnBeforeGroupFinished:v11];
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v1;
    *(void *)(v12 + 24) = v5;
    id v13 = v1;
    swift_unknownObjectRetain();
    CKModifyRecordsOperation.perRecordSaveBlock.setter();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    *(void *)(v14 + 24) = v11;
    id v15 = v13;
    id v18 = v11;
    CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
    [v19 addOperation:v9];

    swift_unknownObjectRelease();
    uint64_t v16 = v18;
LABEL_8:

    return;
  }

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t sub_1000A5FB8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000A5FF8(void *a1, void *a2, char a3)
{
  id v5 = *(void **)(v3 + 24);
  id v6 = *(void **)(*(void *)(v3 + 16) + OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps);
  if (a3)
  {
    id v96 = *(id *)(v3 + 24);
    os_log_t v97 = *(os_log_t *)(v3 + 16);
    swift_errorRetain();
    os_log_type_t type = v6;
    id v18 = [v6 logger];
    NSString v19 = String._bridgeToObjectiveC()();
    int v20 = (void *)_convertErrorToNSError(_:)();
    [v18 logResultForEvent:v19 hardFailure:1 result:v20];

    if (qword_10032A250 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100080F90(v21, (uint64_t)qword_10032A258);
    os_log_type_t v22 = static os_log_type_t.error.getter();
    sub_10008FBAC(a2, 1);
    id v23 = a1;
    sub_10008FBAC(a2, 1);
    id v24 = v23;
    uint64_t v25 = Logger.logObject.getter();
    if (os_log_type_enabled(v25, v22))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v27 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 138412546;
      id v28 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v27 = v24;

      *(_WORD *)(v26 + 12) = 2112;
      swift_errorRetain();
      uint64_t v102 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v27[1] = v102;
      sub_10008FBB8(a2, 1);
      sub_10008FBB8(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v22, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: fail: %@ %@", (uint8_t *)v26, 0x16u);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10008FBB8(a2, 1);
      sub_10008FBB8(a2, 1);
    }

    uint64_t v102 = (uint64_t)a2;
    swift_errorRetain();
    sub_100080E08(&qword_10031F4C0);
    type metadata accessor for CKError(0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      sub_10008FBAC(a2, 1);
      id v43 = v24;
      sub_10008FBAC(a2, 1);
      id v44 = v43;
      Class v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = swift_slowAlloc();
        Class v48 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v47 = 138412546;
        id v49 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *Class v48 = v44;

        *(_WORD *)(v47 + 12) = 2112;
        swift_errorRetain();
        uint64_t v102 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v48[1] = v102;
        sub_10008FBB8(a2, 1);
        sub_10008FBB8(a2, 1);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: fail: %@ %@", (uint8_t *)v47, 0x16u);
        sub_100080E08((uint64_t *)&unk_100320B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10008FBB8(a2, 1);
        sub_10008FBB8(a2, 1);
      }

      unint64_t v50 = (void *)_convertErrorToNSError(_:)();
      [v97 setError:v50];
      sub_10008FBB8(a2, 1);

      return;
    }
    uint64_t v33 = v101;
    sub_1000A77E4(&qword_10031F9C0, type metadata accessor for CKError);
    _BridgedStoredNSError.code.getter();
    switch(v102)
    {
      case 11:
        sub_10008FBAC(a2, 1);
        id v51 = v24;
        sub_10008FBAC(a2, 1);
        id v52 = v51;
        id v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.error.getter();
        unint64_t v99 = v53;
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v55 = swift_slowAlloc();
          os_log_type_t v56 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v55 = 138412546;
          uint64_t v57 = v33;
          id v58 = v52;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v56 = v52;

          uint64_t v33 = v57;
          *(_WORD *)(v55 + 12) = 2112;
          swift_errorRetain();
          uint64_t v101 = (void *)_swift_stdlib_bridgeErrorToNSError();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v56[1] = v101;
          sub_10008FBB8(a2, 1);
          sub_10008FBB8(a2, 1);
          _os_log_impl((void *)&_mh_execute_header, v99, v54, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: deleted: %@ %@", (uint8_t *)v55, 0x16u);
          sub_100080E08((uint64_t *)&unk_100320B30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10008FBB8(a2, 1);
          sub_10008FBB8(a2, 1);
        }

        uint64_t v85 = related decl 'e' for CKErrorCode.ancestorRecord.getter();
        if (v85)
        {
          uint64_t v86 = (void *)v85;
          [v96 deleteRecordWithCkrecord:v85];
          sub_10008FBB8(a2, 1);

LABEL_45:
          return;
        }
        break;
      case 26:
        type metadata accessor for KTCKZone();
        uint64_t v59 = sub_100088420((uint64_t)objc_retain(*(id *)((char *)&v97->isa
                                                       + OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_context)));
        id v60 = [v24 zoneID];
        id v61 = [v60 zoneName];

        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v64 = v63;

        (*(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), void))(*(void *)v59 + 120))(v62, v64, sub_10008CB30, 0);
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v65 = objc_allocWithZone((Class)KTPendingFlag);
        NSString v66 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v67 = [v65 initWithFlag:v66 delayInSeconds:0.1];

        id v68 = v24;
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v69, v70))
        {
          uint64_t v71 = (uint8_t *)swift_slowAlloc();
          uint64_t v101 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v71 = 136315138;
          id v72 = [v68 zoneID];
          id v73 = [v72 zoneName];

          uint64_t v74 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v76 = v75;

          sub_10008D114(v74, v76, (uint64_t *)&v101);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v69, v70, "will recreate the zone %s", v71, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        id v87 = [type flagHandler];
        if (v87)
        {
          [v87 handlePendingFlag:v67];
          sub_10008FBB8(a2, 1);

          swift_unknownObjectRelease();
        }
        else
        {
          sub_10008FBB8(a2, 1);
        }
        swift_release();
        return;
      case 14:
        uint64_t v34 = related decl 'e' for CKErrorCode.serverRecord.getter();
        if (v34)
        {
          id v35 = (void *)v34;
          sub_10008FBAC(a2, 1);
          id v36 = v24;
          sub_10008FBAC(a2, 1);
          id v37 = v36;
          os_log_type_t v38 = Logger.logObject.getter();
          os_log_type_t v39 = static os_log_type_t.error.getter();
          uint64_t v98 = v38;
          if (os_log_type_enabled(v38, v39))
          {
            uint64_t v40 = swift_slowAlloc();
            unint64_t v41 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v40 = 138412546;
            id v42 = v37;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *unint64_t v41 = v37;

            *(_WORD *)(v40 + 12) = 2112;
            swift_errorRetain();
            uint64_t v101 = (void *)_swift_stdlib_bridgeErrorToNSError();
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v41[1] = v101;
            sub_10008FBB8(a2, 1);
            sub_10008FBB8(a2, 1);
            _os_log_impl((void *)&_mh_execute_header, v98, v39, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: serverRecord: %@ %@", (uint8_t *)v40, 0x16u);
            sub_100080E08((uint64_t *)&unk_100320B30);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            sub_10008FBB8(a2, 1);
            sub_10008FBB8(a2, 1);
          }

          char v88 = v96;
          [v96 updatedRecordWithCkrecord:v35];
          CKRecord.recordType.getter();
          NSString v90 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          sub_100080E08(&qword_100320D40);
          uint64_t v93 = swift_allocObject();
          *(_OWORD *)(v93 + 16) = xmmword_100287920;
          *(void *)(v93 + 32) = [v35 recordID];
          uint64_t v101 = (void *)v93;
          specialized Array._endMutation()();
          sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
          v92.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
        break;
      default:
        sub_10008FBAC(a2, 1);
        id v77 = v24;
        sub_10008FBAC(a2, 1);
        id v78 = v77;
        Class v79 = Logger.logObject.getter();
        os_log_type_t v80 = static os_log_type_t.error.getter();
        uint64_t v100 = v79;
        if (os_log_type_enabled(v79, v80))
        {
          uint64_t v81 = swift_slowAlloc();
          uint64_t v82 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v81 = 138412546;
          uint64_t v83 = v33;
          id v84 = v78;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v82 = v78;

          uint64_t v33 = v83;
          *(_WORD *)(v81 + 12) = 2112;
          swift_errorRetain();
          uint64_t v101 = (void *)_swift_stdlib_bridgeErrorToNSError();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v82[1] = v101;
          sub_10008FBB8(a2, 1);
          sub_10008FBB8(a2, 1);
          _os_log_impl((void *)&_mh_execute_header, v100, v80, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: ck fail: %@ %@", (uint8_t *)v81, 0x16u);
          sub_100080E08((uint64_t *)&unk_100320B30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10008FBB8(a2, 1);
          sub_10008FBB8(a2, 1);
        }
        char v88 = v96;

        uint64_t v89 = related decl 'e' for CKErrorCode.ancestorRecord.getter();
        if (v89)
        {
          id v35 = (void *)v89;
          CKRecord.recordType.getter();
          NSString v90 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          sub_100080E08(&qword_100320D40);
          uint64_t v91 = swift_allocObject();
          *(_OWORD *)(v91 + 16) = xmmword_100287920;
          *(void *)(v91 + 32) = [v35 recordID];
          uint64_t v101 = (void *)v91;
          specialized Array._endMutation()();
          sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
          v92.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
LABEL_44:
          NSString v94 = String._bridgeToObjectiveC()();
          [v88 recordUpdateCloudStateWithType:v90 records:v92.super.isa newState:v94];
          sub_10008FBB8(a2, 1);

          goto LABEL_45;
        }
        break;
    }
    sub_10008FBB8(a2, 1);
    goto LABEL_45;
  }
  id v7 = a2;
  id v8 = [v6 logger];
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 logResultForEvent:v9 hardFailure:0 result:0];

  if (qword_10032A250 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100080F90(v10, (uint64_t)qword_10032A258);
  os_log_type_t v11 = static os_log_type_t.info.getter();
  id v12 = v7;
  id v13 = Logger.logObject.getter();
  if (os_log_type_enabled(v13, v11))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    id v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 138412290;
    uint64_t v102 = (uint64_t)v12;
    id v16 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v15 = a2;
    sub_10008FBB8(a2, 0);
    sub_10008FBB8(a2, 0);
    _os_log_impl((void *)&_mh_execute_header, v13, v11, "KTUpdateCloudDeviceOperation:perRecordSaveBlock: success: %@", v14, 0xCu);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10008FBB8(a2, 0);
    sub_10008FBB8(a2, 0);
  }

  [v5 updatedRecordWithCkrecord:v12];
  CKRecord.recordType.getter();
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100080E08(&qword_100320D40);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_100287920;
  *(void *)(v30 + 32) = [v12 recordID];
  uint64_t v102 = v30;
  specialized Array._endMutation()();
  sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v32 = String._bridgeToObjectiveC()();
  [v5 recordUpdateCloudStateWithType:v29 records:isa newState:v32];

  sub_10008FBB8(a2, 0);
}

uint64_t sub_1000A720C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000A724C(uint64_t a1, char a2)
{
  id v4 = *(char **)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 24);
  if (a2)
  {
    swift_errorRetain();
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    [v4 setError:v10];

    if (qword_10032A250 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100080F90(v11, (uint64_t)qword_10032A258);
    os_log_type_t v12 = static os_log_type_t.error.getter();
    swift_errorRetain();
    swift_errorRetain();
    id v13 = Logger.logObject.getter();
    os_log_type_t v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      id v16 = (void *)swift_slowAlloc();
      *(_DWORD *)id v15 = 138412290;
      swift_errorRetain();
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v16 = v27;
      sub_10008FBA0(a1, 1);
      sub_10008FBA0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "KTUpdateCloudDeviceOperation:modifyRecordsResultBlock: fail: %@", v15, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10008FBA0(a1, 1);
      sub_10008FBA0(a1, 1);
    }

    uint64_t v17 = *(void **)&v4[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps];
    id v18 = [v17 reachabilityTracker];
    NSString v19 = (void *)_convertErrorToNSError(_:)();
    unsigned int v20 = [v18 isNetworkError:v19];

    if (v20) {
      uint64_t v21 = 2;
    }
    else {
      uint64_t v21 = 0;
    }
    id v22 = objc_allocWithZone((Class)KTPendingFlag);
    NSString v23 = String._bridgeToObjectiveC()();
    id v24 = [v22 initWithFlag:v23 conditions:v21 delayInSeconds:0.2];

    id v25 = [v17 flagHandler];
    if (v25)
    {
      [v25 handlePendingFlag:v24];
      sub_10008FBA0(a1, 1);
      swift_unknownObjectRelease();
    }
    else
    {
      sub_10008FBA0(a1, 1);
    }
  }
  else
  {
    if (qword_10032A250 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100080F90(v5, (uint64_t)qword_10032A258);
    id v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "KTUpdateCloudDeviceOperation:modifyRecordsResultBlock: success", v8, 2u);
      swift_slowDealloc();
    }

    [objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC13transparencyd28KTUpdateCloudDeviceOperation_deps], "networkTimeout") networkWithFeedback:0];
    swift_unknownObjectRelease();
  }
  id v26 = [v4 operationQueue];
  [v26 addOperation:v3];
}

void KTUpdateCloudDeviceOperation.init()()
{
}

id KTUpdateCloudDeviceOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTUpdateCloudDeviceOperation();
  return [super dealloc];
}

uint64_t sub_1000A779C()
{
  return sub_1000A77E4((unint64_t *)&unk_10031F9E0, type metadata accessor for CKError);
}

uint64_t sub_1000A77E4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A782C()
{
  return sub_1000A77E4((unint64_t *)&unk_100320B50, type metadata accessor for CKError);
}

uint64_t sub_1000A7874()
{
  return sub_1000A77E4((unint64_t *)&unk_10031F9F0, type metadata accessor for CKError);
}

uint64_t sub_1000A78BC()
{
  return sub_1000A77E4((unint64_t *)&unk_100320B60, type metadata accessor for CKError);
}

uint64_t sub_1000A7904()
{
  return sub_1000A77E4((unint64_t *)&unk_10031FA00, type metadata accessor for CKError);
}

uint64_t sub_1000A794C()
{
  return sub_1000A77E4((unint64_t *)&unk_100320B70, _s3__C4CodeOMa_0);
}

uint64_t sub_1000A7994()
{
  return sub_1000A77E4((unint64_t *)&unk_10031FA10, _s3__C4CodeOMa_0);
}

uint64_t sub_1000A79DC()
{
  return sub_1000A77E4((unint64_t *)&unk_10031FA20, _s3__C4CodeOMa_0);
}

uint64_t sub_1000A7A24()
{
  return sub_1000A77E4(&qword_10031F9C0, type metadata accessor for CKError);
}

uint64_t *sub_1000A7A6C()
{
  return &qword_100320BA0;
}

uint64_t sub_1000A7A78()
{
  swift_beginAccess();
  uint64_t v0 = qword_100320BA0;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000A7ACC(uint64_t a1, char *a2)
{
  qword_100320BA0 = a1;
  off_100320BA8 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000A7B28())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000A7B80(uint64_t a1)
{
  return sub_1000AAC58(a1);
}

unint64_t sub_1000A7B9C()
{
  return 0xD000000000000020;
}

Swift::Int sub_1000A7BB8()
{
  return Hasher._finalize()();
}

uint64_t sub_1000A7C1C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000AB854();

  return _BridgedNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000A7C68@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000AAC58(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000A7C9C(uint64_t a1)
{
  unint64_t v2 = sub_1000AB854();

  return _BridgedNSError._domain.getter(a1, v2);
}

uint64_t sub_1000A7CD8(uint64_t a1)
{
  unint64_t v2 = sub_1000AB854();

  return _BridgedNSError._code.getter(a1, v2);
}

uint64_t sub_1000A7D14(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000AB598();
  unint64_t v5 = sub_100089BBC();

  return CustomNSError<>.errorCode.getter(a1, a2, v4, v5);
}

uint64_t sub_1000A7D6C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1000AB854();

  return _BridgedNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000A7DC0(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t sub_1000A7DC8(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t sub_1000A7DD0(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

Swift::Int *eligibilityDBDataLifetimeDays.unsafeMutableAddressor()
{
  return &eligibilityDBDataLifetimeDays;
}

unint64_t static KTEligibilityDB.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return (unint64_t)static KTSwiftDB.== infix(_:_:)(*(void *)(a1 + 24), *(void *)(a2 + 24)) & 1;
}

uint64_t sub_1000A7E30()
{
  return swift_retain();
}

id sub_1000A7E38()
{
  return *(id *)(v0 + 32);
}

uint64_t variable initialization expression of KTEligibilityDB.logger()
{
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000A7E78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd15KTEligibilityDB_logger;
  uint64_t v4 = type metadata accessor for Logger();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t KTEligibilityDB.__allocating_init(path:)(char *a1)
{
  uint64_t v2 = swift_allocObject();
  KTEligibilityDB.init(path:)(a1);
  return v2;
}

void *KTEligibilityDB.init(path:)(char *a1)
{
  uint64_t v2 = v1;
  v32[0] = *v1;
  uint64_t v37 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  id v35 = *(void **)(v37 - 8);
  __chkstk_darwin(v37);
  id v36 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for OS_dispatch_queue_serial.Attributes();
  __chkstk_darwin(v33);
  uint64_t v34 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  v32[1] = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v39 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100080E08(&qword_10031F4B0);
  __chkstk_darwin(v11 - 8);
  id v13 = (char *)v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 1;
  os_log_type_t v14 = (char *)v2 + OBJC_IVAR____TtC13transparencyd15KTEligibilityDB_logger;
  id v15 = a1;
  Logger.init(subsystem:category:)();
  type metadata accessor for KTSwiftDB();
  id v16 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v16(v13, (uint64_t)v15, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v13, 0, 1, v8);
  uint64_t v17 = KTSwiftDB.__allocating_init(url:)((uint64_t)v13);
  if (v17)
  {
    os_log_type_t v39 = (char *)v8;
    v2[3] = v17;
    sub_1000AACC0();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    unint64_t v41 = _swiftEmptyArrayStorage;
    sub_1000AB644((unint64_t *)&unk_1003212E0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes);
    sub_100080E08(&qword_100320BD0);
    sub_1000AAD00();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    ((void (*)(char *, void, uint64_t))v35[13])(v36, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v37);
    v2[4] = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
    id v18 = v38;
    OS_dispatch_queue.sync<A>(execute:)();
    if (v18)
    {
      swift_release();
      swift_release();
      (*(void (**)(char *, char *))(v9 + 8))(v15, v39);
    }
    else
    {
      (*(void (**)(char *, char *))(v9 + 8))(v15, v39);
      swift_release();
    }
  }
  else
  {
    os_log_type_t v19 = static os_log_type_t.error.getter();
    unsigned int v20 = v15;
    os_log_type_t v21 = v19;
    os_log_type_t v38 = v20;
    ((void (*)(char *))v16)(v39);
    uint64_t v37 = (uint64_t)v14;
    id v22 = Logger.logObject.getter();
    uint64_t v23 = v8;
    if (os_log_type_enabled(v22, v21))
    {
      LODWORD(v36) = v21;
      id v24 = (uint8_t *)swift_slowAlloc();
      id v35 = (void *)swift_slowAlloc();
      unint64_t v41 = v35;
      *(_DWORD *)id v24 = 136315138;
      sub_1000AB644(&qword_100320BC0, (void (*)(uint64_t))&type metadata accessor for URL);
      id v25 = v39;
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = sub_10008D114(v26, v27, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v28 = *(void (**)(char *, uint64_t))(v9 + 8);
      v28(v25, v23);
      _os_log_impl((void *)&_mh_execute_header, v22, (os_log_type_t)v36, "No database at path %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v28 = *(void (**)(char *, uint64_t))(v9 + 8);
      v28(v39, v8);
    }

    sub_1000AAC6C();
    swift_allocError();
    void *v29 = 1;
    swift_willThrow();
    v28(v38, v23);
    uint64_t v30 = type metadata accessor for Logger();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v37, v30);
    swift_deallocPartialClassInstance();
  }
  return v2;
}

uint64_t sub_1000A8628()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

void sub_1000A8670()
{
  sub_100088200();
  if (!v0)
  {
    sub_100088200();
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    sub_100088200();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000A877C()
{
  Swift::String v1 = *(NSObject **)(v0 + 32);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1000AAD78;
  *(void *)(v2 + 24) = v0;
  void v5[4] = sub_100091FB0;
  void v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100091FD8;
  v5[3] = &unk_1002BE958;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A88B0()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000A8908()
{
  sub_100080E08(&qword_100320BD8);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    return v2;
  }
  return result;
}

void sub_1000A8988(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v6 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008828C();
  if (v3) {
    return;
  }
  id v49 = v15;
  uint64_t v50 = (uint64_t)v11;
  Class v48 = v9;
  uint64_t v51 = v12;
  uint64_t v52 = v13;
  uint64_t v17 = v16;
  uint64_t v18 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v16 + 104))(0, a1, v53);
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 160))(v18);
  uint64_t v20 = v19;
  uint64_t v53 = v17;
  if (!v19)
  {
    swift_release();
    *a3 = 0;
    return;
  }
  os_log_type_t v21 = *(void (**)(void))(*(void *)v19 + 96);
  swift_retain_n();
  uint64_t v22 = ((uint64_t (*)(void))v21)(0);
  if (!v23)
  {
LABEL_9:
    swift_release();
    goto LABEL_10;
  }
  uint64_t v24 = v22;
  uint64_t v25 = v23;
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 104))(1);
  if ((v26 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v46 = v26;
  uint64_t v47 = v21;
  uint64_t v27 = v50;
  (*(void (**)(uint64_t))(*(void *)v20 + 120))(2);
  uint64_t v28 = v51;
  uint64_t v29 = v52;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v27, 1, v51) == 1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000ABA80(v27);
LABEL_10:
    sub_1000AAC6C();
    swift_allocError();
    void *v30 = 3;
    swift_willThrow();
    swift_release();
    swift_release_n();
    return;
  }
  uint64_t v44 = v24;
  uint64_t v45 = v25;
  uint64_t v31 = v49;
  (*(void (**)(void))(v29 + 32))();
  v47(3);
  if (!v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
    swift_release();
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 112))(4);
  char v35 = v34;
  swift_release();
  if (v35)
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v49, v51);
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v36 = v52;
  if (v46)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for KTEligibilityStatusResult(0);
    uint64_t v37 = (uint64_t)v48;
    uint64_t v38 = v51;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v48, v49, v51);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v38);
    uint64_t v50 = (uint64_t)sub_1000EB2EC(v44, v45, v37);
  }
  else
  {
    id v39 = objc_allocWithZone((Class)NSError);
    NSString v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v41 = [v39 initWithDomain:v40 code:v33 userInfo:0];

    uint64_t v50 = type metadata accessor for KTEligibilityStatusResult(0);
    uint64_t v37 = (uint64_t)v48;
    uint64_t v38 = v51;
    (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v48, v49, v51);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v38);
    uint64_t v50 = (uint64_t)sub_1000EB5FC(v44, v45, v41, v37);
  }
  swift_bridgeObjectRelease();
  uint64_t v42 = sub_1000ABA80(v37);
  (*(void (**)(uint64_t))(*(void *)v53 + 96))(v42);
  swift_release_n();
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v49, v38);
  *a3 = v50;
}

uint64_t sub_1000A8F64()
{
  OS_dispatch_queue.sync<A>(execute:)();
  if (!v0) {
    char v1 = v3;
  }
  return v1 & 1;
}

void sub_1000A8FD8(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>, double a8@<D0>)
{
  uint64_t v94 = a6;
  uint64_t v95 = a4;
  uint64_t v96 = a5;
  unint64_t v97 = a3;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  sub_10008828C();
  if (v8) {
    return;
  }
  uint64_t v17 = v16;
  NSArray v92 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = a1;
  NSString v90 = a7;
  uint64_t v91 = a2;
  uint64_t v98 = 0;
  uint64_t v18 = v16 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000;
  if (v97) {
    (*(void (**)(void, uint64_t))(*(void *)v16 + 104))(0, v91);
  }
  else {
    (*(void (**)(void, uint64_t))(*(void *)v16 + 104))(0, 37);
  }
  uint64_t v19 = v13;
  uint64_t v20 = v92;
  uint64_t v21 = v96;
  uint64_t v96 = v18;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 128))(1, v95);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1000A9B4C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v95 = v22 + 16;
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v17;
  *(unsigned char *)(v23 + 16) = 0;
  NSArray v92 = (char *)(v23 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v20, v21, v19);
  unint64_t v25 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v26 = v20;
  unint64_t v27 = (v15 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v93;
  *(void *)(v28 + 24) = v23;
  uint64_t v29 = v26;
  uint64_t v30 = v23;
  uint64_t v31 = (char *)v22;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v28 + v25, v29, v19);
  *(void *)(v28 + v27) = v22;
  uint64_t v32 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(*(void *)v24 + 152);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v33 = v98;
  v32(sub_1000AB9E0, v28);
  uint64_t v98 = v33;
  if (v33)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return;
  }
  char v34 = v92;
  uint64_t v89 = v30;
  uint64_t v96 = v24;
  swift_release();
  uint64_t v35 = v95;
  swift_beginAccess();
  uint64_t v36 = *(void *)(*(void *)v35 + 16);
  if (!v36 || (swift_beginAccess(), *v34 == 1))
  {
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "No elements or elements have failures. Returning aggregate result of false", v39, 2u);
      swift_slowDealloc();
    }

    swift_release();
    swift_release();
LABEL_63:
    swift_release();
    *NSString v90 = 0;
    return;
  }
  unint64_t v40 = v97;
  if (v97)
  {
    swift_bridgeObjectRetain();
    uint64_t v41 = v91;
    sub_100089D6C(v91, v40);
    uint64_t v42 = v94;
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      unint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        id v78 = (uint8_t *)swift_slowAlloc();
        uint64_t v100 = swift_slowAlloc();
        *(_DWORD *)id v78 = 136446210;
        swift_bridgeObjectRetain();
        double v99 = COERCE_DOUBLE(sub_10008D114(v41, v40, &v100));
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "No entries for given element %{public}s. Returning aggregate result of false", v78, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
LABEL_53:
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_bridgeObjectRelease_n();
      }

      goto LABEL_63;
    }
    NSArray v92 = v31;
    unint64_t v44 = v40;
    swift_bridgeObjectRelease();
LABEL_17:
    int64_t v46 = 0;
    uint64_t v47 = *(void *)v35;
    uint64_t v48 = *(void *)v35 + 64;
    uint64_t v49 = 1 << *(unsigned char *)(*(void *)v35 + 32);
    uint64_t v50 = -1;
    if (v49 < 64) {
      uint64_t v50 = ~(-1 << v49);
    }
    unint64_t v51 = v50 & *(void *)(*(void *)v35 + 64);
    int64_t v52 = (unint64_t)(v49 + 63) >> 6;
    double v53 = (double)v42;
    unint64_t v54 = v44;
    while (1)
    {
      if (v51)
      {
        unint64_t v55 = __clz(__rbit64(v51));
        v51 &= v51 - 1;
        unint64_t v56 = v55 | (v46 << 6);
      }
      else
      {
        int64_t v57 = v46 + 1;
        if (__OFADD__(v46, 1))
        {
          __break(1u);
LABEL_66:
          __break(1u);
          return;
        }
        if (v57 >= v52) {
          goto LABEL_56;
        }
        unint64_t v58 = *(void *)(v48 + 8 * v57);
        ++v46;
        if (!v58)
        {
          int64_t v46 = v57 + 1;
          if (v57 + 1 >= v52) {
            goto LABEL_56;
          }
          unint64_t v58 = *(void *)(v48 + 8 * v46);
          if (!v58)
          {
            int64_t v46 = v57 + 2;
            if (v57 + 2 >= v52) {
              goto LABEL_56;
            }
            unint64_t v58 = *(void *)(v48 + 8 * v46);
            if (!v58)
            {
              int64_t v59 = v57 + 3;
              if (v59 >= v52)
              {
LABEL_56:
                uint64_t v86 = Logger.logObject.getter();
                os_log_type_t v87 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v86, v87))
                {
                  char v88 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)char v88 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v86, v87, "Returning aggregate result of true", v88, 2u);
                  swift_slowDealloc();
                }

                swift_release();
                swift_release();
                swift_release();
                *NSString v90 = 1;
                return;
              }
              unint64_t v58 = *(void *)(v48 + 8 * v59);
              if (!v58)
              {
                while (1)
                {
                  int64_t v46 = v59 + 1;
                  if (__OFADD__(v59, 1)) {
                    goto LABEL_66;
                  }
                  if (v46 >= v52) {
                    goto LABEL_56;
                  }
                  unint64_t v58 = *(void *)(v48 + 8 * v46);
                  ++v59;
                  if (v58) {
                    goto LABEL_35;
                  }
                }
              }
              int64_t v46 = v59;
            }
          }
        }
LABEL_35:
        unint64_t v51 = (v58 - 1) & v58;
        unint64_t v56 = __clz(__rbit64(v58)) + (v46 << 6);
      }
      uint64_t v60 = 16 * v56;
      id v61 = (uint64_t *)(*(void *)(v47 + 48) + v60);
      uint64_t v62 = *v61;
      unint64_t v63 = v61[1];
      uint64_t v64 = *(void *)(v47 + 56) + v60;
      uint64_t v65 = *(void *)v64;
      char v66 = *(unsigned char *)(v64 + 8);
      if (v54)
      {
        if (v62 != v41 || v63 != v54)
        {
          unint64_t v68 = v54;
          unint64_t v97 = v61[1];
          uint64_t v69 = v47;
          uint64_t v70 = v62;
          uint64_t v71 = v48;
          char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v48 = v71;
          uint64_t v62 = v70;
          uint64_t v47 = v69;
          unint64_t v63 = v97;
          unint64_t v54 = v68;
          uint64_t v41 = v91;
          if ((v72 & 1) == 0)
          {
            swift_release();
            swift_release();
            goto LABEL_63;
          }
        }
      }
      if ((v66 & 1) == 0)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        unint64_t v76 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v76, v84))
        {
          uint64_t v85 = (uint8_t *)swift_slowAlloc();
          uint64_t v100 = swift_slowAlloc();
          *(_DWORD *)uint64_t v85 = 136446210;
          swift_bridgeObjectRetain();
          double v99 = COERCE_DOUBLE(sub_10008D114(v62, v63, &v100));
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v76, v84, "No success in the last sample for element %{public}s. Returning aggregate result of false", v85, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();
          swift_release();
          goto LABEL_53;
        }
        swift_release();
        swift_release();
        swift_release();

        goto LABEL_61;
      }
      if ((double)v65 / v53 < a8)
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        id v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v73, v74))
        {
          uint64_t v75 = swift_slowAlloc();
          uint64_t v100 = swift_slowAlloc();
          *(_DWORD *)uint64_t v75 = 134218242;
          double v99 = (double)v65 / v53;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v75 + 12) = 2082;
          swift_bridgeObjectRetain();
          double v99 = COERCE_DOUBLE(sub_10008D114(v62, v63, &v100));
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v73, v74, "Present rate of %f is too low for element %{public}s. Returning aggregate result of false", (uint8_t *)v75, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();
          swift_release();
          swift_release();

          goto LABEL_63;
        }
        swift_release();
        swift_release();
        swift_release();

LABEL_61:
        swift_bridgeObjectRelease_n();
        goto LABEL_63;
      }
    }
  }
  unint64_t v44 = 0;
  uint64_t v45 = sub_1000EC430();
  uint64_t v41 = v91;
  uint64_t v42 = v94;
  if (v36 == *(void *)(*v45 + 16))
  {
    NSArray v92 = v31;
    goto LABEL_17;
  }
  Class v79 = Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.error.getter();
  BOOL v81 = os_log_type_enabled(v79, v80);
  uint64_t v82 = v90;
  if (v81)
  {
    uint64_t v83 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v83 = 0;
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "At least one missing element. Returning aggregate result of false", v83, 2u);
    swift_slowDealloc();
  }

  swift_release();
  swift_release();
  swift_release();
  *uint64_t v82 = 0;
}

unint64_t sub_1000A9B4C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_100320CE0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 3);
    uint64_t v6 = *((void *)v4 - 2);
    uint64_t v7 = *((void *)v4 - 1);
    char v8 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_100089D6C(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = v2[7] + 16 * result;
    *(void *)uint64_t v12 = v7;
    *(unsigned char *)(v12 + 8) = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 32;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000A9C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v41 = a5;
  uint64_t v42 = a4;
  uint64_t v7 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  BOOL v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v43 = (char *)&v40 - v15;
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(1);
  uint64_t v17 = (*(uint64_t (**)(void))(*(void *)a1 + 96))(0);
  if (!v18) {
    return 0;
  }
  uint64_t v19 = v17;
  unint64_t v20 = v18;
  (*(void (**)(uint64_t))(*(void *)a1 + 120))(2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    swift_bridgeObjectRelease();
    sub_1000ABA80((uint64_t)v9);
    return 0;
  }
  uint64_t v40 = v19;
  uint64_t v23 = v16 & 0x1FFFFFFFFLL;
  uint64_t v24 = v43;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v43, v9, v10);
  uint64_t v25 = v11;
  if (v23 != 1)
  {
    uint64_t v36 = (unsigned char *)(a3 + 16);
    swift_bridgeObjectRetain();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      id v39 = (uint8_t *)swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      *(_DWORD *)id v39 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v44 = sub_10008D114(v40, v20, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failure found for element %{public}s when checking on-by-default eligibility", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v36 = (unsigned char *)(a3 + 16);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v43, v10);
    uint64_t v21 = 1;
    swift_beginAccess();
    unsigned char *v36 = 1;
    return v21;
  }
  uint64_t v26 = (uint64_t *)(v41 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v42, v10);
  uint64_t v27 = Date.compare(_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v25 + 8);
  v28(v14, v10);
  swift_beginAccess();
  uint64_t v29 = *v26;
  if (!*(void *)(*v26 + 16)) {
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  unint64_t v30 = sub_100089D6C(v40, v20);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    swift_endAccess();
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v44 = *v26;
    *uint64_t v26 = 0x8000000000000000;
    uint64_t v34 = 1;
    char v35 = v27 == 1;
    goto LABEL_17;
  }
  uint64_t v32 = *(void *)(*(void *)(v29 + 56) + 16 * v30);
  swift_endAccess();
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v32, 1))
  {
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v44 = *v26;
    *uint64_t v26 = 0x8000000000000000;
    uint64_t v34 = v32 + 1;
    char v35 = v27 == 1;
LABEL_17:
    sub_1000AA90C(v34, v35, v40, v20, isUniquelyReferenced_nonNull_native);
    *uint64_t v26 = v44;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    v28(v24, v10);
    return 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AA1CC(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  void v3[6] = v2;
  void v3[4] = a1;
  return _swift_task_switch(sub_1000AA1F0, 0, 0);
}

uint64_t sub_1000AA1F0()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = v0[4];
  uint64_t v4 = (void *)swift_task_alloc();
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  sub_100080E08(&qword_100320BE8);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_task_dealloc();
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v7(v5, v6);
}

uint64_t sub_1000AA310()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1000AA374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v5[5] = a4;
  void v5[6] = v4;
  v5[3] = a2;
  void v5[4] = a3;
  v5[2] = a1;
  return _swift_task_switch(sub_1000AA39C, 0, 0);
}

uint64_t sub_1000AA39C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  long long v7 = *(_OWORD *)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v1;
  *(_OWORD *)(v4 + 24) = v7;
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v2;
  OS_dispatch_queue.sync<A>(execute:)();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t KTEligibilityDB.deinit()
{
  swift_release();

  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd15KTEligibilityDB_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t KTEligibilityDB.__deallocating_deinit()
{
  swift_release();

  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC13transparencyd15KTEligibilityDB_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *((unsigned int *)*v0 + 12);
  uint64_t v4 = *((unsigned __int16 *)*v0 + 26);

  return _swift_deallocClassInstance(v0, v3, v4);
}

unint64_t sub_1000AA59C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  type metadata accessor for KTSwiftDB();
  return (unint64_t)static KTSwiftDB.== infix(_:_:)(*(void *)(v2 + 24), *(void *)(v3 + 24)) & 1;
}

uint64_t sub_1000AA5E4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100080E08(&qword_100320CE0);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = *(void *)(v5 + 56) + v31;
    uint64_t v36 = *(void *)v35;
    char v37 = *(unsigned char *)(v35 + 8);
    if ((v42 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    void *v19 = v34;
    v19[1] = v33;
    uint64_t v20 = *(void *)(v7 + 56) + v18;
    *(void *)uint64_t v20 = v36;
    *(unsigned char *)(v20 + 8) = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000AA90C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100089D6C(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= result && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1000AAA9C();
LABEL_7:
    uint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7] + 16 * v14;
      *(void *)uint64_t v21 = a1;
      *(unsigned char *)(v21 + 8) = a2 & 1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1000AA5E4(result, a5 & 1);
  uint64_t result = sub_100089D6C(a3, a4);
  if ((v18 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = result;
  uint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  int64_t v23 = (uint64_t *)(v20[6] + 16 * v14);
  *int64_t v23 = a3;
  v23[1] = a4;
  uint64_t v24 = v20[7] + 16 * v14;
  *(void *)uint64_t v24 = a1;
  *(unsigned char *)(v24 + 8) = a2 & 1;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v27;

  return swift_bridgeObjectRetain();
}

void *sub_1000AAA9C()
{
  uint64_t v1 = v0;
  sub_100080E08(&qword_100320CE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = *(void *)(v2 + 56) + v16;
    uint64_t v21 = *(void *)v20;
    LOBYTE(v20) = *(unsigned char *)(v20 + 8);
    char v22 = (void *)(*(void *)(v4 + 48) + v16);
    *char v22 = v19;
    v22[1] = v18;
    uint64_t v23 = *(void *)(v4 + 56) + v16;
    *(void *)uint64_t v23 = v21;
    *(unsigned char *)(v23 + 8) = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000AAC58(uint64_t result)
{
  if ((unint64_t)(result - 12) < 0xFFFFFFFFFFFFFFF5) {
    return 0;
  }
  return result;
}

unint64_t sub_1000AAC6C()
{
  unint64_t result = qword_100320BB8;
  if (!qword_100320BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100320BB8);
  }
  return result;
}

unint64_t sub_1000AACC0()
{
  unint64_t result = qword_100320BC8;
  if (!qword_100320BC8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100320BC8);
  }
  return result;
}

unint64_t sub_1000AAD00()
{
  unint64_t result = qword_1003212F0;
  if (!qword_1003212F0)
  {
    sub_1000829FC(&qword_100320BD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003212F0);
  }
  return result;
}

void sub_1000AAD5C()
{
}

void sub_1000AAD78()
{
}

uint64_t sub_1000AAD9C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AADAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000AADBC()
{
  return swift_release();
}

void sub_1000AADC4()
{
  uint64_t v2 = *(void *)(v0 + 24);
  sub_10008828C();
  if (!v1)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(*(void *)v3 + 128))(0, v2);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 160))(v5))
    {
      swift_release();
      sub_1000AAC6C();
      swift_allocError();
      *uint64_t v6 = 4;
      swift_willThrow();
    }
    else
    {
      (*(void (**)(void))(*(void *)v4 + 96))();
    }
    swift_release();
  }
}

void sub_1000AAEE0(uint64_t *a1@<X8>)
{
  sub_1000A8988(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void sub_1000AAF00(unsigned char *a1@<X8>)
{
  sub_1000A8FD8(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), a1, *(double *)(v1 + 64));
}

void sub_1000AAF28(uint64_t *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  sub_10008828C();
  if (!v2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)v6 + 104))(0, v4, v5);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 160))(v8);
    if (v9)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*(void *)v9 + 96);
      swift_retain();
      uint64_t v11 = v10(0);
      if (v12)
      {
        uint64_t v13 = v11;
        uint64_t v14 = v12;
        (*(void (**)(void))(*(void *)v7 + 96))();
        swift_release_n();
        swift_release();
        *a1 = v13;
        a1[1] = v14;
      }
      else
      {
        sub_1000AAC6C();
        swift_allocError();
        *unint64_t v15 = 3;
        swift_willThrow();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      *a1 = 0;
      a1[1] = 0;
    }
  }
}

void sub_1000AB0E8()
{
  uint64_t v2 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void **)(v0 + 56);
  sub_10008828C();
  if (v1) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 104);
  v9(0, v3, v4);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)v8 + 112);
  v10(1, v2);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 128))(2, v5);
  if (v6)
  {
    uint64_t v19 = v10;
    id v12 = v6;
    id v13 = [v12 domain];
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    v9(3, v14, v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = (uint64_t)[v12 code];
    if (v17 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (v17 <= 0x7FFFFFFF)
    {
      v19(4, v17);

      goto LABEL_6;
    }
    __break(1u);
    return;
  }
LABEL_6:
  if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 160))(v11))
  {
    swift_release();
    sub_1000AAC6C();
    swift_allocError();
    *uint64_t v18 = 4;
    swift_willThrow();
  }
  else
  {
    (*(void (**)(void))(*(void *)v8 + 96))();
  }
  swift_release();
}

void sub_1000AB338()
{
  uint64_t v2 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[6];
  sub_10008828C();
  if (!v1)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 104);
    v8(0, v2, v4);
    uint64_t v9 = v8(1, v3, v5);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 160))(v9))
    {
      swift_release();
      sub_1000AAC6C();
      swift_allocError();
      void *v10 = 4;
      swift_willThrow();
    }
    else
    {
      (*(void (**)(void))(*(void *)v7 + 96))();
    }
    swift_release();
  }
}

unint64_t sub_1000AB48C()
{
  unint64_t result = qword_100320BF8;
  if (!qword_100320BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100320BF8);
  }
  return result;
}

unint64_t sub_1000AB4E8()
{
  unint64_t result = qword_100320C00;
  if (!qword_100320C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100320C00);
  }
  return result;
}

unint64_t sub_1000AB540()
{
  unint64_t result = qword_100320C08;
  if (!qword_100320C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100320C08);
  }
  return result;
}

unint64_t sub_1000AB598()
{
  unint64_t result = qword_100320C10;
  if (!qword_100320C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100320C10);
  }
  return result;
}

uint64_t sub_1000AB5EC(uint64_t a1)
{
  uint64_t result = sub_1000AB644(&qword_100320C18, (void (*)(uint64_t))type metadata accessor for KTEligibilityDB);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000AB644(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for KTEligibilityDB()
{
  uint64_t result = qword_10032AB70;
  if (!qword_10032AB70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for KTEligibilityError()
{
  return &type metadata for KTEligibilityError;
}

uint64_t getEnumTagSinglePayload for AggregateElementInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AggregateElementInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AggregateElementInfo()
{
  return &type metadata for AggregateElementInfo;
}

uint64_t sub_1000AB790()
{
  return type metadata accessor for KTEligibilityDB();
}

uint64_t sub_1000AB798()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000AB854()
{
  unint64_t result = qword_100320CD8;
  if (!qword_100320CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100320CD8);
  }
  return result;
}

uint64_t sub_1000AB8A8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AB8E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000AB8F0()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000AB9E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000A9C70(a1, v5, v6, v1 + v4, v7);
}

uint64_t sub_1000ABA80(uint64_t a1)
{
  uint64_t v2 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000ABAE0()
{
  return *(void *)(v0 + 48);
}

uint64_t sub_1000ABAEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CloudOptInData() + 32);

  return sub_1000985E0(v3, a1);
}

uint64_t type metadata accessor for CloudOptInData()
{
  uint64_t result = qword_10032ACB0;
  if (!qword_10032ACB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000ABB7C()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CloudOptInData() + 36));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000ABBBC()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CloudOptInData() + 40));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000ABBFC(char a1)
{
  return *(void *)&aRecordiduri[8 * a1];
}

uint64_t sub_1000ABC1C()
{
  return sub_1000ABBFC(*v0);
}

uint64_t sub_1000ABC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BFD04(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000ABC4C(uint64_t a1)
{
  unint64_t v2 = sub_1000ABF5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000ABC88(uint64_t a1)
{
  unint64_t v2 = sub_1000ABF5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000ABCC4(void *a1)
{
  uint64_t v3 = sub_100080E08(&qword_100320CE8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100097048(a1, a1[3]);
  sub_1000ABF5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for CloudOptInData();
    v8[11] = 4;
    type metadata accessor for Date();
    sub_1000C13C8(&qword_100320CF0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1000ABF5C()
{
  unint64_t result = qword_10032ABA0[0];
  if (!qword_10032ABA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10032ABA0);
  }
  return result;
}

uint64_t sub_1000ABFB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v4 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_100080E08(&qword_100320CF8);
  uint64_t v7 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for CloudOptInData();
  __chkstk_darwin(v10);
  id v12 = (uint64_t *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a1[3];
  uint64_t v34 = a1;
  sub_100097048(a1, v13);
  sub_1000ABF5C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10008FBC4((uint64_t)v34);
  }
  uint64_t v30 = v6;
  uint64_t v31 = v12;
  char v41 = 0;
  uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = (uint64_t)v31;
  uint64_t *v31 = v14;
  *(void *)(v15 + 8) = v16;
  char v40 = 1;
  *(void *)(v15 + 16) = KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v15 + 24) = v17;
  char v39 = 2;
  *(void *)(v15 + 32) = KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v15 + 40) = v18;
  char v38 = 3;
  *(void *)(v15 + 48) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  *(unsigned char *)(v15 + 56) = v19 & 1;
  type metadata accessor for Date();
  char v37 = 4;
  sub_1000C13C8((unint64_t *)&unk_100320680, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v20 = (uint64_t)v30;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_1000C1364(v20, v15 + v10[8], (uint64_t *)&unk_10031F9A0);
  char v36 = 5;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v22 = (uint64_t *)(v15 + v10[9]);
  *char v22 = v21;
  v22[1] = v23;
  char v35 = 6;
  uint64_t v24 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v33);
  uint64_t v27 = (uint64_t *)(v15 + v10[10]);
  uint64_t *v27 = v24;
  v27[1] = v26;
  sub_1000AC47C(v15, v32);
  sub_10008FBC4((uint64_t)v34);
  return sub_1000AC4E0(v15);
}

uint64_t sub_1000AC47C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudOptInData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AC4E0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CloudOptInData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000AC53C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(unsigned char *)(a9 + 56) = a8 & 1;
  uint64_t v15 = (int *)type metadata accessor for CloudOptInData();
  uint64_t result = sub_1000C1364(a10, a9 + v15[8], (uint64_t *)&unk_10031F9A0);
  uint64_t v17 = (void *)(a9 + v15[9]);
  void *v17 = a11;
  v17[1] = a12;
  uint64_t v18 = (void *)(a9 + v15[10]);
  *uint64_t v18 = a13;
  v18[1] = a14;
  return result;
}

uint64_t sub_1000AC5D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000ABFB0(a1, a2);
}

uint64_t sub_1000AC5EC(void *a1)
{
  return sub_1000ABCC4(a1);
}

uint64_t sub_1000AC604()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100087A78(v0, qword_10032AB88);
  sub_100080F90(v0, (uint64_t)qword_10032AB88);
  return Logger.init(transparencyCategory:)();
}

id sub_1000AC668()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [v1 uri];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v10 = [v1 application];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v11 = objc_allocWithZone((Class)KTOptInState);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v14 = [v11 initWithURI:v12 application:v13];

  id v15 = [v1 state];
  if (v15)
  {
    uint64_t v16 = v15;
    [v14 setState:[v15 unsignedIntegerValue]];
  }
  id v17 = [v1 smtTimestamp];
  if (v17)
  {
    uint64_t v18 = v17;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
    {
      Class isa = 0;
    }
    else
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    Class isa = 0;
  }
  [v14 setSmtTimestamp:isa];

  id v20 = [v1 osVersion];
  [v14 setOsVersion:v20];

  id v21 = [v1 serialNumber];
  [v14 setSerialNumber:v21];

  return v14;
}

uint64_t sub_1000AC9D8()
{
  return 0x6E4974704FLL;
}

id sub_1000AC9EC()
{
  return *(id *)(v0 + 48);
}

uint64_t sub_1000AC9F4()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000AC9FC()
{
  return swift_unknownObjectRetain();
}

void *sub_1000ACA04()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 72);
  id v2 = v1;
  return v1;
}

void sub_1000ACA48(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = a1;
}

uint64_t (*sub_1000ACA90())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000ACAE4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000ACB1C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000ACB64())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000ACBB8(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  sub_1000ACC28(a1, a2, a3, a4, a5);
  return v10;
}

void *sub_1000ACC28(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  v5[2] = 0x6E4974704FLL;
  v5[3] = 0xE500000000000000;
  v5[9] = 0;
  v5[12] = 0xE100000000000000;
  void v5[4] = a1;
  void v5[5] = a2;
  void v5[6] = a3;
  v5[7] = a4;
  v5[8] = a5;
  v5[10] = &_swiftEmptySetSingleton;
  v5[11] = 64;
  swift_beginAccess();
  id v9 = (void *)v5[9];
  v5[9] = 0;
  id v10 = a1;
  id v11 = a2;
  id v12 = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  id v13 = objc_allocWithZone((Class)KTNearFutureScheduler);
  swift_retain_n();
  NSString v14 = String._bridgeToObjectiveC()();
  aBlock[4] = sub_1000ACE44;
  id v20 = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000B8C74;
  aBlock[3] = &unk_1002BEAA8;
  id v15 = _Block_copy(aBlock);
  id v16 = [v13 initWithName:v14 initialDelay:2000000000 exponentialBackoff:3600000000000 maximumDelay:0 keepProcessAlive:0 dependencyDescriptionCode:v15 block:1.4];

  _Block_release(v15);
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  id v17 = (void *)v5[9];
  v5[9] = v16;

  return v5;
}

uint64_t sub_1000ACE38()
{
  return 64;
}

uint64_t sub_1000ACE44()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t sub_1000ACE68()
{
  uint64_t v1 = v0;
  if (qword_10032AB80 != -1) {
LABEL_32:
  }
    swift_once();
  uint64_t v2 = type metadata accessor for Logger();
  sub_100080F90(v2, (uint64_t)qword_10032AB88);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "updateMonitorWithNewAggregateState", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = (*(uint64_t (**)(void))(*v1 + 200))();
  uint64_t v7 = v6;
  int64_t v8 = 0;
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v6 + 56;
  unint64_t v12 = v10 & *(void *)(v6 + 56);
  int64_t v13 = (unint64_t)(v9 + 63) >> 6;
  while (v12)
  {
    unint64_t v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v15 = v14 | (v8 << 6);
LABEL_24:
    char v19 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    char v22 = *(uint64_t (**)(uint64_t, uint64_t))(*v1 + 264);
    swift_bridgeObjectRetain();
    uint64_t v23 = (void *)v22(v20, v21);
    swift_bridgeObjectRelease();
    if (v23)
    {
      uint64_t v24 = (void *)v1[8];
      if (v24) {
        [v24 updateAggregateOptIOState:v23];
      }
    }
  }
  int64_t v16 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v16 >= v13) {
    goto LABEL_27;
  }
  unint64_t v17 = *(void *)(v11 + 8 * v16);
  ++v8;
  if (v17) {
    goto LABEL_23;
  }
  int64_t v8 = v16 + 1;
  if (v16 + 1 >= v13) {
    goto LABEL_27;
  }
  unint64_t v17 = *(void *)(v11 + 8 * v8);
  if (v17) {
    goto LABEL_23;
  }
  int64_t v8 = v16 + 2;
  if (v16 + 2 >= v13) {
    goto LABEL_27;
  }
  unint64_t v17 = *(void *)(v11 + 8 * v8);
  if (v17)
  {
LABEL_23:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
    goto LABEL_24;
  }
  int64_t v18 = v16 + 3;
  if (v18 < v13)
  {
    unint64_t v17 = *(void *)(v11 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        int64_t v8 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_31;
        }
        if (v8 >= v13) {
          goto LABEL_27;
        }
        unint64_t v17 = *(void *)(v11 + 8 * v8);
        ++v18;
        if (v17) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v18;
    goto LABEL_23;
  }
LABEL_27:
  swift_release();
  uint64_t v25 = *(uint64_t (**)(void *))(*v1 + 208);

  return v25(&_swiftEmptySetSingleton);
}

Class sub_1000AD130(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for SHA256();
  *(void *)&long long v56 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SHA256Digest();
  uint64_t v54 = *(void *)(v11 - 8);
  uint64_t v55 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  double v53 = (char *)&v50 - v15;
  uint64_t v16 = type metadata accessor for String.Encoding();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  char v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v57 = a1;
  *((void *)&v57 + 1) = a2;
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = 47;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = a3;
  v21._object = a4;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v22 = String.data(using:allowLossyConversion:)();
  unint64_t v24 = v23;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  Class isa = 0;
  if (v24 >> 60 != 15)
  {
    sub_1000C13C8((unint64_t *)&unk_100320690, (void (*)(uint64_t))&type metadata accessor for SHA256);
    dispatch thunk of HashFunction.init()();
    unint64_t v51 = v24;
    switch(v24 >> 62)
    {
      case 1uLL:
        if (v22 >> 32 < (int)v22) {
          goto LABEL_27;
        }
        unint64_t v26 = v51;
        sub_100080C58(v22, v51);
        sub_1000A2204((int)v22, v22 >> 32);
LABEL_7:
        uint64_t v29 = v22;
        unint64_t v30 = v26;
        break;
      case 2uLL:
        unint64_t v26 = v24;
        uint64_t v27 = *(void *)(v22 + 16);
        uint64_t v28 = *(void *)(v22 + 24);
        sub_10008FC6C(v22, v26);
        swift_retain();
        swift_retain();
        sub_1000A2204(v27, v28);
        swift_release();
        swift_release();
        goto LABEL_7;
      case 3uLL:
        *(void *)((char *)&v57 + 6) = 0;
        *(void *)&long long v57 = 0;
        goto LABEL_9;
      default:
        *(void *)&long long v57 = v22;
        WORD4(v57) = v24;
        BYTE10(v57) = BYTE2(v24);
        BYTE11(v57) = BYTE3(v24);
        BYTE12(v57) = BYTE4(v24);
        BYTE13(v57) = BYTE5(v24);
LABEL_9:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        uint64_t v29 = v22;
        unint64_t v30 = v24;
        break;
    }
    sub_10008FCD4(v29, v30);
    uint64_t v31 = v53;
    dispatch thunk of HashFunction.finalize()();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v10, v8);
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v14, v31, v55);
    sub_1000C13C8(&qword_100320D00, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
    dispatch thunk of Sequence.makeIterator()();
    unint64_t v33 = *((void *)&v57 + 1);
    uint64_t v32 = v57;
    uint64_t v34 = *(void *)(v57 + 16);
    uint64_t v50 = v22;
    if (*((void *)&v57 + 1) != v34)
    {
      if (*((uint64_t *)&v57 + 1) < v34)
      {
        char v35 = (char *)&_swiftEmptyArrayStorage;
        long long v56 = xmmword_1002856F0;
        while ((v33 & 0x8000000000000000) == 0)
        {
          if (v33 >= *(void *)(v32 + 16)) {
            goto LABEL_25;
          }
          char v42 = *(unsigned char *)(v32 + 32 + v33);
          sub_100080E08((uint64_t *)&unk_1003206A0);
          uint64_t v43 = swift_allocObject();
          *(_OWORD *)(v43 + 16) = v56;
          *(void *)(v43 + 56) = &type metadata for UInt8;
          *(void *)(v43 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v43 + 32) = v42;
          uint64_t v44 = String.init(format:_:)();
          uint64_t v46 = v45;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v35 = sub_1000A0478(0, *((void *)v35 + 2) + 1, 1, v35);
          }
          unint64_t v48 = *((void *)v35 + 2);
          unint64_t v47 = *((void *)v35 + 3);
          if (v48 >= v47 >> 1) {
            char v35 = sub_1000A0478((char *)(v47 > 1), v48 + 1, 1, v35);
          }
          ++v33;
          *((void *)v35 + 2) = v48 + 1;
          uint64_t v49 = &v35[16 * v48];
          *((void *)v49 + 4) = v44;
          *((void *)v49 + 5) = v46;
          if (v34 == v33) {
            goto LABEL_12;
          }
        }
        __break(1u);
LABEL_25:
        __break(1u);
      }
      __break(1u);
LABEL_27:
      __break(1u);
    }
    char v35 = (char *)&_swiftEmptyArrayStorage;
LABEL_12:
    swift_bridgeObjectRelease();
    *(void *)&long long v57 = v35;
    sub_100080E08((uint64_t *)&unk_100320660);
    sub_1000C1468((unint64_t *)&qword_100321970, (uint64_t *)&unk_100320660);
    uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
    char v38 = v37;
    swift_bridgeObjectRelease();
    sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
    id v39 = *(id *)(v52 + 40);
    v40._countAndFlagsBits = v36;
    v40._object = v38;
    Class isa = CKRecordID.init(recordName:zoneID:)(v40, (CKRecordZoneID)v39).super.isa;
    sub_10008FCD4(v50, v51);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v55);
  }
  return isa;
}

uint64_t sub_1000AD830(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100080F90(v10, (uint64_t)qword_10032AB88);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v17 = a3;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_bridgeObjectRetain();
    sub_10008D114(a1, a2, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_10008D114(v17, a4, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "get record %s[%s]", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v14 = swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 152))(v14);
  __chkstk_darwin(v15);
  sub_100080E08(&qword_100320D08);
  NSManagedObjectContext.performAndWait<A>(_:)();

  return v18;
}

uint64_t sub_1000ADAE8(uint64_t a1)
{
  if (a1 < 0 || (a1 & 0x4000000000000000) != 0) {
    goto LABEL_26;
  }
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v14 = v2;
    sub_1000B8CD0(&v14);
    uint64_t v3 = v14;
    if (v14 < 0 || (v14 & 0x4000000000000000) != 0) {
      break;
    }
    unint64_t v4 = *(void *)(v14 + 16);
    swift_retain();
    if (!v4) {
      goto LABEL_28;
    }
LABEL_7:
    unint64_t v5 = v4 - 1;
    if (__OFSUB__(v4, 1))
    {
      __break(1u);
LABEL_31:
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_12;
    }
    unint64_t v1 = v3 & 0xC000000000000001;
    if ((v3 & 0xC000000000000001) != 0) {
      goto LABEL_31;
    }
    if ((v5 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    if (v5 >= *(void *)(v3 + 16)) {
      goto LABEL_33;
    }
    id v6 = *(id *)(v3 + 8 * v5 + 32);
LABEL_12:
    uint64_t v7 = v6;
    swift_release();
    while (!__OFSUB__(v4--, 1))
    {
      if (v1)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v4 & 0x8000000000000000) != 0) {
          goto LABEL_24;
        }
        if (v4 >= *(void *)(v3 + 16)) {
          goto LABEL_25;
        }
        id v9 = *(id *)(v3 + 32 + 8 * v4);
      }
      uint64_t v10 = v9;
      id v11 = [v9 state];
      if (v11 != [v7 state])
      {

        swift_release();
        return (uint64_t)v7;
      }

      uint64_t v7 = v10;
      if (!v4)
      {
        swift_release();
        return (uint64_t)v10;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    unint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v2 = (uint64_t)sub_1000B8D4C(v12);
    swift_bridgeObjectRelease();
  }
  swift_retain();
  unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  if (v4) {
    goto LABEL_7;
  }
LABEL_28:
  swift_release_n();
  return 0;
}

uint64_t sub_1000ADCA4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_100080F90(v6, (uint64_t)qword_10032AB88);
  swift_bridgeObjectRetain_n();
  uint64_t v49 = v10;
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  unint64_t v48 = v9;
  if (v13)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    unint64_t v15 = swift_slowAlloc();
    uint64_t v47 = v7;
    unint64_t v51 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v50 = sub_10008D114(a1, a2, (uint64_t *)&v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "get aggregate record [%s]", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v7 = v47;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v16 = swift_bridgeObjectRelease_n();
  }
  uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 152))(v16);
  __chkstk_darwin(v17);
  *(&v45 - 2) = a1;
  *(&v45 - 1) = a2;
  sub_100080E08(&qword_100320D10);
  NSManagedObjectContext.performAndWait<A>(_:)();

  unint64_t v18 = v51;
  if (!v51) {
    goto LABEL_29;
  }
  if (!(v51 >> 62))
  {
    uint64_t v19 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v19) {
      goto LABEL_9;
    }
LABEL_16:
    swift_bridgeObjectRelease_n();
    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v44)
      {
LABEL_18:
        unint64_t v24 = (void *)(*(uint64_t (**)(unint64_t))(*(void *)v3 + 256))(v18);
        swift_bridgeObjectRelease();
        if (v24)
        {
          [v24 setEverOptIn:1];
          uint64_t v25 = v48;
          (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v48, v49, v6);
          id v26 = v24;
          uint64_t v27 = Logger.logObject.getter();
          os_log_type_t v28 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v27, v28))
          {
            uint64_t v47 = v7;
            uint64_t v49 = v6;
            uint64_t v29 = swift_slowAlloc();
            unint64_t v46 = swift_slowAlloc();
            unint64_t v51 = v46;
            *(_DWORD *)uint64_t v29 = 136315650;
            id v30 = [v26 uri];
            if (v30)
            {
              uint64_t v31 = v30;
              uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v34 = v33;
            }
            else
            {
              unint64_t v34 = 0xE100000000000000;
              uint64_t v32 = 45;
            }
            uint64_t v50 = sub_10008D114(v32, v34, (uint64_t *)&v51);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v29 + 12) = 2080;
            id v39 = [v26 application];
            uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v42 = v41;

            uint64_t v50 = sub_10008D114(v40, v42, (uint64_t *)&v51);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v29 + 22) = 2048;
            id v43 = [v26 state];

            uint64_t v50 = (uint64_t)v43;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            _os_log_impl((void *)&_mh_execute_header, v27, v28, "Final optin: %s[%s] - %lu", (uint8_t *)v29, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v7 + 8))(v25, v6);
          }
          return (uint64_t)v24;
        }
        char v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v35, v36))
        {
          char v37 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v37 = 0;
          char v38 = "Failed to pick oldest record";
LABEL_31:
          _os_log_impl((void *)&_mh_execute_header, v35, v36, v38, v37, 2u);
          swift_slowDealloc();
          goto LABEL_32;
        }
        goto LABEL_32;
      }
    }
    else if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
LABEL_29:
    char v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      char v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v37 = 0;
      char v38 = "no opt in records to pick";
      goto LABEL_31;
    }
LABEL_32:

    return 0;
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v19 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_9:
  if (v19 >= 1)
  {
    uint64_t v21 = 0;
    do
    {
      if ((v18 & 0xC000000000000001) != 0) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v22 = *(id *)(v18 + 8 * v21 + 32);
      }
      unint64_t v23 = v22;
      ++v21;
      unint64_t v51 = (unint64_t)v22;
      sub_1000AE400((void **)&v51);
    }
    while (v19 != v21);
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000AE400(void **a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1;
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_100080F90(v2, (uint64_t)qword_10032AB88);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  id v8 = v6;
  id v9 = Logger.logObject.getter();
  int v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, (os_log_type_t)v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v28 = v24;
    *(_DWORD *)uint64_t v11 = 136315650;
    id v12 = [v8 uri];
    uint64_t v26 = v2;
    int v25 = v10;
    if (v12)
    {
      BOOL v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;
    }
    else
    {
      unint64_t v16 = 0xE100000000000000;
      uint64_t v14 = 45;
    }
    uint64_t v27 = sub_10008D114(v14, v16, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    id v18 = [v8 application];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    uint64_t v27 = sub_10008D114(v19, v21, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2048;
    id v22 = [v8 state];

    uint64_t v27 = (uint64_t)v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v9, (os_log_type_t)v25, "processing optin: %s[%s] - %lu", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v26);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t sub_1000AE774()
{
  uint64_t v1 = v0;
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100080F90(v2, (uint64_t)qword_10032AB88);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "getAllOptInStates", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152))();
  sub_100080E08(&qword_100320D18);
  NSManagedObjectContext.performAndWait<A>(_:)();

  return v8;
}

uint64_t sub_1000AE8C0()
{
  unint64_t v22 = sub_1000AEB1C((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 272))();
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v3) {
      goto LABEL_10;
    }
  }
  if (v3 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = 0;
  do
  {
    if ((v2 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v2 + 8 * v5 + 32);
    }
    uint64_t v7 = v6;
    ++v5;
    id v20 = v6;
    sub_1000AED5C(&v20, (uint64_t *)&v22);
  }
  while (v3 != v5);
LABEL_10:
  swift_bridgeObjectRelease_n();
  char v8 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v0 + 312))(5456969, 0xE300000000000000);
  if (v8 != 2)
  {
    char v9 = v8;
    sub_100080E08(&qword_100320D20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1002856F0;
    *(void *)(inited + 32) = 0x6574617473;
    *(void *)(inited + 40) = 0xE500000000000000;
    id v20 = 0;
    unint64_t v21 = 0xE000000000000000;
    if (v9) {
      uint64_t v11 = 1702195828;
    }
    else {
      uint64_t v11 = 0x65736C6166;
    }
    if (v9) {
      unint64_t v12 = 0xE400000000000000;
    }
    else {
      unint64_t v12 = 0xE500000000000000;
    }
    unint64_t v13 = v12;
    String.append(_:)(*(Swift::String *)&v11);
    swift_bridgeObjectRelease();
    unint64_t v14 = v21;
    *(void *)(inited + 48) = v20;
    *(void *)(inited + 56) = v14;
    unint64_t v15 = sub_1000AEC38(inited);
    unint64_t v16 = (void *)v22;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v20 = v16;
    sub_1000BB294(v15, 0x492D746E65746E69, 0xEA00000000005344, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  uint64_t v18 = swift_bridgeObjectRetain();
  unint64_t v19 = sub_1000AF428(v18);
  swift_bridgeObjectRelease_n();
  return v19;
}

unint64_t sub_1000AEB1C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_100321178);
  unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  os_log_type_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100089D6C(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    int v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000AEC38(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_100321180);
  unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  os_log_type_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_100089D6C(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    BOOL v12 = (void *)(v2[7] + 16 * result);
    *BOOL v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_1000AED5C(id *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v64 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  char v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v59 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (char *)&v59 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v59 - v17;
  id v19 = *a1;
  id result = [*a1 uri];
  if (result)
  {
    unint64_t v21 = result;
    unint64_t v63 = a2;
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v62 = v22;

    sub_100080E08(&qword_100320D20);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100287C70;
    *(void *)(inited + 32) = 0x6574617473;
    *(void *)(inited + 40) = 0xE500000000000000;
    uint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    id v65 = [v19 state];
    type metadata accessor for KTOptIn();
    _print_unlocked<A, B>(_:_:)();
    unint64_t v24 = v67;
    *(void *)(inited + 48) = v66;
    *(void *)(inited + 56) = v24;
    *(void *)(inited + 64) = 0x6D617473656D6974;
    *(void *)(inited + 72) = 0xE900000000000070;
    uint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    id v25 = [v19 smtTimestamp];
    if (v25)
    {
      uint64_t v26 = v25;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v27 = v64;
      uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56);
      uint64_t v29 = v16;
      uint64_t v30 = 0;
    }
    else
    {
      uint64_t v27 = v64;
      uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56);
      uint64_t v29 = v16;
      uint64_t v30 = 1;
    }
    uint64_t v60 = v28;
    v28(v29, v30, 1, v4);
    sub_1000C1364((uint64_t)v16, (uint64_t)v18, (uint64_t *)&unk_10031F9A0);
    uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    if (v31(v18, 1, v4))
    {
      sub_100087A1C((uint64_t)v18, (uint64_t *)&unk_10031F9A0);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v6, v18, v4);
      sub_100087A1C((uint64_t)v18, (uint64_t *)&unk_10031F9A0);
      Date.timeIntervalSince1970.getter();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
    }
    Double.write<A>(to:)();
    unint64_t v32 = v67;
    *(void *)(inited + 80) = v66;
    *(void *)(inited + 88) = v32;
    *(void *)(inited + 96) = 0xD000000000000011;
    *(void *)(inited + 104) = 0x800000010024E940;
    uint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    id v33 = [v19 smtTimestamp];
    if (v33)
    {
      unint64_t v34 = v33;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v35 = 1;
    }
    uint64_t v36 = v64;
    v60(v10, v35, 1, v4);
    sub_1000C1364((uint64_t)v10, (uint64_t)v13, (uint64_t *)&unk_10031F9A0);
    if (v31(v13, 1, v4))
    {
      sub_100087A1C((uint64_t)v13, (uint64_t *)&unk_10031F9A0);
      char v37 = (void *)0xE100000000000000;
      uint64_t v38 = 45;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v6, v13, v4);
      sub_100087A1C((uint64_t)v13, (uint64_t *)&unk_10031F9A0);
      uint64_t v38 = Date.description.getter();
      char v37 = v39;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v4);
    }
    v40._countAndFlagsBits = v38;
    v40._object = v37;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    unint64_t v41 = v67;
    *(void *)(inited + 112) = v66;
    *(void *)(inited + 120) = v41;
    *(void *)(inited + 128) = 0x6F6973726556736FLL;
    *(void *)(inited + 136) = 0xE90000000000006ELL;
    uint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    id v42 = [v19 osVersion];
    if (v42)
    {
      id v43 = v42;
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v46 = v45;
    }
    else
    {
      unint64_t v46 = (void *)0xE100000000000000;
      uint64_t v44 = 45;
    }
    v47._countAndFlagsBits = v44;
    v47._object = v46;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    unint64_t v48 = v67;
    *(void *)(inited + 144) = v66;
    *(void *)(inited + 152) = v48;
    *(void *)(inited + 160) = 28275;
    *(void *)(inited + 168) = 0xE200000000000000;
    uint64_t v66 = 0;
    unint64_t v67 = 0xE000000000000000;
    id v49 = [v19 serialNumber];
    if (v49)
    {
      uint64_t v50 = v49;
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      double v53 = v52;
    }
    else
    {
      double v53 = (void *)0xE100000000000000;
      uint64_t v51 = 45;
    }
    uint64_t v54 = v63;
    v55._countAndFlagsBits = v51;
    v55._object = v53;
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    unint64_t v56 = v67;
    *(void *)(inited + 176) = v66;
    *(void *)(inited + 184) = v56;
    unint64_t v57 = sub_1000AEC38(inited);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v66 = *v54;
    uint64_t *v54 = 0x8000000000000000;
    sub_1000BB294(v57, v61, v62, isUniquelyReferenced_nonNull_native);
    uint64_t *v54 = v66;
    swift_bridgeObjectRelease();
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000AF428(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    sub_100080E08(&qword_100321188);
    unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = &v37;
  uint64_t v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  char v10 = (uint64_t *)&unk_100321190;
  uint64_t v11 = (char *)&type metadata for Any + 8;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_100089D64();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    unint64_t v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100080E08(v10);
    swift_dynamicCast();
    sub_10008B89C(v6, v7);
    sub_10008B89C(v7, v40);
    sub_10008B89C(v40, &v38);
    unint64_t result = sub_100089D6C(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      uint64_t v12 = v7;
      uint64_t v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      unint64_t v16 = v10;
      uint64_t v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v17 = v35;
      v17[1] = v36;
      char v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      uint64_t v6 = v13;
      uint64_t v7 = v12;
      int64_t i = v33;
      uint64_t v18 = (_OWORD *)(v2[7] + 32 * v25);
      sub_10008FBC4((uint64_t)v18);
      unint64_t result = (unint64_t)sub_10008B89C(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)sub_10008B89C(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_1000AF794(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v30 = a1;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100080F90(v10, (uint64_t)qword_10032AB88);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  int v29 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v28 = v5;
    uint64_t v18 = v17;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v32 = v24;
    *(_DWORD *)uint64_t v18 = 136315394;
    if (a2) {
      uint64_t v19 = v30;
    }
    else {
      uint64_t v19 = 45;
    }
    uint64_t v25 = v10;
    unint64_t v26 = a4;
    if (a2) {
      unint64_t v20 = a2;
    }
    else {
      unint64_t v20 = 0xE100000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_10008D114(v19, v20, &v32);
    uint64_t v27 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a4 = v26;
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_10008D114(a3, a4, &v32);
    uint64_t v6 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v29, "deleting optin record %s[%s]", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v25);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v21 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  uint64_t v22 = v30;
  int64_t v23 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 152))(v21);
  __chkstk_darwin(v23);
  *(&v24 - 6) = v22;
  *(&v24 - 5) = a2;
  *(&v24 - 4) = a3;
  *(&v24 - 3) = a4;
  *(&v24 - 2) = v6;
  NSManagedObjectContext.performAndWait<A>(_:)();
}

uint64_t sub_1000AFB38()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000AFB68()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152))();
  sub_100080E08(&qword_100320D28);
  NSManagedObjectContext.performAndWait<A>(_:)();

  return v3;
}

uint64_t sub_1000AFC24(uint64_t a1, uint64_t a2)
{
  return sub_1000AFF18(a1, a2, &qword_100320D30);
}

uint64_t sub_1000AFC44(uint64_t a1, uint64_t a2)
{
  id v5 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002856D0;
  uint64_t v8 = *(void *)(v2 + 88);
  uint64_t v7 = *(void *)(v2 + 96);
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v9 = sub_1000A56A8();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v7;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v9;
  *(void *)(v6 + 64) = v9;
  *(void *)(v6 + 72) = a1;
  *(void *)(v6 + 80) = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = NSPredicate.init(format:_:)();
  [v5 setPredicate:v10];

  id v24 = 0;
  id v11 = [v5 execute:&v24];
  id v12 = v24;
  if (!v11)
  {
    id v21 = v24;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 2;
  }
  uint64_t v13 = v11;
  sub_10008E0A0(0, &qword_100320D38);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = v12;

  if (!(v14 >> 62))
  {
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_12:

    swift_bridgeObjectRelease();
    return 2;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_12;
  }
LABEL_4:
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v16 = *(id *)(v14 + 32);
  }
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  id v18 = [v17 state];
  if (!v18)
  {

    return 2;
  }
  uint64_t v19 = v18;
  id v20 = [v18 BOOLValue];

  return (uint64_t)v20;
}

uint64_t sub_1000AFEF8(uint64_t a1, uint64_t a2)
{
  return sub_1000AFF18(a1, a2, &qword_100320D28);
}

uint64_t sub_1000AFF18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id v5 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 152))();
  sub_100080E08(a3);
  NSManagedObjectContext.performAndWait<A>(_:)();

  return v7;
}

id sub_1000AFFB8(uint64_t a1, uint64_t a2, char a3, char a4)
{
  id v5 = v4;
  uint64_t v10 = (*((uint64_t (**)(void))*v4 + 37))();
  if (v10)
  {
    id v11 = (void *)v10;
    NSString v12 = String._bridgeToObjectiveC()();
    uint64_t v39 = sub_1000B04A8;
    uint64_t v40 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256;
    uint64_t v37 = sub_1000B0440;
    long long v38 = &unk_1002BEAF8;
    uint64_t v13 = _Block_copy(&aBlock);
    id v33 = self;
    id v34 = [v33 named:v12 withBlockTakingSelf:v13];

    _Block_release(v13);
    swift_release();
    char v32 = a3;
    unint64_t v14 = (uint64_t (*)(void))*((void *)*v5 + 19);
    id v15 = v5[6];
    uint64_t v16 = v14();
    sub_100080E08(&qword_100320D40);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_100287920;
    *(void *)(v17 + 32) = v11;
    aBlock = (void **)v17;
    specialized Array._endMutation()();
    uint64_t v18 = (uint64_t)aBlock;
    type metadata accessor for KTStoreOptInOperation();
    id v19 = v11;
    id v20 = KTStoreOptInOperation.__allocating_init(database:context:records:type:overwrite:)((uint64_t)v15, v16, v18, 0x746E65746E69, 0xE600000000000000, a4 & 1);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = a1;
    *(void *)(v21 + 24) = a2;
    *(unsigned char *)(v21 + 32) = v32 & 1;
    *(void *)(v21 + 40) = v20;
    *(void *)(v21 + 48) = v5;
    swift_bridgeObjectRetain();
    id v22 = v20;
    swift_retain();
    NSString v23 = String._bridgeToObjectiveC()();
    uint64_t v39 = sub_1000BD120;
    uint64_t v40 = v21;
    aBlock = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256;
    uint64_t v37 = sub_1000B0440;
    long long v38 = &unk_1002BEB48;
    id v24 = _Block_copy(&aBlock);
    id v25 = [v33 named:v23 withBlockTakingSelf:v24];

    _Block_release(v24);
    swift_release();
    [v25 addSuccessDependency:v22];
    [v34 addSuccessDependency:v25];
    [v34 addSuccessDependency:v22];
    id v26 = [v34 operationQueue];
    [v26 addOperation:v25];

    id v27 = [v34 operationQueue];
    [v27 addOperation:v22];

    return v34;
  }
  else
  {
    NSString v29 = String._bridgeToObjectiveC()();
    uint64_t v39 = sub_1000B0438;
    uint64_t v40 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v36 = 1107296256;
    uint64_t v37 = sub_1000B0440;
    long long v38 = &unk_1002BEAD0;
    uint64_t v30 = _Block_copy(&aBlock);
    id v31 = [self named:v29 withBlockTakingSelf:v30];

    _Block_release(v30);
    swift_release();
    return v31;
  }
}

void sub_1000B0438(void *a1)
{
}

void sub_1000B0440(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_1000B04A8(uint64_t a1)
{
}

id sub_1000B04B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 320))();
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v32 = a1;
    uint64_t v33 = a3;
    id v9 = [v7 recordID];

LABEL_5:
    NSString v11 = String._bridgeToObjectiveC()();
    long long v38 = sub_1000B0A14;
    uint64_t v39 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v35 = 1107296256;
    uint64_t v36 = sub_1000B0440;
    uint64_t v37 = &unk_1002BEB98;
    NSString v12 = _Block_copy(&aBlock);
    uint64_t v13 = self;
    id v14 = [v13 named:v11 withBlockTakingSelf:v12];

    _Block_release(v12);
    swift_release();
    type metadata accessor for KTDeleteOptInOperation();
    id v15 = *(uint64_t (**)(void))(*(void *)v3 + 152);
    id v16 = *(id *)(v3 + 48);
    uint64_t v17 = v15();
    id v18 = v9;
    id v19 = KTDeleteOptInOperation.__allocating_init(database:context:recordID:)((uint64_t)v16, v17, (uint64_t)v18);
    id v20 = (void *)swift_allocObject();
    v20[2] = v19;
    v20[3] = v32;
    void v20[4] = a2;
    v20[5] = v18;
    v20[6] = v33;
    id v21 = v18;
    id v22 = v19;
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    NSString v23 = String._bridgeToObjectiveC()();
    long long v38 = sub_1000BD594;
    uint64_t v39 = v20;
    aBlock = _NSConcreteStackBlock;
    uint64_t v35 = 1107296256;
    uint64_t v36 = sub_1000B0440;
    uint64_t v37 = &unk_1002BEBE8;
    id v24 = _Block_copy(&aBlock);
    id v25 = [v13 named:v23 withBlockTakingSelf:v24];

    _Block_release(v24);
    swift_release();
    [v25 addSuccessDependency:v22];
    [v14 addSuccessDependency:v25];
    [v14 addSuccessDependency:v22];
    id v26 = [v14 operationQueue];
    [v26 addOperation:v25];

    id v27 = [v14 operationQueue];
    [v27 addOperation:v22];

    return v14;
  }
  uint64_t v10 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(*(void *)v3 + 240))(*(void *)(v3 + 88), *(void *)(v3 + 96), a1, a2);
  if (v10)
  {
    id v9 = (id)v10;
    uint64_t v32 = a1;
    uint64_t v33 = a3;
    goto LABEL_5;
  }
  NSString v29 = String._bridgeToObjectiveC()();
  long long v38 = sub_1000B0934;
  uint64_t v39 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v35 = 1107296256;
  uint64_t v36 = sub_1000B0440;
  uint64_t v37 = &unk_1002BEB70;
  uint64_t v30 = _Block_copy(&aBlock);
  id v31 = [self named:v29 withBlockTakingSelf:v30];

  _Block_release(v30);
  swift_release();
  return v31;
}

void sub_1000B0934(void *a1)
{
}

void sub_1000B093C(void *a1)
{
  type metadata accessor for KTError();
  sub_1000C13C8((unint64_t *)&qword_100321170, (void (*)(uint64_t))type metadata accessor for KTError);
  swift_allocError();
  swift_storeEnumTagMultiPayload();
  id v2 = (id)_convertErrorToNSError(_:)();
  swift_errorRelease();
  [a1 setError:v2];
}

void sub_1000B0A14(uint64_t a1)
{
}

void sub_1000B0A20(uint64_t a1, const char *a2)
{
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100080F90(v3, (uint64_t)qword_10032AB88);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, a2, v5, 2u);
    swift_slowDealloc();
  }
}

id sub_1000B0B10(uint64_t a1, uint64_t a2, id a3, char a4)
{
  uint64_t v6 = v4;
  uint64_t v37 = _swiftEmptyArrayStorage;
  NSString v11 = *(uint64_t (**)(void))(*(void *)v4 + 152);
  NSString v12 = (void *)v11();
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (v5)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v30 = a4 & 1;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = a3;
    *(unsigned char *)(v13 + 24) = a4 & 1;
    swift_bridgeObjectRetain();
    uint64_t v29 = a1;
    NSString v14 = String._bridgeToObjectiveC()();
    uint64_t v35 = sub_1000BDAE0;
    uint64_t v36 = v13;
    aBlock = _NSConcreteStackBlock;
    uint64_t v32 = 1107296256;
    uint64_t v33 = sub_1000B0440;
    id v34 = &unk_1002BEC38;
    id v15 = _Block_copy(&aBlock);
    id v16 = self;
    a3 = [v16 named:v14 withBlockTakingSelf:v15];

    _Block_release(v15);
    swift_release();
    id v17 = *(id *)(v6 + 48);
    uint64_t v18 = v11();
    uint64_t v19 = (uint64_t)v37;
    type metadata accessor for KTStoreOptInOperation();
    swift_bridgeObjectRetain();
    id v20 = KTStoreOptInOperation.__allocating_init(database:context:records:type:overwrite:)((uint64_t)v17, v18, v19, 0x64726F636572, 0xE600000000000000, 1);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v29;
    *(void *)(v21 + 24) = a2;
    *(unsigned char *)(v21 + 32) = v30;
    *(void *)(v21 + 40) = v20;
    *(void *)(v21 + 48) = v6;
    swift_bridgeObjectRetain();
    id v22 = v20;
    swift_retain();
    NSString v23 = String._bridgeToObjectiveC()();
    uint64_t v35 = sub_1000BDD38;
    uint64_t v36 = v21;
    aBlock = _NSConcreteStackBlock;
    uint64_t v32 = 1107296256;
    uint64_t v33 = sub_1000B0440;
    id v34 = &unk_1002BEC88;
    id v24 = _Block_copy(&aBlock);
    id v25 = [v16 named:v23 withBlockTakingSelf:v24];

    _Block_release(v24);
    swift_release();
    [v25 addDependency:v22];
    [a3 addDependency:v25];
    [a3 addDependency:v22];
    id v26 = [a3 operationQueue];
    [v26 addOperation:v25];

    id v27 = [a3 operationQueue];
    [v27 addOperation:v22];

    swift_bridgeObjectRelease();
  }
  return a3;
}

void sub_1000B0F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6)
{
  v175 = a6;
  uint64_t v198 = a2;
  uint64_t v199 = a3;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v176 = (char *)&v159 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v12 = (void *)type metadata accessor for Date();
  uint64_t v13 = *(v12 - 1);
  uint64_t v14 = __chkstk_darwin(v12);
  v189 = (char *)&v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  v187 = (char *)&v159 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v188 = (char *)&v159 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  v174 = (char *)&v159 - v21;
  __chkstk_darwin(v20);
  NSString v23 = (char *)&v159 - v22;
  uint64_t v24 = sub_100080E08(&qword_100321160);
  uint64_t v25 = __chkstk_darwin(v24 - 8);
  id v27 = (uint64_t *)((char *)&v159 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25);
  v186 = (void **)((char *)&v159 - v28);
  uint64_t v29 = *(void *)(a1 + 64);
  uint64_t v161 = a1 + 64;
  uint64_t v30 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v31 = -1;
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  unint64_t v32 = v31 & v29;
  v191 = (void (**)(char *, char *, void *))(v13 + 16);
  id v184 = (void (**)(uint64_t, char *, void *))(v13 + 32);
  id v167 = (void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v177 = v13;
  v190 = (void (**)(uint64_t, void *))(v13 + 8);
  id v166 = (void (**)(char *, uint64_t))(v10 + 8);
  long long v180 = &v202;
  int v164 = a5 & 1;
  id v163 = (char *)&v201 + 4;
  int64_t v169 = (unint64_t)(v30 + 63) >> 6;
  int64_t v160 = v169 - 1;
  uint64_t v178 = a1;
  uint64_t v33 = (uint64_t)v23;
  swift_bridgeObjectRetain();
  int64_t v34 = 0;
  Swift::Int v179 = a5 & 1;
  *((void *)&v35 + 1) = 4;
  long long v183 = xmmword_1002856D0;
  unint64_t v182 = 0x800000010024E7C0;
  *(void *)&long long v35 = 136315138;
  long long v165 = v35;
  char v162 = (char *)&type metadata for Any + 8;
  *(void *)&long long v35 = 136315906;
  long long v170 = v35;
  v200 = v12;
  v193 = v23;
  uint64_t v185 = a4;
  uint64_t v192 = v9;
  long long v181 = v27;
  while (1)
  {
    if (v32)
    {
      uint64_t v36 = v33;
      uint64_t v194 = (v32 - 1) & v32;
      int64_t v195 = v34;
      unint64_t v37 = __clz(__rbit64(v32)) | (v34 << 6);
      long long v38 = v188;
LABEL_7:
      uint64_t v39 = *(void *)(v178 + 56);
      uint64_t v40 = (void *)(*(void *)(v178 + 48) + 16 * v37);
      uint64_t v41 = v40[1];
      void *v27 = *v40;
      v27[1] = v41;
      uint64_t v42 = v177;
      uint64_t v43 = v39 + *(void *)(v177 + 72) * v37;
      uint64_t v44 = sub_100080E08(&qword_100321168);
      (*(void (**)(char *, uint64_t, void *))(v42 + 16))((char *)v27 + *(int *)(v44 + 48), v43, v200);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v27, 0, 1, v44);
      swift_bridgeObjectRetain();
      uint64_t v45 = v186;
      uint64_t v33 = v36;
      goto LABEL_14;
    }
    int64_t v46 = v34 + 1;
    long long v38 = v188;
    if (__OFADD__(v34, 1)) {
      goto LABEL_87;
    }
    if (v46 >= v169)
    {
      int64_t v195 = v34;
      uint64_t v45 = v186;
    }
    else
    {
      unint64_t v47 = *(void *)(v161 + 8 * v46);
      uint64_t v45 = v186;
      if (v47) {
        goto LABEL_11;
      }
      int64_t v107 = v34 + 2;
      if (v46 + 1 >= v169) {
        goto LABEL_74;
      }
      unint64_t v47 = *(void *)(v161 + 8 * v107);
      if (v47) {
        goto LABEL_46;
      }
      if (v46 + 2 >= v169)
      {
        int64_t v195 = v46 + 1;
      }
      else
      {
        unint64_t v47 = *(void *)(v161 + 8 * (v46 + 2));
        if (v47)
        {
          v46 += 2;
          goto LABEL_11;
        }
        int64_t v107 = v46 + 3;
        if (v46 + 3 < v169)
        {
          unint64_t v47 = *(void *)(v161 + 8 * v107);
          if (v47)
          {
LABEL_46:
            int64_t v46 = v107;
LABEL_11:
            uint64_t v36 = v33;
            uint64_t v194 = (v47 - 1) & v47;
            int64_t v195 = v46;
            unint64_t v37 = __clz(__rbit64(v47)) + (v46 << 6);
            goto LABEL_7;
          }
          while (1)
          {
            int64_t v46 = v107 + 1;
            if (__OFADD__(v107, 1)) {
              __break(1u);
            }
            if (v46 >= v169) {
              break;
            }
            unint64_t v47 = *(void *)(v161 + 8 * v46);
            ++v107;
            if (v47) {
              goto LABEL_11;
            }
          }
          int64_t v46 = v160;
LABEL_74:
          int64_t v195 = v46;
          goto LABEL_13;
        }
        int64_t v195 = v46 + 2;
      }
    }
LABEL_13:
    uint64_t v48 = sub_100080E08(&qword_100321168);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v27, 1, 1, v48);
    uint64_t v194 = 0;
LABEL_14:
    sub_1000C1364((uint64_t)v27, (uint64_t)v45, &qword_100321160);
    uint64_t v49 = sub_100080E08(&qword_100321168);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v45, 1, v49) == 1) {
      break;
    }
    uint64_t v50 = *v45;
    NSString v12 = v45[1];
    (*v184)(v33, (char *)v45 + *(int *)(v49 + 48), v200);
    id v204 = 0;
    id v51 = [self fetchRequest];
    sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
    sub_100080E08((uint64_t *)&unk_1003206A0);
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = v183;
    *(void *)(v52 + 56) = &type metadata for String;
    unint64_t v53 = sub_1000A56A8();
    v196 = v50;
    *(void *)(v52 + 32) = v50;
    *(void *)(v52 + 40) = v12;
    *(void *)(v52 + 96) = &type metadata for String;
    *(void *)(v52 + 104) = v53;
    uint64_t v54 = v198;
    uint64_t v55 = v199;
    *(void *)(v52 + 64) = v53;
    *(void *)(v52 + 72) = v54;
    *(void *)(v52 + 80) = v55;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v56 = NSPredicate.init(format:_:)();
    [v51 setPredicate:v56];

    id v203 = 0;
    id v197 = v51;
    id v57 = [v51 execute:&v203];
    id v58 = v203;
    if (v57)
    {
      uint64_t v59 = v57;
      sub_10008E0A0(0, &qword_100320D38);
      unint64_t v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v61 = v58;

      if (v60 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v62 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v62 = *(void **)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v33 = v192;
      if (v62)
      {
        if ((v60 & 0xC000000000000001) != 0)
        {
          id v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_87:
            __break(1u);
            goto LABEL_88;
          }
          id v63 = *(id *)(v60 + 32);
        }
        uint64_t v62 = v63;
      }
      swift_bridgeObjectRelease();
      swift_beginAccess();
      id v64 = v204;
      id v204 = v62;

      if (v62)
      {
        swift_bridgeObjectRelease();
        if (qword_10032AB80 != -1) {
          swift_once();
        }
        uint64_t v65 = sub_100080F90(v33, (uint64_t)qword_10032AB88);
        (*v167)(v176, v65, v33);
        uint64_t v66 = v33;
        unint64_t v67 = *v191;
        unint64_t v68 = v174;
        uint64_t v69 = v193;
        uint64_t v70 = v200;
        (*v191)(v174, v193, v200);
        v67(v38, v69, v70);
        uint64_t v71 = Logger.logObject.getter();
        int v72 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v71, (os_log_type_t)v72))
        {
          uint64_t v73 = swift_slowAlloc();
          os_log_type_t v74 = (void *)swift_slowAlloc();
          id v203 = v74;
          *(_DWORD *)uint64_t v73 = v170;
          id v75 = v204;
          LODWORD(v196) = v72;
          id v173 = v74;
          if (v204)
          {
            id v76 = [v204 recordID];
            os_log_type_t v77 = v174;
            if (v76)
            {
              id v78 = v76;
              uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v81 = v80;
            }
            else
            {
              unint64_t v81 = 0xE300000000000000;
              uint64_t v79 = 7104878;
            }
          }
          else
          {
            unint64_t v81 = 0xE300000000000000;
            uint64_t v79 = 7104878;
            os_log_type_t v77 = v174;
          }
          uint64_t v201 = sub_10008D114(v79, v81, (uint64_t *)&v203);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 12) = 2080;
          if (v75)
          {
            id v108 = [v75 uri];
            uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v111 = v110;
          }
          else
          {
            uint64_t v109 = 0;
            unint64_t v111 = 0xE000000000000000;
          }
          a4 = v185;
          uint64_t v201 = sub_10008D114(v109, v111, (uint64_t *)&v203);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v73 + 22) = 2080;
          sub_1000C13C8(&qword_100320D48, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v112 = v200;
          uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v201 = sub_10008D114(v113, v114, (uint64_t *)&v203);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          NSString v12 = *v190;
          (*v190)((uint64_t)v77, v112);
          *(_WORD *)(v73 + 32) = 2048;
          uint64_t v115 = v188;
          Date.timeIntervalSince1970.getter();
          uint64_t v201 = v116;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          ((void (*)(char *, void *))v12)(v115, v112);
          _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v196, "optInStore: updating existing record %s %s %s[%f", (uint8_t *)v73, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          (*v166)(v176, v192);
          uint64_t v33 = (uint64_t)v193;
          uint64_t v95 = v189;
          id v27 = v181;
        }
        else
        {
          NSString v12 = v190;
          v105 = (void (*)(char *, void *))*v190;
          uint64_t v106 = v200;
          (*v190)((uint64_t)v68, v200);
          v105(v38, v106);

          (*v166)(v176, v66);
          uint64_t v33 = (uint64_t)v193;
          id v27 = v181;
          uint64_t v95 = v189;
        }
        goto LABEL_52;
      }
    }
    else
    {
      id v82 = v203;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      uint64_t v168 = 0;
      uint64_t v33 = v192;
    }
    uint64_t v83 = (*(uint64_t (**)(void *, void *, uint64_t, uint64_t))(*(void *)a4 + 240))(v196, v12, v198, v199);
    if (!v83)
    {
      if (qword_10032AB80 == -1)
      {
LABEL_80:
        sub_100080F90(v33, (uint64_t)qword_10032AB88);
        os_log_type_t v155 = static os_log_type_t.error.getter();
        swift_bridgeObjectRetain();
        v156 = Logger.logObject.getter();
        if (os_log_type_enabled(v156, v155))
        {
          char v157 = (uint8_t *)swift_slowAlloc();
          id v203 = (id)swift_slowAlloc();
          *(_DWORD *)char v157 = v165;
          swift_bridgeObjectRetain();
          uint64_t v201 = sub_10008D114((uint64_t)v196, (unint64_t)v12, (uint64_t *)&v203);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v156, v155, "failed to create recordID %s", v157, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        (*v190)((uint64_t)v193, v200);
        goto LABEL_85;
      }
LABEL_88:
      swift_once();
      goto LABEL_80;
    }
    os_log_type_t v84 = (void *)v83;
    if (qword_10032AB80 != -1) {
      swift_once();
    }
    sub_100080F90(v33, (uint64_t)qword_10032AB88);
    id v85 = v84;
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = swift_slowAlloc();
      id v203 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v88 = v165;
      id v173 = v12;
      os_log_t v172 = (os_log_t)(v88 + 4);
      id v89 = [v85 recordName];
      id v90 = v85;
      uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v93 = v92;

      uint64_t v94 = v91;
      id v85 = v90;
      uint64_t v201 = sub_10008D114(v94, v93, (uint64_t *)&v203);
      NSString v12 = v173;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "creating new record %s", (uint8_t *)v88, 0xCu);
      swift_arrayDestroy();
      a4 = v185;
      swift_slowDealloc();
      id v27 = v181;
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v95 = v189;
    uint64_t v96 = (void *)(*(uint64_t (**)(void))(*(void *)a4 + 152))();
    id v97 = [objc_allocWithZone((Class)CloudOptIn) initWithContext:v96];

    swift_beginAccess();
    id v98 = v204;
    id v204 = v97;

    if (v97)
    {
      id v99 = v97;
      NSString v100 = [v85 recordName];
      uint64_t v33 = (uint64_t)v193;
      if (!v100)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v100 = String._bridgeToObjectiveC()();
        uint64_t v33 = (uint64_t)v193;
        swift_bridgeObjectRelease();
      }
      [v99 setRecordID:v100];

      id v101 = v99;
      NSString v102 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v101 setUri:v102];

      id v103 = v101;
      NSString v104 = String._bridgeToObjectiveC()();
      [v103 setApplication:v104];
    }
    else
    {

      swift_bridgeObjectRelease();
      uint64_t v33 = (uint64_t)v193;
    }
LABEL_52:
    swift_beginAccess();
    if (!v204)
    {

      (*v190)(v33, v200);
LABEL_85:
      swift_release();

      return;
    }
    id v117 = v204;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    [v117 setSmtTimestamp:isa];

    NSString v119 = String._bridgeToObjectiveC()();
    [v117 setCkstate:v119];

    sub_10008E0A0(0, &qword_100320AD8);
    Class v120 = NSNumber.init(integerLiteral:)(v179).super.super.isa;
    [v117 setState:v120];

    [v117 setCkrecord:0];
    v121 = (void *)(*(uint64_t (**)(id))(*(void *)a4 + 432))(v117);
    if (v121)
    {
      unint64_t v122 = v27;
      uint64_t v123 = v95;
      uint64_t v124 = v33;
      id v125 = v121;
      uint64_t v126 = v175;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v126 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v126 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      unint64_t v127 = v187;
      if (qword_10032AB80 != -1) {
        swift_once();
      }
      sub_100080F90(v192, (uint64_t)qword_10032AB88);
      char v128 = *v191;
      v129 = v127;
      v130 = v200;
      (*v191)(v129, (char *)v124, v200);
      v128(v123, (char *)v124, v130);
      id v131 = v125;
      v132 = Logger.logObject.getter();
      os_log_type_t v133 = static os_log_type_t.default.getter();
      int v134 = v133;
      if (os_log_type_enabled(v132, v133))
      {
        uint64_t v135 = swift_slowAlloc();
        v196 = (void *)swift_slowAlloc();
        id v203 = v196;
        *(_DWORD *)uint64_t v135 = v170;
        LODWORD(v173) = v134;
        id v136 = [v131 recordID];
        id v137 = [v136 recordName];

        uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        os_log_t v172 = v132;
        unint64_t v140 = v139;

        v141 = v200;
        uint64_t v201 = sub_10008D114(v138, v140, (uint64_t *)&v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v135 + 12) = 1024;
        LODWORD(v201) = v164;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v135 + 18) = 2080;
        sub_1000C13C8(&qword_100320D48, (void (*)(uint64_t))&type metadata accessor for Date);
        id v171 = v131;
        v142 = v187;
        uint64_t v143 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v201 = sub_10008D114(v143, v144, (uint64_t *)&v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        NSString v12 = *v190;
        (*v190)((uint64_t)v142, v141);
        *(_WORD *)(v135 + 28) = 2048;
        v145 = v189;
        Date.timeIntervalSince1970.getter();
        uint64_t v201 = v146;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        ((void (*)(char *, void *))v12)(v145, v141);
        os_log_t v147 = v172;
        _os_log_impl((void *)&_mh_execute_header, v172, (os_log_type_t)v173, "trying to update record %s %{BOOL}d smtTimeStamp: %s:[%f]", (uint8_t *)v135, 0x26u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v33 = (uint64_t)v193;
        swift_slowDealloc();

        v148 = v141;
        a4 = v185;
        ((void (*)(uint64_t, void *))v12)(v33, v148);
        id v27 = v181;

        unint64_t v32 = v194;
        int64_t v34 = v195;
      }
      else
      {

        NSString v12 = v190;
        v149 = (void (*)(char *, void *))*v190;
        uint64_t v150 = v200;
        (*v190)((uint64_t)v123, v200);
        v149(v187, v150);

        v149((char *)v124, v150);
        unint64_t v32 = v194;
        int64_t v34 = v195;
        uint64_t v33 = v124;
        id v27 = v122;
        a4 = v185;
      }
    }
    else
    {
      (*v190)(v33, v200);

      unint64_t v32 = v194;
      int64_t v34 = v195;
    }
  }
  uint64_t v151 = swift_release();
  id v152 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 152))(v151);
  id v204 = 0;
  unsigned __int8 v153 = [v152 save:&v204];

  if (v153)
  {
    id v154 = v204;
  }
  else
  {
    id v158 = v204;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_1000B27A4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100080F90(v7, (uint64_t)qword_10032AB88);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315650;
    type metadata accessor for Date();
    swift_bridgeObjectRetain();
    uint64_t v11 = Dictionary.Keys.description.getter();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    sub_10008D114(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_10008D114(a2, a3, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 22) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "updating record %s[%s] to %{BOOL}d", (uint8_t *)v10, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v14 = swift_bridgeObjectRelease_n();
  }
  uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 152))(v14);
  __chkstk_darwin(v15);
  NSManagedObjectContext.performAndWait<A>(_:)();
}

void sub_1000B2ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  int64_t v158 = a5;
  uint64_t v137 = a4;
  uint64_t v153 = a2;
  uint64_t v154 = a3;
  uint64_t v148 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  uint64_t v150 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v9 = (void *)type metadata accessor for Date();
  uint64_t v10 = *(v9 - 1);
  uint64_t v11 = __chkstk_darwin(v9);
  v149 = (char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  v142 = (char *)&v124 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v124 - v15;
  uint64_t v17 = sub_100080E08(&qword_100321160);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v20 = (int64_t *)((char *)&v124 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  os_log_t v147 = (int64_t *)((char *)&v124 - v21);
  id v161 = 0;
  uint64_t v22 = *(void *)(a1 + 64);
  uint64_t v127 = a1 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  uint64_t v157 = v24 & v22;
  uint64_t v141 = a1;
  swift_bridgeObjectRetain();
  swift_beginAccess();
  int64_t v25 = 0;
  uint64_t v151 = (void (**)(char *, uint64_t, id))(v10 + 16);
  uint64_t v146 = (void (**)(char *, char *, id))(v10 + 32);
  uint64_t v135 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v138 = v10;
  os_log_type_t v155 = (void (**)(char *, id))(v10 + 8);
  int v134 = (void (**)(char *, uint64_t))(v7 + 8);
  unint64_t v139 = &v160;
  int64_t v132 = (unint64_t)(v23 + 63) >> 6;
  int64_t v124 = v132 - 1;
  Swift::Int v143 = v158 & 1;
  *((void *)&v26 + 1) = 4;
  long long v145 = xmmword_1002856D0;
  unint64_t v144 = 0x800000010024E7C0;
  *(void *)&long long v26 = 136315138;
  long long v126 = v26;
  id v125 = (char *)&type metadata for Any + 8;
  *(void *)&long long v26 = 136315906;
  long long v130 = v26;
  id v152 = v9;
  os_log_type_t v133 = v16;
  unint64_t v140 = v20;
  unint64_t v27 = v157;
  if (!v157) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v28 = v16;
  uint64_t v29 = v9;
  uint64_t v157 = (v27 - 1) & v27;
  unint64_t v30 = __clz(__rbit64(v27)) | (v25 << 6);
LABEL_5:
  uint64_t v31 = *(void *)(v141 + 56);
  unint64_t v32 = (void *)(*(void *)(v141 + 48) + 16 * v30);
  uint64_t v33 = v32[1];
  void *v20 = *v32;
  v20[1] = v33;
  uint64_t v34 = v138;
  uint64_t v35 = v31 + *(void *)(v138 + 72) * v30;
  uint64_t v36 = sub_100080E08(&qword_100321168);
  unint64_t v37 = *(void (**)(char *, uint64_t, void *))(v34 + 16);
  os_log_type_t v9 = v29;
  v37((char *)v20 + *(int *)(v36 + 48), v35, v29);
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v20, 0, 1, v36);
  swift_bridgeObjectRetain();
  long long v38 = v147;
  uint64_t v16 = v28;
  while (1)
  {
    sub_1000C1364((uint64_t)v20, (uint64_t)v38, &qword_100321160);
    uint64_t v42 = sub_100080E08(&qword_100321168);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v38, 1, v42) == 1) {
      break;
    }
    int64_t v158 = v25;
    uint64_t v5 = *v38;
    int64_t v25 = v38[1];
    (*v146)(v16, (char *)v38 + *(int *)(v42 + 48), v9);
    os_log_type_t v9 = [self fetchRequest];
    sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
    sub_100080E08((uint64_t *)&unk_1003206A0);
    uint64_t v43 = swift_allocObject();
    *(_OWORD *)(v43 + 16) = v145;
    *(void *)(v43 + 56) = &type metadata for String;
    unint64_t v44 = sub_1000A56A8();
    *(void *)(v43 + 32) = v5;
    *(void *)(v43 + 40) = v25;
    *(void *)(v43 + 96) = &type metadata for String;
    *(void *)(v43 + 104) = v44;
    uint64_t v45 = v153;
    uint64_t v46 = v154;
    *(void *)(v43 + 64) = v44;
    *(void *)(v43 + 72) = v45;
    *(void *)(v43 + 80) = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v47 = NSPredicate.init(format:_:)();
    [v9 setPredicate:v47];

    id v160 = 0;
    id v48 = [v9 execute:&v160];
    id v49 = v160;
    if (v48)
    {
      uint64_t v50 = v48;
      sub_10008E0A0(0, &qword_100320D38);
      unint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v52 = v49;

      unint64_t v53 = v149;
      if (v51 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v54 = (void *)_CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v55 = v150;
        if (v54)
        {
LABEL_16:
          if ((v51 & 0xC000000000000001) != 0)
          {
            id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            if (!*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              swift_once();
              uint64_t v117 = v148;
LABEL_78:
              sub_100080F90(v117, (uint64_t)qword_10032AB88);
              os_log_type_t v118 = static os_log_type_t.error.getter();
              swift_bridgeObjectRetain();
              NSString v119 = Logger.logObject.getter();
              os_log_type_t v120 = v118;
              if (os_log_type_enabled(v119, v118))
              {
                v121 = (uint8_t *)swift_slowAlloc();
                id v160 = (id)swift_slowAlloc();
                unint64_t v122 = v9;
                uint64_t v123 = v155;
                *(_DWORD *)v121 = v126;
                swift_bridgeObjectRetain();
                uint64_t v159 = sub_10008D114(v5, (unint64_t)v20, (uint64_t *)&v160);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v119, v120, "failed to create recordID %s", v121, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                (*v123)(v133, v152);
              }
              else
              {
                swift_bridgeObjectRelease_n();

                (*v155)(v16, (id)v25);
              }
              goto LABEL_74;
            }
            id v56 = *(id *)(v51 + 32);
          }
          uint64_t v54 = v56;
        }
      }
      else
      {
        uint64_t v54 = *(void **)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v55 = v150;
        if (v54) {
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease();
      id v57 = v161;
      id v161 = v54;

      goto LABEL_22;
    }
    id v58 = v160;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v131 = 0;
    unint64_t v53 = v149;
    uint64_t v55 = v150;
LABEL_22:
    id v156 = v9;
    if (v161)
    {
      uint64_t v5 = (uint64_t)v16;
      swift_bridgeObjectRelease();
      if (qword_10032AB80 != -1) {
        swift_once();
      }
      uint64_t v59 = v148;
      uint64_t v60 = sub_100080F90(v148, (uint64_t)qword_10032AB88);
      (*v135)(v55, v60, v59);
      os_log_type_t v9 = v152;
      id v61 = *v151;
      uint64_t v62 = v142;
      (*v151)(v142, v5, v152);
      v61(v53, v5, v9);
      id v63 = Logger.logObject.getter();
      int v64 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v63, (os_log_type_t)v64))
      {
        uint64_t v86 = *v155;
        (*v155)(v62, v9);
        v86(v53, v9);

        (*v134)(v55, v59);
        uint64_t v20 = v140;
        int64_t v25 = v158;
        uint64_t v16 = (char *)v5;
        goto LABEL_41;
      }
      uint64_t v65 = swift_slowAlloc();
      id v160 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v65 = v130;
      id v66 = v161;
      LODWORD(v136) = v64;
      if (v161)
      {
        id v67 = [v161 recordID];
        unint64_t v68 = v142;
        if (v67)
        {
          uint64_t v69 = v67;
          uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v72 = v71;
        }
        else
        {
          unint64_t v72 = 0xE300000000000000;
          uint64_t v70 = 7104878;
        }
      }
      else
      {
        unint64_t v72 = 0xE300000000000000;
        uint64_t v70 = 7104878;
        unint64_t v68 = v142;
      }
      uint64_t v159 = sub_10008D114(v70, v72, (uint64_t *)&v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v65 + 12) = 2080;
      if (v66)
      {
        id v97 = [v66 uri];
        id v66 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v99 = v98;
      }
      else
      {
        unint64_t v99 = 0xE000000000000000;
      }
      os_log_type_t v9 = v152;
      uint64_t v159 = sub_10008D114((uint64_t)v66, v99, (uint64_t *)&v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v65 + 22) = 2080;
      sub_1000C13C8(&qword_100320D48, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v159 = sub_10008D114(v100, v101, (uint64_t *)&v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v5 = (uint64_t)v155;
      NSString v102 = *v155;
      (*v155)(v68, v9);
      *(_WORD *)(v65 + 32) = 2048;
      id v103 = v149;
      Date.timeIntervalSince1970.getter();
      uint64_t v159 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v102(v103, v9);
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v136, "setOptIn: updating existing record %s %s %s[%f", (uint8_t *)v65, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*v134)(v150, v148);
      uint64_t v16 = v133;
      uint64_t v20 = v140;
    }
    else
    {
      uint64_t v73 = (*(uint64_t (**)(uint64_t, int64_t, uint64_t, uint64_t))(*(void *)v137 + 240))(v5, v25, v153, v154);
      if (!v73)
      {
        uint64_t v20 = (void *)v25;
        int64_t v25 = (int64_t)v152;
        uint64_t v117 = v148;
        if (qword_10032AB80 == -1) {
          goto LABEL_78;
        }
        goto LABEL_83;
      }
      os_log_type_t v74 = (void *)v73;
      int64_t v136 = v25;
      os_log_type_t v9 = v152;
      uint64_t v75 = v148;
      if (qword_10032AB80 != -1)
      {
        swift_once();
        uint64_t v75 = v148;
      }
      sub_100080F90(v75, (uint64_t)qword_10032AB88);
      os_log_type_t v76 = static os_log_type_t.info.getter();
      id v77 = v74;
      id v78 = Logger.logObject.getter();
      BOOL v79 = os_log_type_enabled(v78, v76);
      int64_t v25 = v158;
      if (v79)
      {
        uint64_t v80 = swift_slowAlloc();
        uint64_t v129 = v5;
        unint64_t v81 = (uint8_t *)v80;
        id v160 = (id)swift_slowAlloc();
        *(_DWORD *)unint64_t v81 = v126;
        char v128 = v81 + 4;
        id v82 = [v77 recordName];
        uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v85 = v84;

        uint64_t v16 = v133;
        uint64_t v159 = sub_10008D114(v83, v85, (uint64_t *)&v160);
        int64_t v25 = v158;
        os_log_type_t v9 = v152;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        uint64_t v20 = v140;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v78, v76, "creating new record %s", v81, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v5 = v129;
        swift_slowDealloc();
      }
      else
      {
      }
      os_log_type_t v87 = (void *)(*(uint64_t (**)(void))(*(void *)v137 + 152))();
      id v88 = [objc_allocWithZone((Class)CloudOptIn) initWithContext:v87];

      id v89 = v161;
      id v161 = v88;

      if (!v88)
      {
        swift_bridgeObjectRelease();

LABEL_41:
        id v96 = v161;
        if (!v161) {
          goto LABEL_73;
        }
        goto LABEL_50;
      }
      id v90 = v88;
      NSString v91 = [v77 recordName];
      if (!v91)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v91 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v90 setRecordID:v91, v124, v125];

      id v92 = v90;
      NSString v93 = String._bridgeToObjectiveC()();
      [v92 setApplication:v93];

      id v94 = v92;
      NSString v95 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v94 setUri:v95];
    }
    int64_t v25 = v158;
    id v96 = v161;
    if (!v161)
    {
LABEL_73:

      (*v155)(v16, v9);
LABEL_74:
      swift_release();
      goto LABEL_76;
    }
LABEL_50:
    id v105 = v96;
    NSString v106 = String._bridgeToObjectiveC()();
    [v105 setCkstate:v106];

    sub_10008E0A0(0, &qword_100320AD8);
    Class isa = NSNumber.init(integerLiteral:)(v143).super.super.isa;
    [v105 setState:isa];

    Class v108 = Date._bridgeToObjectiveC()().super.isa;
    [v105 setSmtTimestamp:v108];

    (*v155)(v16, v9);
    unint64_t v27 = v157;
    if (v157) {
      goto LABEL_4;
    }
LABEL_6:
    int64_t v39 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      goto LABEL_82;
    }
    if (v39 >= v132)
    {
      long long v38 = v147;
    }
    else
    {
      unint64_t v40 = *(void *)(v127 + 8 * v39);
      long long v38 = v147;
      if (v40) {
        goto LABEL_9;
      }
      v25 += 2;
      if (v39 + 1 >= v132)
      {
        int64_t v25 = v39;
      }
      else
      {
        unint64_t v40 = *(void *)(v127 + 8 * v25);
        if (v40)
        {
          ++v39;
LABEL_9:
          uint64_t v28 = v16;
          uint64_t v29 = v9;
          uint64_t v157 = (v40 - 1) & v40;
          unint64_t v30 = __clz(__rbit64(v40)) + (v39 << 6);
          int64_t v25 = v39;
          goto LABEL_5;
        }
        if (v39 + 2 < v132)
        {
          unint64_t v40 = *(void *)(v127 + 8 * (v39 + 2));
          if (v40)
          {
            v39 += 2;
            goto LABEL_9;
          }
          int64_t v109 = v39 + 3;
          if (v39 + 3 >= v132)
          {
            int64_t v25 = v39 + 2;
          }
          else
          {
            unint64_t v40 = *(void *)(v127 + 8 * v109);
            if (v40)
            {
              v39 += 3;
              goto LABEL_9;
            }
            while (1)
            {
              int64_t v39 = v109 + 1;
              if (__OFADD__(v109, 1)) {
                __break(1u);
              }
              if (v39 >= v132) {
                break;
              }
              unint64_t v40 = *(void *)(v127 + 8 * v39);
              ++v109;
              if (v40) {
                goto LABEL_9;
              }
            }
            int64_t v25 = v124;
          }
        }
      }
    }
    uint64_t v41 = sub_100080E08(&qword_100321168);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v20, 1, 1, v41);
    uint64_t v157 = 0;
  }
  uint64_t v110 = swift_release();
  unint64_t v111 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v137 + 152))(v110);
  id v160 = 0;
  unsigned __int8 v112 = [v111 save:&v160];

  if (v112)
  {
    id v113 = v161;
    id v114 = v160;

    return;
  }
  id v115 = v160;
  uint64_t v116 = _convertNSErrorToError(_:)();

  uint64_t v131 = v116;
  swift_willThrow();
LABEL_76:
}

void sub_1000B3E30(NSObject *a1, NSObject *a2, NSObject *a3, uint64_t a4, NSObject *a5, int a6)
{
  uint64_t v35 = a4;
  uint64_t v7 = v6;
  uint64_t v36 = a2;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100080F90(v16, (uint64_t)qword_10032AB88);
  (*(void (**)(char *, NSObject *, uint64_t))(v13 + 16))(v15, a3, v12);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  int v33 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    unint64_t v30 = a3;
    uint64_t v20 = v19;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v38 = v29;
    *(_DWORD *)uint64_t v20 = 136315906;
    os_log_t v28 = v17;
    uint64_t v34 = a1;
    unint64_t v21 = (unint64_t)v36;
    swift_bridgeObjectRetain();
    uint64_t v37 = sub_10008D114((uint64_t)v34, v21, &v38);
    int v32 = a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    uint64_t v31 = a5;
    sub_1000C13C8(&qword_100320D48, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = sub_10008D114(v22, v23, &v38);
    a1 = v34;
    a5 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    *(_WORD *)(v20 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v24 = v35;
    uint64_t v37 = sub_10008D114((uint64_t)v35, (unint64_t)a5, &v38);
    LOBYTE(a6) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 32) = 1024;
    LODWORD(v37) = a6 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v25 = v28;
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v33, "adding optin record %s:%s[%s] to %{BOOL}d", (uint8_t *)v20, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v30;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);

    swift_bridgeObjectRelease_n();
    uint64_t v24 = v35;
  }
  long long v26 = (void *)(*((uint64_t (**)(void))v7->isa + 19))();
  __chkstk_darwin(v26);
  unint64_t v27 = v36;
  *(&v28 - 8) = a1;
  *(&v28 - 7) = v27;
  *(&v28 - 6) = v24;
  *(&v28 - 5) = a5;
  *(&v28 - 4) = a3;
  *(&v28 - 3) = v7;
  LOBYTE((&v28)[-2]) = a6 & 1;
  NSManagedObjectContext.performAndWait<A>(_:)();
}

void sub_1000B4294(uint64_t a1, unint64_t a2, NSObject *a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v222 = a5;
  uint64_t v217 = a7;
  uint64_t v226 = a6;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v228 = v11;
  uint64_t v229 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v200 = (char *)&v200 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  v213 = (char *)&v200 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v215 = (char *)&v200 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v205 = (char *)&v200 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  v208 = (void (*)(char *, uint64_t, uint64_t))((char *)&v200 - v22);
  __chkstk_darwin(v21);
  v207 = ((char *)&v200 - v23);
  uint64_t v220 = type metadata accessor for Logger();
  uint64_t v223 = *(void *)(v220 - 8);
  uint64_t v24 = __chkstk_darwin(v220);
  v214 = (char *)&v200 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v209 = (char *)&v200 - v26;
  uint64_t v27 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v28 = __chkstk_darwin(v27 - 8);
  uint64_t v203 = (uint64_t)&v200 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v28);
  id v204 = (char *)&v200 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  v206 = (char *)&v200 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v201 = (char *)&v200 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  char v202 = (char *)&v200 - v37;
  __chkstk_darwin(v36);
  uint64_t v227 = (uint64_t)&v200 - v38;
  id v212 = self;
  id v39 = [v212 fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  uint64_t v211 = sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v40 = swift_allocObject();
  long long v210 = xmmword_1002856D0;
  *(_OWORD *)(v40 + 16) = xmmword_1002856D0;
  *(void *)(v40 + 56) = &type metadata for String;
  unint64_t v41 = sub_1000A56A8();
  uint64_t v219 = a1;
  *(void *)(v40 + 32) = a1;
  *(void *)(v40 + 40) = a2;
  *(void *)(v40 + 96) = &type metadata for String;
  *(void *)(v40 + 104) = v41;
  *(void *)(v40 + 64) = v41;
  *(void *)(v40 + 72) = a3;
  os_log_t v224 = a3;
  *(void *)(v40 + 80) = a4;
  unint64_t v216 = a2;
  swift_bridgeObjectRetain();
  v225 = a4;
  swift_bridgeObjectRetain();
  uint64_t v42 = NSPredicate.init(format:_:)();
  [v39 setPredicate:v42];

  id v232 = 0;
  id v218 = v39;
  id v43 = [v39 execute:&v232];
  id v44 = v232;
  if (!v43)
  {
    id v70 = v232;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v221 = 0;
    goto LABEL_31;
  }
  uint64_t v45 = v43;
  sub_10008E0A0(0, &qword_100320D38);
  unint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v47 = v44;

  if (!(v46 >> 62))
  {
    uint64_t v48 = v228;
    if (*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
    goto LABEL_30;
  }
  swift_bridgeObjectRetain();
  uint64_t v105 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v48 = v228;
  if (!v105)
  {
LABEL_30:
    swift_bridgeObjectRelease();
LABEL_31:
    v209 = *(char **)(v229 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v209)(v227, 1, 1, v228);
    id v106 = [v212 fetchRequest];
    uint64_t v107 = swift_allocObject();
    *(_OWORD *)(v107 + 16) = v210;
    *(void *)(v107 + 56) = &type metadata for String;
    *(void *)(v107 + 64) = v41;
    *(void *)(v107 + 32) = v224;
    *(void *)(v107 + 40) = v225;
    *(void *)(v107 + 96) = &type metadata for Bool;
    *(void *)(v107 + 104) = &protocol witness table for Bool;
    *(unsigned char *)(v107 + 72) = v217 & 1;
    swift_bridgeObjectRetain();
    Class v108 = NSPredicate.init(format:_:)();
    [v106 setPredicate:v108];

    sub_100080E08(&qword_100320D40);
    uint64_t v109 = swift_allocObject();
    *(_OWORD *)(v109 + 16) = xmmword_100287920;
    id v110 = objc_allocWithZone((Class)NSSortDescriptor);
    NSString v111 = String._bridgeToObjectiveC()();
    id v112 = [v110 initWithKey:v111 ascending:0];

    *(void *)(v109 + 32) = v112;
    id v232 = (id)v109;
    specialized Array._endMutation()();
    sub_10008E0A0(0, (unint64_t *)&unk_100321150);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v106 setSortDescriptors:isa];

    sub_100080E08(&qword_100320638);
    uint64_t v114 = swift_allocObject();
    *(_OWORD *)(v114 + 16) = xmmword_1002856F0;
    *(void *)(v114 + 56) = &type metadata for String;
    strcpy((char *)(v114 + 32), "smtTimestamp");
    *(unsigned char *)(v114 + 45) = 0;
    *(_WORD *)(v114 + 46) = -5120;
    Class v115 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v106 setPropertiesToFetch:v115];

    [v106 setFetchLimit:1];
    id v232 = 0;
    id v212 = v106;
    id v116 = [v106 execute:&v232];
    id v117 = v232;
    if (v116)
    {
      os_log_type_t v118 = v116;
      sub_10008E0A0(0, &qword_100320D38);
      unint64_t v119 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v120 = v117;

      uint64_t v121 = v220;
      unint64_t v122 = v214;
      if (v119 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v123 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v123 = *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v124 = v229;
      unint64_t v125 = (unint64_t)v204;
      if (v123)
      {
        if ((v119 & 0xC000000000000001) != 0)
        {
          id v126 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_77;
          }
          id v126 = *(id *)(v119 + 32);
        }
        uint64_t v127 = v126;
        swift_bridgeObjectRelease();
        id v128 = [v127 smtTimestamp];
        if (v128)
        {
          id v129 = v128;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v130 = 0;
          uint64_t v127 = v129;
        }
        else
        {
          uint64_t v130 = 1;
        }
        uint64_t v124 = v229;

        ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v209)(v125, v130, 1, v228);
        sub_1000C12FC(v125, v227);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      id v131 = v232;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      uint64_t v221 = 0;
      uint64_t v124 = v229;
      uint64_t v121 = v220;
      unint64_t v122 = v214;
    }
    unint64_t v125 = v216;
    uint64_t v132 = (*(uint64_t (**)(uint64_t, unint64_t, os_log_t, void (*)(char *, uint64_t, uint64_t)))(*(void *)v226 + 240))(v219, v216, v224, v225);
    uint64_t v133 = v223;
    int v134 = v215;
    if (v132)
    {
      uint64_t v135 = (void *)v132;
      if (qword_10032AB80 != -1) {
        swift_once();
      }
      uint64_t v136 = sub_100080F90(v121, (uint64_t)qword_10032AB88);
      (*(void (**)(char *, uint64_t, uint64_t))(v133 + 16))(v122, v136, v121);
      int v137 = static os_log_type_t.info.getter();
      uint64_t v138 = *(void (**)(char *, uint64_t, uint64_t))(v124 + 16);
      unint64_t v139 = v134;
      uint64_t v140 = v222;
      uint64_t v141 = v228;
      v138(v139, v222, v228);
      v208 = v138;
      v138(v213, v140, v141);
      id v142 = v135;
      uint64_t v143 = v121;
      unint64_t v144 = v122;
      long long v145 = Logger.logObject.getter();
      LODWORD(v209) = v137;
      BOOL v146 = os_log_type_enabled(v145, (os_log_type_t)v137);
      uint64_t v211 = (uint64_t)v142;
      if (v146)
      {
        v207 = v145;
        uint64_t v147 = v141;
        uint64_t v148 = swift_slowAlloc();
        v206 = (char *)swift_slowAlloc();
        id v232 = v206;
        *(_DWORD *)uint64_t v148 = 136315906;
        v149 = v142;
        id v150 = [v142 recordName];
        uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v153 = v152;

        uint64_t v231 = sub_10008D114(v151, v153, (uint64_t *)&v232);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v148 + 12) = 2080;
        sub_1000C13C8(&qword_100320D48, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v154 = v215;
        uint64_t v155 = v147;
        uint64_t v156 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v231 = sub_10008D114(v156, v157, (uint64_t *)&v232);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v158 = v229;
        uint64_t v159 = *(void (**)(char *, uint64_t))(v229 + 8);
        id v160 = v154;
        uint64_t v161 = v155;
        v159(v160, v155);
        *(_WORD *)(v148 + 22) = 2048;
        char v162 = v213;
        Date.timeIntervalSince1970.getter();
        uint64_t v231 = v163;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v159(v162, v155);
        *(_WORD *)(v148 + 32) = 2080;
        uint64_t v164 = v227;
        swift_beginAccess();
        int v165 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 48))(v164, 1, v155);
        *(void *)&long long v210 = v159;
        if (v165)
        {
          unint64_t v166 = 0xE100000000000000;
          uint64_t v167 = 45;
        }
        else
        {
          uint64_t v177 = v205;
          v208(v205, v164, v161);
          uint64_t v167 = Date.description.getter();
          unint64_t v166 = v178;
          v159(v177, v161);
        }
        p_info = Signature.info;
        Swift::Int v179 = v207;
        id v230 = (id)sub_10008D114(v167, v166, (uint64_t *)&v232);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v179, (os_log_type_t)v209, "creating new record %s %s[%f] newest %s", (uint8_t *)v148, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v174 = (*(uint64_t (**)(char *, uint64_t))(v223 + 8))(v214, v220);
        uint64_t v141 = v228;
        uint64_t v172 = v229;
        id v171 = (void *)v211;
      }
      else
      {

        id v171 = v142;
        uint64_t v172 = v229;
        id v173 = *(void (**)(char *, uint64_t))(v229 + 8);
        v173(v215, v141);
        *(void *)&long long v210 = v173;
        v173(v213, v141);

        uint64_t v174 = (*(uint64_t (**)(char *, uint64_t))(v133 + 8))(v144, v143);
        p_info = (__objc2_class_ro **)(Signature + 32);
      }
      long long v180 = *(uint64_t (**)(void))(*(void *)v226 + 152);
      long long v181 = (void *)((uint64_t (*)(uint64_t))v180)(v174);
      id v182 = [objc_allocWithZone((Class)(p_info + 436)) initWithContext:v181];

      NSString v183 = [v171 recordName];
      if (!v183)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v183 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v182 setRecordID:v183];

      NSString v184 = String._bridgeToObjectiveC()();
      [v182 setUri:v184];

      NSString v185 = String._bridgeToObjectiveC()();
      [v182 setApplication:v185];

      sub_10008E0A0(0, &qword_100320AD8);
      Class v186 = NSNumber.init(integerLiteral:)(v217 & 1).super.super.isa;
      [v182 setState:v186];

      uint64_t v187 = v227;
      swift_beginAccess();
      uint64_t v188 = v203;
      sub_1000985E0(v187, v203);
      int v189 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v172 + 48))(v188, 1, v141);
      v190 = (void (*)(char *, uint64_t))v210;
      if (v189 == 1)
      {
        sub_100087A1C(v188, (uint64_t *)&unk_10031F9A0);
      }
      else
      {
        v191 = v200;
        (*(void (**)(char *, uint64_t, uint64_t))(v172 + 32))(v200, v188, v141);
        if (static Date.> infix(_:_:)())
        {
          uint64_t v192 = v191;
          Class v193 = Date._bridgeToObjectiveC()().super.isa;
          [v182 setSmtTimestamp:v193];

          v190(v192, v141);
LABEL_66:
          NSString v195 = String._bridgeToObjectiveC()();
          [v182 setCkstate:v195];

          v196 = (void *)v180();
          id v230 = 0;
          unsigned int v197 = [v196 save:&v230];

          if (v197)
          {
            id v198 = v230;
          }
          else
          {
            id v199 = v230;
            _convertNSErrorToError(_:)();

            swift_willThrow();
          }

          id v176 = (id)v211;
LABEL_70:

          sub_100087A1C(v227, (uint64_t *)&unk_10031F9A0);
          return;
        }
        v190(v191, v141);
      }
      Class v194 = Date._bridgeToObjectiveC()().super.isa;
      [v182 setSmtTimestamp:v194];

      goto LABEL_66;
    }
    if (qword_10032AB80 == -1)
    {
LABEL_51:
      sub_100080F90(v121, (uint64_t)qword_10032AB88);
      os_log_type_t v168 = static os_log_type_t.error.getter();
      swift_bridgeObjectRetain_n();
      int64_t v169 = Logger.logObject.getter();
      if (os_log_type_enabled(v169, v168))
      {
        long long v170 = (uint8_t *)swift_slowAlloc();
        id v232 = (id)swift_slowAlloc();
        *(_DWORD *)long long v170 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v231 = sub_10008D114(v219, v125, (uint64_t *)&v232);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v169, v168, "failed to create recordID %s", v170, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v176 = v218;
      goto LABEL_70;
    }
LABEL_77:
    swift_once();
    goto LABEL_51;
  }
LABEL_4:
  if ((v46 & 0xC000000000000001) != 0)
  {
    id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v49 = v229;
    uint64_t v50 = v223;
    unint64_t v51 = v209;
    id v52 = v208;
  }
  else
  {
    uint64_t v49 = v229;
    uint64_t v50 = v223;
    unint64_t v51 = v209;
    id v52 = v208;
    if (!*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_73;
    }
    id v53 = *(id *)(v46 + 32);
  }
  swift_bridgeObjectRelease();
  uint64_t v54 = qword_10032AB80;
  a3 = v53;
  if (v54 != -1) {
LABEL_73:
  }
    swift_once();
  uint64_t v55 = v220;
  uint64_t v56 = sub_100080F90(v220, (uint64_t)qword_10032AB88);
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v51, v56, v55);
  uint64_t v58 = v49 + 16;
  id v57 = *(void (**)(NSObject *, uint64_t, uint64_t))(v49 + 16);
  uint64_t v59 = v207;
  uint64_t v60 = v222;
  v57(v207, v222, v48);
  uint64_t v227 = v58;
  v225 = (void (*)(char *, uint64_t, uint64_t))v57;
  v57(v52, v60, v48);
  id v61 = a3;
  uint64_t v62 = Logger.logObject.getter();
  int v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, (os_log_type_t)v63))
  {
    LODWORD(v219) = v63;
    os_log_t v224 = v62;
    uint64_t v64 = swift_slowAlloc();
    uint64_t v217 = swift_slowAlloc();
    id v232 = (id)v217;
    *(_DWORD *)uint64_t v64 = 136316162;
    id v65 = [v61 recordID];
    if (v65)
    {
      id v66 = v65;
      uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v69 = v68;
    }
    else
    {
      unint64_t v69 = 0xE300000000000000;
      uint64_t v67 = 7104878;
    }
    uint64_t v73 = v207;
    unint64_t v72 = &selRef_copyApplicationState_block_;
    uint64_t v231 = sub_10008D114(v67, v69, (uint64_t *)&v232);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v64 + 12) = 2080;
    id v74 = [v61 uri];
    uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v77 = v76;

    uint64_t v231 = sub_10008D114(v75, v77, (uint64_t *)&v232);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v64 + 22) = 2080;
    sub_1000C13C8(&qword_100320D48, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v48 = v228;
    uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v231 = sub_10008D114(v78, v79, (uint64_t *)&v232);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v80 = *(void (**)(NSObject *, uint64_t))(v229 + 8);
    v80(v73, v48);
    *(_WORD *)(v64 + 32) = 2048;
    unint64_t v81 = v208;
    Date.timeIntervalSince1970.getter();
    uint64_t v231 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v80(v81, v48);
    *(_WORD *)(v64 + 42) = 2080;
    id v83 = [v61 smtTimestamp];
    if (v83)
    {
      unint64_t v84 = v83;
      uint64_t v85 = (uint64_t)v201;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v86 = 0;
      uint64_t v87 = (uint64_t)v202;
    }
    else
    {
      uint64_t v86 = 1;
      uint64_t v87 = (uint64_t)v202;
      uint64_t v85 = (uint64_t)v201;
    }
    uint64_t v88 = v229;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v229 + 56))(v85, v86, 1, v48);
    sub_1000C1364(v85, v87, (uint64_t *)&unk_10031F9A0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v87, 1, v48))
    {
      sub_100087A1C(v87, (uint64_t *)&unk_10031F9A0);
      unint64_t v89 = 0xE100000000000000;
      uint64_t v90 = 45;
    }
    else
    {
      NSString v91 = v205;
      v225(v205, v87, v48);
      sub_100087A1C(v87, (uint64_t *)&unk_10031F9A0);
      uint64_t v90 = Date.description.getter();
      unint64_t v89 = v92;
      v80(v91, v48);
    }
    uint64_t v231 = sub_10008D114(v90, v89, (uint64_t *)&v232);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    os_log_t v93 = v224;
    _os_log_impl((void *)&_mh_execute_header, v224, (os_log_type_t)v219, "addOptIn: have existing record %s %s %s[%f] %s", (uint8_t *)v64, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v223 + 8))(v209, v220);
  }
  else
  {

    unint64_t v71 = *(void (**)(NSObject *, uint64_t))(v229 + 8);
    v71(v59, v48);
    v71(v52, v48);

    (*(void (**)(char *, uint64_t))(v223 + 8))(v51, v55);
    unint64_t v72 = &selRef_copyApplicationState_block_;
  }
  id v94 = [v61 v72[474]];
  uint64_t v95 = (uint64_t)v206;
  if (v94)
  {
    id v96 = v94;
    id v97 = v205;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v98 = v229;
    (*(void (**)(uint64_t, char *, uint64_t))(v229 + 32))(v95, v97, v48);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v48);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v95, 1, v48) != 1)
    {

      sub_100087A1C(v95, (uint64_t *)&unk_10031F9A0);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v229 + 56))(v206, 1, 1, v48);
  }
  sub_100087A1C(v95, (uint64_t *)&unk_10031F9A0);
  Class v99 = Date._bridgeToObjectiveC()().super.isa;
  [v61 setSmtTimestamp:v99];

  NSString v100 = String._bridgeToObjectiveC()();
  [v61 setCkstate:v100];

  unint64_t v101 = (void *)(*(uint64_t (**)(void))(*(void *)v226 + 152))();
  id v232 = 0;
  unsigned int v102 = [v101 save:&v232];

  if (v102)
  {
    id v103 = v232;
  }
  else
  {
    id v104 = v232;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t sub_1000B5D84(void *a1)
{
  uint64_t v2 = v1;
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100080F90(v4, (uint64_t)qword_10032AB88);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = [v5 recordID:v8 + 4];
    id v10 = [v9 recordName];

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    sub_10008D114(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "merging cloud optin: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v14 = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 152))();
  __chkstk_darwin(v14);
  NSManagedObjectContext.performAndWait<A>(_:)();

  return v16;
}

void sub_1000B6008(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  long long v145 = a3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v147 = *(void *)(v5 - 8);
  uint64_t v148 = v5;
  __chkstk_darwin(v5);
  BOOL v146 = (char *)&v129 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v138 = (char *)&v129 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v139 = (uint64_t)&v129 - v11;
  __chkstk_darwin(v10);
  uint64_t v133 = (uint64_t)&v129 - v12;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v141 = v13;
  uint64_t v142 = v14;
  uint64_t v15 = __chkstk_darwin(v13);
  int v134 = (char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v132 = (char *)&v129 - v17;
  uint64_t v18 = sub_100080E08((uint64_t *)&unk_100321130);
  __chkstk_darwin(v18 - 8);
  uint64_t v143 = (char *)&v129 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = type metadata accessor for CloudOptInData();
  uint64_t v136 = *(void (***)(void, void, void, void))(v140 - 8);
  __chkstk_darwin(v140);
  uint64_t v135 = (uint64_t)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v21 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1002856F0;
  id v149 = a1;
  id v23 = [a1 recordID];
  id v24 = [v23 recordName];

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_1000A56A8();
  *(void *)(v22 + 32) = v25;
  *(void *)(v22 + 40) = v27;
  uint64_t v28 = NSPredicate.init(format:_:)();
  [v21 setPredicate:v28];

  v152[0] = 0;
  unint64_t v144 = (char *)v21;
  id v29 = [v21 execute:v152];
  id v30 = v152[0];
  if (!v29)
  {
    id v38 = v152[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v39 = swift_errorRelease();
    uint64_t v34 = 0;
LABEL_10:
    unint64_t v41 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(v39);
    id v42 = [objc_allocWithZone((Class)CloudOptIn) initWithContext:v41];

    if (!v42)
    {
      uint64_t v150 = v34;
      char v74 = 0;
      uint64_t v75 = v144;
      goto LABEL_41;
    }
    id v37 = v42;
    id v43 = [v149 recordID];
    NSString v44 = [v43 recordName];

    if (!v44)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      NSString v44 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [v37 setRecordID:v44];

    goto LABEL_14;
  }
  uint64_t v31 = v29;
  sub_10008E0A0(0, &qword_100320D38);
  unint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v33 = v30;

  if (!(v32 >> 62))
  {
    uint64_t v34 = v150;
    if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v34 = v150;
  if (!v40)
  {
LABEL_9:
    uint64_t v39 = swift_bridgeObjectRelease();
    goto LABEL_10;
  }
LABEL_4:
  if ((v32 & 0xC000000000000001) != 0)
  {
    id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
LABEL_14:
    uint64_t v35 = v148;
    uint64_t v36 = v143;
    goto LABEL_15;
  }
  uint64_t v35 = v148;
  uint64_t v36 = v143;
  if (!*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    __break(1u);
  }
  id v37 = *(id *)(v32 + 32);
  swift_bridgeObjectRelease();
LABEL_15:
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  id v45 = v37;
  uint64_t v46 = JSONDecoder.init()();
  id v47 = [v149 encryptedValues];
  NSString v48 = String._bridgeToObjectiveC()();
  id v49 = [v47 objectForKeyedSubscript:v48];
  swift_unknownObjectRelease();

  if (!v49)
  {
    uint64_t v150 = v34;
    uint64_t v143 = 0;
LABEL_20:
    id v52 = v146;
    uint64_t v51 = v147;
    goto LABEL_22;
  }
  uint64_t v151 = (uint64_t)v49;
  sub_100080E08(&qword_100320AC0);
  char v50 = swift_dynamicCast();
  id v52 = v146;
  uint64_t v51 = v147;
  if ((v50 & 1) == 0)
  {
    uint64_t v150 = v34;
    uint64_t v143 = 0;
    goto LABEL_22;
  }
  id v131 = v45;
  id v53 = v152[0];
  id v54 = v152[1];
  sub_1000C13C8((unint64_t *)&unk_100321140, (void (*)(uint64_t))type metadata accessor for CloudOptInData);
  uint64_t v55 = v46;
  uint64_t v56 = (uint64_t)v36;
  uint64_t v57 = v140;
  uint64_t v137 = v55;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (!v34)
  {
    uint64_t v129 = (uint64_t)v53;
    unint64_t v130 = (unint64_t)v54;
    uint64_t v150 = 0;
    v136[7](v56, 0, 1, v57);
    uint64_t v104 = v135;
    sub_1000C1298(v56, v135);
    swift_bridgeObjectRetain();
    NSString v105 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v45 = v131;
    [v131 setUri:v105];

    uint64_t v106 = *(void *)(v104 + 32);
    uint64_t v107 = *(void *)(v104 + 40);
    swift_bridgeObjectRetain();
    NSString v108 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v45 setApplication:v108];

    uint64_t v109 = v104;
    id v110 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 264);
    swift_bridgeObjectRetain();
    uint64_t v143 = (char *)v110(v106, v107);
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v109 + 56) == 1)
    {
      [v45 setState:0];
    }
    else
    {
      id v111 = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(v109 + 48)];
      [v45 setState:v111];
    }
    uint64_t v112 = v142;
    uint64_t v113 = v133;
    uint64_t v46 = v137;
    uint64_t v35 = v148;
    uint64_t v114 = v140;
    sub_1000985E0(v109 + *(int *)(v140 + 32), v133);
    uint64_t v115 = v141;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v113, 1, v141) == 1)
    {
      sub_100087A1C(v113, (uint64_t *)&unk_10031F9A0);
    }
    else
    {
      id v116 = v132;
      (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(v132, v113, v115);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      [v45 setSmtTimestamp:isa];

      os_log_type_t v118 = v116;
      uint64_t v109 = v135;
      (*(void (**)(char *, uint64_t))(v112 + 8))(v118, v115);
    }
    if (*(void *)(v109 + *(int *)(v114 + 40) + 8))
    {
      swift_bridgeObjectRetain();
      NSString v119 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v45 setSerialNumber:v119];

      uint64_t v114 = v140;
    }
    if (*(void *)(v109 + *(int *)(v114 + 36) + 8))
    {
      swift_bridgeObjectRetain();
      NSString v120 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v45 setOsVersion:v120];
    }
    id v121 = [v45 application];
    Swift::Int v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::Int v124 = v123;

    unint64_t v125 = (uint64_t (*)(id *, void))(*(uint64_t (**)(id *))(*(void *)a2 + 216))(v152);
    sub_100096348(&v151, v122, v124);
    swift_bridgeObjectRelease();
    uint64_t v126 = v125(v152, 0);
    uint64_t v127 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(v126);
    if (v127)
    {
      id v128 = v127;
      [v127 trigger];
      sub_100080CB0(v129, v130);

      sub_1000AC4E0(v135);
    }
    else
    {
      sub_1000AC4E0(v135);
      sub_100080CB0(v129, v130);
    }
    goto LABEL_20;
  }
  swift_errorRelease();
  v136[7](v56, 1, 1, v57);
  sub_100080CB0((uint64_t)v53, (unint64_t)v54);
  sub_100087A1C(v56, (uint64_t *)&unk_100321130);
  uint64_t v143 = 0;
  uint64_t v150 = 0;
  uint64_t v46 = v137;
  uint64_t v35 = v148;
  id v45 = v131;
LABEL_22:
  NSString v58 = String._bridgeToObjectiveC()();
  [v45 setCkstate:v58];

  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v59 = sub_100080F90(v35, (uint64_t)qword_10032AB88);
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v52, v59, v35);
  id v60 = v45;
  id v61 = Logger.logObject.getter();
  int v62 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v61, (os_log_type_t)v62))
  {
    LODWORD(v135) = v62;
    uint64_t v137 = v46;
    uint64_t v63 = swift_slowAlloc();
    uint64_t v140 = swift_slowAlloc();
    uint64_t v136 = (void (**)(void, void, void, void))swift_slowAlloc();
    v152[0] = v136;
    *(_DWORD *)uint64_t v63 = 136315906;
    id v64 = [v60 uri];
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v67 = v66;

    uint64_t v151 = sub_10008D114(v65, v67, (uint64_t *)v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 12) = 2080;
    id v68 = [v60 application];
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v71 = v70;

    uint64_t v151 = sub_10008D114(v69, v71, (uint64_t *)v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 22) = 2112;
    id v72 = [v60 state];
    id v73 = v72;
    if (v72) {
      uint64_t v151 = (uint64_t)v72;
    }
    else {
      uint64_t v151 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v76 = (uint64_t)v138;
    *(void *)uint64_t v140 = v73;

    *(_WORD *)(v63 + 32) = 2080;
    id v77 = [v60 smtTimestamp];
    uint64_t v78 = v148;
    uint64_t v79 = v142;
    if (v77)
    {
      uint64_t v80 = v77;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v81 = 0;
    }
    else
    {
      uint64_t v81 = 1;
    }
    uint64_t v82 = v141;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56))(v76, v81, 1, v141);
    uint64_t v83 = v139;
    sub_1000C1364(v76, v139, (uint64_t *)&unk_10031F9A0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v83, 1, v82))
    {
      sub_100087A1C(v83, (uint64_t *)&unk_10031F9A0);
      unint64_t v84 = 0xE100000000000000;
      uint64_t v85 = 45;
    }
    else
    {
      uint64_t v86 = v134;
      (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v134, v83, v82);
      sub_100087A1C(v83, (uint64_t *)&unk_10031F9A0);
      uint64_t v87 = Date.description.getter();
      uint64_t v88 = v79;
      uint64_t v85 = v87;
      unint64_t v84 = v89;
      (*(void (**)(char *, uint64_t))(v88 + 8))(v86, v82);
    }
    uint64_t v151 = sub_10008D114(v85, v84, (uint64_t *)v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v135, "merged cloud optin: %s[%s] %@ %s", (uint8_t *)v63, 0x2Au);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v147 + 8))(v146, v78);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v35);
  }
  uint64_t v90 = (*(uint64_t (**)(id, id))(*(void *)a2 + 448))(v60, v149);
  NSString v91 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 152))(v90);
  v152[0] = 0;
  unsigned int v92 = [v91 save:v152];

  if (v92)
  {
    id v93 = v152[0];
  }
  else
  {
    id v94 = v152[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v150 = 0;
  }
  id v95 = [v60 uri];
  uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v98 = v97;

  id v99 = [v60 application];
  uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v102 = v101;

  uint64_t v103 = v96;
  uint64_t v75 = v143;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)a2 + 376))(v103, v98, v100, v102, v143);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  char v74 = 1;
LABEL_41:

  char *v145 = v74;
}

void sub_1000B7268(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = (void *)(*(uint64_t (**)(void))(*v5 + 248))();
  if (!v12) {
    return;
  }
  if (v5[11] == a1 && v5[12] == a2) {
    goto LABEL_8;
  }
  id v35 = v12;
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
    uint64_t v12 = v35;
LABEL_8:

    return;
  }
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100080F90(v14, (uint64_t)qword_10032AB88);
  id v15 = v35;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v16 = v15;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    os_log_type_t type = v18;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315650;
    [v16 state];
    os_log_t log = v17;
    id v20 = (id)KTOptInGetString();
    id v36 = a5;
    id v21 = v16;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    sub_10008D114(v22, v24, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_10008D114(a3, a4, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 22) = 2080;
    id v16 = v21;
    a5 = v36;
    swift_bridgeObjectRetain();
    sub_10008D114(a1, a2, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, type, "updating peer opt-in state to %s for %s for %s", (uint8_t *)v19, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = (void *)v6[8];
    if (v25) {
      goto LABEL_15;
    }
LABEL_20:

    return;
  }

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();

  uint64_t v25 = (void *)v5[8];
  if (!v25) {
    goto LABEL_20;
  }
LABEL_15:
  swift_unknownObjectRetain();
  BOOL v26 = sub_1000FFEC0((uint64_t)[v16 state]);
  sub_100080E08(&qword_100320AD0);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1002856F0;
  *(void *)(v27 + 32) = a1;
  *(void *)(v27 + 40) = a2;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v29 = String._bridgeToObjectiveC()();
  [v25 setCachedPeerOptInState:v26 uris:isa application:v29];

  if (a5)
  {
    id v30 = a5;
    id v31 = [v30 state];
    if (v31 == [v16 state] || !sub_1000FFEC0((uint64_t)objc_msgSend(v16, "state")))
    {
      swift_unknownObjectRelease();
    }
    else
    {
      NSString v32 = String._bridgeToObjectiveC()();
      [v25 removeFailuresOnOptIn:v32];
      swift_unknownObjectRelease();
    }
  }
  else
  {

    swift_unknownObjectRelease();
  }
}

uint64_t sub_1000B7704(void *a1)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152))();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1000BE3B8;
  *(void *)(v5 + 24) = v4;
  void v10[4] = sub_100091FB0;
  void v10[5] = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100091FD8;
  v10[3] = &unk_1002BED00;
  uint64_t v6 = _Block_copy(v10);
  id v7 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B7894()
{
  uint64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v9;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000BEAD8;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000984E8;
  void aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BED78;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    id v7 = v9;
    swift_release();
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_1000B7A2C()
{
  uint64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v9;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000BEB00;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000984E8;
  void aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BEDF0;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    id v7 = v9;
    swift_release();
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_1000B7BC4()
{
  unsigned __int8 v9 = 0;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 152))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = &v9;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000BED34;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000984E8;
  void aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BEE68;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v9;
    swift_release();
    return v7;
  }
  return result;
}

uint64_t sub_1000B7D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 152))();
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  void v8[5] = v3;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1000BEF78;
  *(void *)(v9 + 24) = v8;
  v13[4] = sub_1000984E8;
  v13[5] = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100091FD8;
  v13[3] = &unk_1002BEEE0;
  uint64_t v10 = _Block_copy(v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v7 performBlockAndWait:v10];

  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000B7EFC(void *a1)
{
  uint64_t v12 = 0;
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 152))();
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = a1;
  v4[3] = &v12;
  v4[4] = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1000BF6C4;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_1000984E8;
  void aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BEF58;
  uint64_t v6 = _Block_copy(aBlock);
  id v7 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v12;
    swift_release();
    return v10;
  }
  return result;
}

Class sub_1000B80A0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (int *)type metadata accessor for CloudOptInData();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = [a1 ckrecord];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v14 = 0xF000000000000000;
  }
  uint64_t v15 = type metadata accessor for KTCloudRecords();
  Class isa = (Class)(*(uint64_t (**)(uint64_t, unint64_t))(v15 + 440))(v12, v14);
  sub_10008FCD4(v12, v14);
  if (!isa)
  {
    uint64_t v17 = (*(uint64_t (**)(void *))(*v2 + 440))(a1);
    if (!v17) {
      return 0;
    }
    v18.super.Class isa = (Class)v17;
    sub_10008E0A0(0, &qword_100321980);
    uint64_t v19 = v2[2];
    id v20 = (void *)v2[3];
    swift_bridgeObjectRetain();
    v21._countAndFlagsBits = v19;
    v21._object = v20;
    Class isa = CKRecord.init(recordType:recordID:)(v21, v18).super.isa;
  }
  id v22 = [(objc_class *)isa recordID];
  id v23 = [v22 recordName];

  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v25;

  id v26 = [a1 uri];
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v65 = v28;
  uint64_t v66 = v27;

  id v29 = [a1 application];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v63 = v31;
  uint64_t v64 = v30;

  id v32 = [a1 state];
  id v33 = v32;
  if (v32)
  {
    id v62 = [v32 integerValue];
  }
  else
  {
    id v62 = 0;
  }
  id v34 = [a1 smtTimestamp];
  if (v34)
  {
    id v35 = v34;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v36 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v6, 0, 1, v36);
  }
  else
  {
    uint64_t v37 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v6, 1, 1, v37);
  }
  id v38 = (void *)v2[7];
  if (v38)
  {
    id v61 = v7;
    uint64_t v39 = isa;
    uint64_t v40 = v6;
    uint64_t v41 = v24;
    id v42 = [v38 osVersion];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v45 = v44;

    id v46 = [v38 serialNumber];
    if (v46)
    {
      id v47 = v46;
      id v38 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v49 = v48;
    }
    else
    {
      id v38 = 0;
      uint64_t v49 = 0;
    }
    uint64_t v24 = v41;
    uint64_t v6 = v40;
    Class isa = v39;
    id v7 = v61;
  }
  else
  {
    uint64_t v49 = 0;
    uint64_t v43 = 0;
    uint64_t v45 = 0;
  }
  uint64_t v50 = v67;
  *(void *)uint64_t v9 = v24;
  *((void *)v9 + 1) = v50;
  uint64_t v51 = v65;
  *((void *)v9 + 2) = v66;
  *((void *)v9 + 3) = v51;
  uint64_t v52 = v63;
  *((void *)v9 + 4) = v64;
  *((void *)v9 + 5) = v52;
  *((void *)v9 + 6) = v62;
  v9[56] = v33 == 0;
  sub_1000C1364((uint64_t)v6, (uint64_t)&v9[v7[8]], (uint64_t *)&unk_10031F9A0);
  id v53 = (uint64_t *)&v9[v7[9]];
  *id v53 = v43;
  v53[1] = v45;
  id v54 = &v9[v7[10]];
  *(void *)id v54 = v38;
  *((void *)v54 + 1) = v49;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1000C13C8(&qword_100320D50, (void (*)(uint64_t))type metadata accessor for CloudOptInData);
  uint64_t v55 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v57 = v56;
  id v58 = [(objc_class *)isa encryptedValues];
  swift_getObjectType();
  unint64_t v70 = &type metadata for Data;
  unint64_t v71 = &protocol witness table for Data;
  uint64_t v68 = v55;
  unint64_t v69 = v57;
  sub_100080C58(v55, v57);
  CKRecordKeyValueSetting.subscript.setter();
  swift_unknownObjectRelease();
  swift_release();
  sub_100080CB0(v55, v57);
  sub_1000AC4E0((uint64_t)v9);
  return isa;
}

CKRecordID sub_1000B860C(void *a1)
{
  id v3 = [a1 recordID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v7 = v6;

    sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
    id v8 = v1[5];
    v9._countAndFlagsBits = v5;
    v9._object = v7;
    return CKRecordID.init(recordName:zoneID:)(v9, (CKRecordZoneID)v8);
  }
  else
  {
    id v11 = [a1 uri];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    id v15 = [a1 application];
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;

    uint64_t v19 = (*((uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))*v1 + 30))(v12, v14, v16, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (CKRecordID)v19;
  }
}

uint64_t sub_1000B8748()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 152))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1000BFFC4;
  *(void *)(v2 + 24) = v0;
  void v5[4] = sub_1000984E8;
  void v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100091FD8;
  v5[3] = &unk_1002BEFA8;
  id v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  [(id)v1 performBlockAndWait:v3];

  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

id *sub_1000B88AC()
{
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000B890C()
{
  sub_1000B88AC();

  return _swift_deallocClassInstance(v0, 104, 7);
}

uint64_t sub_1000B8940()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000B8974()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 368))() & 1;
}

uint64_t sub_1000B89C4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 384))();
}

uint64_t sub_1000B8A10()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 392))();
}

uint64_t sub_1000B8A5C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 400))();
}

uint64_t sub_1000B8AA8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 408))() & 1;
}

uint64_t sub_1000B8AF8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 416))();
}

uint64_t sub_1000B8B44()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 424))();
}

uint64_t sub_1000B8B90()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 432))();
}

uint64_t sub_1000B8BDC()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 440))();
}

uint64_t sub_1000B8C28()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 456))();
}

uint64_t sub_1000B8C74(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1000B8CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000B8CC8()
{
  return swift_release();
}

uint64_t sub_1000B8CD0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1000BB928(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1000B8E44(v6);
  return specialized ContiguousArray._endMutation()();
}

void *sub_1000B8D4C(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      id v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_100080E08(&qword_100320D40);
      id v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1000BB6F4((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void sub_1000B8E44(uint64_t *a1)
{
  uint64_t v2 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v178 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  id v8 = (char *)&v178 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  id v11 = (char *)&v178 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v178 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  NSString v185 = (char *)&v178 - v16;
  __chkstk_darwin(v15);
  Class v186 = (char *)&v178 - v17;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  id v22 = (char *)&v178 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20);
  v209 = (char *)&v178 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v191 = (char *)&v178 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v196 = (char *)&v178 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  NSString v184 = (char *)&v178 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v206 = (char *)&v178 - v32;
  __chkstk_darwin(v31);
  uint64_t v187 = (char *)&v178 - v33;
  Swift::Int v34 = a1[1];
  Swift::Int v35 = _minimumMergeRunLength(_:)(v34);
  if (v35 >= v34)
  {
    if (v34 < 0) {
      goto LABEL_169;
    }
    if (v34) {
      sub_1000B9F70(0, v34, 1, a1);
    }
    return;
  }
  if (v34 >= 0) {
    uint64_t v36 = v34;
  }
  else {
    uint64_t v36 = v34 + 1;
  }
  if (v34 < -1) {
    goto LABEL_177;
  }
  Swift::Int v182 = v35;
  int v189 = v11;
  Class v193 = (char *)v34;
  if (v34 < 2)
  {
    uint64_t v39 = (char *)_swiftEmptyArrayStorage;
    uint64_t v211 = (uint64_t)_swiftEmptyArrayStorage;
    unsigned int v197 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v34 != 1)
    {
      unint64_t v43 = _swiftEmptyArrayStorage[2];
LABEL_133:
      uint64_t v164 = v198;
      if (v43 >= 2)
      {
        uint64_t v165 = *a1;
        do
        {
          unint64_t v166 = v43 - 2;
          if (v43 < 2) {
            goto LABEL_164;
          }
          if (!v165) {
            goto LABEL_176;
          }
          unint64_t v167 = v43 - 1;
          uint64_t v168 = (uint64_t)v39;
          uint64_t v169 = *(void *)&v39[16 * v166 + 32];
          uint64_t v170 = *(void *)&v39[16 * v43 + 24];
          sub_1000BA3FC((char *)(v165 + 8 * v169), (void **)(v165 + 8 * *(void *)&v39[16 * v43 + 16]), (char *)(v165 + 8 * v170), v197);
          if (v164) {
            break;
          }
          if (v170 < v169) {
            goto LABEL_165;
          }
          if (swift_isUniquelyReferenced_nonNull_native()) {
            id v171 = (char *)v168;
          }
          else {
            id v171 = sub_1000BAF68(v168);
          }
          if (v166 >= *((void *)v171 + 2)) {
            goto LABEL_166;
          }
          uint64_t v172 = v171 + 32;
          id v173 = &v171[16 * v166 + 32];
          *(void *)id v173 = v169;
          *((void *)v173 + 1) = v170;
          unint64_t v174 = *((void *)v171 + 2);
          if (v43 > v174) {
            goto LABEL_167;
          }
          v175 = &v172[16 * v43];
          size_t v176 = 16 * (v174 - v43);
          uint64_t v177 = v171;
          memmove(&v172[16 * v167], v175, v176);
          uint64_t v39 = v177;
          *((void *)v177 + 2) = v174 - 1;
          unint64_t v43 = v174 - 1;
        }
        while (v174 > 2);
      }
LABEL_146:
      swift_bridgeObjectRelease();
      *(void *)((v211 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v37 = v36 >> 1;
    sub_10008E0A0(0, (unint64_t *)&qword_1003214D0);
    uint64_t v38 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) = v37;
    unsigned int v197 = (void **)((v38 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v211 = v38;
  }
  uint64_t v40 = 0;
  Swift::Int v179 = a1;
  uint64_t v41 = *a1;
  v207 = (void (**)(char *, char *, uint64_t))(v19 + 32);
  long long v210 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v205 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  uint64_t v201 = (void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v181 = v41 + 16;
  uint64_t v180 = v41 - 8;
  uint64_t v39 = (char *)_swiftEmptyArrayStorage;
  char v202 = v5;
  v200 = v8;
  uint64_t v188 = v14;
  id v199 = v22;
  id v42 = v193;
  uint64_t v203 = v41;
  while (2)
  {
    uint64_t v44 = v40;
    uint64_t v45 = v40 + 1;
    uint64_t v194 = v40;
    if (v40 + 1 >= (uint64_t)v42) {
      goto LABEL_53;
    }
    NSString v183 = v39;
    id v46 = *(void **)(v41 + 8 * v40);
    id v47 = *(id *)(v41 + 8 * v45);
    id v204 = v46;
    id v48 = [v47 smtTimestamp];
    uint64_t v49 = (uint64_t)v185;
    uint64_t v50 = v207;
    if (v48)
    {
      uint64_t v51 = v48;
      uint64_t v52 = v206;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v53 = *v50;
      uint64_t v54 = (uint64_t)v186;
      (*v50)(v186, v52, v18);
      v208 = *v210;
      v208((char *)v54, 0, 1, v18);
      if ((*v205)(v54, 1, v18) != 1)
      {
        v53(v187, (char *)v54, v18);
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v54 = (uint64_t)v186;
      v208 = *v210;
      v208(v186, 1, 1, v18);
    }
    static Date.distantPast.getter();
    sub_100087A1C(v54, (uint64_t *)&unk_10031F9A0);
LABEL_21:
    id v55 = [v204 smtTimestamp];
    unint64_t v56 = v184;
    if (!v55)
    {
      v208((char *)v49, 1, 1, v18);
      goto LABEL_25;
    }
    unint64_t v57 = v55;
    id v58 = v206;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v59 = *v50;
    (*v50)((char *)v49, v58, v18);
    v208((char *)v49, 0, 1, v18);
    if ((*v205)(v49, 1, v18) == 1)
    {
LABEL_25:
      static Date.distantPast.getter();
      sub_100087A1C(v49, (uint64_t *)&unk_10031F9A0);
      goto LABEL_26;
    }
    v59(v56, (char *)v49, v18);
LABEL_26:
    uint64_t v60 = v187;
    LODWORD(v192) = static Date.< infix(_:_:)();
    id v61 = *v201;
    (*v201)(v56, v18);
    v190 = v61;
    v61(v60, v18);

    uint64_t v44 = v194;
    uint64_t v45 = v194 + 2;
    if (v194 + 2 >= (uint64_t)v42) {
      goto LABEL_44;
    }
    id v204 = (char *)(v194 + 2);
    id v62 = (id *)(v181 + 8 * v194);
    while (1)
    {
      uint64_t v63 = *(v62 - 1);
      uint64_t v64 = (void **)*v62;
      id v65 = v63;
      NSString v195 = v64;
      id v66 = [v64 smtTimestamp];
      if (v66)
      {
        uint64_t v67 = v66;
        uint64_t v68 = v206;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v69 = *v207;
        uint64_t v70 = (uint64_t)v188;
        (*v207)(v188, v68, v18);
        v208((char *)v70, 0, 1, v18);
        if ((*v205)(v70, 1, v18) != 1)
        {
          v69(v196, (char *)v70, v18);
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)v188;
        v208(v188, 1, 1, v18);
      }
      static Date.distantPast.getter();
      sub_100087A1C(v70, (uint64_t *)&unk_10031F9A0);
LABEL_33:
      id v71 = [v65 smtTimestamp];
      if (!v71)
      {
        uint64_t v75 = (uint64_t)v189;
        v208(v189, 1, 1, v18);
        uint64_t v76 = v191;
        goto LABEL_37;
      }
      id v72 = v71;
      id v73 = v206;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      char v74 = *v207;
      uint64_t v75 = (uint64_t)v189;
      (*v207)(v189, v73, v18);
      v208((char *)v75, 0, 1, v18);
      if ((*v205)(v75, 1, v18) == 1)
      {
        uint64_t v76 = v191;
LABEL_37:
        id v77 = v195;
        static Date.distantPast.getter();
        sub_100087A1C(v75, (uint64_t *)&unk_10031F9A0);
        goto LABEL_39;
      }
      uint64_t v76 = v191;
      v74(v191, (char *)v75, v18);
      id v77 = v195;
LABEL_39:
      uint64_t v78 = v196;
      int v79 = static Date.< infix(_:_:)();
      uint64_t v80 = v76;
      int v81 = v79;
      uint64_t v82 = v190;
      v190(v80, v18);
      v82(v78, v18);

      if ((v192 ^ v81)) {
        break;
      }
      ++v62;
      id v42 = v193;
      if (v193 == ++v204)
      {
        uint64_t v45 = (uint64_t)v193;
        goto LABEL_43;
      }
    }
    id v42 = v193;
    uint64_t v45 = (uint64_t)v204;
LABEL_43:
    uint64_t v44 = v194;
LABEL_44:
    uint64_t v39 = v183;
    uint64_t v41 = v203;
    if (v192)
    {
      if (v45 < v44) {
        goto LABEL_170;
      }
      if (v44 < v45)
      {
        uint64_t v83 = (uint64_t *)(v180 + 8 * v45);
        uint64_t v84 = v45;
        uint64_t v85 = v44;
        uint64_t v86 = (uint64_t *)(v203 + 8 * v44);
        do
        {
          if (v85 != --v84)
          {
            if (!v41) {
              goto LABEL_175;
            }
            uint64_t v87 = *v86;
            *uint64_t v86 = *v83;
            *uint64_t v83 = v87;
          }
          ++v85;
          --v83;
          ++v86;
        }
        while (v85 < v84);
      }
    }
LABEL_53:
    if (v45 >= (uint64_t)v42) {
      goto LABEL_82;
    }
    if (__OFSUB__(v45, v44)) {
      goto LABEL_168;
    }
    if (v45 - v44 >= v182) {
      goto LABEL_82;
    }
    if (__OFADD__(v44, v182)) {
      goto LABEL_171;
    }
    if (v44 + v182 >= (uint64_t)v42) {
      uint64_t v88 = v42;
    }
    else {
      uint64_t v88 = (char *)(v44 + v182);
    }
    if ((uint64_t)v88 >= v44)
    {
      if ((char *)v45 == v88) {
        goto LABEL_82;
      }
      NSString v183 = v39;
      unint64_t v89 = (void **)(v180 + 8 * v45);
      uint64_t v192 = v88;
      while (2)
      {
        id v204 = (char *)v45;
        uint64_t v90 = *(void **)(v41 + 8 * v45);
        NSString v91 = (char *)v44;
        NSString v195 = v89;
        while (2)
        {
          unsigned int v92 = *v89;
          id v93 = v90;
          id v94 = v92;
          v208 = v93;
          id v95 = [v93 smtTimestamp];
          if (!v95)
          {
            uint64_t v100 = *v210;
            uint64_t v99 = (uint64_t)v200;
            (*v210)(v200, 1, 1, v18);
            goto LABEL_70;
          }
          uint64_t v96 = v95;
          uint64_t v97 = v206;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v98 = *v207;
          uint64_t v99 = (uint64_t)v200;
          (*v207)(v200, v97, v18);
          uint64_t v100 = *v210;
          (*v210)((char *)v99, 0, 1, v18);
          if ((*v205)(v99, 1, v18) == 1)
          {
LABEL_70:
            static Date.distantPast.getter();
            sub_100087A1C(v99, (uint64_t *)&unk_10031F9A0);
          }
          else
          {
            v98(v209, (char *)v99, v18);
          }
          id v101 = [v94 smtTimestamp];
          if (v101)
          {
            uint64_t v102 = v101;
            uint64_t v103 = v206;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v104 = *v207;
            (*v207)(v5, v103, v18);
            v100(v5, 0, 1, v18);
            if ((*v205)((uint64_t)v5, 1, v18) != 1)
            {
              NSString v105 = v199;
              v104(v199, v5, v18);
              goto LABEL_77;
            }
          }
          else
          {
            v100(v5, 1, 1, v18);
          }
          NSString v105 = v199;
          static Date.distantPast.getter();
          sub_100087A1C((uint64_t)v5, (uint64_t *)&unk_10031F9A0);
LABEL_77:
          uint64_t v106 = v209;
          char v107 = static Date.< infix(_:_:)();
          NSString v108 = *v201;
          (*v201)(v105, v18);
          v108(v106, v18);

          if (v107)
          {
            uint64_t v41 = v203;
            if (!v203) {
              goto LABEL_173;
            }
            uint64_t v109 = *v89;
            uint64_t v90 = v89[1];
            *unint64_t v89 = v90;
            v89[1] = v109;
            --v89;
            ++v91;
            uint64_t v5 = v202;
            if (v204 == v91) {
              goto LABEL_64;
            }
            continue;
          }
          break;
        }
        uint64_t v5 = v202;
        uint64_t v41 = v203;
LABEL_64:
        uint64_t v45 = (uint64_t)(v204 + 1);
        uint64_t v44 = v194;
        unint64_t v89 = v195 + 1;
        if (v204 + 1 != v192) {
          continue;
        }
        break;
      }
      uint64_t v45 = (uint64_t)v192;
      uint64_t v39 = v183;
LABEL_82:
      if (v45 < v44) {
        goto LABEL_163;
      }
      id v110 = v39;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v39 = v110;
      }
      else {
        uint64_t v39 = sub_1000BADB0(0, *((void *)v110 + 2) + 1, 1, v110);
      }
      unint64_t v112 = *((void *)v39 + 2);
      unint64_t v111 = *((void *)v39 + 3);
      unint64_t v43 = v112 + 1;
      uint64_t v41 = v203;
      id v204 = (char *)v45;
      if (v112 >= v111 >> 1)
      {
        uint64_t v163 = sub_1000BADB0((char *)(v111 > 1), v112 + 1, 1, v39);
        uint64_t v41 = v203;
        uint64_t v39 = v163;
      }
      *((void *)v39 + 2) = v43;
      uint64_t v113 = v39 + 32;
      uint64_t v114 = &v39[16 * v112 + 32];
      uint64_t v115 = v204;
      *(void *)uint64_t v114 = v44;
      *((void *)v114 + 1) = v115;
      if (v112)
      {
        while (2)
        {
          unint64_t v116 = v43 - 1;
          if (v43 >= 4)
          {
            id v121 = &v113[16 * v43];
            uint64_t v122 = *((void *)v121 - 8);
            uint64_t v123 = *((void *)v121 - 7);
            BOOL v127 = __OFSUB__(v123, v122);
            uint64_t v124 = v123 - v122;
            if (v127) {
              goto LABEL_152;
            }
            uint64_t v126 = *((void *)v121 - 6);
            uint64_t v125 = *((void *)v121 - 5);
            BOOL v127 = __OFSUB__(v125, v126);
            uint64_t v119 = v125 - v126;
            char v120 = v127;
            if (v127) {
              goto LABEL_153;
            }
            unint64_t v128 = v43 - 2;
            uint64_t v129 = &v113[16 * v43 - 32];
            uint64_t v131 = *(void *)v129;
            uint64_t v130 = *((void *)v129 + 1);
            BOOL v127 = __OFSUB__(v130, v131);
            uint64_t v132 = v130 - v131;
            if (v127) {
              goto LABEL_155;
            }
            BOOL v127 = __OFADD__(v119, v132);
            uint64_t v133 = v119 + v132;
            if (v127) {
              goto LABEL_158;
            }
            if (v133 >= v124)
            {
              uint64_t v151 = &v113[16 * v116];
              uint64_t v153 = *(void *)v151;
              uint64_t v152 = *((void *)v151 + 1);
              BOOL v127 = __OFSUB__(v152, v153);
              uint64_t v154 = v152 - v153;
              if (v127) {
                goto LABEL_162;
              }
              BOOL v144 = v119 < v154;
            }
            else
            {
LABEL_101:
              if (v120) {
                goto LABEL_154;
              }
              unint64_t v128 = v43 - 2;
              int v134 = &v113[16 * v43 - 32];
              uint64_t v136 = *(void *)v134;
              uint64_t v135 = *((void *)v134 + 1);
              BOOL v137 = __OFSUB__(v135, v136);
              uint64_t v138 = v135 - v136;
              char v139 = v137;
              if (v137) {
                goto LABEL_157;
              }
              uint64_t v140 = &v113[16 * v116];
              uint64_t v142 = *(void *)v140;
              uint64_t v141 = *((void *)v140 + 1);
              BOOL v127 = __OFSUB__(v141, v142);
              uint64_t v143 = v141 - v142;
              if (v127) {
                goto LABEL_160;
              }
              if (__OFADD__(v138, v143)) {
                goto LABEL_161;
              }
              if (v138 + v143 < v119) {
                goto LABEL_113;
              }
              BOOL v144 = v119 < v143;
            }
            if (v144) {
              unint64_t v116 = v128;
            }
          }
          else
          {
            if (v43 == 3)
            {
              uint64_t v118 = *((void *)v39 + 4);
              uint64_t v117 = *((void *)v39 + 5);
              BOOL v127 = __OFSUB__(v117, v118);
              uint64_t v119 = v117 - v118;
              char v120 = v127;
              goto LABEL_101;
            }
            uint64_t v145 = *((void *)v39 + 4);
            uint64_t v146 = *((void *)v39 + 5);
            BOOL v127 = __OFSUB__(v146, v145);
            uint64_t v138 = v146 - v145;
            char v139 = v127;
LABEL_113:
            if (v139) {
              goto LABEL_156;
            }
            uint64_t v147 = &v113[16 * v116];
            uint64_t v149 = *(void *)v147;
            uint64_t v148 = *((void *)v147 + 1);
            BOOL v127 = __OFSUB__(v148, v149);
            uint64_t v150 = v148 - v149;
            if (v127) {
              goto LABEL_159;
            }
            if (v150 < v138) {
              goto LABEL_14;
            }
          }
          unint64_t v155 = v116 - 1;
          if (v116 - 1 >= v43)
          {
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
            goto LABEL_172;
          }
          if (!v41) {
            goto LABEL_174;
          }
          uint64_t v156 = v39;
          unint64_t v157 = &v113[16 * v155];
          uint64_t v158 = *(void *)v157;
          uint64_t v159 = &v113[16 * v116];
          uint64_t v160 = *((void *)v159 + 1);
          uint64_t v161 = v198;
          sub_1000BA3FC((char *)(v41 + 8 * *(void *)v157), (void **)(v41 + 8 * *(void *)v159), (char *)(v41 + 8 * v160), v197);
          uint64_t v198 = v161;
          if (v161) {
            goto LABEL_146;
          }
          if (v160 < v158) {
            goto LABEL_149;
          }
          if (v116 > *((void *)v156 + 2)) {
            goto LABEL_150;
          }
          *(void *)unint64_t v157 = v158;
          *(void *)&v113[16 * v155 + 8] = v160;
          unint64_t v162 = *((void *)v156 + 2);
          if (v116 >= v162) {
            goto LABEL_151;
          }
          unint64_t v43 = v162 - 1;
          memmove(&v113[16 * v116], v159 + 16, 16 * (v162 - 1 - v116));
          uint64_t v39 = v156;
          *((void *)v156 + 2) = v162 - 1;
          uint64_t v5 = v202;
          uint64_t v41 = v203;
          if (v162 <= 2) {
            goto LABEL_14;
          }
          continue;
        }
      }
      unint64_t v43 = 1;
LABEL_14:
      id v42 = v193;
      uint64_t v40 = (uint64_t)v204;
      if ((uint64_t)v204 >= (uint64_t)v193)
      {
        a1 = v179;
        goto LABEL_133;
      }
      continue;
    }
    break;
  }
LABEL_172:
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void sub_1000B9F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v47 = a1;
  uint64_t v7 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v52 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  id v11 = (char *)&v45 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  unint64_t v56 = (char *)&v45 - v17;
  __chkstk_darwin(v16);
  uint64_t v49 = (char *)&v45 - v19;
  uint64_t v46 = a2;
  if (a3 != a2)
  {
    uint64_t v20 = *a4;
    uint64_t v21 = (void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    id v55 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    uint64_t v50 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v51 = v15;
    uint64_t v53 = v20;
    uint64_t v22 = v20 + 8 * a3 - 8;
    unint64_t v57 = (void (**)(char *, char *, uint64_t))(v18 + 32);
LABEL_5:
    uint64_t v23 = *(void **)(v53 + 8 * a3);
    uint64_t v24 = v47;
    uint64_t v48 = v22;
    uint64_t v25 = v49;
    uint64_t v54 = a3;
    while (1)
    {
      uint64_t v26 = *(void **)v22;
      id v27 = v23;
      id v60 = v26;
      id v58 = v27;
      id v28 = [v27 smtTimestamp];
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = v56;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v31 = *v21;
        (*v21)(v11, v30, v12);
        uint64_t v32 = *v59;
        (*v59)(v11, 0, 1, v12);
        if ((*v55)(v11, 1, v12) != 1)
        {
          v31(v25, v11, v12);
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v32 = *v59;
        (*v59)(v11, 1, 1, v12);
      }
      static Date.distantPast.getter();
      sub_100087A1C((uint64_t)v11, (uint64_t *)&unk_10031F9A0);
LABEL_11:
      uint64_t v33 = v11;
      id v34 = [v60 smtTimestamp];
      if (v34)
      {
        Swift::Int v35 = v34;
        uint64_t v36 = v56;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v37 = *v57;
        uint64_t v38 = (uint64_t)v52;
        uint64_t v39 = v36;
        uint64_t v25 = v49;
        (*v57)(v52, v39, v12);
        v32((char *)v38, 0, 1, v12);
        if ((*v55)((char *)v38, 1, v12) != 1)
        {
          uint64_t v40 = v51;
          v37(v51, (char *)v38, v12);
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v38 = (uint64_t)v52;
        v32(v52, 1, 1, v12);
      }
      uint64_t v40 = v51;
      static Date.distantPast.getter();
      sub_100087A1C(v38, (uint64_t *)&unk_10031F9A0);
LABEL_16:
      char v41 = static Date.< infix(_:_:)();
      id v42 = *v50;
      (*v50)(v40, v12);
      v42(v25, v12);

      uint64_t v43 = v54;
      id v11 = v33;
      uint64_t v21 = v57;
      if ((v41 & 1) == 0) {
        goto LABEL_4;
      }
      if (!v53)
      {
        __break(1u);
        return;
      }
      uint64_t v44 = *(void **)v22;
      uint64_t v23 = *(void **)(v22 + 8);
      *(void *)uint64_t v22 = v23;
      *(void *)(v22 + 8) = v44;
      v22 -= 8;
      if (v43 == ++v24)
      {
LABEL_4:
        a3 = v43 + 1;
        uint64_t v22 = v48 + 8;
        if (a3 == v46) {
          return;
        }
        goto LABEL_5;
      }
    }
  }
}

uint64_t sub_1000BA3FC(char *a1, void **a2, char *a3, void **a4)
{
  uint64_t v8 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  id v94 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  id v95 = (void **)((char *)&v90 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v99 = (char *)&v90 - v14;
  __chkstk_darwin(v13);
  id v93 = (void (**)(void))((char *)&v90 - v15);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = __chkstk_darwin(v16);
  unsigned int v92 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v102 = (char *)&v90 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  NSString v91 = (char *)&v90 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v103 = (char *)&v90 - v24;
  __chkstk_darwin(v23);
  id v101 = (char *)&v90 - v26;
  uint64_t v27 = (char *)a2 - a1;
  uint64_t v28 = (char *)a2 - a1 + 7;
  if ((char *)a2 - a1 >= 0) {
    uint64_t v28 = (char *)a2 - a1;
  }
  uint64_t v29 = v28 >> 3;
  uint64_t v96 = a3;
  uint64_t v30 = a3 - (char *)a2;
  uint64_t v31 = v30 / 8;
  NSString v108 = (void **)a1;
  NSString v105 = a4;
  char v107 = a4;
  if (v28 >> 3 >= v30 / 8)
  {
    if (v30 < -7) {
      goto LABEL_64;
    }
    unint64_t v57 = v105;
    if (v105 != a2 || &a2[v31] <= v105)
    {
      uint64_t v58 = v25;
      memmove(v105, a2, 8 * v31);
      uint64_t v25 = v58;
    }
    uint64_t v59 = &v57[v31];
    uint64_t v106 = v59;
    NSString v108 = a2;
    uint64_t v60 = (uint64_t)v95;
    if (v30 < 8 || a1 >= (char *)a2)
    {
LABEL_63:
      sub_1000BAEAC((void **)&v108, (const void **)&v107, &v106);
      return 1;
    }
    id v93 = (void (**)(void))(v25 + 32);
    id v101 = (char *)(v25 + 56);
    NSString v91 = (char *)(v25 + 8);
    id v61 = (void **)(v96 - 8);
    id v62 = &selRef_copyApplicationState_block_;
    uint64_t v63 = a2;
    uint64_t v96 = a1;
    uint64_t v97 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
    while (1)
    {
      uint64_t v100 = v59;
      uint64_t v64 = *--v59;
      id v65 = *(v63 - 1);
      uint64_t v98 = v63 - 1;
      id v66 = v64;
      id v104 = v65;
      uint64_t v67 = v62[474];
      uint64_t v99 = v66;
      id v68 = [v66 v67];
      if (v68)
      {
        unint64_t v69 = v68;
        uint64_t v70 = v103;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v71 = v93;
        id v72 = *v93;
        ((void (*)(uint64_t, char *, uint64_t))*v93)(v60, v70, v16);
        id v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v101;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))v101)(v60, 0, 1, v16);
        if ((*v97)(v60, 1, v16) != 1)
        {
          ((void (*)(char *, uint64_t, uint64_t))v72)(v102, v60, v16);
          goto LABEL_46;
        }
      }
      else
      {
        id v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v101;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v101)(v60, 1, 1, v16);
        id v71 = v93;
      }
      static Date.distantPast.getter();
      sub_100087A1C(v60, (uint64_t *)&unk_10031F9A0);
LABEL_46:
      id v74 = [v104 v62[474] v90];
      if (!v74)
      {
        uint64_t v77 = (uint64_t)v94;
        v73(v94, 1, 1, v16);
LABEL_50:
        uint64_t v78 = a2;
        uint64_t v80 = v92;
        static Date.distantPast.getter();
        sub_100087A1C(v77, (uint64_t *)&unk_10031F9A0);
        goto LABEL_51;
      }
      uint64_t v75 = v74;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v76 = *v71;
      uint64_t v77 = (uint64_t)v94;
      (*v71)();
      v73((char *)v77, 0, 1, v16);
      if ((*v97)(v77, 1, v16) == 1) {
        goto LABEL_50;
      }
      uint64_t v78 = a2;
      int v79 = v92;
      ((void (*)(char *, uint64_t, uint64_t))v76)(v92, v77, v16);
      uint64_t v80 = v79;
LABEL_51:
      int v81 = v61 + 1;
      uint64_t v82 = v102;
      char v83 = static Date.< infix(_:_:)();
      uint64_t v84 = v80;
      char v85 = v83;
      uint64_t v86 = *(void (**)(char *, uint64_t))v91;
      (*(void (**)(char *, uint64_t))v91)(v84, v16);
      v86(v82, v16);

      if (v85)
      {
        uint64_t v87 = v105;
        uint64_t v60 = (uint64_t)v95;
        unint64_t v88 = (unint64_t)v96;
        uint64_t v59 = v100;
        uint64_t v63 = v98;
        if (v81 != v78 || v61 >= v78) {
          *id v61 = *v98;
        }
        NSString v108 = v63;
      }
      else
      {
        uint64_t v106 = v59;
        uint64_t v87 = v105;
        uint64_t v60 = (uint64_t)v95;
        unint64_t v88 = (unint64_t)v96;
        if (v81 < v100 || v61 >= v100 || v81 != v100) {
          *id v61 = *v59;
        }
        uint64_t v63 = v78;
      }
      id v62 = &selRef_copyApplicationState_block_;
      if (v59 > v87)
      {
        --v61;
        a2 = v63;
        if ((unint64_t)v63 > v88) {
          continue;
        }
      }
      goto LABEL_63;
    }
  }
  if (v27 >= -7)
  {
    uint64_t v32 = v105;
    uint64_t v33 = (uint64_t)v99;
    if (v105 != (void **)a1 || &a1[8 * v29] <= (char *)v105)
    {
      uint64_t v34 = v25;
      memmove(v105, a1, 8 * v29);
      uint64_t v25 = v34;
    }
    id v95 = &v32[v29];
    uint64_t v106 = v95;
    if (v27 >= 8 && a2 < (void **)v96)
    {
      Swift::Int v35 = (void **)(v25 + 32);
      uint64_t v102 = (char *)(v25 + 56);
      uint64_t v97 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
      uint64_t v98 = (void **)(v25 + 32);
      id v94 = (char *)(v25 + 8);
      while (1)
      {
        uint64_t v36 = *a2;
        NSString v105 = v32;
        uint64_t v37 = *v32;
        uint64_t v38 = v36;
        id v104 = v37;
        uint64_t v100 = (void **)v38;
        id v39 = [v38 smtTimestamp];
        if (v39)
        {
          uint64_t v40 = v39;
          char v41 = v103;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          id v42 = (void (*)(char *, uint64_t, uint64_t))*v35;
          uint64_t v43 = (uint64_t)v93;
          ((void (*)(void (**)(void), char *, uint64_t))*v35)(v93, v41, v16);
          uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v102;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))v102)(v43, 0, 1, v16);
          if ((*v97)(v43, 1, v16) != 1)
          {
            v42(v101, v43, v16);
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v102;
          uint64_t v43 = (uint64_t)v93;
          (*(void (**)(void (**)(void), uint64_t, uint64_t, uint64_t))v102)(v93, 1, 1, v16);
        }
        static Date.distantPast.getter();
        sub_100087A1C(v43, (uint64_t *)&unk_10031F9A0);
LABEL_16:
        id v45 = [v104 smtTimestamp:v90];
        uint64_t v46 = v91;
        if (v45)
        {
          uint64_t v47 = v45;
          uint64_t v48 = v103;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v49 = (void (*)(char *, uint64_t, uint64_t))*v35;
          uint64_t v50 = v48;
          uint64_t v33 = (uint64_t)v99;
          ((void (*)(char *, char *, uint64_t))*v35)(v99, v50, v16);
          v44(v33, 0, 1, v16);
          if ((*v97)(v33, 1, v16) != 1)
          {
            uint64_t v51 = v33;
            v49(v46, v33, v16);
            goto LABEL_21;
          }
        }
        else
        {
          v44(v33, 1, 1, v16);
        }
        static Date.distantPast.getter();
        uint64_t v51 = v33;
        sub_100087A1C(v33, (uint64_t *)&unk_10031F9A0);
LABEL_21:
        uint64_t v52 = v101;
        char v53 = static Date.< infix(_:_:)();
        uint64_t v54 = *(void (**)(char *, uint64_t))v94;
        (*(void (**)(char *, uint64_t))v94)(v46, v16);
        v54(v52, v16);

        if (v53)
        {
          id v55 = a2 + 1;
          uint64_t v32 = v105;
          if (a1 >= (char *)a2 && a1 < (char *)v55)
          {
            uint64_t v33 = v51;
            if (a1 != (char *)a2) {
              *(void *)a1 = *a2;
            }
            goto LABEL_31;
          }
          *(void *)a1 = *a2;
        }
        else
        {
          unint64_t v56 = v105;
          if (a1 != (char *)v105) {
            *(void *)a1 = *v105;
          }
          uint64_t v32 = v56 + 1;
          char v107 = v32;
          id v55 = a2;
        }
        uint64_t v33 = v51;
LABEL_31:
        Swift::Int v35 = v98;
        a1 += 8;
        NSString v108 = (void **)a1;
        if (v32 < v95)
        {
          a2 = v55;
          if (v55 < (void **)v96) {
            continue;
          }
        }
        goto LABEL_63;
      }
    }
    goto LABEL_63;
  }
LABEL_64:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000BADB0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100080E08((uint64_t *)&unk_1003211A8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1000BAEAC(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
    {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }
  return result;
}

char *sub_1000BAF68(uint64_t a1)
{
  return sub_1000BADB0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1000BAF7C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100080E08(&qword_100321178);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000BB294(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100089D6C(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000BB404();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1000BAF7C(v15, a4 & 1);
  unint64_t v21 = sub_100089D6C(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  unint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *unint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

void *sub_1000BB404()
{
  unint64_t v1 = v0;
  sub_100080E08(&qword_100321178);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void (*sub_1000BB5BC(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000BB66C(v6, a2, a3);
  return sub_1000BB624;
}

void sub_1000BB624(void *a1)
{
  unint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1000BB66C(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_1000BB6EC;
  }
  __break(1u);
  return result;
}

void sub_1000BB6EC(id *a1)
{
}

uint64_t sub_1000BB6F4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000C1468((unint64_t *)&qword_1003211A0, &qword_100320D18);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100080E08(&qword_100320D18);
          unint64_t v12 = sub_1000BB5BC(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10008E0A0(0, (unint64_t *)&qword_1003214D0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000BB928(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void sub_1000BB93C(void *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v2 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v4 = v1[5];
  id v6 = [self fetchRequest];
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1002856E0;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v8 = sub_1000A56A8();
  *(void *)(v7 + 32) = v3;
  *(void *)(v7 + 40) = v2;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v8;
  *(void *)(v7 + 64) = v8;
  *(void *)(v7 + 72) = v5;
  *(void *)(v7 + 80) = v4;
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  *(void *)(v7 + 136) = &type metadata for String;
  *(void *)(v7 + 144) = v8;
  *(void *)(v7 + 112) = 0x646574656C6564;
  *(void *)(v7 + 120) = 0xE700000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v6 setPredicate:v9];

  id v22 = 0;
  id v10 = [v6 execute:&v22];
  id v11 = v22;
  if (!v10)
  {
    id v19 = v22;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();

    id v18 = 0;
    goto LABEL_11;
  }
  unint64_t v12 = v10;
  sub_10008E0A0(0, &qword_100320D38);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = v11;

  if (!(v13 >> 62))
  {
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_10:
    swift_bridgeObjectRelease();

    id v18 = 0;
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v20) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v13 & 0xC000000000000001) != 0)
  {
    id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v15 = *(id *)(v13 + 32);
LABEL_7:
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    id v17 = v16;
    id v18 = sub_1000AC668();

LABEL_11:
    *a1 = v18;
    return;
  }
  __break(1u);
}

uint64_t sub_1000BBBD0@<X0>(void *a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  id v5 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002856F0;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000A56A8();
  *(void *)(v6 + 32) = v4;
  *(void *)(v6 + 40) = v3;
  uint64_t v7 = v5;
  swift_bridgeObjectRetain();
  unint64_t v8 = NSPredicate.init(format:_:)();
  [v5 setPredicate:v8];

  unint64_t v28 = 0;
  id v9 = [v5 execute:&v28];
  id v10 = (id)v28;
  if (!v9)
  {
    id v27 = (id)v28;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t result = swift_errorRelease();
    uint64_t v26 = 0;
LABEL_27:
    *a1 = v26;
    return result;
  }
  id v11 = v9;
  sub_10008E0A0(0, &qword_100320D38);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = v10;

  unint64_t v28 = (unint64_t)_swiftEmptyArrayStorage;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_4;
    }
    goto LABEL_25;
  }
  uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v14)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v26 = _swiftEmptyArrayStorage;
LABEL_26:

    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_27;
  }
LABEL_4:
  if (v14 >= 1)
  {
    uint64_t v16 = 0;
    while (1)
    {
      id v17 = (v12 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(v12 + 8 * v16 + 32);
      id v18 = v17;
      id v19 = [v17 ckstate];
      if (!v19) {
        break;
      }
      uint64_t v20 = v19;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;

      if (!v23) {
        break;
      }
      if (v21 == 0x646574656C6564 && v23 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0) {
          break;
        }
      }

LABEL_8:
      if (v14 == ++v16)
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = (void *)v28;
        goto LABEL_26;
      }
    }
    sub_1000AC668();

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

void sub_1000BBF54(void *a1@<X8>)
{
  uint64_t v2 = v1;
  id v4 = [self fetchRequest];
  id v12 = 0;
  id v5 = [v4 execute:&v12];
  id v6 = v12;
  if (v5)
  {
    uint64_t v7 = v5;
    sub_10008E0A0(0, &qword_100320D38);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v9 = v6;

    swift_retain();
    id v10 = sub_1000C100C(v8, v2);
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    id v11 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();

    id v10 = _swiftEmptyArrayStorage;
  }
  *a1 = v10;
}

void sub_1000BC088()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v25 = v0[6];
  id v5 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  if (v1)
  {
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1002856D0;
    *(void *)(v6 + 56) = &type metadata for String;
    unint64_t v7 = sub_1000A56A8();
    *(void *)(v6 + 32) = v2;
    *(void *)(v6 + 40) = v1;
    *(void *)(v6 + 96) = &type metadata for String;
    *(void *)(v6 + 104) = v7;
    *(void *)(v6 + 64) = v7;
    *(void *)(v6 + 72) = v4;
    *(void *)(v6 + 80) = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_1002856F0;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_1000A56A8();
    *(void *)(v8 + 32) = v4;
    *(void *)(v8 + 40) = v3;
  }
  swift_bridgeObjectRetain();
  id v9 = NSPredicate.init(format:_:)();
  [v5 setPredicate:v9];

  id v26 = 0;
  id v10 = [v5 execute:&v26];
  id v11 = v26;
  if (!v10) {
    goto LABEL_16;
  }
  id v12 = v10;
  sub_10008E0A0(0, &qword_100320D38);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = v11;

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v15) {
      goto LABEL_14;
    }
  }
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    do
    {
      if ((v13 & 0xC000000000000001) != 0) {
        id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v17 = *(id *)(v13 + 8 * v16 + 32);
      }
      id v18 = v17;
      ++v16;
      NSString v19 = String._bridgeToObjectiveC()();
      [v18 setCkstate:v19];
    }
    while (v15 != v16);
LABEL_14:
    uint64_t v20 = swift_bridgeObjectRelease_n();
    uint64_t v21 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 152))(v20);
    id v26 = 0;
    unsigned __int8 v22 = [v21 save:&v26];

    id v11 = v26;
    if (v22)
    {
      id v23 = v26;
LABEL_17:

      return;
    }
LABEL_16:
    id v24 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_17;
  }
  __break(1u);
}

void sub_1000BC3E4(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  Swift::Int integerLiteral = *(unsigned __int8 *)(v1 + 40);
  int v34 = *(unsigned __int8 *)(v1 + 41);
  id v5 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002856D0;
  uint64_t v8 = v2[11];
  unint64_t v7 = v2[12];
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v9 = sub_1000A56A8();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v7;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v9;
  *(void *)(v6 + 64) = v9;
  *(void *)(v6 + 72) = v3;
  *(void *)(v6 + 80) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = NSPredicate.init(format:_:)();
  [v5 setPredicate:v10];

  id v36 = 0;
  id v11 = [v5 execute:&v36];
  id v12 = v36;
  if (!v11)
  {
    id v18 = v36;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    goto LABEL_11;
  }
  unint64_t v13 = v11;
  sub_10008E0A0(0, &qword_100320D38);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = v12;

  if (!(v14 >> 62))
  {
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v19)
  {
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v20 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(*v2 + 240))(v8, v7, v3, v4);
    if (v20)
    {
      uint64_t v21 = (void *)v20;
      unsigned __int8 v22 = (void *)(*(uint64_t (**)(void))(*v2 + 152))();
      id v23 = [objc_allocWithZone((Class)CloudOptIn) initWithContext:v22];

      id v17 = v23;
      NSString v24 = String._bridgeToObjectiveC()();
      [v17 setApplication:v24];

      NSString v25 = String._bridgeToObjectiveC()();
      [v17 setUri:v25];

      NSString v26 = [v21 recordName];
      if (!v26)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v26 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v17 setRecordID:v26];

      goto LABEL_15;
    }
    if (qword_10032AB80 == -1)
    {
LABEL_19:
      uint64_t v29 = type metadata accessor for Logger();
      sub_100080F90(v29, (uint64_t)qword_10032AB88);
      os_log_type_t v30 = static os_log_type_t.error.getter();
      swift_retain();
      uint64_t v31 = Logger.logObject.getter();
      if (os_log_type_enabled(v31, v30))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        id v36 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136315138;
        swift_bridgeObjectRetain();
        sub_10008D114(v8, v7, (uint64_t *)&v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v31, v30, "failed to create recordID %s", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      uint64_t v28 = 0;
      goto LABEL_23;
    }
LABEL_26:
    swift_once();
    goto LABEL_19;
  }
LABEL_4:
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_26;
  }
  id v16 = *(id *)(v14 + 32);
LABEL_7:
  id v17 = v16;
  swift_bridgeObjectRelease();
LABEL_15:
  sub_10008E0A0(0, &qword_100320AD8);
  Class isa = NSNumber.init(integerLiteral:)(integerLiteral).super.super.isa;
  [v17 setState:isa];

  if (v34) {
    [v17 setCkrecord:0];
  }
  uint64_t v28 = (*(uint64_t (**)(id))(*v2 + 432))(v17);

LABEL_23:
  *a1 = v28;
}

void sub_1000BC980(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v2 = v1[3];
  uint64_t v4 = v1[4];
  id v5 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002856D0;
  uint64_t v7 = *(void *)(v3 + 88);
  uint64_t v8 = *(void *)(v3 + 96);
  uint64_t v29 = v3;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v9 = sub_1000A56A8();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v8;
  id v10 = v5;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v9;
  *(void *)(v6 + 64) = v9;
  *(void *)(v6 + 72) = v2;
  *(void *)(v6 + 80) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v11 = NSPredicate.init(format:_:)();
  [v5 setPredicate:v11];

  id v31 = 0;
  id v12 = [v5 execute:&v31];
  id v13 = v31;
  if (!v12)
  {
    id v24 = v31;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v25 = 0;
LABEL_16:
    *a1 = v25;
    return;
  }
  unint64_t v14 = v12;
  sub_10008E0A0(0, &qword_100320D38);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v16 = v13;

  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100080F90(v17, (uint64_t)qword_10032AB88);
  swift_bridgeObjectRetain_n();
  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    id v31 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v21 = Array.description.getter();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    sub_10008D114(v21, v23, (uint64_t *)&v31);
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "found records: %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (!(v15 >> 62))
  {
    if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_10;
    }
LABEL_15:
    swift_bridgeObjectRelease();

    uint64_t v25 = 0;
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v28) {
    goto LABEL_15;
  }
LABEL_10:
  if ((v15 & 0xC000000000000001) != 0)
  {
    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_13;
  }
  if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v26 = *(id *)(v15 + 32);
LABEL_13:
    id v27 = v26;
    swift_bridgeObjectRelease();
    uint64_t v25 = (*(uint64_t (**)(void *))(*(void *)v29 + 440))(v27);

    goto LABEL_16;
  }
  __break(1u);
}

void sub_1000BCDBC(uint64_t *a1@<X8>)
{
  uint64_t v2 = (void *)v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  id v5 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002856D0;
  uint64_t v7 = v2[11];
  uint64_t v8 = v2[12];
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v9 = sub_1000A56A8();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v8;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v9;
  *(void *)(v6 + 64) = v9;
  *(void *)(v6 + 72) = v3;
  *(void *)(v6 + 80) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v10 = NSPredicate.init(format:_:)();
  [v5 setPredicate:v10];

  id v29 = 0;
  id v11 = [v5 execute:&v29];
  id v12 = v29;
  if (!v11)
  {
    id v25 = v29;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_11;
  }
  id v13 = v11;
  sub_10008E0A0(0, &qword_100320D38);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = v12;

  if (!(v14 >> 62))
  {
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_13:
    swift_bridgeObjectRelease();

    uint64_t v24 = 0;
    goto LABEL_14;
  }
  swift_bridgeObjectRetain();
  uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v27) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v16 = *(id *)(v14 + 32);
LABEL_7:
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    id v18 = v17;
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 setCkstate:v19];

    uint64_t v20 = (void *)(*(uint64_t (**)(void))(*v2 + 152))();
    id v29 = 0;
    unsigned int v21 = [v20 save:&v29];

    if (v21)
    {
      unint64_t v22 = *(uint64_t (**)(id))(*v2 + 432);
      id v23 = v29;
      uint64_t v24 = v22(v18);

LABEL_14:
      *a1 = v24;
      return;
    }
    id v26 = v29;

    _convertNSErrorToError(_:)();
    swift_willThrow();

LABEL_11:
    swift_errorRelease();
    uint64_t v24 = 0;
    goto LABEL_14;
  }
  __break(1u);
}

void sub_1000BD120(void *a1)
{
  uint64_t v4 = v1[2];
  unint64_t v3 = v1[3];
  id v5 = (void *)v1[5];
  uint64_t v6 = v1[6];
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100080F90(v7, (uint64_t)qword_10032AB88);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = v5;
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v20 = v6;
    uint64_t v11 = swift_slowAlloc();
    id v12 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315650;
    swift_bridgeObjectRetain();
    sub_10008D114(v4, v3, &v22);
    unsigned int v21 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v11 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 18) = 2112;
    id v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v12 = v8;

    a1 = v21;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "store optin intent for %s to %{BOOL}d - %@", (uint8_t *)v11, 0x1Cu);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v6 = v20;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  id v14 = [v8 error];
  if (v14)
  {
    id v15 = v14;
    id v16 = (void *)_convertErrorToNSError(_:)();
    [a1 setError:v16];

LABEL_16:
    return;
  }
  unint64_t v17 = (*(uint64_t (**)(void))((swift_isaMask & *v8) + 0x80))();
  unint64_t v18 = v17;
  if (!(v17 >> 62))
  {
    if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_10;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    type metadata accessor for KTError();
    sub_1000C13C8((unint64_t *)&qword_100321170, (void (*)(uint64_t))type metadata accessor for KTError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    id v16 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    [a1 setError:v16];
    goto LABEL_16;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_15;
  }
LABEL_10:
  if ((v18 & 0xC000000000000001) != 0)
  {
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_13;
  }
  if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v19 = *(id *)(v18 + 32);
LABEL_13:
    id v16 = v19;
    swift_bridgeObjectRelease();
    (*(void (**)(void *))(*(void *)v6 + 368))(v16);
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t sub_1000BD544()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000BD594(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  unint64_t v5 = *(void *)(v1 + 32);
  uint64_t v4 = *(void **)(v1 + 40);
  uint64_t v6 = *(void **)(v1 + 48);
  id v7 = [*(id *)(v1 + 16) error];
  if (v7)
  {
    uint64_t v8 = v7;
    if (qword_10032AB80 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100080F90(v9, (uint64_t)qword_10032AB88);
    swift_bridgeObjectRetain_n();
    id v10 = v8;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      id v14 = (void *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_bridgeObjectRetain();
      sub_10008D114(v3, v5, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2112;
      id v15 = v10;
      uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v14 = v29;

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "delete of intent failed %s - %@", (uint8_t *)v13, 0x16u);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    uint64_t v27 = (void *)_convertErrorToNSError(_:)();
    [a1 setError:v27];
  }
  else
  {
    if (qword_10032AB80 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100080F90(v16, (uint64_t)qword_10032AB88);
    swift_bridgeObjectRetain_n();
    id v17 = a1;
    id v18 = v4;
    id v19 = v17;
    id v20 = v18;
    unsigned int v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v28 = v6;
      uint64_t v24 = (void *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315650;
      swift_bridgeObjectRetain();
      sub_10008D114(v3, v5, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v23 + 12) = 2112;
      id v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v24 = v19;

      *(_WORD *)(v23 + 22) = 2112;
      id v26 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v24[1] = v20;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "delete optin intent for in local database %s - %@ - %@", (uint8_t *)v23, 0x20u);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      uint64_t v6 = v28;
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    [v6 deleteRecordIDWithCkrecordID:v20];
  }
}

void sub_1000BDA80()
{
  sub_1000B0F00(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t sub_1000BDAA8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_1000BDAE0()
{
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100080F90(v0, (uint64_t)qword_10032AB88);
  swift_bridgeObjectRetain_n();
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315394;
    type metadata accessor for Date();
    uint64_t v3 = Dictionary.description.getter();
    sub_10008D114(v3, v4, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v2 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "storeOptIn finished writing to CK %s:%{BOOL}d", (uint8_t *)v2, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1000BDCF0()
{
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000BDD38(void *a1)
{
  uint64_t v4 = v1[2];
  unint64_t v3 = v1[3];
  unint64_t v5 = (void *)v1[5];
  uint64_t v6 = v1[6];
  if (qword_10032AB80 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100080F90(v7, (uint64_t)qword_10032AB88);
  id v8 = v5;
  swift_bridgeObjectRetain_n();
  uint64_t v9 = v8;
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v41 = v6;
    id v42 = a1;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315906;
    swift_bridgeObjectRetain();
    sub_10008D114(v4, v3, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 18) = 2112;
    id v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v9;

    *(_WORD *)(v12 + 28) = 2048;
    if ((unint64_t)(*(uint64_t (**)(void))((swift_isaMask & *v14) + 0x80))() >> 62) {
      _CocoaArrayWrapper.endIndex.getter();
    }
    swift_bridgeObjectRelease();

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "store optin for %s to %{BOOL}d - %@ records: %ld", (uint8_t *)v12, 0x26u);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v6 = v41;
    a1 = v42;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v15 = [v9 error];
  if (v15)
  {
    uint64_t v16 = v15;
    id v17 = (void *)_convertErrorToNSError(_:)();
    [a1 setError:v17];

    return;
  }
  unint64_t v18 = (*(uint64_t (**)(void))((swift_isaMask & *v9) + 0x80))();
  unint64_t v19 = v18;
  if (!(v18 >> 62))
  {
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_12;
    }
LABEL_22:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  if (!v20) {
    goto LABEL_22;
  }
LABEL_12:
  if (v20 >= 1)
  {
    uint64_t v21 = 0;
    unint64_t v22 = v19 & 0xC000000000000001;
    uint64_t v23 = *(void (**)(void))(*(void *)v6 + 368);
    uint64_t v24 = *(void *)v6 + 368;
    uint64_t v40 = v20;
    unint64_t v38 = v19;
    unint64_t v39 = v19 & 0xC000000000000001;
    do
    {
      if (v22) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v25 = *(id *)(v19 + 8 * v21 + 32);
      }
      id v26 = v25;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 136315138;
        id v30 = [v26 recordID];
        id v31 = [v30 recordName];

        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v33 = v24;
        int v34 = v23;
        unint64_t v36 = v35;

        uint64_t v37 = v32;
        unint64_t v19 = v38;
        unint64_t v22 = v39;
        *(void *)(v29 + 4) = sub_10008D114(v37, v36, &v43);
        uint64_t v23 = v34;
        uint64_t v24 = v33;
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v27, v28, "updating optIn record: %s", (uint8_t *)v29, 0xCu);
        swift_arrayDestroy();
        uint64_t v20 = v40;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      ++v21;
      v23(v26);
    }
    while (v20 != v21);
    goto LABEL_22;
  }
  __break(1u);
}

void sub_1000BE310()
{
  sub_1000B2ACC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
}

void sub_1000BE334()
{
  sub_1000B4294(*(void *)(v0 + 16), *(void *)(v0 + 24), *(NSObject **)(v0 + 32), *(void (**)(char *, uint64_t, uint64_t))(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64));
}

void sub_1000BE35C(char *a1@<X8>)
{
  sub_1000B6008(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1000BE378()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000BE3B8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  id v3 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856F0;
  id v5 = [v1 recordName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000A56A8();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v9];

  id v52 = 0;
  id v10 = [v3 execute:&v52];
  id v11 = v52;
  if (!v10)
  {
    id v30 = v52;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_24:
    swift_errorRelease();
    return;
  }
  uint64_t v12 = v10;
  sub_10008E0A0(0, &qword_100320D38);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = v11;

  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    if (v15) {
      goto LABEL_4;
    }
LABEL_18:
    uint64_t v29 = swift_bridgeObjectRelease_n();
    goto LABEL_19;
  }
  uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v15) {
    goto LABEL_18;
  }
LABEL_4:
  if (v15 < 1)
  {
    __break(1u);
LABEL_27:
    swift_once();
    goto LABEL_22;
  }
  uint64_t v46 = v1;
  id v47 = v3;
  uint64_t v16 = 0;
  unint64_t v17 = v13 & 0xC000000000000001;
  unint64_t v18 = *(uint64_t (**)(void))(*(void *)v2 + 152);
  unint64_t v49 = v13;
  uint64_t v50 = v15;
  do
  {
    if (v17) {
      id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v21 = *(id *)(v13 + 8 * v16 + 32);
    }
    unint64_t v22 = v21;
    if (qword_10032AB80 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100080F90(v23, (uint64_t)qword_10032AB88);
    uint64_t v24 = v22;
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v25))
    {
      uint64_t v26 = v2;
      uint64_t v27 = swift_slowAlloc();
      os_log_type_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412290;
      *(void *)(v27 + 4) = v24;
      void *v28 = v24;
      _os_log_impl((void *)&_mh_execute_header, v19, v25, "deleting record: %@", (uint8_t *)v27, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v2 = v26;
      unint64_t v13 = v49;
      uint64_t v15 = v50;
      swift_slowDealloc();
    }
    else
    {

      unint64_t v19 = v24;
    }

    ++v16;
    uint64_t v20 = (void *)v18();
    [v20 deleteObject:v24];
  }
  while (v15 != v16);
  uint64_t v29 = swift_bridgeObjectRelease_n();
  uint64_t v1 = v46;
  id v3 = v47;
LABEL_19:
  id v31 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 152))(v29);
  id v52 = 0;
  unsigned __int8 v32 = [v31 save:&v52];

  if (v32)
  {
    id v33 = v52;

    return;
  }
  id v34 = v52;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_10032AB80 != -1) {
    goto LABEL_27;
  }
LABEL_22:
  uint64_t v35 = type metadata accessor for Logger();
  sub_100080F90(v35, (uint64_t)qword_10032AB88);
  swift_errorRetain();
  id v36 = v1;
  swift_errorRetain();
  id v37 = v36;
  unint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    uint64_t v48 = v3;
    uint64_t v41 = (void *)swift_slowAlloc();
    id v52 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315394;
    id v42 = [v37 recordName];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    sub_10008D114(v43, v45, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v40 + 12) = 2112;
    swift_errorRetain();
    uint64_t v51 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v41 = v51;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "delete of record %s failed %@", (uint8_t *)v40, 0x16u);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_24;
  }

  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();
}

uint64_t sub_1000BEA90()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BEAA0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BEAD8()
{
  return sub_1000BEB18(0x676E696F6774756FLL, 0xE800000000000000);
}

uint64_t sub_1000BEAF0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BEB00()
{
  return sub_1000BEB18(0x646574656C6564, 0xE700000000000000);
}

uint64_t sub_1000BEB18(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  id v7 = [self fetchRequest];
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1002856F0;
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_1000A56A8();
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v9];

  id v18 = 0;
  id v10 = [v7 execute:&v18];
  id v11 = v18;
  if (v10)
  {
    uint64_t v12 = v10;
    sub_10008E0A0(0, &qword_100320D38);
    unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v14 = v11;

    swift_retain();
    uint64_t v15 = sub_1000A56FC(v13, v5);
    swift_release();

    swift_bridgeObjectRelease();
    *uint64_t v6 = v15;
    return swift_bridgeObjectRelease();
  }
  else
  {
    id v17 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return swift_errorRelease();
  }
}

uint64_t sub_1000BECEC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BECFC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000BED34()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned char **)(v0 + 24);
  id v3 = [self fetchRequest];
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856D0;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v5 = sub_1000A56A8();
  *(void *)(v4 + 64) = v5;
  *(void *)(v4 + 32) = 0x676E696F6774756FLL;
  *(void *)(v4 + 40) = 0xE800000000000000;
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v5;
  *(void *)(v4 + 72) = 0x646574656C6564;
  *(void *)(v4 + 80) = 0xE700000000000000;
  uint64_t v6 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v6];

  id v8 = (id)(*(uint64_t (**)(void))(*(void *)v1 + 152))();
  sub_10008E0A0(0, &qword_100320D38);
  uint64_t v7 = NSManagedObjectContext.count<A>(for:)();

  if (v7 >= 1) {
    unsigned char *v2 = 1;
  }
}

uint64_t sub_1000BEF20()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BEF30()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

id sub_1000BEF78()
{
  uint64_t v1 = v0[3];
  unint64_t v2 = v0[4];
  uint64_t v43 = v0[5];
  unint64_t v45 = v0[2];
  if (v45 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = (uint64_t)result;
    if (result) {
      goto LABEL_3;
    }
LABEL_31:
    uint64_t v38 = swift_bridgeObjectRelease();
    os_log_type_t v39 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v43 + 152))(v38);
    uint64_t v48 = 0;
    unsigned __int8 v40 = [v39 save:&v48];

    id v41 = (id)v48;
    if (v40)
    {
      return v41;
    }
    else
    {
      id v42 = (id)v48;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return (id)swift_errorRelease();
    }
  }
  uint64_t v3 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id result = (id)swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_31;
  }
LABEL_3:
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v46 = v3;
    unint64_t v44 = v2;
    while (1)
    {
      if ((v45 & 0xC000000000000001) != 0) {
        id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v6 = *(id *)(v45 + 32 + 8 * v5);
      }
      uint64_t v7 = v6;
      uint64_t v47 = v5;
      if (qword_10032AB80 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_100080F90(v8, (uint64_t)qword_10032AB88);
      os_log_type_t v9 = static os_log_type_t.info.getter();
      id v10 = v7;
      swift_bridgeObjectRetain_n();
      id v11 = v10;
      uint64_t v12 = Logger.logObject.getter();
      if (os_log_type_enabled(v12, v9))
      {
        uint64_t v13 = swift_slowAlloc();
        id v14 = (void *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 138412546;
        id v15 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *id v14 = v11;
        unint64_t v2 = v44;

        *(_WORD *)(v13 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_10008D114(v1, v44, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v12, v9, "updating state record.ID %@ newState %s", (uint8_t *)v13, 0x16u);
        sub_100080E08((uint64_t *)&unk_100320B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      id v16 = [self fetchRequest];
      sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
      sub_100080E08((uint64_t *)&unk_1003206A0);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_1002856F0;
      id v18 = [v11 recordName];
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;

      *(void *)(v17 + 56) = &type metadata for String;
      *(void *)(v17 + 64) = sub_1000A56A8();
      *(void *)(v17 + 32) = v19;
      *(void *)(v17 + 40) = v21;
      unint64_t v22 = NSPredicate.init(format:_:)();
      [v16 setPredicate:v22];

      uint64_t v48 = 0;
      id v23 = [v16 execute:&v48];
      id v24 = (id)v48;
      if (!v23)
      {
        id v33 = (id)v48;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRelease();
        goto LABEL_6;
      }
      os_log_type_t v25 = v23;
      sub_10008E0A0(0, &qword_100320D38);
      unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v27 = v24;

      sub_100080E08(&qword_100320638);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_1002856F0;
      uint64_t v48 = 0x3A7364726F636572;
      unint64_t v49 = 0xE900000000000020;
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v29);
      swift_bridgeObjectRelease();
      uint64_t v30 = v48;
      unint64_t v31 = v49;
      *(void *)(v28 + 56) = &type metadata for String;
      *(void *)(v28 + 32) = v30;
      *(void *)(v28 + 40) = v31;
      print(_:separator:terminator:)();
      swift_bridgeObjectRelease();
      if (v26 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
        if (v32)
        {
LABEL_23:
          if (v32 < 1)
          {
            __break(1u);
            goto LABEL_30;
          }
          uint64_t v34 = 0;
          do
          {
            if ((v26 & 0xC000000000000001) != 0) {
              id v35 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v35 = *(id *)(v26 + 8 * v34 + 32);
            }
            id v36 = v35;
            ++v34;
            NSString v37 = String._bridgeToObjectiveC()();
            [v36 setCkstate:v37];
          }
          while (v32 != v34);
        }
      }
      else
      {
        uint64_t v32 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v32) {
          goto LABEL_23;
        }
      }

      swift_bridgeObjectRelease_n();
LABEL_6:
      uint64_t v5 = v47 + 1;

      if (v47 + 1 == v46) {
        goto LABEL_31;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BF674()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BF684()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000BF6C4()
{
  unint64_t v1 = v0[2];
  unint64_t v2 = (id *)v0[3];
  uint64_t v3 = v0[4];
  id v4 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1002856F0;
  id v6 = [(id)v1 recordName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1000A56A8();
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  id v10 = NSPredicate.init(format:_:)();
  [v4 setPredicate:v10];

  id v43 = 0;
  id v11 = [v4 execute:&v43];
  id v12 = v43;
  if (!v11)
  {
    id v26 = v43;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    if (qword_10032AB80 == -1)
    {
LABEL_12:
      uint64_t v27 = type metadata accessor for Logger();
      sub_100080F90(v27, (uint64_t)qword_10032AB88);
      os_log_type_t v28 = static os_log_type_t.error.getter();
      Swift::String v29 = (id *)(id)v1;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = v28;
      if (!os_log_type_enabled(v30, v28))
      {

LABEL_23:
        return;
      }
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      id v33 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 138412290;
      id v43 = v29;
      uint64_t v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v33 = v29;

      _os_log_impl((void *)&_mh_execute_header, v30, v31, "record not found %@", v32, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
LABEL_21:
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_23;
    }
LABEL_26:
    swift_once();
    goto LABEL_12;
  }
  uint64_t v13 = v11;
  sub_10008E0A0(0, &qword_100320D38);
  unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = v12;

  if (!(v1 >> 62))
  {
    uint64_t v15 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_4;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    if (qword_10032AB80 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100080F90(v36, (uint64_t)qword_10032AB88);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    swift_bridgeObjectRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v38 = v37;
    if (!os_log_type_enabled(v30, v37))
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_23;
    }
    os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
    id v43 = (id)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v39 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v40 = Array.description.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    sub_10008D114(v40, v42, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v30, v38, "no response %s", v39, 0xCu);
    swift_arrayDestroy();
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_17;
  }
LABEL_4:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_26;
  }
  id v16 = *(id *)(v1 + 32);
LABEL_7:
  uint64_t v17 = v16;
  swift_bridgeObjectRelease_n();
  uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v3 + 432))(v17);
  id v19 = *v2;
  id *v2 = (id)v18;

  id v20 = *v2;
  uint64_t v21 = *(uint64_t (**)(void *, id))(*(void *)v3 + 448);
  id v22 = *v2;
  LOBYTE(v20) = v21(v17, v20);

  if ((v20 & 1) == 0)
  {
LABEL_10:

    return;
  }
  id v23 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 152))();
  id v43 = 0;
  unsigned int v24 = [v23 save:&v43];

  if (v24)
  {
    id v25 = v43;
    goto LABEL_10;
  }
  id v35 = v43;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRelease();
}

uint64_t sub_1000BFCF4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BFD04(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x444964726F636572 && a2 == 0xE800000000000000;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6910581 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746163696C707061 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x73656D6954746D73 && a2 == 0xEC000000706D6174 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6F6973726556736FLL && a2 == 0xE90000000000006ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6C6169726573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

void sub_1000BFFC4()
{
  id v1 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithEntityName:v2];

  id v4 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v3];
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v0 + 152);
  char v6 = (void *)v5();
  id v15 = 0;
  id v7 = [v6 executeRequest:v4 error:&v15];

  if (v7)
  {
    id v8 = v15;
  }
  else
  {
    id v10 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v9 = swift_errorRelease();
  }
  id v11 = (void *)((uint64_t (*)(uint64_t))v5)(v9);
  id v15 = 0;
  unsigned int v12 = [v11 save:&v15];

  if (v12)
  {
    id v13 = v15;
  }
  else
  {
    id v14 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    id v3 = v4;
  }
}

uint64_t sub_1000C016C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void *sub_1000C017C(uint64_t a1, uint64_t *a2, int *a3)
{
  id v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *id v4 = *a2;
    id v4 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[4];
    uint64_t v10 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v10;
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v11 = a3[8];
    __dst = (void *)(a1 + v11);
    unsigned int v12 = (char *)a2 + v11;
    *(void *)(a1 + 32) = v9;
    uint64_t v13 = type metadata accessor for Date();
    uint64_t v14 = *(void *)(v13 - 8);
    id v26 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v26(v12, 1, v13))
    {
      uint64_t v15 = sub_100080E08((uint64_t *)&unk_10031F9A0);
      memcpy(__dst, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    id v19 = (void *)((char *)v4 + v17);
    id v20 = (uint64_t *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    id v22 = (void *)((char *)v4 + v18);
    id v23 = (uint64_t *)((char *)a2 + v18);
    uint64_t v24 = v23[1];
    *id v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1000C037C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000C0470(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = a3[8];
  __dst = (void *)(a1 + v9);
  uint64_t v10 = (const void *)(a2 + v9);
  *(void *)(a1 + 32) = v7;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  uint64_t v15 = a3[9];
  uint64_t v16 = a3[10];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  id v20 = (void *)(a1 + v16);
  uint64_t v21 = (void *)(a2 + v16);
  uint64_t v22 = v21[1];
  void *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000C0614(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = a3[8];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = a3[9];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  void *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[10];
  id v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  void *v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000C085C(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v7 = a3[8];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  return a1;
}

uint64_t sub_1000C09AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = a3[8];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  int v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)(a1 + v18);
  id v20 = (uint64_t *)(a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  void *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[10];
  uint64_t v24 = (void *)(a1 + v23);
  id v25 = (uint64_t *)(a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000C0BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C0BB8);
}

uint64_t sub_1000C0BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000C0C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C0C80);
}

uint64_t sub_1000C0C80(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1000C0D2C()
{
  sub_1000A4D44();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t type metadata accessor for KTCloudOptIn()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for CloudOptInData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *id result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000C0ECCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudOptInData.CodingKeys()
{
  return &type metadata for CloudOptInData.CodingKeys;
}

unint64_t sub_1000C0F08()
{
  unint64_t result = qword_10032ADC0[0];
  if (!qword_10032ADC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10032ADC0);
  }
  return result;
}

unint64_t sub_1000C0F60()
{
  unint64_t result = qword_10032AED0;
  if (!qword_10032AED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032AED0);
  }
  return result;
}

unint64_t sub_1000C0FB8()
{
  unint64_t result = qword_10032AED8[0];
  if (!qword_10032AED8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10032AED8);
  }
  return result;
}

void *sub_1000C100C(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      unint64_t v24 = a1 & 0xC000000000000001;
      uint64_t v5 = 4;
      do
      {
        if (v24) {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v6 = *(id *)(a1 + 8 * v5);
        }
        uint64_t v7 = v6;
        uint64_t v8 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
          goto LABEL_32;
        }
        id v9 = [v6 ckstate];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v13 = v12;

          if (v13)
          {
            if (v11 == 0x646574656C6564 && v13 == 0xE700000000000000)
            {
LABEL_24:
              swift_bridgeObjectRelease();
              goto LABEL_25;
            }
            char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v15) {
              goto LABEL_25;
            }
          }
        }
        id v16 = [v7 uri:v24];
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        if (v17 == *(void *)(a2 + 88) && v19 == *(void *)(a2 + 96)) {
          goto LABEL_24;
        }
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v21 & 1) == 0)
        {
          id v22 = sub_1000AC668();
          if (v25) {
            goto LABEL_29;
          }
          goto LABEL_26;
        }
LABEL_25:
        id v22 = 0;
        if (v25)
        {
LABEL_29:
          swift_bridgeObjectRelease();

          return (void *)swift_bridgeObjectRelease();
        }
LABEL_26:

        if (v22)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        ++v5;
      }
      while (v8 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000C1298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CloudOptInData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C12FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C1364(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100080E08(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C13C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for KTOptIn()
{
  if (!qword_1003211B8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1003211B8);
    }
  }
}

uint64_t sub_1000C1468(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000829FC(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C1528()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100087A78(v0, qword_10032B068);
  sub_100080F90(v0, (uint64_t)qword_10032B068);
  return Logger.init(transparencyCategory:)();
}

id sub_1000C158C()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps);
}

uint64_t sub_1000C159C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_application);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000C15D8()
{
  return sub_1000C1918();
}

uint64_t sub_1000C15E4(uint64_t a1)
{
  return sub_1000C19FC(a1, &OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_uris);
}

uint64_t (*sub_1000C15F0())()
{
  return j_j__swift_endAccess;
}

unint64_t variable initialization expression of PeerValidationOperation.verifierInfo()
{
  return sub_1000C1674((uint64_t)_swiftEmptyArrayStorage, &qword_1003212F8);
}

unint64_t sub_1000C1674(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(a2);
  int v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_100089D6C(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000C178C()
{
  return sub_1000C1918();
}

uint64_t sub_1000C1798(uint64_t a1)
{
  return sub_1000C19FC(a1, &OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifierInfo);
}

uint64_t (*sub_1000C17A4())()
{
  return j__swift_endAccess;
}

id sub_1000C1800()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifier);
}

id sub_1000C1810()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp);
}

uint64_t sub_1000C1820()
{
  return swift_unknownObjectRetain();
}

id sub_1000C1830()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_peerValidateQueue);
}

unint64_t variable initialization expression of PeerValidationOperation.result()
{
  return sub_1000C1674((uint64_t)_swiftEmptyArrayStorage, &qword_1003212B8);
}

uint64_t PeerValidationOperation.result.getter()
{
  return sub_1000C1918();
}

uint64_t sub_1000C1918()
{
  return swift_bridgeObjectRetain();
}

uint64_t PeerValidationOperation.result.setter(uint64_t a1)
{
  return sub_1000C19FC(a1, &OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_result);
}

uint64_t sub_1000C19FC(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PeerValidationOperation.result.modify())()
{
  return j_j__swift_endAccess;
}

id PeerValidationOperation.__allocating_init(deps:application:uris:logClient:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  id v12 = sub_1000C4734(a1, a2, a3, a4, a5);

  swift_unknownObjectRelease();
  return v12;
}

id PeerValidationOperation.init(deps:application:uris:logClient:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = sub_1000C4734(a1, a2, a3, a4, a5);

  swift_unknownObjectRelease();
  return v6;
}

void *sub_1000C1B64(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1000C35CC(0, v1, 0);
  unint64_t result = (void *)sub_1000C4550(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = v2 + 64;
  uint64_t v26 = v2 + 80;
  int64_t v27 = v1;
  uint64_t v29 = v2 + 64;
  uint64_t v30 = v2;
  int v28 = v4;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_26;
    }
    uint64_t v32 = v6;
    id v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    BOOL v14 = *(void **)(*(void *)(v2 + 56) + 8 * v5);
    swift_bridgeObjectRetain();
    id v15 = v14;
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = 58;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    [v15 succeed];
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    if (v31)
    {
      swift_release();

      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }

    unint64_t result = (void *)swift_bridgeObjectRelease();
    unint64_t v19 = _swiftEmptyArrayStorage[2];
    unint64_t v18 = _swiftEmptyArrayStorage[3];
    if (v19 >= v18 >> 1) {
      unint64_t result = (void *)sub_1000C35CC(v18 > 1, v19 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v19 + 1;
    id v20 = &_swiftEmptyArrayStorage[2 * v19];
    void v20[4] = v12;
    v20[5] = v13;
    uint64_t v2 = v30;
    int64_t v8 = 1 << *(unsigned char *)(v30 + 32);
    if (v5 >= v8) {
      goto LABEL_27;
    }
    uint64_t v7 = v29;
    uint64_t v21 = *(void *)(v29 + 8 * v10);
    if ((v21 & (1 << v5)) == 0) {
      goto LABEL_28;
    }
    int v4 = v28;
    if (*(_DWORD *)(v30 + 36) != v28) {
      goto LABEL_29;
    }
    unint64_t v22 = v21 & (-2 << (v5 & 0x3F));
    if (v22)
    {
      int64_t v8 = __clz(__rbit64(v22)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v27;
    }
    else
    {
      unint64_t v23 = v10 + 1;
      unint64_t v24 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v27;
      if (v10 + 1 < v24)
      {
        unint64_t v25 = *(void *)(v29 + 8 * v23);
        if (v25)
        {
LABEL_21:
          int64_t v8 = __clz(__rbit64(v25)) + (v23 << 6);
        }
        else
        {
          while (v24 - 2 != v10)
          {
            unint64_t v25 = *(void *)(v26 + 8 * v10++);
            if (v25)
            {
              unint64_t v23 = v10 + 1;
              goto LABEL_21;
            }
          }
        }
      }
    }
    uint64_t v6 = v32 + 1;
    uint64_t v5 = v8;
    if (v32 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

Swift::Void __swiftcall PeerValidationOperation.groupStart()()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  [v0 dependOnBeforeGroupFinished:*(void *)&v0[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp]];
  if (qword_10032B060 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_100080F90(v1, (uint64_t)qword_10032B068);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, v1);
  uint64_t v6 = v0;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  int v9 = v8;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v20 = v1;
    uint64_t v10 = swift_slowAlloc();
    int v18 = v9;
    id v11 = (uint8_t *)v10;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v22 = v19;
    Swift::String v17 = v11;
    *(_DWORD *)id v11 = 136315138;
    uint64_t v21 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v6) + 0x98))();
    v16[1] = v11 + 4;
    sub_100080E08(&qword_100321208);
    sub_1000C1468((unint64_t *)&unk_100321210, &qword_100321208);
    sub_100090D14();
    uint64_t v12 = Sequence<>.joined(separator:)();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    uint64_t v21 = sub_10008D114(v12, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, (os_log_type_t)v18, "Starting fetch of uri data for: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v15 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v20);
  }
  else
  {

    uint64_t v15 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  (*(void (**)(uint64_t))((swift_isaMask & *(void *)v6) + 0xE8))(v15);
}

void sub_1000C2284()
{
  uint64_t v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x98);
  uint64_t v2 = v1();
  uint64_t v3 = v0;
  sub_1000C4D1C(v2, v3);
  swift_bridgeObjectRelease();

  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0xC8))();
  uint64_t v5 = v3;
  sub_1000C5224(v4, v5);
  swift_bridgeObjectRelease();

  uint64_t v6 = *(void *)(v1() + 16);
  uint64_t v7 = swift_bridgeObjectRelease();
  if (v6)
  {
    (*(void (**)(uint64_t))((swift_isaMask & *v5) + 0xF0))(v7);
  }
  else
  {
    if (qword_10032B060 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100080F90(v8, (uint64_t)qword_10032B068);
    int v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "got all entries from cache", v11, 2u);
      swift_slowDealloc();
    }

    id v12 = [v5 operationQueue];
    [v12 addOperation:*(void *)((char *)v5 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp)];
  }
}

void sub_1000C24D4()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x98))();
  uint64_t v2 = v0;
  sub_1000C4B10(v1);
  swift_bridgeObjectRelease();

  id v3 = [*(id *)((char *)v2 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps) idsOperations];
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v5 = String._bridgeToObjectiveC()();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v2;
  v9[4] = sub_1000C5460;
  v9[5] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  long long v9[2] = sub_1000C2E74;
  v9[3] = &unk_1002BF0A8;
  uint64_t v7 = _Block_copy(v9);
  uint64_t v8 = v2;
  swift_release();
  [v3 fetchPeerVerificationInfos:isa application:v5 completionBlock:v7];
  _Block_release(v7);
  swift_unknownObjectRelease();
}

void sub_1000C2684(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void **)(v6 - 8);
  __chkstk_darwin(v6);
  int v9 = (char *)v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain();
    if (qword_10032B060 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100080F90(v14, (uint64_t)qword_10032B068);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      Swift::String v17 = (uint8_t *)swift_slowAlloc();
      int v18 = (void *)swift_slowAlloc();
      *(_DWORD *)Swift::String v17 = 138412290;
      swift_errorRetain();
      uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
      aBlock[0] = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v18 = v19;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "IDS failed with %@", v17, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v29 = (void *)_convertErrorToNSError(_:)();
    [a3 setError:v29];

    id v30 = [a3 operationQueue];
    [v30 addOperation:*(void *)((char *)a3 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp)];

    swift_errorRelease();
  }
  else
  {
    if (a1)
    {
      v46[0] = v7;
      uint64_t v20 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB8);
      uint64_t v21 = swift_bridgeObjectRetain();
      uint64_t v22 = v20(v21);
      uint64_t v23 = *(void *)((*(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0xB0))(v22) + 16);
      uint64_t v24 = swift_bridgeObjectRelease();
      uint64_t v25 = *(void *)((*(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0x98))(v24) + 16);
      swift_bridgeObjectRelease();
      if (v23 == v25)
      {
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = a3;
        aBlock[4] = sub_1000C5C3C;
        void aBlock[5] = v26;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1000B8C74;
        aBlock[3] = &unk_1002BF198;
        int64_t v27 = _Block_copy(aBlock);
        int v28 = a3;
        static DispatchQoS.unspecified.getter();
        v46[1] = _swiftEmptyArrayStorage;
        sub_1000C5C9C(&qword_1003212C0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100080E08(&qword_1003212C8);
        sub_1000C1468((unint64_t *)&unk_1003212D0, &qword_1003212C8);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v27);
        (*((void (**)(char *, uint64_t))v46[0] + 1))(v9, v6);
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        swift_release();
        return;
      }
      if (qword_10032B060 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100080F90(v36, (uint64_t)qword_10032B068);
      os_log_type_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v37, v38))
      {
        os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "IDS didn't return all answers in peer query", v39, 2u);
        swift_slowDealloc();
      }

      uint64_t v40 = self;
      id v41 = kTransparencyErrorInternal;
      NSString v42 = String._bridgeToObjectiveC()();
      id v43 = [v40 errorWithDomain:v41 code:-353 underlyingError:0 userinfo:0 description:v42];

      unint64_t v44 = (void *)_convertErrorToNSError(_:)();
      [a3 setError:v44];

      id v35 = [a3 operationQueue];
    }
    else
    {
      if (qword_10032B060 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100080F90(v31, (uint64_t)qword_10032B068);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "No results from IDS", v34, 2u);
        swift_slowDealloc();
      }

      id v35 = [a3 operationQueue];
    }
    v46[0] = v35;
    [v46[0] addOperation:*(void *)((char *)a3 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp)];
    id v45 = v46[0];
  }
}

uint64_t sub_1000C2E74(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  NSString v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10008E0A0(0, &qword_100321220);
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1000C2F28()
{
  id v1 = [*(id *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps) contextStore];
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x98))();
  sub_1000C40E4(v2);
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t v5 = *(void *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_logClient);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v0;
  v9[4] = sub_1000C5480;
  v9[5] = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  long long v9[2] = sub_1000C30DC;
  v9[3] = &unk_1002BF0F8;
  uint64_t v7 = _Block_copy(v9);
  uint64_t v8 = v0;
  swift_release();
  [v1 queryForUris:isa application:v4 logClient:v5 userInitiated:1 cachedYoungerThan:0 completionHandler:v7];
  _Block_release(v7);
  swift_unknownObjectRelease();
}

void sub_1000C30DC(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1000C3148()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC8))();
  sub_1000C1B64(v1);
  swift_bridgeObjectRelease();
  sub_100080E08((uint64_t *)&unk_100320660);
  sub_1000C1468((unint64_t *)&qword_100321970, (uint64_t *)&unk_100320660);
  uint64_t v2 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v2;
}

void sub_1000C3230()
{
  id v1 = [*(id *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps) contextStore];
  (*(void (**)(void))((swift_isaMask & *v0) + 0xB0))();
  sub_10008E0A0(0, &qword_100321220);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v3 = String._bridgeToObjectiveC()();
  uint64_t v4 = *(void *)((char *)v0 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_logClient);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v0;
  v8[4] = sub_1000C56E8;
  void v8[5] = v5;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  void v8[2] = sub_1000C33F4;
  v8[3] = &unk_1002BF148;
  uint64_t v6 = _Block_copy(v8);
  uint64_t v7 = v0;
  swift_release();
  [v1 validatePeers:isa application:v3 fetchNow:1 logClient:v4 completionBlock:v6];
  _Block_release(v6);
  swift_unknownObjectRelease();
}

uint64_t sub_1000C33F4(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_10008E0A0(0, &qword_1003212B0);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

void PeerValidationOperation.init()()
{
}

id PeerValidationOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PeerValidationOperation();
  return [super dealloc];
}

uint64_t sub_1000C35CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1000C35EC(a1, a2, a3, *v3);
  void *v3 = (char *)result;
  return result;
}

uint64_t sub_1000C35EC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100080E08(&qword_100320AD0);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000C3758(uint64_t a1, char a2)
{
  NSString v3 = v2;
  uint64_t v5 = *v2;
  sub_100080E08(&qword_1003212B8);
  char v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          NSString v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  NSString v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

void sub_1000C3A68(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100089D6C(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000C3BD8();
LABEL_7:
    int v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1000C3758(v15, a4 & 1);
  unint64_t v20 = sub_100089D6C(a2, a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  int v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  swift_bridgeObjectRetain();
}

id sub_1000C3BD8()
{
  id v1 = v0;
  sub_100080E08(&qword_1003212B8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    unint64_t v20 = *(void **)(*(void *)(v2 + 56) + v19);
    char v21 = (void *)(*(void *)(v4 + 48) + v16);
    *char v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = v20;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000C3D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100096974();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_1000C3F1C(v8);
  uint64_t *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_1000C3F1C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v2);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    id result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void *sub_1000C40E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_100080E08(&qword_100320AD0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1000C4350((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100089D64();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

uint64_t sub_1000C41CC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_1000C426C(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (id result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000C4350(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *unint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    id result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000C4550(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

void *sub_1000C45D8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1000C35CC(0, v1, 0);
    uint64_t v3 = self;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      NSString v5 = String._bridgeToObjectiveC()();
      NSString v6 = String._bridgeToObjectiveC()();
      id v7 = [v3 addApplicationPrefixForIdentifier:v5 uri:v6];

      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;
      swift_bridgeObjectRelease();

      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_1000C35CC(v11 > 1, v12 + 1, 1);
      }
      v4 += 16;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

id sub_1000C4734(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v29 = a5;
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v31 = *(void *)(v10 - 8);
  uint64_t v32 = v10;
  __chkstk_darwin(v10);
  uint64_t v30 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue_serial.Attributes();
  __chkstk_darwin(v12);
  uint64_t v28 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifierInfo;
  unint64_t v16 = v5;
  *(void *)&v5[v15] = sub_1000C1674((uint64_t)_swiftEmptyArrayStorage, &qword_1003212F8);
  uint64_t v17 = OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_result;
  *(void *)&v16[v17] = sub_1000C1674((uint64_t)_swiftEmptyArrayStorage, &qword_1003212B8);
  *(void *)&v16[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps] = a1;
  unint64_t v18 = &v16[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_application];
  *(void *)unint64_t v18 = a2;
  *((void *)v18 + 1) = a3;
  swift_bridgeObjectRetain();
  id v19 = a1;
  unint64_t v20 = sub_1000C45D8(a4);
  swift_bridgeObjectRelease();
  uint64_t v21 = sub_100097324((uint64_t)v20);
  swift_bridgeObjectRelease();
  *(void *)&v16[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_uris] = v21;
  id v22 = objc_allocWithZone((Class)KTVerifier);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v24 = [v22 initWithApplication:v23];

  *(void *)&v16[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_verifier] = v24;
  id v25 = [objc_allocWithZone((Class)KTResultOperation) init];
  *(void *)&v16[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp] = v25;
  *(void *)&v16[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_logClient] = v29;
  sub_10008E0A0(0, (unint64_t *)&qword_100320BC8);
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_1000C5C9C((unint64_t *)&unk_1003212E0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue_serial.Attributes);
  sub_100080E08(&qword_100320BD0);
  sub_1000C1468((unint64_t *)&qword_1003212F0, &qword_100320BD0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v31 + 104))(v30, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v32);
  *(void *)&v16[OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_peerValidateQueue] = OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();

  unint64_t v26 = (objc_class *)type metadata accessor for PeerValidationOperation();
  v33.receiver = v16;
  v33.super_class = v26;
  return [super init];
}

void *sub_1000C4B10(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1000C35CC(0, v1, 0);
  int64_t v3 = sub_1000C41CC(v2);
  int v5 = v4;
  char v7 = v6 & 1;
  uint64_t v22 = v2 + 56;
  id result = self;
  id v21 = result;
  uint64_t v20 = v2;
  while ((v3 & 0x8000000000000000) == 0 && v3 < 1 << *(unsigned char *)(v2 + 32))
  {
    if (((*(void *)(v22 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) == 0) {
      goto LABEL_13;
    }
    if (*(_DWORD *)(v2 + 36) != v5) {
      goto LABEL_14;
    }
    char v23 = v7;
    swift_bridgeObjectRetain();
    NSString v9 = String._bridgeToObjectiveC()();
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v21 stripApplicationPrefixForIdentifier:v9 uri:v10];

    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();

    unint64_t v16 = _swiftEmptyArrayStorage[2];
    unint64_t v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1) {
      sub_1000C35CC(v15 > 1, v16 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v16 + 1;
    uint64_t v17 = &_swiftEmptyArrayStorage[2 * v16];
    void v17[4] = v12;
    void v17[5] = v14;
    uint64_t v2 = v20;
    id result = (void *)sub_1000C426C(v3, v5, v23 & 1, v20);
    int64_t v3 = (int64_t)result;
    int v5 = v18;
    char v7 = v19 & 1;
    if (!--v1)
    {
      sub_1000C5C90((uint64_t)result, v18, v19 & 1);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1000C4D1C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v37 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v38 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  NSString v9 = &selRef_staticKeyModelURL;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v42 = (v6 - 1) & v6;
  int64_t v43 = v8;
  for (unint64_t i = __clz(__rbit64(v6)) | (v8 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v12 << 6))
  {
    unint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v15;
    unint64_t v16 = v15[1];
    uint64_t v18 = *(void **)((char *)a2 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_deps);
    swift_bridgeObjectRetain();
    id v19 = [v18 dataStore];
    NSString v20 = String._bridgeToObjectiveC()();
    NSString v21 = String._bridgeToObjectiveC()();
    id v22 = [v19 verifierResultForPeer:v20 application:v21];

    if (qword_10032B060 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100080F90(v23, (uint64_t)qword_10032B068);
    id v24 = v22;
    swift_bridgeObjectRetain_n();
    id v25 = v24;
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v39 = v3;
      uint64_t v28 = swift_slowAlloc();
      v44[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 134218242;
      id v29 = [v25 v9[56]];

      uint64_t v45 = (uint64_t)v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v45 = sub_10008D114(v17, v16, v44);
      NSString v9 = &selRef_staticKeyModelURL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Cached response %lu for uri %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v3 = v39;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

    if ([v25 v9[56]] != (id)2)
    {
      uint64_t v30 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *a2) + 0xD8);
      id v31 = v25;
      swift_bridgeObjectRetain();
      uint64_t v32 = (void (*)(uint64_t *, void))v30(v44);
      uint64_t v34 = v33;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v45 = *v34;
      uint64_t *v34 = 0x8000000000000000;
      sub_1000C3A68((uint64_t)v31, v17, v16, isUniquelyReferenced_nonNull_native);
      uint64_t *v34 = v45;
      NSString v9 = &selRef_staticKeyModelURL;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v32(v44, 0);
    }

    if (v3)
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v6 = v42;
    int64_t v8 = v43;
    if (v42) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v11 = __OFADD__(v8, 1);
    int64_t v12 = v8 + 1;
    if (v11)
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v12 >= v38) {
      return swift_release();
    }
    unint64_t v13 = *(void *)(v37 + 8 * v12);
    if (!v13)
    {
      int64_t v14 = v12 + 1;
      if (v12 + 1 >= v38) {
        return swift_release();
      }
      unint64_t v13 = *(void *)(v37 + 8 * v14);
      if (v13) {
        goto LABEL_14;
      }
      int64_t v14 = v12 + 2;
      if (v12 + 2 >= v38) {
        return swift_release();
      }
      unint64_t v13 = *(void *)(v37 + 8 * v14);
      if (v13) {
        goto LABEL_14;
      }
      int64_t v14 = v12 + 3;
      if (v12 + 3 >= v38) {
        return swift_release();
      }
      unint64_t v13 = *(void *)(v37 + 8 * v14);
      if (v13)
      {
LABEL_14:
        int64_t v12 = v14;
        goto LABEL_15;
      }
      int64_t v36 = v12 + 4;
      if (v12 + 4 >= v38) {
        return swift_release();
      }
      unint64_t v13 = *(void *)(v37 + 8 * v36);
      v12 += 4;
      if (!v13) {
        break;
      }
    }
LABEL_15:
    uint64_t v42 = (v13 - 1) & v13;
    int64_t v43 = v12;
  }
  while (1)
  {
    int64_t v12 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v12 >= v38) {
      return swift_release();
    }
    unint64_t v13 = *(void *)(v37 + 8 * v12);
    ++v36;
    if (v13) {
      goto LABEL_15;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_1000C5224(uint64_t a1, void *a2)
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v7) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v21 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v21 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v21 + 8 * v9);
        if (!v18)
        {
          int64_t v9 = v17 + 3;
          if (v17 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v21 + 8 * v9);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v18 - 1) & v18;
    unint64_t v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    int64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    unint64_t v15 = *(uint64_t (**)(unsigned char *))((swift_isaMask & *a2) + 0xA8);
    swift_bridgeObjectRetain();
    unint64_t v16 = (void (*)(unsigned char *, void))v15(v20);
    sub_1000C3D8C(v13, v14);
    swift_bridgeObjectRelease();
    v16(v20, 0);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v7) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v21 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v7) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v21 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000C5428()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000C5460(uint64_t a1, uint64_t a2)
{
  sub_1000C2684(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1000C5468(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000C5478()
{
  return swift_release();
}

uint64_t sub_1000C5480(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (!a1) {
    return (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x108))();
  }
  swift_errorRetain();
  if (qword_10032B060 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100080F90(v3, (uint64_t)qword_10032B068);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    int64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 138412290;
    swift_errorRetain();
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v11;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "KT query(forUris:) failed with %@", v6, 0xCu);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  int64_t v9 = (void *)_convertErrorToNSError(_:)();
  [v2 setError:v9];

  id v10 = [v2 operationQueue];
  [v10 addOperation:*(void *)((char *)v2 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp)];

  return swift_errorRelease();
}

void sub_1000C56E8(unint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v47 = *(void **)(v1 + 16);
  if (a1 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v3)
  {
    id v45 = self;
    unint64_t v44 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *v47) + 0xD8);
    unint64_t v46 = v2 & 0xC000000000000001;
    uint64_t v4 = 4;
    uint64_t v42 = v3;
    uint64_t v43 = v2;
    do
    {
      if (v46) {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v7 = *(id *)(v2 + 8 * v4);
      }
      int64_t v8 = v7;
      if (__OFADD__(v4 - 4, 1))
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      uint64_t v48 = v4 - 3;
      NSString v9 = String._bridgeToObjectiveC()();
      id v10 = [v8 uri];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v12 = [v45 addApplicationPrefixForIdentifier:v9 uri:v11];

      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      id v15 = v8;
      unint64_t v16 = (void (*)(uint64_t *, void))v44(v50);
      unint64_t v18 = v17;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      NSString v20 = (void *)*v18;
      unint64_t v49 = (void *)*v18;
      *unint64_t v18 = 0x8000000000000000;
      unint64_t v22 = sub_100089D6C(v2, v14);
      uint64_t v23 = v20[2];
      BOOL v24 = (v21 & 1) == 0;
      uint64_t v25 = v23 + v24;
      if (__OFADD__(v23, v24)) {
        goto LABEL_29;
      }
      char v26 = v21;
      if (v20[3] >= v25)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          id v29 = v49;
          if (v21) {
            goto LABEL_5;
          }
        }
        else
        {
          sub_1000C3BD8();
          id v29 = v49;
          if (v26) {
            goto LABEL_5;
          }
        }
      }
      else
      {
        sub_1000C3758(v25, isUniquelyReferenced_nonNull_native);
        unint64_t v27 = sub_100089D6C(v2, v14);
        if ((v26 & 1) != (v28 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        unint64_t v22 = v27;
        id v29 = v49;
        if (v26)
        {
LABEL_5:
          uint64_t v5 = v29[7];
          uint64_t v6 = 8 * v22;

          *(void *)(v5 + v6) = v15;
          goto LABEL_6;
        }
      }
      v29[(v22 >> 6) + 8] |= 1 << v22;
      uint64_t v30 = (uint64_t *)(v29[6] + 16 * v22);
      uint64_t *v30 = v2;
      v30[1] = v14;
      *(void *)(v29[7] + 8 * v22) = v15;
      uint64_t v31 = v29[2];
      BOOL v32 = __OFADD__(v31, 1);
      uint64_t v33 = v31 + 1;
      if (v32) {
        goto LABEL_30;
      }
      v29[2] = v33;
      swift_bridgeObjectRetain();
LABEL_6:
      *unint64_t v18 = v29;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16(v50, 0);

      ++v4;
      uint64_t v2 = v43;
    }
    while (v48 != v42);
  }
  swift_bridgeObjectRelease();
  if (qword_10032B060 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  sub_100080F90(v34, (uint64_t)qword_10032B068);
  id v35 = v47;
  int64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    int64_t v38 = (uint8_t *)swift_slowAlloc();
    v50[0] = swift_slowAlloc();
    *(_DWORD *)int64_t v38 = 136315138;
    uint64_t v39 = (*(uint64_t (**)(void))((swift_isaMask & *v35) + 0x100))();
    sub_10008D114(v39, v40, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v36, v37, "KT query validate peer completed %s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v41 = [v35 operationQueue];
  [v41 addOperation:*(void *)((char *)v35 + OBJC_IVAR____TtC13transparencyd23PeerValidationOperation_completeOp)];
}

uint64_t type metadata accessor for PeerValidationOperation()
{
  return self;
}

uint64_t sub_1000C5C3C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0xF8))();
}

uint64_t sub_1000C5C90(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000C5C9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C5D08()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100087A78(v0, qword_10032B088);
  sub_100080F90(v0, (uint64_t)qword_10032B088);
  return Logger.init(transparencyCategory:)();
}

id sub_1000C5D6C()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore);
}

id sub_1000C5D7C()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_configBag);
}

id KTTapToRadar.__allocating_init(dataStore:configBag:dewConfig:)(void *a1, void *a2, void *a3)
{
  id v7 = objc_allocWithZone(v3);
  id v8 = sub_1000C80CC(a1, a2, a3);

  return v8;
}

id KTTapToRadar.init(dataStore:configBag:dewConfig:)(void *a1, void *a2, void *a3)
{
  id v6 = sub_1000C80CC(a1, a2, a3);

  return v6;
}

Swift::Bool __swiftcall KTTapToRadar.hasRecentlyFiledTTR(tapToRadarType:)(Swift::String tapToRadarType)
{
  uint64_t v2 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  NSString v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  id v12 = (char *)&v22 - v11;
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v22 - v13;
  id v15 = *(void **)(v1 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore);
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 getTapToRadarDate:v16];

  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    goto LABEL_5;
  }
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v18(v4, v12, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
LABEL_5:
    sub_100087A1C((uint64_t)v4, (uint64_t *)&unk_10031F9A0);
    char v19 = 0;
    return v19 & 1;
  }
  v18(v14, v4, v5);
  Date.addingTimeInterval(_:)();
  Date.init()();
  char v19 = static Date.> infix(_:_:)();
  NSString v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  v20(v9, v5);
  v20(v12, v5);
  v20(v14, v5);
  return v19 & 1;
}

void sub_1000C61DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
}

uint64_t sub_1000C6204@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ErrorDomainCode(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100079E10(a2);
  id v8 = [a1 domain];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  a2[2] = (uint64_t)[a1 code];
  id v12 = [a1 underlyingErrors];
  sub_100080E08(&qword_10031F4C0);
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    NSString v16 = _swiftEmptyArrayStorage;
    do
    {
      swift_errorRetain();
      id v17 = (void *)_convertErrorToNSError(_:)();
      sub_1000C6204();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        NSString v16 = (void *)sub_1000C7C3C(0, v16[2] + 1, 1, (unint64_t)v16, &qword_100321418, type metadata accessor for ErrorDomainCode, type metadata accessor for ErrorDomainCode);
      }
      unint64_t v19 = v16[2];
      unint64_t v18 = v16[3];
      if (v19 >= v18 >> 1) {
        NSString v16 = (void *)sub_1000C7C3C(v18 > 1, v19 + 1, 1, (unint64_t)v16, &qword_100321418, type metadata accessor for ErrorDomainCode, type metadata accessor for ErrorDomainCode);
      }
      ++v15;
      void v16[2] = v19 + 1;
      sub_1000C9094((uint64_t)v7, (uint64_t)v16+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v19, type metadata accessor for ErrorDomainCode);
      swift_errorRelease();
    }
    while (v14 != v15);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    NSString v16 = _swiftEmptyArrayStorage;
  }
  uint64_t result = swift_bridgeObjectRelease();
  a2[3] = (uint64_t)v16;
  return result;
}

id KTTapToRadar.presentTap(toRadarRemote:fromHandle:)(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  id v62 = (void *)a1;
  uint64_t v63 = a3;
  uint64_t v6 = type metadata accessor for BinaryDecodingOptions();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for SASTTR(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v60 = (uint64_t *)((char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v55 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (uint64_t *)((char *)&v55 - v14);
  uint64_t v16 = __chkstk_darwin(v13);
  id v61 = (char *)&v55 - v17;
  __chkstk_darwin(v16);
  unint64_t v19 = (unint64_t *)((char *)&v55 - v18);
  if (qword_10032B080 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_100080F90(v20, (uint64_t)qword_10032B088);
  swift_bridgeObjectRetain_n();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v55 = a2;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v59 = v21;
    uint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc();
    unint64_t v56 = v19;
    unint64_t v57 = v15;
    *(void *)&v64[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_10008D114(v63, (unint64_t)a4, (uint64_t *)v64);
    a2 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "presentTapToRadarRemote %s", v25, 0xCu);
    swift_arrayDestroy();
    unint64_t v19 = v56;
    uint64_t v15 = v57;
    swift_slowDealloc();
    uint64_t v21 = v59;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id result = [self hasInternalDiagnostics];
  if (result)
  {
    uint64_t v66 = (uint64_t)v62;
    unint64_t v67 = a2;
    uint64_t v65 = 0;
    memset(v64, 0, sizeof(v64));
    sub_100080C58((uint64_t)v62, a2);
    BinaryDecodingOptions.init()();
    sub_1000C9300((unint64_t *)&unk_100321310, (void (*)(uint64_t))type metadata accessor for SASTTR);
    uint64_t v28 = (uint64_t)v61;
    Message.init<A>(serializedBytes:extensions:partial:options:)();
    sub_1000C9094(v28, (uint64_t)v19, type metadata accessor for SASTTR);
    sub_1000C90FC((uint64_t)v19, (uint64_t)v15);
    sub_1000C90FC((uint64_t)v19, (uint64_t)v12);
    id v29 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v30))
    {
      uint64_t v31 = swift_slowAlloc();
      id v61 = (char *)swift_slowAlloc();
      *(void *)&v64[0] = v61;
      *(_DWORD *)uint64_t v31 = 136315394;
      uint64_t v59 = v21;
      id v62 = a4;
      uint64_t v32 = *v15;
      unint64_t v33 = v15[1];
      swift_bridgeObjectRetain();
      uint64_t v66 = sub_10008D114(v32, v33, (uint64_t *)v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C9348((uint64_t)v15, type metadata accessor for SASTTR);
      *(_WORD *)(v31 + 12) = 2080;
      uint64_t v34 = *((void *)v12 + 2);
      unint64_t v35 = *((void *)v12 + 3);
      swift_bridgeObjectRetain();
      uint64_t v66 = sub_10008D114(v34, v35, (uint64_t *)v64);
      a4 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000C9348((uint64_t)v12, type metadata accessor for SASTTR);
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "presentTapToRadarRemote [%s]%s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1000C9348((uint64_t)v15, type metadata accessor for SASTTR);
      sub_1000C9348((uint64_t)v12, type metadata accessor for SASTTR);
    }

    int64_t v36 = v60;
    uint64_t v38 = *v19;
    unint64_t v37 = v19[1];
    uint64_t v39 = HIBYTE(v37) & 0xF;
    if ((v37 & 0x2000000000000000) == 0) {
      uint64_t v39 = *v19 & 0xFFFFFFFFFFFFLL;
    }
    if (!v39) {
      goto LABEL_15;
    }
    uint64_t v40 = *(void *)((char *)v58 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_ttrConfig);
    *(void *)&v64[0] = *v19;
    *((void *)&v64[0] + 1) = v37;
    id v41 = *(uint64_t (**)(_OWORD *))(*(void *)v40 + 200);
    swift_retain();
    swift_bridgeObjectRetain();
    LOBYTE(v41) = v41(v64);
    swift_bridgeObjectRelease();
    swift_release();
    if (v41)
    {
      uint64_t v43 = v19[2];
      uint64_t v42 = v19[3];
      *(void *)&v64[0] = 0x203A6D6F7246;
      *((void *)&v64[0] + 1) = 0xE600000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v44._countAndFlagsBits = v63;
      v44._object = a4;
      String.append(_:)(v44);
      v45._countAndFlagsBits = 2570;
      v45._object = (void *)0xE200000000000000;
      String.append(_:)(v45);
      uint64_t v46 = v19[4];
      uint64_t v47 = (void *)v19[5];
      swift_bridgeObjectRetain();
      v48._countAndFlagsBits = v46;
      v48._object = v47;
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, void, void))((swift_isaMask & *v58)
                                                                                          + 0xA8))(v38, v37, v43, v42, *(void *)&v64[0], *((void *)&v64[0] + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v49 = (uint64_t)v19;
    }
    else
    {
LABEL_15:
      sub_1000C90FC((uint64_t)v19, (uint64_t)v36);
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        id v52 = (uint8_t *)swift_slowAlloc();
        *(void *)&v64[0] = swift_slowAlloc();
        *(_DWORD *)id v52 = 136315138;
        uint64_t v53 = *v36;
        unint64_t v54 = v36[1];
        swift_bridgeObjectRetain();
        uint64_t v66 = sub_10008D114(v53, v54, (uint64_t *)v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1000C9348((uint64_t)v36, type metadata accessor for SASTTR);
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "TTR configured off for: %s", v52, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_1000C9348((uint64_t)v36, type metadata accessor for SASTTR);
      }
      uint64_t v49 = (uint64_t)v19;
    }
    return (id)sub_1000C9348(v49, type metadata accessor for SASTTR);
  }
  return result;
}

Swift::Void __swiftcall KTTapToRadar.clearTapToRadar(withUnique:)(Swift::String withUnique)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore);
  id v3 = String._bridgeToObjectiveC()();
  [v2 storeTTR:0 withType:v3];
}

Swift::Void __swiftcall KTTapToRadar.presentTapToRadarError(unique:title:message:)(Swift::String unique, Swift::String title, Swift::String message)
{
  object = message._object;
  uint64_t countAndFlagsBits = message._countAndFlagsBits;
  uint64_t v6 = title._object;
  uint64_t v7 = title._countAndFlagsBits;
  uint64_t v8 = unique._object;
  uint64_t v9 = unique._countAndFlagsBits;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&error[-2] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (![self hasInternalDiagnostics]) {
    return;
  }
  if ((*(uint64_t (**)(uint64_t, void *))((swift_isaMask & *v3) + 0x90))(v9, v8))
  {
    if (qword_10032B080 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100080F90(v14, (uint64_t)qword_10032B088);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v15, v16))
    {

      swift_bridgeObjectRelease_n();
      return;
    }
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    responseFlags[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)error = sub_10008D114(v9, (unint64_t)v8, (uint64_t *)responseFlags);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "presentTapToRadarError skipped since it was recently filed %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_20;
  }
  uint64_t v33 = countAndFlagsBits;
  uint64_t v18 = *(void **)((char *)v3 + OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore);
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  NSString v20 = String._bridgeToObjectiveC()();
  [v18 storeTTR:isa withType:v20];

  error[0] = 0;
  sub_100080E08(&qword_100321328);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100285700;
  if (!kCFUserNotificationAlertHeaderKey)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v22 = inited;
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 32) = kCFUserNotificationAlertHeaderKey;
  *(void *)(inited + 40) = v7;
  *(void *)(inited + 48) = v6;
  if (!kCFUserNotificationDefaultButtonTitleKey)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  *(void *)(inited + 104) = &type metadata for String;
  *(void *)(inited + 72) = kCFUserNotificationDefaultButtonTitleKey;
  strcpy((char *)(inited + 80), "Tap to Radar");
  *(unsigned char *)(inited + 93) = 0;
  *(_WORD *)(inited + 94) = -5120;
  uint64_t v23 = v33;
  if (!kCFUserNotificationAlternateButtonTitleKey)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  *(void *)(inited + 144) = &type metadata for String;
  *(void *)(inited + 112) = kCFUserNotificationAlternateButtonTitleKey;
  *(void *)(inited + 120) = 0x776F6E20746F4ELL;
  *(void *)(inited + 128) = 0xE700000000000000;
  if (!kCFUserNotificationAlertMessageKey)
  {
LABEL_26:
    __break(1u);
    return;
  }
  *(void *)(inited + 184) = &type metadata for String;
  *(void *)(inited + 152) = kCFUserNotificationAlertMessageKey;
  *(void *)(inited + 160) = v23;
  *(void *)(inited + 168) = object;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CFStringRef v24 = (id)kCFUserNotificationAlertMessageKey;
  CFStringRef v25 = (id)kCFUserNotificationAlertHeaderKey;
  CFStringRef v26 = (id)kCFUserNotificationDefaultButtonTitleKey;
  CFStringRef v27 = (id)kCFUserNotificationAlternateButtonTitleKey;
  sub_1000C77E4(v22);
  type metadata accessor for CFString();
  sub_1000C9300(&qword_100321330, (void (*)(uint64_t))type metadata accessor for CFString);
  CFDictionaryRef v28 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v29 = CFUserNotificationCreate(kCFAllocatorSystemDefault, 0.0, 3uLL, error, v28);

  if (!v29)
  {
    if (qword_10032B080 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100080F90(v30, (uint64_t)qword_10032B088);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v15, v31)) {
      goto LABEL_21;
    }
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 67109120;
    swift_beginAccess();
    error[3] = error[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v31, "Unable to create notification %d", v32, 8u);
LABEL_20:
    swift_slowDealloc();
LABEL_21:

    return;
  }
  responseFlags[0] = 0;
  CFUserNotificationReceiveResponse(v29, 0.0, responseFlags);
  if ((responseFlags[0] & 3) == 0) {
    sub_1000C81E4(v7, (uint64_t)v6, v23, (uint64_t)object);
  }
}

unint64_t sub_1000C77E4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_1003213F8);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  id v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100098440(v6, (uint64_t)&v13, &qword_100321400);
    uint64_t v7 = v13;
    unint64_t result = sub_1000C7EBC(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_10008B89C(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void KTTapToRadar.init()()
{
}

id KTTapToRadar.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTTapToRadar();
  return [super dealloc];
}

uint64_t sub_1000C7AC4()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_1000C7B10()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_1000C7B68()
{
  return Hasher._finalize()();
}

uint64_t sub_1000C7BD0()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_1000C7C3C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100080E08(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000C8A28(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

unint64_t sub_1000C7EBC(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString();
  sub_1000C9300((unint64_t *)&unk_100321408, (void (*)(uint64_t))type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1000C7F70(a1, v2);
}

unint64_t sub_1000C7F70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString();
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_1000C9300((unint64_t *)&unk_100321408, (void (*)(uint64_t))type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

id sub_1000C80CC(void *a1, void *a2, void *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd12KTTapToRadar_dataStore] = a1;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd12KTTapToRadar_configBag] = a2;
  sub_100080E08((uint64_t *)&unk_100321420);
  type metadata accessor for DewTypeStrings();
  id v7 = v3;
  id v8 = a1;
  id v9 = a2;
  id v10 = a3;
  uint64_t v11 = variable initialization expression of KTSwiftDB.db();
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd12KTTapToRadar_ttrConfig] = sub_1000931E4(0x526F54706154544BLL, 0xEC00000072616461, v11, (uint64_t)&_swiftEmptySetSingleton, v10, 0xD000000000000011, 0x800000010024EC90);

  v13.receiver = v7;
  v13.super_class = (Class)type metadata accessor for KTTapToRadar();
  return [super init];
}

void sub_1000C81E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  uint64_t v4 = sub_100080E08(&qword_10031F4B0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  id v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v9 = (char *)&v58 - v8;
  uint64_t v10 = type metadata accessor for URLQueryItem();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v67 = (char *)&v58 - v15;
  uint64_t v16 = sub_100080E08(&qword_1003213E8);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for URLComponents();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  CFStringRef v25 = (char *)&v58 - v24;
  if ([self hasInternalDiagnostics])
  {
    id v61 = v14;
    id v62 = v9;
    uint64_t v59 = v7;
    if (qword_10032B080 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    uint64_t v60 = (void (*)(unsigned char *, void))sub_100080F90(v26, (uint64_t)qword_10032B088);
    CFStringRef v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      id v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "User tapped on 'Tap-to-Radar'... Attempting to open Tap-to-Radar.", v29, 2u);
      swift_slowDealloc();
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    URLComponents.init(string:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
    {
      sub_100087A1C((uint64_t)v18, &qword_1003213E8);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "TTR base URL didn't parse", v32, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v25, v18, v19);
      uint64_t v60 = (void (*)(unsigned char *, void))URLComponents.queryItems.modify();
      unint64_t v34 = *v33;
      uint64_t v58 = v23;
      if (v34)
      {
        unint64_t v35 = v33;
        URLQueryItem.init(name:value:)();
        unint64_t v36 = *v35;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t *v35 = v36;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v36 = sub_1000C7C3C(0, *(void *)(v36 + 16) + 1, 1, v36, &qword_1003213F0, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
          unint64_t *v35 = v36;
        }
        unint64_t v39 = *(void *)(v36 + 16);
        unint64_t v38 = *(void *)(v36 + 24);
        if (v39 >= v38 >> 1)
        {
          unint64_t v36 = sub_1000C7C3C(v38 > 1, v39 + 1, 1, v36, &qword_1003213F0, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
          unint64_t *v35 = v36;
        }
        *(void *)(v36 + 16) = v39 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v36+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v39, v67, v10);
        v60(v68, 0);
      }
      else
      {
        v60(v68, 0);
      }
      id v41 = (void (*)(unsigned char *, void))URLComponents.queryItems.modify();
      if (*v40)
      {
        uint64_t v42 = v40;
        URLQueryItem.init(name:value:)();
        unint64_t v43 = *v42;
        char v44 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v42 = v43;
        if ((v44 & 1) == 0)
        {
          unint64_t v43 = sub_1000C7C3C(0, *(void *)(v43 + 16) + 1, 1, v43, &qword_1003213F0, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
          *uint64_t v42 = v43;
        }
        unint64_t v46 = *(void *)(v43 + 16);
        unint64_t v45 = *(void *)(v43 + 24);
        if (v46 >= v45 >> 1)
        {
          unint64_t v43 = sub_1000C7C3C(v45 > 1, v46 + 1, 1, v43, &qword_1003213F0, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
          *uint64_t v42 = v43;
        }
        uint64_t v47 = v58;
        *(void *)(v43 + 16) = v46 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v43+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v46, v61, v10);
        v41(v68, 0);
      }
      else
      {
        v41(v68, 0);
        uint64_t v47 = v58;
      }
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v47, v25, v19);
      uint64_t v48 = (uint64_t)v62;
      URLComponents.url.getter();
      uint64_t v49 = *(void (**)(char *, uint64_t))(v20 + 8);
      v49(v47, v19);
      id v50 = [self defaultWorkspace];
      if (v50)
      {
        os_log_type_t v51 = v50;
        uint64_t v52 = (uint64_t)v59;
        sub_100098440(v48, (uint64_t)v59, &qword_10031F4B0);
        uint64_t v53 = type metadata accessor for URL();
        uint64_t v54 = *(void *)(v53 - 8);
        unint64_t v56 = 0;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53) != 1)
        {
          URL._bridgeToObjectiveC()(v55);
          unint64_t v56 = v57;
          (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v52, v53);
        }
        [v51 openSensitiveURL:v56 withOptions:0, v58];

        sub_100087A1C((uint64_t)v62, &qword_10031F4B0);
        v49(v25, v19);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_1000C8A28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000C8B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7, void *a8, uint64_t a9)
{
  id v49 = a8;
  uint64_t v47 = a3;
  uint64_t v48 = a5;
  uint64_t v14 = type metadata accessor for BinaryEncodingOptions();
  uint64_t v45 = *(void *)(v14 - 8);
  uint64_t v46 = v14;
  __chkstk_darwin(v14);
  char v44 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for ErrorDomainCode(0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (uint64_t *)((char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = type metadata accessor for IDSFailingDevice(0);
  __chkstk_darwin(v19 - 8);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for SASTTR(0);
  __chkstk_darwin(v43);
  unint64_t v23 = (uint64_t *)((char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10007A930(v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *unint64_t v23 = a1;
  v23[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23[2] = v47;
  v23[3] = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v23[4] = v48;
  v23[5] = a6;
  if (a7) {
    v23[6] = [a7 longLongValue];
  }
  if (v49) {
    v23[7] = [v49 longLongValue];
  }
  uint64_t v48 = v23;
  uint64_t v24 = *(void *)(a9 + 64);
  id v49 = (id)(a9 + 64);
  uint64_t v25 = 1 << *(unsigned char *)(a9 + 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & v24;
  int64_t v28 = (unint64_t)(v25 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v29 = 0;
  while (1)
  {
    if (v27)
    {
      unint64_t v30 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      unint64_t v31 = v30 | (v29 << 6);
      goto LABEL_9;
    }
    int64_t v37 = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v37 >= v28) {
      goto LABEL_29;
    }
    unint64_t v38 = *((void *)v49 + v37);
    ++v29;
    if (!v38)
    {
      int64_t v29 = v37 + 1;
      if (v37 + 1 >= v28) {
        goto LABEL_29;
      }
      unint64_t v38 = *((void *)v49 + v29);
      if (!v38)
      {
        int64_t v29 = v37 + 2;
        if (v37 + 2 >= v28) {
          goto LABEL_29;
        }
        unint64_t v38 = *((void *)v49 + v29);
        if (!v38)
        {
          int64_t v29 = v37 + 3;
          if (v37 + 3 >= v28) {
            goto LABEL_29;
          }
          unint64_t v38 = *((void *)v49 + v29);
          if (!v38)
          {
            int64_t v29 = v37 + 4;
            if (v37 + 4 >= v28) {
              goto LABEL_29;
            }
            unint64_t v38 = *((void *)v49 + v29);
            if (!v38) {
              break;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v27 = (v38 - 1) & v38;
    unint64_t v31 = __clz(__rbit64(v38)) + (v29 << 6);
LABEL_9:
    uint64_t v32 = (uint64_t *)(*(void *)(a9 + 48) + 16 * v31);
    uint64_t v33 = *v32;
    unint64_t v34 = v32[1];
    unint64_t v35 = *(void **)(*(void *)(a9 + 56) + 8 * v31);
    sub_100080C58(*v32, v34);
    id v36 = v35;
    sub_10007A590(v21);
    sub_100080C58(v33, v34);
    sub_100080CB0(*(void *)v21, *((void *)v21 + 1));
    *(void *)uint64_t v21 = v33;
    *((void *)v21 + 1) = v34;
    sub_1000C6204(v36, v18);
    sub_100079F6C((uint64_t)v18);
    sub_1000C9348((uint64_t)v21, type metadata accessor for IDSFailingDevice);
    sub_100080CB0(v33, v34);
  }
  int64_t v39 = v37 + 5;
  if (v39 >= v28)
  {
LABEL_29:
    swift_release();
    uint64_t v40 = (uint64_t)v48;
    swift_bridgeObjectRelease();
    *(void *)(v40 + 64) = _swiftEmptyArrayStorage;
    id v41 = v44;
    BinaryEncodingOptions.init()();
    sub_1000C9300((unint64_t *)&unk_100321310, (void (*)(uint64_t))type metadata accessor for SASTTR);
    Message.serializedBytes<A>(partial:options:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v41, v46);
    sub_1000C9348(v40, type metadata accessor for SASTTR);
    return;
  }
  unint64_t v38 = *((void *)v49 + v39);
  if (v38)
  {
    int64_t v29 = v39;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v29 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v29 >= v28) {
      goto LABEL_29;
    }
    unint64_t v38 = *((void *)v49 + v29);
    ++v39;
    if (v38) {
      goto LABEL_28;
    }
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_1000C9094(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000C90FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SASTTR(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for CFString()
{
  if (!qword_1003213C0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1003213C0);
    }
  }
}

uint64_t type metadata accessor for KTTapToRadar()
{
  return self;
}

uint64_t sub_1000C91DC()
{
  return sub_1000C9300(&qword_100321330, (void (*)(uint64_t))type metadata accessor for CFString);
}

uint64_t sub_1000C9224()
{
  return sub_1000C9300(&qword_1003213C8, (void (*)(uint64_t))type metadata accessor for CFString);
}

unint64_t sub_1000C926C()
{
  unint64_t result = qword_1003213D0;
  if (!qword_1003213D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003213D0);
  }
  return result;
}

unint64_t sub_1000C92AC()
{
  unint64_t result = qword_1003213D8;
  if (!qword_1003213D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003213D8);
  }
  return result;
}

uint64_t sub_1000C9300(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C9348(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000C93A8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100087A78(v0, qword_10032B228);
  sub_100080F90(v0, (uint64_t)qword_10032B228);
  return Logger.init(transparencyCategory:)();
}

uint64_t *sub_1000C9410()
{
  return &qword_100321430;
}

uint64_t sub_1000C941C()
{
  swift_beginAccess();
  uint64_t v0 = qword_100321430;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000C9470(uint64_t a1, char *a2)
{
  qword_100321430 = a1;
  off_100321438 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000C94CC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000C9524(uint64_t a1)
{
  unint64_t v2 = sub_1000D2AD0();

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000C9560(uint64_t a1)
{
  unint64_t v2 = sub_1000D2AD0();

  return Error<>._code.getter(a1, v2);
}

unint64_t variable initialization expression of KTCloudRecords.types()
{
  return sub_1000C95AC((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_1000C95AC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_1003215F0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100098440(v6, (uint64_t)&v15, &qword_100321628);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000D07EC(v15, v16, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100089E40);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_100098428(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C9718(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_100321188);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100098440(v6, (uint64_t)&v15, &qword_100321620);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000D07EC(v15, v16, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100089E40);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_10008B89C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000C9878(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08((uint64_t *)&unk_1003215E0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    unint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    sub_100080C58(v5, v6);
    swift_bridgeObjectRetain();
    unint64_t result = sub_1000D07EC(v5, v6, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000D0880);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000C99C0()
{
  return swift_retain();
}

uint64_t sub_1000C99D0()
{
  return swift_retain();
}

id sub_1000C99E0()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID);
}

uint64_t sub_1000C99F0()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000C9A00()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_1000C9A4C()
{
  return swift_unknownObjectRelease();
}

void (*sub_1000C9AA8(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC13transparencyd14KTCloudRecords_delegate;
  void v3[4] = v1;
  v3[5] = v4;
  swift_beginAccess();
  v3[3] = swift_unknownObjectWeakLoadStrong();
  return sub_1000C9B2C;
}

void sub_1000C9B2C(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

id sub_1000C9BAC()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_context);
}

id sub_1000C9BBC()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_database);
}

void *KTCloudRecords.__allocating_init(context:zone:database:hostInfo:delegate:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return KTCloudRecords.init(context:zone:database:hostInfo:delegate:)(a1, a2, a3, a4, a5, a6);
}

void *KTCloudRecords.init(context:zone:database:hostInfo:delegate:)(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types;
  BOOL v12 = v6;
  *(void *)&v6[v11] = sub_1000C95AC((uint64_t)_swiftEmptyArrayStorage);
  swift_unknownObjectWeakInit();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = objc_allocWithZone((Class)CKRecordZoneID);
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [v13 initWithZoneName:v14 ownerName:v15 databaseScope:2];

  uint64_t v35 = type metadata accessor for KTCloudDevice();
  swift_unknownObjectRetain();
  id v17 = a1;
  id v18 = v16;
  swift_unknownObjectRetain();
  uint64_t v19 = sub_1000997C0((uint64_t)v17, (uint64_t)v18, a5);
  uint64_t v34 = type metadata accessor for KTCloudOptIn();
  id v20 = v17;
  id v21 = v18;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v22 = a4;
  uint64_t v23 = sub_1000ACBB8(v20, v21, v22, a5, a6);
  uint64_t v33 = type metadata accessor for KTCloudStaticKey();
  id v24 = v20;
  id v25 = v21;
  swift_unknownObjectRetain();
  uint64_t v26 = sub_1000DD26C((uint64_t)v24, (uint64_t)v25, a6);
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_context] = v24;
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID] = v25;
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_hostInfo] = a5;
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice] = v19;
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn] = v23;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_database] = v22;
  id v27 = v24;
  id v28 = v25;
  swift_unknownObjectRetain();
  id v36 = v22;
  swift_retain();
  swift_retain();

  v40.receiver = v12;
  v40.super_class = (Class)type metadata accessor for KTCloudRecords();
  int64_t v29 = [super init];
  uint64_t v38 = v35;
  int64_t v39 = &off_1003206D0;
  v37[0] = v19;
  unint64_t v30 = *(void (**)(void *))((swift_isaMask & *v29) + 0x188);
  swift_retain();
  unint64_t v31 = v29;
  v30(v37);
  sub_10008FBC4((uint64_t)v37);
  uint64_t v38 = v34;
  int64_t v39 = &off_100320D58;
  v37[0] = v23;
  swift_retain();
  v30(v37);
  sub_10008FBC4((uint64_t)v37);
  uint64_t v38 = v33;
  int64_t v39 = &off_1003219A0;
  v37[0] = v26;
  swift_retain();
  v30(v37);
  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_10008FBC4((uint64_t)v37);
  return v31;
}

uint64_t type metadata accessor for KTCloudRecords()
{
  return self;
}

uint64_t KTCloudRecords.disableKTSyncabledKVSStore.getter()
{
  uint64_t v3 = &type metadata for TransparencyFeatureFlags;
  unint64_t v4 = sub_1000CA17C();
  v2[0] = 0;
  char v0 = isFeatureEnabled(_:)();
  sub_10008FBC4((uint64_t)v2);
  return v0 & 1;
}

unint64_t sub_1000CA17C()
{
  unint64_t result = qword_100321480;
  if (!qword_100321480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321480);
  }
  return result;
}

unint64_t KTCloudRecords.sysdiagnose()()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 280))();
  sub_100080E08(&qword_100321488);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1002856F0;
  *(void *)(inited + 32) = 0x6E4974706FLL;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(void *)(inited + 72) = sub_100080E08(&qword_100321490);
  *(void *)(inited + 48) = v1;
  return sub_1000C9718(inited);
}

uint64_t KTCloudRecords.updateSelfCloudDevice(withPushToken:tbsRegistrationData:applications:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 248))();
}

uint64_t KTCloudRecords.cloudDeviceNeedUpdate(withPushToken:tbsRegistrationData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(v4 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice);
  uint64_t v11 = *(void **)(v5 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_hostInfo);
  if (v11)
  {
    id v12 = [v11 osVersion];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  char v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 256))(a1, a2, a3, a4, v13, v15);
  swift_bridgeObjectRelease();
  return v16 & 1;
}

uint64_t KTCloudRecords.fetchSyncedLoggableData(withPushToken:tbsRegistrationData:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 264))();
}

uint64_t KTCloudRecords.cloudKTDevices()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 272))();
}

uint64_t KTCloudRecords.cloudDevices()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 280))();
}

uint64_t KTCloudRecords.addDevice(_:clientData:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 288))();
}

uint64_t KTCloudRecords.removeDevice(_:clientData:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice) + 296))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.setOptInStateWithURIs(_:application:state:)(Swift::OpaquePointer _, Swift::String application, Swift::Bool state)
{
  (*(void (**)(void *, uint64_t, void *, Swift::Bool))(**(void **)(v3
                                                                             + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                               + 352))(_._rawValue, application._countAndFlagsBits, application._object, state);
}

uint64_t KTCloudRecords.addOptInState(withURI:smtTimestamp:application:state:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 360))();
}

uint64_t KTCloudRecords.getOptInState(withUri:application:)()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 248))();
  if (!result)
  {
    sub_1000CB228();
    swift_allocError();
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_1000CB228()
{
  unint64_t result = qword_100321498;
  if (!qword_100321498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321498);
  }
  return result;
}

uint64_t KTCloudRecords.getAggregateOptInState(forApplication:)()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 264))();
  if (!result)
  {
    type metadata accessor for KTError();
    sub_1000D27FC((unint64_t *)&qword_100321170, (void (*)(uint64_t))type metadata accessor for KTError);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t KTCloudRecords.getAllOptInStates()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 272))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.clearOptInState(forURI:application:)(Swift::String_optional forURI, Swift::String application)
{
  (*(void (**)(uint64_t, void *, uint64_t, void *))(**(void **)(v2
                                                                         + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                           + 288))(forURI.value._countAndFlagsBits, forURI.value._object, application._countAndFlagsBits, application._object);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.storeOptInIntent(forApplication:state:overwrite:)(KTGroupOperation *__return_ptr retstr, Swift::String forApplication, Swift::Bool state, Swift::Bool overwrite)
{
  (*(void (**)(uint64_t, void *, Swift::Bool, Swift::Bool))(**(void **)(v4
                                                                                  + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                                    + 328))(forApplication._countAndFlagsBits, forApplication._object, state, overwrite);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.deleteOptInIntent(forApplication:)(KTGroupOperation *__return_ptr retstr, Swift::String forApplication)
{
  (*(void (**)(uint64_t, void *))(**(void **)(v2 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                          + 336))(forApplication._countAndFlagsBits, forApplication._object);
}

void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> KTCloudRecords.storeOptIn(forApplication:uris:state:)(KTGroupOperation *__return_ptr retstr, Swift::String forApplication, Swift::OpaquePointer uris, Swift::Bool state)
{
  (*(void (**)(uint64_t, void *, void *, Swift::Bool))(**(void **)(v4
                                                                             + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                               + 344))(forApplication._countAndFlagsBits, forApplication._object, uris._rawValue, state);
}

Swift::Void __swiftcall KTCloudRecords.clearDataStore(_:)(Swift::Bool a1)
{
  BOOL v2 = a1;
  (*(void (**)(void))(**(void **)(v1 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn) + 456))();
  (*(void (**)(BOOL))(**(void **)(v1 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudDevice)
                                 + 392))(v2);
}

Swift::Void __swiftcall KTCloudRecords.clearLocalCloudState()()
{
  uint64_t v1 = v0;
  (*(void (**)(void))((swift_isaMask & *v0) + 0x158))(0);
  type metadata accessor for KTCKZone();
  uint64_t v2 = sub_100088420((uint64_t)*(id *)((char *)v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_context));
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)v1
                                                             + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID), "zoneName"));
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 128))(v4, v6);
  swift_release();

  swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall KTCloudRecords.havePendingRecords()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  swift_beginAccess();
  uint64_t v19 = *v1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(*v1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(*v1 + 64);
  uint64_t v21 = *v1;
  int64_t v20 = (unint64_t)(v2 + 63) >> 6;
  Swift::Bool result = swift_bridgeObjectRetain_n();
  int64_t v6 = 0;
  int v7 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v9 = v8 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v20) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v19 + 8 * v16);
    ++v6;
    if (!v17)
    {
      int64_t v6 = v16 + 1;
      if (v16 + 1 >= v20) {
        goto LABEL_25;
      }
      unint64_t v17 = *(void *)(v19 + 8 * v6);
      if (!v17)
      {
        int64_t v6 = v16 + 2;
        if (v16 + 2 >= v20) {
          goto LABEL_25;
        }
        unint64_t v17 = *(void *)(v19 + 8 * v6);
        if (!v17)
        {
          int64_t v6 = v16 + 3;
          if (v16 + 3 >= v20) {
            goto LABEL_25;
          }
          unint64_t v17 = *(void *)(v19 + 8 * v6);
          if (!v17)
          {
            int64_t v6 = v16 + 4;
            if (v16 + 4 >= v20) {
              goto LABEL_25;
            }
            unint64_t v17 = *(void *)(v19 + 8 * v6);
            if (!v17) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v4 = (v17 - 1) & v17;
    unint64_t v9 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_5:
    uint64_t v10 = (uint64_t *)(*(void *)(v21 + 48) + 16 * v9);
    uint64_t v12 = *v10;
    uint64_t v11 = v10[1];
    sub_1000927A4(*(void *)(v21 + 56) + 40 * v9, (uint64_t)v30);
    *(void *)&long long v29 = v12;
    *((void *)&v29 + 1) = v11;
    long long v26 = v29;
    v27[0] = v30[0];
    v27[1] = v30[1];
    uint64_t v28 = v31;
    sub_1000927A4((uint64_t)v27, (uint64_t)v22);
    sub_100098428(v22, (uint64_t)v23);
    uint64_t v14 = v24;
    uint64_t v13 = v25;
    sub_100097048(v23, v24);
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 56);
    swift_bridgeObjectRetain();
    v7 |= v15(v14, v13);
    sub_10008FBC4((uint64_t)v23);
    Swift::Bool result = sub_100087A1C((uint64_t)&v26, (uint64_t *)&unk_1003214A8);
  }
  int64_t v18 = v16 + 5;
  if (v18 >= v20)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    return v7 & 1;
  }
  unint64_t v17 = *(void *)(v19 + 8 * v18);
  if (v17)
  {
    int64_t v6 = v18;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v6 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v6 >= v20) {
      goto LABEL_25;
    }
    unint64_t v17 = *(void *)(v19 + 8 * v6);
    ++v18;
    if (v17) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000CC37C(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    int64_t v16 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_1000927A4(*(void *)(a2 + 56) + 40 * i, (uint64_t)v22);
    *(void *)&long long v21 = v18;
    *((void *)&v21 + 1) = v17;
    v19[0] = v21;
    v19[1] = v22[0];
    v19[2] = v22[1];
    uint64_t v20 = v23;
    swift_bridgeObjectRetain();
    sub_1000CC9D4((uint64_t)&v24, (uint64_t)v19);
    if (v2)
    {
      swift_bridgeObjectRelease();
      sub_100087A1C((uint64_t)v19, (uint64_t *)&unk_1003214A8);
      return swift_release();
    }
    uint64_t result = sub_100087A1C((uint64_t)v19, (uint64_t *)&unk_1003214A8);
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v8) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    if (!v14) {
      break;
    }
LABEL_17:
    unint64_t v7 = (v14 - 1) & v14;
  }
  int64_t v15 = v10 + 1;
  if (v10 + 1 >= v8) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v10 + 2;
  if (v10 + 2 >= v8) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v10 + 3;
  if (v10 + 3 >= v8) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v10 + 4;
  if (v10 + 4 >= v8)
  {
LABEL_26:
    swift_release();
    return v24;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_16:
    int64_t v10 = v15;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000CC57C(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a2 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    int64_t v16 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    sub_1000927A4(*(void *)(a2 + 56) + 40 * i, (uint64_t)v22);
    *(void *)&long long v21 = v17;
    *((void *)&v21 + 1) = v18;
    v19[0] = v21;
    v19[1] = v22[0];
    v19[2] = v22[1];
    uint64_t v20 = v23;
    swift_bridgeObjectRetain();
    sub_1000CD200((uint64_t)&v24, (uint64_t)v19);
    if (v2)
    {
      swift_bridgeObjectRelease();
      sub_100087A1C((uint64_t)v19, (uint64_t *)&unk_1003214A8);
      return swift_release();
    }
    uint64_t result = sub_100087A1C((uint64_t)v19, (uint64_t *)&unk_1003214A8);
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v8) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            goto LABEL_25;
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8)
  {
LABEL_25:
    swift_release();
    return v24;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t KTCloudRecords.pendingRecords()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    unint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    sub_1000927A4(*(void *)(v2 + 56) + 40 * i, (uint64_t)v21);
    *(void *)&long long v20 = v16;
    *((void *)&v20 + 1) = v15;
    v18[0] = v20;
    v18[1] = v21[0];
    v18[2] = v21[1];
    uint64_t v19 = v22;
    swift_bridgeObjectRetain();
    sub_1000CC9D4((uint64_t)&v23, (uint64_t)v18);
    sub_100087A1C((uint64_t)v18, (uint64_t *)&unk_1003214A8);
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v8++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v8 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    if (!v12) {
      break;
    }
LABEL_17:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v8 + 1;
  if (v8 + 1 >= v7) {
    goto LABEL_24;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v8 + 2;
  if (v8 + 2 >= v7) {
    goto LABEL_24;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v8 + 3;
  if (v8 + 3 >= v7) {
    goto LABEL_24;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12) {
    goto LABEL_16;
  }
  int64_t v13 = v8 + 4;
  if (v8 + 4 >= v7)
  {
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v23;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
LABEL_16:
    int64_t v8 = v13;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_17;
    }
  }
LABEL_26:
  __break(1u);
  swift_bridgeObjectRelease();
  sub_100087A1C((uint64_t)v18, (uint64_t *)&unk_1003214A8);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1000CC9D4(uint64_t a1, uint64_t a2)
{
  sub_1000927A4(a2 + 16, (uint64_t)v15);
  sub_100098428(v15, (uint64_t)v16);
  uint64_t v2 = v17;
  uint64_t v3 = v18;
  sub_100097048(v16, v17);
  unint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
  v13[2] = v16;
  uint64_t v5 = sub_1000CCC64((void (*)(uint64_t *__return_ptr, id *))sub_1000D2B24, (uint64_t)v13, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1000CCE04((unint64_t)v5, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000D2098);
  if (qword_10032B220 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100080F90(v6, (uint64_t)qword_10032B228);
  swift_bridgeObjectRetain();
  int64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)unint64_t v9 = 136315138;
    sub_10008E0A0(0, &qword_100321980);
    uint64_t v10 = Array.description.getter();
    uint64_t v19 = sub_10008D114(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "prepare pending records %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return sub_10008FBC4((uint64_t)v16);
}

void *sub_1000CCC64(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  unint64_t v14 = (unint64_t)_swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v7 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * i);
      os_log_type_t v8 = v7;
      uint64_t v9 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v13 = v7;
      a1(&v12, &v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return (void *)swift_bridgeObjectRelease();
      }

      if (v12)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v9 == v5)
      {
        swift_bridgeObjectRelease();
        return (void *)v14;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000CCE04(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t *v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t KTCloudRecords.deletedRecords()()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v7) {
      goto LABEL_23;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v15);
    ++v9;
    if (!v16)
    {
      int64_t v9 = v15 + 1;
      if (v15 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v16 = *(void *)(v3 + 8 * v9);
      if (!v16)
      {
        int64_t v9 = v15 + 2;
        if (v15 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v16 = *(void *)(v3 + 8 * v9);
        if (!v16)
        {
          int64_t v9 = v15 + 3;
          if (v15 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v16 = *(void *)(v3 + 8 * v9);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v11);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    sub_1000927A4(*(void *)(v2 + 56) + 40 * v11, (uint64_t)v21);
    *(void *)&long long v20 = v14;
    *((void *)&v20 + 1) = v13;
    v18[0] = v20;
    v18[1] = v21[0];
    v18[2] = v21[1];
    uint64_t v19 = v22;
    swift_bridgeObjectRetain();
    sub_1000CD200((uint64_t)&v23, (uint64_t)v18);
    uint64_t result = sub_100087A1C((uint64_t)v18, (uint64_t *)&unk_1003214A8);
  }
  int64_t v17 = v15 + 4;
  if (v17 >= v7)
  {
LABEL_23:
    swift_release();
    swift_bridgeObjectRelease();
    return (uint64_t)v23;
  }
  unint64_t v16 = *(void *)(v3 + 8 * v17);
  if (v16)
  {
    int64_t v9 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_23;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v9);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000CD200(uint64_t a1, uint64_t a2)
{
  sub_1000927A4(a2 + 16, (uint64_t)v13);
  sub_100098428(v13, (uint64_t)v14);
  uint64_t v2 = v15;
  uint64_t v3 = v16;
  sub_100097048(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  unint64_t v4 = swift_bridgeObjectRetain();
  sub_1000CCE04(v4, (uint64_t (*)(uint64_t, void, unint64_t))sub_1000D22B8);
  if (qword_10032B220 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100080F90(v5, (uint64_t)qword_10032B228);
  swift_bridgeObjectRetain();
  unint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)unint64_t v8 = 136315138;
    sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
    uint64_t v9 = Array.description.getter();
    sub_10008D114(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "prepare deleted records %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return sub_10008FBC4((uint64_t)v14);
}

Class sub_1000CD464(char *a1, uint64_t a2, void (*a3)(void *, uint64_t), unint64_t *a4)
{
  os_log_type_t v7 = &a1[OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types];
  swift_beginAccess();
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = a1;
  swift_bridgeObjectRetain();
  a3(_swiftEmptyArrayStorage, v8);

  swift_bridgeObjectRelease();
  sub_10008E0A0(0, a4);
  v10.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v10.super.isa;
}

uint64_t KTCloudRecords.cloudKitZones()()
{
  sub_100080E08(&qword_100320D40);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100287920;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_zoneID);
  *(void *)(v1 + 32) = v2;
  uint64_t v5 = v1;
  specialized Array._endMutation()();
  id v3 = v2;
  return v5;
}

uint64_t sub_1000CD678(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_100097048(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  uint64_t v6 = v5;
  sub_1000927A4((uint64_t)a1, (uint64_t)v8);
  swift_beginAccess();
  sub_1000CD730((uint64_t)v8, v4, v6);
  return swift_endAccess();
}

uint64_t sub_1000CD730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_100098428((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    sub_1000D1988(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100087A1C(a1, &qword_1003214B8);
    sub_1000D1220(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return sub_100087A1C((uint64_t)v9, &qword_1003214B8);
  }
}

uint64_t sub_1000CD808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  os_log_type_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_types);
  uint64_t result = swift_beginAccess();
  uint64_t v9 = *v7;
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1000D07EC(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100089E40);
    if (v11)
    {
      sub_1000927A4(*(void *)(v9 + 56) + 40 * v10, a3);
    }
    else
    {
      *(void *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

Swift::Bool __swiftcall KTCloudRecords.updatedRecord(withCkrecord:)(CKRecord withCkrecord)
{
  uint64_t v3 = CKRecord.recordType.getter();
  unint64_t v5 = v4;
  (*(void (**)(long long *__return_ptr))((swift_isaMask & *v1) + 0x190))(&v14);
  if (v15)
  {
    swift_bridgeObjectRelease();
    sub_100098428(&v14, (uint64_t)v16);
    uint64_t v6 = v17;
    uint64_t v7 = v18;
    sub_100097048(v16, v17);
    char v8 = (*(uint64_t (**)(Class, uint64_t, uint64_t))(v7 + 24))(withCkrecord.super.isa, v6, v7);
    sub_10008FBC4((uint64_t)v16);
  }
  else
  {
    sub_100087A1C((uint64_t)&v14, &qword_1003214B8);
    if (qword_10032B220 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100080F90(v9, (uint64_t)qword_10032B228);
    swift_bridgeObjectRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      v16[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v14 = sub_10008D114(v3, v5, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "no store for ck record of type %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    char v8 = 0;
  }
  return v8 & 1;
}

Swift::Void __swiftcall KTCloudRecords.deleteRecord(withCkrecord:)(CKRecord withCkrecord)
{
  uint64_t v3 = CKRecord.recordType.getter();
  (*(void (**)(long long *__return_ptr, uint64_t))((swift_isaMask & *v1) + 0x190))(&v6, v3);
  swift_bridgeObjectRelease();
  if (v7)
  {
    sub_100098428(&v6, (uint64_t)v8);
    uint64_t v4 = v8[4];
    sub_100097048(v8, v8[3]);
    id v5 = [(objc_class *)withCkrecord.super.isa recordID];
    (*(void (**)(void))(v4 + 32))();

    sub_10008FBC4((uint64_t)v8);
  }
  else
  {
    sub_100087A1C((uint64_t)&v6, &qword_1003214B8);
  }
}

Swift::Void __swiftcall KTCloudRecords.deleteRecordID(withCkrecordID:)(CKRecordID withCkrecordID)
{
  swift_beginAccess();
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_1000D262C(v1, (void (*)(uint64_t, uint64_t, unsigned char *))sub_1000D07E8);
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall KTCloudRecords.recordUpdateCloudState(withType:records:newState:)(Swift::String withType, Swift::OpaquePointer records, Swift::String newState)
{
  object = newState._object;
  uint64_t countAndFlagsBits = newState._countAndFlagsBits;
  (*(void (**)(long long *__return_ptr, uint64_t, void *))((swift_isaMask & *v3) + 0x190))(&v9, withType._countAndFlagsBits, withType._object);
  if (v10)
  {
    sub_100098428(&v9, (uint64_t)v11);
    uint64_t v7 = v12;
    uint64_t v8 = v13;
    sub_100097048(v11, v12);
    (*(void (**)(void *, uint64_t, void *, uint64_t, uint64_t))(v8 + 64))(records._rawValue, countAndFlagsBits, object, v7, v8);
    sub_10008FBC4((uint64_t)v11);
  }
  else
  {
    sub_100087A1C((uint64_t)&v9, &qword_1003214B8);
  }
}

uint64_t sub_1000CE0DC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  if (a2 >> 60 != 15)
  {
    sub_10008E0A0(0, (unint64_t *)&unk_1003214C0);
    sub_10008E0A0(0, &qword_100321980);
    sub_100080C58(a1, a2);
    uint64_t v2 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
    sub_10008FCD4(a1, a2);
  }
  return v2;
}

uint64_t sub_1000CE1A4(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = self;
  id v9 = 0;
  id v3 = a1;
  id v4 = [v2 archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v9];
  id v5 = v9;
  if (!v4)
  {
    uint64_t v7 = v5;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    return 0;
  }
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void __swiftcall KTCloudRecords.updateCloudRecordsOperation(_:context:)(KTGroupOperation *__return_ptr retstr, KTOperationDependencies *_, NSManagedObjectContext context)
{
  type metadata accessor for KTUpdateCloudStorageOperation();
  KTUpdateCloudStorageOperation.__allocating_init(deps:source:context:)((uint64_t)_, (uint64_t)v3, (uint64_t)context.super.isa);
}

void *KTCloudRecords.evaluateKTLogData(_:application:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = v3;
  uint64_t v9 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x130))();
  if (!v4)
  {
    uint64_t v10 = v9;
    if (qword_10032B220 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100080F90(v11, (uint64_t)qword_10032B228);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v30 = a2;
      uint64_t v14 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315394;
      sub_10008E0A0(0, (unint64_t *)&qword_1003214D0);
      swift_bridgeObjectRetain();
      os_log_type_t type = v13;
      uint64_t v15 = Array.description.getter();
      uint64_t v31 = a3;
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      sub_10008D114(v15, v17, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_100080E08(&qword_1003214D8);
      uint64_t v18 = Dictionary.description.getter();
      unint64_t v20 = v19;
      swift_bridgeObjectRelease();
      uint64_t v21 = v18;
      a3 = v31;
      sub_10008D114(v21, v20, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, type, "KTCloudRecords: evaluateKTLogData: optInRecords: %s uriToSMT: %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v30;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    type metadata accessor for KTOptIOValidator();
    swift_bridgeObjectRetain();
    uint64_t v22 = KTOptIOValidator.__allocating_init(optInRecords:uriToSMT:)(v10, a1);
    char v23 = (*(uint64_t (**)(uint64_t, uint64_t))(**(void **)((char *)v5
                                                                    + OBJC_IVAR____TtC13transparencyd14KTCloudRecords_cloudOptIn)
                                                      + 312))(a2, a3);
    if (v23 != 2)
    {
      uint64_t v24 = v23 & 1;
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        id v27 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v27 = 67109120;
        LODWORD(v32) = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "KTCloudRecords: intented state %{BOOL}d", v27, 8u);
        swift_slowDealloc();
      }

      (*(void (**)(uint64_t))((swift_isaMask & *v22) + 0xA0))(v24);
    }
    id v3 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & *v22) + 0xB8))(a2, a3);
  }
  return v3;
}

BOOL KTCloudRecords.enforceCKOptInRecords.getter()
{
  id v3 = &type metadata for TransparencyFeatureFlags;
  unint64_t v4 = sub_1000CA17C();
  v2[0] = 1;
  char v0 = isFeatureEnabled(_:)();
  sub_10008FBC4((uint64_t)v2);
  return (v0 & 1) == 0;
}

void KTCloudRecords.init()()
{
}

id KTCloudRecords.__deallocating_deinit()
{
  return sub_1000D0750(type metadata accessor for KTCloudRecords);
}

uint64_t sub_1000CEB28(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v17 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_100080C58(a1, a2);
      sub_100080C58(a1, a2);
      break;
    default:
      break;
  }
  Data.Iterator.init(_:at:)();
  sub_100080CB0(a1, a2);
  sub_1000D27FC((unint64_t *)&unk_1003214E0, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
  dispatch thunk of IteratorProtocol.next()();
  if (v22)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0xE000000000000000;
    long long v18 = xmmword_1002856F0;
    do
    {
      char v9 = v21;
      sub_100080E08((uint64_t *)&unk_1003206A0);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = v18;
      *(void *)(v10 + 56) = &type metadata for UInt8;
      *(void *)(v10 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v10 + 32) = v9;
      uint64_t v11 = String.init(format:_:)();
      os_log_type_t v13 = v12;
      uint64_t v19 = v7;
      unint64_t v20 = v8;
      swift_bridgeObjectRetain();
      v14._uint64_t countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v7 = v19;
      unint64_t v8 = v20;
      dispatch thunk of IteratorProtocol.next()();
    }
    while (v22 != 1);
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v4);
  return v7;
}

uint64_t sub_1000CEDA8()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000CEDB8()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1000CEE00(char a1)
{
  id v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*sub_1000CEE4C())()
{
  return j_j__swift_endAccess;
}

uint64_t variable initialization expression of KTCloudRecordsCache.uriVRFHash()
{
  return 0;
}

uint64_t sub_1000CEEB4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  sub_10008FC6C(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_1000CEF10(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash);
  swift_beginAccess();
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  *uint64_t v5 = a1;
  v5[1] = a2;
  return sub_10008FCD4(v6, v7);
}

uint64_t (*sub_1000CEF70())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000CEFCC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000CF018(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash);
  swift_beginAccess();
  void *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000CF06C())()
{
  return j_j__swift_endAccess;
}

id KTCloudRecordsCache.__allocating_init(records:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  v3[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries] = 0;
  uint64_t v4 = (uint64_t *)&v3[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash];
  *(_OWORD *)&v3[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash] = xmmword_1002880D0;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records] = a1;
  swift_beginAccess();
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  *(_OWORD *)uint64_t v4 = xmmword_1002880D0;
  unint64_t v7 = v3;
  swift_unknownObjectRetain();
  sub_10008FCD4(v5, v6);
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash] = sub_1000C9878((uint64_t)_swiftEmptyArrayStorage);

  v10.receiver = v7;
  v10.super_class = v1;
  id v8 = [super init];
  swift_unknownObjectRelease();
  return v8;
}

id KTCloudRecordsCache.init(records:)(uint64_t a1)
{
  id v1 = sub_1000D2844(a1);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t KTCloudRecordsCache.setWithUriVRFHash(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, unint64_t))((swift_isaMask & *v2) + 0x90);
  sub_100080C58(a1, a2);
  v5(a1, a2);
  unint64_t v6 = sub_1000C9878((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v7 = *(uint64_t (**)(unint64_t))((swift_isaMask & *v2) + 0xA8);

  return v7(v6);
}

id KTCloudRecordsCache.disableKTSyncabledKVSStore.getter()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records) disableKTSyncabledKVSStore];
}

id KTCloudRecordsCache.fetchSyncedLoggableData(byPushToken:registrationData:)()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v3 = Data._bridgeToObjectiveC()().super.isa;
  id v4 = [v1 fetchSyncedLoggableDataWithPushToken:isa tbsRegistrationData:v3];

  return v4;
}

void KTCloudRecordsCache.fetchSyncedLoggableData(byDeviceIdHash:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA0);
  uint64_t v6 = sub_100080C58(a1, a2);
  if (*(void *)(v5(v6) + 16))
  {
    sub_1000D07EC(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000D0880);
    if (v7)
    {
LABEL_24:
      swift_bridgeObjectRetain();
LABEL_25:
      swift_bridgeObjectRelease();
      sub_100080CB0(a1, a2);
      return;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_100080CB0(a1, a2);
  if ((*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x70))(v8))
  {
    if (qword_10032B220 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100080F90(v9, (uint64_t)qword_10032B228);
    objc_super v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "already cached, skipping refetch", v12, 2u);
      swift_slowDealloc();
    }

LABEL_22:
    uint64_t v24 = sub_100080C58(a1, a2);
    if (!*(void *)(v5(v24) + 16)) {
      goto LABEL_25;
    }
    sub_1000D07EC(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000D0880);
    if ((v25 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x78))(1);
  if (qword_10032B220 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100080F90(v13, (uint64_t)qword_10032B228);
  Swift::String v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "pulling all devices from CloudRecords for this account", v16, 2u);
    swift_slowDealloc();
  }

  id v17 = [*(id *)((char *)v2 + OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records) cloudKTDevices];
  sub_10008E0A0(0, &qword_100321510);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_15;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    os_log_type_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "no records", v28, 2u);
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v19) {
    goto LABEL_28;
  }
LABEL_15:
  long long v29 = v5;
  unint64_t v20 = *(void (**)(void))((swift_isaMask & *v2) + 0xE0);
  if (v19 >= 1)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v19; ++i)
    {
      if ((v18 & 0xC000000000000001) != 0) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v22 = *(id *)(v18 + 8 * i + 32);
      }
      char v23 = v22;
      v20();
    }
    swift_bridgeObjectRelease_n();
    uint64_t v5 = v29;
    goto LABEL_22;
  }
  __break(1u);
}

id sub_1000CFBB8(void *a1)
{
  uint64_t v3 = type metadata accessor for Data.Iterator();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v75 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (unint64_t *)((char *)&v58 - v7);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id result = [a1 deviceID];
  if (result)
  {
    Swift::String v14 = result;
    uint64_t v74 = v4;
    uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    (*(void (**)(void *))((swift_isaMask & *v1) + 0xE8))(a1);
    if (qword_10032B220 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_100080F90(v9, (uint64_t)qword_10032B228);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v18, v9);
    sub_100080C58(v15, v17);
    id v19 = a1;
    sub_100080C58(v15, v17);
    id v20 = v19;
    char v21 = Logger.logObject.getter();
    int v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      id v73 = v8;
      int v65 = v22;
      os_log_t v66 = v21;
      char v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      v81[0] = v64;
      uint64_t v70 = v23;
      *(_DWORD *)char v23 = 136315394;
      switch(v17 >> 62)
      {
        case 1uLL:
        case 2uLL:
          sub_100080C58(v15, v17);
          sub_100080C58(v15, v17);
          break;
        default:
          break;
      }
      id v71 = v20;
      unint64_t v67 = v12;
      uint64_t v62 = v10;
      uint64_t v63 = v9;
      Data.Iterator.init(_:at:)();
      uint64_t v72 = v15;
      unint64_t v69 = v17;
      sub_100080CB0(v15, v17);
      sub_1000D27FC((unint64_t *)&unk_1003214E0, (void (*)(uint64_t))&type metadata accessor for Data.Iterator);
      uint64_t v68 = v3;
      dispatch thunk of IteratorProtocol.next()();
      if (v80)
      {
        uint64_t v24 = 0;
        unint64_t v25 = 0xE000000000000000;
        uint64_t v26 = v68;
        os_log_type_t v27 = v73;
      }
      else
      {
        uint64_t v24 = 0;
        unint64_t v25 = 0xE000000000000000;
        long long v76 = xmmword_1002856F0;
        uint64_t v26 = v68;
        os_log_type_t v27 = v73;
        do
        {
          char v28 = v79;
          sub_100080E08((uint64_t *)&unk_1003206A0);
          uint64_t v29 = swift_allocObject();
          *(_OWORD *)(v29 + 16) = v76;
          *(void *)(v29 + 56) = &type metadata for UInt8;
          *(void *)(v29 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v29 + 32) = v28;
          uint64_t v30 = String.init(format:_:)();
          uint64_t v32 = v31;
          uint64_t v77 = v24;
          unint64_t v78 = v25;
          swift_bridgeObjectRetain();
          v33._uint64_t countAndFlagsBits = v30;
          v33._object = v32;
          String.append(_:)(v33);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v24 = v77;
          unint64_t v25 = v78;
          dispatch thunk of IteratorProtocol.next()();
        }
        while (v80 != 1);
      }
      uint64_t v34 = v70;
      uint64_t v35 = *(void (**)(unint64_t *, uint64_t))(v74 + 8);
      v74 += 8;
      v35(v27, v26);
      uint64_t v77 = sub_10008D114(v24, v25, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = v72;
      unint64_t v37 = v69;
      sub_100080CB0(v72, v69);
      sub_100080CB0(v36, v37);
      *((_WORD *)v34 + 6) = 2080;
      id v38 = [v71 deviceIdHash];
      if (v38)
      {
        int64_t v39 = v38;
        uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v42 = v41;

        uint64_t v43 = v75;
        switch(v42 >> 62)
        {
          case 1uLL:
          case 2uLL:
            sub_100080C58(v40, v42);
            sub_100080C58(v40, v42);
            break;
          default:
            break;
        }
        id v61 = (void (*)(char *, uint64_t))v35;
        id v73 = &v78;
        Data.Iterator.init(_:at:)();
        uint64_t v60 = v40;
        unint64_t v59 = v42;
        sub_100080CB0(v40, v42);
        dispatch thunk of IteratorProtocol.next()();
        if (v80)
        {
          uint64_t v44 = 0;
          unint64_t v45 = 0xE000000000000000;
          uint64_t v48 = v68;
        }
        else
        {
          uint64_t v44 = 0;
          unint64_t v45 = 0xE000000000000000;
          long long v76 = xmmword_1002856F0;
          uint64_t v48 = v68;
          do
          {
            char v49 = v79;
            sub_100080E08((uint64_t *)&unk_1003206A0);
            uint64_t v50 = swift_allocObject();
            *(_OWORD *)(v50 + 16) = v76;
            *(void *)(v50 + 56) = &type metadata for UInt8;
            *(void *)(v50 + 64) = &protocol witness table for UInt8;
            *(unsigned char *)(v50 + 32) = v49;
            uint64_t v51 = String.init(format:_:)();
            uint64_t v53 = v52;
            uint64_t v77 = v44;
            unint64_t v78 = v45;
            swift_bridgeObjectRetain();
            v54._uint64_t countAndFlagsBits = v51;
            uint64_t v43 = v75;
            v54._object = v53;
            String.append(_:)(v54);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v44 = v77;
            unint64_t v45 = v78;
            dispatch thunk of IteratorProtocol.next()();
          }
          while (v80 != 1);
        }
        v61(v43, v48);
        sub_100080CB0(v60, v59);
        uint64_t v47 = v62;
        uint64_t v46 = v63;
        unint64_t v37 = v69;
      }
      else
      {
        uint64_t v44 = 0;
        unint64_t v45 = 0xE000000000000000;
        uint64_t v47 = v62;
        uint64_t v46 = v63;
      }
      unint64_t v55 = v70;
      uint64_t v77 = sub_10008D114(v44, v45, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      id v56 = v71;

      swift_bridgeObjectRelease();
      os_log_t v57 = v66;
      _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v65, "Adding device %s with hash: %s", v55, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100080CB0(v72, v37);
      return (id)(*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v67, v46);
    }
    else
    {
      sub_100080CB0(v15, v17);
      sub_100080CB0(v15, v17);
      sub_100080CB0(v15, v17);

      return (id)(*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
  }
  return result;
}

uint64_t sub_1000D03E8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88))();
  if (v5 >> 60 != 15)
  {
    uint64_t v6 = result;
    unint64_t v7 = v5;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [a1 computeHashesForSalt:isa];

    id v9 = [a1 deviceIdHash];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      Swift::String v14 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA0);
      uint64_t v15 = sub_100080C58(v11, v13);
      uint64_t v16 = v14(v15);
      if (*(void *)(v16 + 16)
        && (uint64_t v17 = sub_1000D07EC(v11, v13, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000D0880), (v18 & 1) != 0))
      {
        id v19 = *(void **)(*(void *)(v16 + 56) + 8 * v17);
        swift_bridgeObjectRetain();
      }
      else
      {
        id v19 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease();
      sub_100080CB0(v11, v13);
      uint64_t v29 = (uint64_t)v19;
      id v20 = a1;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v21 = v29;
      int v22 = *(uint64_t (**)(unsigned char *))((swift_isaMask & *v2) + 0xB0);
      sub_100080C58(v11, v13);
      char v23 = (void (*)(unsigned char *, void))v22(v28);
      unint64_t v25 = v24;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v27 = *v25;
      *unint64_t v25 = 0x8000000000000000;
      sub_1000D1B30(v21, v11, v13, isUniquelyReferenced_nonNull_native);
      *unint64_t v25 = v27;
      swift_bridgeObjectRelease();
      sub_100080CB0(v11, v13);
      v23(v28, 0);
      sub_10008FCD4(v6, v7);
      return sub_100080CB0(v11, v13);
    }
    else
    {
      return sub_10008FCD4(v6, v7);
    }
  }
  return result;
}

void KTCloudRecordsCache.init()()
{
}

id KTCloudRecordsCache.__deallocating_deinit()
{
  return sub_1000D0750(type metadata accessor for KTCloudRecordsCache);
}

id sub_1000D0750(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t sub_1000D07EC(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  Swift::Int v7 = Hasher._finalize()();

  return a4(a1, a2, v7);
}

unint64_t sub_1000D0880(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    uint64_t v10 = ~v5;
    unint64_t v80 = HIDWORD(a1);
    size_t v85 = HIDWORD(a1) - (int)a1;
    uint64_t v86 = ~v5;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v84 = v11;
    unint64_t v87 = a2 >> 62;
    uint64_t v82 = v3 + 64;
    uint64_t v83 = (int)a1;
    uint64_t v81 = a1 >> 32;
    uint64_t v78 = (a1 >> 32) - (int)a1;
    unint64_t v88 = a2 >> 62;
    size_t __n = BYTE6(a2);
    while (1)
    {
      unint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_100080C58(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_121;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v88)
      {
        case 1uLL:
          size_t v18 = v85;
          if (v84) {
            goto LABEL_122;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_123;
        case 3uLL:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_118;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_118:
              sub_100080CB0(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_124;
                }
                uint64_t v26 = __DataStorage._bytes.getter();
                if (v26)
                {
                  uint64_t v27 = v26;
                  uint64_t v28 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v14, v28)) {
                    goto LABEL_126;
                  }
                  uint64_t v29 = (const void *)(v27 + (int)v14 - v28);
                }
                else
                {
                  uint64_t v29 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v10 = v86;
                if (!v87)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v29) {
                    goto LABEL_154;
                  }
                  int v50 = memcmp(v29, __s1, __n);
LABEL_102:
                  sub_100080CB0(v14, v13);
                  uint64_t v4 = v82;
                  if (!v50) {
                    return v6;
                  }
                  break;
                }
                if (v87 == 1)
                {
                  if (v81 < v83) {
                    goto LABEL_135;
                  }
                  swift_retain();
                  uint64_t v46 = (char *)__DataStorage._bytes.getter();
                  if (v46)
                  {
                    uint64_t v47 = __DataStorage._offset.getter();
                    if (__OFSUB__(v83, v47)) {
                      goto LABEL_142;
                    }
                    v46 += v83 - v47;
                  }
                  uint64_t v48 = __DataStorage._length.getter();
                  size_t v49 = v78;
                  if (v48 < v78) {
                    size_t v49 = v48;
                  }
                  if (!v29) {
                    goto LABEL_147;
                  }
                  if (!v46) {
                    goto LABEL_148;
                  }
                  int v50 = memcmp(v29, v46, v49);
                  sub_100080CB0(a1, v8);
                  goto LABEL_102;
                }
                uint64_t v68 = *(void *)(a1 + 16);
                uint64_t v77 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v69 = __DataStorage._bytes.getter();
                if (v69)
                {
                  uint64_t v70 = v69;
                  uint64_t v71 = __DataStorage._offset.getter();
                  if (__OFSUB__(v68, v71)) {
                    goto LABEL_141;
                  }
                  uint64_t v72 = (const void *)(v70 + v68 - v71);
                }
                else
                {
                  uint64_t v72 = 0;
                }
                if (__OFSUB__(v77, v68)) {
                  goto LABEL_136;
                }
                uint64_t v73 = __DataStorage._length.getter();
                if (v73 >= v77 - v68) {
                  size_t v74 = v77 - v68;
                }
                else {
                  size_t v74 = v73;
                }
                if (!v29) {
                  goto LABEL_155;
                }
                unint64_t v8 = a2;
                if (!v72) {
                  goto LABEL_156;
                }
                int v45 = memcmp(v29, v72, v74);
LABEL_115:
                swift_release();
                swift_release();
                sub_100080CB0(v14, v13);
                uint64_t v4 = v82;
                uint64_t v10 = v86;
                if (!v45) {
                  return v6;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_125;
                  }
                  uint64_t v34 = (const void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v34 = 0;
                }
                __DataStorage._length.getter();
                if (v87)
                {
                  if (v87 == 1)
                  {
                    if (v81 < v83) {
                      goto LABEL_129;
                    }
                    swift_retain();
                    unint64_t v41 = (char *)__DataStorage._bytes.getter();
                    if (v41)
                    {
                      uint64_t v42 = __DataStorage._offset.getter();
                      if (__OFSUB__(v83, v42)) {
                        goto LABEL_140;
                      }
                      v41 += v83 - v42;
                    }
                    uint64_t v43 = __DataStorage._length.getter();
                    size_t v44 = v78;
                    if (v43 < v78) {
                      size_t v44 = v43;
                    }
                    if (!v34) {
                      goto LABEL_145;
                    }
                    if (!v41) {
                      goto LABEL_146;
                    }
                    int v45 = memcmp(v34, v41, v44);
                    sub_100080CB0(a1, v8);
                  }
                  else
                  {
                    uint64_t v62 = *(void *)(a1 + 16);
                    uint64_t v76 = *(void *)(a1 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v63 = (char *)__DataStorage._bytes.getter();
                    if (v63)
                    {
                      uint64_t v64 = __DataStorage._offset.getter();
                      if (__OFSUB__(v62, v64)) {
                        goto LABEL_139;
                      }
                      v63 += v62 - v64;
                    }
                    BOOL v21 = __OFSUB__(v76, v62);
                    int64_t v65 = v76 - v62;
                    if (v21) {
                      goto LABEL_134;
                    }
                    uint64_t v66 = __DataStorage._length.getter();
                    if (v66 >= v65) {
                      size_t v67 = v65;
                    }
                    else {
                      size_t v67 = v66;
                    }
                    if (!v34) {
                      goto LABEL_152;
                    }
                    unint64_t v8 = a2;
                    if (!v63) {
                      goto LABEL_153;
                    }
                    int v45 = memcmp(v34, v63, v67);
                    swift_release();
                    swift_release();
                  }
                }
                else
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v34) {
                    goto LABEL_151;
                  }
                  int v45 = memcmp(v34, __s1, __n);
                }
                goto LABEL_115;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v87) {
                  goto LABEL_46;
                }
                if (v87 == 1)
                {
                  if (v81 < v83) {
                    goto LABEL_128;
                  }
                  swift_retain();
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (!v35) {
                    goto LABEL_144;
                  }
                  uint64_t v23 = v35;
                  uint64_t v36 = __DataStorage._offset.getter();
                  uint64_t v25 = v83 - v36;
                  if (__OFSUB__(v83, v36)) {
                    goto LABEL_133;
                  }
LABEL_41:
                  uint64_t v37 = __DataStorage._length.getter();
                  if (v37 >= v78) {
                    size_t v38 = v78;
                  }
                  else {
                    size_t v38 = v37;
                  }
                  int v39 = memcmp(__s1, (const void *)(v23 + v25), v38);
                  sub_100080CB0(a1, v8);
                  sub_100080CB0(v14, v13);
                  uint64_t v10 = v86;
                  if (!v39) {
                    return v6;
                  }
                }
                else
                {
                  uint64_t v57 = *(void *)(a1 + 16);
                  uint64_t v58 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v53 = (char *)__DataStorage._bytes.getter();
                  if (v53)
                  {
                    uint64_t v59 = __DataStorage._offset.getter();
                    if (__OFSUB__(v57, v59)) {
                      goto LABEL_138;
                    }
                    v53 += v57 - v59;
                  }
                  BOOL v21 = __OFSUB__(v58, v57);
                  int64_t v55 = v58 - v57;
                  if (v21) {
                    goto LABEL_131;
                  }
                  uint64_t v56 = __DataStorage._length.getter();
                  if (!v53) {
                    goto LABEL_150;
                  }
LABEL_83:
                  if (v56 >= v55) {
                    size_t v60 = v55;
                  }
                  else {
                    size_t v60 = v56;
                  }
                  int v61 = memcmp(__s1, v53, v60);
                  swift_release();
                  swift_release();
                  sub_100080CB0(v14, v13);
                  unint64_t v8 = a2;
                  uint64_t v10 = v86;
                  if (!v61) {
                    return v6;
                  }
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v87)
                {
LABEL_46:
                  __int16 __s2 = a1;
                  char v91 = BYTE2(a1);
                  char v92 = BYTE3(a1);
                  char v93 = v80;
                  char v94 = BYTE5(a1);
                  char v95 = BYTE6(a1);
                  char v96 = HIBYTE(a1);
                  __int16 v97 = v8;
                  char v98 = BYTE2(v8);
                  char v99 = BYTE3(v8);
                  char v100 = BYTE4(v8);
                  char v101 = BYTE5(v8);
                  int v40 = memcmp(__s1, &__s2, __n);
                  sub_100080CB0(v14, v13);
                  if (!v40) {
                    return v6;
                  }
                  break;
                }
                if (v87 == 1)
                {
                  if (v81 < v83) {
                    goto LABEL_127;
                  }
                  swift_retain();
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_144:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
                    JUMPOUT(0x1000D11F0);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  uint64_t v25 = v83 - v24;
                  if (__OFSUB__(v83, v24)) {
                    goto LABEL_132;
                  }
                  goto LABEL_41;
                }
                uint64_t v51 = *(void *)(a1 + 16);
                uint64_t v52 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_137;
                  }
                  v53 += v51 - v54;
                }
                BOOL v21 = __OFSUB__(v52, v51);
                int64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_130;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_149;
                }
                goto LABEL_83;
            }
          }
          else
          {
LABEL_7:
            sub_100080CB0(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

double sub_1000D1220@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000D07EC(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100089E40);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000D1CF4();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_100098428((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    sub_100095A1C(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_1000D1354(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100080E08(&qword_1003215F0);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    uint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
    if (v37)
    {
      sub_100098428(v25, (uint64_t)v38);
    }
    else
    {
      sub_1000927A4((uint64_t)v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *uint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = sub_100098428(v38, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D167C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100080E08((uint64_t *)&unk_1003215E0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v32 = v2;
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v33 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v33 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v32;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v33 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v33 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    long long v34 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      sub_100080C58(v34, *(void *)(*(void *)(v5 + 48) + 16 * v21 + 8));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      long long v19 = v34;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      long long v19 = v34;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v18) = v19;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v32;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
  if (v31 >= 64) {
    bzero(v23, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v31;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

uint64_t sub_1000D1988(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1000D07EC(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100089E40);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000D1CF4();
      goto LABEL_7;
    }
    sub_1000D1354(v15, a4 & 1);
    uint64_t v21 = sub_1000D07EC(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_100089E40);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    sub_10008FBC4(v19);
    return sub_100098428(a1, v19);
  }
LABEL_13:
  sub_100095EF8(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000D1B30(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1000D07EC(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000D0880);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1000D1EE0();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1000D167C(v15, a4 & 1);
  uint64_t v21 = sub_1000D07EC(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1000D0880);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  unint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  *uint64_t v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return sub_100080C58(a2, a3);
}

void *sub_1000D1CF4()
{
  id v1 = v0;
  sub_100080E08(&qword_1003215F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  BOOL v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_1000927A4(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_100098428(v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    id v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1000D1EE0()
{
  id v1 = v0;
  sub_100080E08((uint64_t *)&unk_1003215E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 48) + v18);
    *(_OWORD *)(*(void *)(v4 + 48) + v18) = v19;
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    sub_100080C58(v19, *((unint64_t *)&v19 + 1));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000D2098(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100082CA4((unint64_t *)&unk_100321610, &qword_100321608);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100080E08(&qword_100321608);
          unint64_t v12 = sub_1000D24D8(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10008E0A0(0, &qword_100321980);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000D22B8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100082CA4(&qword_100321600, &qword_1003215F8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_100080E08(&qword_1003215F8);
          unint64_t v12 = sub_1000D2544(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*sub_1000D24D8(void (**a1)(id *), unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000D25AC(v6, a2, a3);
  return sub_1000D2540;
}

void (*sub_1000D2544(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000BB66C(v6, a2, a3);
  return sub_1000D2540;
}

void (*sub_1000D25AC(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_1000D2BA0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000D262C(uint64_t a1, void (*a2)(uint64_t, uint64_t, unsigned char *))
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v7) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v20 + 8 * v15);
    ++v9;
    if (!v16)
    {
      int64_t v9 = v15 + 1;
      if (v15 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v20 + 8 * v9);
      if (!v16)
      {
        int64_t v9 = v15 + 2;
        if (v15 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v16 = *(void *)(v20 + 8 * v9);
        if (!v16)
        {
          int64_t v9 = v15 + 3;
          if (v15 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v16 = *(void *)(v20 + 8 * v9);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    unint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    sub_1000927A4(*(void *)(a1 + 56) + 40 * v11, (uint64_t)v19);
    v18[0] = v13;
    v18[1] = v14;
    swift_bridgeObjectRetain();
    a2(v13, v14, v19);
    uint64_t result = sub_100087A1C((uint64_t)v18, (uint64_t *)&unk_1003214A8);
  }
  int64_t v17 = v15 + 4;
  if (v17 >= v7) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v20 + 8 * v17);
  if (v16)
  {
    int64_t v9 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v9 >= v7) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v20 + 8 * v9);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000D27FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id sub_1000D2844(uint64_t a1)
{
  v1[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_cachedAllEntries] = 0;
  uint64_t v2 = (uint64_t *)&v1[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash];
  *(_OWORD *)&v1[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_uriVRFHash] = xmmword_1002880D0;
  *(void *)&v1[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_records] = a1;
  swift_beginAccess();
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  *(_OWORD *)uint64_t v2 = xmmword_1002880D0;
  uint64_t v5 = v1;
  swift_unknownObjectRetain();
  sub_10008FCD4(v3, v4);
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd19KTCloudRecordsCache_deviceIDHash] = sub_1000C9878((uint64_t)_swiftEmptyArrayStorage);

  v7.receiver = v5;
  v7.super_class = (Class)type metadata accessor for KTCloudRecordsCache();
  return [super init];
}

uint64_t type metadata accessor for KTCloudRecordsCache()
{
  return self;
}

unint64_t sub_1000D2948()
{
  unint64_t result = qword_100321518;
  if (!qword_100321518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321518);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for KTCloudRecordsError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000D2A3CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for KTCloudRecordsError()
{
  return &type metadata for KTCloudRecordsError;
}

uint64_t sub_1000D2A74(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = a3[3];
  uint64_t v6 = a3[4];
  sub_100097048(a3, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v5, v6);
}

unint64_t sub_1000D2AD0()
{
  unint64_t result = qword_1003215D8;
  if (!qword_1003215D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003215D8);
  }
  return result;
}

uint64_t sub_1000D2B24@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void **)(v2 + 16);
  uint64_t v5 = *a1;
  uint64_t v6 = v4[3];
  uint64_t v7 = v4[4];
  sub_100097048(v4, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 72))(v5, v6, v7);
  *a2 = result;
  return result;
}

uint64_t *sub_1000D2BA4()
{
  return &qword_100321630;
}

uint64_t sub_1000D2BB0()
{
  swift_beginAccess();
  uint64_t v0 = qword_100321630;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000D2C7C(uint64_t a1, void *a2)
{
  qword_100321630 = a1;
  off_100321638 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000D2D3C())()
{
  return j__swift_endAccess;
}

id sub_1000D2D94()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps);
}

uint64_t sub_1000D2DA4()
{
  uint64_t result = (uint64_t)[*(id *)(v0 + OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps) cloudRecords];
  if (result)
  {
    uint64_t v2 = (void *)result;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v4 = Data._bridgeToObjectiveC()().super.isa;
    id v5 = [v2 fetchSyncedLoggableDataWithPushToken:isa tbsRegistrationData:v4];
    swift_unknownObjectRelease();

    if (v5)
    {

      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id sub_1000D2E70()
{
  id v1 = [*(id *)&v0[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps] cloudRecords];
  swift_unknownObjectRelease();
  if (v1)
  {
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = v0;
    uint64_t v3 = v0;
    NSString v4 = String._bridgeToObjectiveC()();
    void v7[4] = sub_1000D34DC;
    void v7[5] = v2;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    _DWORD v7[2] = sub_1000B0440;
    v7[3] = &unk_1002BF2A8;
    id v5 = _Block_copy(v7);
    id v1 = [self named:v4 withBlockTakingSelf:v5];

    _Block_release(v5);
    swift_release();
  }
  return v1;
}

uint64_t sub_1000D2FB0(char *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = __chkstk_darwin(v2);
  size_t v44 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v37 - v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = _swiftEmptyArrayStorage;
  Logger.init(subsystem:category:)();
  id v43 = *(id *)&a1[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps];
  id v9 = [v43 smDataStore];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = v8;
  int64_t v55 = sub_1000D3FBC;
  uint64_t v56 = v10;
  aBlock = _NSConcreteStackBlock;
  uint64_t v52 = 1107296256;
  uint64_t v42 = &v53;
  uint64_t v53 = sub_1000D3C94;
  uint64_t v54 = &unk_1002BF320;
  unint64_t v11 = _Block_copy(&aBlock);
  unint64_t v12 = a1;
  v37[1] = v8;
  swift_retain();
  swift_release();
  [v9 fetchDeviceSignature:0 complete:v11];
  _Block_release(v11);
  swift_unknownObjectRelease();
  swift_beginAccess();
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v41 = type metadata accessor for KTFixupRegistrationUpload.CloudState();
    uint64_t v15 = *(void *)(v41 - 8);
    unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v45 = v2;
    int64_t v17 = (uint64_t *)(v13 + v16);
    uint64_t v40 = *(void *)(v15 + 72);
    uint64_t v39 = v3 + 16;
    uint64_t v38 = v4 + 7;
    void v37[2] = v3 + 32;
    v37[0] = v13;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v18 = *v17;
      unint64_t v46 = v17[1];
      id v50 = [v43 smDataStore];
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      Class v48 = Data._bridgeToObjectiveC()().super.isa;
      Class v47 = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v19 = v14;
      unint64_t v21 = v44;
      uint64_t v20 = v45;
      (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v44, v7, v45);
      unint64_t v22 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      unint64_t v23 = v7;
      unint64_t v24 = (v38 + v22) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v25 = v3;
      uint64_t v26 = swift_allocObject();
      unint64_t v27 = v21;
      uint64_t v28 = v19;
      (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(v26 + v22, v27, v20);
      uint64_t v29 = (uint64_t *)(v26 + v24);
      uint64_t v7 = v23;
      unint64_t v30 = v46;
      uint64_t *v29 = v18;
      v29[1] = v30;
      int64_t v55 = sub_1000D40B8;
      uint64_t v56 = v26;
      aBlock = _NSConcreteStackBlock;
      uint64_t v52 = 1107296256;
      uint64_t v53 = sub_1000C30DC;
      uint64_t v54 = &unk_1002BF370;
      uint64_t v31 = _Block_copy(&aBlock);
      sub_100080C58(v18, v30);
      swift_release();
      Class v32 = isa;
      Class v34 = v47;
      Class v33 = v48;
      [v50 uploadedDeviceSignature:isa tbs:v48 uploadedAt:v47 complete:v31];
      int64_t v35 = v31;
      uint64_t v3 = v25;
      _Block_release(v35);
      swift_unknownObjectRelease();

      int64_t v17 = (uint64_t *)((char *)v17 + v40);
      uint64_t v14 = v28 - 1;
    }
    while (v14);
    swift_bridgeObjectRelease();
    uint64_t v2 = v45;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  return swift_release();
}

uint64_t sub_1000D34A4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D34DC()
{
  return sub_1000D2FB0(*(char **)(v0 + 16));
}

uint64_t sub_1000D34E4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for KTFixupRegistrationUpload.CloudState();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t result = __chkstk_darwin(v9);
  unint64_t v46 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v13 = swift_bridgeObjectRetain();
    sub_1000D3914(v13);
    unint64_t v15 = v14;
    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v16 = result;
      if (result) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v16)
      {
LABEL_4:
        if (v16 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v17 = 0;
        uint64_t v40 = v8;
        uint64_t v41 = (unint64_t *)(a3 + 16);
        unint64_t v47 = v15 & 0xC000000000000001;
        char v37 = (void (**)(char *, uint64_t))(v10 + 8);
        uint64_t v38 = (void (**)(char *, char *, uint64_t))(v10 + 16);
        uint64_t v39 = v9;
        uint64_t v44 = v16;
        unint64_t v45 = v15;
        do
        {
          if (v47) {
            id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v18 = *(id *)(v15 + 8 * v17 + 32);
          }
          uint64_t v19 = v18;
          id v20 = [v18 tbsKTIDSRegistrationData];
          uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v23 = v22;

          id v24 = [v19 pushToken];
          if (v24)
          {
            uint64_t v25 = v24;
            uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v28 = v27;

            if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t))((swift_isaMask & *a2)
                                                                                                  + 0x58))(v26, v28, v21, v23) & 1) != 0)
            {
              uint64_t v29 = v46;
              Date.init()();
              (*v38)((char *)v8 + *(int *)(v43 + 24), v29, v9);
              uint64_t *v8 = v26;
              v8[1] = v28;
              void v8[2] = v21;
              v8[3] = v23;
              unint64_t v30 = v41;
              swift_beginAccess();
              unint64_t v31 = *v30;
              sub_100080C58(v26, v28);
              sub_100080C58(v21, v23);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              unint64_t *v30 = v31;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                unint64_t v31 = sub_1000D42DC(0, *(void *)(v31 + 16) + 1, 1, v31);
                *uint64_t v41 = v31;
              }
              unint64_t v34 = *(void *)(v31 + 16);
              unint64_t v33 = *(void *)(v31 + 24);
              if (v34 >= v33 >> 1)
              {
                unint64_t v31 = sub_1000D42DC(v33 > 1, v34 + 1, 1, v31);
                *uint64_t v41 = v31;
              }
              *(void *)(v31 + 16) = v34 + 1;
              uint64_t v35 = v31
                  + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))
                  + *(void *)(v42 + 72) * v34;
              uint64_t v8 = v40;
              sub_1000D4584((uint64_t)v40, v35);
              swift_endAccess();
              sub_100080CB0(v21, v23);
              sub_100080CB0(v26, v28);
              uint64_t v9 = v39;
              (*v37)(v46, v39);
            }
            else
            {
              sub_100080CB0(v21, v23);
              sub_100080CB0(v26, v28);
            }
            uint64_t v16 = v44;
            unint64_t v15 = v45;
          }
          else
          {
            sub_100080CB0(v21, v23);
          }

          ++v17;
        }
        while (v16 != v17);
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

void sub_1000D3914(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v27 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = 0;
  unint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v29 = a1;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v25 = a1 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v28 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v26 = (void (**)(char *, char *, uint64_t))(v3 + 32);
  uint64_t v13 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  unint64_t v14 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if ((v11 & v9) != 0) {
    goto LABEL_27;
  }
LABEL_6:
  int64_t v15 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v15 < v28)
    {
      unint64_t v16 = *(void *)(v25 + 8 * v15);
      ++v8;
      if (v16) {
        goto LABEL_21;
      }
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v28) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v25 + 8 * v8);
      if (v16) {
        goto LABEL_21;
      }
      int64_t v8 = v15 + 2;
      if (v15 + 2 >= v28) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v25 + 8 * v8);
      if (v16) {
        goto LABEL_21;
      }
      int64_t v8 = v15 + 3;
      if (v15 + 3 >= v28) {
        goto LABEL_28;
      }
      unint64_t v16 = *(void *)(v25 + 8 * v8);
      if (v16)
      {
LABEL_21:
        unint64_t v12 = (v16 - 1) & v16;
        for (unint64_t i = __clz(__rbit64(v16)) + (v8 << 6); ; unint64_t i = v23 | (v8 << 6))
        {
          id v19 = *(id *)(*(void *)(v29 + 56) + 8 * i);
          id v20 = [v19 uploadedAt];
          if (v20)
          {
            uint64_t v21 = v20;
            unint64_t v22 = v27;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            (*v26)(v7, v22, v2);
            (*v13)(v7, 0, 1, v2);
            if ((*v14)(v7, 1, v2) != 1)
            {
              sub_1000ABA80((uint64_t)v7);

              if (!v12) {
                goto LABEL_6;
              }
              goto LABEL_27;
            }
          }
          else
          {
            (*v13)(v7, 1, 1, v2);
          }
          sub_1000ABA80((uint64_t)v7);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          if (!v12) {
            goto LABEL_6;
          }
LABEL_27:
          unint64_t v23 = __clz(__rbit64(v12));
          v12 &= v12 - 1;
        }
      }
      int64_t v17 = v15 + 4;
      if (v17 < v28)
      {
        unint64_t v16 = *(void *)(v25 + 8 * v17);
        if (v16)
        {
          int64_t v8 = v17;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v8 = v17 + 1;
          if (__OFADD__(v17, 1)) {
            goto LABEL_30;
          }
          if (v8 >= v28) {
            break;
          }
          unint64_t v16 = *(void *)(v25 + 8 * v8);
          ++v17;
          if (v16) {
            goto LABEL_21;
          }
        }
      }
    }
LABEL_28:
    swift_release();
    return;
  }
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_1000D3C94(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_1000D4544();
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000D3D38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D3D48()
{
  return swift_release();
}

id sub_1000D3D94(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return [super init];
}

id sub_1000D3DE4(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC13transparencyd25KTFixupRegistrationUpload_deps] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for KTFixupRegistrationUpload();
  return [super init];
}

uint64_t type metadata accessor for KTFixupRegistrationUpload()
{
  return self;
}

void sub_1000D3EA0()
{
}

id sub_1000D3F00()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTFixupRegistrationUpload();
  return [super dealloc];
}

uint64_t sub_1000D3F44()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D3F7C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D3FBC(uint64_t a1)
{
  return sub_1000D34E4(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for KTFixupRegistrationUpload.CloudState()
{
  uint64_t result = qword_10032B4C0;
  if (!qword_10032B4C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000D4010()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100080CB0(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));

  return _swift_deallocObject(v0, v6 + 16, v5);
}

void sub_1000D40B8()
{
  uint64_t v1 = *(void *)(type metadata accessor for Logger() - 8);
  unint64_t v2 = (*(void *)(v1 + 64)
      + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v3 = *(void *)(v0 + v2);
  unint64_t v4 = *(void *)(v0 + v2 + 8);
  sub_100080C58(v3, v4);
  sub_100080C58(v3, v4);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v8 = sub_1000CEB28(v3, v4);
    sub_10008D114(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100080CB0(v3, v4);
    sub_100080CB0(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fixed up record for %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_100080CB0(v3, v4);
    sub_100080CB0(v3, v4);
  }
}

uint64_t sub_1000D42DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100080E08((uint64_t *)&unk_1003216E0);
  uint64_t v10 = *(void *)(type metadata accessor for KTFixupRegistrationUpload.CloudState() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = j__malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  long long v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for KTFixupRegistrationUpload.CloudState() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v18 >= a4 + v17 + *(void *)(v16 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000D45E8(0, v8, v18, a4);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

unint64_t sub_1000D4544()
{
  unint64_t result = qword_1003216D8;
  if (!qword_1003216D8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003216D8);
  }
  return result;
}

uint64_t sub_1000D4584(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTFixupRegistrationUpload.CloudState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D45E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for KTFixupRegistrationUpload.CloudState() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000D4740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D4754);
}

uint64_t sub_1000D4754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1000D4810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D4824);
}

void *sub_1000D4824(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000D48D4()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000D497C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100087A78(v0, qword_10032B4D8);
  sub_100080F90(v0, (uint64_t)qword_10032B4D8);
  return Logger.init(transparencyCategory:)();
}

void *sub_1000D49DC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), uint64_t))(*(void *)v2 + 120);
  swift_retain();
  v6(a1, a2, sub_1000D4AF0, v5);
  swift_release();
  swift_beginAccess();
  uint64_t v7 = *(void **)(v5 + 16);
  id v8 = v7;
  swift_release();
  return v7;
}

uint64_t sub_1000D4AB8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000D4AF0(void *a1)
{
  if (a1)
  {
    id v2 = [a1 serverChangeToken];
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = (void **)(v1 + 16);
      uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v7 = v6;

      sub_10008E0A0(0, (unint64_t *)&unk_1003214C0);
      sub_10008E0A0(0, &qword_1003218D0);
      uint64_t v8 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
      sub_100080CB0(v5, v7);
      swift_beginAccess();
      uint64_t v9 = *v4;
      *uint64_t v4 = (void *)v8;
    }
  }
  return 0;
}

uint64_t sub_1000D4BEC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a3;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(id), uint64_t))(*(void *)v3 + 120);
  id v9 = a3;
  v8(a1, a2, sub_1000D4CA4, v7);

  return swift_release();
}

uint64_t sub_1000D4CA4(id a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = self;
    id v14 = 0;
    id v5 = v3;
    id v6 = [v4 archivedDataWithRootObject:v5 requiringSecureCoding:1 error:&v14];
    id v7 = v14;
    if (!v6)
    {
      unint64_t v12 = v7;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      return 0;
    }
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    if (a1)
    {
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      [a1 setServerChangeToken:isa];

      sub_100080CB0(v8, v10);
    }
    else
    {

      sub_100080CB0(v8, v10);
    }
  }
  else if (a1)
  {
    [a1 setServerChangeToken:0];
  }
  return 1;
}

uint64_t sub_1000D4DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = *(void **)(v4 + 16);
  unint64_t v10 = (void *)swift_allocObject();
  v10[2] = a1;
  v10[3] = a2;
  void v10[4] = a3;
  void v10[5] = a4;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1000D5728;
  *(void *)(v11 + 24) = v10;
  void v14[4] = sub_100091FB0;
  v14[5] = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100091FD8;
  void v14[3] = &unk_1002BF438;
  unint64_t v12 = _Block_copy(v14);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v9 performBlockAndWait:v12];
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v9) {
    __break(1u);
  }
  return result;
}

void sub_1000D4F60(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v13 = swift_allocObject();
  long long v62 = xmmword_1002856F0;
  *(_OWORD *)(v13 + 16) = xmmword_1002856F0;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_1000A56A8();
  *(void *)(v13 + 32) = a1;
  *(void *)(v13 + 40) = a2;
  swift_bridgeObjectRetain();
  id v14 = NSPredicate.init(format:_:)();
  [v12 setPredicate:v14];

  uint64_t v64 = 0;
  id v61 = v12;
  id v15 = [v12 execute:&v64];
  id v16 = (id)v64;
  if (!v15)
  {
    id v33 = (id)v64;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v20 = 0;
    goto LABEL_18;
  }
  unint64_t v17 = v15;
  sub_10008E0A0(0, &qword_1003218C8);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v19 = v16;

  if (v18 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v20)
    {
LABEL_4:
      if (v20 < 1)
      {
        __break(1u);
      }
      else
      {
        uint64_t v57 = v11;
        uint64_t v58 = v9;
        uint64_t v59 = v8;
        uint64_t v60 = a4;
        uint64_t v56 = a3;
        uint64_t v21 = 0;
        unint64_t v22 = v18 & 0xC000000000000001;
        do
        {
          if (v22) {
            id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v23 = *(id *)(v18 + 8 * v21 + 32);
          }
          uint64_t v24 = v23;
          sub_100080E08(&qword_100320638);
          uint64_t v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = v62;
          ++v21;
          uint64_t v64 = 0x203A73656E6F7ALL;
          unint64_t v65 = 0xE700000000000000;
          id v26 = [v24 description];
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v29 = v28;

          v30._uint64_t countAndFlagsBits = v27;
          v30._object = v29;
          String.append(_:)(v30);
          swift_bridgeObjectRelease();
          uint64_t v31 = v64;
          unint64_t v32 = v65;
          *(void *)(v25 + 56) = &type metadata for String;
          *(void *)(v25 + 32) = v31;
          *(void *)(v25 + 40) = v32;
          print(_:separator:terminator:)();

          swift_bridgeObjectRelease();
        }
        while (v20 != v21);
        swift_bridgeObjectRelease();
        uint64_t v8 = v59;
        a4 = v60;
        uint64_t v9 = v58;
        if (v22)
        {
          uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          a3 = v56;
          uint64_t v11 = v57;
LABEL_15:
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
        uint64_t v11 = v57;
        if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v20 = (uint64_t)*(id *)(v18 + 32);
          a3 = v56;
          goto LABEL_15;
        }
      }
      __break(1u);
    }
  }
  else
  {
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_18:
  if (qword_10032B4D0 != -1) {
    swift_once();
  }
  uint64_t v34 = sub_100080F90(v8, (uint64_t)qword_10032B4D8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v34, v8);
  id v35 = (id)v20;
  uint64_t v36 = Logger.logObject.getter();
  int v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, (os_log_type_t)v37))
  {
    uint64_t v57 = v11;
    uint64_t v58 = v9;
    uint64_t v59 = v8;
    uint64_t v60 = a4;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v64 = v39;
    *(_DWORD *)uint64_t v38 = 136315650;
    uint64_t v56 = a3;
    *(void *)&long long v62 = v39;
    int v55 = v37;
    if (v20 && (id v40 = [v35 name]) != 0)
    {
      uint64_t v41 = v40;
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;
    }
    else
    {
      unint64_t v44 = 0xE100000000000000;
      uint64_t v42 = 45;
    }
    uint64_t v63 = sub_10008D114(v42, v44, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2080;
    if (v20)
    {
      unsigned int v46 = [v35 zoneCreated];
      BOOL v47 = v46 == 0;
      if (v46) {
        uint64_t v48 = 1702195828;
      }
      else {
        uint64_t v48 = 0x65736C6166;
      }
      if (v47) {
        unint64_t v49 = 0xE500000000000000;
      }
      else {
        unint64_t v49 = 0xE400000000000000;
      }
    }
    else
    {
      unint64_t v49 = 0xE100000000000000;
      uint64_t v48 = 45;
    }
    uint64_t v63 = sub_10008D114(v48, v49, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 22) = 2080;
    if (v20)
    {
      unsigned int v50 = [v35 zoneSubscribed];
      BOOL v51 = v50 == 0;
      if (v50) {
        uint64_t v52 = 1702195828;
      }
      else {
        uint64_t v52 = 0x65736C6166;
      }
      if (v51) {
        unint64_t v53 = 0xE500000000000000;
      }
      else {
        unint64_t v53 = 0xE400000000000000;
      }
    }
    else
    {
      unint64_t v53 = 0xE100000000000000;
      uint64_t v52 = 45;
    }
    a3 = v56;
    unint64_t v45 = v61;
    uint64_t v63 = sub_10008D114(v52, v53, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v55, "fetched zone: %s %s %s", (uint8_t *)v38, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v59);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    unint64_t v45 = v61;
  }
  a3(v20);
}

uint64_t sub_1000D56E8()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000D5728()
{
  sub_1000D4F60(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1000D5734()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D5744(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000D5754()
{
  return swift_release();
}

uint64_t sub_1000D575C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void **)(v5 + 16);
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = a1;
  void v11[3] = a2;
  void v11[4] = v5;
  void v11[5] = a3;
  v11[6] = a4;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_1000D5930;
  *(void *)(v12 + 24) = v11;
  void v15[4] = sub_1000984E8;
  v15[5] = v12;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  long long v15[2] = sub_100091FD8;
  v15[3] = &unk_1002BF4B0;
  uint64_t v13 = _Block_copy(v15);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  [v10 performBlockAndWait:v13];
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v10) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D58E8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000D5930()
{
  id v1 = (id)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = (void (*)(void))v0[5];
  uint64_t v5 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1002856F0;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000A56A8();
  *(void *)(v6 + 32) = v1;
  *(void *)(v6 + 40) = v2;
  swift_bridgeObjectRetain();
  id v7 = NSPredicate.init(format:_:)();
  [v5 setPredicate:v7];

  uint64_t v31 = 0;
  id v8 = [v5 execute:&v31];
  uint64_t v9 = v31;
  if (!v8)
  {
    uint64_t v15 = v3;
    id v16 = v31;
    _convertNSErrorToError(_:)();

    uint64_t v3 = v15;
    swift_willThrow();
    swift_errorRelease();
LABEL_11:
    id v17 = [objc_allocWithZone((Class)CloudZone) initWithContext:*(void *)(v3 + 16)];
    if (!v17)
    {
      v4();
      goto LABEL_23;
    }
    id v13 = v17;
    NSString v18 = String._bridgeToObjectiveC()();
    [v13 setName:v18];

    goto LABEL_13;
  }
  uint64_t v10 = v8;
  sub_10008E0A0(0, &qword_1003218C8);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v9;

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    id v13 = (id)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  id v13 = *(id *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v13)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_4:
  if ((v11 & 0xC000000000000001) != 0)
  {
    id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_26:
      swift_once();
      goto LABEL_15;
    }
    id v14 = *(id *)(v11 + 32);
  }
  id v13 = v14;
  swift_bridgeObjectRelease();
LABEL_13:
  id v1 = v13;
  char v19 = ((uint64_t (*)(id))v4)(v13);

  if ((v19 & 1) == 0)
  {

    goto LABEL_23;
  }
  if (qword_10032B4D0 != -1) {
    goto LABEL_26;
  }
LABEL_15:
  uint64_t v20 = type metadata accessor for Logger();
  sub_100080F90(v20, (uint64_t)qword_10032B4D8);
  uint64_t v21 = v1;
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v30 = v3;
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 138412290;
    uint64_t v31 = v21;
    uint64_t v25 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v29 = v13;

    uint64_t v3 = v30;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "saving zone: %@", v24, 0xCu);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v22 = v21;
  }

  id v26 = *(void **)(v3 + 16);
  uint64_t v31 = 0;
  if ([v26 save:&v31])
  {
    uint64_t v27 = v31;
  }
  else
  {
    int64_t v28 = v31;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v5 = v21;
  }
LABEL_23:
}

uint64_t sub_1000D5DC8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D5DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void **)(v3 + 16);
  id v7 = (void *)swift_allocObject();
  _DWORD v7[2] = a1;
  v7[3] = a2;
  void v7[4] = v3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1000D5F90;
  *(void *)(v8 + 24) = v7;
  void v11[4] = sub_1000984E8;
  void v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  void v11[2] = sub_100091FD8;
  void v11[3] = &unk_1002BF528;
  uint64_t v9 = _Block_copy(v11);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v6 performBlockAndWait:v9];
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000D5F50()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000D5F90()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  id v4 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v4 initWithEntityName:v5];

  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1002856F0;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000A56A8();
  *(void *)(v7 + 32) = v2;
  *(void *)(v7 + 40) = v1;
  swift_bridgeObjectRetain();
  uint64_t v8 = NSPredicate.init(format:_:)();
  [v6 setPredicate:v8];

  id v9 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v6];
  uint64_t v10 = *(void **)(v3 + 16);
  id v17 = 0;
  id v11 = [v10 executeRequest:v9 error:&v17];
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = v17;
  }
  else
  {
    id v14 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  id v17 = 0;
  if ([v10 save:&v17])
  {
    id v15 = v17;
  }
  else
  {
    id v16 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    id v6 = v9;
  }
}

uint64_t sub_1000D61A8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D61B8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000D61C8()
{
  return swift_retain();
}

void *sub_1000D61D8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase);
  id v2 = v1;
  return v1;
}

id sub_1000D6208()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics);
}

uint64_t KTZoneSetup.initialFetch.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch);
  swift_beginAccess();
  return *v1;
}

uint64_t KTZoneSetup.initialFetch.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*KTZoneSetup.initialFetch.modify())()
{
  return j__swift_endAccess;
}

void *sub_1000D639C(void *a1)
{
  id v2 = a1;
  return a1;
}

void *sub_1000D63C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  return a2;
}

uint64_t variable initialization expression of KTOptIOValidator.intendedState()
{
  return 2;
}

uint64_t sub_1000D63F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t sub_1000D63FC(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1000D6404(uint64_t a1, uint64_t a2, __int16 a3)
{
  return HIBYTE(a3);
}

uint64_t sub_1000D640C(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*sub_1000D6414())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

id KTZoneSetup.__allocating_init(ckdatabase:analytics:context:zoneCreate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v9 = objc_allocWithZone(v4);
  v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch] = 0;
  *(void *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase] = a1;
  *(void *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics] = a2;
  *(void *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate] = a4;
  type metadata accessor for KTCKZone();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  *(void *)&v9[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler] = v10;
  v12.receiver = v9;
  v12.super_class = v4;
  return [super init];
}

id KTZoneSetup.init(ckdatabase:analytics:context:zoneCreate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_initialFetch] = 0;
  *(void *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase] = a1;
  *(void *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics] = a2;
  *(void *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate] = a4;
  type metadata accessor for KTCKZone();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)&v4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler] = v6;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for KTZoneSetup();
  return [super init];
}

uint64_t type metadata accessor for KTCKZone()
{
  return self;
}

uint64_t type metadata accessor for KTZoneSetup()
{
  return self;
}

Swift::Void __swiftcall KTZoneSetup.groupStart()()
{
  id v4 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_ckdatabase];
  if (v4)
  {
    uint64_t v72 = swift_allocObject();
    id v64 = v4;
    *(void *)(v72 + 16) = sub_1000D7324((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v63 = v72 + 16;
    unint64_t v5 = *(void *)&v0[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneCreate];
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (!v6) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (!v6) {
        goto LABEL_11;
      }
    }
    size_t v67 = (void *)(**(void **)&v0[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler] + 112);
    uint64_t v68 = (void (*)(uint64_t, uint64_t, void (*)(void *), void *))*v67;
    if (v6 < 1)
    {
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v7 = 0;
    unint64_t v65 = v5 & 0xC000000000000001;
    unint64_t v8 = v5;
    do
    {
      if (v65) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(v5 + 8 * v7 + 32);
      }
      uint64_t v10 = v9;
      ++v7;
      id v11 = [v9 zoneName:v63];
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v14 = v13;

      id v15 = (void *)swift_allocObject();
      long long v15[2] = v12;
      v15[3] = v14;
      void v15[4] = v0;
      v15[5] = v72;
      void v15[6] = v10;
      swift_bridgeObjectRetain();
      id v16 = v0;
      swift_retain();
      id v17 = v10;
      v68(v12, v14, sub_1000D74C0, v15);

      swift_bridgeObjectRelease();
      swift_release();
      unint64_t v5 = v8;
    }
    while (v6 != v7);
LABEL_11:
    swift_bridgeObjectRelease_n();
    swift_beginAccess();
    if (!*(void *)(*(void *)v63 + 16))
    {
      if (qword_10032B4D0 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_100080F90(v28, (uint64_t)qword_10032B4D8);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.info.getter();
      uint64_t v31 = v64;
      if (os_log_type_enabled(v29, v30))
      {
        unint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "no zones to create", v32, 2u);
        swift_slowDealloc();
      }
      swift_release();
      goto LABEL_47;
    }
    uint64_t v1 = v0;
    size_t v67 = [objc_allocWithZone((Class)KTResultOperation) init];
    [v0 dependOnBeforeGroupFinished:];
    uint64_t v18 = swift_bridgeObjectRetain();
    unint64_t v2 = (unint64_t)sub_1000D7EDC(v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = swift_bridgeObjectRetain();
    unint64_t v3 = (unint64_t)sub_1000D80AC(v19);
    swift_bridgeObjectRelease();
    if (qword_10032B4D0 == -1)
    {
LABEL_13:
      uint64_t v20 = type metadata accessor for Logger();
      sub_100080F90(v20, (uint64_t)qword_10032B4D8);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315394;
        sub_10008E0A0(0, &qword_1003217C0);
        uint64_t v24 = Array.description.getter();
        sub_10008D114(v24, v25, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2080;
        sub_10008E0A0(0, &qword_1003217C8);
        uint64_t v26 = Array.description.getter();
        sub_10008D114(v26, v27, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "KTZoneSetup create %s subscribe: %s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      if (v2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v38) {
          goto LABEL_23;
        }
      }
      else if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_23:
        sub_10008E0A0(0, &qword_1003217A8);
        v74.value._rawValue = (void *)v2;
        v74.is_nil = 0;
        v33.super.super.super.super.Class isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v74, v76).super.super.super.super.isa;
        [(objc_class *)v33.super.super.super.super.isa setQualityOfService:25];
        uint64_t v34 = swift_allocObject();
        *(void *)(v34 + 16) = v1;
        *(void *)(v34 + 24) = v72;
        id v35 = v1;
        swift_retain();
        uint64_t v36 = v33.super.super.super.super.isa;
        CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter();
        *(void *)(swift_allocObject() + 16) = v35;
        id v37 = v35;
        CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter();

        goto LABEL_28;
      }
      swift_bridgeObjectRelease();
      v33.super.super.super.super.Class isa = 0;
LABEL_28:
      uint64_t v31 = v64;
      if (v3 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v45)
        {
          sub_10008E0A0(0, &qword_1003217B0);
          swift_bridgeObjectRetain();
          uint64_t v39 = (void *)_bridgeCocoaArray<A>(_:)();
          swift_bridgeObjectRelease_n();
          goto LABEL_31;
        }
      }
      else if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        sub_10008E0A0(0, &qword_1003217B0);
        swift_bridgeObjectRelease();
        uint64_t v39 = (void *)v3;
LABEL_31:
        sub_10008E0A0(0, &qword_1003217B8);
        v75.value._rawValue = v39;
        v75.is_nil = 0;
        v40.super.super.super.super.Class isa = CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(v75, v77).super.super.super.super.isa;
        [(objc_class *)v40.super.super.super.super.isa setQualityOfService:25];
        uint64_t v41 = swift_allocObject();
        *(void *)(v41 + 16) = v1;
        *(void *)(v41 + 24) = v72;
        id v42 = v1;
        swift_retain();
        unint64_t v43 = v40.super.super.super.super.isa;
        CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter();
        *(void *)(swift_allocObject() + 16) = v42;
        id v44 = v42;
        CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter();
        [(objc_class *)v43 addNullableDependency:v33.super.super.super.super.isa];

LABEL_35:
        unsigned int v46 = (void *)swift_allocObject();
        id v46[2] = v72;
        v46[3] = v1;
        v46[4] = v67;
        aBlock[4] = (uint64_t)sub_1000D9E08;
        void aBlock[5] = (uint64_t)v46;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000B8C74;
        aBlock[3] = (uint64_t)&unk_1002BF668;
        BOOL v47 = _Block_copy(aBlock);
        uint64_t v48 = self;
        id v49 = v1;
        swift_retain();
        unsigned int v50 = v67;
        uint64_t v29 = [v48 blockOperationWithBlock:v47];
        _Block_release(v47);
        swift_release();
        [v29 addNullableDependency:v33.super.super.super.super.isa];
        [v29 addNullableDependency:v40.super.super.super.super.isa];
        [v49 runBeforeGroupFinished:v29];
        if (v33.super.super.super.super.isa)
        {
          Class isa = v33.super.super.super.super.isa;
          uint64_t v52 = v33.super.super.super.super.isa;
          unint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v53, v54))
          {
            int v55 = (uint8_t *)swift_slowAlloc();
            uint64_t v66 = (void *)swift_slowAlloc();
            *(_DWORD *)int v55 = 138412290;
            aBlock[0] = (uint64_t)v52;
            uint64_t v70 = v29;
            uint64_t v56 = v40.super.super.super.super.isa;
            uint64_t v57 = v52;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v58 = isa;
            *uint64_t v66 = isa;

            v40.super.super.super.super.Class isa = v56;
            uint64_t v29 = v70;
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "create zone op %@", v55, 0xCu);
            sub_100080E08((uint64_t *)&unk_100320B30);
            uint64_t v31 = v64;
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            uint64_t v58 = isa;

            unint64_t v53 = v52;
          }

          [v31 addOperation:v52];
          v33.super.super.super.super.Class isa = v58;
        }
        if (v40.super.super.super.super.isa)
        {
          Class v71 = v33.super.super.super.super.isa;
          v33.super.super.super.super.Class isa = v40.super.super.super.super.isa;
          uint64_t v59 = Logger.logObject.getter();
          os_log_type_t v60 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v59, v60))
          {
            id v61 = (uint8_t *)swift_slowAlloc();
            uint64_t v69 = (CKModifySubscriptionsOperation *)swift_slowAlloc();
            *(_DWORD *)id v61 = 138412290;
            aBlock[0] = (uint64_t)v33.super.super.super.super.isa;
            long long v62 = v33.super.super.super.super.isa;
            uint64_t v31 = v64;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v69->super.super.super.super.Class isa = v40.super.super.super.super.isa;

            _os_log_impl((void *)&_mh_execute_header, v59, v60, "subscribe zone op %@", v61, 0xCu);
            sub_100080E08((uint64_t *)&unk_100320B30);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v59 = v33.super.super.super.super.isa;
          }

          [v31 addOperation:v33.super.super.super.super.isa];
          swift_release();
        }
        else
        {
          swift_release();
        }

LABEL_47:
        return;
      }
      swift_bridgeObjectRelease();
      v40.super.super.super.super.Class isa = 0;
      goto LABEL_35;
    }
LABEL_25:
    swift_once();
    goto LABEL_13;
  }
}

uint64_t sub_1000D72EC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1000D7324(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_1003218C0);
  unint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  id v4 = (char *)(a1 + 65);
  while (1)
  {
    uint64_t v5 = *(void *)(v4 - 33);
    uint64_t v6 = *(void *)(v4 - 25);
    uint64_t v7 = *(void **)(v4 - 17);
    unint64_t v8 = *(void **)(v4 - 9);
    char v9 = *(v4 - 1);
    char v10 = *v4;
    id v11 = v8;
    swift_bridgeObjectRetain();
    id v12 = v7;
    unint64_t result = sub_100089D6C(v5, v6);
    if (v14) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v15 = (uint64_t *)(v2[6] + 16 * result);
    *id v15 = v5;
    v15[1] = v6;
    uint64_t v16 = v2[7] + 24 * result;
    *(void *)uint64_t v16 = v7;
    *(void *)(v16 + 8) = v8;
    *(unsigned char *)(v16 + 16) = v9;
    *(unsigned char *)(v16 + 17) = v10;
    uint64_t v17 = v2[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v4 += 40;
    v2[2] = v19;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1000D7470()
{
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000D74C0(void *a1)
{
  uint64_t v3 = v1[2];
  unint64_t v2 = (void *)v1[3];
  id v4 = (void *)v1[4];
  uint64_t v5 = (void *)v1[6];
  uint64_t v6 = (uint64_t *)(v1[5] + 16);
  if (a1)
  {
    id v7 = a1;
    id v8 = [v7 serverChangeToken];
    if (v8)
    {
      char v9 = v8;
      uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;

      sub_100080CB0(v10, v12);
    }
    else
    {
      if (qword_10032B4D0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_100080F90(v17, (uint64_t)qword_10032B4D8);
      swift_bridgeObjectRetain_n();
      BOOL v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        id v44 = v7;
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        v51[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136315138;
        swift_bridgeObjectRetain();
        sub_10008D114(v3, (unint64_t)v2, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "initial fetch of zone %s (no serverChangeToken)", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v7 = v44;
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(uint64_t))((swift_isaMask & *v4) + 0x80))(1);
    }
    id v50 = 0;
    if ([v7 zoneCreated])
    {
      BOOL v27 = 1;
    }
    else
    {
      id v50 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:v5];
      BOOL v27 = v50 == 0;
    }
    Class isa = 0;
    if ([v7 zoneSubscribed] && v27)
    {
      if (qword_10032B4D0 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_100080F90(v28, (uint64_t)qword_10032B4D8);
      swift_bridgeObjectRetain_n();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        v51[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136315138;
        swift_bridgeObjectRetain();
        sub_10008D114(v3, (unint64_t)v2, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "zone already created/subscribed %s", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      sub_10008E0A0(0, &qword_1003217C8);
      swift_bridgeObjectRetain();
      id v32 = v5;
      v33._uint64_t countAndFlagsBits = v3;
      v33._object = v2;
      Class isa = CKRecordZoneSubscription.init(zoneID:subscriptionID:)((CKRecordZoneID)v32, v33).super.super.isa;
      if (qword_10032B4D0 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_100080F90(v34, (uint64_t)qword_10032B4D8);
      swift_bridgeObjectRetain_n();
      id v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v35, v36))
      {
        id v45 = v7;
        uint64_t v37 = swift_slowAlloc();
        uint64_t v38 = (void *)swift_slowAlloc();
        v51[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 136315650;
        swift_bridgeObjectRetain();
        sub_10008D114(v3, (unint64_t)v2, v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v37 + 12) = 2112;
        swift_beginAccess();
        if (v50) {
          id v39 = v50;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v38 = v50;
        *(_WORD *)(v37 + 22) = 2112;
        swift_beginAccess();
        if (isa) {
          CKModifySubscriptionsOperation v40 = isa;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v38[1] = isa;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "zone %s pending created %@ subscribed %@", (uint8_t *)v37, 0x20u);
        sub_100080E08((uint64_t *)&unk_100320B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        id v7 = v45;
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      swift_beginAccess();
      swift_beginAccess();
      swift_beginAccess();
      uint64_t v41 = isa;
      swift_bridgeObjectRetain();
      id v42 = v50;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v47 = *v6;
      *uint64_t v6 = 0x8000000000000000;
      sub_1000DAB30((uint64_t)v50, (uint64_t)isa, 514, v3, (uint64_t)v2, isUniquelyReferenced_nonNull_native);
      *uint64_t v6 = v47;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
    }
  }
  else
  {
    if (qword_10032B4D0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100080F90(v13, (uint64_t)qword_10032B4D8);
    swift_bridgeObjectRetain_n();
    char v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      unsigned int v46 = v5;
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      v51[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      swift_bridgeObjectRetain();
      sub_10008D114(v3, (unint64_t)v2, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "initial fetch of zone %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v5 = v46;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(uint64_t))((swift_isaMask & *v4) + 0x80))(1);
    id v21 = objc_allocWithZone((Class)CKRecordZone);
    swift_bridgeObjectRetain();
    id v22 = [v21 initWithZoneID:v5];
    sub_10008E0A0(0, &qword_1003217C8);
    swift_bridgeObjectRetain();
    id v23 = v5;
    v24._uint64_t countAndFlagsBits = v3;
    v24._object = v2;
    Class v25 = CKRecordZoneSubscription.init(zoneID:subscriptionID:)((CKRecordZoneID)v23, v24).super.super.isa;
    swift_beginAccess();
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v48 = *v6;
    *uint64_t v6 = 0x8000000000000000;
    sub_1000DAB30((uint64_t)v22, (uint64_t)v25, 514, v3, (uint64_t)v2, v26);
    *uint64_t v6 = v48;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
}

void *sub_1000D7EDC(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  unint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    char v14 = *(void **)(*(void *)(a1 + 56) + 24 * v10);
    if (v14)
    {
      id v15 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t result = (void *)specialized Array._endMutation()();
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000D80AC(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  unint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (v5)
  {
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v8 << 6);
LABEL_22:
    char v14 = *(void **)(*(void *)(a1 + 56) + 24 * v10 + 8);
    if (v14)
    {
      id v15 = v14;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t result = (void *)specialized Array._endMutation()();
    }
  }
  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v11);
  ++v8;
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 1;
  if (v11 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 2;
  if (v11 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12) {
    goto LABEL_21;
  }
  int64_t v8 = v11 + 3;
  if (v11 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1000D827C(void *a1, void *a2, char a3, char *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v13 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    unint64_t v53 = *(void **)&a4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
    swift_errorRetain();
    NSString v54 = String._bridgeToObjectiveC()();
    [v53 logResultForEvent:v54 hardFailure:0 result:0];

    if (qword_10032B4D0 != -1) {
      swift_once();
    }
    sub_100080F90(v10, (uint64_t)qword_10032B4D8);
    sub_10008FBAC(a2, 1);
    id v55 = a1;
    sub_10008FBAC(a2, 1);
    id v56 = v55;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = swift_slowAlloc();
      Swift::OpaquePointer_optional v76 = (void *)swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      v80[0] = v77;
      *(_DWORD *)uint64_t v59 = 136315394;
      id v60 = [v56 zoneName];
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v63 = v62;

      id v81 = (id)sub_10008D114(v61, v63, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v59 + 12) = 2112;
      swift_errorRetain();
      id v64 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v81 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Swift::OpaquePointer_optional v76 = v64;
      sub_10008FBB8(a2, 1);
      sub_10008FBB8(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "ModifyRecordZones perRecordZoneSaveBlock failed with %s: %@", (uint8_t *)v59, 0x16u);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10008FBB8(a2, 1);
      sub_10008FBB8(a2, 1);
    }

    uint64_t v73 = (void *)_convertErrorToNSError(_:)();
    [a4 setError:v73];

    sub_10008FBB8(a2, 1);
  }
  else
  {
    char v14 = (uint64_t *)(a5 + 16);
    id v15 = *(void **)&a4[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 logResultForEvent:v16 hardFailure:0 result:0];

    id v17 = [a1 zoneName];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v19;

    swift_beginAccess();
    uint64_t v21 = *v14;
    if (*(void *)(*v14 + 16) && (unint64_t v22 = sub_100089D6C(v18, v20), (v23 & 1) != 0))
    {
      uint64_t v77 = v11;
      uint64_t v24 = *(void *)(v21 + 56) + 24 * v22;
      char v26 = *(void **)(v24 + 8);
      __int16 v27 = *(unsigned __int8 *)(v24 + 17);
      id v81 = *(id *)v24;
      id v25 = v81;
      id v82 = v26;
      char v84 = v27;
      swift_endAccess();
      Swift::OpaquePointer_optional v76 = v26;
      id v28 = v25;
      swift_bridgeObjectRelease();
      char v83 = 1;
      id v29 = [a1 zoneName];
      uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;

      swift_beginAccess();
      id v32 = v28;
      Swift::String v33 = v76;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      char v79 = (void *)*v14;
      *char v14 = 0x8000000000000000;
      sub_1000DAB30((uint64_t)v25, (uint64_t)v26, (v27 << 8) | 1, v75, v31, isUniquelyReferenced_nonNull_native);
      *char v14 = (uint64_t)v79;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      if (qword_10032B4D0 != -1) {
        swift_once();
      }
      uint64_t v35 = sub_100080F90(v10, (uint64_t)qword_10032B4D8);
      uint64_t v36 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v13, v35, v10);
      id v37 = a1;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = swift_slowAlloc();
        Swift::OpaquePointer_optional v76 = (void *)swift_slowAlloc();
        char v79 = v76;
        *(_DWORD *)uint64_t v40 = 136315650;
        id v41 = [v37 zoneName];
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v44 = v43;

        v80[0] = sub_10008D114(v42, v44, (uint64_t *)&v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v40 + 12) = 2080;
        swift_beginAccess();
        uint64_t v45 = 1702195828;
        if (v83)
        {
          unint64_t v46 = 0xE400000000000000;
        }
        else
        {
          uint64_t v45 = 0x65736C6166;
          unint64_t v46 = 0xE500000000000000;
        }
        if (v83 == 2) {
          uint64_t v47 = 45;
        }
        else {
          uint64_t v47 = v45;
        }
        if (v83 == 2) {
          unint64_t v48 = 0xE100000000000000;
        }
        else {
          unint64_t v48 = v46;
        }
        uint64_t v78 = sub_10008D114(v47, v48, (uint64_t *)&v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v40 + 22) = 2080;
        uint64_t v49 = 0x65736C6166;
        if (v84)
        {
          uint64_t v49 = 1702195828;
          unint64_t v50 = 0xE400000000000000;
        }
        else
        {
          unint64_t v50 = 0xE500000000000000;
        }
        if (v84 == 2) {
          uint64_t v51 = 0;
        }
        else {
          uint64_t v51 = v49;
        }
        if (v84 == 2) {
          unint64_t v52 = 0xE000000000000000;
        }
        else {
          unint64_t v52 = v50;
        }
        uint64_t v78 = sub_10008D114(v51, v52, (uint64_t *)&v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "sub action %s: created: %s subscribed: %s", (uint8_t *)v40, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v77 + 8))(v13, v10);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v36 + 8))(v13, v10);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_endAccess();
      if (qword_10032B4D0 != -1) {
        swift_once();
      }
      sub_100080F90(v10, (uint64_t)qword_10032B4D8);
      id v65 = a1;
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        v80[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v68 = 136315138;
        id v69 = [v65 zoneName];
        uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v72 = v71;

        id v81 = (id)sub_10008D114(v70, v72, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "ModifyRecordZones perRecordZoneSaveBlock not found %s", v68, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
}

void sub_1000D8C3C(void *a1, void *a2, char a3)
{
  sub_1000D827C(a1, a2, a3 & 1, *(char **)(v3 + 16), *(void *)(v3 + 24));
}

void sub_1000D8C48(uint64_t a1, char a2)
{
}

void sub_1000D8C70(uint64_t a1, unint64_t a2, void *a3, char a4, char *a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v16 = (uint64_t *)(a6 + 16);
  if (a4)
  {
    id v32 = *(void **)&a5[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
    swift_errorRetain();
    NSString v33 = String._bridgeToObjectiveC()();
    uint64_t v34 = (void *)_convertErrorToNSError(_:)();
    [v32 logResultForEvent:v33 hardFailure:1 result:v34];

    if (qword_10032B4D0 != -1) {
      swift_once();
    }
    sub_100080F90(v12, (uint64_t)qword_10032B4D8);
    sub_10008FBAC(a3, 1);
    swift_bridgeObjectRetain();
    sub_10008FBAC(a3, 1);
    swift_bridgeObjectRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = swift_slowAlloc();
      unint64_t v88 = (void *)swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      v93[0] = v89;
      *(_DWORD *)uint64_t v37 = 136315394;
      uint64_t v90 = (uint64_t)a5;
      swift_bridgeObjectRetain();
      id v94 = (id)sub_10008D114(a1, a2, v93);
      os_log_t v87 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v37 + 12) = 2112;
      swift_errorRetain();
      uint64_t v38 = v16;
      unint64_t v39 = a2;
      uint64_t v40 = a1;
      id v41 = (void *)_swift_stdlib_bridgeErrorToNSError();
      id v94 = v41;
      a5 = (char *)v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v88 = v41;
      a1 = v40;
      a2 = v39;
      NSString v16 = v38;
      sub_10008FBB8(a3, 1);
      sub_10008FBB8(a3, 1);
      os_log_t v42 = v87;
      _os_log_impl((void *)&_mh_execute_header, v87, v36, "ModifySubscriptions perSubscriptionSaveBlock %s failed with %@", (uint8_t *)v37, 0x16u);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_10008FBB8(a3, 1);
      sub_10008FBB8(a3, 1);
    }
    v93[0] = (uint64_t)a3;
    swift_errorRetain();
    sub_100080E08(&qword_10031F4C0);
    type metadata accessor for CKError(0);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_55;
    }
    id v43 = v94;
    v93[0] = (uint64_t)v94;
    sub_1000A77E4(&qword_10031F9C0, type metadata accessor for CKError);
    _BridgedStoredNSError.code.getter();
    if (v94 == (id)26)
    {
      swift_beginAccess();
      uint64_t v44 = *v16;
      if (*(void *)(*v16 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v45 = sub_100089D6C(a1, a2);
        if (v46)
        {
          uint64_t v47 = *(void *)(v44 + 56) + 24 * v45;
          unint64_t v48 = *(void **)v47;
          uint64_t v49 = *(void **)(v47 + 8);
          swift_endAccess();
          id v50 = v49;
          id v51 = v48;
          uint64_t v90 = (uint64_t)a5;
          id v52 = v51;
          swift_bridgeObjectRelease();
          swift_beginAccess();
          swift_bridgeObjectRetain();
          id v53 = v52;
          id v54 = v50;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v92 = *v16;
          uint64_t *v16 = 0x8000000000000000;
          sub_1000DAB30((uint64_t)v48, (uint64_t)v49, 0, a1, a2, isUniquelyReferenced_nonNull_native);
          uint64_t *v16 = v92;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();

          id v43 = v53;
          a5 = (char *)v90;
          goto LABEL_54;
        }
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      goto LABEL_54;
    }
    swift_bridgeObjectRetain_n();
    id v43 = v43;
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = a1;
      uint64_t v62 = swift_slowAlloc();
      unint64_t v63 = (void *)swift_slowAlloc();
      v93[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 136315394;
      uint64_t v90 = (uint64_t)a5;
      swift_bridgeObjectRetain();
      uint64_t v92 = sub_10008D114(v61, a2, v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v62 + 12) = 2112;
      id v64 = v43;
      uint64_t v65 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v92 = v65;
      a5 = (char *)v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v63 = v65;

      _os_log_impl((void *)&_mh_execute_header, v59, v60, "ModifySubscriptions unhandled ckerror %s: %@", (uint8_t *)v62, 0x16u);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_55:
      uint64_t v86 = (void *)_convertErrorToNSError(_:)();
      [a5 setError:v86];

      sub_10008FBB8(a3, 1);
      return;
    }

    swift_bridgeObjectRelease_n();
LABEL_54:

    goto LABEL_55;
  }
  id v17 = *(void **)&a5[OBJC_IVAR____TtC13transparencyd11KTZoneSetup_analytics];
  NSString v18 = String._bridgeToObjectiveC()();
  [v17 logResultForEvent:v18 hardFailure:0 result:0];

  swift_beginAccess();
  uint64_t v19 = *v16;
  if (*(void *)(*v16 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v20 = sub_100089D6C(a1, a2);
    if (v21)
    {
      uint64_t v22 = *(void *)(v19 + 56) + 24 * v20;
      char v23 = *(void **)v22;
      uint64_t v24 = *(void **)(v22 + 8);
      LOWORD(v22) = *(_WORD *)(v22 + 16);
      id v94 = v23;
      id v95 = v24;
      __int16 v96 = v22;
      swift_endAccess();
      id v25 = v24;
      id v26 = v23;
      swift_bridgeObjectRelease();
      if (qword_10032B4D0 != -1) {
        swift_once();
      }
      uint64_t v89 = v13;
      uint64_t v90 = (uint64_t)v16;
      uint64_t v27 = a1;
      uint64_t v28 = sub_100080F90(v12, (uint64_t)qword_10032B4D8);
      swift_bridgeObjectRetain_n();
      unint64_t v88 = (void *)v28;
      id v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        v93[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v31 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v92 = sub_10008D114(a1, a2, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "ModifySubscriptions zone subscribed with %s", v31, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      HIBYTE(v96) = 1;
      id v66 = v94;
      id v67 = v95;
      __int16 v68 = v96;
      id v69 = (uint64_t *)v90;
      swift_beginAccess();
      id v70 = v67;
      swift_bridgeObjectRetain();
      id v71 = v66;
      char v72 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v92 = *v69;
      uint64_t *v69 = 0x8000000000000000;
      sub_1000DAB30((uint64_t)v66, (uint64_t)v67, v68 | 0x100, v27, a2, v72);
      uint64_t *v69 = v92;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      uint64_t v73 = v89;
      (*(void (**)(char *, void *, uint64_t))(v89 + 16))(v15, v88, v12);
      swift_bridgeObjectRetain_n();
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = v27;
        uint64_t v77 = swift_slowAlloc();
        uint64_t v90 = swift_slowAlloc();
        uint64_t v92 = v90;
        *(_DWORD *)uint64_t v77 = 136315650;
        swift_bridgeObjectRetain();
        v93[0] = sub_10008D114(v76, a2, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v77 + 12) = 2080;
        swift_beginAccess();
        uint64_t v78 = 1702195828;
        if ((v96 & 1) == 0) {
          uint64_t v78 = 0x65736C6166;
        }
        unint64_t v79 = 0xE400000000000000;
        if ((v96 & 1) == 0) {
          unint64_t v79 = 0xE500000000000000;
        }
        if (v96 == 2) {
          uint64_t v80 = 45;
        }
        else {
          uint64_t v80 = v78;
        }
        if (v96 == 2) {
          unint64_t v81 = 0xE100000000000000;
        }
        else {
          unint64_t v81 = v79;
        }
        uint64_t v91 = sub_10008D114(v80, v81, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v77 + 22) = 2080;
        uint64_t v82 = 0x65736C6166;
        if ((v96 & 0x100) != 0) {
          uint64_t v82 = 1702195828;
        }
        unint64_t v83 = 0xE500000000000000;
        if ((v96 & 0x100) != 0) {
          unint64_t v83 = 0xE400000000000000;
        }
        if (HIBYTE(v96) == 2) {
          uint64_t v84 = 45;
        }
        else {
          uint64_t v84 = v82;
        }
        if (HIBYTE(v96) == 2) {
          unint64_t v85 = 0xE100000000000000;
        }
        else {
          unint64_t v85 = v83;
        }
        uint64_t v91 = sub_10008D114(v84, v85, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "sub action %s: created: %s subscribed: %s", (uint8_t *)v77, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v73 + 8))(v15, v12);

      return;
    }
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  if (qword_10032B4D0 != -1) {
    swift_once();
  }
  sub_100080F90(v12, (uint64_t)qword_10032B4D8);
  swift_bridgeObjectRetain_n();
  id v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v56, v57))
  {
    os_log_type_t v58 = (uint8_t *)swift_slowAlloc();
    v93[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v58 = 136315138;
    swift_bridgeObjectRetain();
    id v94 = (id)sub_10008D114(a1, a2, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "ModifySubscriptions zone not found %s", v58, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_1000D9A60()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000D9AA0(uint64_t a1, unint64_t a2, void *a3, char a4)
{
  sub_1000D8C70(a1, a2, a3, a4 & 1, *(char **)(v4 + 16), *(void *)(v4 + 24));
}

void sub_1000D9AAC(uint64_t a1, char a2)
{
}

void sub_1000D9AD4(uint64_t a1, char a2, const char *a3, uint64_t (*a4)(void), const char *a5)
{
  if (a2)
  {
    uint64_t v13 = *(void **)(v5 + 16);
    swift_errorRetain();
    if (qword_10032B4D0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100080F90(v14, (uint64_t)qword_10032B4D8);
    swift_errorRetain();
    swift_errorRetain();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      NSString v18 = (void *)swift_slowAlloc();
      *(_DWORD *)id v17 = 138412290;
      swift_errorRetain();
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v18 = v21;
      sub_10008FBA0(a1, 1);
      sub_10008FBA0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, a3, v17, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10008FBA0(a1, 1);
      sub_10008FBA0(a1, 1);
    }

    uint64_t v19 = (void *)_convertErrorToNSError(_:)();
    [v13 setError:v19];

    sub_10008FBA0(a1, 1);
  }
  else
  {
    if (qword_10032B4D0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100080F90(v8, (uint64_t)qword_10032B4D8);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v9 = a4();
    if (os_log_type_enabled(oslog, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, a5, v10, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1000D9DC0()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000D9E08()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_beginAccess();
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1000DAED4(v3, (void (*)(uint64_t, uint64_t, void *, void *, uint64_t))sub_1000DA7E0);
  swift_bridgeObjectRelease();
  if (qword_10032B4D0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100080F90(v4, (uint64_t)qword_10032B4D8);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v7 = 134217984;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "zones updates %ld", v7, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  id v8 = [v1 operationQueue];
  [v8 addOperation:v2];
}

uint64_t sub_1000D9FF0(uint64_t a1, unint64_t a2, void *a3, void *a4, int a5, uint64_t a6)
{
  uint64_t v51 = a6;
  LODWORD(v6) = a5;
  uint64_t v53 = a1;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10032B4D0 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_100080F90(v10, (uint64_t)qword_10032B4D8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  id v15 = a4;
  uint64_t v49 = v10;
  id v16 = v15;
  id v52 = a3;
  id v17 = a3;
  id v18 = v16;
  id v19 = v17;
  id v20 = v18;
  swift_bridgeObjectRetain_n();
  id v21 = v19;
  id v22 = v20;
  id v23 = v21;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  int v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    int v44 = v6;
    int v45 = BYTE1(v6);
    uint64_t v27 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    uint64_t v55 = v47;
    *(_DWORD *)uint64_t v27 = 136315650;
    unint64_t v48 = a4;
    int v50 = v6;
    swift_bridgeObjectRetain();
    uint64_t v54 = sub_10008D114(v53, a2, &v55);
    int v46 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    BOOL v28 = (v50 & 1) == 0;
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v29 = 1702195828;
    if (v28) {
      uint64_t v29 = 0x65736C6166;
    }
    unint64_t v30 = 0xE400000000000000;
    if (v28) {
      unint64_t v30 = 0xE500000000000000;
    }
    if (v44 == 2) {
      uint64_t v31 = 45;
    }
    else {
      uint64_t v31 = v29;
    }
    if (v44 == 2) {
      unint64_t v32 = 0xE100000000000000;
    }
    else {
      unint64_t v32 = v30;
    }
    uint64_t v54 = sub_10008D114(v31, v32, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 22) = 2080;
    uint64_t v33 = 0x65736C6166;
    if ((v50 & 0x100) != 0) {
      uint64_t v33 = 1702195828;
    }
    unint64_t v34 = 0xE400000000000000;
    if ((v50 & 0x100) == 0) {
      unint64_t v34 = 0xE500000000000000;
    }
    if (v45 == 2) {
      uint64_t v35 = 45;
    }
    else {
      uint64_t v35 = v33;
    }
    if (v45 == 2) {
      unint64_t v6 = 0xE100000000000000;
    }
    else {
      unint64_t v6 = v34;
    }
    uint64_t v54 = sub_10008D114(v35, v6, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    LOWORD(v6) = v50;
    a4 = v48;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v46, "updating zone %s: created: %s subscribed: %s", (uint8_t *)v27, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v49);
  uint64_t v36 = *(void *)(v51 + OBJC_IVAR____TtC13transparencyd11KTZoneSetup_zoneHandler);
  uint64_t v37 = swift_allocObject();
  uint64_t v38 = v53;
  *(void *)(v37 + 16) = v52;
  *(void *)(v37 + 24) = a4;
  *(_WORD *)(v37 + 32) = v6;
  *(void *)(v37 + 40) = v38;
  *(void *)(v37 + 48) = a2;
  unint64_t v39 = *(void (**)(uint64_t, unint64_t, uint64_t (*)(id), uint64_t))(*(void *)v36 + 120);
  id v40 = v23;
  id v41 = v22;
  swift_bridgeObjectRetain();
  v39(v38, a2, sub_1000DB124, v37);
  return swift_release();
}

void KTZoneSetup.init()()
{
}

id KTZoneSetup.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTZoneSetup();
  return [super dealloc];
}

void destroy for KTZoneSetup.ZoneAction(uint64_t a1)
{
  objc_super v2 = *(void **)(a1 + 8);
}

uint64_t _s13transparencyd11KTZoneSetupC10ZoneActionVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t assignWithCopy for KTZoneSetup.ZoneAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  id v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

__n128 initializeWithTake for KTZoneSetup.ZoneAction(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for KTZoneSetup.ZoneAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for KTZoneSetup.ZoneAction(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 18)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KTZoneSetup.ZoneAction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KTZoneSetup.ZoneAction()
{
  return &type metadata for KTZoneSetup.ZoneAction;
}

uint64_t sub_1000DA7E0(uint64_t a1, unint64_t a2, void *a3, void *a4, int a5)
{
  return sub_1000D9FF0(a1, a2, a3, a4, a5, *(void *)(v5 + 16));
}

uint64_t sub_1000DA7E8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100080E08(&qword_1003218C0);
  char v44 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  os_log_t v42 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  id v40 = v2;
  int64_t v41 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v41) {
      break;
    }
    id v23 = v42;
    unint64_t v24 = v42[v22];
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v41) {
        goto LABEL_33;
      }
      unint64_t v24 = v42[v13];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v40;
          if ((v44 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = v42[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v41) {
              goto LABEL_33;
            }
            unint64_t v24 = v42[v13];
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 24 * v21;
    uint64_t v35 = *(void **)v33;
    unint64_t v34 = *(void **)(v33 + 8);
    char v36 = *(unsigned char *)(v33 + 16);
    char v45 = *(unsigned char *)(v33 + 17);
    if ((v44 & 1) == 0)
    {
      id v37 = v34;
      swift_bridgeObjectRetain();
      id v38 = v35;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    id v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *id v18 = v32;
    v18[1] = v31;
    uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
    *(void *)uint64_t v19 = v35;
    *(void *)(v19 + 8) = v34;
    *(unsigned char *)(v19 + 16) = v36;
    *(unsigned char *)(v19 + 17) = v45;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  id v23 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v39 = 1 << *(unsigned char *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v23, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v23 = -1 << v39;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  uint64_t *v3 = v7;
  return result;
}

void sub_1000DAB30(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  uint64_t v14 = (void *)*v6;
  unint64_t v16 = sub_100089D6C(a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a6 & 1) != 0)
  {
LABEL_7:
    int64_t v22 = *v7;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 24 * v16;
      unint64_t v24 = *(void **)(v23 + 8);

      *(void *)uint64_t v23 = a1;
      *(void *)(v23 + 8) = a2;
      *(_WORD *)(v23 + 16) = a3;
      return;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_1000DACFC();
    goto LABEL_7;
  }
  sub_1000DA7E8(v19, a6 & 1);
  unint64_t v25 = sub_100089D6C(a4, a5);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v25;
  int64_t v22 = *v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  sub_1000DACA0(v16, a4, a5, a1, a2, a3, v22);

  swift_bridgeObjectRetain();
}

unint64_t sub_1000DACA0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = (void *)(a7[6] + 16 * result);
  void *v7 = a2;
  v7[1] = a3;
  uint64_t v8 = a7[7] + 24 * result;
  *(void *)uint64_t v8 = a4;
  *(void *)(v8 + 8) = a5;
  *(_WORD *)(v8 + 16) = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

id sub_1000DACFC()
{
  uint64_t v1 = v0;
  sub_100080E08(&qword_1003218C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = 24 * v15;
    uint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v23 = *(void **)v21;
    int64_t v22 = *(void **)(v21 + 8);
    LOWORD(v21) = *(_WORD *)(v21 + 16);
    unint64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v24 = v18;
    v24[1] = v19;
    uint64_t v25 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v25 = v23;
    *(void *)(v25 + 8) = v22;
    *(_WORD *)(v25 + 16) = v21;
    id v26 = v22;
    swift_bridgeObjectRetain();
    id result = v23;
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  unint64_t v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000DAED4(uint64_t a1, void (*a2)(uint64_t, uint64_t, void *, void *, uint64_t))
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v26)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      int64_t v26 = i;
      unint64_t v8 = v7 | (i << 6);
      goto LABEL_5;
    }
    int64_t v18 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v23) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v22 + 8 * v18);
    int64_t v20 = i + 1;
    if (!v19)
    {
      int64_t v20 = i + 2;
      if (i + 2 >= v23) {
        return swift_release();
      }
      unint64_t v19 = *(void *)(v22 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = i + 3;
        if (i + 3 >= v23) {
          return swift_release();
        }
        unint64_t v19 = *(void *)(v22 + 8 * v20);
        if (!v19)
        {
          int64_t v20 = i + 4;
          if (i + 4 >= v23) {
            return swift_release();
          }
          unint64_t v19 = *(void *)(v22 + 8 * v20);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v4 = (v19 - 1) & v19;
    int64_t v26 = v20;
    unint64_t v8 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_5:
    int64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = *(void *)(a1 + 56) + 24 * v8;
    int64_t v13 = *(void **)v12;
    unint64_t v14 = *(void **)(v12 + 8);
    uint64_t v15 = *(unsigned __int16 *)(v12 + 16);
    swift_bridgeObjectRetain();
    id v16 = v13;
    id v17 = v14;
    a2(v10, v11, v13, v14, v15);

    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v21 = i + 5;
  if (i + 5 >= v23) {
    return swift_release();
  }
  unint64_t v19 = *(void *)(v22 + 8 * v21);
  if (v19)
  {
    int64_t v20 = i + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v20 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v20 >= v23) {
      return swift_release();
    }
    unint64_t v19 = *(void *)(v22 + 8 * v20);
    ++v21;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000DB0DC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000DB124(id a1)
{
  int v3 = *(unsigned __int8 *)(v1 + 32);
  int v4 = *(unsigned __int8 *)(v1 + 33);
  uint64_t v6 = *(void *)(v1 + 40);
  unint64_t v5 = *(void *)(v1 + 48);
  if (v3 != 2) {
    [a1 setZoneCreated:v3 & 1];
  }
  if (v4 != 2) {
    [a1 setZoneSubscribed:v4 & 1];
  }
  if (qword_10032B4D0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100080F90(v7, (uint64_t)qword_10032B4D8);
  id v8 = a1;
  swift_bridgeObjectRetain_n();
  id v9 = v8;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    int64_t v13 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain();
    sub_10008D114(v6, v5, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2112;
    if (a1) {
      id v14 = v9;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int64_t v13 = a1;

    _os_log_impl((void *)&_mh_execute_header, v10, v11, "zone final status %s %@", (uint8_t *)v12, 0x16u);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  return 1;
}

int64_t sub_1000DB3CC()
{
  return sub_1000DC83C(32);
}

int64_t sub_1000DB3E8(int64_t a1)
{
  return sub_1000DC83C(a1);
}

uint64_t sub_1000DB400()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_iCloudAnalyticsFlag);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1000DB448(char a1)
{
  int v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_iCloudAnalyticsFlag);
  uint64_t result = swift_beginAccess();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*sub_1000DB494())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000DB4F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_1000DB698@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_databaseDir;
  swift_beginAccess();
  return sub_10008813C(v3, a1);
}

uint64_t sub_1000DB82C(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_databaseDir;
  swift_beginAccess();
  sub_1000DC92C(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_1000DB888())()
{
  return j__swift_endAccess;
}

id sub_1000DB8E4()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_databaseDir];
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v0[OBJC_IVAR____TtC13transparencyd22MockEligibilitySupport_iCloudAnalyticsFlag] = 0;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for MockEligibilitySupport();
  return [super init];
}

uint64_t sub_1000DBA18()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000DBA38, 0, 0);
}

uint64_t sub_1000DBA38()
{
  char v1 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x60))();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v3 = v1 & 1;
  return v2(v3);
}

uint64_t sub_1000DBC38(const void *a1, void *a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  id v4 = a2;
  return _swift_task_switch(sub_1000DBCB0, 0, 0);
}

uint64_t sub_1000DBCB0()
{
  uint64_t v2 = (void *)v0[2];
  char v1 = (void (**)(void, void, void))v0[3];
  char v3 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x60))();

  v1[2](v1, v3 & 1, 0);
  _Block_release(v1);
  id v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1000DBD70@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v30._object = a2;
  v30._uint64_t countAndFlagsBits = a1;
  uint64_t v4 = sub_100080E08(&qword_10031F4B0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL.DirectoryHint();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = [self defaultManager];
  id v16 = [v15 temporaryDirectory];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  v32[0] = (id)0x2D74736574;
  v32[1] = (id)0xE500000000000000;
  String.append(_:)(v30);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for URL.DirectoryHint.isDirectory(_:), v7);
  sub_100090D14();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v17);
  unint64_t v19 = v18;
  v32[0] = 0;
  LODWORD(v16) = [v15 removeItemAtURL:v18 error:v32];

  if (v16)
  {
    id v20 = v32[0];
  }
  else
  {
    id v22 = v32[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  URL._bridgeToObjectiveC()(v21);
  unint64_t v24 = v23;
  v32[0] = 0;
  unsigned int v25 = [v15 createDirectoryAtURL:v23 withIntermediateDirectories:1 attributes:0 error:v32];

  if (v25)
  {
    id v26 = v32[0];
  }
  else
  {
    id v27 = v32[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v6, a3, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
  (*(void (**)(char *))((swift_isaMask & *v31) + 0x80))(v6);

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

int64_t sub_1000DC174()
{
  int64_t result = sub_1000DC83C(8);
  if (!v1)
  {
    uint64_t v4 = result;
    unint64_t v5 = v3;
    Swift::String v6 = Data.base64EncodedString(options:)(0);
    sub_100080CB0(v4, v5);
    (*(void (**)(uint64_t, void *))((swift_isaMask & *v0) + 0x98))(v6._countAndFlagsBits, v6._object);
    return swift_bridgeObjectRelease();
  }
  return result;
}

id sub_1000DC3F4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MockEligibilitySupport();
  return [super dealloc];
}

unsigned char *sub_1000DC458@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    int64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    int64_t result = (unsigned char *)sub_1000DC5DC(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    int64_t result = (unsigned char *)sub_1000DC6A0((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    int64_t result = (unsigned char *)sub_1000DC71C((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

char *sub_1000DC4D0(char *a1, int64_t a2, char a3)
{
  int64_t result = sub_1000DC4F0(a1, a2, a3, *v3);
  unsigned char *v3 = result;
  return result;
}

char *sub_1000DC4F0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100080E08((uint64_t *)&unk_10031F9B0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

uint64_t sub_1000DC5DC(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1000DC6A0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_1000DC71C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1000DC7A0(uint64_t a1)
{
  uint64_t v9 = sub_100080E08(&qword_100321940);
  unint64_t v10 = sub_1000DCC08();
  v8[0] = a1;
  uint64_t v2 = sub_100097048(v8, v9);
  unint64_t v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_1000DC458(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_10008FBC4((uint64_t)v8);
  return v5;
}

int64_t sub_1000DC83C(int64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    int64_t v1 = result;
    if (result)
    {
      sub_1000DC4D0(0, result, 0);
      do
      {
        swift_stdlib_random();
        unint64_t v3 = _swiftEmptyArrayStorage[2];
        unint64_t v2 = _swiftEmptyArrayStorage[3];
        if (v3 >= v2 >> 1) {
          sub_1000DC4D0((char *)(v2 > 1), v3 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v3 + 1;
        *((unsigned char *)&_swiftEmptyArrayStorage[4] + v3) = 0;
        --v1;
      }
      while (v1);
    }
    uint64_t v4 = sub_1000DC7A0((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

uint64_t sub_1000DC92C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100080E08(&qword_10031F4B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for MockEligibilitySupport()
{
  uint64_t result = qword_10032B970;
  if (!qword_10032B970) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000DC9E0()
{
  return type metadata accessor for MockEligibilitySupport();
}

void sub_1000DC9E8()
{
  sub_1000DCA84();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000DCA84()
{
  if (!qword_100321910)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100321910);
    }
  }
}

uint64_t sub_1000DCADC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000DCB1C()
{
  unint64_t v2 = *(const void **)(v0 + 16);
  unint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10008B484;
  uint64_t v5 = (uint64_t (*)(const void *, void *))((char *)&dword_100321918 + dword_100321918);
  return v5(v2, v3);
}

uint64_t sub_1000DCBD0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000DCC08()
{
  unint64_t result = qword_100321948;
  if (!qword_100321948)
  {
    sub_1000829FC(&qword_100321940);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321948);
  }
  return result;
}

uint64_t sub_1000DCC64()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000DCC6C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_1000DCC9C(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x746E656449736469;
      break;
    case 2:
      return result;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      unint64_t result = 0x644963696C627570;
      break;
  }
  return result;
}

unint64_t sub_1000DCD54()
{
  return sub_1000DCC9C(*v0);
}

uint64_t sub_1000DCD5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000E1AB8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000DCD84(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1000DCD90(uint64_t a1)
{
  unint64_t v2 = sub_1000DD000();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000DCDCC(uint64_t a1)
{
  unint64_t v2 = sub_1000DD000();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000DCE08(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100080E08((uint64_t *)&unk_100321950);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100097048(a1, a1[3]);
  sub_1000DD000();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v12 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = *(void *)(v3 + 16);
    v10[15] = 1;
    sub_100080E08((uint64_t *)&unk_100320660);
    sub_100099310((unint64_t *)&unk_100321960);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[14] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v10[13] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1000DD000()
{
  unint64_t result = qword_10032B9B0[0];
  if (!qword_10032B9B0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10032B9B0);
  }
  return result;
}

double sub_1000DD054@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000E1C8C(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1000DD0A4(void *a1)
{
  return sub_1000DCE08(a1);
}

void sub_1000DD0BC()
{
  qword_10032F620 = 1635017060;
  *(void *)algn_10032F628 = 0xE400000000000000;
}

uint64_t *sub_1000DD0D8()
{
  if (qword_10032B980 != -1) {
    swift_once();
  }
  return &qword_10032F620;
}

void sub_1000DD124()
{
  qword_10032F630 = 0x654B636974617453;
  *(void *)algn_10032F638 = 0xE900000000000079;
}

uint64_t *sub_1000DD14C()
{
  if (qword_10032B988 != -1) {
    swift_once();
  }
  return &qword_10032F630;
}

uint64_t sub_1000DD198()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100087A78(v0, qword_10032B998);
  sub_100080F90(v0, (uint64_t)qword_10032B998);
  return Logger.init(transparencyCategory:)();
}

uint64_t sub_1000DD204()
{
  if (qword_10032B988 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_10032F630;
  swift_bridgeObjectRetain();
  return v0;
}

void *sub_1000DD26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  if (qword_10032B988 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)algn_10032F638;
  _OWORD v6[2] = qword_10032F630;
  v6[3] = v7;
  void v6[4] = a1;
  v6[5] = a2;
  v6[6] = a3;
  swift_bridgeObjectRetain();
  return v6;
}

void *sub_1000DD304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_10032B988 != -1) {
    swift_once();
  }
  uint64_t v7 = *(void *)algn_10032F638;
  v3[2] = qword_10032F630;
  v3[3] = v7;
  void v3[4] = a1;
  v3[5] = a2;
  void v3[6] = a3;
  swift_bridgeObjectRetain();
  return v3;
}

Class sub_1000DD384()
{
  uint64_t v0 = type metadata accessor for SHA256();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SHA256Digest();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v39 = (char *)v38 - v8;
  uint64_t v9 = type metadata accessor for String.Encoding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v42 = String.data(using:allowLossyConversion:)();
  unint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  Class isa = 0;
  if (v14 >> 60 != 15)
  {
    sub_1000E1FFC((unint64_t *)&unk_100320690, (void (*)(uint64_t))&type metadata accessor for SHA256);
    dispatch thunk of HashFunction.init()();
    uint64_t v16 = v42;
    v38[0] = v14;
    switch(v14 >> 62)
    {
      case 1uLL:
        if (v42 >> 32 < (int)v42) {
          goto LABEL_26;
        }
        sub_100080C58(v42, v14);
        sub_1000A2204((int)v16, v16 >> 32);
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v42 + 16);
        uint64_t v18 = *(void *)(v42 + 24);
        sub_10008FC6C(v42, v14);
        swift_retain();
        swift_retain();
        sub_1000A2204(v17, v18);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        *(void *)((char *)&v44 + 6) = 0;
        *(void *)&long long v44 = 0;
        goto LABEL_8;
      default:
        *(void *)&long long v44 = v42;
        WORD4(v44) = v14;
        BYTE10(v44) = BYTE2(v14);
        BYTE11(v44) = BYTE3(v14);
        BYTE12(v44) = BYTE4(v14);
        BYTE13(v44) = BYTE5(v14);
LABEL_8:
        dispatch thunk of HashFunction.update(bufferPointer:)();
        break;
    }
    sub_10008FCD4(v16, v14);
    unint64_t v19 = v39;
    dispatch thunk of HashFunction.finalize()();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v7, v19, v41);
    sub_1000E1FFC(&qword_100320D00, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
    dispatch thunk of Sequence.makeIterator()();
    unint64_t v21 = *((void *)&v44 + 1);
    uint64_t v20 = v44;
    uint64_t v22 = *(void *)(v44 + 16);
    if (*((void *)&v44 + 1) != v22)
    {
      if (*((uint64_t *)&v44 + 1) < v22)
      {
        int64_t v23 = (char *)_swiftEmptyArrayStorage;
        long long v43 = xmmword_1002856F0;
        while ((v21 & 0x8000000000000000) == 0)
        {
          if (v21 >= *(void *)(v20 + 16)) {
            goto LABEL_24;
          }
          char v30 = *(unsigned char *)(v20 + 32 + v21);
          sub_100080E08((uint64_t *)&unk_1003206A0);
          uint64_t v31 = swift_allocObject();
          *(_OWORD *)(v31 + 16) = v43;
          *(void *)(v31 + 56) = &type metadata for UInt8;
          *(void *)(v31 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v31 + 32) = v30;
          uint64_t v32 = String.init(format:_:)();
          uint64_t v34 = v33;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v23 = sub_1000A0478(0, *((void *)v23 + 2) + 1, 1, v23);
          }
          unint64_t v36 = *((void *)v23 + 2);
          unint64_t v35 = *((void *)v23 + 3);
          if (v36 >= v35 >> 1) {
            int64_t v23 = sub_1000A0478((char *)(v35 > 1), v36 + 1, 1, v23);
          }
          ++v21;
          *((void *)v23 + 2) = v36 + 1;
          id v37 = &v23[16 * v36];
          *((void *)v37 + 4) = v32;
          *((void *)v37 + 5) = v34;
          if (v22 == v21) {
            goto LABEL_11;
          }
        }
        __break(1u);
LABEL_24:
        __break(1u);
      }
      __break(1u);
LABEL_26:
      __break(1u);
    }
    int64_t v23 = (char *)_swiftEmptyArrayStorage;
LABEL_11:
    swift_bridgeObjectRelease();
    *(void *)&long long v44 = v23;
    sub_100080E08((uint64_t *)&unk_100320660);
    sub_1000A2508();
    uint64_t v24 = BidirectionalCollection<>.joined(separator:)();
    id v26 = v25;
    swift_bridgeObjectRelease();
    sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
    id v27 = *(id *)(v38[1] + 40);
    v28._uint64_t countAndFlagsBits = v24;
    v28._object = v26;
    Class isa = CKRecordID.init(recordName:zoneID:)(v28, (CKRecordZoneID)v27).super.isa;
    sub_10008FCD4(v42, v38[0]);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v41);
  }
  return isa;
}

void sub_1000DD9FC(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10008E0A0(0, &qword_100321990);
    sub_1000E2488();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v27;
    uint64_t v26 = v28;
    uint64_t v3 = v29;
    uint64_t v2 = v30;
    unint64_t v4 = v31;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v3 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  uint64_t v23 = v3;
  int64_t v25 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v24 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v8 = v2;
    if ((v1 & 0x8000000000000000) == 0) {
      break;
    }
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_38;
    }
    sub_10008E0A0(0, &qword_100321990);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v11 = v32;
    swift_unknownObjectRelease();
    if (!v32) {
      goto LABEL_38;
    }
LABEL_31:
    id v15 = [v11 uri:v23];
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v24 = sub_1000A0478(0, *((void *)v24 + 2) + 1, 1, v24);
      }
      unint64_t v21 = *((void *)v24 + 2);
      unint64_t v20 = *((void *)v24 + 3);
      if (v21 >= v20 >> 1) {
        uint64_t v24 = sub_1000A0478((char *)(v20 > 1), v21 + 1, 1, v24);
      }
      *((void *)v24 + 2) = v21 + 1;
      uint64_t v22 = &v24[16 * v21];
      *((void *)v22 + 4) = v17;
      *((void *)v22 + 5) = v19;
    }
    else
    {
    }
  }
  if (v4)
  {
    unint64_t v9 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v10 = v9 | (v2 << 6);
LABEL_30:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  int64_t v12 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v12 >= v25) {
      goto LABEL_38;
    }
    unint64_t v13 = *(void *)(v26 + 8 * v12);
    ++v2;
    if (!v13)
    {
      uint64_t v2 = v8 + 2;
      if (v8 + 2 >= v25) {
        goto LABEL_38;
      }
      unint64_t v13 = *(void *)(v26 + 8 * v2);
      if (!v13)
      {
        uint64_t v2 = v8 + 3;
        if (v8 + 3 >= v25) {
          goto LABEL_38;
        }
        unint64_t v13 = *(void *)(v26 + 8 * v2);
        if (!v13)
        {
          uint64_t v2 = v8 + 4;
          if (v8 + 4 >= v25) {
            goto LABEL_38;
          }
          unint64_t v13 = *(void *)(v26 + 8 * v2);
          if (!v13)
          {
            uint64_t v2 = v8 + 5;
            if (v8 + 5 >= v25) {
              goto LABEL_38;
            }
            unint64_t v13 = *(void *)(v26 + 8 * v2);
            if (!v13)
            {
              uint64_t v14 = v8 + 6;
              while (v25 != v14)
              {
                unint64_t v13 = *(void *)(v26 + 8 * v14++);
                if (v13)
                {
                  uint64_t v2 = v14 - 1;
                  goto LABEL_29;
                }
              }
LABEL_38:
              sub_100089D64();
              return;
            }
          }
        }
      }
    }
LABEL_29:
    unint64_t v4 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v2 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

id sub_1000DDD6C(void *a1)
{
  id result = [a1 publicId];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;

    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 168))(v4, v6);
    swift_bridgeObjectRelease();
    return (id)v7;
  }
  return result;
}

uint64_t sub_1000DDDF8(void *a1)
{
  uint64_t v2 = v1;
  if (qword_10032B990 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100080F90(v4, (uint64_t)qword_10032B998);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = [v5 recordID:v8 + 4];
    id v10 = [v9 recordName];

    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    unsigned __int8 v18 = sub_10008D114(v11, v13, (uint64_t *)&v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "merging cloud static key: %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v19 = &_swiftEmptySetSingleton;
  uint64_t v14 = (void *)(*(uint64_t (**)(void))(*v2 + 136))();
  __chkstk_darwin(v14);
  NSManagedObjectContext.performAndWait<A>(_:)();

  if (v19[2] && (id v15 = (void *)v2[6]) != 0)
  {
    swift_bridgeObjectRetain();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v15 uriNeedsUpdate:isa];
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v18;
}

void sub_1000DE0FC(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v123 = a3;
  uint64_t v124 = a2;
  unint64_t v111 = a4;
  uint64_t v112 = type metadata accessor for Logger();
  uint64_t v113 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  char v120 = (char *)v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1002856F0;
  id v116 = a1;
  id v8 = [a1 recordID];
  id v9 = [v8 recordName];

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000A56A8();
  *(void *)(v7 + 32) = v10;
  *(void *)(v7 + 40) = v12;
  unint64_t v13 = NSPredicate.init(format:_:)();
  [v6 setPredicate:v13];

  id v127 = 0;
  id v110 = v6;
  id v14 = [v6 execute:&v127];
  id v15 = v127;
  if (!v14)
  {
    id v21 = v127;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v22 = swift_errorRelease();
    uint64_t v119 = 0;
    goto LABEL_10;
  }
  uint64_t v16 = v14;
  sub_10008E0A0(0, &qword_100321B58);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v18 = v15;

  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v23) {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    uint64_t v22 = swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v124 + 136))(v22);
    id v25 = [objc_allocWithZone((Class)CloudStaticKey) initWithContext:v24];

    if (v25)
    {
      id v20 = v25;
      id v26 = [v116 recordID];
      NSString v27 = [v26 recordName];

      if (!v27)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v27 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      [v20 setRecordID:v27];

      goto LABEL_14;
    }
    char v50 = 0;
LABEL_32:
    id v41 = v110;
    goto LABEL_34;
  }
LABEL_4:
  if ((v17 & 0xC000000000000001) != 0) {
    goto LABEL_93;
  }
  unint64_t v19 = (unint64_t)v120;
  if (!*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    __break(1u);
  }
  id v20 = *(id *)(v17 + 32);
  swift_bridgeObjectRelease();
  while (1)
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    id v28 = v20;
    v109[1] = JSONDecoder.init()();
    uint64_t v29 = [v116 encryptedValues];
    if (qword_10032B980 != -1) {
LABEL_91:
    }
      swift_once();
    NSString v30 = String._bridgeToObjectiveC()();
    id v31 = [v29 objectForKeyedSubscript:v30];
    swift_unknownObjectRelease();

    uint64_t v32 = v113;
    if (!v31) {
      goto LABEL_20;
    }
    uint64_t v125 = (uint64_t)v31;
    sub_100080E08(&qword_100320AC0);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_20;
    }
    uint64_t v34 = (uint64_t)v127;
    unint64_t v33 = (unint64_t)v128;
    sub_1000E3AB4();
    uint64_t v35 = v119;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    if (v35) {
      break;
    }
    uint64_t v119 = 0;
    uint64_t i = v129;
    unint64_t v122 = v33;
    int64_t v58 = v130;
    uint64_t v59 = v131;
    uint64_t v115 = (uint64_t)v128;
    NSString v60 = String._bridgeToObjectiveC()();
    [v28 setPublicId:v60];

    if (v59)
    {
      swift_bridgeObjectRetain();
      NSString v61 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v61 = 0;
    }
    [v28 setContactIdentifier:v61];

    unint64_t v62 = v122;
    if (v58)
    {
      swift_bridgeObjectRetain();
      NSString v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v63 = 0;
    }
    [v28 setContactExternalURI:v63];

    id v64 = [v28 uris];
    int64_t v117 = v58;
    if (v64)
    {
      uint64_t v65 = v64;
      sub_10008E0A0(0, &qword_100321990);
      sub_1000E2488();
      uint64_t v66 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v67 = v119;
      sub_1000DD9FC(v66);
      uint64_t v29 = v68;
      uint64_t v119 = v67;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = _swiftEmptyArrayStorage;
    }
    uint64_t v69 = sub_100097324((uint64_t)v29);
    swift_bridgeObjectRelease();
    uint64_t v125 = v69;
    uint64_t v70 = i;
    uint64_t v71 = *(void *)(i + 16);
    id v118 = v28;
    uint64_t v114 = v34;
    if (v71)
    {
      Class isa = (Class)[v28 uris:v59];
      if (!isa)
      {
        sub_10008E0A0(0, &qword_100321990);
        sub_1000E2488();
        Class isa = Set._bridgeToObjectiveC()().super.isa;
        [v28 setUris:isa];
      }

      swift_bridgeObjectRetain_n();
      uint64_t v73 = (uint64_t *)(v70 + 40);
      do
      {
        uint64_t v75 = *(v73 - 1);
        uint64_t v76 = *v73;
        uint64_t v77 = v125;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v78 = sub_1000DF0FC(v75, v76, v77);
        uint64_t v79 = swift_bridgeObjectRelease();
        if (v78)
        {
          sub_1000C3D8C(v75, v76);
          uint64_t v29 = v74;
        }
        else
        {
          uint64_t v80 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v124 + 136))(v79);
          id v81 = [objc_allocWithZone((Class)CloudStaticKeyURI) initWithContext:v80];

          NSString v82 = String._bridgeToObjectiveC()();
          [v81 setUri:v82];

          id v83 = [v28 uris];
          if (v83)
          {
            uint64_t v84 = v83;
            sub_10008E0A0(0, &qword_100321990);
            sub_1000E2488();
            uint64_t v85 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v126 = v85;
            sub_1000E0834(&v127, v81);
            if (v126)
            {
              v86.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
            }
            else
            {
              v86.super.Class isa = 0;
            }
            id v28 = v118;
            [v118 setUris:v86.super.isa];
          }
          else
          {
            [v28 setUris:0];
          }
          sub_1000C3D8C(v75, v76);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          sub_100096348((Swift::Int *)&v127, v75, v76);

          uint64_t v29 = v128;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v73 += 2;
        --v71;
      }
      while (v71);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v69 = v125;
      uint64_t v34 = v114;
      unint64_t v62 = v122;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v87 = *(void *)(v69 + 56);
    uint64_t v115 = v69 + 56;
    uint64_t v88 = 1 << *(unsigned char *)(v69 + 32);
    uint64_t v89 = -1;
    if (v88 < 64) {
      uint64_t v89 = ~(-1 << v88);
    }
    unint64_t v19 = v89 & v87;
    int64_t v117 = (unint64_t)(v88 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v90 = 0;
    for (i = v69; ; uint64_t v69 = i)
    {
      if (v19)
      {
        unint64_t v91 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        unint64_t v92 = v91 | (v90 << 6);
        goto LABEL_78;
      }
      if (__OFADD__(v90++, 1))
      {
        __break(1u);
        goto LABEL_91;
      }
      if (v90 >= v117)
      {
        uint64_t v32 = v113;
        unint64_t v19 = (unint64_t)v120;
LABEL_89:
        swift_release();
        NSString v36 = String._bridgeToObjectiveC()();
        [v28 setCkstate:v36];
        sub_100080CB0(v34, v62);
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      unint64_t v94 = *(void *)(v115 + 8 * v90);
      unint64_t v19 = (unint64_t)v120;
      if (!v94) {
        break;
      }
LABEL_77:
      unint64_t v19 = (v94 - 1) & v94;
      unint64_t v92 = __clz(__rbit64(v94)) + (v90 << 6);
LABEL_78:
      __int16 v96 = (Swift::Int *)(*(void *)(v69 + 48) + 16 * v92);
      Swift::Int v98 = *v96;
      Swift::Int v97 = v96[1];
      char v99 = *(uint64_t (**)(uint64_t))(*(void *)v124 + 136);
      uint64_t v100 = swift_bridgeObjectRetain();
      char v101 = (void *)v99(v100);
      id v102 = [objc_allocWithZone((Class)CloudStaticKeyURI) initWithContext:v101];

      NSString v103 = String._bridgeToObjectiveC()();
      [v102 setUri:v103];

      id v104 = [v28 uris];
      if (v104)
      {
        NSString v105 = v104;
        sub_10008E0A0(0, &qword_100321990);
        sub_1000E2488();
        uint64_t v106 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();

        id v127 = v106;
        char v107 = (void *)sub_1000E0AD4(v102);
        if (v127)
        {
          v108.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        else
        {
          v108.super.Class isa = 0;
        }
        unint64_t v62 = v122;
        id v28 = v118;
        [v118 setUris:v108.super.isa];

        uint64_t v34 = v114;
      }
      else
      {
        [v28 setUris:0];
        unint64_t v62 = v122;
      }
      uint64_t v29 = v123;
      sub_100096348((Swift::Int *)&v127, v98, v97);

      swift_bridgeObjectRelease();
    }
    int64_t v95 = v90 + 1;
    if (v90 + 1 >= v117) {
      goto LABEL_88;
    }
    unint64_t v94 = *(void *)(v115 + 8 * v95);
    if (v94) {
      goto LABEL_76;
    }
    int64_t v95 = v90 + 2;
    if (v90 + 2 >= v117) {
      goto LABEL_88;
    }
    unint64_t v94 = *(void *)(v115 + 8 * v95);
    if (v94) {
      goto LABEL_76;
    }
    int64_t v95 = v90 + 3;
    if (v90 + 3 >= v117)
    {
LABEL_88:
      uint64_t v32 = v113;
      goto LABEL_89;
    }
    unint64_t v94 = *(void *)(v115 + 8 * v95);
    if (v94)
    {
LABEL_76:
      int64_t v90 = v95;
      goto LABEL_77;
    }
    while (1)
    {
      int64_t v90 = v95 + 1;
      if (__OFADD__(v95, 1)) {
        break;
      }
      if (v90 >= v117) {
        goto LABEL_88;
      }
      unint64_t v94 = *(void *)(v115 + 8 * v90);
      ++v95;
      if (v94) {
        goto LABEL_77;
      }
    }
    __break(1u);
LABEL_93:
    id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    swift_bridgeObjectRelease();
LABEL_14:
    unint64_t v19 = (unint64_t)v120;
  }
  sub_100080CB0(v34, v33);
  swift_errorRelease();
  uint64_t v119 = 0;
  uint64_t v32 = v113;
LABEL_20:
  NSString v36 = String._bridgeToObjectiveC()();
  [v28 setCkstate:v36];
LABEL_21:

  uint64_t v37 = v112;
  if (qword_10032B990 != -1) {
    swift_once();
  }
  uint64_t v38 = sub_100080F90(v37, (uint64_t)qword_10032B998);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v32 + 16))(v19, v38, v37);
  unint64_t v39 = v19;
  uint64_t v40 = v32;
  id v41 = v28;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    long long v44 = (uint8_t *)swift_slowAlloc();
    id v127 = (id)swift_slowAlloc();
    *(_DWORD *)long long v44 = 136315138;
    id v45 = [v41 publicId];
    if (v45)
    {
      int v46 = v45;
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v49 = v48;
    }
    else
    {
      unint64_t v49 = 0xE100000000000000;
      uint64_t v47 = 45;
    }
    uint64_t v51 = v120;
    uint64_t v125 = sub_10008D114(v47, v49, (uint64_t *)&v127);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "merged cloud device: %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v113 + 8))(v51, v112);
  }
  else
  {

    (*(void (**)(unint64_t, uint64_t))(v40 + 8))(v39, v37);
  }
  uint64_t v52 = v124;
  uint64_t v53 = (*(uint64_t (**)(id, id))(*(void *)v124 + 248))(v41, v116);
  uint64_t v54 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v52 + 136))(v53);
  id v127 = 0;
  unsigned int v55 = [v54 save:&v127];

  if (v55)
  {
    id v56 = v127;
    swift_release();

    char v50 = 1;
    goto LABEL_32;
  }
  id v57 = v127;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_release();

  swift_errorRelease();
  uint64_t v119 = 0;
  char v50 = 1;
LABEL_34:

  char *v111 = v50;
}

uint64_t sub_1000DF0FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

void sub_1000DF234(Swift::Int a1)
{
  Swift::Int v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10008E0A0(0, &qword_100321990);
    sub_1000E2488();
    Set.Iterator.init(_cocoa:)();
    Swift::Int v1 = v23[2];
    Swift::Int v22 = v23[3];
    Swift::Int v2 = v23[4];
    Swift::Int v3 = v23[5];
    unint64_t v4 = v23[6];
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    Swift::Int v22 = a1 + 56;
    Swift::Int v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    Swift::Int v3 = 0;
  }
  int64_t v21 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    uint64_t v11 = __CocoaSet.Iterator.next()();
    if (!v11) {
      goto LABEL_35;
    }
    v23[8] = v11;
    sub_10008E0A0(0, &qword_100321990);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = (id)v23[0];
    swift_unknownObjectRelease();
    Swift::Int v10 = v3;
    uint64_t v8 = v4;
    if (!v12) {
      goto LABEL_35;
    }
LABEL_33:
    id v16 = [v12 uri];
    if (v16)
    {
      BOOL v17 = v16;
      Swift::Int v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::Int v20 = v19;

      sub_100096348(v23, v18, v20);
      swift_bridgeObjectRelease();
    }
    else
    {
    }
    Swift::Int v3 = v10;
    unint64_t v4 = v8;
  }
  if (v4)
  {
    uint64_t v8 = (v4 - 1) & v4;
    unint64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
    Swift::Int v10 = v3;
LABEL_32:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    if (!v12) {
      goto LABEL_35;
    }
    goto LABEL_33;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v21) {
      goto LABEL_35;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v13);
    Swift::Int v10 = v3 + 1;
    if (!v14)
    {
      Swift::Int v10 = v3 + 2;
      if (v3 + 2 >= v21) {
        goto LABEL_35;
      }
      unint64_t v14 = *(void *)(v22 + 8 * v10);
      if (!v14)
      {
        Swift::Int v10 = v3 + 3;
        if (v3 + 3 >= v21) {
          goto LABEL_35;
        }
        unint64_t v14 = *(void *)(v22 + 8 * v10);
        if (!v14)
        {
          Swift::Int v10 = v3 + 4;
          if (v3 + 4 >= v21) {
            goto LABEL_35;
          }
          unint64_t v14 = *(void *)(v22 + 8 * v10);
          if (!v14)
          {
            Swift::Int v10 = v3 + 5;
            if (v3 + 5 >= v21) {
              goto LABEL_35;
            }
            unint64_t v14 = *(void *)(v22 + 8 * v10);
            if (!v14)
            {
              Swift::Int v15 = v3 + 6;
              while (v21 != v15)
              {
                unint64_t v14 = *(void *)(v22 + 8 * v15++);
                if (v14)
                {
                  Swift::Int v10 = v15 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_100089D64();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v8 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v10 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_1000DF550(void *a1)
{
  id v12 = &_swiftEmptySetSingleton;
  uint64_t v3 = (*(uint64_t (**)(void))(*v1 + 136))();
  unint64_t v4 = (void *)swift_allocObject();
  v4[2] = a1;
  v4[3] = &v12;
  v4[4] = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1000E2068;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_100091FB0;
  void aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BF830;
  uint64_t v6 = _Block_copy(aBlock);
  id v7 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  [(id)v3 performBlockAndWait:v6];

  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    if (v12[2])
    {
      unint64_t v9 = (void *)v1[6];
      if (v9)
      {
        swift_bridgeObjectRetain();
        Class isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v9 uriNeedsUpdate:isa];
      }
    }
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Class sub_1000DF754(void *a1)
{
  id v3 = [a1 ckrecord];
  if (v3)
  {
    unint64_t v4 = v3;
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    unint64_t v7 = 0xF000000000000000;
  }
  uint64_t v8 = type metadata accessor for KTCloudRecords();
  Class isa = (Class)(*(uint64_t (**)(uint64_t, unint64_t))(v8 + 440))(v5, v7);
  sub_10008FCD4(v5, v7);
  if (!isa)
  {
    Class isa = (Class)(*(uint64_t (**)(void *))(*(void *)v1 + 176))(a1);
    if (!isa) {
      return isa;
    }
    sub_10008E0A0(0, &qword_100321980);
    v10._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v1 + 112))();
    Class isa = CKRecord.init(recordType:recordID:)(v10, (CKRecordID)isa).super.isa;
  }
  id v11 = [a1 publicId];
  if (v11)
  {
    id v12 = v11;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v13 = [a1 uris];
    if (v13)
    {
      unint64_t v14 = v13;
      sub_10008E0A0(0, &qword_100321990);
      sub_1000E2488();
      uint64_t v15 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      sub_1000DD9FC(v15);
      swift_bridgeObjectRelease();
    }
    id v16 = [a1 contactExternalURI];
    if (v16)
    {
      BOOL v17 = v16;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    id v18 = [a1 contactIdentifier];
    if (v18)
    {
      Swift::Int v19 = v18;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    sub_1000E2434();
    uint64_t v20 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v23 = [(objc_class *)isa encryptedValues];
    swift_getObjectType();
    if (qword_10032B980 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    sub_100080C58(v20, v22);
    CKRecordKeyValueSetting.subscript.setter();
    sub_100080CB0(v20, v22);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {

    return 0;
  }
  return isa;
}

uint64_t sub_1000DFB40()
{
  unsigned __int8 v9 = 0;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 136))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = &v9;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000E2528;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000984E8;
  void aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BF8A8;
  unint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v9;
    swift_release();
    return v7;
  }
  return result;
}

uint64_t sub_1000DFCD0()
{
  unsigned __int8 v9 = _swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 136))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v9;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000E275C;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000984E8;
  void aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BF920;
  unint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v9;
    swift_release();
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_1000DFE68()
{
  unsigned __int8 v9 = _swiftEmptyArrayStorage;
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)v0 + 136))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = &v9;
  *(void *)(v2 + 24) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_1000A2B40;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000984E8;
  void aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BF998;
  unint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  [v1 performBlockAndWait:v4];

  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v9;
    swift_release();
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_1000E0000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 136))();
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = a1;
  void v8[3] = a2;
  v8[4] = a3;
  void v8[5] = v3;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_1000E27DC;
  *(void *)(v9 + 24) = v8;
  void v13[4] = sub_1000984E8;
  v13[5] = v9;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  long long v13[2] = sub_100091FD8;
  v13[3] = &unk_1002BFA10;
  Swift::String v10 = _Block_copy(v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  [v7 performBlockAndWait:v10];

  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E01A8(void *a1)
{
  uint64_t v12 = 0;
  uint64_t v3 = (void *)(*(uint64_t (**)(void))(*(void *)v1 + 136))();
  unint64_t v4 = (void *)swift_allocObject();
  v4[2] = a1;
  v4[3] = &v12;
  v4[4] = v1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1000E2E3C;
  *(void *)(v5 + 24) = v4;
  aBlock[4] = sub_1000984E8;
  void aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100091FD8;
  aBlock[3] = &unk_1002BFA88;
  unint64_t v6 = _Block_copy(aBlock);
  id v7 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  [v3 performBlockAndWait:v6];

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = v12;
    swift_release();
    return v10;
  }
  return result;
}

uint64_t sub_1000E034C()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 136))();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_1000E3460;
  *(void *)(v2 + 24) = v0;
  void v5[4] = sub_1000984E8;
  void v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100091FD8;
  v5[3] = &unk_1002BFAD8;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  [(id)v1 performBlockAndWait:v3];

  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E04B0()
{
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_1000E04E8()
{
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_1000E0538()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t sub_1000E057C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))() & 1;
}

uint64_t sub_1000E05C4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t sub_1000E0608()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

uint64_t sub_1000E064C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 224))();
}

uint64_t sub_1000E0690()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 208))() & 1;
}

uint64_t sub_1000E06D8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 232))();
}

uint64_t sub_1000E071C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

uint64_t sub_1000E0760()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t sub_1000E07A4()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t sub_1000E07E8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

uint64_t sub_1000E0834(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10008E0A0(0, &qword_100321990);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_1000E0CAC(v7, result + 1);
    id v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      sub_1000E0EA4();
      id v23 = v28;
    }
    else
    {
      id v23 = (void *)v22;
      id v24 = v8;
    }
    sub_1000E1144((uint64_t)v8, v23);
    uint64_t *v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10008E0A0(0, &qword_100321990);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    id v8 = a2;
    sub_1000E11C8((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    uint64_t *v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}