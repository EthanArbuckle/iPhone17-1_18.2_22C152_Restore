uint64_t sub_1000E0AD4(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  id v5;
  char v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v20;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = a1;
    v6 = __CocoaSet.contains(_:)();

    if (v6)
    {
      v7 = sub_1000E1778();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  v8 = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  v9 = NSObject._rawHashValue(seed:)(v8);
  v10 = -1 << *(unsigned char *)(v4 + 32);
  v11 = v9 & ~v10;
  if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
    goto LABEL_12;
  }
  sub_10008E0A0(0, &qword_100321990);
  v12 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
  v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    v14 = ~v10;
    do
    {
      v11 = (v11 + 1) & v14;
      if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_12;
      }
      v15 = *(id *)(*(void *)(v4 + 48) + 8 * v11);
      v16 = static NSObject.== infix(_:_:)();
    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *v2;
  v20 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000E1350();
    v18 = v20;
  }
  v7 = *(void *)(*(void *)(v18 + 48) + 8 * v11);
  sub_1000E1914(v11);
  *v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

Swift::Int sub_1000E0CAC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100080E08((uint64_t *)&unk_100321B78);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10008E0A0(0, &qword_100321990);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_1000E0EA4();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_1000E0EA4()
{
  v1 = v0;
  uint64_t v2 = *v0;
  sub_100080E08((uint64_t *)&unk_100321B78);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

unint64_t sub_1000E1144(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

void sub_1000E11C8(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_1000E0EA4();
  }
  else
  {
    if (v7 > v6)
    {
      sub_1000E1350();
      goto LABEL_14;
    }
    sub_1000E14FC();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10008E0A0(0, &qword_100321990);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

id sub_1000E1350()
{
  v1 = v0;
  sub_100080E08((uint64_t *)&unk_100321B78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000E14FC()
{
  v1 = v0;
  uint64_t v2 = *v0;
  sub_100080E08((uint64_t *)&unk_100321B78);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v4 + 40);
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000E1778()
{
  v1 = v0;
  swift_bridgeObjectRelease();
  uint64_t v2 = __CocoaSet.count.getter();
  uint64_t v3 = swift_unknownObjectRetain();
  Swift::Int v4 = sub_1000E0CAC(v3, v2);
  Swift::Int v16 = v4;
  Swift::Int v5 = *(void *)(v4 + 40);
  swift_retain();
  Swift::Int v6 = NSObject._rawHashValue(seed:)(v5);
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    sub_10008E0A0(0, &qword_100321990);
    id v9 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
    char v10 = static NSObject.== infix(_:_:)();

    if (v10)
    {
LABEL_6:
      swift_release();
      uint64_t v14 = *(void *)(*(void *)(v4 + 48) + 8 * v8);
      sub_1000E1914(v8);
      if (static NSObject.== infix(_:_:)())
      {
        Swift::Int *v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v7;
      while (1)
      {
        unint64_t v8 = (v8 + 1) & v11;
        if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
          break;
        }
        id v12 = *(id *)(*(void *)(v4 + 48) + 8 * v8);
        char v13 = static NSObject.== infix(_:_:)();

        if (v13) {
          goto LABEL_6;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_1000E1914(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            unint64_t v17 = (void *)(v16 + 8 * v2);
            int64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *unint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_1000E1AB8(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x644963696C627570 && a2 == 0xEE00797469746E65;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E656449736469 && a2 == 0xED00007265696669 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000010024F220 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000010024F240)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1000E1C8C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100080E08(&qword_100321B88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100097048(a1, a1[3]);
  sub_1000DD000();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10008FBC4((uint64_t)a1);
  }
  char v30 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v25 = v9;
  sub_100080E08((uint64_t *)&unk_100320660);
  char v29 = 1;
  sub_100099310((unint64_t *)&unk_100321B90);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v28 = 2;
  uint64_t v24 = v26;
  swift_bridgeObjectRetain();
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v23 = v12;
  char v27 = 3;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v16 = v13;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  sub_10008FBC4((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v17 = v23;
  swift_bridgeObjectRelease();
  uint64_t v18 = v24;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v25;
  a2[1] = v11;
  uint64_t v20 = v22;
  a2[2] = v18;
  a2[3] = v20;
  a2[4] = v17;
  a2[5] = v16;
  a2[6] = v15;
  return result;
}

uint64_t sub_1000E1FFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000E2044(char *a1@<X8>)
{
  sub_1000DE0FC(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

void sub_1000E2068()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  id v3 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856F0;
  id v5 = [v1 recordName];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000A56A8();
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  uint64_t v9 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v9];

  id v34 = 0;
  id v10 = [v3 execute:&v34];
  id v11 = v34;
  if (v10)
  {
    uint64_t v12 = v10;
    sub_10008E0A0(0, &qword_100321B58);
    unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v14 = v11;

    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      if (v15) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_4:
        v33 = *(uint64_t (**)(void))(*(void *)v2 + 136);
        if (v15 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v16 = 0;
        uint64_t v31 = v2 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000;
        id v32 = v3;
        unint64_t v17 = v13 & 0xC000000000000001;
        do
        {
          if (v17) {
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v19 = *(id *)(v13 + 8 * v16 + 32);
          }
          uint64_t v20 = v19;
          id v21 = [v19 uris:v31, v32];
          if (v21)
          {
            uint64_t v22 = v21;
            sub_10008E0A0(0, &qword_100321990);
            unint64_t v23 = v13;
            uint64_t v24 = v2;
            sub_1000E2488();
            Swift::Int v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

            sub_1000DF234(v25);
            uint64_t v2 = v24;
            unint64_t v13 = v23;
            swift_bridgeObjectRelease();
          }
          ++v16;
          uint64_t v18 = (void *)v33();
          [v18 deleteObject:v20];
        }
        while (v15 != v16);
        uint64_t v26 = swift_bridgeObjectRelease_n();
        id v3 = v32;
        goto LABEL_15;
      }
    }
    uint64_t v26 = swift_bridgeObjectRelease_n();
LABEL_15:
    char v27 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v26);
    id v34 = 0;
    unsigned __int8 v28 = [v27 save:&v34];

    id v11 = v34;
    if (v28)
    {
      id v29 = v34;

      return;
    }
  }
  id v30 = v11;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRelease();
}

uint64_t sub_1000E240C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E241C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E242C()
{
  return swift_release();
}

unint64_t sub_1000E2434()
{
  unint64_t result = qword_100321988;
  if (!qword_100321988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321988);
  }
  return result;
}

unint64_t sub_1000E2488()
{
  unint64_t result = qword_100321998;
  if (!qword_100321998)
  {
    sub_10008E0A0(255, &qword_100321990);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321998);
  }
  return result;
}

uint64_t sub_1000E24F0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000E2528()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned char **)(v0 + 24);
  id v3 = [self fetchRequest];
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856D0;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v5 = sub_1000A56A8();
  *(void *)(v4 + 64) = v5;
  *(void *)(v4 + 32) = 0x676E696F6774756FLL;
  *(void *)(v4 + 40) = 0xE800000000000000;
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v5;
  *(void *)(v4 + 72) = 0x646574656C6564;
  *(void *)(v4 + 80) = 0xE700000000000000;
  uint64_t v6 = NSPredicate.init(format:_:)();
  [v3 setPredicate:v6];

  id v8 = (id)(*(uint64_t (**)(void))(*(void *)v1 + 136))();
  sub_10008E0A0(0, (unint64_t *)&unk_100321B60);
  uint64_t v7 = NSManagedObjectContext.count<A>(for:)();

  if (v7 >= 1) {
    *uint64_t v2 = 1;
  }
}

uint64_t sub_1000E2714()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E2724()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E275C()
{
  return sub_1000A2B58(0x676E696F6774756FLL, 0xE800000000000000);
}

uint64_t sub_1000E2774()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E2784()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E2794()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

id sub_1000E27DC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 40);
  if ((unint64_t)v1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = (uint64_t)result;
    if (result) {
      goto LABEL_3;
    }
LABEL_30:
    uint64_t v35 = swift_bridgeObjectRelease();
LABEL_31:
    v36 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 136))(v35);
    v48[0] = 0;
    unsigned __int8 v37 = [v36 save:v48];

    id v38 = v48[0];
    if (v37)
    {
      return v38;
    }
    else
    {
      id v39 = v48[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      return (id)swift_errorRelease();
    }
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id result = (id)swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_30;
  }
LABEL_3:
  if (v3 >= 1)
  {
    unint64_t v40 = v2;
    uint64_t v5 = 0;
    unint64_t v45 = v1 & 0xC000000000000001;
    uint64_t v43 = v1 + 32;
    uint64_t v44 = v3;
    while (1)
    {
      if (v45) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v43 + 8 * v5);
      }
      uint64_t v9 = v8;
      id v10 = [self fetchRequest];
      sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
      sub_100080E08((uint64_t *)&unk_1003206A0);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = xmmword_1002856F0;
      v47 = v9;
      id v12 = [v9 recordName];
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      *(void *)(v11 + 56) = &type metadata for String;
      *(void *)(v11 + 64) = sub_1000A56A8();
      *(void *)(v11 + 32) = v13;
      *(void *)(v11 + 40) = v15;
      uint64_t v16 = NSPredicate.init(format:_:)();
      [v10 setPredicate:v16];

      v48[0] = 0;
      v46 = v10;
      id v17 = [v10 execute:v48];
      id v18 = v48[0];
      if (!v17)
      {
        id v25 = v48[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_10032B990 != -1) {
          swift_once();
        }
        uint64_t v26 = type metadata accessor for Logger();
        sub_100080F90(v26, (uint64_t)qword_10032B998);
        uint64_t v7 = v47;
        id v27 = v47;
        swift_errorRetain();
        id v28 = v27;
        swift_errorRetain();
        id v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = swift_slowAlloc();
          id v32 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v31 = 138412546;
          os_log_type_t type = v30;
          v48[0] = v28;
          log = v29;
          id v33 = v28;
          uint64_t v7 = v47;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v32 = v28;

          *(_WORD *)(v31 + 12) = 2112;
          swift_errorRetain();
          id v34 = (void *)_swift_stdlib_bridgeErrorToNSError();
          v48[0] = v34;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v32[1] = v34;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, log, type, "record to update not found %@: %@", (uint8_t *)v31, 0x16u);
          sub_100080E08((uint64_t *)&unk_100320B30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_errorRelease();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();
        }
        uint64_t v6 = v44;
        goto LABEL_6;
      }
      id v19 = v17;
      sub_10008E0A0(0, &qword_100321B58);
      unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v20 = v18;

      if (v2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
        if (v1)
        {
LABEL_13:
          if (v1 < 1)
          {
            __break(1u);
            goto LABEL_29;
          }
          uint64_t v21 = 0;
          do
          {
            if ((v2 & 0xC000000000000001) != 0) {
              id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v22 = *(id *)(v2 + 8 * v21 + 32);
            }
            unint64_t v23 = v22;
            ++v21;
            NSString v24 = String._bridgeToObjectiveC()();
            [v23 setCkstate:v24];
          }
          while (v1 != v21);
        }
      }
      else
      {
        uint64_t v1 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v1) {
          goto LABEL_13;
        }
      }

      swift_bridgeObjectRelease_n();
      uint64_t v6 = v44;
      uint64_t v7 = v47;
LABEL_6:
      ++v5;

      if (v5 == v6)
      {
        uint64_t v35 = swift_bridgeObjectRelease();
        unint64_t v2 = v40;
        goto LABEL_31;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E2DE8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E2DFC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000E2E3C()
{
  unint64_t v1 = v0[2];
  unint64_t v2 = (id *)v0[3];
  uint64_t v3 = v0[4];
  id v4 = [self fetchRequest];
  sub_10008E0A0(0, (unint64_t *)&unk_100320A30);
  sub_100080E08((uint64_t *)&unk_1003206A0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1002856F0;
  id v6 = [(id)v1 recordName];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_1000A56A8();
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v9;
  id v10 = NSPredicate.init(format:_:)();
  [v4 setPredicate:v10];

  id v43 = 0;
  id v11 = [v4 execute:&v43];
  id v12 = v43;
  if (!v11)
  {
    id v26 = v43;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    if (qword_10032B990 == -1)
    {
LABEL_12:
      uint64_t v27 = type metadata accessor for Logger();
      sub_100080F90(v27, (uint64_t)qword_10032B998);
      os_log_type_t v28 = static os_log_type_t.error.getter();
      id v29 = (id *)(id)v1;
      os_log_type_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = v28;
      if (!os_log_type_enabled(v30, v28))
      {

LABEL_23:
        return;
      }
      id v32 = (uint8_t *)swift_slowAlloc();
      id v33 = (void *)swift_slowAlloc();
      *(_DWORD *)id v32 = 138412290;
      id v43 = v29;
      id v34 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v33 = v29;

      _os_log_impl((void *)&_mh_execute_header, v30, v31, "record not found %@", v32, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
LABEL_21:
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_23;
    }
LABEL_26:
    swift_once();
    goto LABEL_12;
  }
  uint64_t v13 = v11;
  sub_10008E0A0(0, &qword_100321B58);
  unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = v12;

  if (!(v1 >> 62))
  {
    uint64_t v15 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_4;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    if (qword_10032B990 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100080F90(v36, (uint64_t)qword_10032B998);
    os_log_type_t v37 = static os_log_type_t.error.getter();
    swift_bridgeObjectRetain();
    os_log_type_t v30 = Logger.logObject.getter();
    os_log_type_t v38 = v37;
    if (!os_log_type_enabled(v30, v37))
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_23;
    }
    id v39 = (uint8_t *)swift_slowAlloc();
    id v43 = (id)swift_slowAlloc();
    *(_DWORD *)id v39 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v40 = Array.description.getter();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    sub_10008D114(v40, v42, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v30, v38, "no response %s", v39, 0xCu);
    swift_arrayDestroy();
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_17;
  }
LABEL_4:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_7;
  }
  if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_26;
  }
  id v16 = *(id *)(v1 + 32);
LABEL_7:
  id v17 = v16;
  swift_bridgeObjectRelease_n();
  uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v3 + 200))(v17);
  id v19 = *v2;
  *unint64_t v2 = (id)v18;

  id v20 = *v2;
  uint64_t v21 = *(uint64_t (**)(void *, id))(*(void *)v3 + 248);
  id v22 = *v2;
  LOBYTE(v20) = v21(v17, v20);

  if ((v20 & 1) == 0)
  {
LABEL_10:

    return;
  }
  unint64_t v23 = (void *)(*(uint64_t (**)(void))(*(void *)v3 + 136))();
  id v43 = 0;
  unsigned int v24 = [v23 save:&v43];

  if (v24)
  {
    id v25 = v43;
    goto LABEL_10;
  }
  id v35 = v43;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_errorRelease();
}

uint64_t sub_1000E3450()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000E3460()
{
  id v1 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 initWithEntityName:v2];

  id v4 = [objc_allocWithZone((Class)NSBatchDeleteRequest) initWithFetchRequest:v3];
  uint64_t v5 = *(uint64_t (**)(void))(*(void *)v0 + 136);
  id v6 = (void *)v5();
  id v15 = 0;
  id v7 = [v6 executeRequest:v4 error:&v15];

  if (v7)
  {
    id v8 = v15;
  }
  else
  {
    id v10 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v9 = swift_errorRelease();
  }
  id v11 = (void *)((uint64_t (*)(uint64_t))v5)(v9);
  id v15 = 0;
  unsigned int v12 = [v11 save:&v15];

  if (v12)
  {
    id v13 = v15;
  }
  else
  {
    id v14 = v15;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    id v3 = v4;
  }
}

uint64_t sub_1000E3610()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t destroy for StaticKeyData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for StaticKeyData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for StaticKeyData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StaticKeyData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StaticKeyData()
{
  return &type metadata for StaticKeyData;
}

uint64_t type metadata accessor for KTCloudStaticKey()
{
  return self;
}

uint64_t getEnumTagSinglePayload for StaticKeyData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for StaticKeyData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *id result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E3974);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StaticKeyData.CodingKeys()
{
  return &type metadata for StaticKeyData.CodingKeys;
}

unint64_t sub_1000E39B0()
{
  unint64_t result = qword_10032BBC0[0];
  if (!qword_10032BBC0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10032BBC0);
  }
  return result;
}

unint64_t sub_1000E3A08()
{
  unint64_t result = qword_10032BCD0;
  if (!qword_10032BCD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10032BCD0);
  }
  return result;
}

unint64_t sub_1000E3A60()
{
  unint64_t result = qword_10032BCD8[0];
  if (!qword_10032BCD8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10032BCD8);
  }
  return result;
}

unint64_t sub_1000E3AB4()
{
  unint64_t result = qword_100321B70;
  if (!qword_100321B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321B70);
  }
  return result;
}

uint64_t sub_1000E3B3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000E3BC0(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*sub_1000E3C4C())()
{
  return j_j__swift_endAccess;
}

double *KTBucket.__allocating_init(fillrate:maxTokens:)(double a1, double a2)
{
  uint64_t v4 = (double *)swift_allocObject();
  v4[3] = a1;
  v4[4] = a2;
  v4[2] = a2;
  Date.init()();
  return v4;
}

double *KTBucket.init(fillrate:maxTokens:)(double a1, double a2)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[3] = a1;
  v2[4] = a2;
  v2[2] = a2;
  Date.init()();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))((uint64_t)v2 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime, v8, v5);
  return v2;
}

uint64_t KTBucket.description.getter()
{
  (*(void (**)(void))(*(void *)v0 + 240))();
  v1._countAndFlagsBits = 91;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  (*(void (**)(void))(*(void *)v0 + 112))();
  Double.write<A>(to:)();
  v2._countAndFlagsBits = 47;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  (*(void (**)(void))(*(void *)v0 + 160))();
  Double.write<A>(to:)();
  v3._countAndFlagsBits = 60;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  (*(void (**)(void))(*(void *)v0 + 136))();
  Double.write<A>(to:)();
  v4._countAndFlagsBits = 23870;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  return 0;
}

BOOL sub_1000E3F44(double a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 240))();
  return (*(double (**)(uint64_t))(*(void *)v1 + 112))(v3) >= a1;
}

uint64_t sub_1000E3FB4(double a1)
{
  char v3 = (*(uint64_t (**)(void))(*(void *)v1 + 224))();
  if (v3)
  {
    Swift::String v4 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *))(*(void *)v1 + 128))(v7);
    *uint64_t v5 = *v5 - a1;
    v4(v7, 0);
  }
  return v3 & 1;
}

uint64_t sub_1000E406C()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v8 = Date.init()();
  (*(void (**)(uint64_t))(*(void *)v0 + 184))(v8);
  Date.timeIntervalSince(_:)();
  double v10 = v9;
  id v11 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  uint64_t v12 = v11(v5, v1);
  double v13 = v10 * (*(double (**)(uint64_t))(*(void *)v0 + 136))(v12);
  double v14 = v13 + (*(double (**)(void))(*(void *)v0 + 112))();
  v15.n128_f64[0] = (*(double (**)(void))(*(void *)v0 + 160))();
  if (v15.n128_f64[0] >= v14) {
    v15.n128_f64[0] = v14;
  }
  (*(void (**)(__n128))(*(void *)v0 + 120))(v15);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
  (*(void (**)(char *))(*(void *)v0 + 192))(v5);
  return v11(v7, v1);
}

uint64_t sub_1000E42A0()
{
  (*(void (**)(void))(*(void *)v0 + 160))();
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)v0 + 120);

  return v1();
}

void sub_1000E4308(double a1)
{
  if (a1 - (*(double (**)(void))(*(void *)v1 + 112))() > 0.0) {
    (*(double (**)(double))(*(void *)v1 + 136))(0.0);
  }
}

uint64_t KTBucket.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t KTBucket.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t sub_1000E4488()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

unint64_t KTNetworkBucketFeedback.init(rawValue:)(unint64_t result)
{
  if (result > 2) {
    return 0;
  }
  return result;
}

Swift::Int sub_1000E44DC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000E4524()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000E4550()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t *sub_1000E4594@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return result;
}

id sub_1000E45B0()
{
  id result = [objc_allocWithZone((Class)NSOperationQueue) init];
  qword_10032BD68 = (uint64_t)result;
  return result;
}

uint64_t sub_1000E45E4()
{
  return sub_1000E4664();
}

uint64_t sub_1000E45F0(uint64_t a1)
{
  return sub_1000E46B8(a1, &OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_quickStart);
}

uint64_t (*sub_1000E45FC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000E4658()
{
  return sub_1000E4664();
}

uint64_t sub_1000E4664()
{
  return swift_retain();
}

uint64_t sub_1000E46AC(uint64_t a1)
{
  return sub_1000E46B8(a1, &OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeout);
}

uint64_t sub_1000E46B8(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_release();
}

uint64_t (*sub_1000E4708())()
{
  return j__swift_endAccess;
}

id sub_1000E4764()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue);
}

void *sub_1000E4774()
{
  return &unk_1002885C0;
}

double sub_1000E4780()
{
  return 1.0;
}

void *sub_1000E4788()
{
  return &unk_1002885C8;
}

void *sub_1000E4794()
{
  return &unk_1002885D0;
}

double sub_1000E47A0()
{
  return 3600.0;
}

void *sub_1000E47B0()
{
  return &unk_1002885D8;
}

void *sub_1000E47BC()
{
  return &unk_1002885E0;
}

double sub_1000E47C8()
{
  return 1200.0;
}

void *sub_1000E47D8()
{
  return &unk_1002885E8;
}

double sub_1000E47E4()
{
  return 900.0;
}

id KTNetworkTimeoutBucket.init()()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v23 = *(void *)(v1 - 8);
  uint64_t v24 = v1;
  __chkstk_darwin(v1);
  id v22 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v21);
  id v20 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  id v19 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  double v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency;
  *(void *)&v0[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency] = 0;
  type metadata accessor for KTBucket();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 32) = 0x40AC200000000000;
  long long v18 = xmmword_1002885B0;
  *(_OWORD *)(v11 + 16) = xmmword_1002885B0;
  uint64_t v12 = v0;
  Date.init()();
  double v13 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  v13(v11 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime, v9, v6);
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_quickStart] = v11;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 32) = 0x40AC200000000000;
  *(_OWORD *)(v14 + 16) = v18;
  Date.init()();
  v13(v14 + OBJC_IVAR____TtC13transparencyd8KTBucket_lastFilltime, v9, v6);
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeout] = v14;
  __n128 v15 = *(void **)&v0[v10];
  *(void *)&v0[v10] = 0;

  sub_1000919E8();
  static DispatchQoS.unspecified.getter();
  id v26 = _swiftEmptyArrayStorage;
  sub_1000E56FC((unint64_t *)&unk_1003223A0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100080E08(&qword_10031FB60);
  sub_100091A28();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v23 + 104))(v22, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v24);
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  id v16 = (objc_class *)type metadata accessor for KTNetworkTimeoutBucket();
  v25.receiver = v12;
  v25.super_class = v16;
  return [super init];
}

uint64_t type metadata accessor for KTBucket()
{
  uint64_t result = qword_10032BF70;
  if (!qword_10032BF70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for KTNetworkTimeoutBucket()
{
  return self;
}

uint64_t KTNetworkTimeoutBucket.sysdiagnose.getter()
{
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

void sub_1000E4D5C(void *a1@<X0>, void *a2@<X8>)
{
  _StringGuts.grow(_:)(28);
  uint64_t v4 = swift_bridgeObjectRelease();
  strcpy((char *)v15, "Bucket[tokens:");
  HIBYTE(v15[1]) = -18;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x88))(v4);
  v6._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v5 + 216))();
  String.append(_:)(v6);
  swift_release();
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x3A6B636975717CLL;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  uint64_t v8 = (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x70))();
  v9._countAndFlagsBits = (*(uint64_t (**)(void))(*(void *)v8 + 216))();
  String.append(_:)(v9);
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)((char *)a1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency)) {
    uint64_t v10 = 0x64656B636F6C627CLL;
  }
  else {
    uint64_t v10 = 0;
  }
  if (*(void *)((char *)a1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency)) {
    unint64_t v11 = 0xE800000000000000;
  }
  else {
    unint64_t v11 = 0xE000000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 93;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  uint64_t v14 = v15[1];
  *a2 = v15[0];
  a2[1] = v14;
}

void sub_1000E4F4C(void *a1@<X8>)
{
  sub_1000E4D5C(*(void **)(v1 + 16), a1);
}

NSOperation_optional __swiftcall KTNetworkTimeoutBucket.networkTimeoutOperation()()
{
  sub_100080E08(&qword_100321BC0);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v1 = v2;
  result.value.super.isa = v1;
  result.is_nil = v0;
  return result;
}

uint64_t sub_1000E4FF0@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000E5FEC(a1);
}

NSOperation_optional __swiftcall KTNetworkTimeoutBucket.onQueueNetworkTimeoutOperation()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v46 = *(void *)(v2 - 8);
  uint64_t v47 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v44 = *(void *)(v5 - 8);
  uint64_t v45 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  id v43 = (char *)&v40 - v9;
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v48 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (uint64_t *)((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue);
  *id v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)();
  id v20 = (objc_class *)(*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v42 = v11;
  id v22 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency);
  id v23 = v22;
  if (!v22)
  {
    uint64_t v40 = OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency;
    uint64_t v41 = v10;
    uint64_t v24 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88);
    uint64_t v25 = ((uint64_t (*)(objc_class *))v24)(v20);
    char v26 = (*(uint64_t (**)(uint64_t, double))(*(void *)v25 + 224))(v25, 900.0);
    swift_release();
    if (v26)
    {
      id v23 = 0;
      goto LABEL_9;
    }
    id v23 = [objc_allocWithZone((Class)NSOperation) init];
    NSString v27 = String._bridgeToObjectiveC()();
    [v23 setName:v27];

    uint64_t v28 = *(void *)v24();
    double v29 = (*(double (**)(double))(v28 + 256))(900.0);
    swift_release();
    double v30 = v29 * 1000.0;
    id v49 = v18;
    id v31 = v18;
    id v20 = (objc_class *)static DispatchTime.now()();
    if ((~*(void *)&v30 & 0x7FF0000000000000) != 0)
    {
      uint64_t v32 = v41;
      if (v30 > -9.22337204e18)
      {
        if (v30 < 9.22337204e18)
        {
          *uint64_t v4 = (uint64_t)v30;
          uint64_t v34 = v46;
          uint64_t v33 = v47;
          (*(void (**)(void *, void, uint64_t))(v46 + 104))(v4, enum case for DispatchTimeInterval.milliseconds(_:), v47);
          + infix(_:_:)();
          (*(void (**)(void *, uint64_t))(v34 + 8))(v4, v33);
          (*(void (**)(char *, uint64_t))(v44 + 8))(v8, v45);
          id v35 = v48;
          OS_dispatch_queue.SchedulerTimeType.init(_:)();
          *(void *)(swift_allocObject() + 16) = v1;
          sub_1000919E8();
          sub_1000E56FC(&qword_100321BC8, (void (*)(uint64_t))sub_1000919E8);
          uint64_t v36 = v1;
          Scheduler.schedule(after:_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v42 + 8))(v35, v32);

          os_log_type_t v37 = *(void **)((char *)v1 + v40);
          *(void *)((char *)v1 + v40) = v23;
          id v38 = v23;

          goto LABEL_9;
        }
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
LABEL_9:
  id v39 = v22;
  id v20 = (objc_class *)v23;
LABEL_14:
  result.value.super.isa = v20;
  result.is_nil = v21;
  return result;
}

uint64_t sub_1000E5670()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E56A8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0xD0))();
}

uint64_t sub_1000E56FC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000E5788()
{
  uint64_t v1 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(v1 - 1);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, void *))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency);
  if (!v1) {
    return;
  }
  *(void *)(v0 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency) = 0;
  if (qword_10032BD60 != -1) {
    goto LABEL_7;
  }
LABEL_4:
  [(id)qword_10032BD68 addOperation:v1];
}

uint64_t KTNetworkTimeoutBucket.network(feedback:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(NSObject **)&v2[OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_queue];
  id v6 = (void *)swift_allocObject();
  v6[2] = a1;
  v6[3] = v2;
  v6[4] = ObjectType;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1000E5A9C;
  *(void *)(v7 + 24) = v6;
  v11[4] = sub_100091FB0;
  v11[5] = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_100091FD8;
  v11[3] = &unk_1002BFC90;
  uint64_t v8 = _Block_copy(v11);
  uint64_t v9 = v2;
  swift_retain();
  swift_release();
  dispatch_sync(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v5) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E5A64()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E5A9C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  if (v1 == 2)
  {
    if (*(void *)((char *)v2 + OBJC_IVAR____TtC13transparencyd22KTNetworkTimeoutBucket_networkTimeoutDependency)
      || (uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x88))(),
          char v6 = (*(uint64_t (**)(uint64_t, double))(*(void *)v5 + 224))(v5, 900.0),
          uint64_t result = swift_release(),
          (v6 & 1) == 0))
    {
      uint64_t v7 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x70))();
      char v8 = (*(uint64_t (**)(uint64_t, double))(*(void *)v7 + 232))(v7, 1200.0);
      uint64_t result = swift_release();
      if (v8) {
        return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xD0))(result);
      }
    }
  }
  else if (v1 == 1)
  {
    uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x88))();
    (*(void (**)(uint64_t, double))(*(void *)v3 + 232))(v3, 900.0);
    return swift_release();
  }
  else if (v1)
  {
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x88))();
    (*(void (**)(uint64_t))(*(void *)v9 + 248))(v9);
    uint64_t v10 = swift_release();
    uint64_t v11 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x70))(v10);
    (*(void (**)(uint64_t))(*(void *)v11 + 248))(v11);
    uint64_t v12 = swift_release();
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xD0))(v12);
  }
  return result;
}

uint64_t sub_1000E5DBC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E5DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000E5DDC()
{
  return swift_release();
}

id KTNetworkTimeoutBucket.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTNetworkTimeoutBucket();
  return [super dealloc];
}

unint64_t sub_1000E5EDC()
{
  unint64_t result = qword_100321BD0;
  if (!qword_100321BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321BD0);
  }
  return result;
}

uint64_t sub_1000E5F30()
{
  return type metadata accessor for KTBucket();
}

uint64_t sub_1000E5F38()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KTNetworkBucketFeedback()
{
  return &type metadata for KTNetworkBucketFeedback;
}

uint64_t sub_1000E5FEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v1 + 16)) + 0xC8))();
  *a1 = result;
  return result;
}

void sub_1000E6058(void *a1@<X8>)
{
}

uint64_t sub_1000E6070()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100087A78(v0, qword_10032BF88);
  sub_100080F90(v0, (uint64_t)qword_10032BF88);
  return Logger.init(transparencyCategory:)();
}

void sub_1000E60D4()
{
  byte_10032BFA8 = 1;
  qword_10032BFB0 = 0xEE00657461647055;
}

id KTUpdateCloudStorageOperation.__allocating_init(deps:source:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = objc_allocWithZone(v3);
  v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_shouldRetry] = 0;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps] = a1;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source] = a2;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_context] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return [super init];
}

id KTUpdateCloudStorageOperation.init(deps:source:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_shouldRetry] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps] = a1;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source] = a2;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_context] = a3;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for KTUpdateCloudStorageOperation();
  return [super init];
}

uint64_t type metadata accessor for KTUpdateCloudStorageOperation()
{
  return self;
}

Swift::Void __swiftcall KTUpdateCloudStorageOperation.groupStart()()
{
  uint64_t v1 = v0;
  id v2 = [*(id *)&v0[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps] ckdatabase];
  if (!v2) {
    return;
  }
  id v22 = v2;
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
  id v4 = [v3 pendingRecords];
  sub_10008E0A0(0, &qword_100321980);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v6 = [v3 deletedRecords];
  sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17) {
      goto LABEL_6;
    }
LABEL_4:
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v18) {
        goto LABEL_6;
      }
    }
    else if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_10032BF80 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100080F90(v19, (uint64_t)qword_10032BF88);
    os_log_type_t v20 = static os_log_type_t.info.getter();
    objc_super v9 = Logger.logObject.getter();
    if (os_log_type_enabled(v9, v20))
    {
      Swift::Bool v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::Bool v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v20, "KTUpdateCloudStorageOperation:perRecordSaveBlock: no records to upload/delete", v21, 2u);
      swift_slowDealloc();
    }
    goto LABEL_7;
  }
  if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_4;
  }
LABEL_6:
  v25.value._rawValue = (void *)sub_10008E0A0(0, (unint64_t *)&qword_100320B00);
  v24.value._rawValue = (void *)v5;
  v24.is_nil = v7;
  Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v24, v25).super.super.super.super.isa;
  [(objc_class *)isa setQualityOfService:25];
  objc_super v9 = isa;
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setName:v10];

  id v11 = [objc_allocWithZone((Class)NSBlockOperation) init];
  [v1 dependOnBeforeGroupFinished:v11];
  *(void *)(swift_allocObject() + 16) = v1;
  id v12 = v1;
  CKModifyRecordsOperation.perRecordSaveBlock.setter();
  *(void *)(swift_allocObject() + 16) = v12;
  id v13 = v12;
  CKModifyRecordsOperation.perRecordDeleteBlock.setter();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v11;
  id v15 = v13;
  id v16 = v11;
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
  [v22 addOperation:v9];

  id v22 = v16;
LABEL_7:
}

uint64_t sub_1000E66A8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000E66E0(void *a1, void *a2, char a3)
{
  v99 = *(char **)(v3 + 16);
  unint64_t v5 = *(void **)&v99[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps];
  if (a3)
  {
    swift_errorRetain();
    v97 = v5;
    id v19 = [v5 logger];
    if (qword_10032BFA0 != -1) {
      swift_once();
    }
    NSString v20 = String._bridgeToObjectiveC()();
    Swift::Bool v21 = (void *)_convertErrorToNSError(_:)();
    [v19 logResultForEvent:v20 hardFailure:1 result:v21];

    if (qword_10032BF80 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100080F90(v22, (uint64_t)qword_10032BF88);
    sub_10008FBAC(a2, 1);
    id v23 = a1;
    sub_10008FBAC(a2, 1);
    id v24 = v23;
    Swift::OpaquePointer_optional v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v28 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 138412546;
      id v29 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v28 = v24;

      *(_WORD *)(v27 + 12) = 2112;
      swift_errorRetain();
      uint64_t v101 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v28[1] = v101;
      sub_10008FBB8(a2, 1);
      sub_10008FBB8(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "KTUpdateCloudStorageOperation:perRecordSaveBlock: fail: %@ %@", (uint8_t *)v27, 0x16u);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10008FBB8(a2, 1);
      sub_10008FBB8(a2, 1);
    }

    uint64_t v101 = (uint64_t)a2;
    swift_errorRetain();
    sub_100080E08(&qword_10031F4C0);
    type metadata accessor for CKError(0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      sub_10008FBAC(a2, 1);
      id v45 = v24;
      sub_10008FBAC(a2, 1);
      id v46 = v45;
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc();
        v50 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 138412546;
        id v51 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v50 = v46;

        *(_WORD *)(v49 + 12) = 2112;
        swift_errorRetain();
        uint64_t v101 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v50[1] = v101;
        sub_10008FBB8(a2, 1);
        sub_10008FBB8(a2, 1);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "KTUpdateCloudStorageOperation:perRecordSaveBlock: fail: %@ %@", (uint8_t *)v49, 0x16u);
        sub_100080E08((uint64_t *)&unk_100320B30);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10008FBB8(a2, 1);
        sub_10008FBB8(a2, 1);
      }

      v52 = (void *)_convertErrorToNSError(_:)();
      [v99 setError:v52];
      sub_10008FBB8(a2, 1);

      return;
    }
    id v35 = v100;
    sub_1000A77E4(&qword_10031F9C0, type metadata accessor for CKError);
    _BridgedStoredNSError.code.getter();
    switch(v101)
    {
      case 11:
        sub_10008FBAC(a2, 1);
        id v53 = v24;
        sub_10008FBAC(a2, 1);
        id v54 = v53;
        v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = swift_slowAlloc();
          v58 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v57 = 138412546;
          v59 = v35;
          id v60 = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v58 = v54;

          id v35 = v59;
          *(_WORD *)(v57 + 12) = 2112;
          swift_errorRetain();
          v100 = (void *)_swift_stdlib_bridgeErrorToNSError();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v58[1] = v100;
          sub_10008FBB8(a2, 1);
          sub_10008FBB8(a2, 1);
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "KTUpdateCloudStorageOperation:perRecordSaveBlock: deleted: %@ %@", (uint8_t *)v57, 0x16u);
          sub_100080E08((uint64_t *)&unk_100320B30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10008FBB8(a2, 1);
          sub_10008FBB8(a2, 1);
        }

        uint64_t v87 = related decl 'e' for CKErrorCode.ancestorRecord.getter();
        if (v87)
        {
          v88 = (void *)v87;
          [*(id *)&v99[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source] deleteRecordWithCkrecord:v87];
          sub_10008FBB8(a2, 1);

LABEL_50:
          return;
        }
        [*(id *)&v99[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source] deleteRecordIDWithCkrecordID:v54];
        break;
      case 26:
        type metadata accessor for KTCKZone();
        uint64_t v61 = sub_100088420((uint64_t)*(id *)&v99[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_context]);
        id v62 = [v24 zoneID];
        id v63 = [v62 zoneName];

        uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v66 = v65;

        (*(void (**)(uint64_t, uint64_t, uint64_t (*)(void *), void))(*(void *)v61 + 120))(v64, v66, sub_10008CB30, 0);
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v67 = objc_allocWithZone((Class)KTPendingFlag);
        NSString v68 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v69 = [v67 initWithFlag:v68 delayInSeconds:0.1];

        id v70 = v24;
        v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v71, v72))
        {
          v73 = (uint8_t *)swift_slowAlloc();
          v100 = (void *)swift_slowAlloc();
          *(_DWORD *)v73 = 136315138;
          id v74 = [v70 zoneID];
          id v75 = [v74 zoneName];

          uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v78 = v77;

          sub_10008D114(v76, v78, (uint64_t *)&v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v71, v72, "will recreate the zone %s", v73, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        id v89 = [v97 flagHandler];
        if (v89)
        {
          [v89 handlePendingFlag:v69];
          sub_10008FBB8(a2, 1);

          swift_unknownObjectRelease();
        }
        else
        {
          sub_10008FBB8(a2, 1);
        }
        swift_release();
        return;
      case 14:
        uint64_t v36 = related decl 'e' for CKErrorCode.serverRecord.getter();
        if (v36)
        {
          os_log_type_t v37 = (void *)v36;
          sub_10008FBAC(a2, 1);
          id v38 = v24;
          sub_10008FBAC(a2, 1);
          id v39 = v38;
          uint64_t v40 = Logger.logObject.getter();
          os_log_type_t v41 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v40, v41))
          {
            uint64_t v42 = swift_slowAlloc();
            id v43 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v42 = 138412546;
            v98 = v40;
            id v44 = v39;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *id v43 = v39;

            *(_WORD *)(v42 + 12) = 2112;
            swift_errorRetain();
            v100 = (void *)_swift_stdlib_bridgeErrorToNSError();
            uint64_t v40 = v98;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v43[1] = v100;
            sub_10008FBB8(a2, 1);
            sub_10008FBB8(a2, 1);
            _os_log_impl((void *)&_mh_execute_header, v98, v41, "KTUpdateCloudStorageOperation:perRecordSaveBlock: serverRecord: %@ %@", (uint8_t *)v42, 0x16u);
            sub_100080E08((uint64_t *)&unk_100320B30);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            sub_10008FBB8(a2, 1);
            sub_10008FBB8(a2, 1);
          }

          v91 = *(void **)&v99[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
          [v91 updatedRecordWithCkrecord:v37];
          CKRecord.recordType.getter();
          NSString v92 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          sub_100080E08(&qword_100320D40);
          uint64_t v95 = swift_allocObject();
          *(_OWORD *)(v95 + 16) = xmmword_100287920;
          *(void *)(v95 + 32) = [v37 recordID];
          v100 = (void *)v95;
          specialized Array._endMutation()();
          sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
          v94.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          goto LABEL_49;
        }
        break;
      default:
        os_log_type_t v79 = static os_log_type_t.error.getter();
        sub_10008FBAC(a2, 1);
        id v80 = v24;
        sub_10008FBAC(a2, 1);
        id v81 = v80;
        v82 = Logger.logObject.getter();
        if (os_log_type_enabled(v82, v79))
        {
          uint64_t v83 = swift_slowAlloc();
          v84 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v83 = 138412546;
          v85 = v35;
          id v86 = v81;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v84 = v81;

          id v35 = v85;
          *(_WORD *)(v83 + 12) = 2112;
          swift_errorRetain();
          v100 = (void *)_swift_stdlib_bridgeErrorToNSError();
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v84[1] = v100;
          sub_10008FBB8(a2, 1);
          sub_10008FBB8(a2, 1);
          _os_log_impl((void *)&_mh_execute_header, v82, v79, "KTUpdateCloudStorageOperation:perRecordSaveBlock: ck fail: %@ %@", (uint8_t *)v83, 0x16u);
          sub_100080E08((uint64_t *)&unk_100320B30);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10008FBB8(a2, 1);
          sub_10008FBB8(a2, 1);
        }

        uint64_t v90 = related decl 'e' for CKErrorCode.ancestorRecord.getter();
        if (v90)
        {
          os_log_type_t v37 = (void *)v90;
          v91 = *(void **)&v99[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
          CKRecord.recordType.getter();
          NSString v92 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          sub_100080E08(&qword_100320D40);
          uint64_t v93 = swift_allocObject();
          *(_OWORD *)(v93 + 16) = xmmword_100287920;
          *(void *)(v93 + 32) = [v37 recordID];
          v100 = (void *)v93;
          specialized Array._endMutation()();
          sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
          v94.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
LABEL_49:
          NSString v96 = String._bridgeToObjectiveC()();
          [v91 recordUpdateCloudStateWithType:v92 records:v94.super.isa newState:v96];
          sub_10008FBB8(a2, 1);

          goto LABEL_50;
        }
        break;
    }
    sub_10008FBB8(a2, 1);
    goto LABEL_50;
  }
  id v6 = a2;
  unint64_t v7 = v5;
  id v8 = v6;
  id v9 = [v7 logger];
  if (qword_10032BFA0 != -1) {
    swift_once();
  }
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 logResultForEvent:v10 hardFailure:0 result:0];

  if (qword_10032BF80 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100080F90(v11, (uint64_t)qword_10032BF88);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  id v13 = v8;
  uint64_t v14 = Logger.logObject.getter();
  if (os_log_type_enabled(v14, v12))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    id v16 = (void *)swift_slowAlloc();
    *(_DWORD *)id v15 = 138412290;
    uint64_t v101 = (uint64_t)v13;
    id v17 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v16 = a2;
    sub_10008FBB8(a2, 0);
    sub_10008FBB8(a2, 0);
    _os_log_impl((void *)&_mh_execute_header, v14, v12, "KTUpdateCloudStorageOperation:perRecordSaveBlock: success: %@", v15, 0xCu);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10008FBB8(a2, 0);
    sub_10008FBB8(a2, 0);
  }

  double v30 = *(void **)&v99[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source];
  [v30 updatedRecordWithCkrecord:v13];
  CKRecord.recordType.getter();
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100080E08(&qword_100320D40);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_100287920;
  *(void *)(v32 + 32) = [v13 recordID];
  uint64_t v101 = v32;
  specialized Array._endMutation()();
  sub_10008E0A0(0, (unint64_t *)&unk_1003206B0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v34 = String._bridgeToObjectiveC()();
  [v30 recordUpdateCloudStateWithType:v31 records:isa newState:v34];

  sub_10008FBB8(a2, 0);
}

void sub_1000E799C(void *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_10032BF80 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100080F90(v14, (uint64_t)qword_10032BF88);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    id v16 = a1;
    sub_1000E8498(a2, 1);
    id v17 = v16;
    sub_1000E8498(a2, 1);
    os_log_type_t v18 = v15;
    log = Logger.logObject.getter();
    if (os_log_type_enabled(log, v15))
    {
      uint64_t v19 = swift_slowAlloc();
      NSString v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 138412546;
      id v21 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v20 = v17;

      *(_WORD *)(v19 + 12) = 2112;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v20[1] = v23;
      sub_10008FBA0(a2, 1);
      sub_10008FBA0(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, log, v18, "KTUpdateCloudStorageOperation:perRecordDeleteBlock: fail: %@ %@", (uint8_t *)v19, 0x16u);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10008FBA0(a2, 1);
    }
    else
    {
      sub_10008FBA0(a2, 1);

      sub_10008FBA0(a2, 1);
      sub_10008FBA0(a2, 1);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v3 + 16);
    if (qword_10032BF80 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100080F90(v6, (uint64_t)qword_10032BF88);
    id v7 = a1;
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      NSString v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = (void *)swift_slowAlloc();
      *(_DWORD *)NSString v10 = 138412290;
      id v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v11 = v7;

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "KTUpdateCloudStorageOperation:perRecordDeleteBlock: success: %@", v10, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    [*(id *)(v5 + OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_source) deleteRecordIDWithCkrecordID:v7];
  }
}

uint64_t sub_1000E7D88()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000E7DC8(uint64_t a1, char a2)
{
  id v4 = *(char **)(v2 + 16);
  uint64_t v3 = *(void *)(v2 + 24);
  if ((a2 & 1) == 0)
  {
    if (qword_10032BF80 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100080F90(v5, (uint64_t)qword_10032BF88);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    id v7 = Logger.logObject.getter();
    if (os_log_type_enabled(v7, v6))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v6, "KTUpdateCloudStorageOperation:modifyRecordsResultBlock: success", v8, 2u);
      swift_slowDealloc();
    }

    [objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps], "networkTimeout") networkWithFeedback:0];
    swift_unknownObjectRelease();
    goto LABEL_30;
  }
  swift_errorRetain();
  NSString v10 = (void *)_convertErrorToNSError(_:)();
  [v4 setError:v10];

  if (qword_10032BF80 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100080F90(v11, (uint64_t)qword_10032BF88);
  os_log_type_t v12 = static os_log_type_t.error.getter();
  swift_errorRetain();
  swift_errorRetain();
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = v12;
  if (os_log_type_enabled(v13, v12))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    id v16 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v15 = 138412290;
    swift_errorRetain();
    uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v16 = v36;
    sub_10008FBA0(a1, 1);
    sub_10008FBA0(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "KTUpdateCloudStorageOperation:modifyRecordsResultBlock: fail: %@", v15, 0xCu);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10008FBA0(a1, 1);
    sub_10008FBA0(a1, 1);
  }

  id v17 = (void *)_convertErrorToNSError(_:)();
  os_log_type_t v18 = (void *)_convertErrorToNSError(_:)();
  CKRetryAfterSecondsForError();
  double v20 = v19;

  id v21 = *(void **)&v4[OBJC_IVAR____TtC13transparencyd29KTUpdateCloudStorageOperation_deps];
  id v22 = [v21 reachabilityTracker];
  uint64_t v23 = (void *)_convertErrorToNSError(_:)();
  unsigned int v24 = [v22 isNetworkError:v23];

  if (v24)
  {
    if (v20 < 0.1) {
      double v20 = 2.0;
    }
    id v25 = objc_allocWithZone((Class)KTPendingFlag);
    NSString v26 = String._bridgeToObjectiveC()();
    id v27 = [v25 initWithFlag:v26 conditions:2 delayInSeconds:v20];

    if (!v27) {
      goto LABEL_27;
    }
LABEL_25:
    id v33 = v27;
    id v34 = [v21 flagHandler];
    if (v34)
    {
      [v34 handlePendingFlag:v33];

      sub_10008FBA0(a1, 1);
      swift_unknownObjectRelease();
    }
    else
    {

      sub_10008FBA0(a1, 1);
    }

    goto LABEL_30;
  }
  id v28 = [v21 cloudKitOutgoingNFS];
  if (!v28)
  {
LABEL_27:
    sub_10008FBA0(a1, 1);

LABEL_30:
    id v35 = [v4 operationQueue];
    [v35 addOperation:v3];

    return;
  }
  id v29 = v28;
  if (v20 > 0.1)
  {
LABEL_24:
    id v30 = objc_allocWithZone((Class)KTPendingFlag);
    id v31 = v29;
    NSString v32 = String._bridgeToObjectiveC()();
    id v27 = [v30 initWithFlag:v32 scheduler:v31];

    [v31 trigger];
    if (v27) {
      goto LABEL_25;
    }
    goto LABEL_27;
  }
  if ((~*(void *)&v20 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v20 <= -1.0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v20 >= 1.84467441e19)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (is_mul_ok((unint64_t)v20, 0x3B9ACA00uLL))
  {
    [v28 waitUntil:1000000000 * (unint64_t)v20];
    goto LABEL_24;
  }
LABEL_34:
  __break(1u);
}

void KTUpdateCloudStorageOperation.init()()
{
}

id KTUpdateCloudStorageOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTUpdateCloudStorageOperation();
  return [super dealloc];
}

uint64_t sub_1000E8498(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  return result;
}

void *sub_1000E84A8()
{
  return &unk_1002BFD50;
}

uint64_t sub_1000E84B4()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_100321DA8 + dword_100321DA8);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000E8554;
  return v3();
}

uint64_t sub_1000E8554(char a1)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (v1) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = a1 & 1;
  }
  return v4(v5);
}

uint64_t sub_1000E865C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100080E08(&qword_10031F4C0);
    uint64_t v5 = swift_allocError();
    *os_log_type_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v8 = *(void *)(*(void *)(v3 + 64) + 40);
    id v9 = a2;
    sub_1000C1364((uint64_t)&v11, v8, &qword_100321E98);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000E8728(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100080E08(&qword_10031F4C0);
    uint64_t v5 = swift_allocError();
    *os_log_type_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2)
    {
      sub_100080E08((uint64_t *)&unk_100321E88);
      uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v10 = v8;
    sub_1000C1364((uint64_t)&v10, *(void *)(*(void *)(v3 + 64) + 40), &qword_100321E80);
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000E898C(const void *a1)
{
  *(void *)(v1 + 16) = _Block_copy(a1);
  uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_100321DA8 + dword_100321DA8);
  objc_super v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 24) = v2;
  *objc_super v2 = v1;
  v2[1] = sub_1000E8A34;
  return v4();
}

uint64_t sub_1000E8A34(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v8 = *(void *)(v5 + 16);
  if (v3)
  {
    id v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 16));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

void sub_1000E8BAC(char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100080E08(&qword_10031F4B0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = [self defaultManager];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 containerURLForSecurityApplicationGroupIdentifier:v10];

  if (v11)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v12(v8, v5, v2);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v2);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1)
    {

      v12(a1, v8, v2);
      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
  }
  sub_100087A1C((uint64_t)v8, &qword_10031F4B0);
  sub_1000AAC6C();
  swift_allocError();
  *id v13 = 2;
  swift_willThrow();
}

id sub_1000E8F60()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EligibilitySupport();
  return [super init];
}

id sub_1000E8FD4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EligibilitySupport();
  return [super dealloc];
}

uint64_t sub_1000E9008()
{
  uint64_t v1 = type metadata accessor for Logger();
  v0[42] = v1;
  v0[43] = *(void *)(v1 - 8);
  v0[44] = swift_task_alloc();
  return _swift_task_switch(sub_1000E90C4, 0, 0);
}

uint64_t sub_1000E90C4()
{
  id v1 = [objc_allocWithZone((Class)ACAccountStore) init];
  v0[45] = v1;
  v0[2] = v0;
  v0[7] = v0 + 40;
  v0[3] = sub_1000E91E0;
  uint64_t v2 = swift_continuation_init();
  v0[23] = _NSConcreteStackBlock;
  v0[24] = 0x40000000;
  v0[25] = sub_1000E865C;
  v0[26] = &unk_1002BFE30;
  v0[27] = v2;
  [v1 aa_primaryAppleAccountWithCompletion:v0 + 23];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000E91E0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 368) = v1;
  if (v1) {
    uint64_t v2 = sub_1000E9A18;
  }
  else {
    uint64_t v2 = sub_1000E92F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E92F0()
{
  uint64_t v1 = (void *)v0[40];
  v0[47] = v1;
  if (v1)
  {
    id v2 = v1;
    id v3 = [v2 aa_altDSID];
    v0[48] = v3;
    id v4 = [objc_allocWithZone((Class)AKAppleIDAuthenticationController) init];
    v0[49] = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      v0[50] = isa;
      v0[10] = v0;
      v0[15] = v0 + 41;
      v0[11] = sub_1000E96CC;
      uint64_t v7 = swift_continuation_init();
      v0[18] = _NSConcreteStackBlock;
      v0[19] = 0x40000000;
      v0[20] = sub_1000E8728;
      v0[21] = &unk_1002BFE48;
      v0[22] = v7;
      [v5 configurationInfoWithIdentifiers:isa forAltDSID:v3 completion:v0 + 18];
      return _swift_continuation_await(v0 + 10);
    }
    uint64_t v12 = (void *)v0[45];

    os_log_type_t v18 = self;
    sub_1000A7A6C();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v20 = String._bridgeToObjectiveC()();
    [v18 errorWithDomain:v19 code:-396 underlyingError:0 userinfo:0 description:v20];

    swift_willThrow();
  }
  else
  {
    Logger.init()();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    id v9 = Logger.logObject.getter();
    if (os_log_type_enabled(v9, v8))
    {
      NSString v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v8, "Can't report eligibility, no primary account found", v10, 2u);
      swift_slowDealloc();
    }
    uint64_t v11 = v0[44];
    uint64_t v12 = (void *)v0[45];
    uint64_t v13 = v0[42];
    uint64_t v14 = v0[43];

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
    os_log_type_t v15 = self;
    sub_1000A7A6C();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v17 = String._bridgeToObjectiveC()();
    [v15 errorWithDomain:v16 code:-396 underlyingError:0 userinfo:0 description:v17];

    swift_willThrow();
  }

  swift_task_dealloc();
  id v21 = (uint64_t (*)(void))v0[1];
  return v21(0);
}

uint64_t sub_1000E96CC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 408) = v1;
  if (v1) {
    id v2 = sub_1000E9A94;
  }
  else {
    id v2 = sub_1000E97DC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1000E97DC()
{
  uint64_t v1 = *(void **)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 328);

  if (v2)
  {
    if (*(void *)(v2 + 16) && (sub_100089D6C(0xD000000000000029, 0x800000010024F4B0), (v3 & 1) != 0))
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRelease();
      self;
      uint64_t v4 = (void *)swift_dynamicCastObjCClass();
      if (v4)
      {
        uint64_t v5 = *(void **)(v0 + 392);
        uint64_t v6 = *(void **)(v0 + 376);
        uint64_t v7 = *(void **)(v0 + 360);
        unsigned int v8 = [v4 intValue];

        swift_unknownObjectRelease();
        swift_task_dealloc();
        id v9 = *(uint64_t (**)(BOOL))(v0 + 8);
        BOOL v10 = v8 != 0;
        goto LABEL_8;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v11 = *(void **)(v0 + 392);
  uint64_t v12 = *(void **)(v0 + 376);
  uint64_t v13 = *(void **)(v0 + 360);
  uint64_t v14 = self;
  sub_1000A7A6C();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v16 = String._bridgeToObjectiveC()();
  [v14 errorWithDomain:v15 code:-396 underlyingError:0 userinfo:0 description:v16];

  swift_willThrow();
  swift_task_dealloc();
  id v9 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v10 = 0;
LABEL_8:
  return v9(v10);
}

uint64_t sub_1000E9A18()
{
  uint64_t v1 = *(void **)(v0 + 360);
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_1000E9A94()
{
  uint64_t v1 = (void *)v0[50];
  char v3 = (void *)v0[48];
  uint64_t v2 = (void *)v0[49];
  uint64_t v4 = (void *)v0[47];
  uint64_t v5 = (void *)v0[45];
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6(0);
}

uint64_t type metadata accessor for EligibilitySupport()
{
  return self;
}

uint64_t sub_1000E9B64()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E9BA4()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *char v3 = v1;
  v3[1] = sub_10008B484;
  uint64_t v4 = (uint64_t (*)(const void *))((char *)&dword_100321DE0 + dword_100321DE0);
  return v4(v2);
}

uint64_t sub_1000E9C58()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E9C90()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_lastIDSRec);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1000E9CD8(char a1)
{
  char v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_lastIDSRec);
  uint64_t result = swift_beginAccess();
  *char v3 = a1;
  return result;
}

uint64_t (*sub_1000E9D24())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000E9D80()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_hasDoneOSUpdate);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1000E9DC8(char a1)
{
  char v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_hasDoneOSUpdate);
  uint64_t result = swift_beginAccess();
  *char v3 = a1;
  return result;
}

uint64_t (*sub_1000E9E14())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000E9E70()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideReportStatus);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_1000E9EB8(char a1)
{
  char v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideReportStatus);
  uint64_t result = swift_beginAccess();
  *char v3 = a1;
  return result;
}

uint64_t (*sub_1000E9F04())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000E9F60()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideTimeBetweenReports;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1000E9FAC(uint64_t a1, char a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideTimeBetweenReports;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_1000EA00C())()
{
  return j_j__swift_endAccess;
}

id sub_1000EA068()
{
  v0[OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_lastIDSRec] = 2;
  v0[OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_hasDoneOSUpdate] = 2;
  v0[OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideReportStatus] = 2;
  uint64_t v1 = &v0[OBJC_IVAR____TtC13transparencyd20EligibilityOverrides_overrideTimeBetweenReports];
  *(void *)uint64_t v1 = 0;
  v1[8] = 1;
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for EligibilityOverrides();
  return [super init];
}

uint64_t type metadata accessor for EligibilityOverrides()
{
  return self;
}

uint64_t sub_1000EA180()
{
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x78))(2);
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x90))(2);
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0xA8))(2);
  uint64_t v1 = *(uint64_t (**)(void, uint64_t))((swift_isaMask & *v0) + 0xC0);

  return v1(0, 1);
}

uint64_t sub_1000EA3B4()
{
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0xA8))(2);
}

uint64_t sub_1000EA3EC(char a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x78))(a1 & 1);
}

uint64_t sub_1000EA4B0(char a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x90))(a1 & 1);
}

uint64_t sub_1000EA574(char a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA8))(a1 & 1);
}

uint64_t sub_1000EA5AC(double a1)
{
  return (*(uint64_t (**)(void, void))((swift_isaMask & *v1) + 0xC0))(*(void *)&a1, 0);
}

uint64_t sub_1000EA5E8(uint64_t a1)
{
  int v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x70))();
  if (v3 == 2) {
    return a1;
  }
  else {
    return ~(2 * v3) & 2;
  }
}

uint64_t sub_1000EA650(char a1)
{
  char v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0))();
  if (v3 == 2) {
    char v4 = a1;
  }
  else {
    char v4 = v3;
  }
  return v4 & 1;
}

uint64_t sub_1000EA6B4()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8))();
}

id sub_1000EA714()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for EligibilityOverrides();
  return [super dealloc];
}

void sub_1000EA748()
{
  qword_10032F648 = 1919247728;
  unk_10032F650 = 0xE400000000000000;
}

uint64_t *sub_1000EA764()
{
  if (qword_10032C440 != -1) {
    swift_once();
  }
  return &qword_10032F648;
}

void sub_1000EA7B0()
{
  qword_10032F658 = 1718379891;
  unk_10032F660 = 0xE400000000000000;
}

uint64_t *sub_1000EA7CC()
{
  if (qword_10032C448 != -1) {
    swift_once();
  }
  return &qword_10032F658;
}

void sub_1000EA818()
{
  qword_10032F668 = 0x6E6F676174636FLL;
  unk_10032F670 = 0xE700000000000000;
}

uint64_t *sub_1000EA83C()
{
  if (qword_10032C450 != -1) {
    swift_once();
  }
  return &qword_10032F668;
}

void sub_1000EA888()
{
  qword_10032F678 = 1936419683;
  unk_10032F680 = 0xE400000000000000;
}

uint64_t *sub_1000EA8A4()
{
  if (qword_10032C458 != -1) {
    swift_once();
  }
  return &qword_10032F678;
}

void sub_1000EA8F0()
{
  unk_10032F697 = -18;
}

uint64_t *sub_1000EA920()
{
  if (qword_10032C460 != -1) {
    swift_once();
  }
  return &qword_10032F688;
}

void *sub_1000EA96C()
{
  return &unk_1002BFE60;
}

void sub_1000EA978()
{
  qword_10032F698 = 0x6F6973726556736FLL;
  unk_10032F6A0 = 0xE90000000000006ELL;
}

uint64_t *sub_1000EA9A0()
{
  if (qword_10032C468 != -1) {
    swift_once();
  }
  return &qword_10032F698;
}

void sub_1000EA9EC()
{
  unk_10032F6B7 = -18;
}

uint64_t *sub_1000EAA1C()
{
  if (qword_10032C470 != -1) {
    swift_once();
  }
  return &qword_10032F6A8;
}

uint64_t sub_1000EAA68(unint64_t a1)
{
  if (a1 < 3) {
    return *(void *)&aSuccess_1[8 * a1];
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_1000EAAD8()
{
  return *(void *)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result);
}

void *sub_1000EAAE8()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error);
  id v2 = v1;
  return v1;
}

uint64_t sub_1000EAB18()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1000EAC74@<X0>(uint64_t a1@<X8>)
{
  return sub_1000985E0(v1 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored, a1);
}

uint64_t sub_1000EACF0()
{
  _StringGuts.grow(_:)(38);
  uint64_t v1 = (void *)0xE100000000000000;
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_getObjectType();
  v3._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x6E656D656C65203ALL;
  v4._object = (void *)0xEB00000000203A74;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element);
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element + 8);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x3A746C7573657220;
  v8._object = (void *)0xE900000000000020;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x203A726F72726520;
  v9._object = (void *)0xE800000000000000;
  String.append(_:)(v9);
  BOOL v10 = *(void **)(v0 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error);
  if (v10)
  {
    id v11 = [v10 description];
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v1 = v13;
  }
  else
  {
    uint64_t v12 = 45;
  }
  v14._countAndFlagsBits = v12;
  v14._object = v1;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 62;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 0;
}

id sub_1000EAEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = (char *)objc_allocWithZone(v5);
  *(void *)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = a1;
  *(void *)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = a4;
  uint64_t v12 = &v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)uint64_t v12 = a2;
  *((void *)v12 + 1) = a3;
  sub_1000985E0(a5, (uint64_t)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v15.receiver = v11;
  v15.super_class = v5;
  id v13 = [super init];
  sub_100087A1C(a5, (uint64_t *)&unk_10031F9A0);
  return v13;
}

id sub_1000EAF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = a1;
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = a4;
  uint64_t v12 = &v5[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)uint64_t v12 = a2;
  *((void *)v12 + 1) = a3;
  sub_1000985E0(a5, (uint64_t)&v5[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v15.receiver = v5;
  v15.super_class = ObjectType;
  id v13 = [super init];
  sub_100087A1C(a5, (uint64_t *)&unk_10031F9A0);
  return v13;
}

id sub_1000EB034(uint64_t a1, uint64_t a2)
{
  Swift::String v3 = v2;
  uint64_t v6 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v6 - 8);
  Swift::String v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  BOOL v10 = (char *)objc_allocWithZone(v3);
  *(void *)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = 0;
  *(void *)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = 0;
  id v11 = &v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)id v11 = a1;
  *((void *)v11 + 1) = a2;
  sub_1000985E0((uint64_t)v8, (uint64_t)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v14.receiver = v10;
  v14.super_class = v3;
  swift_bridgeObjectRetain();
  id v12 = [super init];
  sub_100087A1C((uint64_t)v8, (uint64_t *)&unk_10031F9A0);
  return v12;
}

id sub_1000EB2EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000985E0(a3, (uint64_t)v9);
  BOOL v10 = (char *)objc_allocWithZone(v3);
  *(void *)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = 0;
  *(void *)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = 0;
  id v11 = &v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)id v11 = a1;
  *((void *)v11 + 1) = a2;
  sub_1000985E0((uint64_t)v9, (uint64_t)&v10[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v14.receiver = v10;
  v14.super_class = v3;
  swift_bridgeObjectRetain();
  id v12 = [super init];
  sub_100087A1C((uint64_t)v9, (uint64_t *)&unk_10031F9A0);
  return v12;
}

void sub_1000EB7E0()
{
}

id sub_1000EB840()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t sub_1000EB8D4(unint64_t a1)
{
  if (a1 < 3) {
    return qword_100288AA0[a1];
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_1000EB938(uint64_t a1, uint64_t a2)
{
  if (a1 == 49 && a2 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    return 0;
  }
  if (a1 == 48 && a2 == 0xE100000000000000) {
    return 2;
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    return 2;
  }
  return 1;
}

uint64_t sub_1000EB9D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  Swift::String v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_1000EBB7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport;
  swift_beginAccess();
  return sub_1000985E0(v3, a1);
}

uint64_t sub_1000EBD10(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport;
  swift_beginAccess();
  sub_1000C12FC(a1, v3);
  return swift_endAccess();
}

uint64_t (*sub_1000EBD6C())()
{
  return j__swift_endAccess;
}

double sub_1000EBE10()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t sub_1000EBEAC(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000EBF00())()
{
  return j_j__swift_endAccess;
}

id sub_1000EBF5C(uint64_t a1, double a2)
{
  id v5 = objc_allocWithZone(v2);
  uint64_t v6 = (uint64_t)v5 + OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  swift_beginAccess();
  uint64_t v8 = (char *)v5;
  sub_1000F5E08(a1, v6);
  swift_endAccess();
  *(double *)&v8[OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports] = a2;

  v11.receiver = v8;
  v11.super_class = v2;
  id v9 = [super init];
  sub_100087A1C(a1, (uint64_t *)&unk_10031F9A0);
  return v9;
}

id sub_1000EC05C(uint64_t a1, double a2)
{
  uint64_t v5 = (uint64_t)v2 + OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport;
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  swift_beginAccess();
  uint64_t v7 = v2;
  sub_1000F5E08(a1, v5);
  swift_endAccess();
  *(double *)&v7[OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports] = a2;

  v10.receiver = v7;
  v10.super_class = (Class)type metadata accessor for ReportTime(0);
  id v8 = [super init];
  sub_100087A1C(a1, (uint64_t *)&unk_10031F9A0);
  return v8;
}

void sub_1000EC158()
{
}

id sub_1000EC1B8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReportTime(0);
  return [super dealloc];
}

uint64_t sub_1000EC21C()
{
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1000EC254@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_logger;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1000EC2C8()
{
  sub_100080E08(&qword_100320AD0);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_100285700;
  if (qword_10032C440 != -1) {
    swift_once();
  }
  uint64_t v1 = unk_10032F650;
  *(void *)(v0 + 32) = qword_10032F648;
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = qword_10032C448;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = unk_10032F660;
  *(void *)(v0 + 48) = qword_10032F658;
  *(void *)(v0 + 56) = v3;
  uint64_t v4 = qword_10032C450;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = unk_10032F670;
  *(void *)(v0 + 64) = qword_10032F668;
  *(void *)(v0 + 72) = v5;
  uint64_t v6 = qword_10032C458;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = unk_10032F680;
  *(void *)(v0 + 80) = qword_10032F678;
  *(void *)(v0 + 88) = v7;
  qword_10032F6B8 = v0;

  return swift_bridgeObjectRetain();
}

uint64_t *sub_1000EC430()
{
  if (qword_10032C478 != -1) {
    swift_once();
  }
  return &qword_10032F6B8;
}

uint64_t sub_1000EC47C()
{
  if (qword_10032C478 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_1000EC4D8()
{
  return swift_retain();
}

uint64_t sub_1000EC524(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_db);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*sub_1000EC578())()
{
  return j_j__swift_endAccess;
}

id sub_1000EC5D4()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides);
}

uint64_t sub_1000EC5E4()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000EC5F4()
{
  return swift_unknownObjectRetain();
}

double sub_1000EC604()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_timeBetweenReports;
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t sub_1000EC64C(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_timeBetweenReports);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000EC6A0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000EC6FC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_samplesPerDay;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1000EC744(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_samplesPerDay);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000EC790())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000EC7EC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_numberOfSamples;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t sub_1000EC834(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_numberOfSamples);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*sub_1000EC880())()
{
  return j_j__swift_endAccess;
}

char *sub_1000EC8DC(char *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EC940(a1, a2, a3);
}

char *sub_1000EC940(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  uint64_t v4 = v3;
  uint64_t v28 = a3;
  NSString v32 = a1;
  uint64_t v5 = type metadata accessor for URL.DirectoryHint();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  id v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  objc_super v15 = (char *)v26 - v14;
  swift_defaultActor_initialize();
  NSString v16 = &v3[OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_logger];
  swift_retain();
  v26[0] = v16;
  Logger.init(subsystem:category:)();
  unint64_t v30 = 0xD000000000000012;
  unint64_t v31 = 0x800000010024F720;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v5);
  sub_100090D14();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease();
  type metadata accessor for KTEligibilityDB();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
  uint64_t v17 = v26[1];
  uint64_t v18 = KTEligibilityDB.__allocating_init(path:)(v13);
  if (v17)
  {
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    NSString v19 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v19((uint64_t)v32, v9);
    v19((uint64_t)v15, v9);
    uint64_t v20 = type metadata accessor for Logger();
    (*(void (**)(void, uint64_t))(*(void *)(v20 - 8) + 8))(v26[0], v20);
    swift_release();
    type metadata accessor for KTEligibilityStatusReporting(0);
    swift_defaultActor_destroy();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)&v3[OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_db] = v18;
    type metadata accessor for EligibilityOverrides();
    id v21 = KTUpdateCloudStorageOperation.__allocating_init()();
    id v22 = *(void (**)(char *, uint64_t))(v10 + 8);
    v22(v15, v9);
    *(void *)&v4[OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides] = v21;
    uint64_t v23 = v28;
    *(void *)&v4[OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_idsEventReportingManager] = v27;
    *(void *)&v4[OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_support] = v23;
    *(void *)&v4[OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_samplesPerDay] = 1;
    *(void *)&v4[OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_timeBetweenReports] = 0x4122750000000000;
    *(void *)&v4[OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_numberOfSamples] = 60;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_release();
    unsigned int v24 = (objc_class *)type metadata accessor for KTEligibilityStatusReporting(0);
    v29.receiver = v4;
    v29.super_class = v24;
    uint64_t v4 = (char *)[super init];
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v22(v32, v9);
  }
  return v4;
}

uint64_t sub_1000ECE90(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for Date();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return _swift_task_switch(sub_1000ECF50, v1, 0);
}

uint64_t sub_1000ECF50()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (void *)v0[3];
  uint64_t v3 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0x98);
  unint64_t v4 = ((swift_isaMask & *v2) + 152) & 0xFFFFFFFFFFFFLL | 0xBB03000000000000;
  v0[7] = v3;
  v0[8] = v4;
  v0[9] = v3();
  if (v1) {
    uint64_t v5 = 48;
  }
  else {
    uint64_t v5 = 49;
  }
  uint64_t v6 = (void *)swift_task_alloc();
  v0[10] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_1000ED058;
  return sub_1000AA374(0xD000000000000012, 0x800000010024F680, v5, 0xE100000000000000);
}

uint64_t sub_1000ED058()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    unint64_t v4 = sub_1000ED430;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 24);
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v4 = sub_1000ED18C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000ED18C()
{
  *(void *)(v0 + 96) = (*(uint64_t (**)(void))(v0 + 56))();
  if (qword_10032C460 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = qword_10032F688;
  uint64_t v5 = unk_10032F690;
  static Date.now.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v6 = Double.description.getter();
  uint64_t v8 = v7;
  *(void *)(v0 + 104) = v7;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1000ED2DC;
  return sub_1000AA374(v4, v5, v6, v8);
}

uint64_t sub_1000ED2DC()
{
  uint64_t v2 = (void *)*v1;
  v2[15] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[3];
    return _swift_task_switch(sub_1000ED4A8, v3, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_1000ED430()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000ED4A8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000ED51C()
{
  v1[41] = v0;
  uint64_t v2 = type metadata accessor for Date();
  v1[42] = v2;
  v1[43] = *(void *)(v2 - 8);
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  return _swift_task_switch(sub_1000ED5EC, v0, 0);
}

uint64_t sub_1000ED5EC()
{
  uint64_t v1 = (void *)v0[41];
  uint64_t v2 = Date.init()();
  uint64_t v3 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xE0);
  uint64_t result = v3(v2);
  if (result == 0x8000000000000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if ((unsigned __int128)(-result * (__int128)86400) >> 64 != (-86400 * result) >> 63)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = v0[44];
  uint64_t v6 = v0[42];
  uint64_t v7 = v0[43];
  uint64_t v8 = (void *)v0[41];
  Date.addingTimeInterval(_:)();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  v0[46] = v9;
  v0[47] = (v7 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v10 = v9(v5, v6);
  uint64_t v11 = v3(v10);
  id v13 = (uint64_t (*)(uint64_t, void, void))(*(void *)((swift_isaMask & *v8) + 0x138)
                                                        + **(int **)((swift_isaMask & *v8) + 0x138));
  uint64_t v12 = (void *)swift_task_alloc();
  v0[48] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1000ED7D8;
  return v13(v11, 0, 0);
}

uint64_t sub_1000ED7D8(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(v4 + 392) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 328);
  if (v1)
  {
    uint64_t v6 = sub_1000EE444;
  }
  else
  {
    *(unsigned char *)(v4 + 473) = a1 & 1;
    uint64_t v6 = sub_1000ED918;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000ED918()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 473);
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v3 = *(void **)(v2 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides);
  *(void *)(v0 + 400) = v3;
  (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0x108))(v1);
  uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_idsEventReportingManager);
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  *(void *)(v0 + 408) = isa;
  Date.timeIntervalSince1970.getter();
  double v7 = v6;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 304;
  *(void *)(v0 + 24) = sub_1000EDAB4;
  uint64_t v8 = swift_continuation_init();
  *(void *)(v0 + 120) = _NSConcreteStackBlock;
  *(void *)(v0 + 128) = 0x40000000;
  *(void *)(v0 + 136) = sub_1000EEA58;
  *(void *)(v0 + 144) = &unk_1002BFE70;
  *(void *)(v0 + 152) = v8;
  [v4 reportResultWithSuccess:isa startFrom:v0 + 120 completionHandler:v7];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1000EDAB4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 416) = v2;
  uint64_t v3 = *(void *)(v1 + 328);
  if (v2) {
    uint64_t v4 = sub_1000EE6BC;
  }
  else {
    uint64_t v4 = sub_1000EDBD4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000EDBD4()
{
  uint64_t v33 = v0;
  uint64_t v1 = *(void *)(v0 + 304);

  if (!v1) {
    goto LABEL_31;
  }
  *(void *)(v0 + 280) = 0x722D74726F706572;
  *(void *)(v0 + 288) = 0xEF65736E6F707365;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v1 + 16) && (unint64_t v2 = sub_1000F5A0C(v0 + 160), (v3 & 1) != 0))
  {
    sub_100089D08(*(void *)(v1 + 56) + 32 * v2, v0 + 232);
  }
  else
  {
    *(_OWORD *)(v0 + 232) = 0u;
    *(_OWORD *)(v0 + 248) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000F5EB0(v0 + 160);
  if (!*(void *)(v0 + 256))
  {
    uint64_t v8 = v0 + 232;
LABEL_30:
    sub_100087A1C(v8, &qword_10031FB78);
    goto LABEL_31;
  }
  sub_100080E08(&qword_100321F70);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_31:
    sub_1000AAC6C();
    uint64_t v20 = swift_allocError();
    *id v21 = 7;
    swift_willThrow();
    *(void *)(v0 + 448) = v20;
    os_log_type_t v22 = static os_log_type_t.error.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = v22;
    if (os_log_type_enabled(v23, v22))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      NSString v26 = (void *)swift_slowAlloc();
      *(_DWORD *)id v25 = 138412290;
      swift_errorRetain();
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 312) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *NSString v26 = v27;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Report to IDS finished with error %@", v25, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    unint64_t v31 = (uint64_t (*)(uint64_t))(*(void *)((swift_isaMask & **(void **)(v0 + 328)) + 0x100)
                                          + **(int **)((swift_isaMask & **(void **)(v0 + 328)) + 0x100));
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v28;
    void *v28 = v0;
    v28[1] = sub_1000EE4CC;
    uint64_t v19 = 2;
    goto LABEL_35;
  }
  uint64_t v4 = *(void *)(v0 + 296);
  if (qword_10032C470 != -1) {
    swift_once();
  }
  uint64_t v5 = unk_10032F6B0;
  *(void *)(v0 + 264) = qword_10032F6A8;
  *(void *)(v0 + 272) = v5;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(v4 + 16) && (unint64_t v6 = sub_1000F5A0C(v0 + 80), (v7 & 1) != 0))
  {
    sub_100089D08(*(void *)(v4 + 56) + 32 * v6, v0 + 200);
  }
  else
  {
    *(_OWORD *)(v0 + 200) = 0u;
    *(_OWORD *)(v0 + 216) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1000F5EB0(v0 + 80);
  if (!*(void *)(v0 + 224))
  {
    uint64_t v8 = v0 + 200;
    goto LABEL_30;
  }
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_31;
  }
  int v9 = *(unsigned __int8 *)(v0 + 472);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v32 = v30;
    if (v9) {
      uint64_t v13 = 7562585;
    }
    else {
      uint64_t v13 = 28494;
    }
    if (v9) {
      unint64_t v14 = 0xE300000000000000;
    }
    else {
      unint64_t v14 = 0xE200000000000000;
    }
    *(void *)(v0 + 320) = sub_10008D114(v13, v14, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "IDS recommendation: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (v9) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = 2;
  }
  NSString v16 = *(void **)(v0 + 328);
  uint64_t v17 = (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(v0 + 400)) + 0x100))(v15);
  *(void *)(v0 + 424) = v17;
  unint64_t v31 = (uint64_t (*)(uint64_t))(*(void *)((swift_isaMask & *v16) + 0x100)
                                        + **(int **)((swift_isaMask & *v16) + 0x100));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_1000EE294;
  uint64_t v19 = v17;
LABEL_35:
  return v31(v19);
}

uint64_t sub_1000EE294()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 328);
  if (v0) {
    uint64_t v4 = sub_1000EE9D0;
  }
  else {
    uint64_t v4 = sub_1000EE3C0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000EE3C0()
{
  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 360), *(void *)(v0 + 336));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 424);
  return v1(v2);
}

uint64_t sub_1000EE444()
{
  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 360), *(void *)(v0 + 336));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EE4CC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 464) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 328);
  if (v0) {
    uint64_t v4 = sub_1000EE940;
  }
  else {
    uint64_t v4 = sub_1000EE5F8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000EE5F8()
{
  sub_1000AAC6C();
  swift_allocError();
  void *v1 = 7;
  swift_willThrow();
  swift_errorRelease();
  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 360), *(void *)(v0 + 336));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000EE6BC()
{
  uint64_t v1 = *(void **)(v0 + 408);
  swift_willThrow();

  *(void *)(v0 + 448) = *(void *)(v0 + 416);
  os_log_type_t v2 = static os_log_type_t.error.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = v2;
  if (os_log_type_enabled(v3, v2))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138412290;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 312) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Report to IDS finished with error %@", v5, 0xCu);
    sub_100080E08((uint64_t *)&unk_100320B30);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = (uint64_t (*)(uint64_t))(*(void *)((swift_isaMask & **(void **)(v0 + 328)) + 0x100)
                                        + **(int **)((swift_isaMask & **(void **)(v0 + 328)) + 0x100));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1000EE4CC;
  return v10(2);
}

uint64_t sub_1000EE940()
{
  swift_errorRelease();
  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 360), *(void *)(v0 + 336));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EE9D0()
{
  (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 360), *(void *)(v0 + 336));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000EEA58(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100080E08(&qword_10031F4C0);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    if (a2) {
      uint64_t v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v10 = v8;
    sub_1000F7168((uint64_t)&v10, *(void *)(*(void *)(v3 + 64) + 40));
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000EECB4(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000F71DC;
  return sub_1000ED51C();
}

uint64_t sub_1000EED5C(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  sub_100080E08((uint64_t *)&unk_10031F9A0);
  v2[16] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  return _swift_task_switch(sub_1000EEE80, v1, 0);
}

uint64_t sub_1000EEE80()
{
  uint64_t v76 = v0;
  if (qword_10032C478 != -1) {
    swift_once();
  }
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 112) + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element);
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  if ((sub_1000EFA5C(*v1, v2, (void *)qword_10032F6B8) & 1) == 0)
  {
    sub_1000AAC6C();
    swift_allocError();
    *uint64_t v13 = 6;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v15 = 0;
LABEL_8:
    return v14(v15);
  }
  Date.init()();
  os_log_type_t v4 = eligibilityDBDataLifetimeDays.unsafeMutableAddressor();
  uint64_t result = swift_beginAccess();
  if (*v4 == 0x8000000000000000)
  {
    __break(1u);
    goto LABEL_39;
  }
  if ((unsigned __int128)(-*v4 * (__int128)86400) >> 64 != (-86400 * *v4) >> 63)
  {
LABEL_39:
    __break(1u);
    return result;
  }
  v71 = (id *)(v0 + 112);
  unint64_t v72 = v2;
  uint64_t v74 = v3;
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v8 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 144);
  int v9 = *(void **)(v0 + 120);
  Date.addingTimeInterval(_:)();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v11 = v10(v6, v8);
  uint64_t v12 = *(void (**)(void))((swift_isaMask & *v9) + 0x98);
  ((void (*)(uint64_t))v12)(v11);
  sub_1000A88B0();
  id v70 = (void (*)(uint64_t, uint64_t))v10;
  NSString v16 = *(void **)(v0 + 120);
  swift_release();
  uint64_t v17 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v16) + 0x118))(1);
  uint64_t v18 = *(NSObject **)(*(void *)(v0 + 112) + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result);
  ((void (*)(uint64_t))v12)(v17);
  uint64_t v19 = (void *)sub_1000A8908();
  unint64_t v68 = (unint64_t)v18;
  swift_release();
  if (!v19)
  {
    id v27 = *(id *)(v0 + 112);
    uint64_t v28 = Logger.logObject.getter();
    uint64_t v29 = static os_log_type_t.default.getter();
    BOOL v30 = os_log_type_enabled(v28, (os_log_type_t)v29);
    unint64_t v31 = *(void **)(v0 + 112);
    if (v30)
    {
      os_log_type_t v66 = v29;
      uint64_t v32 = swift_slowAlloc();
      v75[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = sub_10008D114(v74, v72, v75);
      uint64_t v33 = (unint64_t *)(v0 + 48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v32 + 12) = 2080;
      unint64_t v25 = v68;
      if (v68 >= 3) {
        goto LABEL_27;
      }
      uint64_t v34 = v28;
      id v35 = *v71;
      *(void *)(v0 + 56) = sub_10008D114(*(void *)&aSuccess_1[8 * v68], 0xE700000000000000, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v34, v66, "Storing element %s with result %s since no previous result was found", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    v12();
    j___s10Foundation4DateV3nowACvgZ();
    sub_1000AA310();
    uint64_t v57 = *(void *)(v0 + 184);
    uint64_t v58 = *(void *)(v0 + 168);
    uint64_t v59 = *(void *)(v0 + 152);
    uint64_t v60 = *(void *)(v0 + 136);
    swift_release();
LABEL_34:
    v70(v59, v60);
    v70(v58, v60);
    v70(v57, v60);
    uint64_t v61 = 1;
LABEL_37:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v14 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v15 = v61;
    goto LABEL_8;
  }
  uint64_t v20 = *(void *)(v0 + 136);
  uint64_t v21 = *(void *)(v0 + 144);
  uint64_t v22 = *(void *)(v0 + 128);
  sub_1000985E0((uint64_t)v19 + OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored, v22);
  LODWORD(v20) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20);
  uint64_t v23 = v19;
  if (v20 == 1)
  {
    sub_100087A1C(*(void *)(v0 + 128), (uint64_t *)&unk_10031F9A0);
    unint64_t v24 = v72;
    unint64_t v25 = (unint64_t)v18;
    if (!v18)
    {
LABEL_24:
      id v49 = *(id *)(v0 + 112);
      v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.default.getter();
      BOOL v52 = os_log_type_enabled(v50, v51);
      id v53 = *(NSObject **)(v0 + 112);
      if (v52)
      {
        os_log_type_t v67 = v51;
        uint64_t v54 = swift_slowAlloc();
        v75[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 64) = sub_10008D114(v74, v24, v75);
        uint64_t v33 = (unint64_t *)(v0 + 72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v54 + 12) = 2080;
        if (v25 > 2) {
          goto LABEL_27;
        }
        v55 = v23;
        id v56 = *v71;
        *(void *)(v0 + 80) = sub_10008D114(*(void *)&aSuccess_1[8 * v25], 0xE700000000000000, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        id v53 = v50;
        _os_log_impl((void *)&_mh_execute_header, v50, v67, "Storing element %s with result %s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v55 = v23;
      }
      v12();
      j___s10Foundation4DateV3nowACvgZ();
      sub_1000AA310();
      uint64_t v57 = *(void *)(v0 + 184);
      uint64_t v59 = *(void *)(v0 + 160);
      uint64_t v58 = *(void *)(v0 + 168);
      uint64_t v60 = *(void *)(v0 + 136);
      swift_release();

      goto LABEL_34;
    }
    BOOL v26 = 0;
  }
  else
  {
    uint64_t v36 = *(void *)(v0 + 128);
    uint64_t v37 = *(void *)(v0 + 136);
    uint64_t v38 = Date.compare(_:)();
    v70(v36, v37);
    BOOL v26 = v38 == 1;
    unint64_t v24 = v72;
    unint64_t v25 = (unint64_t)v18;
    if (!v18) {
      goto LABEL_20;
    }
  }
  if (!*(void *)&v23[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result]) {
    goto LABEL_24;
  }
LABEL_20:
  if (!v26) {
    goto LABEL_24;
  }
  id v39 = *(id *)(v0 + 112);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v40, v41))
  {
    uint64_t v62 = *(void *)(v0 + 184);
    uint64_t v63 = *(void *)(v0 + 168);
    uint64_t v64 = *(void *)(v0 + 136);
    uint64_t v65 = *(void **)(v0 + 112);

    v70(v63, v64);
    v70(v62, v64);
    goto LABEL_36;
  }
  log = v40;
  v73 = v23;
  id v42 = *v71;
  uint64_t v43 = swift_slowAlloc();
  v75[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v43 = 136315394;
  swift_bridgeObjectRetain();
  *(void *)(v0 + 88) = sub_10008D114(v74, v24, v75);
  uint64_t v33 = (unint64_t *)(v0 + 96);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  *(_WORD *)(v43 + 12) = 2080;
  if (v25 <= 2)
  {
    uint64_t v44 = *(void *)&aSuccess_1[8 * v25];
    uint64_t v45 = *(void *)(v0 + 184);
    uint64_t v46 = *(void *)(v0 + 168);
    uint64_t v47 = *(void *)(v0 + 136);
    os_log_type_t v48 = *(void **)(v0 + 112);
    *(void *)(v0 + 104) = sub_10008D114(v44, 0xE700000000000000, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, log, v41, "Ignoring result for element %s and result %s since there is an existing sample", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v70(v46, v47);
    v70(v45, v47);
LABEL_36:
    uint64_t v61 = 0;
    goto LABEL_37;
  }
LABEL_27:

  *uint64_t v33 = v25;
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t sub_1000EFA5C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  int v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EFCA4(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v3[5] = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_1000EFD68;
  return sub_1000EED5C((uint64_t)v5);
}

uint64_t sub_1000EFD68(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *(void **)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();

  swift_release();
  uint64_t v9 = *(void *)(v5 + 32);
  if (v3)
  {
    uint64_t v10 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v9 + 16))(v9, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 32));
  uint64_t v11 = *(uint64_t (**)(void))(v8 + 8);
  return v11();
}

uint64_t sub_1000EFF1C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x120))(v5);
  if (!result)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t v9 = result;
  uint64_t result = Date.init()();
  uint64_t v10 = 3600 * (24 / v9);
  if ((unsigned __int128)(v10 * (__int128)a1) >> 64 != (v10 * a1) >> 63)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v10 * a1 != 0x8000000000000000)
  {
    Date.addingTimeInterval(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_1000F0098()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC8))();
}

uint64_t sub_1000F00CC()
{
  *(void *)(v1 + 120) = v0;
  return _swift_task_switch(sub_1000F00EC, v0, 0);
}

uint64_t sub_1000F00EC()
{
  uint64_t v1 = *(void **)(v0[15] + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_support);
  v0[2] = v0;
  v0[7] = v0 + 17;
  v0[3] = sub_1000F01F4;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000F03A0;
  v0[13] = &unk_1002BFE88;
  v0[14] = v2;
  [v1 checkiCloudAnalyticsWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000F01F4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 128) = v2;
  uint64_t v3 = *(void *)(v1 + 120);
  if (v2) {
    uint64_t v4 = sub_1000F0330;
  }
  else {
    uint64_t v4 = sub_1000F0314;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F0314()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 136));
}

uint64_t sub_1000F0330()
{
  swift_willThrow();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_1000F03A0(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_100080E08(&qword_10031F4C0);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    **(unsigned char **)(*(void *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1000F05C0(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a2;
  *(void *)(v2 + 128) = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1000F063C, a2, 0);
}

uint64_t sub_1000F063C()
{
  uint64_t v1 = *(void **)(v0[15] + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_support);
  v0[2] = v0;
  v0[7] = v0 + 18;
  v0[3] = sub_1000F0744;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1000F03A0;
  v0[13] = &unk_1002C0610;
  v0[14] = v2;
  [v1 checkiCloudAnalyticsWithCompletionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1000F0744()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 136) = v2;
  uint64_t v3 = *(void *)(v1 + 120);
  if (v2) {
    uint64_t v4 = sub_1000F08E8;
  }
  else {
    uint64_t v4 = sub_1000F0864;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1000F0864()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 144);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, void))(v1 + 16))(v1, v2, 0);
  _Block_release(*(const void **)(v0 + 128));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000F08E8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_willThrow();
  swift_release();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v2);

  _Block_release(*(const void **)(v0 + 128));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000F09A0(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_1000F09C4, v2, 0);
}

uint64_t sub_1000F09C4()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(v0 + 32)) + 0x98))();
  uint64_t v1 = sub_1000A8908();
  swift_release();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1000F0C20(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[5] = v5;
  swift_retain();
  return _swift_task_switch(sub_1000F0CB0, a3, 0);
}

uint64_t sub_1000F0CB0()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98))();
  uint64_t v1 = (void *)sub_1000A8908();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 24);
  ((void (**)(void, void *, void))v2)[2](v2, v1, 0);
  _Block_release(v2);

  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000F0DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for Date();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  v4[9] = swift_task_alloc();
  return _swift_task_switch(sub_1000F0EC4, v3, 0);
}

uint64_t sub_1000F0EC4()
{
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = v0[2];
  (*(void (**)(void))((swift_isaMask & *v1) + 0x98))();
  uint64_t v3 = *(void (**)(uint64_t))((swift_isaMask & *v1) + 0x118);
  v3(v2);
  v3(1);
  uint64_t v4 = v0[9];
  uint64_t v7 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v8 = v0[6];
  char v9 = sub_1000A8F64();
  swift_release();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v6, v8);
  v10(v4, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11(v9 & 1);
}

uint64_t sub_1000F122C(uint64_t a1, uint64_t a2, void *aBlock, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  if (a2)
  {
    a2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = 0;
  }
  v4[4] = v8;
  swift_retain();
  char v9 = (void *)swift_task_alloc();
  v4[5] = v9;
  *char v9 = v4;
  v9[1] = sub_1000F131C;
  return sub_1000F0DF0(a1, a2, v8);
}

uint64_t sub_1000F131C(char a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_task_dealloc();
  swift_release();
  uint64_t v8 = *(void *)(v5 + 24);
  swift_bridgeObjectRelease();
  if (v3)
  {
    char v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
  }
  else
  {
    (*(void (**)(uint64_t, void, void))(v8 + 16))(v8, a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_1000F14C8()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  swift_retain();
  sub_1000A877C();
  swift_release();
  uint64_t v2 = v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_logger;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return v1;
}

uint64_t sub_1000F15B8()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  swift_retain();
  sub_1000A877C();
  swift_release();
  uint64_t v2 = v0 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_logger;
  uint64_t v3 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t sub_1000F16AC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_1000F16D0, v2, 0);
}

uint64_t sub_1000F16D0()
{
  *(void *)(v0 + 40) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 32)) + 0x98))();
  if (qword_10032C468 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10032F698;
  uint64_t v2 = unk_10032F6A0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000F17F0;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  return sub_1000AA374(v1, v2, v4, v5);
}

uint64_t sub_1000F17F0()
{
  uint64_t v2 = (void *)*v1;
  v2[7] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[4];
    return _swift_task_switch(sub_1000F192C, v3, 0);
  }
  else
  {
    swift_release();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_1000F192C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F1B10(int a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[5] = v5;
  swift_retain();
  return _swift_task_switch(sub_1000F1BA0, a3, 0);
}

uint64_t sub_1000F1BA0()
{
  *(void *)(v0 + 48) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98))();
  if (qword_10032C468 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10032F698;
  uint64_t v2 = unk_10032F6A0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000F1CC0;
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  return sub_1000AA374(v1, v2, v4, v5);
}

uint64_t sub_1000F1CC0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    return _swift_task_switch(sub_1000F1E38, v3, 0);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 24);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0);
    _Block_release(*(const void **)(v2 + 24));
    uint64_t v5 = *(uint64_t (**)(void))(v2 + 8);
    return v5();
  }
}

uint64_t sub_1000F1E38()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);

  _Block_release(*(const void **)(v0 + 24));
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000F1EEC()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000F1F0C, v0, 0);
}

uint64_t sub_1000F1F0C()
{
  *(void *)(v0 + 24) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98))();
  if (qword_10032C468 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10032F698;
  uint64_t v2 = unk_10032F6A0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000F2028;
  return sub_1000AA1CC(v1, v2);
}

uint64_t sub_1000F2028(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  *(void *)(*v3 + 40) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v8 = *(void *)(v6 + 16);
    return _swift_task_switch(sub_1000F2194, v8, 0);
  }
  else
  {
    swift_release();
    char v9 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    return v9(a1, a2);
  }
}

uint64_t sub_1000F2194()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F2364(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1000F23E0, a2, 0);
}

uint64_t sub_1000F23E0()
{
  *(void *)(v0 + 32) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98))();
  if (qword_10032C468 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10032F698;
  uint64_t v2 = unk_10032F6A0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000F24FC;
  return sub_1000AA1CC(v1, v2);
}

uint64_t sub_1000F24FC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)*v3;
  v5[6] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = v5[2];
    return _swift_task_switch(sub_1000F26A4, v6, 0);
  }
  else
  {
    swift_release();
    swift_release();
    if (a2)
    {
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v7 = 0;
    }
    uint64_t v8 = (void (**)(void, void, void))v5[3];
    ((void (**)(void, NSString, void))v8)[2](v8, v7, 0);

    _Block_release(v8);
    char v9 = (uint64_t (*)(void))v5[1];
    return v9();
  }
}

uint64_t sub_1000F26A4()
{
  swift_release();
  swift_release();
  uint64_t v1 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 24);
  ((void (**)(void, void, void *))v2)[2](v2, 0, v1);

  _Block_release(v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1000F2750()
{
  *(void *)(v1 + 80) = v0;
  sub_100080E08((uint64_t *)&unk_10031F9A0);
  *(void *)(v1 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_1000F27E4, v0, 0);
}

uint64_t sub_1000F27E4()
{
  *(void *)(v0 + 96) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 80)) + 0x98))();
  if (qword_10032C460 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10032F688;
  uint64_t v2 = unk_10032F690;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000F2900;
  return sub_1000AA1CC(v1, v2);
}

uint64_t sub_1000F2900(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[14] = a1;
  v4[15] = a2;
  v4[16] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[10];
    uint64_t v6 = sub_1000F2E90;
  }
  else
  {
    uint64_t v7 = v4[10];
    swift_release();
    uint64_t v6 = sub_1000F2A2C;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000F2A2C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  if (!v1)
  {
    id v11 = 0;
LABEL_10:
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(id))(v0 + 8);
    return v12(v11);
  }
  *(void *)(v0 + 72) = 0;
  uint64_t v2 = swift_task_alloc();
  *(void *)(v2 + 16) = v0 + 72;
  uint64_t v3 = *(void *)(v0 + 112);
  if ((v1 & 0x1000000000000000) != 0
    || (uint64_t v4 = *(void *)(v0 + 120), !(v4 & 0x2000000000000000 | v3 & 0x1000000000000000)))
  {
    uint64_t v31 = *(void *)(v0 + 128);
    uint64_t result = _StringGuts._slowWithCString<A>(_:)();
    if (v31) {
      return result;
    }
    swift_bridgeObjectRelease();
    char v32 = *(unsigned char *)(v0 + 136);
    uint64_t v17 = swift_task_dealloc();
    if ((v32 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_20;
  }
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = sub_1000F5F04;
  *(void *)(v5 + 24) = v2;
  if ((v4 & 0x2000000000000000) != 0)
  {
    uint64_t v13 = *(void *)(v0 + 112);
    uint64_t v14 = *(void *)(v0 + 120) & 0xFFFFFFFFFFFFFFLL;
    *(void *)(v0 + 56) = v13;
    *(void *)(v0 + 64) = v14;
    if (v13 <= 0x20u && ((1 << v13) & 0x100003E01) != 0
      || (uint64_t v29 = (unsigned __int8 *)_swift_stdlib_strtod_clocale()) == 0)
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      goto LABEL_16;
    }
    int v30 = *v29;
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v17 = swift_task_dealloc();
    if (v30) {
      goto LABEL_16;
    }
LABEL_20:
    uint64_t v19 = *(void **)(v0 + 80);
    uint64_t v18 = *(void *)(v0 + 88);
    uint64_t v20 = *(void **)((char *)v19 + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides);
    uint64_t v21 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v19) + 0xB0))(v17);
    double v22 = (*(double (**)(uint64_t))((swift_isaMask & *v20) + 0x110))(v21);
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v23 = type metadata accessor for Date();
    unint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
    v24(v18, 0, 1, v23);
    unint64_t v25 = (objc_class *)type metadata accessor for ReportTime(0);
    BOOL v26 = (char *)objc_allocWithZone(v25);
    uint64_t v27 = (uint64_t)&v26[OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport];
    v24((uint64_t)&v26[OBJC_IVAR____TtC13transparencyd10ReportTime_lastReport], 1, 1, v23);
    swift_beginAccess();
    uint64_t v28 = v26;
    sub_1000F5E08(v18, v27);
    swift_endAccess();
    *(double *)&v28[OBJC_IVAR____TtC13transparencyd10ReportTime_timeBetweenReports] = v22;

    *(void *)(v0 + 40) = v28;
    *(void *)(v0 + 48) = v25;
    id v11 = [super init];
    sub_100087A1C(v18, (uint64_t *)&unk_10031F9A0);
    goto LABEL_10;
  }
  if ((v3 & 0x1000000000000000) != 0)
  {
    uint64_t v6 = (*(void *)(v0 + 120) & 0xFFFFFFFFFFFFFFFLL) + 32;
    uint64_t v7 = *(void *)(v0 + 112) & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v6 = _StringObject.sharedUTF8.getter();
  }
  uint64_t v8 = *(void *)(v0 + 128);
  char v9 = sub_1000F5B18(v6, v7, (void (*)(uint64_t *__return_ptr))sub_1000F5F74);
  uint64_t result = swift_task_dealloc();
  if (v8) {
    return result;
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = swift_task_dealloc();
  if (v9) {
    goto LABEL_20;
  }
LABEL_16:
  sub_1000AAC6C();
  swift_allocError();
  *uint64_t v15 = 5;
  swift_willThrow();
  swift_task_dealloc();
  NSString v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_1000F2E90()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F3068(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v2[4] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_1000F3110;
  return sub_1000F2750();
}

uint64_t sub_1000F3110(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  swift_task_dealloc();
  swift_release();
  uint64_t v7 = *(void (***)(void, void, void))(v5 + 24);
  if (v3)
  {
    uint64_t v8 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    ((void (**)(void, void, void *))v7)[2](v7, 0, v8);

    _Block_release(v7);
  }
  else
  {
    ((void (**)(void, void *, void))v7)[2](v7, a1, 0);
    _Block_release(v7);
  }
  char v9 = *(uint64_t (**)(void))(v6 + 8);
  return v9();
}

uint64_t sub_1000F32B4()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000F32D4, v0, 0);
}

uint64_t sub_1000F32D4()
{
  *(void *)(v0 + 24) = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98))();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  void *v1 = v0;
  v1[1] = sub_1000F33BC;
  return sub_1000AA1CC(0xD000000000000012, 0x800000010024F680);
}

uint64_t sub_1000F33BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[5] = a1;
  v4[6] = a2;
  v4[7] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[2];
    uint64_t v6 = sub_1000F35E4;
  }
  else
  {
    uint64_t v7 = v4[2];
    swift_release();
    uint64_t v6 = sub_1000F34E4;
    uint64_t v5 = v7;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1000F34E4()
{
  uint64_t v1 = v0[6];
  if (v1)
  {
    if (v1 == 0xE100000000000000 && v0[5] == 49 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v2 = 0;
    }
    else if (v1 == 0xE100000000000000 && v0[5] == 48)
    {
      swift_bridgeObjectRelease();
      uint64_t v2 = 2;
    }
    else
    {
      char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v5) {
        uint64_t v2 = 2;
      }
      else {
        uint64_t v2 = 1;
      }
    }
  }
  else
  {
    uint64_t v2 = 1;
  }
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v2);
}

uint64_t sub_1000F35E4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F37B4(const void *a1, uint64_t a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v2[4] = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000F3874;
  v4[2] = a2;
  return _swift_task_switch(sub_1000F32D4, a2, 0);
}

uint64_t sub_1000F3874(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v6 = *v2;
  uint64_t v5 = *v2;
  uint64_t v7 = *v2;
  swift_task_dealloc();
  swift_release();
  uint64_t v8 = *(void *)(v5 + 24);
  if (v3)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
    (*(void (**)(uint64_t))(v8 + 16))(v8);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, void))(v8 + 16))(v8, a1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  uint64_t v10 = *(uint64_t (**)(void))(v7 + 8);
  return v10();
}

uint64_t sub_1000F3A04()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000F3A24, v0, 0);
}

uint64_t sub_1000F3A24()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                   + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                    + 0xD0))();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F3C2C(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1000F3CA8, a2, 0);
}

uint64_t sub_1000F3CA8()
{
  uint64_t v1 = (void (**)(void))v0[3];
  (*(void (**)(void))((swift_isaMask & **(void **)(v0[2]
                                                   + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                    + 0xD0))();
  swift_release();
  v1[2](v1);
  _Block_release(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000F3D6C()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000F3D8C, v0, 0);
}

uint64_t sub_1000F3D8C()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                   + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                    + 0xD8))();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F3F94(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1000F4010, a2, 0);
}

uint64_t sub_1000F4010()
{
  uint64_t v1 = (void (**)(void))v0[3];
  (*(void (**)(void))((swift_isaMask & **(void **)(v0[2]
                                                   + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                    + 0xD8))();
  swift_release();
  v1[2](v1);
  _Block_release(v1);
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_1000F40D4(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = a1;
  return _swift_task_switch(sub_1000F40F8, v1, 0);
}

uint64_t sub_1000F40F8()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xF0))(*(unsigned __int8 *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F4314(char a1, void *aBlock, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  *(unsigned char *)(v3 + 32) = a1;
  *(void *)(v3 + 24) = _Block_copy(aBlock);
  swift_retain();
  return _swift_task_switch(sub_1000F4398, a3, 0);
}

uint64_t sub_1000F4398()
{
  uint64_t v1 = *(void (***)(void))(v0 + 24);
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xF0))(*(unsigned __int8 *)(v0 + 32));
  swift_release();
  v1[2](v1);
  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F4460(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = a1;
  return _swift_task_switch(sub_1000F4484, v1, 0);
}

uint64_t sub_1000F4484()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xE0))(*(unsigned __int8 *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F46A0(char a1, void *aBlock, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  *(unsigned char *)(v3 + 32) = a1;
  *(void *)(v3 + 24) = _Block_copy(aBlock);
  swift_retain();
  return _swift_task_switch(sub_1000F4724, a3, 0);
}

uint64_t sub_1000F4724()
{
  uint64_t v1 = *(void (***)(void))(v0 + 24);
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xE0))(*(unsigned __int8 *)(v0 + 32));
  swift_release();
  v1[2](v1);
  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F47EC(char a1)
{
  *(void *)(v2 + 16) = v1;
  *(unsigned char *)(v2 + 24) = a1;
  return _swift_task_switch(sub_1000F4810, v1, 0);
}

uint64_t sub_1000F4810()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xE8))(*(unsigned __int8 *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F4A2C(char a1, void *aBlock, uint64_t a3)
{
  *(void *)(v3 + 16) = a3;
  *(unsigned char *)(v3 + 32) = a1;
  *(void *)(v3 + 24) = _Block_copy(aBlock);
  swift_retain();
  return _swift_task_switch(sub_1000F4AB0, a3, 0);
}

uint64_t sub_1000F4AB0()
{
  uint64_t v1 = *(void (***)(void))(v0 + 24);
  (*(void (**)(void))((swift_isaMask & **(void **)(*(void *)(v0 + 16)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xE8))(*(unsigned __int8 *)(v0 + 32));
  swift_release();
  v1[2](v1);
  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F4B78(double a1)
{
  *(void *)(v2 + 24) = v1;
  *(double *)(v2 + 16) = a1;
  return _swift_task_switch(sub_1000F4B9C, v1, 0);
}

uint64_t sub_1000F4B9C()
{
  (*(void (**)(double))((swift_isaMask & **(void **)(*(void *)(v0 + 24)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xF8))(*(double *)(v0 + 16));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F4DB8(const void *a1, uint64_t a2, double a3)
{
  *(void *)(v3 + 24) = a2;
  *(double *)(v3 + 16) = a3;
  *(void *)(v3 + 32) = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1000F4E38, a2, 0);
}

uint64_t sub_1000F4E38()
{
  uint64_t v1 = *(void (***)(void))(v0 + 32);
  (*(void (**)(double))((swift_isaMask & **(void **)(*(void *)(v0 + 24)
                                                                + OBJC_IVAR____TtC13transparencyd28KTEligibilityStatusReporting_eligibilityOverrides))
                                 + 0xF8))(*(double *)(v0 + 16));
  swift_release();
  v1[2](v1);
  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1000F4F00(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 72) = a4;
  *(void *)(v5 + 32) = a3;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  uint64_t v6 = type metadata accessor for Date();
  *(void *)(v5 + 48) = v6;
  *(void *)(v5 + 56) = *(void *)(v6 - 8);
  *(void *)(v5 + 64) = swift_task_alloc();
  return _swift_task_switch(sub_1000F4FC8, v4, 0);
}

uint64_t sub_1000F4FC8()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = (void *)v0[5];
  (*(void (**)(void))((swift_isaMask & *v1) + 0x98))();
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x118))(v2);
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[6];
  sub_1000AA310();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1000F52D0(uint64_t a1, uint64_t a2, char a3, const void *a4, uint64_t a5)
{
  *(unsigned char *)(v5 + 88) = a3;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a5;
  uint64_t v8 = type metadata accessor for Date();
  *(void *)(v5 + 48) = v8;
  *(void *)(v5 + 56) = *(void *)(v8 - 8);
  *(void *)(v5 + 64) = swift_task_alloc();
  *(void *)(v5 + 72) = _Block_copy(a4);
  *(void *)(v5 + 16) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v5 + 24) = v9;
  *(void *)(v5 + 80) = v9;
  swift_retain();
  return _swift_task_switch(sub_1000F53D0, a5, 0);
}

uint64_t sub_1000F53D0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v1 = *(void **)(v0 + 40);
  (*(void (**)(void))((swift_isaMask & *v1) + 0x98))();
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x118))(v2);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 48);
  sub_1000AA310();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v8 = *(void *)(v0 + 72);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(v8 + 16))(v8, 0);
  _Block_release(*(const void **)(v0 + 72));
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_1000F55A0()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xD0))();
}

uint64_t sub_1000F55D4()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1000F55F4, v0, 0);
}

uint64_t sub_1000F55F4()
{
  (*(void (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98))();
  sub_1000A877C();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1000F5804(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain();
  return _swift_task_switch(sub_1000F5880, a2, 0);
}

uint64_t sub_1000F5880()
{
  uint64_t v1 = *(void (***)(void, void))(v0 + 24);
  (*(void (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x98))();
  sub_1000A877C();
  swift_release();
  swift_release();
  v1[2](v1, 0);
  _Block_release(v1);
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1000F5950()
{
}

void sub_1000F5994()
{
}

uint64_t sub_1000F5A00()
{
  return v0;
}

unint64_t sub_1000F5A0C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1000F5A50(a1, v4);
}

unint64_t sub_1000F5A50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_1000F710C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1000F5EB0((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1000F5B18(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

id sub_1000F5B78(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000985E0(a4, (uint64_t)v10);
  uint64_t v11 = (objc_class *)type metadata accessor for KTEligibilityStatusResult(0);
  uint64_t v12 = (char *)objc_allocWithZone(v11);
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = 2;
  *(void *)&v12[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = a3;
  uint64_t v13 = &v12[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)uint64_t v13 = a1;
  *((void *)v13 + 1) = a2;
  sub_1000985E0((uint64_t)v10, (uint64_t)&v12[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v17.receiver = v12;
  v17.super_class = v11;
  swift_bridgeObjectRetain();
  id v14 = a3;
  id v15 = [super init];
  sub_100087A1C((uint64_t)v10, (uint64_t *)&unk_10031F9A0);
  return v15;
}

id sub_1000F5CA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = (objc_class *)type metadata accessor for KTEligibilityStatusResult(0);
  uint64_t v11 = (char *)objc_allocWithZone(v10);
  *(void *)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_result] = 2;
  *(void *)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_error] = a3;
  uint64_t v12 = &v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_element];
  *(void *)uint64_t v12 = a1;
  *((void *)v12 + 1) = a2;
  sub_1000985E0((uint64_t)v8, (uint64_t)&v11[OBJC_IVAR____TtC13transparencyd25KTEligibilityStatusResult_dateStored]);
  v16.receiver = v11;
  v16.super_class = v10;
  swift_bridgeObjectRetain();
  id v13 = a3;
  id v14 = [super init];
  sub_100087A1C((uint64_t)v8, (uint64_t *)&unk_10031F9A0);
  return v14;
}

uint64_t sub_1000F5E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for ReportTime(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032C810);
}

uint64_t type metadata accessor for KTEligibilityStatusReporting(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032C820);
}

uint64_t sub_1000F5EB0(uint64_t a1)
{
  return a1;
}

unsigned char *sub_1000F5F04@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *sub_1000F5F74@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

unint64_t sub_1000F5FBC()
{
  unint64_t result = qword_100321FF8;
  if (!qword_100321FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321FF8);
  }
  return result;
}

unint64_t sub_1000F6014()
{
  unint64_t result = qword_100322000;
  if (!qword_100322000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322000);
  }
  return result;
}

uint64_t sub_1000F6068()
{
  return type metadata accessor for KTEligibilityStatusResult(0);
}

uint64_t type metadata accessor for KTEligibilityStatusResult(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032C800);
}

void sub_1000F6090()
{
  sub_1000A4D44();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

ValueMetadata *type metadata accessor for KTEligibilityStatusResult.Status()
{
  return &type metadata for KTEligibilityStatusResult.Status;
}

ValueMetadata *type metadata accessor for Recommendation()
{
  return &type metadata for Recommendation;
}

uint64_t sub_1000F6164()
{
  return type metadata accessor for ReportTime(0);
}

void sub_1000F616C()
{
  sub_1000A4D44();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_1000F6208()
{
  return type metadata accessor for KTEligibilityStatusReporting(0);
}

uint64_t sub_1000F6210()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000F62E8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  BOOL v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *BOOL v4 = v1;
  v4[1] = sub_10008B8AC;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100322080 + dword_100322080);
  return v5(v2, v3);
}

uint64_t sub_1000F639C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F63D4()
{
  _Block_release(*(const void **)(v0 + 40));
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000F641C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 32);
  BOOL v6 = *(const void **)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10008B484;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, char, const void *, uint64_t))((char *)&dword_1003220A8 + dword_1003220A8);
  return v8(v2, v3, v4, v6, v5);
}

uint64_t sub_1000F64F0()
{
  double v2 = v0[2];
  uint64_t v3 = (const void *)*((void *)v0 + 3);
  uint64_t v4 = *((void *)v0 + 4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10008B8AC;
  BOOL v6 = (uint64_t (*)(const void *, uint64_t, double))((char *)&dword_1003220C8 + dword_1003220C8);
  return v6(v3, v4, v2);
}

uint64_t sub_1000F65B0()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10008B8AC;
  BOOL v6 = (uint64_t (*)(char, void *, uint64_t))((char *)&dword_1003220E8 + dword_1003220E8);
  return v6(v2, v4, v3);
}

uint64_t sub_1000F6670()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10008B8AC;
  BOOL v6 = (uint64_t (*)(char, void *, uint64_t))((char *)&dword_100322108 + dword_100322108);
  return v6(v2, v4, v3);
}

uint64_t sub_1000F6730()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F6770()
{
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10008B8AC;
  BOOL v6 = (uint64_t (*)(char, void *, uint64_t))((char *)&dword_100322128 + dword_100322128);
  return v6(v2, v4, v3);
}

uint64_t sub_1000F6830()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10008B8AC;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100322148 + dword_100322148);
  return v5(v2, v3);
}

uint64_t sub_1000F68E8()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10008B8AC;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100322168 + dword_100322168);
  return v5(v2, v3);
}

uint64_t sub_1000F69A0()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10008B8AC;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100322188 + dword_100322188);
  return v5(v2, v3);
}

uint64_t sub_1000F6A58()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10008B8AC;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1003221A8 + dword_1003221A8);
  return v5(v2, v3);
}

uint64_t sub_1000F6B10()
{
  char v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10008B8AC;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_1003221C8 + dword_1003221C8);
  return v5(v2, v3);
}

uint64_t sub_1000F6BC8()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10008B8AC;
  BOOL v6 = (uint64_t (*)(int, void *, uint64_t))((char *)&dword_1003221E8 + dword_1003221E8);
  return v6(v2, v3, v4);
}

uint64_t sub_1000F6C84()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000F6CCC()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  BOOL v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *BOOL v6 = v1;
  v6[1] = sub_10008B8AC;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, void *, uint64_t))((char *)&dword_100322208 + dword_100322208);
  return v7(v2, v3, v5, v4);
}

uint64_t sub_1000F6D98()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10008B8AC;
  BOOL v6 = (uint64_t (*)(int, void *, uint64_t))((char *)&dword_100322228 + dword_100322228);
  return v6(v2, v3, v4);
}

uint64_t sub_1000F6E58()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10008B8AC;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100322248 + dword_100322248);
  return v5(v2, v3);
}

uint64_t sub_1000F6F10()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F6F58()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10008B8AC;
  BOOL v6 = (uint64_t (*)(void *, void *, uint64_t))((char *)&dword_100322268 + dword_100322268);
  return v6(v2, v3, v4);
}

uint64_t sub_1000F7018()
{
  _Block_release(*(const void **)(v0 + 16));
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F7058()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10008B8AC;
  uint64_t v5 = (uint64_t (*)(const void *, uint64_t))((char *)&dword_100322288 + dword_100322288);
  return v5(v2, v3);
}

uint64_t sub_1000F710C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000F7168(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100080E08(&qword_1003222A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F71E8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000F7234(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_watchers);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000F7288())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1000F72E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_log;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1000F7368(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_log;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*sub_1000F73F4())()
{
  return j_j__swift_endAccess;
}

uint64_t (*sub_1000F7450())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

id sub_1000F7478()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue);
}

id sub_1000F7488()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue);
}

uint64_t sub_1000F7498()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000F74E4(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1000F7538())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000F7594()
{
  return swift_unknownObjectRetain();
}

id KTWatchdog.__allocating_init(control:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1000FA9B8(a1);
  swift_unknownObjectRelease();
  return v4;
}

id KTWatchdog.init(control:)(uint64_t a1)
{
  id v1 = sub_1000FA9B8(a1);
  swift_unknownObjectRelease();
  return v1;
}

unint64_t sub_1000F761C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_100322388);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  id v4 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    long long v13 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t result = sub_100089D6C(v5, v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v9 = v5;
    v9[1] = v6;
    *(_OWORD *)(v2[7] + 16 * result) = v13;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t KTWatchdog.description.getter()
{
  (*(void (**)(void))((swift_isaMask & *v0) + 0x88))();
  sub_100080E08(&qword_1003222B8);
  sub_1000C1468((unint64_t *)&unk_1003222C0, &qword_1003222B8);
  sub_100090D14();
  uint64_t v1 = Sequence<>.joined(separator:)();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = v1;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x446863746157544BLL;
}

id sub_1000F7A2C()
{
  uint64_t v50 = type metadata accessor for DispatchTimeInterval();
  uint64_t v52 = *(void *)(v50 - 8);
  uint64_t v0 = __chkstk_darwin(v50);
  os_log_type_t v41 = (void **)((char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v0);
  os_log_type_t v48 = (void **)((char *)&v41 - v2);
  uint64_t v51 = type metadata accessor for DispatchTime();
  uint64_t v53 = *(void *)(v51 - 8);
  uint64_t v3 = __chkstk_darwin(v51);
  uint64_t v47 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  id v49 = (char *)&v41 - v5;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void (***)(char *, uint64_t))(v6 - 8);
  uint64_t v46 = v6;
  __chkstk_darwin(v6);
  char v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  __chkstk_darwin(v9);
  BOOL v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  id v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008E0A0(0, &qword_1003222D0);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1000FB8DC(&qword_1003222D8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  sub_100080E08(&qword_1003222E0);
  sub_1000C1468((unint64_t *)&unk_1003222E8, &qword_1003222E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v17 = swift_allocObject();
  uint64_t v18 = v42;
  *(void *)(v17 + 16) = v42;
  aBlock[4] = sub_1000FB1FC;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000B8C74;
  aBlock[3] = &unk_1002C0740;
  uint64_t v19 = _Block_copy(aBlock);
  uint64_t v20 = v18;
  static DispatchQoS.unspecified.getter();
  sub_1000F816C();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v19);
  v45[1](v8, v46);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v44);
  swift_release();
  uint64_t v21 = v47;
  static DispatchTime.now()();
  double v22 = *(void **)&v20[OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep];
  id result = [v22 watchdogInterval];
  double v25 = v24 * 1000.0;
  if ((~*(void *)&v25 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v25 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v25 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v45 = (void (**)(char *, uint64_t))v20;
  uint64_t v46 = ObjectType;
  BOOL v26 = v48;
  void *v48 = (uint64_t)v25;
  uint64_t v27 = enum case for DispatchTimeInterval.milliseconds(_:);
  uint64_t v28 = v52;
  uint64_t v29 = *(void (**)(void *, uint64_t, uint64_t))(v52 + 104);
  uint64_t v30 = v50;
  v29(v26, enum case for DispatchTimeInterval.milliseconds(_:), v50);
  + infix(_:_:)();
  uint64_t v31 = *(void (**)(void *, uint64_t))(v28 + 8);
  uint64_t v52 = v28 + 8;
  v31(v26, v30);
  char v32 = *(void (**)(char *, uint64_t))(v53 + 8);
  v53 += 8;
  v32(v21, v51);
  id result = [v22 watchdogInterval];
  double v34 = v33 * 1000.0;
  if ((~*(void *)&v34 & 0x7FF0000000000000) == 0)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (v34 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v34 < 9.22337204e18)
  {
    id v35 = v48;
    void *v48 = (uint64_t)v34;
    uint64_t v36 = v50;
    v29(v35, v27, v50);
    uint64_t v37 = v41;
    *os_log_type_t v41 = 100;
    v29(v37, v27, v36);
    uint64_t v38 = v49;
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
    v31(v37, v36);
    v31(v35, v36);
    OS_dispatch_source.resume()();
    id v39 = *(void (**)(uint64_t))((swift_isaMask & (unint64_t)*v45) + 0xC0);
    uint64_t v40 = swift_unknownObjectRetain();
    v39(v40);
    swift_unknownObjectRelease();
    return (id)((uint64_t (*)(char *, uint64_t))v32)(v38, v51);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_1000F816C()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

Swift::Void __swiftcall KTWatchdog.resume()()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8))();
  swift_unknownObjectRelease();
  if (!v1)
  {
    uint64_t v2 = *(void (**)(void))((swift_isaMask & *v0) + 0xD8);
    v2();
  }
}

uint64_t KTWatchdog.add(named:watcher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)&v4[OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue];
  objc_super v16 = (void *)swift_allocObject();
  v16[2] = v4;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a3;
  v16[6] = a4;
  aBlock[4] = sub_1000FB2B8;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000B8C74;
  aBlock[3] = &unk_1002C0790;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  double v22 = _swiftEmptyArrayStorage;
  sub_1000FB8DC(&qword_1003212C0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100080E08(&qword_1003212C8);
  sub_1000C1468((unint64_t *)&unk_1003212D0, &qword_1003212C8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v21);
  return swift_release();
}

uint64_t sub_1000F8760()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)((char *)v0 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0x88))(result);
    uint64_t v9 = v0;
    uint64_t v10 = sub_1000FB3E4((uint64_t)_swiftEmptyArrayStorage, v8, v9);
    swift_bridgeObjectRelease();

    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F88E0(uint64_t *a1, uint64_t *a2, void *a3)
{
  void *(*v12)(uint64_t *__return_ptr, uint64_t);
  uint64_t v13;
  void *v14;
  uint64_t result;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  void v25[2];
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t vars8;

  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a2;
  unint64_t v10 = a2[1];
  uint64_t v12 = (void *(*)(uint64_t *__return_ptr, uint64_t))a2[2];
  swift_retain_n();
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = v12(&v29, v13);
  if (v29)
  {
    swift_release_n();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = v11;
    (*(void (**)(void *))((swift_isaMask & *a3) + 0xA0))(v14);
    swift_bridgeObjectRetain_n();
    objc_super v16 = Logger.logObject.getter();
    uint64_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      BOOL v26 = a1;
      uint64_t v29 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      v25[1] = v18 + 4;
      swift_bridgeObjectRetain();
      uint64_t v28 = sub_10008D114(v27, v10, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "watcher %s failed", v18, 0xCu);
      swift_arrayDestroy();
      a1 = v26;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_release_n();
    uint64_t v20 = *a1;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1000A0478(0, *(void *)(v20 + 16) + 1, 1, (char *)v20);
      uint64_t v20 = result;
    }
    uint64_t v21 = v27;
    uint64_t v23 = *(void *)(v20 + 16);
    double v22 = *(void *)(v20 + 24);
    if (v23 >= v22 >> 1)
    {
      uint64_t result = (uint64_t)sub_1000A0478((char *)(v22 > 1), v23 + 1, 1, (char *)v20);
      uint64_t v20 = result;
    }
    *(void *)(v20 + 16) = v23 + 1;
    double v24 = v20 + 16 * v23;
    *(void *)(v24 + 32) = v21;
    *(void *)(v24 + 40) = v10;
    *a1 = v20;
  }
  return result;
}

Swift::Void __swiftcall KTWatchdog.shutdown(reason:)(Swift::String reason)
{
  uint64_t v2 = v1;
  Swift::String v32 = reason;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  __chkstk_darwin(v3);
  uint64_t v37 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  id v35 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  objc_super v16 = (char *)&v31 - v15;
  uint64_t v17 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v1) + 0xB8);
  if (!((uint64_t (*)(uint64_t))v17)(v14)
    || (swift_getObjectType(),
        char v18 = OS_dispatch_source.isCancelled.getter(),
        swift_unknownObjectRelease(),
        (v18 & 1) == 0))
  {
    if (v17())
    {
      swift_getObjectType();
      OS_dispatch_source.cancel()();
      swift_unknownObjectRelease();
    }
    uint64_t v19 = *(void **)&v1[OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep];
    [*(id *)&v2[OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep] watchdogNiceExit];
    static DispatchTime.now()();
    [v19 watchdogNiceWaitTime];
    double v21 = v20 * 1000.0;
    if ((~*(void *)&v21 & 0x7FF0000000000000) != 0)
    {
      if (v21 > -9.22337204e18)
      {
        if (v21 < 9.22337204e18)
        {
          *uint64_t v9 = (uint64_t)v21;
          (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchTimeInterval.milliseconds(_:), v6);
          + infix(_:_:)();
          (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
          uint64_t v22 = v34;
          uint64_t v33 = *(void *)(v33 + 8);
          ((void (*)(char *, uint64_t))v33)(v13, v34);
          uint64_t v31 = *(void *)&v2[OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue];
          uint64_t v23 = (void *)swift_allocObject();
          uint64_t countAndFlagsBits = v32._countAndFlagsBits;
          object = v32._object;
          v23[2] = v2;
          v23[3] = countAndFlagsBits;
          v23[4] = object;
          aBlock[4] = sub_1000FB614;
          aBlock[5] = v23;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1000B8C74;
          aBlock[3] = &unk_1002C07E0;
          BOOL v26 = _Block_copy(aBlock);
          uint64_t v27 = v2;
          swift_bridgeObjectRetain();
          uint64_t v28 = v35;
          static DispatchQoS.unspecified.getter();
          os_log_type_t v41 = _swiftEmptyArrayStorage;
          sub_1000FB8DC(&qword_1003212C0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_100080E08(&qword_1003212C8);
          sub_1000C1468((unint64_t *)&unk_1003212D0, &qword_1003212C8);
          uint64_t v29 = v37;
          uint64_t v30 = v40;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
          _Block_release(v26);
          (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v30);
          (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v38);
          ((void (*)(char *, uint64_t))v33)(v16, v22);
          swift_release();
          return;
        }
LABEL_12:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
}

void sub_1000F9368()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v31 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v18 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if (v18)
  {
    double v20 = *(void **)((char *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep);
    if (([v20 watchdogDisableDebuggerCheck] & 1) != 0
      || (_s13transparencyd10KTWatchdogC12isInDebuggerSbyFZ_0() & 1) == 0)
    {
      if (*((unsigned char *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending))
      {
        (*(void (**)(void))((swift_isaMask & *v1) + 0xA0))();
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v29 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "watch is still pending, shuting down", v29, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v35);
        if ([v20 watchDogFastRudeExit])
        {
          NSString v30 = String._bridgeToObjectiveC()();
          [v20 watchdogRudeExitWithReason:v30];
        }
        else
        {
          (*(void (**)(uint64_t, unint64_t))((swift_isaMask & *v1) + 0xF8))(0x676E69646E6570, 0xE700000000000000);
        }
      }
      else
      {
        *((unsigned char *)v1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending) = 1;
        uint64_t v24 = swift_allocObject();
        *(void *)(v24 + 16) = v1;
        aBlock[4] = sub_1000FB67C;
        aBlock[5] = v24;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1000B8C74;
        aBlock[3] = &unk_1002C0830;
        double v25 = _Block_copy(aBlock);
        BOOL v26 = v1;
        static DispatchQoS.unspecified.getter();
        uint64_t v36 = _swiftEmptyArrayStorage;
        sub_1000FB8DC(&qword_1003212C0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100080E08(&qword_1003212C8);
        sub_1000C1468((unint64_t *)&unk_1003212D0, &qword_1003212C8);
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v25);
        (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v2);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
        swift_release();
      }
    }
    else
    {
      (*(void (**)(void))((swift_isaMask & *v1) + 0xA0))();
      double v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "skipping watchdog since we are in debugger", v23, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000F99FC(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xF0))(v8);
  *((unsigned char *)a1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending) = 0;
  v16[0] = *(void *)((char *)a1 + OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = a1;
  aBlock[4] = sub_1000FB868;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000B8C74;
  aBlock[3] = &unk_1002C08A8;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = a1;
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_1000FB8DC(&qword_1003212C0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100080E08(&qword_1003212C8);
  sub_1000C1468((unint64_t *)&unk_1003212D0, &qword_1003212C8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release();
}

uint64_t sub_1000F9D04(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    (*(void (**)(uint64_t))((swift_isaMask & *a2) + 0xA0))(result);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "watchdog failed, shuting down", v11, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v13 = 0x3A72656863746177;
    unint64_t v14 = 0xE900000000000020;
    v12._uint64_t countAndFlagsBits = Array.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, unint64_t))((swift_isaMask & *a2) + 0xF8))(v13, v14);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000F9F5C()
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8))();
  if (result)
  {
    swift_getObjectType();
    OS_dispatch_source.cancel()();
    return swift_unknownObjectRelease();
  }
  return result;
}

void KTWatchdog.init()()
{
}

id KTWatchdog.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTWatchdog();
  return [super dealloc];
}

void *sub_1000FA23C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100080E08((uint64_t *)&unk_100322390);
      os_log_type_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 29;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 2);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      os_log_type_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 4 * v8 + 32)) {
          memmove(v13, a4 + 4, 4 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000FAE34(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1000FA34C(void *a1)
{
  return sub_1000FA23C(0, a1[2], 0, a1);
}

uint64_t sub_1000FA360(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100080E08(&qword_100322388);
  char v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        int64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        unint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          int64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v24 = v36[v14];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v14 = v25;
          }
        }
LABEL_30:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      uint64_t v33 = *v31;
      uint64_t v32 = v31[1];
      long long v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v19 = 16 * v18;
      double v20 = (void *)(*(void *)(v8 + 48) + v19);
      *double v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_1000FA66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_100089D6C(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1000FA7F4();
LABEL_7:
    double v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_release();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1000FA360(v17, a5 & 1);
  unint64_t v23 = sub_100089D6C(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  double v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  int64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *int64_t v25 = a3;
  v25[1] = a4;
  char v26 = (void *)(v20[7] + 16 * v14);
  *char v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v29;

  return swift_bridgeObjectRetain();
}

void *sub_1000FA7F4()
{
  uint64_t v1 = v0;
  sub_100080E08(&qword_100322388);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    long long v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1000FA9B8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v25 = v3;
  uint64_t v26 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v24 = &v1[OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer];
  *(void *)&v1[OBJC_IVAR____TtC13transparencyd10KTWatchdog_intervalTimer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep] = a1;
  int64_t v13 = v1;
  unint64_t v23 = v13;
  swift_unknownObjectRetain();
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd10KTWatchdog_watchers] = sub_1000F761C((uint64_t)_swiftEmptyArrayStorage);
  Logger.init(transparencyCategory:)();
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v13[OBJC_IVAR____TtC13transparencyd10KTWatchdog_log], v12, v9);
  v13[OBJC_IVAR____TtC13transparencyd10KTWatchdog_pending] = 0;
  sub_10008E0A0(0, (unint64_t *)&qword_10031FB58);
  static DispatchQoS.unspecified.getter();
  BOOL v28 = _swiftEmptyArrayStorage;
  v22[2] = sub_1000FB8DC((unint64_t *)&unk_1003223A0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  v22[1] = sub_100080E08(&qword_10031FB60);
  sub_1000C1468((unint64_t *)&qword_1003223B0, &qword_10031FB60);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v14 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  uint64_t v15 = v25;
  uint64_t v16 = *(void (**)(char *, void, uint64_t))(v26 + 104);
  v26 += 104;
  v22[0] = v16;
  v16(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v25);
  uint64_t v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v18 = v23;
  *(void *)&v23[OBJC_IVAR____TtC13transparencyd10KTWatchdog_queue] = v17;
  static DispatchQoS.unspecified.getter();
  BOOL v28 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  ((void (*)(char *, uint64_t, uint64_t))v22[0])(v6, v14, v15);
  *(void *)&v18[OBJC_IVAR____TtC13transparencyd10KTWatchdog_workQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v19 = v24;
  swift_beginAccess();
  *(void *)uint64_t v19 = 0;

  swift_unknownObjectRelease();
  long long v20 = (objc_class *)type metadata accessor for KTWatchdog();
  v27.receiver = v18;
  v27.super_class = v20;
  return [super init];
}

char *sub_1000FAE34(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    size_t v6 = 4 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _s13transparencyd10KTWatchdogC12isInDebuggerSbyFZ_0()
{
  memset(v9, 0, sizeof(v9));
  uint64_t v10 = 0;
  int v11 = 0;
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  uint64_t v25 = 0;
  uint64_t v38 = 0;
  __int16 v39 = 0;
  int v44 = 0;
  uint64_t v51 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  int v14 = 0;
  int v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v23 = 0;
  int v24 = 0;
  long long v22 = 0u;
  long long v27 = 0u;
  memset(v28, 0, sizeof(v28));
  long long v29 = 0u;
  int v26 = 0;
  int v30 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  memset(v37, 0, sizeof(v37));
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v45 = 0u;
  int v47 = 0;
  uint64_t v46 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  __int16 v50 = 0;
  long long v52 = 0u;
  __int16 v54 = 0;
  uint64_t v53 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  size_t v8 = 648;
  id v0 = [self processInfo];
  unsigned int v1 = [v0 processIdentifier];

  size_t v7 = 12;
  uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v2 + 16) = 12;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)size_t v6 = xmmword_100288AF0;
  sysctlnametomib(v6, (int *)(v2 + 32), &v7);
  size_t v3 = v7;
  int64_t v4 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    if (v4 >= 12)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      if ((v3 & 0x8000000000000000) == 0) {
        goto LABEL_5;
      }
LABEL_12:
      __break(1u);
LABEL_13:
      __break(1u);
    }
  }
  uint64_t v2 = (uint64_t)sub_1000FA34C((void *)v2);
  if ((v3 & 0x8000000000000000) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if (v3 >= *(void *)(v2 + 16)) {
    goto LABEL_13;
  }
  *(_DWORD *)(v2 + 32 + 4 * v3) = v1;
  size_t v7 = v4;
  if (v4 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sysctl((int *)(v2 + 32), v4, v9, &v8, 0, 0);
    swift_bridgeObjectRelease();
    return (v9[33] >> 3) & 1;
  }
  return result;
}

uint64_t sub_1000FB1C4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FB1FC()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x100))();
}

uint64_t sub_1000FB258(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000FB268()
{
  return swift_release();
}

uint64_t sub_1000FB270()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000FB2B8()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v4;
  *(void *)(v6 + 24) = v5;
  size_t v7 = *(uint64_t (**)(unsigned char *))((swift_isaMask & *v2) + 0x98);
  swift_bridgeObjectRetain();
  swift_retain();
  size_t v8 = (uint64_t (*)(unsigned char *, void))v7(v14);
  uint64_t v10 = v9;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v10;
  *uint64_t v10 = 0x8000000000000000;
  sub_1000FA66C((uint64_t)sub_1000FB8A8, v6, v1, v3, isUniquelyReferenced_nonNull_native);
  *uint64_t v10 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8(v14, 0);
}

uint64_t sub_1000FB3E4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v24 = a1;
  uint64_t v6 = a2 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a2 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = 16 * i;
    uint64_t v19 = *(void *)(a2 + 56);
    uint64_t v20 = (uint64_t *)(*(void *)(a2 + 48) + v18);
    uint64_t v21 = v20[1];
    v22[0] = *v20;
    v22[1] = v21;
    long long v23 = *(_OWORD *)(v19 + v18);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000F88E0(&v24, v22, a3);
    if (v3)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v10) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v15);
    ++v12;
    if (!v16)
    {
      int64_t v12 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v6 + 8 * v12);
      if (!v16)
      {
        int64_t v12 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)(v6 + 8 * v12);
        if (!v16)
        {
          int64_t v12 = v15 + 3;
          if (v15 + 3 >= v10) {
            goto LABEL_25;
          }
          unint64_t v16 = *(void *)(v6 + 8 * v12);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v16 - 1) & v16;
  }
  int64_t v17 = v15 + 4;
  if (v17 >= v10)
  {
LABEL_25:
    swift_release();
    return v24;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    int64_t v12 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v12 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v12 >= v10) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v12);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000FB5D4()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000FB614()
{
  uint64_t v1 = *(void **)(*(void *)(v0 + 16) + OBJC_IVAR____TtC13transparencyd10KTWatchdog_dep);
  id v2 = String._bridgeToObjectiveC()();
  [v1 watchdogRudeExitWithReason:v2];
}

uint64_t sub_1000FB67C()
{
  return sub_1000F99FC(*(void **)(v0 + 16));
}

uint64_t type metadata accessor for KTWatchdog()
{
  uint64_t result = qword_10032C830;
  if (!qword_10032C830) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000FB6D0()
{
  return type metadata accessor for KTWatchdog();
}

uint64_t sub_1000FB6D8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

char *sub_1000FB7A4()
{
  if (&swift_runtimeSupportsNoncopyableTypes) {
    return (char *)sub_100080E08(&qword_1003222F8);
  }
  else {
    return (char *)&type metadata for () + 8;
  }
}

uint64_t sub_1000FB7CC()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FB804()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1000FB828()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FB868()
{
  return sub_1000F9D04(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000FB870()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FB8A8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000FB8DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1000FB948()
{
  return &qword_100322420;
}

uint64_t sub_1000FB954()
{
  swift_beginAccess();
  uint64_t v0 = qword_100322420;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000FBA20(uint64_t a1, char *a2)
{
  qword_100322420 = a1;
  off_100322428 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000FBAE0())()
{
  return j__swift_endAccess;
}

id sub_1000FBB38()
{
  return *(id *)(v0 + OBJC_IVAR____TtC13transparencyd31KTFixupRemoveMacAppSupportFiles_deps);
}

id sub_1000FBB50(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd31KTFixupRemoveMacAppSupportFiles_deps] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return [super init];
}

id sub_1000FBBA0(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC13transparencyd31KTFixupRemoveMacAppSupportFiles_deps] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for KTFixupRemoveMacAppSupportFiles();
  return [super init];
}

uint64_t type metadata accessor for KTFixupRemoveMacAppSupportFiles()
{
  return self;
}

void sub_1000FBC5C()
{
}

id sub_1000FBCBC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTFixupRemoveMacAppSupportFiles();
  return [super dealloc];
}

uint64_t Logger.init(transparencyCategory:)()
{
  return Logger.init(subsystem:category:)();
}

const char *TransparencyFeatureFlags.domain.getter()
{
  return "Transparency";
}

const char *TransparencyFeatureFlags.feature.getter(char a1)
{
  if (!a1) {
    return "KTDisableKVSSyncedData";
  }
  if (a1 == 1) {
    return "KTUseKVSOptInRecords";
  }
  return "KTEligibilityServerReporting";
}

BOOL static TransparencyFeatureFlags.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void TransparencyFeatureFlags.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int TransparencyFeatureFlags.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

const char *sub_1000FBE00()
{
  uint64_t v1 = "KTUseKVSOptInRecords";
  if (*v0 != 1) {
    uint64_t v1 = "KTEligibilityServerReporting";
  }
  if (*v0) {
    return v1;
  }
  else {
    return "KTDisableKVSSyncedData";
  }
}

uint64_t sub_1000FBE48(uint64_t a1)
{
  return sub_1000FD580(a1);
}

uint64_t sub_1000FBE64@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000FD580(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000FBE98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for KTError();
  uint64_t v15 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  switch(a1)
  {
    case 1:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      goto LABEL_9;
    case 3:
      uint64_t v7 = sub_100080E08(&qword_100322470);
      uint64_t v8 = (char *)v6 + *(int *)(v7 + 48);
      unint64_t v9 = (char *)v6 + *(int *)(v7 + 64);
      *uint64_t v6 = 0;
      v6[1] = 0xE000000000000000;
      uint64_t v10 = type metadata accessor for Date();
      int v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
      v11(v8, 1, 1, v10);
      v11(v9, 1, 1, v10);
      goto LABEL_9;
    case 7:
      *uint64_t v6 = _swiftEmptyArrayStorage;
      goto LABEL_9;
    case 15:
      *uint64_t v6 = 0;
      v6[1] = 0xE000000000000000;
      goto LABEL_9;
    case 16:
      *uint64_t v6 = 0;
      v6[1] = 0xE000000000000000;
LABEL_9:
      swift_storeEnumTagMultiPayload();
      sub_1000FD5E0((uint64_t)v6, a2);
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v4);
      break;
    default:
      int64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      uint64_t result = v12(a2, 1, 1, v4);
      break;
  }
  return result;
}

uint64_t sub_1000FC168()
{
  uint64_t v1 = type metadata accessor for KTError();
  __chkstk_darwin(v1);
  objc_super v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000FD644(v0, (uint64_t)v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = 1;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      swift_bridgeObjectRelease();
      uint64_t v6 = sub_100080E08(&qword_100322470);
      uint64_t v7 = (uint64_t)&v3[*(int *)(v6 + 48)];
      sub_100087A1C((uint64_t)&v3[*(int *)(v6 + 64)], (uint64_t *)&unk_10031F9A0);
      sub_100087A1C(v7, (uint64_t *)&unk_10031F9A0);
      uint64_t result = 3;
      break;
    case 2:
      swift_bridgeObjectRelease();
      uint64_t result = 7;
      break;
    case 3:
      swift_bridgeObjectRelease();
      uint64_t result = 15;
      break;
    case 4:
      swift_bridgeObjectRelease();
      uint64_t result = 16;
      break;
    case 5:
      return result;
    case 6:
      uint64_t result = 4;
      break;
    case 7:
      uint64_t result = 5;
      break;
    case 8:
      uint64_t result = 6;
      break;
    case 9:
      uint64_t result = 8;
      break;
    case 10:
      uint64_t result = 9;
      break;
    case 11:
      uint64_t result = 10;
      break;
    case 12:
      uint64_t result = 11;
      break;
    case 13:
      uint64_t result = 12;
      break;
    case 14:
      uint64_t result = 13;
      break;
    case 15:
      uint64_t result = 14;
      break;
    default:
      swift_bridgeObjectRelease();
      uint64_t result = 2;
      break;
  }
  return result;
}

uint64_t *sub_1000FC334()
{
  return &qword_100322460;
}

uint64_t sub_1000FC340()
{
  swift_beginAccess();
  uint64_t v0 = qword_100322460;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000FC394(uint64_t a1, void *a2)
{
  qword_100322460 = a1;
  off_100322468 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000FC3F0())()
{
  return j__swift_endAccess;
}

unint64_t sub_1000FC448()
{
  uint64_t v1 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  uint64_t v4 = &v42[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = &v42[-v6];
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = &v42[-v9];
  __chkstk_darwin(v8);
  int64_t v12 = &v42[-v11];
  uint64_t v13 = type metadata accessor for KTError();
  __chkstk_darwin(v13);
  uint64_t v15 = (uint64_t *)&v42[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000FD644(v0, (uint64_t)v15);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      uint64_t v18 = sub_100080E08(&qword_100322470);
      uint64_t v19 = (uint64_t)v15 + *(int *)(v18 + 64);
      sub_1000992A8((uint64_t)v15 + *(int *)(v18 + 48), (uint64_t)v12);
      sub_1000992A8(v19, (uint64_t)v10);
      unint64_t v20 = sub_1000C9718((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v46 = &type metadata for String;
      *(void *)&long long v45 = v16;
      *((void *)&v45 + 1) = v17;
      sub_10008B89C(&v45, v44);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v43 = v20;
      sub_1000FD1D8(v44, 6910581, 0xE300000000000000, isUniquelyReferenced_nonNull_native);
      unint64_t v47 = v43;
      swift_bridgeObjectRelease();
      sub_100098440((uint64_t)v12, (uint64_t)v7, (uint64_t *)&unk_10031F9A0);
      uint64_t v22 = type metadata accessor for Date();
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v24 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v23 + 48);
      if (v24(v7, 1, v22) == 1)
      {
        sub_100087A1C((uint64_t)v7, (uint64_t *)&unk_10031F9A0);
        sub_1000FCBFC(0x73656D6954746D73, 0xEC000000706D6174, &v45);
        sub_100087A1C((uint64_t)&v45, &qword_10031FB78);
      }
      else
      {
        uint64_t v46 = (void *)v22;
        long long v35 = sub_10009708C((uint64_t *)&v45);
        (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v23 + 32))(v35, v7, v22);
        sub_10008B89C(&v45, v44);
        unint64_t v36 = v47;
        char v37 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v43 = v36;
        sub_1000FD1D8(v44, 0x73656D6954746D73, 0xEC000000706D6174, v37);
        unint64_t v47 = v43;
        swift_bridgeObjectRelease();
      }
      sub_100098440((uint64_t)v10, (uint64_t)v4, (uint64_t *)&unk_10031F9A0);
      if (v24(v4, 1, v22) == 1)
      {
        sub_100087A1C((uint64_t)v4, (uint64_t *)&unk_10031F9A0);
        sub_1000FCBFC(0x63655264756F6C63, 0xEB0000000064726FLL, &v45);
        sub_100087A1C((uint64_t)&v45, &qword_10031FB78);
        unint64_t v25 = v47;
      }
      else
      {
        uint64_t v46 = (void *)v22;
        uint64_t v38 = sub_10009708C((uint64_t *)&v45);
        (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v23 + 32))(v38, v4, v22);
        sub_10008B89C(&v45, v44);
        unint64_t v39 = v47;
        char v40 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v43 = v39;
        sub_1000FD1D8(v44, 0x63655264756F6C63, 0xEB0000000064726FLL, v40);
        unint64_t v25 = v43;
        swift_bridgeObjectRelease();
      }
      sub_100087A1C((uint64_t)v10, (uint64_t *)&unk_10031F9A0);
      sub_100087A1C((uint64_t)v12, (uint64_t *)&unk_10031F9A0);
      break;
    case 2u:
      uint64_t v26 = *v15;
      long long v27 = _swiftEmptyArrayStorage;
      *(void *)&long long v45 = _swiftEmptyArrayStorage;
      uint64_t v28 = *(void *)(v26 + 16);
      if (v28)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v28; ++i)
        {
          swift_errorRetain();
          _convertErrorToNSError(_:)();
          swift_errorRelease();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        swift_bridgeObjectRelease();
        long long v27 = (void *)v45;
      }
      swift_bridgeObjectRelease();
      sub_100080E08(&qword_100321488);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1002856F0;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v34;
      *(void *)(inited + 72) = sub_100080E08(&qword_100322478);
      *(void *)(inited + 48) = v27;
      uint64_t v32 = inited;
      goto LABEL_13;
    case 3u:
    case 4u:
      uint64_t v30 = *v15;
      uint64_t v31 = v15[1];
      sub_100080E08(&qword_100321488);
      uint64_t v32 = swift_initStackObject();
      *(_OWORD *)(v32 + 16) = xmmword_1002856F0;
      *(void *)(v32 + 32) = 6910581;
      *(void *)(v32 + 40) = 0xE300000000000000;
      *(void *)(v32 + 72) = &type metadata for String;
      *(void *)(v32 + 48) = v30;
      *(void *)(v32 + 56) = v31;
LABEL_13:
      unint64_t v25 = sub_1000C9718(v32);
      break;
    default:
      unint64_t v25 = sub_1000C9718((uint64_t)_swiftEmptyArrayStorage);
      sub_1000FD6A8((uint64_t)v15);
      break;
  }
  return v25;
}

uint64_t sub_1000FCA68(uint64_t a1)
{
  uint64_t v2 = sub_1000FE9B4(&qword_100322530);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000FCAC0(uint64_t a1)
{
  uint64_t v2 = sub_1000FE9B4(&qword_100322530);
  uint64_t v3 = sub_1000FE9B4(&qword_100322528);
  unint64_t v4 = sub_100089BBC();

  return Error<>._code.getter(a1, v2, v3, v4);
}

uint64_t sub_1000FCB54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000FE9B4(&qword_100322528);
  unint64_t v5 = sub_100089BBC();

  return CustomNSError<>.errorCode.getter(a1, a2, v4, v5);
}

uint64_t sub_1000FCBCC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000FBE98(*a1, a2);
}

uint64_t sub_1000FCBD4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000FC168();
  *a1 = result;
  return result;
}

double sub_1000FCBFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100089D6C(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1000FD398();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_10008B89C((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_1000FD000(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_1000FCD00(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100080E08(&qword_100321188);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_10008B89C(v24, v35);
      }
      else
      {
        sub_100089D08((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_10008B89C(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

unint64_t sub_1000FD000(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          int64_t v13 = (_OWORD *)(v12 + 16 * v3);
          unint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *int64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          unint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *unint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *int64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *sub_1000FD1D8(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  Swift::Int v10 = (void *)*v4;
  unint64_t v12 = sub_100089D6C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1000FD398();
      goto LABEL_7;
    }
    sub_1000FCD00(v15, a4 & 1);
    unint64_t v21 = sub_100089D6C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      int64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10008FBC4((uint64_t)v19);
    return sub_10008B89C(a1, v19);
  }
LABEL_13:
  sub_1000FD32C(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

_OWORD *sub_1000FD32C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  *unint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10008B89C(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_1000FD398()
{
  uint64_t v1 = v0;
  sub_100080E08(&qword_100321188);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100089D08(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_10008B89C(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1000FD580(uint64_t result)
{
  if ((unint64_t)(result - 17) < 0xFFFFFFFFFFFFFFF0) {
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for KTError()
{
  uint64_t result = qword_10032CCC0;
  if (!qword_10032CCC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000FD5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FD644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FD6A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KTError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000FD708()
{
  unint64_t result = qword_100322480;
  if (!qword_100322480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322480);
  }
  return result;
}

unint64_t sub_1000FD760()
{
  unint64_t result = qword_100322488;
  if (!qword_100322488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322488);
  }
  return result;
}

uint64_t sub_1000FD7B4()
{
  return sub_1000FE9B4((unint64_t *)&qword_100321170);
}

uint64_t getEnumTagSinglePayload for TransparencyFeatureFlags(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for TransparencyFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FD944);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyFeatureFlags()
{
  return &type metadata for TransparencyFeatureFlags;
}

ValueMetadata *type metadata accessor for KTErrorOBJC()
{
  return &type metadata for KTErrorOBJC;
}

void *sub_1000FD98C(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        swift_bridgeObjectRetain();
        uint64_t v11 = sub_100080E08(&qword_100322470);
        uint64_t v12 = *(int *)(v11 + 48);
        int64_t v13 = (char *)a1 + v12;
        unint64_t v14 = (char *)a2 + v12;
        uint64_t v15 = type metadata accessor for Date();
        uint64_t v16 = *(void *)(v15 - 8);
        uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
        if (v17(v14, 1, v15))
        {
          uint64_t v18 = sub_100080E08((uint64_t *)&unk_10031F9A0);
          memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
        }
        uint64_t v20 = *(int *)(v11 + 64);
        unint64_t v21 = (char *)a1 + v20;
        int64_t v22 = (char *)a2 + v20;
        if (v17(v22, 1, v15))
        {
          uint64_t v23 = sub_100080E08((uint64_t *)&unk_10031F9A0);
          memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v21, v22, v15);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v21, 0, 1, v15);
        }
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
      case 4u:
        uint64_t v19 = a2[1];
        *a1 = *a2;
        a1[1] = v19;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000FDCB4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 3:
    case 4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 1:
      swift_bridgeObjectRelease();
      uint64_t v3 = sub_100080E08(&qword_100322470);
      uint64_t v4 = a1 + *(int *)(v3 + 48);
      uint64_t v5 = type metadata accessor for Date();
      uint64_t v9 = *(void *)(v5 - 8);
      uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      if (!v6(v4, 1, v5)) {
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v5);
      }
      uint64_t v7 = a1 + *(int *)(v3 + 64);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v5);
      if (!result)
      {
        uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
        uint64_t result = v8(v7, v5);
      }
      break;
    default:
      return result;
  }
  return result;
}

void *sub_1000FDE60(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_12;
    case 1u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_100080E08(&qword_100322470);
      uint64_t v9 = *(int *)(v8 + 48);
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for Date();
      uint64_t v13 = *(void *)(v12 - 8);
      unint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
      if (v14(v11, 1, v12))
      {
        uint64_t v15 = sub_100080E08((uint64_t *)&unk_10031F9A0);
        memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      uint64_t v17 = *(int *)(v8 + 64);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      if (v14(v19, 1, v12))
      {
        uint64_t v20 = sub_100080E08((uint64_t *)&unk_10031F9A0);
        memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v18, v19, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v18, 0, 1, v12);
      }
      goto LABEL_12;
    case 2u:
      *a1 = *a2;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    case 3u:
    case 4u:
      uint64_t v16 = a2[1];
      *a1 = *a2;
      a1[1] = v16;
      swift_bridgeObjectRetain();
LABEL_12:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *sub_1000FE134(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000FD6A8((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        uint64_t v6 = sub_100080E08(&qword_100322470);
        uint64_t v7 = *(int *)(v6 + 48);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = type metadata accessor for Date();
        uint64_t v11 = *(void *)(v10 - 8);
        uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
        if (v12(v9, 1, v10))
        {
          uint64_t v13 = sub_100080E08((uint64_t *)&unk_10031F9A0);
          memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        }
        uint64_t v14 = *(int *)(v6 + 64);
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (char *)a2 + v14;
        if (v12(v16, 1, v10))
        {
          uint64_t v17 = sub_100080E08((uint64_t *)&unk_10031F9A0);
          memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v16, v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
        }
        goto LABEL_13;
      case 2u:
        *a1 = *a2;
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 3u:
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
LABEL_13:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *sub_1000FE438(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v6 = sub_100080E08(&qword_100322470);
    uint64_t v7 = *(int *)(v6 + 48);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_100080E08((uint64_t *)&unk_10031F9A0);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = *(int *)(v6 + 64);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    if (v12(v16, 1, v10))
    {
      uint64_t v17 = sub_100080E08((uint64_t *)&unk_10031F9A0);
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v16, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *sub_1000FE658(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000FD6A8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = sub_100080E08(&qword_100322470);
      uint64_t v7 = *(int *)(v6 + 48);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Date();
      uint64_t v11 = *(void *)(v10 - 8);
      uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      if (v12(v9, 1, v10))
      {
        uint64_t v13 = sub_100080E08((uint64_t *)&unk_10031F9A0);
        memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      uint64_t v14 = *(int *)(v6 + 64);
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = (char *)a2 + v14;
      if (v12(v16, 1, v10))
      {
        uint64_t v17 = sub_100080E08((uint64_t *)&unk_10031F9A0);
        memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v16, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000FE888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_1000FE8B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1000FE8DC()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_1000FE8EC()
{
  int v2 = &unk_100288DF0;
  sub_1000A4D44();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    uint64_t v3 = &v1;
    uint64_t v4 = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t v5 = &unk_100288E08;
    uint64_t v6 = &unk_100288E08;
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t sub_1000FE9B4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for KTError();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FE9F8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100087A78(v0, qword_10032CCD8);
  sub_100080F90(v0, (uint64_t)qword_10032CCD8);
  return Logger.init(transparencyCategory:)();
}

uint64_t KTStoreOptInOperation.storedRecords.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t KTStoreOptInOperation.storedRecords.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*KTStoreOptInOperation.storedRecords.modify())()
{
  return j__swift_endAccess;
}

id KTStoreOptInOperation.__allocating_init(database:context:records:type:overwrite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v13 = objc_allocWithZone(v6);
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords] = _swiftEmptyArrayStorage;
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_context] = a2;
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_records] = a3;
  *(void *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_database] = a1;
  v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_overwrite] = a6;
  uint64_t v14 = &v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type];
  *uint64_t v14 = a4;
  v14[1] = a5;
  v16.receiver = v13;
  v16.super_class = v6;
  return [super init];
}

id KTStoreOptInOperation.init(database:context:records:type:overwrite:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_storedRecords] = _swiftEmptyArrayStorage;
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_context] = a2;
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_records] = a3;
  *(void *)&v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_database] = a1;
  v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_overwrite] = a6;
  uint64_t v7 = &v6[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type];
  *uint64_t v7 = a4;
  v7[1] = a5;
  v9.receiver = v6;
  v9.super_class = (Class)type metadata accessor for KTStoreOptInOperation();
  return [super init];
}

uint64_t type metadata accessor for KTStoreOptInOperation()
{
  return self;
}

Swift::Void __swiftcall KTStoreOptInOperation.groupStart()()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone((Class)NSBlockOperation) init];
  [v0 dependOnBeforeGroupFinished:v2];
  sub_1000FEEEC();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = _swiftEmptyArrayStorage;
  v5.super.super.super.super.Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(*(Swift::OpaquePointer_optional *)&v3, v17).super.super.super.super.isa;
  Class isa = v5.super.super.super.super.isa;
  if (v1[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_overwrite] == 1) {
    [(objc_class *)v5.super.super.super.super.isa setSavePolicy:2];
  }
  [(objc_class *)isa setQualityOfService:25];
  uint64_t v7 = *(void *)&v1[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type];
  uint64_t v8 = *(void **)&v1[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_type + 8];
  uint64_t v15 = isa;
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [(objc_class *)v15 setName:v10];

  *(void *)(swift_allocObject() + 16) = v1;
  uint64_t v11 = v1;
  CKModifyRecordsOperation.perRecordSaveBlock.setter();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v2;
  uint64_t v13 = v11;
  id v14 = v2;
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
  [*(id *)&v13[OBJC_IVAR____TtC13transparencyd21KTStoreOptInOperation_database] addOperation:v15];
}

unint64_t sub_1000FEEEC()
{
  unint64_t result = qword_100320B00;
  if (!qword_100320B00)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100320B00);
  }
  return result;
}

uint64_t sub_1000FEF2C()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000FEF64(uint64_t a1, void *a2, char a3)
{
  CKModifyRecordsOperation v5 = *(void **)(v3 + 16);
  if (a3)
  {
    swift_errorRetain();
    uint64_t v11 = (void *)_convertErrorToNSError(_:)();
    [v5 setError:v11];

    if (qword_10032CCD0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100080F90(v12, (uint64_t)qword_10032CCD8);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    swift_errorRetain();
    swift_errorRetain();
    log = Logger.logObject.getter();
    if (os_log_type_enabled(log, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)id v14 = 138412290;
      swift_errorRetain();
      v17[0] = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v15 = v17[0];
      sub_10008FBB8(a2, 1);
      sub_10008FBB8(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, log, v13, "KTStoreOptInOperation:perRecordSaveBlock: fail: %@", v14, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10008FBB8(a2, 1);
    }
    else
    {
      sub_10008FBB8(a2, 1);
      sub_10008FBB8(a2, 1);
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(void *))((swift_isaMask & *v5) + 0x90);
    id v7 = a2;
    uint64_t v8 = (void (*)(void *, void))v6(v17);
    NSString v10 = v9;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v8(v17, 0);
  }
}

uint64_t sub_1000FF23C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000FF27C(uint64_t a1, char a2)
{
}

void KTStoreOptInOperation.init()()
{
}

id KTStoreOptInOperation.__deallocating_deinit()
{
  return sub_1000FFE14(type metadata accessor for KTStoreOptInOperation);
}

void *KTDeleteOptInOperation.deletedRecordID.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID);
  swift_beginAccess();
  id v2 = *v1;
  id v3 = v2;
  return v2;
}

void KTDeleteOptInOperation.deletedRecordID.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*KTDeleteOptInOperation.deletedRecordID.modify())()
{
  return j_j__swift_endAccess;
}

id KTDeleteOptInOperation.__allocating_init(database:context:recordID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (char *)objc_allocWithZone(v3);
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID] = 0;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_context] = a2;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_recordID] = a3;
  *(void *)&v7[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_database] = a1;
  v9.receiver = v7;
  v9.super_class = v3;
  return [super init];
}

id KTDeleteOptInOperation.init(database:context:recordID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_deletedRecordID] = 0;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_context] = a2;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_recordID] = a3;
  *(void *)&v3[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_database] = a1;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for KTDeleteOptInOperation();
  return [super init];
}

uint64_t type metadata accessor for KTDeleteOptInOperation()
{
  return self;
}

Swift::Void __swiftcall KTDeleteOptInOperation.groupStart()()
{
  uint64_t v1 = v0;
  id v2 = [objc_allocWithZone((Class)NSBlockOperation) init];
  [v0 dependOnBeforeGroupFinished:v2];
  sub_1000FEEEC();
  sub_100080E08(&qword_100320D40);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_100287920;
  uint64_t v4 = *(void **)&v0[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_recordID];
  *(void *)(v3 + 32) = v4;
  Swift::Bool v13 = v3;
  specialized Array._endMutation()();
  id v5 = v4;
  v15.value._rawValue = _swiftEmptyArrayStorage;
  v15.is_nil = v13;
  Class isa = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v15, v16).super.super.super.super.isa;
  [(objc_class *)isa setQualityOfService:25];
  uint64_t v12 = isa;
  NSString v7 = String._bridgeToObjectiveC()();
  [(objc_class *)v12 setName:v7];

  *(void *)(swift_allocObject() + 16) = v1;
  id v8 = v1;
  CKModifyRecordsOperation.perRecordDeleteBlock.setter();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v8;
  *(void *)(v9 + 24) = v2;
  NSString v10 = (char *)v8;
  id v11 = v2;
  CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
  [*(id *)&v10[OBJC_IVAR____TtC13transparencyd22KTDeleteOptInOperation_database] addOperation:v12];
}

void sub_1000FF7D0(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(void **)(v3 + 16);
  if (a3)
  {
    swift_errorRetain();
    uint64_t v9 = (void *)_convertErrorToNSError(_:)();
    [v4 setError:v9];

    if (qword_10032CCD0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100080F90(v10, (uint64_t)qword_10032CCD8);
    os_log_type_t v11 = static os_log_type_t.error.getter();
    swift_errorRetain();
    swift_errorRetain();
    log = Logger.logObject.getter();
    if (os_log_type_enabled(log, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      Swift::Bool v13 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 138412290;
      swift_errorRetain();
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *Swift::Bool v13 = v15;
      sub_10008FBA0(a2, 1);
      sub_10008FBA0(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, log, v11, "KTDeleteOptInOperation:perRecordSaveBlock: fail: %@", v12, 0xCu);
      sub_100080E08((uint64_t *)&unk_100320B30);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10008FBA0(a2, 1);
    }
    else
    {
      sub_10008FBA0(a2, 1);
      sub_10008FBA0(a2, 1);
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v6 = *(void (**)(void *))((swift_isaMask & *v4) + 0x78);
    id v7 = a1;
    v6(a1);
  }
}

void sub_1000FFA48(uint64_t a1, char a2)
{
}

void sub_1000FFA5C(uint64_t a1, char a2, const char *a3, const char *a4)
{
  id v5 = *(void **)(v4 + 16);
  uint64_t v6 = *(void *)(v4 + 24);
  if ((a2 & 1) == 0)
  {
    if (qword_10032CCD0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100080F90(v8, (uint64_t)qword_10032CCD8);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, a4, v11, 2u);
      swift_slowDealloc();
    }
    goto LABEL_11;
  }
  swift_errorRetain();
  id v14 = (void *)_convertErrorToNSError(_:)();
  [v5 setError:v14];

  if (qword_10032CCD0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100080F90(v15, (uint64_t)qword_10032CCD8);
  os_log_type_t v16 = static os_log_type_t.error.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v17 = v16;
  if (!os_log_type_enabled(v9, v16))
  {
    sub_10008FBA0(a1, 1);
    sub_10008FBA0(a1, 1);
    swift_errorRelease();
LABEL_11:

    goto LABEL_12;
  }
  uint64_t v18 = (uint8_t *)swift_slowAlloc();
  uint64_t v21 = v6;
  uint64_t v19 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v18 = 138412290;
  swift_errorRetain();
  uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v19 = v22;
  sub_10008FBA0(a1, 1);
  sub_10008FBA0(a1, 1);
  _os_log_impl((void *)&_mh_execute_header, v9, v17, a3, v18, 0xCu);
  sub_100080E08((uint64_t *)&unk_100320B30);
  swift_arrayDestroy();
  uint64_t v6 = v21;
  swift_slowDealloc();
  swift_slowDealloc();

  sub_10008FBA0(a1, 1);
LABEL_12:
  id v20 = [v5 operationQueue:v21, v22];
  [v20 addOperation:v6];
}

void KTDeleteOptInOperation.init()()
{
}

id KTDeleteOptInOperation.__deallocating_deinit()
{
  return sub_1000FFE14(type metadata accessor for KTDeleteOptInOperation);
}

id sub_1000FFE14(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

BOOL sub_1000FFEC0(uint64_t a1)
{
  return a1 == 1;
}

uint64_t sub_1000FFECC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000FFF18(uint64_t a1)
{
  objc_super v3 = (void *)(v1 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords);
  swift_beginAccess();
  *objc_super v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1000FFF6C())()
{
  return j__swift_endAccess;
}

uint64_t sub_1000FFFC8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000FFFD8()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_100100020(char a1)
{
  objc_super v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState);
  uint64_t result = swift_beginAccess();
  *objc_super v3 = a1;
  return result;
}

uint64_t (*sub_10010006C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1001000C8()
{
  return *(void *)v0;
}

uint64_t sub_1001000D4(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t sub_1001000E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for KTOptIOValidator.OptInResult();
  return sub_100098440(v1 + *(int *)(v3 + 20), a1, (uint64_t *)&unk_10031F9A0);
}

uint64_t sub_100100128(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult() + 20);

  return sub_1000C12FC(a1, v3);
}

uint64_t (*sub_10010016C())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1001001B4()
{
  return 0;
}

uint64_t sub_1001001C0()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100100200(uint64_t a1, uint64_t a2)
{
  id v5 = (void *)(v2 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *id v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*sub_100100248())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100100290@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v2 = type metadata accessor for KTOptIOValidator.OptInResult();
  uint64_t v3 = a1 + *(int *)(v2 + 20);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v6 = (void *)(a1 + *(int *)(v2 + 24));
  *uint64_t v6 = 0;
  v6[1] = 0;
  return result;
}

uint64_t sub_100100324@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(unsigned char *)(a6 + 8) = a2 & 1;
  uint64_t v10 = type metadata accessor for KTOptIOValidator.OptInResult();
  uint64_t result = sub_1000992A8(a3, a6 + *(int *)(v10 + 20));
  uint64_t v12 = (void *)(a6 + *(int *)(v10 + 24));
  *uint64_t v12 = a4;
  v12[1] = a5;
  return result;
}

id KTOptIOValidator.__allocating_init(optInRecords:uriToSMT:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  uint64_t v6 = &v5[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState];
  v5[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState] = 2;
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords] = a1;
  *(void *)&v5[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT] = a2;
  swift_beginAccess();
  *uint64_t v6 = 2;
  v8.receiver = v5;
  v8.super_class = v2;
  return [super init];
}

id KTOptIOValidator.init(optInRecords:uriToSMT:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = &v2[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState];
  v2[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_intendedState] = 2;
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_optInRecords] = a1;
  *(void *)&v2[OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT] = a2;
  swift_beginAccess();
  *uint64_t v3 = 2;
  v5.receiver = v2;
  v5.super_class = (Class)type metadata accessor for KTOptIOValidator();
  return [super init];
}

Swift::Void __swiftcall KTOptIOValidator.setIntendedState(state:)(Swift::Bool state)
{
  (*(void (**)(Swift::Bool))((swift_isaMask & *v1) + 0x88))(state);
}

void sub_100100654(unint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for KTOptIOValidator.OptInResult();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v47 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  __int16 v50 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (uint64_t)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = _swiftEmptyArrayStorage;
  unint64_t v48 = a1;
  if (a1 >> 62) {
    goto LABEL_32;
  }
  uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (2)
  {
    long long v45 = (void *)a3;
    uint64_t v46 = v10;
    uint64_t v43 = a2;
    unint64_t v44 = v5;
    if (!v17)
    {
      swift_bridgeObjectRelease();
      BOOL v30 = _swiftEmptyArrayStorage;
      goto LABEL_17;
    }
    if (v17 < 1)
    {
      __break(1u);
LABEL_37:
      swift_release();
      __break(1u);
      return;
    }
    long long v41 = v12;
    uint64_t v42 = a4;
    uint64_t v18 = 0;
    unint64_t v19 = v48;
    unint64_t v51 = v48 & 0xC000000000000001;
    long long v49 = (void (**)(uint64_t, char *, uint64_t))(v47 + 32);
    id v20 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
    uint64_t v21 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
    do
    {
      if (v51) {
        id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v22 = *(id *)(v19 + 8 * v18 + 32);
      }
      uint64_t v23 = v22;
      id v24 = [v22 smtTimestamp:v41, v42];
      if (!v24)
      {
        (*v20)(v16, 1, 1, v52);
LABEL_7:
        sub_1000ABA80(v16);

        goto LABEL_8;
      }
      uint64_t v25 = v24;
      uint64_t v26 = v17;
      unint64_t v27 = v50;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      char v28 = v27;
      uint64_t v17 = v26;
      uint64_t v29 = v52;
      (*v49)(v16, v28, v52);
      (*v20)(v16, 0, 1, v29);
      if ((*v21)(v16, 1, v29) == 1) {
        goto LABEL_7;
      }
      sub_1000ABA80(v16);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      unint64_t v19 = v48;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
LABEL_8:
      ++v18;
    }
    while (v17 != v18);
    swift_bridgeObjectRelease();
    BOOL v30 = v53;
    uint64_t v12 = v41;
    a4 = v42;
LABEL_17:
    uint64_t v31 = (uint64_t)v45;
    swift_bridgeObjectRetain();
    unint64_t v32 = v44;
    unint64_t v33 = (unint64_t)sub_100106210((unint64_t)v30, v43, v31);
    swift_release();
    swift_bridgeObjectRelease();
    if ((v33 & 0x8000000000000000) != 0 || (v33 & 0x4000000000000000) != 0)
    {
      unint64_t v40 = swift_bridgeObjectRetain();
      uint64_t v34 = sub_1000B8D4C(v40);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v34 = (void *)(v33 & 0xFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
    }
    uint64_t v53 = v34;
    sub_1001036E4((uint64_t *)&v53);
    if (v32) {
      goto LABEL_37;
    }
    uint64_t v10 = 0;
    swift_bridgeObjectRelease();
    a3 = (unint64_t)v53;
    *(void *)uint64_t v12 = 0;
    v12[8] = 1;
    uint64_t v35 = v46;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(&v12[*(int *)(v46 + 20)], 1, 1, v52);
    unint64_t v36 = &v12[*(int *)(v35 + 24)];
    *(void *)unint64_t v36 = 0;
    *((void *)v36 + 1) = 0;
    if ((a3 & 0x8000000000000000) != 0 || (a3 & 0x4000000000000000) != 0)
    {
      swift_retain();
      a2 = _CocoaArrayWrapper.endIndex.getter();
      if (a2) {
        goto LABEL_24;
      }
    }
    else
    {
      a2 = *(void *)(a3 + 16);
      swift_retain();
      if (a2)
      {
LABEL_24:
        unint64_t v5 = a3 & 0xC000000000000001;
        uint64_t v16 = 4;
        while (1)
        {
          id v37 = v5 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a3 + 8 * v16);
          uint64_t v38 = v37;
          uint64_t v39 = v16 - 3;
          if (__OFADD__(v16 - 4, 1)) {
            break;
          }
          uint64_t v53 = v37;
          sub_100100B48((uint64_t)v12, (id *)&v53);

          ++v16;
          if (v39 == a2) {
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_32:
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        continue;
      }
    }
    break;
  }
LABEL_30:
  swift_release();
  sub_100106428((uint64_t)v12, a4);
  swift_release();
}

id sub_100100B48(uint64_t a1, id *a2)
{
  uint64_t v41 = a1;
  uint64_t v3 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  objc_super v8 = (char *)&v40 - v7;
  uint64_t v40 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v40 - 8);
  uint64_t v10 = __chkstk_darwin(v40);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v40 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v40 - v16;
  id v18 = *a2;
  id result = [*a2 state];
  id v20 = result;
  if (!result)
  {
    id v30 = *(id *)v41;
    char v31 = *(unsigned char *)(v41 + 8);
    id result = [v18 state];
    if ((v31 & 1) == 0 && v30 == result) {
      goto LABEL_13;
    }
    id v32 = [v18 smtTimestamp:v40];
    if (v32)
    {
      unint64_t v33 = v32;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      uint64_t v35 = v40;
      v34(v6, v15, v40);
      unint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
      v36(v6, 0, 1, v35);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v35) != 1)
      {
        v34(v12, v6, v35);
        id v37 = (void (*)(uint64_t, char *, uint64_t))v34;
        uint64_t v38 = v41 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult() + 20);
        sub_1000ABA80(v38);
        v37(v38, v12, v35);
        id result = (id)((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v36)(v38, 0, 1, v35);
        goto LABEL_13;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v6, 1, 1, v40);
    }
    sub_1000ABA80((uint64_t)v6);
    type metadata accessor for KTError();
    sub_10010648C();
    swift_allocError();
    goto LABEL_19;
  }
  if (result != (id)1) {
    return result;
  }
  id v21 = *(id *)v41;
  char v22 = *(unsigned char *)(v41 + 8);
  id result = [v18 state];
  if ((v22 & 1) != 0 || v21 != result)
  {
    id v23 = [v18 smtTimestamp:v40];
    if (v23)
    {
      id v24 = v23;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      uint64_t v26 = v40;
      v25(v8, v15, v40);
      unint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56);
      v27(v8, 0, 1, v26);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v26) != 1)
      {
        v25(v17, v8, v26);
        char v28 = (void (*)(uint64_t, char *, uint64_t))v25;
        uint64_t v29 = v41 + *(int *)(type metadata accessor for KTOptIOValidator.OptInResult() + 20);
        sub_1000ABA80(v29);
        v28(v29, v17, v26);
        id result = (id)((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v27)(v29, 0, 1, v26);
        goto LABEL_13;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v8, 1, 1, v40);
    }
    sub_1000ABA80((uint64_t)v8);
    type metadata accessor for KTError();
    sub_10010648C();
    swift_allocError();
LABEL_19:
    swift_storeEnumTagMultiPayload();
    return (id)swift_willThrow();
  }
LABEL_13:
  uint64_t v39 = v41;
  *(void *)uint64_t v41 = v20;
  *(unsigned char *)(v39 + 8) = 0;
  return result;
}

void *sub_100101010(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      objc_super v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      id v10 = [v7 uri];
      if (v10)
      {
        uint64_t v11 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_17:
          swift_bridgeObjectRelease();
          return v8;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_17;
        }
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  return 0;
}

void KTOptIOValidator.evaluateLogData(application:)()
{
  uint64_t v1 = v0;
  uint64_t v158 = type metadata accessor for Date();
  uint64_t v150 = *(void *)(v158 - 8);
  uint64_t v2 = __chkstk_darwin(v158);
  v142 = (char *)&v123 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __chkstk_darwin(v2);
  v145 = (char *)&v123 - v5;
  uint64_t v6 = __chkstk_darwin(v4);
  v152 = (char *)&v123 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  v151 = (char *)&v123 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  v153 = (char *)&v123 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  v149 = (char *)&v123 - v13;
  __chkstk_darwin(v12);
  v161 = (char *)&v123 - v14;
  uint64_t v15 = type metadata accessor for KTOptIOValidator.OptInResult();
  uint64_t v16 = __chkstk_darwin(v15);
  id v18 = (char *)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  unint64_t v20 = (unint64_t)&v123 - v19;
  uint64_t v21 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  v147 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  v140 = (char *)&v123 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  v141 = (char *)&v123 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v146 = (char *)&v123 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v144 = (char *)&v123 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v34 = (uint64_t)&v123 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  v155 = (char *)&v123 - v36;
  id v37 = *(void (**)(uint64_t))((swift_isaMask & *v0) + 0x68);
  uint64_t v162 = (swift_isaMask & *v0) + 104;
  v163 = v37;
  unint64_t v38 = ((uint64_t (*)(uint64_t))v37)(v35);
  if (v38 >> 62) {
    goto LABEL_106;
  }
  uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  uint64_t v40 = swift_bridgeObjectRelease();
  if (v39)
  {
    v163(v40);
    uint64_t v41 = v154;
    (*(void (**)(void))((swift_isaMask & *v1) + 0xA8))();
    swift_bridgeObjectRelease();
    if (v41) {
      return;
    }
    uint64_t v154 = 0;
    sub_100106428((uint64_t)v18, v20);
    if ((*(unsigned char *)(v20 + 8) & 1) != 0 || (unint64_t v157 = *(void *)v20, v157 > 1))
    {
      type metadata accessor for KTError();
      sub_10010648C();
      swift_allocError();
      goto LABEL_98;
    }
    sub_100098440(v20 + *(int *)(v15 + 20), v34, (uint64_t *)&unk_10031F9A0);
    uint64_t v114 = v150;
    uint64_t v115 = v158;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v34, 1, v158) == 1)
    {
      sub_1000ABA80(v34);
      type metadata accessor for KTError();
      sub_10010648C();
      swift_allocError();
LABEL_98:
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_1001063CC(v20);
      return;
    }
    v120 = v161;
    (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v161, v34, v115);
    uint64_t v121 = (uint64_t)v155;
    (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v155, v120, v115);
    v122 = *(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56);
    uint64_t v131 = v114 + 56;
    v130 = v122;
    v122((char *)v121, 0, 1, v115);
    uint64_t v15 = v114;
    if (v157 == 1
      && !*(void *)(*(void *)((char *)v1 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT) + 16))
    {
      type metadata accessor for KTError();
      sub_10010648C();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v114 + 8))(v120, v115);
      sub_1001063CC(v20);
      sub_1000ABA80((uint64_t)v155);
      return;
    }
    (*(void (**)(char *, uint64_t))(v114 + 8))(v120, v115);
    sub_1001063CC(v20);
  }
  else
  {
    uint64_t v15 = v150;
    uint64_t v42 = *(void (**)(char *, void, uint64_t, uint64_t))(v150 + 56);
    uint64_t v131 = v150 + 56;
    v130 = v42;
    v42(v155, 1, 1, v158);
    unint64_t v157 = 0;
  }
  v156 = _swiftEmptyArrayStorage;
  unint64_t v136 = sub_10010275C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v43 = *(char **)((char *)v1 + OBJC_IVAR____TtC13transparencyd16KTOptIOValidator_uriToSMT);
  uint64_t v44 = *((void *)v43 + 8);
  v159 = v43 + 64;
  uint64_t v45 = 1 << v43[32];
  uint64_t v46 = -1;
  if (v45 < 64) {
    uint64_t v46 = ~(-1 << v45);
  }
  unint64_t v47 = v46 & v44;
  int64_t v160 = (unint64_t)(v45 + 63) >> 6;
  v133 = (void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  v139 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  v143 = (void (**)(uint64_t, uint64_t))(v15 + 8);
  v135 = (void (**)(char *, char *, uint64_t))(v15 + 16);
  v161 = v43;
  swift_bridgeObjectRetain();
  int v132 = 0;
  uint64_t v34 = 0;
LABEL_11:
  unint64_t v48 = v163;
  if (v47)
  {
LABEL_12:
    unint64_t v49 = __clz(__rbit64(v47));
    v47 &= v47 - 1;
    unint64_t v50 = v49 | (v34 << 6);
    goto LABEL_24;
  }
  while (1)
  {
    BOOL v51 = __OFADD__(v34++, 1);
    if (v51)
    {
      __break(1u);
      goto LABEL_105;
    }
    if (v34 >= v160) {
      goto LABEL_88;
    }
    unint64_t v52 = *(void *)&v159[8 * v34];
    if (!v52)
    {
      uint64_t v53 = v34 + 1;
      if (v34 + 1 >= v160) {
        goto LABEL_88;
      }
      unint64_t v52 = *(void *)&v159[8 * v53];
      if (!v52)
      {
        uint64_t v53 = v34 + 2;
        if (v34 + 2 >= v160) {
          goto LABEL_88;
        }
        unint64_t v52 = *(void *)&v159[8 * v53];
        if (!v52)
        {
          uint64_t v53 = v34 + 3;
          if (v34 + 3 >= v160)
          {
LABEL_88:
            swift_release();
            uint64_t v109 = v158;
            uint64_t v110 = (uint64_t)v147;
            if (v156[2])
            {
              v111 = v156;
              swift_bridgeObjectRelease();
              type metadata accessor for KTError();
              sub_10010648C();
              swift_allocError();
              void *v112 = v111;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              sub_1000ABA80((uint64_t)v155);
            }
            else
            {
              swift_bridgeObjectRelease();
              sub_100098440((uint64_t)v155, v110, (uint64_t *)&unk_10031F9A0);
              if ((*v139)(v110, 1, v109) == 1)
              {
                Class isa = 0;
              }
              else
              {
                Class isa = Date._bridgeToObjectiveC()().super.isa;
                (*v143)(v110, v109);
              }
              id v116 = objc_allocWithZone((Class)KTOptIOValidatorResult);
              unint64_t v117 = v157;
              id v118 = [v116 initWithState:v157 timestamp:isa];

              (*(void (**)(unint64_t, id))((swift_isaMask & *v1) + 0xC8))(v117, v118);
              Class v119 = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              [v118 setUriNeedsOptInChange:v119];

              [v118 setUsedIntendedState:v132 & 1];
              sub_1000ABA80((uint64_t)v155);
            }
            return;
          }
          unint64_t v52 = *(void *)&v159[8 * v53];
          if (!v52)
          {
            while (1)
            {
              uint64_t v34 = v53 + 1;
              if (__OFADD__(v53, 1)) {
                break;
              }
              if (v34 >= v160) {
                goto LABEL_88;
              }
              unint64_t v52 = *(void *)&v159[8 * v34];
              ++v53;
              if (v52) {
                goto LABEL_23;
              }
            }
LABEL_105:
            __break(1u);
LABEL_106:
            uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
            goto LABEL_3;
          }
        }
      }
      uint64_t v34 = v53;
    }
LABEL_23:
    unint64_t v47 = (v52 - 1) & v52;
    unint64_t v50 = __clz(__rbit64(v52)) + (v34 << 6);
LABEL_24:
    __int16 v54 = (uint64_t *)(*((void *)v161 + 6) + 16 * v50);
    uint64_t v15 = *v54;
    id v18 = (char *)v54[1];
    unint64_t v20 = *(void *)(*((void *)v161 + 7) + 8 * v50);
    swift_bridgeObjectRetain();
    uint64_t v55 = swift_bridgeObjectRetain();
    v48(v55);
    long long v56 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xB0))();
    swift_bridgeObjectRelease();
    if (v20 >> 62)
    {
      swift_bridgeObjectRetain();
      unint64_t v57 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v57)
      {
LABEL_26:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_27;
      }
    }
    else
    {
      unint64_t v57 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v57) {
        goto LABEL_26;
      }
    }
    unint64_t v58 = v57 - 1;
    if (__OFSUB__(v57, 1)) {
      break;
    }
    unint64_t v137 = v20 & 0xC000000000000001;
    if ((v20 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v82 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      swift_bridgeObjectRelease();
      id v59 = (id)v82;
    }
    else
    {
      if ((v58 & 0x8000000000000000) != 0) {
        goto LABEL_108;
      }
      if (v58 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_109;
      }
      id v59 = *(id *)(v20 + 8 * v58 + 32);
    }
    int v60 = v157 == 1;
    id v148 = v59;
    if (v60 == [v59 optIn]) {
      goto LABEL_49;
    }
    int v61 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x80))();
    if (v61 != 2)
    {
      char v62 = v61;
      if (((v61 ^ [v148 optIn]) & 1) == 0)
      {
        unint64_t v157 = v62 & 1;
        int v132 = 1;
LABEL_49:
        if (v56)
        {
          id v123 = v56;
          id v67 = [v123 smtTimestamp];
          if (v67)
          {
            unint64_t v68 = v67;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v69 = v158;
            v126 = *v133;
            v126(v144, (uint64_t)v153, v158);
            v130(v144, 0, 1, v69);
            v129 = *v139;
            if (v129((uint64_t)v144, 1, v69) != 1)
            {
              v126(v149, (uint64_t)v144, v69);
              uint64_t v125 = v20 & 0xFFFFFFFFFFFFFF8;
              unint64_t v124 = v20 + 32;
              uint64_t v70 = (uint64_t)v146;
              while (1)
              {
                BOOL v51 = __OFSUB__(v57--, 1);
                if (v51) {
                  goto LABEL_110;
                }
                if (v137)
                {
                  id v71 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else
                {
                  if ((v57 & 0x8000000000000000) != 0) {
                    goto LABEL_111;
                  }
                  if (v57 >= *(void *)(v125 + 16)) {
                    goto LABEL_112;
                  }
                  id v71 = *(id *)(v124 + 8 * v57);
                }
                id v72 = v71;
                sub_100098440((uint64_t)v155, v70, (uint64_t *)&unk_10031F9A0);
                unsigned int v73 = v129(v70, 1, v158);
                id v138 = v72;
                if (v73 == 1)
                {
                  sub_1000ABA80(v70);
                }
                else
                {
                  v126(v151, v70, v158);
                  id v74 = [v72 smtTimestamp];
                  static Date._unconditionallyBridgeFromObjectiveC(_:)();

                  LODWORD(v134) = static Date.> infix(_:_:)();
                  id v75 = *v143;
                  (*v143)((uint64_t)v153, v158);
                  v75((uint64_t)v151, v158);
                  uint64_t v76 = (void (*)(char *, uint64_t))v75;
                  id v72 = v138;
                  if (v134)
                  {
                    swift_bridgeObjectRelease();

                    unint64_t v20 = (unint64_t)v123;
                    swift_bridgeObjectRelease();
                    v76(v149, v158);
                    goto LABEL_28;
                  }
                }
                LODWORD(v134) = v157 == 1;
                unsigned int v77 = [v72 optIn];
                v127 = *v135;
                v127(v152, v149, v158);
                if (v134 == v77)
                {
                  v128 = *v143;
                  v128((uint64_t)v152, v158);
                }
                else
                {
                  id v78 = [v72 smtTimestamp];
                  static Date._unconditionallyBridgeFromObjectiveC(_:)();

                  Date.addingTimeInterval(_:)();
                  LODWORD(v134) = static Date.> infix(_:_:)();
                  os_log_type_t v79 = *v143;
                  (*v143)((uint64_t)v145, v158);
                  v79((uint64_t)v153, v158);
                  v128 = v79;
                  v79((uint64_t)v152, v158);
                  if (v134)
                  {
                    swift_bridgeObjectRelease();
                    uint64_t v134 = type metadata accessor for KTError();
                    sub_10010648C();
                    unint64_t v137 = swift_allocError();
                    v84 = v83;
                    uint64_t v85 = sub_100080E08(&qword_100322470);
                    id v86 = (char *)v84 + *(int *)(v85 + 48);
                    uint64_t v87 = (char *)v84 + *(int *)(v85 + 64);
                    uint64_t *v84 = v15;
                    v84[1] = (uint64_t)v18;
                    id v88 = [v138 smtTimestamp];
                    id v89 = v142;
                    static Date._unconditionallyBridgeFromObjectiveC(_:)();

                    uint64_t v90 = v89;
                    uint64_t v91 = v158;
                    v126(v86, (uint64_t)v90, v158);
                    uint64_t v15 = (uint64_t)v130;
                    v130(v86, 0, 1, v91);
                    v127(v87, v149, v91);
                    ((void (*)(char *, void, uint64_t, uint64_t))v15)(v87, 0, 1, v91);
                    swift_storeEnumTagMultiPayload();
                    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                      v156 = sub_1001060EC(0, v156[2] + 1, 1, v156);
                    }
                    uint64_t v93 = v156;
                    unint64_t v95 = v156[2];
                    unint64_t v94 = v156[3];
                    id v96 = v138;
                    if (v95 >= v94 >> 1) {
                      uint64_t v93 = sub_1001060EC((void *)(v94 > 1), v95 + 1, 1, v156);
                    }
                    v93[2] = v95 + 1;
                    v156 = v93;
                    v93[v95 + 4] = v137;

                    unint64_t v20 = (unint64_t)v123;
                    v128((uint64_t)v149, v158);
                    goto LABEL_11;
                  }
                }
                LODWORD(v134) = v157 == 1;
                id v80 = v138;
                unsigned int v81 = [v138 optIn];

                if (v134 == v81)
                {
                  uint64_t v70 = (uint64_t)v146;
                  if (v57) {
                    continue;
                  }
                }
                swift_bridgeObjectRelease();
                unint64_t v20 = (unint64_t)v123;

                swift_bridgeObjectRelease();
                v128((uint64_t)v149, v158);
                goto LABEL_28;
              }
            }
          }
          else
          {
            v130(v144, 1, 1, v158);
          }
          swift_bridgeObjectRelease();

          sub_1000ABA80((uint64_t)v144);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        id v97 = [v148 smtTimestamp];
        uint64_t v98 = (uint64_t)v141;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v99 = v158;
        v130((char *)v98, 0, 1, v158);
        if ((*v139)(v98, 1, v99) == 1)
        {
          sub_1000ABA80(v98);
          unint64_t v100 = v136;
          swift_bridgeObjectRetain();
          unint64_t v20 = sub_100089D6C(v15, (uint64_t)v18);
          char v102 = v101;
          swift_bridgeObjectRelease();
          if (v102)
          {
            int v103 = swift_isUniquelyReferenced_nonNull_native();
            unint64_t v164 = v100;
            uint64_t v15 = v100;
            uint64_t v104 = (uint64_t)v140;
            if (!v103)
            {
              sub_100105E28();
              uint64_t v15 = v164;
            }
            swift_bridgeObjectRelease();
            uint64_t v105 = v158;
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v150 + 32))(v104, *(void *)(v15 + 56) + *(void *)(v150 + 72) * v20, v158);
            unint64_t v136 = v15;
            sub_1001059E8(v20, v15);
            swift_bridgeObjectRelease();
            uint64_t v106 = 0;
          }
          else
          {
            uint64_t v106 = 1;
            uint64_t v105 = v158;
            uint64_t v104 = (uint64_t)v140;
          }
          v130((char *)v104, v106, 1, v105);
          swift_bridgeObjectRelease();
          sub_1000ABA80(v104);
        }
        else
        {
          uint64_t v107 = (uint64_t)v153;
          (*v133)(v153, v98, v99);
          unint64_t v20 = v136;
          char v108 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v164 = v20;
          sub_100105BF8(v107, v15, (uint64_t)v18, v108);
          unint64_t v136 = v164;

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    type metadata accessor for KTError();
    sub_10010648C();
    unint64_t v20 = swift_allocError();
    *uint64_t v63 = v15;
    v63[1] = (uint64_t)v18;
    swift_storeEnumTagMultiPayload();
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v64 = v156;
    }
    else {
      uint64_t v64 = sub_1001060EC(0, v156[2] + 1, 1, v156);
    }
    unint64_t v66 = v64[2];
    unint64_t v65 = v64[3];
    if (v66 >= v65 >> 1) {
      uint64_t v64 = sub_1001060EC((void *)(v65 > 1), v66 + 1, 1, v64);
    }
    v64[2] = v66 + 1;
    v156 = v64;
    v64[v66 + 4] = v20;

LABEL_27:
LABEL_28:
    unint64_t v48 = v163;
    if (v47) {
      goto LABEL_12;
    }
  }
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
}

unint64_t sub_10010275C(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_1003226B0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100080E08(&qword_1003226A0);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_100098440(v12, (uint64_t)v5, &qword_1003226B0);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_100089D6C(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    *uint64_t v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for Date();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, v9, v21);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

int *KTOptIOValidator.evaluateCloudData(application:)(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v4 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v31 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v30 - v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for KTOptIOValidator.OptInResult();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x68))(v13);
  uint64_t v16 = (uint64_t)v34;
  (*(void (**)(void))((swift_isaMask & *v2) + 0xA8))();
  swift_bridgeObjectRelease();
  if (!v16)
  {
    uint64_t v17 = v30;
    unint64_t v18 = v31;
    if (v15[8])
    {
      type metadata accessor for KTError();
      sub_10010648C();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
LABEL_6:
      swift_willThrow();
      sub_1001063CC((uint64_t)v15);
      return v12;
    }
    uint64_t v33 = *(void *)v15;
    uint64_t v19 = v12[5];
    uint64_t v34 = v15;
    uint64_t v12 = (int *)v8;
    sub_100098440((uint64_t)&v15[v19], (uint64_t)v8, (uint64_t *)&unk_10031F9A0);
    uint64_t v20 = v17;
    uint64_t v21 = v8;
    uint64_t v22 = v9;
    uint64_t v23 = v9;
    uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    if (v24(v21, 1, v23) == 1)
    {
      sub_1000ABA80((uint64_t)v12);
      type metadata accessor for KTError();
      sub_10010648C();
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      uint64_t v15 = v34;
      goto LABEL_6;
    }
    (*(void (**)(char *, int *, uint64_t))(v17 + 32))(v11, v12, v22);
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    uint64_t v32 = v11;
    v26(v18, v11, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v18, 0, 1, v22);
    if (v24(v18, 1, v22) == 1)
    {
      Class isa = 0;
    }
    else
    {
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v20 + 8))(v18, v22);
    }
    id v28 = objc_allocWithZone((Class)KTOptIOValidatorResult);
    uint64_t v29 = v33;
    uint64_t v12 = (int *)[v28 initWithState:v33 timestamp:isa];

    (*(void (**)(uint64_t, int *))((swift_isaMask & *v3) + 0xC8))(v29, v12);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v32, v22);
    sub_1001063CC((uint64_t)v34);
  }
  return v12;
}

id sub_100102DD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  id v10 = a1;
  unint64_t v11 = (void *)a5(v7, v9);
  swift_bridgeObjectRelease();

  return v11;
}

void sub_100102EA0(id a1, void *a2)
{
  unint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x68))();
  unint64_t v6 = v5;
  if (v5 >> 62)
  {
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
    {
LABEL_3:
      if (v7 < 1)
      {
        __break(1u);
        goto LABEL_36;
      }
      for (uint64_t i = 0; i != v7; ++i)
      {
        if ((v6 & 0xC000000000000001) != 0) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v9 = *(id *)(v6 + 8 * i + 32);
        }
        id v10 = v9;
        if ([v9 state] == a1)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v24 = a2;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
        goto LABEL_31;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = a2;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
    goto LABEL_31;
  }
LABEL_16:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
  {
LABEL_31:
    swift_retain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    if (!v11) {
      goto LABEL_32;
    }
    goto LABEL_18;
  }
  uint64_t v11 = _swiftEmptyArrayStorage[2];
  swift_retain();
  if (v11)
  {
LABEL_18:
    if (v11 >= 1)
    {
      uint64_t v12 = 0;
      uint64_t v13 = (char *)_swiftEmptyArrayStorage;
      do
      {
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v14 = (id)_swiftEmptyArrayStorage[v12 + 4];
        }
        uint64_t v15 = v14;
        id v16 = [v14 uri];
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v20 = v19;

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v13 = sub_1000A0478(0, *((void *)v13 + 2) + 1, 1, v13);
          }
          unint64_t v22 = *((void *)v13 + 2);
          unint64_t v21 = *((void *)v13 + 3);
          if (v22 >= v21 >> 1) {
            uint64_t v13 = sub_1000A0478((char *)(v21 > 1), v22 + 1, 1, v13);
          }
          *((void *)v13 + 2) = v22 + 1;
          uint64_t v23 = &v13[16 * v22];
          *((void *)v23 + 4) = v18;
          *((void *)v23 + 5) = v20;
        }
        else
        {
        }
        ++v12;
      }
      while (v11 != v12);
      goto LABEL_32;
    }
LABEL_36:
    __break(1u);
    return;
  }
LABEL_32:
  swift_release_n();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v24 setUris:isa];
}

unint64_t KTOptIOValidator.urisNeedOptIn(application:)()
{
  uint64_t v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC0))();
  if (v1) {
    return (unint64_t)v2;
  }
  uint64_t v4 = v3;
  if ([v3 state] == (id)1)
  {

    return (unint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x68))();
  unint64_t v6 = result;
  if (!(result >> 62))
  {
    uint64_t v7 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7) {
      goto LABEL_6;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v24 = v4;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_34;
    }
    goto LABEL_19;
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v7 = result;
  if (!result) {
    goto LABEL_18;
  }
LABEL_6:
  if (v7 < 1)
  {
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v8 = v4;
  for (uint64_t i = 0; i != v7; ++i)
  {
    if ((v6 & 0xC000000000000001) != 0) {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(v6 + 8 * i + 32);
    }
    uint64_t v11 = v10;
    if ([v10 state])
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = v8;
  if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
    goto LABEL_34;
  }
LABEL_19:
  if (((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) == 0)
  {
    uint64_t v12 = _swiftEmptyArrayStorage[2];
    unint64_t result = swift_retain();
    if (!v12)
    {
LABEL_35:
      uint64_t v2 = (char *)_swiftEmptyArrayStorage;
LABEL_36:

      swift_release_n();
      return (unint64_t)v2;
    }
    goto LABEL_21;
  }
LABEL_34:
  swift_retain();
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v12 = result;
  if (!result) {
    goto LABEL_35;
  }
LABEL_21:
  if (v12 >= 1)
  {
    uint64_t v13 = 0;
    uint64_t v2 = (char *)_swiftEmptyArrayStorage;
    do
    {
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0) {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = (id)_swiftEmptyArrayStorage[v13 + 4];
      }
      uint64_t v15 = v14;
      id v16 = [v14 uri:v24];
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v2 = sub_1000A0478(0, *((void *)v2 + 2) + 1, 1, v2);
        }
        unint64_t v22 = *((void *)v2 + 2);
        unint64_t v21 = *((void *)v2 + 3);
        if (v22 >= v21 >> 1) {
          uint64_t v2 = sub_1000A0478((char *)(v21 > 1), v22 + 1, 1, v2);
        }
        *((void *)v2 + 2) = v22 + 1;
        uint64_t v23 = &v2[16 * v22];
        *((void *)v23 + 4) = v18;
        *((void *)v23 + 5) = v20;
      }
      else
      {
      }
      ++v13;
    }
    while (v12 != v13);
    goto LABEL_36;
  }
LABEL_39:
  __break(1u);
  return result;
}

void KTOptIOValidator.init()()
{
}

id KTOptIOValidator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KTOptIOValidator();
  return [super dealloc];
}

uint64_t type metadata accessor for KTOptIOValidator.OptInResult()
{
  uint64_t result = qword_10032CCF0;
  if (!qword_10032CCF0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for KTOptIOValidator()
{
  return self;
}

uint64_t sub_1001036E4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_1000BB928(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_100103760(v6);
  return specialized ContiguousArray._endMutation()();
}

void sub_100103760(uint64_t *a1)
{
  uint64_t v2 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  unint64_t v5 = (char *)&v178 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  v198 = (char *)&v178 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  v188 = (char *)&v178 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v178 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v178 - v14;
  __chkstk_darwin(v13);
  v183 = (char *)&v178 - v16;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  v199 = (char *)&v178 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  v207 = (char *)&v178 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  v187 = (char *)&v178 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  v193 = (char *)&v178 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  v182 = (char *)&v178 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  v204 = (char *)&v178 - v30;
  __chkstk_darwin(v29);
  v184 = (char *)&v178 - v31;
  Swift::Int v32 = a1[1];
  Swift::Int v33 = _minimumMergeRunLength(_:)(v32);
  if (v33 >= v32)
  {
    if (v32 < 0) {
      goto LABEL_173;
    }
    if (v32) {
      sub_100104850(0, v32, 1, a1);
    }
    return;
  }
  if (v32 >= 0) {
    uint64_t v34 = v32;
  }
  else {
    uint64_t v34 = v32 + 1;
  }
  if (v32 < -1) {
    goto LABEL_172;
  }
  Swift::Int v181 = v33;
  v186 = v12;
  v189 = (void *)v32;
  if (v32 <= 1)
  {
    id v37 = (char *)_swiftEmptyArrayStorage;
    uint64_t v209 = (uint64_t)_swiftEmptyArrayStorage;
    v194 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v32 != 1)
    {
      unint64_t v41 = _swiftEmptyArrayStorage[2];
LABEL_136:
      uint64_t v169 = v195;
      if (v41 >= 2)
      {
        uint64_t v170 = *a1;
        do
        {
          unint64_t v171 = v41 - 2;
          if (v41 < 2) {
            goto LABEL_167;
          }
          if (!v170) {
            goto LABEL_180;
          }
          v196 = v37;
          uint64_t v172 = *(void *)&v37[16 * v171 + 32];
          uint64_t v173 = *(void *)&v37[16 * v41 + 24];
          sub_100104CC8((void **)(v170 + 8 * v172), (void **)(v170 + 8 * *(void *)&v37[16 * v41 + 16]), (void (**)(void))(v170 + 8 * v173), v194);
          if (v169) {
            break;
          }
          if (v173 < v172) {
            goto LABEL_168;
          }
          if (swift_isUniquelyReferenced_nonNull_native()) {
            v174 = v196;
          }
          else {
            v174 = sub_1000BAF68((uint64_t)v196);
          }
          if (v171 >= *((void *)v174 + 2)) {
            goto LABEL_169;
          }
          v175 = &v174[16 * v171 + 32];
          *(void *)v175 = v172;
          *((void *)v175 + 1) = v173;
          unint64_t v176 = *((void *)v174 + 2);
          if (v41 > v176) {
            goto LABEL_170;
          }
          v177 = v174;
          memmove(&v174[16 * v41 + 16], &v174[16 * v41 + 32], 16 * (v176 - v41));
          id v37 = v177;
          *((void *)v177 + 2) = v176 - 1;
          unint64_t v41 = v176 - 1;
        }
        while (v176 > 2);
      }
LABEL_149:
      swift_bridgeObjectRelease();
      *(void *)((v209 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v35 = v34 >> 1;
    sub_100106FA4();
    uint64_t v36 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) = v35;
    v194 = (void **)((v36 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v209 = v36;
  }
  uint64_t v38 = 0;
  v178 = a1;
  uint64_t v39 = *a1;
  v205 = (void (**)(char *, char *, uint64_t))(v18 + 32);
  v208 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v203 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  v200 = (void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v180 = v39 + 16;
  uint64_t v179 = v39 - 8;
  id v37 = (char *)_swiftEmptyArrayStorage;
  v192 = v15;
  uint64_t v40 = (uint64_t)v189;
  uint64_t v201 = v39;
  while (2)
  {
    uint64_t v42 = v38;
    uint64_t v43 = v38 + 1;
    uint64_t v190 = v42;
    if (v43 >= v40)
    {
      uint64_t v202 = v43;
      unint64_t v47 = &selRef_copyApplicationState_block_;
      goto LABEL_55;
    }
    v196 = v37;
    uint64_t v44 = *(void **)(v39 + 8 * v42);
    id v45 = *(id *)(v39 + 8 * v43);
    id v46 = v44;
    unint64_t v47 = &selRef_copyApplicationState_block_;
    uint64_t v202 = (uint64_t)v45;
    id v48 = [v45 smtTimestamp];
    if (!v48)
    {
      uint64_t v52 = (uint64_t)v183;
      v206 = *v208;
      v206(v183, 1, 1, v17);
      goto LABEL_21;
    }
    unint64_t v49 = v48;
    unint64_t v50 = v204;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    BOOL v51 = *v205;
    uint64_t v52 = (uint64_t)v183;
    (*v205)(v183, v50, v17);
    v206 = *v208;
    v206((char *)v52, 0, 1, v17);
    if ((*v203)(v52, 1, v17) == 1)
    {
      unint64_t v47 = &selRef_copyApplicationState_block_;
LABEL_21:
      static Date.distantPast.getter();
      sub_1000ABA80(v52);
      goto LABEL_23;
    }
    v51(v184, (char *)v52, v17);
    unint64_t v47 = &selRef_copyApplicationState_block_;
LABEL_23:
    id v53 = [v46 v47[474]:v178];
    if (!v53)
    {
      v206(v15, 1, 1, v17);
      goto LABEL_27;
    }
    __int16 v54 = v53;
    uint64_t v55 = v204;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    long long v56 = *v205;
    (*v205)(v15, v55, v17);
    v206(v15, 0, 1, v17);
    if ((*v203)((uint64_t)v15, 1, v17) == 1)
    {
LABEL_27:
      unint64_t v57 = v46;
      unint64_t v58 = v182;
      static Date.distantPast.getter();
      sub_1000ABA80((uint64_t)v15);
      goto LABEL_28;
    }
    unint64_t v57 = v46;
    unint64_t v58 = v182;
    v56(v182, v15, v17);
LABEL_28:
    id v59 = v184;
    LODWORD(v197) = static Date.< infix(_:_:)();
    int v60 = (char *)*v200;
    (*v200)(v58, v17);
    v191 = v60;
    ((void (*)(char *, uint64_t))v60)(v59, v17);

    uint64_t v42 = v190;
    int v61 = (char *)(v190 + 2);
    if (v190 + 2 >= (uint64_t)v189)
    {
      uint64_t v202 = v190 + 2;
      goto LABEL_46;
    }
    char v62 = (id *)(v180 + 8 * v190);
    do
    {
      uint64_t v202 = (uint64_t)v61;
      uint64_t v63 = *(v62 - 1);
      id v64 = *v62;
      id v65 = v63;
      id v66 = [v64 smtTimestamp];
      if (v66)
      {
        id v67 = v66;
        unint64_t v68 = v204;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v69 = *v205;
        uint64_t v70 = (uint64_t)v186;
        (*v205)(v186, v68, v17);
        v206((char *)v70, 0, 1, v17);
        if ((*v203)(v70, 1, v17) != 1)
        {
          v69(v193, (char *)v70, v17);
          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v70 = (uint64_t)v186;
        v206(v186, 1, 1, v17);
      }
      static Date.distantPast.getter();
      sub_1000ABA80(v70);
LABEL_35:
      id v71 = [v65 smtTimestamp];
      if (!v71)
      {
        uint64_t v75 = (uint64_t)v188;
        v206(v188, 1, 1, v17);
        uint64_t v76 = v187;
        goto LABEL_39;
      }
      id v72 = v71;
      unsigned int v73 = v204;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      id v74 = *v205;
      uint64_t v75 = (uint64_t)v188;
      (*v205)(v188, v73, v17);
      v206((char *)v75, 0, 1, v17);
      if ((*v203)(v75, 1, v17) == 1)
      {
        uint64_t v76 = v187;
LABEL_39:
        static Date.distantPast.getter();
        sub_1000ABA80(v75);
        goto LABEL_41;
      }
      uint64_t v76 = v187;
      v74(v187, (char *)v75, v17);
LABEL_41:
      unsigned int v77 = v193;
      int v78 = static Date.< infix(_:_:)();
      os_log_type_t v79 = v76;
      id v80 = (void (*)(char *, uint64_t))v191;
      ((void (*)(char *, uint64_t))v191)(v79, v17);
      v80(v77, v17);

      if ((v197 ^ v78)) {
        goto LABEL_44;
      }
      int v61 = (char *)(v202 + 1);
      ++v62;
    }
    while (v189 != (void *)(v202 + 1));
    uint64_t v202 = (uint64_t)v189;
LABEL_44:
    uint64_t v15 = v192;
    unint64_t v47 = &selRef_copyApplicationState_block_;
    uint64_t v42 = v190;
LABEL_46:
    id v37 = v196;
    uint64_t v39 = v201;
    if (v197)
    {
      uint64_t v81 = v202;
      if (v202 < v42) {
        goto LABEL_174;
      }
      if (v42 < v202)
      {
        uint64_t v82 = (uint64_t *)(v179 + 8 * v202);
        uint64_t v83 = v42;
        v84 = (uint64_t *)(v201 + 8 * v42);
        do
        {
          if (v83 != --v81)
          {
            if (!v39) {
              goto LABEL_179;
            }
            uint64_t v85 = *v84;
            uint64_t *v84 = *v82;
            uint64_t *v82 = v85;
          }
          ++v83;
          --v82;
          ++v84;
        }
        while (v83 < v81);
        uint64_t v42 = v190;
      }
    }
LABEL_55:
    if (v202 >= (uint64_t)v189) {
      goto LABEL_84;
    }
    if (__OFSUB__(v202, v42)) {
      goto LABEL_171;
    }
    if (v202 - v42 >= v181) {
      goto LABEL_84;
    }
    if (__OFADD__(v42, v181)) {
      goto LABEL_175;
    }
    id v86 = v189;
    if (v42 + v181 < (uint64_t)v189) {
      id v86 = (void *)(v42 + v181);
    }
    if ((uint64_t)v86 >= v42)
    {
      uint64_t v87 = v202;
      if ((void *)v202 == v86) {
        goto LABEL_83;
      }
      v196 = v37;
      id v88 = (char *)(v179 + 8 * v202);
      v197 = v5;
      id v185 = v86;
      while (2)
      {
        uint64_t v90 = *(void **)(v39 + 8 * v87);
        uint64_t v91 = v190;
        v191 = v88;
        uint64_t v202 = v87;
        while (2)
        {
          NSString v92 = *(void **)v88;
          uint64_t v93 = v90;
          id v94 = v92;
          unint64_t v95 = v47[474];
          v206 = v93;
          id v96 = [v93 v95];
          if (v96)
          {
            id v97 = v96;
            uint64_t v98 = v204;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v99 = *v205;
            uint64_t v100 = (uint64_t)v198;
            (*v205)(v198, v98, v17);
            char v101 = *v208;
            (*v208)((char *)v100, 0, 1, v17);
            if ((*v203)(v100, 1, v17) == 1)
            {
              unint64_t v47 = &selRef_copyApplicationState_block_;
              goto LABEL_71;
            }
            v99(v207, (char *)v100, v17);
            unint64_t v47 = &selRef_copyApplicationState_block_;
          }
          else
          {
            char v101 = *v208;
            uint64_t v100 = (uint64_t)v198;
            (*v208)(v198, 1, 1, v17);
LABEL_71:
            static Date.distantPast.getter();
            sub_1000ABA80(v100);
          }
          id v102 = [v94 v47[474]:v178];
          if (v102)
          {
            int v103 = v102;
            uint64_t v104 = v204;
            static Date._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v105 = *v205;
            (*v205)(v5, v104, v17);
            v101(v5, 0, 1, v17);
            if ((*v203)((uint64_t)v5, 1, v17) != 1)
            {
              uint64_t v106 = v199;
              v105(v199, v5, v17);
              goto LABEL_78;
            }
          }
          else
          {
            v101(v5, 1, 1, v17);
          }
          uint64_t v106 = v199;
          static Date.distantPast.getter();
          sub_1000ABA80((uint64_t)v5);
LABEL_78:
          uint64_t v107 = v207;
          char v108 = static Date.< infix(_:_:)();
          uint64_t v109 = v106;
          uint64_t v110 = *v200;
          (*v200)(v109, v17);
          v110(v107, v17);

          if (v108)
          {
            uint64_t v39 = v201;
            uint64_t v89 = v202;
            if (!v201) {
              goto LABEL_177;
            }
            uint64_t v111 = *(void *)v88;
            uint64_t v90 = (void *)*((void *)v88 + 1);
            *(void *)id v88 = v90;
            *((void *)v88 + 1) = v111;
            v88 -= 8;
            ++v91;
            unint64_t v5 = v197;
            if (v89 == v91) {
              goto LABEL_65;
            }
            continue;
          }
          break;
        }
        unint64_t v5 = v197;
        uint64_t v39 = v201;
        uint64_t v89 = v202;
LABEL_65:
        uint64_t v87 = v89 + 1;
        id v88 = v191 + 8;
        if ((id)v87 != v185) {
          continue;
        }
        break;
      }
      uint64_t v202 = (uint64_t)v185;
      uint64_t v15 = v192;
      id v37 = v196;
LABEL_83:
      uint64_t v42 = v190;
LABEL_84:
      if (v202 < v42) {
        goto LABEL_166;
      }
      v112 = v37;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        id v37 = v112;
      }
      else {
        id v37 = sub_1000BADB0(0, *((void *)v112 + 2) + 1, 1, v112);
      }
      unint64_t v114 = *((void *)v37 + 2);
      unint64_t v113 = *((void *)v37 + 3);
      unint64_t v41 = v114 + 1;
      uint64_t v39 = v201;
      uint64_t v115 = v190;
      if (v114 >= v113 >> 1)
      {
        v168 = sub_1000BADB0((char *)(v113 > 1), v114 + 1, 1, v37);
        uint64_t v115 = v190;
        uint64_t v39 = v201;
        id v37 = v168;
      }
      *((void *)v37 + 2) = v41;
      id v116 = v37 + 32;
      unint64_t v117 = &v37[16 * v114 + 32];
      *(void *)unint64_t v117 = v115;
      *((void *)v117 + 1) = v202;
      if (v114)
      {
        v196 = v37;
        while (1)
        {
          unint64_t v118 = v41 - 1;
          if (v41 >= 4)
          {
            id v123 = &v116[16 * v41];
            uint64_t v124 = *((void *)v123 - 8);
            uint64_t v125 = *((void *)v123 - 7);
            BOOL v129 = __OFSUB__(v125, v124);
            uint64_t v126 = v125 - v124;
            if (v129) {
              goto LABEL_155;
            }
            uint64_t v128 = *((void *)v123 - 6);
            uint64_t v127 = *((void *)v123 - 5);
            BOOL v129 = __OFSUB__(v127, v128);
            uint64_t v121 = v127 - v128;
            char v122 = v129;
            if (v129) {
              goto LABEL_156;
            }
            unint64_t v130 = v41 - 2;
            uint64_t v131 = &v116[16 * v41 - 32];
            uint64_t v133 = *(void *)v131;
            uint64_t v132 = *((void *)v131 + 1);
            BOOL v129 = __OFSUB__(v132, v133);
            uint64_t v134 = v132 - v133;
            if (v129) {
              goto LABEL_157;
            }
            BOOL v129 = __OFADD__(v121, v134);
            uint64_t v135 = v121 + v134;
            if (v129) {
              goto LABEL_159;
            }
            if (v135 >= v126)
            {
              v153 = &v116[16 * v118];
              uint64_t v155 = *(void *)v153;
              uint64_t v154 = *((void *)v153 + 1);
              BOOL v129 = __OFSUB__(v154, v155);
              uint64_t v156 = v154 - v155;
              if (v129) {
                goto LABEL_165;
              }
              BOOL v146 = v121 < v156;
              goto LABEL_122;
            }
          }
          else
          {
            if (v41 != 3)
            {
              uint64_t v147 = *((void *)v37 + 4);
              uint64_t v148 = *((void *)v37 + 5);
              BOOL v129 = __OFSUB__(v148, v147);
              uint64_t v140 = v148 - v147;
              char v141 = v129;
              goto LABEL_116;
            }
            uint64_t v120 = *((void *)v37 + 4);
            uint64_t v119 = *((void *)v37 + 5);
            BOOL v129 = __OFSUB__(v119, v120);
            uint64_t v121 = v119 - v120;
            char v122 = v129;
          }
          if (v122) {
            goto LABEL_158;
          }
          unint64_t v130 = v41 - 2;
          unint64_t v136 = &v116[16 * v41 - 32];
          uint64_t v138 = *(void *)v136;
          uint64_t v137 = *((void *)v136 + 1);
          BOOL v139 = __OFSUB__(v137, v138);
          uint64_t v140 = v137 - v138;
          char v141 = v139;
          if (v139) {
            goto LABEL_160;
          }
          v142 = &v116[16 * v118];
          uint64_t v144 = *(void *)v142;
          uint64_t v143 = *((void *)v142 + 1);
          BOOL v129 = __OFSUB__(v143, v144);
          uint64_t v145 = v143 - v144;
          if (v129) {
            goto LABEL_162;
          }
          if (__OFADD__(v140, v145)) {
            goto LABEL_164;
          }
          if (v140 + v145 >= v121)
          {
            BOOL v146 = v121 < v145;
LABEL_122:
            if (v146) {
              unint64_t v118 = v130;
            }
            goto LABEL_124;
          }
LABEL_116:
          if (v141) {
            goto LABEL_161;
          }
          v149 = &v116[16 * v118];
          uint64_t v151 = *(void *)v149;
          uint64_t v150 = *((void *)v149 + 1);
          BOOL v129 = __OFSUB__(v150, v151);
          uint64_t v152 = v150 - v151;
          if (v129) {
            goto LABEL_163;
          }
          if (v152 < v140) {
            goto LABEL_14;
          }
LABEL_124:
          unint64_t v157 = v118 - 1;
          if (v118 - 1 >= v41)
          {
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
            goto LABEL_176;
          }
          if (!v39) {
            goto LABEL_178;
          }
          uint64_t v158 = v5;
          v159 = &v116[16 * v157];
          uint64_t v160 = *(void *)v159;
          v161 = v116;
          unint64_t v162 = v118;
          v163 = &v116[16 * v118];
          uint64_t v164 = *((void *)v163 + 1);
          uint64_t v165 = v195;
          sub_100104CC8((void **)(v39 + 8 * *(void *)v159), (void **)(v39 + 8 * *(void *)v163), (void (**)(void))(v39 + 8 * v164), v194);
          uint64_t v195 = v165;
          if (v165) {
            goto LABEL_149;
          }
          if (v164 < v160) {
            goto LABEL_152;
          }
          uint64_t v166 = (uint64_t)v196;
          if (v162 > *((void *)v196 + 2)) {
            goto LABEL_153;
          }
          *(void *)v159 = v160;
          *(void *)&v161[16 * v157 + 8] = v164;
          unint64_t v167 = *(void *)(v166 + 16);
          if (v162 >= v167) {
            goto LABEL_154;
          }
          unint64_t v41 = v167 - 1;
          memmove(v163, v163 + 16, 16 * (v167 - 1 - v162));
          id v116 = v161;
          id v37 = v196;
          *((void *)v196 + 2) = v167 - 1;
          unint64_t v5 = v158;
          uint64_t v15 = v192;
          uint64_t v39 = v201;
          if (v167 <= 2) {
            goto LABEL_14;
          }
        }
      }
      unint64_t v41 = 1;
LABEL_14:
      uint64_t v40 = (uint64_t)v189;
      uint64_t v38 = v202;
      if (v202 >= (uint64_t)v189)
      {
        a1 = v178;
        goto LABEL_136;
      }
      continue;
    }
    break;
  }
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
}

void sub_100104850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v48 = a1;
  uint64_t v7 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - v10;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  long long v56 = (char *)&v46 - v17;
  __chkstk_darwin(v16);
  int v60 = (char *)&v46 - v19;
  uint64_t v47 = a2;
  if (a3 != a2)
  {
    uint64_t v20 = *a4;
    uint64_t v21 = (void (**)(char *, char *, uint64_t))(v18 + 32);
    id v59 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v55 = (unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
    unint64_t v50 = (void (**)(char *, uint64_t))(v18 + 8);
    BOOL v51 = v15;
    uint64_t v53 = v20;
    uint64_t v22 = v20 + 8 * a3 - 8;
    uint64_t v23 = &selRef_copyApplicationState_block_;
    unint64_t v57 = (void (**)(char *, char *, uint64_t))(v18 + 32);
LABEL_5:
    uint64_t v24 = *(void **)(v53 + 8 * a3);
    uint64_t v25 = v48;
    uint64_t v49 = v22;
    uint64_t v54 = a3;
    while (1)
    {
      uint64_t v26 = *(void **)v22;
      id v27 = v24;
      id v61 = v26;
      uint64_t v28 = v23[474];
      id v58 = v27;
      id v29 = [v27 v28];
      if (v29)
      {
        uint64_t v30 = v29;
        uint64_t v31 = v56;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        Swift::Int v32 = *v21;
        (*v21)(v11, v31, v12);
        Swift::Int v33 = *v59;
        (*v59)(v11, 0, 1, v12);
        if ((*v55)(v11, 1, v12) != 1)
        {
          v32(v60, v11, v12);
          goto LABEL_11;
        }
      }
      else
      {
        Swift::Int v33 = *v59;
        (*v59)(v11, 1, 1, v12);
      }
      static Date.distantPast.getter();
      sub_1000ABA80((uint64_t)v11);
LABEL_11:
      uint64_t v34 = v11;
      id v35 = [v61 v23[474]];
      if (v35)
      {
        uint64_t v36 = v35;
        id v37 = v56;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v38 = *v57;
        uint64_t v39 = (uint64_t)v52;
        (*v57)(v52, v37, v12);
        v33((char *)v39, 0, 1, v12);
        if ((*v55)((char *)v39, 1, v12) != 1)
        {
          uint64_t v40 = v51;
          v38(v51, (char *)v39, v12);
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v39 = (uint64_t)v52;
        v33(v52, 1, 1, v12);
      }
      uint64_t v40 = v51;
      static Date.distantPast.getter();
      sub_1000ABA80(v39);
LABEL_16:
      unint64_t v41 = v60;
      char v42 = static Date.< infix(_:_:)();
      uint64_t v43 = *v50;
      (*v50)(v40, v12);
      v43(v41, v12);

      uint64_t v44 = v54;
      uint64_t v11 = v34;
      uint64_t v21 = v57;
      uint64_t v23 = &selRef_copyApplicationState_block_;
      if ((v42 & 1) == 0) {
        goto LABEL_4;
      }
      if (!v53)
      {
        __break(1u);
        return;
      }
      id v45 = *(void **)v22;
      uint64_t v24 = *(void **)(v22 + 8);
      *(void *)uint64_t v22 = v24;
      *(void *)(v22 + 8) = v45;
      v22 -= 8;
      if (v44 == ++v25)
      {
LABEL_4:
        a3 = v44 + 1;
        uint64_t v22 = v49 + 8;
        if (a3 == v47) {
          return;
        }
        goto LABEL_5;
      }
    }
  }
}

uint64_t sub_100104CC8(void **a1, void **a2, void (**a3)(void), void **a4)
{
  uint64_t v8 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  NSString v92 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v91 = (char *)&v88 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  id v97 = (char *)&v88 - v14;
  __chkstk_darwin(v13);
  id v94 = (char *)&v88 - v15;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v90 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v99 = (char *)&v88 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v88 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v100 = (char *)&v88 - v25;
  __chkstk_darwin(v24);
  uint64_t v98 = (char *)&v88 - v27;
  uint64_t v28 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0) {
    uint64_t v28 = (char *)a2 - (char *)a1;
  }
  uint64_t v29 = v28 >> 3;
  uint64_t v93 = a3;
  uint64_t v30 = (char *)a3 - (char *)a2;
  uint64_t v31 = v30 / 8;
  if (v28 >> 3 >= v30 / 8)
  {
    Swift::Int v32 = a4;
    if (a4 != a2 || &a2[v31] <= a4)
    {
      uint64_t v60 = v26;
      memmove(a4, a2, 8 * v31);
      uint64_t v26 = v60;
      Swift::Int v32 = a4;
    }
    uint64_t v36 = &v32[v31];
    if (v30 < 8 || a1 >= a2) {
      goto LABEL_58;
    }
    id v61 = (void (**)(void))(v26 + 32);
    uint64_t v98 = (char *)(v26 + 56);
    uint64_t v89 = (void (**)(char *, uint64_t))(v26 + 8);
    char v62 = (void **)(v93 - 1);
    int v103 = v32;
    uint64_t v93 = (void (**)(void))(v26 + 32);
    id v94 = (char *)(v26 + 48);
    id v102 = a1;
    while (1)
    {
      char v101 = v36;
      uint64_t v63 = *(v36 - 1);
      unint64_t v95 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 - 1);
      id v97 = (char *)a2;
      id v64 = a2 - 1;
      id v65 = *(a2 - 1);
      id v66 = v63;
      id v67 = v65;
      id v96 = (void (**)(char *, char *, uint64_t))v66;
      id v68 = [v66 smtTimestamp];
      if (v68)
      {
        uint64_t v69 = v68;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v70 = *v61;
        uint64_t v71 = (uint64_t)v91;
        (*v61)();
        id v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v98;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))v98)(v71, 0, 1, v16);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v94)(v71, 1, v16) != 1)
        {
          ((void (*)(char *, uint64_t, uint64_t))v70)(v99, v71, v16);
          goto LABEL_40;
        }
      }
      else
      {
        id v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v98;
        uint64_t v71 = (uint64_t)v91;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v98)(v91, 1, 1, v16);
      }
      static Date.distantPast.getter();
      sub_1000ABA80(v71);
LABEL_40:
      id v73 = [v67 smtTimestamp];
      if (v73)
      {
        id v74 = v73;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v75 = *v61;
        uint64_t v76 = (uint64_t)v92;
        (*v61)();
        v72(v76, 0, 1, v16);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v94)(v76, 1, v16) != 1)
        {
          unsigned int v77 = v90;
          ((void (*)(char *, uint64_t, uint64_t))v75)(v90, v76, v16);
          int v78 = v77;
          goto LABEL_45;
        }
      }
      else
      {
        uint64_t v76 = (uint64_t)v92;
        v72((uint64_t)v92, 1, 1, v16);
      }
      int v78 = v90;
      static Date.distantPast.getter();
      sub_1000ABA80(v76);
LABEL_45:
      os_log_type_t v79 = (char *)(v62 + 1);
      id v80 = v99;
      char v81 = static Date.< infix(_:_:)();
      uint64_t v82 = v78;
      char v83 = v81;
      v84 = *v89;
      (*v89)(v82, v16);
      v84(v80, v16);

      if (v83)
      {
        Swift::Int v32 = v103;
        uint64_t v36 = v101;
        if (v79 != v97)
        {
          a2 = v64;
LABEL_55:
          unint64_t v86 = (unint64_t)v102;
          id v61 = v93;
LABEL_56:
          *char v62 = *v64;
          if (v36 <= v32) {
            goto LABEL_58;
          }
          goto LABEL_57;
        }
        BOOL v85 = v62 >= (void **)v97;
        a2 = v64;
      }
      else
      {
        Swift::Int v32 = v103;
        if (v79 != (char *)v101)
        {
          uint64_t v36 = (void **)v95;
          id v64 = (void **)v95;
          a2 = (void **)v97;
          goto LABEL_55;
        }
        uint64_t v36 = (void **)v95;
        id v64 = (void **)v95;
        BOOL v85 = v62 >= v101;
        a2 = (void **)v97;
      }
      unint64_t v86 = (unint64_t)v102;
      id v61 = v93;
      if (v85) {
        goto LABEL_56;
      }
      if (v36 <= v32) {
        goto LABEL_58;
      }
LABEL_57:
      --v62;
      if ((unint64_t)a2 <= v86) {
        goto LABEL_58;
      }
    }
  }
  Swift::Int v32 = a4;
  if (a4 != a1 || &a1[v29] <= a4)
  {
    Swift::Int v33 = a4;
    uint64_t v34 = a4;
    uint64_t v35 = v26;
    memmove(v33, a1, 8 * v29);
    uint64_t v26 = v35;
    Swift::Int v32 = v34;
  }
  uint64_t v36 = &v32[v29];
  if ((char *)a2 - (char *)a1 >= 8 && a2 < (void **)v93)
  {
    uint64_t v99 = (char *)(v26 + 56);
    unint64_t v95 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    id v96 = (void (**)(char *, char *, uint64_t))(v26 + 32);
    NSString v92 = (char *)(v26 + 8);
    char v101 = &v32[v29];
    do
    {
      id v37 = v23;
      id v102 = a1;
      uint64_t v38 = *a2;
      int v103 = v32;
      uint64_t v39 = *v32;
      id v40 = v38;
      id v41 = v39;
      id v42 = [v40 smtTimestamp];
      if (v42)
      {
        uint64_t v43 = v42;
        uint64_t v44 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        id v45 = *v96;
        uint64_t v46 = (uint64_t)v94;
        (*v96)(v94, v44, v16);
        uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v99;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))v99)(v46, 0, 1, v16);
        if ((*v95)(v46, 1, v16) != 1)
        {
          v45(v98, (char *)v46, v16);
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v99;
        uint64_t v46 = (uint64_t)v94;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v99)(v94, 1, 1, v16);
      }
      static Date.distantPast.getter();
      sub_1000ABA80(v46);
LABEL_15:
      id v48 = [v41 smtTimestamp];
      uint64_t v23 = v37;
      if (v48)
      {
        uint64_t v49 = v48;
        unint64_t v50 = v100;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        BOOL v51 = (void (*)(char *, uint64_t, uint64_t))*v96;
        uint64_t v52 = v50;
        uint64_t v53 = (uint64_t)v97;
        (*v96)(v97, v52, v16);
        v47(v53, 0, 1, v16);
        if ((*v95)(v53, 1, v16) != 1)
        {
          v51(v37, v53, v16);
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v53 = (uint64_t)v97;
        v47((uint64_t)v97, 1, 1, v16);
      }
      static Date.distantPast.getter();
      sub_1000ABA80(v53);
LABEL_20:
      uint64_t v54 = v98;
      char v55 = static Date.< infix(_:_:)();
      long long v56 = *(void (**)(char *, uint64_t))v92;
      (*(void (**)(char *, uint64_t))v92)(v23, v16);
      v56(v54, v16);

      if ((v55 & 1) == 0)
      {
        unint64_t v57 = v103;
        id v58 = v102;
        Swift::Int v32 = v103 + 1;
        if (v102 == v103) {
          goto LABEL_26;
        }
LABEL_25:
        char *v58 = *v57;
        goto LABEL_26;
      }
      unint64_t v57 = a2;
      id v58 = v102;
      BOOL v59 = v102 == a2++;
      Swift::Int v32 = v103;
      if (!v59) {
        goto LABEL_25;
      }
LABEL_26:
      a1 = v58 + 1;
      uint64_t v36 = v101;
    }
    while (v32 < v101 && a2 < (void **)v93);
  }
  a2 = a1;
LABEL_58:
  if (a2 != v32
    || a2 >= (void **)((char *)v32
                     + (((char *)v36 - (char *)v32 + ((char *)v36 - (char *)v32 < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8)))
  {
    memmove(a2, v32, 8 * (v36 - v32));
  }
  return 1;
}

uint64_t sub_100105600(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v49 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  id v48 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_100080E08(&qword_1003226A0);
  int v47 = a2;
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v44 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  id v42 = v2;
  int64_t v43 = (unint64_t)(v10 + 63) >> 6;
  id v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v46 = v5;
  uint64_t v14 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v15 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v13)
    {
      unint64_t v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v43) {
      break;
    }
    uint64_t v23 = v44;
    unint64_t v24 = v44[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v24 = v44[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v44[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v43) {
              goto LABEL_34;
            }
            unint64_t v24 = v44[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v7;
    uint64_t v28 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v21);
    uint64_t v29 = *v28;
    uint64_t v30 = v28[1];
    uint64_t v31 = *(void *)(v46 + 72);
    uint64_t v32 = v26 + v31 * v21;
    if (v47)
    {
      (*v14)(v48, v32, v49);
    }
    else
    {
      (*v45)(v48, v32, v49);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v33 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v34) & ~*(void *)(v15 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v15 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v18 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v9 + 48) + 16 * v18);
    *uint64_t v19 = v29;
    v19[1] = v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v14)(*(void *)(v9 + 56) + v31 * v18, v48, v49);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v27;
  }
  swift_release();
  uint64_t v3 = v42;
  uint64_t v23 = v44;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v7 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v40;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

unint64_t sub_1001059E8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for Date() - 8) + 72);
        int64_t v16 = v15 * v3;
        uint64_t result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100105BF8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100089D6C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100105E28();
      goto LABEL_7;
    }
    sub_100105600(v15, a4 & 1);
    unint64_t v26 = sub_100089D6C(a2, a3);
    if ((v16 & 1) == (v27 & 1))
    {
      unint64_t v12 = v26;
      unint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  unint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7];
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 40);
    uint64_t v23 = v20;
    uint64_t v24 = v19 + *(void *)(v21 + 72) * v12;
    return v22(v24, a1, v23);
  }
LABEL_13:
  sub_100105D78(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_100105D78(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  unint64_t v8 = (void *)(a5[6] + 16 * a1);
  *unint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, a4, v10);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

void *sub_100105E28()
{
  uint64_t v35 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  int64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100080E08(&qword_1003226A0);
  uint64_t v30 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v36 = v5;
  if (!v6)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v28 = v36;
    char v27 = v30;
LABEL_25:
    *char v27 = v28;
    return result;
  }
  uint64_t v7 = v5;
  uint64_t result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    uint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v36;
  }
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v4 + 64);
  uint64_t v31 = v4 + 64;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = v1 + 32;
  uint64_t v34 = v1 + 16;
  uint64_t v14 = v35;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v24);
    ++v10;
    if (!v25)
    {
      int64_t v10 = v24 + 1;
      if (v24 + 1 >= v32) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v31 + 8 * v10);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    unint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v1 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v21, v14);
    uint64_t v22 = v36;
    uint64_t v23 = (void *)(*(void *)(v36 + 48) + v17);
    *uint64_t v23 = v19;
    v23[1] = v20;
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v22 + 56) + v21, v3, v14);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v32)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    char v27 = v30;
    uint64_t v28 = v36;
    goto LABEL_25;
  }
  unint64_t v25 = *(void *)(v31 + 8 * v26);
  if (v25)
  {
    int64_t v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v31 + 8 * v10);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1001060EC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100080E08(&qword_1003226A8);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    sub_100080E08(&qword_10031F4C0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100106210(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v5)
  {
    while (1)
    {
      unint64_t v6 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v8 = v7;
        unint64_t v9 = v6 + 1;
        if (__OFADD__(v6, 1)) {
          goto LABEL_21;
        }
        uint64_t v10 = v5;
        id v11 = [v7 application];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        if (v12 == a2 && v14 == a3)
        {
          swift_bridgeObjectRelease();
LABEL_17:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_5;
        }
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_17;
        }

LABEL_5:
        ++v6;
        uint64_t v5 = v10;
        if (v9 == v10) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v6 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v7 = *(id *)(a1 + 8 * v6 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001063CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KTOptIOValidator.OptInResult();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100106428(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KTOptIOValidator.OptInResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10010648C()
{
  unint64_t result = qword_100321170;
  if (!qword_100321170)
  {
    type metadata accessor for KTError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100321170);
  }
  return result;
}

void *sub_1001064E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (void *)(a1 + v7);
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_100080E08((uint64_t *)&unk_10031F9A0);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v14 = *(int *)(a3 + 24);
    unint64_t v15 = (void *)((char *)v4 + v14);
    char v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *unint64_t v15 = *v16;
    v15[1] = v17;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_100106678(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100106758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10010689C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)(a1 + v16);
  unint64_t v18 = (uint64_t *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100106A58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100106B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100080E08((uint64_t *)&unk_10031F9A0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100106D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100106D50);
}

uint64_t sub_100106D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_100106E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100106E3C);
}

uint64_t sub_100106E3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100080E08((uint64_t *)&unk_10031F9A0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  }
  return result;
}

void sub_100106F04()
{
  sub_1000A4D44();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_100106FA4()
{
  unint64_t result = qword_1003214D0;
  if (!qword_1003214D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1003214D0);
  }
  return result;
}

unint64_t sub_100106FE4()
{
  unint64_t result = qword_1003211A0;
  if (!qword_1003211A0)
  {
    sub_1000829FC(&qword_100320D18);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1003211A0);
  }
  return result;
}

void sub_100107040()
{
}

void sub_100107064()
{
  qword_10032F748 = (uint64_t)&off_1002C0A78;
}

uint64_t *sub_100107078()
{
  if (qword_10032CE00 != -1) {
    swift_once();
  }
  return &qword_10032F748;
}

uint64_t sub_1001070C4()
{
  if (qword_10032CE00 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

void sub_100107120(uint64_t a1@<X8>)
{
  sub_10011259C();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t sub_100107154@<X0>(void *a1@<X8>)
{
  if (qword_10032CE00 != -1) {
    swift_once();
  }
  *a1 = qword_10032F748;

  return swift_bridgeObjectRetain();
}

void sub_1001071C0(uint64_t a1@<X8>)
{
  sub_10011259C();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t sub_1001071F8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100114F78();

  return Enum.hash(into:)(a1, a2, v4);
}

uint64_t sub_100107244@<X0>(uint64_t a1@<X8>)
{
  return sub_10010819C(type metadata accessor for CloudConfiguration, a1);
}

uint64_t sub_10010725C(uint64_t a1)
{
  return sub_100108234(a1, type metadata accessor for CloudConfiguration);
}

uint64_t (*sub_100107274())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1001072BC@<X0>(void *a1@<X8>)
{
  return sub_100107414((void (*)(void))type metadata accessor for CloudConfiguration, a1);
}

uint64_t sub_1001072D4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100080E08(&qword_1003226B8);
  __chkstk_darwin(v3 - 8);
  int v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DewValue(0);
  sub_100098440(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_1003226B8);
  uint64_t v7 = type metadata accessor for Conditions(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_100112650((uint64_t)v5, (uint64_t)a1, type metadata accessor for Conditions);
  }
  *a1 = _swiftEmptyArrayStorage;
  UnknownStorage.init()();
  return sub_100087A1C((uint64_t)v5, &qword_1003226B8);
}

uint64_t sub_1001073FC@<X0>(void *a1@<X8>)
{
  return sub_100107414((void (*)(void))type metadata accessor for Conditions, a1);
}

uint64_t sub_100107414@<X0>(void (*a1)(void)@<X0>, void *a2@<X8>)
{
  *a2 = _swiftEmptyArrayStorage;
  a1(0);
  return UnknownStorage.init()();
}

uint64_t sub_10010745C(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DewValue(0) + 28);
  sub_100087A1C(v3, &qword_1003226B8);
  sub_100112650(a1, v3, type metadata accessor for Conditions);
  uint64_t v4 = type metadata accessor for Conditions(0);
  int v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_100107508(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100080E08(&qword_1003226B8);
  int v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for Conditions(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for DewValue(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_100098440(v1 + v11, (uint64_t)v5, &qword_1003226B8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = _swiftEmptyArrayStorage;
    UnknownStorage.init()();
    sub_100087A1C((uint64_t)v5, &qword_1003226B8);
  }
  else
  {
    sub_100112650((uint64_t)v5, (uint64_t)v10, type metadata accessor for Conditions);
  }
  return sub_1001076A4;
}

void sub_1001076A4(uint64_t a1, char a2)
{
}

BOOL sub_1001076EC()
{
  uint64_t v1 = sub_100080E08(&qword_1003226B8);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DewValue(0);
  sub_100098440(v0 + *(int *)(v4 + 28), (uint64_t)v3, &qword_1003226B8);
  uint64_t v5 = type metadata accessor for Conditions(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100087A1C((uint64_t)v3, &qword_1003226B8);
  return v6;
}

uint64_t sub_1001077D0()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for DewValue(0) + 28);
  sub_100087A1C(v1, &qword_1003226B8);
  uint64_t v2 = type metadata accessor for Conditions(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_100107858@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100080E08(&qword_1003226C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DewValue(0);
  sub_100098440(v1 + *(int *)(v6 + 32), (uint64_t)v5, &qword_1003226C0);
  uint64_t v7 = type metadata accessor for ConfigurationValue(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_100112650((uint64_t)v5, a1, type metadata accessor for ConfigurationValue);
  }
  uint64_t v8 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  UnknownStorage.init()();
  return sub_100087A1C((uint64_t)v5, &qword_1003226C0);
}

uint64_t sub_1001079B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  type metadata accessor for ConfigurationValue(0);
  return UnknownStorage.init()();
}

uint64_t sub_100107A28(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DewValue(0) + 32);
  sub_100087A1C(v3, &qword_1003226C0);
  sub_100112650(a1, v3, type metadata accessor for ConfigurationValue);
  uint64_t v4 = type metadata accessor for ConfigurationValue(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(v3, 0, 1, v4);
}

void (*sub_100107AD4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100080E08(&qword_1003226C0);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for ConfigurationValue(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for DewValue(0) + 32);
  *((_DWORD *)v3 + 12) = v11;
  sub_100098440(v1 + v11, (uint64_t)v5, &qword_1003226C0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v12 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 1, 1, v12);
    UnknownStorage.init()();
    sub_100087A1C((uint64_t)v5, &qword_1003226C0);
  }
  else
  {
    sub_100112650((uint64_t)v5, (uint64_t)v10, type metadata accessor for ConfigurationValue);
  }
  return sub_100107CA4;
}

void sub_100107CA4(uint64_t a1, char a2)
{
}

void sub_100107CEC(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(int *)(*(void *)a1 + 48);
  uint64_t v10 = *(void **)(*(void *)a1 + 32);
  uint64_t v11 = *(void **)(*(void *)a1 + 40);
  uint64_t v12 = *(void *)(*(void *)a1 + 16);
  uint64_t v13 = *(void *)(*(void *)a1 + 24);
  uint64_t v14 = *(void **)(*(void *)a1 + 8);
  uint64_t v15 = **(void **)a1 + v9;
  if (a2)
  {
    sub_1001126B8(*(void *)(*(void *)a1 + 40), (uint64_t)v10, a5);
    sub_100087A1C(v15, a3);
    sub_100112650((uint64_t)v10, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
    sub_100112720((uint64_t)v11, a6);
  }
  else
  {
    sub_100087A1C(**(void **)a1 + v9, a3);
    sub_100112650((uint64_t)v11, v15, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v12);
  }
  free(v11);
  free(v10);
  free(v14);

  free(v8);
}

BOOL sub_100107E14()
{
  uint64_t v1 = sub_100080E08(&qword_1003226C0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DewValue(0);
  sub_100098440(v0 + *(int *)(v4 + 32), (uint64_t)v3, &qword_1003226C0);
  uint64_t v5 = type metadata accessor for ConfigurationValue(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100087A1C((uint64_t)v3, &qword_1003226C0);
  return v6;
}

uint64_t sub_100107EF8()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for DewValue(0) + 32);
  sub_100087A1C(v1, &qword_1003226C0);
  uint64_t v2 = type metadata accessor for ConfigurationValue(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(v1, 1, 1, v2);
}

uint64_t sub_100107F80@<X0>(uint64_t a1@<X8>)
{
  return sub_10010AB2C(type metadata accessor for DewValue, a1);
}

uint64_t sub_100107F98(uint64_t a1)
{
  return sub_10010ABC4(a1, type metadata accessor for DewValue);
}

uint64_t (*sub_100107FB0())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100107FF8@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  uint64_t v2 = type metadata accessor for DewValue(0);
  UnknownStorage.init()();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for Conditions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = (char *)a1 + *(int *)(v2 + 32);
  uint64_t v6 = type metadata accessor for ConfigurationValue(0);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

uint64_t sub_1001080E0@<X0>(uint64_t a1@<X8>)
{
  return sub_100108110(type metadata accessor for Conditions, a1);
}

uint64_t sub_1001080F8@<X0>(uint64_t a1@<X8>)
{
  return sub_100108110(type metadata accessor for ConfigurationValue, a1);
}

uint64_t sub_100108110@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

uint64_t sub_100108184@<X0>(uint64_t a1@<X8>)
{
  return sub_10010819C(type metadata accessor for Conditions, a1);
}

uint64_t sub_10010819C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10010821C(uint64_t a1)
{
  return sub_100108234(a1, type metadata accessor for Conditions);
}

uint64_t sub_100108234(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_1001082B0())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1001082F8@<X0>(uint64_t a1@<X8>)
{
  return sub_10010819C(type metadata accessor for Strings, a1);
}

uint64_t sub_100108310(uint64_t a1)
{
  return sub_100108234(a1, type metadata accessor for Strings);
}

uint64_t (*sub_100108328())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100108370@<X0>(void *a1@<X8>)
{
  return sub_100107414((void (*)(void))type metadata accessor for Strings, a1);
}

uint64_t sub_100108388@<X0>(uint64_t a1@<X8>)
{
  return sub_100108110(type metadata accessor for ConfigurationValue.OneOf_Value, a1);
}

uint64_t sub_1001083A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100098440(v1, a1, &qword_100320618);
}

uint64_t sub_1001083C8(uint64_t a1)
{
  return sub_100114E8C(a1, v1, &qword_100320618);
}

uint64_t sub_1001083EC()
{
  uint64_t v1 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098440(v0, (uint64_t)v3, &qword_100320618);
  uint64_t v4 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    sub_100087A1C((uint64_t)v3, &qword_100320618);
    return 0;
  }
  else if (swift_getEnumCaseMultiPayload())
  {
    sub_100112720((uint64_t)v3, type metadata accessor for ConfigurationValue.OneOf_Value);
    return 0;
  }
  else
  {
    return *(void *)v3;
  }
}

uint64_t sub_100108508(uint64_t a1)
{
  sub_100087A1C((uint64_t)v1, &qword_100320618);
  void *v1 = a1;
  uint64_t v3 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v1, 0, 1, v3);
}

void (*sub_10010859C(void *a1))(uint64_t **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[1] = v2;
  uint64_t v5 = sub_100080E08(&qword_100320618);
  uint64_t v6 = (uint64_t *)malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[2] = v6;
  sub_100098440(v2, (uint64_t)v6, &qword_100320618);
  uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  v4[3] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[4] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100087A1C((uint64_t)v6, &qword_100320618);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v9 = *v6;
      goto LABEL_7;
    }
    sub_100112720((uint64_t)v6, type metadata accessor for ConfigurationValue.OneOf_Value);
  }
  uint64_t v9 = 0;
LABEL_7:
  *uint64_t v4 = v9;
  return sub_1001086F4;
}

void sub_1001086F4(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[3];
  uint64_t v3 = (*a1)[4];
  uint64_t v5 = (void *)(*a1)[1];
  uint64_t v4 = (void *)(*a1)[2];
  uint64_t v6 = **a1;
  sub_100087A1C((uint64_t)v5, &qword_100320618);
  *uint64_t v5 = v6;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(v3 + 56))(v5, 0, 1, v2);
  free(v4);

  free(v1);
}

uint64_t sub_100108790()
{
  uint64_t v1 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098440(v0, (uint64_t)v3, &qword_100320618);
  uint64_t v4 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    sub_100087A1C((uint64_t)v3, &qword_100320618);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return *(void *)v3;
    }
    sub_100112720((uint64_t)v3, type metadata accessor for ConfigurationValue.OneOf_Value);
  }
  return 0;
}

uint64_t sub_1001088B0(uint64_t a1, uint64_t a2)
{
  sub_100087A1C((uint64_t)v2, &qword_100320618);
  *uint64_t v2 = a1;
  v2[1] = a2;
  uint64_t v5 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = *(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v2, 0, 1, v5);
}

void (*sub_100108950(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[2] = v2;
  uint64_t v5 = sub_100080E08(&qword_100320618);
  uint64_t v6 = (uint64_t *)malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[3] = v6;
  sub_100098440(v2, (uint64_t)v6, &qword_100320618);
  uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  v4[4] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[5] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100087A1C((uint64_t)v6, &qword_100320618);
LABEL_6:
    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_100112720((uint64_t)v6, type metadata accessor for ConfigurationValue.OneOf_Value);
    goto LABEL_6;
  }
  uint64_t v9 = *v6;
  unint64_t v10 = v6[1];
LABEL_7:
  *uint64_t v4 = v9;
  v4[1] = v10;
  return sub_100108AB0;
}

void sub_100108AB0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v5 = (*a1)[4];
  uint64_t v6 = (*a1)[5];
  uint64_t v8 = (void *)(*a1)[2];
  uint64_t v7 = (void *)(*a1)[3];
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_100087A1C((uint64_t)v8, &qword_100320618);
    *uint64_t v8 = v4;
    v8[1] = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100087A1C((*a1)[2], &qword_100320618);
    *uint64_t v8 = v4;
    v8[1] = v3;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, v5);
  }
  free(v7);

  free(v2);
}

uint64_t sub_100108BB0()
{
  uint64_t v1 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (unsigned __int8 *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098440(v0, (uint64_t)v3, &qword_100320618);
  uint64_t v4 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    sub_100087A1C((uint64_t)v3, &qword_100320618);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return *v3;
    }
    sub_100112720((uint64_t)v3, type metadata accessor for ConfigurationValue.OneOf_Value);
  }
  return 0;
}

uint64_t sub_100108CCC(char a1)
{
  sub_100087A1C((uint64_t)v1, &qword_100320618);
  unsigned char *v1 = a1;
  uint64_t v3 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = *(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v1, 0, 1, v3);
}

void (*sub_100108D60(void *a1))(unsigned char ***a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100080E08(&qword_100320618);
  uint64_t v5 = (char *)malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  sub_100098440(v1, (uint64_t)v5, &qword_100320618);
  uint64_t v6 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[3] = v7;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_100087A1C((uint64_t)v5, &qword_100320618);
LABEL_6:
    char v8 = 0;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_100112720((uint64_t)v5, type metadata accessor for ConfigurationValue.OneOf_Value);
    goto LABEL_6;
  }
  char v8 = *v5;
LABEL_7:
  *((unsigned char *)v3 + 32) = v8;
  return sub_100108EC0;
}

void sub_100108EC0(unsigned char ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[2];
  uint64_t v3 = (*a1)[3];
  uint64_t v5 = **a1;
  uint64_t v4 = (*a1)[1];
  char v6 = *((unsigned char *)*a1 + 32);
  sub_100087A1C((uint64_t)v5, &qword_100320618);
  *uint64_t v5 = v6;
  swift_storeEnumTagMultiPayload();
  (*((void (**)(unsigned char *, void, uint64_t, unsigned char *))v3 + 7))(v5, 0, 1, v2);
  free(v4);

  free(v1);
}

double sub_100108F5C()
{
  uint64_t v1 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098440(v0, (uint64_t)v3, &qword_100320618);
  uint64_t v4 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4) == 1)
  {
    sub_100087A1C((uint64_t)v3, &qword_100320618);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3) {
      return *(double *)v3;
    }
    sub_100112720((uint64_t)v3, type metadata accessor for ConfigurationValue.OneOf_Value);
  }
  return 0.0;
}

uint64_t sub_100109078(double a1)
{
  sub_100087A1C((uint64_t)v1, &qword_100320618);
  double *v1 = a1;
  uint64_t v3 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = *(uint64_t (**)(double *, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v1, 0, 1, v3);
}

void (*sub_100109114(void *a1))(uint64_t **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[1] = v2;
  uint64_t v5 = sub_100080E08(&qword_100320618);
  uint64_t v6 = (uint64_t *)malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[2] = v6;
  sub_100098440(v2, (uint64_t)v6, &qword_100320618);
  uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  v4[3] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[4] = v8;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100087A1C((uint64_t)v6, &qword_100320618);
LABEL_6:
    uint64_t v9 = 0;
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_100112720((uint64_t)v6, type metadata accessor for ConfigurationValue.OneOf_Value);
    goto LABEL_6;
  }
  uint64_t v9 = *v6;
LABEL_7:
  *uint64_t v4 = v9;
  return sub_100109270;
}

void sub_100109270(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[3];
  uint64_t v3 = (*a1)[4];
  uint64_t v5 = (void *)(*a1)[1];
  uint64_t v4 = (void *)(*a1)[2];
  uint64_t v6 = **a1;
  sub_100087A1C((uint64_t)v5, &qword_100320618);
  *uint64_t v5 = v6;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(v3 + 56))(v5, 0, 1, v2);
  free(v4);

  free(v1);
}

uint64_t sub_100109314@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098440(v2, (uint64_t)v6, &qword_100320618);
  uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    sub_100087A1C((uint64_t)v6, &qword_100320618);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 4) {
      return sub_100112650((uint64_t)v6, (uint64_t)a1, type metadata accessor for Strings);
    }
    sub_100112720((uint64_t)v6, type metadata accessor for ConfigurationValue.OneOf_Value);
  }
  *a1 = _swiftEmptyArrayStorage;
  type metadata accessor for Strings(0);
  return UnknownStorage.init()();
}

uint64_t sub_100109470(uint64_t a1)
{
  sub_100087A1C(v1, &qword_100320618);
  sub_100112650(a1, v1, type metadata accessor for Strings);
  uint64_t v3 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v1, 0, 1, v3);
}

void (*sub_100109520(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v2 = v1;
  uint64_t v4 = malloc(0x30uLL);
  *a1 = v4;
  *uint64_t v4 = v1;
  uint64_t v5 = sub_100080E08(&qword_100320618);
  uint64_t v6 = malloc(*(void *)(*(void *)(v5 - 8) + 64));
  v4[1] = v6;
  size_t v7 = *(void *)(*(void *)(type metadata accessor for Strings(0) - 8) + 64);
  v4[2] = malloc(v7);
  uint64_t v8 = malloc(v7);
  v4[3] = v8;
  sub_100098440(v2, (uint64_t)v6, &qword_100320618);
  uint64_t v9 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9) == 1)
  {
    sub_100087A1C((uint64_t)v6, &qword_100320618);
LABEL_6:
    *uint64_t v8 = _swiftEmptyArrayStorage;
    UnknownStorage.init()();
    return sub_1001096F0;
  }
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_100112720((uint64_t)v6, type metadata accessor for ConfigurationValue.OneOf_Value);
    goto LABEL_6;
  }
  sub_100112650((uint64_t)v6, (uint64_t)v8, type metadata accessor for Strings);
  return sub_1001096F0;
}

void sub_1001096F0(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (*a1)[4];
  uint64_t v4 = (*a1)[5];
  uint64_t v5 = (void *)(*a1)[2];
  uint64_t v6 = (void *)(*a1)[3];
  uint64_t v8 = **a1;
  size_t v7 = (void *)(*a1)[1];
  if (a2)
  {
    sub_1001126B8((*a1)[3], (uint64_t)v5, type metadata accessor for Strings);
    sub_100087A1C(v8, &qword_100320618);
    sub_100112650((uint64_t)v5, v8, type metadata accessor for Strings);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
    sub_100112720((uint64_t)v6, type metadata accessor for Strings);
  }
  else
  {
    sub_100087A1C(**a1, &qword_100320618);
    sub_100112650((uint64_t)v6, v8, type metadata accessor for Strings);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v8, 0, 1, v3);
  }
  free(v6);
  free(v5);
  free(v7);

  free(v2);
}

uint64_t sub_100109864@<X0>(uint64_t a1@<X8>)
{
  return sub_10010819C(type metadata accessor for ConfigurationValue, a1);
}

uint64_t sub_10010987C(uint64_t a1)
{
  return sub_100108234(a1, type metadata accessor for ConfigurationValue);
}

uint64_t (*sub_100109894())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_1001098E0(char *a1, char *a2)
{
  return sub_10011470C(a1, a2, (uint64_t (*)(void, void))sub_100111E30, type metadata accessor for Strings) & 1;
}

uint64_t sub_100109928()
{
  return *v0;
}

uint64_t sub_100109930(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t sub_100109938@<X0>(uint64_t a1@<X8>)
{
  return sub_100108110(type metadata accessor for Condition.OneOf_Condition, a1);
}

uint64_t sub_100109950@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Condition(0);
  return sub_100098440(v1 + *(int *)(v3 + 20), a1, &qword_1003226C8);
}

uint64_t sub_100109990(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Condition(0);
  return sub_100114E8C(a1, v1 + *(int *)(v3 + 20), &qword_1003226C8);
}

uint64_t (*sub_1001099D0())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_100109A18@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Condition(0);
  sub_100098440(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1003226C8);
  uint64_t v7 = type metadata accessor for Condition.OneOf_Condition(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_100087A1C((uint64_t)v5, &qword_1003226C8);
LABEL_5:
    *a1 = _swiftEmptyArrayStorage;
    type metadata accessor for Conditions(0);
    return UnknownStorage.init()();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_100112720((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_5;
  }
  return sub_100112650((uint64_t)v5, (uint64_t)a1, type metadata accessor for Conditions);
}

uint64_t sub_100109B78(uint64_t a1)
{
  return sub_10010A6E0(a1, type metadata accessor for Conditions);
}

void (*sub_100109B94(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100080E08(&qword_1003226C8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for Conditions(0) - 8) + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for Condition(0) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100098440(v1 + v8, (uint64_t)v5, &qword_1003226C8);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_100087A1C((uint64_t)v5, &qword_1003226C8);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_100112650((uint64_t)v5, (uint64_t)v7, type metadata accessor for Conditions);
      return sub_100109D6C;
    }
    sub_100112720((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
  }
  *uint64_t v7 = _swiftEmptyArrayStorage;
  UnknownStorage.init()();
  return sub_100109D6C;
}

void sub_100109D6C(uint64_t a1, char a2)
{
}

uint64_t sub_100109DB0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Condition(0);
  sub_100098440(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1003226C8);
  uint64_t v7 = type metadata accessor for Condition.OneOf_Condition(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_100087A1C((uint64_t)v5, &qword_1003226C8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return sub_100112650((uint64_t)v5, (uint64_t)a1, type metadata accessor for Conditions);
    }
    sub_100112720((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
  }
  *a1 = _swiftEmptyArrayStorage;
  type metadata accessor for Conditions(0);
  return UnknownStorage.init()();
}

uint64_t sub_100109F14(uint64_t a1)
{
  return sub_10010A6E0(a1, type metadata accessor for Conditions);
}

void (*sub_100109F30(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100080E08(&qword_1003226C8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for Conditions(0) - 8) + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for Condition(0) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100098440(v1 + v8, (uint64_t)v5, &qword_1003226C8);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_100087A1C((uint64_t)v5, &qword_1003226C8);
LABEL_6:
    *uint64_t v7 = _swiftEmptyArrayStorage;
    UnknownStorage.init()();
    return sub_10010A10C;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_100112720((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_6;
  }
  sub_100112650((uint64_t)v5, (uint64_t)v7, type metadata accessor for Conditions);
  return sub_10010A10C;
}

void sub_10010A10C(uint64_t a1, char a2)
{
}

uint64_t sub_10010A150@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Condition(0);
  sub_100098440(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1003226C8);
  uint64_t v7 = type metadata accessor for Condition.OneOf_Condition(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_100087A1C((uint64_t)v5, &qword_1003226C8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return sub_100112650((uint64_t)v5, (uint64_t)a1, type metadata accessor for ConditionDSID);
    }
    sub_100112720((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
  }
  type metadata accessor for ConditionDSID(0);
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

uint64_t sub_10010A2AC@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

uint64_t sub_10010A2E4(uint64_t a1)
{
  return sub_10010A6E0(a1, type metadata accessor for ConditionDSID);
}

void (*sub_10010A300(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100080E08(&qword_1003226C8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for ConditionDSID(0) - 8) + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for Condition(0) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100098440(v1 + v8, (uint64_t)v5, &qword_1003226C8);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_100087A1C((uint64_t)v5, &qword_1003226C8);
LABEL_6:
    *uint64_t v7 = 0;
    v7[1] = 0;
    UnknownStorage.init()();
    return sub_10010A4D4;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_100112720((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_6;
  }
  sub_100112650((uint64_t)v5, (uint64_t)v7, type metadata accessor for ConditionDSID);
  return sub_10010A4D4;
}

void sub_10010A4D4(uint64_t a1, char a2)
{
}

uint64_t sub_10010A518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Condition(0);
  sub_100098440(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_1003226C8);
  uint64_t v7 = type metadata accessor for Condition.OneOf_Condition(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_100087A1C((uint64_t)v5, &qword_1003226C8);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3) {
      return sub_100112650((uint64_t)v5, a1, type metadata accessor for ConditionVersion);
    }
    sub_100112720((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
  }
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
  type metadata accessor for ConditionVersion(0);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_10010A680@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
  type metadata accessor for ConditionVersion(0);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_10010A6C4(uint64_t a1)
{
  return sub_10010A6E0(a1, type metadata accessor for ConditionVersion);
}

uint64_t sub_10010A6E0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for Condition(0) + 20);
  sub_100087A1C(v5, &qword_1003226C8);
  sub_100112650(a1, v5, a2);
  uint64_t v6 = type metadata accessor for Condition.OneOf_Condition(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 0, 1, v6);
}

void (*sub_10010A7A0(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = sub_100080E08(&qword_1003226C8);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for ConditionVersion(0) - 8) + 64);
  v3[2] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[3] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for Condition(0) + 20);
  *((_DWORD *)v3 + 12) = v8;
  sub_100098440(v1 + v8, (uint64_t)v5, &qword_1003226C8);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  v3[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[5] = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v5, 1, v9) == 1)
  {
    sub_100087A1C((uint64_t)v5, &qword_1003226C8);
LABEL_6:
    *(void *)uint64_t v7 = 0;
    v7[4] = 1;
    *((void *)v7 + 2) = 0;
    *((void *)v7 + 3) = 0;
    UnknownStorage.init()();
    return sub_10010A980;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_100112720((uint64_t)v5, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_6;
  }
  sub_100112650((uint64_t)v5, (uint64_t)v7, type metadata accessor for ConditionVersion);
  return sub_10010A980;
}

void sub_10010A980(uint64_t a1, char a2)
{
}

void sub_10010A9C4(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(*(void *)a1 + 32);
  uint64_t v9 = *(void *)(*(void *)a1 + 40);
  uint64_t v10 = *(int *)(*(void *)a1 + 48);
  uint64_t v11 = *(void **)(*(void *)a1 + 16);
  uint64_t v12 = *(void **)(*(void *)a1 + 24);
  uint64_t v13 = *(void **)(*(void *)a1 + 8);
  uint64_t v14 = **(void **)a1 + v10;
  if (a2)
  {
    sub_1001126B8(*(void *)(*(void *)a1 + 24), (uint64_t)v11, a5);
    sub_100087A1C(v14, &qword_1003226C8);
    sub_100112650((uint64_t)v11, v14, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
    sub_100112720((uint64_t)v12, a6);
  }
  else
  {
    sub_100087A1C(**(void **)a1 + v10, &qword_1003226C8);
    sub_100112650((uint64_t)v12, v14, a3);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  free(v12);
  free(v11);
  free(v13);

  free(v7);
}

uint64_t sub_10010AB14@<X0>(uint64_t a1@<X8>)
{
  return sub_10010AB2C(type metadata accessor for Condition, a1);
}

uint64_t sub_10010AB2C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  size_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_10010ABAC(uint64_t a1)
{
  return sub_10010ABC4(a1, type metadata accessor for Condition);
}

uint64_t sub_10010ABC4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  size_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_10010AC40())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10010AC8C(char *a1, char *a2)
{
  return sub_10011470C(a1, a2, sub_100112098, type metadata accessor for Conditions) & 1;
}

uint64_t sub_10010ACDC@<X0>(unsigned char *a1@<X8>)
{
  *a1 = 0;
  uint64_t v1 = &a1[*(int *)(type metadata accessor for Condition(0) + 20)];
  uint64_t v2 = type metadata accessor for Condition.OneOf_Condition(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return UnknownStorage.init()();
}

uint64_t sub_10010AD68()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_10010AD70(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t sub_10010AD78@<X0>(uint64_t a1@<X8>)
{
  return sub_10010AB2C(type metadata accessor for ConditionDSID, a1);
}

uint64_t sub_10010AD90(uint64_t a1)
{
  return sub_10010ABC4(a1, type metadata accessor for ConditionDSID);
}

uint64_t (*sub_10010ADA8())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10010ADF0()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t sub_10010ADF8(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result;
  return result;
}

uint64_t (*sub_10010AE00())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10010AE20()
{
  return *(void *)(v0 + 24);
}

uint64_t sub_10010AE28(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

uint64_t sub_10010AE30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ConditionVersion(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_10010AEA8(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ConditionVersion(0) + 32);
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*sub_10010AF20())()
{
  return KTNetworkBucketFeedback.rawValue.getter;
}

uint64_t sub_10010AF68()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F750);
  sub_100080F90(v0, (uint64_t)qword_10032F750);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100287C70;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "macos";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "iphoneos";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "watchos";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "tvos";
  *((void *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)uint64_t v15 = "visionos";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10010B1E4()
{
  return sub_10007F488(&qword_10032CE08, (uint64_t)qword_10032F750);
}

uint64_t sub_10010B208@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_10032CE08, (uint64_t)qword_10032F750, a1);
}

uint64_t sub_10010B22C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_10032CE08, (uint64_t)qword_10032F750, a1);
}

void *sub_10010B250()
{
  return &unk_1002C0A48;
}

unint64_t sub_10010B25C()
{
  return 0xD000000000000012;
}

uint64_t sub_10010B278(uint64_t a1)
{
  return sub_10010C7EC(a1, qword_10032F768, (uint64_t)"configurations", 14);
}

uint64_t sub_10010B290()
{
  return sub_10007F488(&qword_10032CE10, (uint64_t)qword_10032F768);
}

uint64_t sub_10010B2B4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_10032CE10, (uint64_t)qword_10032F768, a1);
}

uint64_t sub_10010B2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010C3A4(a1, a2, a3, (void (*)(void))type metadata accessor for DewValue, &qword_1003226D0, (void (*)(uint64_t))type metadata accessor for DewValue);
}

uint64_t sub_10010B334()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for DewValue(0),
        sub_100114F30(&qword_1003226D0, (void (*)(uint64_t))type metadata accessor for DewValue),
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for CloudConfiguration(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t sub_10010B420(char *a1, char *a2)
{
  return sub_10011470C(a1, a2, sub_100111EF8, type metadata accessor for CloudConfiguration) & 1;
}

Swift::Int sub_10010B464()
{
  return sub_100111BC0((void (*)(void))type metadata accessor for CloudConfiguration, &qword_1003226D8, (void (*)(uint64_t))type metadata accessor for CloudConfiguration);
}

uint64_t sub_10010B4AC()
{
  return sub_10010B334();
}

uint64_t sub_10010B4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100114F30(&qword_100322DB0, (void (*)(uint64_t))type metadata accessor for CloudConfiguration);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010B540@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_10032CE10, (uint64_t)qword_10032F768, a1);
}

uint64_t sub_10010B564(uint64_t a1)
{
  uint64_t v2 = sub_100114F30(&qword_10031FB90, (void (*)(uint64_t))type metadata accessor for CloudConfiguration);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010B5D0()
{
  sub_100114F30(&qword_10031FB90, (void (*)(uint64_t))type metadata accessor for CloudConfiguration);

  return Message.hash(into:)();
}

const char *sub_10010B64C()
{
  return "DewValue";
}

uint64_t sub_10010B658()
{
  return 0x65756C6156776544;
}

uint64_t sub_10010B670()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F780);
  sub_100080F90(v0, (uint64_t)qword_10032F780);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100285700;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "name";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "version";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "conditions";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "value";
  *((void *)v14 + 1) = 5;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10010B8A8()
{
  return sub_10007F488(&qword_10032CE18, (uint64_t)qword_10032F780);
}

uint64_t sub_10010B8CC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_10032CE18, (uint64_t)qword_10032F780, a1);
}

uint64_t sub_10010B8F0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for DewValue(0);
          type metadata accessor for Conditions(0);
          sub_100114F30(&qword_100322778, (void (*)(uint64_t))type metadata accessor for Conditions);
          goto LABEL_12;
        case 4:
          type metadata accessor for DewValue(0);
          type metadata accessor for ConfigurationValue(0);
          sub_100114F30(&qword_1003227A8, (void (*)(uint64_t))type metadata accessor for ConfigurationValue);
LABEL_12:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10010BABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = v3[1];
  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = *v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (!v3[2] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v4))
    {
      uint64_t result = sub_10010BBC8((uint64_t)v3, a1, a2, a3);
      if (!v4)
      {
        sub_10010BDCC((uint64_t)v3, a1, a2, a3);
        type metadata accessor for DewValue(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t sub_10010BBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100080E08(&qword_1003226B8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Conditions(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DewValue(0);
  sub_100098440(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_1003226B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_100087A1C((uint64_t)v7, &qword_1003226B8);
  }
  sub_100112650((uint64_t)v7, (uint64_t)v11, type metadata accessor for Conditions);
  sub_100114F30(&qword_100322778, (void (*)(uint64_t))type metadata accessor for Conditions);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100112720((uint64_t)v11, type metadata accessor for Conditions);
}

uint64_t sub_10010BDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100080E08(&qword_1003226C0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ConfigurationValue(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DewValue(0);
  sub_100098440(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_1003226C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_100087A1C((uint64_t)v7, &qword_1003226C0);
  }
  sub_100112650((uint64_t)v7, (uint64_t)v11, type metadata accessor for ConfigurationValue);
  sub_100114F30(&qword_1003227A8, (void (*)(uint64_t))type metadata accessor for ConfigurationValue);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  return sub_100112720((uint64_t)v11, type metadata accessor for ConfigurationValue);
}

Swift::Int sub_10010BFD4()
{
  return sub_100111BC0((void (*)(void))type metadata accessor for DewValue, &qword_1003226E0, (void (*)(uint64_t))type metadata accessor for DewValue);
}

uint64_t sub_10010C01C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for Conditions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t v7 = type metadata accessor for ConfigurationValue(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_10010C104()
{
  return sub_10010B8F0();
}

uint64_t sub_10010C11C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010BABC(a1, a2, a3);
}

uint64_t sub_10010C134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100114F30(&qword_100322DA8, (void (*)(uint64_t))type metadata accessor for DewValue);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010C1B0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_10032CE18, (uint64_t)qword_10032F780, a1);
}

uint64_t sub_10010C1D4(uint64_t a1)
{
  uint64_t v2 = sub_100114F30(&qword_1003226D0, (void (*)(uint64_t))type metadata accessor for DewValue);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010C240()
{
  sub_100114F30(&qword_1003226D0, (void (*)(uint64_t))type metadata accessor for DewValue);

  return Message.hash(into:)();
}

const char *sub_10010C2C0()
{
  return "Conditions";
}

uint64_t sub_10010C2CC()
{
  return 0x6F697469646E6F43;
}

uint64_t sub_10010C2E8(uint64_t a1)
{
  return sub_10010C7EC(a1, qword_10032F798, (uint64_t)"matchConditions", 15);
}

uint64_t sub_10010C300()
{
  return sub_10007F488(&qword_10032CE20, (uint64_t)qword_10032F798);
}

uint64_t sub_10010C324@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_10032CE20, (uint64_t)qword_10032F798, a1);
}

uint64_t sub_10010C348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010C3A4(a1, a2, a3, (void (*)(void))type metadata accessor for Condition, &qword_1003226E8, (void (*)(uint64_t))type metadata accessor for Condition);
}

uint64_t sub_10010C3A4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v6)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 1)
      {
        a4(0);
        sub_100114F30(a5, a6);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_10010C4B0()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for Condition(0),
        sub_100114F30(&qword_1003226E8, (void (*)(uint64_t))type metadata accessor for Condition),
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for Conditions(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10010C59C()
{
  return sub_100111BC0((void (*)(void))type metadata accessor for Conditions, &qword_1003226F0, (void (*)(uint64_t))type metadata accessor for Conditions);
}

uint64_t sub_10010C5E4@<X0>(void *a1@<X8>)
{
  *a1 = _swiftEmptyArrayStorage;
  return UnknownStorage.init()();
}

uint64_t sub_10010C610()
{
  return sub_10010C4B0();
}

uint64_t sub_10010C628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100114F30(&qword_100322DA0, (void (*)(uint64_t))type metadata accessor for Conditions);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010C6A4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_10032CE20, (uint64_t)qword_10032F798, a1);
}

uint64_t sub_10010C6C8(uint64_t a1)
{
  uint64_t v2 = sub_100114F30(&qword_100322778, (void (*)(uint64_t))type metadata accessor for Conditions);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010C734()
{
  sub_100114F30(&qword_100322778, (void (*)(uint64_t))type metadata accessor for Conditions);

  return Message.hash(into:)();
}

const char *sub_10010C7B0()
{
  return "Strings";
}

uint64_t sub_10010C7BC()
{
  return 0x73676E69727453;
}

uint64_t sub_10010C7D4(uint64_t a1)
{
  return sub_10010C7EC(a1, qword_10032F7B0, (uint64_t)"strings", 7);
}

uint64_t sub_10010C7EC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for _NameMap();
  sub_100087A78(v7, a2);
  sub_100080F90(v7, (uint64_t)a2);
  sub_100080E08(&qword_10031F498);
  uint64_t v8 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1002856F0;
  unint64_t v11 = v10 + v9 + v8[14];
  *(void *)(v10 + v9) = 1;
  *(void *)unint64_t v11 = a3;
  *(void *)(v11 + 8) = a4;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10010C948()
{
  return sub_10007F488(&qword_10032CE28, (uint64_t)qword_10032F7B0);
}

uint64_t sub_10010C96C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_10032CE28, (uint64_t)qword_10032F7B0, a1);
}

uint64_t sub_10010C990()
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
    }
  }
  return result;
}

uint64_t sub_10010CA00()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (uint64_t result = dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)(), !v1))
  {
    type metadata accessor for Strings(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

Swift::Int sub_10010CA98()
{
  return sub_100111BC0((void (*)(void))type metadata accessor for Strings, &qword_1003226F8, (void (*)(uint64_t))type metadata accessor for Strings);
}

uint64_t sub_10010CAE0()
{
  return sub_10010C990();
}

uint64_t sub_10010CAF8()
{
  return sub_10010CA00();
}

uint64_t sub_10010CB10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100114F30(&qword_100322D98, (void (*)(uint64_t))type metadata accessor for Strings);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010CB8C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_10032CE28, (uint64_t)qword_10032F7B0, a1);
}

uint64_t sub_10010CBB0(uint64_t a1)
{
  uint64_t v2 = sub_100114F30(&qword_100322790, (void (*)(uint64_t))type metadata accessor for Strings);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010CC1C()
{
  sub_100114F30(&qword_100322790, (void (*)(uint64_t))type metadata accessor for Strings);

  return Message.hash(into:)();
}

void *sub_10010CC98()
{
  return &unk_1002C0A58;
}

unint64_t sub_10010CCA4()
{
  return 0xD000000000000012;
}

uint64_t sub_10010CCC0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F7C8);
  sub_100080F90(v0, (uint64_t)qword_10032F7C8);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100287C70;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 100;
  *(void *)unint64_t v6 = "integer";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 101;
  *(void *)unint64_t v10 = "string";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  unint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *unint64_t v11 = 102;
  *(void *)uint64_t v12 = "BOOL";
  *((void *)v12 + 1) = 4;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 103;
  *(void *)uint64_t v14 = "timeInterval";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 104;
  *(void *)uint64_t v15 = "strings";
  *(void *)(v15 + 8) = 7;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10010CF48()
{
  return sub_10007F488(&qword_10032CE30, (uint64_t)qword_10032F7C8);
}

uint64_t sub_10010CF6C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_10032CE30, (uint64_t)qword_10032F7C8, a1);
}

uint64_t sub_10010CF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 'd':
        sub_10010D0A8(a1, v5);
        break;
      case 'e':
        sub_10010D26C(a1, v5);
        break;
      case 'f':
        sub_10010D448(a1, v5);
        break;
      case 'g':
        sub_10010D608(a1, v5);
        break;
      case 'h':
        sub_10010D7CC((uint64_t)v5, a1, a2, a3);
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_10010D0A8(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = 0;
  char v12 = 1;
  uint64_t result = dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
  if (!v2 && (v12 & 1) == 0)
  {
    uint64_t v13 = v11;
    sub_100098440((uint64_t)a2, (uint64_t)v6, &qword_100320618);
    uint64_t v8 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
    uint64_t v9 = *(void *)(v8 - 8);
    int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
    sub_100087A1C((uint64_t)v6, &qword_100320618);
    if (v10 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_100087A1C((uint64_t)a2, &qword_100320618);
    *a2 = v13;
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
  }
  return result;
}

uint64_t sub_10010D26C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t result = dispatch thunk of Decoder.decodeSingularStringField(value:)();
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v13 = v14;
    sub_100098440((uint64_t)a2, (uint64_t)v6, &qword_100320618);
    uint64_t v8 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
    uint64_t v9 = *(void *)(v8 - 8);
    int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8);
    sub_100087A1C((uint64_t)v6, &qword_100320618);
    if (v10 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_100087A1C((uint64_t)a2, &qword_100320618);
    uint64_t v11 = v16;
    *a2 = v13;
    a2[1] = v11;
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
  }
  return result;
}

uint64_t sub_10010D448(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = 2;
  uint64_t result = dispatch thunk of Decoder.decodeSingularBoolField(value:)();
  if (!v2)
  {
    char v8 = v13;
    if (v13 != 2)
    {
      sub_100098440((uint64_t)a2, (uint64_t)v6, &qword_100320618);
      uint64_t v9 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
      uint64_t v12 = *(void *)(v9 - 8);
      int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v6, 1, v9);
      sub_100087A1C((uint64_t)v6, &qword_100320618);
      if (v10 != 1) {
        dispatch thunk of Decoder.handleConflictingOneOf()();
      }
      sub_100087A1C((uint64_t)a2, &qword_100320618);
      *a2 = v8 & 1;
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(a2, 0, 1, v9);
    }
  }
  return result;
}

uint64_t sub_10010D608(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = 0;
  char v13 = 1;
  uint64_t result = dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
  if (!v2 && (v13 & 1) == 0)
  {
    uint64_t v8 = v12;
    sub_100098440((uint64_t)a2, (uint64_t)v6, &qword_100320618);
    uint64_t v9 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
    uint64_t v10 = *(void *)(v9 - 8);
    int v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v6, 1, v9);
    sub_100087A1C((uint64_t)v6, &qword_100320618);
    if (v11 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_100087A1C((uint64_t)a2, &qword_100320618);
    *a2 = v8;
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
  }
  return result;
}

uint64_t sub_10010D7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v5 = type metadata accessor for Strings(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v41 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v44 = (char *)&v37 - v9;
  uint64_t v10 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = sub_100080E08(&qword_100322DD8);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  int64_t v24 = (char *)&v37 - v23;
  uint64_t v43 = v6;
  unint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v46 = v5;
  uint64_t v26 = v5;
  char v27 = v25;
  v25((char *)&v37 - v23, 1, 1, v26);
  uint64_t v40 = a1;
  sub_100098440(a1, (uint64_t)v12, &qword_100320618);
  uint64_t v39 = v14;
  int v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if (v28 == 1)
  {
    sub_100087A1C((uint64_t)v12, &qword_100320618);
    uint64_t v29 = v13;
  }
  else
  {
    BOOL v38 = v27;
    uint64_t v30 = (uint64_t)v44;
    sub_100112650((uint64_t)v12, (uint64_t)v19, type metadata accessor for ConfigurationValue.OneOf_Value);
    sub_100112650((uint64_t)v19, (uint64_t)v17, type metadata accessor for ConfigurationValue.OneOf_Value);
    uint64_t v29 = v13;
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      sub_100087A1C((uint64_t)v24, &qword_100322DD8);
      sub_100112650((uint64_t)v17, v30, type metadata accessor for Strings);
      sub_100112650(v30, (uint64_t)v24, type metadata accessor for Strings);
      uint64_t v31 = v46;
      v38(v24, 0, 1, v46);
      goto LABEL_7;
    }
    sub_100112720((uint64_t)v17, type metadata accessor for ConfigurationValue.OneOf_Value);
  }
  uint64_t v31 = v46;
LABEL_7:
  uint64_t v32 = v45;
  sub_100114F30(&qword_100322790, (void (*)(uint64_t))type metadata accessor for Strings);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v32) {
    return sub_100087A1C((uint64_t)v24, &qword_100322DD8);
  }
  uint64_t v34 = v42;
  sub_100098440((uint64_t)v24, v42, &qword_100322DD8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v34, 1, v31) == 1)
  {
    sub_100087A1C((uint64_t)v24, &qword_100322DD8);
    return sub_100087A1C(v34, &qword_100322DD8);
  }
  else
  {
    uint64_t v35 = v41;
    sub_100112650(v34, v41, type metadata accessor for Strings);
    if (v28 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_100087A1C((uint64_t)v24, &qword_100322DD8);
    uint64_t v36 = v40;
    sub_100087A1C(v40, &qword_100320618);
    sub_100112650(v35, v36, type metadata accessor for Strings);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v29);
  }
}

uint64_t sub_10010DD40()
{
  uint64_t v2 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098440(v0, (uint64_t)v4, &qword_100320618);
  uint64_t v5 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) != 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        sub_100112720((uint64_t)v4, type metadata accessor for ConfigurationValue.OneOf_Value);
        uint64_t result = sub_10010E0BC(v0);
        goto LABEL_7;
      case 2u:
        uint64_t result = sub_10010E220(v0);
        goto LABEL_7;
      case 3u:
        uint64_t result = sub_10010E370(v0);
        goto LABEL_7;
      case 4u:
        sub_10010E4C0(v0);
        uint64_t result = sub_100112720((uint64_t)v4, type metadata accessor for ConfigurationValue.OneOf_Value);
        if (!v1) {
          break;
        }
        return result;
      default:
        uint64_t result = sub_10010DF70(v0);
LABEL_7:
        if (!v1) {
          break;
        }
        return result;
    }
  }
  type metadata accessor for ConfigurationValue(0);
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_10010DF70(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098440(a1, (uint64_t)v4, &qword_100320618);
  uint64_t v5 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    sub_100087A1C((uint64_t)v4, &qword_100320618);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
  }
  uint64_t result = sub_100112720((uint64_t)v4, type metadata accessor for ConfigurationValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_10010E0BC(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098440(a1, (uint64_t)v4, &qword_100320618);
  uint64_t v5 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    sub_100087A1C((uint64_t)v4, &qword_100320618);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    return swift_bridgeObjectRelease();
  }
  uint64_t result = sub_100112720((uint64_t)v4, type metadata accessor for ConfigurationValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_10010E220(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098440(a1, (uint64_t)v4, &qword_100320618);
  uint64_t v5 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    sub_100087A1C((uint64_t)v4, &qword_100320618);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  }
  uint64_t result = sub_100112720((uint64_t)v4, type metadata accessor for ConfigurationValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_10010E370(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098440(a1, (uint64_t)v4, &qword_100320618);
  uint64_t v5 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    sub_100087A1C((uint64_t)v4, &qword_100320618);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 3)
  {
    return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
  }
  uint64_t result = sub_100112720((uint64_t)v4, type metadata accessor for ConfigurationValue.OneOf_Value);
  __break(1u);
  return result;
}

uint64_t sub_10010E4C0(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_100320618);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Strings(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100098440(a1, (uint64_t)v4, &qword_100320618);
  uint64_t v8 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    sub_100087A1C((uint64_t)v4, &qword_100320618);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 4)
  {
    sub_100112650((uint64_t)v4, (uint64_t)v7, type metadata accessor for Strings);
    sub_100114F30(&qword_100322790, (void (*)(uint64_t))type metadata accessor for Strings);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_100112720((uint64_t)v7, type metadata accessor for Strings);
  }
  uint64_t result = sub_100112720((uint64_t)v4, type metadata accessor for ConfigurationValue.OneOf_Value);
  __break(1u);
  return result;
}

Swift::Int sub_10010E6E8()
{
  return sub_100111BC0((void (*)(void))type metadata accessor for ConfigurationValue, &qword_100322700, (void (*)(uint64_t))type metadata accessor for ConfigurationValue);
}

uint64_t sub_10010E730@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  return UnknownStorage.init()();
}

uint64_t sub_10010E7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010CF90(a1, a2, a3);
}

uint64_t sub_10010E7B8()
{
  return sub_10010DD40();
}

uint64_t sub_10010E7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100114F30(&qword_100322D90, (void (*)(uint64_t))type metadata accessor for ConfigurationValue);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10010E84C@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_10032CE30, (uint64_t)qword_10032F7C8, a1);
}

uint64_t sub_10010E870(uint64_t a1)
{
  uint64_t v2 = sub_100114F30(&qword_1003227A8, (void (*)(uint64_t))type metadata accessor for ConfigurationValue);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10010E8DC()
{
  sub_100114F30(&qword_1003227A8, (void (*)(uint64_t))type metadata accessor for ConfigurationValue);

  return Message.hash(into:)();
}

const char *sub_10010E958()
{
  return "Condition";
}

uint64_t sub_10010E964()
{
  return 0x6F697469646E6F43;
}

uint64_t sub_10010E980()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F7E0);
  sub_100080F90(v0, (uint64_t)qword_10032F7E0);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100287C70;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "exclude";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 100;
  *(void *)unint64_t v10 = "and";
  *(void *)(v10 + 8) = 3;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 101;
  *(void *)uint64_t v12 = "or";
  *((void *)v12 + 1) = 2;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 102;
  *(void *)uint64_t v14 = "dsid";
  *((void *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 103;
  *(void *)uint64_t v15 = "version";
  *(void *)(v15 + 8) = 7;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_10010EC04()
{
  return sub_10007F488(&qword_10032CE38, (uint64_t)qword_10032F7E0);
}

uint64_t sub_10010EC28@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_10032CE38, (uint64_t)qword_10032F7E0, a1);
}

uint64_t sub_10010EC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    switch(result)
    {
      case 'd':
        sub_10010ED64(v5, a1, a2, a3);
        break;
      case 'e':
        sub_10010F2DC(v5, a1, a2, a3);
        break;
      case 'f':
        sub_10010F858(v5, a1, a2, a3);
        break;
      case 'g':
        sub_10010FDD4(v5, a1, a2, a3);
        break;
      default:
        if (result == 1) {
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        }
        break;
    }
  }
  return result;
}

uint64_t sub_10010ED64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for Conditions(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Condition.OneOf_Condition(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = sub_100080E08(&qword_1003226B8);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  int64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for Condition(0) + 20);
  sub_100098440(v35, (uint64_t)v11, &qword_1003226C8);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    sub_100087A1C((uint64_t)v11, &qword_1003226C8);
    uint64_t v25 = v12;
LABEL_5:
    uint64_t v28 = v41;
    uint64_t v27 = v42;
    goto LABEL_6;
  }
  uint64_t v26 = (uint64_t)v40;
  sub_100112650((uint64_t)v11, (uint64_t)v18, type metadata accessor for Condition.OneOf_Condition);
  sub_100112650((uint64_t)v18, (uint64_t)v16, type metadata accessor for Condition.OneOf_Condition);
  uint64_t v25 = v12;
  if (swift_getEnumCaseMultiPayload())
  {
    sub_100112720((uint64_t)v16, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_5;
  }
  sub_100087A1C((uint64_t)v23, &qword_1003226B8);
  sub_100112650((uint64_t)v16, v26, type metadata accessor for Conditions);
  sub_100112650(v26, (uint64_t)v23, type metadata accessor for Conditions);
  uint64_t v28 = v41;
  v24(v23, 0, 1, v41);
  uint64_t v27 = v42;
LABEL_6:
  sub_100114F30(&qword_100322778, (void (*)(uint64_t))type metadata accessor for Conditions);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27) {
    return sub_100087A1C((uint64_t)v23, &qword_1003226B8);
  }
  uint64_t v30 = v38;
  sub_100098440((uint64_t)v23, v38, &qword_1003226B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v28) == 1)
  {
    sub_100087A1C((uint64_t)v23, &qword_1003226B8);
    return sub_100087A1C(v30, &qword_1003226B8);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    sub_100112650(v31, v37, type metadata accessor for Conditions);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_100087A1C((uint64_t)v23, &qword_1003226B8);
    uint64_t v33 = v35;
    sub_100087A1C(v35, &qword_1003226C8);
    sub_100112650(v32, v33, type metadata accessor for Conditions);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t sub_10010F2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for Conditions(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Condition.OneOf_Condition(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = sub_100080E08(&qword_1003226B8);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  int64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for Condition(0) + 20);
  sub_100098440(v35, (uint64_t)v11, &qword_1003226C8);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    sub_100087A1C((uint64_t)v11, &qword_1003226C8);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    sub_100112650((uint64_t)v11, (uint64_t)v18, type metadata accessor for Condition.OneOf_Condition);
    sub_100112650((uint64_t)v18, (uint64_t)v16, type metadata accessor for Condition.OneOf_Condition);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_100087A1C((uint64_t)v23, &qword_1003226B8);
      sub_100112650((uint64_t)v16, v26, type metadata accessor for Conditions);
      sub_100112650(v26, (uint64_t)v23, type metadata accessor for Conditions);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    sub_100112720((uint64_t)v16, type metadata accessor for Condition.OneOf_Condition);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  sub_100114F30(&qword_100322778, (void (*)(uint64_t))type metadata accessor for Conditions);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return sub_100087A1C((uint64_t)v23, &qword_1003226B8);
  }
  uint64_t v30 = v38;
  sub_100098440((uint64_t)v23, v38, &qword_1003226B8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    sub_100087A1C((uint64_t)v23, &qword_1003226B8);
    return sub_100087A1C(v30, &qword_1003226B8);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    sub_100112650(v31, v37, type metadata accessor for Conditions);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_100087A1C((uint64_t)v23, &qword_1003226B8);
    uint64_t v33 = v35;
    sub_100087A1C(v35, &qword_1003226C8);
    sub_100112650(v32, v33, type metadata accessor for Conditions);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t sub_10010F858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for ConditionDSID(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Condition.OneOf_Condition(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = sub_100080E08(&qword_100322DC0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  int64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for Condition(0) + 20);
  sub_100098440(v35, (uint64_t)v11, &qword_1003226C8);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    sub_100087A1C((uint64_t)v11, &qword_1003226C8);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    sub_100112650((uint64_t)v11, (uint64_t)v18, type metadata accessor for Condition.OneOf_Condition);
    sub_100112650((uint64_t)v18, (uint64_t)v16, type metadata accessor for Condition.OneOf_Condition);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      sub_100087A1C((uint64_t)v23, &qword_100322DC0);
      sub_100112650((uint64_t)v16, v26, type metadata accessor for ConditionDSID);
      sub_100112650(v26, (uint64_t)v23, type metadata accessor for ConditionDSID);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    sub_100112720((uint64_t)v16, type metadata accessor for Condition.OneOf_Condition);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  sub_100114F30(&qword_1003227D0, (void (*)(uint64_t))type metadata accessor for ConditionDSID);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return sub_100087A1C((uint64_t)v23, &qword_100322DC0);
  }
  uint64_t v30 = v38;
  sub_100098440((uint64_t)v23, v38, &qword_100322DC0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    sub_100087A1C((uint64_t)v23, &qword_100322DC0);
    return sub_100087A1C(v30, &qword_100322DC0);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    sub_100112650(v31, v37, type metadata accessor for ConditionDSID);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_100087A1C((uint64_t)v23, &qword_100322DC0);
    uint64_t v33 = v35;
    sub_100087A1C(v35, &qword_1003226C8);
    sub_100112650(v32, v33, type metadata accessor for ConditionDSID);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t sub_10010FDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for ConditionVersion(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Condition.OneOf_Condition(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = sub_100080E08(&qword_100322DC8);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  int64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for Condition(0) + 20);
  sub_100098440(v35, (uint64_t)v11, &qword_1003226C8);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    sub_100087A1C((uint64_t)v11, &qword_1003226C8);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    sub_100112650((uint64_t)v11, (uint64_t)v18, type metadata accessor for Condition.OneOf_Condition);
    sub_100112650((uint64_t)v18, (uint64_t)v16, type metadata accessor for Condition.OneOf_Condition);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      sub_100087A1C((uint64_t)v23, &qword_100322DC8);
      sub_100112650((uint64_t)v16, v26, type metadata accessor for ConditionVersion);
      sub_100112650(v26, (uint64_t)v23, type metadata accessor for ConditionVersion);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    sub_100112720((uint64_t)v16, type metadata accessor for Condition.OneOf_Condition);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  sub_100114F30(&qword_1003227E8, (void (*)(uint64_t))type metadata accessor for ConditionVersion);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return sub_100087A1C((uint64_t)v23, &qword_100322DC8);
  }
  uint64_t v30 = v38;
  sub_100098440((uint64_t)v23, v38, &qword_100322DC8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    sub_100087A1C((uint64_t)v23, &qword_100322DC8);
    return sub_100087A1C(v30, &qword_100322DC8);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    sub_100112650(v31, v37, type metadata accessor for ConditionVersion);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    sub_100087A1C((uint64_t)v23, &qword_100322DC8);
    uint64_t v33 = v35;
    sub_100087A1C(v35, &qword_1003226C8);
    sub_100112650(v32, v33, type metadata accessor for ConditionVersion);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t sub_100110350()
{
  uint64_t v2 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*v0 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    uint64_t v6 = type metadata accessor for Condition(0);
    sub_100098440((uint64_t)&v0[*(int *)(v6 + 20)], (uint64_t)v4, &qword_1003226C8);
    uint64_t v7 = type metadata accessor for Condition.OneOf_Condition(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v4, 1, v7) == 1) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        sub_1001107A8((uint64_t)v0);
        break;
      case 2u:
        sub_1001109D8((uint64_t)v0);
        break;
      case 3u:
        sub_100110C08((uint64_t)v0);
        break;
      default:
        sub_10011057C((uint64_t)v0);
        break;
    }
    uint64_t result = sub_100112720((uint64_t)v4, type metadata accessor for Condition.OneOf_Condition);
    if (!v1) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t sub_10011057C(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Conditions(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Condition(0);
  sub_100098440(a1 + *(int *)(v8 + 20), (uint64_t)v4, &qword_1003226C8);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_100087A1C((uint64_t)v4, &qword_1003226C8);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    sub_100112650((uint64_t)v4, (uint64_t)v7, type metadata accessor for Conditions);
    sub_100114F30(&qword_100322778, (void (*)(uint64_t))type metadata accessor for Conditions);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_100112720((uint64_t)v7, type metadata accessor for Conditions);
  }
  uint64_t result = sub_100112720((uint64_t)v4, type metadata accessor for Condition.OneOf_Condition);
  __break(1u);
  return result;
}

uint64_t sub_1001107A8(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Conditions(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Condition(0);
  sub_100098440(a1 + *(int *)(v8 + 20), (uint64_t)v4, &qword_1003226C8);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_100087A1C((uint64_t)v4, &qword_1003226C8);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_100112650((uint64_t)v4, (uint64_t)v7, type metadata accessor for Conditions);
    sub_100114F30(&qword_100322778, (void (*)(uint64_t))type metadata accessor for Conditions);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_100112720((uint64_t)v7, type metadata accessor for Conditions);
  }
  uint64_t result = sub_100112720((uint64_t)v4, type metadata accessor for Condition.OneOf_Condition);
  __break(1u);
  return result;
}

uint64_t sub_1001109D8(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ConditionDSID(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Condition(0);
  sub_100098440(a1 + *(int *)(v8 + 20), (uint64_t)v4, &qword_1003226C8);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_100087A1C((uint64_t)v4, &qword_1003226C8);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    sub_100112650((uint64_t)v4, (uint64_t)v7, type metadata accessor for ConditionDSID);
    sub_100114F30(&qword_1003227D0, (void (*)(uint64_t))type metadata accessor for ConditionDSID);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_100112720((uint64_t)v7, type metadata accessor for ConditionDSID);
  }
  uint64_t result = sub_100112720((uint64_t)v4, type metadata accessor for Condition.OneOf_Condition);
  __break(1u);
  return result;
}

uint64_t sub_100110C08(uint64_t a1)
{
  uint64_t v2 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ConditionVersion(0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Condition(0);
  sub_100098440(a1 + *(int *)(v8 + 20), (uint64_t)v4, &qword_1003226C8);
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_100087A1C((uint64_t)v4, &qword_1003226C8);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 3)
  {
    sub_100112650((uint64_t)v4, (uint64_t)v7, type metadata accessor for ConditionVersion);
    sub_100114F30(&qword_1003227E8, (void (*)(uint64_t))type metadata accessor for ConditionVersion);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return sub_100112720((uint64_t)v7, type metadata accessor for ConditionVersion);
  }
  uint64_t result = sub_100112720((uint64_t)v4, type metadata accessor for Condition.OneOf_Condition);
  __break(1u);
  return result;
}

Swift::Int sub_100110E3C()
{
  return sub_100111BC0((void (*)(void))type metadata accessor for Condition, &qword_100322708, (void (*)(uint64_t))type metadata accessor for Condition);
}

uint64_t sub_100110E84@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  uint64_t v2 = &a2[*(int *)(a1 + 20)];
  uint64_t v3 = type metadata accessor for Condition.OneOf_Condition(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return UnknownStorage.init()();
}

uint64_t sub_100110F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10010EC4C(a1, a2, a3);
}

uint64_t sub_100110F20()
{
  return sub_100110350();
}

uint64_t sub_100110F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100114F30(&qword_100322D88, (void (*)(uint64_t))type metadata accessor for Condition);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100110FB4@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_10032CE38, (uint64_t)qword_10032F7E0, a1);
}

uint64_t sub_100110FD8(uint64_t a1)
{
  uint64_t v2 = sub_100114F30(&qword_1003226E8, (void (*)(uint64_t))type metadata accessor for Condition);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100111044()
{
  sub_100114F30(&qword_1003226E8, (void (*)(uint64_t))type metadata accessor for Condition);

  return Message.hash(into:)();
}

const char *sub_1001110C0()
{
  return "ConditionDSID";
}

uint64_t sub_1001110CC()
{
  return 0x6F697469646E6F43;
}

uint64_t sub_1001110F0()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F7F8);
  sub_100080F90(v0, (uint64_t)qword_10032F7F8);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1002856D0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "mod";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "limit";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001112A8()
{
  return sub_10007F488(&qword_10032CE40, (uint64_t)qword_10032F7F8);
}

uint64_t sub_1001112CC@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(&qword_10032CE40, (uint64_t)qword_10032F7F8, a1);
}

uint64_t sub_1001112F0()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100111384()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for ConditionDSID(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

Swift::Int sub_100111440()
{
  return sub_100111BC0((void (*)(void))type metadata accessor for ConditionDSID, &qword_100322710, (void (*)(uint64_t))type metadata accessor for ConditionDSID);
}

uint64_t sub_100111488@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  return UnknownStorage.init()();
}

uint64_t sub_1001114AC()
{
  return sub_1001112F0();
}

uint64_t sub_1001114C4()
{
  return sub_100111384();
}

uint64_t sub_1001114DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100114F30(&qword_100322D80, (void (*)(uint64_t))type metadata accessor for ConditionDSID);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100111558@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(&qword_10032CE40, (uint64_t)qword_10032F7F8, a1);
}

uint64_t sub_10011157C(uint64_t a1)
{
  uint64_t v2 = sub_100114F30(&qword_1003227D0, (void (*)(uint64_t))type metadata accessor for ConditionDSID);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_1001115E8()
{
  sub_100114F30(&qword_1003227D0, (void (*)(uint64_t))type metadata accessor for ConditionDSID);

  return Message.hash(into:)();
}

void *sub_100111664()
{
  return &unk_1002C0A68;
}

unint64_t sub_100111670()
{
  return 0xD000000000000010;
}

uint64_t sub_10011168C()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  sub_100087A78(v0, qword_10032F810);
  sub_100080F90(v0, (uint64_t)qword_10032F810);
  sub_100080E08(&qword_10031F498);
  uint64_t v1 = (int *)(sub_100080E08((uint64_t *)&unk_10031F4A0) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100285700;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "platform";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "seed";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "major";
  *((void *)v12 + 1) = 5;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "minor";
  *((void *)v14 + 1) = 5;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_1001118CC()
{
  return sub_10007F488(qword_10032CE48, (uint64_t)qword_10032F810);
}

uint64_t sub_1001118F0@<X0>(uint64_t a1@<X8>)
{
  return sub_10007F500(qword_10032CE48, (uint64_t)qword_10032F810, a1);
}

uint64_t sub_100111914()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_100114F78();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t sub_100111A48()
{
  if (!*(void *)v0
    || (sub_100114F78(), uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v1))
  {
    if (*(unsigned char *)(v0 + 9) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0 + 16)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(v0 + 24)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for ConditionVersion(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

Swift::Int sub_100111B78()
{
  return sub_100111BC0((void (*)(void))type metadata accessor for ConditionVersion, &qword_100322720, (void (*)(uint64_t))type metadata accessor for ConditionVersion);
}

Swift::Int sub_100111BC0(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_100111C48@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

uint64_t sub_100111C78()
{
  return sub_100111914();
}

uint64_t sub_100111C90()
{
  return sub_100111A48();
}

uint64_t sub_100111CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100114F30(&qword_100322D78, (void (*)(uint64_t))type metadata accessor for ConditionVersion);

  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_100111D24@<X0>(uint64_t a1@<X8>)
{
  return sub_10007FBE8(qword_10032CE48, (uint64_t)qword_10032F810, a1);
}

uint64_t sub_100111D48(uint64_t a1)
{
  uint64_t v2 = sub_100114F30(&qword_1003227E8, (void (*)(uint64_t))type metadata accessor for ConditionVersion);

  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_100111DB4()
{
  sub_100114F30(&qword_1003227E8, (void (*)(uint64_t))type metadata accessor for ConditionVersion);

  return Message.hash(into:)();
}

uint64_t sub_100111E30(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_100111EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DewValue(0) - 8;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  unint64_t v10 = (uint64_t *)((char *)&v19 - v9);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_1001126B8(a1 + v12, (uint64_t)v10, type metadata accessor for DewValue);
        sub_1001126B8(a2 + v12, (uint64_t)v7, type metadata accessor for DewValue);
        char v15 = sub_1001131C4(v10, v7);
        sub_100112720((uint64_t)v7, type metadata accessor for DewValue);
        sub_100112720((uint64_t)v10, type metadata accessor for DewValue);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_100112098(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Condition.OneOf_Condition(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v35 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100080E08(&qword_1003226C8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_100080E08(&qword_100322DB8);
  __chkstk_darwin(v41);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for Condition(0);
  uint64_t v12 = __chkstk_darwin(v40);
  uint64_t v14 = (unsigned __int8 *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  BOOL v17 = (unsigned __int8 *)&v34 - v16;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18 != *(void *)(a2 + 16))
  {
LABEL_21:
    char v30 = 0;
    return v30 & 1;
  }
  if (v18 && v42 != v43)
  {
    uint64_t v34 = v9;
    unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v36 = *(void *)(v15 + 72);
    uint64_t v37 = v14;
    uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v39 = v4;
    uint64_t v20 = v18 - 1;
    uint64_t v21 = v40;
    while (1)
    {
      sub_1001126B8(v42 + v19, (uint64_t)v17, type metadata accessor for Condition);
      sub_1001126B8(v43 + v19, (uint64_t)v14, type metadata accessor for Condition);
      if (*v17 != *v14) {
        break;
      }
      uint64_t v22 = *(int *)(v21 + 20);
      uint64_t v23 = (uint64_t)&v14[v22];
      uint64_t v24 = (uint64_t)&v11[*(int *)(v41 + 48)];
      sub_100098440((uint64_t)&v17[v22], (uint64_t)v11, &qword_1003226C8);
      sub_100098440(v23, v24, &qword_1003226C8);
      uint64_t v25 = v39;
      uint64_t v26 = *v38;
      if ((*v38)(v11, 1, v39) == 1)
      {
        if (v26((char *)v24, 1, v25) != 1) {
          goto LABEL_19;
        }
        sub_100087A1C((uint64_t)v11, &qword_1003226C8);
        uint64_t v14 = v37;
      }
      else
      {
        uint64_t v27 = (uint64_t)v34;
        sub_100098440((uint64_t)v11, (uint64_t)v34, &qword_1003226C8);
        if (v26((char *)v24, 1, v25) == 1)
        {
          sub_100112720(v27, type metadata accessor for Condition.OneOf_Condition);
LABEL_19:
          sub_100087A1C((uint64_t)v11, &qword_100322DB8);
          uint64_t v14 = v37;
          break;
        }
        uint64_t v28 = v35;
        sub_100112650(v24, v35, type metadata accessor for Condition.OneOf_Condition);
        char v29 = sub_100113F4C(v27, v28);
        sub_100112720(v28, type metadata accessor for Condition.OneOf_Condition);
        sub_100112720(v27, type metadata accessor for Condition.OneOf_Condition);
        sub_100087A1C((uint64_t)v11, &qword_1003226C8);
        uint64_t v21 = v40;
        uint64_t v14 = v37;
        if ((v29 & 1) == 0) {
          break;
        }
      }
      type metadata accessor for UnknownStorage();
      sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      sub_100112720((uint64_t)v14, type metadata accessor for Condition);
      sub_100112720((uint64_t)v17, type metadata accessor for Condition);
      BOOL v32 = v20-- != 0;
      if (v30)
      {
        v19 += v36;
        if (v32) {
          continue;
        }
      }
      return v30 & 1;
    }
    sub_100112720((uint64_t)v14, type metadata accessor for Condition);
    sub_100112720((uint64_t)v17, type metadata accessor for Condition);
    goto LABEL_21;
  }
  char v30 = 1;
  return v30 & 1;
}

uint64_t type metadata accessor for CloudConfiguration(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032EA50);
}

uint64_t type metadata accessor for DewValue(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032EA60);
}

uint64_t type metadata accessor for Conditions(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032EA70);
}

uint64_t type metadata accessor for ConfigurationValue(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032EA90);
}

uint64_t type metadata accessor for ConfigurationValue.OneOf_Value(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032EAA0);
}

uint64_t sub_100112650(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001126B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100112720(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for Strings(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032EA80);
}

uint64_t sub_1001127A0()
{
  uint64_t v0 = type metadata accessor for UnknownStorage();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v49 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v48 = (char *)&v42 - v4;
  uint64_t v5 = type metadata accessor for Condition.OneOf_Condition(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100080E08(&qword_100322DB8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100080E08(&qword_1003226C8);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v42 - v17;
  __chkstk_darwin(v16);
  uint64_t v22 = (char *)&v42 - v21;
  if (*v20 != *v19) {
    goto LABEL_10;
  }
  uint64_t v42 = v8;
  uint64_t v46 = v1;
  uint64_t v47 = v0;
  uint64_t v23 = v20;
  uint64_t v24 = v19;
  uint64_t v25 = type metadata accessor for Condition(0);
  uint64_t v26 = *(int *)(v25 + 20);
  uint64_t v44 = v23;
  sub_100098440((uint64_t)&v23[v26], (uint64_t)v22, &qword_1003226C8);
  uint64_t v43 = v25;
  uint64_t v27 = *(int *)(v25 + 20);
  uint64_t v45 = v24;
  sub_100098440((uint64_t)&v24[v27], (uint64_t)v18, &qword_1003226C8);
  uint64_t v28 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_100098440((uint64_t)v22, (uint64_t)v11, &qword_1003226C8);
  sub_100098440((uint64_t)v18, v28, &qword_1003226C8);
  char v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v29((uint64_t)v11, 1, v5) != 1)
  {
    sub_100098440((uint64_t)v11, (uint64_t)v15, &qword_1003226C8);
    if (v29(v28, 1, v5) != 1)
    {
      uint64_t v30 = (uint64_t)v42;
      sub_100112650(v28, (uint64_t)v42, type metadata accessor for Condition.OneOf_Condition);
      char v31 = sub_100113F4C((uint64_t)v15, v30);
      sub_100112720(v30, type metadata accessor for Condition.OneOf_Condition);
      sub_100087A1C((uint64_t)v18, &qword_1003226C8);
      sub_100087A1C((uint64_t)v22, &qword_1003226C8);
      sub_100112720((uint64_t)v15, type metadata accessor for Condition.OneOf_Condition);
      sub_100087A1C((uint64_t)v11, &qword_1003226C8);
      if (v31) {
        goto LABEL_9;
      }
LABEL_10:
      char v39 = 0;
      return v39 & 1;
    }
    sub_100087A1C((uint64_t)v18, &qword_1003226C8);
    sub_100087A1C((uint64_t)v22, &qword_1003226C8);
    sub_100112720((uint64_t)v15, type metadata accessor for Condition.OneOf_Condition);
LABEL_7:
    sub_100087A1C((uint64_t)v11, &qword_100322DB8);
    goto LABEL_10;
  }
  sub_100087A1C((uint64_t)v18, &qword_1003226C8);
  sub_100087A1C((uint64_t)v22, &qword_1003226C8);
  if (v29(v28, 1, v5) != 1) {
    goto LABEL_7;
  }
  sub_100087A1C((uint64_t)v11, &qword_1003226C8);
LABEL_9:
  uint64_t v32 = v43;
  uint64_t v34 = v46;
  uint64_t v33 = v47;
  uint64_t v35 = *(void (**)(char *, unsigned __int8 *, uint64_t))(v46 + 16);
  uint64_t v36 = v48;
  v35(v48, &v44[*(int *)(v43 + 24)], v47);
  uint64_t v37 = &v45[*(int *)(v32 + 24)];
  uint64_t v38 = v49;
  v35(v49, v37, v33);
  sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  v40(v38, v33);
  v40(v36, v33);
  return v39 & 1;
}

uint64_t sub_100112CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v41 = (char *)&v37 - v7;
  uint64_t v8 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100080E08(&qword_100322DD0);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100080E08(&qword_100320618);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v37 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v37 - v22;
  uint64_t v39 = a1;
  sub_100098440(a1, (uint64_t)&v37 - v22, &qword_100320618);
  uint64_t v40 = a2;
  sub_100098440(a2, (uint64_t)v21, &qword_100320618);
  uint64_t v24 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_100098440((uint64_t)v23, (uint64_t)v14, &qword_100320618);
  sub_100098440((uint64_t)v21, v24, &qword_100320618);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v14, 1, v8) != 1)
  {
    sub_100098440((uint64_t)v14, (uint64_t)v18, &qword_100320618);
    if (v25(v24, 1, v8) != 1)
    {
      uint64_t v26 = v38;
      sub_100112650(v24, v38, type metadata accessor for ConfigurationValue.OneOf_Value);
      char v27 = sub_1001148D4((uint64_t)v18, v26);
      sub_100112720(v26, type metadata accessor for ConfigurationValue.OneOf_Value);
      sub_100087A1C((uint64_t)v21, &qword_100320618);
      sub_100087A1C((uint64_t)v23, &qword_100320618);
      sub_100112720((uint64_t)v18, type metadata accessor for ConfigurationValue.OneOf_Value);
      sub_100087A1C((uint64_t)v14, &qword_100320618);
      if (v27) {
        goto LABEL_8;
      }
LABEL_9:
      char v34 = 0;
      return v34 & 1;
    }
    sub_100087A1C((uint64_t)v21, &qword_100320618);
    sub_100087A1C((uint64_t)v23, &qword_100320618);
    sub_100112720((uint64_t)v18, type metadata accessor for ConfigurationValue.OneOf_Value);
LABEL_6:
    sub_100087A1C((uint64_t)v14, &qword_100322DD0);
    goto LABEL_9;
  }
  sub_100087A1C((uint64_t)v21, &qword_100320618);
  sub_100087A1C((uint64_t)v23, &qword_100320618);
  if (v25(v24, 1, v8) != 1) {
    goto LABEL_6;
  }
  sub_100087A1C((uint64_t)v14, &qword_100320618);
LABEL_8:
  uint64_t v28 = type metadata accessor for ConfigurationValue(0);
  uint64_t v30 = v43;
  uint64_t v29 = v44;
  char v31 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v32 = v41;
  v31(v41, v39 + *(int *)(v28 + 20), v44);
  uint64_t v33 = v42;
  v31(v42, v40 + *(int *)(v28 + 20), v29);
  sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v33, v29);
  v35(v32, v29);
  return v34 & 1;
}

uint64_t sub_1001131C4(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v66 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  id v65 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  id v64 = (char *)&v61 - v7;
  uint64_t v8 = type metadata accessor for ConfigurationValue(0);
  uint64_t v72 = *(void *)(v8 - 8);
  uint64_t v73 = v8;
  __chkstk_darwin(v8);
  uint64_t v63 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100080E08(&qword_100322DE0);
  __chkstk_darwin(v69);
  uint64_t v74 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100080E08(&qword_1003226C0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v67 = (uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v70 = (uint64_t)&v61 - v15;
  __chkstk_darwin(v14);
  uint64_t v71 = (uint64_t)&v61 - v16;
  uint64_t v17 = type metadata accessor for Conditions(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v68 = (uint64_t)&v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100080E08(&qword_100322DE8);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100080E08(&qword_1003226B8);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v26 = (uint64_t *)((char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v61 - v28;
  __chkstk_darwin(v27);
  char v31 = (char *)&v61 - v30;
  uint64_t v32 = *a1;
  uint64_t v33 = a1[1];
  uint64_t v75 = a1;
  uint64_t v76 = a2;
  if (v32 == *a2 && v33 == a2[1] || (char v34 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    uint64_t v35 = v75;
    if (v75[2] != v76[2])
    {
LABEL_22:
      char v34 = 0;
      return v34 & 1;
    }
    uint64_t v62 = v4;
    uint64_t v36 = v76;
    uint64_t v37 = type metadata accessor for DewValue(0);
    sub_100098440((uint64_t)v35 + *(int *)(v37 + 28), (uint64_t)v31, &qword_1003226B8);
    sub_100098440((uint64_t)v36 + *(int *)(v37 + 28), (uint64_t)v29, &qword_1003226B8);
    uint64_t v38 = (uint64_t)&v22[*(int *)(v20 + 48)];
    sub_100098440((uint64_t)v31, (uint64_t)v22, &qword_1003226B8);
    sub_100098440((uint64_t)v29, v38, &qword_1003226B8);
    uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    if (v39((uint64_t)v22, 1, v17) == 1)
    {
      sub_100087A1C((uint64_t)v29, &qword_1003226B8);
      sub_100087A1C((uint64_t)v31, &qword_1003226B8);
      if (v39(v38, 1, v17) == 1)
      {
        sub_100087A1C((uint64_t)v22, &qword_1003226B8);
        uint64_t v40 = v62;
LABEL_8:
        uint64_t v41 = v71;
        sub_100098440((uint64_t)v75 + *(int *)(v37 + 32), v71, &qword_1003226C0);
        uint64_t v68 = v37;
        uint64_t v42 = v70;
        sub_100098440((uint64_t)v76 + *(int *)(v37 + 32), v70, &qword_1003226C0);
        uint64_t v43 = v74;
        uint64_t v44 = v74 + *(int *)(v69 + 48);
        sub_100098440(v41, v74, &qword_1003226C0);
        sub_100098440(v42, v44, &qword_1003226C0);
        uint64_t v45 = v73;
        uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
        if (v46(v43, 1, v73) == 1)
        {
          sub_100087A1C(v42, &qword_1003226C0);
          sub_100087A1C(v41, &qword_1003226C0);
          if (v46(v44, 1, v45) == 1)
          {
            sub_100087A1C(v43, &qword_1003226C0);
LABEL_25:
            uint64_t v55 = v68;
            uint64_t v56 = v66;
            unint64_t v57 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
            id v58 = v64;
            v57(v64, (char *)v75 + *(int *)(v68 + 24), v40);
            BOOL v59 = v65;
            v57(v65, (char *)v76 + *(int *)(v55 + 24), v40);
            sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
            char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v60 = *(void (**)(char *, uint64_t))(v56 + 8);
            v60(v59, v40);
            v60(v58, v40);
            return v34 & 1;
          }
        }
        else
        {
          uint64_t v51 = v67;
          sub_100098440(v43, v67, &qword_1003226C0);
          if (v46(v44, 1, v45) != 1)
          {
            uint64_t v53 = v63;
            sub_100112650(v44, v63, type metadata accessor for ConfigurationValue);
            char v54 = sub_100112CD4(v51, v53);
            sub_100112720(v53, type metadata accessor for ConfigurationValue);
            sub_100087A1C(v42, &qword_1003226C0);
            sub_100087A1C(v41, &qword_1003226C0);
            sub_100112720(v51, type metadata accessor for ConfigurationValue);
            sub_100087A1C(v43, &qword_1003226C0);
            if (v54) {
              goto LABEL_25;
            }
            goto LABEL_22;
          }
          sub_100087A1C(v42, &qword_1003226C0);
          sub_100087A1C(v41, &qword_1003226C0);
          sub_100112720(v51, type metadata accessor for ConfigurationValue);
        }
        uint64_t v47 = &qword_100322DE0;
        uint64_t v48 = v43;
        goto LABEL_21;
      }
    }
    else
    {
      sub_100098440((uint64_t)v22, (uint64_t)v26, &qword_1003226B8);
      if (v39(v38, 1, v17) != 1)
      {
        uint64_t v49 = (uint64_t *)v68;
        sub_100112650(v38, v68, type metadata accessor for Conditions);
        if (sub_100112098(*v26, *v49))
        {
          sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          uint64_t v40 = v62;
          char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
          sub_100112720((uint64_t)v49, type metadata accessor for Conditions);
          sub_100087A1C((uint64_t)v29, &qword_1003226B8);
          sub_100087A1C((uint64_t)v31, &qword_1003226B8);
          sub_100112720((uint64_t)v26, type metadata accessor for Conditions);
          sub_100087A1C((uint64_t)v22, &qword_1003226B8);
          if ((v50 & 1) == 0) {
            goto LABEL_22;
          }
          goto LABEL_8;
        }
        sub_100112720((uint64_t)v49, type metadata accessor for Conditions);
        sub_100087A1C((uint64_t)v29, &qword_1003226B8);
        sub_100087A1C((uint64_t)v31, &qword_1003226B8);
        sub_100112720((uint64_t)v26, type metadata accessor for Conditions);
        uint64_t v48 = (uint64_t)v22;
        uint64_t v47 = &qword_1003226B8;
LABEL_21:
        sub_100087A1C(v48, v47);
        goto LABEL_22;
      }
      sub_100087A1C((uint64_t)v29, &qword_1003226B8);
      sub_100087A1C((uint64_t)v31, &qword_1003226B8);
      sub_100112720((uint64_t)v26, type metadata accessor for Conditions);
    }
    uint64_t v47 = &qword_100322DE8;
    uint64_t v48 = (uint64_t)v22;
    goto LABEL_21;
  }
  return v34 & 1;
}

uint64_t sub_100113B28(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 != 1) {
          goto LABEL_17;
        }
        goto LABEL_6;
      case 2:
        if (v11 != 2) {
          goto LABEL_17;
        }
        goto LABEL_6;
      case 3:
        if (v11 != 3) {
          goto LABEL_17;
        }
        goto LABEL_6;
      case 4:
        if (v11 != 4) {
          goto LABEL_17;
        }
        goto LABEL_6;
      default:
        if (!v11) {
          goto LABEL_6;
        }
        goto LABEL_17;
    }
  }
  if (v11 != v12) {
    goto LABEL_17;
  }
LABEL_6:
  if (*((unsigned __int8 *)a1 + 9) != *((unsigned __int8 *)a2 + 9) || a1[2] != a2[2] || a1[3] != a2[3])
  {
LABEL_17:
    char v15 = 0;
    return v15 & 1;
  }
  uint64_t v13 = type metadata accessor for ConditionVersion(0);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v10, (char *)a1 + *(int *)(v13 + 32), v4);
  v14(v8, (char *)a2 + *(int *)(v13 + 32), v4);
  sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t sub_100113D84(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1))
  {
    uint64_t v11 = type metadata accessor for ConditionDSID(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(v11 + 24)], v4);
    v12(v8, &a2[*(int *)(v11 + 24)], v4);
    sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_100113F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = a2;
  uint64_t v3 = type metadata accessor for ConditionVersion(0);
  __chkstk_darwin(v3 - 8);
  uint64_t v41 = (uint64_t *)((char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v38 = type metadata accessor for ConditionDSID(0);
  __chkstk_darwin(v38);
  uint64_t v42 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v40 = type metadata accessor for Conditions(0);
  uint64_t v6 = __chkstk_darwin(v40);
  uint64_t v8 = (uint64_t *)((char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  uint64_t v39 = (uint64_t *)((char *)&v38 - v9);
  uint64_t v10 = type metadata accessor for Condition.OneOf_Condition(0);
  uint64_t v11 = __chkstk_darwin(v10);
  char v13 = (uint64_t *)((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (uint64_t *)((char *)&v38 - v15);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (uint64_t *)((char *)&v38 - v18);
  __chkstk_darwin(v17);
  uint64_t v21 = (uint64_t *)((char *)&v38 - v20);
  uint64_t v22 = sub_100080E08(&qword_100322DF0);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v25 = (char *)&v38 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (uint64_t)&v25[*(int *)(v23 + 56)];
  sub_1001126B8(a1, (uint64_t)v25, type metadata accessor for Condition.OneOf_Condition);
  sub_1001126B8(v43, v26, type metadata accessor for Condition.OneOf_Condition);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1001126B8((uint64_t)v25, (uint64_t)v19, type metadata accessor for Condition.OneOf_Condition);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v27 = type metadata accessor for Conditions;
        uint64_t v28 = (uint64_t)v19;
        goto LABEL_18;
      }
      sub_100112650(v26, (uint64_t)v8, type metadata accessor for Conditions);
      if (sub_100112098(*v19, *v8))
      {
        type metadata accessor for UnknownStorage();
        sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v29 = type metadata accessor for Conditions;
          sub_100112720((uint64_t)v8, type metadata accessor for Conditions);
          uint64_t v30 = (uint64_t)v19;
          goto LABEL_23;
        }
      }
      char v34 = type metadata accessor for Conditions;
      sub_100112720((uint64_t)v8, type metadata accessor for Conditions);
      uint64_t v35 = (uint64_t)v19;
      goto LABEL_26;
    case 2u:
      sub_1001126B8((uint64_t)v25, (uint64_t)v16, type metadata accessor for Condition.OneOf_Condition);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        uint64_t v27 = type metadata accessor for ConditionDSID;
        uint64_t v28 = (uint64_t)v16;
        goto LABEL_18;
      }
      char v31 = v42;
      sub_100112650(v26, (uint64_t)v42, type metadata accessor for ConditionDSID);
      if (*v16 == *v31 && v16[1] == v31[1])
      {
        type metadata accessor for UnknownStorage();
        sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        if (dispatch thunk of static Equatable.== infix(_:_:)())
        {
          uint64_t v29 = type metadata accessor for ConditionDSID;
          sub_100112720((uint64_t)v31, type metadata accessor for ConditionDSID);
          uint64_t v30 = (uint64_t)v16;
          goto LABEL_23;
        }
      }
      char v34 = type metadata accessor for ConditionDSID;
      sub_100112720((uint64_t)v31, type metadata accessor for ConditionDSID);
      uint64_t v35 = (uint64_t)v16;
      goto LABEL_26;
    case 3u:
      sub_1001126B8((uint64_t)v25, (uint64_t)v13, type metadata accessor for Condition.OneOf_Condition);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v32 = v41;
        sub_100112650(v26, (uint64_t)v41, type metadata accessor for ConditionVersion);
        char v33 = sub_100113B28(v13, v32);
        sub_100112720((uint64_t)v32, type metadata accessor for ConditionVersion);
        sub_100112720((uint64_t)v13, type metadata accessor for ConditionVersion);
        sub_100112720((uint64_t)v25, type metadata accessor for Condition.OneOf_Condition);
        return v33 & 1;
      }
      uint64_t v27 = type metadata accessor for ConditionVersion;
      uint64_t v28 = (uint64_t)v13;
      goto LABEL_18;
    default:
      sub_1001126B8((uint64_t)v25, (uint64_t)v21, type metadata accessor for Condition.OneOf_Condition);
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v27 = type metadata accessor for Conditions;
        uint64_t v28 = (uint64_t)v21;
LABEL_18:
        sub_100112720(v28, v27);
        sub_100087A1C((uint64_t)v25, &qword_100322DF0);
        goto LABEL_27;
      }
      uint64_t v36 = v39;
      sub_100112650(v26, (uint64_t)v39, type metadata accessor for Conditions);
      if ((sub_100112098(*v21, *v36) & 1) == 0
        || (type metadata accessor for UnknownStorage(),
            sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage),
            (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
      {
        char v34 = type metadata accessor for Conditions;
        sub_100112720((uint64_t)v36, type metadata accessor for Conditions);
        uint64_t v35 = (uint64_t)v21;
LABEL_26:
        sub_100112720(v35, v34);
        sub_100112720((uint64_t)v25, type metadata accessor for Condition.OneOf_Condition);
LABEL_27:
        char v33 = 0;
        return v33 & 1;
      }
      uint64_t v29 = type metadata accessor for Conditions;
      sub_100112720((uint64_t)v36, type metadata accessor for Conditions);
      uint64_t v30 = (uint64_t)v21;
LABEL_23:
      sub_100112720(v30, v29);
      sub_100112720((uint64_t)v25, type metadata accessor for Condition.OneOf_Condition);
      char v33 = 1;
      return v33 & 1;
  }
}

uint64_t sub_10011470C(char *a1, char *a2, uint64_t (*a3)(void, void), uint64_t (*a4)(void))
{
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v20 - v13;
  if (a3(*(void *)a1, *(void *)a2))
  {
    uint64_t v15 = a4(0);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    v16(v14, &a1[*(int *)(v15 + 20)], v8);
    v16(v12, &a2[*(int *)(v15 + 20)], v8);
    sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v18(v12, v8);
    v18(v14, v8);
  }
  else
  {
    char v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_1001148D4(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = type metadata accessor for Strings(0);
  __chkstk_darwin(v35);
  uint64_t v36 = (void **)((char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v37 = (void **)((char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (double *)((char *)&v34 - v9);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (uint64_t *)((char *)&v34 - v15);
  __chkstk_darwin(v14);
  uint64_t v18 = (uint64_t *)((char *)&v34 - v17);
  uint64_t v19 = sub_100080E08(&qword_100322DF8);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = &v22[*(int *)(v20 + 56)];
  sub_1001126B8(a1, (uint64_t)v22, type metadata accessor for ConfigurationValue.OneOf_Value);
  sub_1001126B8(a2, (uint64_t)v23, type metadata accessor for ConfigurationValue.OneOf_Value);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1001126B8((uint64_t)v22, (uint64_t)v16, type metadata accessor for ConfigurationValue.OneOf_Value);
      uint64_t v26 = *v16;
      uint64_t v25 = v16[1];
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      if (v26 == *(void *)v23 && v25 == *((void *)v23 + 1))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v28 & 1) == 0) {
          goto LABEL_29;
        }
      }
      goto LABEL_31;
    case 2u:
      sub_1001126B8((uint64_t)v22, (uint64_t)v13, type metadata accessor for ConfigurationValue.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_25;
      }
      char v29 = *v13 ^ *v23;
      sub_100112720((uint64_t)v22, type metadata accessor for ConfigurationValue.OneOf_Value);
      char v30 = v29 ^ 1;
      return v30 & 1;
    case 3u:
      sub_1001126B8((uint64_t)v22, (uint64_t)v10, type metadata accessor for ConfigurationValue.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() != 3) {
        goto LABEL_25;
      }
      BOOL v24 = *v10 == *(double *)v23;
      goto LABEL_15;
    case 4u:
      char v31 = v37;
      sub_1001126B8((uint64_t)v22, (uint64_t)v37, type metadata accessor for ConfigurationValue.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        sub_100112720((uint64_t)v31, type metadata accessor for Strings);
LABEL_25:
        sub_100087A1C((uint64_t)v22, &qword_100322DF8);
        goto LABEL_26;
      }
      uint64_t v32 = v36;
      sub_100112650((uint64_t)v23, (uint64_t)v36, type metadata accessor for Strings);
      if ((sub_100111E30(*v31, *v32) & 1) == 0
        || (type metadata accessor for UnknownStorage(),
            sub_100114F30(&qword_10031F488, (void (*)(uint64_t))&type metadata accessor for UnknownStorage),
            (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0))
      {
        sub_100112720((uint64_t)v32, type metadata accessor for Strings);
        sub_100112720((uint64_t)v31, type metadata accessor for Strings);
LABEL_29:
        sub_100112720((uint64_t)v22, type metadata accessor for ConfigurationValue.OneOf_Value);
LABEL_26:
        char v30 = 0;
        return v30 & 1;
      }
      sub_100112720((uint64_t)v32, type metadata accessor for Strings);
      sub_100112720((uint64_t)v31, type metadata accessor for Strings);
LABEL_31:
      sub_100112720((uint64_t)v22, type metadata accessor for ConfigurationValue.OneOf_Value);
      char v30 = 1;
      return v30 & 1;
    default:
      sub_1001126B8((uint64_t)v22, (uint64_t)v18, type metadata accessor for ConfigurationValue.OneOf_Value);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_25;
      }
      BOOL v24 = *v18 == *(void *)v23;
LABEL_15:
      char v30 = v24;
      sub_100112720((uint64_t)v22, type metadata accessor for ConfigurationValue.OneOf_Value);
      return v30 & 1;
  }
}

uint64_t type metadata accessor for Condition.OneOf_Condition(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032EAC0);
}

uint64_t type metadata accessor for Condition(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032EAB0);
}

uint64_t sub_100114E8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100080E08(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ConditionDSID(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032EAD0);
}

uint64_t type metadata accessor for ConditionVersion(uint64_t a1)
{
  return sub_100080F58(a1, (uint64_t *)&unk_10032EAE0);
}

uint64_t sub_100114F30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100114F78()
{
  unint64_t result = qword_100322718;
  if (!qword_100322718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322718);
  }
  return result;
}

unint64_t sub_100114FD0()
{
  unint64_t result = qword_100322728;
  if (!qword_100322728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322728);
  }
  return result;
}

unint64_t sub_100115028()
{
  unint64_t result = qword_100322730;
  if (!qword_100322730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322730);
  }
  return result;
}

unint64_t sub_100115080()
{
  unint64_t result = qword_100322738;
  if (!qword_100322738)
  {
    sub_1000829FC(&qword_100322740);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322738);
  }
  return result;
}

unint64_t sub_1001150E0()
{
  unint64_t result = qword_100322748;
  if (!qword_100322748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100322748);
  }
  return result;
}

uint64_t sub_100115134()
{
  return sub_100114F30(&qword_100322750, (void (*)(uint64_t))type metadata accessor for CloudConfiguration);
}

uint64_t sub_10011517C()
{
  return sub_100114F30(&qword_10031FB90, (void (*)(uint64_t))type metadata accessor for CloudConfiguration);
}

uint64_t sub_1001151C4()
{
  return sub_100114F30(&qword_1003226D8, (void (*)(uint64_t))type metadata accessor for CloudConfiguration);
}

uint64_t sub_10011520C()
{
  return sub_100114F30(&qword_100322758, (void (*)(uint64_t))type metadata accessor for CloudConfiguration);
}

uint64_t sub_100115254()
{
  return sub_100114F30(&qword_100322760, (void (*)(uint64_t))type metadata accessor for DewValue);
}

uint64_t sub_10011529C()
{
  return sub_100114F30(&qword_1003226D0, (void (*)(uint64_t))type metadata accessor for DewValue);
}

uint64_t sub_1001152E4()
{
  return sub_100114F30(&qword_1003226E0, (void (*)(uint64_t))type metadata accessor for DewValue);
}

uint64_t sub_10011532C()
{
  return sub_100114F30(&qword_100322768, (void (*)(uint64_t))type metadata accessor for DewValue);
}

uint64_t sub_100115374()
{
  return sub_100114F30(&qword_100322770, (void (*)(uint64_t))type metadata accessor for Conditions);
}

uint64_t sub_1001153BC()
{
  return sub_100114F30(&qword_100322778, (void (*)(uint64_t))type metadata accessor for Conditions);
}

uint64_t sub_100115404()
{
  return sub_100114F30(&qword_1003226F0, (void (*)(uint64_t))type metadata accessor for Conditions);
}

uint64_t sub_10011544C()
{
  return sub_100114F30(&qword_100322780, (void (*)(uint64_t))type metadata accessor for Conditions);
}

uint64_t sub_100115494()
{
  return sub_100114F30(&qword_100322788, (void (*)(uint64_t))type metadata accessor for Strings);
}

uint64_t sub_1001154DC()
{
  return sub_100114F30(&qword_100322790, (void (*)(uint64_t))type metadata accessor for Strings);
}

uint64_t sub_100115524()
{
  return sub_100114F30(&qword_1003226F8, (void (*)(uint64_t))type metadata accessor for Strings);
}

uint64_t sub_10011556C()
{
  return sub_100114F30(&qword_100322798, (void (*)(uint64_t))type metadata accessor for Strings);
}

uint64_t sub_1001155B4()
{
  return sub_100114F30(&qword_1003227A0, (void (*)(uint64_t))type metadata accessor for ConfigurationValue);
}

uint64_t sub_1001155FC()
{
  return sub_100114F30(&qword_1003227A8, (void (*)(uint64_t))type metadata accessor for ConfigurationValue);
}

uint64_t sub_100115644()
{
  return sub_100114F30(&qword_100322700, (void (*)(uint64_t))type metadata accessor for ConfigurationValue);
}

uint64_t sub_10011568C()
{
  return sub_100114F30(&qword_1003227B0, (void (*)(uint64_t))type metadata accessor for ConfigurationValue);
}

uint64_t sub_1001156D4()
{
  return sub_100114F30(&qword_1003227B8, (void (*)(uint64_t))type metadata accessor for Condition);
}

uint64_t sub_10011571C()
{
  return sub_100114F30(&qword_1003226E8, (void (*)(uint64_t))type metadata accessor for Condition);
}

uint64_t sub_100115764()
{
  return sub_100114F30(&qword_100322708, (void (*)(uint64_t))type metadata accessor for Condition);
}

uint64_t sub_1001157AC()
{
  return sub_100114F30(&qword_1003227C0, (void (*)(uint64_t))type metadata accessor for Condition);
}

uint64_t sub_1001157F4()
{
  return sub_100114F30(&qword_1003227C8, (void (*)(uint64_t))type metadata accessor for ConditionDSID);
}

uint64_t sub_10011583C()
{
  return sub_100114F30(&qword_1003227D0, (void (*)(uint64_t))type metadata accessor for ConditionDSID);
}

uint64_t sub_100115884()
{
  return sub_100114F30(&qword_100322710, (void (*)(uint64_t))type metadata accessor for ConditionDSID);
}

uint64_t sub_1001158CC()
{
  return sub_100114F30(&qword_1003227D8, (void (*)(uint64_t))type metadata accessor for ConditionDSID);
}

uint64_t sub_100115914()
{
  return sub_100114F30(&qword_1003227E0, (void (*)(uint64_t))type metadata accessor for ConditionVersion);
}

uint64_t sub_10011595C()
{
  return sub_100114F30(&qword_1003227E8, (void (*)(uint64_t))type metadata accessor for ConditionVersion);
}

uint64_t sub_1001159A4()
{
  return sub_100114F30(&qword_100322720, (void (*)(uint64_t))type metadata accessor for ConditionVersion);
}

uint64_t sub_1001159EC()
{
  return sub_100114F30(&qword_1003227F0, (void (*)(uint64_t))type metadata accessor for ConditionVersion);
}

ValueMetadata *type metadata accessor for ConditionPlatform()
{
  return &type metadata for ConditionPlatform;
}

uint64_t sub_100115A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100115A70);
}

uint64_t sub_100115A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100115A88);
}

uint64_t *sub_100115A90(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = (uint64_t *)((char *)v4 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = type metadata accessor for Conditions(0);
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v38 = v11;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = sub_100080E08(&qword_1003226B8);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      *uint64_t v14 = *v15;
      uint64_t v20 = *(int *)(v16 + 20);
      uint64_t v37 = (char *)v14 + v20;
      uint64_t v21 = (char *)v15 + v20;
      swift_bridgeObjectRetain();
      v12(v37, v21, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    uint64_t v22 = a3[8];
    uint64_t v23 = (uint64_t *)((char *)v4 + v22);
    BOOL v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = type metadata accessor for ConfigurationValue(0);
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = sub_100080E08(&qword_1003226C0);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v24, 1, v28))
      {
        uint64_t v30 = sub_100080E08(&qword_100320618);
        memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
        v12((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v38);
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 4)
        {
          *uint64_t v23 = *v24;
          uint64_t v33 = *(int *)(type metadata accessor for Strings(0) + 20);
          uint64_t v35 = (char *)v24 + v33;
          uint64_t v36 = (char *)v23 + v33;
          swift_bridgeObjectRetain();
          v12(v36, v35, v38);
          swift_storeEnumTagMultiPayload();
        }
        else if (EnumCaseMultiPayload == 1)
        {
          uint64_t v32 = v24[1];
          *uint64_t v23 = *v24;
          v23[1] = v32;
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v23, v24, *(void *)(v29 + 64));
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v23, 0, 1, v28);
        v12((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v38);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
  }
  return v4;
}

uint64_t sub_100115EDC(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v15(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for Conditions(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v15(v6 + *(int *)(v7 + 20), v5);
  }
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for ConfigurationValue(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v8, 1, v11))
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 4)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = type metadata accessor for Strings(0);
        v15(v8 + *(int *)(v14 + 20), v5);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v12 = v8 + *(int *)(v9 + 20);
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(v12, v5);
  }
  return result;
}

void *sub_100116100(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for Conditions(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v36 = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100080E08(&qword_1003226B8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *uint64_t v13 = *v14;
    uint64_t v18 = *(int *)(v15 + 20);
    uint64_t v35 = (char *)v13 + v18;
    uint64_t v19 = (char *)v14 + v18;
    swift_bridgeObjectRetain();
    v11(v35, v19, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = type metadata accessor for ConfigurationValue(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_100080E08(&qword_1003226C0);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v26 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v22, 1, v26))
    {
      uint64_t v28 = sub_100080E08(&qword_100320618);
      memcpy(v21, v22, *(void *)(*(void *)(v28 - 8) + 64));
      v11((char *)v21 + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v36);
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 4)
      {
        *uint64_t v21 = *v22;
        uint64_t v31 = *(int *)(type metadata accessor for Strings(0) + 20);
        uint64_t v33 = (char *)v22 + v31;
        uint64_t v34 = (char *)v21 + v31;
        swift_bridgeObjectRetain();
        v11(v34, v33, v36);
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v30 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v30;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v21, v22, *(void *)(v27 + 64));
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v21, 0, 1, v26);
      v11((char *)v21 + *(int *)(v23 + 20), (char *)v22 + *(int *)(v23 + 20), v36);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  return a1;
}

void *sub_1001164FC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v58 = *(void *)(v9 - 8);
  uint64_t v59 = v9;
  uint64_t v55 = *(void (**)(char *, char *))(v58 + 24);
  v55(v7, v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = type metadata accessor for Conditions(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *uint64_t v11 = *v12;
      uint64_t v18 = *(int *)(v13 + 20);
      uint64_t v19 = (char *)v11 + v18;
      uint64_t v20 = (char *)v12 + v18;
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      swift_bridgeObjectRetain();
      v21(v19, v20, v59);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_100112720((uint64_t)v11, type metadata accessor for Conditions);
LABEL_6:
    uint64_t v22 = sub_100080E08(&qword_1003226B8);
    memcpy(v11, v12, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v11 = *v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v55)((char *)v11 + *(int *)(v13 + 20), (char *)v12 + *(int *)(v13 + 20), v59);
LABEL_7:
  uint64_t v23 = a3[8];
  uint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for ConfigurationValue(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (v30)
    {
      sub_100112720((uint64_t)v24, type metadata accessor for ConfigurationValue);
      goto LABEL_13;
    }
    uint64_t v35 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v37 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v36 + 48);
    int v38 = v37(v24, 1, v35);
    int v39 = v37(v25, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 4)
        {
          *uint64_t v24 = *v25;
          uint64_t v46 = *(int *)(type metadata accessor for Strings(0) + 20);
          uint64_t v47 = (char *)v24 + v46;
          char v54 = (char *)v25 + v46;
          uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
          swift_bridgeObjectRetain();
          v48(v47, v54, v59);
          swift_storeEnumTagMultiPayload();
        }
        else if (EnumCaseMultiPayload == 1)
        {
          *uint64_t v24 = *v25;
          v24[1] = v25[1];
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v24, v25, *(void *)(v36 + 64));
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v24, 0, 1, v35);
        goto LABEL_38;
      }
    }
    else
    {
      if (!v39)
      {
        if (a1 == a2) {
          goto LABEL_38;
        }
        sub_100112720((uint64_t)v24, type metadata accessor for ConfigurationValue.OneOf_Value);
        int v45 = swift_getEnumCaseMultiPayload();
        if (v45 == 4)
        {
          *uint64_t v24 = *v25;
          uint64_t v50 = *(int *)(type metadata accessor for Strings(0) + 20);
          uint64_t v51 = (char *)v24 + v50;
          uint64_t v52 = (char *)v25 + v50;
          uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
          swift_bridgeObjectRetain();
          v53(v51, v52, v59);
          swift_storeEnumTagMultiPayload();
          goto LABEL_38;
        }
        if (v45 == 1)
        {
          *uint64_t v24 = *v25;
          v24[1] = v25[1];
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
          goto LABEL_38;
        }
        size_t v42 = *(void *)(v36 + 64);
LABEL_26:
        memcpy(v24, v25, v42);
LABEL_38:
        ((void (*)(char *, char *, uint64_t))v55)((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v59);
        return a1;
      }
      sub_100112720((uint64_t)v24, type metadata accessor for ConfigurationValue.OneOf_Value);
    }
    size_t v42 = *(void *)(*(void *)(sub_100080E08(&qword_100320618) - 8) + 64);
    goto LABEL_26;
  }
  if (v30)
  {
LABEL_13:
    uint64_t v34 = sub_100080E08(&qword_1003226C0);
    memcpy(v24, v25, *(void *)(*(void *)(v34 - 8) + 64));
    return a1;
  }
  uint64_t v31 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(v25, 1, v31))
  {
    uint64_t v33 = sub_100080E08(&qword_100320618);
    memcpy(v24, v25, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    int v41 = swift_getEnumCaseMultiPayload();
    if (v41 == 4)
    {
      *uint64_t v24 = *v25;
      uint64_t v43 = *(int *)(type metadata accessor for Strings(0) + 20);
      uint64_t v56 = (char *)v25 + v43;
      unint64_t v57 = (char *)v24 + v43;
      uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
      swift_bridgeObjectRetain();
      v44(v57, v56, v59);
      swift_storeEnumTagMultiPayload();
    }
    else if (v41 == 1)
    {
      *uint64_t v24 = *v25;
      v24[1] = v25[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v24, v25, *(void *)(v32 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v24, 0, 1, v31);
  }
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v59);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t sub_100116C7C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Conditions(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = sub_100080E08(&qword_1003226B8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    *uint64_t v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = type metadata accessor for ConfigurationValue(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = sub_100080E08(&qword_1003226C0);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v23 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v24 + 48))(v19, 1, v23))
    {
      uint64_t v25 = sub_100080E08(&qword_100320618);
      memcpy(v18, v19, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        *uint64_t v18 = *v19;
        uint64_t v26 = type metadata accessor for Strings(0);
        v10((char *)v18 + *(int *)(v26 + 20), (char *)v19 + *(int *)(v26 + 20), v9);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v18, v19, *(void *)(v24 + 64));
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v18, 0, 1, v23);
    }
    v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

void *sub_10011700C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  size_t v42 = *(void (**)(char *, char *))(v43 + 40);
  v42(v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Conditions(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v12[*(int *)(v14 + 20)], &v13[*(int *)(v14 + 20)], v44);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_100112720((uint64_t)v12, type metadata accessor for Conditions);
LABEL_6:
    uint64_t v19 = sub_100080E08(&qword_1003226B8);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v42)(&v12[*(int *)(v14 + 20)], &v13[*(int *)(v14 + 20)], v44);
LABEL_7:
  uint64_t v20 = a3[8];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for ConfigurationValue(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (v27)
    {
      sub_100112720((uint64_t)v21, type metadata accessor for ConfigurationValue);
      goto LABEL_13;
    }
    uint64_t v32 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
    int v35 = v34(v21, 1, v32);
    int v36 = v34(v22, 1, v32);
    if (v35)
    {
      if (!v36)
      {
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          *(void *)uint64_t v21 = *(void *)v22;
          uint64_t v37 = type metadata accessor for Strings(0);
          (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v21[*(int *)(v37 + 20)], &v22[*(int *)(v37 + 20)], v44);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v21, v22, *(void *)(v33 + 64));
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v21, 0, 1, v32);
        goto LABEL_33;
      }
    }
    else
    {
      if (!v36)
      {
        if (a1 == a2) {
          goto LABEL_33;
        }
        sub_100112720((uint64_t)v21, type metadata accessor for ConfigurationValue.OneOf_Value);
        if (swift_getEnumCaseMultiPayload() == 4)
        {
          *(void *)uint64_t v21 = *(void *)v22;
          uint64_t v40 = type metadata accessor for Strings(0);
          (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v21[*(int *)(v40 + 20)], &v22[*(int *)(v40 + 20)], v44);
          swift_storeEnumTagMultiPayload();
          goto LABEL_33;
        }
        size_t v39 = *(void *)(v33 + 64);
LABEL_24:
        memcpy(v21, v22, v39);
LABEL_33:
        ((void (*)(char *, char *, uint64_t))v42)(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v44);
        return a1;
      }
      sub_100112720((uint64_t)v21, type metadata accessor for ConfigurationValue.OneOf_Value);
    }
    size_t v39 = *(void *)(*(void *)(sub_100080E08(&qword_100320618) - 8) + 64);
    goto LABEL_24;
  }
  if (v27)
  {
LABEL_13:
    uint64_t v31 = sub_100080E08(&qword_1003226C0);
    memcpy(v21, v22, *(void *)(*(void *)(v31 - 8) + 64));
    return a1;
  }
  uint64_t v28 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v22, 1, v28))
  {
    uint64_t v30 = sub_100080E08(&qword_100320618);
    memcpy(v21, v22, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      *(void *)uint64_t v21 = *(void *)v22;
      uint64_t v38 = type metadata accessor for Strings(0);
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v21[*(int *)(v38 + 20)], &v22[*(int *)(v38 + 20)], v44);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v21, v22, *(void *)(v29 + 64));
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v21, 0, 1, v28);
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v21[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v44);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  return a1;
}

uint64_t sub_100117694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001176A8);
}

uint64_t sub_1001176A8(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[6];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = sub_100080E08(&qword_1003226B8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[7];
    goto LABEL_9;
  }
  uint64_t v14 = sub_100080E08(&qword_1003226C0);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[8];

  return v15(v17, a2, v16);
}

uint64_t sub_100117828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011783C);
}

uint64_t sub_10011783C(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
    return result;
  }
  uint64_t v8 = type metadata accessor for UnknownStorage();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = sub_100080E08(&qword_1003226B8);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[7];
    goto LABEL_7;
  }
  uint64_t v14 = sub_100080E08(&qword_1003226C0);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[8];

  return v15(v17, a2, a2, v16);
}

void sub_1001179BC()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_100117B10(319, &qword_1003228D0, (void (*)(uint64_t))type metadata accessor for Conditions);
    if (v1 <= 0x3F)
    {
      sub_100117B10(319, (unint64_t *)&unk_1003228D8, (void (*)(uint64_t))type metadata accessor for ConfigurationValue);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_100117B10(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100117B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100117B78);
}

uint64_t sub_100117B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100117B90);
}

uint64_t *sub_100117B94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_100117C78(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_100117CF0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_100117D88(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_100117E1C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_100117E98(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_100117F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100117F38);
}

uint64_t sub_100117F3C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100117FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100118000);
}

void *sub_100118004(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1001180AC()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100118148(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_100080E08(&qword_100320618);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 4)
      {
        *a1 = *a2;
        uint64_t v13 = *(int *)(type metadata accessor for Strings(0) + 20);
        uint64_t v22 = (char *)a1 + v13;
        uint64_t v14 = (char *)a2 + v13;
        uint64_t v15 = type metadata accessor for UnknownStorage();
        uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
        swift_bridgeObjectRetain();
        v16(v22, v14, v15);
        swift_storeEnumTagMultiPayload();
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = a2[1];
        *a1 = *a2;
        a1[1] = v12;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(v8 + 64));
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v17 = *(int *)(a3 + 20);
    int v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return a1;
}

uint64_t sub_1001183BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      swift_bridgeObjectRelease();
      uint64_t v10 = a1 + *(int *)(type metadata accessor for Strings(0) + 20);
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

void *sub_1001184F4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100080E08(&qword_100320618);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      *a1 = *a2;
      uint64_t v11 = *(int *)(type metadata accessor for Strings(0) + 20);
      uint64_t v20 = (char *)a1 + v11;
      uint64_t v12 = (char *)a2 + v11;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      v14(v20, v12, v13);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  return a1;
}

void *sub_100118718(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2) {
        goto LABEL_17;
      }
      sub_100112720((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 4)
      {
        *a1 = *a2;
        uint64_t v23 = *(int *)(type metadata accessor for Strings(0) + 20);
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for UnknownStorage();
        int v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
        swift_bridgeObjectRetain();
        v27(v24, v25, v26);
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
      if (EnumCaseMultiPayload == 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        goto LABEL_17;
      }
      size_t v12 = *(void *)(v7 + 64);
      goto LABEL_9;
    }
    sub_100112720((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
LABEL_8:
    size_t v12 = *(void *)(*(void *)(sub_100080E08(&qword_100320618) - 8) + 64);
LABEL_9:
    memcpy(a1, a2, v12);
    goto LABEL_17;
  }
  if (v10) {
    goto LABEL_8;
  }
  int v11 = swift_getEnumCaseMultiPayload();
  if (v11 == 4)
  {
    *a1 = *a2;
    uint64_t v14 = *(int *)(type metadata accessor for Strings(0) + 20);
    uint64_t v28 = (char *)a1 + v14;
    uint64_t v15 = (char *)a2 + v14;
    uint64_t v16 = type metadata accessor for UnknownStorage();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v28, v15, v16);
    swift_storeEnumTagMultiPayload();
  }
  else if (v11 == 1)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_17:
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

void *sub_100118A6C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_100080E08(&qword_100320618);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(type metadata accessor for Strings(0) + 20);
      int v10 = (char *)a1 + v9;
      int v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  return a1;
}

void *sub_100118C48(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ConfigurationValue.OneOf_Value(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      if (a1 == a2) {
        goto LABEL_14;
      }
      sub_100112720((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
      if (swift_getEnumCaseMultiPayload() == 4)
      {
        *a1 = *a2;
        uint64_t v16 = *(int *)(type metadata accessor for Strings(0) + 20);
        uint64_t v17 = (char *)a1 + v16;
        uint64_t v18 = (char *)a2 + v16;
        uint64_t v19 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
        swift_storeEnumTagMultiPayload();
        goto LABEL_14;
      }
      size_t v15 = *(void *)(v7 + 64);
      goto LABEL_8;
    }
    sub_100112720((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
LABEL_7:
    size_t v15 = *(void *)(*(void *)(sub_100080E08(&qword_100320618) - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v15);
    goto LABEL_14;
  }
  if (v10) {
    goto LABEL_7;
  }
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    *a1 = *a2;
    uint64_t v11 = *(int *)(type metadata accessor for Strings(0) + 20);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_14:
  uint64_t v20 = *(int *)(a3 + 20);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 40))(v21, v22, v23);
  return a1;
}

uint64_t sub_100118F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100118F24);
}

uint64_t sub_100118F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100080E08(&qword_100320618);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100119020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100119034);
}

uint64_t sub_100119034(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100080E08(&qword_100320618);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for UnknownStorage();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_10011913C()
{
  sub_100117B10(319, (unint64_t *)&unk_100322A70, (void (*)(uint64_t))type metadata accessor for ConfigurationValue.OneOf_Value);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_100119220(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      *a1 = *a2;
      uint64_t v10 = *(int *)(type metadata accessor for Strings(0) + 20);
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
      swift_bridgeObjectRetain();
      v14(v11, v12, v13);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t sub_10011937C(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 4)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = a1 + *(int *)(type metadata accessor for Strings(0) + 20);
    uint64_t v4 = type metadata accessor for UnknownStorage();
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(v3, v4);
  }
  else if (result == 1)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_100119438(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    *a1 = *a2;
    uint64_t v8 = *(int *)(type metadata accessor for Strings(0) + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UnknownStorage();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100119550(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100112720((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(type metadata accessor for Strings(0) + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for UnknownStorage();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
      swift_bridgeObjectRetain();
      v11(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *sub_100119694(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 4)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(type metadata accessor for Strings(0) + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_100119768(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100112720((uint64_t)a1, type metadata accessor for ConfigurationValue.OneOf_Value);
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(type metadata accessor for Strings(0) + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for UnknownStorage();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100119868()
{
  uint64_t result = type metadata accessor for Strings(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_100119914(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (_OWORD *)((char *)a1 + v7);
    uint64_t v9 = (_OWORD *)((char *)a2 + v7);
    uint64_t v10 = type metadata accessor for Condition.OneOf_Condition(0);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = sub_100080E08(&qword_1003226C8);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *uint64_t v8 = *v9;
          uint64_t v16 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
          goto LABEL_9;
        case 3u:
          *(void *)uint64_t v8 = *(void *)v9;
          *((_WORD *)v8 + 4) = *((_WORD *)v9 + 4);
          v8[1] = v9[1];
          uint64_t v16 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
LABEL_9:
          uint64_t v17 = (char *)v8 + v16;
          uint64_t v18 = (char *)v9 + v16;
          uint64_t v19 = type metadata accessor for UnknownStorage();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
          break;
        default:
          *(void *)uint64_t v8 = *(void *)v9;
          uint64_t v14 = *(int *)(type metadata accessor for Conditions(0) + 20);
          uint64_t v26 = (char *)v9 + v14;
          int v27 = (char *)v8 + v14;
          uint64_t v15 = type metadata accessor for UnknownStorage();
          uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
          swift_bridgeObjectRetain();
          v25(v27, v26, v15);
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v20 = *(int *)(a3 + 24);
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  }
  return v4;
}

uint64_t sub_100119C04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Condition.OneOf_Condition(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 1u:
        swift_bridgeObjectRelease();
        uint64_t v6 = *(int *)(type metadata accessor for Conditions(0) + 20);
        goto LABEL_6;
      case 2u:
        uint64_t v6 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
        goto LABEL_6;
      case 3u:
        uint64_t v6 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
LABEL_6:
        uint64_t v7 = v4 + v6;
        uint64_t v8 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
        break;
      default:
        break;
    }
  }
  uint64_t v9 = a1 + *(int *)(a2 + 24);
  uint64_t v10 = type metadata accessor for UnknownStorage();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

unsigned char *sub_100119D80(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100080E08(&qword_1003226C8);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *uint64_t v7 = *v8;
        uint64_t v14 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
        goto LABEL_7;
      case 3u:
        *(void *)uint64_t v7 = *(void *)v8;
        *((_WORD *)v7 + 4) = *((_WORD *)v8 + 4);
        v7[1] = v8[1];
        uint64_t v14 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
LABEL_7:
        uint64_t v15 = (char *)v7 + v14;
        uint64_t v16 = (char *)v8 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
        break;
      default:
        *(void *)uint64_t v7 = *(void *)v8;
        uint64_t v12 = *(int *)(type metadata accessor for Conditions(0) + 20);
        uint64_t v24 = (char *)v8 + v12;
        uint64_t v25 = (char *)v7 + v12;
        uint64_t v13 = type metadata accessor for UnknownStorage();
        uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
        swift_bridgeObjectRetain();
        v23(v25, v24, v13);
        break;
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  return a1;
}

unsigned char *sub_10011A020(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (uint64_t)&a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *(void *)uint64_t v7 = *(void *)v8;
          *(void *)(v7 + 8) = *((void *)v8 + 1);
          uint64_t v21 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
          goto LABEL_13;
        case 3u:
          uint64_t v22 = *(void *)v8;
          *(unsigned char *)(v7 + 8) = v8[8];
          *(void *)uint64_t v7 = v22;
          *(unsigned char *)(v7 + 9) = v8[9];
          *(void *)(v7 + 16) = *((void *)v8 + 2);
          *(void *)(v7 + 24) = *((void *)v8 + 3);
          uint64_t v21 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
LABEL_13:
          uint64_t v23 = v7 + v21;
          uint64_t v24 = &v8[v21];
          uint64_t v25 = type metadata accessor for UnknownStorage();
          (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
          break;
        default:
          *(void *)uint64_t v7 = *(void *)v8;
          uint64_t v14 = *(int *)(type metadata accessor for Conditions(0) + 20);
          int v41 = &v8[v14];
          uint64_t v42 = v7 + v14;
          uint64_t v15 = type metadata accessor for UnknownStorage();
          uint64_t v40 = *(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 16);
          swift_bridgeObjectRetain();
          v40(v42, v41, v15);
          break;
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_15;
    }
LABEL_7:
    uint64_t v16 = sub_100080E08(&qword_1003226C8);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_15;
  }
  if (v13)
  {
    sub_100112720(v7, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_100112720(v7, type metadata accessor for Condition.OneOf_Condition);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)uint64_t v7 = *(void *)v8;
        *(void *)(v7 + 8) = *((void *)v8 + 1);
        uint64_t v31 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
        uint64_t v32 = v7 + v31;
        uint64_t v33 = &v8[v31];
        uint64_t v34 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v35 = *(void *)v8;
        *(unsigned char *)(v7 + 8) = v8[8];
        *(void *)uint64_t v7 = v35;
        *(unsigned char *)(v7 + 9) = v8[9];
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(void *)(v7 + 24) = *((void *)v8 + 3);
        uint64_t v36 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
        uint64_t v37 = v7 + v36;
        uint64_t v38 = &v8[v36];
        uint64_t v39 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        *(void *)uint64_t v7 = *(void *)v8;
        uint64_t v17 = *(int *)(type metadata accessor for Conditions(0) + 20);
        uint64_t v18 = v7 + v17;
        uint64_t v43 = &v8[v17];
        uint64_t v19 = type metadata accessor for UnknownStorage();
        uint64_t v20 = *(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        v20(v18, v43, v19);
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_15:
  uint64_t v26 = *(int *)(a3 + 24);
  int v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  return a1;
}

unsigned char *sub_10011A574(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100080E08(&qword_1003226C8);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *uint64_t v7 = *v8;
        uint64_t v12 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
        break;
      case 3u:
        *(void *)uint64_t v7 = *(void *)v8;
        *((_WORD *)v7 + 4) = *((_WORD *)v8 + 4);
        v7[1] = v8[1];
        uint64_t v12 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
        break;
      default:
        *(void *)uint64_t v7 = *(void *)v8;
        uint64_t v12 = *(int *)(type metadata accessor for Conditions(0) + 20);
        break;
    }
    int v13 = (char *)v7 + v12;
    uint64_t v14 = (char *)v8 + v12;
    uint64_t v15 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  return a1;
}

unsigned char *sub_10011A7B4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (uint64_t)&a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Condition.OneOf_Condition(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11((uint64_t)v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 2u:
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
          uint64_t v14 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
          break;
        case 3u:
          *(void *)uint64_t v7 = *(void *)v8;
          *(_WORD *)(v7 + 8) = *((_WORD *)v8 + 4);
          *(_OWORD *)(v7 + 16) = *((_OWORD *)v8 + 1);
          uint64_t v14 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
          break;
        default:
          *(void *)uint64_t v7 = *(void *)v8;
          uint64_t v14 = *(int *)(type metadata accessor for Conditions(0) + 20);
          break;
      }
      uint64_t v20 = v7 + v14;
      uint64_t v21 = &v8[v14];
      uint64_t v22 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_14;
    }
LABEL_7:
    uint64_t v15 = sub_100080E08(&qword_1003226C8);
    memcpy((void *)v7, v8, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_14;
  }
  if (v13)
  {
    sub_100112720(v7, type metadata accessor for Condition.OneOf_Condition);
    goto LABEL_7;
  }
  if (a1 != a2)
  {
    sub_100112720(v7, type metadata accessor for Condition.OneOf_Condition);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        uint64_t v28 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
        uint64_t v29 = v7 + v28;
        uint64_t v30 = &v8[v28];
        uint64_t v31 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *(void *)uint64_t v7 = *(void *)v8;
        *(_WORD *)(v7 + 8) = *((_WORD *)v8 + 4);
        *(_OWORD *)(v7 + 16) = *((_OWORD *)v8 + 1);
        uint64_t v32 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
        uint64_t v33 = v7 + v32;
        uint64_t v34 = &v8[v32];
        uint64_t v35 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        *(void *)uint64_t v7 = *(void *)v8;
        uint64_t v16 = *(int *)(type metadata accessor for Conditions(0) + 20);
        uint64_t v17 = v7 + v16;
        uint64_t v18 = &v8[v16];
        uint64_t v19 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
        swift_storeEnumTagMultiPayload();
        break;
    }
  }
LABEL_14:
  uint64_t v23 = *(int *)(a3 + 24);
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = type metadata accessor for UnknownStorage();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  return a1;
}

uint64_t sub_10011AC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011AC6C);
}

uint64_t sub_10011AC6C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_100080E08(&qword_1003226C8);
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      int v13 = &a1[*(int *)(a3 + 20)];
      uint64_t v14 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = type metadata accessor for UnknownStorage();
      uint64_t v16 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      uint64_t v18 = &a1[*(int *)(a3 + 24)];
      return v16(v18, a2, v17);
    }
  }
}

uint64_t sub_10011AD9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011ADB0);
}

unsigned char *sub_10011ADB0(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v8 = sub_100080E08(&qword_1003226C8);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = &v5[*(int *)(a4 + 20)];
      uint64_t v12 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (unsigned char *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for UnknownStorage();
      uint64_t v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = &v5[*(int *)(a4 + 24)];
      return (unsigned char *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_10011AEDC()
{
  sub_100117B10(319, (unint64_t *)&unk_100322B90, (void (*)(uint64_t))type metadata accessor for Condition.OneOf_Condition);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UnknownStorage();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_10011AFCC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v6 = *a2;
    *(void *)a1 = *a2;
    a1 = v6 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v7 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
        uint64_t v8 = a1 + v7;
        uint64_t v9 = (uint64_t)a2 + v7;
        uint64_t v10 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
        break;
      case 3u:
        *(void *)a1 = *a2;
        *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
        *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
        uint64_t v11 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
        uint64_t v12 = a1 + v11;
        uint64_t v13 = (uint64_t)a2 + v11;
        uint64_t v14 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
        break;
      default:
        *(void *)a1 = *a2;
        uint64_t v15 = *(int *)(type metadata accessor for Conditions(0) + 20);
        uint64_t v16 = a1 + v15;
        uint64_t v17 = (uint64_t)a2 + v15;
        uint64_t v18 = type metadata accessor for UnknownStorage();
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v19(v16, v17, v18);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10011B268(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 1:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for Conditions(0) + 20);
      goto LABEL_5;
    case 2:
      uint64_t v3 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
      goto LABEL_5;
    case 3:
      uint64_t v3 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
LABEL_5:
      uint64_t v4 = a1 + v3;
      uint64_t v5 = type metadata accessor for UnknownStorage();
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      uint64_t result = v6(v4, v5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10011B350(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v4 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
      uint64_t v5 = a1 + v4;
      uint64_t v6 = a2 + v4;
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
      break;
    case 3u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      uint64_t v8 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      break;
    default:
      *(void *)a1 = *(void *)a2;
      uint64_t v12 = *(int *)(type metadata accessor for Conditions(0) + 20);
      uint64_t v13 = a1 + v12;
      uint64_t v14 = a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
      swift_bridgeObjectRetain();
      v16(v13, v14, v15);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10011B59C(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    sub_100112720(a1, type metadata accessor for Condition.OneOf_Condition);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v9 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
        uint64_t v10 = a1 + v9;
        uint64_t v11 = (uint64_t)a2 + v9;
        uint64_t v12 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        break;
      case 3u:
        uint64_t v13 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v13;
        *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        uint64_t v14 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
        uint64_t v15 = a1 + v14;
        uint64_t v16 = (uint64_t)a2 + v14;
        uint64_t v17 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
        break;
      default:
        *(void *)a1 = *a2;
        uint64_t v4 = *(int *)(type metadata accessor for Conditions(0) + 20);
        uint64_t v5 = a1 + v4;
        uint64_t v6 = (uint64_t)a2 + v4;
        uint64_t v7 = type metadata accessor for UnknownStorage();
        uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
        swift_bridgeObjectRetain();
        v8(v5, v6, v7);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10011B824(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v4 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
      uint64_t v5 = a1 + v4;
      uint64_t v6 = a2 + v4;
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
      break;
    case 3u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      uint64_t v8 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      break;
    default:
      *(void *)a1 = *(void *)a2;
      uint64_t v12 = *(int *)(type metadata accessor for Conditions(0) + 20);
      uint64_t v13 = a1 + v12;
      uint64_t v14 = a2 + v12;
      uint64_t v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_10011BA48(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100112720(a1, type metadata accessor for Condition.OneOf_Condition);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v8 = *(int *)(type metadata accessor for ConditionDSID(0) + 24);
        uint64_t v9 = a1 + v8;
        uint64_t v10 = a2 + v8;
        uint64_t v11 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        uint64_t v12 = *(int *)(type metadata accessor for ConditionVersion(0) + 32);
        uint64_t v13 = a1 + v12;
        uint64_t v14 = a2 + v12;
        uint64_t v15 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
        break;
      default:
        *(void *)a1 = *(void *)a2;
        uint64_t v4 = *(int *)(type metadata accessor for Conditions(0) + 20);
        uint64_t v5 = a1 + v4;
        uint64_t v6 = a2 + v4;
        uint64_t v7 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10011BC90()
{
  uint64_t result = type metadata accessor for Conditions(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ConditionDSID(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for ConditionVersion(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_10011BD90(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10011BE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_OWORD *sub_10011BEC4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_10011BF40(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_OWORD *sub_10011BFC4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *sub_10011C040(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10011C0BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011C0D0);
}

uint64_t sub_10011C0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_10011C140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011C154);
}

uint64_t sub_10011C154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for UnknownStorage();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_10011C1C8()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_10011C264(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10011C340(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 32);
  uint64_t v3 = type metadata accessor for UnknownStorage();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_10011C3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_10011C434(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_10011C4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10011C55C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10011C5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011C604);
}

uint64_t sub_10011C604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 9);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 32);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_10011C6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011C6C8);
}

uint64_t sub_10011C6C8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 9) = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10011C76C()
{
  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10011C828()
{
  uint64_t v0 = ccrng();
  sub_10012C704(v0 != 0, 22, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  sub_10012C704(0, 23, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  return v0;
}

uint64_t sub_10011C898(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = *(unsigned int (**)(uint64_t, void, uint64_t))sub_100130700();
  uint64_t v5 = sub_100130700();
  BOOL v6 = v4(v5, a2, a1) == 0;

  return sub_10012C704(v6, 31, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
}

uint64_t sub_10011C900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unint64_t a6, void *a7, unint64_t *a8)
{
  uint64_t v42 = a1;
  uint64_t v43 = a3;
  memset(__s, 0, sizeof(__s));
  uint64_t v14 = ccaes_cbc_encrypt_mode();
  __chkstk_darwin(v14);
  uint64_t v44 = (uint64_t)&v37 - v15;
  bzero((char *)&v37 - v15, v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v37 - v17;
  bzero((char *)&v37 - v17, v17);
  uint64_t v19 = 0xFFFFFFFFLL;
  if (HIDWORD(a6) || (a6 - 40) < 0xFFFFFFE0) {
    goto LABEL_30;
  }
  uint64_t v40 = &v37;
  int v41 = a8;
  uint64_t v39 = a7;
  if (!a4)
  {
    BOOL v21 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0x10 || a2 == 32;
    if (!v21 || !a8 || *a8 < a6 + 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_31;
    }
    unint64_t v38 = a6 + 8;
    cccbc_init();
    goto LABEL_15;
  }
  if (a8)
  {
    unint64_t v20 = *v41;
    unint64_t v38 = a6 + 8;
    if (v20 >= a6 + 8)
    {
LABEL_15:
      uint64_t v22 = 0;
      unsigned int v23 = a6 >> 3;
      if (a6 >> 3 <= 1) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = v23;
      }
      do
      {
        uint64_t v25 = *a5++;
        *((void *)&__s[v22++] + 1) = v25;
      }
      while (v24 != v22);
      uint64_t v26 = 0;
      *(void *)&__s[0] = v43;
      uint64_t v27 = 1;
      uint64_t v42 = v23;
      do
      {
        uint64_t v43 = v26;
        uint64_t v28 = 0;
        uint64_t v29 = (uint64_t *)__s;
        do
        {
          if (a4)
          {
            if ((a4(1, &unk_10032F838, v29, v29, 16) & 1) == 0) {
              goto LABEL_6;
            }
          }
          else
          {
            cccbc_clear_iv();
            sub_10012D10C(v14, v44, (uint64_t)v18, 0x10uLL);
          }
          uint64_t v30 = *v29;
          v29 += 2;
          unint64_t v31 = v30 ^ bswap64(v27 + v28++);
          *(void *)&__s[v28 % v23] = v31;
        }
        while (v24 != v28);
        uint64_t v26 = v43 + 1;
        v27 += v42;
      }
      while (v43 != 5);
      uint64_t v32 = v39;
      *uint64_t v39 = *(void *)&__s[0];
      uint64_t v33 = v32 + 1;
      uint64_t v34 = (uint64_t *)__s + 1;
      do
      {
        uint64_t v35 = *v34;
        v34 += 2;
        *v33++ = v35;
        --v24;
      }
      while (v24);
      uint64_t v19 = 0;
      *int v41 = v38 & 0xFFFFFFF8;
LABEL_30:
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      if (a4) {
        return v19;
      }
LABEL_31:
      cc_clear();
      return v19;
    }
  }
LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10011CC18(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  unint64_t v11 = *a8;
  uint64_t v9 = sub_10011C900(a1, a2, a3, a4, a5, a6, a7, &v11);
  sub_10012C704(HIDWORD(v11) == 0, 171, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t sub_10011CC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unint64_t a6, void *a7, void *a8)
{
  uint64_t v46 = a5;
  uint64_t v44 = a1;
  memset(__s, 0, sizeof(__s));
  uint64_t v14 = ccaes_cbc_decrypt_mode();
  __chkstk_darwin(v14);
  uint64_t v47 = (uint64_t)&v38 - v15;
  bzero((char *)&v38 - v15, v15);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v38 - v17;
  bzero((char *)&v38 - v17, v17);
  uint64_t v19 = 0xFFFFFFFFLL;
  if (HIDWORD(a6)) {
    goto LABEL_33;
  }
  uint64_t v40 = a3;
  unsigned int v20 = a6 >> 3;
  if ((a6 >> 3) - 6 < 0xFFFFFFFC) {
    goto LABEL_33;
  }
  int v41 = &v38;
  uint64_t v42 = a8;
  uint64_t v39 = a7;
  unint64_t v45 = a6;
  if (!a4)
  {
    BOOL v21 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0x10 || a2 == 32;
    if (!v21 || !a8 || *a8 < a6 - 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_34;
    }
    cccbc_init();
    goto LABEL_15;
  }
  if (a8 && *v42 >= v45 - 8)
  {
LABEL_15:
    *(void *)&__s[0] = *v46;
    uint64_t v22 = v20 - 1;
    if (v20 != 1)
    {
      unsigned int v23 = (void *)__s + 1;
      uint64_t v24 = v46 + 1;
      uint64_t v25 = v20 - 1;
      do
      {
        uint64_t v26 = *v24++;
        *unsigned int v23 = v26;
        v23 += 2;
        --v25;
      }
      while (v25);
    }
    int v27 = 6 * v20 - 6;
    LODWORD(v44) = 1 - v20;
    int v28 = 5;
    uint64_t v43 = (unint64_t *)&__s[v20 - 2];
    do
    {
      LODWORD(v46) = v28;
      if (v45 >= 0x10)
      {
        uint64_t v29 = v43;
        int v30 = v22;
        unsigned int v31 = v27;
        do
        {
          *uint64_t v29 = *(void *)&__s[v30 % v22] ^ bswap64(v31);
          if (a4)
          {
            if ((a4(0, &unk_10032F838, v29, v29, 16) & 1) == 0) {
              goto LABEL_6;
            }
          }
          else
          {
            cccbc_clear_iv();
            sub_10012D10C(v14, v47, (uint64_t)v18, 0x10uLL);
          }
          --v31;
          v29 -= 2;
          BOOL v32 = __OFSUB__(v30--, 1);
        }
        while (!((v30 < 0) ^ v32 | (v30 == 0)));
      }
      int v28 = v46 - 1;
      v27 += v44;
    }
    while (v46);
    if (*(void *)&__s[0] == v40)
    {
      uint64_t v33 = v39;
      if (v22)
      {
        uint64_t v34 = (uint64_t *)__s + 1;
        uint64_t v35 = v22;
        do
        {
          uint64_t v36 = *v34;
          v34 += 2;
          *v33++ = v36;
          --v35;
        }
        while (v35);
      }
      uint64_t v19 = 0;
      *uint64_t v42 = (8 * v22);
    }
    else
    {
      uint64_t v19 = 0xFFFFFFFFLL;
    }
LABEL_33:
    memset_s(__s, 0x40uLL, 0, 0x40uLL);
    if (a4) {
      return v19;
    }
LABEL_34:
    cc_clear();
    return v19;
  }
LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

uint64_t sub_10011CFEC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(void, void *, unint64_t *, unint64_t *, uint64_t), void *a5, unsigned int a6, void *a7, _DWORD *a8)
{
  uint64_t v11 = *a8;
  uint64_t v9 = sub_10011CC84(a1, a2, a3, a4, a5, a6, a7, &v11);
  sub_10012C704(HIDWORD(v11) == 0, 261, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t sub_10011D058(unsigned int a1, _DWORD *a2)
{
  uint64_t v2 = a1 + 15;
  uint64_t v3 = v2 << 31 >> 31;
  BOOL v4 = v3 != v2 || v3 < 0;
  int v5 = v4;
  if (!v4) {
    *a2 = v3 & 0xFFFFFFF8;
  }
  return v5 ^ 1u;
}

uint64_t sub_10011D084(unint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a1 >= 0xFFFFFFFFFFFFFFF1;
  BOOL v3 = v2 << 63 >> 63 != v2 || v2 << 63 >> 63 == -1;
  int v4 = v3;
  if (!v3) {
    *a2 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  }
  return v4 ^ 1u;
}

BOOL sub_10011D0B4(unsigned int a1, unsigned int *a2)
{
  unsigned int v2 = a1 - 8;
  BOOL result = a1 > 7;
  *a2 = v2;
  return result;
}

BOOL sub_10011D0C8(unint64_t a1, unint64_t *a2)
{
  unint64_t v2 = a1 - 8;
  BOOL result = a1 > 7;
  *a2 = v2;
  return result;
}

uint64_t sub_10011D0DC(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v19 = __s;
  *((void *)&v19 + 1) = v23;
  size_t v20 = 4096;
  uint64_t v13 = 3758097090;
  if (v7 && v5)
  {
    mach_port_t v14 = sub_10011D344();
    if (!v14)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_vek", ":", 179, "", 0, "", "");
      uint64_t v13 = 3758097084;
      goto LABEL_16;
    }
    mach_port_t v15 = v14;
    if (!ccder_blob_encode_body_tl()
      || !sub_10012EEF8(&v19, v9)
      || !sub_10012EEF8(&v19, v11)
      || !sub_10012F018(&v19, v12)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_14;
    }
    input[0] = *((void *)&v19 + 1);
    input[1] = (uint64_t)v23 - *((void *)&v19 + 1);
    uint64_t v16 = IOConnectCallMethod(v15, 0x4Au, input, 2u, 0, 0, 0, 0, __s, &v20);
    if (v16)
    {
      uint64_t v13 = v16;
      goto LABEL_16;
    }
    *(void *)&long long v18 = __s;
    *((void *)&v18 + 1) = &__s[v20];
    if (!ccder_blob_decode_range() || !sub_10012EF68(&v18, 0, v5)) {
      goto LABEL_14;
    }
    if (!v3)
    {
      uint64_t v13 = 0;
      goto LABEL_16;
    }
    uint64_t v13 = 0;
    if ((sub_10012ED54(&v18, 0, v3) & 1) == 0) {
LABEL_14:
    }
      uint64_t v13 = 3758097098;
  }
LABEL_16:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

uint64_t sub_10011D344()
{
  if (qword_10032EB00 != -1) {
    dispatch_once(&qword_10032EB00, &stru_1002C2170);
  }
  dispatch_sync((dispatch_queue_t)qword_10032EB08, &stru_1002C20F0);
  uint64_t result = dword_10032EAF0;
  if (!dword_10032EAF0)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return dword_10032EAF0;
  }
  return result;
}

unint64_t sub_10011D3D0(char *a1, const void *a2, size_t a3)
{
  unint64_t v3 = (unint64_t)a1;
  if (a1)
  {
    int v6 = open_dprotected_np(a1, 1793, 4, 0, 384);
    if (v6 == -1)
    {
      uint64_t v10 = __error();
      uint64_t v11 = strerror(*v10);
      syslog(3, "could not create file: %s (%s)\n", (const char *)v3, v11);
      return 0;
    }
    else
    {
      int v7 = v6;
      ssize_t v8 = write(v6, a2, a3);
      unint64_t v3 = v8 != -1;
      if (v8 == -1)
      {
        uint64_t v12 = __error();
        uint64_t v13 = strerror(*v12);
        syslog(3, "failed to write restore bag to disk %s\n", v13);
      }
      close(v7);
    }
  }
  return v3;
}

const char *sub_10011D4A4(char *a1, void *a2, off_t *a3)
{
  unint64_t v3 = a1;
  memset(&v14, 0, sizeof(v14));
  if (a1)
  {
    if (!stat(a1, &v14))
    {
      off_t st_size = v14.st_size;
      int v7 = open(v3, 0);
      if (v7 == -1)
      {
        uint64_t v12 = __error();
        uint64_t v13 = strerror(*v12);
        syslog(3, "could not open file: %s (%s)\n", v3, v13);
      }
      else
      {
        int v8 = v7;
        uint64_t v9 = calloc(st_size, 1uLL);
        unint64_t v3 = (const char *)(v9 != 0);
        if (!v9)
        {
LABEL_7:
          close(v8);
          return v3;
        }
        uint64_t v10 = v9;
        if (read(v8, v9, st_size) == st_size)
        {
          *a2 = v10;
          *a3 = st_size;
          goto LABEL_7;
        }
        close(v8);
        free(v10);
      }
    }
    return 0;
  }
  return v3;
}

uint64_t sub_10011D5B0(unsigned int a1, const void *a2)
{
  uint64_t input = a1;
  mach_port_t v3 = sub_10011D344();
  if (v3) {
    return IOConnectCallMethod(v3, 0x6Cu, &input, 1u, a2, 0x10uLL, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_delete_xart_leak", ":", 268, "", 0, "", "");
  return 3758097084;
}

char *sub_10011D698(char *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    v9[0] = result;
    v9[1] = 0;
    uint64_t result = (char *)fts_open(v9, 84, 0);
    if (result)
    {
      int v5 = (FTS *)result;
      int v6 = fts_read((FTS *)result);
      if (v6)
      {
        int v7 = v6;
        do
        {
          int fts_info = v7->fts_info;
          if (fts_info != 6)
          {
            if (fts_info == 1)
            {
              if (a2)
              {
                if (((*(uint64_t (**)(uint64_t, FTSENT *))(a2 + 16))(a2, v7) & 1) == 0) {
                  fts_set(v5, v7, 4);
                }
              }
            }
            else if (a3 && fts_info == 8)
            {
              (*(void (**)(uint64_t, FTSENT *))(a3 + 16))(a3, v7);
            }
          }
          int v7 = fts_read(v5);
        }
        while (v7);
      }
      return (char *)fts_close(v5);
    }
  }
  return result;
}

char *sub_10011D7A8(char *result, int a2)
{
  if (result)
  {
    mach_port_t v3 = result;
    bzero(v8, 0x400uLL);
    uint64_t result = realpath_DARWIN_EXTSN(v3, v8);
    if (result)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 0x40000000;
      uint64_t v6[2] = sub_10011D8C0;
      v6[3] = &unk_1002C2030;
      int v7 = a2;
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 0x40000000;
      v4[2] = sub_10011D978;
      v4[3] = &unk_1002C2050;
      int v5 = a2;
      return sub_10011D698(v8, (uint64_t)v6, (uint64_t)v4);
    }
  }
  return result;
}

uint64_t sub_10011D8C0(uint64_t a1, uint64_t a2)
{
  int v4 = sub_10011D91C(*(const char **)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || v4 == v5) {
    printf(" dir: %s %i\n", *(const char **)(a2 + 48), v4);
  }
  return 1;
}

uint64_t sub_10011D91C(const char *a1)
{
  int v1 = open_dprotected_np(a1, 0, 0, 1);
  if (v1 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v2 = v1;
  uint64_t v3 = fcntl(v1, 63);
  if ((v2 & 0x80000000) == 0) {
    close(v2);
  }
  return v3;
}

uint64_t sub_10011D978(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10011D91C(*(const char **)(a2 + 48));
  int v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || result == v5) {
    return printf("file: %s %i\n", *(const char **)(a2 + 48), result);
  }
  return result;
}

uint64_t sub_10011D9D0()
{
  io_registry_entry_t v0 = IORegistryEntryFromPath(kIOMasterPortDefault, "IODeviceTree:/filesystems");
  if (v0)
  {
    io_object_t v1 = v0;
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v0, @"e-apfs", kCFAllocatorDefault, 0);
    BOOL v3 = CFProperty != 0;
    if (CFProperty) {
      CFRelease(CFProperty);
    }
    IOObjectRelease(v1);
  }
  else
  {
    BOOL v3 = 0;
  }
  size_t __len = 1023;
  bzero(__big, 0x400uLL);
  if ((byte_10032EAF8 & 1) == 0)
  {
    if (!sysctlbyname("kern.bootargs", __big, &__len, 0, 0) && strnstr(__big, "-apfs_shared_datavolume", __len)) {
      byte_10032EAF9 = 1;
    }
    byte_10032EAF8 = 1;
  }
  unsigned int v4 = byte_10032EAF9;
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s ioreg: %d, boot_arg: %d%s\n", "aks", "", "", "", "aks_fs_supports_enhanced_apfs", ":", 437, "", 0, "", v3, byte_10032EAF9, "");
  return v3 | v4;
}

uint64_t sub_10011DB54(const char *a1)
{
  bzero(v4, 0x400uLL);
  bzero(__str, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v4))
  {
    snprintf(__str, 0x400uLL, "%s/mobile", v4);
    sub_10011DC28(v4, (uint64_t)&off_1002C0C10, 35);
    if ((sub_10011D9D0() & 1) == 0) {
      sub_10011DC28(__str, (uint64_t)&off_1002C12A0, 72);
    }
  }
  return 0;
}

void sub_10011DC28(const char *a1, uint64_t a2, uint64_t a3)
{
  bzero(__str, 0x400uLL);
  memset(&v7, 0, sizeof(v7));
  if (a3)
  {
    uint64_t v6 = a2 + 16;
    do
    {
      snprintf(__str, 0x400uLL, "%s%s", a1, *(const char **)(v6 - 16));
      if (stat(__str, &v7))
      {
        printf("stat failed: %s\n");
      }
      else
      {
        sub_10011D91C(__str);
        printf("%s: mode=%o, u/g=%i:%i class=%i%s\n");
      }
      v6 += 48;
      --a3;
    }
    while (a3);
  }
}

uint64_t sub_10011DD6C(const char *a1)
{
  bzero(v3, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v3)) {
    sub_10011DC28(v3, (uint64_t)&off_1002C12A0, 72);
  }
  return 0;
}

const char *sub_10011DDF4()
{
  puts("shared allow list:");
  sub_10011DE5C("<var>", (uint64_t)&off_1002C0C10, 35);
  puts("user allow list:");

  return sub_10011DE5C("<user>", (uint64_t)&off_1002C12A0, 72);
}

const char *sub_10011DE5C(const char *result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    unsigned int v4 = result;
    int v5 = (const char **)(a2 + 16);
    uint64_t v6 = (const char **)(a2 + 16);
    do
    {
      char v7 = *(unsigned char *)v6;
      v6 += 6;
      if (v7) {
        uint64_t result = (const char *)printf("%s%s\n", v4, *(v5 - 2));
      }
      int v5 = v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_10011DECC(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unsigned int v9 = v8;
  uint64_t v10 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v17 = __s;
  *((void *)&v17 + 1) = &v21;
  size_t v18 = 4096;
  uint64_t v11 = 3758097090;
  if (v5 && v3)
  {
    mach_port_t v12 = sub_10011D344();
    if (v12)
    {
      mach_port_t v13 = v12;
      if (!ccder_blob_encode_body_tl()
        || !sub_10012EEF8(&v17, v7)
        || !sub_10012F018(&v17, v10)
        || !ccder_blob_encode_tl())
      {
        goto LABEL_10;
      }
      input[0] = v9;
      input[1] = *((void *)&v17 + 1);
      uint64_t input[2] = (uint64_t)&v21 - *((void *)&v17 + 1);
      uint64_t v14 = IOConnectCallMethod(v13, 0x4Cu, input, 3u, 0, 0, 0, 0, __s, &v18);
      if (v14)
      {
        uint64_t v11 = v14;
        goto LABEL_12;
      }
      *(void *)&long long v16 = __s;
      *((void *)&v16 + 1) = &__s[v18];
      if (!ccder_blob_decode_range() || (uint64_t v11 = 0, (sub_10012EF68(&v16, 0, v3) & 1) == 0)) {
LABEL_10:
      }
        uint64_t v11 = 3758097098;
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_kek", ":", 508, "", 0, "", "");
      uint64_t v11 = 3758097084;
    }
  }
LABEL_12:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v11;
}

uint64_t sub_10011E10C(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v17 = __s;
  *((void *)&v17 + 1) = &v21;
  size_t v18 = 4096;
  uint64_t v11 = 3758097090;
  if (v7 && v5)
  {
    mach_port_t v12 = sub_10011D344();
    if (!v12)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_sibling_vek", ":", 543, "", 0, "", "");
      uint64_t v11 = 3758097084;
      goto LABEL_15;
    }
    mach_port_t v13 = v12;
    if (!ccder_blob_encode_body_tl()
      || !sub_10012EEF8(&v17, v9)
      || !sub_10012F018(&v17, v10)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_13;
    }
    input[0] = *((void *)&v17 + 1);
    input[1] = (uint64_t)&v21 - *((void *)&v17 + 1);
    uint64_t v14 = IOConnectCallMethod(v13, 0x63u, input, 2u, 0, 0, 0, 0, __s, &v18);
    if (v14)
    {
      uint64_t v11 = v14;
      goto LABEL_15;
    }
    *(void *)&long long v16 = __s;
    *((void *)&v16 + 1) = &__s[v18];
    if (!ccder_blob_decode_range() || !sub_10012EF68(&v16, 0, v5)) {
      goto LABEL_13;
    }
    if (!v3)
    {
      uint64_t v11 = 0;
      goto LABEL_15;
    }
    uint64_t v11 = 0;
    if ((sub_10012ED54(&v16, 0, v3) & 1) == 0) {
LABEL_13:
    }
      uint64_t v11 = 3758097098;
  }
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v11;
}

uint64_t sub_10011E360(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v19 = __s;
  *((void *)&v19 + 1) = v23;
  size_t v20 = 4096;
  uint64_t v13 = 3758097090;
  if (v9 && v7 && v5 && v3)
  {
    mach_port_t v14 = sub_10011D344();
    if (v14)
    {
      mach_port_t v15 = v14;
      if (!sub_10012EEF8(&v19, v5)
        || !ccder_blob_encode_body_tl()
        || !sub_10012EEF8(&v19, v9)
        || !sub_10012EEF8(&v19, v11)
        || !sub_10012F018(&v19, v12)
        || !ccder_blob_encode_tl())
      {
        goto LABEL_14;
      }
      input[0] = *((void *)&v19 + 1);
      input[1] = (uint64_t)v23 - *((void *)&v19 + 1);
      uint64_t v16 = IOConnectCallMethod(v15, 0x4Du, input, 2u, 0, 0, 0, 0, __s, &v20);
      if (v16)
      {
        uint64_t v13 = v16;
        goto LABEL_16;
      }
      *(void *)&long long v18 = __s;
      *((void *)&v18 + 1) = &__s[v20];
      if (!ccder_blob_decode_range() || (uint64_t v13 = 0, (sub_10012EF68(&v18, 0, v3) & 1) == 0)) {
LABEL_14:
      }
        uint64_t v13 = 3758097098;
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_rewrap_kek", ":", 582, "", 0, "", "");
      uint64_t v13 = 3758097084;
    }
  }
LABEL_16:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

uint64_t sub_10011E5C4(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  long long v19 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  unsigned int v12 = v11;
  uint64_t v13 = v1;
  uint64_t v14 = 3758097098;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v21 = __s;
  *((void *)&v21 + 1) = v25;
  size_t v22 = 4096;
  mach_port_t v15 = sub_10011D344();
  if (!v15)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_set_protection", ":", 616, "", 0, "", "");
    uint64_t v14 = 3758097084;
    goto LABEL_14;
  }
  mach_port_t v16 = v15;
  if (sub_10012EEF8(&v21, v4)
    && sub_10012EEF8(&v21, v6)
    && sub_10012EEF8(&v21, v8)
    && sub_10012F018(&v21, v13)
    && ccder_blob_encode_tl())
  {
    input[0] = v12;
    input[1] = v10;
    uint64_t input[2] = *((void *)&v21 + 1);
    uint64_t input[3] = (uint64_t)v25 - *((void *)&v21 + 1);
    uint64_t v17 = IOConnectCallMethod(v16, 0x54u, input, 4u, 0, 0, 0, 0, __s, &v22);
    if (v17)
    {
      uint64_t v14 = v17;
      goto LABEL_14;
    }
    *(void *)&long long v20 = __s;
    *((void *)&v20 + 1) = &__s[v22];
    if (!v22) {
      goto LABEL_13;
    }
    if (!ccder_blob_decode_range()) {
      goto LABEL_14;
    }
    if (!v19)
    {
LABEL_13:
      uint64_t v14 = 0;
      goto LABEL_14;
    }
    uint64_t v14 = 0;
    if ((sub_10012EF68(&v20, 0, v19) & 1) == 0) {
      uint64_t v14 = 3758097098;
    }
  }
LABEL_14:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v14;
}

uint64_t sub_10011E814(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  unsigned int v13 = v12;
  uint64_t v14 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v21 = __s;
  *((void *)&v21 + 1) = v25;
  size_t v22 = 4096;
  if (!v7)
  {
    uint64_t v18 = 3758097090;
    goto LABEL_15;
  }
  mach_port_t v15 = sub_10011D344();
  if (!v15)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_unwrap_vek_with_acm", ":", 653, "", 0, "", "");
    uint64_t v18 = 3758097084;
    goto LABEL_15;
  }
  mach_port_t v16 = v15;
  if (!sub_10012EEF8(&v21, v5)
    || !sub_10012EEF8(&v21, v7)
    || !sub_10012EEF8(&v21, v9)
    || !sub_10012EEF8(&v21, v11)
    || !sub_10012F018(&v21, v14)
    || !ccder_blob_encode_tl())
  {
    goto LABEL_13;
  }
  input[0] = *((void *)&v21 + 1);
  input[1] = (uint64_t)v25 - *((void *)&v21 + 1);
  uint64_t input[2] = v13;
  uint64_t v17 = IOConnectCallMethod(v16, 0x4Bu, input, 3u, 0, 0, 0, 0, __s, &v22);
  if (v17)
  {
    uint64_t v18 = v17;
    goto LABEL_15;
  }
  *(void *)&long long v20 = __s;
  *((void *)&v20 + 1) = &__s[v22];
  if (!ccder_blob_decode_range()) {
    goto LABEL_13;
  }
  if (!v3)
  {
    uint64_t v18 = 0;
    goto LABEL_15;
  }
  uint64_t v18 = 0;
  if ((sub_10012ED54(&v20, 0, v3) & 1) == 0) {
LABEL_13:
  }
    uint64_t v18 = 3758097098;
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v18;
}

uint64_t sub_10011EA84(uint64_t a1)
{
  return sub_10011E814(a1);
}

void sub_10011EA90(const char *a1, char a2)
{
  if (a1)
  {
    bzero(&v13, 0x878uLL);
    bzero(v12, 0x400uLL);
    if (realpath_DARWIN_EXTSN(a1, v12))
    {
      uint64_t v4 = (char *)malloc(0x818uLL);
      memset_s(v4, 0x818uLL, 0, 0x818uLL);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 0x40000000;
      void v11[2] = sub_10011ED18;
      v11[3] = &unk_1002C20B0;
      v11[4] = v4;
      sub_10011D698(v12, (uint64_t)&stru_1002C2090, (uint64_t)v11);
      if (!statfs(v12, &v13))
      {
        if (a2) {
          printf("Free Blocks:%lld blocks of size:%d\n");
        }
        else {
          printf("%lld,%d\n");
        }
      }
      uint64_t v5 = v4 + 340;
      for (uint64_t i = 1; i != 5; ++i)
      {
        if (a2)
        {
          uint64_t v9 = &v4[296 * i];
          printf("%s:\n\tNum files:\t%u,\n\tNum hardlinks:\t%u,\n\tNum compressed:\t%u,\n\tTotal Size:\t%lld,\n\tMin File Size:\t%lld,\n\tMax File Size:\t%lld,\n", off_100322E00[i], *(_DWORD *)v9, *((_DWORD *)v9 + 2), *((_DWORD *)v9 + 1), *((void *)v9 + 2), *((void *)v9 + 3), *((void *)v9 + 4));
          printf("\tSize Distribution:");
          printf("%i", *((_DWORD *)v9 + 10));
          for (uint64_t j = 0; j != 252; j += 4)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[j]);
          }
        }
        else
        {
          uint64_t v7 = &v4[296 * i];
          printf("%i,%u,%u,%u,%lld,%lld,%lld,", i, *(_DWORD *)v7, *((_DWORD *)v7 + 2), *((_DWORD *)v7 + 1), *((void *)v7 + 2), *((void *)v7 + 3), *((void *)v7 + 4));
          printf("%i", *((_DWORD *)v7 + 10));
          for (uint64_t k = 0; k != 252; k += 4)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[k]);
          }
        }
        putchar(10);
        v5 += 296;
      }
      free(v4);
    }
  }
}

BOOL sub_10011ED10(id a1, _ftsent *a2)
{
  return 1;
}

uint64_t sub_10011ED18(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10011D91C(*(const char **)(a2 + 48));
  if ((result - 7) >= 0xFFFFFFFA)
  {
    uint64_t v5 = *(void *)(a2 + 96);
    int64_t v6 = *(void *)(v5 + 96);
    uint64_t v7 = *(void *)(a1 + 32);
    ++*(_DWORD *)(v7 + 296 * result);
    if (*(unsigned __int16 *)(v5 + 6) >= 2u) {
      ++*(_DWORD *)(v7 + 296 * result + 8);
    }
    if ((*(unsigned char *)(v5 + 116) & 0x20) != 0) {
      ++*(_DWORD *)(v7 + 296 * result + 4);
    }
    uint64_t v8 = v7 + 296 * result;
    int64_t v10 = *(void *)(v8 + 32);
    uint64_t v9 = (int64_t *)(v8 + 32);
    *(v9 - 2) += v6;
    if (v6 > v10) {
      *uint64_t v9 = v6;
    }
    uint64_t v11 = v7 + 296 * result;
    int64_t v14 = *(void *)(v11 + 24);
    unsigned int v12 = (int64_t *)(v11 + 24);
    int64_t v13 = v14;
    if (v14) {
      BOOL v15 = v6 < v13;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      *unsigned int v12 = v6;
    }
    if (v6) {
      unint64_t v16 = v7 + 296 * result + 4 * (63 - __clz(v6));
    }
    else {
      unint64_t v16 = v7 + 296 * result;
    }
    ++*(_DWORD *)(v16 + 40);
  }
  return result;
}

uint64_t sub_10011EE24(unsigned int a1, uint64_t a2)
{
  input[0] = 1;
  input[1] = a1;
  uint64_t input[2] = a2;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  mach_port_t v2 = sub_10011D344();
  if (v2) {
    return IOConnectCallMethod(v2, 0x56u, input, 3u, 0, 0, &output, &outputCnt, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kext_set_options", ":", 820, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10011EF10(unsigned int a1, uint64_t *a2)
{
  uint64_t v2 = 3758097084;
  if (!a2) {
    return 3758097090;
  }
  input[0] = 0;
  input[1] = a1;
  uint64_t input[2] = 0;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  mach_port_t v4 = sub_10011D344();
  if (v4)
  {
    uint64_t v2 = IOConnectCallMethod(v4, 0x56u, input, 3u, 0, 0, &output, &outputCnt, 0, 0);
    if (!v2) {
      *a2 = output;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kext_get_options", ":", 841, "", 0, "", "");
  }
  return v2;
}

uint64_t sub_10011F028()
{
  mach_port_t v0 = sub_10011D344();
  if (v0) {
    return IOConnectCallMethod(v0, 0x10u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_internal_state", ":", 857, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10011F0D0(unsigned int a1)
{
  mach_port_t v2 = sub_10011D344();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x86u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_run_internal_test", ":", 871, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10011F1B8(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  int v11 = v10;
  uint64_t v13 = v12;
  unsigned int v15 = v14;
  int v16 = v1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  mach_port_t v17 = sub_10011D344();
  if (v17)
  {
    input[0] = v16;
    input[1] = v15;
    uint64_t input[2] = v13;
    uint64_t input[3] = v11;
    if (!v15 || (uint64_t v18 = 3758097090, v5) && v3)
    {
      uint64_t v18 = IOConnectCallMethod(v17, 0x36u, input, 4u, v9, v7, 0, 0, __src, &__count);
      if (!v18 && v15)
      {
        long long v19 = calloc(__count, 1uLL);
        *uint64_t v5 = v19;
        if (v19)
        {
          memcpy(v19, __src, __count);
          uint64_t v18 = 0;
          *uint64_t v3 = __count;
        }
        else
        {
          uint64_t v18 = 3758097085;
        }
      }
    }
  }
  else
  {
    uint64_t v18 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_escrow", ":", 890, "", 0, "", "");
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v18;
}

void sub_10011F398(id a1)
{
  if (!dword_10032EAF0) {
    dword_10032EAF0 = sub_10011FEA8("IOService:/IOResources/AppleKeyStore", "AppleKeyStore");
  }
}

uint64_t sub_10011F3D8()
{
  if (qword_10032EB00 != -1) {
    dispatch_once(&qword_10032EB00, &stru_1002C2170);
  }
  dispatch_sync((dispatch_queue_t)qword_10032EB08, &stru_1002C2130);
  uint64_t result = dword_10032EAF4;
  if (!dword_10032EAF4)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStoreTest");
    return dword_10032EAF4;
  }
  return result;
}

void sub_10011F464(id a1)
{
  if (!dword_10032EAF4) {
    dword_10032EAF4 = sub_10011FEA8("IOService:/IOResources/AppleKeyStoreTest", "AppleKeyStoreTest");
  }
}

uint64_t sub_10011F4A4(mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  input[0] = a4;
  input[1] = a3;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  bzero(outputStruct, 0x400uLL);
  size_t v19 = 1024;
  uint64_t v11 = IOConnectCallMethod(a1, 0xFu, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v19);
  if (v11) {
    return v11;
  }
  uint64_t v17 = 3758097084;
  if (outputCnt == 1)
  {
    *a7 = output;
    if (sub_1001317BC(outputStruct, v19, 3u, v12, v13, v14, v15, v16, a5)) {
      return 3758097084;
    }
    else {
      return 0;
    }
  }
  return v17;
}

uint64_t sub_10011F5DC(mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  input[0] = a4;
  input[1] = a3;
  uint64_t output = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint32_t outputCnt = 3;
  bzero(outputStruct, 0x400uLL);
  size_t v26 = 1024;
  uint64_t v17 = IOConnectCallMethod(a1, 0x13u, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v26);
  if (v17) {
    return v17;
  }
  uint64_t v23 = 3758097084;
  if (outputCnt == 3)
  {
    int v24 = v30;
    *a7 = output;
    *a10 = v24;
    *a13 = v31;
    if (sub_1001317BC(outputStruct, v26, 5u, v18, v19, v20, v21, v22, a5)) {
      return 3758097084;
    }
    else {
      return 0;
    }
  }
  return v23;
}

uint64_t sub_10011F738(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, size_t *a8)
{
  uint64_t input = a3;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 2, a4, a5, a6, (uint64_t)a7, (uint64_t)a8, a2);
  uint64_t v11 = IOConnectCallMethod(a1, 0x14u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, a7, a8);
  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t sub_10011F7F8(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, unsigned int a12, void *outputStruct, size_t *a14, _DWORD *a15)
{
  input[0] = a3;
  input[1] = a6;
  uint64_t input[2] = a9;
  uint64_t input[3] = a12;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 4, a4, a5, a6, a7, a8, a2);
  uint64_t v16 = IOConnectCallMethod(a1, 0x15u, input, 4u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], &output, &outputCnt, outputStruct, a14);
  if (v16)
  {
    uint64_t v17 = v16;
  }
  else if (outputCnt == 1)
  {
    uint64_t v17 = 0;
    *a15 = output;
  }
  else
  {
    uint64_t v17 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t sub_10011F90C(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  input[0] = a3;
  input[1] = a6;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  size_t outputStructCnt = 1024;
  sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  uint64_t v15 = IOConnectCallMethod(a1, 0x10u, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &outputStructCnt);
  if (v15)
  {
    uint64_t v21 = v15;
  }
  else if (sub_1001317BC(outputStruct, outputStructCnt, 2u, v16, v17, v18, v19, v20, a7))
  {
    uint64_t v21 = 3758097084;
  }
  else
  {
    uint64_t v21 = 0;
  }
  free(*(void **)&inputStructCnt[1]);
  return v21;
}

uint64_t sub_10011FA48(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  input[0] = a3;
  input[1] = a6;
  uint64_t input[2] = a9;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  size_t v25 = 1024;
  sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a2);
  uint64_t v17 = IOConnectCallMethod(a1, 0x17u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &v25);
  if (v17)
  {
    uint64_t v23 = v17;
  }
  else if (sub_1001317BC(outputStruct, v25, 2u, v18, v19, v20, v21, v22, a10))
  {
    uint64_t v23 = 3758097084;
  }
  else
  {
    uint64_t v23 = 0;
  }
  free(*(void **)&inputStructCnt[1]);
  return v23;
}

uint64_t sub_10011FB94(mach_port_t a1, void *inputStruct, unsigned int a3)
{
  uint64_t input = a3;
  return IOConnectCallMethod(a1, 0x11u, &input, 1u, inputStruct, 0x10uLL, 0, 0, 0, 0);
}

uint64_t sub_10011FC08(mach_port_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t input = a2;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 1, a4, a5, a6, a7, a8, a3);
  uint64_t v9 = IOConnectCallMethod(a1, 0x12u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t sub_10011FCB8(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t input = v1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  mach_port_t v8 = sub_10011D344();
  if (v8)
  {
    if (v7) {
      size_t v9 = 18;
    }
    else {
      size_t v9 = 0;
    }
    uint64_t v10 = IOConnectCallMethod(v8, 0x5Du, &input, 1u, v7, v9, 0, 0, __src, &__count);
    size_t v11 = __count;
    if (v10)
    {
      uint64_t v13 = v10;
    }
    else if (__count - 32769 < 0xFFFFFFFFFFFF8000)
    {
      uint64_t v13 = 3758097090;
    }
    else
    {
      uint64_t v12 = calloc(__count, 1uLL);
      *uint64_t v5 = v12;
      size_t v11 = __count;
      if (v12)
      {
        *uint64_t v3 = __count;
        memcpy(v12, __src, v11);
        uint64_t v13 = 0;
        size_t v11 = __count;
      }
      else
      {
        uint64_t v13 = 3758097085;
      }
    }
  }
  else
  {
    uint64_t v13 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_internal_info_for_key", ":", 1246, "", 0, "", "");
    size_t v11 = 0x8000;
  }
  memset_s(__src, v11, 0, v11);
  return v13;
}

void sub_10011FE7C(id a1)
{
  qword_10032EB08 = (uint64_t)dispatch_queue_create("aks-client-queue", 0);
}

uint64_t sub_10011FEA8(char *path, const char *a2)
{
  kern_return_t v5;
  CFDictionaryRef v6;
  io_service_t MatchingService;
  io_object_t v8;
  uint64_t result;
  kern_return_t v10;
  io_connect_t connect;

  connect = 0;
  io_service_t v3 = IORegistryEntryFromPath(kIOMasterPortDefault, path);
  if (!v3 || (io_object_t v4 = v3, v5 = IOServiceOpen(v3, mach_task_self_, 0, &connect), IOObjectRelease(v4), v5))
  {
    int v6 = IOServiceMatching(a2);
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v6);
    if (MatchingService)
    {
      mach_port_t v8 = MatchingService;
      IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
      IOObjectRelease(v8);
    }
  }
  uint64_t result = connect;
  if (connect)
  {
    uint64_t v10 = IOConnectCallMethod(connect, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    uint64_t result = connect;
    if (v10)
    {
      IOServiceClose(connect);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10011FFA0()
{
  ccder_sizeof_implicit_uint64();
  ccder_sizeof_raw_octet_string();
  ccder_sizeof_raw_octet_string();
  ccder_sizeof_implicit_uint64();

  return ccder_sizeof();
}

uint64_t sub_100120024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a2 + a3;
  if (!ccder_blob_encode_implicit_uint64()
    || !ccder_blob_encode_implicit_raw_octet_string()
    || !ccder_blob_encode_implicit_raw_octet_string()
    || !ccder_blob_encode_implicit_raw_octet_string()
    || !ccder_blob_encode_implicit_uint64())
  {
    return 4294967273;
  }
  int v3 = ccder_blob_encode_tl();
  uint64_t result = 4294967273;
  if (v3)
  {
    if (a2 == v6) {
      return 0;
    }
    else {
      return 4294967273;
    }
  }
  return result;
}

uint64_t sub_100120108(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)&long long v6 = a1;
  *((void *)&v6 + 1) = a1 + a2;
  if (!ccder_blob_decode_range()
    || !sub_100130404(&v6, 0x8000000000000000, a3)
    || !sub_10012DB64(&v6, 0x8000000000000001, (uint64_t)(a3 + 1), 16)
    || !sub_10012DB64(&v6, 0x8000000000000002, (uint64_t)(a3 + 3), 40)
    || !sub_10012DB64(&v6, 0x8000000000000003, (uint64_t)(a3 + 8), 16))
  {
    return 4294967277;
  }
  int v4 = sub_100130404(&v6, 0x8000000000000004, a3 + 10);
  uint64_t result = 4294967277;
  if (v4)
  {
    if ((void)v6 == *((void *)&v6 + 1)) {
      return 0;
    }
    else {
      return 4294967277;
    }
  }
  return result;
}

uint64_t sub_1001201E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(__s, 0, sizeof(__s));
  int v9 = 40;
  *(void *)a4 = 0;
  uuid_copy((unsigned __int8 *)(a4 + 8), (const unsigned __int8 *)(a1 + 32));
  *(void *)(a4 + 80) = 1;
  sub_1001307B8(a4 + 64, 0x10u);
  ccsha256_di();
  if (j__ccpbkdf2_hmac())
  {
    uint64_t v7 = 4294967286;
  }
  else
  {
    uint64_t v6 = sub_10011CC18((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, (uint64_t *)a1, 0x20u, (void *)(a4 + 24), &v9);
    if (v6)
    {
      uint64_t v7 = v6;
    }
    else if (v9 == 40)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 4294967286;
    }
  }
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t sub_100120320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(__s, 0, sizeof(__s));
  int v9 = 32;
  if (*(void *)a1)
  {
    uint64_t v7 = 4294967284;
  }
  else
  {
    ccsha256_di();
    if (j__ccpbkdf2_hmac()) {
      goto LABEL_9;
    }
    uint64_t v6 = sub_10011CFEC((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, (void *)(a1 + 24), 0x28u, (void *)a4, &v9);
    if (v6)
    {
      uint64_t v7 = v6;
      goto LABEL_8;
    }
    if (v9 != 32)
    {
LABEL_9:
      uint64_t v7 = 4294967286;
    }
    else
    {
      cccurve25519_make_pub();
      if (uuid_compare((const unsigned __int8 *)(a1 + 8), (const unsigned __int8 *)(a4 + 32))) {
        uint64_t v7 = 4294967272;
      }
      else {
        uint64_t v7 = 0;
      }
    }
  }
LABEL_8:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t sub_10012045C(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  int v5 = v4;
  uint64_t v7 = v6;
  unsigned int v9 = v8;
  unsigned int v11 = v10;
  int v12 = v1;
  uint64_t v13 = 3758097098;
  bzero(v19, 0x1000uLL);
  *(void *)&long long v17 = v19;
  *((void *)&v17 + 1) = &v20;
  mach_port_t v14 = sub_10011D344();
  if (v14)
  {
    mach_port_t v15 = v14;
    if (sub_10012EEF8(&v17, v3) && ccder_blob_encode_tl())
    {
      input[0] = v12;
      input[1] = v11;
      uint64_t input[2] = v7;
      uint64_t input[3] = v5;
      uint64_t input[4] = v9;
      input[5] = *((void *)&v17 + 1);
      input[6] = (uint64_t)&v20 - *((void *)&v17 + 1);
      return IOConnectCallMethod(v15, 0x21u, input, 7u, 0, 0, 0, 0, 0, 0);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_create_for_bag_and_kek", ":", 50, "", 0, "", "");
    return 3758097084;
  }
  return v13;
}

uint64_t sub_10012060C(uint64_t a1)
{
  return sub_10012045C(a1);
}

uint64_t sub_100120640(int a1)
{
  return sub_10012064C(a1, 0, 0);
}

uint64_t sub_10012064C(int a1, unsigned int a2, BOOL *a3)
{
  mach_port_t v6 = sub_10011D344();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t output = 0;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(v6, 0x22u, input, 2u, 0, 0, &output, &outputCnt, 0, 0);
    if (!result)
    {
      uint64_t result = 0;
      if (a3) {
        *a3 = output != 0;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_aks_stash_load", ":", 77, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_100120770(int a1, unsigned char *a2)
{
  BOOL v4 = 0;
  if (!a2) {
    return sub_10012064C(a1, 1u, &v4);
  }
  *a2 = 0;
  uint64_t result = sub_10012064C(a1, 1u, &v4);
  if (!result) {
    *a2 = v4;
  }
  return result;
}

uint64_t sub_1001207CC()
{
  mach_port_t v0 = sub_10011D344();
  if (v0) {
    return IOConnectCallMethod(v0, 0x25u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_destroy", ":", 125, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100120874(int a1)
{
  mach_port_t v2 = sub_10011D344();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x24u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_commit", ":", 138, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10012095C(int a1)
{
  mach_port_t v2 = sub_10011D344();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x33u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_enable", ":", 154, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_100120A44(int a1)
{
  mach_port_t v2 = sub_10011D344();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x35u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_persist", ":", 170, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_100120B2C(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)a1 != 1634431856) {
    return 0xFFFFFFFFLL;
  }
  free(a1[1]);
  free(a1);
  return 0;
}

uint64_t sub_100120B8C(int a1, uint64_t a2, unint64_t a3, int a4, void ***a5)
{
  mach_port_t v14 = 0;
  if (!a2 && a3) {
    return 0xFFFFFFFFLL;
  }
  if (sub_100120C94(a4, &v14) || (unsigned int v9 = calloc(0x20uLL, 1uLL)) == 0)
  {
    uint64_t v12 = 0xFFFFFFFFLL;
  }
  else
  {
    unsigned int v10 = v9;
    int v11 = sub_100120D7C(v14, a2, a3, (uint64_t)v9);
    uint64_t v12 = 0xFFFFFFFFLL;
    if (a3 <= 0x7FFFFFFE && !v11 && !sub_100120E24(a1, a2, a3, (uint64_t)v10, (uint64_t)v14))
    {
      uint64_t v12 = 0;
      if (a5)
      {
        *a5 = v14;
        mach_port_t v14 = 0;
      }
    }
    memset_s(v10, 0x20uLL, 0, 0x20uLL);
    free(v10);
  }
  if (v14) {
    sub_100120B2C(v14);
  }
  return v12;
}

uint64_t sub_100120C94(int a1, void *a2)
{
  if ((a1 - 1) > 2 || a2 == 0) {
    return 0xFFFFFFFFLL;
  }
  mach_port_t v6 = calloc(0x20uLL, 1uLL);
  if (!v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = v6;
  *((void *)v6 + 2) = 20;
  unsigned int v8 = calloc(0x14uLL, 1uLL);
  *((void *)v7 + 1) = v8;
  if (!v8)
  {
LABEL_19:
    free(v7);
    return 0xFFFFFFFFLL;
  }
  *uint64_t v7 = 1634431856;
  v7[6] = a1;
  uint64_t result = CCRandomCopyBytes();
  if (result)
  {
    unsigned int v10 = (void *)*((void *)v7 + 1);
    if (v10) {
      free(v10);
    }
    goto LABEL_19;
  }
  if (a1 == 3) {
    int v9 = 2000;
  }
  else {
    int v9 = 10000000;
  }
  if (a1 == 2) {
    int v9 = 1000;
  }
  v7[1] = v9;
  *a2 = v7;
  return result;
}

uint64_t sub_100120D7C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  if (*a1 != 1634431856 || !a2 && a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (a4 && (a1[6] - 4) >= 0xFFFFFFFD)
  {
    ccsha256_di();
    if (ccpbkdf2_hmac()) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100120E24(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  rsize_t __n = 0;
  __s = 0;
  uint64_t v10 = 3758097090;
  mach_port_t v14 = 0;
  if ((a2 || !a3) && a4 && a5)
  {
    mach_port_t v11 = sub_10011D344();
    if (v11)
    {
      mach_port_t v12 = v11;
      if (!sub_10012E340(&v14, (uint64_t)off_1003231C8, *(void *)(a5 + 8))
        && !sub_10012E340(&v14, (uint64_t)off_1003231C0, a4)
        && !sub_10012E708(&v14, (uint64_t)off_1003231D0, *(unsigned int *)(a5 + 4))
        && !sub_10012E708(&v14, (uint64_t)off_1003231D8, *(unsigned int *)(a5 + 24))
        && (a3 < 1 || !sub_10012E340(&v14, (uint64_t)off_100322E90, a2))
        && !sub_10012EC38(&v14)
        && !sub_10012DFF0(&v14, &__s, &__n))
      {
        input[0] = a1;
        input[1] = (uint64_t)__s;
        uint64_t input[2] = __n;
        uint64_t v10 = IOConnectCallMethod(v12, 0x1Eu, input, 3u, 0, 0, 0, 0, 0, 0);
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_set_prederived_configuration", ":", 218, "", 0, "", "");
      uint64_t v10 = 3758097084;
    }
  }
  sub_10012D8E4(&v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v10;
}

uint64_t sub_100121050(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  int v4 = v1;
  uint64_t result = (uint64_t)calloc(0x20uLL, 1uLL);
  if (!result) {
    return result;
  }
  uint64_t v6 = result;
  *(_DWORD *)uint64_t result = 1634431856;
  mach_port_t v7 = sub_10011D344();
  if (!v7)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_get_prederived_configuration", ":", 384, "", 0, "", "");
LABEL_16:
    sub_100120B2C((void **)v6);
    return 0;
  }
  mach_port_t v8 = v7;
  bzero(outputStruct, 0x8000uLL);
  v14[0] = 0x8000;
  uint64_t input = v4;
  if (IOConnectCallMethod(v8, 0x1Fu, &input, 1u, 0, 0, 0, 0, outputStruct, v14) || v14[0] > 0x8000) {
    goto LABEL_16;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  long long v16 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  long long v15 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  v14[1] = (size_t)off_1003231C8;
  long long v17 = (unint64_t)off_1003231D0;
  uint64_t v20 = off_1003231D8;
  sub_10012D39C();
  uint64_t v10 = ccder_decode_tl();
  if (v10)
  {
    mach_port_t v11 = (const void *)v10;
    mach_port_t v12 = calloc(*(void *)(v6 + 16), 1uLL);
    *(void *)(v6 + 8) = v12;
    if (!v12)
    {
      int v13 = 0;
      if (!Mutable) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    memcpy(v12, v11, *(void *)(v6 + 16));
    *(_DWORD *)(v6 + 4) = sub_10012D5D4();
    *(_DWORD *)(v6 + 24) = sub_10012D5D4();
  }
  int v13 = 1;
  if (Mutable) {
LABEL_10:
  }
    CFRelease(Mutable);
LABEL_11:
  if (!v13 || !*(void *)(v6 + 16)) {
    goto LABEL_16;
  }
  *uint64_t v3 = v6;
  return 1;
}

uint64_t sub_100121320(int a1, uint64_t a2, int a3, _DWORD *a4)
{
  memset(v9, 0, sizeof(v9));
  if (a3) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  BOOL v5 = v4 || a4 == 0;
  if (v5 || *a4 != 1634431856 || sub_100120D7C(a4, a2, a3, (uint64_t)v9)) {
    uint64_t v7 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v7 = sub_1001213EC(a1, (uint64_t)v9, 32);
  }
  memset_s(v9, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t sub_1001213EC(int a1, uint64_t a2, int a3)
{
  mach_port_t v6 = sub_10011D344();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    return IOConnectCallMethod(v6, 0xCu, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_bag", ":", 807, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1001214EC(int a1, uint64_t a2, int a3, uint64_t a4, int a5, void ***a6)
{
  memset(__s, 0, sizeof(__s));
  memset(v17, 0, sizeof(v17));
  long long v16 = 0;
  if (!a6) {
    goto LABEL_17;
  }
  uint64_t v7 = *a6;
  if (!*a6 || *(_DWORD *)v7 != 1634431856 || !a2 && a3) {
    goto LABEL_17;
  }
  if (!a4 && a5 || sub_100120D7C(*a6, a2, a3, (uint64_t)__s)) {
    goto LABEL_17;
  }
  int v11 = sub_100120C94(*((_DWORD *)v7 + 6), &v16);
  mach_port_t v12 = v16;
  if (v11 || (v13 = sub_100120D7C(v16, a4, a5, (uint64_t)v17), mach_port_t v12 = v16, v13))
  {
LABEL_15:
    if (v12) {
      sub_100120B2C(v12);
    }
LABEL_17:
    uint64_t v14 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  if (sub_100120E24(a1, (uint64_t)__s, 32, (uint64_t)v17, (uint64_t)v16))
  {
    mach_port_t v12 = v16;
    goto LABEL_15;
  }
  sub_100120B2C(v7);
  uint64_t v14 = 0;
  *a6 = v16;
LABEL_13:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  memset_s(v17, 0x20uLL, 0, 0x20uLL);
  return v14;
}

uint64_t sub_100121650(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  return sub_100121668(a1, a2, 0, 0, a3, -1, a4);
}

uint64_t sub_100121668(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, int a6, _DWORD *a7)
{
  uint64_t v14 = 3758097084;
  mach_port_t v15 = sub_10011D344();
  if (v15)
  {
    if (a7)
    {
      input[0] = a5;
      input[1] = a6;
      uint64_t input[2] = a1;
      uint64_t input[3] = a2;
      uint64_t input[4] = a3;
      input[5] = a4;
      uint64_t output = 0;
      uint32_t outputCnt = 1;
      uint64_t v14 = IOConnectCallMethod(v15, 2u, input, 6u, 0, 0, &output, &outputCnt, 0, 0);
      if (!v14) {
        *a7 = output;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_create_bag", ":", 187, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_1001217C0(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return sub_100121668(a1, a2, 0, 0, 2u, a3, a4);
}

uint64_t sub_1001217D8(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return sub_100121668(a3, a4, a1, a2, 2u, a5, a6);
}

uint64_t sub_100121800(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return sub_100121668(a1, a2, 0, 0, 0x8000002u, a3, a4);
}

uint64_t sub_10012181C(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return sub_100121668(a3, a4, a1, a2, 0x8000002u, a5, a6);
}

uint64_t sub_100121848()
{
  mach_port_t v0 = sub_10011D344();
  if (v0) {
    return IOConnectCallMethod(v0, 0x42u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_invalidate_sync_bags", ":", 544, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1001218F0(const void *a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10 = 3758097084;
  mach_port_t v11 = sub_10011D344();
  if (v11)
  {
    if (a1)
    {
      input[0] = a5;
      input[1] = a3;
      uint64_t input[2] = a4;
      return IOConnectCallMethod(v11, 0x43u, input, 3u, a1, a2, 0, 0, 0, 0);
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_with_sync_bag", ":", 557, "", 0, "", "");
  }
  return v10;
}

uint64_t sub_100121A14(const void *a1, int a2, _DWORD *a3)
{
  uint64_t v6 = 3758097084;
  mach_port_t v7 = sub_10011D344();
  if (v7)
  {
    uint64_t v6 = 3758097090;
    if (a1)
    {
      if (a3)
      {
        uint64_t output = 0;
        uint32_t outputCnt = 1;
        uint64_t v6 = IOConnectCallMethod(v7, 6u, 0, 0, a1, a2, &output, &outputCnt, 0, 0);
        if (!v6) {
          *a3 = output;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_load_bag", ":", 574, "", 0, "", "");
  }
  return v6;
}

uint64_t sub_100121B30(const void *a1, int a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10011D344();
  if (v5)
  {
    if (a1) {
      return IOConnectCallMethod(v5, 0x57u, 0, 0, a1, a2, 0, 0, 0, 0);
    }
    return 3758097090;
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_invalidate_bag", ":", 596, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_100121C00(int a1)
{
  mach_port_t v2 = sub_10011D344();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 4u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unload_bag", ":", 612, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_100121CE8(int a1)
{
  mach_port_t v2 = sub_10011D344();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x37u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unload_session_bags", ":", 629, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_100121DD0(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  mach_port_t v5 = v4;
  int v6 = v1;
  mach_port_t v7 = sub_10011D344();
  if (v7)
  {
    mach_port_t v8 = v7;
    uint64_t result = 3758097090;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000;
        uint64_t input = v6;
        uint64_t result = IOConnectCallMethod(v8, 3u, &input, 1u, 0, 0, 0, 0, __src, &__count);
        if (!result)
        {
          uint64_t v10 = calloc(__count, 1uLL);
          *mach_port_t v5 = v10;
          if (v10)
          {
            memcpy(v10, __src, __count);
            uint64_t result = 0;
            *uint64_t v3 = __count;
          }
          else
          {
            return 3758097085;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_save_bag", ":", 646, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_100121F60(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, _DWORD *a13)
{
  mach_port_t v21 = sub_10011D344();
  if (v21)
  {
    input[0] = a1;
    input[1] = a11;
    uint64_t input[2] = a10;
    uint64_t input[3] = a2;
    uint64_t input[4] = a3;
    input[5] = a4;
    uint64_t input[6] = a5;
    uint64_t input[7] = a6;
    input[8] = a7;
    input[9] = a8;
    input[10] = a9;
    input[11] = a12;
    uint64_t output = 0;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(v21, 0xFu, input, 0xCu, 0, 0, &output, &outputCnt, 0, 0);
    if (a13)
    {
      if (!result) {
        *a13 = output;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_change_secret_opts", ":", 678, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1001220D4(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, _DWORD *a12)
{
  return sub_100121F60(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, a12);
}

uint64_t sub_1001220F8(int a1, uint64_t a2, int a3, uint64_t a4, int a5, unsigned int a6, _DWORD *a7)
{
  return sub_100121F60(a1, a2, a3, a4, a5, 0, 0, 0, 0, 0xFFu, a6, 0, a7);
}

uint64_t sub_100122138(int a1, _OWORD *a2)
{
  uint64_t v4 = 3758097084;
  size_t v7 = 16;
  mach_port_t v5 = sub_10011D344();
  if (v5)
  {
    if (a2)
    {
      long long outputStruct = 0uLL;
      uint64_t input = a1;
      uint64_t v4 = IOConnectCallMethod(v5, 0x17u, &input, 1u, 0, 0, 0, 0, &outputStruct, &v7);
      if (!v4) {
        *a2 = outputStruct;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_bag_uuid", ":", 729, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_100122260(int a1, void *a2, size_t *a3)
{
  return sub_100122274(a1, (uint64_t)&unk_10028AB80, a2, a3);
}

uint64_t sub_100122274(int a1, uint64_t a2, void *a3, size_t *a4)
{
  __int16 v23 = 0;
  memset(__src, 0, sizeof(__src));
  size_t __count = 34;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v8 = sub_10011D344();
  if (v8)
  {
    uint64_t v14 = 3758097090;
    if (a3 && a4)
    {
      mach_port_t v15 = v8;
      uint64_t input = a1;
      sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 1, v9, v10, v11, v12, v13, a2);
      if (*(void *)&inputStructCnt[1])
      {
        uint64_t v16 = IOConnectCallMethod(v15, 0x44u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
        if (v16)
        {
          uint64_t v14 = v16;
        }
        else
        {
          long long v17 = calloc(__count, 1uLL);
          *a3 = v17;
          uint64_t v14 = 3758097085;
          if (v17)
          {
            memcpy(v17, __src, __count);
            uint64_t v14 = 0;
            *a4 = __count;
          }
        }
      }
      else
      {
        uint64_t v14 = 3758097085;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_copy_volume_cookie_persona", ":", 760, "", 0, "", "");
    uint64_t v14 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v14;
}

uint64_t sub_100122424(int a1)
{
  mach_port_t v2 = sub_10011D344();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0xDu, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_bag", ":", 790, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10012250C(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10011D344();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 7u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!v4) {
        *a2 = output;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_lock_state", ":", 824, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_100122628(const void *a1, int a2, int a3, int a4, void *a5, int *a6, _DWORD *a7)
{
  uint64_t v14 = 3758097084;
  mach_port_t v15 = sub_10011D344();
  if (v15)
  {
    uint64_t v14 = 3758097090;
    if (a1 && a5 && a6)
    {
      input[0] = a4;
      input[1] = a3;
      uint64_t output = 0;
      uint32_t outputCnt = 1;
      size_t v18 = *a6;
      uint64_t v16 = IOConnectCallMethod(v15, 0xAu, input, 2u, a1, a2, &output, &outputCnt, a5, &v18);
      if (v16)
      {
        return v16;
      }
      else
      {
        *a6 = v18;
        uint64_t v14 = 0;
        if (a7) {
          *a7 = output;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_wrap_key", ":", 848, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_100122794(const void *a1, int a2, int a3, int a4, void *a5, int *a6)
{
  uint64_t v12 = 3758097084;
  mach_port_t v13 = sub_10011D344();
  if (v13)
  {
    uint64_t v12 = 3758097090;
    if (a1)
    {
      if (a5)
      {
        if (a6)
        {
          input[0] = a4;
          input[1] = a3;
          size_t v15 = *a6;
          uint64_t v12 = IOConnectCallMethod(v13, 0xBu, input, 2u, a1, a2, 0, 0, a5, &v15);
          if (!v12) {
            *a6 = v15;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unwrap_key", ":", 877, "", 0, "", "");
  }
  return v12;
}

uint64_t sub_1001228DC(const void *a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v14 = 3758097084;
  mach_port_t v15 = sub_10011D344();
  if (v15)
  {
    uint64_t v14 = 3758097090;
    if (a1 && a7)
    {
      input[0] = a3;
      input[1] = a4;
      uint64_t input[2] = a5;
      uint64_t input[3] = a6;
      size_t v17 = 108;
      return IOConnectCallMethod(v15, 0x18u, input, 4u, a1, a2, 0, 0, a7, &v17);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_rewrap_key_for_backup", ":", 901, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_100122A20(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10011D344();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 0xEu, &input, a1 != 0, 0, 0, &output, &outputCnt, 0, 0);
      if (!v4) {
        *a2 = output;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_system", ":", 922, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_100122B40(int a1, int a2, uint64_t a3, int a4)
{
  mach_port_t v8 = sub_10011D344();
  if (v8)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a4;
    return IOConnectCallMethod(v8, 5u, input, 4u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_system_with_passcode", ":", 950, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_100122C48(int a1, int a2)
{
  return sub_100122B40(a1, a2, 0, 0);
}

uint64_t sub_100122C54(int a1, uint64_t a2, unsigned int a3)
{
  return sub_100122C74(a1, a2, a3);
}

uint64_t sub_100122C68(int a1, uint64_t a2, unsigned int a3)
{
  return sub_100122C74(a1, a2, a3);
}

uint64_t sub_100122C74(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v7 = sub_10011D344();
  if (v7)
  {
    mach_port_t v13 = v7;
    input[0] = a1;
    input[1] = a3;
    sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 3, v8, v9, v10, v11, v12, a2);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v6 = IOConnectCallMethod(v13, 0x41u, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
      uint64_t v14 = *(void **)&inputStructCnt[1];
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v6 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_keybag_for_volume_with_cookie_persona", ":", 987, "", 0, "", "");
    uint64_t v14 = 0;
  }
  free(v14);
  return v6;
}

uint64_t sub_100122DE0(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  mach_port_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v11 = 3758097085;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  mach_port_t v12 = sub_10011D344();
  if (v12)
  {
    mach_port_t v18 = v12;
    input[0] = v9;
    input[1] = v7;
    sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 1, v13, v14, v15, v16, v17, v10);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v19 = IOConnectCallMethod(v18, 0x6Eu, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
      if (v19)
      {
        uint64_t v11 = v19;
      }
      else
      {
        uint64_t v20 = calloc(__count, 1uLL);
        *mach_port_t v5 = v20;
        if (v20)
        {
          memcpy(v20, __src, __count);
          uint64_t v11 = 0;
          *uint64_t v3 = __count;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_enable_volume", ":", 1014, "", 0, "", "");
    uint64_t v11 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t sub_100122F98(uint64_t a1)
{
  uint64_t v2 = 3758097084;
  uint64_t v13 = 0;
  int v12 = 0;
  mach_port_t v3 = sub_10011D344();
  if (v3)
  {
    mach_port_t v9 = v3;
    sub_1001316DC(&v13, (unsigned int *)&v12, 1, v4, v5, v6, v7, v8, a1);
    if (v13)
    {
      uint64_t v2 = IOConnectCallMethod(v9, 0x6Fu, 0, 0, v13, v12, 0, 0, 0, 0);
      uint64_t v10 = v13;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v2 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_disable_volume", ":", 1044, "", 0, "", "");
    uint64_t v10 = 0;
  }
  free(v10);
  return v2;
}

uint64_t sub_1001230A0(uint64_t a1, void *a2)
{
  uint64_t v4 = 3758097084;
  uint64_t v16 = 0;
  int v15 = 0;
  size_t v14 = 16;
  mach_port_t v5 = sub_10011D344();
  if (v5)
  {
    mach_port_t v11 = v5;
    sub_1001316DC(&v16, (unsigned int *)&v15, 1, v6, v7, v8, v9, v10, a1);
    if (v16)
    {
      uint64_t v4 = IOConnectCallMethod(v11, 0x70u, 0, 0, v16, v15, 0, 0, a2, &v14);
      int v12 = v16;
    }
    else
    {
      int v12 = 0;
      uint64_t v4 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_copy_current_bag_uuid", ":", 1066, "", 0, "", "");
    int v12 = 0;
  }
  free(v12);
  return v4;
}

uint64_t sub_1001231B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v13 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v14 = sub_10011D344();
  if (v14)
  {
    mach_port_t v20 = v14;
    mach_port_t v21 = 0;
    uint64_t v13 = 3758097090;
    if (a2 && a7)
    {
      input[0] = a4;
      input[1] = a5;
      uint64_t input[2] = a6;
      sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 2, v15, v16, v17, v18, v19, a1);
      size_t v23 = 108;
      uint64_t v13 = IOConnectCallMethod(v20, 0x71u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, a7, &v23);
      mach_port_t v21 = *(void **)&inputStructCnt[1];
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_rewrap_key", ":", 1087, "", 0, "", "");
    mach_port_t v21 = 0;
  }
  free(v21);
  return v13;
}

uint64_t sub_10012333C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, void *outputStruct)
{
  uint64_t v15 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v16 = sub_10011D344();
  if (v16)
  {
    mach_port_t v22 = v16;
    size_t v23 = 0;
    uint64_t v15 = 3758097090;
    if (a2 && a4 && outputStruct)
    {
      input[0] = a6;
      input[1] = a7;
      uint64_t input[2] = a8;
      sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 3, v17, v18, v19, v20, v21, a1);
      size_t v25 = 108;
      uint64_t v15 = IOConnectCallMethod(v22, 0x71u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &v25);
      size_t v23 = *(void **)&inputStructCnt[1];
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_rewrap_ek", ":", 1113, "", 0, "", "");
    size_t v23 = 0;
  }
  free(v23);
  return v15;
}

uint64_t sub_1001234D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long __s = 0u;
  long long v16 = 0u;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  uint64_t v8 = sub_100120108(a1, a2, v13);
  if (v8)
  {
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v9 = sub_100120320((uint64_t)v13, a3, a4, (uint64_t)&__s);
    if (!v9)
    {
      long long v10 = v16;
      *a5 = __s;
      a5[1] = v10;
      long long v11 = v18;
      a5[2] = v17;
      a5[3] = v11;
    }
  }
  memset_s(v13, 0x58uLL, 0, 0x58uLL);
  memset_s(&__s, 0x40uLL, 0, 0x40uLL);
  return sub_10012C650(v9);
}

uint64_t sub_1001235C4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  uint64_t v4 = sub_100120108(a1, a2, v6);
  if (!v4) {
    uuid_copy(a3, (const unsigned __int8 *)v6 + 8);
  }
  memset_s(v6, 0x58uLL, 0, 0x58uLL);
  return sub_10012C650(v4);
}

uint64_t sub_100123670(long long *a1, void *a2, unsigned int a3, void *a4, void *a5)
{
  long long v6 = a1[1];
  long long v12 = *a1;
  long long v13 = v6;
  long long v7 = a1[3];
  long long v14 = a1[2];
  long long v15 = v7;
  unsigned int v10 = *a5;
  int __s = 1;
  uint64_t v8 = sub_10012CC90((uint64_t)&__s, 0, 0, a2, a3, a4, &v10);
  *a5 = v10;
  memset_s(&__s, 0x44uLL, 0, 0x44uLL);
  return sub_10012C650(v8);
}

uint64_t sub_100123730(uint64_t a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10 = 3758097084;
  mach_port_t v11 = sub_10011D344();
  if (v11)
  {
    uint64_t v10 = 3758097090;
    if (a2 && a4)
    {
      input[0] = a1;
      input[1] = 64;
      return IOConnectCallMethod(v11, 0x82u, input, 2u, a2, a3, 0, 0, a4, a5);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_unwrap_key", ":", 1193, "", 0, "", "");
  }
  return v10;
}

uint64_t sub_10012384C(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10 = 3758097084;
  mach_port_t v11 = sub_10011D344();
  if (v11)
  {
    uint64_t v10 = 3758097090;
    if (a2 && a4)
    {
      uint64_t input = a1;
      return IOConnectCallMethod(v11, 0x81u, &input, 1u, a2, a3, 0, 0, a4, a5);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_wrap_key", ":", 1212, "", 0, "", "");
  }
  return v10;
}

uint64_t sub_100123968(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10011D344();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 0x83u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!v4) {
        *a2 = output;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_get_handle", ":", 1231, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_100123A84(int a1, unsigned __int8 *a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10011D344();
  if (v5)
  {
    if (a2)
    {
      uint64_t v10 = 0;
      uint64_t input = a1;
      size_t v8 = 16;
      *(void *)src = 0;
      uint64_t v6 = IOConnectCallMethod(v5, 0x84u, &input, 1u, 0, 0, 0, 0, src, &v8);
      if (v6)
      {
        return v6;
      }
      else if (v8 == 16)
      {
        uuid_copy(a2, src);
        return 0;
      }
      else
      {
        return 3758604298;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_get_uuid", ":", 1253, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_100123BCC(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _OWORD *a6)
{
  if (a5)
  {
    int v7 = a4;
    int v9 = a2;
    *a5 = -1;
    int v11 = sub_1001234D4((uint64_t)a1, a2, a3, a4, a6);
    if (!v11)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Unwrapped DER backup bag%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1302, "", 0, "", "");
      uint64_t v15 = 0;
      goto LABEL_9;
    }
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unwrap backup bag as DER: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1290, "", 0, "", v11, "");
    uint64_t v12 = sub_100121A14(a1, v9, a5);
    if (v12)
    {
      uint64_t v15 = v12;
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to load in-kernel backup bag: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1292, "", 0, "", v12, "");
    }
    else
    {
      int v13 = sub_100121050(*a5);
      int v14 = *a5;
      if (v13)
      {
        uint64_t v15 = sub_100121320(v14, a3, v7, 0);
        if (!v15) {
          goto LABEL_9;
        }
        fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag with prederived secret: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":");
      }
      else
      {
        uint64_t v15 = sub_1001213EC(v14, a3, v7);
        if (!v15) {
          goto LABEL_9;
        }
        fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":");
      }
    }
  }
  else
  {
    uint64_t v15 = 3758097090;
  }
  if (*a5 != -1)
  {
    sub_100121C00(*a5);
    *a5 = -1;
  }
LABEL_9:
  sub_100120B2C(0);
  return v15;
}

uint64_t sub_100123DFC(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 3758097084;
  uint64_t v19 = 0;
  int v18 = 0;
  mach_port_t v9 = sub_10011D344();
  if (v9)
  {
    mach_port_t v15 = v9;
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    sub_1001316DC(&v19, (unsigned int *)&v18, 1, v10, v11, v12, v13, v14, a4);
    if (v19)
    {
      uint64_t v8 = IOConnectCallMethod(v15, 0x60u, input, 3u, v19, v18, 0, 0, 0, 0);
      long long v16 = v19;
    }
    else
    {
      long long v16 = 0;
      uint64_t v8 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_create", ":", 1324, "", 0, "", "");
    long long v16 = 0;
  }
  free(v16);
  return v8;
}

uint64_t sub_100123F50(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v11 = sub_10011D344();
  if (v11)
  {
    mach_port_t v17 = v11;
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a5;
    sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 1, v12, v13, v14, v15, v16, a4);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v10 = IOConnectCallMethod(v17, 0x75u, input, 4u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
      int v18 = *(void **)&inputStructCnt[1];
    }
    else
    {
      int v18 = 0;
      uint64_t v10 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_create_with_flags", ":", 1346, "", 0, "", "");
    int v18 = 0;
  }
  free(v18);
  return v10;
}

uint64_t sub_1001240B4(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  mach_port_t v5 = v4;
  int v6 = v1;
  bzero(__src, 0x2000uLL);
  size_t __count = 0x2000;
  uint64_t input = v6;
  uint64_t v7 = 3758097090;
  if (v5 && v3)
  {
    mach_port_t v8 = sub_10011D344();
    if (v8)
    {
      uint64_t v9 = IOConnectCallMethod(v8, 0x61u, &input, 1u, 0, 0, 0, 0, __src, &__count);
      if (v9)
      {
        uint64_t v7 = v9;
      }
      else
      {
        if (__count)
        {
          uint64_t v10 = calloc(__count, 1uLL);
          *mach_port_t v5 = v10;
          if (!v10)
          {
            uint64_t v7 = 3758097085;
            goto LABEL_10;
          }
          memcpy(v10, __src, __count);
          size_t v11 = __count;
        }
        else
        {
          size_t v11 = 0;
          *mach_port_t v5 = 0;
        }
        uint64_t v7 = 0;
        *mach_port_t v3 = v11;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_list", ":", 1372, "", 0, "", "");
      uint64_t v7 = 3758097084;
    }
  }
LABEL_10:
  memset_s(__src, 0x2000uLL, 0, 0x2000uLL);
  return v7;
}

uint64_t sub_100124264(int a1, uint64_t a2)
{
  uint64_t v4 = 3758097084;
  uint64_t v15 = 0;
  int v14 = 0;
  mach_port_t v5 = sub_10011D344();
  if (v5)
  {
    mach_port_t v11 = v5;
    uint64_t input = a1;
    sub_1001316DC(&v15, (unsigned int *)&v14, 1, v6, v7, v8, v9, v10, a2);
    if (v15)
    {
      uint64_t v4 = IOConnectCallMethod(v11, 0x62u, &input, 1u, v15, v14, 0, 0, 0, 0);
      uint64_t v12 = v15;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v4 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_delete", ":", 1394, "", 0, "", "");
    uint64_t v12 = 0;
  }
  free(v12);
  return v4;
}

uint64_t sub_1001243A4(int a1, uint64_t a2, int a3, unsigned int a4, void *a5, size_t *a6)
{
  uint64_t v12 = 3758097084;
  mach_port_t v13 = sub_10011D344();
  if (v13)
  {
    uint64_t v12 = 3758097090;
    if (a5 && a6)
    {
      input[0] = a1;
      input[1] = a4;
      uint64_t input[2] = a2;
      uint64_t input[3] = a3;
      return IOConnectCallMethod(v13, 0x26u, input, 4u, 0, 0, 0, 0, a5, a6);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_auth_token_create", ":", 1415, "", 0, "", "");
  }
  return v12;
}

uint64_t sub_1001244D8(int a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  rsize_t __n = 0;
  int __s = 0;
  uint64_t v7 = 3758097090;
  uint64_t v20 = 0;
  mach_port_t v8 = sub_10011D344();
  if (v8)
  {
    mach_port_t v9 = v8;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (!sub_100124814(a4, @"GracePeriod", TypeID, (uint64_t)off_100322FE8, &v20))
    {
      CFTypeID v11 = CFNumberGetTypeID();
      if (!sub_100124814(a4, @"BackOffDelay", v11, (uint64_t)off_100322FF0, &v20))
      {
        CFTypeID v12 = CFNumberGetTypeID();
        if (!sub_100124814(a4, @"MaxUnlockAttempts", v12, (uint64_t)off_100322FF8, &v20))
        {
          CFTypeID v13 = CFNumberGetTypeID();
          if (!sub_100124814(a4, @"EscrowPasscodePeriod", v13, (uint64_t)off_100323000, &v20))
          {
            CFTypeID v14 = CFNumberGetTypeID();
            if (!sub_100124814(a4, @"EscrowTokenPeriod", v14, (uint64_t)off_100323008, &v20))
            {
              CFTypeID v15 = CFDataGetTypeID();
              if (!sub_100124814(a4, @"UserUUID", v15, (uint64_t)off_1003231F0, &v20))
              {
                CFTypeID v16 = CFDataGetTypeID();
                if (!sub_100124814(a4, @"BindKEKToKB", v16, (uint64_t)off_100323230, &v20))
                {
                  CFTypeID v17 = CFBooleanGetTypeID();
                  if (!sub_100124814(a4, @"InactivityRebootEnabled", v17, (uint64_t)off_100323408, &v20))
                  {
                    CFTypeID v18 = CFBooleanGetTypeID();
                    if (!sub_100124814(a4, @"OnenessAutomaticMode", v18, (uint64_t)off_100323410, &v20)&& !sub_10012EC38(&v20)&& (!a2 || !sub_10012E340(&v20, (uint64_t)off_100322E90, a2))&& !sub_10012DFF0(&v20, &__s, &__n))
                    {
                      input[0] = a1;
                      input[1] = (uint64_t)__s;
                      uint64_t input[2] = __n;
                      uint64_t v7 = IOConnectCallMethod(v9, 0x1Eu, input, 3u, 0, 0, 0, 0, 0, 0);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_configuration", ":", 1488, "", 0, "", "");
    uint64_t v7 = 3758097084;
  }
  sub_10012D8E4(&v20);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v7;
}

uint64_t sub_100124814(const __CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  value = 0;
  uint64_t result = CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value);
  if (result)
  {
    if (CFGetTypeID(value) == a3)
    {
      if (CFNumberGetTypeID() == a3)
      {
        uint64_t v10 = 0;
        if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v10)
          || sub_10012E708(a5, a4, v10))
        {
          return 0xFFFFFFFFLL;
        }
        return 0;
      }
      if (CFBooleanGetTypeID() == a3)
      {
        CFBooleanGetValue((CFBooleanRef)value);
        if (sub_10012E5A0(a5, a4)) {
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        if (CFDataGetTypeID() != a3) {
          return 0xFFFFFFFFLL;
        }
        BytePtr = CFDataGetBytePtr((CFDataRef)value);
        CFDataGetLength((CFDataRef)value);
        if (sub_10012E340(a5, a4, (uint64_t)BytePtr)) {
          return 0xFFFFFFFFLL;
        }
      }
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_10012491C(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  int v4 = v1;
  uint64_t v5 = 3758097084;
  mach_port_t v6 = sub_10011D344();
  if (v6)
  {
    if (v3)
    {
      mach_port_t v7 = v6;
      bzero(outputStruct, 0x8000uLL);
      v45[0] = 0x8000;
      uint64_t input = v4;
      uint64_t v8 = IOConnectCallMethod(v7, 0x1Fu, &input, 1u, 0, 0, 0, 0, outputStruct, v45);
      if (v8)
      {
        return v8;
      }
      else if (v45[0] > 0x8000)
      {
        return 3758604298;
      }
      else
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        bzero(v46, 0x250uLL);
        v45[1] = (size_t)off_100322FE8;
        v46[4] = off_100322FF0;
        v46[9] = off_100322FF8;
        v46[14] = off_100323000;
        v46[19] = off_100323008;
        v46[24] = off_100323010;
        v46[29] = off_1003231F0;
        v46[34] = off_100323228;
        v46[39] = off_100323238;
        v46[44] = off_100323240;
        v46[49] = off_100323248;
        v46[54] = off_1003233C8;
        v46[59] = off_1003233D0;
        v46[64] = off_100323400;
        v46[69] = off_1003233F8;
        sub_10012D39C();
        uint64_t v10 = v46[0];
        uint64_t v11 = v46[5];
        uint64_t v12 = v46[10];
        uint64_t v13 = v46[15];
        uint64_t v14 = v46[20];
        uint64_t v15 = v46[25];
        uint64_t v16 = v46[30];
        uint64_t v44 = v3;
        uint64_t v17 = v46[35];
        uint64_t v37 = v46[40];
        uint64_t v38 = v46[45];
        uint64_t v39 = v46[50];
        uint64_t v40 = v46[55];
        uint64_t v41 = v46[60];
        uint64_t v42 = v46[65];
        uint64_t v43 = v46[70];
        CFTypeID TypeID = CFNumberGetTypeID();
        sub_100124EA4(Mutable, @"GracePeriod", TypeID, v10);
        CFTypeID v19 = CFNumberGetTypeID();
        sub_100124EA4(Mutable, @"BackOffDelay", v19, v11);
        CFTypeID v20 = CFNumberGetTypeID();
        sub_100124EA4(Mutable, @"MaxUnlockAttempts", v20, v12);
        CFTypeID v21 = CFNumberGetTypeID();
        sub_100124EA4(Mutable, @"EscrowPasscodePeriod", v21, v13);
        CFTypeID v22 = CFNumberGetTypeID();
        sub_100124EA4(Mutable, @"EscrowTokenPeriod", v22, v14);
        CFTypeID v23 = CFNumberGetTypeID();
        sub_100124EA4(Mutable, @"ConfigFlags", v23, v15);
        CFTypeID v24 = CFDataGetTypeID();
        sub_100124EA4(Mutable, @"UserUUID", v24, v16);
        CFTypeID v25 = CFDataGetTypeID();
        sub_100124EA4(Mutable, @"GroupUUID", v25, v17);
        CFTypeID v26 = CFNumberGetTypeID();
        sub_100124EA4(Mutable, @"RecoveryIterations", v26, v37);
        CFTypeID v27 = CFNumberGetTypeID();
        sub_100124EA4(Mutable, @"RecoveryFlags", v27, v38);
        CFTypeID v28 = CFNumberGetTypeID();
        sub_100124EA4(Mutable, @"RecoveryTargetIterations", v28, v39);
        CFTypeID v29 = CFBooleanGetTypeID();
        sub_100124EA4(Mutable, @"MementoSupported", v29, v40);
        CFTypeID v30 = CFBooleanGetTypeID();
        sub_100124EA4(Mutable, @"MementoBlobExists", v30, v41);
        CFTypeID v31 = CFNumberGetTypeID();
        sub_100124EA4(Mutable, @"MementoPasscodeGeneration", v31, v42);
        CFTypeID v32 = CFNumberGetTypeID();
        sub_100124EA4(Mutable, @"PasscodeGeneration", v32, v43);
        char v33 = sub_10012D5D4();
        if ((v33 & 2) != 0) {
          CFBooleanRef v34 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v34 = kCFBooleanFalse;
        }
        CFDictionarySetValue(Mutable, @"InactivityRebootEnabled", v34);
        if ((v33 & 8) != 0) {
          CFBooleanRef v35 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v35 = kCFBooleanFalse;
        }
        CFDictionarySetValue(Mutable, @"OnenessAutomaticMode", v35);
        uint64_t v5 = 0;
        *uint64_t v44 = Mutable;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_configuration", ":", 1556, "", 0, "", "");
  }
  return v5;
}

void sub_100124EA4(__CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    if (CFNumberGetTypeID() == a3)
    {
      CFIndex valuePtr = sub_10012D5D4();
      CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
      if (!v7) {
        return;
      }
LABEL_14:
      CFNumberRef v12 = v7;
      CFDictionaryAddValue(a1, a2, v7);
      CFRelease(v12);
      return;
    }
    if (CFBooleanGetTypeID() == a3)
    {
      int v8 = sub_10012D888();
      mach_port_t v9 = &kCFBooleanTrue;
      if (!v8) {
        mach_port_t v9 = &kCFBooleanFalse;
      }
      CFBooleanRef v10 = *v9;
      CFDictionaryAddValue(a1, a2, v10);
    }
    else if (CFDataGetTypeID() == a3)
    {
      CFIndex valuePtr = 0;
      uint64_t v11 = (const UInt8 *)ccder_decode_tl();
      if (v11)
      {
        CFNumberRef v7 = CFDataCreate(kCFAllocatorDefault, v11, valuePtr);
        goto LABEL_14;
      }
    }
  }
}

uint64_t sub_100124FEC(int a1, unsigned int a2, uint64_t a3)
{
  input[0] = a2;
  input[1] = a3;
  uint64_t input[2] = a1;
  mach_port_t v3 = sub_10011D344();
  if (v3) {
    return IOConnectCallMethod(v3, 0x1Au, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_hold", ":", 1654, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1001250D0(int a1, unsigned int a2)
{
  input[0] = a2;
  input[1] = a1;
  mach_port_t v2 = sub_10011D344();
  if (v2) {
    return IOConnectCallMethod(v2, 0x1Bu, input, 2u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_drop", ":", 1672, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1001251B0(int a1, unsigned int a2)
{
  mach_port_t v4 = sub_10011D344();
  if (v4)
  {
    input[0] = a2;
    input[1] = a1;
    return IOConnectCallMethod(v4, 0x64u, input, 2u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_promote", ":", 1687, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1001252A0(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x91u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_oneness_heartbeat", ":", 1707, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012537C(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x65u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_consume", ":", 1722, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100125458(int a1, uint64_t a2)
{
  uint64_t v15 = 0;
  int v14 = 0;
  mach_port_t v4 = sub_10011D344();
  if (v4)
  {
    mach_port_t v10 = v4;
    sub_1001316DC((char **)&v15, (unsigned int *)&v14, 3, v5, v6, v7, v8, v9, a2);
    input[0] = a1;
    input[1] = (uint64_t)v15;
    uint64_t input[2] = v14;
    uint64_t v11 = IOConnectCallMethod(v10, 0x12u, input, 3u, 0, 0, 0, 0, 0, 0);
    CFNumberRef v12 = v15;
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_recover_with_escrow_bag", ":", 1739, "", 0, "", "");
    CFNumberRef v12 = 0;
    uint64_t v11 = 3758097084;
  }
  free(v12);
  return v11;
}

uint64_t sub_1001255BC(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v8 = (const void *)v1;
  uint64_t v9 = 3758097090;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  mach_port_t v10 = sub_10011D344();
  if (v10)
  {
    if (v8 && v5 && v3)
    {
      uint64_t v11 = IOConnectCallMethod(v10, 0x29u, 0, 0, v8, v7, 0, 0, __src, &__count);
      if (v11)
      {
        uint64_t v9 = v11;
      }
      else
      {
        CFNumberRef v12 = calloc(__count, 1uLL);
        *uint64_t v5 = v12;
        if (v12)
        {
          memcpy(v12, __src, __count);
          uint64_t v9 = 0;
          *mach_port_t v3 = __count;
        }
        else
        {
          uint64_t v9 = 3758097085;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fdr_hmac_data", ":", 1758, "", 0, "", "");
    uint64_t v9 = 3758097084;
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v9;
}

uint64_t sub_100125760(int a1, unsigned int a2, _DWORD *a3)
{
  mach_port_t v6 = sub_10011D344();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t output = 0;
    uint32_t outputCnt = 1;
    uint64_t result = IOConnectCallMethod(v6, 0x28u, input, 2u, 0, 0, &output, &outputCnt, 0, 0);
    if (a3)
    {
      if (!result) {
        *a3 = output;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_generation", ":", 1781, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_100125878(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v9 = 3758097084;
  CFTypeID v21 = 0;
  int v20 = 0;
  mach_port_t v10 = sub_10011D344();
  if (v10)
  {
    mach_port_t v16 = v10;
    if (a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = "";
    }
    sub_1001316DC((char **)&v21, (unsigned int *)&v20, 2, v11, v12, v13, v14, v15, (uint64_t)v17);
    if (v21)
    {
      input[0] = a1;
      input[1] = a6;
      uint64_t input[2] = (uint64_t)v21;
      uint64_t input[3] = v20;
      uint64_t v9 = IOConnectCallMethod(v16, 0x2Au, input, 4u, 0, 0, 0, 0, 0, 0);
      CFTypeID v18 = v21;
    }
    else
    {
      CFTypeID v18 = 0;
      uint64_t v9 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_aks_verify_password", ":", 1807, "", 0, "", "");
    CFTypeID v18 = 0;
  }
  free(v18);
  return v9;
}

uint64_t sub_100125A04(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100125878(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_100125A0C(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100125878(a1, a2, a3, a4, a5, 1u);
}

uint64_t sub_100125A14(mach_port_t a1, uintptr_t a2)
{
  io_connect_t v4 = sub_10011D344();
  if (v4)
  {
    return IOConnectSetNotificationPort(v4, 0, a1, a2);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_register_for_notifications", ":", 1840, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_100125AD0(int a1, int a2, void *a3, size_t *a4)
{
  size_t __count = 256;
  input[0] = a1;
  input[1] = a2;
  uint64_t result = 3758097090;
  if (a3 && a4)
  {
    mach_port_t v7 = sub_10011D344();
    if (v7)
    {
      memset(__src, 0, sizeof(__src));
      uint64_t result = IOConnectCallMethod(v7, 0x31u, input, 2u, 0, 0, 0, 0, __src, &__count);
      if (!result)
      {
        if (__count > 0x100)
        {
          return 3758604298;
        }
        else
        {
          uint64_t v8 = calloc(__count, 1uLL);
          *a3 = v8;
          if (v8)
          {
            memcpy(v8, __src, __count);
            uint64_t result = 0;
            *a4 = __count;
          }
          else
          {
            return 3758097085;
          }
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_create_signing_key", ":", 1859, "", 0, "", "");
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_100125C64(uint64_t a1)
{
  size_t __count = 0x8000;
  input[0] = (int)__chkstk_darwin(a1);
  input[1] = v1;
  uint64_t result = 3758097090;
  if (v4)
  {
    mach_port_t v7 = v5;
    if (v5)
    {
      uint64_t v8 = v4;
      size_t v9 = v3;
      mach_port_t v10 = v2;
      mach_port_t v11 = sub_10011D344();
      if (v11)
      {
        mach_port_t v12 = v11;
        bzero(__src, 0x8000uLL);
        uint64_t result = IOConnectCallMethod(v12, 0x31u, input, 2u, v10, v9, 0, 0, __src, &__count);
        if (!result)
        {
          if (__count > 0x8000)
          {
            return 3758604298;
          }
          else
          {
            uint64_t v13 = calloc(__count, 1uLL);
            *uint64_t v8 = v13;
            if (v13)
            {
              memcpy(v13, __src, __count);
              uint64_t result = 0;
              *mach_port_t v7 = __count;
            }
            else
            {
              return 3758097085;
            }
          }
        }
      }
      else
      {
        fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_create_signing_key_with_params", ":", 1881, "", 0, "", "");
        return 3758097084;
      }
    }
  }
  return result;
}

uint64_t sub_100125E14(uint64_t a1)
{
  return sub_100125E2C(a1);
}

uint64_t sub_100125E2C(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  uint32_t v7 = v6;
  size_t __count = 15360;
  input[0] = v1;
  input[1] = v8;
  uint64_t input[2] = v9;
  mach_port_t v10 = sub_10011D344();
  if (v10)
  {
    mach_port_t v11 = v10;
    bzero(__src, 0x3C00uLL);
    uint64_t v12 = IOConnectCallMethod(v11, v7, input, 3u, 0, 0, 0, 0, __src, &__count);
    if (v12)
    {
      return v12;
    }
    else if (__count > 0x3C00)
    {
      return 3758604298;
    }
    else
    {
      uint64_t v13 = 0;
      if (v5 && v3)
      {
        if (__count)
        {
          uint64_t v14 = calloc(__count, 1uLL);
          *uint64_t v5 = v14;
          if (!v14) {
            return 3758097085;
          }
          memcpy(v14, __src, __count);
          size_t v15 = __count;
        }
        else
        {
          size_t v15 = 0;
        }
        uint64_t v13 = 0;
        *size_t v3 = v15;
      }
    }
  }
  else
  {
    uint64_t v13 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "remote_session_operate", ":", 2017, "", 0, "", "");
  }
  return v13;
}

uint64_t sub_100125FEC(int a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, void *a8, size_t *a9)
{
  memset(__src, 0, sizeof(__src));
  size_t __count = 256;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  input[0] = a1;
  input[1] = a2;
  uint64_t v9 = 3758097090;
  uint64_t input[2] = a5;
  if (a8 && a9)
  {
    mach_port_t v12 = sub_10011D344();
    if (v12)
    {
      mach_port_t v18 = v12;
      sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 2, v13, v14, v15, v16, v17, a3);
      if (*(void *)&inputStructCnt[1])
      {
        uint64_t v19 = IOConnectCallMethod(v18, 0x32u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
        if (v19)
        {
          uint64_t v9 = v19;
        }
        else if (__count > 0x100)
        {
          uint64_t v9 = 3758604298;
        }
        else
        {
          int v20 = calloc(__count, 1uLL);
          *a8 = v20;
          uint64_t v9 = 3758097085;
          if (v20)
          {
            memcpy(v20, __src, __count);
            uint64_t v9 = 0;
            *a9 = __count;
          }
        }
      }
      else
      {
        uint64_t v9 = 3758097085;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_sign_signing_key", ":", 1911, "", 0, "", "");
      uint64_t v9 = 3758097084;
    }
  }
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t sub_1001261F0(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v10 = 3758097084;
  input[0] = a2;
  input[1] = a1;
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  mach_port_t v11 = sub_10011D344();
  if (v11)
  {
    mach_port_t v17 = v11;
    sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a3);
    if (*(void *)&inputStructCnt[1])
    {
      uint64_t v18 = IOConnectCallMethod(v17, 0x2Cu, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], &output, &outputCnt, 0, 0);
      uint64_t v10 = v18;
      if (a9 && !v18) {
        *a9 = output;
      }
    }
    else
    {
      uint64_t v10 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_session", ":", 1938, "", 0, "", "");
  }
  free(*(void **)&inputStructCnt[1]);
  return v10;
}

uint64_t sub_10012636C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  mach_port_t v17 = 0;
  int __s = 0;
  uint64_t v4 = 3758097084;
  rsize_t __n = 0;
  uint64_t v16 = 0;
  uint64_t v5 = 3758097090;
  rsize_t __smax = 0;
  if (!a3 || !a4) {
    goto LABEL_12;
  }
  int v8 = -536870212;
  *(void *)&long long v19 = a3;
  *((void *)&v19 + 1) = a3 + a4;
  if (!(a3 + a4)) {
    goto LABEL_19;
  }
  uint64_t v16 = 0;
  if ((ccder_blob_decode_range() & 1) == 0)
  {
    int v8 = -536870198;
LABEL_19:
    syslog(3, "error parsing signing key: %d", v8);
    uint64_t v5 = 3758097084;
LABEL_12:
    uint64_t v12 = __s;
    uint64_t v4 = v5;
    goto LABEL_13;
  }
  sub_100130404(&v19, 0x8000000000000001, &v16);
  if (v16)
  {
    uint64_t v5 = sub_100125E2C(a1);
    if (v5) {
      syslog(3, "error: validating v1 local signing key failed: %d");
    }
    goto LABEL_12;
  }
  uint64_t v11 = sub_100125AD0(a1, 11, &__s, &__n);
  if (v11)
  {
    uint64_t v5 = v11;
    syslog(3, "error: validating (create) v0 local signing key failed: %d", v11);
    goto LABEL_12;
  }
  uint64_t v12 = __s;
  if (__s && __n)
  {
    uint64_t v5 = sub_100125FEC(a1, a2, a3, a4, 11, (uint64_t)__s, __n, &v17, &__smax);
    if (v5) {
      syslog(3, "error: validating (sign) v0 local signing key failed: %d");
    }
    goto LABEL_12;
  }
LABEL_13:
  if (v12)
  {
    memset_s(v12, __n, 0, __n);
    free(__s);
  }
  if (v17)
  {
    memset_s(v17, __smax, 0, __smax);
    free(v17);
  }
  return v4;
}

uint64_t sub_100126544(uint64_t a1)
{
  return sub_100125E2C(a1);
}

uint64_t sub_10012655C(uint64_t a1)
{
  return sub_100125E2C(a1);
}

uint64_t sub_100126574(uint64_t a1)
{
  return sub_100125E2C(a1);
}

uint64_t sub_100126590(uint64_t a1)
{
  return sub_100125E2C(a1);
}

uint64_t sub_1001265A8(uint64_t a1)
{
  return sub_100125E2C(a1);
}

uint64_t sub_1001265C0(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v6 = v1;
  mach_port_t v7 = sub_10011D344();
  if (v7)
  {
    mach_port_t v8 = v7;
    uint64_t result = 3758097090;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000;
        input[0] = v6;
        input[1] = 0;
        uint64_t result = IOConnectCallMethod(v8, 0x14u, input, 2u, 0, 0, 0, 0, __src, &__count);
        if (!result)
        {
          if (__count)
          {
            uint64_t v10 = calloc(__count, 1uLL);
            *uint64_t v5 = v10;
            if (v10)
            {
              memcpy(v10, __src, __count);
              uint64_t result = 0;
              *size_t v3 = __count;
            }
            else
            {
              return 3758097085;
            }
          }
          else
          {
            return 3758097136;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drain_backup_keys", ":", 2072, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_100126760(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v6 = v1;
  mach_port_t v7 = sub_10011D344();
  if (v7)
  {
    mach_port_t v8 = v7;
    uint64_t result = 3758097090;
    if (v5)
    {
      if (v3)
      {
        bzero(__src, 0x8000uLL);
        size_t __count = 0x8000;
        input[0] = v6;
        input[1] = 1;
        uint64_t result = IOConnectCallMethod(v8, 0x14u, input, 2u, 0, 0, 0, 0, __src, &__count);
        if (!result)
        {
          if (__count)
          {
            if (__ROR8__(0xEF7BDEF7BDEF7BDFLL * __count, 2) > 0x210842108421084uLL)
            {
              return 3758604298;
            }
            else
            {
              uint64_t v10 = calloc(__count, 1uLL);
              *uint64_t v5 = v10;
              if (v10)
              {
                memcpy(v10, __src, __count);
                uint64_t result = 0;
                *size_t v3 = __count / 0x7C;
              }
              else
              {
                return 3758097085;
              }
            }
          }
          else
          {
            return 3758097136;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drain_backup_keys_info", ":", 2100, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_10012695C(int a1)
{
  mach_port_t v2 = sub_10011D344();
  if (v2)
  {
    uint64_t input = a1;
    return IOConnectCallMethod(v2, 0x16u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_clear_backup_bag", ":", 2129, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_100126A44(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  size_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  uint64_t v9 = v8;
  int v11 = v10;
  int v12 = v1;
  mach_port_t v13 = sub_10011D344();
  if (!v13)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_backup_bag", ":", 2146, "", 0, "", "");
    return 3758097084;
  }
  mach_port_t v14 = v13;
  if (v5)
  {
    if (!v3) {
      return 3758097090;
    }
    long long outputStruct = __src;
    p_count = &__count;
    uint64_t v17 = 1;
  }
  else
  {
    p_count = 0;
    long long outputStruct = 0;
    uint64_t v17 = 0;
  }
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  input[0] = v12;
  input[1] = v11;
  uint64_t input[2] = v17;
  uint64_t input[3] = v9;
  uint64_t input[4] = v7;
  uint64_t result = IOConnectCallMethod(v14, 0x15u, input, 5u, 0, 0, 0, 0, outputStruct, p_count);
  if (v5 && !result)
  {
    long long v19 = calloc(__count, 1uLL);
    *uint64_t v5 = v19;
    if (v19)
    {
      memcpy(v19, __src, __count);
      uint64_t result = 0;
      *size_t v3 = __count;
    }
    else
    {
      return 3758097085;
    }
  }
  return result;
}

uint64_t sub_100126C20(int a1, _DWORD *a2)
{
  uint64_t v4 = 3758097084;
  mach_port_t v5 = sub_10011D344();
  if (v5)
  {
    if (a2)
    {
      uint64_t output = 0;
      uint64_t input = a1;
      uint32_t outputCnt = 1;
      uint64_t v4 = IOConnectCallMethod(v5, 0x52u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!v4) {
        *a2 = output;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_make_public_backup_bag", ":", 2178, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_100126D3C(uint64_t a1)
{
  return sub_100125E2C(a1);
}

uint64_t sub_100126D54()
{
  return sub_100125E2C(0);
}

uint64_t sub_100126D70(uint64_t a1)
{
  return sub_100126D7C(a1);
}

uint64_t sub_100126D7C(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint32_t v5 = v4;
  uint64_t input = v1;
  *(void *)mach_port_t v13 = 4096;
  uint64_t v6 = 3758097084;
  int v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long __s = 0u;
  mach_port_t v7 = sub_10011D344();
  if (v7)
  {
    if (v3)
    {
      mach_port_t v8 = v7;
      bzero(outputStruct, 0x1000uLL);
      uint64_t v9 = IOConnectCallMethod(v8, v5, &input, 1u, 0, 0, 0, 0, outputStruct, (size_t *)v13);
      if (v9)
      {
        return v9;
      }
      else
      {
        uint64_t v6 = 0;
        if (!sub_10012F320((uint64_t)outputStruct, v13[0], (char *)&__s))
        {
          long long v10 = v17;
          *(_OWORD *)(v3 + 32) = v16;
          *(_OWORD *)(v3 + 48) = v10;
          *(_WORD *)(v3 + 64) = v18;
          long long v11 = v15;
          *(_OWORD *)uint64_t v3 = __s;
          *(_OWORD *)(v3 + 16) = v11;
        }
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_get_device_state", ":", 2224, "", 0, "", "");
  }
  return v6;
}

uint64_t sub_100126F18(uint64_t a1)
{
  return sub_100126D7C(a1);
}

uint64_t sub_100126F24(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  size_t v5 = v4;
  mach_port_t v7 = v6;
  uint64_t v8 = 3758097084;
  v13[0] = 4096;
  uint64_t input = v1;
  mach_port_t v9 = sub_10011D344();
  if (v9)
  {
    if (v3)
    {
      mach_port_t v10 = v9;
      bzero(outputStruct, 0x1000uLL);
      memset_s(v3, 0x10uLL, 0, 0x10uLL);
      uint64_t v11 = IOConnectCallMethod(v10, 0x39u, &input, 1u, v7, v5, 0, 0, outputStruct, v13);
      if (v11)
      {
        return v11;
      }
      else
      {
        uint64_t v18 = 0;
        long long v22 = 0u;
        long long v14 = 0u;
        long long v15 = 0u;
        long long v17 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v23 = 0u;
        uint64_t v24 = 0;
        v13[1] = (size_t)off_100323130;
        long long v16 = (unint64_t)off_100323138;
        int v19 = off_100323140;
        *(void *)&long long v22 = off_100323148;
        sub_10012D39C();
        *uint64_t v3 = sub_10012D5D4();
        v3[1] = sub_10012D5D4();
        v3[2] = sub_10012D5D4();
        uint64_t v8 = 0;
        v3[3] = sub_10012D5D4();
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_peer_get_state", ":", 2255, "", 0, "", "");
  }
  return v8;
}

uint64_t sub_100127198(int a1, const void *a2, size_t a3)
{
  uint64_t input = a1;
  mach_port_t v5 = sub_10011D344();
  if (v5) {
    return IOConnectCallMethod(v5, 0x3Au, &input, 1u, a2, a3, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_peer_drop", ":", 2292, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100127284(int a1, int a2)
{
  uint64_t input = a1;
  mach_port_t v3 = sub_10011D344();
  if (v3)
  {
    if (a2) {
      uint32_t v4 = 32;
    }
    else {
      uint32_t v4 = 8;
    }
    return IOConnectCallMethod(v3, v4, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_device", ":", 2307, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_100127378(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x8Du, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_cx", ":", 2327, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100127454(int a1, uint64_t a2, int a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_10011D344();
  if (v3) {
    return IOConnectCallMethod(v3, 9u, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_device", ":", 2342, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100127538()
{
  mach_port_t v0 = sub_10011D344();
  if (v0) {
    return IOConnectCallMethod(v0, 0x13u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_obliterate_class_d", ":", 2355, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1001275E0(int a1, unsigned int a2, uint64_t a3, unsigned int a4, const void *a5, int a6)
{
  mach_port_t v12 = sub_10011D344();
  if (v12)
  {
    input[0] = a1;
    input[1] = a2;
    uint64_t input[2] = a3;
    uint64_t input[3] = a4;
    return IOConnectCallMethod(v12, 0x3Fu, input, 4u, a5, a6, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_migrate_s_key", ":", 2367, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1001276F8(int a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, size_t a6, void *a7, size_t *a8)
{
  input[0] = a1;
  input[1] = a4;
  uint64_t input[2] = a2;
  uint64_t input[3] = a3;
  size_t __count = 2048;
  mach_port_t v12 = sub_10011D344();
  if (v12)
  {
    mach_port_t v13 = v12;
    bzero(__src, 0x800uLL);
    uint64_t v14 = IOConnectCallMethod(v13, 0x3Bu, input, 4u, a5, a6, 0, 0, __src, &__count);
    if (v14)
    {
      return v14;
    }
    else if (__count > 0x800)
    {
      return 3758604298;
    }
    else
    {
      uint64_t v15 = 0;
      if (a7 && a8)
      {
        if (__count)
        {
          long long v16 = calloc(__count, 1uLL);
          *a7 = v16;
          if (!v16) {
            return 3758097085;
          }
          memcpy(v16, __src, __count);
          size_t v17 = __count;
        }
        else
        {
          size_t v17 = 0;
        }
        uint64_t v15 = 0;
        *a8 = v17;
      }
    }
  }
  else
  {
    uint64_t v15 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_register", ":", 2388, "", 0, "", "");
  }
  return v15;
}

uint64_t sub_1001278A8(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x3Cu, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_unregister", ":", 2412, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100127984(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t input = a1;
  size_t __count = 2048;
  mach_port_t v9 = sub_10011D344();
  if (v9)
  {
    mach_port_t v10 = v9;
    bzero(__src, 0x800uLL);
    uint64_t v11 = IOConnectCallMethod(v10, 0x3Du, &input, 1u, a2, a3, 0, 0, __src, &__count);
    if (v11)
    {
      return v11;
    }
    else if (__count > 0x800)
    {
      return 3758604298;
    }
    else
    {
      uint64_t v12 = 0;
      if (a4 && a5)
      {
        if (__count)
        {
          mach_port_t v13 = calloc(__count, 1uLL);
          *a4 = v13;
          if (!v13) {
            return 3758097085;
          }
          memcpy(v13, __src, __count);
          size_t v14 = __count;
        }
        else
        {
          size_t v14 = 0;
        }
        uint64_t v12 = 0;
        *a5 = v14;
      }
    }
  }
  else
  {
    uint64_t v12 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_request_unlock", ":", 2429, "", 0, "", "");
  }
  return v12;
}

uint64_t sub_100127B2C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  uint64_t input = a1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x800uLL);
  size_t __count = 2048;
  sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  if (!*(void *)&inputStructCnt[1])
  {
    uint64_t v17 = 3758097085;
    goto LABEL_12;
  }
  mach_port_t v15 = sub_10011D344();
  if (!v15)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_unlock", ":", 2460, "", 0, "", "");
    uint64_t v17 = 3758097084;
    goto LABEL_12;
  }
  uint64_t v16 = IOConnectCallMethod(v15, 0x3Eu, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
  if (v16)
  {
    uint64_t v17 = v16;
    goto LABEL_12;
  }
  if (__count > 0x800)
  {
    uint64_t v17 = 3758604298;
    goto LABEL_12;
  }
  uint64_t v17 = 0;
  if (a6 && a7)
  {
    if (!__count)
    {
      size_t v19 = 0;
      goto LABEL_11;
    }
    uint64_t v18 = calloc(__count, 1uLL);
    *a6 = v18;
    uint64_t v17 = 3758097085;
    if (v18)
    {
      memcpy(v18, __src, __count);
      size_t v19 = __count;
LABEL_11:
      uint64_t v17 = 0;
      *a7 = v19;
    }
  }
LABEL_12:
  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t sub_100127D14(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    if (sub_100127D64((uint64_t)off_100323158, 0, a1, a2, a3, a4)) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100127D64(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t *a5, void *a6)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a6 && a3 && a4 && a5 && a3 + a4 > a3)
  {
    sub_10012D39C();
    if (a2)
    {
      if (*a6 == 8)
      {
        uint64_t v10 = sub_10012D5D4();
        uint64_t result = 0;
        *a5 = v10;
        return result;
      }
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = ccder_decode_tl();
    if (!v11) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v12 = v11;
    uint64_t result = 0;
    *a5 = v12;
    *a6 = 0;
  }
  return result;
}

uint64_t sub_100127E94(unint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    if (sub_100127D64((uint64_t)off_100323188, 0, a1, a2, a3, a4)) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100127EE4(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 8;
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0;
  uint64_t result = sub_100127D64((uint64_t)off_100323170, 1, a1, a2, &v6, &v5);
  if (result) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_100127F54(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = 8;
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = 0;
  uint64_t result = sub_100127D64((uint64_t)off_100323168, 1, a1, a2, &v6, &v5);
  if (result) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_100127FC4(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x47u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_fail", ":", 2589, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1001280A0(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x49u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_set_healthy", ":", 2605, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012817C(int a1, uint64_t a2, uint64_t a3)
{
  return sub_100128184(a1, a2, a3, 0x45u);
}

uint64_t sub_100128184(int a1, uint64_t a2, uint64_t a3, uint32_t a4)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v5 = sub_10011D344();
  if (v5) {
    return IOConnectCallMethod(v5, a4, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "__aks_se_set_secret", ":", 2621, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100128270(int a1, uint64_t a2, uint64_t a3)
{
  return sub_100128184(a1, a2, a3, 0x8Cu);
}

uint64_t sub_100128278(int a1, uint64_t a2, uint64_t a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_10011D344();
  if (v3) {
    return IOConnectCallMethod(v3, 0x46u, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_recover", ":", 2649, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100128358(int a1, uint64_t a2, uint64_t a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_10011D344();
  if (v3) {
    return IOConnectCallMethod(v3, 0x69u, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_change_secret_epilogue", ":", 2665, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100128438(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  input[0] = v1;
  input[1] = v4;
  uint64_t input[2] = v5;
  bzero(__s, 0x1000uLL);
  __n[0] = 4096;
  mach_port_t v6 = sub_10011D344();
  if (!v6)
  {
    uint64_t v9 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_token_for_memento_secret", ":", 2683, "", 0, "", "");
    goto LABEL_10;
  }
  uint64_t v7 = IOConnectCallMethod(v6, 0x48u, input, 3u, 0, 0, 0, 0, __s, __n);
  if (v7)
  {
    uint64_t v9 = v7;
    goto LABEL_10;
  }
  if (__n[0] - 4097 < 0xFFFFFFFFFFFFF000)
  {
    uint64_t v9 = 3758604298;
    goto LABEL_10;
  }
  uint64_t v16 = 0;
  long long v15 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  __n[1] = (rsize_t)off_1003231E0;
  long long v14 = (unint64_t)off_1003231E8;
  sub_10012D39C();
  if ((void)v12)
  {
    ccder_decode_tl();
LABEL_9:
    uint64_t v9 = 0;
    goto LABEL_10;
  }
  if (!*((void *)&v14 + 1)) {
    goto LABEL_9;
  }
  unint64_t v8 = sub_10012D5D4();
  if (v8 > 0xFF) {
    goto LABEL_9;
  }
  uint64_t v9 = 0;
  *mach_port_t v3 = v8;
LABEL_10:
  memset_s(__s, __n[0], 0, __n[0]);
  return v9;
}

uint64_t sub_1001286B4(uint64_t a1)
{
  return sub_100128438(a1);
}

uint64_t sub_1001286C8(int a1, const void *a2, size_t a3)
{
  uint64_t input = a1;
  mach_port_t v5 = sub_10011D344();
  if (v5)
  {
    if (a2) {
      size_t v6 = a3;
    }
    else {
      size_t v6 = 0;
    }
    return IOConnectCallMethod(v5, 0x58u, &input, 1u, a2, v6, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_set_nonce", ":", 2737, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1001287B8(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  mach_port_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t input = v1;
  bzero(&__s, 0x1000uLL);
  size_t __n = 4096;
  uint64_t v10 = 3758097090;
  if (v9)
  {
    if (v7)
    {
      uint64_t v10 = 3758097090;
      if (v5)
      {
        if (v3)
        {
          mach_port_t v11 = sub_10011D344();
          if (v11)
          {
            uint64_t v12 = IOConnectCallMethod(v11, 0x5Au, &input, 1u, 0, 0, 0, 0, &__s, &__n);
            if (v12)
            {
              uint64_t v10 = v12;
            }
            else if (__n - 4097 < 0xFFFFFFFFFFFFF005)
            {
              uint64_t v10 = 3758604298;
            }
            else
            {
              long long v13 = calloc(5uLL, 1uLL);
              *mach_port_t v5 = v13;
              if (v13)
              {
                *mach_port_t v3 = 5;
                int v14 = __s;
                v13[4] = v20;
                *(_DWORD *)long long v13 = v14;
                long long v15 = calloc(__n - 5, 1uLL);
                *uint64_t v9 = v15;
                uint64_t v10 = 3758097085;
                if (v15)
                {
                  size_t v16 = __n;
                  *uint64_t v7 = __n - 5;
                  memcpy(v15, v21, v16);
                  uint64_t v10 = 0;
                }
              }
              else
              {
                uint64_t v10 = 3758097085;
              }
            }
          }
          else
          {
            fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_sig", ":", 2759, "", 0, "", "");
            uint64_t v10 = 3758097084;
          }
        }
      }
    }
  }
  memset_s(&__s, __n, 0, __n);
  return v10;
}

uint64_t sub_1001289D0(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  mach_port_t v5 = v4;
  uint64_t input = v1;
  size_t v6 = 4096;
  bzero(__src, 0x1000uLL);
  size_t __count = 4096;
  uint64_t v7 = 3758097090;
  if (v5 && v3)
  {
    mach_port_t v8 = sub_10011D344();
    if (v8)
    {
      uint64_t v9 = IOConnectCallMethod(v8, 0x59u, &input, 1u, 0, 0, 0, 0, __src, &__count);
      size_t v6 = __count;
      if (v9)
      {
        uint64_t v7 = v9;
      }
      else if (__count - 4097 < 0xFFFFFFFFFFFFF000)
      {
        uint64_t v7 = 3758604298;
      }
      else
      {
        uint64_t v10 = calloc(__count, 1uLL);
        *mach_port_t v5 = v10;
        size_t v6 = __count;
        if (v10)
        {
          *mach_port_t v3 = __count;
          memcpy(v10, __src, v6);
          uint64_t v7 = 0;
          size_t v6 = __count;
        }
        else
        {
          uint64_t v7 = 3758097085;
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_pubkey", ":", 2791, "", 0, "", "");
      size_t v6 = 4096;
      uint64_t v7 = 3758097084;
    }
  }
  memset_s(__src, v6, 0, v6);
  return v7;
}

uint64_t sub_100128B98(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x5Bu, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_delete_reset_token", ":", 2815, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100128C74(unsigned int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x5Eu, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_support_in_rm", ":", 2832, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100128D50(BOOL *a1)
{
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  mach_port_t v2 = sub_10011D344();
  if (v2)
  {
    uint64_t result = IOConnectCallMethod(v2, 0x6Bu, 0, 0, 0, 0, &output, &outputCnt, 0, 0);
    if (a1)
    {
      if (!result) {
        *a1 = output != 0;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_support_in_rm_is_set", ":", 2848, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_100128E54()
{
  mach_port_t v0 = sub_10011D344();
  if (v0) {
    return IOConnectCallMethod(v0, 0x5Fu, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_stage_stash", ":", 2865, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_100128EFC()
{
  return sub_10011E5C4(0);
}

uint64_t sub_100128F1C(uint64_t a1)
{
  return sub_10011E814(a1);
}

uint64_t sub_100128F38(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v12 = __s;
  *((void *)&v12 + 1) = &v15;
  *(void *)long long v13 = 4096;
  uint64_t v7 = 3758097090;
  if (v5 && v3)
  {
    mach_port_t v8 = sub_10011D344();
    if (v8)
    {
      mach_port_t v9 = v8;
      if (sub_10012EEF8(&v12, v5) && sub_10012F018(&v12, v6))
      {
        uint64_t v7 = 3758097098;
        if (ccder_blob_encode_tl())
        {
          uint64_t v10 = IOConnectCallMethod(v9, 0x55u, 0, 0, *((const void **)&v12 + 1), (size_t)&v15 - *((void *)&v12 + 1), 0, 0, __s, (size_t *)v13);
          if (!v10) {
            uint64_t v10 = sub_10012F888((uint64_t)__s, *(uint64_t *)v13, v3);
          }
          uint64_t v7 = v10;
        }
      }
      else
      {
        uint64_t v7 = 3758097098;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_get_blob_state", ":", 2900, "", 0, "", "");
      uint64_t v7 = 3758097084;
    }
  }
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v7;
}

uint64_t sub_100129114(long long *a1)
{
  char v7 = 0;
  uint64_t v5 = &v7;
  uint64_t v6 = 1;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  if (a1)
  {
    long long v3 = *a1;
    uint64_t v4 = *((void *)a1 + 2);
    uint64_t v1 = *((void *)&v3 + 1) | 0x10;
  }
  else
  {
    uint64_t v1 = 16;
  }
  *((void *)&v3 + 1) = v1;
  return sub_100128F38((uint64_t)&v3);
}

uint64_t sub_100129180(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  long long v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = 3758097098;
  uint64_t output = 0;
  uint64_t input = v6;
  uint32_t outputCnt = 1;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v10 = __s;
  *((void *)&v10 + 1) = &output;
  if (v3)
  {
    mach_port_t v7 = sub_10011D344();
    if (v7)
    {
      mach_port_t v8 = v7;
      if (sub_10012F018(&v10, v4))
      {
        if (ccder_blob_encode_tl())
        {
          uint64_t v5 = IOConnectCallMethod(v8, 0x4Eu, &input, 1u, *((const void **)&v10 + 1), (size_t)&output - *((void *)&v10 + 1), &output, &outputCnt, 0, 0);
          if (!v5) {
            *long long v3 = output;
          }
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_get_size", ":", 2943, "", 0, "", "");
      uint64_t v5 = 3758097084;
    }
  }
  else
  {
    uint64_t v5 = 3758097090;
  }
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v5;
}

uint64_t sub_100129324(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  long long v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v1;
  uint64_t input = v9;
  bzero(__s, 0x1000uLL);
  *(void *)&long long v16 = __s;
  *((void *)&v16 + 1) = &input;
  size_t v17 = 4096;
  uint64_t v10 = 3758097090;
  if (v7 && v5)
  {
    mach_port_t v11 = sub_10011D344();
    if (!v11)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_import", ":", 2971, "", 0, "", "");
      uint64_t v10 = 3758097084;
      goto LABEL_14;
    }
    mach_port_t v12 = v11;
    if (!ccder_blob_encode_body_tl()
      || !sub_10012EEF8(&v16, v7)
      || !sub_10012F018(&v16, v8)
      || !ccder_blob_encode_tl())
    {
      goto LABEL_12;
    }
    uint64_t v13 = IOConnectCallMethod(v12, 0x4Fu, &input, 1u, *((const void **)&v16 + 1), (size_t)&input - *((void *)&v16 + 1), 0, 0, __s, &v17);
    if (v13)
    {
      uint64_t v10 = v13;
      goto LABEL_14;
    }
    *(void *)&long long v15 = __s;
    *((void *)&v15 + 1) = &__s[v17];
    if (!ccder_blob_decode_range()) {
      goto LABEL_12;
    }
    if (!v3)
    {
      uint64_t v10 = 0;
      goto LABEL_14;
    }
    uint64_t v10 = 0;
    if ((sub_10012EF68(&v15, 0, v3) & 1) == 0) {
LABEL_12:
    }
      uint64_t v10 = 3758097098;
  }
LABEL_14:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

uint64_t sub_10012955C()
{
  return sub_100129180(0);
}

uint64_t sub_10012956C()
{
  return sub_100129180(0);
}

uint64_t sub_10012957C()
{
  return sub_10011DECC(0);
}

uint64_t sub_100129594()
{
  return sub_10011E360(0);
}

uint64_t sub_1001295B0()
{
  v1[0] = 0;
  v1[1] = 2;
  v1[2] = 0;
  return sub_10011D0DC((uint64_t)v1);
}

uint64_t sub_1001295F4(char a1)
{
  uint64_t v1 = 130;
  if ((a1 & 6) == 0) {
    uint64_t v1 = 2;
  }
  v3[0] = 0;
  v3[1] = v1;
  v3[2] = 0;
  return sub_10011D0DC((uint64_t)v3);
}

uint64_t sub_100129644()
{
  return sub_10011E5C4(0);
}

uint64_t sub_100129664(uint64_t a1, BOOL *a2)
{
  memset(v4, 0, sizeof(v4));
  uint64_t v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  if (!a2) {
    return 3758097090;
  }
  uint64_t result = sub_100128F38((uint64_t)v4);
  if (!result)
  {
    if (v5 == 1)
    {
      uint64_t result = 0;
      *a2 = (DWORD1(v7) & 0x8000000) != 0;
    }
    else
    {
      return 3758604312;
    }
  }
  return result;
}

uint64_t sub_100129720()
{
  return sub_10011E5C4(0);
}

uint64_t sub_100129740()
{
  return sub_10011E814(0);
}

uint64_t sub_100129764(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  uint64_t v11 = 3758097098;
  bzero(v16, 0x1000uLL);
  bzero(v15, 0x1000uLL);
  *(void *)&long long v14 = v16;
  *((void *)&v14 + 1) = &v17;
  *(void *)&long long v13 = v15;
  *((void *)&v13 + 1) = v16;
  if (sub_10012EEF8(&v14, v9)
    && sub_10012EEF8(&v14, v7)
    && ccder_blob_encode_tl()
    && sub_10012EEF8(&v13, v5)
    && sub_10012EEF8(&v13, v3)
    && ccder_blob_encode_tl())
  {
    return sub_10011E5C4(v10);
  }
  return v11;
}

uint64_t sub_1001298FC(uint64_t a1)
{
  return sub_10011E5C4(a1);
}

uint64_t sub_100129918(uint64_t a1)
{
  v2[3] = a1;
  memset(v2, 0, 24);
  return sub_10011E5C4((uint64_t)v2);
}

uint64_t sub_10012996C(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  bzero(v8, 0x4000uLL);
  uint64_t result = sub_10011E5C4(v6);
  if (!result)
  {
    if (ccder_decode_sequence_tl() && ccder_decode_tl())
    {
      __memcpy_chk();
      if (v5) {
        *uint64_t v5 = 0;
      }
      if (v3) {
        *uint64_t v3 = 0;
      }
      return 0;
    }
    else
    {
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_100129ACC()
{
  return sub_10011E5C4(0);
}

uint64_t sub_100129AEC(int a1)
{
  uint64_t v1 = 8;
  if (a1) {
    uint64_t v1 = 12;
  }
  uint64_t v4 = 0;
  uint64_t v5 = v1;
  uint64_t v6 = 0;
  uint64_t v2 = sub_10011E5C4((uint64_t)&v4);
  syslog(6, "aks_fv_prot_cmd_stash_kek(%llu) = %d", v5, v2);
  return v2;
}

uint64_t sub_100129B68()
{
  uint64_t v0 = sub_10011E5C4(0);
  syslog(6, "aks_fv_prot_cmd_stash_commit = %d", v0);
  return v0;
}

uint64_t sub_100129BC8()
{
  uint64_t v0 = sub_10011E5C4(0);
  syslog(6, "aks_fv_prot_cmd_stash_destroy = %d", v0);
  return v0;
}

uint64_t sub_100129C28()
{
  return sub_10011E814(0);
}

uint64_t sub_100129C48()
{
  return sub_10011E5C4(0);
}

uint64_t sub_100129C68(uint64_t a1)
{
  unsigned int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = 3758097084;
  uint64_t input = v1;
  bzero(__src, 0x8000uLL);
  size_t __count = 0x8000;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  if (v5)
  {
    mach_port_t v9 = sub_10011D344();
    if (v9)
    {
      mach_port_t v15 = v9;
      if (v7) {
        long long v16 = v7;
      }
      else {
        long long v16 = "";
      }
      sub_1001316DC((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, (uint64_t)v16);
      uint64_t v17 = IOConnectCallMethod(v15, 0x50u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
      if (v17)
      {
        uint64_t v8 = v17;
      }
      else
      {
        uint64_t v18 = calloc(__count, 1uLL);
        *uint64_t v5 = v18;
        if (v18)
        {
          memcpy(v18, __src, __count);
          uint64_t v8 = 0;
          *uint64_t v3 = (int)__count;
        }
        else
        {
          uint64_t v8 = 3758097085;
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_absinthe_collection", ":", 3220, "", 0, "", "");
    }
  }
  else
  {
    uint64_t v8 = 3758097090;
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  free(*(void **)&inputStructCnt[1]);
  return v8;
}

uint64_t sub_100129E70(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  long long v21 = 0;
  uint64_t input = a1;
  int v20 = 0;
  uint64_t v7 = 3758097090;
  if (a2 && a6 && a7)
  {
    mach_port_t v11 = sub_10011D344();
    if (v11)
    {
      mach_port_t v17 = v11;
      sub_1001316DC(&v21, (unsigned int *)&v20, 2, v12, v13, v14, v15, v16, a2);
      size_t v19 = *a7;
      uint64_t v7 = IOConnectCallMethod(v17, 0x51u, &input, 1u, v21, v20, 0, 0, a6, &v19);
      if (!v7) {
        *a7 = (int)v19;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_absinthe_generate", ":", 3253, "", 0, "", "");
      uint64_t v7 = 3758097084;
    }
  }
  free(v21);
  return v7;
}

uint64_t sub_100129FFC(unsigned int a1)
{
  input[0] = 0;
  input[1] = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x53u, input, 2u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drop_auxiliary_auth_by_uid", ":", 3280, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012A0D8(int a1)
{
  input[0] = 1;
  input[1] = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x53u, input, 2u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drop_auxiliary_auth_by_handle", ":", 3296, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012A1B8()
{
  mach_port_t v0 = sub_10011D344();
  if (v0) {
    return IOConnectCallMethod(v0, 0x5Cu, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lower_iteration_count", ":", 3310, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012A260(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x6Au, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_secret_drop", ":", 3326, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012A33C(uint64_t a1, uint64_t a2)
{
  if (a1 && a2 && !sub_10011FCB8(0xFFFFFFFFLL)) {
    sub_10012D640((uint64_t)off_100323368);
  }
  free(0);
  return 3758097084;
}

uint64_t sub_10012A408(uint64_t a1)
{
  return sub_10011FCB8(a1);
}

uint64_t sub_10012A418(uint64_t a1, void *a2)
{
  uint64_t v3 = 3758097084;
  uint64_t v8 = 0;
  mach_port_t v9 = 0;
  uint64_t v7 = 0;
  if (!sub_10011FCB8(a1)
    && sub_10012D550((uint64_t)off_1003233E8, (uint64_t)v9, (uint64_t)v9 + v8, (uint64_t)&v7))
  {
    if (a2)
    {
      time_t v4 = time(0);
      uint64_t v3 = 0;
      time_t v5 = v4 - v7;
      if (v4 <= v7) {
        time_t v5 = 0;
      }
      *a2 = v5;
    }
    else
    {
      uint64_t v3 = 0;
    }
  }
  free(v9);
  return v3;
}

uint64_t sub_10012A4C0(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v4 = 3758097090;
  uint64_t input = v1;
  bzero(__s, 0x1000uLL);
  rsize_t __n = 4096;
  mach_port_t v5 = sub_10011D344();
  if (!v5)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_internal_state", ":", 3405, "", 0, "", "");
    uint64_t v4 = 3758097084;
    goto LABEL_11;
  }
  if (!v3)
  {
LABEL_11:
    rsize_t v7 = 4096;
    goto LABEL_9;
  }
  uint64_t v6 = IOConnectCallMethod(v5, 0x8Eu, &input, 1u, 0, 0, 0, 0, __s, &__n);
  rsize_t v7 = __n;
  if (v6)
  {
    uint64_t v4 = v6;
  }
  else if (__n - 4097 >= 0xFFFFFFFFFFFFF000)
  {
    if (sub_10012F320((uint64_t)__s, __n, v3)) {
      uint64_t v4 = 3758097090;
    }
    else {
      uint64_t v4 = 0;
    }
    rsize_t v7 = __n;
  }
LABEL_9:
  memset_s(__s, v7, 0, v7);
  return v4;
}

uint64_t sub_10012A640(const void *a1, size_t a2, void *a3, size_t *a4)
{
  uint64_t input = 266;
  uint64_t result = 3758097090;
  if (a3 && a4)
  {
    mach_port_t v9 = sub_10011D344();
    if (v9)
    {
      size_t v10 = *a4;
      uint64_t result = IOConnectCallMethod(v9, 0x68u, &input, 1u, a1, a2, 0, 0, a3, &v10);
      if (!result) {
        *a4 = (int)v10;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fairplay_wrap", ":", 3431, "", 0, "", "");
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_10012A768(unsigned int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t input = ((unint64_t)a1 << 8) | 1;
  uint64_t result = 3758097090;
  if (a4 && a5)
  {
    mach_port_t v10 = sub_10011D344();
    if (v10)
    {
      size_t v11 = *a5;
      uint64_t result = IOConnectCallMethod(v10, 0x68u, &input, 1u, a2, a3, 0, 0, a4, &v11);
      if (!result) {
        *a5 = (int)v11;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_fairplay_generate_csk_internal", ":", 3455, "", 0, "", "");
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_10012A898(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return sub_10012A768(0, a1, a2, a3, a4);
}

uint64_t sub_10012A8B0(const void *a1, size_t a2, void *a3, size_t *a4)
{
  return sub_10012A768(1u, a1, a2, a3, a4);
}

uint64_t sub_10012A8C8(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  mach_port_t v5 = v4;
  size_t v7 = v6;
  mach_port_t v9 = v8;
  uint64_t v10 = v1;
  long long v19 = 0u;
  memset(v20, 0, sizeof(v20));
  bzero(__s, 0x4000uLL);
  size_t v16 = 0x4000;
  input[0] = 1;
  input[1] = v10;
  mach_port_t v11 = sub_10011D344();
  if (v11)
  {
    uint64_t v12 = IOConnectCallMethod(v11, 0x87u, input, 2u, v9, v7, 0, 0, __s, &v16);
    if (v12)
    {
      uint64_t v14 = v12;
    }
    else
    {
      __memcpy_chk();
      *uint64_t v3 = 44;
      uint64_t v13 = calloc(0x2CuLL, 1uLL);
      *mach_port_t v5 = v13;
      if (v13)
      {
        __memcpy_chk();
        uint64_t v14 = 0;
      }
      else
      {
        uint64_t v14 = 3758097085;
      }
    }
  }
  else
  {
    uint64_t v14 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_bak_get_beacon_internal", ":", 3491, "", 0, "", "");
  }
  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  return v14;
}

uint64_t sub_10012AAA0(int a1, unsigned int a2)
{
  uint64_t v2 = sub_10012A8C8(a1 ^ 1u | ((unint64_t)a2 << 16));
  if (v2) {
    return v2;
  }
  else {
    return 3758604312;
  }
}

uint64_t sub_10012ABE4(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  mach_port_t v5 = v4;
  size_t v7 = v6;
  mach_port_t v9 = v8;
  input[0] = 2;
  input[1] = v1;
  int v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v28 = 0u;
  memset(v27, 0, sizeof(v27));
  bzero(__s, 0x4000uLL);
  size_t v25 = 0x4000;
  mach_port_t v10 = sub_10011D344();
  if (v10)
  {
    uint64_t v11 = IOConnectCallMethod(v10, 0x87u, input, 2u, 0, 0, 0, 0, __s, &v25);
    if (v11)
    {
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v12 = 3758097085;
      __memcpy_chk();
      uint64_t v13 = calloc(0x28uLL, 1uLL);
      *mach_port_t v9 = v13;
      if (v13)
      {
        *size_t v7 = 40;
        long long v14 = *(_OWORD *)&v27[1];
        long long v15 = *(_OWORD *)&v27[3];
        v13[4] = v27[5];
        *(_OWORD *)uint64_t v13 = v14;
        *((_OWORD *)v13 + 1) = v15;
        size_t v16 = calloc(0x91uLL, 1uLL);
        *mach_port_t v5 = v16;
        if (v16)
        {
          uint64_t v12 = 0;
          *uint64_t v3 = 145;
          long long v17 = v29;
          *size_t v16 = v28;
          v16[1] = v17;
          long long v18 = v30;
          long long v19 = v31;
          long long v20 = v33;
          v16[4] = v32;
          v16[5] = v20;
          void v16[2] = v18;
          v16[3] = v19;
          long long v21 = v34;
          long long v22 = v35;
          long long v23 = v36;
          *((unsigned char *)v16 + 144) = v37;
          v16[7] = v22;
          v16[8] = v23;
          v16[6] = v21;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_bak_get_swizzler_internal", ":", 3551, "", 0, "", "");
    uint64_t v12 = 3758097084;
  }
  memset_s(__s, 0x4000uLL, 0, 0x4000uLL);
  memset_s(v27, 0xC4uLL, 0, 0xC4uLL);
  return v12;
}

uint64_t sub_10012AE3C()
{
  return sub_10012ABE4(0);
}

uint64_t sub_10012AE54(uint64_t a1)
{
  mach_port_t v2 = sub_10011F3D8();
  if (v2) {
    return IOConnectCallMethod(v2, 0xCu, 0, 0, *(const void **)a1, *(void *)(a1 + 8), 0, 0, 0, 0);
  }
  else {
    return 3758097084;
  }
}

uint64_t sub_10012AEB0(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  uint64_t v3 = v2;
  uint64_t v4 = (void *)v1;
  bzero(__src, 0x4000uLL);
  size_t __count = 0x4000;
  mach_port_t v5 = sub_10011D344();
  if (v5)
  {
    uint64_t v6 = 3758097090;
    if (v4 && v3)
    {
      uint64_t v7 = IOConnectCallMethod(v5, 0x96u, 0, 0, 0, 0, 0, 0, __src, &__count);
      if (v7)
      {
        uint64_t v6 = v7;
      }
      else
      {
        uint64_t v8 = calloc(__count, 1uLL);
        *uint64_t v4 = v8;
        if (v8)
        {
          size_t v9 = __count;
          *uint64_t v3 = __count;
          memcpy(v8, __src, v9);
          uint64_t v6 = 0;
        }
        else
        {
          uint64_t v6 = 3758097085;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_dsme_key", ":", 3600, "", 0, "", "");
    uint64_t v6 = 3758097084;
  }
  memset_s(__src, 0x4000uLL, 0, 0x4000uLL);
  return v6;
}

BOOL sub_10012B044(uint64_t a1, uint64_t a2)
{
  return a2 == 4 || a2 == 32;
}

uint64_t sub_10012B058()
{
  mach_port_t v0 = sub_10011D344();
  if (v0) {
    return IOConnectCallMethod(v0, 0x73u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_prewarm_sps", ":", 3627, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012B100(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 4294967285;
  if (a3 && a4 <= 0x30)
  {
    uint64_t v4 = 3758097084;
    mach_port_t v5 = sub_10011D344();
    if (v5)
    {
      mach_port_t v6 = v5;
      ccder_sizeof_raw_octet_string();
      ccder_sizeof_uint64();
      ccder_sizeof_raw_octet_string();
      uint64_t v7 = ccder_sizeof();
      size_t v8 = v7;
      __chkstk_darwin(v7);
      mach_port_t v10 = (char *)&v12 - v9;
      bzero((char *)&v12 - v9, v8);
      ccder_encode_raw_octet_string();
      ccder_encode_uint64();
      ccder_encode_raw_octet_string();
      if ((char *)ccder_encode_constructed_tl() == v10) {
        return IOConnectCallMethod(v6, 0x72u, 0, 0, v10, v8, 0, 0, 0, 0);
      }
      else {
        return 3758097090;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_sealed_hashes_set", ":", 3644, "", 0, "", "");
    }
  }
  return v4;
}

uint64_t sub_10012B318(const void *a1, size_t a2)
{
  mach_port_t v4 = sub_10011D344();
  if (v4) {
    return IOConnectCallMethod(v4, 0x90u, 0, 0, a1, a2, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_measure_and_seal_cryptex_manifest", ":", 3674, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012B3D0()
{
  mach_port_t v0 = sub_10011D344();
  if (v0) {
    return IOConnectCallMethod(v0, 0x95u, 0, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_seal_cryptex_manifest_lock", ":", 3688, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012B478(int a1, uint64_t a2, uint64_t a3)
{
  input[0] = a1;
  input[1] = a2;
  uint64_t input[2] = a3;
  mach_port_t v3 = sub_10011D344();
  if (v3) {
    return IOConnectCallMethod(v3, 0x85u, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lkgp_recover", ":", 3704, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012B558(int a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x8Au, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_memento_efface_blob", ":", 3720, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012B634(uint64_t a1)
{
  int v1 = __chkstk_darwin(a1);
  mach_port_t v3 = v2;
  uint64_t input = v1;
  bzero(__s, 0x1000uLL);
  rsize_t __n = 4096;
  mach_port_t v4 = sub_10011D344();
  if (v4)
  {
    uint64_t v5 = IOConnectCallMethod(v4, 0x8Bu, &input, 1u, 0, 0, 0, 0, __s, &__n);
    rsize_t v6 = __n;
    if (v5)
    {
      uint64_t v7 = v5;
    }
    else
    {
      uint64_t v7 = 3758097090;
      if (__n - 4097 >= 0xFFFFFFFFFFFFF000)
      {
        if (sub_10012F590((uint64_t)__s, __n, v3)) {
          uint64_t v7 = 3758097090;
        }
        else {
          uint64_t v7 = 0;
        }
        rsize_t v6 = __n;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_memento_get_state", ":", 3738, "", 0, "", "");
    uint64_t v7 = 3758097084;
    rsize_t v6 = 4096;
  }
  memset_s(__s, v6, 0, v6);
  return v7;
}

uint64_t sub_10012B7B8()
{
  mach_port_t v0 = sub_10011D344();
  if (v0) {
    return IOConnectCallMethod(v0, 0x89u, &input, 0, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_jcop_supports_updated_kud_policy", ":", 3758, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012B860(uint64_t a1)
{
  uint64_t input = a1;
  mach_port_t v1 = sub_10011D344();
  if (v1) {
    return IOConnectCallMethod(v1, 0x97u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_cx_window", ":", 3774, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10012B938(uint64_t a1)
{
  uint64_t v1 = __chkstk_darwin(a1);
  size_t v6 = 4096;
  if (!v1) {
    return 4294967285;
  }
  mach_port_t v2 = (void *)v1;
  mach_port_t v3 = sub_10011D344();
  if (v3)
  {
    mach_port_t v4 = v3;
    bzero(outputStruct, 0x1000uLL);
    uint64_t result = IOConnectCallMethod(v4, 0x98u, 0, 0, 0, 0, 0, 0, outputStruct, &v6);
    if (!result)
    {
      if (v6 == 8)
      {
        uint64_t result = 0;
        *mach_port_t v2 = outputStruct[0];
      }
      else
      {
        return 3758604298;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_cx_window", ":", 3791, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_10012BA98()
{
  return 0;
}

unint64_t sub_10012BB0C(unsigned int a1)
{
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  return 1000000000 * info.denom * (unint64_t)a1 / info.numer;
}

unint64_t sub_10012BB58(uint64_t a1)
{
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  return (unint64_t)info.numer * a1 / info.denom;
}

uint64_t sub_10012BB98()
{
  mach_timebase_info info = 0;
  mach_timebase_info(&info);
  return mach_continuous_time() * info.numer / info.denom / 0x3E8;
}

__darwin_time_t sub_10012BBEC()
{
  v1.tv_sec = 0;
  *(void *)&v1.tv_usec = 0;
  gettimeofday(&v1, 0);
  return v1.tv_sec;
}

uint64_t sub_10012BC1C(uint64_t a1)
{
  return 1000000 * a1;
}

unint64_t sub_10012BC2C(uint64_t a1)
{
  return (a1 + 999999) / 0xF4240uLL;
}

void *sub_10012BC44(unsigned int a1, unsigned int a2)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = v2 << 31 >> 31;
  if (v3 != v2 || v3 < 0)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s overflow%s\n", "aks", "", "", "", "circular_queue_init", ":", 341, "", 0, "", "");
    return 0;
  }
  else
  {
    uint64_t v5 = calloc(0x20uLL, 1uLL);
    size_t v6 = v5;
    if (v5)
    {
      v5[1] = 0;
      size_t v7 = (v3 & 0x1FFFFFFFFLL) * a2;
      *(_DWORD *)uint64_t v5 = a2;
      *((_DWORD *)v5 + 1) = v2;
      size_t v8 = calloc(v7, 1uLL);
      uint64_t v6[2] = v7;
      v6[3] = v8;
    }
  }
  return v6;
}

uint64_t sub_10012BD24(_DWORD *a1)
{
  unsigned int v3 = a1[2];
  unsigned int v2 = a1[3];
  uint64_t result = v2 - v3;
  if (v2 < v3) {
    return (result + a1[1]);
  }
  return result;
}

uint64_t sub_10012BD40(unsigned int *a1, const void *a2)
{
  unsigned int v3 = a1[3];
  unsigned int v4 = (v3 + 1) % a1[1];
  memcpy((void *)(*((void *)a1 + 3) + *a1 * v3), a2, *a1);
  a1[3] = v4;
  if (v4 == a1[2]) {
    a1[2] = (v4 + 1) % a1[1];
  }
  return 0;
}

uint64_t sub_10012BDAC(unsigned int *a1, void *__dst)
{
  unsigned int v2 = a1[2];
  if (v2 == a1[3]) {
    return 0xFFFFFFFFLL;
  }
  if (__dst)
  {
    memcpy(__dst, (const void *)(*((void *)a1 + 3) + *a1 * v2), *a1);
    unsigned int v2 = a1[2];
  }
  memset_s((void *)(*((void *)a1 + 3) + *a1 * v2), *a1, 0, *a1);
  uint64_t result = 0;
  a1[2] = (a1[2] + 1) % a1[1];
  return result;
}

uint64_t sub_10012BE38(unsigned int *a1, void *__dst)
{
  unsigned int v2 = a1[2];
  if (v2 == a1[3]) {
    return 0xFFFFFFFFLL;
  }
  memcpy(__dst, (const void *)(*((void *)a1 + 3) + *a1 * v2), *a1);
  return 0;
}

uint64_t sub_10012BE80(int *a1, void *a2, unsigned int *a3)
{
  unsigned int v7 = a1[2];
  unsigned int v6 = a1[3];
  unsigned int v8 = v6 - v7;
  if (v6 < v7) {
    v8 += a1[1];
  }
  if (!v8) {
    return 0;
  }
  unsigned int v9 = *a1 * v8;
  mach_port_t v10 = (char *)calloc(v9, 1uLL);
  if (!v10) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = v10;
  unsigned int v12 = a1[2];
  unsigned int v13 = a1[3];
  if (v13 <= v12)
  {
    if (v12 <= v13) {
      goto LABEL_13;
    }
    unsigned int v17 = a1[1] - v12;
    memcpy(v10, (const void *)(*((void *)a1 + 3) + *a1 * v12), *a1 * v17);
    if (v8 <= v17) {
      goto LABEL_13;
    }
    mach_port_t v10 = &v11[*a1 * v17];
    long long v14 = (const void *)*((void *)a1 + 3);
    size_t v15 = *a1 * (v8 - v17);
  }
  else
  {
    long long v14 = (const void *)(*((void *)a1 + 3) + *a1 * v12);
    size_t v15 = *a1 * v8;
  }
  memcpy(v10, v14, v15);
LABEL_13:
  unsigned int v18 = a1[1];
  int v19 = *a1;
  a1[2] = (a1[2] + v8) % v18;
  memset_s(*((void **)a1 + 3), v19 * v18, 0, v19 * v18);
  uint64_t result = 0;
  *a2 = v11;
  *a3 = v9;
  return result;
}

uint64_t sub_10012BFAC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  rsize_t v1 = (*(_DWORD *)a1 * *(_DWORD *)(a1 + 4));
  return memset_s(*(void **)(a1 + 24), v1, 0, v1);
}

void sub_10012BFCC(void *a1)
{
  *((void *)a1 + 1) = 0;
  rsize_t v2 = (*(_DWORD *)a1 * *((_DWORD *)a1 + 1));
  memset_s(*((void **)a1 + 3), v2, 0, v2);
  memset_s(*((void **)a1 + 3), *((void *)a1 + 2), 0, *((void *)a1 + 2));
  free(*((void **)a1 + 3));
  memset_s(a1, 0x20uLL, 0, 0x20uLL);

  free(a1);
}

uint64_t sub_10012C048(unsigned int a1)
{
  return (a1 >> 5) & 1;
}

BOOL sub_10012C050(uint8x16_t *a1)
{
  int8x16_t v1 = (int8x16_t)vmovl_high_u8(*a1);
  int8x16_t v2 = (int8x16_t)vmovl_u8(*(uint8x8_t *)a1->i8);
  int8x16_t v3 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8(*(int8x8_t *)v2.i8, *(int8x8_t *)v1.i8), vorr_s8((int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL))));
  return vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) != 0;
}

BOOL sub_10012C094(unsigned __int8 *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  int v2 = 0;
  do
  {
    int v3 = *a1++;
    v2 |= v3;
    --a2;
  }
  while (a2);
  return v2 != 0;
}

_DWORD *sub_10012C0C0(_DWORD *result)
{
  if (result) {
    return (_DWORD *)(*result != 0);
  }
  return result;
}

uint64_t sub_10012C0D4(char a1, int a2)
{
  return a1 & 0x1F | (32 * a2);
}

uint64_t sub_10012C0DC(unsigned int a1)
{
  return (a1 >> 6) & 1;
}

uint64_t sub_10012C0E4(int a1)
{
  return a1 & 0xFFFFFFBF;
}

uint64_t sub_10012C0EC(int a1)
{
  return a1 | 0x40u;
}

uint64_t sub_10012C0F4(char a1)
{
  char v1 = a1 & 0x1F;
  if ((a1 & 0x1Fu) >= 0x14) {
    char v1 = -1;
  }
  return ((a1 & 0x1Fu) < 0x14) & (0xC3FC0u >> v1);
}

uint64_t sub_10012C11C(char a1)
{
  if ((a1 & 0x1Fu) > 0x13) {
    return 0xFFFFFFFFLL;
  }
  else {
    return a1 & 0x1F;
  }
}

uint64_t sub_10012C12C(char a1)
{
  unsigned int v1 = a1 & 0x1F;
  if (v1 > 0x13) {
    unsigned int v1 = -1;
  }
  return (v1 < 0x12) & (0x2E03Eu >> v1);
}

uint64_t sub_10012C154(char a1)
{
  return a1 & 0xF;
}

BOOL sub_10012C15C(int a1, int a2)
{
  return ((a2 ^ a1) & 0xF) == 0;
}

uint64_t sub_10012C16C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _cc_cmp_safe(a3, a1, a2);
}

uint64_t sub_10012C180(const char *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  unsigned int v4 = a1;
  char v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)__str = 0u;
  long long v17 = 0u;
  uint64_t v5 = &__stdoutp;
  if (a3 >= 0x41)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s %sdump %s (len = %zd)%s%s\n", "aks", "", "", "", "dump_bytes_internal", ":", 786, "", 0, "", "", a1, a3, "", "");
    unsigned int v4 = "";
  }
  else if (!a3)
  {
    return memset_s(__str, 0x81uLL, 0, 0x81uLL);
  }
  unint64_t v6 = 0;
  unint64_t v15 = v3;
  do
  {
    unsigned int v7 = v5;
    if (v3 - v6 >= 0x40) {
      uint64_t v8 = 64;
    }
    else {
      uint64_t v8 = v3 - v6;
    }
    if (v8)
    {
      unsigned int v9 = (unsigned __int8 *)(a2 + v6);
      mach_port_t v10 = __str;
      uint64_t v11 = v8;
      do
      {
        int v12 = *v9++;
        snprintf(v10, 3uLL, "%02x", v12);
        v10 += 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v5 = v7;
    fprintf(*v7, "%s%s:%s%s%s%s%u:%s%u:%s %s%s%s[%04zu,%04zu): %s%s%s%s\n", "aks", "", "", "", "dump_bytes_internal", ":", 796, "", 0, "", "", v4, "", v6, v8 + v6, "", __str,
      "",
      "");
    v6 += v8;
    unint64_t v3 = v15;
  }
  while (v6 < v15);
  return memset_s(__str, 0x81uLL, 0, 0x81uLL);
}

unsigned char *sub_10012C360(unsigned __int8 *a1, unint64_t a2)
{
  if (a2 >= 0x10) {
    uint64_t v2 = 16;
  }
  else {
    uint64_t v2 = a2;
  }
  if (v2)
  {
    unsigned int v4 = byte_10032EB10;
    uint64_t v5 = v2;
    do
    {
      int v6 = *a1++;
      snprintf(v4, 3uLL, "%02x", v6);
      v4 += 2;
      --v5;
    }
    while (v5);
  }
  byte_10032EB10[2 * v2] = 0;
  return byte_10032EB10;
}

uint64_t sub_10012C3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(__s, 0, sizeof(__s));
  if (a4 == 3)
  {
    ccsha256_di();
    cchmac();
    uint64_t v5 = 0;
    *(_WORD *)a3 = __s[0];
    *(unsigned char *)(a3 + 2) = BYTE2(__s[0]);
  }
  else
  {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v5;
}

uint64_t sub_10012C4C0(const char *a1, uint64_t a2, uint64_t a3)
{
  char v6 = 0;
  __int16 v5 = 0;
  sub_10012C3F4(a2, a3, (uint64_t)&v5, 3);
  return sub_10012C180(a1, (uint64_t)&v5, 3uLL);
}

char *sub_10012C518(char *result, unint64_t a2)
{
  if (a2 >= 2)
  {
    unint64_t v2 = a2 >> 1;
    unint64_t v3 = &result[a2 - 1];
    do
    {
      char v4 = *result;
      *result++ = *v3;
      *v3-- = v4;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_10012C548(unsigned __int8 *a1, unint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v5 = 0xFFFFFFFFLL;
  if ((a2 & 1) == 0)
  {
    char v6 = a1;
    if (a1)
    {
      if (a3 && a4)
      {
        unint64_t v9 = a2 >> 1;
        mach_port_t v10 = calloc(a2 >> 1, 1uLL);
        if (v10)
        {
          if (a2 >= 2)
          {
            if (v9 <= 1) {
              uint64_t v11 = 1;
            }
            else {
              uint64_t v11 = a2 >> 1;
            }
            int v12 = v10;
            do
            {
              int v13 = *v6;
              unsigned int v14 = v13 - 48;
              unsigned int v15 = v13 - 97;
              if ((v13 - 65) >= 6) {
                char v16 = -1;
              }
              else {
                char v16 = v13 - 55;
              }
              char v17 = v13 - 87;
              if (v15 > 5) {
                char v17 = v16;
              }
              if (v14 < 0xA) {
                char v17 = v14;
              }
              char v18 = 16 * v17;
              int v19 = v6[1];
              unsigned int v20 = v19 - 48;
              unsigned int v21 = v19 - 97;
              if ((v19 - 65) >= 6) {
                char v22 = -1;
              }
              else {
                char v22 = v19 - 55;
              }
              char v23 = v19 - 87;
              if (v21 > 5) {
                char v23 = v22;
              }
              if (v20 < 0xA) {
                char v23 = v20;
              }
              *v12++ = v23 | v18;
              v6 += 2;
              --v11;
            }
            while (v11);
          }
          uint64_t v5 = 0;
          *a3 = v10;
          *a4 = v9;
        }
        else
        {
          return 4294967279;
        }
      }
    }
  }
  return v5;
}

uint64_t sub_10012C650(uint64_t result)
{
  if (result == 0 || result >= 0xFFFFFFDA) {
    return dword_10028ABA0[(int)result + 38];
  }
  return result;
}

uint64_t sub_10012C66C(void *a1, uint64_t a2, char a3)
{
  memset_s(a1, 0x10uLL, 0, 0x10uLL);
  if (a3) {
    return 4294967285;
  }
  if (a2 && *(void *)a2 && (size_t v7 = *(void *)(a2 + 8)) != 0)
  {
    uint64_t v8 = calloc(v7, 1uLL);
    if (v8)
    {
      *a1 = v8;
      unint64_t v9 = *(const void **)a2;
      a1[1] = *(void *)(a2 + 8);
      memcpy(v8, v9, *(void *)(a2 + 8));
      return 0;
    }
    else
    {
      return 4294967279;
    }
  }
  else
  {
    uint64_t result = 0;
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

uint64_t sub_10012C704(uint64_t result, int a2, const char *a3)
{
  if ((result & 1) == 0)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s failed REQUIRE condition (%s:%d)\n%s\n", "aks", "", "", "", "REQUIRE_func", ":", 1047, "", 0, "", a3, a2, "");
    abort();
  }
  return result;
}

uint64_t sub_10012C778(long long *a1, long long *a2)
{
  memset(v14, 0, sizeof(v14));
  sub_1001307B8((uint64_t)v14, 0x20u);
  cccurve25519_make_pub();
  long long v8 = 0u;
  long long v9 = 0u;
  int __s = 0x1000000;
  long long v4 = a2[1];
  long long v10 = *a2;
  long long v11 = v4;
  long long v5 = a1[1];
  long long v12 = *a1;
  long long v13 = v5;
  cccurve25519();
  ccsha256_di();
  ccdigest();
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  memset_s(v14, 0x20uLL, 0, 0x20uLL);
  return 0;
}

uint64_t sub_10012C864(int *a1, uint64_t (*a2)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), char a3, uint64_t *a4, unsigned int a5, uint64_t a6, unsigned int *a7)
{
  unsigned int v32 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  memset(__s, 0, sizeof(__s));
  uint64_t v8 = 0xFFFFFFFFLL;
  if (!a6 || !a7) {
    goto LABEL_40;
  }
  if (!a1)
  {
LABEL_14:
    if (a2)
    {
      if (sub_10011D058(a5, &v32))
      {
        if (*a7 < v32) {
          goto LABEL_40;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        unsigned int v20 = a2;
        unsigned int v21 = a4;
        goto LABEL_38;
      }
    }
    else
    {
      if ((a3 & 4) != 0)
      {
        if ((a5 & 0xF) != 0 || *a7 < a5) {
          goto LABEL_40;
        }
        unsigned int v32 = a5;
        uint64_t v29 = ccaes_cbc_encrypt_mode();
        sub_10012D0FC(v29, 32, (uint64_t)(a1 + 2), (uint64_t)&unk_10032F838, a5 & 0xFFFFFFF0);
LABEL_39:
        uint64_t v8 = 0;
        *a7 = v32;
        goto LABEL_40;
      }
      if (sub_10011D058(a5, &v32))
      {
        if (*a7 < v32) {
          goto LABEL_40;
        }
        if ((a3 & 8) != 0)
        {
          ccsha256_di();
          cchkdf();
          char v18 = __s;
        }
        else
        {
          char v18 = a1 + 2;
        }
        unsigned int v19 = 32;
        unsigned int v20 = 0;
        unsigned int v21 = a4;
LABEL_38:
        if (sub_10011CC18((uint64_t)v18, v19, 0xA6A6A6A6A6A6A6A6, v20, v21, a5, (void *)a6, &v32)) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
    }
    uint64_t v8 = 4294967285;
    if ((a3 & 8) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  int v14 = *a1;
  if ((*a1 - 1) >= 2)
  {
    if (v14) {
      goto LABEL_40;
    }
    goto LABEL_14;
  }
  if ((a3 & 4) != 0) {
    unsigned int v15 = 64;
  }
  else {
    unsigned int v15 = 72;
  }
  unsigned int v32 = v15;
  if (!a2 && a5 == 32 && *a7 >= v15)
  {
    if (v14 == 1)
    {
      sub_10012C778((long long *)(a1 + 9), &v34);
    }
    else
    {
      long long v23 = *(_OWORD *)(a1 + 5);
      long long v34 = *(_OWORD *)(a1 + 1);
      long long v35 = v23;
      long long v24 = *(_OWORD *)(a1 + 13);
      long long v36 = *(_OWORD *)(a1 + 9);
      long long v37 = v24;
    }
    if ((a3 & 0x80) == 0)
    {
      long long v25 = v35;
      *(_OWORD *)a6 = v34;
      *(_OWORD *)(a6 + 16) = v25;
      if ((a3 & 4) != 0)
      {
        uint64_t v28 = ccaes_cbc_encrypt_mode();
        sub_10012D0FC(v28, 32, (uint64_t)&v36, (uint64_t)&unk_10032F838, 0x20uLL);
        goto LABEL_34;
      }
      int v31 = 40;
      if ((a3 & 8) != 0)
      {
        ccsha256_di();
        cchkdf();
        CFTypeID v27 = (void *)(a6 + 32);
        CFTypeID v26 = __s;
      }
      else
      {
        CFTypeID v26 = &v36;
        CFTypeID v27 = (void *)(a6 + 32);
      }
      if (!sub_10011CC18((uint64_t)v26, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, a4, 0x20u, v27, &v31))
      {
LABEL_34:
        uint64_t v8 = 0;
        *a7 = v15;
        if ((a3 & 8) == 0) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
    }
  }
LABEL_40:
  if ((a3 & 8) != 0) {
LABEL_41:
  }
    memset_s(__s, 0x20uLL, 0, 0x20uLL);
LABEL_42:
  memset_s(&v34, 0x40uLL, 0, 0x40uLL);
  return v8;
}

uint64_t sub_10012CBD0(long long *a1, uint64_t a2, long long *a3)
{
  long long v8 = 0u;
  long long v7 = 0u;
  long long v3 = a1[1];
  long long v9 = *a1;
  long long v10 = v3;
  long long v4 = a3[1];
  long long v11 = *a3;
  int __s = 0x1000000;
  long long v12 = v4;
  cccurve25519();
  ccsha256_di();
  ccdigest();
  memset_s(&__s, 0x64uLL, 0, 0x64uLL);
  return 0;
}

uint64_t sub_10012CC90(uint64_t a1, uint64_t (*a2)(void, void *, unint64_t *, unint64_t *, uint64_t), char a3, void *a4, unsigned int a5, void *a6, unsigned int *a7)
{
  unsigned int v24 = 0;
  memset(v26, 0, sizeof(v26));
  uint64_t v8 = 0xFFFFFFFFLL;
  if (a4 && a5)
  {
    if (!a1) {
      goto LABEL_6;
    }
    if (*(_DWORD *)a1 != 1)
    {
      if (!*(_DWORD *)a1)
      {
LABEL_6:
        if (a5 <= 0x28)
        {
          if (a2)
          {
            if (sub_10011D0B4(a5, &v24) && *a7 >= v24)
            {
              unsigned int v15 = 0;
              unsigned int v16 = 0;
              char v17 = a2;
              goto LABEL_30;
            }
          }
          else if ((a3 & 4) != 0)
          {
            if ((a5 & 0xF) == 0 && *a7 >= a5)
            {
              unsigned int v24 = a5;
              uint64_t v20 = ccaes_cbc_decrypt_mode();
              sub_10012D0FC(v20, 32, a1 + 8, (uint64_t)&unk_10032F838, a5 & 0xFFFFFFF0);
LABEL_31:
              uint64_t v8 = 0;
              *a7 = v24;
              goto LABEL_35;
            }
          }
          else if (sub_10011D0B4(a5, &v24) && *a7 >= v24)
          {
            if ((a3 & 8) != 0)
            {
              ccsha256_di();
              cchkdf();
              unsigned int v15 = v26;
            }
            else
            {
              unsigned int v15 = (_OWORD *)(a1 + 8);
            }
            unsigned int v16 = 32;
            char v17 = 0;
LABEL_30:
            if (!sub_10011CFEC((uint64_t)v15, v16, 0xA6A6A6A6A6A6A6A6, v17, a4, a5, a6, &v24)) {
              goto LABEL_31;
            }
            goto LABEL_40;
          }
        }
LABEL_38:
        uint64_t v8 = 4294967285;
        goto LABEL_35;
      }
LABEL_22:
      uint64_t v8 = 0xFFFFFFFFLL;
      goto LABEL_35;
    }
    unsigned int v24 = 32;
    if (*a7 < 0x20) {
      goto LABEL_38;
    }
    memset(__s, 0, sizeof(__s));
    if ((a3 & 4) != 0)
    {
      if (a5 != 64) {
        goto LABEL_38;
      }
      sub_10012CBD0((long long *)a4, a1 + 4, (long long *)(a1 + 36));
      uint64_t v21 = ccaes_cbc_decrypt_mode();
      sub_10012D0FC(v21, 32, (uint64_t)__s, (uint64_t)&unk_10032F838, 0x20uLL);
    }
    else
    {
      if (a5 != 72) {
        goto LABEL_38;
      }
      sub_10012CBD0((long long *)a4, a1 + 4, (long long *)(a1 + 36));
      if (a3 < 0) {
        goto LABEL_22;
      }
      int v23 = 32;
      if ((a3 & 8) != 0)
      {
        ccsha256_di();
        cchkdf();
        char v18 = a4 + 4;
        unsigned int v19 = v26;
      }
      else
      {
        char v18 = a4 + 4;
        unsigned int v19 = __s;
      }
      if (sub_10011CFEC((uint64_t)v19, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, v18, 0x28u, a6, &v23))
      {
        memset_s(__s, 0x20uLL, 0, 0x20uLL);
LABEL_40:
        uint64_t v8 = 4294967277;
        goto LABEL_35;
      }
    }
    memset_s(__s, 0x20uLL, 0, 0x20uLL);
    uint64_t v8 = 0;
    *a7 = 32;
  }
LABEL_35:
  if ((a3 & 8) != 0) {
    memset_s(v26, 0x20uLL, 0, 0x20uLL);
  }
  return v8;
}

uint64_t sub_10012CFE4(uint64_t a1, void *a2, size_t *a3)
{
  size_t v5 = ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
  char v6 = calloc(v5, 1uLL);
  if (!v6) {
    return 4294967279;
  }
  long long v7 = v6;
  ccec_export_pub();
  uint64_t result = 0;
  *a2 = v7;
  *a3 = v5;
  return result;
}

unint64_t sub_10012D064()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

unint64_t sub_10012D088()
{
  return (((unint64_t)(cczp_bitlen() + 7) >> 2) & 0x3FFFFFFFFFFFFFFELL) + 9;
}

unint64_t sub_10012D0B0()
{
  return ((unint64_t)(cczp_bitlen() + 7) >> 2) | 1;
}

unint64_t sub_10012D0D8()
{
  return (unint64_t)(cczp_bitlen() + 7) >> 3;
}

uint64_t sub_10012D0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return _cccbc_one_shot(a1, a2, a3, a4, a5 >> 4);
}

uint64_t sub_10012D104(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return _ccecb_one_shot(a1, a2, a3, a4 >> 4);
}

uint64_t sub_10012D10C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return _cccbc_update(a1, a2, a3, a4 >> 4);
}

BOOL sub_10012D114()
{
  return !ccec_import_pub() && ccn_read_uint() == 0;
}

uint64_t sub_10012D190()
{
  return 1;
}

uint64_t sub_10012D1C8(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a5 + 8) >= *(void *)a5)
  {
    char v13 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      BOOL v11 = sub_10012D2C8(*(const void **)(*(void *)(a5 + 24) + v9), *(void *)(*(void *)(a5 + 24) + v9)+ *(unsigned __int8 *)(*(void *)(*(void *)(a5 + 24) + v9) + 1)+ 2, a1);
      if (v11) {
        break;
      }
      ++v10;
      v9 += 40;
      if (v10 >= *(void *)a5) {
        goto LABEL_10;
      }
    }
    int v14 = (void *)(*(void *)(a5 + 24) + v9);
    if (v14[1])
    {
      char v12 = 0;
      *(unsigned char *)(a5 + 16) = 1;
    }
    else
    {
      ++*(void *)(a5 + 8);
      v14[1] = a3;
      _OWORD v14[2] = a3 + a4;
      v14[3] = a3;
      v14[4] = a3 + a4;
      char v12 = 1;
    }
LABEL_10:
    char v13 = v12 | !v11;
  }
  return v13 & 1;
}

BOOL sub_10012D2B0(unsigned __int8 *a1, const void *a2)
{
  return sub_10012D2C8(a1, (uint64_t)&a1[a1[1] + 2], a2);
}

BOOL sub_10012D2C8(const void *a1, uint64_t a2, const void *a3)
{
  size_t v5 = sub_10012D334((uint64_t)a1);
  return v5 == sub_10012D334((uint64_t)a3) && memcmp(a1, a3, v5) == 0;
}

uint64_t sub_10012D334(uint64_t a1)
{
  if (ccder_blob_decode_tag() && ccder_blob_decode_len()) {
    return a1 - a1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10012D39C()
{
  uint64_t result = ccder_blob_decode_range();
  if (result)
  {
    if (ccder_blob_decode_sequence_tl())
    {
      uint64_t result = ccder_blob_decode_tl();
      if (result) {
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_10012D474(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    sub_10012D39C();
    if (a2)
    {
      if (a3)
      {
        *a2 = 0;
        *a3 = 0;
      }
    }
  }
  return 0;
}

BOOL sub_10012D4EC(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v8 = sub_10012D2C8(*(const void **)a5, *(void *)a5 + *(unsigned __int8 *)(*(void *)a5 + 1) + 2, a1);
  if (v8)
  {
    *(unsigned char *)(a5 + 24) = 1;
    *(void *)(a5 + 8) = a3;
    *(void *)(a5 + 16) = a3 + a4;
  }
  return !v8;
}

uint64_t sub_10012D550(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  if (result)
  {
    sub_10012D39C();
    return 0;
  }
  return result;
}

uint64_t sub_10012D5D4()
{
  return 0;
}

uint64_t sub_10012D640(uint64_t result)
{
  if (result)
  {
    sub_10012D39C();
    return 0;
  }
  return result;
}

double sub_10012D6E4(long long *a1, uint64_t a2, _DWORD *a3, void *a4)
{
  long long v8 = *a1;
  if (ccder_blob_decode_range())
  {
    *a4 = 0;
    *a3 = 0;
    double result = *(double *)&v8;
    *a1 = v8;
  }
  return result;
}

uint64_t sub_10012D754(uint64_t a1, uint64_t a2, unsigned int (*a3)(uint64_t, void, uint64_t), uint64_t a4)
{
  *(void *)&long long v12 = a1;
  *((void *)&v12 + 1) = a2;
  uint64_t v6 = ccder_blob_decode_range();
  if (v6)
  {
    uint64_t v11 = 0;
    uint64_t v7 = v12;
    if (sub_10012D808(&v12, &v10, &v11))
    {
      do
      {
        uint64_t v8 = v12 + v11;
        if (!a3(v7, v12 + v11 - v7, a4)) {
          break;
        }
        *(void *)&long long v12 = v8;
        uint64_t v7 = v8;
      }
      while ((sub_10012D808(&v12, &v10, &v11) & 1) != 0);
    }
  }
  return v6;
}

uint64_t sub_10012D808(long long *a1, void *a2, void *a3)
{
  long long v7 = *a1;
  uint64_t result = ccder_blob_decode_tag();
  if (result)
  {
    uint64_t result = ccder_blob_decode_len();
    if (result)
    {
      *a1 = v7;
      *a2 = 0;
      *a3 = 0;
      return 1;
    }
  }
  return result;
}

uint64_t sub_10012D888()
{
  return 0;
}

uint64_t sub_10012D8E4(void **a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    unint64_t v2 = *a1;
    if (!*a1) {
      break;
    }
    long long v3 = (void *)*((void *)v2 + 1);
    *a1 = *(void **)v2;
    if (v3)
    {
      memset_s(v3, *((void *)v2 + 2), 0, *((void *)v2 + 2));
      free(*((void **)v2 + 1));
    }
    memset_s(v2, 0x18uLL, 0, 0x18uLL);
    free(v2);
  }
  return 0;
}

uint64_t sub_10012D964(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v2 = (void **)a1;
  uint64_t result = (uint64_t)sub_10012DA00(a1, a2);
  if (result)
  {
    uint64_t v4 = result;
    for (uint64_t i = *v2; i != (void *)result; uint64_t i = (void *)*i)
      unint64_t v2 = (void **)i;
    *unint64_t v2 = *(void **)result;
    uint64_t v6 = *(void **)(result + 8);
    if (v6)
    {
      memset_s(v6, *(void *)(v4 + 16), 0, *(void *)(v4 + 16));
      free(*(void **)(v4 + 8));
    }
    memset_s((void *)v4, 0x18uLL, 0, 0x18uLL);
    free((void *)v4);
    return 0;
  }
  return result;
}

void *sub_10012DA00(void *a1, unsigned __int8 *a2)
{
  if (!a1) {
    return 0;
  }
  unint64_t v2 = (void *)*a1;
  if (*a1)
  {
    do
    {
      size_t v5 = (const void *)v2[1];
      if (ccder_blob_decode_sequence_tl() && sub_10012D2C8(a2, (uint64_t)&a2[a2[1] + 2], v5)) {
        break;
      }
      unint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return v2;
}

uint64_t sub_10012DA84(void *a1, unsigned __int8 *a2, int a3, void *a4, void *a5)
{
  uint64_t v8 = sub_10012DA00(a1, a2);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = 1;
  if (a4)
  {
    if (a5)
    {
      uint64_t v10 = v8[1] + v8[2];
      *(void *)&long long v15 = v8[1];
      *((void *)&v15 + 1) = v10;
      uint64_t v9 = ccder_blob_decode_sequence_tl();
      if (v9)
      {
        if (sub_10012DB64(&v15, 12, 0, 0))
        {
          uint64_t v11 = v15;
          if (ccder_blob_decode_tag())
          {
            if (ccder_blob_decode_len())
            {
              uint64_t v13 = 0;
              uint64_t v12 = v15;
              if (a3)
              {
                uint64_t v13 = (v15 - v11);
                uint64_t v12 = v11;
              }
              *a4 = v12;
              *a5 = v13;
            }
          }
        }
      }
    }
  }
  return v9;
}

uint64_t sub_10012DB64(long long *a1, uint64_t a2, uint64_t a3, int a4)
{
  long long v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0 || a3 && a4) {
    return 0;
  }
  *a1 = v8;
  return 1;
}

uint64_t sub_10012DBF4(void *a1, char *__s, void *a3, size_t a4)
{
  memset(v18, 0, sizeof(v18));
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  v11[0] = 12;
  v11[1] = strlen(__s);
  long long v7 = (unsigned __int8 *)sub_10012DD20((uint64_t)v11);
  uint64_t result = 0xFFFFFFFFLL;
  if (a3 && v7)
  {
    __memcpy_chk();
    __src = 0;
    uint64_t v10 = 0;
    if (sub_10012DA84(a1, v7, 0, &__src, &v10))
    {
      if (v10 == a4)
      {
        memcpy(a3, __src, a4);
        return 0;
      }
      else
      {
        return 4294967277;
      }
    }
    else
    {
      return 4294967293;
    }
  }
  return result;
}

uint64_t sub_10012DD20(uint64_t a1)
{
  if ((ccder_blob_decode_tl() & 1) == 0)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s bad 1%s\n", "aks", "", "", "", "der_key_validate");
    return 0;
  }
  return a1;
}

uint64_t sub_10012DE20(void *a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = sub_10012DA84(a1, a2, 1, &v7, &v8);
  uint64_t v5 = v4;
  if (a3 && v4) {
    *a3 = sub_10012D5D4();
  }
  return v5;
}

uint64_t sub_10012DE7C(void *a1, unsigned __int8 *a2, unsigned char *a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v4 = sub_10012DA84(a1, a2, 1, &v7, &v8);
  uint64_t v5 = v4;
  if (a3 && v4) {
    *a3 = sub_10012D888();
  }
  return v5;
}

uint64_t sub_10012DED8(uint64_t a1)
{
  if (a1) {
    return sub_10012D39C() - 1;
  }
  else {
    return 4294967285;
  }
}

uint64_t sub_10012DF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = (unsigned __int8 *)sub_10012DD20(a1);
  if (v8)
  {
    uint64_t v9 = (uint64_t)v8;
    if (!sub_10012D964(a5, v8) && !sub_10012E1C0(a5, v9, a3, a3 + a4)) {
      return 1;
    }
  }
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s fail%s\n", "aks", "", "", "", "_merge_dict_cb", ":", 647, "", 0, "", "");
  return 0;
}

uint64_t sub_10012DFF0(void *a1, void *a2, size_t *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t v7 = (void *)*a1;
        if (*a1)
        {
          unint64_t v8 = 0;
          uint64_t v9 = 0;
          uint64_t v10 = 0;
          do
          {
            v10 += v7[2];
            uint64_t v7 = (void *)*v7;
            v9 -= 16;
            --v8;
          }
          while (v7);
          if (v8 >= 0xF000000000000001 && (rsize_t v11 = -v9, (v12 = calloc(-v9, 1uLL)) != 0))
          {
            long long v13 = v12;
            long long v14 = (void *)*a1;
            if (*a1)
            {
              long long v15 = v12;
              do
              {
                *v15++ = *(_OWORD *)(v14 + 1);
                long long v14 = (void *)*v14;
              }
              while (v14);
            }
            qsort(v12, -(uint64_t)v8, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_100130490);
            size_t v16 = ccder_sizeof();
            long long v17 = (char *)calloc(v16, 1uLL);
            char v18 = v17;
            if (v17)
            {
              long long v25 = v17;
              CFTypeID v26 = &v17[v16];
              unint64_t v19 = v8 - 1;
              uint64_t v20 = (uint64_t)v13 - v9 - 8;
              while (!__CFADD__(v19++, 1))
              {
                uint64_t v22 = v20 - 16;
                char v23 = ccder_blob_encode_body();
                uint64_t v20 = v22;
                if ((v23 & 1) == 0) {
                  goto LABEL_16;
                }
              }
              if (!ccder_blob_encode_tl() || v25 != v26)
              {
LABEL_16:
                uint64_t v3 = 0xFFFFFFFFLL;
                goto LABEL_20;
              }
              uint64_t v3 = 0;
              *a2 = v18;
              *a3 = v16;
              char v18 = 0;
            }
            else
            {
              uint64_t v3 = 4294967279;
            }
LABEL_20:
            memset_s(v13, v11, 0, v11);
            free(v13);
            if (v18)
            {
              memset_s(v18, v16, 0, v16);
              free(v18);
            }
          }
          else
          {
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }
  return v3;
}

uint64_t sub_10012E1C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a4)
  {
    if (sub_10012D334(a3) <= (unint64_t)(a4 - a3))
    {
      size_t v6 = ccder_sizeof();
      uint64_t v7 = (char *)calloc(v6, 1uLL);
      if (!v7) {
        return 4294967279;
      }
      unint64_t v8 = v7;
      size_t v16 = &v7[v6];
      if (ccder_blob_encode_body())
      {
        int v9 = ccder_blob_encode_body();
        uint64_t v10 = v16;
        if (!v9) {
          uint64_t v10 = 0;
        }
        long long v17 = v10;
        int v11 = ccder_blob_encode_tl();
        long long v12 = v17;
        if (!v11) {
          long long v12 = 0;
        }
        if (v12 && v12 == v8)
        {
          long long v14 = calloc(0x18uLL, 1uLL);
          if (v14)
          {
            long long v15 = v14;
            uint64_t result = 0;
            v15[1] = v8;
            void v15[2] = v6;
            *long long v15 = *a1;
            *a1 = v15;
            return result;
          }
        }
      }
      memset_s(v8, v6, 0, v6);
      free(v8);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_10012E330(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10012E1C0(a1, a2, a3, a3 + *(unsigned __int8 *)(a3 + 1) + 2);
}

uint64_t sub_10012E340(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3)
  {
    ccder_sizeof();
    size_t v5 = ccder_sizeof();
    size_t v6 = (char *)calloc(v5, 1uLL);
    if (v6)
    {
      uint64_t v7 = v6;
      long long v15 = &v6[v5];
      if (!ccder_blob_encode_body() || !ccder_blob_encode_tl()) {
        goto LABEL_19;
      }
      int v8 = ccder_blob_encode_body();
      int v9 = v15;
      if (!v8) {
        int v9 = 0;
      }
      size_t v16 = v9;
      int v10 = ccder_blob_encode_tl();
      int v11 = v16;
      if (!v10) {
        int v11 = 0;
      }
      BOOL v12 = v11 && v11 == v7;
      if (v12 && (long long v13 = calloc(0x18uLL, 1uLL)) != 0)
      {
        long long v14 = v13;
        uint64_t result = 0;
        v14[1] = v7;
        _OWORD v14[2] = v5;
        *long long v14 = *a1;
        *a1 = v14;
      }
      else
      {
LABEL_19:
        memset_s(v7, v5, 0, v5);
        free(v7);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

uint64_t sub_10012E4B0(void *a1, char *__s, uint64_t a3)
{
  memset(v14, 0, sizeof(v14));
  long long v13 = 0u;
  long long v12 = 0u;
  long long v11 = 0u;
  long long v10 = 0u;
  long long v9 = 0u;
  long long v8 = 0u;
  v7[0] = 12;
  v7[1] = strlen(__s);
  uint64_t v5 = sub_10012DD20((uint64_t)v7);
  uint64_t result = 4294967285;
  if (a3)
  {
    if (v5)
    {
      __memcpy_chk();
      return sub_10012E340(a1, v5, a3);
    }
  }
  return result;
}

uint64_t sub_10012E5A0(void *a1, uint64_t a2)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    ccder_sizeof();
    size_t v4 = ccder_sizeof();
    uint64_t v5 = (char *)calloc(v4, 1uLL);
    if (v5)
    {
      size_t v6 = v5;
      long long v14 = &v5[v4];
      if (!ccder_blob_encode_body() || !ccder_blob_encode_tl()) {
        goto LABEL_18;
      }
      int v7 = ccder_blob_encode_body();
      long long v8 = v14;
      if (!v7) {
        long long v8 = 0;
      }
      long long v15 = v8;
      int v9 = ccder_blob_encode_tl();
      long long v10 = v15;
      if (!v9) {
        long long v10 = 0;
      }
      BOOL v11 = v10 && v10 == v6;
      if (v11 && (long long v12 = calloc(0x18uLL, 1uLL)) != 0)
      {
        long long v13 = v12;
        uint64_t result = 0;
        v13[1] = v6;
        int v13[2] = v4;
        *long long v13 = *a1;
        *a1 = v13;
      }
      else
      {
LABEL_18:
        memset_s(v6, v4, 0, v4);
        free(v6);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

uint64_t sub_10012E708(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  unint64_t v5 = HIBYTE(a3);
  if ((HIBYTE(a3) + 1) > 1u)
  {
    uint64_t v10 = 8;
  }
  else
  {
    uint64_t v6 = 9;
    uint64_t v7 = 48;
    uint64_t v8 = 1;
    while ((unint64_t)(v6 - 2) >= 2)
    {
      uint64_t v9 = a3 >> v7;
      --v6;
      v7 -= 8;
      if (v5 != v9)
      {
        uint64_t v8 = v6 - 1;
        goto LABEL_8;
      }
    }
    uint64_t v6 = 2;
LABEL_8:
    if ((((a3 >> (8 * v8 - 8)) ^ v5) & 0x80) != 0) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v8;
    }
  }
  uint64_t v25 = 0;
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    ccder_sizeof();
    size_t v12 = ccder_sizeof();
    long long v13 = (char *)calloc(v12, 1uLL);
    if (v13)
    {
      long long v14 = v13;
      uint64_t v15 = v10;
      do
      {
        *((unsigned char *)&v25 + v15 - 1) = v3;
        v3 >>= 8;
        --v15;
      }
      while (v15);
      char v23 = &v13[v12];
      if ((ccder_blob_encode_body() & 1) == 0 || !ccder_blob_encode_tl()) {
        goto LABEL_30;
      }
      int v16 = ccder_blob_encode_body();
      long long v17 = v23;
      if (!v16) {
        long long v17 = 0;
      }
      unsigned int v24 = v17;
      int v18 = ccder_blob_encode_tl();
      unint64_t v19 = v24;
      if (!v18) {
        unint64_t v19 = 0;
      }
      BOOL v20 = v19 && v19 == v14;
      if (v20 && (uint64_t v21 = calloc(0x18uLL, 1uLL)) != 0)
      {
        uint64_t v22 = v21;
        uint64_t result = 0;
        v22[1] = v14;
        uint64_t v22[2] = v12;
        *uint64_t v22 = *a1;
        *a1 = v22;
      }
      else
      {
LABEL_30:
        memset_s(v14, v12, 0, v12);
        free(v14);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

uint64_t sub_10012E920(void *a1, uint64_t a2, char *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a1 && a2 && __s)
  {
    strlen(__s);
    ccder_sizeof();
    size_t v5 = ccder_sizeof();
    uint64_t v6 = (char *)calloc(v5, 1uLL);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v15 = &v6[v5];
      if (!ccder_blob_encode_body() || !ccder_blob_encode_tl()) {
        goto LABEL_19;
      }
      int v8 = ccder_blob_encode_body();
      uint64_t v9 = v15;
      if (!v8) {
        uint64_t v9 = 0;
      }
      int v16 = v9;
      int v10 = ccder_blob_encode_tl();
      BOOL v11 = v16;
      if (!v10) {
        BOOL v11 = 0;
      }
      BOOL v12 = v11 && v11 == v7;
      if (v12 && (long long v13 = calloc(0x18uLL, 1uLL)) != 0)
      {
        long long v14 = v13;
        uint64_t result = 0;
        v14[1] = v7;
        _OWORD v14[2] = v5;
        *long long v14 = *a1;
        *a1 = v14;
      }
      else
      {
LABEL_19:
        memset_s(v7, v5, 0, v5);
        free(v7);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      return 4294967279;
    }
  }
  return result;
}

uint64_t sub_10012EA98(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 0;
  int __s = 0;
  rsize_t __n = 0;
  uint64_t v4 = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    size_t v5 = 0;
    if (a3)
    {
      if (sub_10012DFF0(a3, &__s, &__n))
      {
        uint64_t v3 = 0;
        size_t v5 = 0;
      }
      else
      {
        size_t v5 = ccder_sizeof();
        uint64_t v7 = (char *)calloc(v5, 1uLL);
        uint64_t v3 = v7;
        if (v7)
        {
          uint64_t v15 = &v7[v5];
          if (!ccder_blob_encode_body()) {
            goto LABEL_23;
          }
          int v18 = v3;
          unint64_t v19 = v15;
          int v8 = ccder_blob_encode_body();
          uint64_t v9 = v19;
          if (!v8) {
            uint64_t v9 = 0;
          }
          int v18 = v3;
          unint64_t v19 = v9;
          int v10 = ccder_blob_encode_tl();
          BOOL v11 = v19;
          if (!v10) {
            BOOL v11 = 0;
          }
          BOOL v12 = v11 && v11 == v3;
          if (v12 && (long long v13 = calloc(0x18uLL, 1uLL)) != 0)
          {
            uint64_t v4 = 0;
            v13[1] = v3;
            int v13[2] = v5;
            *long long v13 = *a1;
            *a1 = v13;
            uint64_t v3 = 0;
          }
          else
          {
LABEL_23:
            uint64_t v4 = 0xFFFFFFFFLL;
          }
        }
        else
        {
          uint64_t v4 = 4294967279;
        }
      }
    }
  }
  else
  {
    size_t v5 = 0;
  }
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  if (v3)
  {
    memset_s(v3, v5, 0, v5);
    free(v3);
  }
  return v4;
}

BOOL sub_10012EC38(void *a1)
{
  return *a1 == 0;
}

uint64_t sub_10012EC48()
{
  return ccder_sizeof();
}

uint64_t sub_10012EC60()
{
  uint64_t v0 = ccder_sizeof();
  return ccder_sizeof() + v0;
}

uint64_t sub_10012ECA8(long long *a1, uint64_t a2)
{
  long long v4 = *a1;
  if (a2)
  {
    uint64_t result = ccder_blob_encode_body_tl();
    if (!result) {
      return result;
    }
    if ((ccder_blob_encode_body_tl() & 1) == 0) {
      return 0;
    }
  }
  else if (!ccder_blob_encode_body_tl() || (ccder_blob_encode_tl() & 1) == 0)
  {
    return 0;
  }
  *a1 = v4;
  return 1;
}

uint64_t sub_10012ED54(long long *a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a3;
  uint64_t v5 = *(void *)(a3 + 8);
  int v7 = *(_DWORD *)(a3 + 20);
  long long v11 = *a1;
  if (a2)
  {
    long long v14 = *a1;
    BOOL v12 = 0;
    uint64_t v13 = 0;
    if ((ccder_blob_decode_range() & 1) == 0) {
      return 0;
    }
    uint64_t v6 = (uint64_t)v12;
    unsigned int v8 = v13 - v12;
    long long v11 = v14;
  }
  else
  {
    LODWORD(v14) = v5;
    uint64_t result = sub_10012EE5C(&v11, 4, v6, &v14);
    if (!result) {
      return result;
    }
    unsigned int v8 = v14;
  }
  long long v14 = v11;
  BOOL v12 = 0;
  uint64_t v13 = 0;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0;
  }
  long long v11 = v14;
  if ((v13 - v12) > 4) {
    return 0;
  }
  int v10 = *v12;
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 20) = v7;
  *a1 = v11;
  return 1;
}

uint64_t sub_10012EE5C(long long *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  long long v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0;
  }
  if (a3)
  {
    if (a4) {
      *a4 = 0;
    }
  }
  *a1 = v8;
  return 1;
}

uint64_t sub_10012EEF8(long long *a1, uint64_t a2)
{
  long long v4 = *a1;
  if (a2)
  {
    if ((ccder_blob_encode_body_tl() & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = ccder_blob_encode_tl();
    if (!result) {
      return result;
    }
  }
  *a1 = v4;
  return 1;
}

uint64_t sub_10012EF68(long long *a1, int a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  long long v9 = *a1;
  if (a2)
  {
    long long v12 = *a1;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t result = ccder_blob_decode_range();
    if (!result) {
      return result;
    }
    uint64_t v6 = v10;
    unsigned int v8 = v11 - v10;
    long long v9 = v12;
  }
  else
  {
    LODWORD(v12) = v5;
    uint64_t result = sub_10012EE5C(&v9, 4, v6, &v12);
    if (!result) {
      return result;
    }
    unsigned int v8 = v12;
  }
  *a3 = v6;
  a3[1] = v8;
  *a1 = v9;
  return 1;
}

uint64_t sub_10012F018(long long *a1, uint64_t a2)
{
  long long v4 = *a1;
  if (a2)
  {
    if ((ccder_blob_encode_body_tl() & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = ccder_blob_encode_tl();
    if (!result) {
      return result;
    }
  }
  *a1 = v4;
  return 1;
}

uint64_t sub_10012F08C(long long *a1)
{
  long long v3 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0;
  }
  *a1 = v3;
  return 1;
}

uint64_t sub_10012F110(unsigned int *a1, int a2, void *a3, _DWORD *a4)
{
  long long v12 = 0;
  if (sub_10012E708(&v12, (uint64_t)off_1003230D8, *a1)
    || sub_10012E708(&v12, (uint64_t)off_1003230E0, a1[1])
    || sub_10012E708(&v12, (uint64_t)off_1003230E8, *((void *)a1 + 1))
    || sub_10012E708(&v12, (uint64_t)off_1003230F8, a1[4])
    || sub_10012E708(&v12, (uint64_t)off_100323108, a1[5])
    || sub_10012E708(&v12, (uint64_t)off_100323120, *(void *)((char *)a1 + 26))
    || sub_10012E708(&v12, (uint64_t)off_100323128, *(void *)((char *)a1 + 34))
    || sub_10012E708(&v12, (uint64_t)off_100322E30, *(int *)((char *)a1 + 42))
    || sub_10012E708(&v12, (uint64_t)off_100322FF8, *(unsigned int *)((char *)a1 + 46))
    || sub_10012E340(&v12, (uint64_t)off_1003231F0, (uint64_t)a1 + 50)
    || a2
    && (sub_10012E708(&v12, (uint64_t)off_100323110, *((char *)a1 + 66))
     || sub_10012E708(&v12, (uint64_t)off_100323118, *((char *)a1 + 67))
     || sub_10012E708(&v12, (uint64_t)off_1003233F0, *(void *)(a1 + 17))
     || sub_10012E708(&v12, (uint64_t)off_100323438, *(void *)(a1 + 19)))
    || (uint64_t v10 = 0, v11 = 0, sub_10012DFF0(&v12, &v10, &v11)))
  {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v8 = 0;
    *a3 = v10;
    *a4 = v11;
  }
  sub_10012D8E4(&v12);
  return v8;
}

uint64_t sub_10012F320(uint64_t a1, int a2, char *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1)
  {
    if (__s)
    {
      memset_s(__s, 0x54uLL, 0, 0x54uLL);
      bzero(v7, 0x228uLL);
      v7[4] = off_1003230E0;
      v7[9] = off_1003230E8;
      v7[14] = off_1003230F8;
      v7[19] = off_100323108;
      v7[24] = off_100323110;
      v7[29] = off_100323118;
      v7[34] = off_100323120;
      v7[39] = off_100323128;
      v7[44] = off_100322E30;
      v7[49] = off_100322FF8;
      v7[54] = off_1003231F0;
      long long v9 = off_1003233F0;
      uint64_t v10 = off_100323438;
      sub_10012D39C();
      *(_DWORD *)int __s = sub_10012D5D4();
      *((_DWORD *)__s + 1) = sub_10012D5D4();
      *((void *)__s + 1) = sub_10012D5D4();
      *((_DWORD *)__s + 4) = sub_10012D5D4();
      *((_DWORD *)__s + 5) = sub_10012D5D4();
      *(void *)(__s + 26) = sub_10012D5D4();
      *(void *)(__s + 34) = sub_10012D5D4();
      *(_DWORD *)(__s + 42) = sub_10012D5D4();
      *(_DWORD *)(__s + 46) = sub_10012D5D4();
      sub_10012DB64(&v8, 4, (uint64_t)(__s + 50), 16);
      __s[66] = sub_10012D5D4();
      __s[67] = sub_10012D5D4();
      *(void *)(__s + 68) = sub_10012D5D4();
      uint64_t v6 = sub_10012D5D4();
      uint64_t result = 0;
      *(void *)(__s + 76) = v6;
    }
  }
  return result;
}

uint64_t sub_10012F590(uint64_t a1, int a2, unsigned char *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    if (sub_10012D39C())
    {
      void *__s = sub_10012D5D4();
      *((_DWORD *)__s + 1) = sub_10012D5D4();
      *((_DWORD *)__s + 2) = sub_10012D5D4();
      int v6 = sub_10012D5D4();
      uint64_t result = 0;
      *((_DWORD *)__s + 3) = v6;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_10012F700(uint64_t a1, int a2, void *__s, void *a4, uint64_t a5)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s && a4)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    memset_s(a4, 0x10uLL, 0, 0x10uLL);
    uint64_t v12 = 0;
    v10[0] = 0u;
    long long v11 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    v10[1] = (unint64_t)off_100323398;
    uint64_t v13 = off_100322ED0;
    sub_10012D39C();
    if (sub_10012DB64(v10, 4, (uint64_t)__s, 16)
      && sub_10012DB64((long long *)((char *)&v11 + 8), 4, (uint64_t)a4, 16))
    {
      return sub_10012DB64(&v15, 4, a5, 16) - 1;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_10012F888(uint64_t a1, uint64_t a2, _DWORD *__s)
{
  uint64_t result = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x58uLL, 0, 0x58uLL);
    long long v24 = 0u;
    uint64_t v26 = 0;
    long long v27 = 0u;
    uint64_t v28 = 0;
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v33 = 0;
    long long v34 = 0u;
    uint64_t v35 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    uint64_t v40 = 0;
    long long v41 = 0u;
    uint64_t v42 = 0;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v8 = 0u;
    uint64_t v9 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v15 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    uint64_t v21 = 0;
    long long v23 = 0u;
    uint64_t v10 = off_100322EB0;
    *(void *)&long long v13 = off_100322EA8;
    int v16 = off_100322EC8;
    *(void *)&long long v19 = off_100323150;
    uint64_t v22 = off_1003230F8;
    uint64_t v25 = off_100323100;
    uint64_t v29 = off_100322FF8;
    unsigned int v32 = off_1003230E8;
    long long v36 = off_1003230F0;
    uint64_t v39 = off_1003232B0;
    uint64_t v43 = off_100323318;
    sub_10012D39C();
    void *__s = sub_10012D5D4();
    if (sub_10012DB64((long long *)((char *)&v8 + 8), 4, (uint64_t)(__s + 1), 16)
      && sub_10012DB64(&v12, 4, (uint64_t)(__s + 5), 16)
      && (__s[9] = sub_10012D5D4(),
          __s[10] = sub_10012D5D4(),
          __s[11] = sub_10012D5D4(),
          __s[12] = sub_10012D5D4(),
          __s[15] = sub_10012D5D4(),
          __s[13] = sub_10012D5D4(),
          __s[14] = sub_10012D5D4(),
          sub_10012FB78((long long *)((char *)&v20 + 8))))
    {
      int v6 = __s[9];
      if ((v6 & 0x400) != 0)
      {
        *((void *)__s + 9) = sub_10012D5D4();
        int v6 = __s[9];
      }
      if ((v6 & 0x800) != 0)
      {
        int v7 = sub_10012D5D4();
        uint64_t result = 0;
        __s[20] = v7;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_10012FB78(long long *a1)
{
  long long v4 = *a1;
  uint64_t v2 = ccder_blob_decode_range();
  if (v2) {
    *a1 = v4;
  }
  return v2;
}

uint64_t sub_10012FC00(int *a1, void *a2, _DWORD *a3)
{
  long long v11 = 0;
  uint64_t v3 = 4294967273;
  if (a2 && a3)
  {
    if (a1 && (int v7 = *a1) != 0)
    {
      if (v7)
      {
        sub_10012E4B0(&v11, "persona_uuid", (uint64_t)(a1 + 1));
        int v7 = *a1;
      }
      if ((v7 & 2) != 0) {
        sub_10012E4B0(&v11, "volume_uuid", (uint64_t)(a1 + 5));
      }
      uint64_t v9 = 0;
      size_t v10 = 0;
      if (!sub_10012DFF0(&v11, &v9, &v10))
      {
        uint64_t v3 = 0;
        *a2 = v9;
        *a3 = v10;
      }
    }
    else
    {
      uint64_t v3 = 0;
      *a2 = 0;
      *a3 = 0;
    }
  }
  sub_10012D8E4(&v11);
  return v3;
}

uint64_t sub_10012FCD8(uint64_t a1, uint64_t a2, char *__s)
{
  int v6 = 0;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x24uLL, 0, 0x24uLL);
    if (sub_10012D39C())
    {
      if (!sub_10012DBF4(&v6, "volume_uuid", __s + 20, 0x10uLL)) {
        *(_DWORD *)__s |= 2u;
      }
      uint64_t v3 = 0;
      if (!sub_10012DBF4(&v6, "persona_uuid", __s + 4, 0x10uLL)) {
        *(_DWORD *)__s |= 1u;
      }
    }
    else
    {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
  }
  sub_10012D8E4(&v6);
  return v3;
}

uint64_t sub_10012FDC4(uint64_t a1, void *a2, _DWORD *a3)
{
  size_t v10 = 0;
  uint64_t v3 = 4294967273;
  if (a2 && a3)
  {
    if (a1)
    {
      if (!sub_10012E4B0(&v10, "options", a1) && !sub_10012E4B0(&v10, "kc", a1 + 8))
      {
        uint64_t v8 = 0;
        size_t v9 = 0;
        if (!sub_10012DFF0(&v10, &v8, &v9))
        {
          uint64_t v3 = 0;
          *a2 = v8;
          *a3 = v9;
        }
      }
    }
    else
    {
      uint64_t v3 = 0;
      *a2 = 0;
      *a3 = 0;
    }
  }
  sub_10012D8E4(&v10);
  return v3;
}

uint64_t sub_10012FE90(uint64_t a1, uint64_t a2, char *__s)
{
  int v6 = 0;
  uint64_t v3 = 0xFFFFFFFFLL;
  if (a2 && a1 && __s)
  {
    memset_s(__s, 0x10uLL, 0, 0x10uLL);
    if (sub_10012D39C())
    {
      sub_10012DBF4(&v6, "options", __s, 8uLL);
      sub_10012DBF4(&v6, "kc", __s + 8, 4uLL);
      uint64_t v3 = 0;
    }
    else
    {
      uint64_t v3 = 0xFFFFFFFFLL;
    }
  }
  sub_10012D8E4(&v6);
  return v3;
}

void *sub_10012FF5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v2 = off_100322E28;
      if (off_100322E28)
      {
        sub_10012D39C();
        return 0;
      }
    }
  }
  return v2;
}

uint64_t sub_100130348(long long *a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  long long v8 = *a1;
  if ((ccder_blob_decode_range() & 1) == 0) {
    return 0;
  }
  if (a3 && a4)
  {
    uint64_t result = (uint64_t)calloc(0, 1uLL);
    if (!result) {
      return result;
    }
    *a3 = result;
    *a4 = 0;
  }
  *a1 = v8;
  return 1;
}

uint64_t sub_100130404(long long *a1, uint64_t a2, void *a3)
{
  if (a3) {
    *a3 = 0;
  }
  long long v6 = *a1;
  uint64_t result = ccder_blob_decode_range();
  if (result)
  {
    if (ccn_read_uint())
    {
      return 0;
    }
    else
    {
      *a1 = v6;
      if (a3) {
        *a3 = 0;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_100130490(const void **a1, void **a2)
{
  uint64_t v5 = *a1;
  __s2 = *a2;
  if (!ccder_blob_decode_sequence_tl()
    || !ccder_blob_decode_sequence_tl()
    || !ccder_blob_decode_tag()
    || !ccder_blob_decode_len()
    || !v5
    || !ccder_blob_decode_tag()
    || !ccder_blob_decode_len()
    || !__s2)
  {
    return 4294967293;
  }
  int v2 = memcmp(v5, __s2, 0);
  if (v2 > 0) {
    return 1;
  }
  else {
    return ((v2 < 0) << 31 >> 31);
  }
}

uint64_t sub_1001305BC()
{
  sub_10012C704(&off_1002C0B78 != 0, 36, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  return 4294967284;
}

uint64_t sub_100130700()
{
  sub_10012C704(&off_1002C0B78 != 0, 62, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(sub_10011C828 != 0, 63, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return sub_10011C828();
}

uint64_t sub_1001307B8(uint64_t a1, unsigned int a2)
{
  sub_10012C704(&off_1002C0B78 != 0, 70, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(sub_10011C898 != 0, 71, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return sub_10011C898(a1, a2);
}

uint64_t sub_100130888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_10012C704(&off_1002C0B78 != 0, 78, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 79, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1001309A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10012C704(&off_1002C0B78 != 0, 86, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 87, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_100130AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10012C704(&off_1002C0B78 != 0, 94, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 95, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_100130BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  sub_10012C704(&off_1002C0B78 != 0, 106, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 107, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_100130D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_10012C704(&off_1002C0B78 != 0, 115, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 116, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_100130E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10012C704(&off_1002C0B78 != 0, 123, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 124, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1, a2, a3, a4, a5);
}

uint64_t sub_100130F48()
{
  sub_10012C704(&off_1002C0B78 != 0, 131, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 132, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0]();
}

uint64_t sub_100131000(uint64_t a1, uint64_t a2)
{
  sub_10012C704(&off_1002C0B78 != 0, 139, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 140, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1, a2);
}

uint64_t sub_1001310D0(uint64_t a1)
{
  sub_10012C704(&off_1002C0B78 != 0, 147, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 148, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1);
}

uint64_t sub_100131198(uint64_t a1)
{
  sub_10012C704(&off_1002C0B78 != 0, 155, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 156, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1);
}

uint64_t sub_100131260(uint64_t a1)
{
  sub_10012C704(&off_1002C0B78 != 0, 163, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 164, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1);
}

uint64_t sub_100131328(uint64_t a1)
{
  sub_10012C704(&off_1002C0B78 != 0, 171, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 172, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1);
}

uint64_t sub_1001313F0(uint64_t a1)
{
  sub_10012C704(&off_1002C0B78 != 0, 179, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 180, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1);
}

uint64_t sub_1001314B8(uint64_t a1)
{
  sub_10012C704(&off_1002C0B78 != 0, 187, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 188, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1);
}

uint64_t sub_100131580(uint64_t a1)
{
  sub_10012C704(&off_1002C0B78 != 0, 195, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");
  sub_10012C704(0, 196, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform.c");

  return MEMORY[0](a1);
}

uint64_t sub_100131648(int a1)
{
  return -a1 & 3;
}

char *sub_100131654(_DWORD *a1, const void *a2, int a3)
{
  uint64_t v3 = (char *)(a1 + 1);
  if (a2)
  {
    *a1 = a3;
    memcpy(a1 + 1, a2, a3);
    v3 += a3;
    int v5 = -a3;
    size_t v6 = -a3 & 3;
    if ((v5 & 3) != 0)
    {
      int __s = 0;
      memset_s(&__s, 4uLL, 0, 4uLL);
      memcpy(v3, &__s, v6);
      v3 += v6;
    }
  }
  else
  {
    *a1 = 0;
  }
  return v3;
}

char *sub_1001316DC(char **a1, unsigned int *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v21 = &a9;
  unsigned int v12 = 4;
  if (a3)
  {
    int v13 = a3;
    do
    {
      long long v14 = v21;
      v21 += 2;
      v12 += *((_DWORD *)v14 + 2) + (-*((_DWORD *)v14 + 2) & 3) + 4;
      --v13;
    }
    while (v13);
  }
  uint64_t result = (char *)calloc(1uLL, v12);
  int v16 = result;
  uint64_t v22 = (const void **)&a9;
  int v17 = 0;
  if (a3)
  {
    uint64_t v18 = 4;
    do
    {
      long long v19 = v22;
      long long v20 = *v22;
      v22 += 2;
      uint64_t result = sub_100131654(&v16[v18], v20, *((_DWORD *)v19 + 2));
      uint64_t v18 = result - v16;
      ++v17;
    }
    while (a3 != v17);
  }
  *(_DWORD *)int v16 = v17;
  *a1 = v16;
  *a2 = v12;
  return result;
}

uint64_t sub_1001317BC(unsigned int *a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 < 4) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v9 = a3;
  if (*a1 >= a3)
  {
    long long v19 = (void **)&a9;
    if (!a3) {
      return 0;
    }
    long long v11 = (char *)(a1 + 1);
    while (1)
    {
      unsigned int v12 = v19;
      int v13 = *v19;
      v19 += 2;
      unsigned int v16 = *(_DWORD *)v11;
      long long v14 = v11 + 4;
      size_t v15 = v16;
      if (v16 > a2) {
        break;
      }
      if (v13)
      {
        int v17 = (size_t *)v12[1];
        if (*v17 < v15) {
          return 0xFFFFFFFFLL;
        }
        memcpy(v13, v14, v15);
        *int v17 = v15;
      }
      long long v11 = &v14[v15];
      if (!--v9) {
        return 0;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

BOOL sub_100135B9C(int a1)
{
  return a1 != -72499473;
}

double sub_100136B8C(void *a1)
{
  sub_100136FCC(a1, 8);
  uint64_t v2 = a1[2];
  double result = *(double *)(*a1 + v2);
  a1[2] = v2 + 8;
  return result;
}

float sub_100136BC8(void *a1)
{
  sub_100136FCC(a1, 4);
  uint64_t v2 = a1[2];
  float result = *(float *)(*a1 + v2);
  a1[2] = v2 + 4;
  return result;
}

uint64_t sub_100136C08(uint64_t *a1)
{
  unint64_t v2 = 0;
  uint64_t v3 = 0;
  while (v2 <= 0x3F)
  {
    sub_100136FCC(a1, 1);
    uint64_t v4 = *a1;
    uint64_t v5 = a1[2];
    a1[2] = v5 + 1;
    LOBYTE(v4) = *(unsigned char *)(v4 + v5);
    v3 |= (v4 & 0x7F) << v2;
    v2 += 7;
    if ((v4 & 0x80) == 0) {
      return v3;
    }
  }
  sub_100136E40(-105, @"Invalid VarInt64");
  return 0;
}

uint64_t sub_100136C90(uint64_t *a1)
{
  return sub_100136C08(a1);
}

uint64_t sub_100136CA8(void *a1)
{
  sub_100136FCC(a1, 8);
  uint64_t v2 = a1[2];
  uint64_t result = *(void *)(*a1 + v2);
  a1[2] = v2 + 8;
  return result;
}

uint64_t sub_100136CE4(void *a1)
{
  sub_100136FCC(a1, 4);
  uint64_t v2 = a1[2];
  uint64_t result = *(unsigned int *)(*a1 + v2);
  a1[2] = v2 + 4;
  return result;
}

uint64_t sub_100136D20(uint64_t *a1)
{
  unsigned int v1 = sub_100136C08(a1);
  return -(v1 & 1) ^ (v1 >> 1);
}

unint64_t sub_100136D44(uint64_t *a1)
{
  unint64_t v1 = sub_100136C08(a1);
  return -(uint64_t)(v1 & 1) ^ (v1 >> 1);
}

BOOL sub_100136D68(uint64_t *a1)
{
  return sub_100136C08(a1) != 0;
}

uint64_t sub_100136D88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 24))
  {
    uint64_t v3 = 0;
    *(_DWORD *)(a1 + 32) = 0;
  }
  else
  {
    uint64_t v3 = sub_100136C08((uint64_t *)a1);
    *(_DWORD *)(a1 + 32) = v3;
    if (!sub_10016B9F4(v3))
    {
      sub_100136E40(-103, @"Invalid wireformat in tag.");
      uint64_t v3 = *(unsigned int *)(a1 + 32);
    }
    if (!sub_10016B9EC(v3))
    {
      sub_100136E40(-103, @"A zero field number on the wire is invalid.");
      return *(unsigned int *)(a1 + 32);
    }
  }
  return v3;
}

BOOL sub_100136E1C(void *a1)
{
  uint64_t v1 = a1[2];
  return v1 == a1[1] || v1 == a1[3];
}

id sub_100136E40(uint64_t a1, void *a2)
{
  if ([a2 length])
  {
    CFStringRef v8 = @"Reason";
    unsigned int v9 = a2;
    uint64_t v4 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  }
  else
  {
    uint64_t v4 = 0;
  }
  CFStringRef v6 = @"TransparencyGPBCodedInputStreamUnderlyingErrorKey";
  int v7 = +[NSError errorWithDomain:@"TransparencyGPBCodedInputStreamErrorDomain" code:a1 userInfo:v4];
  return [+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", @"TransparencyGPBCodedInputStreamException", a2, +[NSDictionary dictionaryWithObjects:&v7 forKeys:&v6 count:1]) raise];
}

CFStringRef sub_100136F38(uint64_t *a1)
{
  int v2 = sub_100136C08(a1);
  if (!v2) {
    return &stru_1002CE4C0;
  }
  sub_100136FCC(a1, v2);
  CFStringRef result = (const __CFString *)[objc_alloc((Class)NSString) initWithBytes:*a1 + a1[2] length:v2 encoding:4];
  a1[2] += v2;
  if (!result)
  {
    sub_100136E40(-104, 0);
    return 0;
  }
  return result;
}

void *sub_100136FCC(void *result, uint64_t a2)
{
  int v2 = result;
  unint64_t v3 = result[2] + a2;
  if (v3 > result[1]) {
    CFStringRef result = sub_100136E40(-100, 0);
  }
  unint64_t v4 = v2[3];
  if (v3 > v4)
  {
    v2[2] = v4;
    return sub_100136E40(-101, 0);
  }
  return result;
}

id sub_10013703C(uint64_t *a1)
{
  unsigned int v2 = sub_100136C08(a1);
  if ((v2 & 0x80000000) != 0) {
    return 0;
  }
  sub_100136FCC(a1, v2);
  id result = [objc_alloc((Class)NSData) initWithBytes:*a1 + a1[2] length:v2];
  a1[2] += v2;
  return result;
}

id sub_1001370B4(uint64_t *a1)
{
  unsigned int v2 = sub_100136C08(a1);
  if ((v2 & 0x80000000) != 0) {
    return 0;
  }
  sub_100136FCC(a1, v2);
  id result = [objc_alloc((Class)NSData) initWithBytesNoCopy:*a1 + a1[2] length:v2 freeWhenDone:0];
  a1[2] += v2;
  return result;
}

unint64_t sub_100137130(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a1 + 24);
  unint64_t v4 = *(void *)(a1 + 16) + a2;
  if (v4 > v3) {
    sub_100136E40(-102, 0);
  }
  *(void *)(a1 + 24) = v4;
  return v3;
}

uint64_t sub_10013717C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_100137184(uint64_t a1)
{
  return *(void *)(a1 + 24) - *(void *)(a1 + 16);
}

_DWORD *sub_100137190(_DWORD *result, int a2)
{
  if (result[8] != a2) {
    return sub_100136E40(-103, @"Unexpected tag read");
  }
  return result;
}

uint64_t *sub_100137C2C(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 == result[1])
  {
    id result = sub_10013ACCC(result);
    uint64_t v4 = v3[2];
  }
  uint64_t v5 = *v3;
  v3[2] = v4 + 1;
  *(unsigned char *)(v5 + v4) = a2;
  uint64_t v6 = v3[2];
  if (v6 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v6 = v3[2];
  }
  uint64_t v7 = *v3;
  v3[2] = v6 + 1;
  *(unsigned char *)(v7 + v6) = BYTE1(a2);
  uint64_t v8 = v3[2];
  if (v8 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v8 = v3[2];
  }
  uint64_t v9 = *v3;
  v3[2] = v8 + 1;
  *(unsigned char *)(v9 + v8) = BYTE2(a2);
  uint64_t v10 = v3[2];
  if (v10 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v10 = v3[2];
  }
  uint64_t v11 = *v3;
  v3[2] = v10 + 1;
  *(unsigned char *)(v11 + v10) = BYTE3(a2);
  uint64_t v12 = v3[2];
  if (v12 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v12 = v3[2];
  }
  uint64_t v13 = *v3;
  v3[2] = v12 + 1;
  *(unsigned char *)(v13 + v12) = BYTE4(a2);
  uint64_t v14 = v3[2];
  if (v14 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v14 = v3[2];
  }
  uint64_t v15 = *v3;
  v3[2] = v14 + 1;
  *(unsigned char *)(v15 + v14) = BYTE5(a2);
  uint64_t v16 = v3[2];
  if (v16 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v16 = v3[2];
  }
  uint64_t v17 = *v3;
  v3[2] = v16 + 1;
  *(unsigned char *)(v17 + v16) = BYTE6(a2);
  uint64_t v18 = v3[2];
  if (v18 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v18 = v3[2];
  }
  uint64_t v19 = *v3;
  v3[2] = v18 + 1;
  *(unsigned char *)(v19 + v18) = HIBYTE(a2);
  return result;
}

uint64_t *sub_100137E14(uint64_t *result, int a2)
{
  unint64_t v3 = result;
  uint64_t v4 = result[2];
  if (v4 == result[1])
  {
    id result = sub_10013ACCC(result);
    uint64_t v4 = v3[2];
  }
  uint64_t v5 = *v3;
  v3[2] = v4 + 1;
  *(unsigned char *)(v5 + v4) = a2;
  uint64_t v6 = v3[2];
  if (v6 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v6 = v3[2];
  }
  uint64_t v7 = *v3;
  v3[2] = v6 + 1;
  *(unsigned char *)(v7 + v6) = BYTE1(a2);
  uint64_t v8 = v3[2];
  if (v8 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v8 = v3[2];
  }
  uint64_t v9 = *v3;
  v3[2] = v8 + 1;
  *(unsigned char *)(v9 + v8) = BYTE2(a2);
  uint64_t v10 = v3[2];
  if (v10 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v10 = v3[2];
  }
  uint64_t v11 = *v3;
  v3[2] = v10 + 1;
  *(unsigned char *)(v11 + v10) = HIBYTE(a2);
  return result;
}

uint64_t *sub_100137F4C(uint64_t *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  if (a2 >= 0x80)
  {
    do
    {
      uint64_t v5 = v3[2];
      if (v5 == v3[1])
      {
        id result = sub_10013ACCC(v3);
        uint64_t v5 = v3[2];
      }
      uint64_t v6 = *v3;
      v3[2] = v5 + 1;
      *(unsigned char *)(v6 + v5) = v2 | 0x80;
      unint64_t v4 = v2 >> 7;
      BOOL v7 = v2 >= 0x4000;
      v2 >>= 7;
    }
    while (v7);
  }
  else
  {
    LOBYTE(v4) = a2;
  }
  uint64_t v8 = v3[2];
  if (v8 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v8 = v3[2];
  }
  uint64_t v9 = *v3;
  v3[2] = v8 + 1;
  *(unsigned char *)(v9 + v8) = v4;
  return result;
}

uint64_t *sub_1001380AC(uint64_t *result, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return sub_100137F4C(result, (int)a2);
  }
  else {
    return sub_1001383E8(result, a2);
  }
}

uint64_t *sub_1001383E8(uint64_t *result, unsigned int a2)
{
  unsigned int v2 = a2;
  unint64_t v3 = result;
  if (a2 >= 0x80)
  {
    do
    {
      uint64_t v5 = v3[2];
      if (v5 == v3[1])
      {
        id result = sub_10013ACCC(v3);
        uint64_t v5 = v3[2];
      }
      uint64_t v6 = *v3;
      v3[2] = v5 + 1;
      *(unsigned char *)(v6 + v5) = v2 | 0x80;
      unsigned int v4 = v2 >> 7;
      BOOL v7 = v2 >= 0x4000;
      v2 >>= 7;
    }
    while (v7);
  }
  else
  {
    LOBYTE(v4) = a2;
  }
  uint64_t v8 = v3[2];
  if (v8 == v3[1])
  {
    id result = sub_10013ACCC(v3);
    uint64_t v8 = v3[2];
  }
  uint64_t v9 = *v3;
  v3[2] = v8 + 1;
  *(unsigned char *)(v9 + v8) = v4;
  return result;
}

uint64_t *sub_1001387FC(uint64_t *a1, int a2, unsigned int a3)
{
  unsigned int v5 = sub_10016B9DC(a2, 0);
  sub_1001383E8(a1, v5);

  return sub_1001383E8(a1, a3);
}

void sub_100138BD0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100138BE8(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += 8;
  return result;
}

uint64_t sub_100138C00()
{
  return 8;
}

id sub_100138C08(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeDoubleNoTag:];
}

id sub_100138C10(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeDouble:*(unsigned int *)(a1 + 40)];
}

void sub_100138DB0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100138DC8(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += 4;
  return result;
}

uint64_t sub_100138DE0()
{
  return 4;
}

id sub_100138DE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeFloatNoTag:];
}

id sub_100138DF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) writeFloat:*(unsigned int *)(a1 + 40)];
}

void sub_100138F90(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100138FA8(uint64_t a1, unint64_t a2)
{
  uint64_t result = sub_10013AF90(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

id sub_100138FE8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeUInt64NoTag:a2];
}

id sub_100138FF4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeUInt64:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_100139198(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001391B0(uint64_t a1, unint64_t a2)
{
  uint64_t result = sub_10013AF90(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

id sub_1001391EC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeInt64NoTag:a2];
}

id sub_1001391F8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeInt64:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10013939C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001393B4(uint64_t result, unsigned int a2)
{
  uint64_t v2 = 10;
  uint64_t v3 = 1;
  uint64_t v4 = 2;
  uint64_t v5 = 3;
  uint64_t v6 = 4;
  if (a2 >> 28) {
    uint64_t v6 = 5;
  }
  if (a2 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (a2 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (a2 >= 0x80) {
    uint64_t v3 = v4;
  }
  if ((a2 & 0x80000000) == 0) {
    uint64_t v2 = v3;
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += v2;
  return result;
}

uint64_t sub_10013940C(unsigned int a1)
{
  uint64_t v1 = 1;
  uint64_t v2 = 2;
  uint64_t v3 = 3;
  uint64_t v4 = 4;
  if (a1 >> 28) {
    uint64_t v4 = 5;
  }
  if (a1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (a1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (a1 >= 0x80) {
    uint64_t v1 = v2;
  }
  if ((a1 & 0x80000000) == 0) {
    return v1;
  }
  else {
    return 10;
  }
}

id sub_100139450(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeInt32NoTag:a2];
}

id sub_10013945C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeInt32:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_100139600(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100139618(uint64_t result, unsigned int a2)
{
  uint64_t v2 = 1;
  uint64_t v3 = 2;
  uint64_t v4 = 3;
  uint64_t v5 = 4;
  if (a2 >> 28) {
    uint64_t v5 = 5;
  }
  if (a2 >= 0x200000) {
    uint64_t v4 = v5;
  }
  if (a2 >= 0x4000) {
    uint64_t v3 = v4;
  }
  if (a2 >= 0x80) {
    uint64_t v2 = v3;
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += v2;
  return result;
}

uint64_t sub_100139664(unsigned int a1)
{
  uint64_t v1 = 2;
  uint64_t v2 = 3;
  uint64_t v3 = 4;
  if (a1 >> 28) {
    uint64_t v3 = 5;
  }
  if (a1 >= 0x200000) {
    uint64_t v2 = v3;
  }
  if (a1 >= 0x4000) {
    uint64_t v1 = v2;
  }
  if (a1 >= 0x80) {
    return v1;
  }
  else {
    return 1;
  }
}

id sub_10013969C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeUInt32NoTag:a2];
}

id sub_1001396A8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeUInt32:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10013984C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100139864(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += 8;
  return result;
}

id sub_10013987C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeFixed64NoTag:a2];
}

id sub_100139888(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeFixed64:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_100139A2C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100139A44(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += 4;
  return result;
}

id sub_100139A5C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeFixed32NoTag:a2];
}

id sub_100139A68(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeFixed32:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_100139C0C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100139C24(uint64_t result, int a2)
{
  unsigned int v2 = (2 * a2) ^ (a2 >> 31);
  uint64_t v3 = 2;
  uint64_t v4 = 3;
  uint64_t v5 = 4;
  if (v2 >> 28) {
    uint64_t v5 = 5;
  }
  if (v2 >= 0x200000) {
    uint64_t v4 = v5;
  }
  if (v2 >= 0x4000) {
    uint64_t v3 = v4;
  }
  if (v2 >= 0x80) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = 1;
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += v6;
  return result;
}

uint64_t sub_100139C78(int a1)
{
  unsigned int v1 = (2 * a1) ^ (a1 >> 31);
  uint64_t v2 = 2;
  uint64_t v3 = 3;
  uint64_t v4 = 4;
  if (v1 >> 28) {
    uint64_t v4 = 5;
  }
  if (v1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (v1 >= 0x80) {
    return v2;
  }
  else {
    return 1;
  }
}

id sub_100139CB8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeSInt32NoTag:a2];
}

id sub_100139CC4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeSInt32:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_100139E68(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100139E80(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10013AF90((2 * a2) ^ (a2 >> 63));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_100139EC0(uint64_t a1)
{
  return sub_10013AF90((2 * a1) ^ (a1 >> 63));
}

id sub_100139ECC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeSInt64NoTag:a2];
}

id sub_100139ED8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeSInt64:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10013A07C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013A094(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += 8;
  return result;
}

id sub_10013A0AC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeSFixed64NoTag:a2];
}

id sub_10013A0B8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeSFixed64:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10013A25C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013A274(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += 4;
  return result;
}

id sub_10013A28C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeSFixed32NoTag:a2];
}

id sub_10013A298(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) writeSFixed32:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10013A43C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013A454(uint64_t result)
{
  return result;
}

id sub_10013A46C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeBoolNoTag:a2];
}

id sub_10013A478(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeBool:*(unsigned int *)(a1 + 40) value:a2];
}

void sub_10013A61C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10013A634(uint64_t result, unsigned int a2)
{
  uint64_t v2 = 10;
  uint64_t v3 = 1;
  uint64_t v4 = 2;
  uint64_t v5 = 3;
  uint64_t v6 = 4;
  if (a2 >> 28) {
    uint64_t v6 = 5;
  }
  if (a2 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (a2 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (a2 >= 0x80) {
    uint64_t v3 = v4;
  }
  if ((a2 & 0x80000000) == 0) {
    uint64_t v2 = v3;
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) += v2;
  return result;
}

id sub_10013A68C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeEnumNoTag:a2];
}

id sub_10013A698(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) writeEnum:*(unsigned int *)(a1 + 40) value:a2];
}

void *sub_10013ACCC(void *result)
{
  uint64_t v1 = result;
  if (!result[3]) {
    uint64_t result = +[NSException raise:@"OutOfSpace" format:&stru_1002CE4C0];
  }
  if (v1[2])
  {
    uint64_t result = [v1[3] write:*v1];
    if (result != (void *)v1[2]) {
      uint64_t result = +[NSException raise:@"WriteFailed" format:&stru_1002CE4C0];
    }
    v1[2] = 0;
  }
  return result;
}

uint64_t sub_10013AF90(unint64_t a1)
{
  if (a1 < 0x80) {
    return 1;
  }
  if (a1 < 0x4000) {
    return 2;
  }
  if (a1 < 0x200000) {
    return 3;
  }
  if (!(a1 >> 28)) {
    return 4;
  }
  if (!(a1 >> 35)) {
    return 5;
  }
  if (!(a1 >> 42)) {
    return 6;
  }
  if (!(a1 >> 49)) {
    return 7;
  }
  uint64_t v2 = 9;
  if ((a1 & 0x8000000000000000) != 0) {
    uint64_t v2 = 10;
  }
  if (HIBYTE(a1)) {
    return v2;
  }
  else {
    return 8;
  }
}

char *sub_10013B020(void *a1)
{
  uint64_t v1 = (char *)[a1 lengthOfBytesUsingEncoding:4];
  uint64_t v2 = 1;
  uint64_t v3 = 2;
  uint64_t v4 = 3;
  uint64_t v5 = 4;
  if (v1 >> 28) {
    uint64_t v5 = 5;
  }
  if (v1 >= 0x200000) {
    uint64_t v4 = v5;
  }
  if (v1 >= 0x4000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x80) {
    uint64_t v2 = v3;
  }
  return &v1[v2];
}

char *sub_10013B078(void *a1)
{
  uint64_t v1 = (char *)[a1 serializedSize];
  uint64_t v2 = 1;
  uint64_t v3 = 2;
  uint64_t v4 = 3;
  uint64_t v5 = 4;
  if (v1 >> 28) {
    uint64_t v5 = 5;
  }
  if (v1 >= 0x200000) {
    uint64_t v4 = v5;
  }
  if (v1 >= 0x4000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x80) {
    uint64_t v2 = v3;
  }
  return &v1[v2];
}

char *sub_10013B0C8(void *a1)
{
  uint64_t v1 = (char *)[a1 length];
  uint64_t v2 = 1;
  uint64_t v3 = 2;
  uint64_t v4 = 3;
  uint64_t v5 = 4;
  if (v1 >> 28) {
    uint64_t v5 = 5;
  }
  if (v1 >= 0x200000) {
    uint64_t v4 = v5;
  }
  if (v1 >= 0x4000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x80) {
    uint64_t v2 = v3;
  }
  return &v1[v2];
}

uint64_t sub_10013B118(int a1)
{
  unsigned int v1 = sub_10016B9DC(a1, 0);
  uint64_t v2 = 10;
  uint64_t v3 = 11;
  uint64_t v4 = 12;
  if (v1 >> 28) {
    uint64_t v4 = 13;
  }
  if (v1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (v1 >= 0x80) {
    return v2;
  }
  else {
    return 9;
  }
}

uint64_t sub_10013B168(int a1)
{
  unsigned int v1 = sub_10016B9DC(a1, 0);
  uint64_t v2 = 2;
  uint64_t v3 = 3;
  uint64_t v4 = 4;
  if (v1 >> 28) {
    uint64_t v4 = 5;
  }
  if (v1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (v1 >= 0x80) {
    return v2;
  }
  else {
    return 1;
  }
}

uint64_t sub_10013B1B8(int a1)
{
  unsigned int v1 = sub_10016B9DC(a1, 0);
  uint64_t v2 = 6;
  uint64_t v3 = 7;
  uint64_t v4 = 8;
  if (v1 >> 28) {
    uint64_t v4 = 9;
  }
  if (v1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (v1 >= 0x80) {
    return v2;
  }
  else {
    return 5;
  }
}

uint64_t sub_10013B208(int a1, unint64_t a2)
{
  unsigned int v3 = sub_10016B9DC(a1, 0);
  uint64_t v4 = 2;
  uint64_t v5 = 3;
  uint64_t v6 = 4;
  if (v3 >> 28) {
    uint64_t v6 = 5;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 1;
  }
  return sub_10013AF90(a2) + v7;
}

uint64_t sub_10013B270(int a1, unsigned int a2)
{
  unsigned int v3 = sub_10016B9DC(a1, 0);
  uint64_t v4 = 1;
  uint64_t v5 = 2;
  uint64_t v6 = 3;
  uint64_t v7 = 4;
  if (v3 >> 28) {
    uint64_t v7 = 5;
  }
  if (v3 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v3 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x80) {
    uint64_t v4 = v5;
  }
  uint64_t v8 = 10;
  uint64_t v9 = 1;
  uint64_t v10 = 2;
  uint64_t v11 = 3;
  uint64_t v12 = 4;
  if (a2 >> 28) {
    uint64_t v12 = 5;
  }
  if (a2 >= 0x200000) {
    uint64_t v11 = v12;
  }
  if (a2 >= 0x4000) {
    uint64_t v10 = v11;
  }
  if (a2 >= 0x80) {
    uint64_t v9 = v10;
  }
  if ((a2 & 0x80000000) == 0) {
    uint64_t v8 = v9;
  }
  return v8 + v4;
}

uint64_t sub_10013B310(int a1)
{
  unsigned int v1 = sub_10016B9DC(a1, 0);
  uint64_t v2 = 3;
  uint64_t v3 = 4;
  uint64_t v4 = 5;
  if (v1 >> 28) {
    uint64_t v4 = 6;
  }
  if (v1 >= 0x200000) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x4000) {
    uint64_t v2 = v3;
  }
  if (v1 >= 0x80) {
    return v2;
  }
  else {
    return 2;
  }
}

char *sub_10013B360(int a1, void *a2)
{
  unsigned int v3 = sub_10016B9DC(a1, 0);
  uint64_t v4 = 2;
  uint64_t v5 = 3;
  uint64_t v6 = 4;
  if (v3 >> 28) {
    uint64_t v6 = 5;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 1;
  }
  uint64_t v8 = (char *)[a2 lengthOfBytesUsingEncoding:4];
  uint64_t v9 = 1;
  uint64_t v10 = 2;
  uint64_t v11 = 3;
  uint64_t v12 = 4;
  if (v8 >> 28) {
    uint64_t v12 = 5;
  }
  if (v8 >= 0x200000) {
    uint64_t v11 = v12;
  }
  if (v8 >= 0x4000) {
    uint64_t v10 = v11;
  }
  if (v8 >= 0x80) {
    uint64_t v9 = v10;
  }
  return &v8[v7 + v9];
}

char *sub_10013B404(int a1, void *a2)
{
  unsigned int v3 = sub_10016B9DC(a1, 0);
  uint64_t v4 = 4;
  uint64_t v5 = 6;
  uint64_t v6 = 10;
  if (!(v3 >> 28)) {
    uint64_t v6 = 8;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 2;
  }
  return (char *)[a2 serializedSize] + v7;
}

char *sub_10013B470(int a1, void *a2)
{
  unsigned int v3 = sub_10016B9DC(a1, 0);
  uint64_t v4 = 2;
  uint64_t v5 = 3;
  uint64_t v6 = 4;
  if (v3 >> 28) {
    uint64_t v6 = 5;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 1;
  }
  uint64_t v8 = (char *)[a2 serializedSize];
  uint64_t v9 = 1;
  uint64_t v10 = 2;
  uint64_t v11 = 3;
  uint64_t v12 = 4;
  if (v8 >> 28) {
    uint64_t v12 = 5;
  }
  if (v8 >= 0x200000) {
    uint64_t v11 = v12;
  }
  if (v8 >= 0x4000) {
    uint64_t v10 = v11;
  }
  if (v8 >= 0x80) {
    uint64_t v9 = v10;
  }
  return &v8[v7 + v9];
}

char *sub_10013B510(int a1, void *a2)
{
  unsigned int v3 = sub_10016B9DC(a1, 0);
  uint64_t v4 = 2;
  uint64_t v5 = 3;
  uint64_t v6 = 4;
  if (v3 >> 28) {
    uint64_t v6 = 5;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 1;
  }
  uint64_t v8 = (char *)[a2 length];
  uint64_t v9 = 1;
  uint64_t v10 = 2;
  uint64_t v11 = 3;
  uint64_t v12 = 4;
  if (v8 >> 28) {
    uint64_t v12 = 5;
  }
  if (v8 >= 0x200000) {
    uint64_t v11 = v12;
  }
  if (v8 >= 0x4000) {
    uint64_t v10 = v11;
  }
  if (v8 >= 0x80) {
    uint64_t v9 = v10;
  }
  return &v8[v7 + v9];
}

uint64_t sub_10013B5B0(int a1, unsigned int a2)
{
  unsigned int v3 = sub_10016B9DC(a1, 0);
  uint64_t v4 = 1;
  uint64_t v5 = 2;
  uint64_t v6 = 3;
  uint64_t v7 = 4;
  if (v3 >> 28) {
    uint64_t v7 = 5;
  }
  if (v3 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v3 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x80) {
    uint64_t v4 = v5;
  }
  uint64_t v8 = 1;
  uint64_t v9 = 2;
  uint64_t v10 = 3;
  uint64_t v11 = 4;
  if (a2 >> 28) {
    uint64_t v11 = 5;
  }
  if (a2 >= 0x200000) {
    uint64_t v10 = v11;
  }
  if (a2 >= 0x4000) {
    uint64_t v9 = v10;
  }
  if (a2 >= 0x80) {
    uint64_t v8 = v9;
  }
  return v8 + v4;
}

uint64_t sub_10013B644(int a1, int a2)
{
  unsigned int v3 = sub_10016B9DC(a1, 0);
  uint64_t v4 = 1;
  uint64_t v5 = 2;
  uint64_t v6 = 3;
  uint64_t v7 = 4;
  if (v3 >> 28) {
    uint64_t v7 = 5;
  }
  if (v3 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v3 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x80) {
    uint64_t v4 = v5;
  }
  unsigned int v8 = (2 * a2) ^ (a2 >> 31);
  uint64_t v9 = 2;
  uint64_t v10 = 3;
  uint64_t v11 = 4;
  if (v8 >> 28) {
    uint64_t v11 = 5;
  }
  if (v8 >= 0x200000) {
    uint64_t v10 = v11;
  }
  if (v8 >= 0x4000) {
    uint64_t v9 = v10;
  }
  if (v8 >= 0x80) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = 1;
  }
  return v12 + v4;
}

uint64_t sub_10013B6E0(int a1, uint64_t a2)
{
  unsigned int v3 = sub_10016B9DC(a1, 0);
  uint64_t v4 = 2;
  uint64_t v5 = 3;
  uint64_t v6 = 4;
  if (v3 >> 28) {
    uint64_t v6 = 5;
  }
  if (v3 >= 0x200000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x4000) {
    uint64_t v4 = v5;
  }
  if (v3 >= 0x80) {
    uint64_t v7 = v4;
  }
  else {
    uint64_t v7 = 1;
  }
  return sub_10013AF90((2 * a2) ^ (a2 >> 63)) + v7;
}

char *sub_10013B74C(unsigned int a1, void *a2)
{
  unsigned int v4 = sub_10016B9DC(1, 0);
  uint64_t v5 = 4;
  uint64_t v6 = 6;
  uint64_t v7 = 10;
  if (!(v4 >> 28)) {
    uint64_t v7 = 8;
  }
  if (v4 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v4 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v4 >= 0x80) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = 2;
  }
  uint64_t v9 = sub_10013B5B0(2, a1) + v8;
  return &sub_10013B470(3, a2)[v9];
}

char *sub_10013B7DC(unsigned int a1, void *a2)
{
  unsigned int v4 = sub_10016B9DC(1, 0);
  uint64_t v5 = 4;
  uint64_t v6 = 6;
  uint64_t v7 = 10;
  if (!(v4 >> 28)) {
    uint64_t v7 = 8;
  }
  if (v4 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v4 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v4 >= 0x80) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = 2;
  }
  uint64_t v9 = sub_10013B5B0(2, a1) + v8;
  return &sub_10013B510(3, a2)[v9];
}

uint64_t sub_10013B86C(int a1, int a2)
{
  unsigned int v3 = sub_10016B9DC(a1, 0);
  uint64_t v4 = 1;
  uint64_t v5 = 2;
  uint64_t v6 = 3;
  uint64_t v7 = 4;
  if (v3 >> 28) {
    uint64_t v7 = 5;
  }
  if (v3 >= 0x200000) {
    uint64_t v6 = v7;
  }
  if (v3 >= 0x4000) {
    uint64_t v5 = v6;
  }
  if (v3 >= 0x80) {
    uint64_t v4 = v5;
  }
  return v4 << (a2 == 16);
}

void sub_10013C114(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

SEL sub_10013CA00(char *__s, char *str, const char *a3, int a4)
{
  if (!__s && !a3 && (a4 & 1) == 0)
  {
    return sel_getUid(str);
  }
  if (__s) {
    size_t v9 = strlen(__s);
  }
  else {
    size_t v9 = 0;
  }
  size_t v10 = strlen(str);
  size_t v11 = v10;
  if (a3)
  {
    size_t v10 = strlen(a3);
    size_t v12 = v10;
  }
  else
  {
    size_t v12 = 0;
  }
  uint64_t v18 = (uint64_t)&v18;
  size_t v13 = v11 + v9 + v12;
  uint64_t v14 = 1;
  if (a4) {
    uint64_t v14 = 2;
  }
  size_t v15 = v13 + v14;
  __chkstk_darwin(v10);
  uint64_t v17 = (char *)&v18 - v16;
  bzero((char *)&v18 - v16, v15);
  if (!__s)
  {
    memcpy(v17, str, v11);
    if (!a3) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  memcpy(v17, __s, v9);
  memcpy(&v17[v9], str, v11);
  v17[v9] = __toupper(v17[v9]);
  if (a3) {
LABEL_17:
  }
    memcpy(&v17[v9 + v11], a3, v12);
LABEL_18:
  if (a4) {
    v17[v13] = 58;
  }
  v17[v15 - 1] = 0;
  return sel_getUid(v17);
}

uint64_t sub_10013CE54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  unsigned int v2 = *(unsigned __int16 *)(v1 + 28);
  if ((v2 & 0xF00) != 0)
  {
    int v3 = 15;
    LOBYTE(v4) = 0;
  }
  else
  {
    int v3 = *(unsigned __int8 *)(v1 + 30);
    int v4 = (v2 >> 2) & 1;
  }
  int v5 = sub_10016BA04(v3, v4);
  int v6 = *(_DWORD *)(v1 + 16);

  return sub_10016B9DC(v6, v5);
}

uint64_t sub_10013CEB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = sub_10016BA04(*(unsigned __int8 *)(v1 + 30), (*(_WORD *)(v1 + 28) & 4) == 0);
  int v3 = *(_DWORD *)(v1 + 16);

  return sub_10016B9DC(v3, v2);
}

void sub_10013D7A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10013DF08(void *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(*(void *)(a2 + 8) + 30);
  id v5 = [a1 keyEnumerator];
  id v6 = [v5 nextObject];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = 0;
    do
    {
      id v9 = [a1 objectForKeyedSubscript:v7];
      size_t v10 = sub_10013B360(1, v7);
      size_t v11 = &v10[(void)sub_10013DFEC(v9, v4)];
      v8 += (uint64_t)&v11[sub_100139664(v11)];
      id v7 = [v5 nextObject];
    }
    while (v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v12 = sub_10013B86C(*(_DWORD *)(*(void *)(a2 + 8) + 16), 15);
  return v8 + (void)[a1 count] * v12;
}

char *sub_10013DFEC(void *a1, int a2)
{
  switch(a2)
  {
    case 13:
      return sub_10013B510(2, a1);
    case 14:
      return sub_10013B360(2, a1);
    case 15:
      return sub_10013B470(2, a1);
  }
  return 0;
}

id sub_10013E034(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 8);
  int v6 = *(unsigned __int8 *)(v5 + 30);
  uint64_t v7 = sub_10016B9DC(*(_DWORD *)(v5 + 16), 2);
  id v8 = [a2 keyEnumerator];
  id result = [v8 nextObject];
  if (result)
  {
    size_t v10 = result;
    do
    {
      id v11 = [a2 objectForKeyedSubscript:v10];
      [a1 writeInt32NoTag:v7];
      unsigned int v12 = sub_10013B360(1, v10);
      [a1 writeInt32NoTag:sub_10013DFEC(v11, v6) + v12];
      [a1 writeString:1 value:v10];
      sub_10013E120(a1, (const char *)v11, v6);
      id result = [v8 nextObject];
      size_t v10 = result;
    }
    while (result);
  }
  return result;
}

void *sub_10013E120(void *a1, const char *a2, int a3)
{
  switch(a3)
  {
    case 13:
      return [a1 writeBytes:2 value:a2];
    case 14:
      return [a1 writeString:2 value:a2];
    case 15:
      return [a1 writeMessage:2 value:a2];
  }
  return a1;
}

BOOL sub_10013E160(void *a1)
{
  id v1 = [a1 objectEnumerator];
  do
  {
    id v2 = [v1 nextObject];
    id v3 = v2;
  }
  while (v2 && ([v2 isInitialized] & 1) != 0);
  return v3 == 0;
}

void sub_10013E1A8(void *a1, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = [a4 mapKeyDataType];
  int v10 = *(unsigned __int8 *)(a4[1] + 30);
  long long v24 = 0;
  uint64_t v25 = 0;
  if (v10 == 17) {
    long long v24 = (__CFString *)[a4 defaultValue];
  }
  int v11 = sub_10016BA04((int)v9, 0);
  int v12 = sub_10016B9DC(1, v11);
  int v13 = sub_10016BA04(v10, 0);
  int v14 = sub_10016B9DC(2, v13);
  while (1)
  {
    while (1)
    {
      uint64_t v15 = sub_100136D88((uint64_t)(a2 + 1));
      if (v15 == v12)
      {
        uint64_t v16 = (id *)&v25;
        uint64_t v17 = a2;
        int v18 = (int)v9;
        goto LABEL_8;
      }
      uint64_t v19 = v15;
      if (v15 != v14) {
        break;
      }
      uint64_t v16 = (id *)&v24;
      uint64_t v17 = a2;
      int v18 = v10;
LABEL_8:
      sub_10013E428(v17, v16, v18, a3, a4);
    }
    if (!v15) {
      break;
    }
    if (([a2 skipField:v15] & 1) == 0) {
      goto LABEL_32;
    }
  }
  long long v20 = v25;
  if (v9 == 14 && !v25)
  {
    long long v20 = &stru_1002CE4C0;
    uint64_t v25 = v20;
  }
  uint64_t v21 = v24;
  if ((v10 - 13) > 3u || v24) {
    goto LABEL_25;
  }
  switch(v10)
  {
    case 13:
      uint64_t v22 = (__CFString *)(id)sub_100167DB8();
LABEL_23:
      uint64_t v21 = v22;
      long long v24 = v22;
      goto LABEL_25;
    case 15:
      uint64_t v22 = (__CFString *)[a4 msgClass:v19];
      goto LABEL_23;
    case 14:
      uint64_t v22 = &stru_1002CE4C0;
      goto LABEL_23;
  }
  uint64_t v21 = 0;
LABEL_25:
  if (v9 == 14 && (v10 - 13) <= 3u)
  {
    [a1 setObject:v21 forKey:v20];
    goto LABEL_34;
  }
  if (v10 == 17
    && (*(_WORD *)(a4[1] + 28) & 0x1000) != 0
    && ![a4 isValidEnumValue:v21])
  {
    [a5 addUnknownMapEntry:*(unsigned int *)(a4[1] + 16) value:[a1 serializedDataForUnknownValue:v21 forKey:&v25 keyDataType:v9]];
  }
  else
  {
    [a1 setTransparencyGPBGenericValue:&v24 forTransparencyGPBGenericValueKey:&v25];
  }
LABEL_32:
  if (((_BYTE)v9 - 13) > 3u) {
    goto LABEL_35;
  }
  long long v20 = v25;
LABEL_34:

LABEL_35:
  if ((v10 - 13) <= 3u) {
}
  }

void sub_10013E428(uint64_t *a1, id *a2, int a3, uint64_t a4, void *a5)
{
  switch(a3)
  {
    case 0:
      *(unsigned char *)a2 = sub_100136D68(a1 + 1);
      return;
    case 1:
    case 2:
      int v7 = sub_100136CE4(a1 + 1);
      goto LABEL_15;
    case 3:
      *(float *)a2 = sub_100136BC8(a1 + 1);
      return;
    case 4:
    case 5:
      uint64_t v8 = sub_100136CA8(a1 + 1);
      goto LABEL_12;
    case 6:
      *(double *)a2 = sub_100136B8C(a1 + 1);
      return;
    case 7:
    case 11:
    case 17:
      int v7 = sub_100136C90(a1 + 1);
      goto LABEL_15;
    case 8:
    case 12:
      uint64_t v8 = sub_100136C04(a1 + 1);
      goto LABEL_12;
    case 9:
      int v7 = sub_100136D20(a1 + 1);
LABEL_15:
      *(_DWORD *)a2 = v7;
      return;
    case 10:
      uint64_t v8 = sub_100136D44(a1 + 1);
      goto LABEL_12;
    case 13:

      uint64_t v8 = (uint64_t)sub_10013703C(a1 + 1);
      goto LABEL_12;
    case 14:

      uint64_t v8 = (uint64_t)sub_100136F38(a1 + 1);
LABEL_12:
      *a2 = (id)v8;
      break;
    case 15:
      id v10 = objc_alloc_init((Class)[a5 msgClass]);
      [a1 readMessage:v10 extensionRegistry:a4];

      *a2 = v10;
      break;
    default:
      return;
  }
}

uint64_t sub_10013EAE8(unsigned int a1, int a2, int a3)
{
  if (a3 == 1) {
    return sub_10013B1B8(a2);
  }
  if (a3 == 11) {
    return sub_10013B5B0(a2, a1);
  }
  return 0;
}

uint64_t sub_10013ED68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%u", a2];
  int v6 = +[NSString stringWithFormat:@"%u", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10013F3DC(unsigned int a1, int a2, int a3)
{
  switch(a3)
  {
    case 2:
      return sub_10013B1B8(a2);
    case 9:
      return sub_10013B644(a2, a1);
    case 7:
      return sub_10013B270(a2, a1);
  }
  return 0;
}

id sub_10013F57C(id result, uint64_t a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 2:
      return _[result writeSFixed32:a3 value:a2];
    case 9:
      return _[result writeSInt32:a3 value:a2];
    case 7:
      return _[result writeInt32:a3 value:a2];
  }
  return result;
}

uint64_t sub_10013F684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%u", a2];
  int v6 = +[NSString stringWithFormat:@"%d", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10013FCF0(unint64_t a1, int a2, int a3)
{
  if (a3 == 4) {
    return sub_10013B118(a2);
  }
  if (a3 == 12) {
    return sub_10013B208(a2, a1);
  }
  return 0;
}

uint64_t sub_10013FF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%u", a2];
  int v6 = +[NSString stringWithFormat:@"%llu", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_1001405DC(unint64_t a1, int a2, int a3)
{
  switch(a3)
  {
    case 5:
      return sub_10013B118(a2);
    case 10:
      return sub_10013B6E0(a2, a1);
    case 8:
      return sub_10013B208(a2, a1);
  }
  return 0;
}

id sub_10014077C(id result, uint64_t a2, uint64_t a3, int a4)
{
  switch(a4)
  {
    case 5:
      return _[result writeSFixed64:a3 value:a2];
    case 10:
      return _[result writeSInt64:a3 value:a2];
    case 8:
      return _[result writeInt64:a3 value:a2];
  }
  return result;
}

uint64_t sub_100140884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%u", a2];
  int v6 = +[NSString stringWithFormat:@"%lld", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_1001410EC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%u", a2];
  if (a3) {
    CFStringRef v6 = @"true";
  }
  else {
    CFStringRef v6 = @"false";
  }
  int v7 = *(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_100141948(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%u", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%.*g", 6, a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_1001421C4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%u", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%.*lg", 15, *(void *)&a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

BOOL sub_1001424F8(int a1)
{
  return a1 != -72499473;
}

uint64_t sub_100142B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%u", a2];
  CFStringRef v6 = +[NSNumber numberWithInt:a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSNumber *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_100143798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%u", a2];
  CFStringRef v6 = *(uint64_t (**)(uint64_t, NSString *, uint64_t))(v4 + 16);

  return v6(v4, v5, a3);
}

uint64_t sub_100144004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%d", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%u", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014487C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%d", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%d", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014511C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%d", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%llu", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_100145994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%d", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%lld", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_1001461DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%d", a2];
  if (a3) {
    CFStringRef v6 = @"true";
  }
  else {
    CFStringRef v6 = @"false";
  }
  int v7 = *(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_100146A18(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%d", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%.*g", 6, a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_100147274(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%d", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%.*lg", 15, *(void *)&a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_100147BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%d", a2];
  CFStringRef v6 = +[NSNumber numberWithInt:a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSNumber *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_1001487D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%d", a2];
  CFStringRef v6 = *(uint64_t (**)(uint64_t, NSString *, uint64_t))(v4 + 16);

  return v6(v4, v5, a3);
}

uint64_t sub_100149060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%llu", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%u", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_1001498F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%llu", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%d", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014A1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%llu", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%llu", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014AA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%llu", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%lld", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014B2B8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%llu", a2];
  if (a3) {
    CFStringRef v6 = @"true";
  }
  else {
    CFStringRef v6 = @"false";
  }
  int v7 = *(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014BB14(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%llu", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%.*g", 6, a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014C390(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%llu", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%.*lg", 15, *(void *)&a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014CD14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%llu", a2];
  CFStringRef v6 = +[NSNumber numberWithInt:a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSNumber *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014D950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%llu", a2];
  CFStringRef v6 = *(uint64_t (**)(uint64_t, NSString *, uint64_t))(v4 + 16);

  return v6(v4, v5, a3);
}

uint64_t sub_10014E1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%lld", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%u", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014EA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%lld", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%d", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014F2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%lld", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%llu", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10014FB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%lld", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%lld", a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_100150394(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%lld", a2];
  if (a3) {
    CFStringRef v6 = @"true";
  }
  else {
    CFStringRef v6 = @"false";
  }
  int v7 = *(uint64_t (**)(uint64_t, NSString *, const __CFString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_100150BD0(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%lld", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%.*g", 6, a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10015142C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%lld", a2];
  CFStringRef v6 = +[NSString stringWithFormat:@"%.*lg", 15, *(void *)&a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSString *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_100151D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%lld", a2];
  CFStringRef v6 = +[NSNumber numberWithInt:a3];
  int v7 = *(uint64_t (**)(uint64_t, NSString *, NSNumber *))(v4 + 16);

  return v7(v4, v5, v6);
}

uint64_t sub_10015298C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%lld", a2];
  CFStringRef v6 = *(uint64_t (**)(uint64_t, NSString *, uint64_t))(v4 + 16);

  return v6(v4, v5, a3);
}

uint64_t sub_1001531C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%u", a3];
  CFStringRef v6 = *(uint64_t (**)(uint64_t, uint64_t, NSString *))(v4 + 16);

  return v6(v4, a2, v5);
}

uint64_t sub_1001539B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%d", a3];
  CFStringRef v6 = *(uint64_t (**)(uint64_t, uint64_t, NSString *))(v4 + 16);

  return v6(v4, a2, v5);
}

uint64_t sub_1001541B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%llu", a3];
  CFStringRef v6 = *(uint64_t (**)(uint64_t, uint64_t, NSString *))(v4 + 16);

  return v6(v4, a2, v5);
}

uint64_t sub_1001549A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%lld", a3];
  CFStringRef v6 = *(uint64_t (**)(uint64_t, uint64_t, NSString *))(v4 + 16);

  return v6(v4, a2, v5);
}

uint64_t sub_100155160(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    CFStringRef v4 = @"true";
  }
  else {
    CFStringRef v4 = @"false";
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, const __CFString *))(v3 + 16))(v3, a2, v4);
}

uint64_t sub_1001558D8(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%.*g", 6, a3];
  CFStringRef v6 = *(uint64_t (**)(uint64_t, uint64_t, NSString *))(v4 + 16);

  return v6(v4, a2, v5);
}

uint64_t sub_1001560A8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = +[NSString stringWithFormat:@"%.*lg", 15, *(void *)&a3];
  CFStringRef v6 = *(uint64_t (**)(uint64_t, uint64_t, NSString *))(v4 + 16);

  return v6(v4, a2, v5);
}

uint64_t sub_100156954(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:");
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, NSNumber *))(v3 + 16);

  return v5(v3, a2, v4);
}

id sub_10015B228(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 45))
  {
    if ((*(unsigned char *)(v5 + 45) & 2) != 0)
    {
      [a3 writeTag:*(unsigned int *)(v5 + 40) format:2];
      unint64_t v10 = *(char *)(v5 + 44);
      if (v10 > 6)
      {
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        id v13 = [a2 countByEnumeratingWithState:&v24 objects:v32 count:16];
        if (v13)
        {
          id v14 = v13;
          uint64_t v12 = 0;
          uint64_t v15 = *(void *)v25;
          do
          {
            for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v25 != v15) {
                objc_enumerationMutation(a2);
              }
              v12 += (uint64_t)sub_10015C10C((id)*(unsigned __int8 *)(v5 + 44), *(void **)(*((void *)&v24 + 1) + 8 * i));
            }
            id v14 = [a2 countByEnumeratingWithState:&v24 objects:v32 count:16];
          }
          while (v14);
        }
        else
        {
          uint64_t v12 = 0;
        }
      }
      else
      {
        uint64_t v11 = qword_10028ACB8[v10];
        uint64_t v12 = (void)[a2 count] * v11;
      }
      [a3 writeRawVarintSizeTAs32:v12];
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id result = [a2 countByEnumeratingWithState:&v20 objects:&v28 count:16];
      if (result)
      {
        id v17 = result;
        uint64_t v18 = *(void *)v21;
        do
        {
          uint64_t v19 = 0;
          do
          {
            if (*(void *)v21 != v18) {
              objc_enumerationMutation(a2);
            }
            switch(*(unsigned char *)(v5 + 44))
            {
              case 0:
                [a3 writeBoolNoTag:[v20 BOOLValue]];
                break;
              case 1:
                [a3 writeFixed32NoTag:[*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) unsignedIntValue]];
                break;
              case 2:
                [a3 writeSFixed32NoTag:[*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) intValue]];
                break;
              case 3:
                [*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) floatValue];
                [a3 writeFloatNoTag:];
                break;
              case 4:
                [a3 writeFixed64NoTag:[*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) unsignedLongLongValue]];
                break;
              case 5:
                [a3 writeSFixed64NoTag:[*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) longLongValue]];
                break;
              case 6:
                [*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) doubleValue];
                [a3 writeDoubleNoTag:];
                break;
              case 7:
                [a3 writeInt32NoTag:[*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) intValue]];
                break;
              case 8:
                [a3 writeInt64NoTag:[*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) longLongValue]];
                break;
              case 9:
                [a3 writeSInt32NoTag:[*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) intValue]];
                break;
              case 0xA:
                [a3 writeSInt64NoTag:[*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) longLongValue]];
                break;
              case 0xB:
                [a3 writeUInt32NoTag:[*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) unsignedIntValue]];
                break;
              case 0xC:
                [a3 writeUInt64NoTag:[*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) unsignedLongLongValue]];
                break;
              case 0xD:
                [a3 writeBytesNoTag:*(void *)(*((void *)&v20 + 1) + 8 * (void)v19)];
                break;
              case 0xE:
                [a3 writeStringNoTag:*(void *)(*((void *)&v20 + 1) + 8 * (void)v19)];
                break;
              case 0xF:
                [a3 writeMessageNoTag:*(void *)(*((void *)&v20 + 1) + 8 * (void)v19)];
                break;
              case 0x10:
                [a3 writeGroupNoTag:*(unsigned int *)(v5 + 40) value:*(void *)(*((void *)&v20 + 1) + 8 * (void)v19)];
                break;
              case 0x11:
                [a3 writeEnumNoTag:[*(id *)(*((void *)&v20 + 1) + 8 * (void)v19) intValue]];
                break;
              default:
                break;
            }
            uint64_t v19 = (char *)v19 + 1;
          }
          while (v17 != v19);
          id result = [a2 countByEnumeratingWithState:&v20 objects:&v28 count:16];
          id v17 = result;
        }
        while (result);
      }
    }
    else
    {
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id result = [a2 countByEnumeratingWithState:&v28 objects:v32 count:16];
      if (result)
      {
        id v7 = result;
        uint64_t v8 = *(void *)v29;
        do
        {
          id v9 = 0;
          do
          {
            if (*(void *)v29 != v8) {
              objc_enumerationMutation(a2);
            }
            sub_10015B6DC(*(id *)(*((void *)&v28 + 1) + 8 * (void)v9), v5, a3);
            id v9 = (char *)v9 + 1;
          }
          while (v7 != v9);
          id result = [a2 countByEnumeratingWithState:&v28 objects:v32 count:16];
          id v7 = result;
        }
        while (result);
      }
    }
  }
  else
  {
    return sub_10015B6DC(a2, v5, a3);
  }
  return result;
}

id sub_10015B6DC(id result, uint64_t a2, void *a3)
{
  switch(*(unsigned char *)(a2 + 44))
  {
    case 0:
      uint64_t v4 = *(unsigned int *)(a2 + 40);
      id v5 = [result BOOLValue];
      id result = [a3 writeBool:v4 value:v5];
      break;
    case 1:
      uint64_t v18 = *(unsigned int *)(a2 + 40);
      id v19 = [result unsignedIntValue];
      id result = [a3 writeFixed32:v18 value:v19];
      break;
    case 2:
      uint64_t v6 = *(unsigned int *)(a2 + 40);
      id v7 = [result intValue];
      id result = _[a3 writeSFixed32:v6 value:v7];
      break;
    case 3:
      uint64_t v20 = *(unsigned int *)(a2 + 40);
      [result floatValue];
      id result = [a3 writeFloat:v20];
      break;
    case 4:
      uint64_t v8 = *(unsigned int *)(a2 + 40);
      id v9 = [result unsignedLongLongValue];
      id result = [a3 writeFixed64:v8 value:v9];
      break;
    case 5:
      uint64_t v21 = *(unsigned int *)(a2 + 40);
      id v22 = [result longLongValue];
      id result = _[a3 writeSFixed64:v21 value:v22];
      break;
    case 6:
      uint64_t v23 = *(unsigned int *)(a2 + 40);
      [result doubleValue];
      id result = [a3 writeDouble:v23];
      break;
    case 7:
      uint64_t v24 = *(unsigned int *)(a2 + 40);
      id v25 = [result intValue];
      id result = _[a3 writeInt32:v24 value:v25];
      break;
    case 8:
      uint64_t v26 = *(unsigned int *)(a2 + 40);
      id v27 = [result longLongValue];
      id result = _[a3 writeInt64:v26 value:v27];
      break;
    case 9:
      uint64_t v10 = *(unsigned int *)(a2 + 40);
      id v11 = [result intValue];
      id result = _[a3 writeSInt32:v10 value:v11];
      break;
    case 0xA:
      uint64_t v28 = *(unsigned int *)(a2 + 40);
      id v29 = [result longLongValue];
      id result = _[a3 writeSInt64:v28 value:v29];
      break;
    case 0xB:
      uint64_t v12 = *(unsigned int *)(a2 + 40);
      id v13 = [result unsignedIntValue];
      id result = [a3 writeUInt32:v12 value:v13];
      break;
    case 0xC:
      uint64_t v14 = *(unsigned int *)(a2 + 40);
      id v15 = [result unsignedLongLongValue];
      id result = [a3 writeUInt64:v14 value:v15];
      break;
    case 0xD:
      uint64_t v30 = *(unsigned int *)(a2 + 40);
      id result = [a3 writeBytes:v30 value:result];
      break;
    case 0xE:
      uint64_t v16 = *(unsigned int *)(a2 + 40);
      id result = [a3 writeString:v16 value:result];
      break;
    case 0xF:
      uint64_t v31 = *(unsigned int *)(a2 + 40);
      if ((*(unsigned char *)(a2 + 45) & 4) != 0)
      {
        id result = _[a3 writeMessageSetExtension:v31 value:result];
      }
      else
      {
        id result = [a3 writeMessage:v31 value:result];
      }
      break;
    case 0x10:
      uint64_t v17 = *(unsigned int *)(a2 + 40);
      id result = [a3 writeGroup:v17 value:result];
      break;
    case 0x11:
      uint64_t v32 = *(unsigned int *)(a2 + 40);
      id v33 = [result intValue];
      id result = [a3 writeEnum:v32 value:v33];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10015BAF8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 45))
  {
    if ((*(unsigned char *)(v3 + 45) & 2) != 0)
    {
      unint64_t v11 = *(char *)(v3 + 44);
      if (v11 > 6)
      {
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        id v14 = [a2 countByEnumeratingWithState:&v19 objects:v23 count:16];
        if (v14)
        {
          id v15 = v14;
          uint64_t v13 = 0;
          uint64_t v16 = *(void *)v20;
          do
          {
            for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v20 != v16) {
                objc_enumerationMutation(a2);
              }
              v13 += (uint64_t)sub_10015C10C((id)*(unsigned __int8 *)(v3 + 44), *(void **)(*((void *)&v19 + 1) + 8 * i));
            }
            id v15 = [a2 countByEnumeratingWithState:&v19 objects:v23 count:16];
          }
          while (v15);
        }
        else
        {
          uint64_t v13 = 0;
        }
      }
      else
      {
        uint64_t v12 = qword_10028ACB8[v11];
        uint64_t v13 = (void)[a2 count] * v12;
      }
      uint64_t v18 = sub_10013B168(*(_DWORD *)(v3 + 40));
      return v18 + v13 + sub_100139664(v13);
    }
    else
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      id v6 = [a2 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = 0;
        uint64_t v9 = *(void *)v20;
        do
        {
          for (uint64_t j = 0; j != v7; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v20 != v9) {
              objc_enumerationMutation(a2);
            }
            v8 += sub_10015BD40(v3, *(void **)(*((void *)&v19 + 1) + 8 * (void)j));
          }
          id v7 = [a2 countByEnumeratingWithState:&v19 objects:v23 count:16];
        }
        while (v7);
      }
      else
      {
        return 0;
      }
    }
    return v8;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    return sub_10015BD40(v4, a2);
  }
}

uint64_t sub_10015BD40(uint64_t result, void *a2)
{
  switch(*(unsigned char *)(result + 44))
  {
    case 0:
      int v2 = *(_DWORD *)(result + 40);
      [a2 BOOLValue];
      return sub_10013B310(v2);
    case 1:
      int v16 = *(_DWORD *)(result + 40);
      [a2 unsignedIntValue];
      int v4 = v16;
      return sub_10013B1B8(v4);
    case 2:
      int v3 = *(_DWORD *)(result + 40);
      [a2 intValue];
      int v4 = v3;
      return sub_10013B1B8(v4);
    case 3:
      int v17 = *(_DWORD *)(result + 40);
      [a2 floatValue];
      int v4 = v17;
      return sub_10013B1B8(v4);
    case 4:
      int v5 = *(_DWORD *)(result + 40);
      [a2 unsignedLongLongValue];
      int v6 = v5;
      return sub_10013B118(v6);
    case 5:
      int v18 = *(_DWORD *)(result + 40);
      [a2 longLongValue];
      int v6 = v18;
      return sub_10013B118(v6);
    case 6:
      int v19 = *(_DWORD *)(result + 40);
      [a2 doubleValue];
      int v6 = v19;
      return sub_10013B118(v6);
    case 7:
      int v20 = *(_DWORD *)(result + 40);
      unsigned int v21 = [a2 intValue];
      int v22 = v20;
      goto LABEL_40;
    case 8:
      int v23 = *(_DWORD *)(result + 40);
      id v12 = [a2 longLongValue];
      int v13 = v23;
      goto LABEL_19;
    case 9:
      int v7 = *(_DWORD *)(result + 40);
      int v8 = [a2 intValue];
      return sub_10013B644(v7, v8);
    case 0xA:
      int v24 = *(_DWORD *)(result + 40);
      id v25 = [a2 longLongValue];
      return sub_10013B6E0(v24, (uint64_t)v25);
    case 0xB:
      int v9 = *(_DWORD *)(result + 40);
      unsigned int v10 = [a2 unsignedIntValue];
      return sub_10013B5B0(v9, v10);
    case 0xC:
      int v11 = *(_DWORD *)(result + 40);
      id v12 = [a2 unsignedLongLongValue];
      int v13 = v11;
LABEL_19:
      id result = sub_10013B208(v13, (unint64_t)v12);
      break;
    case 0xD:
      int v26 = *(_DWORD *)(result + 40);
      id result = (uint64_t)sub_10013B510(v26, a2);
      break;
    case 0xE:
      int v14 = *(_DWORD *)(result + 40);
      id result = (uint64_t)sub_10013B360(v14, a2);
      break;
    case 0xF:
      char v27 = *(unsigned char *)(result + 45);
      unsigned int v28 = *(_DWORD *)(result + 40);
      if ((v27 & 4) != 0)
      {
        id result = (uint64_t)sub_10013B74C(v28, a2);
      }
      else
      {
        id result = (uint64_t)sub_10013B470(v28, a2);
      }
      break;
    case 0x10:
      int v15 = *(_DWORD *)(result + 40);
      id result = (uint64_t)sub_10013B404(v15, a2);
      break;
    case 0x11:
      int v29 = *(_DWORD *)(result + 40);
      unsigned int v21 = [a2 intValue];
      int v22 = v29;
LABEL_40:
      id result = sub_10013B270(v22, v21);
      break;
    default:
      return result;
  }
  return result;
}

id sub_10015C10C(id result, void *a2)
{
  switch((int)result)
  {
    case 0:
      [a2 BOOLValue];
      return (id)variable initialization expression of KTEligibilityDB.schemaVersion();
    case 1:
      [a2 unsignedIntValue];
      return (id)sub_100138DE0();
    case 2:
      [a2 intValue];
      return (id)sub_100138DE0();
    case 3:
      [a2 floatValue];
      return (id)sub_100138DE0();
    case 4:
      [a2 unsignedLongLongValue];
      return (id)sub_100138C00();
    case 5:
      [a2 longLongValue];
      return (id)sub_100138C00();
    case 6:
      [a2 doubleValue];
      return (id)sub_100138C00();
    case 7:
      unsigned int v2 = [a2 intValue];
      goto LABEL_25;
    case 8:
      id v3 = [a2 longLongValue];
      goto LABEL_28;
    case 9:
      int v4 = [a2 intValue];
      return (id)sub_100139C78(v4);
    case 10:
      id v5 = [a2 longLongValue];
      return (id)sub_100139EC0((uint64_t)v5);
    case 11:
      unsigned int v6 = [a2 unsignedIntValue];
      return (id)sub_100139664(v6);
    case 12:
      id v3 = [a2 unsignedLongLongValue];
LABEL_28:
      id result = (id)sub_100138FE4((unint64_t)v3);
      break;
    case 13:
      id result = sub_10013B0C8(a2);
      break;
    case 14:
      id result = sub_10013B020(a2);
      break;
    case 15:
      id result = sub_10013B078(a2);
      break;
    case 16:
      id result = [a2 serializedSize];
      break;
    case 17:
      unsigned int v2 = [a2 intValue];
LABEL_25:
      id result = (id)sub_10013940C(v2);
      break;
    default:
      return result;
  }
  return result;
}

void sub_10015C5FC(void *key, const __CFDictionary *a2, CFDictionaryRef theDict)
{
  Value = (void *)CFDictionaryGetValue(theDict, key);
  if (Value)
  {
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)sub_10015C6B4, Value);
  }
  else
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, a2);
    CFDictionarySetValue(theDict, key, MutableCopy);
    CFRelease(MutableCopy);
  }
}

void sub_10015C6B4(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

void *sub_10015C738(objc_class *a1, uint64_t a2, void *a3)
{
  id v5 = objc_alloc_init(a1);
  v5[4] = a2;
  v5[5] = a3;
  return v5;
}

BOOL sub_10015C77C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) == a2;
}

id sub_10015C78C(void *a1)
{
  id result = (id)a1[4];
  if (result)
  {
    id v3 = (void *)a1[5];
    if (v3) {
      return (id)sub_100168A04((uint64_t)result, v3, a1);
    }
    else {
      return [result setExtension:a1[6]];
    }
  }
  return result;
}

id sub_10015C7B4(void *a1, uint64_t a2)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  int v4 = (void *)*((void *)[(id)objc_opt_class() descriptor] + 1);
  id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (result)
  {
    id v6 = result;
    uint64_t v7 = *(void *)v12;
    while (2)
    {
      int v8 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        int v9 = *(void **)(*((void *)&v11 + 1) + 8 * (void)v8);
        if ([v9 fieldType] == 1 && sub_1001683BC((uint64_t)a1, (uint64_t)v9) == a2)
        {
          if (*(unsigned __int8 *)(v9[1] + 30) - 13 >= 4) {
            unsigned int v10 = &OBJC_IVAR___TransparencyGPBInt32Array__autocreator;
          }
          else {
            unsigned int v10 = &OBJC_IVAR___TransparencyGPBAutocreatedArray__autocreator;
          }
          *(void *)(a2 + *v10) = 0;
          return sub_10015C78C(a1);
        }
        int v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      id v6 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

id sub_10015C920(void *a1, uint64_t a2)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  int v4 = (void *)*((void *)[(id)objc_opt_class() descriptor] + 1);
  id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (result)
  {
    id v6 = result;
    uint64_t v7 = *(void *)v12;
    while (2)
    {
      int v8 = 0;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        int v9 = *(void **)(*((void *)&v11 + 1) + 8 * (void)v8);
        if ([v9 fieldType] == 2 && sub_1001683BC((uint64_t)a1, (uint64_t)v9) == a2)
        {
          if ([v9 mapKeyDataType] == 14
            && *(unsigned __int8 *)(v9[1] + 30) - 13 < 4)
          {
            unsigned int v10 = &OBJC_IVAR___TransparencyGPBAutocreatedDictionary__autocreator;
          }
          else
          {
            unsigned int v10 = &OBJC_IVAR___TransparencyGPBInt32Int32Dictionary__autocreator;
          }
          *(void *)(a2 + *v10) = 0;
          return sub_10015C78C(a1);
        }
        int v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id result = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      id v6 = result;
      if (result) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_10015CAA0(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 32))
    {
      *(void *)(a1 + 32) = 0;

      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
    }
  }
}

NSError *sub_10015CDAC(void *a1)
{
  if (!objc_msgSend(objc_msgSend(a1, "name"), "isEqual:", @"TransparencyGPBCodedInputStreamException")|| (id result = (NSError *)objc_msgSend(objc_msgSend(a1, "userInfo"), "objectForKeyedSubscript:", @"TransparencyGPBCodedInputStreamUnderlyingErrorKey")) == 0)
  {
    id v3 = [a1 reason];
    if ([v3 length])
    {
      CFStringRef v5 = @"Reason";
      id v6 = v3;
      int v4 = +[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1];
    }
    else
    {
      int v4 = 0;
    }
    return +[NSError errorWithDomain:@"TransparencyGPBMessageErrorDomain" code:-100 userInfo:v4];
  }
  return result;
}

void sub_10015D3C0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = [a3 copyWithZone:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setObject:v5 forKey:a2];
}

NSMutableDictionary *sub_10015D4A4(void *a1, uint64_t a2)
{
  if (![a1 count]) {
    return 0;
  }
  int v4 = -[NSMutableDictionary initWithCapacity:](+[NSMutableDictionary allocWithZone:](NSMutableDictionary, "allocWithZone:", a2), "initWithCapacity:", [a1 count]);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v5 = [a1 countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v29;
    uint64_t v21 = *(void *)v29;
    int v22 = v4;
    do
    {
      int v8 = 0;
      id v23 = v6;
      do
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(a1);
        }
        int v9 = *(void **)(*((void *)&v28 + 1) + 8 * (void)v8);
        id v10 = [a1 objectForKey:v9];
        unsigned int v11 = *(unsigned __int8 *)(v9[1] + 44) - 15;
        if ([v9 isRepeated])
        {
          if (v11 > 1)
          {
            id v18 = [v10 mutableCopyWithZone:a2];
            goto LABEL_20;
          }
          id v12 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v10 count]];
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          id v13 = [v10 countByEnumeratingWithState:&v24 objects:v32 count:16];
          if (v13)
          {
            id v14 = v13;
            uint64_t v15 = *(void *)v25;
            do
            {
              for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v25 != v15) {
                  objc_enumerationMutation(v10);
                }
                id v17 = [*(id *)(*((void *)&v24 + 1) + 8 * i) copyWithZone:a2];
                [v12 addObject:v17];
              }
              id v14 = [v10 countByEnumeratingWithState:&v24 objects:v32 count:16];
            }
            while (v14);
          }
          int v4 = v22;
          [(NSMutableDictionary *)v22 setObject:v12 forKey:v9];

          uint64_t v7 = v21;
          id v6 = v23;
        }
        else
        {
          if (v11 <= 1)
          {
            id v18 = [v10 copyWithZone:a2];
LABEL_20:
            int v19 = v18;
            [(NSMutableDictionary *)v4 setObject:v18 forKey:v9];

            goto LABEL_22;
          }
          [(NSMutableDictionary *)v4 setObject:v10 forKey:v9];
        }
LABEL_22:
        int v8 = (char *)v8 + 1;
      }
      while (v8 != v6);
      id v6 = [a1 countByEnumeratingWithState:&v28 objects:v33 count:16];
    }
    while (v6);
  }
  return v4;
}

void *sub_10015DAA0(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (*(unsigned __int8 *)(v4 + 30) - 15 >= 2)
  {
    if (sub_1001688EC(a1, *(_DWORD *)(v4 + 20), *(_DWORD *)(v4 + 16))) {
      return *(void **)(*(void *)(a1 + 64) + *(unsigned int *)(a2[1] + 24));
    }
    else {
      return [a2 defaultValue];
    }
  }
  else
  {
    id v5 = (unint64_t *)(*(void *)(a1 + 64) + *(unsigned int *)(v4 + 24));
    id v6 = (void *)atomic_load(v5);
    if (!v6)
    {
      id v6 = objc_alloc_init((Class)[a2 msgClass]);
      void v6[4] = a1;
      uint64_t v7 = a2;
      uint64_t v8 = 0;
      _OWORD v6[5] = v7;
      atomic_compare_exchange_strong((atomic_ullong *volatile)v5, (unint64_t *)&v8, (unint64_t)v6);
      if (v8)
      {
        sub_10015CAA0((uint64_t)v6);

        return (void *)v8;
      }
    }
  }
  return v6;
}

void sub_10015DE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_10015DEB0(void *result, void *a2, void *a3, unsigned char *a4)
{
  if (*(unsigned __int8 *)(a2[1] + 44) - 15 <= 1)
  {
    id v6 = result;
    if ([a2 isRepeated])
    {
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      id result = [a3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (!result) {
        return result;
      }
      id v7 = result;
      uint64_t v8 = *(void *)v11;
LABEL_5:
      uint64_t v9 = 0;
      while (1)
      {
        if (*(void *)v11 != v8) {
          objc_enumerationMutation(a3);
        }
        id result = [*(id *)(*((void *)&v10 + 1) + 8 * v9) isInitialized];
        if (!result) {
          break;
        }
        if (v7 == (id)++v9)
        {
          id result = [a3 countByEnumeratingWithState:&v10 objects:v14 count:16];
          id v7 = result;
          if (result) {
            goto LABEL_5;
          }
          return result;
        }
      }
    }
    else
    {
      id result = [a3 isInitialized];
      if (result) {
        return result;
      }
    }
    *(unsigned char *)(*(void *)(v6[4] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_10015F1C8(uint64_t a1, void *a2)
{
  [a2 containingMessageClass];
  uint64_t result = objc_opt_isKindOfClass();
  if ((result & 1) == 0) {
    return (uint64_t)[NSException raise:format:](NSException, @"raise:format:", NSInvalidArgumentException, @"Extension %@ used on wrong class (%@ instead of %@)", [a2 singletonName], objc_opt_class(), objc_msgSend(a2, @"containingMessageClass"));
  }
  return result;
}

void sub_10015FBA0(void *a1, int a2, uint64_t *a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    int v9 = sub_100136C90(a3 + 1);
    unint64_t v10 = sub_100137130((uint64_t)(a3 + 1), v9);
    while (sub_100137184((uint64_t)(a3 + 1)))
    {
      CFStringRef v11 = sub_100163FA0(a1, a5, a3, a4, 0);
      if (v11)
      {
        long long v12 = (__CFString *)v11;
        [a5 addExtension:a1 value:v11];
      }
    }
    sub_10013717C((uint64_t)(a3 + 1), v10);
  }
  else
  {
    uint64_t v13 = a1[1];
    if (*(unsigned char *)(v13 + 45))
    {
      CFStringRef v15 = sub_100163FA0(a1, a5, a3, a4, 0);
      if (!v15) {
        return;
      }
      id v17 = (__CFString *)v15;
      [a5 addExtension:a1 value:v15];
    }
    else
    {
      if (*(unsigned __int8 *)(v13 + 44) - 15 > 1) {
        id v14 = 0;
      }
      else {
        id v14 = [a5 getExistingExtension:a1];
      }
      CFStringRef v16 = sub_100163FA0(a1, a5, a3, a4, v14);
      if (!v16) {
        return;
      }
      id v17 = (__CFString *)v16;
      [a5 setExtension:a1 value:v16];
    }
  }
}

uint64_t sub_10015FD68(void *a1)
{
  uint64_t result = a1[1];
  if (!result)
  {
    a1[1] = objc_alloc_init(TransparencyGPBUnknownFieldSet);
    sub_10015C78C(a1);
    return a1[1];
  }
  return result;
}

uint64_t sub_1001604E0(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a2[1] + 30);
  id v6 = (uint64_t *)(a3 + 8);
  id v7 = sub_10016119C((uint64_t)a1, a2);
  int v8 = sub_100136C90(v6);
  unint64_t v9 = sub_100137130((uint64_t)v6, v8);
  while (sub_100137184((uint64_t)v6))
  {
    switch(v5)
    {
      case 0:
        uint64_t v10 = sub_100136D68(v6);
        goto LABEL_14;
      case 1:
      case 2:
        uint64_t v10 = sub_100136CE4(v6);
        goto LABEL_14;
      case 3:
        *(float *)&double v11 = sub_100136BC8(v6);
        [v7 addValue:v11];
        continue;
      case 4:
      case 5:
        uint64_t v10 = sub_100136CA8(v6);
        goto LABEL_14;
      case 6:
        [v7 addValue:sub_100136B8C(v6)];
        continue;
      case 7:
      case 11:
        uint64_t v10 = sub_100136C90(v6);
        goto LABEL_14;
      case 8:
      case 12:
        uint64_t v10 = sub_100136C04(v6);
        goto LABEL_14;
      case 9:
        uint64_t v10 = sub_100136D20(v6);
        goto LABEL_14;
      case 10:
        uint64_t v10 = sub_100136D44(v6);
LABEL_14:
        [v7 addValue:v10];
        break;
      case 17:
        uint64_t v12 = sub_100136C90(v6);
        if ((*(_WORD *)(a2[1] + 28) & 0x1000) != 0 && ![a2 isValidEnumValue:v12]) {
          [(id)sub_10015FD68(a1) mergeVarintField:*(unsigned int *)(a2[1] + 16) value:v12];
        }
        else {
          [v7 addRawValue:v12];
        }
        break;
      default:
        continue;
    }
  }

  return sub_10013717C((uint64_t)v6, v9);
}

void sub_100160718(void *a1, void *a2, uint64_t *a3, uint64_t a4)
{
  int v8 = sub_10016119C((uint64_t)a1, a2);
  unint64_t v9 = a3 + 1;
  switch(*(unsigned char *)(a2[1] + 30))
  {
    case 0:
      sub_100136D68(v9);
      goto LABEL_10;
    case 1:
    case 2:
      sub_100136CE4(v9);
      goto LABEL_10;
    case 3:
      *(float *)&double v10 = sub_100136BC8(v9);
      double v11 = v8;
      goto LABEL_6;
    case 4:
    case 5:
      sub_100136CA8(v9);
      goto LABEL_27;
    case 6:
      double v10 = sub_100136B8C(v9);
      double v11 = v8;
      goto LABEL_6;
    case 7:
    case 0xB:
      sub_100136C90(v9);
      goto LABEL_10;
    case 8:
    case 0xC:
      sub_100136C04(v9);
      goto LABEL_27;
    case 9:
      sub_100136D20(v9);
LABEL_10:
      double v11 = v8;
      goto LABEL_6;
    case 0xA:
      sub_100136D44(v9);
LABEL_27:
      double v11 = v8;
LABEL_6:
      [v11 addValue:v10];
      return;
    case 0xD:
      uint64_t v12 = sub_10013703C(v9);
      goto LABEL_31;
    case 0xE:
      uint64_t v12 = (void *)sub_100136F38(v9);
LABEL_31:
      id v14 = v12;
      id v18 = v12;
      uint64_t v13 = v8;
      goto LABEL_32;
    case 0xF:
      id v18 = objc_alloc_init((Class)[a2 msgClass]);
      [a3 readMessage:v18 extensionRegistry:a4];
      goto LABEL_17;
    case 0x10:
      id v18 = objc_alloc_init((Class)[a2 msgClass]);
      [a3 readGroup:*(unsigned int *)(a2[1] + 16) message:v18 extensionRegistry:a4];
LABEL_17:
      uint64_t v13 = v8;
      id v14 = v18;
LABEL_32:
      [v13 addObject:v14];

      break;
    case 0x11:
      uint64_t v15 = sub_100136C90(v9);
      if ((*(_WORD *)(a2[1] + 28) & 0x1000) != 0 && ![a2 isValidEnumValue:v15])
      {
        CFStringRef v16 = (void *)sub_10015FD68(a1);
        uint64_t v17 = *(unsigned int *)(a2[1] + 16);
        [v16 mergeVarintField:v17 value:v15];
      }
      else
      {
        [v8 addRawValue:v15];
      }
      break;
    default:
      return;
  }
}

void *sub_100160A68(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)sub_1001683BC(a1, (uint64_t)a2);
  if (!v4)
  {
    uint64_t v4 = sub_100164450(a2, 0);
    sub_100168A48(a1, a2, v4);
  }
  return v4;
}

void *sub_10016119C(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)sub_1001683BC(a1, (uint64_t)a2);
  if (!v4)
  {
    uint64_t v4 = sub_100164AFC(a2, 0);
    sub_100168A48(a1, a2, v4);
  }
  return v4;
}

void sub_10016254C(_Unwind_Exception *a1)
{
}

uint64_t sub_100162664(uint64_t a1)
{
  uint64_t result = variable initialization expression of KTEligibilityDB.schemaVersion();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1001626A0(uint64_t a1)
{
  uint64_t result = sub_100138DE0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1001626DC(uint64_t a1)
{
  uint64_t result = sub_100138DE0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_100162718(uint64_t a1)
{
  uint64_t result = sub_100138DE0();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_100162750(uint64_t a1)
{
  uint64_t result = sub_100138C00();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_10016278C(uint64_t a1)
{
  uint64_t result = sub_100138C00();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1001627C8(uint64_t a1)
{
  uint64_t result = sub_100138C00();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_100162800(uint64_t a1, unsigned int a2)
{
  uint64_t result = sub_10013940C(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_10016283C(uint64_t a1, unint64_t a2)
{
  uint64_t result = sub_100138FE4(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_100162878(uint64_t a1, int a2)
{
  uint64_t result = sub_100139C78(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1001628B4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100139EC0(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1001628F0(uint64_t a1, unsigned int a2)
{
  uint64_t result = sub_100139664(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_10016292C(uint64_t a1, unint64_t a2)
{
  uint64_t result = sub_100138FE4(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_100162968(uint64_t a1, unsigned int a2)
{
  uint64_t result = sub_10013940C(a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

BOOL sub_100163BC4(uint64_t a1, uint64_t a2)
{
  return sub_1001688EC(a2, *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 36));
}

void sub_100163BD4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v5 = objc_opt_class();
    if (*(void *)(*(void *)(a1 + 32) + 48)) {
      id v6 = *(const char **)(*(void *)(a1 + 32) + 48);
    }
    else {
      id v6 = 0;
    }
    +[NSException raise:NSInvalidArgumentException, @"%@: %@ can only be set to NO (to clear field).", v5, NSStringFromSelector(v6) format];
  }
  uint64_t v7 = *(void *)(a1 + 32);

  sub_100168660(a2, v7);
}

uint64_t sub_100163CB0(uint64_t a1, uint64_t a2)
{
  return sub_100168938(a2, *(_DWORD *)(a1 + 32));
}

TransparencyGPBAutocreatedArray *sub_100163CC0(uint64_t a1, objc_class *a2)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v3 = (unint64_t *)(*((void *)a2 + 8) + *(unsigned int *)(v2[1] + 24));
  uint64_t result = (TransparencyGPBAutocreatedArray *)atomic_load(v3);
  if (!result)
  {
    uint64_t result = sub_100164AFC(v2, a2);
    uint64_t v5 = 0;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v3, (unint64_t *)&v5, (unint64_t)result);
    if (v5)
    {
      if (*(unsigned __int8 *)(v2[1] + 30) - 13 >= 4) {
        id v6 = &OBJC_IVAR___TransparencyGPBInt32Array__autocreator;
      }
      else {
        id v6 = &OBJC_IVAR___TransparencyGPBAutocreatedArray__autocreator;
      }
      *(Class *)((char *)&result->super.super.super.isa + *v6) = 0;

      return (TransparencyGPBAutocreatedArray *)v5;
    }
  }
  return result;
}

TransparencyGPBAutocreatedDictionary *sub_100163D5C(uint64_t a1, objc_class *a2)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v3 = (unint64_t *)(*((void *)a2 + 8) + *(unsigned int *)(v2[1] + 24));
  uint64_t v4 = (TransparencyGPBAutocreatedDictionary *)atomic_load(v3);
  if (!v4)
  {
    uint64_t v4 = sub_100164450(*(void **)(a1 + 32), a2);
    uint64_t v5 = 0;
    atomic_compare_exchange_strong((atomic_ullong *volatile)v3, (unint64_t *)&v5, (unint64_t)v4);
    if (v5)
    {
      if ([v2 mapKeyDataType] == 14
        && *(unsigned __int8 *)(v2[1] + 30) - 13 < 4)
      {
        id v6 = &OBJC_IVAR___TransparencyGPBAutocreatedDictionary__autocreator;
      }
      else
      {
        id v6 = &OBJC_IVAR___TransparencyGPBInt32Int32Dictionary__autocreator;
      }
      *(Class *)((char *)&v4->super.super.super.isa + *v6) = 0;

      return (TransparencyGPBAutocreatedDictionary *)v5;
    }
  }
  return v4;
}

uint64_t sub_100163E1C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100168A04(a2, *(void **)(a1 + 32), a3);
}

id sub_100163E2C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = (void *)sub_1001683BC(a2, *(void *)(a1 + 32));

  return [v2 count];
}

CFStringRef sub_100163FA0(void *a1, void *a2, uint64_t *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1[1];
  int v8 = a3 + 1;
  switch(*(unsigned char *)(v5 + 44))
  {
    case 0:
      id v11 = objc_alloc((Class)NSNumber);
      BOOL v12 = sub_100136D68(v8);
      return (const __CFString *)_[v11 initWithBool:v12];
    case 1:
      id v13 = objc_alloc((Class)NSNumber);
      uint64_t v14 = sub_100136CE4(v8);
      goto LABEL_17;
    case 2:
      id v15 = objc_alloc((Class)NSNumber);
      uint64_t v16 = sub_100136CE4(v8);
      goto LABEL_15;
    case 3:
      id v17 = objc_alloc((Class)NSNumber);
      sub_100136BC8(v8);
      return (const __CFString *)_[v17 initWithFloat:v18];
    case 4:
      id v19 = objc_alloc((Class)NSNumber);
      uint64_t v20 = sub_100136CA8(v8);
      goto LABEL_21;
    case 5:
      id v26 = objc_alloc((Class)NSNumber);
      uint64_t v27 = sub_100136CA8(v8);
      goto LABEL_39;
    case 6:
      id v28 = objc_alloc((Class)NSNumber);
      sub_100136B8C(v8);
      return (const __CFString *)_[v28 initWithDouble:v29];
    case 7:
      id v15 = objc_alloc((Class)NSNumber);
      uint64_t v16 = sub_100136C90(v8);
      goto LABEL_15;
    case 8:
      id v26 = objc_alloc((Class)NSNumber);
      uint64_t v27 = sub_100136C04(v8);
      goto LABEL_39;
    case 9:
      id v15 = objc_alloc((Class)NSNumber);
      uint64_t v16 = sub_100136D20(v8);
LABEL_15:
      uint64_t v21 = v16;
      id v22 = v15;
      goto LABEL_30;
    case 0xA:
      id v26 = objc_alloc((Class)NSNumber);
      uint64_t v27 = sub_100136D44(v8);
LABEL_39:
      return (const __CFString *)_[v26 initWithLongLong:v27];
    case 0xB:
      id v13 = objc_alloc((Class)NSNumber);
      uint64_t v14 = sub_100136C90(v8);
LABEL_17:
      return (const __CFString *)_[v13 initWithUnsignedInt:v14];
    case 0xC:
      id v19 = objc_alloc((Class)NSNumber);
      uint64_t v20 = sub_100136C04(v8);
LABEL_21:
      return (const __CFString *)_[v19 initWithUnsignedLongLong:v20];
    case 0xD:
      return (const __CFString *)sub_10013703C(a3 + 1);
    case 0xE:
      return sub_100136F38(a3 + 1);
    case 0xF:
    case 0x10:
      if (a5) {
        id v10 = a5;
      }
      else {
        id v10 = objc_alloc_init((Class)[objc_msgSend(objc_msgSend(objc_msgSend(a1, "msgClass"), "descriptor"), "messageClass")]);
      }
      id v30 = v10;
      if (*(unsigned char *)(v5 + 44) == 16)
      {
        [a3 readGroup:*(unsigned int *)(v5 + 40) message:v10 extensionRegistry:a4];
      }
      else if ((*(unsigned char *)(v5 + 45) & 4) != 0)
      {
        [v10 mergeFromCodedInputStream:a3 extensionRegistry:a4];
      }
      else
      {
        [a3 readMessage:v10 extensionRegistry:a4];
      }
      return (const __CFString *)v30;
    case 0x11:
      uint64_t v24 = sub_100136C90(a3 + 1);
      id v25 = [a1 enumDescriptor];
      if ([v25 isClosed]
        && !((unsigned int (*)(uint64_t))[v25 enumVerifier])(v24))
      {
        [(id)sub_10015FD68(a2) mergeVarintField:*(unsigned int *)(a1[1] + 40) value:v24];
        return 0;
      }
      else
      {
        id v22 = objc_alloc((Class)NSNumber);
        uint64_t v21 = v24;
LABEL_30:
        return (const __CFString *)_[v22 initWithInt:v21];
      }
    default:
      return 0;
  }
}

TransparencyGPBAutocreatedDictionary *sub_100164450(void *a1, objc_class *a2)
{
  unsigned int v4 = [a1 mapKeyDataType];
  uint64_t result = 0;
  int v6 = *(unsigned __int8 *)(a1[1] + 30);
  switch(v4)
  {
    case 0u:
      uint64_t result = 0;
      switch(*(unsigned char *)(a1[1] + 30))
      {
        case 0:
          uint64_t v7 = TransparencyGPBBoolBoolDictionary;
          goto LABEL_65;
        case 1:
        case 0xB:
          uint64_t v7 = TransparencyGPBBoolUInt32Dictionary;
          goto LABEL_65;
        case 2:
        case 7:
        case 9:
          uint64_t v7 = TransparencyGPBBoolInt32Dictionary;
          goto LABEL_65;
        case 3:
          uint64_t v7 = TransparencyGPBBoolFloatDictionary;
          goto LABEL_65;
        case 4:
        case 0xC:
          uint64_t v7 = TransparencyGPBBoolUInt64Dictionary;
          goto LABEL_65;
        case 5:
        case 8:
        case 0xA:
          uint64_t v7 = TransparencyGPBBoolInt64Dictionary;
          goto LABEL_65;
        case 6:
          uint64_t v7 = TransparencyGPBBoolDoubleDictionary;
          goto LABEL_65;
        case 0xD:
        case 0xE:
        case 0xF:
          uint64_t v7 = TransparencyGPBBoolObjectDictionary;
          goto LABEL_65;
        case 0x10:
          return result;
        case 0x11:
          int v8 = TransparencyGPBBoolEnumDictionary;
          goto LABEL_74;
        default:
          goto LABEL_66;
      }
    case 1u:
    case 0xBu:
      uint64_t result = 0;
      switch(*(unsigned char *)(a1[1] + 30))
      {
        case 0:
          uint64_t v7 = TransparencyGPBUInt32BoolDictionary;
          goto LABEL_65;
        case 1:
        case 0xB:
          uint64_t v7 = TransparencyGPBUInt32UInt32Dictionary;
          goto LABEL_65;
        case 2:
        case 7:
        case 9:
          uint64_t v7 = TransparencyGPBUInt32Int32Dictionary;
          goto LABEL_65;
        case 3:
          uint64_t v7 = TransparencyGPBUInt32FloatDictionary;
          goto LABEL_65;
        case 4:
        case 0xC:
          uint64_t v7 = TransparencyGPBUInt32UInt64Dictionary;
          goto LABEL_65;
        case 5:
        case 8:
        case 0xA:
          uint64_t v7 = TransparencyGPBUInt32Int64Dictionary;
          goto LABEL_65;
        case 6:
          uint64_t v7 = TransparencyGPBUInt32DoubleDictionary;
          goto LABEL_65;
        case 0xD:
        case 0xE:
        case 0xF:
          uint64_t v7 = TransparencyGPBUInt32ObjectDictionary;
          goto LABEL_65;
        case 0x10:
          return result;
        case 0x11:
          int v8 = TransparencyGPBUInt32EnumDictionary;
          goto LABEL_74;
        default:
          goto LABEL_66;
      }
    case 2u:
    case 7u:
    case 9u:
      uint64_t result = 0;
      switch(*(unsigned char *)(a1[1] + 30))
      {
        case 0:
          uint64_t v7 = TransparencyGPBInt32BoolDictionary;
          goto LABEL_65;
        case 1:
        case 0xB:
          uint64_t v7 = TransparencyGPBInt32UInt32Dictionary;
          goto LABEL_65;
        case 2:
        case 7:
        case 9:
          uint64_t v7 = TransparencyGPBInt32Int32Dictionary;
          goto LABEL_65;
        case 3:
          uint64_t v7 = TransparencyGPBInt32FloatDictionary;
          goto LABEL_65;
        case 4:
        case 0xC:
          uint64_t v7 = TransparencyGPBInt32UInt64Dictionary;
          goto LABEL_65;
        case 5:
        case 8:
        case 0xA:
          uint64_t v7 = TransparencyGPBInt32Int64Dictionary;
          goto LABEL_65;
        case 6:
          uint64_t v7 = TransparencyGPBInt32DoubleDictionary;
          goto LABEL_65;
        case 0xD:
        case 0xE:
        case 0xF:
          uint64_t v7 = TransparencyGPBInt32ObjectDictionary;
          goto LABEL_65;
        case 0x10:
          return result;
        case 0x11:
          int v8 = TransparencyGPBInt32EnumDictionary;
          goto LABEL_74;
        default:
          goto LABEL_66;
      }
    case 3u:
    case 6u:
    case 0xDu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
      return result;
    case 4u:
    case 0xCu:
      uint64_t result = 0;
      switch(*(unsigned char *)(a1[1] + 30))
      {
        case 0:
          uint64_t v7 = TransparencyGPBUInt64BoolDictionary;
          goto LABEL_65;
        case 1:
        case 0xB:
          uint64_t v7 = TransparencyGPBUInt64UInt32Dictionary;
          goto LABEL_65;
        case 2:
        case 7:
        case 9:
          uint64_t v7 = TransparencyGPBUInt64Int32Dictionary;
          goto LABEL_65;
        case 3:
          uint64_t v7 = TransparencyGPBUInt64FloatDictionary;
          goto LABEL_65;
        case 4:
        case 0xC:
          uint64_t v7 = TransparencyGPBUInt64UInt64Dictionary;
          goto LABEL_65;
        case 5:
        case 8:
        case 0xA:
          uint64_t v7 = TransparencyGPBUInt64Int64Dictionary;
          goto LABEL_65;
        case 6:
          uint64_t v7 = TransparencyGPBUInt64DoubleDictionary;
          goto LABEL_65;
        case 0xD:
        case 0xE:
        case 0xF:
          uint64_t v7 = TransparencyGPBUInt64ObjectDictionary;
          goto LABEL_65;
        case 0x10:
          return result;
        case 0x11:
          int v8 = TransparencyGPBUInt64EnumDictionary;
          goto LABEL_74;
        default:
          goto LABEL_66;
      }
    case 5u:
    case 8u:
    case 0xAu:
      uint64_t result = 0;
      switch(*(unsigned char *)(a1[1] + 30))
      {
        case 0:
          uint64_t v7 = TransparencyGPBInt64BoolDictionary;
          goto LABEL_65;
        case 1:
        case 0xB:
          uint64_t v7 = TransparencyGPBInt64UInt32Dictionary;
          goto LABEL_65;
        case 2:
        case 7:
        case 9:
          uint64_t v7 = TransparencyGPBInt64Int32Dictionary;
          goto LABEL_65;
        case 3:
          uint64_t v7 = TransparencyGPBInt64FloatDictionary;
          goto LABEL_65;
        case 4:
        case 0xC:
          uint64_t v7 = TransparencyGPBInt64UInt64Dictionary;
          goto LABEL_65;
        case 5:
        case 8:
        case 0xA:
          uint64_t v7 = TransparencyGPBInt64Int64Dictionary;
          goto LABEL_65;
        case 6:
          uint64_t v7 = TransparencyGPBInt64DoubleDictionary;
          goto LABEL_65;
        case 0xD:
        case 0xE:
        case 0xF:
          uint64_t v7 = TransparencyGPBInt64ObjectDictionary;
          goto LABEL_65;
        case 0x10:
          return result;
        case 0x11:
          int v8 = TransparencyGPBInt64EnumDictionary;
          goto LABEL_74;
        default:
          goto LABEL_66;
      }
    case 0xEu:
      uint64_t result = 0;
      switch(*(unsigned char *)(a1[1] + 30))
      {
        case 0:
          uint64_t v7 = TransparencyGPBStringBoolDictionary;
          goto LABEL_65;
        case 1:
        case 0xB:
          uint64_t v7 = TransparencyGPBStringUInt32Dictionary;
          goto LABEL_65;
        case 2:
        case 7:
        case 9:
          uint64_t v7 = TransparencyGPBStringInt32Dictionary;
          goto LABEL_65;
        case 3:
          uint64_t v7 = TransparencyGPBStringFloatDictionary;
          goto LABEL_65;
        case 4:
        case 0xC:
          uint64_t v7 = TransparencyGPBStringUInt64Dictionary;
          goto LABEL_65;
        case 5:
        case 8:
        case 0xA:
          uint64_t v7 = TransparencyGPBStringInt64Dictionary;
          goto LABEL_65;
        case 6:
          uint64_t v7 = TransparencyGPBStringDoubleDictionary;
LABEL_65:
          uint64_t result = (TransparencyGPBAutocreatedDictionary *)objc_alloc_init(v7);
          goto LABEL_66;
        case 0xD:
        case 0xE:
        case 0xF:
          if (a2)
          {
            uint64_t result = objc_alloc_init(TransparencyGPBAutocreatedDictionary);
            goto LABEL_69;
          }
          uint64_t result = (TransparencyGPBAutocreatedDictionary *)objc_alloc_init((Class)NSMutableDictionary);
          break;
        case 0x10:
          return result;
        case 0x11:
          int v8 = TransparencyGPBStringEnumDictionary;
LABEL_74:
          uint64_t result = (TransparencyGPBAutocreatedDictionary *)[[[v8 alloc] initWithValidationFunction:[objc_msgSend(objc_msgSend(a1, "enumDescriptor"), "enumVerifier")]]
          if (a2) {
            goto LABEL_67;
          }
          return result;
        default:
          goto LABEL_66;
      }
      break;
    default:
LABEL_66:
      if (a2)
      {
LABEL_67:
        if (v4 == 14 && (v6 - 13) <= 3) {
LABEL_69:
        }
          unint64_t v9 = &OBJC_IVAR___TransparencyGPBAutocreatedDictionary__autocreator;
        else {
          unint64_t v9 = &OBJC_IVAR___TransparencyGPBInt32Int32Dictionary__autocreator;
        }
        *(Class *)((char *)&result->super.super.super.isa + *v9) = a2;
      }
      break;
  }
  return result;
}

TransparencyGPBAutocreatedArray *sub_100164AFC(void *a1, objc_class *a2)
{
  int v3 = *(unsigned __int8 *)(a1[1] + 30);
  switch(*(unsigned char *)(a1[1] + 30))
  {
    case 0:
      uint64_t v5 = TransparencyGPBBoolArray;
      goto LABEL_16;
    case 1:
    case 0xB:
      uint64_t v5 = TransparencyGPBUInt32Array;
      goto LABEL_16;
    case 2:
    case 7:
    case 9:
      uint64_t v5 = TransparencyGPBInt32Array;
      goto LABEL_16;
    case 3:
      uint64_t v5 = TransparencyGPBFloatArray;
      goto LABEL_16;
    case 4:
    case 0xC:
      uint64_t v5 = TransparencyGPBUInt64Array;
      goto LABEL_16;
    case 5:
    case 8:
    case 0xA:
      uint64_t v5 = TransparencyGPBInt64Array;
      goto LABEL_16;
    case 6:
      uint64_t v5 = TransparencyGPBDoubleArray;
LABEL_16:
      uint64_t result = (TransparencyGPBAutocreatedArray *)objc_alloc_init(v5);
      if (a2) {
        goto LABEL_17;
      }
      return result;
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
      if (a2)
      {
        uint64_t result = objc_alloc_init(TransparencyGPBAutocreatedArray);
LABEL_18:
        int v6 = &OBJC_IVAR___TransparencyGPBAutocreatedArray__autocreator;
LABEL_20:
        *(Class *)((char *)&result->super.super.super.isa + *v6) = a2;
      }
      else
      {
        return (TransparencyGPBAutocreatedArray *)objc_alloc_init((Class)NSMutableArray);
      }
      return result;
    case 0x11:
      uint64_t result = [[[TransparencyGPBEnumArray alloc] initWithValidationFunction:objc_msgSend(objc_msgSend(a1, "enumDescriptor"), "enumVerifier")];
      if (!a2) {
        return result;
      }
      goto LABEL_17;
    default:
      uint64_t result = 0;
      if (!a2) {
        return result;
      }
LABEL_17:
      if ((v3 - 13) <= 3) {
        goto LABEL_18;
      }
      int v6 = &OBJC_IVAR___TransparencyGPBInt32Array__autocreator;
      goto LABEL_20;
  }
}

BOOL sub_100164CA8(uint64_t a1, uint64_t a2)
{
  return sub_100168F08(a2, *(void **)(a1 + 32));
}

id sub_100164CB8(uint64_t a1, uint64_t a2)
{
  return sub_100168CD0(a2, *(void **)(a1 + 32));
}

id sub_100164CC8(uint64_t a1, uint64_t a2)
{
  return sub_100168CD0(a2, *(void **)(a1 + 32));
}

float sub_100164CD8(uint64_t a1, uint64_t a2)
{
  return sub_100169280(a2, *(void **)(a1 + 32));
}

id sub_100164CE8(uint64_t a1, uint64_t a2)
{
  return sub_100169104(a2, *(void **)(a1 + 32));
}

id sub_100164CF8(uint64_t a1, uint64_t a2)
{
  return sub_100169104(a2, *(void **)(a1 + 32));
}

double sub_100164D08(uint64_t a1, uint64_t a2)
{
  return sub_100169418(a2, *(void **)(a1 + 32));
}

id sub_100164D18(uint64_t a1, uint64_t a2)
{
  return sub_100168CD0(a2, *(void **)(a1 + 32));
}

id sub_100164D28(uint64_t a1, uint64_t a2)
{
  return sub_100169104(a2, *(void **)(a1 + 32));
}

id sub_100164D38(uint64_t a1, uint64_t a2)
{
  return sub_100168CD0(a2, *(void **)(a1 + 32));
}

id sub_100164D48(uint64_t a1, uint64_t a2)
{
  return sub_100169104(a2, *(void **)(a1 + 32));
}

id sub_100164D58(uint64_t a1, uint64_t a2)
{
  return sub_100168CD0(a2, *(void **)(a1 + 32));
}

id sub_100164D68(uint64_t a1, uint64_t a2)
{
  return sub_100169104(a2, *(void **)(a1 + 32));
}

void *sub_100164D78(uint64_t a1, uint64_t a2)
{
  return sub_10015DAA0(a2, *(void **)(a1 + 32));
}

void *sub_100164D88(uint64_t a1, uint64_t a2)
{
  return sub_10015DAA0(a2, *(void **)(a1 + 32));
}

void *sub_100164D98(uint64_t a1, uint64_t a2)
{
  return sub_10015DAA0(a2, *(void **)(a1 + 32));
}

void *sub_100164DA8(uint64_t a1, uint64_t a2)
{
  return sub_10015DAA0(a2, *(void **)(a1 + 32));
}

uint64_t sub_100164DB8(uint64_t a1, uint64_t a2)
{
  return sub_100168C70(a2, *(void **)(a1 + 32));
}

id sub_100164DC8(uint64_t a1, void *a2, int a3)
{
  return sub_100168FC0(a2, *(void *)(a1 + 32), a3);
}

id sub_100164DD8(uint64_t a1, void *a2, int a3)
{
  return sub_100168E08(a2, *(void *)(a1 + 32), a3);
}

id sub_100164DE8(uint64_t a1, void *a2, int a3)
{
  return sub_100168E08(a2, *(void *)(a1 + 32), a3);
}

id sub_100164DF8(uint64_t a1, void *a2, float a3)
{
  return sub_10016931C(a2, *(void *)(a1 + 32), a3);
}

id sub_100164E08(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100169188(a2, *(void *)(a1 + 32), a3);
}

id sub_100164E18(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100169188(a2, *(void *)(a1 + 32), a3);
}

id sub_100164E28(uint64_t a1, void *a2, double a3)
{
  return sub_1001694B4(a2, *(void *)(a1 + 32), a3);
}

id sub_100164E38(uint64_t a1, void *a2, int a3)
{
  return sub_100168E08(a2, *(void *)(a1 + 32), a3);
}

id sub_100164E48(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100169188(a2, *(void *)(a1 + 32), a3);
}

id sub_100164E58(uint64_t a1, void *a2, int a3)
{
  return sub_100168E08(a2, *(void *)(a1 + 32), a3);
}

id sub_100164E68(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100169188(a2, *(void *)(a1 + 32), a3);
}

id sub_100164E78(uint64_t a1, void *a2, int a3)
{
  return sub_100168E08(a2, *(void *)(a1 + 32), a3);
}

id sub_100164E88(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100169188(a2, *(void *)(a1 + 32), a3);
}

uint64_t sub_100164E98(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v4 = *(void **)(a1 + 32);
  id v5 = [a3 copy];

  return sub_100168A48(a2, v4, v5);
}

uint64_t sub_100164EE0(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v4 = *(void **)(a1 + 32);
  id v5 = [a3 copy];

  return sub_100168A48(a2, v4, v5);
}

uint64_t sub_100164F28(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100168A04(a2, *(void **)(a1 + 32), a3);
}

uint64_t sub_100164F38(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_100168A04(a2, *(void **)(a1 + 32), a3);
}

id sub_100164F48(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_100168D5C(a2, *(void **)(a1 + 32), a3);
}

uint64_t sub_100165004(uint64_t a1, uint64_t a2)
{
  return a2;
}

CFStringRef sub_100165010(char *cStr)
{
  return CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
}

BOOL sub_10016502C(const char *a1, const char *a2)
{
  return strcmp(a1, a2) == 0;
}

uint64_t sub_10016504C(unsigned char *a1)
{
  LOBYTE(v1) = *a1;
  if (*a1)
  {
    unsigned int v2 = 0;
    unsigned int v3 = 1;
    do
    {
      unsigned int v2 = (1025 * (v2 + (char)v1)) ^ ((1025 * (v2 + (char)v1)) >> 6);
      int v1 = a1[v3++];
    }
    while (v1);
    unsigned int v4 = 9 * v2;
  }
  else
  {
    unsigned int v4 = 0;
  }
  return 32769 * (v4 ^ (v4 >> 11));
}

uint64_t sub_100165104(objc_class *a1, const char *a2)
{
  uint64_t result = (uint64_t)sub_1001651E4(a1, a2);
  if (result)
  {
    uint64_t v5 = result;
    int v6 = sub_10016966C("getClassValue", 0);
    Name = class_getName(a1);
    MetaClass = objc_getMetaClass(Name);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100165338;
    block[3] = &unk_1002C2E70;
    block[4] = v5;
    unint64_t v9 = imp_implementationWithBlock(block);
    return class_addMethod(MetaClass, a2, v9, v6) || sub_10016A9A0(MetaClass, a2);
  }
  return result;
}

const void *sub_1001651E4(objc_class *a1, SEL sel)
{
  Name = sel_getName(sel);
  int v4 = *(unsigned __int8 *)Name;
  if (v4 != 95)
  {
    int v6 = Name;
    uint64_t v7 = 1;
    if (!*Name)
    {
LABEL_6:
      int v8 = class_getName(a1);
      size_t v9 = strlen(v8);
      __chkstk_darwin(v9);
      id v11 = (char *)&v14 - v10;
      bzero((char *)&v14 - v10, v12);
      memcpy(v11, v8, v9);
      v11[v9] = 95;
      memcpy(&v11[v9 + 1], v6, v7 - 1);
      v11[v9 + v7] = 0;
      os_unfair_lock_lock((os_unfair_lock_t)&unk_10032EB70);
      Value = CFDictionaryGetValue((CFDictionaryRef)qword_10032EB60, v11);
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_10032EB70);
      return Value;
    }
    while (v4 != 58)
    {
      int v4 = Name[v7++];
      if (!v4) {
        goto LABEL_6;
      }
    }
  }
  return 0;
}

uint64_t sub_100165338(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

unint64_t sub_100165410()
{
  if (!atomic_load((unint64_t *)&qword_10032EB80))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"TransparencyGPBNullValue" valueNames:"NullValue" values:&unk_10028ACFC count:1 enumVerifier:sub_100165490 flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032EB80, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032EB80);
}

BOOL sub_100165490(int a1)
{
  return a1 == 0;
}

id sub_100165598(uint64_t a1)
{
  uint64_t v2 = [[+[TransparencyGPBValue descriptor](TransparencyGPBValue) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id sub_1001655E4(void *a1, int a2)
{
  id v4 = [[+[TransparencyGPBValue descriptor](TransparencyGPBValue) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

void sub_100165638(uint64_t a1)
{
  uint64_t v2 = (id *)[[+[TransparencyGPBValue descriptor](TransparencyGPBValue, "descriptor") oneofs] objectAtIndex:0];

  sub_1001687A4(a1, v2);
}

unint64_t sub_100165768()
{
  if (!atomic_load((unint64_t *)&qword_10032EBA8))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"TransparencyGPBSyntax" valueNames:"SyntaxProto2" values:&unk_10028AD1C count:2 enumVerifier:sub_1001657E8 flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032EBA8, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032EBA8);
}

BOOL sub_1001657E8(unsigned int a1)
{
  return a1 < 2;
}

unint64_t sub_1001657F4()
{
  if (!atomic_load((unint64_t *)&qword_10032EBB0))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"TransparencyGPBField_Kind" valueNames:"TypeUnknown" values:&unk_10028ADF8 count:19 enumVerifier:sub_100165874 flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032EBB0, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032EBB0);
}

BOOL sub_100165874(unsigned int a1)
{
  return a1 < 0x13;
}

unint64_t sub_100165880()
{
  if (!atomic_load((unint64_t *)&qword_10032EBB8))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"TransparencyGPBField_Cardinality" valueNames:"CardinalityUnknown" values:&unk_10028AE94 count:4 enumVerifier:sub_100165900 flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032EBB8, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032EBB8);
}

BOOL sub_100165900(unsigned int a1)
{
  return a1 < 4;
}

id sub_10016597C(uint64_t a1)
{
  uint64_t v2 = [[+[TransparencyGPBType descriptor](TransparencyGPBType) fieldWithNumber:6];

  return sub_100168F00(a1, v2);
}

id sub_1001659C8(void *a1, int a2)
{
  id v4 = [[+[TransparencyGPBType descriptor](TransparencyGPBType) fieldWithNumber:6];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id sub_100165AA0(uint64_t a1)
{
  uint64_t v2 = [[+[TransparencyGPBField descriptor](TransparencyGPBField) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id sub_100165AEC(void *a1, int a2)
{
  id v4 = [[+[TransparencyGPBField descriptor](TransparencyGPBField) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id sub_100165B40(uint64_t a1)
{
  uint64_t v2 = [[+[TransparencyGPBField descriptor](TransparencyGPBField) fieldWithNumber:2];

  return sub_100168F00(a1, v2);
}

id sub_100165B8C(void *a1, int a2)
{
  id v4 = [[+[TransparencyGPBField descriptor](TransparencyGPBField) fieldWithNumber:2];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id sub_100165C50(uint64_t a1)
{
  uint64_t v2 = [[+[TransparencyGPBEnum descriptor](TransparencyGPBEnum) fieldWithNumber:5];

  return sub_100168F00(a1, v2);
}

id sub_100165C9C(void *a1, int a2)
{
  id v4 = [[+[TransparencyGPBEnum descriptor](TransparencyGPBEnum) fieldWithNumber:5];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

void sub_100166580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
}

uint64_t sub_1001665B0(uint64_t a1, unint64_t a2)
{
  uint64_t result = sub_10013B208(*(_DWORD *)(a1 + 40), a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1001665EC(uint64_t a1)
{
  uint64_t result = sub_10013B1B8(*(_DWORD *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_100166628(uint64_t a1)
{
  uint64_t result = sub_10013B118(*(_DWORD *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

id sub_100166B30(uint64_t a1, uint64_t a2)
{
  return [[*(id *)(a1 + 32) appendFormat:@"\t%llu\n", a2];
}

id sub_100166B60(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@"\t%u\n", a2];
}

id sub_100166B90(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@"\t%llu\n", a2];
}

void sub_100167090(uint64_t a1, void *a2, void *a3)
{
  id v4 = [a2 copy];
  [a3 addField:v4];
}

int sub_1001673C8(id a1, const void *a2, const void *a3)
{
  if (*(void *)a2 == *(void *)a3) {
    int v3 = 0;
  }
  else {
    int v3 = -1;
  }
  if (*(void *)a2 > *(void *)a3) {
    return 1;
  }
  else {
    return v3;
  }
}

int sub_10016753C(id a1, const void *a2, const void *a3)
{
  if (*(void *)a2 == *(void *)a3) {
    int v3 = 0;
  }
  else {
    int v3 = -1;
  }
  if (*(void *)a2 > *(void *)a3) {
    return 1;
  }
  else {
    return v3;
  }
}

id sub_100167614(uint64_t a1, void *a2, void *a3)
{
  id result = [a2 serializedSize];
  *a3 += result;
  return result;
}

id sub_100167668(uint64_t a1, void *a2)
{
  return [a2 writeAsMessageSetExtensionToOutput:];
}

id sub_1001676B4(uint64_t a1, void *a2, void *a3)
{
  id result = [a2 serializedSizeAsMessageSetExtension];
  *a3 += result;
  return result;
}

void sub_1001678CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = [a2 number];
  if (!v5) {
    +[NSException raise:NSInvalidArgumentException format:@"Zero is not a valid field number."];
  }
  id v6 = [a3 mutableFieldForNumber:v5 create:0];
  if (v6)
  {
    _[v6 mergeFromField:a2];
  }
  else
  {
    id v7 = [a2 copy];
    [a3 addField:v7];
  }
}

uint64_t sub_100167DB8()
{
  if (qword_10032EBE8 != -1) {
    dispatch_once(&qword_10032EBE8, &stru_1002C2F40);
  }
  return qword_10032EBF0;
}

void sub_100167DFC(id a1)
{
  qword_10032EBF0 = (uint64_t)objc_alloc_init((Class)NSData);
}

id sub_100167E24(id result)
{
  if (!result) {
    return result;
  }
  id v1 = +[NSMutableArray arrayWithObject:result];
  id result = [(NSMutableArray *)v1 count];
  if (!result) {
    return result;
  }
  id v30 = v42;
  long long v31 = v44;
  uint64_t v32 = v40;
  id v28 = v38;
  uint64_t v29 = v46;
  uint64_t v27 = v48;
  do
  {
    uint64_t v2 = [(NSMutableArray *)v1 lastObject];
    [(NSMutableArray *)v1 removeLastObject];
    [v2 setUnknownFields:0];
    int v3 = [(id)objc_opt_class() descriptor];
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    id v4 = (void *)v3[1];
    id v5 = [v4 countByEnumeratingWithState:&v49 objects:v54 count:16];
    if (!v5) {
      goto LABEL_36;
    }
    id v6 = v5;
    uint64_t v7 = *(void *)v50;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v50 != v7) {
          objc_enumerationMutation(v4);
        }
        size_t v9 = *(void **)(*((void *)&v49 + 1) + 8 * i);
        if (*(unsigned __int8 *)(v9[1] + 30) - 15 <= 1)
        {
          unsigned int v10 = [*(id *)(*((void *)&v49 + 1) + 8 * i) fieldType];
          if (v10 == 2)
          {
            uint64_t v16 = v2[8];
            if (v16) {
              id v17 = *(void **)(v16 + *(unsigned int *)(v9[1] + 24));
            }
            else {
              id v17 = 0;
            }
            switch([v9 mapKeyDataType])
            {
              case 0u:
                v47[0] = _NSConcreteStackBlock;
                v47[1] = 3221225472;
                v48[0] = sub_1001683F4;
                v48[1] = &unk_1002C2F68;
                id v48[2] = v1;
                uint64_t v18 = v47;
                goto LABEL_33;
              case 1u:
              case 0xBu:
                v45[0] = _NSConcreteStackBlock;
                v45[1] = 3221225472;
                v46[0] = sub_1001683FC;
                v46[1] = &unk_1002C2F90;
                v46[2] = v1;
                uint64_t v18 = v45;
                goto LABEL_33;
              case 2u:
              case 7u:
              case 9u:
                v43[0] = _NSConcreteStackBlock;
                v43[1] = 3221225472;
                v44[0] = sub_100168404;
                v44[1] = &unk_1002C2FB8;
                _OWORD v44[2] = v1;
                uint64_t v18 = v43;
                goto LABEL_33;
              case 4u:
              case 0xCu:
                v41[0] = _NSConcreteStackBlock;
                v41[1] = 3221225472;
                v42[0] = sub_10016840C;
                v42[1] = &unk_1002C2FE0;
                v42[2] = v1;
                uint64_t v18 = v41;
                goto LABEL_33;
              case 5u:
              case 8u:
              case 0xAu:
                v39[0] = _NSConcreteStackBlock;
                v39[1] = 3221225472;
                v40[0] = sub_100168414;
                v40[1] = &unk_1002C3008;
                v40[2] = v1;
                uint64_t v18 = v39;
                goto LABEL_33;
              case 0xEu:
                v37[0] = _NSConcreteStackBlock;
                v37[1] = 3221225472;
                v38[0] = sub_10016841C;
                v38[1] = &unk_1002C3030;
                v38[2] = v1;
                uint64_t v18 = v37;
LABEL_33:
                [v17 enumerateKeysAndObjectsUsingBlock:v18];
                break;
              default:
                continue;
            }
          }
          else if (v10 == 1)
          {
            uint64_t v14 = v2[8];
            if (v14) {
              id v15 = *(void **)(v14 + *(unsigned int *)(v9[1] + 24));
            }
            else {
              id v15 = 0;
            }
            if ([v15 count]) {
              [(NSMutableArray *)v1 addObjectsFromArray:v15];
            }
          }
          else
          {
            if (v10) {
              continue;
            }
            id v11 = (_DWORD *)v9[1];
            unint64_t v12 = v11[5];
            if ((v12 & 0x80000000) != 0)
            {
              uint64_t v13 = v2[8];
              if (*(_DWORD *)(v13 + 4 * -(int)v12) != v11[4]) {
                continue;
              }
LABEL_24:
              [(NSMutableArray *)v1 addObject:*(void *)(v13 + v11[6])];
              continue;
            }
            uint64_t v13 = v2[8];
            if ((*(_DWORD *)(v13 + ((v12 >> 3) & 0x1FFFFFFC)) >> v12)) {
              goto LABEL_24;
            }
          }
        }
      }
      id v6 = [v4 countByEnumeratingWithState:&v49 objects:v54 count:16];
    }
    while (v6);
LABEL_36:
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v19 = [v2 extensionsCurrentlySet];
    id v20 = [v19 countByEnumeratingWithState:&v33 objects:v53 count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v34;
      do
      {
        for (uint64_t j = 0; j != v21; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v34 != v22) {
            objc_enumerationMutation(v19);
          }
          uint64_t v24 = *(void **)(*((void *)&v33 + 1) + 8 * (void)j);
          if ([v24 dataType] - 15 <= 1)
          {
            unsigned int v25 = [v24 isRepeated];
            id v26 = [v2 getExtension:v24];
            if (v25) {
              [(NSMutableArray *)v1 addObjectsFromArray:v26];
            }
            else {
              [(NSMutableArray *)v1 addObject:v26];
            }
          }
        }
        id v21 = [v19 countByEnumeratingWithState:&v33 objects:v53 count:16];
      }
      while (v21);
    }
    id result = [(NSMutableArray *)v1 count];
  }
  while (result);
  return result;
}

uint64_t sub_1001683BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2) {
    return *(void *)(v2 + *(unsigned int *)(*(void *)(a2 + 8) + 24));
  }
  else {
    return 0;
  }
}

id sub_1001683F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObject:];
}

id sub_1001683FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObject:];
}

id sub_100168404(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObject:];
}

id sub_10016840C(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObject:];
}

id sub_100168414(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObject:];
}

id sub_10016841C(uint64_t a1)
{
  return [*(id *)(a1 + 32) addObject:];
}

id sub_100168424(id result)
{
  if ((int)result >= 30008) {
    return +[NSException raise:NSInternalInconsistencyException, @"Linked to ProtocolBuffer runtime version %d, but code compiled needing at least %d!", 30007, result format];
  }
  if ((int)result <= 30000) {
    return +[NSException raise:NSInternalInconsistencyException, @"Proto generation source compiled against runtime version %d, but this version of the runtime only supports back to %d!", result, 30001 format];
  }
  return result;
}

id sub_1001684AC()
{
  return +[NSException raise:NSInternalInconsistencyException, @"Proto generation source appears to have been from a version newer that this runtime (%d).", 30007 format];
}

id sub_1001684F0(id result)
{
  if (result != 30001) {
    return +[NSException raise:NSInternalInconsistencyException, @"Linked to ProtocolBuffer runtime version %d, but code compiled with version %d!", 30001, result, v1, v2 format];
  }
  return result;
}

BOOL sub_100168548(void *a1, uint64_t a2)
{
  id v3 = [objc_msgSend(a1, "descriptor") fieldWithNumber:a2];

  return sub_100168590((uint64_t)a1, (uint64_t)v3);
}

BOOL sub_100168590(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t v3 = *(void *)(a2 + 8);
    if ((*(_WORD *)(v3 + 28) & 0xF02) != 0)
    {
      uint64_t v4 = *(void *)(a1 + 64);
      if (v4) {
        id v5 = *(void **)(v4 + *(unsigned int *)(v3 + 24));
      }
      else {
        id v5 = 0;
      }
      return [v5 count] != 0;
    }
    else
    {
      unint64_t v6 = *(unsigned int *)(v3 + 20);
      if ((v6 & 0x80000000) != 0) {
        return *(_DWORD *)(*(void *)(a1 + 64) + 4 * -(int)v6) == *(_DWORD *)(v3 + 16);
      }
      else {
        return (*(_DWORD *)(*(void *)(a1 + 64) + ((v6 >> 3) & 0x1FFFFFFC)) >> v6) & 1;
      }
    }
  }
  return v2;
}

void sub_100168660(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(unsigned int *)(v3 + 20);
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 64);
    if (*(_DWORD *)(v5 + 4 * -(int)v4) != *(_DWORD *)(v3 + 16)) {
      return;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 64);
    if (((*(_DWORD *)(v5 + ((v4 >> 3) & 0x1FFFFFFC)) >> v4) & 1) == 0) {
      return;
    }
  }
  if ((*(_WORD *)(v3 + 28) & 0xF02) != 0 || *(unsigned __int8 *)(v3 + 30) - 13 <= 3)
  {
    uint64_t v6 = *(unsigned int *)(v3 + 24);

    *(void *)(v5 + v6) = 0;
    LODWORD(v4) = *(_DWORD *)(v3 + 20);
  }
  uint64_t v7 = *(void *)(a1 + 64);
  if ((v4 & 0x80000000) != 0) {
    *(_DWORD *)(v7 + 4 * -(int)v4) = 0;
  }
  else {
    *(_DWORD *)(v7 + 4 * (v4 >> 5)) &= ~(1 << v4);
  }
}

uint64_t sub_100168750(uint64_t result, unsigned int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(result + 64);
  if ((a2 & 0x80000000) != 0)
  {
    if (!a4) {
      a3 = 0;
    }
    *(_DWORD *)(v4 + 4 * -a2) = a3;
  }
  else
  {
    unsigned int v5 = a2 >> 5;
    int v6 = 1 << a2;
    if (a4) {
      int v7 = *(_DWORD *)(v4 + 4 * v5) | v6;
    }
    else {
      int v7 = *(_DWORD *)(v4 + 4 * v5) & ~v6;
    }
    *(_DWORD *)(v4 + 4 * v5) = v7;
  }
  return result;
}

void sub_1001687A4(uint64_t a1, id *a2)
{
  unsigned int v4 = *(_DWORD *)(*((void *)[a2[2] objectAtIndexedSubscript:0] + 1) + 20);

  sub_100168810(a1, a2, v4, 0);
}

void sub_100168810(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  int v5 = *(_DWORD *)(*(void *)(a1 + 64) - 4 * (int)a3);
  if (v5 != a4 && v5 != 0)
  {
    int v8 = [a2 fieldWithNumber:];
    if (v8)
    {
      uint64_t v9 = v8[1];
      if ((*(_WORD *)(v9 + 28) & 0xF02) != 0 || *(unsigned __int8 *)(v9 + 30) - 13 <= 3)
      {
        uint64_t v10 = *(void *)(a1 + 64);
        uint64_t v11 = *(unsigned int *)(v9 + 24);

        *(void *)(v10 + v11) = 0;
      }
    }
    uint64_t v12 = *(void *)(a1 + 64);
    if ((a3 & 0x80000000) != 0) {
      *(_DWORD *)(v12 + 4 * -a3) = 0;
    }
    else {
      *(_DWORD *)(v12 + 4 * (a3 >> 5)) &= ~(1 << a3);
    }
  }
}

BOOL sub_1001688EC(uint64_t a1, unsigned int a2, int a3)
{
  if ((a2 & 0x80000000) != 0) {
    return *(_DWORD *)(*(void *)(a1 + 64) + 4 * -a2) == a3;
  }
  else {
    return (*(_DWORD *)(*(void *)(a1 + 64) + 4 * (a2 >> 5)) >> a2) & 1;
  }
}

uint64_t sub_100168938(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(void *)(a1 + 64) - 4 * a2);
}

void sub_100168954(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)(a2 + 8);
  unint64_t v3 = v2[5];
  if ((v3 & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (*(_DWORD *)(v4 + 4 * -(int)v3) == v2[4]) {
      return;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if ((*(_DWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFC)) >> v3)) {
      return;
    }
  }
  uint64_t v5 = v2[6];
  uint64_t v6 = *(void *)(v4 + v5);
  id v7 = (id)v6;
  *(void *)(v4 + v5) = 0;
  sub_10015CAA0(v6);
}

uint64_t sub_100168A04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;

  return sub_100168A48(a1, a2, v5);
}

uint64_t sub_100168A48(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = a3;
  uint64_t v6 = a2[1];
  int v7 = *(unsigned __int8 *)(v6 + 30);
  __int16 v8 = *(_WORD *)(v6 + 28);
  if ((v8 & 0xF02) != 0)
  {
    uint64_t v9 = *(void *)(a1 + 64);
    uint64_t v10 = *(unsigned int *)(v6 + 24);
    uint64_t v11 = *(char **)(v9 + v10);
    *(void *)(v9 + v10) = a3;
    if (!v11) {
      goto LABEL_32;
    }
    if ([a2 fieldType] == 1)
    {
      if ((v7 - 13) <= 3)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v12 = &OBJC_IVAR___TransparencyGPBAutocreatedArray__autocreator;
          goto LABEL_29;
        }
LABEL_31:

        goto LABEL_32;
      }
      uint64_t v12 = &OBJC_IVAR___TransparencyGPBInt32Array__autocreator;
    }
    else if ([a2 mapKeyDataType] == 14 && (v7 - 13) <= 3)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        goto LABEL_31;
      }
      uint64_t v12 = &OBJC_IVAR___TransparencyGPBAutocreatedDictionary__autocreator;
    }
    else
    {
      uint64_t v12 = &OBJC_IVAR___TransparencyGPBInt32Int32Dictionary__autocreator;
    }
LABEL_29:
    uint64_t v22 = *v12;
    if (*(void *)&v11[v22] == a1) {
      *(void *)&v11[v22] = 0;
    }
    goto LABEL_31;
  }
  uint64_t v13 = (void *)a2[2];
  if (v13)
  {
    sub_100168810(a1, v13, *(_DWORD *)(v6 + 20), *(_DWORD *)(v6 + 16));
    __int16 v8 = *(_WORD *)(v6 + 28);
  }
  BOOL v14 = v3 != 0;
  if ((v8 & 0x20) != 0 && ![v3 length])
  {

    BOOL v14 = 0;
    unint64_t v3 = 0;
  }
  unint64_t v15 = *(unsigned int *)(v6 + 20);
  uint64_t v16 = *(void *)(a1 + 64);
  if ((v15 & 0x80000000) != 0)
  {
    int v19 = *(_DWORD *)(v6 + 16);
    if (!v14) {
      int v19 = 0;
    }
    *(_DWORD *)(v16 + 4 * -(int)v15) = v19;
  }
  else
  {
    unint64_t v17 = v15 >> 5;
    int v18 = 1 << v15;
    if (v14) {
      *(_DWORD *)(v16 + 4 * v17) |= v18;
    }
    else {
      *(_DWORD *)(v16 + 4 * v17) &= ~v18;
    }
  }
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(unsigned int *)(v6 + 24);
  uint64_t v11 = *(char **)(v20 + v21);
  *(void *)(v20 + v21) = v3;
  if (v11)
  {
    if ((v7 - 15) <= 1 && sub_10015C77C((uint64_t)v11, a1)) {
      sub_10015CAA0((uint64_t)v11);
    }
    goto LABEL_31;
  }
LABEL_32:

  return sub_10015C78C(a1);
}

uint64_t sub_100168C70(uint64_t a1, void *a2)
{
  id v3 = sub_100168CD0(a1, a2);
  if ((*(_WORD *)(a2[1] + 28) & 0x1000) == 0)
  {
    if ([a2 isValidEnumValue:v3]) {
      return v3;
    }
    else {
      return 4222467823;
    }
  }
  return (uint64_t)v3;
}

id sub_100168CD0(uint64_t a1, void *a2)
{
  uint64_t v2 = (_DWORD *)a2[1];
  unint64_t v3 = v2[5];
  if ((v3 & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (*(_DWORD *)(v4 + 4 * -(int)v3) == v2[4]) {
      return (id)*(unsigned int *)(v4 + v2[6]);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if ((*(_DWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFC)) >> v3)) {
      return (id)*(unsigned int *)(v4 + v2[6]);
    }
  }
  return [a2 defaultValue];
}

id sub_100168D5C(void *a1, void *a2, uint64_t a3)
{
  if ((objc_msgSend(a2, "isValidEnumValue:") & 1) == 0) {
    +[NSException raise:format:](NSException, "raise:format:", NSInvalidArgumentException, @"%@.%@: Attempt to set an unknown enum value (%d)", objc_opt_class(), [a2 name], a3);
  }

  return sub_100168E08(a1, (uint64_t)a2, a3);
}

id sub_100168E08(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6) {
    sub_100168810((uint64_t)a1, v6, *(_DWORD *)(v7 + 20), *(_DWORD *)(v7 + 16));
  }
  *(_DWORD *)(a1[8] + *(unsigned int *)(v7 + 24)) = a3;
  if (a3) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = (*(_WORD *)(v7 + 28) & 0x20) == 0;
  }
  unint64_t v9 = *(unsigned int *)(v7 + 20);
  uint64_t v10 = a1[8];
  if ((v9 & 0x80000000) != 0)
  {
    if (v8) {
      int v13 = *(_DWORD *)(v7 + 16);
    }
    else {
      int v13 = 0;
    }
    *(_DWORD *)(v10 + 4 * -(int)v9) = v13;
  }
  else
  {
    unint64_t v11 = v9 >> 5;
    int v12 = 1 << v9;
    if (v8) {
      *(_DWORD *)(v10 + 4 * v11) |= v12;
    }
    else {
      *(_DWORD *)(v10 + 4 * v11) &= ~v12;
    }
  }

  return sub_10015C78C(a1);
}

BOOL sub_100168F08(uint64_t a1, void *a2)
{
  uint64_t v2 = (_DWORD *)a2[1];
  int v3 = v2[4];
  unint64_t v4 = v2[5];
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 64);
    if ((*(_DWORD *)(v5 + ((v4 >> 3) & 0x1FFFFFFC)) >> v4)) {
      goto LABEL_3;
    }
    return (unint64_t)[a2 defaultValue] & 1;
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (*(_DWORD *)(v5 + 4 * -(int)v4) != v3) {
    return (unint64_t)[a2 defaultValue] & 1;
  }
LABEL_3:
  unint64_t v6 = v2[6];
  if ((v6 & 0x80000000) != 0) {
    return *(_DWORD *)(v5 + 4 * -(int)v6) == v3;
  }
  else {
    return (*(_DWORD *)(v5 + ((v6 >> 3) & 0x1FFFFFFC)) >> v6) & 1;
  }
}

void *sub_100168FB0(void *a1, uint64_t a2, int a3)
{
  if (a1)
  {
    if (a2) {
      return sub_100168FC0(a1, a2, a3);
    }
  }
  return a1;
}

id sub_100168FC0(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  unint64_t v6 = *(void **)(a2 + 16);
  if (v6) {
    sub_100168810((uint64_t)a1, v6, *(_DWORD *)(v5 + 20), *(_DWORD *)(v5 + 16));
  }
  unint64_t v7 = *(unsigned int *)(v5 + 24);
  uint64_t v8 = a1[8];
  if ((v7 & 0x80000000) != 0)
  {
    int v11 = *(_DWORD *)(v5 + 16);
    if (!a3) {
      int v11 = 0;
    }
    *(_DWORD *)(v8 + 4 * -(int)v7) = v11;
    if (a3) {
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v9 = v7 >> 5;
    int v10 = 1 << v7;
    if (a3)
    {
      *(_DWORD *)(v8 + 4 * v9) |= v10;
LABEL_9:
      BOOL v12 = 1;
      goto LABEL_12;
    }
    *(_DWORD *)(v8 + 4 * v9) &= ~v10;
  }
  BOOL v12 = (*(_WORD *)(v5 + 28) & 0x20) == 0;
LABEL_12:
  unint64_t v13 = *(unsigned int *)(v5 + 20);
  uint64_t v14 = a1[8];
  if ((v13 & 0x80000000) != 0)
  {
    if (v12) {
      int v17 = *(_DWORD *)(v5 + 16);
    }
    else {
      int v17 = 0;
    }
    *(_DWORD *)(v14 + 4 * -(int)v13) = v17;
  }
  else
  {
    unint64_t v15 = v13 >> 5;
    int v16 = 1 << v13;
    if (v12) {
      *(_DWORD *)(v14 + 4 * v15) |= v16;
    }
    else {
      *(_DWORD *)(v14 + 4 * v15) &= ~v16;
    }
  }

  return sub_10015C78C(a1);
}

void *sub_1001690F4(void *a1, uint64_t a2, int a3)
{
  if (a1)
  {
    if (a2) {
      return sub_100168E08(a1, a2, a3);
    }
  }
  return a1;
}

id sub_100169104(uint64_t a1, void *a2)
{
  uint64_t v2 = (_DWORD *)a2[1];
  unint64_t v3 = v2[5];
  if ((v3 & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (*(_DWORD *)(v4 + 4 * -(int)v3) == v2[4]) {
      return *(id *)(v4 + v2[6]);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if ((*(_DWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFC)) >> v3)) {
      return *(id *)(v4 + v2[6]);
    }
  }
  return [a2 defaultValue];
}

void *sub_100169178(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2) {
      return sub_100169188(a1, a2, a3);
    }
  }
  return a1;
}

id sub_100169188(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6) {
    sub_100168810((uint64_t)a1, v6, *(_DWORD *)(v7 + 20), *(_DWORD *)(v7 + 16));
  }
  *(void *)(a1[8] + *(unsigned int *)(v7 + 24)) = a3;
  if (a3) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = (*(_WORD *)(v7 + 28) & 0x20) == 0;
  }
  unint64_t v9 = *(unsigned int *)(v7 + 20);
  uint64_t v10 = a1[8];
  if ((v9 & 0x80000000) != 0)
  {
    if (v8) {
      int v13 = *(_DWORD *)(v7 + 16);
    }
    else {
      int v13 = 0;
    }
    *(_DWORD *)(v10 + 4 * -(int)v9) = v13;
  }
  else
  {
    unint64_t v11 = v9 >> 5;
    int v12 = 1 << v9;
    if (v8) {
      *(_DWORD *)(v10 + 4 * v11) |= v12;
    }
    else {
      *(_DWORD *)(v10 + 4 * v11) &= ~v12;
    }
  }

  return sub_10015C78C(a1);
}

float sub_100169280(uint64_t a1, void *a2)
{
  uint64_t v2 = (_DWORD *)a2[1];
  unint64_t v3 = v2[5];
  if ((v3 & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (*(_DWORD *)(v4 + 4 * -(int)v3) == v2[4]) {
      return *(float *)(v4 + v2[6]);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if ((*(_DWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFC)) >> v3)) {
      return *(float *)(v4 + v2[6]);
    }
  }
  LODWORD(result) = [a2 defaultValue];
  return result;
}

void *sub_10016930C(void *a1, uint64_t a2, float a3)
{
  if (a1)
  {
    if (a2) {
      return sub_10016931C(a1, a2, a3);
    }
  }
  return a1;
}

id sub_10016931C(void *a1, uint64_t a2, float a3)
{
  unint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6) {
    sub_100168810((uint64_t)a1, v6, *(_DWORD *)(v7 + 20), *(_DWORD *)(v7 + 16));
  }
  *(float *)(a1[8] + *(unsigned int *)(v7 + 24)) = a3;
  BOOL v8 = a3 != 0.0 || (*(_WORD *)(v7 + 28) & 0x20) == 0;
  unint64_t v9 = *(unsigned int *)(v7 + 20);
  uint64_t v10 = a1[8];
  if ((v9 & 0x80000000) != 0)
  {
    if (v8) {
      int v13 = *(_DWORD *)(v7 + 16);
    }
    else {
      int v13 = 0;
    }
    *(_DWORD *)(v10 + 4 * -(int)v9) = v13;
  }
  else
  {
    unint64_t v11 = v9 >> 5;
    int v12 = 1 << v9;
    if (v8) {
      *(_DWORD *)(v10 + 4 * v11) |= v12;
    }
    else {
      *(_DWORD *)(v10 + 4 * v11) &= ~v12;
    }
  }

  return sub_10015C78C(a1);
}

double sub_100169418(uint64_t a1, void *a2)
{
  uint64_t v2 = (_DWORD *)a2[1];
  unint64_t v3 = v2[5];
  if ((v3 & 0x80000000) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if (*(_DWORD *)(v4 + 4 * -(int)v3) == v2[4]) {
      return *(double *)(v4 + v2[6]);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 64);
    if ((*(_DWORD *)(v4 + ((v3 >> 3) & 0x1FFFFFFC)) >> v3)) {
      return *(double *)(v4 + v2[6]);
    }
  }
  return COERCE_DOUBLE([a2 defaultValue]);
}

void *sub_1001694A4(void *a1, uint64_t a2, double a3)
{
  if (a1)
  {
    if (a2) {
      return sub_1001694B4(a1, a2, a3);
    }
  }
  return a1;
}

id sub_1001694B4(void *a1, uint64_t a2, double a3)
{
  unint64_t v6 = *(void **)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v6) {
    sub_100168810((uint64_t)a1, v6, *(_DWORD *)(v7 + 20), *(_DWORD *)(v7 + 16));
  }
  *(double *)(a1[8] + *(unsigned int *)(v7 + 24)) = a3;
  BOOL v8 = a3 != 0.0 || (*(_WORD *)(v7 + 28) & 0x20) == 0;
  unint64_t v9 = *(unsigned int *)(v7 + 20);
  uint64_t v10 = a1[8];
  if ((v9 & 0x80000000) != 0)
  {
    if (v8) {
      int v13 = *(_DWORD *)(v7 + 16);
    }
    else {
      int v13 = 0;
    }
    *(_DWORD *)(v10 + 4 * -(int)v9) = v13;
  }
  else
  {
    unint64_t v11 = v9 >> 5;
    int v12 = 1 << v9;
    if (v8) {
      *(_DWORD *)(v10 + 4 * v11) |= v12;
    }
    else {
      *(_DWORD *)(v10 + 4 * v11) &= ~v12;
    }
  }

  return sub_10015C78C(a1);
}

uint64_t sub_1001695B4(uint64_t result, void *a2, void *a3)
{
  if (result && a2)
  {
    uint64_t v4 = result;
    id v5 = [a3 copy];
    return sub_100168A48(v4, a2, v5);
  }
  return result;
}

uint64_t sub_100169614(uint64_t result, void *a2, void *a3)
{
  if (result && a2)
  {
    uint64_t v4 = result;
    id v5 = a3;
    return sub_100168A48(v4, a2, v5);
  }
  return result;
}

char *sub_10016966C(const char *a1, BOOL a2)
{
  Protocol = objc_getProtocol("TransparencyGPBMessageSignatureProtocol");
  return protocol_getMethodDescription(Protocol, a1, 0, a2).types;
}

__CFString *sub_1001696B0(void *a1, __CFString *a2)
{
  uint64_t v2 = &stru_1002CE4C0;
  if (a1)
  {
    if (a2) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = &stru_1002CE4C0;
    }
    uint64_t v2 = (__CFString *)+[NSMutableString string];
    sub_100169710(a1, v2, v4);
  }
  return v2;
}

id sub_100169710(void *a1, void *a2, __CFString *a3)
{
  id v5 = a1;
  unint64_t v6 = [a1 descriptor];
  uint64_t v7 = (void *)v6[1];
  BOOL v8 = (char *)[v7 count];
  unint64_t v9 = [v6 extensionRanges];
  unsigned int v10 = [v6 extensionRangesCount];
  id v11 = [[objc_msgSend(v5, "extensionsCurrentlySet") sortedArrayUsingSelector:@"compareByFieldNumber:"];
  if (v8) {
    BOOL v12 = 0;
  }
  else {
    BOOL v12 = v10 == 0;
  }
  if (!v12)
  {
    int v13 = v11;
    uint64_t v14 = 0;
    unint64_t v15 = v10;
    unint64_t v16 = 0;
    uint64_t v59 = v77;
    uint64_t v60 = v73;
    uint64_t v69 = v5;
    id v62 = v11;
    uint64_t v63 = v9;
    uint64_t v66 = a3;
    unint64_t v67 = v15;
    id v64 = v8;
    id v65 = v7;
    do
    {
      if (v14 == v8)
      {
        uint64_t v17 = v16++;
        sub_10016AA24(v5, v13, v9[v17], a2, a3);
        uint64_t v14 = v8;
        continue;
      }
      if (v16 != v15)
      {
        int v18 = [v7 objectAtIndexedSubscript:v14];
        int v19 = &v9[v16];
        if (*(_DWORD *)(v18[1] + 16) >= *(_DWORD *)v19)
        {
          ++v16;
          sub_10016AA24(v5, v13, *v19, a2, a3);
          continue;
        }
      }
      uint64_t v70 = v14 + 1;
      uint64_t v71 = [v7 objectAtIndexedSubscript:v14];
      unsigned int v20 = [v71 fieldType];
      unsigned int v21 = v20;
      if (v20 == 2 || v20 == 1)
      {
        uint64_t v25 = v5[8];
        unint64_t v68 = v16;
        if (v25) {
          id v26 = *(void **)(v25 + *(unsigned int *)(v71[1] + 24));
        }
        else {
          id v26 = 0;
        }
        unint64_t v27 = (unint64_t)[v26 count];
        if (v27) {
          goto LABEL_21;
        }
      }
      else
      {
        if (v20)
        {
          uint64_t v14 = v70;
          continue;
        }
        uint64_t v22 = v71[1];
        unint64_t v23 = *(unsigned int *)(v22 + 20);
        unint64_t v68 = v16;
        if ((v23 & 0x80000000) != 0) {
          unsigned int v24 = *(_DWORD *)(v5[8] + 4 * -(int)v23) == *(_DWORD *)(v22 + 16);
        }
        else {
          unsigned int v24 = (*(_DWORD *)(v5[8] + ((v23 >> 3) & 0x1FFFFFFC)) >> v23) & 1;
        }
        id v26 = 0;
        unint64_t v27 = v24;
        if (v24)
        {
LABEL_21:
          id v28 = (NSString *)[v71 textFormatName];
          if ([(NSString *)v28 length]) {
            goto LABEL_24;
          }
          id v28 = +[NSString stringWithFormat:@"%u", *(unsigned int *)(v71[1] + 16)];
          if (v27 < 2)
          {
            a3 = v66;
            id v5 = v69;
            CFStringRef v29 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"  # %@", [v71 name]);
          }
          else
          {
            [a2 appendFormat:@"%@# %@\n", a3, [v71 name]];
LABEL_24:
            CFStringRef v29 = &stru_1002CE4C0;
          }
          if (v21 == 2)
          {
            unsigned int v30 = [v71 mapKeyDataType];
            a3 = v66;
            int v31 = *(unsigned __int8 *)(v71[1] + 30);
            uint64_t v61 = +[NSString stringWithFormat:@"%@%@ {%@\n", v66, v28, v29, v59, v60];
            uint64_t v32 = +[NSString stringWithFormat:@"%@%@ {\n", v66, v28];
            long long v33 = +[NSString stringWithFormat:@"%@}\n", v66];
            long long v34 = +[NSString stringWithFormat:@"%@  key: ", v66];
            long long v35 = ":";
            if ((v31 - 15) < 2) {
              long long v35 = "";
            }
            long long v36 = +[NSString stringWithFormat:@"%@  value%s ", v66, v35];
            v79[0] = 0;
            v79[1] = v79;
            v79[2] = 0x2020000000;
            char v80 = 1;
            if (v30 == 14 && (v31 - 13) <= 3)
            {
              v76[0] = _NSConcreteStackBlock;
              v76[1] = 3221225472;
              v77[0] = sub_10016B004;
              v77[1] = &unk_1002C30A8;
              v77[2] = a2;
              v77[3] = v61;
              v77[4] = v32;
              v77[5] = v34;
              char v78 = v31;
              v77[6] = v36;
              v77[7] = v66;
              v77[8] = v33;
              v77[9] = v79;
              [v26 enumerateKeysAndObjectsUsingBlock:v76];
            }
            else
            {
              v72[0] = _NSConcreteStackBlock;
              v72[1] = 3221225472;
              v73[0] = sub_10016B150;
              v73[1] = &unk_1002C30D0;
              v73[9] = v33;
              v73[10] = v79;
              v73[2] = a2;
              v73[3] = v61;
              char v74 = v30;
              v73[4] = v32;
              v73[5] = v34;
              char v75 = v31;
              v73[6] = v36;
              v73[7] = v66;
              v73[8] = v71;
              [v26 enumerateForTextFormat:v72];
            }
            _Block_object_dispose(v79, 8);
            id v5 = v69;
            uint64_t v14 = v70;
          }
          else
          {
            uint64_t v37 = 0;
            int v38 = *(unsigned __int8 *)(v71[1] + 30);
            if ((v38 - 15) >= 2) {
              uint64_t v39 = ":";
            }
            else {
              uint64_t v39 = "";
            }
            do
            {
              [a2 appendFormat:@"%@%@%s ", a3, v28, v39];
              switch(v38)
              {
                case 0:
                  if (v26) {
                    unsigned int v45 = [v26 valueAtIndex:v37];
                  }
                  else {
                    unsigned int v45 = sub_100168F08((uint64_t)v5, v71);
                  }
                  if (v45) {
                    CFStringRef v53 = @"true";
                  }
                  else {
                    CFStringRef v53 = @"false";
                  }
                  [a2 appendString:v53];
                  break;
                case 1:
                case 11:
                  if (v26) {
                    id v42 = [v26 valueAtIndex:v37];
                  }
                  else {
                    id v42 = sub_100168CD0((uint64_t)v5, v71);
                  }
                  [a2 appendFormat:@"%u", v42, v58];
                  break;
                case 2:
                case 7:
                case 9:
                  if (v26) {
                    id v40 = [v26 valueAtIndex:v37];
                  }
                  else {
                    id v40 = sub_100168CD0((uint64_t)v5, v71);
                  }
                  [a2 appendFormat:@"%d", v40, v58];
                  break;
                case 3:
                  if (v26) {
                    [v26 valueAtIndex:v37];
                  }
                  else {
                    float v46 = sub_100169280((uint64_t)v5, v71);
                  }
                  [a2 appendFormat:@"%.*g", 6, v46];
                  break;
                case 4:
                case 12:
                  if (v26) {
                    id v43 = [v26 valueAtIndex:v37];
                  }
                  else {
                    id v43 = sub_100169104((uint64_t)v5, v71);
                  }
                  [a2 appendFormat:@"%llu", v43, v58];
                  break;
                case 5:
                case 8:
                case 10:
                  if (v26) {
                    id v41 = [v26 valueAtIndex:v37];
                  }
                  else {
                    id v41 = sub_100169104((uint64_t)v5, v71);
                  }
                  [a2 appendFormat:@"%lld", v41, v58];
                  break;
                case 6:
                  if (v26) {
                    [v26 valueAtIndex:v37];
                  }
                  else {
                    double v47 = sub_100169418((uint64_t)v5, v71);
                  }
                  [a2 appendFormat:@"%.*lg", 15, *(void *)&v47];
                  break;
                case 13:
                  if (v26) {
                    uint64_t v48 = [v26 objectAtIndex:v37];
                  }
                  else {
                    uint64_t v48 = sub_10015DAA0((uint64_t)v5, v71);
                  }
                  sub_10016A510(v48, a2);
                  break;
                case 14:
                  if (v26) {
                    long long v49 = [v26 objectAtIndex:v37];
                  }
                  else {
                    long long v49 = sub_10015DAA0((uint64_t)v5, v71);
                  }
                  sub_10016AE6C(v49, a2);
                  break;
                case 15:
                case 16:
                  if (v26) {
                    long long v44 = [v26 objectAtIndex:v37];
                  }
                  else {
                    long long v44 = sub_10015DAA0((uint64_t)v5, v71);
                  }
                  long long v52 = v44;
                  [a2 appendFormat:@"{%@\n", v29];
                  sub_100169710(v52, a2, [(__CFString *)a3 stringByAppendingString:@"  "]);
                  [a2 appendFormat:@"%@}", a3];
                  CFStringRef v29 = &stru_1002CE4C0;
                  id v5 = v69;
                  break;
                case 17:
                  if (v26)
                  {
                    id v50 = [v26 rawValueAtIndex:v37];
                    long long v51 = v71;
                  }
                  else
                  {
                    long long v51 = v71;
                    id v50 = sub_100168CD0((uint64_t)v5, v71);
                  }
                  id v54 = [v51 enumDescriptor];
                  if (v54 && (id v55 = [v54 textFormatNameForValue:v50]) != 0) {
                    [a2 appendString:v55];
                  }
                  else {
                    [a2 appendFormat:@"%d", v50];
                  }
                  id v5 = v69;
                  a3 = v66;
                  break;
                default:
                  break;
              }
              [a2 appendFormat:@"%@\n", v29];
              ++v37;
            }
            while (v27 != v37);
            uint64_t v14 = v70;
          }
          BOOL v8 = v64;
          uint64_t v7 = v65;
          int v13 = v62;
          unint64_t v9 = v63;
          goto LABEL_94;
        }
      }
      uint64_t v14 = v70;
LABEL_94:
      unint64_t v15 = v67;
      unint64_t v16 = v68;
    }
    while (v14 < v8 || v16 < v15);
  }
  uint64_t v56 = sub_10016A064([v5 unknownFields], a3);
  id result = [(__CFString *)v56 length];
  if (result)
  {
    [a2 appendFormat:@"%@# --- Unknown fields ---\n", a3];
    return [a2 appendString:v56];
  }
  return result;
}

void sub_10016A000(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

__CFString *sub_10016A064(void *a1, const __CFString *a2)
{
  uint64_t v2 = &stru_1002CE4C0;
  if (a1)
  {
    uint64_t v4 = a2 ? (__CFString *)a2 : &stru_1002CE4C0;
    uint64_t v2 = (__CFString *)+[NSMutableString string];
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    obuint64_t j = [a1 sortedFields];
    id v26 = [obj countByEnumeratingWithState:&v43 objects:v49 count:16];
    if (v26)
    {
      uint64_t v25 = *(void *)v44;
      do
      {
        uint64_t v5 = 0;
        do
        {
          if (*(void *)v44 != v25) {
            objc_enumerationMutation(obj);
          }
          uint64_t v28 = v5;
          unint64_t v6 = *(void **)(*((void *)&v43 + 1) + 8 * v5);
          id v7 = [v6 number];
          id v8 = [v6 varintList];
          v41[0] = _NSConcreteStackBlock;
          v41[1] = 3221225472;
          void v41[2] = sub_10016A45C;
          v41[3] = &unk_1002C3058;
          v41[4] = v2;
          v41[5] = v4;
          int v42 = (int)v7;
          [v8 enumerateValuesWithBlock:v41];
          id v9 = [v6 fixed32List];
          v39[0] = _NSConcreteStackBlock;
          v39[1] = 3221225472;
          void v39[2] = sub_10016A498;
          v39[3] = &unk_1002C3080;
          v39[4] = v2;
          v39[5] = v4;
          int v40 = (int)v7;
          [v9 enumerateValuesWithBlock:v39];
          id v10 = [v6 fixed64List];
          v37[0] = _NSConcreteStackBlock;
          v37[1] = 3221225472;
          void v37[2] = sub_10016A4D4;
          v37[3] = &unk_1002C3058;
          v37[4] = v2;
          v37[5] = v4;
          int v38 = (int)v7;
          [v10 enumerateValuesWithBlock:v37];
          long long v35 = 0u;
          long long v36 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          unint64_t v27 = v6;
          id v11 = [v6 lengthDelimitedList];
          id v12 = [v11 countByEnumeratingWithState:&v33 objects:v48 count:16];
          if (v12)
          {
            id v13 = v12;
            uint64_t v14 = *(void *)v34;
            do
            {
              for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v34 != v14) {
                  objc_enumerationMutation(v11);
                }
                unint64_t v16 = *(void **)(*((void *)&v33 + 1) + 8 * i);
                [(__CFString *)v2 appendFormat:@"%@%d: ", v4, v7];
                sub_10016A510(v16, v2);
                [(__CFString *)v2 appendString:@"\n"];
              }
              id v13 = [v11 countByEnumeratingWithState:&v33 objects:v48 count:16];
            }
            while (v13);
          }
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          id v17 = [v27 groupList];
          id v18 = [v17 countByEnumeratingWithState:&v29 objects:v47 count:16];
          if (v18)
          {
            id v19 = v18;
            uint64_t v20 = *(void *)v30;
            do
            {
              for (uint64_t j = 0; j != v19; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v30 != v20) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v22 = *(void *)(*((void *)&v29 + 1) + 8 * (void)j);
                [(__CFString *)v2 appendFormat:@"%@%d: {\n", v4, v7];
                [(__CFString *)v2 appendString:sub_10016A064(v22, [(__CFString *)v4 stringByAppendingString:@"  "])];
                [(__CFString *)v2 appendFormat:@"%@}\n", v4];
              }
              id v19 = [v17 countByEnumeratingWithState:&v29 objects:v47 count:16];
            }
            while (v19);
          }
          uint64_t v5 = v28 + 1;
        }
        while ((id)(v28 + 1) != v26);
        id v26 = [obj countByEnumeratingWithState:&v43 objects:v49 count:16];
      }
      while (v26);
    }
  }
  return v2;
}

id sub_10016A45C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@"%@%d: %llu\n", *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), a2];
}

id sub_10016A498(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@"%@%d: 0x%X\n", *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), a2];
}

id sub_10016A4D4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendFormat:@"%@%d: 0x%llX\n", *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), a2];
}

id sub_10016A510(void *a1, void *a2)
{
  uint64_t v4 = (char *)[a1 bytes];
  uint64_t v5 = (uint64_t)[a1 length];
  [a2 appendString:@"\""];
  if (v5 >= 1)
  {
    unint64_t v6 = &v4[v5];
    do
    {
      uint64_t v7 = *v4;
      if ((int)v7 > 33)
      {
        switch(v7)
        {
          case '""':
            id v8 = a2;
            CFStringRef v9 = @"\\\"";
            goto LABEL_16;
          case '\'':
            id v8 = a2;
            CFStringRef v9 = @"\\'";
            goto LABEL_16;
          case '\\':
            id v8 = a2;
            CFStringRef v9 = @"\\\\"";
            goto LABEL_16;
        }
      }
      else
      {
        switch(v7)
        {
          case 9:
            id v8 = a2;
            CFStringRef v9 = @"\\t";
            goto LABEL_16;
          case 0xA:
            id v8 = a2;
            CFStringRef v9 = @"\\n";
            goto LABEL_16;
          case 0xD:
            id v8 = a2;
            CFStringRef v9 = @"\\r";
LABEL_16:
            [v8 appendString:v9];
            goto LABEL_17;
        }
      }
      if ((v7 & 0x80000000) != 0)
      {
        if (!__maskrune(*v4, 0x40000uLL))
        {
LABEL_23:
          [a2 appendFormat:@"\\%03o", v7];
          goto LABEL_17;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v7] & 0x40000) == 0)
      {
        goto LABEL_23;
      }
      [a2 appendFormat:@"%c", v7];
LABEL_17:
      ++v4;
    }
    while (v4 < v6);
  }

  return [a2 appendString:@"\""];
}

NSString *sub_10016A6C8(char *a1, int a2, void *a3)
{
  unint64_t v3 = 0;
  if (a1 && a3)
  {
    unint64_t v23 = a1;
    int v6 = sub_10016A8AC(&v23);
    if (v6 < 1)
    {
      return 0;
    }
    else
    {
      int v7 = v6;
      while (1)
      {
        int v8 = sub_10016A8AC(&v23);
        CFStringRef v9 = v23;
        if (v8 == a2) {
          break;
        }
        id v10 = v23 + 1;
        while (*v10++)
          ;
        unint64_t v23 = v10;
        if (v7-- < 2) {
          return 0;
        }
      }
      if (*v23)
      {
        unint64_t v3 = +[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", [a3 length]);
        char v14 = *v9;
        if (*v9)
        {
          uint64_t v15 = 0;
          while (1)
          {
            if (v14 < 0)
            {
              [(NSMutableString *)v3 appendString:@"_"];
              char v14 = *v9;
            }
            int v16 = v14 & 0x1F;
            int v17 = v14 & 0x60;
            if (v17 == 32) {
              break;
            }
            if (v17 == 64)
            {
              uint64_t v18 = __toupper((char)[a3 characterAtIndex:v15]);
LABEL_21:
              [(NSMutableString *)v3 appendFormat:@"%c", v18];
              ++v15;
              --v16;
            }
            if (v16 >= 1)
            {
              uint64_t v19 = v16;
              uint64_t v20 = v15;
              do
              {
                id v21 = [a3 characterAtIndex:v20];
                if (v17 == 96) {
                  [(NSMutableString *)v3 appendFormat:@"%c", __toupper((char)v21)];
                }
                else {
                  [(NSMutableString *)v3 appendFormat:@"%C", v21];
                }
                ++v20;
                --v19;
              }
              while (v19);
            }
            v15 += v16;
            int v22 = *++v9;
            char v14 = v22;
            if (!v22) {
              return (NSString *)v3;
            }
          }
          uint64_t v18 = __tolower((char)[a3 characterAtIndex:v15]);
          goto LABEL_21;
        }
      }
      else
      {
        return +[NSString stringWithUTF8String:v23 + 1];
      }
    }
  }
  return (NSString *)v3;
}

uint64_t sub_10016A8AC(char **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *(*a1)++;
  if ((v2 & 0x80000000) != 0)
  {
    unsigned int v3 = v2 & 0x7F;
    int v4 = v1[1];
    *a1 = v1 + 2;
    int v5 = v4 << 7;
    if ((v4 & 0x80000000) == 0) {
      return v5 | v3;
    }
    v3 |= v5 & 0x3F80;
    int v6 = v1[2];
    *a1 = v1 + 3;
    int v5 = v6 << 14;
    if ((v6 & 0x80000000) == 0) {
      return v5 | v3;
    }
    v3 |= v5 & 0x1FC000;
    int v7 = v1[3];
    *a1 = v1 + 4;
    int v5 = v7 << 21;
    if (v7 < 0)
    {
      int v9 = v1[4];
      *a1 = v1 + 5;
      uint64_t v2 = v5 & 0xFE00000 | (v9 << 28) | v3;
      if (v9 < 0)
      {
        uint64_t v10 = 0;
        while (1)
        {
          int v11 = v1[v10 + 5];
          *a1 = &v1[v10 + 6];
          if ((v11 & 0x80000000) == 0) {
            break;
          }
          if (++v10 == 5)
          {
            +[NSException raise:NSParseErrorException format:@"Unable to read varint32"];
            return v2;
          }
        }
      }
    }
    else
    {
      return v5 | v3;
    }
  }
  return v2;
}

void sub_10016A998(uint64_t a1, void *a2, unsigned int a3)
{
}

BOOL sub_10016A9A0(objc_class *a1, const char *a2)
{
  unsigned int outCount = 0;
  unsigned int v3 = class_copyMethodList(a1, &outCount);
  if (outCount)
  {
    for (unint64_t i = 0; i < outCount; ++i)
    {
      SEL Name = method_getName(v3[i]);
      BOOL v6 = Name == a2;
      if (Name == a2) {
        break;
      }
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  free(v3);
  return v6;
}

id sub_10016AA24(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id result = [a2 countByEnumeratingWithState:&v32 objects:v36 count:16];
  id v28 = result;
  if (result)
  {
    uint64_t v27 = *(void *)v33;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v33 != v27) {
          objc_enumerationMutation(a2);
        }
        uint64_t v30 = v7;
        int v8 = *(void **)(*((void *)&v32 + 1) + 8 * v7);
        id result = [v8 fieldNumber];
        if (result >= a3)
        {
          id v9 = result;
          if (result >= HIDWORD(a3)) {
            return result;
          }
          id v10 = [a1 getExtension:v8];
          unsigned int v11 = [v8 isRepeated];
          if (v11)
          {
            uint64_t v12 = (uint64_t)[v10 count];
            id v13 = [v8 singletonName];
            if (v12 != 1)
            {
              [a4 appendFormat:@"%@# [%@]\n", a5, v13];
              unsigned int v14 = [v8 dataType];
              if (!v12) {
                goto LABEL_7;
              }
              unsigned int v15 = v14;
              CFStringRef v16 = &stru_1002CE4C0;
              goto LABEL_16;
            }
          }
          else
          {
            id v13 = [v8 singletonName];
          }
          CFStringRef v16 = +[NSString stringWithFormat:@"  # [%@]", v13];
          unsigned int v15 = [v8 dataType];
          uint64_t v12 = 1;
LABEL_16:
          uint64_t v17 = 0;
          if (v15 - 15 >= 2) {
            uint64_t v18 = ":";
          }
          else {
            uint64_t v18 = "";
          }
          do
          {
            id v19 = v10;
            if (v11) {
              id v19 = [v10 objectAtIndex:v17];
            }
            [a4 appendFormat:@"%@%u%s ", a5, v9, v18];
            switch(v15)
            {
              case 0u:
                if ([v19 BOOLValue]) {
                  CFStringRef v22 = @"true";
                }
                else {
                  CFStringRef v22 = @"false";
                }
                [a4 appendString:v22];
                break;
              case 1u:
              case 0xBu:
                [a4 appendFormat:@"%u", [v19 unsignedIntValue], v24];
                break;
              case 2u:
                id v20 = [v19 unsignedIntValue];
                goto LABEL_34;
              case 3u:
                [v19 floatValue];
                [a4 appendFormat:@"%.*g", 6, v21];
                break;
              case 4u:
              case 0xCu:
                [a4 appendFormat:@"%llu", [v19 unsignedLongLongValue], v24];
                break;
              case 5u:
              case 8u:
              case 0xAu:
                [a4 appendFormat:@"%lld", [v19 longLongValue], v24];
                break;
              case 6u:
                [v19 doubleValue];
                [a4 appendFormat:@"%.*lg", 15, v23];
                break;
              case 7u:
              case 9u:
              case 0x11u:
                id v20 = [v19 intValue];
LABEL_34:
                [a4 appendFormat:@"%d", v20, v24];
                break;
              case 0xDu:
                sub_10016A510(v19, a4);
                break;
              case 0xEu:
                sub_10016AE6C(v19, a4);
                break;
              case 0xFu:
              case 0x10u:
                [a4 appendFormat:@"{%@\n", v16];
                sub_100169710(v19, a4, [a5 stringByAppendingString:@"  "]);
                [a4 appendFormat:@"%@}", a5];
                CFStringRef v16 = &stru_1002CE4C0;
                break;
              default:
                break;
            }
            [a4 appendFormat:@"%@\n", v16];
            ++v17;
          }
          while (v12 != v17);
        }
LABEL_7:
        uint64_t v7 = v30 + 1;
      }
      while ((id)(v30 + 1) != v28);
      id result = [a2 countByEnumeratingWithState:&v32 objects:v36 count:16];
      id v28 = result;
    }
    while (result);
  }
  return result;
}

id sub_10016AE6C(void *a1, void *a2)
{
  [a2 appendString:@"\""];
  int v4 = (char *)[a1 length];
  if (v4)
  {
    int v5 = v4;
    for (unint64_t i = 0; v5 != i; ++i)
    {
      id v7 = [a1 characterAtIndex:i];
      if ((int)v7 > 33)
      {
        switch(v7)
        {
          case '""':
            int v8 = a2;
            CFStringRef v9 = @"\\\"";
            break;
          case '\'':
            int v8 = a2;
            CFStringRef v9 = @"\\'";
            break;
          case '\\':
            int v8 = a2;
            CFStringRef v9 = @"\\\\"";
            break;
          default:
LABEL_19:
            if (v7 > 0x1F) {
              [a2 appendFormat:@"%C", v7, v11, v12];
            }
            else {
              [a2 appendFormat:@"\\%d%d%d", 0, v7 >> 3, v7 & 7];
            }
            continue;
        }
      }
      else
      {
        switch(v7)
        {
          case 9:
            int v8 = a2;
            CFStringRef v9 = @"\\t";
            break;
          case 0xA:
            int v8 = a2;
            CFStringRef v9 = @"\\n";
            break;
          case 0xD:
            int v8 = a2;
            CFStringRef v9 = @"\\r";
            break;
          default:
            goto LABEL_19;
        }
      }
      [v8 appendString:v9];
    }
  }

  return [a2 appendString:@"\""];
}

id sub_10016B004(uint64_t a1, void *a2, void *a3)
{
  BOOL v6 = *(void **)(a1 + 32);
  uint64_t v7 = 40;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)) {
    uint64_t v7 = 48;
  }
  [v6 appendString:*(void *)(a1 + v7)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  [*(id *)(a1 + 32) appendString:*(void *)(a1 + 56)];
  sub_10016AE6C(a2, *(void **)(a1 + 32));
  [*(id *)(a1 + 32) appendString:@"\n"];
  [*(id *)(a1 + 32) appendString:*(void *)(a1 + 64)];
  int v8 = *(unsigned __int8 *)(a1 + 96);
  switch(v8)
  {
    case 13:
      sub_10016A510(a3, *(void **)(a1 + 32));
      break;
    case 15:
      [*(id *)(a1 + 32) appendString:@"{\n"];
      sub_100169710(a3, *(void *)(a1 + 32), [*(id *)(a1 + 72) stringByAppendingString:@"    "]);
      [*(id *)(a1 + 32) appendFormat:@"%@  }", *(void *)(a1 + 72)];
      break;
    case 14:
      sub_10016AE6C(a3, *(void **)(a1 + 32));
      break;
  }
  [*(id *)(a1 + 32) appendString:@"\n"];
  CFStringRef v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 80);

  return [v9 appendString:v10];
}

id sub_10016B150(uint64_t a1, void *a2, void *a3)
{
  BOOL v6 = *(void **)(a1 + 32);
  uint64_t v7 = 40;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24)) {
    uint64_t v7 = 48;
  }
  [v6 appendString:*(void *)(a1 + v7)];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  int v8 = *(void **)(a1 + 32);
  if (*(unsigned char *)(a1 + 104) == 14)
  {
    [v8 appendString:*(void *)(a1 + 56)];
    sub_10016AE6C(a2, *(void **)(a1 + 32));
    [*(id *)(a1 + 32) appendString:@"\n"];
  }
  else
  {
    [v8 appendFormat:@"%@%@\n", *(void *)(a1 + 56), a2];
  }
  [*(id *)(a1 + 32) appendString:*(void *)(a1 + 64)];
  switch(*(unsigned char *)(a1 + 105))
  {
    case 0xD:
      sub_10016A510(a3, *(void **)(a1 + 32));
      break;
    case 0xE:
      sub_10016AE6C(a3, *(void **)(a1 + 32));
      break;
    case 0xF:
      [*(id *)(a1 + 32) appendString:@"{\n"];
      sub_100169710(a3, *(void *)(a1 + 32), [*(id *)(a1 + 72) stringByAppendingString:@"    "]);
      [*(id *)(a1 + 32) appendFormat:@"%@  }", *(void *)(a1 + 72)];
      break;
    case 0x11:
      id v11 = [a3 intValue];
      id v12 = [*(id *)(a1 + 80) enumDescriptor];
      if (v12)
      {
        id v13 = [v12 textFormatNameForValue:v11];
        if (v13)
        {
          id v10 = v13;
          CFStringRef v9 = *(void **)(a1 + 32);
          goto LABEL_14;
        }
      }
      [*(id *)(a1 + 32) appendFormat:@"%d", v11];
      break;
    default:
      CFStringRef v9 = *(void **)(a1 + 32);
      id v10 = a3;
LABEL_14:
      [v9 appendString:v10];
      break;
  }
  [*(id *)(a1 + 32) appendString:@"\n"];
  unsigned int v14 = *(void **)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 88);

  return [v14 appendString:v15];
}

uint64_t sub_10016B9DC(int a1, int a2)
{
  return a2 | (8 * a1);
}

uint64_t sub_10016B9E4(char a1)
{
  return a1 & 7;
}

uint64_t sub_10016B9EC(unsigned int a1)
{
  return a1 >> 3;
}

BOOL sub_10016B9F4(int a1)
{
  return (~a1 & 6) != 0;
}

uint64_t sub_10016BA04(int a1, char a2)
{
  if (a2) {
    return 2;
  }
  else {
    return dword_10028AEB0[a1];
  }
}

id sub_10016BF04(uint64_t a1)
{
  uint64_t v2 = [[+[TransparencyGPBApi descriptor](TransparencyGPBApi) fieldWithNumber:7];

  return sub_100168F00(a1, v2);
}

id sub_10016BF50(void *a1, int a2)
{
  id v4 = [[+[TransparencyGPBApi descriptor](TransparencyGPBApi, "descriptor") fieldWithNumber:7];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id sub_10016C028(uint64_t a1)
{
  uint64_t v2 = [[+[TransparencyGPBMethod descriptor](TransparencyGPBMethod) fieldWithNumber:7];

  return sub_100168F00(a1, v2);
}

id sub_10016C074(void *a1, int a2)
{
  id v4 = [[+[TransparencyGPBMethod descriptor](TransparencyGPBMethod) fieldWithNumber:7];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

void sub_10016C3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10016C414(id a1)
{
  qword_10032EC68 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016C458(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  int v5 = [WeakRetained deps];
  BOOL v6 = [v5 logger];
  [v6 logResultForEvent:@"ForceSyncKVS" hardFailure:1 result:v3];

  if (v3)
  {
    if (qword_10032EC60 != -1) {
      dispatch_once(&qword_10032EC60, &stru_1002C3118);
    }
    uint64_t v7 = qword_10032EC68;
    if (os_log_type_enabled((os_log_t)qword_10032EC68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFStringRef v16 = 138412290;
      *(void *)&v16[4] = v3;
      int v8 = "ForceSyncKVS failed with error: %@";
      CFStringRef v9 = v7;
      os_log_type_t v10 = OS_LOG_TYPE_ERROR;
      uint32_t v11 = 12;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, v16, v11);
    }
  }
  else
  {
    if (qword_10032EC60 != -1) {
      dispatch_once(&qword_10032EC60, &stru_1002C3138);
    }
    uint64_t v12 = qword_10032EC68;
    if (os_log_type_enabled((os_log_t)qword_10032EC68, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)CFStringRef v16 = 0;
      int v8 = "ForceSyncKVS success";
      CFStringRef v9 = v12;
      os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
      uint32_t v11 = 2;
      goto LABEL_10;
    }
  }
  id v13 = [WeakRetained intendedState:*(_OWORD *)v16];
  [WeakRetained setNextState:v13];

  unsigned int v14 = [WeakRetained operationQueue];
  uint64_t v15 = [WeakRetained finishedOp];
  [v14 addOperation:v15];
}

void sub_10016C62C(id a1)
{
  qword_10032EC68 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016C670(id a1)
{
  qword_10032EC68 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

__CFString *sub_10016C7B4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = +[NSMutableSet set];
    id v3 = v2;
    if (v1)
    {
      [v2 addObject:@"unlock"];
      v1 &= ~1uLL;
      if ((v1 & 2) == 0)
      {
LABEL_4:
        if (!v1)
        {
LABEL_6:
          int v5 = [v3 allObjects];
          BOOL v6 = [v5 componentsJoinedByString:@","];

          goto LABEL_8;
        }
LABEL_5:
        id v4 = +[NSString stringWithFormat:@"Unknown conditions: 0x%x", v1];
        [v3 addObject:v4];

        goto LABEL_6;
      }
    }
    else if ((v1 & 2) == 0)
    {
      goto LABEL_4;
    }
    [v3 addObject:@"network"];
    v1 &= ~2uLL;
    if (!v1) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  BOOL v6 = @"none";
LABEL_8:

  return v6;
}

void sub_10016DBFC(id a1)
{
  qword_10032EC78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016DC40(id a1)
{
  qword_10032EC78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016DC84(id a1)
{
  qword_10032EC78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016DCC8(id a1)
{
  qword_10032EC78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016DD0C(id a1)
{
  qword_10032EC78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016DD50(id a1)
{
  qword_10032EC78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016DD94(id a1)
{
  qword_10032EC78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016DDD8(id a1)
{
  qword_10032EC78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016DE1C(id a1)
{
  qword_10032EC78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016E11C(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v8)
  {
    (*(void (**)(void))(a1[7] + 16))();
    goto LABEL_17;
  }
  os_log_type_t v10 = (void *)a1[4];
  id v22 = 0;
  uint32_t v11 = [v10 createTransparentDataFromQueryInfo:v8 error:&v22];
  id v12 = v22;
  id v13 = v12;
  if (!v11)
  {
    if (qword_10032EC70 != -1) {
      dispatch_once(&qword_10032EC70, &stru_1002C32A0);
    }
    uint64_t v17 = qword_10032EC78;
    if (os_log_type_enabled((os_log_t)qword_10032EC78, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = a1[5];
      *(_DWORD *)buf = 141558786;
      uint64_t v24 = 1752392040;
      __int16 v25 = 2112;
      id v26 = v7;
      __int16 v27 = 2114;
      uint64_t v28 = v18;
      __int16 v29 = 2112;
      id v30 = v13;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to build transparentData for %{mask.hash}@ fetchId %{public}@: %@", buf, 0x2Au);
    }
    (*(void (**)(void))(a1[7] + 16))();
    goto LABEL_16;
  }
  uint64_t v14 = a1[6];
  id v21 = v12;
  unsigned __int8 v15 = [v11 verifyServerInvariantsAt:v14 error:&v21];
  id v16 = v21;

  if ((v15 & 1) == 0)
  {
    if (qword_10032EC70 != -1) {
      dispatch_once(&qword_10032EC70, &stru_1002C32C0);
    }
    id v19 = qword_10032EC78;
    if (os_log_type_enabled((os_log_t)qword_10032EC78, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = a1[5];
      *(_DWORD *)buf = 141558786;
      uint64_t v24 = 1752392040;
      __int16 v25 = 2112;
      id v26 = v7;
      __int16 v27 = 2114;
      uint64_t v28 = v20;
      __int16 v29 = 2112;
      id v30 = v16;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed server invariant verification for %{mask.hash}@ fetchId %{public}@: %@", buf, 0x2Au);
    }
    (*(void (**)(void))(a1[7] + 16))();
    id v13 = v16;
LABEL_16:

    goto LABEL_17;
  }
  (*(void (**)(void))(a1[7] + 16))();

LABEL_17:
}

void sub_10016E3F0(id a1)
{
  qword_10032EC78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016E434(id a1)
{
  qword_10032EC78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016E860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10016E884(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10016E894(uint64_t a1)
{
}

void sub_10016E89C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    int v5 = +[NSFetchRequest fetchRequestWithEntityName:@"KTTreeHead"];
    BOOL v6 = +[NSPredicate predicateWithFormat:@"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d", *(void *)(a1 + 40), *(void *)(a1 + 72), 1, 1, 1];
    [v5 setPredicate:v6];

    uint64_t v46 = *(void *)(a1 + 48);
    id v7 = +[NSArray arrayWithObjects:&v46 count:1];
    [v5 setPropertiesToFetch:v7];

    [v5 setReturnsDistinctResults:1];
    [v5 setResultType:2];
    [v5 setFetchLimit:1];
    id v8 = +[NSSortDescriptor sortDescriptorWithKey:@"revision" ascending:0];
    long long v45 = v8;
    id v9 = +[NSArray arrayWithObjects:&v45 count:1];
    [v5 setSortDescriptors:v9];

    os_log_type_t v10 = [*(id *)(a1 + 32) context];
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
    id v38 = *(id *)(v11 + 40);
    id v12 = [v10 executeFetchRequest:v5 error:&v38];
    objc_storeStrong((id *)(v11 + 40), v38);

    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    id v37 = *(id *)(v13 + 40);
    +[TransparencyManagedDataStore cleanseError:&v37];
    objc_storeStrong((id *)(v13 + 40), v37);
    if (v12 && [v12 count])
    {
      uint64_t v14 = [v12 objectAtIndexedSubscript:0];
      unsigned __int8 v15 = [v14 objectForKeyedSubscript:*(void *)(a1 + 48)];
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v15 BOOLValue];

      if (qword_10032EC80 != -1) {
        dispatch_once(&qword_10032EC80, &stru_1002C3338);
      }
      id v16 = qword_10032EC88;
      if (os_log_type_enabled((os_log_t)qword_10032EC88, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 48);
        int v18 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
        *(_DWORD *)buf = 138412546;
        uint64_t v42 = v17;
        __int16 v43 = 1024;
        int v44 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "latest verified map has property %@ = %d", buf, 0x12u);
      }
      id v19 = v12;
    }
    else
    {
      id v21 = +[NSPredicate predicateWithFormat:@"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d", *(void *)(a1 + 40), *(void *)(a1 + 72), 1, 2, 1];
      [v5 setPredicate:v21];

      id v22 = +[NSSortDescriptor sortDescriptorWithKey:@"revision" ascending:0];
      int v40 = v22;
      uint64_t v23 = +[NSArray arrayWithObjects:&v40 count:1];
      [v5 setSortDescriptors:v23];

      uint64_t v24 = [*(id *)(a1 + 32) context];
      uint64_t v25 = *(void *)(*(void *)(a1 + 56) + 8);
      id v36 = *(id *)(v25 + 40);
      id v19 = [v24 executeFetchRequest:v5 error:&v36];
      objc_storeStrong((id *)(v25 + 40), v36);

      uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8);
      id v35 = *(id *)(v26 + 40);
      +[TransparencyManagedDataStore cleanseError:&v35];
      objc_storeStrong((id *)(v26 + 40), v35);
      if (v19 && [v19 count])
      {
        __int16 v27 = [v19 objectAtIndexedSubscript:0];
        uint64_t v28 = [v27 objectForKeyedSubscript:*(void *)(a1 + 48)];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v28 BOOLValue];

        if (qword_10032EC80 != -1) {
          dispatch_once(&qword_10032EC80, &stru_1002C3358);
        }
        __int16 v29 = qword_10032EC88;
        if (os_log_type_enabled((os_log_t)qword_10032EC88, OS_LOG_TYPE_INFO))
        {
          uint64_t v30 = *(void *)(a1 + 48);
          int v31 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
          *(_DWORD *)buf = 138412546;
          uint64_t v42 = v30;
          __int16 v43 = 1024;
          int v44 = v31;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "no fully verified map; latest pending map had property %@ = %d",
            buf,
            0x12u);
        }
      }
      else
      {
        uint64_t v32 = +[TransparencyError errorWithDomain:kTransparencyErrorDatabase code:-128 errorLevel:2 underlyingError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) description:@"no previous map heads stored"];
        uint64_t v33 = *(void *)(*(void *)(a1 + 56) + 8);
        long long v34 = *(void **)(v33 + 40);
        *(void *)(v33 + 40) = v32;
      }
    }
  }
  else
  {
    if (qword_10032EC80 != -1) {
      dispatch_once(&qword_10032EC80, &stru_1002C3318);
    }
    uint64_t v20 = qword_10032EC88;
    if (os_log_type_enabled((os_log_t)qword_10032EC88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "failed to get latest map head", buf, 2u);
    }
  }
}

void sub_10016EE3C(id a1)
{
  qword_10032EC88 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016EE80(id a1)
{
  qword_10032EC88 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016EEC4(id a1)
{
  qword_10032EC88 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016F0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_10016F0EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    int v5 = +[NSFetchRequest fetchRequestWithEntityName:@"KTTreeHead"];
    BOOL v6 = +[NSPredicate predicateWithFormat:@"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d", *(void *)(a1 + 40), *(void *)(a1 + 72), 1, 1, 1];
    [v5 setPredicate:v6];

    uint64_t v47 = *(void *)(a1 + 48);
    id v7 = +[NSArray arrayWithObjects:&v47 count:1];
    [v5 setPropertiesToFetch:v7];

    [v5 setReturnsDistinctResults:1];
    [v5 setResultType:2];
    [v5 setFetchLimit:1];
    id v8 = +[NSSortDescriptor sortDescriptorWithKey:@"revision" ascending:0];
    uint64_t v46 = v8;
    id v9 = +[NSArray arrayWithObjects:&v46 count:1];
    [v5 setSortDescriptors:v9];

    os_log_type_t v10 = [*(id *)(a1 + 32) context];
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
    id v39 = *(id *)(v11 + 40);
    id v12 = [v10 executeFetchRequest:v5 error:&v39];
    objc_storeStrong((id *)(v11 + 40), v39);

    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
    id v38 = *(id *)(v13 + 40);
    +[TransparencyManagedDataStore cleanseError:&v38];
    objc_storeStrong((id *)(v13 + 40), v38);
    if (v12 && [v12 count])
    {
      uint64_t v14 = [v12 objectAtIndexedSubscript:0];
      uint64_t v15 = [v14 objectForKeyedSubscript:*(void *)(a1 + 48)];
      uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8);
      uint64_t v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;

      if (qword_10032EC80 != -1) {
        dispatch_once(&qword_10032EC80, &stru_1002C33C0);
      }
      int v18 = qword_10032EC88;
      if (os_log_type_enabled((os_log_t)qword_10032EC88, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = *(void *)(a1 + 48);
        uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v43 = v19;
        __int16 v44 = 2112;
        uint64_t v45 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "latest verified map has property %@ = %@", buf, 0x16u);
      }
    }
    else
    {
      id v22 = +[NSPredicate predicateWithFormat:@"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d", *(void *)(a1 + 40), *(void *)(a1 + 72), 1, 2, 1];
      [v5 setPredicate:v22];

      uint64_t v23 = +[NSSortDescriptor sortDescriptorWithKey:@"revision" ascending:0];
      id v41 = v23;
      uint64_t v24 = +[NSArray arrayWithObjects:&v41 count:1];
      [v5 setSortDescriptors:v24];

      uint64_t v25 = [*(id *)(a1 + 32) context];
      uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8);
      id v37 = *(id *)(v26 + 40);
      __int16 v27 = [v25 executeFetchRequest:v5 error:&v37];
      objc_storeStrong((id *)(v26 + 40), v37);

      uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8);
      id v36 = *(id *)(v28 + 40);
      +[TransparencyManagedDataStore cleanseError:&v36];
      objc_storeStrong((id *)(v28 + 40), v36);
      if (v27)
      {
        if ([v27 count])
        {
          __int16 v29 = [v27 objectAtIndexedSubscript:0];
          uint64_t v30 = [v29 objectForKeyedSubscript:*(void *)(a1 + 48)];
          uint64_t v31 = *(void *)(*(void *)(a1 + 64) + 8);
          uint64_t v32 = *(void **)(v31 + 40);
          *(void *)(v31 + 40) = v30;

          if (qword_10032EC80 != -1) {
            dispatch_once(&qword_10032EC80, &stru_1002C33E0);
          }
          uint64_t v33 = qword_10032EC88;
          if (os_log_type_enabled((os_log_t)qword_10032EC88, OS_LOG_TYPE_INFO))
          {
            uint64_t v34 = *(void *)(a1 + 48);
            uint64_t v35 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
            *(_DWORD *)buf = 138412546;
            uint64_t v43 = v34;
            __int16 v44 = 2112;
            uint64_t v45 = v35;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "no fully verified map; latest pending map had property %@ = %@",
              buf,
              0x16u);
          }
        }
        id v12 = v27;
      }
      else
      {
        id v12 = 0;
      }
    }
  }
  else
  {
    if (qword_10032EC80 != -1) {
      dispatch_once(&qword_10032EC80, &stru_1002C33A0);
    }
    id v21 = qword_10032EC88;
    if (os_log_type_enabled((os_log_t)qword_10032EC88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "failed to get latest map head", buf, 2u);
    }
  }
}

void sub_10016F63C(id a1)
{
  qword_10032EC88 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016F680(id a1)
{
  qword_10032EC88 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016F6C4(id a1)
{
  qword_10032EC88 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016F934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10016F958(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v36 = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&v36];
  objc_storeStrong((id *)(v3 + 40), v36);
  if (v4)
  {
    int v5 = +[NSFetchRequest fetchRequestWithEntityName:@"KTTreeHead"];
    BOOL v6 = +[NSPredicate predicateWithFormat:@"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d", *(void *)(a1 + 40), *(void *)(a1 + 72), 1, 1, 1];
    [v5 setPredicate:v6];

    [v5 setReturnsDistinctResults:1];
    [v5 setFetchLimit:1];
    id v7 = +[NSSortDescriptor sortDescriptorWithKey:@"revision" ascending:0];
    id v37 = v7;
    id v8 = +[NSArray arrayWithObjects:&v37 count:1];
    [v5 setSortDescriptors:v8];

    id v9 = [*(id *)(a1 + 32) context];
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    obuint64_t j = *(id *)(v10 + 40);
    uint64_t v11 = [v9 executeFetchRequest:v5 error:&obj];
    objc_storeStrong((id *)(v10 + 40), obj);

    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
    id v33 = *(id *)(v12 + 40);
    +[TransparencyManagedDataStore cleanseError:&v33];
    objc_storeStrong((id *)(v12 + 40), v33);
    if (v11 && [v11 count])
    {
      uint64_t v13 = v11;
    }
    else
    {
      uint64_t v15 = +[NSPredicate predicateWithFormat:@"isMapHead == YES && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d && mmdVerified = %d", *(void *)(a1 + 40), *(void *)(a1 + 72), 1, 2, 1];
      [v5 setPredicate:v15];

      uint64_t v16 = [*(id *)(a1 + 32) context];
      uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
      id v32 = *(id *)(v17 + 40);
      uint64_t v13 = [v16 executeFetchRequest:v5 error:&v32];
      objc_storeStrong((id *)(v17 + 40), v32);

      uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8);
      id v31 = *(id *)(v18 + 40);
      +[TransparencyManagedDataStore cleanseError:&v31];
      objc_storeStrong((id *)(v18 + 40), v31);
      if (!v13 || ![v13 count])
      {
        uint64_t v25 = +[TransparencyError errorWithDomain:kTransparencyErrorDatabase code:-128 errorLevel:2 underlyingError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) description:@"no previous map heads stored"];
        uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8);
        __int16 v27 = *(void **)(v26 + 40);
        *(void *)(v26 + 40) = v25;

        goto LABEL_14;
      }
    }
    uint64_t v19 = [v13 objectAtIndexedSubscript:0];
    if (v19)
    {
      uint64_t v20 = (void *)v19;
      uint64_t v21 = *(void *)(a1 + 48);
      uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8);
      id v30 = *(id *)(v22 + 40);
      char v23 = (*(uint64_t (**)(void))(v21 + 16))();
      objc_storeStrong((id *)(v22 + 40), v30);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v23;
      uint64_t v24 = *(void *)(*(void *)(a1 + 56) + 8);
      id v29 = *(id *)(v24 + 40);
      +[TransparencyManagedDataStore cleanseError:&v29];
      objc_storeStrong((id *)(v24 + 40), v29);

LABEL_18:
      return;
    }
LABEL_14:
    if (qword_10032EC80 != -1) {
      dispatch_once(&qword_10032EC80, &stru_1002C3420);
    }
    uint64_t v28 = qword_10032EC88;
    if (os_log_type_enabled((os_log_t)qword_10032EC88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "failed to get latest map head", buf, 2u);
    }
    goto LABEL_18;
  }
  if (qword_10032EC80 != -1) {
    dispatch_once(&qword_10032EC80, &stru_1002C3400);
  }
  uint64_t v14 = qword_10032EC88;
  if (os_log_type_enabled((os_log_t)qword_10032EC88, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "failed to get latest map head", buf, 2u);
  }
}

void sub_10016FDBC(id a1)
{
  qword_10032EC88 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016FE00(id a1)
{
  qword_10032EC88 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10016FFC4(id a1)
{
  qword_10032EC88 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id *sub_10017065C(id *result, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return (id *)_[result[4] setPendingFlag:@"FetchIDMS" stateMachine:result[5]];
  }
  return result;
}

unint64_t BatchUpdateRequest_UpdateData_UpdateType_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10032EC90))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"BatchUpdateRequest_UpdateData_UpdateType" valueNames:"Insert" values:&unk_10028AF30 count:3 enumVerifier:BatchUpdateRequest_UpdateData_UpdateType_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032EC90, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032EC90);
}

BOOL BatchUpdateRequest_UpdateData_UpdateType_IsValidValue(unsigned int a1)
{
  return a1 < 3;
}

id BatchUpdateRequest_Version_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[BatchUpdateRequest descriptor](BatchUpdateRequest) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetBatchUpdateRequest_Version_RawValue(void *a1, int a2)
{
  id v4 = [[+[BatchUpdateRequest descriptor](BatchUpdateRequest) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id BatchUpdateRequest_UpdateData_Type_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[BatchUpdateRequest_UpdateData descriptor](BatchUpdateRequest_UpdateData) descriptor] fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetBatchUpdateRequest_UpdateData_Type_RawValue(void *a1, int a2)
{
  id v4 = [[+[BatchUpdateRequest_UpdateData descriptor](BatchUpdateRequest_UpdateData) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id BatchUpdateRequest_UpdateData_Application_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[BatchUpdateRequest_UpdateData descriptor](BatchUpdateRequest_UpdateData) fieldWithNumber:2];

  return sub_100168F00(a1, v2);
}

id SetBatchUpdateRequest_UpdateData_Application_RawValue(void *a1, int a2)
{
  id v4 = [[+[BatchUpdateRequest_UpdateData descriptor](BatchUpdateRequest_UpdateData) fieldWithNumber:2];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id BatchUpdateResponse_Status_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[BatchUpdateResponse descriptor](BatchUpdateResponse) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetBatchUpdateResponse_Status_RawValue(void *a1, int a2)
{
  id v4 = [[+[BatchUpdateResponse descriptor](BatchUpdateResponse) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

void BatchUpdateResponse_UpdateResponseData_ClearResponseDataOneOfCase(uint64_t a1)
{
  uint64_t v2 = (id *)[[+[BatchUpdateResponse_UpdateResponseData descriptor](BatchUpdateResponse_UpdateResponseData, "descriptor") oneofs] objectAtIndex:0];

  sub_1001687A4(a1, v2);
}

id InsertResponse_Status_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[InsertResponse descriptor](InsertResponse) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetInsertResponse_Status_RawValue(void *a1, int a2)
{
  id v4 = [[+[InsertResponse descriptor](InsertResponse) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id MarkForDeletionResponse_Status_RawValue(uint64_t a1)
{
  uint64_t v2 = [[MarkForDeletionResponse descriptor] fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetMarkForDeletionResponse_Status_RawValue(void *a1, int a2)
{
  id v4 = [[+[MarkForDeletionResponse descriptor](MarkForDeletionResponse, "descriptor") fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id OptInOutResponse_Status_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[OptInOutResponse descriptor](OptInOutResponse, "descriptor") fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetOptInOutResponse_Status_RawValue(void *a1, int a2)
{
  id v4 = [[+[OptInOutResponse descriptor](OptInOutResponse, "descriptor") fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id VerifySyncRequest_Version_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[VerifySyncRequest descriptor](VerifySyncRequest) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetVerifySyncRequest_Version_RawValue(void *a1, int a2)
{
  id v4 = [[+[VerifySyncRequest descriptor](VerifySyncRequest, "descriptor") fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id VerifySyncRequest_Application_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[VerifySyncRequest descriptor](VerifySyncRequest, "descriptor") fieldWithNumber:4];

  return sub_100168F00(a1, v2);
}

id SetVerifySyncRequest_Application_RawValue(void *a1, int a2)
{
  id v4 = [[+[VerifySyncRequest descriptor](VerifySyncRequest, "descriptor") fieldWithNumber:4];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id VerifySyncResponse_Status_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[VerifySyncResponse descriptor](VerifySyncResponse) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetVerifySyncResponse_Status_RawValue(void *a1, int a2)
{
  id v4 = [[+[VerifySyncResponse descriptor](VerifySyncResponse, "descriptor") fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id ConsistencyProofRequest_Version_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetConsistencyProofRequest_Version_RawValue(void *a1, int a2)
{
  id v4 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id ConsistencyProofRequest_LogType_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest) fieldWithNumber:3];

  return sub_100168F00(a1, v2);
}

id SetConsistencyProofRequest_LogType_RawValue(void *a1, int a2)
{
  id v4 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest) fieldWithNumber:3];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id ConsistencyProofRequest_Application_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest) fieldWithNumber:4];

  return sub_100168F00(a1, v2);
}

id SetConsistencyProofRequest_Application_RawValue(void *a1, int a2)
{
  id v4 = [[+[ConsistencyProofRequest descriptor](ConsistencyProofRequest) fieldWithNumber:4];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id ConsistencyProofResponse_Status_RawValue(uint64_t a1)
{
  uint64_t v2 = [+[ConsistencyProofResponse descriptor](ConsistencyProofResponse) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetConsistencyProofResponse_Status_RawValue(void *a1, int a2)
{
  id v4 = [[+[ConsistencyProofResponse descriptor](ConsistencyProofResponse, "descriptor") fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id ConsistencyProofResponse_LogType_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[ConsistencyProofResponse descriptor](ConsistencyProofResponse) fieldWithNumber:4];

  return sub_100168F00(a1, v2);
}

id SetConsistencyProofResponse_LogType_RawValue(void *a1, int a2)
{
  id v4 = [[+[ConsistencyProofResponse descriptor](ConsistencyProofResponse) fieldWithNumber:4];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id ConsistencyProofResponse_Application_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[ConsistencyProofResponse descriptor](ConsistencyProofResponse) fieldWithNumber:5];

  return sub_100168F00(a1, v2);
}

id SetConsistencyProofResponse_Application_RawValue(void *a1, int a2)
{
  id v4 = [[+[ConsistencyProofResponse descriptor](ConsistencyProofResponse) fieldWithNumber:5];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id RevisionLogInclusionProofRequest_Version_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetRevisionLogInclusionProofRequest_Version_RawValue(void *a1, int a2)
{
  id v4 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id RevisionLogInclusionProofRequest_Application_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest) fieldWithNumber:2];

  return sub_100168F00(a1, v2);
}

id SetRevisionLogInclusionProofRequest_Application_RawValue(void *a1, int a2)
{
  id v4 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest) fieldWithNumber:2];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id RevisionLogInclusionProofRequest_LogType_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest) fieldWithNumber:3];

  return sub_100168F00(a1, v2);
}

id SetRevisionLogInclusionProofRequest_LogType_RawValue(void *a1, int a2)
{
  id v4 = [[+[RevisionLogInclusionProofRequest descriptor](RevisionLogInclusionProofRequest, "descriptor") fieldWithNumber:3];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id RevisionLogInclusionProofResponse_Status_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[RevisionLogInclusionProofResponse descriptor](RevisionLogInclusionProofResponse, "descriptor") fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetRevisionLogInclusionProofResponse_Status_RawValue(void *a1, int a2)
{
  id v4 = [[+[RevisionLogInclusionProofResponse descriptor](RevisionLogInclusionProofResponse, "descriptor") fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id PublicKeysRequest_Version_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor") fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetPublicKeysRequest_Version_RawValue(void *a1, int a2)
{
  id v4 = [[+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor") fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id PublicKeysRequest_Application_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor") fieldWithNumber:2];

  return sub_100168F00(a1, v2);
}

id SetPublicKeysRequest_Application_RawValue(void *a1, int a2)
{
  id v4 = [[+[PublicKeysRequest descriptor](PublicKeysRequest, "descriptor") fieldWithNumber:2];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id PublicKeysResponse_Status_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[PublicKeysResponse descriptor](PublicKeysResponse, "descriptor") fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetPublicKeysResponse_Status_RawValue(void *a1, int a2)
{
  id v4 = [[+[PublicKeysResponse descriptor](PublicKeysResponse, "descriptor") fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id Gossip_Version_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[Gossip descriptor](Gossip, "descriptor") fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetGossip_Version_RawValue(void *a1, int a2)
{
  id v4 = [[+[Gossip descriptor](Gossip, "descriptor") fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

void sub_1001726E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100172704(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100172B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100172B30(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100172F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100172F18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained timeoutCanOccur])
  {
    [WeakRetained setTimeoutCanOccur:0];
    id v1 = [WeakRetained transitionOperation];
    id v2 = [v1 timeout:0];

    id v3 = objc_alloc_init((Class)NSOperationQueue);
    id v4 = [WeakRetained transitionOperation];
    [v3 addOperation:v4];
  }
}

void sub_1001749C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001749E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 mutationMs];
  if (v7 > [v6 mutationMs])
  {
    uint64_t v8 = 1;
    goto LABEL_40;
  }
  id v9 = [v5 mutationMs];
  if (v9 != [v6 mutationMs])
  {
    uint64_t v8 = -1;
    goto LABEL_40;
  }
  if ([v5 isEqual:v6])
  {
LABEL_39:
    uint64_t v8 = 0;
    goto LABEL_40;
  }
  unsigned int v10 = [v5 getSimpleMutationType];
  unsigned int v11 = [v6 getSimpleMutationType];
  if ((v10 == 3 || [v5 hasOptInExtension])
    && (v11 == 3 || [v6 hasOptInExtension]))
  {
    uint64_t v12 = [v5 accountKeyHash];
    uint64_t v13 = [v6 accountKeyHash];
    uint64_t v14 = (void *)v13;
    if (!v12 || !v13 || [v12 isEqualToData:v13])
    {
      unsigned int v15 = [v5 getOptIn];
      if (v15 != [v6 getOptIn])
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
        if (qword_10032ED38 != -1) {
          dispatch_once(&qword_10032ED38, &stru_1002C34C0);
        }
        uint64_t v16 = (void *)qword_10032ED40;
        if (os_log_type_enabled((os_log_t)qword_10032ED40, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = v16;
          *(_DWORD *)buf = 134217984;
          id v48 = [v5 mutationMs];
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Error sorting SMTS: different OptInOut states for %llu ms", buf, 0xCu);
        }
      }
    }
  }
  unsigned int v18 = v10 - 1;
  if (v10 == 1 && v11 == 1)
  {
    uint64_t v19 = [v5 idsDeviceMutation];
    uint64_t v20 = [v19 accountKeyHash];
    uint64_t v21 = [v6 idsDeviceMutation];
    uint64_t v22 = [v21 accountKeyHash];
    unsigned __int8 v23 = [v20 isEqual:v22];

    if ((v23 & 1) == 0)
    {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
      if (qword_10032ED38 != -1) {
        dispatch_once(&qword_10032ED38, &stru_1002C34E0);
      }
      id v39 = (void *)qword_10032ED40;
      if (!os_log_type_enabled((os_log_t)qword_10032ED40, OS_LOG_TYPE_ERROR)) {
        goto LABEL_39;
      }
      id v36 = v39;
      id v40 = [v5 mutationMs];
      *(_DWORD *)buf = 134217984;
      id v48 = v40;
      id v38 = "Error sorting SMTS: two Add mutations with different account key for %llu ms";
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, v38, buf, 0xCu);

      goto LABEL_39;
    }
  }
  uint64_t v8 = 0;
  if (v18 <= 1 && v11 - 1 <= 1)
  {
    uint64_t v24 = [v5 idsDeviceMutation];
    uint64_t v25 = [v24 accountKeyHash];
    uint64_t v26 = [v6 idsDeviceMutation];
    __int16 v27 = [v26 accountKeyHash];
    if ([v25 isEqual:v27])
    {
      uint64_t v45 = v25;
      uint64_t v28 = [v5 idsDeviceMutation];
      id v29 = [v28 deviceIdHash];
      id v30 = [v6 idsDeviceMutation];
      id v31 = [v30 deviceIdHash];
      uint64_t v46 = v29;
      if ([v29 isEqual:v31])
      {
        [v5 idsDeviceMutation];
        id v32 = v42 = v28;
        id v33 = [v32 appVersion];
        [v6 idsDeviceMutation];
        uint64_t v34 = v44 = v24;
        id v43 = [v34 appVersion];

        if (v33 != v43) {
          goto LABEL_39;
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
        if (qword_10032ED38 != -1) {
          dispatch_once(&qword_10032ED38, &stru_1002C3500);
        }
        uint64_t v35 = (void *)qword_10032ED40;
        if (!os_log_type_enabled((os_log_t)qword_10032ED40, OS_LOG_TYPE_ERROR)) {
          goto LABEL_39;
        }
        id v36 = v35;
        id v37 = [v5 mutationMs];
        *(_DWORD *)buf = 134217984;
        id v48 = v37;
        id v38 = "Error sorting SMTS: different Add/Mark mutations for %llu ms for entry";
        goto LABEL_35;
      }
    }
    else
    {
    }
    goto LABEL_39;
  }
LABEL_40:

  return v8;
}

void sub_100174EF8(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100174F3C(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100174F80(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100175D54(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100175D98(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100175DDC(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100175E20(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100175E64(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100175EA8(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001770B4(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001770F8(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017713C(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100177180(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001771C4(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100177208(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017724C(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100177574(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100177938(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100178B94(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100178BD8(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100178C1C(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100178C60(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100178CA4(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001795F0(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100179930(id a1)
{
  qword_10032ED40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

unint64_t ProtocolVersion_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10032ED48))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"ProtocolVersion" valueNames:"UnknownVersion" values:&unk_10028B08C count:5 enumVerifier:ProtocolVersion_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032ED48, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032ED48);
}

BOOL ProtocolVersion_IsValidValue(unsigned int a1)
{
  return a1 < 4 || a1 == 999999999;
}

unint64_t Application_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10032ED50))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"Application" valueNames:"UnknownApplication" values:&unk_10028B11C count:7 enumVerifier:Application_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032ED50, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032ED50);
}

BOOL Application_IsValidValue(unsigned int a1)
{
  return a1 < 7;
}

unint64_t Status_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10032ED58))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"Status" valueNames:"UnknownStatus" values:&unk_10028B180 count:6 enumVerifier:Status_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032ED58, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032ED58);
}

uint64_t Status_IsValidValue(unsigned int a1)
{
  return (a1 < 8) & (0xEBu >> a1);
}

unint64_t VRFType_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10032ED60))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"VRFType" valueNames:"UnknownVrf" values:&unk_10028B1C4 count:2 enumVerifier:VRFType_IsValidValue flags:0 extraTextFormatInfo:&unk_10028B1CC];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032ED60, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032ED60);
}

BOOL VRFType_IsValidValue(int a1)
{
  return !a1 || a1 == 3;
}

unint64_t LogType_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10032ED68))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"LogType" valueNames:"UnknownLog" values:&unk_10028B230 count:7 enumVerifier:LogType_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032ED68, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032ED68);
}

BOOL LogType_IsValidValue(unsigned int a1)
{
  return a1 < 7;
}

unint64_t MapType_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10032ED70))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"MapType" valueNames:"UnknownMap" values:&unk_10028B27C count:3 enumVerifier:MapType_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032ED70, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032ED70);
}

BOOL MapType_IsValidValue(unsigned int a1)
{
  return a1 < 3;
}

unint64_t NodeType_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10032ED78))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"NodeType" valueNames:"PaclNode" values:&unk_10028B2E4 count:9 enumVerifier:NodeType_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032ED78, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032ED78);
}

BOOL NodeType_IsValidValue(unsigned int a1)
{
  return a1 < 9;
}

unint64_t Signature_SignatureAlgorithm_EnumDescriptor()
{
  if (!atomic_load((unint64_t *)&qword_10032ED80))
  {
    id v1 = +[TransparencyGPBEnumDescriptor allocDescriptorForName:@"Signature_SignatureAlgorithm" valueNames:"Unknown" values:&unk_10028B320 count:2 enumVerifier:Signature_SignatureAlgorithm_IsValidValue flags:0];
    uint64_t v2 = 0;
    atomic_compare_exchange_strong(&qword_10032ED80, (unint64_t *)&v2, (unint64_t)v1);
    if (v2) {
  }
    }
  return atomic_load((unint64_t *)&qword_10032ED80);
}

BOOL Signature_SignatureAlgorithm_IsValidValue(unsigned int a1)
{
  return a1 < 2;
}

id VRFWitness_Type_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[VRFWitness descriptor](VRFWitness, "descriptor") fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetVRFWitness_Type_RawValue(void *a1, int a2)
{
  id v4 = [[+[VRFWitness descriptor](VRFWitness, "descriptor") fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id VRFPublicKey_Type_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[VRFPublicKey descriptor](VRFPublicKey) fieldWithNumber:2];

  return sub_100168F00(a1, v2);
}

id SetVRFPublicKey_Type_RawValue(void *a1, int a2)
{
  id v4 = [[+[VRFPublicKey descriptor](VRFPublicKey) fieldWithNumber:2];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id Signature_Algorithm_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[Signature descriptor](Signature, "descriptor") fieldWithNumber:3];

  return sub_100168F00(a1, v2);
}

id SetSignature_Algorithm_RawValue(void *a1, int a2)
{
  id v4 = [[+[Signature descriptor](Signature, "descriptor") fieldWithNumber:3];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id LogHead_LogType_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[LogHead descriptor](LogHead, "descriptor") fieldWithNumber:5];

  return sub_100168F00(a1, v2);
}

id SetLogHead_LogType_RawValue(void *a1, int a2)
{
  id v4 = [[+[LogHead descriptor](LogHead, "descriptor") fieldWithNumber:5];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id LogHead_Application_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[LogHead descriptor](LogHead, "descriptor") fieldWithNumber:6];

  return sub_100168F00(a1, v2);
}

id SetLogHead_Application_RawValue(void *a1, int a2)
{
  id v4 = [[+[LogHead descriptor](LogHead, "descriptor") fieldWithNumber:6];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id LogEntry_LogType_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[LogEntry descriptor](LogEntry) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetLogEntry_LogType_RawValue(void *a1, int a2)
{
  id v4 = [[+[LogEntry descriptor](LogEntry) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id LogEntry_NodeType_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[LogEntry descriptor](LogEntry) fieldWithNumber:6];

  return sub_100168F00(a1, v2);
}

id SetLogEntry_NodeType_RawValue(void *a1, int a2)
{
  id v4 = [[+[LogEntry descriptor](LogEntry) fieldWithNumber:6];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id MapHead_Application_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[MapHead descriptor](MapHead) fieldWithNumber:3];

  return sub_100168F00(a1, v2);
}

id SetMapHead_Application_RawValue(void *a1, int a2)
{
  id v4 = [[+[MapHead descriptor](MapHead) fieldWithNumber:3];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id MapHead_MapType_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[MapHead descriptor](MapHead) fieldWithNumber:6];

  return sub_100168F00(a1, v2);
}

id SetMapHead_MapType_RawValue(void *a1, int a2)
{
  id v4 = [[+[MapHead descriptor](MapHead) fieldWithNumber:6];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id PerApplicationTreeConfigNode_EarliestVersion_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[PerApplicationTreeConfigNode descriptor](PerApplicationTreeConfigNode) fieldWithNumber:3];

  return sub_100168F00(a1, v2);
}

id SetPerApplicationTreeConfigNode_EarliestVersion_RawValue(void *a1, int a2)
{
  id v4 = [[+[PerApplicationTreeConfigNode descriptor](PerApplicationTreeConfigNode) fieldWithNumber:3];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id TopLevelTreeConfigNode_EarliestVersion_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[TopLevelTreeConfigNode descriptor](TopLevelTreeConfigNode) fieldWithNumber:3];

  return sub_100168F00(a1, v2);
}

id SetTopLevelTreeConfigNode_EarliestVersion_RawValue(void *a1, int a2)
{
  id v4 = [[+[TopLevelTreeConfigNode descriptor](TopLevelTreeConfigNode) fieldWithNumber:3];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id LogClosedNode_EarliestVersionForNextTree_RawValue(uint64_t a1)
{
  uint64_t v2 = [[+[LogClosedNode descriptor](LogClosedNode) fieldWithNumber:3];

  return sub_100168F00(a1, v2);
}

id SetLogClosedNode_EarliestVersionForNextTree_RawValue(void *a1, int a2)
{
  id v4 = [[+[LogClosedNode descriptor](LogClosedNode, "descriptor") fieldWithNumber:3];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

void sub_10017B170(id a1)
{
  qword_10032EE10 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017B788(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (!v12 && v9 && v10 && v11)
  {
    +[TransparencyNetworkRequest addDeviceAuthentication:*(void *)(a1 + 32) signature:v9 timestamp:v10 certs:v11];
    uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (qword_10032EE08 != -1) {
      dispatch_once(&qword_10032EE08, &stru_1002C3828);
    }
    uint64_t v14 = qword_10032EE10;
    if (os_log_type_enabled((os_log_t)qword_10032EE10, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 138412290;
      id v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "device identity authentication failed: %@", (uint8_t *)&v15, 0xCu);
    }
    uint64_t v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v13();
}

void sub_10017B8F4(id a1)
{
  qword_10032EE10 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017C7E8(id a1)
{
  qword_10032EE20 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017CC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10017CC90(id a1)
{
  qword_10032EE30 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017CCD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v5 = WeakRetained;
  if (v3)
  {
    if (qword_10032EE28 != -1) {
      dispatch_once(&qword_10032EE28, &stru_1002C38B0);
    }
    id v6 = qword_10032EE30;
    if (os_log_type_enabled((os_log_t)qword_10032EE30, OS_LOG_TYPE_ERROR))
    {
      int v13 = 138412290;
      id v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "updatePublicKeyStores: failed with: %@", (uint8_t *)&v13, 0xCu);
    }
    [v5 setError:v3];
  }
  else
  {
    id v7 = [WeakRetained intendedState];
    [v5 setNextState:v7];
  }
  uint64_t v8 = [[KTPendingFlag alloc] initWithFlag:@"StatusUpdate" delayInSeconds:0.0];
  id v9 = [v5 deps];
  id v10 = [v9 flagHandler];
  [v10 handlePendingFlag:v8];

  id v11 = [v5 operationQueue];
  id v12 = [v5 finishedOp];
  [v11 addOperation:v12];
}

void sub_10017CE84(id a1)
{
  qword_10032EE30 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017D190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10017D1B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10017D1C4(uint64_t a1)
{
}

void sub_10017D1CC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) context];
  uint64_t v3 = +[NSEntityDescription insertNewObjectForEntityForName:@"KTSelfState" inManagedObjectContext:v2];
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  id v6 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v6)
  {
    [v6 setApplication:*(void *)(a1 + 40)];
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) setUri:*(void *)(a1 + 48)];
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(*(void *)(a1 + 64) + 8);
    obuint64_t j = *(id *)(v8 + 40);
    [v7 persistWithError:&obj];
    objc_storeStrong((id *)(v8 + 40), obj);
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
    id v10 = *(id *)(v9 + 40);
    +[TransparencyManagedDataStore cleanseError:&v10];
    objc_storeStrong((id *)(v9 + 40), v10);
  }
}

void sub_10017D484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10017D4A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    id v5 = +[KTSelfState fetchRequest];
    id v6 = +[NSPredicate predicateWithFormat:@"application == %@ && uri == %@", *(void *)(a1 + 40), *(void *)(a1 + 48)];
    [v5 setPredicate:v6];

    id v7 = [*(id *)(a1 + 32) context];
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    id v18 = *(id *)(v8 + 40);
    uint64_t v9 = [v7 executeFetchRequest:v5 error:&v18];
    objc_storeStrong((id *)(v8 + 40), v18);

    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    id v17 = *(id *)(v10 + 40);
    +[TransparencyManagedDataStore cleanseError:&v17];
    objc_storeStrong((id *)(v10 + 40), v17);
    if (v9 && [v9 count] == (id)1)
    {
      uint64_t v11 = [v9 objectAtIndexedSubscript:0];
      uint64_t v12 = *(void *)(a1 + 64);
    }
    else
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
      {
LABEL_9:

        goto LABEL_10;
      }
      uint64_t v11 = +[NSError errorWithDomain:kTransparencyErrorDatabase code:-128 userInfo:0];
      uint64_t v12 = *(void *)(a1 + 56);
    }
    uint64_t v15 = *(void *)(v12 + 8);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v11;

    goto LABEL_9;
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8);
  id v19 = *(id *)(v13 + 40);
  +[TransparencyManagedDataStore cleanseError:&v19];
  id v14 = v19;
  id v5 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v14;
LABEL_10:
}

void sub_10017D8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10017D91C(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = *(void *)(a1[8] + 8);
  obuint64_t j = *(id *)(v5 + 40);
  unsigned int v6 = [v2 initSelfState:v3 uri:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6)
  {
    id v7 = (void *)a1[4];
    uint64_t v8 = a1[5];
    uint64_t v9 = a1[6];
    uint64_t v10 = *(void *)(a1[8] + 8);
    id v24 = *(id *)(v10 + 40);
    uint64_t v11 = [v7 fetchSelfValidationState:v8 uri:v9 error:&v24];
    objc_storeStrong((id *)(v10 + 40), v24);
    if (v11)
    {
      uint64_t v12 = a1[7];
      uint64_t v13 = *(void *)(a1[8] + 8);
      id v23 = *(id *)(v13 + 40);
      char v14 = (*(uint64_t (**)(void))(v12 + 16))();
      objc_storeStrong((id *)(v13 + 40), v23);
      *(unsigned char *)(*(void *)(a1[9] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v14;
      if (*(unsigned char *)(*(void *)(a1[9] + 8) + 24))
      {
        uint64_t v15 = *(void *)(a1[8] + 8);
        uint64_t v17 = *(void *)(v15 + 40);
        uint64_t v16 = (id *)(v15 + 40);
        if (!v17)
        {
          id v18 = (void *)a1[4];
          id v22 = 0;
          unsigned __int8 v19 = [v18 persistWithError:&v22];
          objc_storeStrong(v16, v22);
          *(unsigned char *)(*(void *)(a1[9] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v19;
          uint64_t v20 = *(void *)(a1[8] + 8);
          id v21 = *(id *)(v20 + 40);
          +[TransparencyManagedDataStore cleanseError:&v21];
          objc_storeStrong((id *)(v20 + 40), v21);
        }
      }
    }
  }
}

BOOL sub_10017DB60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 followupTicket];

  if (!v4)
  {
    +[TransparencySettings defaultSelfFollowupTicketLifetime];
    uint64_t v5 = +[NSDate dateWithTimeInterval:sinceDate:](NSDate, "dateWithTimeInterval:sinceDate:", *(void *)(a1 + 32));
    [v3 setFollowupTicket:v5];
  }
  return v4 == 0;
}

BOOL sub_10017DD50(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  unsigned int v6 = [v5 followupTicket];

  if (v6)
  {
    uint64_t v7 = a1[6];
    uint64_t v8 = [v5 followupTicket];
    uint64_t v9 = v8;
    if (v7)
    {
      id v10 = [v8 compare:a1[6]];
    }
    else
    {
      uint64_t v15 = +[NSDate now];
      id v10 = [v9 compare:v15];
    }
    BOOL v14 = (unint64_t)v10 + 1 < 2;
  }
  else if (a3)
  {
    uint64_t v11 = kTransparencyErrorDatabase;
    v17[0] = @"application";
    v17[1] = @"uri";
    uint64_t v12 = a1[5];
    v18[0] = a1[4];
    v18[1] = v12;
    uint64_t v13 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:2];
    BOOL v14 = 1;
    *a3 = +[TransparencyError errorWithDomain:v11 code:-338 errorLevel:1 underlyingError:0 userinfo:v13 description:@"checked followup ticket when none exists"];
  }
  else
  {
    BOOL v14 = 1;
  }

  return v14;
}

BOOL sub_10017DEE4(id a1, KTSelfState *a2, id *a3)
{
  uint64_t v4 = a2;
  id v5 = [(KTSelfState *)v4 followupTicket];

  if (v5)
  {
    [(KTSelfState *)v4 setFollowupTicket:0];
  }
  else if (a3)
  {
    *a3 = +[TransparencyError errorWithDomain:kTransparencyErrorDatabase code:-128 errorLevel:2 underlyingError:0 description:@"tried to clear followup ticket when none exists"];
  }

  return v5 != 0;
}

void sub_10017E25C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_10017E28C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [WeakRetained error];

  if (!v2)
  {
    uint64_t v4 = [WeakRetained intendedState];
    [WeakRetained setNextState:v4];
    goto LABEL_7;
  }
  if (qword_10032EE38 != -1) {
    dispatch_once(&qword_10032EE38, &stru_1002C39B0);
  }
  uint64_t v3 = (void *)qword_10032EE40;
  if (os_log_type_enabled((os_log_t)qword_10032EE40, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = v3;
    id v5 = [WeakRetained error];
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "FetchKTSelf: error: %@", (uint8_t *)&v6, 0xCu);

LABEL_7:
  }
}

void sub_10017E3BC(id a1)
{
  qword_10032EE40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017E400(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!v6)
  {
    if (qword_10032EE38 != -1) {
      dispatch_once(&qword_10032EE38, &stru_1002C39D0);
    }
    uint64_t v25 = qword_10032EE40;
    if (os_log_type_enabled((os_log_t)qword_10032EE40, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v37 = (uint64_t)v7;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "FetchKTSelf: failed to fetch self verification info: %@", buf, 0xCu);
    }
    uint64_t v26 = +[TransparencyError errorWithDomain:kTransparencyErrorInterface code:-337 underlyingError:v7 description:@"fetchSelfVerificationInfoForApplication failed"];
    goto LABEL_25;
  }
  uint64_t v9 = [v6 uriToServerLoggableDatas];
  id v10 = [v9 count];

  if (!v10)
  {
    if (qword_10032EE38 != -1) {
      dispatch_once(&qword_10032EE38, &stru_1002C39F0);
    }
    __int16 v27 = qword_10032EE40;
    if (os_log_type_enabled((os_log_t)qword_10032EE40, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "FetchKTSelf: no uriToServerLoggableDatas", buf, 2u);
    }
    uint64_t v26 = +[NSError errorWithDomain:kTransparencyErrorServer code:-336 userInfo:0];
LABEL_25:
    uint64_t v28 = (void *)v26;
    [WeakRetained setError:v26];

    id v23 = [WeakRetained operationQueue];
    id v24 = [WeakRetained finishedOp];
    [v23 addOperation:v24];
    goto LABEL_26;
  }
  id v29 = v7;
  id v30 = v6;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  obuint64_t j = [v6 uriToServerLoggableDatas];
  id v11 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v33;
    do
    {
      BOOL v14 = 0;
      do
      {
        if (*(void *)v33 != v13) {
          objc_enumerationMutation(obj);
        }
        uint64_t v15 = *(void *)(*((void *)&v32 + 1) + 8 * (void)v14);
        uint64_t v16 = [WeakRetained application];
        uint64_t v17 = +[TransparencyApplication addApplicationPrefixForIdentifier:v16 uri:v15];

        if (qword_10032EE38 != -1) {
          dispatch_once(&qword_10032EE38, &stru_1002C3A10);
        }
        id v18 = qword_10032EE40;
        if (os_log_type_enabled((os_log_t)qword_10032EE40, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 141558274;
          uint64_t v37 = 1752392040;
          __int16 v38 = 2112;
          id v39 = v17;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "FetchKTSelf: looking up %{mask.hash}@", buf, 0x16u);
        }
        unsigned __int8 v19 = [KTFetchURIOperation alloc];
        uint64_t v20 = [WeakRetained application];
        id v21 = [WeakRetained deps];
        id v22 = [(KTFetchURIOperation *)v19 initWithURI:v17 application:v20 dependencies:v21];

        [WeakRetained runBeforeGroupFinished:v22];
        BOOL v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      id v12 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
    }
    while (v12);
  }

  id v23 = [WeakRetained operationQueue];
  id v24 = [WeakRetained finishedOp];
  [v23 addOperation:v24];
  id v7 = v29;
  id v6 = v30;
LABEL_26:
}

void sub_10017E830(id a1)
{
  qword_10032EE40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017E874(id a1)
{
  qword_10032EE40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017E8B8(id a1)
{
  qword_10032EE40 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10017EF68(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueSetFlag:*(void *)(a1 + 40)];
}

void sub_10017F9F8(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017FA3C(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017FA80(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017FAC4(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017FB08(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10017FB4C(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100180260(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001802A4(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001802E8(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018032C(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100180ACC(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100180B10(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100180B54(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100180B98(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100180D70(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100181408(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018144C(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100181490(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100181AD0(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100181B14(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100181B58(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100181B9C(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100181BE0(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100182130(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100182174(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001821B8(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001821FC(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018265C(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001826A0(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100182BB0(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100182BF4(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100182C38(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100182C7C(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100182ED0(id a1)
{
  qword_10032EE50 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001836C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100183708(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = objc_alloc_init(KTCondition);
  uint64_t v4 = [*(id *)(a1 + 32) mutableStateConditions];
  [v4 setObject:v5 forKeyedSubscript:v3];
}

void sub_10018378C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [WeakRetained queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100183834;
  block[3] = &unk_1002B6CF8;
  id v5 = WeakRetained;
  id v3 = WeakRetained;
  dispatch_sync(v2, block);
}

id sub_100183834(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

void sub_100183940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100183958(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100183968(uint64_t a1)
{
}

void sub_100183970(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) mutableStateConditions];
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100184010(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100184414(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100184458(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018449C(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100184614(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100184634(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = [WeakRetained queue];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001846E8;
  void v4[3] = &unk_1002B7D58;
  id v5 = *(id *)(a1 + 32);
  id v6 = WeakRetained;
  dispatch_sync(v3, v4);
}

id sub_1001846E8(uint64_t a1)
{
  if (qword_10032EE58 != -1) {
    dispatch_once(&qword_10032EE58, &stru_1002C3F60);
  }
  uint64_t v2 = (void *)qword_10032EE60;
  if (os_log_type_enabled((os_log_t)qword_10032EE60, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    id v5 = [v3 nextState];
    id v6 = [*(id *)(a1 + 32) intendedState];
    id v7 = [*(id *)(a1 + 40) currentFlags];
    uint64_t v8 = [v7 contentsAsString];
    uint64_t v9 = [*(id *)(a1 + 40) pendingFlagsString];
    id v10 = *(void **)(a1 + 32);
    uint64_t v11 = [v10 error];
    id v12 = (void *)v11;
    *(_DWORD *)buf = 138544642;
    CFStringRef v13 = @"(no error)";
    id v41 = v5;
    if (v11) {
      CFStringRef v13 = (const __CFString *)v11;
    }
    __int16 v42 = 2114;
    id v43 = v6;
    __int16 v44 = 2114;
    uint64_t v45 = v8;
    __int16 v46 = 2114;
    uint64_t v47 = v9;
    __int16 v48 = 2114;
    long long v49 = v10;
    __int16 v50 = 2114;
    CFStringRef v51 = v13;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finishing state transition attempt (ending in %{public}@, intended: %{public}@, f:[%{public}@], p:[%{public}@]): %{public}@ %{public}@", buf, 0x3Eu);
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  BOOL v14 = [*(id *)(a1 + 40) stateMachineWatchers];
  id v15 = [v14 countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v15)
  {
    id v17 = v15;
    uint64_t v18 = *(void *)v36;
    *(void *)&long long v16 = 138543362;
    long long v34 = v16;
    do
    {
      unsigned __int8 v19 = 0;
      do
      {
        if (*(void *)v36 != v18) {
          objc_enumerationMutation(v14);
        }
        uint64_t v20 = *(void **)(*((void *)&v35 + 1) + 8 * (void)v19);
        if (qword_10032EE58 != -1) {
          dispatch_once(&qword_10032EE58, &stru_1002C3F80);
        }
        id v21 = qword_10032EE60;
        if (os_log_type_enabled((os_log_t)qword_10032EE60, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = v34;
          id v41 = v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "notifying watcher: %{public}@", buf, 0xCu);
        }
        [v20 onqueueHandleTransition:*(void *)(a1 + 32), v34];
        unsigned __int8 v19 = (char *)v19 + 1;
      }
      while (v17 != v19);
      id v17 = [v14 countByEnumeratingWithState:&v35 objects:v39 count:16];
    }
    while (v17);
  }

  id v22 = [*(id *)(a1 + 40) stateMachineWatchers];
  id v23 = [v22 count];

  if (v23)
  {
    id v24 = [*(id *)(a1 + 40) stateMachineWatchers];
    uint64_t v25 = (uint64_t)[v24 count];

    if (v25 >= 1)
    {
      unint64_t v26 = v25 + 1;
      do
      {
        __int16 v27 = [*(id *)(a1 + 40) stateMachineWatchers];
        uint64_t v28 = [v27 objectAtIndexedSubscript:v26 - 2];
        id v29 = [v28 result];
        unsigned int v30 = [v29 isFinished];

        if (v30)
        {
          id v31 = [*(id *)(a1 + 40) stateMachineWatchers];
          [v31 removeObjectAtIndex:v26 - 2];
        }
        --v26;
      }
      while (v26 > 1);
    }
  }
  long long v32 = [*(id *)(a1 + 32) nextState];
  [*(id *)(a1 + 40) setCurrentState:v32];

  [*(id *)(a1 + 40) setNextStateMachineCycleOperation:0];
  return [*(id *)(a1 + 40) _onqueueStartNextStateMachineOperation:1];
}

void sub_100184AAC(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100184AF0(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_100184BBC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueuePokeStateMachine];
}

id sub_100184CC4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueHandleFlag:*(void *)(a1 + 40)];
}

id sub_100184E00(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onqueueHandlePendingFlag:*(void *)(a1 + 40)];
}

id sub_100184ED8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onqueueHandlePendingFlag:*(void *)(a1 + 40)];
}

id sub_100185038(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueCancelPendingFlag:*(void *)(a1 + 40)];
}

void sub_1001851D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001851F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [WeakRetained queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100185284;
  block[3] = &unk_1002B6CF8;
  void block[4] = WeakRetained;
  dispatch_sync(v2, block);
}

id sub_100185284(uint64_t a1)
{
  if (qword_10032EE58 != -1) {
    dispatch_once(&qword_10032EE58, &stru_1002C3FC8);
  }
  uint64_t v2 = qword_10032EE60;
  if (os_log_type_enabled((os_log_t)qword_10032EE60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Finished waiting for operation", v4, 2u);
  }
  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

void sub_10018531C(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_1001853E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setAllowPendingFlags:0];
}

void sub_100185510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100185528(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v2 = [*(id *)(a1 + 32) pendingFlags];
  uint64_t v3 = [v2 allKeys];

  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v12 + 1) + 8 * (void)v7);
        uint64_t v9 = [*(id *)(a1 + 32) pendingFlags];
        id v10 = [v9 objectForKeyedSubscript:v8];
        uint64_t v11 = [v10 description];
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v11 forKeyedSubscript:v8];

        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }
}

void sub_1001857A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001857C0(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v2 = [*(id *)(a1 + 32) currentFlags];
  uint64_t v3 = [v2 dumpFlags];

  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v9;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7) forKeyedSubscript:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)];
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v5);
  }
}

void sub_100185EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100185F54(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100185F98(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100186034;
    block[3] = &unk_1002B6CF8;
    void block[4] = v2;
    dispatch_sync(v3, block);
  }
}

id sub_100186034(uint64_t a1)
{
  if (qword_10032EE58 != -1) {
    dispatch_once(&qword_10032EE58, &stru_1002C4008);
  }
  uint64_t v2 = qword_10032EE60;
  if (os_log_type_enabled((os_log_t)qword_10032EE60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Unlock occurred", v4, 2u);
  }
  [*(id *)(a1 + 32) setConditionChecksInFlight:((unint64_t)[*(id *)(a1 + 32) conditionChecksInFlight] & 0xFFFFFFFFFFFFFFFELL)];
  [*(id *)(a1 + 32) _onqueueRecheckConditions];
  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

void sub_1001860EC(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100186130(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100186174(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v3 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100186210;
    block[3] = &unk_1002B6CF8;
    void block[4] = v2;
    dispatch_sync(v3, block);
  }
}

id sub_100186210(uint64_t a1)
{
  if (qword_10032EE58 != -1) {
    dispatch_once(&qword_10032EE58, &stru_1002C4048);
  }
  uint64_t v2 = qword_10032EE60;
  if (os_log_type_enabled((os_log_t)qword_10032EE60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Network is reachable", v4, 2u);
  }
  [*(id *)(a1 + 32) setConditionChecksInFlight:((unint64_t)[*(id *)(a1 + 32) conditionChecksInFlight] & 0xFFFFFFFFFFFFFFFDLL)];
  [*(id *)(a1 + 32) _onqueueRecheckConditions];
  return [*(id *)(a1 + 32) _onqueueSendAnyPendingFlags];
}

void sub_1001862C8(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100186870(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001868B4(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001868F8(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001869F0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) testHoldStates];
  [v2 addObject:*(void *)(a1 + 40)];
}

id sub_100186AF8(uint64_t a1)
{
  if (qword_10032EE58 != -1) {
    dispatch_once(&qword_10032EE58, &stru_1002C40C8);
  }
  id v2 = qword_10032EE60;
  if (os_log_type_enabled((os_log_t)qword_10032EE60, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Releasing state machine test pause from %@", (uint8_t *)&v6, 0xCu);
  }
  id v4 = [*(id *)(a1 + 40) testHoldStates];
  [v4 removeObject:*(void *)(a1 + 32)];

  return [*(id *)(a1 + 40) _onqueuePokeStateMachine];
}

void sub_100186BE8(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100186CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100186D04(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) nextStateMachineCycleOperation];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2 == 0;
}

void sub_100186E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100186E58(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) nextStateMachineCycleOperation];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2 == 0;
}

void sub_100186F30(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) holdStateMachineOperation];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) operationQueue];
    id v4 = [*(id *)(a1 + 32) holdStateMachineOperation];
    [v3 addOperation:v4];

    id v5 = *(void **)(a1 + 32);
    [v5 setHoldStateMachineOperation:0];
  }
}

id sub_10018706C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) holdStateMachineOperation];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) operationQueue];
    id v4 = [*(id *)(a1 + 32) holdStateMachineOperation];
    [v3 addOperation:v4];

    [*(id *)(a1 + 32) setHoldStateMachineOperation:0];
  }
  [*(id *)(a1 + 32) setHalted:1];
  [*(id *)(a1 + 32) setAllowPendingFlags:0];
  id v5 = *(void **)(a1 + 32);

  return [v5 _onqueuePokeStateMachine];
}

id sub_1001871CC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) stateMachineRequests];
  [v2 addObject:*(void *)(a1 + 40)];

  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 _onqueuePokeStateMachine];
}

id sub_1001872D0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) stateMachineWatchers];
  [v2 addObject:*(void *)(a1 + 40)];

  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 _onqueuePokeStateMachine];
}

id sub_1001873D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onqueueRegisterMultiStateArrivalWatcher:*(void *)(a1 + 40)];
}

void sub_10018776C(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001877B0(uint64_t a1)
{
  if (qword_10032EE58 != -1) {
    dispatch_once(&qword_10032EE58, &stru_1002C4108);
  }
  id v2 = (void *)qword_10032EE60;
  if (os_log_type_enabled((os_log_t)qword_10032EE60, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)(a1 + 40);
    id v5 = v2;
    uint64_t v6 = [v3 error];
    uint64_t v7 = (void *)v6;
    CFStringRef v8 = @"no error";
    if (v6) {
      CFStringRef v8 = (const __CFString *)v6;
    }
    int v11 = 138543618;
    uint64_t v12 = v4;
    __int16 v13 = 2114;
    CFStringRef v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Returning '%{public}@' result: %{public}@", (uint8_t *)&v11, 0x16u);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  long long v10 = [*(id *)(a1 + 40) error];
  (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
}

void sub_1001878E8(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100187DC0(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100187E04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_10032EE58 != -1) {
    dispatch_once(&qword_10032EE58, &stru_1002C4148);
  }
  uint64_t v4 = (void *)qword_10032EE60;
  if (os_log_type_enabled((os_log_t)qword_10032EE60, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v5 = *(void **)(a1 + 40);
    uint64_t v7 = v4;
    CFStringRef v8 = [v5 result];
    uint64_t v9 = [v8 error];
    long long v10 = (void *)v9;
    CFStringRef v11 = @"no error";
    if (v9) {
      CFStringRef v11 = (const __CFString *)v9;
    }
    int v17 = 138543618;
    uint64_t v18 = v6;
    __int16 v19 = 2114;
    CFStringRef v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Returning '%{public}@' result: %{public}@", (uint8_t *)&v17, 0x16u);
  }
  uint64_t v12 = *(void *)(a1 + 48);
  if (v12)
  {
    __int16 v13 = [*(id *)(a1 + 40) result];
    CFStringRef v14 = [v13 error];
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v14);
  }
  long long v15 = [*(id *)(a1 + 40) result];
  long long v16 = [v15 error];
  [v3 setError:v16];
}

void sub_100187FA8(id a1)
{
  qword_10032EE60 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100188DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100188DE0(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_100188E24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100188E34(uint64_t a1)
{
}

void sub_100188E3C(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = [v2 executeFetchRequest:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = [v5 firstObject];
  uint64_t v7 = v6;
  if (v6)
  {
    uint64_t v8 = [v6 data];
    uint64_t v9 = *(void *)(a1[7] + 8);
    long long v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    uint64_t v11 = [v7 updated];
    uint64_t v12 = *(void *)(a1[8] + 8);
    __int16 v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    CFStringRef v14 = [v7 error];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass)
    {
      uint64_t v16 = objc_opt_class();
      int v17 = [v7 error];
      uint64_t v18 = +[NSKeyedUnarchiver unarchivedObjectOfClass:v16 fromData:v17 error:0];
      uint64_t v19 = *(void *)(a1[6] + 8);
      CFStringRef v20 = *(void **)(v19 + 40);
      *(void *)(v19 + 40) = v18;
    }
  }
}

void sub_100188F8C(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100189470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018949C(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001894E0(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100189524(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100189568(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001895AC(void *a1)
{
  id v2 = +[CachedData fetchRequest];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"key = %@ AND application = %@ AND unique = %@", @"SelfVerificationInfo", a1[4], &stru_1002CE4C0];
  [v2 setPredicate:v3];

  uint64_t v4 = (void *)a1[5];
  uint64_t v5 = *(void *)(a1[7] + 8);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (![v6 count])
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C4278);
    }
    uint64_t v9 = qword_10032EE70;
    if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "storeSelfVerificationInfo: new", buf, 2u);
    }
    uint64_t v8 = +[NSEntityDescription insertNewObjectForEntityForName:@"CachedData" inManagedObjectContext:a1[5]];
    [v8 setKey:@"SelfVerificationInfo"];
    [v8 setApplication:a1[4]];
    [v8 setUnique:&stru_1002CE4C0];
    goto LABEL_13;
  }
  if (qword_10032EE68 != -1) {
    dispatch_once(&qword_10032EE68, &stru_1002C4298);
  }
  uint64_t v7 = qword_10032EE70;
  if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "storeSelfVerificationInfo: update", buf, 2u);
  }
  uint64_t v8 = [v6 firstObject];
  if (v8)
  {
LABEL_13:
    [v8 setError:0];
    long long v10 = +[NSDate date];
    [v8 setUpdated:v10];

    [v8 setData:a1[6]];
    uint64_t v11 = (void *)a1[5];
    uint64_t v12 = *(void *)(a1[7] + 8);
    id v16 = *(id *)(v12 + 40);
    unsigned __int8 v13 = [v11 save:&v16];
    objc_storeStrong((id *)(v12 + 40), v16);
    if (v13)
    {
      *(unsigned char *)(*(void *)(a1[8] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
    else
    {
      if (qword_10032EE68 != -1) {
        dispatch_once(&qword_10032EE68, &stru_1002C42B8);
      }
      uint64_t v14 = qword_10032EE70;
      if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(*(void *)(a1[7] + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v19 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "storeSelfVerificationInfo: save %@", buf, 0xCu);
      }
    }
  }
}

void sub_1001898D8(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018991C(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100189960(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001899A4(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100189AB0(uint64_t a1)
{
  id v2 = +[CachedData fetchRequest];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"key = %@ AND application = %@ AND unique = %@", @"SelfVerificationInfo", *(void *)(a1 + 32), &stru_1002CE4C0];
  [v2 setPredicate:v3];

  uint64_t v4 = [*(id *)(a1 + 40) executeFetchRequest:v2 error:*(void *)(a1 + 48)];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(a1 + 40) deleteObject:*(void *)(*((void *)&v9 + 1) + 8 * (void)v8)];
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
  if ([*(id *)(a1 + 40) hasChanges]) {
    [*(id *)(a1 + 40) save:*(void *)(a1 + 48)];
  }
}

void sub_10018A05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_10018A098(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018A0DC(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = [v2 executeFetchRequest:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  id v6 = [v5 firstObject];
  if (qword_10032EE68 != -1) {
    dispatch_once(&qword_10032EE68, &stru_1002C4318);
  }
  uint64_t v7 = qword_10032EE70;
  if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(*(void *)(a1[6] + 8) + 40);
    *(_DWORD *)buf = 138412546;
    id v24 = v6;
    __int16 v25 = 2112;
    uint64_t v26 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "fetchIDMSDeviceList: %@ %@", buf, 0x16u);
  }
  if (v6)
  {
    uint64_t v9 = [v6 data];
    uint64_t v10 = *(void *)(a1[7] + 8);
    long long v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    uint64_t v12 = [v6 updated];
    uint64_t v13 = *(void *)(a1[8] + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;

    uint64_t v15 = [v6 error];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();

    if (isKindOfClass)
    {
      uint64_t v17 = objc_opt_class();
      uint64_t v18 = [v6 error];
      uint64_t v19 = +[NSKeyedUnarchiver unarchivedObjectOfClass:v17 fromData:v18 error:0];
      uint64_t v20 = *(void *)(a1[6] + 8);
      id v21 = *(void **)(v20 + 40);
      *(void *)(v20 + 40) = v19;
    }
  }
}

void sub_10018A2E4(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018A328(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018A69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018A6C8(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018A70C(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018A750(void *a1)
{
  id v2 = +[CachedData fetchRequest];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"key = %@ AND application = %@ AND unique = %@", @"IDMSDeviceList", @"global", &stru_1002CE4C0];
  [v2 setPredicate:v3];

  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = *(void *)(a1[6] + 8);
  obuint64_t j = *(id *)(v5 + 40);
  id v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (![v6 count])
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C4398);
    }
    uint64_t v9 = qword_10032EE70;
    if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "storeIDMSDeviceList: new", buf, 2u);
    }
    uint64_t v8 = +[NSEntityDescription insertNewObjectForEntityForName:@"CachedData" inManagedObjectContext:a1[4]];
    [v8 setKey:@"IDMSDeviceList"];
    [v8 setApplication:@"global"];
    goto LABEL_13;
  }
  if (qword_10032EE68 != -1) {
    dispatch_once(&qword_10032EE68, &stru_1002C43B8);
  }
  uint64_t v7 = qword_10032EE70;
  if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "storeIDMSDeviceList: update", buf, 2u);
  }
  uint64_t v8 = [v6 firstObject];
  if (v8)
  {
LABEL_13:
    [v8 setUnique:&stru_1002CE4C0];
    [v8 setError:0];
    uint64_t v10 = +[NSDate date];
    [v8 setUpdated:v10];

    [v8 setData:a1[5]];
    long long v11 = (void *)a1[4];
    uint64_t v12 = *(void *)(a1[6] + 8);
    id v16 = *(id *)(v12 + 40);
    unsigned __int8 v13 = [v11 save:&v16];
    objc_storeStrong((id *)(v12 + 40), v16);
    if (v13)
    {
      *(unsigned char *)(*(void *)(a1[7] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
    else
    {
      if (qword_10032EE68 != -1) {
        dispatch_once(&qword_10032EE68, &stru_1002C43D8);
      }
      uint64_t v14 = qword_10032EE70;
      if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(*(void *)(a1[6] + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v19 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "storeIDMSDeviceList: save %@", buf, 0xCu);
      }
    }
  }
}

void sub_10018AA84(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018AAC8(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018AB0C(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018AB50(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018AD4C(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018AD90(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v26 = 0;
  uint64_t v4 = [v2 executeFetchRequest:v3 error:&v26];
  id v5 = v26;
  id v6 = [v4 firstObject];
  uint64_t v7 = v6;
  if (!v6)
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C4460);
    }
    id v22 = qword_10032EE70;
    if (!os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_INFO)) {
      goto LABEL_15;
    }
    *(_WORD *)buf = 0;
    id v23 = "fetchKTInfoForApplication: no cached data";
    goto LABEL_14;
  }
  uint64_t v8 = [v6 error];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    uint64_t v10 = objc_opt_class();
    long long v11 = [v7 error];
    uint64_t v12 = +[NSKeyedUnarchiver unarchivedObjectOfClass:v10 fromData:v11 error:0];

    id v5 = (id)v12;
  }
  unsigned __int8 v13 = [v7 data];

  if (!v13)
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C4480);
    }
    id v22 = qword_10032EE70;
    if (!os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_INFO)) {
      goto LABEL_15;
    }
    *(_WORD *)buf = 0;
    id v23 = "fetchKTInfoForApplication: no data";
LABEL_14:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, v23, buf, 2u);
LABEL_15:
    (*(void (**)(void))(a1[6] + 16))();
    goto LABEL_16;
  }
  uint64_t v14 = [v7 data];
  id v24 = v5;
  uint64_t v15 = +[TransparencyGPBMessage parseFromData:v14 error:&v24];
  id v16 = v24;

  uint64_t v17 = a1[6];
  uint64_t v18 = [v15 queryRequest];
  uint64_t v19 = [v15 queryResponse];
  uint64_t v20 = [v7 updated];
  id v21 = [v15 serverHint];
  (*(void (**)(uint64_t, void *, void *, void *, void *, id))(v17 + 16))(v17, v18, v19, v20, v21, v16);

  id v5 = v16;
LABEL_16:
}

void sub_10018B06C(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018B0B0(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018B46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_10018B498(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018B4DC(void *a1)
{
  id v2 = +[CachedData fetchRequest];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"key = %@ AND application = %@ AND unique = %@", @"QueryResponse", a1[4], a1[5]];
  [v2 setPredicate:v3];

  uint64_t v4 = (void *)a1[6];
  uint64_t v5 = *(void *)(a1[8] + 8);
  obuint64_t j = *(id *)(v5 + 40);
  id v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (![v6 count])
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C44C0);
    }
    uint64_t v9 = qword_10032EE70;
    if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "storeQueryResponse: new", buf, 2u);
    }
    uint64_t v8 = +[NSEntityDescription insertNewObjectForEntityForName:@"CachedData" inManagedObjectContext:a1[6]];
    [v8 setKey:@"QueryResponse"];
    [v8 setApplication:a1[4]];
    [v8 setUnique:a1[5]];
    goto LABEL_13;
  }
  if (qword_10032EE68 != -1) {
    dispatch_once(&qword_10032EE68, &stru_1002C44E0);
  }
  uint64_t v7 = qword_10032EE70;
  if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "storeQueryResponse: update", buf, 2u);
  }
  uint64_t v8 = [v6 firstObject];
  if (v8)
  {
LABEL_13:
    [v8 setError:0];
    uint64_t v10 = +[NSDate date];
    [v8 setUpdated:v10];

    [v8 setData:a1[7]];
    long long v11 = (void *)a1[6];
    uint64_t v12 = *(void *)(a1[8] + 8);
    id v16 = *(id *)(v12 + 40);
    unsigned __int8 v13 = [v11 save:&v16];
    objc_storeStrong((id *)(v12 + 40), v16);
    if (v13)
    {
      *(unsigned char *)(*(void *)(a1[9] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
    else
    {
      if (qword_10032EE68 != -1) {
        dispatch_once(&qword_10032EE68, &stru_1002C4500);
      }
      uint64_t v14 = qword_10032EE70;
      if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = *(void *)(*(void *)(a1[8] + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v19 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "storeQueryResponse: save %@", buf, 0xCu);
      }
    }
  }
}

void sub_10018B7FC(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018B840(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018B884(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018B8C8(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018BAE4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v7];
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [*(id *)(a1 + 40) jsonifyError:v5];
    }
    else {
    id v6 = [v5 description];
    }
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v7];
  }
}

void sub_10018BE1C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      [*(id *)(a1 + 40) errorFromJson:v5];
    }
    else {
    id v6 = [v5 description];
    }
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v7];
  }
}

void sub_10018C06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018C08C(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = [a2 mutableCopy];
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v3 forKeyedSubscript:*(void *)(a1 + 32)];
  }
}

void sub_10018C278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10018C29C(void *a1)
{
  id v2 = +[DeviceSignature fetchRequest];
  if (a1[4])
  {
    id v3 = +[NSPredicate predicateWithFormat:@"application IN %@", a1[4]];
    [v2 setPredicate:v3];
  }
  id v42 = 0;
  uint64_t v4 = [v2 execute:&v42];
  id v5 = v42;
  id v6 = v42;
  id v7 = v6;
  if (v4)
  {
    id v36 = v6;
    uint64_t v8 = +[NSMutableDictionary dictionary];
    uint64_t v9 = *(void *)(a1[7] + 8);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v37 = v4;
    id v11 = v4;
    id v12 = [v11 countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v39;
      do
      {
        for (unint64_t i = 0; i != v13; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v39 != v14) {
            objc_enumerationMutation(v11);
          }
          id v16 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          id v17 = objc_alloc((Class)TransparencyIDSRegistrationData);
          uint64_t v18 = [v16 application];
          uint64_t v19 = [v16 registrationData];
          id v20 = [v17 initWithApplication:v18 registrationData:v19];

          id v21 = [v16 signature];
          [v20 setSignature:v21];

          id v22 = [v16 publicKey];
          [v20 setPublicKey:v22];

          id v23 = [v16 pushToken];
          [v20 setPushToken:v23];

          id v24 = [v16 createdAt];
          [v20 setCreatedAt:v24];

          __int16 v25 = [v16 signedAt];
          [v20 setSignedAt:v25];

          id v26 = [v16 uploadedAt];
          [v20 setUploadedAt:v26];

          __int16 v27 = [v16 state];
          [v20 setState:v27];

          uint64_t v28 = [v16 currentItemPointerModificationTime];
          [v20 setOrderedTimestamp:v28];

          uint64_t v29 = (void *)a1[5];
          unsigned int v30 = [v16 error];
          id v31 = [v29 errorFromData:v30];
          [v20 setError:v31];

          long long v32 = [v16 altDSID];
          [v20 setAltDSID:v32];

          long long v33 = [v16 dsid];
          [v20 setDsid:v33];

          long long v34 = *(void **)(*(void *)(a1[7] + 8) + 40);
          long long v35 = [v16 application];
          [v34 setObject:v20 forKeyedSubscript:v35];
        }
        id v13 = [v11 countByEnumeratingWithState:&v38 objects:v43 count:16];
      }
      while (v13);
    }

    uint64_t v4 = v37;
    id v7 = v36;
  }
  else
  {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v5);
  }
}

void sub_10018C8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018C8E4(uint64_t a1)
{
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  id v31 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v31)
  {
    p_vtable = KTStateTransitionPathStep.vtable;
    uint64_t v30 = *(void *)v35;
    do
    {
      for (unint64_t i = 0; i != v31; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v30) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        id v5 = [v4 application];
        id v6 = [p_vtable + 322 fetchRequest];
        id v7 = +[NSPredicate predicateWithFormat:@"application = %@", v5];
        [v6 setPredicate:v7];

        id v33 = 0;
        uint64_t v8 = [v6 execute:&v33];
        id v9 = v33;
        if ([v8 count])
        {
          id v10 = [v8 firstObject];
        }
        else
        {
          id v10 = [objc_alloc((Class)(p_vtable + 322)) initWithContext:*(void *)(a1 + 40)];
          [v10 setApplication:v5];
          id v11 = +[NSDate date];
          [v10 setCreatedAt:v11];
        }
        id v12 = [v4 signature];

        if (v12)
        {
          id v13 = +[NSDate date];
          [v10 setSignedAt:v13];

          uint64_t v14 = [v4 signature];
          [v10 setSignature:v14];
        }
        uint64_t v15 = [v4 tbsKTIDSRegistrationData];
        [v10 setRegistrationData:v15];

        id v16 = [v4 publicKey];
        [v10 setPublicKey:v16];

        id v17 = [v4 pushToken];
        [v10 setPushToken:v17];

        uint64_t v18 = [v10 signature];

        if (v18) {
          CFStringRef v19 = @"done";
        }
        else {
          CFStringRef v19 = @"tbs";
        }
        [v10 setState:v19];
        id v20 = [v4 orderedTimestamp];
        [v10 setCurrentItemPointerModificationTime:v20];

        id v21 = [v4 altDSID];
        [v10 setAltDSID:v21];

        id v22 = [v4 dsid];
        [v10 setDsid:v22];

        id v23 = *(void **)(a1 + 48);
        id v24 = [v4 error];
        __int16 v25 = [v23 jsonifyError:v24];

        if (v25)
        {
          id v26 = +[NSJSONSerialization dataWithJSONObject:v25 options:0 error:0];
          [v10 setError:v26];
        }
        p_vtable = (void **)(KTStateTransitionPathStep + 24);
      }
      id v31 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    }
    while (v31);
  }

  if ([*(id *)(a1 + 40) hasChanges])
  {
    __int16 v27 = *(void **)(a1 + 40);
    uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8);
    id v32 = *(id *)(v28 + 40);
    [v27 save:&v32];
    objc_storeStrong((id *)(v28 + 40), v32);
  }
}

void sub_10018CE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018CE78(uint64_t a1)
{
  id v2 = +[DeviceSignature fetchRequest];
  id v3 = +[NSPredicate predicateWithFormat:@"pushToken = %@ AND registrationData = %@", *(void *)(a1 + 32), *(void *)(a1 + 40)];
  [v2 setPredicate:v3];

  id v30 = 0;
  uint64_t v4 = [v2 execute:&v30];
  id v5 = v30;
  id v6 = v5;
  if (!v4)
  {
    uint64_t v18 = (void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    id v20 = v5;
    goto LABEL_16;
  }
  id v23 = v5;
  id v24 = v2;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v26 objects:v33 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v27;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v27 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = *(void **)(*((void *)&v26 + 1) + 8 * (void)v11);
        if (qword_10032EE68 != -1) {
          dispatch_once(&qword_10032EE68, &stru_1002C4608);
        }
        id v13 = (void *)qword_10032EE70;
        if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = v13;
          uint64_t v15 = [v12 application];
          *(_DWORD *)buf = 138543362;
          id v32 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Marking record as uploaded for application %{public}@", buf, 0xCu);
        }
        [v12 setUploadedAt:*(void *)(a1 + 48)];
        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v26 objects:v33 count:16];
    }
    while (v9);
  }

  id v2 = v24;
  id v6 = v23;
  if ([*(id *)(a1 + 56) hasChanges])
  {
    id v16 = *(void **)(a1 + 56);
    uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8);
    CFStringRef v19 = *(void **)(v17 + 40);
    uint64_t v18 = (void **)(v17 + 40);
    __int16 v25 = v19;
    [v16 save:&v25];
    id v20 = v25;
LABEL_16:
    id v21 = v20;
    id v22 = *v18;
    *uint64_t v18 = v21;
  }
}

void sub_10018D0F4(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018D280(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018D4DC(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018D728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10018D754(uint64_t a1)
{
  [*(id *)(a1 + 32) _onQueueClearDeviceSignatureSignatures];
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 save:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
}

void sub_10018D7C4(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018DA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10018DAAC(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018DAF0(uint64_t a1)
{
  [*(id *)(a1 + 32) _onQueueClearDeviceSignatureSignatures];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = +[CachedData fetchRequest];
  [v2 delete:v3 onMOC:*(void *)(a1 + 40)];

  unsigned __int8 v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  obuint64_t j = *(id *)(v5 + 40);
  LOBYTE(v3) = [v4 save:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (_BYTE)v3;
}

void sub_10018DB8C(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018DC88(uint64_t a1)
{
  id v2 = +[NSEntityDescription insertNewObjectForEntityForName:@"CachedData" inManagedObjectContext:*(void *)(a1 + 32)];
  [v2 setKey:@"FixUps"];
  [v2 setApplication:*(void *)(a1 + 40)];
  uint64_t v3 = +[NSData data];
  [v2 setData:v3];

  uint64_t v4 = +[NSDate date];
  [v2 setUpdated:v4];

  uint64_t v5 = *(void **)(a1 + 32);
  id v8 = 0;
  LOBYTE(v4) = [v5 save:&v8];
  id v6 = v8;
  if ((v4 & 1) == 0)
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C4718);
    }
    id v7 = qword_10032EE70;
    if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "storeFixup: save %@", buf, 0xCu);
    }
  }
}

void sub_10018DE04(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018E05C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10018E074(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v7 = 0;
  id v4 = [v2 countForFetchRequest:v3 error:&v7];
  id v5 = v7;
  *(void *)(*(void *)(a1[6] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  if (*(void *)(*(void *)(a1[6] + 8) + 24) == 0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C4738);
    }
    id v6 = qword_10032EE70;
    if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "haveDoneFixup: countForFetchRequest %@", buf, 0xCu);
    }
  }
}

void sub_10018E190(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018E3A8(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018E3EC(uint64_t a1)
{
  id v2 = +[CachedData fetchRequest];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"key = %@ AND application = %@", @"SettingsDate", *(void *)(a1 + 32)];
  [v2 setPredicate:v3];

  id v4 = *(void **)(a1 + 48);
  if (*(void *)(a1 + 40))
  {
    id v17 = 0;
    id v5 = [v4 executeFetchRequest:v2 error:&v17];
    id v6 = v17;
    if ([v5 count])
    {
      id v7 = [v5 firstObject];
      if (!v7)
      {

        goto LABEL_20;
      }
    }
    else
    {
      id v7 = +[NSEntityDescription insertNewObjectForEntityForName:@"CachedData" inManagedObjectContext:*(void *)(a1 + 48)];
      [v7 setKey:@"SettingsDate"];
      [v7 setApplication:*(void *)(a1 + 32)];
    }
    [v7 setData:*(void *)(a1 + 56)];
    id v9 = +[NSDate date];
    [v7 setUpdated:v9];
  }
  else
  {
    id v22 = 0;
    id v8 = [v4 executeFetchRequest:v2 error:&v22];
    id v6 = v22;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v9 = v8;
    id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
    if (v7)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v9);
          }
          [*(id *)(a1 + 48) deleteObject:*(void *)(*((void *)&v18 + 1) + 8 * i)];
        }
        id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
      }
      while (v7);
    }
    id v5 = v9;
  }
  uint64_t v12 = v6;

  uint64_t v13 = *(void **)(a1 + 48);
  id v16 = v6;
  unsigned __int8 v14 = [v13 save:&v16];
  id v6 = v16;

  if ((v14 & 1) == 0)
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C4778);
    }
    uint64_t v15 = qword_10032EE70;
    if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "setSettingsDate: save %@", buf, 0xCu);
    }
  }
LABEL_20:
}

void sub_10018E6C8(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018E898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018E8B4(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v16 = 0;
  id v4 = [v2 executeFetchRequest:v3 error:&v16];
  id v5 = v16;
  id v6 = [v4 firstObject];
  id v7 = v6;
  if (v6 && ([v6 data], id v8 = objc_claimAutoreleasedReturnValue(), v8, v8))
  {
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = [v7 data];
    uint64_t v11 = +[NSKeyedUnarchiver unarchivedObjectOfClass:v9 fromData:v10 error:0];
    uint64_t v12 = *(void *)(a1[6] + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  else
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C4798);
    }
    unsigned __int8 v14 = qword_10032EE70;
    if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "getSettingsDate: no cached data", v15, 2u);
    }
  }
}

void sub_10018EA18(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018EB40(uint64_t a1)
{
  id v2 = +[CachedData fetchRequest];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"key = %@ AND application = %@", @"SettingsData", *(void *)(a1 + 32)];
  [v2 setPredicate:v3];

  id v4 = *(void **)(a1 + 48);
  if (*(void *)(a1 + 40))
  {
    id v17 = 0;
    id v5 = [v4 executeFetchRequest:v2 error:&v17];
    id v6 = v17;
    if ([v5 count])
    {
      id v7 = [v5 firstObject];
      if (!v7)
      {

        goto LABEL_20;
      }
    }
    else
    {
      id v7 = +[NSEntityDescription insertNewObjectForEntityForName:@"CachedData" inManagedObjectContext:*(void *)(a1 + 48)];
      [v7 setKey:@"SettingsData"];
      [v7 setApplication:*(void *)(a1 + 32)];
    }
    [v7 setData:*(void *)(a1 + 40)];
    id v9 = +[NSDate date];
    [v7 setUpdated:v9];
  }
  else
  {
    id v22 = 0;
    id v8 = [v4 executeFetchRequest:v2 error:&v22];
    id v6 = v22;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v9 = v8;
    id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
    if (v7)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v9);
          }
          [*(id *)(a1 + 48) deleteObject:*(void *)(*((void *)&v18 + 1) + 8 * i)];
        }
        id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
      }
      while (v7);
    }
    id v5 = v9;
  }
  uint64_t v12 = v6;

  uint64_t v13 = *(void **)(a1 + 48);
  id v16 = v6;
  unsigned __int8 v14 = [v13 save:&v16];
  id v6 = v16;

  if ((v14 & 1) == 0)
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C47E0);
    }
    uint64_t v15 = qword_10032EE70;
    if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "setSettingsData: save %@", buf, 0xCu);
    }
  }
LABEL_20:
}

void sub_10018EE1C(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018EFEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018F008(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v14 = 0;
  id v4 = [v2 executeFetchRequest:v3 error:&v14];
  id v5 = v14;
  id v6 = [v4 firstObject];
  id v7 = v6;
  if (v6 && ([v6 data], id v8 = objc_claimAutoreleasedReturnValue(), v8, v8))
  {
    uint64_t v9 = [v7 data];
    uint64_t v10 = *(void *)(a1[6] + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
  else
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C4800);
    }
    uint64_t v12 = qword_10032EE70;
    if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "getSettingsData: no cached data", v13, 2u);
    }
  }
}

void sub_10018F12C(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018F344(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018F388(uint64_t a1)
{
  id v2 = +[CachedData fetchRequest];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"key = %@ AND application = %@", @"SettingsNumber", *(void *)(a1 + 32)];
  [v2 setPredicate:v3];

  id v4 = *(void **)(a1 + 48);
  if (*(void *)(a1 + 40))
  {
    id v17 = 0;
    id v5 = [v4 executeFetchRequest:v2 error:&v17];
    id v6 = v17;
    if ([v5 count])
    {
      id v7 = [v5 firstObject];
      if (!v7)
      {

        goto LABEL_20;
      }
    }
    else
    {
      id v7 = +[NSEntityDescription insertNewObjectForEntityForName:@"CachedData" inManagedObjectContext:*(void *)(a1 + 48)];
      [v7 setKey:@"SettingsNumber"];
      [v7 setApplication:*(void *)(a1 + 32)];
    }
    [v7 setData:*(void *)(a1 + 56)];
    id v9 = +[NSDate date];
    [v7 setUpdated:v9];
  }
  else
  {
    id v22 = 0;
    id v8 = [v4 executeFetchRequest:v2 error:&v22];
    id v6 = v22;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v9 = v8;
    id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
    if (v7)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        for (unint64_t i = 0; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v9);
          }
          [*(id *)(a1 + 48) deleteObject:*(void *)(*((void *)&v18 + 1) + 8 * i)];
        }
        id v7 = [v9 countByEnumeratingWithState:&v18 objects:v25 count:16];
      }
      while (v7);
    }
    id v5 = v9;
  }
  uint64_t v12 = v6;

  uint64_t v13 = *(void **)(a1 + 48);
  id v16 = v6;
  unsigned __int8 v14 = [v13 save:&v16];
  id v6 = v16;

  if ((v14 & 1) == 0)
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C4840);
    }
    uint64_t v15 = qword_10032EE70;
    if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "setSettingsNumber: save %@", buf, 0xCu);
    }
  }
LABEL_20:
}

void sub_10018F664(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10018F834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10018F850(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v16 = 0;
  id v4 = [v2 executeFetchRequest:v3 error:&v16];
  id v5 = v16;
  id v6 = [v4 firstObject];
  id v7 = v6;
  if (v6 && ([v6 data], id v8 = objc_claimAutoreleasedReturnValue(), v8, v8))
  {
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = [v7 data];
    uint64_t v11 = +[NSKeyedUnarchiver unarchivedObjectOfClass:v9 fromData:v10 error:0];
    uint64_t v12 = *(void *)(a1[6] + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  else
  {
    if (qword_10032EE68 != -1) {
      dispatch_once(&qword_10032EE68, &stru_1002C4860);
    }
    unsigned __int8 v14 = qword_10032EE70;
    if (os_log_type_enabled((os_log_t)qword_10032EE70, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "getSettingsNumber: no cached data", v15, 2u);
    }
  }
}

void sub_10018F9B4(id a1)
{
  qword_10032EE70 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100190AE0(id a1)
{
  qword_10032EE80 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100190DE4(id a1)
{
  qword_10032EE80 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100191010(id a1)
{
  qword_10032EE80 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100191FF0(id a1)
{
  qword_10032EE80 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100192034(id a1)
{
  qword_10032EE80 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100192078(id a1)
{
  qword_10032EE80 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001920BC(id a1)
{
  qword_10032EE80 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100192574(id a1)
{
  qword_10032EE80 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001925B8(id a1)
{
  qword_10032EE80 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_100192A58(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 deviceIDHash];
  id v5 = [v3 deviceIdHash];

  id v6 = [v4 isEqualToData:v5];
  return v6;
}

BOOL sub_100194AE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) clientDataHash];
  id v5 = [v3 clientDataHash];
  if ([v4 isEqual:v5])
  {
    id v6 = [*(id *)(a1 + 32) applicationVersion];
    BOOL v7 = v6 == [v3 appVersion];
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

void sub_1001951D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001951FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v8 = WeakRetained;
  if (v6)
  {
    [WeakRetained setError:v6];
    id v9 = [v8 operationQueue];
    uint64_t v10 = [v8 finishedOp];
    [v9 addOperation:v10];
  }
  else
  {
    uint64_t v11 = [WeakRetained deps];
    uint64_t v12 = [v11 smDataStore];
    id v16 = 0;
    unsigned __int8 v13 = [v12 storeIDMSDeviceList:v5 error:&v16];
    id v9 = v16;

    if (v13)
    {
      unsigned __int8 v14 = [v8 intendedState];
      [v8 setNextState:v14];
    }
    else
    {
      [v8 setError:v9];
    }
    uint64_t v10 = [v8 operationQueue];
    uint64_t v15 = [v8 finishedOp];
    [v10 addOperation:v15];
  }
}

void sub_100195670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100195694(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained intendedState];
  [WeakRetained setNextState:v1];

  id v2 = [WeakRetained operationQueue];
  id v3 = [WeakRetained finishedOp];
  [v2 addOperation:v3];
}

void sub_100195EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100195ECC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100195EDC(uint64_t a1)
{
}

void sub_100195EE4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = [v2 fetchServerRpcById:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  if (v5) {
    [*(id *)(a1 + 32) deleteObject:v5];
  }
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  id v12 = *(id *)(v7 + 40);
  unsigned __int8 v8 = [v6 persistWithError:&v12];
  objc_storeStrong((id *)(v7 + 40), v12);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
  uint64_t v9 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_100195FC0(uint64_t a1)
{
  if (qword_10032EE88 != -1) {
    dispatch_once(&qword_10032EE88, &stru_1002C49F0);
  }
  id v2 = qword_10032EE90;
  if (os_log_type_enabled((os_log_t)qword_10032EE90, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to delete server rpc for UUID %@: %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_1001960A0(id a1)
{
  qword_10032EE90 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019652C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100196550(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  obuint64_t j = *(id *)(v4 + 40);
  int v5 = [v2 fetchServerRpcById:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(a1[7] + 8) + 40)];
  uint64_t v7 = *(void *)(a1[7] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v5)
  {
    uint64_t v9 = [v5 rpcId];
    unsigned int v10 = [v9 isEqual:a1[5]];

    if (v10)
    {
      (*(void (**)(void))(a1[6] + 16))();
      *(unsigned char *)(*(void *)(a1[8] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
  else
  {
    uint64_t v11 = +[TransparencyError errorWithDomain:kTransparencyErrorDatabase, -330, @"no server rpc found for %@", a1[5] code description];
    uint64_t v12 = *(void *)(a1[7] + 8);
    unsigned __int8 v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    if (qword_10032EE88 != -1) {
      dispatch_once(&qword_10032EE88, &stru_1002C4A10);
    }
    unsigned __int8 v14 = qword_10032EE90;
    if (os_log_type_enabled((os_log_t)qword_10032EE90, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = a1[5];
      *(_DWORD *)buf = 138543362;
      uint64_t v18 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "no server rpc found for rpcId %{public}@", buf, 0xCu);
    }
  }
}

void sub_100196720(id a1)
{
  qword_10032EE90 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001968DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001968F4(void *a1, void *a2)
{
  id v3 = a2;
  [v3 setState:0];
  [v3 setFailure:a1[4]];
  if (qword_10032EE88 != -1) {
    dispatch_once(&qword_10032EE88, &stru_1002C4A58);
  }
  uint64_t v4 = (void *)qword_10032EE90;
  if (os_log_type_enabled((os_log_t)qword_10032EE90, OS_LOG_TYPE_ERROR))
  {
    int v5 = v4;
    uint64_t v6 = [v3 rpcId];
    id v7 = [v3 rpcType];
    uint64_t v8 = a1[4];
    *(_DWORD *)buf = 138412802;
    unsigned __int8 v13 = v6;
    __int16 v14 = 2048;
    id v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "ServerRPC failed. rpcId: %@, rpcType: %lld -- %@", buf, 0x20u);
  }
  uint64_t v9 = (void *)a1[5];
  uint64_t v10 = *(void *)(a1[6] + 8);
  obuint64_t j = *(id *)(v10 + 40);
  [v9 persistWithError:&obj];
  objc_storeStrong((id *)(v10 + 40), obj);
}

void sub_100196A4C(id a1)
{
  qword_10032EE90 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100196C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100196C84(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setResponse:*(void *)(a1 + 32)];
  [v3 setResponseStatus:[*(id *)(a1 + 40) integerValue]];
  [v3 setUsedReversePush:*(unsigned __int8 *)(a1 + 72)];
  [v3 setServerHint:*(void *)(a1 + 48)];
  uint64_t v4 = +[NSDate now];
  [v3 setResponseTime:v4];

  if (([*(id *)(a1 + 40) isEqualToNumber:&off_1002D9CF0] & 1) != 0
    || [*(id *)(a1 + 40) isEqualToNumber:&off_1002D9D08])
  {
    [v3 setState:1];
    if (qword_10032EE88 != -1) {
      dispatch_once(&qword_10032EE88, &stru_1002C4AA0);
    }
    int v5 = (void *)qword_10032EE90;
    if (os_log_type_enabled((os_log_t)qword_10032EE90, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = v5;
      id v7 = [v3 rpcId];
      *(_DWORD *)buf = 138412546;
      id v15 = v7;
      __int16 v16 = 2048;
      id v17 = [v3 rpcType];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ServerRPC succeeded. rpcId: %@, rpcType: %lld", buf, 0x16u);

LABEL_11:
    }
  }
  else
  {
    [v3 setState:0];
    if (qword_10032EE88 != -1) {
      dispatch_once(&qword_10032EE88, &stru_1002C4AC0);
    }
    uint64_t v8 = (void *)qword_10032EE90;
    if (os_log_type_enabled((os_log_t)qword_10032EE90, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v8;
      id v9 = [v3 responseStatus];
      uint64_t v10 = [v3 rpcId];
      *(_DWORD *)buf = 134218498;
      id v15 = v9;
      __int16 v16 = 2112;
      id v17 = v10;
      __int16 v18 = 2048;
      id v19 = [v3 rpcType];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "ServerRPC failed. responseStatus: %lld, rpcId: %@, rpcType: %lld", buf, 0x20u);

      goto LABEL_11;
    }
  }
  uint64_t v11 = *(void **)(a1 + 56);
  uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8);
  obuint64_t j = *(id *)(v12 + 40);
  [v11 persistWithError:&obj];
  objc_storeStrong((id *)(v12 + 40), obj);
}

void sub_100196F18(id a1)
{
  qword_10032EE90 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100196F5C(id a1)
{
  qword_10032EE90 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001971D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001971F0(id a1)
{
  qword_10032EE90 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100197234(uint64_t a1)
{
  id v2 = +[NSFetchRequest fetchRequestWithEntityName:@"RPCSingleQuery"];
  id v3 = +[NSPredicate predicateWithFormat:@"uri == %@ && application == %@ && requestTime > %@ && state == %@", *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), &off_1002D9D20];
  [v2 setPredicate:v3];

  uint64_t v4 = +[NSSortDescriptor sortDescriptorWithKey:@"requestTime" ascending:0];
  uint64_t v12 = v4;
  int v5 = +[NSArray arrayWithObjects:&v12 count:1];
  [v2 setSortDescriptors:v5];

  [v2 setResultType:2];
  [v2 setFetchLimit:1];
  [v2 setPropertiesToFetch:&off_1002DA4F8];
  uint64_t v6 = [*(id *)(a1 + 56) context];
  id v7 = [v6 executeFetchRequest:v2 error:*(void *)(a1 + 72)];

  +[TransparencyManagedDataStore cleanseError:*(void *)(a1 + 72)];
  if (v7 && [v7 count])
  {
    uint64_t v8 = [v7 objectAtIndexedSubscript:0];
    uint64_t v9 = [v8 objectForKeyedSubscript:@"rpcId"];
    uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;
  }
}

void sub_10019756C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100197584(uint64_t a1)
{
  id v2 = +[NSFetchRequest fetchRequestWithEntityName:@"RPCBatchQuery"];
  id v3 = +[NSPredicate predicateWithFormat:@"application == %@ && requestTime > %@ && state == %@", *(void *)(a1 + 32), *(void *)(a1 + 40), &off_1002D9D20];
  [v2 setPredicate:v3];

  uint64_t v4 = +[NSSortDescriptor sortDescriptorWithKey:@"requestTime" ascending:0];
  id v23 = v4;
  int v5 = +[NSArray arrayWithObjects:&v23 count:1];
  [v2 setSortDescriptors:v5];

  [v2 setResultType:2];
  [v2 setPropertiesToFetch:&off_1002DA510];
  uint64_t v6 = [*(id *)(a1 + 48) context];
  id v7 = [v6 executeFetchRequest:v2 error:*(void *)(a1 + 72)];

  +[TransparencyManagedDataStore cleanseError:*(void *)(a1 + 72)];
  if (v7 && [v7 count])
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v8 = v7;
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v19;
      while (2)
      {
        for (unint64_t i = 0; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v8);
          }
          unsigned __int8 v13 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          __int16 v14 = [v13 objectForKeyedSubscript:@"uris"];
          if ([v14 containsObject:*(void *)(a1 + 56)])
          {
            uint64_t v15 = [v13 objectForKeyedSubscript:@"rpcId"];
            uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8);
            id v17 = *(void **)(v16 + 40);
            *(void *)(v16 + 40) = v15;

            goto LABEL_13;
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
LABEL_13:
  }
}

void sub_100197A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100197A74(uint64_t a1)
{
  id v2 = +[NSFetchRequest fetchRequestWithEntityName:@"RPCSingleQuery"];
  [*(id *)(a1 + 32) serverRPCTimeoutSeconds];
  uint64_t v4 = +[NSDate dateWithTimeIntervalSinceNow:-v3];
  int v5 = +[NSPredicate predicateWithFormat:@"uri == %@ && application == %@ && state == %@ && requestTime > %@", *(void *)(a1 + 40), *(void *)(a1 + 48), &off_1002D9D38, v4];
  [v2 setPredicate:v5];

  [v2 setResultType:4];
  uint64_t v6 = [*(id *)(a1 + 32) context];
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
  obuint64_t j = *(id *)(v7 + 40);
  id v8 = [v6 countForFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v7 + 40), obj);
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;

  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
  id v10 = *(id *)(v9 + 40);
  +[TransparencyManagedDataStore cleanseError:&v10];
  objc_storeStrong((id *)(v9 + 40), v10);
}

void sub_100197BB8(id a1)
{
  qword_10032EE90 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100197E10(id a1)
{
  qword_10032EE90 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100197E54(id a1)
{
  qword_10032EE90 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100197F84(id a1)
{
  qword_10032EE90 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019814C(id a1)
{
  qword_10032EE90 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id QueryRequest_Version_RawValue(uint64_t a1)
{
  id v2 = [[+[QueryRequest descriptor](QueryRequest) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetQueryRequest_Version_RawValue(void *a1, int a2)
{
  id v4 = [[+[QueryRequest descriptor](QueryRequest) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id QueryRequest_Application_RawValue(uint64_t a1)
{
  id v2 = [[+[QueryRequest descriptor](QueryRequest) fieldWithNumber:2];

  return sub_100168F00(a1, v2);
}

id SetQueryRequest_Application_RawValue(void *a1, int a2)
{
  id v4 = [[+[QueryRequest descriptor](QueryRequest) fieldWithNumber:2];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id QueryResponse_Status_RawValue(uint64_t a1)
{
  id v2 = [[+[QueryResponse descriptor](QueryResponse) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetQueryResponse_Status_RawValue(void *a1, int a2)
{
  id v4 = [[+[QueryResponse descriptor](QueryResponse) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id BatchQueryRequest_Version_RawValue(uint64_t a1)
{
  id v2 = [[+[BatchQueryRequest descriptor](BatchQueryRequest) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetBatchQueryRequest_Version_RawValue(void *a1, int a2)
{
  id v4 = [[+[BatchQueryRequest descriptor](BatchQueryRequest) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id BatchQueryRequest_Application_RawValue(uint64_t a1)
{
  id v2 = [[+[BatchQueryRequest descriptor](BatchQueryRequest) fieldWithNumber:2];

  return sub_100168F00(a1, v2);
}

id SetBatchQueryRequest_Application_RawValue(void *a1, int a2)
{
  id v4 = [[+[BatchQueryRequest descriptor](BatchQueryRequest) fieldWithNumber:2];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id BatchQueryResponse_Status_RawValue(uint64_t a1)
{
  id v2 = [[+[BatchQueryResponse descriptor](BatchQueryResponse) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetBatchQueryResponse_Status_RawValue(void *a1, int a2)
{
  id v4 = [[+[BatchQueryResponse descriptor](BatchQueryResponse) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

id BatchQueryInfo_Status_RawValue(uint64_t a1)
{
  id v2 = [[+[BatchQueryInfo descriptor](BatchQueryInfo) fieldWithNumber:1];

  return sub_100168F00(a1, v2);
}

id SetBatchQueryInfo_Status_RawValue(void *a1, int a2)
{
  id v4 = [[+[BatchQueryInfo descriptor](BatchQueryInfo) fieldWithNumber:1];

  return sub_100168F04(a1, (uint64_t)v4, a2);
}

void sub_100198908(id a1)
{
  uint64_t v1 = xpc_transaction_exit_clean();

  _xpc_transaction_try_exit_clean(v1);
}

id sub_100198CDC(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Received signal SIGTERM. Will terminate when clean.", v3, 2u);
  }
  return [*(id *)(a1 + 32) signalEventHander];
}

uint64_t sub_100198E74(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100199868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_1001998BC(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100199900(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100199944(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = [*(id *)(a1 + 32) deps];
    id v8 = [v7 logger];
    [v8 logResultForEvent:@"KTEnrollFetch" hardFailure:1 result:v6];

    [*(id *)(a1 + 32) setError:v6];
  }
  else
  {
    if (qword_10032EEF0 != -1) {
      dispatch_once(&qword_10032EEF0, &stru_1002C4C98);
    }
    uint64_t v9 = &qword_10032CE48[567];
    id v10 = (void *)qword_10032EEF8;
    if (os_log_type_enabled((os_log_t)qword_10032EEF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = v10;
      *(_DWORD *)buf = 67109120;
      LODWORD(v99) = [v5 count];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Processing %d registrations requests", buf, 8u);
    }
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    id v77 = v5;
    id v12 = v5;
    id v85 = [v12 countByEnumeratingWithState:&v94 objects:v102 count:16];
    if (v85)
    {
      uint64_t v84 = *(void *)v95;
      id v82 = v12;
      do
      {
        unsigned __int8 v13 = 0;
        do
        {
          if (*(void *)v95 != v84) {
            objc_enumerationMutation(v12);
          }
          uint64_t v14 = *(void **)(*((void *)&v94 + 1) + 8 * (void)v13);
          uint64_t v15 = [v12 objectForKeyedSubscript:v14];
          uint64_t v16 = [v15 tbsKTIDSRegistrationData];

          if (v16)
          {
            id v17 = [v15 pushToken];

            if (v17)
            {
              if (qword_10032EEF0 != -1) {
                dispatch_once(&qword_10032EEF0, &stru_1002C4CD8);
              }
              long long v18 = v9[479];
              if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
              {
                long long v19 = v18;
                long long v20 = [v15 pushToken];
                long long v21 = [v20 kt_hexString];
                *(_DWORD *)buf = 138412290;
                uint64_t v99 = v21;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Adding device to set: %@", buf, 0xCu);
              }
              id v22 = *(void **)(a1 + 40);
              id v23 = [v15 pushToken];
              id v24 = [v15 tbsKTIDSRegistrationData];
              id v17 = [v22 addDevice:v23 registationData:v24 app:v14];
            }
            __int16 v25 = [*(id *)(a1 + 32) deps];
            long long v26 = [v25 accountKeyService];
            long long v27 = [v15 application];
            long long v28 = [v26 accountKeyService:v27];

            if (v28)
            {
              id v93 = 0;
              char v83 = v28;
              long long v29 = [v28 publicPublicKey:&v93];
              id v30 = v93;
              id v31 = v30;
              if (v29)
              {
                id v81 = v30;
                id v32 = [*(id *)(a1 + 32) idsRegistrationInterface];
                unsigned int v33 = [v32 isKTKeyDifferent:v29];

                if (v33)
                {
                  if (qword_10032EEF0 != -1) {
                    dispatch_once(&qword_10032EEF0, &stru_1002C4D38);
                  }
                  long long v34 = v9[479];
                  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "isKTKeyDifferent, forcing update", buf, 2u);
                  }
                  [*(id *)(a1 + 32) setForceUpdate:1];
                }
                long long v35 = [*(id *)(a1 + 32) deps];
                long long v36 = [v35 accountKeyService];
                long long v37 = [v15 validateSignature:v36 withPublicKey:v29];

                if (v37)
                {
                  if (qword_10032EEF0 != -1) {
                    dispatch_once(&qword_10032EEF0, &stru_1002C4D58);
                  }
                  long long v38 = v83;
                  long long v39 = v9[479];
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                  {
                    long long v40 = v39;
                    long long v41 = [v15 application];
                    *(_DWORD *)buf = 138412546;
                    uint64_t v99 = v41;
                    __int16 v100 = 2112;
                    char v101 = v37;
                    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Performing signing of data in %@ for reason: %@", buf, 0x16u);
                  }
                  id v42 = [v15 tbsKTIDSRegistrationData];
                  v86[0] = _NSConcreteStackBlock;
                  v86[1] = 3221225472;
                  v86[2] = sub_10019A614;
                  v86[3] = &unk_1002C4DC0;
                  v86[4] = *(void *)(a1 + 32);
                  id v87 = v15;
                  id v88 = *(id *)(a1 + 48);
                  id v89 = *(id *)(a1 + 56);
                  id v90 = *(id *)(a1 + 64);
                  id v43 = v17;
                  uint64_t v44 = *(void *)(a1 + 72);
                  id v91 = v43;
                  uint64_t v92 = v44;
                  [v83 signData:v42 completionBlock:v86];
                }
                else
                {
                  uint64_t v61 = *(void **)(a1 + 32);
                  id v62 = [v15 application];
                  [v61 recordKeyState:1 application:v62];

                  [v17 markedSigned];
                  uint64_t v63 = [v15 pushToken];
                  if (v63)
                  {
                    id v64 = (void *)v63;
                    os_log_type_t v79 = [*(id *)(a1 + 32) deps];
                    id v65 = [v79 cloudRecords];
                    [v15 pushToken];
                    uint64_t v66 = v80 = v29;
                    unint64_t v67 = [v15 tbsKTIDSRegistrationData];
                    unsigned int v78 = [v65 cloudDeviceNeedUpdateWithPushToken:v66 tbsRegistrationData:v67];

                    long long v29 = v80;
                    if (v78)
                    {
                      if (qword_10032EEF0 != -1) {
                        dispatch_once(&qword_10032EEF0, &stru_1002C4DE0);
                      }
                      unint64_t v68 = (void *)qword_10032EEF8;
                      if (os_log_type_enabled((os_log_t)qword_10032EEF8, OS_LOG_TYPE_INFO))
                      {
                        uint64_t v69 = v68;
                        uint64_t v70 = [v15 pushToken];
                        uint64_t v71 = [v70 kt_hexString];
                        *(_DWORD *)buf = 138412546;
                        uint64_t v99 = v14;
                        __int16 v100 = 2112;
                        char v101 = v71;
                        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_INFO, "Service (%@) need update %@", buf, 0x16u);
                      }
                      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
                    }
                  }
                  uint64_t v72 = [v15 uploadedAt];

                  uint64_t v73 = [*(id *)(a1 + 32) deps];
                  char v74 = [v73 logger];
                  char v75 = +[NSString stringWithFormat:@"TBS-%@-%@", @"c", v14];
                  if (v72) {
                    uint64_t v76 = &off_1002D9D50;
                  }
                  else {
                    uint64_t v76 = &off_1002D9D68;
                  }
                  [v74 setNumberProperty:v76 forKey:v75];

                  uint64_t v9 = qword_10032CE48 + 4536;
                  long long v38 = v83;
                }
                uint64_t v59 = v81;
              }
              else
              {
                if (qword_10032EEF0 != -1) {
                  dispatch_once(&qword_10032EEF0, &stru_1002C4D18);
                }
                long long v38 = v83;
                id v54 = v9[479];
                if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v99 = v31;
                  _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_ERROR, "publicPublicKey failed: %@", buf, 0xCu);
                }
                [v15 setError:v31];
                [*(id *)(a1 + 48) addObject:v15];
                [*(id *)(a1 + 32) setError:v31];
                id v55 = [*(id *)(a1 + 32) deps];
                uint64_t v56 = [v55 lockStateTracker];
                [v56 isLockedError:v31];

                unint64_t v57 = *(void **)(a1 + 32);
                uint64_t v58 = [v15 application];
                [v57 recordKeyState:3 application:v58];

                uint64_t v59 = v31;
                long long v37 = [*(id *)(a1 + 32) deps];
                uint64_t v60 = [v37 logger];
                [v60 logResultForEvent:@"KTValidateEnrollPublicKey" hardFailure:1 result:v59];
              }
              id v12 = v82;
            }
            else
            {
              long long v49 = *(void **)(a1 + 32);
              __int16 v50 = [v15 application];
              [v49 recordKeyState:2 application:v50];

              if (qword_10032EEF0 != -1) {
                dispatch_once(&qword_10032EEF0, &stru_1002C4CF8);
              }
              id v12 = v82;
              long long v38 = 0;
              CFStringRef v51 = v9[479];
              if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
              {
                long long v52 = v51;
                CFStringRef v53 = [v15 application];
                *(_DWORD *)buf = 138412290;
                uint64_t v99 = v53;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "No key server for %@", buf, 0xCu);
              }
            }
          }
          else
          {
            if (qword_10032EEF0 != -1) {
              dispatch_once(&qword_10032EEF0, &stru_1002C4CB8);
            }
            uint64_t v45 = v9[479];
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            {
              __int16 v46 = v45;
              uint64_t v47 = [v15 application];
              *(_DWORD *)buf = 138412290;
              uint64_t v99 = v47;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "No registration data for %@", buf, 0xCu);
            }
            __int16 v48 = *(void **)(a1 + 32);
            id v17 = [v15 application];
            [v48 recordKeyState:5 application:v17];
          }

          unsigned __int8 v13 = (char *)v13 + 1;
        }
        while (v85 != v13);
        id v85 = [v12 countByEnumeratingWithState:&v94 objects:v102 count:16];
      }
      while (v85);
    }

    id v6 = 0;
    id v5 = v77;
  }
}

void sub_10019A438(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019A47C(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019A4C0(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019A504(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019A548(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019A58C(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019A5D0(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019A614(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v12)
  {
    if (qword_10032EEF0 != -1) {
      dispatch_once(&qword_10032EEF0, &stru_1002C4D78);
    }
    unsigned __int8 v13 = qword_10032EEF8;
    if (os_log_type_enabled((os_log_t)qword_10032EEF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v30 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "signData failed: %@", buf, 0xCu);
    }
    [*(id *)(a1 + 32) setError:v12];
    [*(id *)(a1 + 40) setError:v12];
    [*(id *)(a1 + 48) addObject:*(void *)(a1 + 40)];
    uint64_t v14 = *(void **)(a1 + 32);
    uint64_t v15 = [*(id *)(a1 + 40) application];
    [v14 recordKeyState:6 application:v15];

    uint64_t v16 = [*(id *)(a1 + 32) deps];
    id v17 = [v16 logger];
    [v17 logResultForEvent:@"KTEnrollSign" hardFailure:1 result:v12];
  }
  else
  {
    [*(id *)(a1 + 40) setSignature:v10];
    [*(id *)(a1 + 40) setPublicKey:v9];
    [*(id *)(a1 + 40) setOrderedTimestamp:v11];
    [*(id *)(a1 + 40) setDsid:*(void *)(a1 + 56)];
    [*(id *)(a1 + 40) setAltDSID:*(void *)(a1 + 64)];
    if (qword_10032EEF0 != -1) {
      dispatch_once(&qword_10032EEF0, &stru_1002C4D98);
    }
    long long v18 = (void *)qword_10032EEF8;
    if (os_log_type_enabled((os_log_t)qword_10032EEF8, OS_LOG_TYPE_INFO))
    {
      long long v19 = *(void **)(a1 + 40);
      log = v18;
      [v19 application];
      long long v20 = v28 = v10;
      long long v26 = [v9 kt_hexString];
      long long v21 = [*(id *)(a1 + 40) pushToken];
      id v22 = [v21 kt_hexString];
      id v23 = [*(id *)(a1 + 40) tbsKTIDSRegistrationData];
      id v24 = [v23 kt_hexString];
      *(_DWORD *)buf = 138413058;
      id v30 = v20;
      __int16 v31 = 2112;
      id v32 = v26;
      __int16 v33 = 2112;
      long long v34 = v22;
      __int16 v35 = 2112;
      long long v36 = v24;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "New signature for: %@ with key: %@. Push token %@, TBS %@", buf, 0x2Au);

      id v10 = v28;
    }
    [*(id *)(a1 + 48) addObject:*(void *)(a1 + 40)];
    [*(id *)(a1 + 72) markedSigned];
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    __int16 v25 = *(void **)(a1 + 32);
    uint64_t v16 = [*(id *)(a1 + 40) application];
    [v25 recordKeyState:1 application:v16];
  }
}

void sub_10019A960(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019A9A4(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019A9E8(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019AA2C(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019AA70(uint64_t a1, void *a2)
{
  double v3 = *(void **)(a1 + 32);
  id v6 = a2;
  id v4 = [v3 deps];
  id v5 = [v4 logger];
  [v5 logResultForEvent:@"KTEnrollStore" hardFailure:1 result:v6];

  [*(id *)(a1 + 32) setError:v6];
}

void sub_10019AB04(id a1)
{
  qword_10032EEF8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019AB48(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) signatureTracker];
  double v3 = [v2 signaturesComplete];
  [v3 fulfill];

  id v4 = [*(id *)(a1 + 32) signatureTracker];
  LODWORD(v3) = [v4 shouldPokeIDSUponSigning];

  if (v3)
  {
    id v5 = [*(id *)(a1 + 32) idsRegistrationInterface];
    [v5 triggerRegistrationDataNeedsUpdate:@"updated"];
  }
}

void sub_10019B04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10019B078(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019B0BC(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Retrying CK account state fetch", v4, 2u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = [WeakRetained notifyCKAccountStatusChange:0];
}

void sub_10019B450(id *a1)
{
  id v2 = [a1[4] ckChangeListeners];
  id v3 = [v2 objectEnumerator];

  uint64_t v4 = [v3 nextObject];
  if (v4)
  {
    id v5 = (id)v4;
    char v6 = 0;
    do
    {
      v6 |= v5 == a1[5];
      uint64_t v7 = [v3 nextObject];

      id v5 = (id)v7;
    }
    while (v7);
  }
  else
  {
    char v6 = 0;
  }
  if (a1[5] && (v6 & 1) == 0)
  {
    id v8 = +[NSString stringWithFormat:@"ck-account-state-%@", a1[5]];
    id v9 = (const char *)[v8 UTF8String];
    id v10 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    dispatch_queue_t v11 = dispatch_queue_create(v9, v10);

    id v12 = [a1[4] ckChangeListeners];
    [v12 setObject:a1[5] forKey:v11];

    if (qword_10032EF00 != -1) {
      dispatch_once(&qword_10032EF00, &stru_1002C4E88);
    }
    unsigned __int8 v13 = qword_10032EF08;
    if (os_log_type_enabled((os_log_t)qword_10032EF08, OS_LOG_TYPE_INFO))
    {
      id v14 = a1[5];
      *(_DWORD *)buf = 138412290;
      id v27 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "adding a new listener: %@", buf, 0xCu);
    }
    if ([a1[4] firstCKAccountFetch])
    {
      if (qword_10032EF00 != -1) {
        dispatch_once(&qword_10032EF00, &stru_1002C4EA8);
      }
      uint64_t v15 = (void *)qword_10032EF08;
      if (os_log_type_enabled((os_log_t)qword_10032EF08, OS_LOG_TYPE_INFO))
      {
        id v16 = a1[4];
        id v17 = a1[5];
        long long v18 = v15;
        long long v19 = [v16 currentCKAccountInfo];
        *(_DWORD *)buf = 138412546;
        id v27 = v17;
        __int16 v28 = 2112;
        long long v29 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "notifying new listener %@ of current state %@", buf, 0x16u);
      }
      dispatch_group_t v20 = dispatch_group_create();
      if (v20)
      {
        long long v21 = v20;
        [a1[4] _onqueueDeliverCurrentCloudKitState:a1[5] listenerQueue:v11 oldStatus:0 group:v20];
        id v22 = [a1[4] queue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10019B8C0;
        block[3] = &unk_1002B6CF8;
        id v25 = a1[6];
        dispatch_group_notify(v21, v22, block);

LABEL_25:
        goto LABEL_26;
      }
      if (qword_10032EF00 != -1) {
        dispatch_once(&qword_10032EF00, &stru_1002C4EC8);
      }
      id v23 = qword_10032EF08;
      if (os_log_type_enabled((os_log_t)qword_10032EF08, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Unable to get dispatch group.", buf, 2u);
      }
    }
    dispatch_semaphore_signal((dispatch_semaphore_t)a1[6]);
    goto LABEL_25;
  }
  dispatch_semaphore_signal((dispatch_semaphore_t)a1[6]);
LABEL_26:
}

void sub_10019B7F4(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019B838(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019B87C(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

intptr_t sub_10019B8C0(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10019BAC4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_10019BAF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v8 = WeakRetained;
  if (v6)
  {
    if (qword_10032EF00 != -1) {
      dispatch_once(&qword_10032EF00, &stru_1002C4EE8);
    }
    id v9 = (void *)qword_10032EF08;
    if (os_log_type_enabled((os_log_t)qword_10032EF08, OS_LOG_TYPE_INFO))
    {
      id v10 = v9;
      dispatch_queue_t v11 = [v8 container];
      id v12 = [v11 options];
      unsigned __int8 v13 = [v12 accountOverrideInfo];
      id v14 = [v13 altDSID];
      *(_DWORD *)buf = 138412546;
      long long v21 = v14;
      __int16 v22 = 2112;
      id v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "error getting account info(altDSID: %@): %@", buf, 0x16u);
    }
    uint64_t v15 = [v8 fetchCKAccountStatusScheduler];
    [v15 trigger];

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }
  else
  {
    id v16 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10019BD58;
    block[3] = &unk_1002B9DD0;
    void block[4] = v8;
    id v18 = v5;
    id v19 = *(id *)(a1 + 32);
    dispatch_async(v16, block);
  }
}

void sub_10019BD14(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10019BD58(uint64_t a1)
{
  [*(id *)(a1 + 32) setFirstCKAccountFetch:1];
  if (qword_10032EF00 != -1) {
    dispatch_once(&qword_10032EF00, &stru_1002C4F08);
  }
  id v2 = (void *)qword_10032EF08;
  if (os_log_type_enabled((os_log_t)qword_10032EF08, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = v2;
    id v5 = [v3 container];
    id v6 = [v5 options];
    uint64_t v7 = [v6 accountOverrideInfo];
    id v8 = [v7 altDSID];
    uint64_t v9 = *(void *)(a1 + 40);
    int v11 = 138412546;
    id v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "received CK Account info(altDSID: %@): %@", (uint8_t *)&v11, 0x16u);
  }
  return [*(id *)(a1 + 32) _onqueueUpdateAccountState:*(void *)(a1 + 40) deliveredSemaphore:*(void *)(a1 + 48)];
}

void sub_10019BEAC(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019BEF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (v3)
  {
    if (qword_10032EF00 != -1) {
      dispatch_once(&qword_10032EF00, &stru_1002C4F50);
    }
    id v6 = (void *)qword_10032EF08;
    if (os_log_type_enabled((os_log_t)qword_10032EF08, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = v6;
      id v8 = [v5 container];
      uint64_t v9 = [v8 options];
      id v10 = [v9 accountOverrideInfo];
      int v11 = [v10 altDSID];
      int v14 = 138412546;
      uint64_t v15 = v11;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "error reloading account info(altDSID: %@): %@", (uint8_t *)&v14, 0x16u);
    }
    id v12 = [v5 fetchCKAccountStatusScheduler];
    [v12 trigger];

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  }
  else
  {
    __int16 v13 = [WeakRetained container];
    [v13 accountInfoWithCompletionHandler:*(void *)(a1 + 40)];
  }
}

void sub_10019C08C(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019C240(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

intptr_t sub_10019C284(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10019C5A0(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019C5E4(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019C85C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) currentCKAccountInfo];
  [WeakRetained cloudkitAccountStateChange:v2 to:v3];
}

void sub_10019CAD8(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019CB1C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) ckChangeListeners];
  id v3 = [v2 keyEnumerator];

  uint64_t v4 = [v3 nextObject];
  if (v4)
  {
    id v6 = v4;
    *(void *)&long long v5 = 138412290;
    long long v12 = v5;
    do
    {
      uint64_t v7 = [*(id *)(a1 + 32) ckChangeListeners:v12];
      id v8 = [v7 objectForKey:v6];

      if (qword_10032EF00 != -1) {
        dispatch_once(&qword_10032EF00, &stru_1002C5018);
      }
      uint64_t v9 = qword_10032EF08;
      if (os_log_type_enabled((os_log_t)qword_10032EF08, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = v12;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Starting blocking for listener %@", buf, 0xCu);
      }
      *(void *)buf = 0;
      objc_initWeak((id *)buf, v8);
      id v10 = *(NSObject **)(a1 + 40);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10019CD60;
      block[3] = &unk_1002B72D8;
      objc_copyWeak(&v14, (id *)buf);
      dispatch_group_async(v10, v6, block);
      objc_destroyWeak(&v14);
      objc_destroyWeak((id *)buf);

      uint64_t v11 = [v3 nextObject];

      id v6 = v11;
    }
    while (v11);
  }
}

void sub_10019CD1C(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019CD60(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_10032EF00 != -1) {
    dispatch_once(&qword_10032EF00, &stru_1002C5038);
  }
  uint64_t v2 = qword_10032EF08;
  if (os_log_type_enabled((os_log_t)qword_10032EF08, OS_LOG_TYPE_INFO))
  {
    int v3 = 138412290;
    id v4 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Done blocking for listener %@", (uint8_t *)&v3, 0xCu);
  }
}

void sub_10019CE34(id a1)
{
  qword_10032EF08 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

unint64_t sub_10019D370(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    id result = 0;
    do
    {
      ++result;
      BOOL v2 = v1 > 0xFF;
      v1 >>= 8;
    }
    while (v2);
  }
  return result;
}

unsigned __int8 *sub_10019D394(unint64_t a1, unsigned __int8 *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v4 = 0;
  if (a1)
  {
    do
    {
      ++v4;
      BOOL v5 = a1 > 0xFF;
      a1 >>= 8;
    }
    while (v5);
  }
  id result = 0;
  if (a3 >= (unint64_t)a2 && a2 && a3 && a3 - (unint64_t)a2 >= v4)
  {
    unint64_t v7 = 0;
    if (v4)
    {
      id v8 = a2;
      unint64_t v9 = v4;
      do
      {
        unsigned int v10 = *v8++;
        unint64_t v7 = v10 | (v7 << 8);
        --v9;
      }
      while (v9);
    }
    if (a4) {
      *a4 = v7;
    }
    return &a2[v4];
  }
  return result;
}

void sub_10019DEE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10019DF0C(id a1)
{
  qword_10032EF18 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019DF50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (qword_10032EF10 != -1) {
    dispatch_once(&qword_10032EF10, &stru_1002C5078);
  }
  id v8 = (void *)qword_10032EF18;
  if (os_log_type_enabled((os_log_t)qword_10032EF18, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v9 = v8;
    unsigned int v10 = [WeakRetained uri];
    *(_DWORD *)buf = 141558530;
    uint64_t v35 = 1752392040;
    __int16 v36 = 2112;
    long long v37 = v10;
    __int16 v38 = 2112;
    id v39 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "FetchKTSelf: fetched %{mask.hash}@: %@", buf, 0x20u);
  }
  [WeakRetained setQueryResponse:v5];
  uint64_t v11 = [WeakRetained queryResponse];

  if (v6 || !v11)
  {
    if (!v6)
    {
      id v6 = +[TransparencyError errorWithDomain:kTransparencyErrorNetwork code:-344 underlyingError:0 description:@"FetchQuery data missing, and no error"];
    }
    if (qword_10032EF10 != -1) {
      dispatch_once(&qword_10032EF10, &stru_1002C5098);
    }
    id v27 = (void *)qword_10032EF18;
    if (os_log_type_enabled((os_log_t)qword_10032EF18, OS_LOG_TYPE_ERROR))
    {
      __int16 v28 = v27;
      long long v29 = [WeakRetained uri];
      *(_DWORD *)buf = 141558530;
      uint64_t v35 = 1752392040;
      __int16 v36 = 2112;
      long long v37 = v29;
      __int16 v38 = 2114;
      id v39 = v6;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "FetchKTSelf: no query response for %{mask.hash}@: %{public}@", buf, 0x20u);
    }
    [WeakRetained setError:v6];
    long long v26 = [WeakRetained operationQueue];
    id v24 = [WeakRetained finishedOp];
    [v26 addOperation:v24];
  }
  else
  {
    id v32 = v5;
    long long v12 = [v5 metadata];
    uint64_t v13 = [v12 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

    id v30 = [WeakRetained deps];
    id v14 = [v30 smDataStore];
    uint64_t v15 = [WeakRetained queryRequest];
    __int16 v16 = [v15 data];
    id v17 = [WeakRetained queryResponse];
    id v18 = [v17 data];
    id v19 = [WeakRetained uri];
    dispatch_group_t v20 = [WeakRetained application];
    id v33 = 0;
    __int16 v31 = (void *)v13;
    LOBYTE(v13) = [v14 storeQueryRequest:v16 queryResponse:v18 serverHint:v13 uri:v19 application:v20 error:&v33];
    id v6 = v33;

    if ((v13 & 1) == 0)
    {
      if (qword_10032EF10 != -1) {
        dispatch_once(&qword_10032EF10, &stru_1002C50B8);
      }
      long long v21 = (void *)qword_10032EF18;
      if (os_log_type_enabled((os_log_t)qword_10032EF18, OS_LOG_TYPE_ERROR))
      {
        __int16 v22 = v21;
        id v23 = [WeakRetained uri];
        *(_DWORD *)buf = 141558530;
        uint64_t v35 = 1752392040;
        __int16 v36 = 2112;
        long long v37 = v23;
        __int16 v38 = 2112;
        id v39 = v6;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "FetchKTSelf: failed to store KT response for %{mask.hash}@: %@", buf, 0x20u);
      }
      [WeakRetained setError:v6];
    }
    id v24 = [WeakRetained operationQueue];
    id v25 = [WeakRetained finishedOp];
    [v24 addOperation:v25];

    long long v26 = v31;
    id v5 = v32;
  }
}

void sub_10019E3E0(id a1)
{
  qword_10032EF18 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019E424(id a1)
{
  qword_10032EF18 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10019E468(id a1)
{
  qword_10032EF18 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A4968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A498C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001A499C(uint64_t a1)
{
}

void sub_1001A49A4(uint64_t a1)
{
  BOOL v2 = [*(id *)(a1 + 32) context];
  int v3 = +[NSEntityDescription insertNewObjectForEntityForName:@"IDSKTVerification" inManagedObjectContext:v2];

  unint64_t v4 = +[NSDate now];
  [v3 setCreationTime:v4];

  [v3 setUri:*(void *)(a1 + 40)];
  [v3 setApplication:*(void *)(a1 + 48)];
  [v3 setAccountKey:*(void *)(a1 + 56)];
  [v3 setUnsigned:"idsOptedIn" value:*(void *)(a1 + 112)];
  if (*(void *)(a1 + 64))
  {
    [v3 setIdsResponseTime:];
  }
  else
  {
    id v5 = [v3 creationTime];
    [v3 setIdsResponseTime:v5];
  }
  id v6 = [[KTLoggableDataArray alloc] initWithLoggableDatas:*(void *)(a1 + 72)];
  [v3 setServerLoggableDatas:v6];

  [v3 setUnsigned:"type" value:*(void *)(a1 + 120)];
  if (*(void *)(a1 + 80))
  {
    unint64_t v7 = [[KTLoggableDataArray alloc] initWithLoggableDatas:*(void *)(a1 + 80)];
    [v3 setSyncedLoggableDatas:v7];
  }
  if (*(void *)(a1 + 88))
  {
    [v3 setVerificationId:];
  }
  else
  {
    id v8 = +[NSUUID UUID];
    [v3 setVerificationId:v8];
  }
  unint64_t v9 = *(void **)(a1 + 32);
  unsigned int v10 = [v3 verificationId];
  [v9 createIDSVerificationID:v10 verification:v3];

  uint64_t v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(*(void *)(a1 + 96) + 8);
  obuint64_t j = *(id *)(v14 + 40);
  uint64_t v15 = [v11 fetchPeer:v12 application:v13 error:&obj];
  objc_storeStrong((id *)(v14 + 40), obj);
  if (!v15)
  {
    __int16 v16 = *(void **)(a1 + 32);
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v19 = *(void *)(*(void *)(a1 + 96) + 8);
    id v54 = *(id *)(v19 + 40);
    uint64_t v15 = [v16 createPeerState:v17 application:v18 error:&v54];
    objc_storeStrong((id *)(v19 + 40), v54);
    if (!v15)
    {
      id v27 = objc_opt_class();
      uint64_t v28 = *(void *)(*(void *)(a1 + 96) + 8);
      id v53 = *(id *)(v28 + 40);
      [v27 cleanseError:&v53];
      id v29 = v53;
      uint64_t v15 = *(void **)(v28 + 40);
      *(void *)(v28 + 40) = v29;
      goto LABEL_30;
    }
  }
  [v3 setPeerState:v15];
  dispatch_group_t v20 = [v15 mostRecentVerification];

  if (v20)
  {
    if (*(void *)(a1 + 64))
    {
      long long v21 = [v15 mostRecentVerification];
      uint64_t v22 = [v21 idsResponseTime];
      if (v22)
      {
        id v23 = (void *)v22;
        id v24 = [v15 mostRecentVerification];
        id v25 = [v24 idsResponseTime];
        id v26 = [v25 compare:*(void *)(a1 + 64)];

        if (v26 == (id)-1) {
          goto LABEL_21;
        }
      }
      else
      {
      }
    }
    id v30 = [v15 mostRecentVerification];
    __int16 v31 = [v30 idsResponseTime];
    if (v31)
    {

      goto LABEL_27;
    }
    id v32 = [v15 mostRecentVerification];
    id v33 = [v32 creationTime];
    long long v34 = [v3 creationTime];
    id v35 = [v33 compare:v34];

    if (v35 != (id)-1) {
      goto LABEL_27;
    }
  }
LABEL_21:
  [v3 setPeerStateMostRecent:v15];
  __int16 v36 = [v15 mostRecentSuccess];

  if (v36)
  {
    long long v37 = [v15 mostRecentSuccess];
    __int16 v38 = [v37 accountKey];
    if ([v38 isEqual:*(void *)(a1 + 56)])
    {
      id v39 = [v15 mostRecentSuccess];
      long long v40 = [v39 serverLoggableDatas];
      long long v41 = [v3 serverLoggableDatas];
      unsigned __int8 v42 = [v40 isEqual:v41];

      if (v42) {
        goto LABEL_27;
      }
    }
    else
    {
    }
    [v15 setMostRecentSuccess:0];
  }
LABEL_27:
  id v43 = *(void **)(a1 + 32);
  uint64_t v44 = *(void *)(*(void *)(a1 + 96) + 8);
  id v52 = *(id *)(v44 + 40);
  unsigned int v45 = [v43 persistWithError:&v52];
  objc_storeStrong((id *)(v44 + 40), v52);
  if (v45)
  {
    uint64_t v46 = [v3 verificationId];
    uint64_t v47 = *(void *)(*(void *)(a1 + 104) + 8);
    __int16 v48 = *(void **)(v47 + 40);
    *(void *)(v47 + 40) = v46;
  }
  long long v49 = objc_opt_class();
  uint64_t v50 = *(void *)(*(void *)(a1 + 96) + 8);
  id v51 = *(id *)(v50 + 40);
  [v49 cleanseError:&v51];
  objc_storeStrong((id *)(v50 + 40), v51);
LABEL_30:
}

void sub_1001A5270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001A5294(void *a1)
{
  BOOL v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = [v2 onMocFetchVerificationForVerificationId:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  id v6 = objc_opt_class();
  uint64_t v7 = *(void *)(a1[7] + 8);
  id v8 = *(id *)(v7 + 40);
  [v6 cleanseError:&v8];
  objc_storeStrong((id *)(v7 + 40), v8);
  if (v5)
  {
    (*(void (**)(void))(a1[6] + 16))();
    *(unsigned char *)(*(void *)(a1[8] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
}

void sub_1001A5534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001A5554(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    id v24 = *(id *)(v7 + 40);
    [v5 deleteNonRecentVerificationsForApplication:v6 error:&v24];
    objc_storeStrong((id *)(v7 + 40), v24);
    id v8 = +[NSBatchUpdateRequest batchUpdateRequestWithEntityName:@"IDSKTVerification"];
    unint64_t v9 = +[NSPredicate predicateWithFormat:@"application == %@", *(void *)(a1 + 40)];
    [v8 setPredicate:v9];

    v28[0] = @"verificationResult";
    v28[1] = @"reported";
    v29[0] = &off_1002D9D80;
    v29[1] = &__kCFBooleanFalse;
    v28[2] = @"failure";
    unsigned int v10 = +[NSNull null];
    v29[2] = v10;
    uint64_t v11 = +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:3];
    [v8 setPropertiesToUpdate:v11];

    [v8 setResultType:1];
    uint64_t v12 = [*(id *)(a1 + 32) context];
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
    id v23 = *(id *)(v13 + 40);
    uint64_t v14 = [v12 executeRequest:v8 error:&v23];
    objc_storeStrong((id *)(v13 + 40), v23);

    uint64_t v15 = *(void **)(a1 + 32);
    uint64_t v16 = *(void *)(*(void *)(a1 + 48) + 8);
    id v22 = *(id *)(v16 + 40);
    [v15 persistWithError:&v22];
    objc_storeStrong((id *)(v16 + 40), v22);
    if (!v14)
    {
      if (qword_10032EF20 != -1) {
        dispatch_once(&qword_10032EF20, &stru_1002C5128);
      }
      uint64_t v17 = qword_10032EF28;
      if (os_log_type_enabled((os_log_t)qword_10032EF28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v27 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "resetVerificationsToPending delete: %@", buf, 0xCu);
      }
    }
  }
  uint64_t v19 = objc_opt_class();
  uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8);
  id v21 = *(id *)(v20 + 40);
  [v19 cleanseError:&v21];
  objc_storeStrong((id *)(v20 + 40), v21);
}

void sub_1001A5810(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A5854(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A5B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_1001A5B5C(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 72) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    id v5 = +[NSPredicate predicateWithFormat:@"uri = %@ && verificationResult == %d && application = %@ && idsResponseTime < %@", *(void *)(a1 + 40), 2, *(void *)(a1 + 48), *(void *)(a1 + 56)];
    uint64_t v6 = +[NSFetchRequest fetchRequestWithEntityName:@"IDSKTVerification"];
    [v6 setPredicate:v5];
    [v6 setFetchBatchSize:*(void *)(a1 + 88)];
    uint64_t v7 = [*(id *)(a1 + 32) context];
    uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8);
    id v13 = *(id *)(v8 + 40);
    unint64_t v9 = [v7 executeFetchRequest:v6 error:&v13];
    objc_storeStrong((id *)(v8 + 40), v13);

    if ([v9 count])
    {
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
  unsigned int v10 = objc_opt_class();
  uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 8);
  id v12 = *(id *)(v11 + 40);
  [v10 cleanseError:&v12];
  objc_storeStrong((id *)(v11 + 40), v12);
}

void sub_1001A5CD0(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A5EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001A5EC4(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = +[NSPredicate predicateWithFormat:@"verificationResult == %d && application = %@", 2, *(void *)(a1 + 40)];
    uint64_t v6 = +[NSFetchRequest fetchRequestWithEntityName:@"IDSKTVerification"];
    id v22 = (void *)v5;
    [v6 setPredicate:v5];
    [v6 setPropertiesToFetch:&off_1002DA540];
    [v6 setReturnsDistinctResults:1];
    [v6 setResultType:2];
    if (*(void *)(a1 + 64)) {
      [v6 setFetchLimit:];
    }
    uint64_t v7 = [*(id *)(a1 + 32) context];
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    id v28 = *(id *)(v8 + 40);
    unint64_t v9 = [v7 executeFetchRequest:v6 error:&v28];
    objc_storeStrong((id *)(v8 + 40), v28);

    if (v9 && [v9 count])
    {
      uint64_t v10 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v9 count]);
      uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;
    }
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v13 = [v9 reverseObjectEnumerator];
    id v14 = [v13 countByEnumeratingWithState:&v24 objects:v30 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v25;
      do
      {
        uint64_t v17 = 0;
        do
        {
          if (*(void *)v25 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
          uint64_t v19 = [*(id *)(*((void *)&v24 + 1) + 8 * (void)v17) objectForKeyedSubscript:@"uri"];
          [v18 addObject:v19];

          uint64_t v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        id v15 = [v13 countByEnumeratingWithState:&v24 objects:v30 count:16];
      }
      while (v15);
    }
  }
  uint64_t v20 = objc_opt_class();
  uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8);
  id v23 = *(id *)(v21 + 40);
  [v20 cleanseError:&v23];
  objc_storeStrong((id *)(v21 + 40), v23);
}

void sub_1001A63CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1001A63F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = [*(id *)(a1 + 56) accountKey];
  uint64_t v6 = +[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", @"application == %@ && type == %d && uri == %@ && creationTime > %@ && accountKey == %@ && allowCacheHit == YES && idsOptedIn == %d", v2, 0, v3, v4, v5, [*(id *)(a1 + 56) optedIn]);

  uint64_t v7 = +[NSFetchRequest fetchRequestWithEntityName:@"IDSKTVerification"];
  [v7 setPredicate:v6];
  uint64_t v8 = +[NSSortDescriptor sortDescriptorWithKey:@"creationTime" ascending:0];
  id v33 = v8;
  unint64_t v9 = +[NSArray arrayWithObjects:&v33 count:1];
  [v7 setSortDescriptors:v9];

  uint64_t v10 = [*(id *)(a1 + 64) context];
  uint64_t v11 = *(void *)(*(void *)(a1 + 80) + 8);
  obuint64_t j = *(id *)(v11 + 40);
  id v12 = [v10 executeFetchRequest:v7 error:&obj];
  objc_storeStrong((id *)(v11 + 40), obj);

  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v13 = v12;
  id v14 = [v13 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v28;
    while (2)
    {
      for (unint64_t i = 0; i != v15; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v28 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        uint64_t v19 = [v18 serverLoggableDatas];
        unsigned int v20 = [v19 isEqual:*(void *)(a1 + 72)];

        if (v20)
        {
          uint64_t v21 = [v18 verificationId];
          uint64_t v22 = *(void *)(*(void *)(a1 + 88) + 8);
          id v23 = *(void **)(v22 + 40);
          *(void *)(v22 + 40) = v21;

          goto LABEL_11;
        }
      }
      id v15 = [v13 countByEnumeratingWithState:&v27 objects:v32 count:16];
      if (v15) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  long long v24 = objc_opt_class();
  uint64_t v25 = *(void *)(*(void *)(a1 + 80) + 8);
  id v26 = *(id *)(v25 + 40);
  [v24 cleanseError:&v26];
  objc_storeStrong((id *)(v25 + 40), v26);
}

void sub_1001A697C(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A69C0(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A6A04(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A6B8C(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A6F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001A6F34(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A6F78(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = +[NSBatchUpdateRequest batchUpdateRequestWithEntityName:@"IDSKTVerification"];
    uint64_t v6 = +[NSPredicate predicateWithFormat:@"uri IN %@ && application == %@", *(void *)(a1 + 40), *(void *)(a1 + 48)];
    [v5 setPredicate:v6];

    [v5 setPropertiesToUpdate:&off_1002DA3D0];
    [v5 setResultType:1];
    uint64_t v7 = [*(id *)(a1 + 32) context];
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
    id v18 = *(id *)(v8 + 40);
    unint64_t v9 = [v7 executeRequest:v5 error:&v18];
    objc_storeStrong((id *)(v8 + 40), v18);

    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
    id v17 = *(id *)(v11 + 40);
    [v10 persistWithError:&v17];
    objc_storeStrong((id *)(v11 + 40), v17);
    if (!v9)
    {
      if (qword_10032EF20 != -1) {
        dispatch_once(&qword_10032EF20, &stru_1002C52A0);
      }
      id v12 = qword_10032EF28;
      if (os_log_type_enabled((os_log_t)qword_10032EF28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v21 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "disableCacheHitsForUris: %@", buf, 0xCu);
      }
    }
  }
  id v14 = objc_opt_class();
  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
  id v16 = *(id *)(v15 + 40);
  [v14 cleanseError:&v16];
  objc_storeStrong((id *)(v15 + 40), v16);
}

void sub_1001A719C(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A71E0(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A7608(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A764C(id a1)
{
  qword_10032EF28 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A7978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A799C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001A79AC(uint64_t a1)
{
}

void sub_1001A79B4(uint64_t a1)
{
  uint64_t v2 = +[NSFetchRequest fetchRequestWithEntityName:@"KTDeviceRecord"];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"deviceId == %@ && (application == %@ || request.application == %@)", *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 40)];
  [v2 setPredicate:v3];

  unsigned int v4 = [*(id *)(a1 + 48) context];
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  if (v6 && [v6 count] == (id)1)
  {
    uint64_t v7 = [v6 objectAtIndexedSubscript:0];
    uint64_t v8 = [v7 loggableData];
    uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
    id v27 = *(id *)(v9 + 40);
    uint64_t v10 = +[TransparencyManagedDataStore deserializeLoggableDatas:v8 error:&v27];
    objc_storeStrong((id *)(v9 + 40), v27);

    if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) && v10 && [v10 count] == (id)1)
    {
      uint64_t v11 = [v10 objectAtIndexedSubscript:0];
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
    else
    {
      if (qword_10032EF30 != -1) {
        dispatch_once(&qword_10032EF30, &stru_1002C5340);
      }
      uint64_t v19 = qword_10032EF38;
      if (os_log_type_enabled((os_log_t)qword_10032EF38, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v31 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "failed to decode loggable data for %@", buf, 0xCu);
      }
      uint64_t v21 = +[TransparencyError errorWithDomain:kTransparencyErrorDatabase, -303, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), @"failed to decode loggable data for %@", *(void *)(a1 + 32) code underlyingError description];
      uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 8);
      id v23 = *(void **)(v22 + 40);
      *(void *)(v22 + 40) = v21;

      uint64_t v24 = *(void *)(*(void *)(a1 + 64) + 8);
      id v26 = *(id *)(v24 + 40);
      +[TransparencyManagedDataStore cleanseError:&v26];
      id v25 = v26;
      uint64_t v11 = *(void **)(v24 + 40);
      *(void *)(v24 + 40) = v25;
    }
  }
  else
  {
    if (qword_10032EF30 != -1) {
      dispatch_once(&qword_10032EF30, &stru_1002C5320);
    }
    id v12 = qword_10032EF38;
    if (os_log_type_enabled((os_log_t)qword_10032EF38, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v31 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "failed to find device record for %@", buf, 0xCu);
    }
    uint64_t v14 = +[TransparencyError errorWithDomain:kTransparencyErrorDatabase, -302, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), @"failed to find device record for %@", *(void *)(a1 + 32) code underlyingError description];
    uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8);
    id v28 = *(id *)(v17 + 40);
    +[TransparencyManagedDataStore cleanseError:&v28];
    id v18 = v28;
    uint64_t v7 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v18;
  }
}

void sub_1001A7D90(id a1)
{
  qword_10032EF38 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A7DD4(id a1)
{
  qword_10032EF38 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A8344(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001A8368(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001A8378(uint64_t a1)
{
}

void sub_1001A8380(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) createRequest];
  uint64_t v3 = v2;
  if (v2)
  {
    [v2 setUri:*(void *)(a1 + 40)];
    [v3 setApplication:*(void *)(a1 + 48)];
    [v3 setAccountKey:*(void *)(a1 + 56)];
    if (*(void *)(a1 + 64))
    {
      [v3 setRequestId:];
    }
    else
    {
      uint64_t v8 = objc_opt_new();
      [v3 setRequestId:v8];
    }
    [v3 setQueryRequest:*(void *)(a1 + 72)];
    [v3 setQueryResponse:*(void *)(a1 + 80)];
    if (*(void *)(a1 + 80))
    {
      if (*(void *)(a1 + 88))
      {
        [v3 setResponseTime:];
      }
      else
      {
        uint64_t v9 = +[NSDate date];
        [v3 setResponseTime:v9];
      }
    }
    [v3 setIdsResponseTime:*(void *)(a1 + 96)];
    [v3 setClientLoggableDatas:*(void *)(a1 + 104)];
    [v3 setServerLoggableDatas:*(void *)(a1 + 112)];
    uint64_t v10 = [*(id *)(a1 + 32) controller];
    atomic_fetch_add((atomic_ullong *volatile)[v10 sequenceId], 1uLL);
    [v3 setSequenceId:];

    [v3 setUnsigned:"type" value:*(void *)(a1 + 136)];
    [v3 setRequestTime:CFAbsoluteTimeGetCurrent()];
    [v3 setServerHint:0];
    uint64_t v11 = *(void **)(a1 + 32);
    id v12 = [v3 requestId];
    [v11 createKTRequestID:v12 request:v3];

    uint64_t v13 = *(void **)(a1 + 32);
    uint64_t v14 = *(void *)(*(void *)(a1 + 120) + 8);
    obuint64_t j = *(id *)(v14 + 40);
    LODWORD(v12) = [v13 persistWithError:&obj];
    objc_storeStrong((id *)(v14 + 40), obj);
    if (v12)
    {
      uint64_t v15 = [v3 requestId];
      uint64_t v16 = *(void *)(*(void *)(a1 + 128) + 8);
      uint64_t v17 = *(void **)(v16 + 40);
      *(void *)(v16 + 40) = v15;
    }
    uint64_t v18 = *(void *)(*(void *)(a1 + 120) + 8);
    id v19 = *(id *)(v18 + 40);
    +[TransparencyManagedDataStore cleanseError:&v19];
    objc_storeStrong((id *)(v18 + 40), v19);
  }
  else
  {
    uint64_t v4 = +[TransparencyError errorWithDomain:kTransparencyErrorAlloc code:-56 description:@"failed to create KTRequest entity"];
    uint64_t v5 = *(void *)(*(void *)(a1 + 120) + 8);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    [*(id *)(a1 + 32) reportCoreDataEventForEntity:@"KTRequest" write:1 code:-56 underlyingError:0];
    if (qword_10032EF40 != -1) {
      dispatch_once(&qword_10032EF40, &stru_1002C5360);
    }
    uint64_t v7 = qword_10032EF48;
    if (os_log_type_enabled((os_log_t)qword_10032EF48, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to create KTRequest entity", buf, 2u);
    }
  }
}

void sub_1001A8658(id a1)
{
  qword_10032EF48 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A8B00(id a1)
{
  qword_10032EF48 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A8B44(id a1)
{
  qword_10032EF48 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A90F8(id a1)
{
  qword_10032EF48 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A92A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v15;
    do
    {
      for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v12 = *(void **)(a1 + 32);
        uint64_t v13 = [v11 requestId];
        [v12 createKTRequestID:v13 request:v11];
      }
      id v8 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v8);
  }
  [*(id *)(a1 + 32) persistAndRefaultObjects:v6 error:a4];
}

void sub_1001A93D4(uint64_t a1)
{
  if (qword_10032EF40 != -1) {
    dispatch_once(&qword_10032EF40, &stru_1002C5430);
  }
  uint64_t v2 = qword_10032EF48;
  if (os_log_type_enabled((os_log_t)qword_10032EF48, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to populate KTRequests to KTRequestID lookup table: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1001A94A0(id a1)
{
  qword_10032EF48 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A96FC(uint64_t a1, void *a2, unsigned char *a3, uint64_t a4)
{
  id v6 = a2;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v20;
    do
    {
      for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        [v11 setQueryResponse:0];
        [v11 setQueryRequest:0];
        [v11 setResponseTime:0];
        id v12 = *(void **)(a1 + 32);
        uint64_t v13 = [v11 failures];
        long long v14 = [v13 allObjects];
        [v12 deleteObjectSet:v14];

        long long v15 = [v11 failureEvent];

        if (v15)
        {
          long long v16 = *(void **)(a1 + 32);
          long long v17 = [v11 failureEvent];
          [v16 deleteObject:v17];
        }
        [v11 setServerHint:0];
      }
      id v8 = [v6 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v8);
  }
  if (([*(id *)(a1 + 32) persistWithError:a4] & 1) == 0) {
    *a3 = 1;
  }
}

void sub_1001A9CA8(id a1)
{
  qword_10032EF48 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A9CEC(id a1)
{
  qword_10032EF48 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001A9EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001A9EEC(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  obuint64_t j = *(id *)(v4 + 40);
  uint64_t v5 = [v2 fetchRequestForUUID:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(a1[7] + 8) + 40)];
  uint64_t v7 = *(void *)(a1[7] + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v5)
  {
    (*(void (**)(void))(a1[6] + 16))();
    *(unsigned char *)(*(void *)(a1[8] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
}

void sub_1001AA08C(uint64_t a1)
{
  +[TransparencySettings defaultQueryCacheTimeout];
  uint64_t v3 = +[NSDate dateWithTimeIntervalSinceNow:-v2];
  uint64_t v4 = +[KTRequest fetchRequest];
  uint64_t v5 = +[NSSortDescriptor sortDescriptorWithKey:@"responseTime" ascending:0];
  long long v16 = v5;
  uint64_t v6 = +[NSArray arrayWithObjects:&v16 count:1];
  [v4 setSortDescriptors:v6];

  uint64_t v7 = +[NSPredicate predicateWithFormat:@"application == %@ && type == %d && accountKey == %@ && responseTime > %@", *(void *)(a1 + 32), 1, *(void *)(a1 + 40), v3];
  [v4 setPredicate:v7];

  [v4 setFetchLimit:1];
  id v8 = [*(id *)(a1 + 48) context];
  id v15 = 0;
  uint64_t v9 = [v8 executeFetchRequest:v4 error:&v15];
  id v10 = v15;

  if (v9 && [v9 count])
  {
    uint64_t v11 = *(void *)(a1 + 56);
    id v12 = [v9 objectAtIndexedSubscript:0];
    (*(void (**)(uint64_t, void *, void))(v11 + 16))(v11, v12, 0);
  }
  else
  {
    id v14 = v10;
    +[TransparencyManagedDataStore cleanseError:&v14];
    id v13 = v14;

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    id v10 = v13;
  }
}

void sub_1001AAD5C(id a1)
{
  qword_10032EF58 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001AADA0(id a1)
{
  qword_10032EF58 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001AAFC8(id a1)
{
  qword_10032EF58 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001AB00C(id a1)
{
  qword_10032EF58 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001AB2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1001AB2F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001AB300(uint64_t a1)
{
}

void sub_1001AB308(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = +[NSPredicate predicateWithFormat:@"uri == %@ && signatureResult == %d && mergeResult == %d && application == %@", *(void *)(a1 + 40), 1, 2, *(void *)(a1 + 48)];
    uint64_t v6 = +[KTMutation fetchRequest];
    [v6 setPredicate:v5];
    [v6 setFetchBatchSize:*(void *)(a1 + 80)];
    uint64_t v7 = +[NSSortDescriptor sortDescriptorWithKey:@"mutationMs" ascending:1];
    long long v17 = v7;
    id v8 = +[NSArray arrayWithObjects:&v17 count:1];
    [v6 setSortDescriptors:v8];

    uint64_t v9 = [*(id *)(a1 + 32) context];
    uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
    id v15 = *(id *)(v10 + 40);
    uint64_t v11 = [v9 executeFetchRequest:v6 error:&v15];
    objc_storeStrong((id *)(v10 + 40), v15);

    if ([v11 count])
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
  id v12 = objc_opt_class();
  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8);
  id v14 = *(id *)(v13 + 40);
  [v12 cleanseError:&v14];
  objc_storeStrong((id *)(v13 + 40), v14);
}

void sub_1001AB4F8(id a1)
{
  qword_10032EF58 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001AB6C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001AB6EC(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = +[NSPredicate predicateWithFormat:@"signatureResult == %d && mergeResult == %d && application == %@", 1, 2, *(void *)(a1 + 40)];
    uint64_t v6 = +[KTMutation fetchRequest];
    long long v22 = (void *)v5;
    [v6 setPredicate:v5];
    [v6 setPropertiesToFetch:&off_1002DA588];
    [v6 setReturnsDistinctResults:1];
    [v6 setResultType:2];
    if (*(void *)(a1 + 64)) {
      [v6 setFetchLimit:];
    }
    uint64_t v7 = [*(id *)(a1 + 32) context];
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
    id v28 = *(id *)(v8 + 40);
    uint64_t v9 = [v7 executeFetchRequest:v6 error:&v28];
    objc_storeStrong((id *)(v8 + 40), v28);

    if (v9 && [v9 count])
    {
      uint64_t v10 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v9 count]);
      uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;
    }
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v13 = [v9 reverseObjectEnumerator];
    id v14 = [v13 countByEnumeratingWithState:&v24 objects:v30 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v25;
      do
      {
        long long v17 = 0;
        do
        {
          if (*(void *)v25 != v16) {
            objc_enumerationMutation(v13);
          }
          uint64_t v18 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
          long long v19 = [*(id *)(*((void *)&v24 + 1) + 8 * (void)v17) objectForKeyedSubscript:@"uri"];
          [v18 addObject:v19];

          long long v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        id v15 = [v13 countByEnumeratingWithState:&v24 objects:v30 count:16];
      }
      while (v15);
    }
  }
  long long v20 = objc_opt_class();
  uint64_t v21 = *(void *)(*(void *)(a1 + 48) + 8);
  id v23 = *(id *)(v21 + 40);
  [v20 cleanseError:&v23];
  objc_storeStrong((id *)(v21 + 40), v23);
}

void sub_1001ABAD8(id a1)
{
  qword_10032EF58 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001ABE40(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copyManagedObject:0];
  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) dataStore];
    [v3 onMocSetMapHead:v2 inclusionResult:*(void *)(a1 + 48) inclusionError:*(void *)(a1 + 40)];

    unsigned int v4 = [*(id *)(a1 + 32) dataStore];
    id v16 = 0;
    unsigned __int8 v5 = [v4 persistWithError:&v16];
    id v6 = v16;

    if ((v5 & 1) == 0)
    {
      if (qword_10032EF60 != -1) {
        dispatch_once(&qword_10032EF60, &stru_1002C55A0);
      }
      uint64_t v7 = qword_10032EF68;
      if (os_log_type_enabled((os_log_t)qword_10032EF68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to save inclusion state for map head: %@", buf, 0xCu);
      }
      uint64_t v8 = [*(id *)(a1 + 32) dataStore];
      [v8 reportCoreDataPersistEventForLocation:@"mapHeadIncusionState" underlyingError:v6];
    }
    double Current = CFAbsoluteTimeGetCurrent();
    [v2 receiptTime];
    double v11 = Current - v10;
    id v12 = [v2 application];
    uint64_t v13 = +[TransparencyAnalytics formatEventName:@"PatInclusionProofTime" application:v12];

    id v14 = +[TransparencyAnalytics logger];
    id v15 = +[NSNumber numberWithDouble:v11];
    [v14 logMetric:v15 withName:v13];
  }
}

void sub_1001AC044(id a1)
{
  qword_10032EF68 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001AC324(id a1)
{
  qword_10032EF68 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1001AC368(id *a1, void *a2, void *a3)
{
  if (+[TransparencyAnalytics hasInternalDiagnostics])
  {
    id v6 = +[NSMutableDictionary dictionary];
    uint64_t v7 = [a1[4] metadata];
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    uint64_t v9 = [v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

    if (v9)
    {
      double v10 = [a1[4] metadata];
      double v11 = [v10 objectForKeyedSubscript:v8];
      [v6 setObject:v11 forKeyedSubscript:v8];
    }
    if ([v6 count]) {
      *a3 = v6;
    }
  }
  id v12 = a1[4];
  id v28 = 0;
  uint64_t v13 = (uint64_t)[v12 verifyWithError:&v28];
  id v14 = v28;
  if (v13 == 1)
  {
    id v15 = [a1[4] nodeBytes];
    id v27 = v14;
    id v16 = +[TransparencyGPBMessage parseFromData:v15 error:&v27];
    id v17 = v27;

    if (v16)
    {
      if (![v16 hasObjectMapHead]) {
        goto LABEL_19;
      }
      id v18 = [v16 objectMapHead];
      long long v19 = [v18 object];
      long long v20 = [a1[5] mapHead];
      unsigned __int8 v21 = [v19 isEqualToData:v20];

      if (v21)
      {
        uint64_t v13 = 1;
        [a1[6] setInclusionResult:1 mapHead:a1[5] failure:0];
        id v22 = v17;
      }
      else
      {
LABEL_19:
        id v22 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-62 description:@"per-app tree entry does not contain the SMH in the map entry"];

        if (a2 && v22) {
          *a2 = v22;
        }
        if (qword_10032EF60 != -1) {
          dispatch_once(&qword_10032EF60, &stru_1002C5620);
        }
        long long v24 = qword_10032EF68;
        if (os_log_type_enabled((os_log_t)qword_10032EF68, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "per-app tree entry does not contain the SMH in the map entry", buf, 2u);
        }
        [a1[6] setInclusionResult:0 mapHead:a1[5] failure:v22];
        uint64_t v13 = 0;
      }
    }
    else
    {
      id v22 = +[TransparencyError errorWithDomain:kTransparencyErrorDecode, -140, v17, @"failed to decode per-app tree node: %@", v17 code underlyingError description];

      if (qword_10032EF60 != -1) {
        dispatch_once(&qword_10032EF60, &stru_1002C5600);
      }
      long long v25 = qword_10032EF68;
      if (os_log_type_enabled((os_log_t)qword_10032EF68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v30 = v22;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "failed to decode per-app tree node: %@", buf, 0xCu);
      }
      uint64_t v13 = 0;
      if (a2 && v22)
      {
        id v22 = v22;
        uint64_t v13 = 0;
        *a2 = v22;
      }
    }
  }
  else
  {
    id v22 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-13 underlyingError:v14 description:@"per-app tree verification failed"];

    if (a2 && v22) {
      *a2 = v22;
    }
    if (qword_10032EF60 != -1) {
      dispatch_once(&qword_10032EF60, &stru_1002C55E0);
    }
    id v23 = qword_10032EF68;
    if (os_log_type_enabled((os_log_t)qword_10032EF68, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "per-app tree verification failed", buf, 2u);
    }
  }

  return v13;
}

void sub_1001AC7C4(id a1)
{
  qword_10032EF68 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001AC808(id a1)
{
  qword_10032EF68 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001AC84C(id a1)
{
  qword_10032EF68 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001AC890(id a1)
{
  qword_10032EF68 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_1001ACB94(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = [*(id *)(a1 + 32) verifyWithError:a2];
  if (!v5
    && +[TransparencyAnalytics hasInternalDiagnostics])
  {
    id v6 = +[NSMutableDictionary dictionary];
    uint64_t v7 = [*(id *)(a1 + 32) metadata];
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    uint64_t v9 = [v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

    if (v9)
    {
      double v10 = [*(id *)(a1 + 32) metadata];
      double v11 = [v10 objectForKeyedSubscript:v8];
      [v6 setObject:v11 forKeyedSubscript:v8];
    }
    if ([v6 count]) {
      *a3 = v6;
    }
  }
  return v5;
}

void sub_1001ACC98(id a1)
{
  qword_10032EF68 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_1001ACF4C(uint64_t a1, void *a2, void *a3)
{
  if (+[TransparencyAnalytics hasInternalDiagnostics])
  {
    id v6 = +[NSMutableDictionary dictionary];
    uint64_t v7 = [*(id *)(a1 + 32) metadata];
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    uint64_t v9 = [v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

    if (v9)
    {
      double v10 = [*(id *)(a1 + 32) metadata];
      double v11 = [v10 objectForKeyedSubscript:v8];
      [v6 setObject:v11 forKeyedSubscript:v8];
    }
    if ([v6 count]) {
      *a3 = v6;
    }
  }
  id v12 = [*(id *)(a1 + 32) verifyWithError:a2];
  if (v12 != (id)1)
  {
    if (a2)
    {
      *a2 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-13 underlyingError:*a2 description:@"per-app tree verification failed"];
    }
    if (qword_10032EF70 != -1) {
      dispatch_once(&qword_10032EF70, &stru_1002C56D0);
    }
    uint64_t v13 = qword_10032EF78;
    if (os_log_type_enabled((os_log_t)qword_10032EF78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "per-app tree verification failed", v15, 2u);
    }
  }
  return v12;
}

void sub_1001AD100(id a1)
{
  qword_10032EF78 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

int64_t sub_1001ADC58(id a1, OptInOut *a2, OptInOut *a3)
{
  unsigned int v4 = a2;
  id v5 = a3;
  id v6 = [(OptInOut *)v4 timestampMs];
  if (v6 <= (id)[(OptInOut *)v5 timestampMs])
  {
    id v8 = [(OptInOut *)v4 timestampMs];
    if (v8 == (id)[(OptInOut *)v5 timestampMs]) {
      int64_t v7 = 0;
    }
    else {
      int64_t v7 = -1;
    }
  }
  else
  {
    int64_t v7 = 1;
  }

  return v7;
}

void sub_1001AEAA8(id a1)
{
  qword_10032EF88 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001AEE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001AEEB4(uint64_t a1, void *a2)
{
  id v30 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (!v30)
  {
    uint64_t v13 = [WeakRetained idsRegistrationInterface];
    [v13 triggerRegistrationDataNeedsUpdate:@"missing"];

    [WeakRetained setCheckIDSError:2];
    id v6 = [WeakRetained operationQueue];
    id v14 = [WeakRetained finishedOp];
    [v6 addOperation:v14];
    goto LABEL_23;
  }
  unsigned int v4 = [v30 ktApplicationToKTRegStatus];
  id v5 = [WeakRetained application];
  id v6 = [v4 objectForKeyedSubscript:v5];

  if (v6)
  {
    uint64_t v7 = [v6 registeredKTData];
    uint64_t v8 = [v6 unregisteredKTData];
    uint64_t v9 = (void *)v8;
    if (!(v7 | v8))
    {
      double v10 = [WeakRetained idsRegistrationInterface];
      [v10 triggerRegistrationDataNeedsUpdate:@"reg"];

LABEL_5:
      double v11 = WeakRetained;
      uint64_t v12 = 2;
LABEL_20:
      [v11 setCheckIDSError:v12];
      goto LABEL_21;
    }
    if (v8)
    {
      if (![WeakRetained hasRecentlyDoneHSA2Upsell])
      {
        double v11 = WeakRetained;
        uint64_t v12 = 0;
        goto LABEL_20;
      }
      id v15 = [WeakRetained idsRegistrationInterface];
      [v15 triggerRegistrationDataNeedsUpdate:@"hsa2upsell"];
    }
    else
    {
      id v16 = [(id)v7 ktDataForRegistration];

      if (!v16) {
        goto LABEL_5;
      }
      id v17 = [(id)v7 ktPublicAccountKey];

      if (!v17)
      {
        id v27 = [WeakRetained idsRegistrationInterface];
        [v27 triggerRegistrationDataNeedsUpdate:@"publickey-missing"];

        double v11 = WeakRetained;
        uint64_t v12 = 6;
        goto LABEL_20;
      }
      id v18 = [(id)v7 ktPublicAccountKey];
      unsigned __int8 v19 = [v18 isEqual:*(void *)(a1 + 32)];

      if ((v19 & 1) == 0)
      {
        id v28 = [WeakRetained idsRegistrationInterface];
        [v28 triggerRegistrationDataNeedsUpdate:@"publickey"];

        double v11 = WeakRetained;
        uint64_t v12 = 5;
        goto LABEL_20;
      }
      long long v20 = objc_opt_class();
      unsigned __int8 v21 = [(id)v7 ktPublicAccountKey];
      id v22 = [(id)v7 ktDataForRegistration];
      id v23 = [(id)v7 ktDataSignature];
      unsigned __int8 v24 = [v20 checkPCSKTSignature:v21 data:v22 signature:v23];

      long long v25 = [WeakRetained idsRegistrationInterface];
      long long v26 = v25;
      if ((v24 & 1) == 0)
      {
        [v25 triggerRegistrationDataNeedsUpdate:@"signature"];

        double v11 = WeakRetained;
        uint64_t v12 = 4;
        goto LABEL_20;
      }
      [v25 notifyIDSRegistrationCorrect];

      [WeakRetained setCheckIDSResult:1];
    }
LABEL_21:

    goto LABEL_22;
  }
  [WeakRetained setCheckIDSError:2];
LABEL_22:
  id v14 = [WeakRetained operationQueue];
  long long v29 = [WeakRetained finishedOp];
  [v14 addOperation:v29];

LABEL_23:
}

void sub_1001B0830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a63, 8);
  _Block_object_dispose(&a67, 8);
  _Block_object_dispose(&STACK[0x200], 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B08CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001B08DC(uint64_t a1)
{
}

void sub_1001B08E4(id a1)
{
  qword_10032EF98 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B0928(id a1)
{
  qword_10032EF98 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B096C(id a1)
{
  qword_10032EF98 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B09B0(id a1)
{
  qword_10032EF98 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1001B09F4(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v3 = [a2 mutableCopy];
  }
  else
  {
    id v3 = +[NSMutableDictionary dictionary];
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = v3;

  return _objc_release_x1();
}

void sub_1001B0A54(id a1)
{
  qword_10032EF98 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B0A98(id a1)
{
  qword_10032EF98 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B0ADC(id a1)
{
  qword_10032EF98 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B0B20(id a1)
{
  qword_10032EF98 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B0B64(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  id v4 = a2;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
}

void sub_1001B0E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1001B0E9C(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  else
  {
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    obuint64_t j = [a2 allValues];
    id v7 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v28;
      uint64_t v24 = kTransparencyErrorInternal;
      while (2)
      {
        for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v9) {
            objc_enumerationMutation(obj);
          }
          double v11 = *(void **)(*((void *)&v27 + 1) + 8 * i);
          uint64_t v12 = [*(id *)(a1 + 32) accountKeyService];
          uint64_t v13 = [v11 application];
          id v14 = [v12 accountKeyService:v13];

          if (!v14)
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            goto LABEL_20;
          }
          id v26 = 0;
          id v15 = [v14 publicPublicKey:&v26];
          id v16 = v26;
          if (v15)
          {
            id v17 = [*(id *)(a1 + 32) accountKeyService];
            id v18 = [v11 validateSignature:v17 withPublicKey:v15];

            if (v18)
            {
              *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
              unsigned __int8 v19 = [v11 application];
              uint64_t v20 = +[TransparencyError errorWithDomain:v24, -349, 3, 0, @"%@ failed with %@", v19, v18 code errorLevel underlyingError description];
              uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
              id v22 = *(void **)(v21 + 40);
              *(void *)(v21 + 40) = v20;

              int v23 = 1;
            }
            else
            {
              int v23 = 0;
            }
          }
          else
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
            int v23 = 1;
          }

          if (v23) {
            goto LABEL_20;
          }
        }
        id v8 = [obj countByEnumeratingWithState:&v27 objects:v31 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
LABEL_20:

    id v6 = 0;
  }
}

void sub_1001B1514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001B1530(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _onqueueRecheck];
}

void sub_1001B1570(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _onqueueRecheck];
}

uint64_t sub_1001B16B0(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 8);
  return result;
}

void sub_1001B17C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001B17E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001B17F0(uint64_t a1)
{
}

id sub_1001B17F8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) queueIsLocked])
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [*(id *)(a1 + 32) lastUnlockedTime];
    return (id)_objc_release_x1();
  }
  else
  {
    uint64_t v2 = +[NSDate date];
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;

    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    return [v5 setLastUnlockedTime:v6];
  }
}

void sub_1001B1A78(id a1)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Keybag unlocked", v1, 2u);
  }
}

id sub_1001B1D4C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) lockStateChangeNotification:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1001B1DE4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueRecheck];
}

id sub_1001B1FCC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) queueIsLocked];
  if ((result & 1) == 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    return [v3 _onqueueRecheck];
  }
  return result;
}

void sub_1001B20CC(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 48) addObject:*(void *)(a1 + 40)];
  char v2 = [*(id *)(a1 + 32) queueIsLocked] ^ 1;
  uint64_t v3 = dispatch_get_global_queue(21, 0);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1001B2194;
  void v4[3] = &unk_1002C5918;
  id v5 = *(id *)(a1 + 40);
  char v6 = v2;
  dispatch_async(v3, v4);
}

id sub_1001B2194(uint64_t a1)
{
  return _[*(id *)(a1 + 32) lockStateChangeNotification:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1001B21F8(id a1)
{
  uint64_t v1 = [KTLockStateTracker alloc];
  id v4 = objc_alloc_init(KTActualLockStateProvider);
  char v2 = [(KTLockStateTracker *)v1 initWithProvider:v4];
  uint64_t v3 = (void *)qword_10032EFA8;
  qword_10032EFA8 = (uint64_t)v2;
}

void sub_1001B27E8(id a1)
{
  qword_10032EFC0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B282C(id a1)
{
  qword_10032EFC0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B2E10(id a1)
{
  qword_10032EFC0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B3478(id a1)
{
  qword_10032EFD0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B34BC(id a1)
{
  qword_10032EFD0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B3B40(id a1)
{
  qword_10032EFE0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B3B84(id a1)
{
  qword_10032EFE0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B3BC8(id a1)
{
  qword_10032EFE0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B4104(id a1)
{
  qword_10032EFE0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B425C(id a1)
{
  qword_10032EFE0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B4498(id a1)
{
  qword_10032EFF0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B566C(id a1)
{
  qword_10032F000 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B59BC(id a1)
{
  qword_10032F000 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B5A00(id a1)
{
  qword_10032F000 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1001B5BEC(uint64_t a1, void *a2)
{
  if (![*(id *)(a1 + 32) hasSignature]
    || ([*(id *)(a1 + 32) signature],
        id v4 = objc_claimAutoreleasedReturnValue(),
        v4,
        !v4))
  {
    uint64_t v30 = -3;
    if (!a2) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v5 = [*(id *)(a1 + 32) mutation];
  if (!v5
    || (char v6 = (void *)v5,
        [*(id *)(a1 + 32) mutation],
        id v7 = objc_claimAutoreleasedReturnValue(),
        id v8 = [v7 length],
        v7,
        v6,
        !v8))
  {
    uint64_t v30 = -4;
    if (!a2) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v9 = [*(id *)(a1 + 32) signature];
  uint64_t v10 = [v9 signature];
  if (!v10)
  {
    uint64_t v30 = -6;
    goto LABEL_26;
  }
  double v11 = (void *)v10;
  uint64_t v12 = [*(id *)(a1 + 32) signature];
  uint64_t v13 = [v12 signature];
  id v14 = [v13 length];

  if (!v14)
  {
    uint64_t v30 = -6;
    if (!a2) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v9 = [*(id *)(a1 + 32) signature];
  uint64_t v15 = [v9 signingKeySpkihash];
  if (!v15)
  {
    uint64_t v30 = -5;
LABEL_26:

    if (!a2) {
      goto LABEL_28;
    }
LABEL_27:
    *a2 = +[TransparencyError errorWithDomain:kTransparencyErrorDecode code:v30 description:@"SMT missing data required for verification"];
    goto LABEL_28;
  }
  id v16 = (void *)v15;
  id v17 = [*(id *)(a1 + 32) signature];
  id v18 = [v17 signingKeySpkihash];
  id v19 = [v18 length];

  if (v19)
  {
    uint64_t v20 = [*(id *)(a1 + 32) verifier];
    uint64_t v21 = [*(id *)(a1 + 32) mutation];
    id v22 = [*(id *)(a1 + 32) signature];
    int v23 = [v22 signature];
    uint64_t v24 = [*(id *)(a1 + 32) signature];
    long long v25 = [v24 signingKeySpkihash];
    id v26 = [*(id *)(a1 + 32) signature];
    id v33 = 0;
    unsigned int v27 = [v20 verifyMessage:v21 signature:v23 spkiHash:v25 algorithm:[TransparencySignatureVerifier secKeyAlgorithmForProtoAlgorithm:](TransparencySignatureVerifier, "secKeyAlgorithmForProtoAlgorithm:", objc_msgSend(v26, "algorithm")) error:&v33];
    id v28 = v33;

    uint64_t v29 = v27;
    if (+[TransparencyError hasUnknownSPKIHashError:v28])uint64_t v29 = 2; {
    if (a2 && v28)
    }
      *a2 = v28;
    if (a2 && v27 != 1)
    {
      +[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", @"TransparencyErrorVerify", -137, *a2);
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }

    return v29;
  }
  uint64_t v30 = -5;
  if (a2) {
    goto LABEL_27;
  }
LABEL_28:
  if (qword_10032EFF8 != -1) {
    dispatch_once(&qword_10032EFF8, &stru_1002C5B18);
  }
  uint64_t v31 = qword_10032F000;
  if (os_log_type_enabled((os_log_t)qword_10032F000, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "SMT missing data required for verification", buf, 2u);
  }
  return 0;
}

void sub_1001B5F70(id a1)
{
  qword_10032F000 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B6478(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B64BC(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B6500(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B6848(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B688C(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B6B60(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B6BA4(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B6E78(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B6EBC(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B719C(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B71E0(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B7698(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B7980(id a1)
{
  qword_10032F010 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B7C04(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  char v2 = (void *)qword_10032F020;
  qword_10032F020 = v1;

  [(id)qword_10032F020 setObject:@"com.apple.KTAccountKey" forKeyedSubscript:kKTApplicationIdentifierIDS];
  [(id)qword_10032F020 setObject:@"com.apple.KTAccountKey" forKeyedSubscript:kKTApplicationIdentifierIDSMultiplex];
  [(id)qword_10032F020 setObject:@"com.apple.KTAccountKey" forKeyedSubscript:kKTApplicationIdentifierIDSFaceTime];
  [(id)qword_10032F020 setObject:@"com.apple.KTAccountKey" forKeyedSubscript:kKTApplicationIdentifierCloudKit];
  uint64_t v3 = (void *)qword_10032F020;
  uint64_t v4 = kKTApplicationIdentifierTLT;

  [v3 setObject:@"com.apple.KTAccountKey" forKeyedSubscript:v4];
}

void sub_1001B7E98(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B7EDC(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1001B81A0(uint64_t a1)
{
  char v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v3 = dispatch_queue_create("KTAccountKeyServer", v2);
  uint64_t v4 = (void *)qword_10032F050;
  qword_10032F050 = (uint64_t)v3;

  uint64_t v5 = +[NSMutableDictionary dictionary];
  char v6 = (void *)qword_10032F040;
  qword_10032F040 = v5;

  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1001B8290;
  handler[3] = &unk_1002C5D70;
  handler[4] = *(void *)(a1 + 32);
  return notify_register_dispatch("com.apple.security.view-change.Manatee", (int *)&unk_10032F058, (dispatch_queue_t)qword_10032F050, handler);
}

id sub_1001B8290(uint64_t a1)
{
  if (qword_10032F028 != -1) {
    dispatch_once(&qword_10032F028, &stru_1002C5D50);
  }
  char v2 = qword_10032F030;
  if (os_log_type_enabled((os_log_t)qword_10032F030, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "got notice that view changed; clearing cached account key",
      v4,
      2u);
  }
  return [*(id *)(a1 + 32) clearCachedPCSIdentities];
}

void sub_1001B8328(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B8490(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B866C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1001B8688(uint64_t a1)
{
  char v2 = +[NSMutableDictionary dictionary];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = +[NSNumber numberWithInt:PCSReportManateeStatus()];
  [v2 setObject:v4 forKeyedSubscript:@"manateeStatus"];

  uint64_t v5 = [WeakRetained numberPropertyForKey:@"KTAccountKeyRetry"];
  [v2 setObject:v5 forKeyedSubscript:@"KTAccountKeyRetry"];

  char v6 = *(void **)(a1 + 32);
  uint64_t v13 = _NSConcreteStackBlock;
  uint64_t v14 = 3221225472;
  uint64_t v15 = sub_1001B8814;
  id v16 = &unk_1002C5DB8;
  id v7 = v2;
  id v17 = v7;
  id v18 = WeakRetained;
  id v8 = WeakRetained;
  [v6 enumerateObjectsUsingBlock:&v13];
  uint64_t v9 = +[KTKVSStore strictStore];
  uint64_t v10 = [v9 accountMetricID];

  [v8 setMetricsAccountID:v10];
  id v11 = v7;

  return v11;
}

void sub_1001B8814(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSString stringWithFormat:@"KTAccountKey-%@", v3];
  uint64_t v5 = +[KTAccountKeyServer sharedKeyServiceForApplication:v3];
  char v6 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v5 haveIdentity]);
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v4];

  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v7 = +[KTEnrollmentSignatureSupport enrollementLoggingKeys:v3];
  id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v15;
    do
    {
      for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v13 = [*(id *)(a1 + 40) numberPropertyForKey:v12];
        [*(id *)(a1 + 32) setObject:v13 forKeyedSubscript:v12];
      }
      id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v9);
  }
}

void sub_1001B8BDC(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B8C20(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B8E10(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B900C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1001B9020(uint64_t a1)
{
  return [*(id *)(a1 + 32) getPCSIdentity:*(void *)(a1 + 40)];
}

void sub_1001B902C(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  id v14 = 0;
  id v3 = [v2 pcsOptions:&v14];
  id v4 = v14;
  id v5 = [v3 mutableCopy];

  if (v5)
  {
    if (*(unsigned char *)(a1 + 56)) {
      [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:kPCSSetupRollIdentity];
    }
    [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:kPCSSetupSyncIdentity];
    char v6 = [*(id *)(a1 + 32) creationGroup];
    objc_sync_enter(v6);
    id v7 = [*(id *)(a1 + 32) creationGroup];
    dispatch_group_enter(v7);

    [*(id *)(a1 + 32) setOutstandingCreationSignal:1];
    objc_sync_exit(v6);

    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = [v8 service];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001B91E0;
    v12[3] = &unk_1002C5E88;
    id v11 = *(void **)(a1 + 40);
    v12[4] = *(void *)(a1 + 32);
    id v13 = v11;
    [v8 wrapperPCSIdentitySetCreateManatee:v9 service:v10 options:v5 block:v12];
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1001B91CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001B91E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    [v5 identity];
    id v8 = (void *)PCSIdentityCopyPublicKeyInfo();
    if (qword_10032F028 != -1) {
      dispatch_once(&qword_10032F028, &stru_1002C5E60);
    }
    uint64_t v9 = (void *)qword_10032F030;
    if (os_log_type_enabled((os_log_t)qword_10032F030, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = v9;
      id v11 = [v8 kt_hexString];
      int v14 = 138412290;
      long long v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "created new account key identity: %@", (uint8_t *)&v14, 0xCu);
    }
    [*(id *)(a1 + 32) cachePCSIdentity:v5];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v12 = [*(id *)(a1 + 32) creationGroup];
  objc_sync_enter(v12);
  id v13 = [*(id *)(a1 + 32) creationGroup];
  dispatch_group_leave(v13);

  [*(id *)(a1 + 32) setOutstandingCreationSignal:0];
  objc_sync_exit(v12);
}

void sub_1001B9390(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001B93AC(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B94A4(uint64_t a1, const void *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) service];
    id v6 = PCSIdentitySetCopyCurrentIdentityPointer();
    id v7 = v6;
    if (v6 && [v6 identity] && CFEqual(a2, objc_msgSend(v7, "identity")))
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = +[TransparencyError errorWithDomain:code:errorLevel:underlyingError:description:](TransparencyError, "errorWithDomain:code:errorLevel:underlyingError:description:", kTransparencyErrorInternal, -352, 4, 0, @"Identity created %@ is not current %@", a2, [v7 identity]);
      (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0, v9);
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    id v7 = 0;
  }
}

void sub_1001B9A9C(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B9AE0(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B9B24(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B9C94(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001B9EB0(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BA0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001BA0C4(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BA108(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    CFRetain(v5);
    id v7 = (void *)PCSIdentityCopyPublicKeyInfo();
    if (qword_10032F028 != -1) {
      dispatch_once(&qword_10032F028, &stru_1002C5FB8);
    }
    uint64_t v8 = (void *)qword_10032F030;
    if (os_log_type_enabled((os_log_t)qword_10032F030, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = v8;
      id v10 = [v7 kt_hexString];
      *(_DWORD *)buf = 138412290;
      id v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "rolled account key identity to %@", buf, 0xCu);
    }
    id v11 = +[TransparencyAnalytics logger];
    [v11 logSuccessForEventNamed:@"KTAccountKeyRoll"];

    id v18 = 0;
    uint64_t v12 = +[KTAccountKeyServer publicKeyInfoFromIdentity:v5 error:&v18];
    id v13 = v18;

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    CFRelease(v5);
  }
  else
  {
    if (qword_10032F028 != -1) {
      dispatch_once(&qword_10032F028, &stru_1002C5FD8);
    }
    int v14 = qword_10032F030;
    if (os_log_type_enabled((os_log_t)qword_10032F030, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v20 = v6;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "account key roll failed: %@", buf, 0xCu);
    }
    long long v15 = +[TransparencyAnalytics logger];
    [v15 logResultForEvent:@"KTAccountKeyRoll" hardFailure:1 result:v6];

    id v13 = v6;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
  long long v17 = *(const void **)(v16 + 24);
  if (v17)
  {
    *(void *)(v16 + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    CFRelease(v17);
  }
}

void sub_1001BA38C(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BA3D0(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BA64C(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BA750(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v25 = 0;
    id v7 = +[KTAccountKeyServer publicKeyInfoFromIdentity:error:](KTAccountKeyServer, "publicKeyInfoFromIdentity:error:", [v5 identity], &v25);
    id v8 = v25;
    if (!v7)
    {
      id v18 = +[TransparencyAnalytics logger];
      [v18 logResultForEvent:@"KTAccountKeySign" hardFailure:1 result:v8];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_23:

      goto LABEL_24;
    }
    if (*(void *)(a1 + 32))
    {
      [v5 identity];
      Signature = (void *)PCSIdentityCreateSignature();
      if (!Signature)
      {
        if (qword_10032F028 != -1) {
          dispatch_once(&qword_10032F028, &stru_1002C6060);
        }
        id v22 = qword_10032F030;
        if (os_log_type_enabled((os_log_t)qword_10032F030, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          id v27 = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "failed to sign data with account key: %@", buf, 0xCu);
        }

        uint64_t v23 = +[TransparencyError errorWithDomain:kTransparencyErrorInternal code:-266 description:@"failed to sign data with account key"];
        uint64_t v24 = +[TransparencyAnalytics logger];
        [v24 logResultForEvent:@"KTAccountKeySign" hardFailure:1 result:v23];

        (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        id v8 = (id)v23;
        goto LABEL_22;
      }
      if (qword_10032F028 != -1) {
        dispatch_once(&qword_10032F028, &stru_1002C6080);
      }
      id v10 = (void *)qword_10032F030;
      if (os_log_type_enabled((os_log_t)qword_10032F030, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = *(void **)(a1 + 32);
        uint64_t v12 = v10;
        id v13 = [v11 length];
        int v14 = [v7 kt_hexString];
        long long v15 = [v5 currentItemPointerModificationTime];
        *(_DWORD *)buf = 134218498;
        id v27 = v13;
        __int16 v28 = 2114;
        uint64_t v29 = v14;
        __int16 v30 = 2114;
        uint64_t v31 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Successfully signed %lu bytes with account key: %{public}@ CIPmTime: %{public}@", buf, 0x20u);
      }
    }
    else
    {
      Signature = 0;
    }
    id v19 = +[TransparencyAnalytics logger];
    [v19 logSuccessForEventNamed:@"KTAccountKeySign"];

    uint64_t v20 = *(void *)(a1 + 40);
    uint64_t v21 = [v5 currentItemPointerModificationTime];
    (*(void (**)(uint64_t, void *, void *, void *, void))(v20 + 16))(v20, v7, Signature, v21, 0);

LABEL_22:
    goto LABEL_23;
  }
  uint64_t v16 = +[TransparencyAnalytics logger];
  [v16 logResultForEvent:@"KTAccountKeySign" hardFailure:1 result:v6];

  if (qword_10032F028 != -1) {
    dispatch_once(&qword_10032F028, &stru_1002C6040);
  }
  long long v17 = qword_10032F030;
  if (os_log_type_enabled((os_log_t)qword_10032F030, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    id v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "failed to get PCS identity: %@", buf, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_24:
}

void sub_1001BABA0(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BABE4(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BAC28(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BADDC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001BADEC(uint64_t a1)
{
}

void sub_1001BADF4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  uint64_t v7 = v6;
  if (!a2 || v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
  }
  else
  {
    id v8 = [a2 identity];
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    obuint64_t j = *(id *)(v9 + 40);
    uint64_t v10 = +[KTAccountKeyServer publicKeyInfoFromIdentity:v8 error:&obj];
    objc_storeStrong((id *)(v9 + 40), obj);
    uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
}

void sub_1001BB14C(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BB190(id a1)
{
  qword_10032F030 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BBA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1001BBA50(id a1)
{
  qword_10032F068 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BBA94(id a1)
{
  qword_10032F068 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1001BBAD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001BBAE8(uint64_t a1)
{
}

void sub_1001BBAF0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1001BBB58(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_1001BBE84(id a1)
{
  qword_10032F078 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BBEC8(id a1)
{
  qword_10032F078 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BC138(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (qword_10032F070 != -1) {
    dispatch_once(&qword_10032F070, &stru_1002C61D8);
  }
  uint64_t v7 = (void *)qword_10032F078;
  if (os_log_type_enabled((os_log_t)qword_10032F078, OS_LOG_TYPE_INFO))
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = v7;
    uint64_t v10 = [v8 dsid];
    uint64_t v11 = [*(id *)(a1 + 32) altDSID];
    int v12 = 138413058;
    id v13 = v10;
    __int16 v14 = 2112;
    long long v15 = v11;
    __int16 v16 = 2112;
    uint64_t v17 = a2;
    __int16 v18 = 2112;
    id v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "PCSIdentitySetCreateManatee: %@[%@] %@: %@", (uint8_t *)&v12, 0x2Au);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001BC2A4(id a1)
{
  qword_10032F078 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BCA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1001BCA68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001BCA78(uint64_t a1)
{
}

void sub_1001BCA80(uint64_t a1)
{
  char v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) applicationID];
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8);
  obuint64_t j = *(id *)(v6 + 40);
  uint64_t v7 = [v2 createManagedObject:v3 uri:v4 serverHint:v5 error:&obj];
  objc_storeStrong((id *)(v6 + 40), obj);

  if (v7)
  {
    [v7 setSignatureResult:1];
    id v8 = [*(id *)(a1 + 40) dataStore];
    [v8 saveAndRefaultObject:v7];
  }
  uint64_t v9 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_1001BD6AC(id a1)
{
  qword_10032F088 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BD6F0(id a1)
{
  qword_10032F088 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BDDB0(id a1)
{
  qword_10032F088 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BDDF4(id a1)
{
  qword_10032F088 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BE788(id a1)
{
  qword_10032F088 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BF0E8(id a1)
{
  qword_10032F088 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BF12C(id a1)
{
  qword_10032F088 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BF170(id a1)
{
  qword_10032F088 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BF1B4(id a1)
{
  qword_10032F088 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BF1F8(id a1)
{
  qword_10032F088 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BF894(id a1)
{
  qword_10032F098 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001BFFD4(id a1)
{
  qword_10032F098 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C01D8(id a1)
{
  qword_10032F098 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C03C4(id a1)
{
  qword_10032F098 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C0A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001C0A64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (v6)
  {
    if (qword_10032F0A0 != -1) {
      dispatch_once(&qword_10032F0A0, &stru_1002C6408);
    }
    id v8 = qword_10032F0A8;
    if (os_log_type_enabled((os_log_t)qword_10032F0A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "fetchSelfVerificationInfo: error: %{public}@", buf, 0xCu);
    }
    [WeakRetained setError:v6];
    id v9 = [WeakRetained operationQueue];
    uint64_t v10 = [WeakRetained finishedOp];
    [v9 addOperation:v10];
  }
  else
  {
    if (qword_10032F0A0 != -1) {
      dispatch_once(&qword_10032F0A0, &stru_1002C6428);
    }
    uint64_t v11 = (void *)qword_10032F0A8;
    if (os_log_type_enabled((os_log_t)qword_10032F0A8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = v11;
      id v13 = [v5 selfDeviceID];
      __int16 v14 = [v13 kt_hexString];
      *(_DWORD *)buf = 138543362;
      id v27 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "fetchSelfVerificationInfo: selfInfo: deviceID: %{public}@", buf, 0xCu);
    }
    long long v15 = [v5 uriToServerLoggableDatas];
    [v15 enumerateKeysAndObjectsUsingBlock:&stru_1002C6468];

    __int16 v16 = [WeakRetained deps];
    uint64_t v17 = [v16 smDataStore];
    __int16 v18 = +[NSDate date];
    [v17 setSettingsDate:@"KTIDSLastSelfFetch" date:v18];

    id v19 = [WeakRetained deps];
    uint64_t v20 = [v19 smDataStore];
    uint64_t v21 = [WeakRetained application];
    id v25 = 0;
    unsigned __int8 v22 = [v20 storeSelfVerificationInfo:v5 application:v21 error:&v25];
    id v9 = v25;

    if (v22)
    {
      uint64_t v23 = [WeakRetained intendedState];
      [WeakRetained setNextState:v23];
    }
    else
    {
      [WeakRetained setError:v9];
    }
    uint64_t v10 = [WeakRetained operationQueue];
    uint64_t v24 = [WeakRetained finishedOp];
    [v10 addOperation:v24];
  }
}

void sub_1001C0D80(id a1)
{
  qword_10032F0A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C0DC4(id a1)
{
  qword_10032F0A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C0E08(id a1, NSString *a2, KTVerificationInfo *a3, BOOL *a4)
{
  id v5 = a2;
  id v6 = a3;
  if (qword_10032F0A0 != -1) {
    dispatch_once(&qword_10032F0A0, &stru_1002C6488);
  }
  uint64_t v7 = (void *)qword_10032F0A8;
  if (os_log_type_enabled((os_log_t)qword_10032F0A8, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = v7;
    id v9 = [(KTVerificationInfo *)v6 accountKey];
    uint64_t v10 = [v9 kt_hexString];
    uint64_t v11 = [(KTVerificationInfo *)v6 idsResponseTime];
    int v12 = [(KTVerificationInfo *)v6 serverLoggableDatas];
    int v13 = 141559042;
    uint64_t v14 = 1752392040;
    __int16 v15 = 2112;
    __int16 v16 = v5;
    __int16 v17 = 2114;
    __int16 v18 = v10;
    __int16 v19 = 2112;
    uint64_t v20 = v11;
    __int16 v21 = 1024;
    unsigned int v22 = [v12 count];
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "fetchSelfVerificationInfo: uri: %{mask.hash}@ public: %{public}@ idsResp: %@ devices: %d", (uint8_t *)&v13, 0x30u);
  }
}

void sub_1001C0F90(id a1)
{
  qword_10032F0A8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C1458(id a1)
{
  qword_10032F0B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C1500(id a1)
{
  uint64_t v1 = [[KTKVSStore alloc] initWithStoreIdentifier:@"com.apple.Transparency.KT" type:1];
  char v2 = (void *)qword_10032F0C0;
  qword_10032F0C0 = (uint64_t)v1;

  if (([(id)qword_10032F0C0 synchronize] & 1) == 0)
  {
    if (qword_10032F0B0 != -1) {
      dispatch_once(&qword_10032F0B0, &stru_1002C6510);
    }
    id v3 = qword_10032F0B8;
    if (os_log_type_enabled((os_log_t)qword_10032F0B8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "KTKVSStore failed to synchronize", v5, 2u);
    }
  }
  uint64_t v4 = +[NSNotificationCenter defaultCenter];
  [v4 addObserver:qword_10032F0C0 selector:"handleKVSStoreChange:" name:NSUbiquitousKeyValueStoreDidChangeExternallyNotification object:qword_10032F0C0];
}

void sub_1001C15FC(id a1)
{
  qword_10032F0B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C17F4(id a1)
{
  qword_10032F0B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C1838(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_10032F0B0 != -1) {
    dispatch_once(&qword_10032F0B0, &stru_1002C6550);
  }
  uint64_t v4 = qword_10032F0B8;
  if (os_log_type_enabled((os_log_t)qword_10032F0B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "KTKVSStore calling synchronizeWithCompletionHandler", v5, 2u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001C18F0(id a1)
{
  qword_10032F0B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C1A18(id a1)
{
  qword_10032F0D0 = [[KTKVSSoftStore alloc] initWithStore:0];

  _objc_release_x1();
}

void sub_1001C1CA8(id a1)
{
  qword_10032F0B8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C2234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  objc_destroyWeak(v27);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001C2284(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained manateeChanged];
}

void sub_1001C22C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained checkAllCKKSMonitoredViews];
}

void sub_1001C2304(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v1 = [WeakRetained nfs];
  [v1 trigger];
}

void sub_1001C25E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C2604(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C2648(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) views];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v2 containsObject:*(void *)(a1 + 40)];
}

id sub_1001C27AC(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  id result = [*(id *)(a1 + 32) octagonTrusted];
  if (v2 != result)
  {
    if (qword_10032F0E0 != -1) {
      dispatch_once(&qword_10032F0E0, &stru_1002C65D0);
    }
    uint64_t v4 = qword_10032F0E8;
    if (os_log_type_enabled((os_log_t)qword_10032F0E8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = *(void *)(a1 + 40) == 1;
      v11[0] = 67109120;
      v11[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Manatee status changed to: %{BOOL}d", (uint8_t *)v11, 8u);
    }
    id v6 = [*(id *)(a1 + 32) octagonObserver];

    if (v6)
    {
      uint64_t v7 = [*(id *)(a1 + 32) octagonObserver];
      ((void (**)(void, BOOL))v7)[2](v7, *(void *)(a1 + 40) != 0);
    }
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = [*(id *)(a1 + 32) views];
    uint64_t v10 = v9;
    if (v8 == 1) {
      [v9 addObject:@"Manatee"];
    }
    else {
      [v9 removeAllObjects];
    }

    return [*(id *)(a1 + 32) setOctagonTrusted:*(void *)(a1 + 40)];
  }
  return result;
}

void sub_1001C291C(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

intptr_t sub_1001C2ACC(uint64_t a1)
{
  [*(id *)(a1 + 32) manateeChanged];
  id v2 = *(NSObject **)(a1 + 40);

  return dispatch_semaphore_signal(v2);
}

void sub_1001C2B08(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C2CC8(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C2E8C(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C31FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001C321C(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C3260(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (!a3)
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    id v7 = [v5 countByEnumeratingWithState:&v19 objects:v27 count:16];
    if (v7)
    {
      id v9 = v7;
      uint64_t v10 = *(void *)v20;
      *(void *)&long long v8 = 138412546;
      long long v18 = v8;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v20 != v10) {
            objc_enumerationMutation(v6);
          }
          int v12 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v11);
          int v13 = [v12 objectForKeyedSubscript:@"view" v18];
          unsigned __int8 v14 = [v13 isEqualToString:@"global"];

          if ((v14 & 1) == 0)
          {
            __int16 v15 = [v12 objectForKeyedSubscript:@"keystate"];
            if ([v15 isEqualToString:@"ready"])
            {
              *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
            }
            else
            {
              if (qword_10032F0E0 != -1) {
                dispatch_once(&qword_10032F0E0, &stru_1002C6670);
              }
              __int16 v16 = qword_10032F0E8;
              if (os_log_type_enabled((os_log_t)qword_10032F0E8, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v17 = *(void *)(a1 + 40);
                *(_DWORD *)buf = v18;
                uint64_t v24 = v15;
                __int16 v25 = 2112;
                uint64_t v26 = v17;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "View state %@ for view: %@", buf, 0x16u);
              }
            }
          }
          uint64_t v11 = (char *)v11 + 1;
        }
        while (v9 != v11);
        id v9 = [v6 countByEnumeratingWithState:&v19 objects:v27 count:16];
      }
      while (v9);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1001C3474(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C34B8(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C34FC(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C35F4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) views];
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1001C3714(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) views];
  [v2 addObject:*(void *)(a1 + 40)];
}

void sub_1001C39BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001C39EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001C39FC(uint64_t a1)
{
}

void sub_1001C3A04(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) views];
  id v2 = [v5 copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1001C3A68(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C3D28(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C3D6C(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C3DB0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) views];
  [v2 removeObject:*(void *)(a1 + 40)];
}

void sub_1001C3F04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_10032F0E0 != -1) {
    dispatch_once(&qword_10032F0E0, &stru_1002C6758);
  }
  uint64_t v4 = qword_10032F0E8;
  if (os_log_type_enabled((os_log_t)qword_10032F0E8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CKKS sync completed: %@", (uint8_t *)&v6, 0xCu);
  }
  if (v3) {
    v5.n128_u64[0] = 0x4082C00000000000;
  }
  else {
    v5.n128_u64[0] = 0;
  }
  (*(void (**)(__n128))(*(void *)(a1 + 32) + 16))(v5);
}

void sub_1001C400C(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C4224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_1001C423C(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  if (qword_10032F0E0 != -1) {
    dispatch_once(&qword_10032F0E0, &stru_1002C6778);
  }
  uint64_t v4 = qword_10032F0E8;
  if (os_log_type_enabled((os_log_t)qword_10032F0E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 134218242;
    uint64_t v8 = a2;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Known state state %lu for view: %@", (uint8_t *)&v7, 0x16u);
  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1001C4334(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C4378(id a1)
{
  qword_10032F0E8 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C4A5C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = a2;
  uint64_t v4 = [v3 configBag];
  [v4 doubleForKey:@"idms-fetch-time"];
  [*(id *)(a1 + 32) setOverrideIDMSFetchTime:];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001C4B98(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v5 = a2;
  uint64_t v4 = [v3 configBag];
  [v4 doubleForKey:@"idms-fetch-time"];
  [*(id *)(a1 + 32) setOverrideIDMSFetchTime:];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1001C4D50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001C5438(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C547C(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C54C0(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C5634(id *a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = (void (*)(void))*((void *)a1[6] + 2);
    v3();
  }
  else
  {
    uint64_t v4 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [a1[4] application]);
    id v5 = +[TransparencyApplication applicationIdentifierForValue:v4];

    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int v7 = [KTLogNetworkRequest alloc];
    uint64_t v8 = [a1[5] publicKeysURI];
    id v9 = [(KTLogNetworkRequest *)v7 initGETWithURL:v8 application:v5];

    [v9 setAuthenticated:0];
    [v9 setUseReversePush:0];
    id v10 = a1[5];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001C57D4;
    v12[3] = &unk_1002C68B0;
    v12[4] = v10;
    id v13 = v5;
    CFAbsoluteTime v15 = Current;
    id v14 = a1[6];
    id v11 = v5;
    [v10 fetchRequest:v9 completionHandler:v12];
  }
}

void sub_1001C57D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v8 = @"Failed";
  if (!v6) {
    uint64_t v8 = @"Success";
  }
  id v9 = v8;
  id v10 = v6;
  id v39 = v9;
  if (v6)
  {
    if (qword_10032F0F8 != -1) {
      dispatch_once(&qword_10032F0F8, &stru_1002C6888);
    }
    id v11 = (void *)qword_10032F100;
    if (os_log_type_enabled((os_log_t)qword_10032F100, OS_LOG_TYPE_ERROR))
    {
      int v12 = v11;
      id v13 = [v5 serverHint];
      *(_DWORD *)buf = 138543618;
      unsigned __int8 v42 = v13;
      __int16 v43 = 2112;
      id v44 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "public keys request failed with ServerHint %{public}@: %@", buf, 0x16u);
    }
    id v14 = 0;
    id v15 = v10;
    __int16 v16 = v10;
  }
  else
  {
    if (qword_10032F0F8 != -1) {
      dispatch_once(&qword_10032F0F8, &stru_1002C6868);
    }
    id v38 = v10;
    uint64_t v17 = (void *)qword_10032F100;
    if (os_log_type_enabled((os_log_t)qword_10032F100, OS_LOG_TYPE_DEFAULT))
    {
      long long v18 = v17;
      long long v19 = [v5 serverHint];
      *(_DWORD *)buf = 138543362;
      unsigned __int8 v42 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "public keys request succeeded with ServerHint %{public}@", buf, 0xCu);
    }
    long long v20 = [*(id *)(a1 + 32) transparencyAnalytics];
    long long v21 = [(id)objc_opt_class() logger];
    long long v22 = [v5 data];
    uint64_t v23 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v22 length]);
    uint64_t v24 = [*(id *)(a1 + 32) transparencyAnalytics];
    __int16 v25 = [(id)objc_opt_class() formatEventName:@"NetworkPublicKeysSize" application:*(void *)(a1 + 40)];
    [v21 logMetric:v23 withName:v25];

    uint64_t v26 = [v5 data];
    id v40 = 0;
    id v14 = +[TransparencyGPBMessage parseFromData:v26 error:&v40];
    id v15 = v40;

    id v27 = [v5 serverHint];
    [v14 setMetadataValue:v27 key:kTransparencyResponseMetadataKeyServerHint];

    __int16 v28 = +[NSDate now];
    uint64_t v29 = [v28 kt_dateToString];
    [v14 setMetadataValue:v29 key:@"ResponseTime"];

    __int16 v16 = v38;
  }
  __int16 v30 = [*(id *)(a1 + 32) transparencyAnalytics];
  uint64_t v31 = [(id)objc_opt_class() logger];
  id v32 = [*(id *)(a1 + 32) transparencyAnalytics];
  id v33 = [(id)objc_opt_class() formatEventName:@"NetworkPublicKeysEvent" application:*(void *)(a1 + 40)];
  [v31 logResultForEvent:v33 hardFailure:1 result:v15];

  long long v34 = [*(id *)(a1 + 32) transparencyAnalytics];
  id v35 = [(id)objc_opt_class() logger];
  __int16 v36 = +[NSNumber numberWithDouble:Current - *(double *)(a1 + 56)];
  long long v37 = +[KTLogClient formatEventName:@"NetworkPublicKeysTime" application:*(void *)(a1 + 40) state:v39];
  [v35 logMetric:v36 withName:v37];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1001C5C4C(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C5C90(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C5EB0(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C5EF4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
    v3();
  }
  else
  {
    uint64_t v4 = [KTLogNetworkRequest alloc];
    id v5 = [*(id *)(a1 + 32) reportToAppleURI];
    id v6 = [(KTLogNetworkRequest *)v4 initPOSTWithURL:v5 data:*(void *)(a1 + 40) uuid:*(void *)(a1 + 48) application:*(void *)(a1 + 56)];

    [v6 setAdditionalHeaders:&off_1002DA3F8];
    [v6 setAllowEmptyData:1];
    [v6 setAuthenticated:1];
    [v6 setUseReversePush:objc_msgSend(*(id *)(a1 + 32), "shouldUseReversePush:", 1)];
    int v7 = *(void **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001C6044;
    v8[3] = &unk_1002C6920;
    id v9 = *(id *)(a1 + 64);
    [v7 fetchRequest:v6 completionHandler:v8];
  }
}

void sub_1001C6044(uint64_t a1, void *a2, void *a3)
{
  if (a3)
  {
    id v5 = a3;
    id v6 = a2;
    int v7 = [v5 userInfo];
    id v8 = [v7 mutableCopy];

    id v9 = [v6 serverHint];

    [v8 setObject:v9 forKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];
    id v10 = [v5 domain];
    id v11 = [v5 code];

    id v12 = +[NSError errorWithDomain:v10 code:v11 userInfo:v8];
  }
  else
  {
    id v12 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001C6334(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double Current = CFAbsoluteTimeGetCurrent();
  id v8 = [*(id *)(a1 + 32) transparencyAnalytics];
  id v9 = objc_opt_class();
  if (*(unsigned char *)(a1 + 72)) {
    CFStringRef v10 = @"ReversePushFetchEvent";
  }
  else {
    CFStringRef v10 = @"NetworkFetchEvent";
  }
  id v11 = [v9 formatEventName:v10 application:*(void *)(a1 + 40)];

  id v12 = [*(id *)(a1 + 32) transparencyAnalytics];
  id v13 = objc_opt_class();
  id v39 = 0;
  __int16 v28 = _NSConcreteStackBlock;
  uint64_t v29 = 3221225472;
  __int16 v30 = sub_1001C65B8;
  uint64_t v31 = &unk_1002C69B0;
  id v14 = v5;
  id v32 = v14;
  id v15 = v6;
  id v33 = v15;
  id v34 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 32);
  long long v18 = *(void **)(a1 + 40);
  id v37 = v16;
  uint64_t v35 = v17;
  char v38 = *(unsigned char *)(a1 + 72);
  id v36 = v18;
  [v13 doWithAnalyticsForEventName:v11 error:&v39 block:&v28];
  id v19 = v39;

  long long v20 = @"Failed";
  if (!v15)
  {
    long long v21 = [v14 data:v28, v29, v30, v31, v32, v33, v34, v35];
    long long v22 = @"Success";
    if (!v21) {
      long long v22 = @"Failed";
    }
    long long v20 = v22;
  }
  uint64_t v23 = [*(id *)(a1 + 32) transparencyAnalytics:v28, v29, v30, v31];
  uint64_t v24 = [(id)objc_opt_class() logger];
  __int16 v25 = +[NSNumber numberWithDouble:Current - *(double *)(a1 + 64)];
  if (*(unsigned char *)(a1 + 72)) {
    CFStringRef v26 = @"ReversePushFetchTime";
  }
  else {
    CFStringRef v26 = @"NetworkFetchTime";
  }
  id v27 = +[KTLogClient formatEventName:v26 application:*(void *)(a1 + 40) state:v20];
  [v24 logMetric:v25 withName:v27];
}

uint64_t sub_1001C65B8(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void **)(a1 + 32);
  if (v6
    && ([v6 data], (int v7 = objc_claimAutoreleasedReturnValue()) != 0)
    && (uint64_t v8 = *(void *)(a1 + 40), v7, !v8))
  {
    if (qword_10032F0F8 != -1) {
      dispatch_once(&qword_10032F0F8, &stru_1002C6988);
    }
    id v19 = (void *)qword_10032F100;
    if (os_log_type_enabled((os_log_t)qword_10032F100, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(a1 + 48);
      long long v21 = *(void **)(a1 + 32);
      long long v22 = v19;
      uint64_t v23 = [v21 request];
      if ([v23 useReversePush]) {
        CFStringRef v24 = @" with reverse push";
      }
      else {
        CFStringRef v24 = &stru_1002CE4C0;
      }
      __int16 v25 = [*(id *)(a1 + 32) serverHint];
      int v34 = 138543874;
      uint64_t v35 = v20;
      __int16 v36 = 2114;
      CFStringRef v37 = v24;
      __int16 v38 = 2114;
      id v39 = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "fetchId %{public}@%{public}@ succeeded with ServerHint %{public}@", (uint8_t *)&v34, 0x20u);
    }
    CFStringRef v26 = [*(id *)(a1 + 56) transparencyAnalytics];
    id v27 = [(id)objc_opt_class() logger];
    __int16 v28 = [*(id *)(a1 + 32) data];
    uint64_t v29 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v28 length]);
    __int16 v30 = [*(id *)(a1 + 56) transparencyAnalytics];
    uint64_t v31 = objc_opt_class();
    if (*(unsigned char *)(a1 + 80)) {
      CFStringRef v32 = @"ReversePushFetchSize";
    }
    else {
      CFStringRef v32 = @"NetworkFetchSize";
    }
    id v33 = [v31 formatEventName:v32 application:*(void *)(a1 + 64)];
    [v27 logMetric:v29 withName:v33];

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    return 1;
  }
  else
  {
    if (a3)
    {
      CFStringRef v42 = @"requestUUID";
      id v9 = [*(id *)(a1 + 48) UUIDString];
      __int16 v43 = v9;
      *a3 = +[NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
    }
    if (qword_10032F0F8 != -1) {
      dispatch_once(&qword_10032F0F8, &stru_1002C6968);
    }
    CFStringRef v10 = (void *)qword_10032F100;
    if (os_log_type_enabled((os_log_t)qword_10032F100, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a1 + 48);
      id v12 = *(void **)(a1 + 32);
      id v13 = v10;
      id v14 = [v12 request];
      if ([v14 useReversePush]) {
        CFStringRef v15 = @" with reverse push";
      }
      else {
        CFStringRef v15 = &stru_1002CE4C0;
      }
      id v16 = [*(id *)(a1 + 32) serverHint];
      uint64_t v17 = *(void *)(a1 + 40);
      int v34 = 138544130;
      uint64_t v35 = v11;
      __int16 v36 = 2114;
      CFStringRef v37 = v15;
      __int16 v38 = 2114;
      id v39 = v16;
      __int16 v40 = 2112;
      uint64_t v41 = v17;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "fetchId %{public}@%{public}@ failed with ServerHint %{public}@: %@", (uint8_t *)&v34, 0x2Au);
    }
    if (a2) {
      *a2 = *(id *)(a1 + 40);
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    return 0;
  }
}

void sub_1001C696C(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C69B0(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C6BBC(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C6C00(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v3();
  }
  else
  {
    uint64_t v4 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) application]);
    id v5 = +[TransparencyApplication applicationIdentifierForValue:v4];

    uint64_t v7 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    uint64_t v8 = [v6 batchQueryURI];
    uint64_t v9 = *(unsigned __int8 *)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    _DWORD v11[2] = sub_1001C6D78;
    v11[3] = &unk_1002C6A20;
    uint64_t v10 = *(void *)(a1 + 48);
    id v13 = *(id *)(a1 + 56);
    id v12 = *(id *)(a1 + 32);
    [v6 fetchMessage:v7 uri:v8 uuid:v10 application:v5 userInitiated:v9 completionHandler:v11];
  }
}

void sub_1001C6D78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && ([v5 data], uint64_t v7 = objc_claimAutoreleasedReturnValue(), v7, !v6) && v7)
  {
    uint64_t v8 = [v5 data];
    id v15 = 0;
    uint64_t v9 = +[TransparencyGPBMessage parseFromData:v8 error:&v15];
    id v10 = v15;

    uint64_t v11 = [v5 serverHint];
    [v9 setMetadataValue:v11 key:kTransparencyResponseMetadataKeyServerHint];
    id v12 = +[NSDate now];
    id v13 = [v12 kt_dateToString];
    [v9 setMetadataValue:v13 key:@"ResponseTime"];

    id v14 = [v5 request];
    LODWORD(v13) = [v14 useReversePush];

    if (v13) {
      [v9 setMetadataValue:@"YES" key:@"APS"];
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1001C7354(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C7398(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C73DC(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  id v2 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v2);
}

uint64_t sub_1001C7428(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001C758C(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C7794(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C77D8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v3();
  }
  else
  {
    uint64_t v4 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) application]);
    id v5 = +[TransparencyApplication applicationIdentifierForValue:v4];

    uint64_t v7 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    uint64_t v8 = [v6 queryURI];
    uint64_t v9 = *(unsigned __int8 *)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    _DWORD v11[2] = sub_1001C7938;
    v11[3] = &unk_1002C6920;
    uint64_t v10 = *(void *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    [v6 fetchMessage:v7 uri:v8 uuid:v10 application:v5 userInitiated:v9 completionHandler:v11];
  }
}

void sub_1001C7938(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && ([v5 data], uint64_t v7 = objc_claimAutoreleasedReturnValue(), v7, !v6) && v7)
  {
    uint64_t v8 = [v5 data];
    id v15 = 0;
    uint64_t v9 = +[TransparencyGPBMessage parseFromData:v8 error:&v15];
    id v10 = v15;

    uint64_t v11 = [v5 serverHint];
    [v9 setMetadataValue:v11 key:kTransparencyResponseMetadataKeyServerHint];
    id v12 = +[NSDate now];
    id v13 = [v12 kt_dateToString];
    [v9 setMetadataValue:v13 key:@"ResponseTime"];

    id v14 = [v5 request];
    LODWORD(v13) = [v14 useReversePush];

    if (v13) {
      [v9 setMetadataValue:@"YES" key:@"APS"];
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1001C7C2C(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C7E28(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C7E6C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v3();
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = [v4 consistencyProofURI];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001C7F74;
    v8[3] = &unk_1002C6920;
    uint64_t v7 = *(void *)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    [v4 fetchMessage:v5 uri:v6 uuid:v7 application:0 userInitiated:0 completionHandler:v8];
  }
}

void sub_1001C7F74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && ([v5 data], uint64_t v7 = objc_claimAutoreleasedReturnValue(), v7, !v6) && v7)
  {
    uint64_t v8 = [v5 data];
    id v15 = 0;
    id v9 = +[TransparencyGPBMessage parseFromData:v8 error:&v15];
    id v10 = v15;

    uint64_t v11 = [v5 serverHint];
    [v9 setMetadataValue:v11 key:kTransparencyResponseMetadataKeyServerHint];
    id v12 = +[NSDate now];
    id v13 = [v12 kt_dateToString];
    [v9 setMetadataValue:v13 key:@"ResponseTime"];

    id v14 = [v5 request];
    LODWORD(v13) = [v14 useReversePush];

    if (v13) {
      [v9 setMetadataValue:@"YES" key:@"APS"];
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1001C82D0(id a1)
{
  qword_10032F100 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001C8314(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v3();
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = [v4 revisionLogProofURI];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1001C841C;
    v8[3] = &unk_1002C6920;
    uint64_t v7 = *(void *)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    [v4 fetchMessage:v5 uri:v6 uuid:v7 application:0 userInitiated:0 completionHandler:v8];
  }
}

void sub_1001C841C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && ([v5 data], uint64_t v7 = objc_claimAutoreleasedReturnValue(), v7, !v6) && v7)
  {
    uint64_t v8 = [v5 data];
    id v15 = 0;
    id v9 = +[TransparencyGPBMessage parseFromData:v8 error:&v15];
    id v10 = v15;

    uint64_t v11 = [v5 serverHint];
    [v9 setMetadataValue:v11 key:kTransparencyResponseMetadataKeyServerHint];
    id v12 = +[NSDate now];
    id v13 = [v12 kt_dateToString];
    [v9 setMetadataValue:v13 key:@"ResponseTime"];

    id v14 = [v5 request];
    LODWORD(v13) = [v14 useReversePush];

    if (v13) {
      [v9 setMetadataValue:@"YES" key:@"APS"];
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1001C886C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1001C8894(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueResetReachabilityDependency];
}

void sub_1001C889C(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  nw_path_status_t status = nw_path_get_status(v3);

  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v6 = @"unavailable";
    if (status == nw_path_status_satisfied) {
      CFStringRef v6 = @"available";
    }
    int v7 = 138412290;
    CFStringRef v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "nw_path update: network is %@", (uint8_t *)&v7, 0xCu);
  }
  [WeakRetained _onqueueSetNetworkReachability:status == nw_path_status_satisfied];
}

void sub_1001C8AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1001C8AC8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) haveNetwork];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1001C8E64(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_1001C8E94(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = [WeakRetained haveNetwork];
  BOOL v3 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v3)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Network available", buf, 2u);
    }
  }
  else
  {
    if (v3)
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v7 = 0x4028000000000000;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Network still not available, retrying after waiting %2.1f hours", buf, 0xCu);
    }
    uint64_t v4 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001C8FE8;
    block[3] = &unk_1002B6CF8;
    void block[4] = WeakRetained;
    dispatch_async(v4, block);
  }
}

id sub_1001C8FE8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueResetReachabilityDependency];
}

void sub_1001C8FF0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v3 = WeakRetained;
    unsigned int v2 = [WeakRetained timer];

    id WeakRetained = v3;
    if (v2)
    {
      [v3 _onQueueRunReachabilityDependency];
      id WeakRetained = v3;
    }
  }
}

id sub_1001C91AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueSetNetworkReachability:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1001C9E70(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CA14C(void *a1)
{
  unsigned int v2 = (void *)a1[7];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  id v13 = 0;
  id v5 = [v2 getOptInHistory:v3 store:v4 error:&v13];
  unint64_t v6 = (unint64_t)v13;
  uint64_t v7 = [v5 lastObject];

  if (!(v7 | v6))
  {
    id v12 = *(void (**)(void))(a1[6] + 16);
LABEL_6:
    v12();
    goto LABEL_7;
  }
  if (!v7)
  {
    id v12 = *(void (**)(void))(a1[6] + 16);
    goto LABEL_6;
  }
  CFStringRef v8 = [(id)v7 objectAtIndexedSubscript:1];
  id v9 = [v8 BOOLValue];

  uint64_t v10 = a1[6];
  uint64_t v11 = [(id)v7 objectAtIndexedSubscript:0];
  (*(void (**)(uint64_t, id, void *, void))(v10 + 16))(v10, v9, v11, 0);

LABEL_7:
}

uint64_t sub_1001CA268(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

int64_t sub_1001CA874(id a1, NSArray *a2, NSArray *a3)
{
  uint64_t v4 = a3;
  id v5 = [(NSArray *)a2 objectAtIndexedSubscript:0];
  unint64_t v6 = [(NSArray *)v4 objectAtIndexedSubscript:0];

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_1001CAEC8(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    uint64_t v3 = +[TransparencyAnalytics logger];
    [v3 logResultForEvent:*(void *)(a1 + 32) hardFailure:1 result:v4];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    [*(id *)(a1 + 40) getOptInState:*(void *)(a1 + 48)];
  }
}

void sub_1001CB084(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) stateMachine];

  if (v2)
  {
    uint64_t v3 = [*(id *)(a1 + 32) stateMachine];
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [*(id *)(a1 + 32) applicationId];
    id v9 = 0;
    id v10 = 0;
    [v3 changeOptInState:v4 application:v5 loggableData:&v10 error:&v9];
    id v6 = v10;
    id v7 = v9;

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v8 = +[TransparencyError errorWithDomain:kTransparencyErrorInternal code:-120 description:@"this opt-in manager does not have a context and/or state machine, cannot change opt-in state"];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_1001CB780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CB7AC(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CB7F0(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CB834(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CB878(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CB8BC(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CB900(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!v5 || v6)
  {
    if (qword_10032F108 != -1) {
      dispatch_once(&qword_10032F108, &stru_1002C6D28);
    }
    uint64_t v17 = qword_10032F110;
    if (os_log_type_enabled((os_log_t)qword_10032F110, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "failed to check opt-in after CDP reset, network failure: %@", buf, 0xCu);
    }
  }
  else
  {
    id v8 = [v5 metadata];
    id v9 = [v8 objectForKeyedSubscript:@"ResponseTime"];
    id v10 = +[NSDate kt_dateFromString:v9];

    uint64_t v11 = [WeakRetained context];
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    id v21 = 0;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    void v18[2] = sub_1001CBBD0;
    v18[3] = &unk_1002C6D90;
    id v19 = *(id *)(a1 + 48);
    id v20 = WeakRetained;
    id v14 = [v11 handleQueryResponse:v5 queryRequest:v12 receiptDate:v10 fetchId:v13 error:&v21 transparentDataHandler:v18];
    id v15 = v21;

    if (v14 != (id)1)
    {
      if (qword_10032F108 != -1) {
        dispatch_once(&qword_10032F108, &stru_1002C6DB0);
      }
      id v16 = qword_10032F110;
      if (os_log_type_enabled((os_log_t)qword_10032F110, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "failed to check opt-in after CDP reset, KT server failure: %@", buf, 0xCu);
      }
    }
  }
}

void sub_1001CBB8C(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CBBD0(uint64_t a1, uint64_t a2, void *a3)
{
  if ([a3 currentAccountOptInState] == (id)1)
  {
    if (qword_10032F108 != -1) {
      dispatch_once(&qword_10032F108, &stru_1002C6D48);
    }
    uint64_t v4 = (void *)qword_10032F110;
    if (os_log_type_enabled((os_log_t)qword_10032F110, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v5 = *(void **)(a1 + 40);
      id v7 = v4;
      id v8 = [v5 applicationId];
      *(_DWORD *)buf = 141558530;
      uint64_t v17 = 1752392040;
      __int16 v18 = 2112;
      uint64_t v19 = v6;
      __int16 v20 = 2114;
      id v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{mask.hash}@ was opted in to %{public}@ before CDP Reset, sending change notification", buf, 0x20u);
    }
    id v9 = +[NSDistributedNotificationCenter defaultCenter];
    id v10 = [*(id *)(a1 + 40) notificationKey];
    [v9 postNotificationName:v10 object:0 userInfo:0 deliverImmediately:1];

    uint64_t v11 = +[TransparencyFollowup instance];
    id v15 = 0;
    unsigned __int8 v12 = [v11 clearAllFollowups:&v15];
    id v13 = v15;

    if ((v12 & 1) == 0)
    {
      if (qword_10032F108 != -1) {
        dispatch_once(&qword_10032F108, &stru_1002C6D68);
      }
      id v14 = qword_10032F110;
      if (os_log_type_enabled((os_log_t)qword_10032F110, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v17 = (uint64_t)v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "failed to clear existing follow ups on CDP reset: %@", buf, 0xCu);
      }
    }
  }
}

void sub_1001CBDE8(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CBE2C(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CBE70(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CC110(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CC154(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CC198(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CC2FC(id a1)
{
  qword_10032F110 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CC504(id a1)
{
  bzero(&v3, 0x500uLL);
  uname(&v3);
  uint64_t v1 = +[NSString stringWithCString:v3.machine encoding:4];
  unsigned int v2 = (void *)qword_10032F118;
  qword_10032F118 = v1;
}

void sub_1001CCB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CCB7C(id a1)
{
  qword_10032F130 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CCBC0(uint64_t a1, char a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  utsname v3 = [WeakRetained intendedState];
  [WeakRetained setNextState:v3];

  if ((a2 & 1) == 0)
  {
    uint64_t v4 = [WeakRetained stateMachine];
    id v5 = [[KTPendingFlag alloc] initWithFlag:@"RepairIDSFlag" conditions:2 delayInSeconds:43200.0];
    [v4 handlePendingFlag:v5];
  }
  uint64_t v6 = [WeakRetained operationQueue];
  id v7 = [WeakRetained finishedOp];
  [v6 addOperation:v7];
}

void sub_1001CD2E8(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CD32C(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CD370(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CD3B4(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CD52C(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CD790(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CD82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_1001CE028(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CE374(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CE3B8(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CE3FC(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CE440(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CE5DC(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CEB20(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CEB64(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CEBA8(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CEBEC(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CEC30(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CEE40(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CEE84(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CF070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CF088(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001CF098(uint64_t a1)
{
}

id sub_1001CF0A0(uint64_t a1)
{
  unsigned int v2 = +[TransparencyAnalytics formatEventName:@"LogBeginMs" application:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  utsname v3 = +[TransparencyAnalytics formatEventName:@"InResetWindow" application:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  uint64_t v4 = +[TransparencyAnalytics formatEventName:@"ktTLTLogBeginMs" application:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  v12[0] = v4;
  id v5 = [*(id *)(a1 + 32) keyBag];
  uint64_t v6 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v5 tltLogBeginningMs]);
  v13[0] = v6;
  v12[1] = v2;
  id v7 = [*(id *)(a1 + 32) keyBag];
  id v8 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v7 patLogBeginningMs]);
  v13[1] = v8;
  v12[2] = v3;
  id v9 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) inResetWindow]);
  int v13[2] = v9;
  id v10 = +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:3];

  return v10;
}

void sub_1001CF444(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CFA90(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CFAD4(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CFB18(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v13 = 0;
  id v3 = [v2 createManagedObjectWithError:&v13];
  id v4 = v13;
  if (!v3)
  {
    id v5 = *(void **)(a1 + 32);
    id v12 = v4;
    id v3 = [v5 copyManagedObject:&v12];
    id v6 = v12;

    id v4 = v6;
  }
  [v3 setUnsigned:"signatureVerified" value:1];
  [v3 setUnsigned:"inclusionVerified" value:1];
  id v7 = *(void **)(a1 + 40);
  id v11 = v4;
  unsigned __int8 v8 = [v7 persistWithError:&v11];
  id v9 = v11;

  if ((v8 & 1) == 0)
  {
    if (qword_10032F138 != -1) {
      dispatch_once(&qword_10032F138, &stru_1002C71E0);
    }
    id v10 = qword_10032F140;
    if (os_log_type_enabled((os_log_t)qword_10032F140, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "failed to save signature result for STH: %@", buf, 0xCu);
    }
    [*(id *)(a1 + 40) reportCoreDataPersistEventForLocation:@"verifySTHSignature" underlyingError:v9];
  }
}

void sub_1001CFCAC(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CFCF0(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CFD34(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CFD78(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v11 = 0;
  id v3 = [v2 createManagedObjectWithError:&v11];
  id v4 = v11;
  if (v3)
  {
    [*(id *)(a1 + 40) onMocSetMapHead:v3 signatureResult:1 signatureError:0];
    [*(id *)(a1 + 40) onMocSetMapHead:v3 inclusionResult:1 inclusionError:0];
    [*(id *)(a1 + 40) onMocSetMapHead:v3 mmdResult:1 mmdError:0];
    id v5 = *(void **)(a1 + 40);
    id v10 = v4;
    unsigned __int8 v6 = [v5 persistWithError:&v10];
    id v7 = v10;

    if ((v6 & 1) == 0)
    {
      if (qword_10032F138 != -1) {
        dispatch_once(&qword_10032F138, &stru_1002C7260);
      }
      unsigned __int8 v8 = qword_10032F140;
      if (os_log_type_enabled((os_log_t)qword_10032F140, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "failed persist SMH: %@", buf, 0xCu);
      }
    }
    id v4 = v7;
  }
  else
  {
    if (qword_10032F138 != -1) {
      dispatch_once(&qword_10032F138, &stru_1002C7240);
    }
    id v9 = qword_10032F140;
    if (os_log_type_enabled((os_log_t)qword_10032F140, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to create SMH object: %@", buf, 0xCu);
    }
  }
}

void sub_1001CFF58(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001CFF9C(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D01DC(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D05B8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001D0668(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001D0708(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001D0BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

uint64_t sub_1001D0C90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001D1034(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D1078(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D15A8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001D16F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001D187C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    unsigned __int8 v6 = [*(id *)(a1 + 32) applicationKeyStores];
    id v7 = [v6 objectForKeyedSubscript:*(void *)(a1 + 40)];

    if (v7)
    {
      unsigned int v8 = [v7 readyWithRefresh:0];
      id v9 = [v7 contextStore];

      if (!v9)
      {
        if (qword_10032F138 != -1) {
          dispatch_once(&qword_10032F138, &stru_1002C72E0);
        }
        id v10 = qword_10032F140;
        if (os_log_type_enabled((os_log_t)qword_10032F140, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "fetchKeyStore: application key store present with no context", buf, 2u);
        }
        if (qword_10032F138 != -1) {
          dispatch_once(&qword_10032F138, &stru_1002C7300);
        }
        id v11 = (void *)qword_10032F140;
        if (os_log_type_enabled((os_log_t)qword_10032F140, OS_LOG_TYPE_DEBUG))
        {
          id v12 = *(void **)(a1 + 56);
          id v13 = v11;
          id v14 = [v12 followup];
          CFStringRef v15 = @"YES";
          if (!v14) {
            CFStringRef v15 = @"NO";
          }
          *(_DWORD *)buf = 138412290;
          CFStringRef v37 = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "fetchKeyStore: followup controller exists? %@", buf, 0xCu);
        }
        [v7 setContextStore:*(void *)(a1 + 56)];
      }
      id v16 = [*(id *)(a1 + 48) dataStore];
      uint64_t v34 = 0;
      uint64_t v17 = (id *)&v34;
      [v7 updateWithPublicKeyResponse:v5 dataStore:v16 error:&v34];
    }
    else
    {
      __int16 v18 = *(void **)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 40);
      id v16 = [*(id *)(a1 + 48) dataStore];
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v35 = 0;
      uint64_t v17 = (id *)&v35;
      id v7 = [v18 createApplicationKeyStore:v19 keyStoreResponse:v5 dataStore:v16 contextStore:v20 error:&v35];
      unsigned int v8 = 1;
    }
    id v21 = (__CFString *)*v17;

    [*(id *)(a1 + 32) updateTLTKeyStoreWithApplicationKeyStore:v7];
    if (!v7 || v21)
    {
      if (qword_10032F138 != -1) {
        dispatch_once(&qword_10032F138, &stru_1002C7320);
      }
      __int16 v28 = (void *)qword_10032F140;
      if (os_log_type_enabled((os_log_t)qword_10032F140, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v29 = *(const __CFString **)(a1 + 40);
        __int16 v30 = v28;
        uint64_t v31 = [v5 data];
        CFStringRef v32 = [v31 kt_hexString];
        *(_DWORD *)buf = 138412802;
        CFStringRef v37 = v29;
        __int16 v38 = 2112;
        id v39 = v32;
        __int16 v40 = 2112;
        uint64_t v41 = v21;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "failed to configure application '%@' keystore with PublicKeysResponse: %@. Error: %@", buf, 0x20u);
      }
    }
    else
    {
      if (((v8 | [v7 readyWithRefresh:0] ^ 1) & 1) == 0)
      {
        if (qword_10032F138 != -1) {
          dispatch_once(&qword_10032F138, &stru_1002C7340);
        }
        long long v22 = qword_10032F140;
        if (os_log_type_enabled((os_log_t)qword_10032F140, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v23 = *(const __CFString **)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          CFStringRef v37 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Retrying pending validations after refreshing old %@ key store", buf, 0xCu);
        }
        CFStringRef v24 = [v7 delegate];
        [v24 retryPendingValidations:*(void *)(a1 + 40)];
      }
      uint64_t v25 = [v7 delegate];
      [(id)v25 triggerStatusUpdate:*(void *)(a1 + 40)];

      [*(id *)(a1 + 32) setForceRefresh:0];
      CFStringRef v26 = *(void **)(a1 + 32);
      id v33 = 0;
      LOBYTE(v25) = [v26 saveDiskApplicationKeyStore:v7 error:&v33];
      id v21 = (__CFString *)v33;
      if ((v25 & 1) == 0)
      {
        if (qword_10032F138 != -1) {
          dispatch_once(&qword_10032F138, &stru_1002C7360);
        }
        id v27 = qword_10032F140;
        if (os_log_type_enabled((os_log_t)qword_10032F140, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          CFStringRef v37 = v21;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "failed to write keys to disk: %@", buf, 0xCu);
        }
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_1001D1D64(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D1DA8(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D1DEC(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D1E30(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D1E74(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D2290(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v3, *(void *)(a1 + 32), a2);
  }
  id v4 = [*(id *)(a1 + 40) configureGroup];
  dispatch_group_leave(v4);
}

uint64_t sub_1001D22FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0);
  }
  return result;
}

void sub_1001D2868(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001D2894(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D28D8(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D291C(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D2960(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D2C68(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D2CAC(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D2E68(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D31BC(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D3200(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D3244(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D3820(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D3864(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D38A8(id a1)
{
  qword_10032F140 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D3FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D3FCC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001D3FDC(uint64_t a1)
{
}

void sub_1001D3FE4(uint64_t a1, void *a2)
{
}

void sub_1001D4900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_1001D4934(uint64_t a1, uint64_t a2)
{
  id v4 = +[KTStatusServer auditorReportForKTRequest:a2];
  if (v4)
  {
    uint64_t v3 = [*(id *)(a1 + 32) UUIDString];
    [v4 setObject:v3 forKeyedSubscript:kTransparencyAuditorReportUUID];
  }
  [*(id *)(a1 + 40) addObject:v4];
}

void sub_1001D49C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 request];

  if (v4)
  {
    id v5 = [v3 request];
    uint64_t v6 = +[KTStatusServer auditorReportForKTRequest:v5];
  }
  else
  {
    id v7 = [v3 mutation];

    if (v7)
    {
      id v5 = [v3 mutation];
      uint64_t v6 = +[KTStatusServer auditorReportForKTSMT:v5];
    }
    else
    {
      unsigned int v8 = [v3 sth];

      if (!v8)
      {
        uint64_t v11 = +[TransparencyError errorWithDomain:kTransparencyErrorDatabase code:-299 description:@"failure event with no associated entity"];
        uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
        id v13 = *(void **)(v12 + 40);
        *(void *)(v12 + 40) = v11;

        goto LABEL_10;
      }
      id v5 = [v3 sth];
      uint64_t v6 = +[KTStatusServer auditorReportForSTH:v5];
    }
  }
  id v9 = (void *)v6;

  if (v9)
  {
    id v10 = [*(id *)(a1 + 32) UUIDString];
    [v9 setObject:v10 forKeyedSubscript:kTransparencyAuditorReportUUID];

    [*(id *)(a1 + 40) addObject:v9];
    goto LABEL_14;
  }
LABEL_10:
  if (qword_10032F148 != -1) {
    dispatch_once(&qword_10032F148, &stru_1002C7598);
  }
  id v14 = qword_10032F150;
  if (os_log_type_enabled((os_log_t)qword_10032F150, OS_LOG_TYPE_ERROR))
  {
    uint64_t v15 = *(void *)(a1 + 32);
    int v16 = 138412290;
    uint64_t v17 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "skipping eventId %@ due to unknown type", (uint8_t *)&v16, 0xCu);
  }
LABEL_14:
}

void sub_1001D4BF0(id a1)
{
  qword_10032F150 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D4D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1001D4DB0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = [WeakRetained transaction];

  if (v2)
  {
    if (qword_10032F158 != -1) {
      dispatch_once(&qword_10032F158, &stru_1002C75F8);
    }
    id v3 = qword_10032F160;
    if (os_log_type_enabled((os_log_t)qword_10032F160, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "StaticKeyContactsSync: aborting transaction for syncing", v4, 2u);
    }
    [WeakRetained setTransaction:0];
  }
}

void sub_1001D4E6C(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D5000(uint64_t a1)
{
  if ([*(id *)(a1 + 32) started])
  {
    if (qword_10032F158 != -1) {
      dispatch_once(&qword_10032F158, &stru_1002C7618);
    }
    unsigned int v2 = qword_10032F160;
    if (os_log_type_enabled((os_log_t)qword_10032F160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "StaticKeyContactsSync: resumed more then once", buf, 2u);
    }
  }
  else
  {
    id v3 = +[NSNotificationCenter defaultCenter];
    [v3 addObserver:*(void *)(a1 + 32) selector:"contactStoreDidChange:" name:CNContactStoreDidChangeNotification object:0];
    [*(id *)(a1 + 32) setStarted:1];
  }
}

void sub_1001D5100(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D5144(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D526C(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D54A8(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D54EC(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_1001D5530(uint64_t a1)
{
  unsigned int v2 = (void *)os_transaction_create();
  [*(id *)(a1 + 32) setTransaction:v2];

  [*(id *)(a1 + 32) onQueueMergeChangesFromContacts];
  id v3 = *(void **)(a1 + 32);

  return [v3 setTransaction:0];
}

void sub_1001D565C(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D5F08(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D5F4C(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D5F90(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D5FD4(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D6018(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D605C(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D60A0(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D60E4(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D6128(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D616C(id a1)
{
  qword_10032F160 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D6980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1001D69A8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = [WeakRetained idsControllerQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1001D6A50;
  block[3] = &unk_1002B6CF8;
  id v5 = WeakRetained;
  id v3 = WeakRetained;
  dispatch_async(v2, block);
}

id sub_1001D6A50(uint64_t a1)
{
  return _[*(id *)(a1 + 32) checkAccountChange];
}

id sub_1001D6B00(uint64_t a1)
{
  return [*(id *)(a1 + 32) onQueueDrain];
}

void sub_1001D6E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001D6E58(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) idsQueue];
  dispatch_assert_queue_V2(v7);

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v6)
  {
    if (qword_10032F168 != -1) {
      dispatch_once(&qword_10032F168, &stru_1002C7858);
    }
    id v9 = qword_10032F170;
    if (os_log_type_enabled((os_log_t)qword_10032F170, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v27 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "KTIDSActualOperations: statusOfUsersOnService error: %@", buf, 0xCu);
    }
    goto LABEL_26;
  }
  if (qword_10032F168 != -1) {
    dispatch_once(&qword_10032F168, &stru_1002C7878);
  }
  id v10 = qword_10032F170;
  if (os_log_type_enabled((os_log_t)qword_10032F170, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "KTIDSActualOperations: statusOfUsersOnService %@", buf, 0xCu);
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v11 = [v5 serviceUserInfos];
  id v12 = [v11 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (!v12)
  {

    goto LABEL_25;
  }
  id v13 = v12;
  id v20 = v5;
  char v14 = 0;
  uint64_t v15 = *(void *)v22;
  do
  {
    for (unint64_t i = 0; i != v13; unint64_t i = (char *)i + 1)
    {
      if (*(void *)v22 != v15) {
        objc_enumerationMutation(v11);
      }
      uint64_t v17 = *(void **)(*((void *)&v21 + 1) + 8 * i);
      if ([v17 type] == (id)1)
      {
        __int16 v18 = [[KTIDSSignInServiceUserInfo alloc] initWithUserInfo:v17];
        char v14 = 1;
      }
      else
      {
        if ([v17 type]) {
          continue;
        }
        __int16 v18 = -[KTIDSSignInServiceUserInfo initWithType:status:]([KTIDSSignInServiceUserInfo alloc], "initWithType:status:", 0, [v17 status]);
      }
      [WeakRetained onQueueProcessStatus:v18];
    }
    id v13 = [v11 countByEnumeratingWithState:&v21 objects:v25 count:16];
  }
  while (v13);

  id v5 = v20;
  if (v14) {
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v19 = [[KTIDSSignInServiceUserInfo alloc] initWithType:1 status:0];
  [WeakRetained onQueueProcessStatus:v19];

LABEL_26:
}

void sub_1001D7138(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D717C(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1001D76DC(uint64_t a1, int a2)
{
  if (qword_10032F168 != -1) {
    dispatch_once(&qword_10032F168, &stru_1002C78C0);
  }
  id v4 = qword_10032F170;
  if (os_log_type_enabled((os_log_t)qword_10032F170, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "IDS self heal returned: %{BOOL}d", (uint8_t *)v6, 8u);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001D77CC(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1001D7920(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1001D7A24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001D7BC0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v10 = objc_alloc_init((Class)IDSKTOptInOutStatusData);
  id v7 = [v5 optInStatus];
  [v10 setOptInStatus:v7];

  unsigned int v8 = [v5 publicAccountKey];
  [v10 setPublicAccountKey:v8];

  id v9 = [v5 ktApplication];

  [v10 setKtApplication:v9];
  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:v6];
}

void sub_1001D7D98(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D82FC(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D8340(uint64_t a1)
{
  if (qword_10032F168 != -1) {
    dispatch_once(&qword_10032F168, &stru_1002C7998);
  }
  unsigned int v2 = qword_10032F170;
  if (os_log_type_enabled((os_log_t)qword_10032F170, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "worker: %@", (uint8_t *)&v5, 0xCu);
  }
  id v4 = [*(id *)(a1 + 40) idsObserver];
  v4[2](v4, *(void *)(a1 + 32));
}

void sub_1001D8430(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D8590(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D8738(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D88B4(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D8A30(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D8BAC(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D8D28(id a1)
{
  qword_10032F170 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001D9280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001D92BC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = WeakRetained;
  if (WeakRetained)
  {
    if ([WeakRetained allDependentsSuccessful])
    {
      [v2 groupStart];
    }
    else
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = [v2 error];
        int v4 = 138412290;
        int v5 = v3;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Not running due to some failed dependent: %@", (uint8_t *)&v4, 0xCu);
      }
      [v2 cancel];
    }
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4) = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "received callback for released object", (uint8_t *)&v4, 2u);
  }
}

void sub_1001D93E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  unsigned int v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained completeOperation];
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "received callback for released object", v3, 2u);
  }
}

void sub_1001D9B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D9B7C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 72);
  return result;
}

void sub_1001D9C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001D9C70(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(unsigned char *)(*(void *)(result + 32) + 73);
  return result;
}

uint64_t sub_1001D9DF8(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 73) = 1;
  return result;
}

uint64_t sub_1001D9E10(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 72) = 1;
  return result;
}

void sub_1001DA1FC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) fillInError])
  {
    unsigned int v2 = *(void **)(a1 + 32);
    uint64_t v3 = [v2 internalSuccesses];
    [v2 allSuccessful:v3];
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 72) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 73) = 1;
}

void sub_1001DA528(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001DA754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001DA774(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1001DACF8(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_1001DAD0C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    int v4 = [WeakRetained log];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "registerPushReceiver: %@", (uint8_t *)&v7, 0xCu);
    }

    uint64_t v6 = [*(id *)(a1 + 40) receivers];
    [v6 addObject:*(void *)(a1 + 32)];
  }
}

void sub_1001DAF84(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) receivers];
  id v3 = [v2 copy];

  int v4 = [*(id *)(a1 + 32) deliveryQueue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001DB074;
  v8[3] = &unk_1002B9718;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v5;
  id v11 = v6;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v4, v8);
}

void sub_1001DB074(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v18 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v13;
    *(void *)&long long v4 = 138412290;
    long long v11 = v4;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v2);
        }
        uint64_t v8 = *(void **)(*((void *)&v12 + 1) + 8 * (void)v7);
        id v9 = [*(id *)(a1 + 40) log:v11, v12];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = v11;
          uint64_t v17 = v8;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "didReceiveIncomingMessage: recv %@", buf, 0xCu);
        }

        uint64_t v10 = [*(id *)(a1 + 48) topic];
        [v8 notifyPushChange:v10 userInfo:*(void *)(a1 + 56)];

        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v12 objects:v18 count:16];
    }
    while (v5);
  }
}

void sub_1001DB338(id a1)
{
  uint64_t v1 = +[NSMutableDictionary dictionary];
  id v2 = +[NSLocale ISOCountryCodes];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (unint64_t i = 0; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        uint64_t v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%ld", +[NSLocale ITUCountryCodeForISOCountryCode:v7]);
        [v1 setValue:v7 forKey:v8];
      }
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
  id v9 = (void *)qword_10032F188;
  qword_10032F188 = (uint64_t)v1;
}

void sub_1001DBCB0(id a1)
{
  qword_10032F1A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DBCF4(id a1)
{
  qword_10032F1A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DBD38(id a1)
{
  qword_10032F1A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DBD7C(id a1)
{
  qword_10032F1A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DBDC0(id a1)
{
  qword_10032F1A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DBE04(id a1)
{
  qword_10032F1A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DBE48(id a1)
{
  qword_10032F1A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DCAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001DCB18(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = [*(id *)(a1 + 32) transitionOperation];
    id v4 = [v3 error];

    if (v4)
    {
      uint64_t v5 = [v4 domain];
      if ([v5 isEqualToString:@"KTResultOperationError"])
      {
        id v6 = [v4 code];

        if (v6 == (id)3)
        {
          uint64_t v7 = [WeakRetained queue];
          v8[0] = _NSConcreteStackBlock;
          v8[1] = 3221225472;
          v8[2] = sub_1001DCC48;
          v8[3] = &unk_1002B7D58;
          id v9 = WeakRetained;
          id v10 = v4;
          dispatch_sync(v7, v8);
        }
      }
      else
      {
      }
    }
  }
}

id sub_1001DCC48(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueuePerformTimeoutWithUnderlyingError:*(void *)(a1 + 40)];
}

void sub_1001DCC54(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1001DCD00;
    block[3] = &unk_1002B6CF8;
    id v5 = v2;
    dispatch_async(v3, block);
  }
}

void sub_1001DCD00(uint64_t a1)
{
  id v2 = +[NSError errorWithDomain:@"KTResultOperationError" code:4 description:@"SIGTERM happened"];
  [*(id *)(a1 + 32) _onqueuePerformTimeoutWithUnderlyingError:v2];
}

void sub_1001DD1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001DD1F0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _onqueuePerformTimeoutWithUnderlyingError:0];
}

void sub_1001DE3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1001DE3EC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _onqueuePerformTimeoutWithUnderlyingError];
}

id sub_1001DE5A0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) completed];
  if ((result & 1) == 0)
  {
    id v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    return [v3 onqueueStartFinishOperation:v4];
  }
  return result;
}

void sub_1001DF2D8(id a1)
{
  qword_10032F1B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DF31C(id a1)
{
  qword_10032F1B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DF360(id a1)
{
  qword_10032F1B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DF3A4(id a1)
{
  qword_10032F1B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DF3E8(id a1)
{
  qword_10032F1B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DF42C(id a1)
{
  qword_10032F1B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DF58C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (!v12)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    goto LABEL_17;
  }
  id v28 = 0;
  int v16 = [[KTTransparentData alloc] initWithUriVRFOutput:v12 mapLeaf:v13 pendingSMTs:v14 error:&v28];
  id v17 = v28;
  __int16 v18 = [*(id *)(a1 + 32) applicationKeyStore];
  uint64_t v19 = +[NSDate dateWithTimeIntervalSince1970:](NSDate, "dateWithTimeIntervalSince1970:", (double)(unint64_t)[v18 patLogBeginningMs] / 1000.0);
  [(KTTransparentData *)v16 setCurrentTreeEpochBeginDate:v19];

  if (!v16)
  {
    if (qword_10032F1A8 != -1) {
      dispatch_once(&qword_10032F1A8, &stru_1002C7C98);
    }
    long long v23 = qword_10032F1B0;
    if (os_log_type_enabled((os_log_t)qword_10032F1B0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v30 = v24;
      __int16 v31 = 2112;
      id v32 = v17;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "QueryResponse for fetchId %{public}@ failed to build transparentData: %@", buf, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    goto LABEL_16;
  }
  uint64_t v20 = *(void *)(a1 + 48);
  id v27 = v17;
  unsigned __int8 v21 = [(KTTransparentData *)v16 verifyServerInvariantsAt:v20 error:&v27];
  id v22 = v27;

  if ((v21 & 1) == 0)
  {
    if (qword_10032F1A8 != -1) {
      dispatch_once(&qword_10032F1A8, &stru_1002C7CB8);
    }
    uint64_t v25 = qword_10032F1B0;
    if (os_log_type_enabled((os_log_t)qword_10032F1B0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      uint64_t v30 = v26;
      __int16 v31 = 2112;
      id v32 = v22;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "QueryResponse for fetchId %{public}@ failed server invariant verification: %@", buf, 0x16u);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    id v17 = v22;
LABEL_16:

    goto LABEL_17;
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();

LABEL_17:
}

void sub_1001DF89C(id a1)
{
  qword_10032F1B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DF8E0(id a1)
{
  qword_10032F1B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DFF1C(id a1)
{
  qword_10032F1C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DFF60(id a1)
{
  qword_10032F1C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DFFA4(id a1)
{
  qword_10032F1C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001DFFE8(id a1)
{
  qword_10032F1C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E002C(id a1)
{
  qword_10032F1C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E0070(id a1)
{
  qword_10032F1C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E0344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E0368(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001E0378(uint64_t a1)
{
}

void sub_1001E0380(uint64_t a1)
{
  +[TransparencySettings defaultQueryCacheTimeout];
  id v3 = +[NSDate dateWithTimeIntervalSinceNow:-v2];
  uint64_t v4 = [*(id *)(a1 + 32) serverLoggableDatas];
  id v5 = +[TransparencyManagedDataStore serializeLoggableDatas:v4];

  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = [*(id *)(a1 + 32) uri];
  uint64_t v8 = [*(id *)(a1 + 32) application];
  id v9 = [*(id *)(a1 + 32) accountKey];
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
  obuint64_t j = *(id *)(v10 + 40);
  uint64_t v11 = [v6 fetchRequestWithUri:v7 application:v8 accountKey:v9 loggableDatas:v5 youngerThan:v3 error:&obj];
  objc_storeStrong((id *)(v10 + 40), obj);
  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v14)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8);
    id v48 = *(id *)(v15 + 40);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472;
    void v43[2] = sub_1001E0794;
    v43[3] = &unk_1002C7E08;
    int v16 = *(void **)(a1 + 40);
    id v17 = *(id *)(a1 + 48);
    uint64_t v18 = *(void *)(a1 + 56);
    id v44 = v17;
    uint64_t v46 = v18;
    id v19 = *(id *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 64);
    id v45 = v19;
    uint64_t v47 = v20;
    [v16 performAndWaitForRequestId:v14 error:&v48 block:v43];
    objc_storeStrong((id *)(v15 + 40), v48);

    unsigned __int8 v21 = v44;
  }
  else
  {
    if (qword_10032F1C8 != -1) {
      dispatch_once(&qword_10032F1C8, &stru_1002C7E28);
    }
    id v22 = (void *)qword_10032F1D0;
    if (os_log_type_enabled((os_log_t)qword_10032F1D0, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 48);
      uint64_t v24 = *(void **)(a1 + 32);
      uint64_t v25 = v22;
      uint64_t v26 = [v24 uri];
      id v27 = [*(id *)(a1 + 32) type];
      *(_DWORD *)buf = 138544130;
      uint64_t v51 = v23;
      __int16 v52 = 2160;
      uint64_t v53 = 1752392040;
      __int16 v54 = 2112;
      id v55 = v26;
      __int16 v56 = 2048;
      id v57 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Creating requestId %{public}@ for %{mask.hash}@ of type %lu", buf, 0x2Au);
    }
    unsigned __int8 v21 = [*(id *)(a1 + 32) clientLoggableDatas];

    uint64_t v41 = v3;
    if (v21)
    {
      id v28 = [*(id *)(a1 + 32) clientLoggableDatas];
      unsigned __int8 v21 = +[TransparencyManagedDataStore serializeLoggableDatas:v28];
    }
    CFStringRef v29 = *(void **)(a1 + 40);
    uint64_t v30 = [*(id *)(a1 + 32) uri];
    __int16 v31 = [*(id *)(a1 + 32) application];
    id v32 = [*(id *)(a1 + 32) accountKey];
    id v33 = [*(id *)(a1 + 32) queryRequest];
    uint64_t v34 = [*(id *)(a1 + 32) queryResponse];
    id v35 = [*(id *)(a1 + 32) type];
    uint64_t v36 = *(void *)(a1 + 48);
    uint64_t v37 = *(void *)(*(void *)(a1 + 64) + 8);
    id v42 = *(id *)(v37 + 40);
    uint64_t v38 = [v29 createRequestWithUri:v30 application:v31 accountKey:v32 serverData:v5 syncedData:v21 queryRequest:v33 queryResponse:v34 type:v35 clientId:v36 error:&v42];
    objc_storeStrong((id *)(v37 + 40), v42);
    uint64_t v39 = *(void *)(*(void *)(a1 + 56) + 8);
    __int16 v40 = *(void **)(v39 + 40);
    *(void *)(v39 + 40) = v38;

    id v3 = v41;
  }
}

void sub_1001E0794(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_10032F1C8 != -1) {
    dispatch_once(&qword_10032F1C8, &stru_1002C7DC0);
  }
  uint64_t v4 = qword_10032F1D0;
  if (os_log_type_enabled((os_log_t)qword_10032F1D0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    *(_DWORD *)buf = 138543618;
    uint64_t v14 = v5;
    __int16 v15 = 2114;
    uint64_t v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Mapping requestId %{public}@ to cached requestId %{public}@", buf, 0x16u);
  }
  [*(id *)(a1 + 40) createKTRequestID:*(void *)(a1 + 32) request:v3];
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8);
  obuint64_t j = *(id *)(v8 + 40);
  unsigned __int8 v9 = [v7 persistWithError:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);
  if ((v9 & 1) == 0)
  {
    if (qword_10032F1C8 != -1) {
      dispatch_once(&qword_10032F1C8, &stru_1002C7DE0);
    }
    uint64_t v10 = qword_10032F1D0;
    if (os_log_type_enabled((os_log_t)qword_10032F1D0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "failed to save RequestID for request: %@", buf, 0xCu);
    }
    [*(id *)(a1 + 40) reportCoreDataPersistEventForLocation:@"requestIdLink" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
}

void sub_1001E0964(id a1)
{
  qword_10032F1D0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E09A8(id a1)
{
  qword_10032F1D0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E09EC(id a1)
{
  qword_10032F1D0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E2B78(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E2D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E2D6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001E2D7C(uint64_t a1)
{
}

void sub_1001E2D84(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    uint64_t v5 = +[KTFailureEvent fetchRequest];
    uint64_t v6 = +[NSPredicate predicateWithFormat:@"application == %@", *(void *)(a1 + 40)];
    [v5 setPredicate:v6];

    [v5 setPropertiesToFetch:&off_1002DA5D0];
    [v5 setReturnsDistinctResults:1];
    [v5 setResultType:2];
    [v5 setFetchLimit:*(void *)(a1 + 64)];
    uint64_t v7 = +[NSSortDescriptor sortDescriptorWithKey:@"failureTime" ascending:0];
    uint64_t v36 = v7;
    uint64_t v8 = +[NSArray arrayWithObjects:&v36 count:1];
    [v5 setSortDescriptors:v8];

    unsigned __int8 v9 = [*(id *)(a1 + 32) context];
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    id v32 = *(id *)(v10 + 40);
    uint64_t v11 = [v9 executeFetchRequest:v5 error:&v32];
    objc_storeStrong((id *)(v10 + 40), v32);

    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    id v31 = *(id *)(v12 + 40);
    +[TransparencyManagedDataStore cleanseError:&v31];
    objc_storeStrong((id *)(v12 + 40), v31);
    if (v11 && [v11 count])
    {
      uint64_t v13 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v11 count]);
      uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
      __int16 v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;
    }
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v16 = [v11 reverseObjectEnumerator];
    id v17 = [v16 countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = *(void *)v28;
      do
      {
        for (unint64_t i = 0; i != v18; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v28 != v19) {
            objc_enumerationMutation(v16);
          }
          unsigned __int8 v21 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
          id v22 = [*(id *)(*((void *)&v27 + 1) + 8 * i) objectForKeyedSubscript:@"eventId"];
          [v21 addObject:v22];
        }
        id v18 = [v16 countByEnumeratingWithState:&v27 objects:v35 count:16];
      }
      while (v18);
    }
  }
  else
  {
    if (qword_10032F1E8 != -1) {
      dispatch_once(&qword_10032F1E8, &stru_1002C7E90);
    }
    uint64_t v23 = qword_10032F1F0;
    if (os_log_type_enabled((os_log_t)qword_10032F1F0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v38 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "failed to get : %@", buf, 0xCu);
    }
    uint64_t v25 = *(void *)(*(void *)(a1 + 48) + 8);
    id v33 = *(id *)(v25 + 40);
    +[TransparencyManagedDataStore cleanseError:&v33];
    id v26 = v33;
    uint64_t v5 = *(void **)(v25 + 40);
    *(void *)(v25 + 40) = v26;
  }
}

void sub_1001E3128(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E3230(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  id v39 = 0;
  unsigned __int8 v3 = [v2 persistWithError:&v39];
  id v4 = v39;
  if (v3)
  {
    uint64_t v5 = +[NSFetchRequest fetchRequestWithEntityName:@"KTFailureEvent"];
    uint64_t v6 = +[NSPredicate predicateWithFormat:@"eventId IN %@", *(void *)(a1 + 40)];
    [v5 setPredicate:v6];

    uint64_t v7 = [*(id *)(a1 + 32) context];
    id v37 = v4;
    uint64_t v8 = [v7 executeFetchRequest:v5 error:&v37];
    id v9 = v37;

    if (v8 && [v8 count])
    {
      long long v29 = v5;
      uint64_t v30 = a1;
      uint64_t v10 = +[NSMutableArray array];
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v28 = v8;
      obuint64_t j = v8;
      id v11 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v34;
        while (2)
        {
          uint64_t v14 = 0;
          __int16 v15 = v9;
          do
          {
            if (*(void *)v34 != v13) {
              objc_enumerationMutation(obj);
            }
            uint64_t v16 = *(void **)(*((void *)&v33 + 1) + 8 * (void)v14);
            id v17 = [v16 encodedError];
            id v32 = v15;
            id v18 = +[TransparencyManagedDataStore deserializeNSError:v17 error:&v32];
            id v9 = v32;

            if (!v18)
            {
              if (qword_10032F1E8 != -1) {
                dispatch_once(&qword_10032F1E8, &stru_1002C7EF0);
              }
              uint64_t v5 = v29;
              uint64_t v8 = v28;
              uint64_t v23 = (void *)qword_10032F1F0;
              if (os_log_type_enabled((os_log_t)qword_10032F1F0, OS_LOG_TYPE_ERROR))
              {
                uint64_t v24 = v23;
                uint64_t v25 = [v16 eventId];
                *(_DWORD *)buf = 138543362;
                id v42 = v25;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "failed to decode failure event error for %{public}@", buf, 0xCu);
              }
              uint64_t v26 = kTransparencyErrorDecode;
              long long v27 = [v16 eventId];
              id v19 = +[TransparencyError errorWithDomain:v26, -300, v9, @"failed to decode stored error for event %@", v27 code underlyingError description];

              (*(void (**)(void))(*(void *)(v30 + 48) + 16))();
              goto LABEL_28;
            }
            [v10 addObject:v18];

            uint64_t v14 = (char *)v14 + 1;
            __int16 v15 = v9;
          }
          while (v12 != v14);
          id v12 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }

      (*(void (**)(void))(*(void *)(v30 + 48) + 16))();
      id v19 = v9;
      uint64_t v8 = v28;
      uint64_t v5 = v29;
LABEL_28:
    }
    else
    {
      if (qword_10032F1E8 != -1) {
        dispatch_once(&qword_10032F1E8, &stru_1002C7ED0);
      }
      unsigned __int8 v21 = qword_10032F1F0;
      if (os_log_type_enabled((os_log_t)qword_10032F1F0, OS_LOG_TYPE_ERROR))
      {
        id v22 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543362;
        id v42 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "failed to find any failure event for %{public}@", buf, 0xCu);
      }
      id v19 = +[TransparencyError errorWithDomain:kTransparencyErrorDatabase, -299, v9, @"failed to find any failure event for %@", *(void *)(a1 + 40) code underlyingError description];

      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
  else
  {
    if (qword_10032F1E8 != -1) {
      dispatch_once(&qword_10032F1E8, &stru_1002C7EB0);
    }
    uint64_t v20 = qword_10032F1F0;
    if (os_log_type_enabled((os_log_t)qword_10032F1F0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v42 = v4;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "failed to get : %@", buf, 0xCu);
    }
    id v38 = v4;
    +[TransparencyManagedDataStore cleanseError:&v38];
    id v19 = v38;

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1001E3750(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E3794(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E37D8(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E3994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001E39B8(uint64_t a1)
{
  double v2 = +[NSFetchRequest fetchRequestWithEntityName:@"KTFailureEvent"];
  unsigned __int8 v3 = +[NSPredicate predicateWithFormat:@"eventId = %@", *(void *)(a1 + 32)];
  [v2 setPredicate:v3];

  id v4 = [*(id *)(a1 + 40) context];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  if (v6 && [v6 count] == (id)1)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = [v6 objectAtIndexedSubscript:0];
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  else
  {
    if (qword_10032F1E8 != -1) {
      dispatch_once(&qword_10032F1E8, &stru_1002C7F38);
    }
    id v9 = qword_10032F1F0;
    if (os_log_type_enabled((os_log_t)qword_10032F1F0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to find failure event for eventId %{public}@", buf, 0xCu);
    }
    uint64_t v11 = +[TransparencyError errorWithDomain:kTransparencyErrorDatabase, -299, *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), @"failed to find failure event for %@", *(void *)(a1 + 32) code underlyingError description];
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
    id v15 = *(id *)(v14 + 40);
    +[TransparencyManagedDataStore cleanseError:&v15];
    objc_storeStrong((id *)(v14 + 40), v15);
  }
}

void sub_1001E3C04(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E3D60(uint64_t a1)
{
  if (qword_10032F1E8 != -1) {
    dispatch_once(&qword_10032F1E8, &stru_1002C7F58);
  }
  double v2 = qword_10032F1F0;
  if (os_log_type_enabled((os_log_t)qword_10032F1F0, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to clear all failure events: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1001E3E2C(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E3F34(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  id v32 = 0;
  unsigned __int8 v3 = [v2 persistWithError:&v32];
  id v4 = v32;
  if (v3)
  {
    uint64_t v5 = +[NSFetchRequest fetchRequestWithEntityName:@"KTFailureEvent"];
    uint64_t v6 = +[NSPredicate predicateWithFormat:@"eventId IN %@", *(void *)(a1 + 40)];
    [v5 setPredicate:v6];

    uint64_t v7 = [*(id *)(a1 + 32) context];
    id v30 = v4;
    uint64_t v8 = [v7 executeFetchRequest:v5 error:&v30];
    id v9 = v30;

    if (v8)
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v10 = v8;
      id v11 = [v10 countByEnumeratingWithState:&v26 objects:v37 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v27;
        do
        {
          for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v27 != v13) {
              objc_enumerationMutation(v10);
            }
            uint64_t v15 = *(void *)(*((void *)&v26 + 1) + 8 * i);
            uint64_t v16 = [*(id *)(a1 + 32) context];
            [v16 deleteObject:v15];
          }
          id v12 = [v10 countByEnumeratingWithState:&v26 objects:v37 count:16];
        }
        while (v12);
      }
    }
    id v17 = *(void **)(a1 + 32);
    id v25 = v9;
    unsigned __int8 v18 = [v17 persistAndRefaultObjects:v8 error:&v25];
    id v19 = v25;

    if ((v18 & 1) == 0)
    {
      if (qword_10032F1E8 != -1) {
        dispatch_once(&qword_10032F1E8, &stru_1002C7F98);
      }
      uint64_t v20 = qword_10032F1F0;
      if (os_log_type_enabled((os_log_t)qword_10032F1F0, OS_LOG_TYPE_ERROR))
      {
        unsigned __int8 v21 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138543618;
        id v34 = v21;
        __int16 v35 = 2112;
        id v36 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "failed to delete failed eventId %{public}@ : %@", buf, 0x16u);
      }
      id v24 = v19;
      +[TransparencyManagedDataStore cleanseError:&v24];
      id v22 = v24;

      id v19 = v22;
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    if (qword_10032F1E8 != -1) {
      dispatch_once(&qword_10032F1E8, &stru_1002C7F78);
    }
    uint64_t v23 = qword_10032F1F0;
    if (os_log_type_enabled((os_log_t)qword_10032F1F0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v34 = v4;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "failed to get : %@", buf, 0xCu);
    }
    id v31 = v4;
    +[TransparencyManagedDataStore cleanseError:&v31];
    id v19 = v31;

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1001E42A4(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E42E8(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E4564(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E45A8(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E4A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_1001E4A64(uint64_t a1)
{
  double v2 = [*(id *)(a1 + 32) context];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
  obuint64_t j = *(id *)(v4 + 40);
  uint64_t v5 = [v2 executeFetchRequest:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1001E4AEC(id a1)
{
  qword_10032F1F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E4E20(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E4E64(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E4FD0(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E5014(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E531C(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E5360(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E53A4(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E55AC(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E5F20(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E5F64(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E6358(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E639C(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E67F4(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E6838(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E687C(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E68C0(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E6E50(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E6E94(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E6ED8(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E6F1C(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E7118(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001E713C(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E729C(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E7590(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (!v5)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = 0;
    [v6 configureFromNetworkBagData:a2 error:&v7];
    id v5 = v7;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001E78EC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1001E7900(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E7944(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E7988(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E79CC(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E7BEC(_Unwind_Exception *exception_object)
{
}

void sub_1001E7C08(id a1)
{
  qword_10032F200 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E8120(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E8A38(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E8A7C(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E8D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001E8DAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001E8DBC(uint64_t a1)
{
}

void sub_1001E8DC4(uint64_t a1)
{
  double v2 = +[NSFetchRequest fetchRequestWithEntityName:@"KTTreeHead"];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"isMapHead == NO && application == %@ && logBeginTime == %llu && consistencyVerified == %d", *(void *)(a1 + 32), *(void *)(a1 + 64), 1];
  [v2 setPredicate:v3];

  [v2 setPropertiesToFetch:&off_1002DA600];
  [v2 setReturnsDistinctResults:1];
  [v2 setResultType:2];
  [v2 setFetchLimit:1];
  uint64_t v4 = +[NSSortDescriptor sortDescriptorWithKey:@"revision" ascending:0];
  __int16 v40 = v4;
  id v5 = +[NSArray arrayWithObjects:&v40 count:1];
  [v2 setSortDescriptors:v5];

  uint64_t v6 = [*(id *)(a1 + 40) context];
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v7 + 40);
  uint64_t v8 = [v6 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v7 + 40), obj);

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v33 = *(id *)(v9 + 40);
  +[TransparencyManagedDataStore cleanseError:&v33];
  objc_storeStrong((id *)(v9 + 40), v33);
  if (v8 && [v8 count])
  {
    id v10 = [v8 objectAtIndexedSubscript:0];
    uint64_t v11 = [v10 objectForKeyedSubscript:@"revision"];
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    if (qword_10032F208 != -1) {
      dispatch_once(&qword_10032F208, &stru_1002C8430);
    }
    uint64_t v14 = qword_10032F210;
    if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      uint64_t v37 = v15;
      __int16 v38 = 2112;
      uint64_t v39 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "latest verified revision %@ for %@", buf, 0x16u);
    }
    id v17 = v8;
  }
  else
  {
    unsigned __int8 v18 = +[NSPredicate predicateWithFormat:@"isMapHead == NO && application == %@ && logBeginTime == %llu && signatureVerified == %d && consistencyVerified == %d", *(void *)(a1 + 32), *(void *)(a1 + 64), 1, 2];
    [v2 setPredicate:v18];

    id v19 = +[NSSortDescriptor sortDescriptorWithKey:@"revision" ascending:1];
    __int16 v35 = v19;
    uint64_t v20 = +[NSArray arrayWithObjects:&v35 count:1];
    [v2 setSortDescriptors:v20];

    unsigned __int8 v21 = [*(id *)(a1 + 40) context];
    uint64_t v22 = *(void *)(*(void *)(a1 + 48) + 8);
    id v32 = *(id *)(v22 + 40);
    id v17 = [v21 executeFetchRequest:v2 error:&v32];
    objc_storeStrong((id *)(v22 + 40), v32);

    if (v17 && [v17 count])
    {
      uint64_t v23 = [v17 objectAtIndexedSubscript:0];
      uint64_t v24 = [v23 objectForKeyedSubscript:@"revision"];
      uint64_t v25 = *(void *)(*(void *)(a1 + 56) + 8);
      long long v26 = *(void **)(v25 + 40);
      *(void *)(v25 + 40) = v24;

      if (qword_10032F208 != -1) {
        dispatch_once(&qword_10032F208, &stru_1002C8450);
      }
      long long v27 = qword_10032F210;
      if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        uint64_t v29 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v37 = v28;
        __int16 v38 = 2112;
        uint64_t v39 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "earliest pending revision %@ for %@", buf, 0x16u);
      }
    }
    uint64_t v30 = *(void *)(*(void *)(a1 + 48) + 8);
    id v31 = *(id *)(v30 + 40);
    +[TransparencyManagedDataStore cleanseError:&v31];
    objc_storeStrong((id *)(v30 + 40), v31);
  }
}

void sub_1001E9250(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E9294(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E9468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001E948C(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned __int8 v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    id v5 = +[NSFetchRequest fetchRequestWithEntityName:@"KTTreeHead"];
    uint64_t v6 = +[NSPredicate predicateWithFormat:@"isMapHead == NO && application == %@ && logBeginTime == %llu && signatureVerified == %d && consistencyVerified == %d", *(void *)(a1 + 40), *(void *)(a1 + 64), 1, 1];
    [v5 setPredicate:v6];

    [v5 setPropertiesToFetch:&off_1002DA618];
    [v5 setReturnsDistinctResults:1];
    [v5 setResultType:2];
    [v5 setFetchLimit:1];
    uint64_t v7 = +[NSSortDescriptor sortDescriptorWithKey:@"revision" ascending:0];
    id v44 = v7;
    uint64_t v8 = +[NSArray arrayWithObjects:&v44 count:1];
    [v5 setSortDescriptors:v8];

    uint64_t v9 = [*(id *)(a1 + 32) context];
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
    id v37 = *(id *)(v10 + 40);
    uint64_t v11 = [v9 executeFetchRequest:v5 error:&v37];
    objc_storeStrong((id *)(v10 + 40), v37);

    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    id v36 = *(id *)(v12 + 40);
    +[TransparencyManagedDataStore cleanseError:&v36];
    objc_storeStrong((id *)(v12 + 40), v36);
    if (v11 && [v11 count])
    {
      uint64_t v13 = [v11 objectAtIndexedSubscript:0];
      uint64_t v14 = [v13 objectForKeyedSubscript:@"sth"];
      uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
      uint64_t v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;

      if (qword_10032F208 != -1) {
        dispatch_once(&qword_10032F208, &stru_1002C84B8);
      }
      id v17 = qword_10032F210;
      if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        uint64_t v19 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v41 = v18;
        __int16 v42 = 2112;
        uint64_t v43 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "latest verified STH %@ for %@", buf, 0x16u);
      }
      uint64_t v20 = v11;
    }
    else
    {
      uint64_t v22 = +[NSPredicate predicateWithFormat:@"isMapHead == NO && application == %@ && logBeginTime == %llu && signatureVerified == %d && consistencyVerified == %d", *(void *)(a1 + 40), *(void *)(a1 + 64), 1, 2];
      [v5 setPredicate:v22];

      uint64_t v23 = +[NSSortDescriptor sortDescriptorWithKey:@"revision" ascending:1];
      uint64_t v39 = v23;
      uint64_t v24 = +[NSArray arrayWithObjects:&v39 count:1];
      [v5 setSortDescriptors:v24];

      uint64_t v25 = [*(id *)(a1 + 32) context];
      uint64_t v20 = [v25 executeFetchRequest:v5 error:*(void *)(a1 + 72)];

      if (v20 && [v20 count])
      {
        long long v26 = [v20 objectAtIndexedSubscript:0];
        uint64_t v27 = [v26 objectForKeyedSubscript:@"sth"];
        uint64_t v28 = *(void *)(*(void *)(a1 + 56) + 8);
        uint64_t v29 = *(void **)(v28 + 40);
        *(void *)(v28 + 40) = v27;

        if (qword_10032F208 != -1) {
          dispatch_once(&qword_10032F208, &stru_1002C84D8);
        }
        uint64_t v30 = qword_10032F210;
        if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_INFO))
        {
          uint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
          uint64_t v32 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          uint64_t v41 = v31;
          __int16 v42 = 2112;
          uint64_t v43 = v32;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "latest verified STH %@ for %@", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v33 = +[TransparencyError errorWithDomain:kTransparencyErrorGossip code:-226 description:@"TLT STH doesn't exist in local database"];
        uint64_t v34 = *(void *)(*(void *)(a1 + 48) + 8);
        __int16 v35 = *(void **)(v34 + 40);
        *(void *)(v34 + 40) = v33;
      }
    }
  }
  else
  {
    if (qword_10032F208 != -1) {
      dispatch_once(&qword_10032F208, &stru_1002C8498);
    }
    unsigned __int8 v21 = qword_10032F210;
    if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "failed to get latest tree head STH", buf, 2u);
    }
  }
}

void sub_1001E99A8(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E99EC(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E9A30(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001E9C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1001E9C38(uint64_t a1)
{
  double v2 = +[NSFetchRequest fetchRequestWithEntityName:@"KTTreeHead"];
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v3 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 73)];
    unsigned __int8 v4 = +[NSPredicate predicateWithFormat:@"isMapHead == %@ && application == %@ && logBeginTime == %llu && signatureVerified == %d && inclusionVerified == %d", v3, *(void *)(a1 + 32), *(void *)(a1 + 64), 1, 2];
    [v2 setPredicate:v4];
  }
  else
  {
    uint64_t v3 = +[NSPredicate predicateWithFormat:@"isMapHead == NO && application == %@ && logBeginTime == %llu && signatureVerified == %d && consistencyVerified == %d", *(void *)(a1 + 32), *(void *)(a1 + 64), 1, 2];
    [v2 setPredicate:v3];
  }

  [v2 setPropertiesToFetch:&off_1002DA630];
  [v2 setReturnsDistinctResults:1];
  [v2 setResultType:2];
  id v5 = +[NSSortDescriptor sortDescriptorWithKey:@"revision" ascending:1];
  uint64_t v28 = v5;
  uint64_t v6 = +[NSArray arrayWithObjects:&v28 count:1];
  [v2 setSortDescriptors:v6];

  uint64_t v7 = [*(id *)(a1 + 40) context];
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v8 + 40);
  uint64_t v9 = [v7 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);

  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  id v25 = *(id *)(v10 + 40);
  +[TransparencyManagedDataStore cleanseError:&v25];
  objc_storeStrong((id *)(v10 + 40), v25);
  if (v9 && [v9 count])
  {
    uint64_t v11 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v9 count]);
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v14 = v9;
  id v15 = [v14 countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v22;
    do
    {
      uint64_t v18 = 0;
      do
      {
        if (*(void *)v22 != v17) {
          objc_enumerationMutation(v14);
        }
        uint64_t v19 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
        uint64_t v20 = [*(id *)(*((void *)&v21 + 1) + 8 * (void)v18) objectForKeyedSubscript:@"revision"];
        [v19 addObject:v20];

        uint64_t v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      id v16 = [v14 countByEnumeratingWithState:&v21 objects:v27 count:16];
    }
    while (v16);
  }
}

void sub_1001EA0CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  obuint64_t j = a2;
  id v22 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v22)
  {
    uint64_t v21 = *(void *)v24;
    uint64_t v19 = a1;
    uint64_t v20 = a4;
    do
    {
      for (unint64_t i = 0; i != v22; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v21) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        uint64_t v8 = [v7 sth];
        uint64_t v9 = +[SignedObjectHolder parseFromData:v8 error:a4];

        if (v9)
        {
          uint64_t v10 = [v9 parsedLogHead];
          uint64_t v11 = [v10 logHeadHash];

          uint64_t v12 = *(void **)(a1 + 32);
          uint64_t v13 = [v7 application];
          id v14 = [v7 getUnsigned:"logBeginTime"];
          id v15 = [v7 logType];
          id v16 = [v7 getUnsigned:"revision"];
          LOBYTE(v17) = [v7 gossip] != 0;
          LODWORD(v16) = [v12 haveTreeHead:v11 isMapHead:0 application:v13 logBeginTime:v14 logType:v15 revision:v16 gossip:v17 error:a4];

          if (v16)
          {
            a1 = v19;
            [*(id *)(v19 + 32) deleteObject:v7];
          }
          else
          {
            [v7 setLogHeadHash:v11];
            a1 = v19;
          }

          a4 = v20;
        }
        else
        {
          [*(id *)(a1 + 32) deleteObject:v7];
        }
      }
      id v22 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v22);
  }
  [*(id *)(a1 + 32) persistAndRefaultObjects:obj error:a4];
}

void sub_1001EA31C(uint64_t a1)
{
  if (qword_10032F208 != -1) {
    dispatch_once(&qword_10032F208, &stru_1002C8548);
  }
  double v2 = qword_10032F210;
  if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to populate log head hash in KTTreeHead: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1001EA3E8(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EAB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001EAB8C(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v31 = 0;
  id v4 = [v2 countOutstandingSTHsForApplication:v3 error:&v31];
  id v5 = v31;
  if (v4 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_10032F208 != -1) {
      dispatch_once(&qword_10032F208, &stru_1002C8568);
    }
    uint64_t v6 = qword_10032F210;
    if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v33 = v7;
      __int16 v34 = 2112;
      id v35 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "failed to get outstanding STHs for %@: %@", buf, 0x16u);
    }
    if (*(void *)(a1 + 56) && v5) {
      **(void **)(a1 + 56) = v5;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  uint64_t v8 = [*(id *)(a1 + 32) logger];
  uint64_t v9 = +[NSNumber numberWithUnsignedInteger:v4];
  uint64_t v10 = +[TransparencyAnalytics formatEventName:@"OutstandingSTHs" application:*(void *)(a1 + 40)];
  [v8 logMetric:v9 withName:v10];

  uint64_t v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  id v30 = v5;
  id v13 = [v11 countOutstandingSMHsForApplication:v12 error:&v30];
  id v14 = v30;

  if (v13 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_10032F208 != -1) {
      dispatch_once(&qword_10032F208, &stru_1002C8588);
    }
    id v15 = qword_10032F210;
    if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v33 = v16;
      __int16 v34 = 2112;
      id v35 = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "failed to get outstanding SMHs for %@: %@", buf, 0x16u);
    }
    if (*(void *)(a1 + 56) && v14) {
      **(void **)(a1 + 56) = v14;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  uint64_t v17 = [*(id *)(a1 + 32) logger];
  uint64_t v18 = +[NSNumber numberWithUnsignedInteger:v13];
  uint64_t v19 = +[TransparencyAnalytics formatEventName:@"OutstandingSMHs" application:*(void *)(a1 + 40)];
  [v17 logMetric:v18 withName:v19];

  uint64_t v20 = *(void **)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 40);
  id v29 = v14;
  id v22 = [v20 countTotalSTHsForApplication:v21 error:&v29];
  id v23 = v29;

  if (v22 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    if (qword_10032F208 != -1) {
      dispatch_once(&qword_10032F208, &stru_1002C85A8);
    }
    long long v24 = qword_10032F210;
    if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      uint64_t v33 = v25;
      __int16 v34 = 2112;
      id v35 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "failed to get total STHs for %@: %@", buf, 0x16u);
    }
    if (*(void *)(a1 + 56) && v23) {
      **(void **)(a1 + 56) = v23;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  long long v26 = [*(id *)(a1 + 32) logger];
  uint64_t v27 = +[NSNumber numberWithUnsignedInteger:v22];
  uint64_t v28 = +[TransparencyAnalytics formatEventName:@"TotalSTHs" application:*(void *)(a1 + 40)];
  [v26 logMetric:v27 withName:v28];
}

void sub_1001EAFA0(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EAFE4(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EB028(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EB184(uint64_t a1)
{
  if (qword_10032F208 != -1) {
    dispatch_once(&qword_10032F208, &stru_1002C85F0);
  }
  double v2 = qword_10032F210;
  if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 138412290;
    uint64_t v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to delete tree heads from prior epoch: %@", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1001EB250(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EB8B8(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EB8FC(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EB940(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EB984(uint64_t a1, void *a2, unsigned char *a3, void **a4)
{
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  obuint64_t j = a2;
  id v6 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)v26;
    *(void *)&long long v7 = 138412290;
    long long v22 = v7;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v26 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v25 + 1) + 8 * (void)v10);
        unint64_t v12 = *(void *)(a1 + 56) - 1;
        if (v12 >= 3)
        {
          if (qword_10032F208 != -1) {
            dispatch_once(&qword_10032F208, &stru_1002C8670);
          }
          uint64_t v18 = (void *)qword_10032F210;
          if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_ERROR))
          {
            uint64_t v19 = *(void **)(a1 + 32);
            uint64_t v20 = v18;
            uint64_t v21 = [v19 downloadId];
            *(_DWORD *)buf = 138543362;
            id v30 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "invalid download type for fail head downloadId %{public}@", buf, 0xCu);
          }
          [*(id *)(a1 + 40) refaultObject:v11, v22];
        }
        else
        {
          uint64_t v13 = qword_10028B500[v12];
          id v14 = [*(id *)(a1 + 40) createSignedTreeHeadFailure];
          id v15 = [*(id *)(a1 + 48) domain];
          [v14 setErrorDomain:v15];

          [v14 setErrorCode:[*(id *)(a1 + 48) code]];
          [v14 setUnsigned:"verificationType" value:v13];
          [v14 setSth:v11];
          if (([*(id *)(a1 + 40) persistAndRefaultObject:v11 error:a4] & 1) == 0)
          {
            if (qword_10032F208 != -1) {
              dispatch_once(&qword_10032F208, &stru_1002C8690);
            }
            uint64_t v16 = qword_10032F210;
            if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_ERROR))
            {
              if (a4) {
                uint64_t v17 = *a4;
              }
              else {
                uint64_t v17 = 0;
              }
              *(_DWORD *)buf = v22;
              id v30 = v17;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "failed to persist failed head download: %@", buf, 0xCu);
            }
            if (a4 && *a4) {
              [*(id *)(a1 + 40) reportCoreDataPersistEventForLocation:@"failHeadDownloadRecord" underlyingError:nil];
            }
            *a3 = 1;
          }
        }
        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v8 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
    }
    while (v8);
  }
}

void sub_1001EBC8C(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EBCD0(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EBE90(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EBED4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v11 = 0;
  [v3 failHeadDownloadRecord:a2 failure:v4 error:&v11];
  id v5 = v11;
  id v6 = *(void **)(a1 + 32);
  id v10 = v5;
  unsigned __int8 v7 = [v6 persistWithError:&v10];
  id v8 = v10;

  if ((v7 & 1) == 0)
  {
    if (qword_10032F208 != -1) {
      dispatch_once(&qword_10032F208, &stru_1002C86F8);
    }
    uint64_t v9 = qword_10032F210;
    if (os_log_type_enabled((os_log_t)qword_10032F210, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to save inclusion proof failure: %@", buf, 0xCu);
    }
    [*(id *)(a1 + 32) reportCoreDataPersistEventForLocation:@"failSTHDownload" underlyingError:v8];
  }
}

void sub_1001EC008(id a1)
{
  qword_10032F210 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EC184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1001EC19C(uint64_t a1)
{
  double v2 = +[NSFetchRequest fetchRequestWithEntityName:@"KTTreeHead"];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"application = %@ AND signatureVerified = %d AND revision IN %@", *(void *)(a1 + 32), 0, *(void *)(a1 + 40)];
  [v2 setPredicate:v3];

  [v2 setPropertiesToFetch:&off_1002DA648];
  [v2 setReturnsDistinctResults:1];
  [v2 setResultType:2];
  uint64_t v4 = [*(id *)(a1 + 48) context];
  id v22 = 0;
  id v5 = [v4 executeFetchRequest:v2 error:&v22];
  id v6 = v22;

  if (v5 && [v5 count])
  {
    id v17 = v6;
    unsigned __int8 v7 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v5 count]);
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v19;
      do
      {
        unint64_t v12 = 0;
        do
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = [*(id *)(*((void *)&v18 + 1) + 8 * (void)v12) objectForKeyedSubscript:@"sth"];
          [v7 addObject:v13];

          unint64_t v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }
      while (v10);
    }

    uint64_t v14 = +[NSArray arrayWithArray:v7];
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    id v6 = v17;
  }
}

void sub_1001ECA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001ECAB0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001ECAC0(uint64_t a1)
{
}

void sub_1001ECAC8(void *a1)
{
  double v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8);
  obuint64_t j = *(id *)(v4 + 40);
  id v5 = [v2 fetchDownloadRecordById:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  id v6 = [v5 downloadId];
  unsigned int v7 = [v6 isEqual:a1[5]];

  if (v7) {
    *(unsigned char *)(*(void *)(a1[7] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  uint64_t v8 = *(void *)(a1[6] + 8);
  id v9 = *(id *)(v8 + 40);
  +[TransparencyManagedDataStore cleanseError:&v9];
  objc_storeStrong((id *)(v8 + 40), v9);
}

void sub_1001ECCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1001ECD1C(uint64_t a1)
{
  double v2 = +[NSFetchRequest fetchRequestWithEntityName:@"DownloadRecord"];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"downloadId = %@", *(void *)(a1 + 32)];
  [v2 setPredicate:v3];

  uint64_t v4 = [*(id *)(a1 + 40) context];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  obuint64_t j = *(id *)(v5 + 40);
  id v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  if (v6 && [v6 count])
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v7 = v6;
    id v8 = [v7 countByEnumeratingWithState:&v20 objects:v27 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v21;
      do
      {
        for (unint64_t i = 0; i != v9; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v10) {
            objc_enumerationMutation(v7);
          }
          [*(id *)(*((void *)&v20 + 1) + 8 * i) setResponse:*(void *)(a1 + 48)];
        }
        id v9 = [v7 countByEnumeratingWithState:&v20 objects:v27 count:16];
      }
      while (v9);
    }
  }
  else
  {
    if (qword_10032F218 != -1) {
      dispatch_once(&qword_10032F218, &stru_1002C8778);
    }
    unint64_t v12 = qword_10032F220;
    if (os_log_type_enabled((os_log_t)qword_10032F220, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v26 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "received response for deleted downloadId %{public}@", buf, 0xCu);
    }
  }
  uint64_t v14 = *(void **)(a1 + 40);
  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
  id v19 = *(id *)(v15 + 40);
  unsigned __int8 v16 = [v14 persistWithError:&v19];
  objc_storeStrong((id *)(v15 + 40), v19);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v16;
  uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
  id v18 = *(id *)(v17 + 40);
  +[TransparencyManagedDataStore cleanseError:&v18];
  objc_storeStrong((id *)(v17 + 40), v18);
}

void sub_1001ECFA0(id a1)
{
  qword_10032F220 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001ED1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001ED1F0(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v4 + 40);
  uint64_t v5 = [v2 fetchDownloadRecordById:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  if (v5) {
    [*(id *)(a1 + 32) deleteObject:v5];
  }
  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
  id v12 = *(id *)(v7 + 40);
  unsigned __int8 v8 = [v6 persistWithError:&v12];
  objc_storeStrong((id *)(v7 + 40), v12);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v8;
  uint64_t v9 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_1001ED2CC(uint64_t a1)
{
  if (qword_10032F218 != -1) {
    dispatch_once(&qword_10032F218, &stru_1002C8798);
  }
  double v2 = qword_10032F220;
  if (os_log_type_enabled((os_log_t)qword_10032F220, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to delete download record for UUID %@: %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_1001ED3AC(id a1)
{
  qword_10032F220 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001ED5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001ED5E8(uint64_t a1)
{
  double v2 = +[NSFetchRequest fetchRequestWithEntityName:@"DownloadRecord"];
  uint64_t v3 = +[NSPredicate predicateWithFormat:@"application == %@", *(void *)(a1 + 32)];
  [v2 setPredicate:v3];

  uint64_t v4 = [*(id *)(a1 + 40) context];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = [v4 executeFetchRequest:v2 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  [*(id *)(a1 + 40) deleteObjectSet:v6];
  __int16 v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  id v11 = *(id *)(v8 + 40);
  LOBYTE(v5) = [v7 persistWithError:&v11];
  objc_storeStrong((id *)(v8 + 40), v11);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v5;
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
  id v10 = *(id *)(v9 + 40);
  +[TransparencyManagedDataStore cleanseError:&v10];
  objc_storeStrong((id *)(v9 + 40), v10);
}

void sub_1001ED728(uint64_t a1)
{
  if (qword_10032F218 != -1) {
    dispatch_once(&qword_10032F218, &stru_1002C87B8);
  }
  double v2 = qword_10032F220;
  if (os_log_type_enabled((os_log_t)qword_10032F220, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to delete download record for %@: %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_1001ED808(id a1)
{
  qword_10032F220 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EDA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001EDA50(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = [v3 fetchDownloadRecord:v2 application:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6) {
    [*(id *)(a1 + 32) deleteObject:v6];
  }
  __int16 v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8);
  id v12 = *(id *)(v8 + 40);
  unsigned __int8 v9 = [v7 persistWithError:&v12];
  objc_storeStrong((id *)(v8 + 40), v12);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v9;
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  id v11 = *(id *)(v10 + 40);
  +[TransparencyManagedDataStore cleanseError:&v11];
  objc_storeStrong((id *)(v10 + 40), v11);
}

void sub_1001EDB2C(uint64_t a1)
{
  if (qword_10032F218 != -1) {
    dispatch_once(&qword_10032F218, &stru_1002C87D8);
  }
  uint64_t v2 = qword_10032F220;
  if (os_log_type_enabled((os_log_t)qword_10032F220, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed to delete download record for %@: %@", (uint8_t *)&v5, 0x16u);
  }
}

void sub_1001EDC0C(id a1)
{
  qword_10032F220 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EDDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1001EDDF0(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  obuint64_t j = *(id *)(v4 + 40);
  int v5 = [v2 fetchDownloadRecordById:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(a1[7] + 8) + 40)];
  uint64_t v7 = *(void *)(a1[7] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v5)
  {
    unsigned __int8 v9 = [v5 downloadId];
    unsigned int v10 = [v9 isEqual:a1[5]];

    if (v10)
    {
      (*(void (**)(void))(a1[6] + 16))();
      *(unsigned char *)(*(void *)(a1[8] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
}

void sub_1001EE2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001EE2DC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001EE2EC(uint64_t a1)
{
}

void sub_1001EE2F4(void *a1)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[7] + 8);
  obuint64_t j = *(id *)(v4 + 40);
  int v5 = [v2 fetchFetchRecordById:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(a1[7] + 8) + 40)];
  uint64_t v7 = *(void *)(a1[7] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v5)
  {
    unsigned __int8 v9 = [v5 fetchId];
    unsigned int v10 = [v9 isEqual:a1[5]];

    if (v10)
    {
      (*(void (**)(void))(a1[6] + 16))();
      *(unsigned char *)(*(void *)(a1[8] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
    }
  }
  else
  {
    uint64_t v11 = +[TransparencyError errorWithDomain:kTransparencyErrorDatabase, -225, @"no fetch record found for %@", a1[5] code description];
    uint64_t v12 = *(void *)(a1[7] + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    if (qword_10032F228 != -1) {
      dispatch_once(&qword_10032F228, &stru_1002C87F8);
    }
    uint64_t v14 = qword_10032F230;
    if (os_log_type_enabled((os_log_t)qword_10032F230, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = a1[5];
      *(_DWORD *)buf = 138543362;
      uint64_t v18 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "no fetch record found for fetchId %{public}@", buf, 0xCu);
    }
  }
}

void sub_1001EE4C4(id a1)
{
  qword_10032F230 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EEA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001EEAA0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001EEAB0(uint64_t a1)
{
}

void sub_1001EEAB8(uint64_t a1, void *a2)
{
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  obuint64_t j = a2;
  id v45 = [obj countByEnumeratingWithState:&v49 objects:v63 count:16];
  if (v45)
  {
    uint64_t v3 = 0;
    uint64_t v47 = 0;
    uint64_t v44 = *(void *)v50;
    while (1)
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v50 != v44) {
          objc_enumerationMutation(obj);
        }
        int v5 = *(void **)(*((void *)&v49 + 1) + 8 * (void)v4);
        uint64_t v6 = *(void *)(a1 + 56);
        if (v6 == 2)
        {
          uint64_t v11 = [*(id *)(*((void *)&v49 + 1) + 8 * (void)v4) application];
          CFStringRef v9 = +[TransparencyAnalytics formatEventName:@"VerifyConsistencyProofEvent" application:v11];

          [v5 setConsistencyVerified:0];
          uint64_t v3 = -196;
        }
        else if (v6 == 1)
        {
          if ([*(id *)(*((void *)&v49 + 1) + 8 * (void)v4) isMapHead])
          {
            unsigned int v10 = [v5 application];
            CFStringRef v9 = +[TransparencyAnalytics formatEventName:@"VerifyPATInclusionProofEvent" application:v10];
          }
          else
          {
            CFStringRef v9 = @"ktTLTVerifyInclusionProofEvent";
            unsigned int v10 = v47;
          }

          [v5 setInclusionVerified:0];
          uint64_t v3 = -202;
        }
        else
        {
          if (v6) {
            goto LABEL_22;
          }
          if ([*(id *)(*((void *)&v49 + 1) + 8 * (void)v4) isMapHead]) {
            uint64_t v3 = -138;
          }
          else {
            uint64_t v3 = -198;
          }
          if ([v5 isMapHead]) {
            CFStringRef v7 = @"VerifySMHEvent";
          }
          else {
            CFStringRef v7 = @"VerifySTHEvent";
          }
          uint64_t v8 = [v5 application];
          CFStringRef v9 = +[TransparencyAnalytics formatEventName:v7 application:v8];

          [v5 setSignatureVerified:0];
        }
        uint64_t v47 = (__CFString *)v9;
LABEL_22:
        uint64_t v12 = *(void **)(a1 + 32);
        uint64_t v13 = [v5 failures];
        uint64_t v14 = [v12 createChainOfErrorsFromSTHFailures:v13 type:*(void *)(a1 + 56)];

        uint64_t v15 = [*(id *)(a1 + 32) dataStore];
        unsigned __int8 v16 = [v15 createSignedTreeHeadFailure];

        [v16 setSth:v5];
        [v16 setErrorCode:v3];
        [v16 setErrorDomain:@"TransparencyErrorVerify"];
        [v16 setUnsigned:"verificationType" value:*(void *)(a1 + 56)];
        if (qword_10032F238 != -1) {
          dispatch_once(&qword_10032F238, &stru_1002C8818);
        }
        uint64_t v17 = (void *)qword_10032F240;
        uint64_t v46 = (void *)v14;
        if (os_log_type_enabled((os_log_t)qword_10032F240, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = v17;
          id v19 = [v5 revision];
          long long v20 = [v5 application];
          *(_DWORD *)buf = 134218754;
          id v56 = v19;
          uint64_t v14 = (uint64_t)v46;
          __int16 v57 = 2114;
          uint64_t v58 = v20;
          __int16 v59 = 2048;
          uint64_t v60 = v3;
          __int16 v61 = 2112;
          id v62 = v46;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "STH verification failure after maximum proof delay for revision %lld of %{public}@, %ld: %@", buf, 0x2Au);
        }
        long long v21 = *(uint64_t **)(a1 + 64);
        if (v21) {
          uint64_t v22 = *v21;
        }
        else {
          uint64_t v22 = 0;
        }
        long long v23 = +[TransparencyError errorWithError:v22 underlyingError:v14];
        id v24 = [v5 revision];
        long long v25 = [v5 application];
        uint64_t v26 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify", v3, v23, @"STH verification failure after maximum verification delay for revision %lld of %@", v24, v25 code underlyingError description];

        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v26);
        long long v27 = [*(id *)(a1 + 32) context];
        long long v28 = [v27 settings];
        LODWORD(v25) = [v28 allowsInternalSecurityPolicies];

        if (v25)
        {
          CFStringRef v53 = @"failedRevision";
          id v29 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 revision]);
          __int16 v54 = v29;
          id v30 = +[NSDictionary dictionaryWithObjects:&v54 forKeys:&v53 count:1];
        }
        else
        {
          id v30 = 0;
        }
        id v31 = +[TransparencyAnalytics logger];
        [v31 logResultForEvent:v47 hardFailure:1 result:v26 withAttributes:v30];

        uint64_t v32 = *(void **)(a1 + 40);
        uint64_t v33 = +[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", [v5 revision]);
        [v32 addObject:v33];

        __int16 v34 = [*(id *)(a1 + 32) dataStore];
        id v48 = 0;
        unsigned __int8 v35 = [v34 persistAndRefaultObject:v5 error:&v48];
        id v36 = v48;
        id v37 = v48;

        if ((v35 & 1) == 0)
        {
          if (qword_10032F238 != -1) {
            dispatch_once(&qword_10032F238, &stru_1002C8838);
          }
          __int16 v38 = qword_10032F240;
          if (os_log_type_enabled((os_log_t)qword_10032F240, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v56 = v37;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "failed to save expired STH: %@", buf, 0xCu);
          }
          uint64_t v39 = [*(id *)(a1 + 32) dataStore];
          [v39 reportCoreDataPersistEventForLocation:@"failExpiredSTHs" underlyingError:v37];

          uint64_t v40 = *(void *)(*(void *)(a1 + 48) + 8);
          uint64_t v42 = *(void *)(v40 + 40);
          uint64_t v41 = (id *)(v40 + 40);
          if (!v42) {
            objc_storeStrong(v41, v36);
          }
        }

        uint64_t v4 = (char *)v4 + 1;
      }
      while (v45 != v4);
      id v45 = [obj countByEnumeratingWithState:&v49 objects:v63 count:16];
      if (!v45) {
        goto LABEL_43;
      }
    }
  }
  uint64_t v47 = 0;
LABEL_43:
}

void sub_1001EF13C(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EF180(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EFA2C(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EFA70(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001EFFBC(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F052C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1001F0580(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F05C4(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F0608(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) objectMapHead];
  uint64_t v3 = +[SignedMapHead signedTypeWithObject:v2];

  uint64_t v4 = [*(id *)(a1 + 40) dataStore];
  [v3 setDataStore:v4];

  [v3 setOverrideBeginTimeFromLogEntry:*(void *)(a1 + 48)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8);
  obuint64_t j = *(id *)(v5 + 40);
  id v6 = [v3 copyManagedObject:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6)
  {
    CFStringRef v7 = [*(id *)(a1 + 40) dataStore];
    [v7 onMocSetMapHead:v6 inclusionResult:*(void *)(a1 + 88) inclusionError:*(void *)(a1 + 56)];

    [v6 setUnsigned:"inclusionVerified" value:*(void *)(a1 + 88)];
    [v6 setConsistencyVerified:1];
    if (*(void *)(a1 + 96) && !*(void *)(a1 + 88))
    {
      uint64_t v8 = [*(id *)(a1 + 40) dataStore];
      uint64_t v9 = **(void **)(a1 + 96);
      unsigned int v10 = [*(id *)(a1 + 40) applicationID];
      uint64_t v11 = [*(id *)(a1 + 40) context];
      uint64_t v12 = [v11 optInServer];
      uint64_t v13 = [v8 createFailureEvent:v9 application:v10 optInServer:v12];

      [v6 setFailureEvent:v13];
      uint64_t v14 = [*(id *)(a1 + 40) context];
      uint64_t v15 = [v14 optInServer];
      unsigned __int8 v16 = [v15 getAggregateOptInState:0];

      if (qword_10032F238 != -1) {
        dispatch_once(&qword_10032F238, &stru_1002C8940);
      }
      uint64_t v17 = (void *)qword_10032F240;
      if (os_log_type_enabled((os_log_t)qword_10032F240, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = v17;
        id v19 = [v13 eventId];
        long long v20 = [*(id *)(a1 + 40) applicationID];
        *(_DWORD *)buf = 138543874;
        id v37 = v19;
        __int16 v38 = 2112;
        uint64_t v39 = v20;
        __int16 v40 = 2112;
        uint64_t v41 = v16;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Created failure eventId %{public}@ for %{pubic}@ SMH inclusion validation: %@", buf, 0x20u);
      }
      long long v21 = [*(id *)(a1 + 40) context];
      uint64_t v22 = [v21 followUp];
      long long v23 = [*(id *)(a1 + 40) applicationID];
      id v24 = [v13 eventId];
      [v22 postFollowup:v23 type:2 eventId:v24 errorCode:[*(id *)(a1 + 96) code] optInState:v16 additionalInfo:0 error:0];
    }
    [v6 receiptTime];
    *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v25;
    uint64_t v26 = [*(id *)(a1 + 40) dataStore];
    uint64_t v27 = *(void *)(*(void *)(a1 + 64) + 8);
    id v34 = *(id *)(v27 + 40);
    unsigned __int8 v28 = [v26 persistAndRefaultObject:v6 error:&v34];
    objc_storeStrong((id *)(v27 + 40), v34);

    if ((v28 & 1) == 0)
    {
      if (qword_10032F238 != -1) {
        dispatch_once(&qword_10032F238, &stru_1002C8960);
      }
      id v29 = qword_10032F240;
      if (os_log_type_enabled((os_log_t)qword_10032F240, OS_LOG_TYPE_ERROR))
      {
        id v30 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        id v37 = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "failed to update inclusion state for map head: %@", buf, 0xCu);
      }
      id v31 = [*(id *)(a1 + 40) dataStore];
      [v31 reportCoreDataPersistEventForLocation:@"mapHeadRevisionLogProof" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];

      if (*(void *)(a1 + 96))
      {
        **(void **)(a1 + 96) = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
  }
  else
  {
    if (qword_10032F238 != -1) {
      dispatch_once(&qword_10032F238, &stru_1002C8920);
    }
    uint64_t v32 = qword_10032F240;
    if (os_log_type_enabled((os_log_t)qword_10032F240, OS_LOG_TYPE_INFO))
    {
      uint64_t v33 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      id v37 = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "No stored map head for revision log proof response: %@", buf, 0xCu);
    }
  }
}

void sub_1001F0B18(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F0B5C(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F0BA0(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F1080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 160), 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001F10D0(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F1114(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F1158(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) patHead];
  uint64_t v3 = +[SignedLogHead signedTypeWithObject:v2];

  uint64_t v4 = [*(id *)(a1 + 40) dataStore];
  [v3 setDataStore:v4];

  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  obuint64_t j = *(id *)(v5 + 40);
  id v6 = [v3 copyManagedObject:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (v6)
  {
    [v6 setUnsigned:"inclusionVerified" value:*(void *)(a1 + 72)];
    if (*(void *)(a1 + 80) && !*(void *)(a1 + 72))
    {
      CFStringRef v7 = [*(id *)(a1 + 40) dataStore];
      uint64_t v8 = **(void **)(a1 + 80);
      uint64_t v9 = [*(id *)(a1 + 40) applicationID];
      unsigned int v10 = [*(id *)(a1 + 40) context];
      uint64_t v11 = [v10 optInServer];
      uint64_t v12 = [v7 createFailureEvent:v8 application:v9 optInServer:v11];

      [v6 setFailureEvent:v12];
      uint64_t v13 = [*(id *)(a1 + 40) context];
      uint64_t v14 = [v13 optInServer];
      id v39 = 0;
      uint64_t v15 = [v14 getAggregateOptInState:&v39];
      id v37 = v39;

      if (qword_10032F238 != -1) {
        dispatch_once(&qword_10032F238, &stru_1002C8A08);
      }
      unsigned __int8 v16 = (void *)qword_10032F240;
      if (os_log_type_enabled((os_log_t)qword_10032F240, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = v16;
        uint64_t v18 = [v12 eventId];
        uint64_t v19 = [*(id *)(a1 + 40) applicationID];
        *(_DWORD *)buf = 138543874;
        uint64_t v42 = v18;
        __int16 v43 = 2114;
        uint64_t v44 = v19;
        __int16 v45 = 2112;
        id v46 = v37;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Created failure eventId %{public}@ for %{public}@ STH inclusion validation %@", buf, 0x20u);
      }
      if (qword_10032F238 != -1) {
        dispatch_once(&qword_10032F238, &stru_1002C8A28);
      }
      long long v20 = (void *)qword_10032F240;
      if (os_log_type_enabled((os_log_t)qword_10032F240, OS_LOG_TYPE_DEFAULT))
      {
        long long v21 = v20;
        uint64_t v22 = [v12 eventId];
        long long v23 = [*(id *)(a1 + 40) applicationID];
        *(_DWORD *)buf = 138543618;
        uint64_t v42 = v22;
        __int16 v43 = 2114;
        uint64_t v44 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Created failure eventId %{public}@ for %{public}@ STH inclusion validation", buf, 0x16u);
      }
      id v24 = [*(id *)(a1 + 40) context];
      uint64_t v25 = [v24 followUp];
      uint64_t v26 = [*(id *)(a1 + 40) applicationID];
      uint64_t v27 = [v12 eventId];
      [v25 postFollowup:v26 type:2 eventId:v27 errorCode:objc_msgSend(**(id **)(a1 + 80), "code") optInState:v15 infoLink:0 additionalInfo:0 error:0];
    }
    [v6 receiptTime];
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v28;
    id v29 = [*(id *)(a1 + 40) dataStore];
    uint64_t v30 = *(void *)(*(void *)(a1 + 48) + 8);
    id v38 = *(id *)(v30 + 40);
    unsigned __int8 v31 = [v29 persistAndRefaultObject:v6 error:&v38];
    objc_storeStrong((id *)(v30 + 40), v38);

    if ((v31 & 1) == 0)
    {
      if (qword_10032F238 != -1) {
        dispatch_once(&qword_10032F238, &stru_1002C8A48);
      }
      uint64_t v32 = qword_10032F240;
      if (os_log_type_enabled((os_log_t)qword_10032F240, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v42 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "failed to update inclusion state for map head: %@", buf, 0xCu);
      }
      id v34 = [*(id *)(a1 + 40) dataStore];
      [v34 reportCoreDataPersistEventForLocation:@"patHeadRevisionLogProof" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];

      if (*(void *)(a1 + 80))
      {
        **(void **)(a1 + 80) = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)];
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    }
  }
  else
  {
    if (qword_10032F238 != -1) {
      dispatch_once(&qword_10032F238, &stru_1002C89E8);
    }
    unsigned __int8 v35 = qword_10032F240;
    if (os_log_type_enabled((os_log_t)qword_10032F240, OS_LOG_TYPE_INFO))
    {
      id v36 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v42 = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "No stored PAT head for revision log proof response: %@", buf, 0xCu);
    }
  }
}

void sub_1001F16F8(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F173C(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F1780(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F17C4(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F1CBC(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F1D00(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F1D44(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F2044(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F2088(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F2618(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) dataStore];
  [v2 setDataStore:v3];

  uint64_t v4 = *(void **)(a1 + 32);
  id v14 = 0;
  uint64_t v5 = [v4 createManagedObjectWithError:&v14];
  id v6 = v14;
  CFStringRef v7 = v6;
  if (v5)
  {
    [v5 setInclusionVerified:2];
    uint64_t v8 = [*(id *)(a1 + 40) dataStore];
    id v13 = v7;
    unsigned __int8 v9 = [v8 persistAndRefaultObject:v5 error:&v13];
    id v10 = v13;

    if ((v9 & 1) == 0)
    {
      if (qword_10032F238 != -1) {
        dispatch_once(&qword_10032F238, &stru_1002C8B30);
      }
      uint64_t v11 = qword_10032F240;
      if (os_log_type_enabled((os_log_t)qword_10032F240, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "failed to save unverified PAT STH from revision log inclusion proof: %@", buf, 0xCu);
      }
      uint64_t v12 = [*(id *)(a1 + 40) dataStore];
      [v12 reportCoreDataPersistEventForLocation:@"revisionMissingTLTProof" underlyingError:v10];

      if (*(void *)(a1 + 48))
      {
        **(void **)(a1 + 4_Block_object_dispose(&STACK[0x410], 8) = +[SecXPCHelper cleanseErrorForXPC:v10];
      }
    }
  }
  else
  {
    id v10 = v6;
  }
}

void sub_1001F27DC(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F2B10(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F2B54(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F2FD4(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F3018(id a1)
{
  qword_10032F240 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

BOOL sub_1001F30E4(uint64_t a1)
{
  return a1 && (a1 & (a1 - 1)) == 0;
}

void sub_1001F3670(id a1)
{
  qword_10032F250 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F36B4(id a1)
{
  qword_10032F250 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F38F4(id a1)
{
  qword_10032F250 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F4080(id a1)
{
  qword_10032F260 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F40C4(id a1)
{
  qword_10032F260 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F4108(id a1)
{
  qword_10032F260 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F414C(uint64_t a1, void *a2, void *a3)
{
  id v7 = a3;
  uint64_t v5 = [a2 deviceList];
  if (v5)
  {
    id v6 = [*(id *)(a1 + 32) updateDevicesList:v5];
  }
  else
  {
    id v6 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1001F4754(id a1)
{
  qword_10032F270 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F4798(id a1)
{
  qword_10032F270 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F4984(id a1)
{
  qword_10032F270 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F5228(id a1)
{
  qword_10032F280 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F526C(id a1)
{
  qword_10032F280 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F5388(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v13 = 0;
  uint64_t v3 = [v2 createManagedObjectWithError:&v13];
  id v4 = v13;
  if (v3)
  {
    uint64_t v5 = [*(id *)(a1 + 32) dataStore];
    [v5 onMocSetMapHead:v3 signatureResult:*(void *)(a1 + 48) signatureError:*(void *)(a1 + 40)];

    id v6 = [*(id *)(a1 + 32) dataStore];
    id v12 = v4;
    unsigned __int8 v7 = [v6 persistWithError:&v12];
    id v8 = v12;

    if ((v7 & 1) == 0)
    {
      if (qword_10032F278 != -1) {
        dispatch_once(&qword_10032F278, &stru_1002C8D78);
      }
      unsigned __int8 v9 = qword_10032F280;
      if (os_log_type_enabled((os_log_t)qword_10032F280, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed persist SMH signature failure: %@", buf, 0xCu);
      }
      id v10 = [*(id *)(a1 + 32) dataStore];
      [v10 reportCoreDataPersistEventForLocation:@"mapHeadSignature" underlyingError:v8];
    }
  }
  else
  {
    if (qword_10032F278 != -1) {
      dispatch_once(&qword_10032F278, &stru_1002C8D58);
    }
    uint64_t v11 = qword_10032F280;
    if (os_log_type_enabled((os_log_t)qword_10032F280, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "failed to create SMH object: %@", buf, 0xCu);
    }
    id v8 = v4;
  }
}

void sub_1001F5588(id a1)
{
  qword_10032F280 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F55CC(id a1)
{
  qword_10032F280 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F57F4(id a1)
{
  qword_10032F280 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F59CC(id a1)
{
  qword_10032F290 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F5B04(id a1)
{
  qword_10032F290 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F5F84(id a1)
{
  qword_10032F290 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F5FC8(id a1)
{
  qword_10032F290 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F627C(id a1)
{
  qword_10032F2A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F62C0(id a1)
{
  qword_10032F2A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F6AF0(id a1)
{
  qword_10032F2A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F71E0(id a1)
{
  qword_10032F2B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F780C(id a1)
{
  qword_10032F2B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1001F79B8(uint64_t a1, void *a2, void *a3)
{
  if (![*(id *)(a1 + 32) hasStartSlh]
    || ([*(id *)(a1 + 32) startSlh],
        id v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        !v6))
  {
    uint64_t v35 = -181;
    if (!a2) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (![*(id *)(a1 + 32) hasEndSlh]
    || ([*(id *)(a1 + 32) endSlh], unsigned __int8 v7 = objc_claimAutoreleasedReturnValue(),
                                                  v7,
                                                  !v7))
  {
    uint64_t v35 = -182;
    if (!a2) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  id v8 = [*(id *)(a1 + 32) proofHashesArray];
  if (v8)
  {
    id v9 = [*(id *)(a1 + 32) proofHashesArray_Count];

    if (v9)
    {
      id v10 = [*(id *)(a1 + 32) startSlh];
      uint64_t v11 = [*(id *)(a1 + 32) verifier];
      id v12 = [v11 trustedKeyStore];
      id v13 = [v12 signatureVerifier];
      id v14 = [*(id *)(a1 + 32) dataStore];
      id v38 = +[SignedLogHead signedTypeWithObject:v10 verifier:v13 dataStore:v14];

      id v15 = [*(id *)(a1 + 32) endSlh];
      id v16 = [*(id *)(a1 + 32) verifier];
      uint64_t v17 = [v16 trustedKeyStore];
      uint64_t v18 = [v17 signatureVerifier];
      uint64_t v19 = [*(id *)(a1 + 32) dataStore];
      long long v20 = +[SignedLogHead signedTypeWithObject:v15 verifier:v18 dataStore:v19];

      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v50 = 0x3032000000;
      long long v51 = sub_1001F7F34;
      long long v52 = sub_1001F7F44;
      id v53 = 0;
      uint64_t v45 = 0;
      id v46 = &v45;
      uint64_t v47 = 0x2020000000;
      id v48 = 0;
      long long v21 = [*(id *)(a1 + 32) verifier];
      uint64_t v22 = [*(id *)(a1 + 32) proofHashesArray];
      long long v23 = (id *)(*((void *)&buf + 1) + 40);
      obuint64_t j = *(id *)(*((void *)&buf + 1) + 40);
      id v24 = [v21 verifyConsistencyProof:v22 startLogHead:v38 endLogHead:v20 error:&obj];
      objc_storeStrong(v23, obj);

      id v48 = v24;
      uint64_t v25 = [*(id *)(a1 + 32) dataStore];
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      void v39[2] = sub_1001F7F4C;
      v39[3] = &unk_1002B9800;
      v39[4] = *(void *)(a1 + 32);
      id v26 = v38;
      id v40 = v26;
      p_long long buf = &buf;
      id v27 = v20;
      id v41 = v27;
      __int16 v43 = &v45;
      [v25 performBlockAndWait:v39];

      uint64_t v28 = +[NSMutableDictionary dictionary];
      id v29 = [*(id *)(a1 + 32) metadata];
      uint64_t v30 = kTransparencyResponseMetadataKeyServerHint;
      unsigned __int8 v31 = [v29 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

      if (v31)
      {
        uint64_t v32 = [*(id *)(a1 + 32) metadata];
        uint64_t v33 = [v32 objectForKeyedSubscript:v30];
        [v28 setObject:v33 forKeyedSubscript:v30];
      }
      if ([v28 count]) {
        *a3 = v28;
      }
      if (a2) {
        *a2 = *(id *)(*((void *)&buf + 1) + 40);
      }
      uint64_t v34 = v46[3];

      _Block_object_dispose(&v45, 8);
      _Block_object_dispose(&buf, 8);

      return v34;
    }
  }
  uint64_t v35 = -183;
  if (a2)
  {
LABEL_19:
    *a2 = +[TransparencyError errorWithDomain:kTransparencyErrorDecode code:v35 description:@"log consistency response missing data required for verification"];
  }
LABEL_20:
  if (qword_10032F2A8 != -1) {
    dispatch_once(&qword_10032F2A8, &stru_1002C8EE0);
  }
  id v36 = qword_10032F2B0;
  if (os_log_type_enabled((os_log_t)qword_10032F2B0, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v35;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "log consistency response missing data required for verification: %ld", (uint8_t *)&buf, 0xCu);
  }
  return 0;
}

void sub_1001F7EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va1, a13);
  va_start(va, a13);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001F7EF0(id a1)
{
  qword_10032F2B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1001F7F34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001F7F44(uint64_t a1)
{
}

void sub_1001F7F4C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) forwards];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
  id v6 = *(void **)(v3 + 40);
  uint64_t v5 = (id *)(v3 + 40);
  id v4 = v6;
  if (v2)
  {
    unsigned __int8 v7 = *(void **)(a1 + 40);
    obuint64_t j = v4;
    id v8 = [v7 copyManagedObject:&obj];
    objc_storeStrong(v5, obj);
    id v9 = *(void **)(a1 + 48);
    uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
    id v12 = *(void **)(v10 + 40);
    uint64_t v11 = (void **)(v10 + 40);
    uint64_t v35 = v12;
    id v13 = [v9 copyManagedObject:&v35];
    uint64_t v14 = v35;
  }
  else
  {
    id v15 = *(void **)(a1 + 48);
    id v34 = v4;
    id v8 = [v15 copyManagedObject:&v34];
    objc_storeStrong(v5, v34);
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v18 = *(void **)(v17 + 40);
    uint64_t v11 = (void **)(v17 + 40);
    uint64_t v33 = v18;
    id v13 = [v16 copyManagedObject:&v33];
    uint64_t v14 = v33;
  }
  id v19 = v14;
  long long v20 = *v11;
  *uint64_t v11 = v19;

  if (!v8 || !v13)
  {
    if (qword_10032F2A8 != -1) {
      dispatch_once(&qword_10032F2A8, &stru_1002C8F00);
    }
    long long v21 = qword_10032F2B0;
    if (os_log_type_enabled((os_log_t)qword_10032F2B0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v38 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "failed to get SLHs from data store: %@", buf, 0xCu);
    }
  }
  if ([*(id *)(a1 + 32) forwards])
  {
    if ([v8 consistencyVerified] == (id)2)
    {
      id v23 = [v8 revision];
      id v24 = [*(id *)(a1 + 32) startRevision];
      id v25 = [v24 longLongValue];

      if (v23 == v25) {
        [*(id *)(a1 + 32) setResult:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) treeHead:v8 error:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
      }
    }
  }
  if ([v8 consistencyVerified] == (id)1) {
    [*(id *)(a1 + 32) setResult:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) treeHead:v13 error:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) == 1) {
    [*(id *)(a1 + 32) checkSplitsFor:v13];
  }
  id v26 = [*(id *)(a1 + 32) dataStore];
  uint64_t v27 = *(void *)(*(void *)(a1 + 56) + 8);
  id v32 = *(id *)(v27 + 40);
  unsigned __int8 v28 = [v26 persistWithError:&v32];
  objc_storeStrong((id *)(v27 + 40), v32);

  if ((v28 & 1) == 0)
  {
    if (qword_10032F2A8 != -1) {
      dispatch_once(&qword_10032F2A8, &stru_1002C8F20);
    }
    id v29 = qword_10032F2B0;
    if (os_log_type_enabled((os_log_t)qword_10032F2B0, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v38 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "failed to save consistency results: %@", buf, 0xCu);
    }
    unsigned __int8 v31 = [*(id *)(a1 + 32) dataStore];
    [v31 reportCoreDataPersistEventForLocation:@"verifyConsistency" underlyingError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  }
}

void sub_1001F8298(id a1)
{
  qword_10032F2B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F82DC(id a1)
{
  qword_10032F2B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F87E0(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F8824(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setResult:v3];
  if (qword_10032F2B8 != -1) {
    dispatch_once(&qword_10032F2B8, &stru_1002C8F60);
  }
  id v4 = qword_10032F2C0;
  if (os_log_type_enabled((os_log_t)qword_10032F2C0, OS_LOG_TYPE_INFO))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "opt-in result from IDS: %@", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v5 = [*(id *)(a1 + 32) operationQueue];
  id v6 = [*(id *)(a1 + 32) finishedOp];
  [v5 addOperation:v6];
}

void sub_1001F8940(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F8CF8(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F9358(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_1001F9380(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F93C8(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001F940C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  uint64_t v2 = [*(id *)(a1 + 32) error];

  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) error];
    [*(id *)(a1 + 40) setError:v3];

    id v4 = [WeakRetained optInStates];
    [v4 completedCurrentTarget];

LABEL_5:
    int v7 = [WeakRetained operationQueue];
    [v7 addOperation:*(void *)(a1 + 48)];
    goto LABEL_6;
  }
  if ([*(id *)(a1 + 40) targetState] == (id)2)
  {
    [WeakRetained clearOptInStateAndPushToCloud];
    uint64_t v5 = [WeakRetained deps];
    id v6 = [v5 stateMonitor];
    [v6 setOptInState:0 everOptIn:1];

    [*(id *)(a1 + 40) setTargetState:1];
    [WeakRetained setNextState:@"ValidateSelfOptIn"];
    goto LABEL_5;
  }
  id v8 = [WeakRetained applicationId];
  int v7 = +[TransparencyAnalytics formatEventName:@"OptInServerSet" application:v8];

  id v9 = [*(id *)(a1 + 32) result];
  [WeakRetained processResponse:v9 watcher:*(void *)(a1 + 40) finishOp:*(void *)(a1 + 48)];

  uint64_t v10 = [WeakRetained deps];
  uint64_t v11 = [v10 logger];
  id v12 = [WeakRetained error];
  [v11 logResultForEvent:v7 hardFailure:1 result:v12];

  id v13 = [WeakRetained error];
  [*(id *)(a1 + 40) setError:v13];

  uint64_t v14 = [*(id *)(a1 + 40) error];

  if (!v14)
  {
    id v15 = [WeakRetained deps];
    uint64_t v16 = [v15 stateMonitor];
    [v16 setOptInState:objc_msgSend(*(id *)(a1 + 40), "targetState") == (id)1 everOptIn:1];
  }
  uint64_t v17 = [WeakRetained optInStates];
  [v17 completedCurrentTarget];

  uint64_t v18 = [WeakRetained operationQueue];
  [v18 addOperation:*(void *)(a1 + 48)];

LABEL_6:
}

void sub_1001FA3F8(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FA43C(id *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v7 = [a2 prefixedURI];
  id v6 = [a1[4] verifyResponse:v5 uri:v7 expectedState:objc_msgSend(a1[5], "targetState") != 0];

  [a1[6] setObject:v6 forKeyedSubscript:v7];
}

void sub_1001FA4DC(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FA520(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FA564(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FA5A8(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FA5EC(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FA630(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FA8B8(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FAC14(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

intptr_t sub_1001FAC58(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = [v3 deps];
  id v6 = [v5 logger];
  [v6 logResultForEvent:@"optInSync" hardFailure:1 result:v4];

  id v7 = *(NSObject **)(a1 + 40);

  return dispatch_semaphore_signal(v7);
}

void sub_1001FAE14(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FAF68(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FB3C0(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FB404(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FB448(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FBCE4(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FBD28(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FBD6C(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FBDB0(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FBDF4(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FBE38(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FBE7C(id a1)
{
  qword_10032F2C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FC740(id a1)
{
  qword_10032F2D0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FC90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001FC938(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1001FC948(uint64_t a1)
{
}

void sub_1001FC950(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v42 = 0;
  id v3 = [v2 copyManagedObject:&v42];
  id v4 = v42;
  if (!v3)
  {
    if (qword_10032F2C8 != -1) {
      dispatch_once(&qword_10032F2C8, &stru_1002C9328);
    }
    id v9 = qword_10032F2D0;
    if (os_log_type_enabled((os_log_t)qword_10032F2D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v44 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to find tree head after inclusion verification: %@", buf, 0xCu);
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    uint64_t v10 = +[SecXPCHelper cleanseErrorForXPC:v4];
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
    id v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
    id v13 = v4;
    goto LABEL_31;
  }
  [v3 setUnsigned:"inclusionVerified" value:*(void *)(a1 + 64)];
  if (*(void *)(a1 + 64) != 1)
  {
    id v5 = [*(id *)(a1 + 40) dataStore];
    id v6 = [v5 createSignedTreeHeadFailure];

    id v7 = *(id **)(a1 + 72);
    if (v7 && *v7) {
      uint64_t v8 = (uint64_t)[*v7 code];
    }
    else {
      uint64_t v8 = -120;
    }
    [v6 setErrorCode:v8];
    uint64_t v14 = *(id **)(a1 + 72);
    if (v14 && *v14)
    {
      id v15 = [*v14 domain];
      [v6 setErrorDomain:v15];
    }
    else
    {
      [v6 setErrorDomain:kTransparencyErrorUnknown];
    }
    [v6 setSth:v3];
    [v6 setVerificationType:1];
    if (!*(void *)(a1 + 64))
    {
      uint64_t v16 = [*(id *)(a1 + 40) dataStore];
      uint64_t v17 = [v3 application];
      uint64_t v18 = [*(id *)(a1 + 40) optInServer];
      id v19 = [v16 createFailureEvent:v4 application:v17 optInServer:v18];

      [v3 setFailureEvent:v19];
      long long v20 = [*(id *)(a1 + 40) optInServer];
      long long v21 = [v20 getAggregateOptInState:0];

      if (qword_10032F2C8 != -1) {
        dispatch_once(&qword_10032F2C8, &stru_1002C9348);
      }
      uint64_t v22 = (void *)qword_10032F2D0;
      if (os_log_type_enabled((os_log_t)qword_10032F2D0, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = v22;
        id v24 = [v19 eventId];
        *(_DWORD *)long long buf = 138543362;
        id v44 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Created failure eventId %{public}@ for STH inclusion validation", buf, 0xCu);
      }
      id v25 = [*(id *)(a1 + 40) followUp];
      id v26 = [v3 application];
      uint64_t v27 = [v19 eventId];
      [v25 postFollowup:v26 type:2 eventId:v27 errorCode:[v4 code] optInState:v21 infoLink:0 additionalInfo:0 error:0];
    }
  }
  unsigned __int8 v28 = [*(id *)(a1 + 40) dataStore];
  id v41 = v4;
  unsigned __int8 v29 = [v28 persistWithError:&v41];
  id v13 = v41;

  if ((v29 & 1) == 0)
  {
    if (qword_10032F2C8 != -1) {
      dispatch_once(&qword_10032F2C8, &stru_1002C9368);
    }
    uint64_t v30 = qword_10032F2D0;
    if (os_log_type_enabled((os_log_t)qword_10032F2D0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v44 = v13;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "failed to save inclusion verification state to PAT head after TLT entry verification: %@", buf, 0xCu);
    }
    unsigned __int8 v31 = [*(id *)(a1 + 40) dataStore];
    [v31 reportCoreDataPersistEventForLocation:@"verifyPatHeadInclusion" underlyingError:v13];

    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
    uint64_t v32 = +[SecXPCHelper cleanseErrorForXPC:v13];
    uint64_t v33 = *(void *)(*(void *)(a1 + 56) + 8);
    id v34 = *(void **)(v33 + 40);
    *(void *)(v33 + 40) = v32;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  [v3 receiptTime];
  if (Current - v36 > 1.0)
  {
    double v37 = CFAbsoluteTimeGetCurrent();
    [v3 receiptTime];
    double v39 = v37 - v38;
    id v12 = +[TransparencyAnalytics logger];
    id v40 = +[NSNumber numberWithDouble:v39];
    [v12 logMetric:v40 withName:@"ktTLTInclusionProofTime"];

LABEL_31:
  }
}

void sub_1001FCE80(id a1)
{
  qword_10032F2D0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FCEC4(id a1)
{
  qword_10032F2D0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FCF08(id a1)
{
  qword_10032F2D0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_1001FD018(uint64_t a1, void *a2, void *a3)
{
  if (+[TransparencyAnalytics hasInternalDiagnostics])
  {
    id v6 = +[NSMutableDictionary dictionary];
    id v7 = [*(id *)(a1 + 32) metadata];
    uint64_t v8 = kTransparencyResponseMetadataKeyServerHint;
    id v9 = [v7 objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];

    if (v9)
    {
      uint64_t v10 = [*(id *)(a1 + 32) metadata];
      uint64_t v11 = [v10 objectForKeyedSubscript:v8];
      [v6 setObject:v11 forKeyedSubscript:v8];
    }
    if ([v6 count]) {
      *a3 = v6;
    }
  }
  id v12 = [*(id *)(a1 + 32) verifyWithError:a2];
  if (v12 == (id)1)
  {
    id v13 = [*(id *)(a1 + 32) nodeBytes];
    uint64_t v14 = +[TransparencyGPBMessage parseFromData:v13 error:a2];

    if (v14)
    {
      if ([v14 hasPatHead])
      {
        id v15 = [v14 patHead];
        uint64_t v16 = [v15 object];
        uint64_t v17 = [*(id *)(a1 + 40) logHead];
        unsigned __int8 v18 = [v16 isEqualToData:v17];

        if (v18)
        {
          uint64_t v19 = 1;
LABEL_36:
          id v22 = [*(id *)(a1 + 32) setInclusionResult:v19 signedLogHead:*(void *)(a1 + 40) error:a2];

          return v22;
        }
      }
      if (a2)
      {
        *a2 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-63 description:@"top-level tree entry does not contain the SLH in the per-app tree entry"];
      }
      if (qword_10032F2C8 != -1) {
        dispatch_once(&qword_10032F2C8, &stru_1002C93F0);
      }
      uint64_t v23 = qword_10032F2D0;
      if (!os_log_type_enabled((os_log_t)qword_10032F2D0, OS_LOG_TYPE_ERROR))
      {
LABEL_35:
        uint64_t v19 = 0;
        goto LABEL_36;
      }
      *(_WORD *)long long buf = 0;
      id v24 = "top-level tree entry does not contain the SLH in the per-app tree entry";
      id v25 = v23;
      uint32_t v26 = 2;
    }
    else
    {
      if (a2)
      {
        +[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", kTransparencyErrorDecode, -141, *a2);
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      if (qword_10032F2C8 != -1) {
        dispatch_once(&qword_10032F2C8, &stru_1002C93D0);
      }
      uint64_t v27 = qword_10032F2D0;
      if (!os_log_type_enabled((os_log_t)qword_10032F2D0, OS_LOG_TYPE_ERROR)) {
        goto LABEL_35;
      }
      if (a2) {
        uint64_t v28 = *a2;
      }
      else {
        uint64_t v28 = 0;
      }
      *(_DWORD *)long long buf = 138412290;
      uint64_t v31 = v28;
      id v24 = "failed to decode top-level tree node: %@";
      id v25 = v27;
      uint32_t v26 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v24, buf, v26);
    goto LABEL_35;
  }
  id v20 = v12;
  if (a2)
  {
    *a2 = +[TransparencyError errorWithDomain:@"TransparencyErrorVerify" code:-14 underlyingError:*a2 description:@"top-level tree verification failed"];
  }
  if (qword_10032F2C8 != -1) {
    dispatch_once(&qword_10032F2C8, &stru_1002C93B0);
  }
  long long v21 = qword_10032F2D0;
  if (os_log_type_enabled((os_log_t)qword_10032F2D0, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "top level tree verification failed", buf, 2u);
  }
  return [*(id *)(a1 + 32) setInclusionResult:v20 signedLogHead:*(void *)(a1 + 40) error:a2];
}

void sub_1001FD41C(id a1)
{
  qword_10032F2D0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FD460(id a1)
{
  qword_10032F2D0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FD4A4(id a1)
{
  qword_10032F2D0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FD8E0(id a1)
{
  qword_10032F2E0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FDF60(id a1)
{
  qword_10032F2F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FDFA4(id a1)
{
  qword_10032F2F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FE364(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v17 = 0;
  id v3 = [v2 createManagedObjectWithError:&v17];
  id v4 = v17;
  [v3 getUnsigned:"signatureVerified"];
  [v3 setUnsigned:"signatureVerified" value:*(void *)(a1 + 40)];
  [v3 setGossip:[*(id *)(a1 + 32) gossip]];
  if (!*(void *)(a1 + 40))
  {
    id v5 = [*(id *)(a1 + 32) dataStore];
    id v6 = [v5 createSignedTreeHeadFailure];

    id v7 = *(id **)(a1 + 48);
    if (v7 && *v7) {
      uint64_t v8 = (uint64_t)[*v7 code];
    }
    else {
      uint64_t v8 = -120;
    }
    [v6 setErrorCode:v8];
    id v9 = *(id **)(a1 + 48);
    if (v9 && *v9)
    {
      uint64_t v10 = [*v9 domain];
      [v6 setErrorDomain:v10];
    }
    else
    {
      [v6 setErrorDomain:kTransparencyErrorUnknown];
    }
    [v6 setSth:v3];
    [v6 setVerificationType:0];
  }
  uint64_t v11 = [*(id *)(a1 + 32) dataStore];
  id v16 = v4;
  unsigned __int8 v12 = [v11 persistWithError:&v16];
  id v13 = v16;

  if ((v12 & 1) == 0)
  {
    if (qword_10032F2E8 != -1) {
      dispatch_once(&qword_10032F2E8, &stru_1002C94A0);
    }
    uint64_t v14 = qword_10032F2F0;
    if (os_log_type_enabled((os_log_t)qword_10032F2F0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v19 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "failed to save signature result for STH: %@", buf, 0xCu);
    }
    id v15 = [*(id *)(a1 + 32) dataStore];
    [v15 reportCoreDataPersistEventForLocation:@"verifySTHSignature" underlyingError:v13];
  }
}

void sub_1001FE5AC(id a1)
{
  qword_10032F2F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1001FE724(uint64_t a1, uint64_t *a2)
{
  id v4 = [*(id *)(a1 + 32) logHead];
  id v5 = +[TransparencyGPBMessage parseFromData:v4 error:a2];

  if (![*(id *)(a1 + 32) hasSignature]
    || ([*(id *)(a1 + 32) signature],
        id v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        !v6))
  {
    uint64_t v36 = -27;
    goto LABEL_24;
  }
  uint64_t v7 = [*(id *)(a1 + 32) logHead];
  if (!v7
    || (uint64_t v8 = (void *)v7,
        [*(id *)(a1 + 32) logHead],
        id v9 = objc_claimAutoreleasedReturnValue(),
        id v10 = [v9 length],
        v9,
        v8,
        !v10))
  {
    uint64_t v36 = -26;
    goto LABEL_24;
  }
  if (!v5)
  {
    uint64_t v36 = -208;
    goto LABEL_24;
  }
  uint64_t v11 = [*(id *)(a1 + 32) signature];
  uint64_t v12 = [v11 signature];
  if (!v12)
  {
    uint64_t v36 = -46;
LABEL_36:

    goto LABEL_24;
  }
  id v13 = (void *)v12;
  uint64_t v14 = [*(id *)(a1 + 32) signature];
  id v15 = [v14 signature];
  id v16 = [v15 length];

  if (!v16)
  {
    uint64_t v36 = -46;
    goto LABEL_24;
  }
  uint64_t v11 = [*(id *)(a1 + 32) signature];
  uint64_t v17 = [v11 signingKeySpkihash];
  if (!v17)
  {
    uint64_t v36 = -47;
    goto LABEL_36;
  }
  unsigned __int8 v18 = (void *)v17;
  id v19 = [*(id *)(a1 + 32) signature];
  id v20 = [v19 signingKeySpkihash];
  id v21 = [v20 length];

  if (v21)
  {
    id v41 = [*(id *)(a1 + 32) verifier];
    id v22 = [*(id *)(a1 + 32) logHead];
    id v42 = [*(id *)(a1 + 32) signature];
    uint64_t v23 = [v42 signature];
    id v24 = [*(id *)(a1 + 32) signature];
    id v25 = [v24 signingKeySpkihash];
    uint32_t v26 = [*(id *)(a1 + 32) signature];
    id v43 = 0;
    unsigned int v27 = [v41 verifyMessage:v22 signature:v23 spkiHash:v25 algorithm:[TransparencySignatureVerifier secKeyAlgorithmForProtoAlgorithm:](TransparencySignatureVerifier, "secKeyAlgorithmForProtoAlgorithm:", objc_msgSend(v26, "algorithm")) error:&v43];
    id v28 = v43;

    uint64_t v29 = v27;
    unsigned int v30 = +[TransparencyError hasUnknownSPKIHashError:v28];
    if (v30) {
      uint64_t v29 = 2;
    }
    if (a2 && v28) {
      *a2 = (uint64_t)v28;
    }
    if (![*(id *)(a1 + 32) gossip] || v29)
    {
      [*(id *)(a1 + 32) storeSignatureResult:v29 signatureError:a2];
      if ((v27 & ~v30 & 1) == 0)
      {
        if (a2)
        {
          +[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", @"TransparencyErrorVerify", -139, *a2);
          *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue();
        }
        if (qword_10032F2E8 != -1) {
          dispatch_once(&qword_10032F2E8, &stru_1002C9528);
        }
        double v39 = qword_10032F2F0;
        if (os_log_type_enabled((os_log_t)qword_10032F2F0, OS_LOG_TYPE_ERROR))
        {
          if (a2) {
            uint64_t v40 = *a2;
          }
          else {
            uint64_t v40 = 0;
          }
          *(_DWORD *)long long buf = 138412290;
          uint64_t v45 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Signed log head signature verification failed: %@", buf, 0xCu);
        }
      }
    }
    else
    {
      if (qword_10032F2E8 != -1) {
        dispatch_once(&qword_10032F2E8, &stru_1002C9508);
      }
      uint64_t v31 = qword_10032F2F0;
      if (os_log_type_enabled((os_log_t)qword_10032F2F0, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "gossiped signed log head failed signature validation, will not store result", buf, 2u);
      }
      uint64_t v32 = +[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", @"TransparencyErrorVerify", -139, *a2);
      uint64_t v33 = +[TransparencyAnalytics formatEventName:@"GossipSignatureVerificationFailed" application:kKTApplicationIdentifierTLT];
      id v34 = +[TransparencyAnalytics logger];
      [v34 logResultForEvent:v33 hardFailure:1 result:v32];

      id v35 = v32;
      *a2 = (uint64_t)v35;
    }
    goto LABEL_31;
  }
  uint64_t v36 = -47;
LABEL_24:
  if (a2)
  {
    *a2 = +[TransparencyError errorWithDomain:kTransparencyErrorDecode code:v36 underlyingError:*a2 description:@"SLH missing data required for verification"];
  }
  if (qword_10032F2E8 != -1) {
    dispatch_once(&qword_10032F2E8, &stru_1002C94E8);
  }
  double v37 = qword_10032F2F0;
  if (os_log_type_enabled((os_log_t)qword_10032F2F0, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v45 = v36;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "SLH missing data required for verification: %ld", buf, 0xCu);
  }
  uint64_t v29 = 0;
LABEL_31:

  return v29;
}

void sub_1001FECCC(id a1)
{
  qword_10032F2F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FED10(id a1)
{
  qword_10032F2F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FED54(id a1)
{
  qword_10032F2F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FF7E8(id a1)
{
  qword_10032F300 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FF82C(id a1)
{
  qword_10032F300 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_1001FF9A4(uint64_t a1, uint64_t *a2)
{
  id v4 = [*(id *)(a1 + 32) mapHead];
  id v5 = +[TransparencyGPBMessage parseFromData:v4 error:a2];

  if (![*(id *)(a1 + 32) hasSignature]
    || ([*(id *)(a1 + 32) signature],
        id v6 = objc_claimAutoreleasedReturnValue(),
        v6,
        !v6))
  {
    uint64_t v39 = -22;
    goto LABEL_36;
  }
  uint64_t v7 = [*(id *)(a1 + 32) mapHead];
  if (!v7
    || (uint64_t v8 = (void *)v7,
        [*(id *)(a1 + 32) mapHead],
        id v9 = objc_claimAutoreleasedReturnValue(),
        id v10 = [v9 length],
        v9,
        v8,
        !v10))
  {
    uint64_t v39 = -21;
    goto LABEL_36;
  }
  uint64_t v11 = [*(id *)(a1 + 32) signature];
  uint64_t v12 = [v11 signature];
  if (!v12)
  {
    uint64_t v39 = -51;
LABEL_35:

    goto LABEL_36;
  }
  id v13 = (void *)v12;
  uint64_t v14 = [*(id *)(a1 + 32) signature];
  id v15 = [v14 signature];
  id v16 = [v15 length];

  if (!v16)
  {
    uint64_t v39 = -51;
    goto LABEL_36;
  }
  uint64_t v11 = [*(id *)(a1 + 32) signature];
  uint64_t v17 = [v11 signingKeySpkihash];
  if (!v17)
  {
    uint64_t v39 = -52;
    goto LABEL_35;
  }
  unsigned __int8 v18 = (void *)v17;
  id v19 = [*(id *)(a1 + 32) signature];
  id v20 = [v19 signingKeySpkihash];
  id v21 = [v20 length];

  if (v21)
  {
    if (v5)
    {
      uint64_t v22 = [v5 mapHeadHash];
      if (v22
        && (uint64_t v23 = (void *)v22,
            [v5 mapHeadHash],
            id v24 = objc_claimAutoreleasedReturnValue(),
            id v25 = [v24 length],
            v24,
            v23,
            v25))
      {
        if ([v5 application] && objc_msgSend(v5, "application"))
        {
          if ([v5 hasChangeLogHead]
            && ([v5 changeLogHead],
                uint32_t v26 = objc_claimAutoreleasedReturnValue(),
                v26,
                v26))
          {
            if ([v5 timestampMs])
            {
              unsigned int v27 = [*(id *)(a1 + 32) verifier];
              id v28 = [*(id *)(a1 + 32) mapHead];
              id v42 = [*(id *)(a1 + 32) signature];
              uint64_t v29 = [v42 signature];
              unsigned int v30 = [*(id *)(a1 + 32) signature];
              uint64_t v31 = [v30 signingKeySpkihash];
              uint64_t v32 = [*(id *)(a1 + 32) signature];
              id v43 = 0;
              unsigned int v33 = [v27 verifyMessage:v28 signature:v29 spkiHash:v31 algorithm:[TransparencySignatureVerifier secKeyAlgorithmForProtoAlgorithm:](TransparencySignatureVerifier, "secKeyAlgorithmForProtoAlgorithm:", objc_msgSend(v32, "algorithm")) error:&v43];
              id v34 = v43;

              uint64_t v35 = v33;
              unsigned int v36 = +[TransparencyError hasUnknownSPKIHashError:v34];
              if (v36) {
                uint64_t v35 = 2;
              }
              if (a2 && v34) {
                *a2 = (uint64_t)v34;
              }
              if ((v33 & ~v36 & 1) == 0)
              {
                if (a2)
                {
                  +[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", @"TransparencyErrorVerify", -138, *a2);
                  *a2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue();
                }
                if (qword_10032F2F8 != -1) {
                  dispatch_once(&qword_10032F2F8, &stru_1002C95A8);
                }
                double v37 = qword_10032F300;
                if (os_log_type_enabled((os_log_t)qword_10032F300, OS_LOG_TYPE_ERROR))
                {
                  if (a2) {
                    uint64_t v38 = *a2;
                  }
                  else {
                    uint64_t v38 = 0;
                  }
                  *(_DWORD *)long long buf = 138412290;
                  uint64_t v45 = v38;
                  _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "SMH signature verification failed: %@", buf, 0xCu);
                }
              }

              goto LABEL_43;
            }
            uint64_t v39 = -227;
          }
          else
          {
            uint64_t v39 = -25;
          }
        }
        else
        {
          uint64_t v39 = -24;
        }
      }
      else
      {
        uint64_t v39 = -23;
      }
    }
    else
    {
      uint64_t v39 = -207;
    }
  }
  else
  {
    uint64_t v39 = -52;
  }
LABEL_36:
  if (a2)
  {
    *a2 = +[TransparencyError errorWithDomain:kTransparencyErrorDecode code:v39 underlyingError:*a2 description:@"SMH missing data required for verification"];
  }
  if (qword_10032F2F8 != -1) {
    dispatch_once(&qword_10032F2F8, &stru_1002C9588);
  }
  uint64_t v40 = qword_10032F300;
  if (os_log_type_enabled((os_log_t)qword_10032F300, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v45 = v39;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "SMH missing data required for verification: %ld", buf, 0xCu);
  }
  uint64_t v35 = 0;
LABEL_43:

  return v35;
}

void sub_1001FFEC4(id a1)
{
  qword_10032F300 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1001FFF08(id a1)
{
  qword_10032F300 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100200008(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copyManagedObject:0];
  if (v2)
  {
    id v3 = [*(id *)(a1 + 32) dataStore];
    [v3 onMocSetMapHead:v2 mmdResult:*(void *)(a1 + 48) mmdError:*(void *)(a1 + 40)];

    id v4 = [*(id *)(a1 + 32) dataStore];
    id v9 = 0;
    unsigned __int8 v5 = [v4 persistWithError:&v9];
    id v6 = v9;

    if ((v5 & 1) == 0)
    {
      if (qword_10032F2F8 != -1) {
        dispatch_once(&qword_10032F2F8, &stru_1002C95C8);
      }
      uint64_t v7 = qword_10032F300;
      if (os_log_type_enabled((os_log_t)qword_10032F300, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v11 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "failed to save inclusion state for map head: %@", buf, 0xCu);
      }
      uint64_t v8 = [*(id *)(a1 + 32) dataStore];
      [v8 reportCoreDataPersistEventForLocation:@"mapHeadMMDState" underlyingError:v6];
    }
  }
}

void sub_100200174(id a1)
{
  qword_10032F300 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

uint64_t sub_10020034C(uint64_t a1, void *a2)
{
  id v4 = [*(id *)(a1 + 32) mapHead];
  unsigned __int8 v5 = +[TransparencyGPBMessage parseFromData:v4 error:a2];

  id v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a1 + 40)];
  [v6 timeIntervalSince1970];
  unint64_t v8 = (unint64_t)(v7 * 1000.0);

  id v9 = [v5 timestampMs];
  if ((unint64_t)v9 + kKTMaximumMergeDelayMs >= v8)
  {
    if (qword_10032F2F8 != -1) {
      dispatch_once(&qword_10032F2F8, &stru_1002C9608);
    }
    uint64_t v14 = qword_10032F300;
    if (os_log_type_enabled((os_log_t)qword_10032F300, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "SMH MMD verified", buf, 2u);
    }
    id v15 = *(void **)(a1 + 32);
    uint64_t v13 = 1;
    [v15 setMMDVerifiedForMapHead:1 mmdError:0];
  }
  else
  {
    if (qword_10032F2F8 != -1) {
      dispatch_once(&qword_10032F2F8, &stru_1002C95E8);
    }
    id v10 = (void *)qword_10032F300;
    if (os_log_type_enabled((os_log_t)qword_10032F300, OS_LOG_TYPE_ERROR))
    {
      id v11 = v10;
      *(_DWORD *)long long buf = 134217984;
      id v18 = [v5 timestampMs];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "SMH timestamp exceeds MMD: %lld", buf, 0xCu);
    }
    uint64_t v12 = +[TransparencyError errorWithDomain:code:underlyingError:description:](TransparencyError, "errorWithDomain:code:underlyingError:description:", @"TransparencyErrorVerify", -228, *a2, @"SMH timestamp exceeds MMD: %lld", [v5 timestampMs]);
    [*(id *)(a1 + 32) setMMDVerifiedForMapHead:0 mmdError:v12];
    if (v12) {
      *a2 = v12;
    }

    uint64_t v13 = 0;
  }

  return v13;
}

void sub_1002005B0(id a1)
{
  qword_10032F300 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002005F4(id a1)
{
  qword_10032F300 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020085C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100200878(id a1)
{
  qword_10032F310 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100200A20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100200A3C(id a1)
{
  qword_10032F310 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100200AE0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100200D6C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100200D90(id a1)
{
  qword_10032F310 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100201584(id a1)
{
  qword_10032F320 = objc_alloc_init(TransparencyIDSConfigBag);

  _objc_release_x1();
}

void sub_100201B68(id a1)
{
  qword_10032F330 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100201E94(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100202344(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100202388(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002023CC(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100202410(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100202754(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100202798(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020288C(id a1)
{
  qword_10032F348 = objc_alloc_init(TransparencyAccount);

  _objc_release_x1();
}

void sub_100202A50(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_100202A94(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  id v3 = +[TransparencyAccount primaryAccount:0];
  if (qword_10032F338 != -1) {
    dispatch_once(&qword_10032F338, &stru_1002C9810);
  }
  id v4 = qword_10032F340;
  if (os_log_type_enabled((os_log_t)qword_10032F340, OS_LOG_TYPE_INFO))
  {
    CFStringRef v5 = @"yes";
    if (!v3) {
      CFStringRef v5 = @"no";
    }
    int v21 = 138543362;
    CFStringRef v22 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "TransparencyAccount Primary account found %{public}@", (uint8_t *)&v21, 0xCu);
  }
  if (v3)
  {
    unint64_t v6 = +[TransparencyAccount accountLevel:v3];
    double v7 = [v3 aa_personID];
    unint64_t v8 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[CDPAccount isICDPEnabledForDSID:v7]);
    [v2 setObject:v8 forKeyedSubscript:@"CDPEnabled"];

    id v9 = +[NSNumber numberWithBool:v6 == 4];
    [v2 setObject:v9 forKeyedSubscript:@"ktAccountIsHSA2"];

    if (v6 == 4)
    {
      id v10 = +[TransparencyAccount cloudKitAccount:v3];
      id v11 = [*(id *)(a1 + 32) messagesStatus];

      if (v7) {
        id v12 = [*(id *)(a1 + 32) haveIDSAccount:v7];
      }
      else {
        id v12 = 0;
      }
      id v15 = +[NSNumber numberWithBool:v10 != 0];
      [v2 setObject:v15 forKeyedSubscript:@"ktAccountCloudKit"];

      id v16 = +[NSNumber numberWithBool:v11 != 0];
      [v2 setObject:v16 forKeyedSubscript:@"ktAccountIDS"];

      uint64_t v17 = +[NSNumber numberWithBool:v12];
      [v2 setObject:v17 forKeyedSubscript:@"ktAccountCKIDSame"];

      id v18 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) idsAccountType]);
      [v2 setObject:v18 forKeyedSubscript:@"ktPhoneOnly"];

      id v19 = v2;
    }
    else
    {
      id v14 = v2;
    }
  }
  else
  {
    id v13 = v2;
  }

  return v2;
}

void sub_100202DA4(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002033F8(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020343C(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100203480(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002034C4(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100203508(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020354C(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100203BE0(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100203C24(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100203C68(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100203CAC(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100203CF0(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100203F44(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100203F88(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  switch(a2)
  {
    case 2:
      if (qword_10032F338 != -1) {
        dispatch_once(&qword_10032F338, &stru_1002C9A18);
      }
      double v7 = qword_10032F340;
      if (os_log_type_enabled((os_log_t)qword_10032F340, OS_LOG_TYPE_ERROR))
      {
        int v12 = 138412290;
        id v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Primary account credentials renewal request failed: %@", (uint8_t *)&v12, 0xCu);
      }
      uint64_t v8 = kTransparencyErrorAccount;
      uint64_t v9 = -176;
      goto LABEL_19;
    case 1:
      if (qword_10032F338 != -1) {
        dispatch_once(&qword_10032F338, &stru_1002C99F8);
      }
      id v10 = qword_10032F340;
      if (os_log_type_enabled((os_log_t)qword_10032F340, OS_LOG_TYPE_ERROR))
      {
        int v12 = 138412290;
        id v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Primary account credentials renewal request rejected: %@", (uint8_t *)&v12, 0xCu);
      }
      uint64_t v8 = kTransparencyErrorAccount;
      uint64_t v9 = -175;
LABEL_19:
      id v11 = +[TransparencyError errorWithDomain:v8 code:v9 underlyingError:v5 description:@"Account credential renewal failed"];
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

      break;
    case 0:
      if (qword_10032F338 != -1) {
        dispatch_once(&qword_10032F338, &stru_1002C99D8);
      }
      unint64_t v6 = qword_10032F340;
      if (os_log_type_enabled((os_log_t)qword_10032F340, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Primary account credentials successfully renewed", (uint8_t *)&v12, 2u);
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      break;
  }
}

void sub_1002041DC(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100204220(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100204264(id a1)
{
  qword_10032F340 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100204818(id a1)
{
  qword_10032F360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020485C(id a1)
{
  qword_10032F360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_1002048A0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) evalCurrentOptInState:a2];
}

void sub_100204F3C(id a1)
{
  qword_10032F360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100204F80(id a1)
{
  qword_10032F360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100204FC4(id a1)
{
  qword_10032F360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100205008(id a1)
{
  qword_10032F360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020504C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  double v7 = +[TransparencyAnalytics formatEventName:@"OptInServerSet" application:*(void *)(a1 + 32)];
  if (qword_10032F358 != -1) {
    dispatch_once(&qword_10032F358, &stru_1002C9AF8);
  }
  uint64_t v8 = qword_10032F360;
  if (os_log_type_enabled((os_log_t)qword_10032F360, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 67109378;
    LODWORD(v21[0]) = a2;
    WORD2(v21[0]) = 2112;
    *(void *)((char *)v21 + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "getKeyTransparencyOptInEligiblityForApplication: %d error: %@", (uint8_t *)&v20, 0x12u);
  }
  if (v6 || (a2 & 1) == 0)
  {
    if (qword_10032F358 != -1) {
      dispatch_once(&qword_10032F358, &stru_1002C9B18);
    }
    id v11 = qword_10032F360;
    if (os_log_type_enabled((os_log_t)qword_10032F360, OS_LOG_TYPE_ERROR))
    {
      int v20 = 138412290;
      v21[0] = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "IDS reports that this account is ineligible to opt-in to KT: %@", (uint8_t *)&v20, 0xCu);
    }
    int v12 = +[TransparencyError errorWithDomain:kTransparencyErrorAccount code:-290 underlyingError:v6 description:@"IDS reports that this account is ineligible to opt-in to KT"];

    [*(id *)(a1 + 40) setError:v12];
    [*(id *)(a1 + 48) setError:v12];
    id v13 = [*(id *)(a1 + 48) optInStates];
    [v13 completedCurrentTarget];

    id v14 = [*(id *)(a1 + 48) errorState];
    [*(id *)(a1 + 48) setNextState:v14];

    id v15 = [*(id *)(a1 + 48) operationQueue];
    id v16 = [*(id *)(a1 + 48) finishedOp];
    [v15 addOperation:v16];

    uint64_t v17 = +[TransparencyAnalytics logger];
    id v18 = [*(id *)(a1 + 48) error];
    [v17 logResultForEvent:v7 hardFailure:0 result:v18];
  }
  else
  {
    if ([*(id *)(a1 + 40) targetState] == (id)2)
    {
      if (qword_10032F358 != -1) {
        dispatch_once(&qword_10032F358, &stru_1002C9B38);
      }
      uint64_t v9 = qword_10032F360;
      if (os_log_type_enabled((os_log_t)qword_10032F360, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v20) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "going for reset before opting in", (uint8_t *)&v20, 2u);
      }
      id v10 = off_1002CA960;
    }
    else
    {
      if (qword_10032F358 != -1) {
        dispatch_once(&qword_10032F358, &stru_1002C9B58);
      }
      id v19 = qword_10032F360;
      if (os_log_type_enabled((os_log_t)qword_10032F360, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v20) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "going for opt-in", (uint8_t *)&v20, 2u);
      }
      id v10 = off_1002CA970;
    }
    [*(id *)(a1 + 48) setNextState:*v10];
    int v12 = [*(id *)(a1 + 48) operationQueue];
    uint64_t v17 = [*(id *)(a1 + 48) finishedOp];
    [v12 addOperation:v17];
  }
}

void sub_1002053F4(id a1)
{
  qword_10032F360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100205438(id a1)
{
  qword_10032F360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020547C(id a1)
{
  qword_10032F360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002054C0(id a1)
{
  qword_10032F360 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002056A8(id a1)
{
  int v2 = 0;
  size_t v1 = 4;
  if (!sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0)) {
    byte_10032F370 = v2 == 1;
  }
}

void sub_100205848(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 validBAAKey])
  {
    if (qword_10032F378 != -1) {
      dispatch_once(&qword_10032F378, &stru_1002C9BC0);
    }
    id v4 = qword_10032F380;
    if (os_log_type_enabled((os_log_t)qword_10032F380, OS_LOG_TYPE_INFO))
    {
      LOWORD(v1_Block_object_dispose(&STACK[0x410], 8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Successfully fetched BAA cert", (uint8_t *)&v18, 2u);
    }
    id v5 = *(id *)(a1 + 32);
    objc_sync_enter(v5);
    [*(id *)(a1 + 32) setBaaKey:v3];
    id v6 = +[NSDate date];
    [*(id *)(a1 + 32) setLastLocalFetchTime:v6];

    objc_sync_exit(v5);
  }
  else
  {
    if (qword_10032F378 != -1) {
      dispatch_once(&qword_10032F378, &stru_1002C9BE0);
    }
    double v7 = (void *)qword_10032F380;
    if (os_log_type_enabled((os_log_t)qword_10032F380, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = v7;
      uint64_t v9 = [v3 error];
      int v18 = 138412290;
      id v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to get BAA cert: %@", (uint8_t *)&v18, 0xCu);
    }
    id v10 = [v3 error];
    int HasDomainAndErrorCode = mobileactivationErrorHasDomainAndErrorCode();

    if (HasDomainAndErrorCode)
    {
      if (qword_10032F378 != -1) {
        dispatch_once(&qword_10032F378, &stru_1002C9C00);
      }
      int v12 = qword_10032F380;
      if (os_log_type_enabled((os_log_t)qword_10032F380, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v1_Block_object_dispose(&STACK[0x410], 8) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "device identity authentication unsupported; will use account auth",
          (uint8_t *)&v18,
          2u);
      }
      [*(id *)(a1 + 32) setIsSupported:0];
    }
  }
  if ([*(id *)(a1 + 32) isSupported])
  {
    if (os_variant_allows_internal_security_policies())
    {
      id v13 = [v3 error];
      id v14 = [v13 userInfo];
    }
    else
    {
      id v14 = 0;
    }
    id v15 = +[TransparencyAnalytics logger];
    id v16 = [v3 error];
    [v15 logResultForEvent:@"TransparencyAuthentication" hardFailure:1 result:v16 withAttributes:v14];
  }
  uint64_t v17 = *(void *)(a1 + 40);
  if (v17) {
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v3);
  }
}

void sub_100205B44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100205B60(id a1)
{
  qword_10032F380 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100205BA4(id a1)
{
  qword_10032F380 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100205BE8(id a1)
{
  qword_10032F380 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100205E34(id a1)
{
  qword_10032F380 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100206034(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100206048(void *a1, void *a2)
{
  id v8 = a2;
  if ([v8 validBAAKey])
  {
    id v3 = (void *)a1[4];
    uint64_t v4 = a1[5];
    id v5 = [v8 referenceKey];
    id v6 = [v8 certificates];
    [v3 signData:v4 key:v5 certs:v6 completionHandler:a1[6]];
  }
  else
  {
    uint64_t v7 = a1[6];
    id v6 = [v8 error];
    (*(void (**)(uint64_t, void, void, void *))(v7 + 16))(v7, 0, 0, v6);
  }
}

uint64_t sub_1002062A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), a2, *(void *)(a1 + 32), a3, a4);
}

void sub_100206470(id a1)
{
  qword_10032F390 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100206724(id a1)
{
  qword_10032F390 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100206768(id a1)
{
  qword_10032F390 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002067AC(id a1)
{
  qword_10032F390 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100206B0C(id a1)
{
  qword_10032F390 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100206D68(id a1)
{
  qword_10032F390 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100206DAC(id a1)
{
  qword_10032F390 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002072B0(id a1)
{
  qword_10032F3A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002072F4(id a1)
{
  qword_10032F3A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100207548(id a1)
{
  qword_10032F3A0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100207CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100207D04(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  size_t v1 = +[NSDate dateWithTimeIntervalSinceNow:0.0];
  [WeakRetained setFinishDate:v1];
}

void sub_100208098(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1002080B4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v3 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v4 = [WeakRetained finishingBlock];
    v4[2]();

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    id v5 = [v3 completionHandlerDidRunCondition];
    [v5 fulfill];

    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v6 = [v3 dependencies];
    id v7 = [v6 countByEnumeratingWithState:&v11 objects:v16 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v12;
      do
      {
        for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v12 != v9) {
            objc_enumerationMutation(v6);
          }
          [v3 removeDependency:*(void *)(*((void *)&v11 + 1) + 8 * i)];
        }
        id v8 = [v6 countByEnumeratingWithState:&v11 objects:v16 count:16];
      }
      while (v8);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "completion handler called on deallocated operation instance", buf, 2u);
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

id sub_1002083D0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) isCancelled];
  if ((result & 1) == 0)
  {
    id v3 = *(void **)(a1 + 32);
    return [v3 setTimeoutCanOccur:0];
  }
  return result;
}

BOOL sub_1002085D4(id a1, id a2, unint64_t a3, BOOL *a4)
{
  return [a2 isFinished:a3, a4] ^ 1;
}

void sub_1002088AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1002088C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained timeoutCanOccur])
  {
    size_t v1 = [WeakRetained _onqueueTimeoutError];
    [WeakRetained setError:v1];

    [WeakRetained setTimeoutCanOccur:0];
    [WeakRetained cancel];
  }
}

void sub_1002089CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100208DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
}

void sub_100208FE8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_100209008(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002095D0(id a1)
{
  qword_10032F3B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100209778(id a1)
{
  qword_10032F3B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100209A84(id a1)
{
  qword_10032F3B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100209AC8(id a1)
{
  qword_10032F3B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100209B0C(id a1)
{
  qword_10032F3B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100209C7C(id a1)
{
  qword_10032F3B0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020A044(id a1)
{
  qword_10032F3C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020A088(id a1)
{
  qword_10032F3C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020A1CC(id a1)
{
  qword_10032F3C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10020A4D0(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else {
    return [*(id *)(a1 + 32) fetch:*(void *)(a1 + 40) shouldRetry:0 allowEmptyData:*(unsigned __int8 *)(a1 + 56) useReversePush:*(unsigned __int8 *)(a1 + 57) completionHandler:*(void *)(a1 + 48)];
  }
}

void sub_10020A508(id a1)
{
  qword_10032F3C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020A660(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  CFStringRef v35 = @"sessionAuthIsSupported";
  id v10 = [*(id *)(a1 + 32) session];
  long long v11 = [v10 auth];
  long long v12 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v11 isSupported]);
  unsigned int v36 = v12;
  long long v13 = +[NSDictionary dictionaryWithObjects:&v36 forKeys:&v35 count:1];
  id v14 = [v13 mutableCopy];

  id v15 = [v8 objectForKeyedSubscript:@"x-auth-status"];

  if (v15)
  {
    id v16 = [v8 objectForKeyedSubscript:@"x-auth-status"];
    [v14 setObject:v16 forKeyedSubscript:@"transparencyResponseAuthStatus"];
  }
  uint64_t v17 = [*(id *)(a1 + 32) transparencyAnalytics];
  [v17 logResultForEvent:@"TransparencyAuthentication" hardFailure:0 result:v9 withAttributes:v14];

  if ([*(id *)(a1 + 32) needsRetry:v9] && *(unsigned char *)(a1 + 56))
  {
    int v18 = [*(id *)(a1 + 32) session];
    id v19 = [v18 auth];
    unsigned int v20 = [v19 isSupported];

    if (v20)
    {
      int v21 = [[TransparencyNetworkRequest alloc] initWithRequest:*(void *)(a1 + 40)];
      [(TransparencyNetworkRequest *)v21 setAuthenticated:1];
      id v22 = [*(id *)(a1 + 32) needsReauthorization:v9 metadata:v8];
      double v23 = 0.0;
      if ([*(id *)(a1 + 32) needsTimeShift:v9 metadata:v8])
      {
        +[TransparencyLogClient timeShift:v8];
        double v23 = v24;
      }
      id v25 = [*(id *)(a1 + 32) session];
      uint32_t v26 = [v25 auth];
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10020A9B0;
      void v29[3] = &unk_1002C9FD0;
      id v33 = *(id *)(a1 + 48);
      id v30 = v7;
      id v27 = v8;
      uint64_t v28 = *(void *)(a1 + 32);
      id v31 = v27;
      uint64_t v32 = v28;
      __int16 v34 = *(_WORD *)(a1 + 57);
      [(TransparencyNetworkRequest *)v21 createRequestForAuthentication:v26 fetchAuthNow:v22 timeShift:v29 completionHandler:v23];
    }
    else
    {
      [*(id *)(a1 + 32) renewAccountTokenForFetch:*(void *)(a1 + 40) allowEmptyData:*(unsigned __int8 *)(a1 + 57) useReversePush:*(unsigned __int8 *)(a1 + 58) completionHandler:*(void *)(a1 + 48)];
    }
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10020A9B0(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  id v6 = v5;
  if (!v7 || v5)
  {
    if (!v5)
    {
      id v6 = +[TransparencyError errorWithDomain:kTransparencyErrorInternal code:-191 description:@"TransparencyRequest failed to produce URLRequest"];
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    [*(id *)(a1 + 48) fetch:v7 shouldRetry:0 allowEmptyData:*(unsigned __int8 *)(a1 + 64) useReversePush:*(unsigned __int8 *)(a1 + 65) completionHandler:*(void *)(a1 + 56)];
  }
}

void sub_10020AB94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    if (!v6)
    {
      id v7 = +[TransparencyError errorWithDomain:kTransparencyErrorInternal code:-191 description:@"TransparencyRequest failed to produce URLRequest"];
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v8 = *(void **)(a1 + 32);
    id v9 = [*(id *)(a1 + 40) allowEmptyData];
    id v10 = [*(id *)(a1 + 40) useReversePush];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    _DWORD v11[2] = sub_10020ACD4;
    v11[3] = &unk_1002CA020;
    id v12 = *(id *)(a1 + 40);
    id v13 = *(id *)(a1 + 48);
    [v8 fetch:v5 allowEmptyData:v9 useReversePush:v10 completionHandler:v11];

    id v7 = v12;
  }
}

void sub_10020ACD4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  id v10 = [[TransparencyResponse alloc] initWithRequest:*(void *)(a1 + 32) responseData:v9 metadata:v8];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10020AF20(id a1)
{
  qword_10032F3C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020AF64(id a1)
{
  qword_10032F3C0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_10020B2F0(uint64_t a1)
{
  [*(id *)(a1 + 32) setInitialDelay:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setCurrentDelay:[*(id *)(a1 + 32) initialDelay]];
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    double v3 = (double)*(unint64_t *)(a1 + 48) / (double)v2;
  }
  else {
    double v3 = 1.0;
  }
  [*(id *)(a1 + 32) setBackoff:v3];
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = *(void **)(a1 + 32);

  return _[v5 setMaximumDelay:v4];
}

id sub_10020B638(uint64_t a1)
{
  return [*(id *)(a1 + 32) _onqueueTrigger:*(void *)(a1 + 40) maximumDelay:-1];
}

void sub_10020B714(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_10020B728(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setLiveRequest:1];
  unint64_t v2 = [WeakRetained liveRequestReceived];
  [v2 fulfill];

  if (*(void *)(a1 + 40) == -1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  [WeakRetained _onqueueTrigger:v3];
}

void sub_10020BAAC(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_10020BAC0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained setLiveRequest:1];
  uint64_t v1 = [WeakRetained liveRequestReceived];
  [v1 fulfill];

  [WeakRetained _onqueueTrigger:0 maximumDelay:-1];
}

void sub_10020BEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_10020BF1C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _onqueueTimerTick];
}

void sub_10020BFE4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) timer];
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = [*(id *)(a1 + 32) timer];
    intptr_t v5 = dispatch_source_testcancel(v4);

    if (!v5)
    {
      id v6 = [*(id *)(a1 + 32) timer];
      dispatch_source_cancel(v6);
    }
  }
}

void sub_10020C57C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10020C704(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_10020C828(id a1, id a2, unint64_t a3, BOOL *a4)
{
  return [a2 isFinished:a3, a4] ^ 1;
}

void sub_10020CB64(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10020CB80(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  uint64_t v2 = [WeakRetained dependencies];
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [WeakRetained removeDependency:*(void *)(*((void *)&v7 + 1) + 8 * (void)v6)];
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

void sub_10020CF58(id a1)
{
  if (+[TransparencySettings getBool:kTransparencyFlagDisablePinning])byte_10032F3C8 = 1; {
}
  }

void sub_10020D70C(id a1)
{
  qword_10032F3E0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020D750(id a1)
{
  qword_10032F3E0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020D794(id a1)
{
  qword_10032F3E0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020DA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10020DAD0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10020DAE0(uint64_t a1)
{
}

void sub_10020DAE8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  long long v9 = +[TransparencyLogSession createErrorFromURLResonse:v8 data:v7 allowEmptyData:*(unsigned __int8 *)(a1 + 56) error:a4];
  long long v10 = [*(id *)(a1 + 32) callbackWorkloop];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_10020DC34;
  v17[3] = &unk_1002CA1A8;
  id v18 = v9;
  id v11 = *(id *)(a1 + 40);
  id v20 = v8;
  id v21 = v11;
  id v19 = v7;
  id v12 = v8;
  id v13 = v7;
  id v14 = v9;
  +[TransparencyLogSession dispatchToQueue:v10 block:v17];

  uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = 0;
}

void sub_10020DC34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = [*(id *)(a1 + 48) metadata];
    id v3 = *(void (**)(uint64_t, uint64_t))(v1 + 16);
    uint64_t v4 = v1;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v2 = [*(id *)(a1 + 48) metadata];
    id v3 = *(void (**)(uint64_t, uint64_t))(v1 + 16);
    uint64_t v4 = v1;
    uint64_t v5 = v6;
  }
  id v7 = (id)v2;
  v3(v4, v5);
}

void sub_10020DCD4(id a1)
{
  qword_10032F3E0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020DE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10020DE7C(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
}

void sub_10020E1AC(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020E418(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 application];
  uint64_t v5 = +[TransparencyAnalytics formatEventName:@"NetworkDownloadEvent" application:v4];

  uint64_t v6 = [v3 application];
  id v7 = +[TransparencyAnalytics formatEventName:@"NetworkDownloadSize" application:v6];

  [v3 setResponse:*(void *)(a1 + 32)];
  id v8 = [*(id *)(a1 + 40) objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];
  [v3 setServerHint:v8];

  long long v9 = (char *)[v3 downloadType];
  if ((unint64_t)(v9 - 1) < 2)
  {
    long long v10 = [*(id *)(a1 + 48) contextStore];
    uint64_t v11 = *(void *)(a1 + 56);
    id v12 = [v3 application];
    id v13 = [*(id *)(a1 + 48) logClient];
    [v10 verifyHeadInclusionDownload:v11 application:v12 logClient:v13];
    goto LABEL_5;
  }
  if (v9 == (char *)3)
  {
    long long v10 = [*(id *)(a1 + 48) contextStore];
    uint64_t v14 = *(void *)(a1 + 56);
    id v12 = [v3 application];
    id v13 = [*(id *)(a1 + 48) logClient];
    [v10 verifyHeadConsistencyDownload:v14 application:v12 logClient:v13];
LABEL_5:

    uint64_t v15 = +[TransparencyAnalytics logger];
    id v16 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [*(id *)(a1 + 32) length]);
    [v15 logMetric:v16 withName:v7];

    uint64_t v17 = +[TransparencyAnalytics logger];
    [v17 logSuccessForEventNamed:v5];

    id v18 = [*(id *)(a1 + 48) dataStore];
    id v27 = 0;
    unsigned __int8 v19 = [v18 persistWithError:&v27];
    id v20 = v27;

    if ((v19 & 1) == 0)
    {
      id v21 = [*(id *)(a1 + 48) dataStore];
      [v21 reportCoreDataPersistEventForLocation:@"handleDownloadRecord" underlyingError:v20];

      if (qword_10032F3E8 != -1) {
        dispatch_once(&qword_10032F3E8, &stru_1002CA250);
      }
      id v22 = qword_10032F3F0;
      if (os_log_type_enabled((os_log_t)qword_10032F3F0, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v29 = v20;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "failed to store results after successful download: %@", buf, 0xCu);
      }
    }
    goto LABEL_15;
  }
  if (qword_10032F3E8 != -1) {
    dispatch_once(&qword_10032F3E8, &stru_1002CA230);
  }
  double v23 = (void *)qword_10032F3F0;
  if (os_log_type_enabled((os_log_t)qword_10032F3F0, OS_LOG_TYPE_ERROR))
  {
    double v24 = v23;
    *(_DWORD *)long long buf = 134217984;
    id v29 = [v3 downloadType];
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "record has unsupported downloadType: %lld", buf, 0xCu);
  }
  id v25 = [*(id *)(a1 + 48) dataStore];
  [v25 deleteDownloadRecordById:*(void *)(a1 + 56) error:0];

  +[TransparencyError errorWithDomain:code:description:](TransparencyError, "errorWithDomain:code:description:", kTransparencyErrorDatabase, -212, @"record has unsupported downloadType: %lld", [v3 downloadType]);
  id v20 = (id)objc_claimAutoreleasedReturnValue();
  uint32_t v26 = +[TransparencyAnalytics logger];
  [v26 logResultForEvent:v5 hardFailure:1 result:v20];

LABEL_15:
}

void sub_10020E844(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020E888(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020E8CC(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020EBFC(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020EC40(uint64_t a1)
{
  if ([*(id *)(a1 + 32) successful])
  {
    uint64_t v2 = *(void *)(a1 + 48);
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void **)(a1 + 40);
    id v9 = [*(id *)(a1 + 32) metadata];
    [v4 handleDownloadRecord:v2 downloadData:v3];
  }
  else
  {
    id v9 = +[TransparencyLogSession createErrorFromURLResonse:*(void *)(a1 + 32) data:0 allowEmptyData:1 error:0];
    uint64_t v6 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 64);
    id v8 = [*(id *)(a1 + 32) metadata];
    [v6 handleDownloadRecordFailure:v5 task:v7 downloadMetadata:v8 error:v9];
  }
}

void sub_10020ED14(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020F020(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[TransparencyAnalytics logger];
  uint64_t v5 = [v3 application];
  uint64_t v6 = +[TransparencyAnalytics formatEventName:@"NetworkDownloadEvent" application:v5];
  [v4 logResultForEvent:v6 hardFailure:0 result:*(void *)(a1 + 32)];

  if (qword_10032F3E8 != -1) {
    dispatch_once(&qword_10032F3E8, &stru_1002CA320);
  }
  uint64_t v7 = qword_10032F3F0;
  if (os_log_type_enabled((os_log_t)qword_10032F3F0, OS_LOG_TYPE_ERROR))
  {
    id v9 = *(void **)(a1 + 40);
    id v8 = *(void **)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138412802;
    id v32 = v9;
    __int16 v33 = 2114;
    id v34 = v8;
    __int16 v35 = 2112;
    uint64_t v36 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "download task %@ for downloadId %{public}@ failed: %@", buf, 0x20u);
  }
  uint64_t v11 = [*(id *)(a1 + 56) objectForKeyedSubscript:kTransparencyResponseMetadataKeyServerHint];
  [v3 setServerHint:v11];

  if ((char *)[v3 downloadType] - 1 > (char *)2)
  {
    if (qword_10032F3E8 != -1) {
      dispatch_once(&qword_10032F3E8, &stru_1002CA340);
    }
    uint64_t v17 = (void *)qword_10032F3F0;
    if (os_log_type_enabled((os_log_t)qword_10032F3F0, OS_LOG_TYPE_ERROR))
    {
      id v18 = v17;
      id v19 = [v3 downloadType];
      *(_DWORD *)long long buf = 134217984;
      id v32 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "record has unsupported downloadType: %lld", buf, 0xCu);
    }
    id v20 = [*(id *)(a1 + 64) dataStore];
    uint64_t v21 = *(void *)(a1 + 48);
    id v30 = 0;
    [v20 deleteDownloadRecordById:v21 error:&v30];
    id v12 = v30;

    if (v12)
    {
      if (qword_10032F3E8 != -1) {
        dispatch_once(&qword_10032F3E8, &stru_1002CA360);
      }
      id v22 = qword_10032F3F0;
      if (os_log_type_enabled((os_log_t)qword_10032F3F0, OS_LOG_TYPE_ERROR))
      {
        double v23 = *(void **)(a1 + 48);
        *(_DWORD *)long long buf = 138543618;
        id v32 = v23;
        __int16 v33 = 2112;
        id v34 = v12;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed deleting download record for downloadId %{public}@: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    id v12 = [*(id *)(a1 + 64) contextStore];
    uint64_t v13 = *(void *)(a1 + 48);
    uint64_t v14 = [v3 application];
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = [*(id *)(a1 + 64) logClient];
    [v12 failHeadDownload:v13 application:v14 failure:v15 retry:1 logClient:v16];
  }
  double v24 = [*(id *)(a1 + 64) dataStore];
  id v29 = 0;
  unsigned __int8 v25 = [v24 persistWithError:&v29];
  id v26 = v29;

  if ((v25 & 1) == 0)
  {
    id v27 = [*(id *)(a1 + 64) dataStore];
    [v27 reportCoreDataPersistEventForLocation:@"handleDownloadRecordFailure" underlyingError:v26];

    if (qword_10032F3E8 != -1) {
      dispatch_once(&qword_10032F3E8, &stru_1002CA380);
    }
    uint64_t v28 = qword_10032F3F0;
    if (os_log_type_enabled((os_log_t)qword_10032F3F0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v32 = v26;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "failed to store results after failed download: %@", buf, 0xCu);
    }
  }
}

void sub_10020F434(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020F478(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020F4BC(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020F500(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020F544(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020F588(id a1)
{
  qword_10032F3F0 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10020F760(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = [*(id *)(a1 + 56) metadata];
  [v2 handleDownloadRecordFailure:v3 task:v4 downloadMetadata:v5 error:*(void *)(a1 + 64)];
}

void sub_10020FE80(id a1)
{
  qword_10032F400 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100210220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100210248(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100210258(uint64_t a1)
{
}

void sub_100210260(uint64_t a1)
{
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v24 objects:v30 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v25;
    *(void *)&long long v4 = 138412290;
    long long v21 = v4;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v25 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v24 + 1) + 8 * (void)v7);
        id v9 = *(void **)(a1 + 40);
        uint64_t v10 = [v8 name:v21];
        LOBYTE(v9) = [v9 containsObject:v10];

        if ((v9 & 1) == 0)
        {
          id v11 = objc_alloc_init((Class)NSFetchRequest);
          [v11 setEntity:v8];
          id v12 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v11];
          [v12 setResultType:1];
          uint64_t v13 = [*(id *)(a1 + 48) context];
          uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
          obuint64_t j = *(id *)(v14 + 40);
          uint64_t v15 = [v13 executeRequest:v12 error:&obj];
          objc_storeStrong((id *)(v14 + 40), obj);

          if (!v15)
          {
            if (qword_10032F3F8 != -1) {
              dispatch_once(&qword_10032F3F8, &stru_1002CA428);
            }
            id v16 = qword_10032F400;
            if (os_log_type_enabled((os_log_t)qword_10032F400, OS_LOG_TYPE_ERROR))
            {
              uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
              *(_DWORD *)long long buf = v21;
              uint64_t v29 = v17;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "clearState deleted nothing: %@", buf, 0xCu);
            }
          }
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v2 countByEnumeratingWithState:&v24 objects:v30 count:16];
    }
    while (v5);
  }

  id v18 = *(void **)(a1 + 48);
  uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
  id v22 = *(id *)(v19 + 40);
  unsigned int v20 = [v18 persistWithError:&v22];
  objc_storeStrong((id *)(v19 + 40), v22);
  if (v20) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
}

void sub_1002104DC(id a1)
{
  qword_10032F400 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100210740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100210760(uint64_t a1)
{
  id v2 = +[NSFetchRequest fetchRequestWithEntityName:*(void *)(a1 + 32)];
  [v2 setPredicate:*(void *)(a1 + 40)];
  id v3 = [objc_alloc((Class)NSBatchDeleteRequest) initWithFetchRequest:v2];
  [v3 setResultType:1];
  long long v4 = [*(id *)(a1 + 48) context];
  uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
  obuint64_t j = *(id *)(v5 + 40);
  uint64_t v6 = [v4 executeRequest:v3 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);

  if (!v6)
  {
    if (qword_10032F3F8 != -1) {
      dispatch_once(&qword_10032F3F8, &stru_1002CA448);
    }
    uint64_t v7 = qword_10032F400;
    if (os_log_type_enabled((os_log_t)qword_10032F400, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "garbageCollectEntityBatchDelete deleted nothing: %@", buf, 0xCu);
    }
  }
  id v9 = *(void **)(a1 + 48);
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  id v17 = *(id *)(v10 + 40);
  unsigned int v11 = [v9 persistWithError:&v17];
  objc_storeStrong((id *)(v10 + 40), v17);
  if (v11)
  {
    if (qword_10032F3F8 != -1) {
      dispatch_once(&qword_10032F3F8, &stru_1002CA468);
    }
    id v12 = qword_10032F400;
    if (os_log_type_enabled((os_log_t)qword_10032F400, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v20 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "garbageCollectEntityBatchDelete failed to save: %@", buf, 0xCu);
    }
  }
  uint64_t v14 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;
}

void sub_1002109B4(id a1)
{
  qword_10032F400 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002109F8(id a1)
{
  qword_10032F400 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100210A3C(id a1)
{
  qword_10032F400 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100210CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100210CF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  while (1)
  {
    long long v4 = +[NSFetchRequest fetchRequestWithEntityName:*(void *)(a1 + 32)];
    [v4 setPredicate:*(void *)(a1 + 40)];
    [v4 setPropertiesToFetch:&__NSArray0__struct];
    [v4 setFetchLimit:20];
    uint64_t v5 = *(void *)(*(void *)(a1 + 56) + 8);
    obuint64_t j = *(id *)(v5 + 40);
    uint64_t v6 = [v3 executeFetchRequest:v4 error:&obj];
    objc_storeStrong((id *)(v5 + 40), obj);
    if (!v6) {
      break;
    }
    id v7 = [v6 count];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v8 = v6;
    id v9 = [v8 countByEnumeratingWithState:&v20 objects:v25 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v21;
      do
      {
        id v12 = 0;
        do
        {
          if (*(void *)v21 != v11) {
            objc_enumerationMutation(v8);
          }
          [v3 deleteObject:*(void *)(*((void *)&v20 + 1) + 8 * (void)v12)];
          id v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v20 objects:v25 count:16];
      }
      while (v10);
    }

    uint64_t v13 = *(void **)(a1 + 48);
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
    id v19 = *(id *)(v14 + 40);
    unsigned __int8 v15 = [v13 persistWithError:&v19];
    objc_storeStrong((id *)(v14 + 40), v19);
    if ((v15 & 1) == 0) {
      break;
    }
    id v16 = [*(id *)(a1 + 48) logger];
    id v17 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v8 count]);
    id v18 = +[NSString stringWithFormat:@"kt%@GCCount", *(void *)(a1 + 32)];
    [v16 logMetric:v17 withName:v18];

    if (v7 != (id)20) {
      goto LABEL_14;
    }
  }

LABEL_14:
}

void sub_100210F3C(id a1)
{
  qword_10032F400 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100211134(id a1)
{
  qword_10032F400 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100211178(void *a1, void *a2)
{
  id v3 = a2;
  long long v4 = +[CachedData fetchRequest];
  uint64_t v5 = +[NSPredicate predicateWithFormat:@"key = %@ AND application = %@", @"TapToRadarDate", a1[4]];
  [v4 setPredicate:v5];

  if (a1[5])
  {
    id v17 = 0;
    uint64_t v6 = [v3 executeFetchRequest:v4 error:&v17];
    id v7 = v17;
    if ([v6 count])
    {
      id v8 = [v6 firstObject];
      if (!v8)
      {

        goto LABEL_20;
      }
    }
    else
    {
      id v8 = +[NSEntityDescription insertNewObjectForEntityForName:@"CachedData" inManagedObjectContext:v3];
      [v8 setKey:@"TapToRadarDate"];
      [v8 setApplication:a1[4]];
    }
    [v8 setData:a1[6]];
    id v10 = +[NSDate date];
    [v8 setUpdated:v10];
  }
  else
  {
    id v22 = 0;
    id v9 = [v3 executeFetchRequest:v4 error:&v22];
    id v7 = v22;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v10 = v9;
    id v8 = [v10 countByEnumeratingWithState:&v18 objects:v25 count:16];
    if (v8)
    {
      uint64_t v11 = *(void *)v19;
      do
      {
        for (unint64_t i = 0; i != v8; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v10);
          }
          [v3 deleteObject:*(void *)(*((void *)&v18 + 1) + 8 * i)];
        }
        id v8 = [v10 countByEnumeratingWithState:&v18 objects:v25 count:16];
      }
      while (v8);
    }
    uint64_t v6 = v10;
  }
  uint64_t v13 = v7;

  id v16 = v7;
  unsigned __int8 v14 = [v3 save:&v16];
  id v7 = v16;

  if ((v14 & 1) == 0)
  {
    if (qword_10032F3F8 != -1) {
      dispatch_once(&qword_10032F3F8, &stru_1002CA538);
    }
    unsigned __int8 v15 = qword_10032F400;
    if (os_log_type_enabled((os_log_t)qword_10032F400, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "storeTTR: save %@", buf, 0xCu);
    }
  }
LABEL_20:
}

void sub_100211468(id a1)
{
  qword_10032F400 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100211614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10021162C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v16 = 0;
  long long v4 = [a2 executeFetchRequest:v3 error:&v16];
  id v5 = v16;
  uint64_t v6 = [v4 firstObject];
  id v7 = v6;
  if (v6 && ([v6 data], id v8 = objc_claimAutoreleasedReturnValue(), v8, v8))
  {
    uint64_t v9 = objc_opt_class();
    id v10 = [v7 data];
    uint64_t v11 = +[NSKeyedUnarchiver unarchivedObjectOfClass:v9 fromData:v10 error:0];
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
  else
  {
    if (qword_10032F3F8 != -1) {
      dispatch_once(&qword_10032F3F8, &stru_1002CA580);
    }
    unsigned __int8 v14 = qword_10032F400;
    if (os_log_type_enabled((os_log_t)qword_10032F400, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned __int8 v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "getTapToRadarDate: no cached data", v15, 2u);
    }
  }
}

void sub_100211790(id a1)
{
  qword_10032F400 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002119C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1002119E8(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = *(void *)(a1[6] + 8);
  obuint64_t j = *(id *)(v4 + 40);
  unsigned int v5 = [v2 logRequestMetricsForApplication:v3 error:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  if (!v5) {
    goto LABEL_5;
  }
  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = *(void *)(a1[6] + 8);
  id v23 = *(id *)(v8 + 40);
  unsigned int v9 = [v6 logSMTMetricsForApplication:v7 error:&v23];
  objc_storeStrong((id *)(v8 + 40), v23);
  if (!v9) {
    goto LABEL_5;
  }
  id v10 = (void *)a1[4];
  uint64_t v11 = a1[5];
  uint64_t v12 = *(void *)(a1[6] + 8);
  id v22 = *(id *)(v12 + 40);
  unsigned int v13 = [v10 logSTHMetricsForApplication:v11 error:&v22];
  objc_storeStrong((id *)(v12 + 40), v22);
  if (!v13
    || (unsigned __int8 v14 = (void *)a1[4],
        uint64_t v15 = a1[5],
        uint64_t v16 = *(void *)(a1[6] + 8),
        id v21 = *(id *)(v16 + 40),
        unsigned __int8 v17 = [v14 onMocLogVerificationMetricsForApplication:v15 error:&v21],
        objc_storeStrong((id *)(v16 + 40), v21),
        (v17 & 1) == 0))
  {
LABEL_5:
    *(unsigned char *)(*(void *)(a1[7] + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  uint64_t v18 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(a1[6] + 8) + 40)];
  uint64_t v19 = *(void *)(a1[6] + 8);
  long long v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v18;
}

void sub_100212010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100212034(void *a1)
{
  id v2 = (void *)a1[4];
  uint64_t v3 = *(void *)(a1[6] + 8);
  obuint64_t j = *(id *)(v3 + 40);
  id v4 = [v2 requestCount:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  unsigned int v5 = +[NSNumber numberWithUnsignedInteger:v4];
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v5 forKeyedSubscript:@"KTRequest"];

  uint64_t v6 = (void *)a1[4];
  uint64_t v7 = *(void *)(a1[6] + 8);
  id v33 = *(id *)(v7 + 40);
  id v8 = [v6 requestFailureCount:&v33];
  objc_storeStrong((id *)(v7 + 40), v33);
  uint64_t v9 = +[NSNumber numberWithUnsignedInteger:v8];
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v9 forKeyedSubscript:@"KTRequestFailure"];

  id v10 = (void *)a1[4];
  uint64_t v11 = *(void *)(a1[6] + 8);
  id v32 = *(id *)(v11 + 40);
  id v12 = [v10 signedMutationTimestampCount:&v32];
  objc_storeStrong((id *)(v11 + 40), v32);
  unsigned int v13 = +[NSNumber numberWithUnsignedInteger:v12];
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v13 forKeyedSubscript:@"KTMutation"];

  unsigned __int8 v14 = (void *)a1[4];
  uint64_t v15 = *(void *)(a1[6] + 8);
  id v31 = *(id *)(v15 + 40);
  id v16 = [v14 signedMutationTimestampsFailureCount:&v31];
  objc_storeStrong((id *)(v15 + 40), v31);
  unsigned __int8 v17 = +[NSNumber numberWithUnsignedInteger:v16];
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v17 forKeyedSubscript:@"KTSMTFailure"];

  uint64_t v18 = (void *)a1[4];
  uint64_t v19 = *(void *)(a1[6] + 8);
  id v30 = *(id *)(v19 + 40);
  id v20 = [v18 treeHeadCount:&v30];
  objc_storeStrong((id *)(v19 + 40), v30);
  id v21 = +[NSNumber numberWithUnsignedInteger:v20];
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v21 forKeyedSubscript:@"KTTreeHead"];

  id v22 = (void *)a1[4];
  uint64_t v23 = *(void *)(a1[6] + 8);
  id v29 = *(id *)(v23 + 40);
  id v24 = [v22 signedTreeHeadFailureCount:&v29];
  objc_storeStrong((id *)(v23 + 40), v29);
  long long v25 = +[NSNumber numberWithUnsignedInteger:v24];
  [*(id *)(*(void *)(a1[5] + 8) + 40) setObject:v25 forKeyedSubscript:@"KTSTHFailure"];

  uint64_t v26 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(a1[6] + 8) + 40)];
  uint64_t v27 = *(void *)(a1[6] + 8);
  uint64_t v28 = *(void **)(v27 + 40);
  *(void *)(v27 + 40) = v26;
}

void sub_100212568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10021258C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 8);
  obuint64_t j = *(id *)(v3 + 40);
  unsigned int v4 = [v2 persistWithError:&obj];
  objc_storeStrong((id *)(v3 + 40), obj);
  if (v4)
  {
    unsigned int v5 = +[NSFetchRequest fetchRequestWithEntityName:*(void *)(a1 + 40)];
    [v5 setReturnsDistinctResults:1];
    [v5 setPredicate:*(void *)(a1 + 48)];
    [v5 setFetchBatchSize:20];
    if (*(unsigned char *)(a1 + 80)) {
      [v5 setFetchLimit:100];
    }
    uint64_t v6 = [*(id *)(a1 + 32) context];
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8);
    id v27 = *(id *)(v7 + 40);
    id v8 = [v6 executeFetchRequest:v5 error:&v27];
    objc_storeStrong((id *)(v7 + 40), v27);

    char v26 = 0;
    uint64_t v9 = *(void *)(a1 + 56);
    uint64_t v10 = *(void *)(*(void *)(a1 + 72) + 8);
    id v25 = *(id *)(v10 + 40);
    (*(void (**)(void))(v9 + 16))();
    objc_storeStrong((id *)(v10 + 40), v25);
    if (*(unsigned char *)(a1 + 80))
    {
      if ([v8 count] == (id)100)
      {
        [v5 setFetchLimit:0];
        uint64_t v11 = [*(id *)(a1 + 32) context];
        uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8);
        id v24 = *(id *)(v12 + 40);
        id v13 = [v11 countForFetchRequest:v5 error:&v24];
        objc_storeStrong((id *)(v12 + 40), v24);

        if ((unint64_t)v13 >= 0x65)
        {
          unsigned __int8 v14 = [*(id *)(a1 + 32) logger];
          uint64_t v15 = +[NSNumber numberWithUnsignedInteger:v13];
          id v16 = +[NSString stringWithFormat:@"kt%@MaxBatchesExceeded", *(void *)(a1 + 40)];
          [v14 logMetric:v15 withName:v16];

          if (qword_10032F3F8 != -1) {
            dispatch_once(&qword_10032F3F8, &stru_1002CA620);
          }
          unsigned __int8 v17 = qword_10032F400;
          if (os_log_type_enabled((os_log_t)qword_10032F400, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long buf = 134217984;
            id v30 = v13;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "performOnBatchesOfEntity hit max number of batches: %llu total entries", buf, 0xCu);
          }
        }
      }
    }
  }
  uint64_t v18 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
  uint64_t v19 = *(void *)(*(void *)(a1 + 72) + 8);
  id v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v18;

  uint64_t v21 = +[SecXPCHelper cleanseErrorForXPC:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];
  uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v23 = *(void **)(v22 + 40);
  *(void *)(v22 + 40) = v21;
}

void sub_1002128A0(id a1)
{
  qword_10032F400 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_1002128E4(void *a1)
{
  if (qword_10032F3F8 != -1) {
    dispatch_once(&qword_10032F3F8, &stru_1002CA668);
  }
  id v2 = qword_10032F400;
  if (os_log_type_enabled((os_log_t)qword_10032F400, OS_LOG_TYPE_ERROR))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = *(void *)(*(void *)(a1[6] + 8) + 40);
    int v6 = 138412802;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "performOnBatchesOfEntity unable to read entity %@ for predicate %@: %@", (uint8_t *)&v6, 0x20u);
  }
}

void sub_1002129D0(id a1)
{
  qword_10032F400 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100212AD0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100212B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_100212BF4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100212CD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_100212D78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100212EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100212EB8(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  [*(id *)(a1 + 32) releaseContext];
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0;
}

void sub_1002130DC(void *a1, const char *a2)
{
  id v7 = a1;
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    uint64_t v3 = NSStringFromSelector(a2);
    +[NSException raise:NSInternalInconsistencyException, @"Selector is not available: %@", v3 format];
  }
  id v4 = [v7 methodSignatureForSelector:a2];
  int v5 = strcmp((const char *)[v4 methodReturnType], "q");

  if (v5)
  {
    int v6 = NSStringFromSelector(a2);
    +[NSException raise:NSInternalInconsistencyException, @"Selector doesn't return an int64_t: %@", v6 format];
  }
}

uint64_t sub_1002131E4(void *a1, const char *a2)
{
  id v3 = a1;
  sub_1002130DC(v3, a2);
  uint64_t v9 = 0;
  id v4 = [v3 methodSignatureForSelector:a2];
  int v5 = +[NSInvocation invocationWithMethodSignature:v4];

  [v5 setSelector:a2];
  [v5 setTarget:v3];

  [v5 invoke];
  [v5 getReturnValue:&v9];
  uint64_t v6 = v9;
  if (v9 < 0)
  {
    id v7 = NSStringFromSelector(a2);
    +[NSException raise:NSInternalInconsistencyException, @"Negative value from selector: %@", v7 format];

    uint64_t v6 = v9;
  }

  return v6;
}

uint64_t sub_1002132E0(void *a1, const char *a2, unint64_t a3)
{
  id v5 = a1;
  sub_1002130DC(v5, a2);
  if (a3 >= 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v6 = NSStringFromSelector(a2);
    +[NSException raise:NSInternalInconsistencyException, @"Value too large from selector: %@", v6 format];
  }
  id v7 = +[NSNumber numberWithUnsignedLongLong:a3];
  __int16 v8 = NSStringFromSelector(a2);
  [v5 setValue:v7 forKey:v8];

  return 1;
}

id sub_10021466C(TransparencyNetworkRequest *self, SEL a2, id a3, double a4, id a5, id *a6)
{
  id v8 = a5;
  uint64_t v9 = +[NSMutableURLRequest requestWithURL:a3];
  [v9 setHTTPMethod:@"GET"];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v10 = v8;
  id v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      for (unint64_t i = 0; i != v12; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v19 + 1) + 8 * i);
        id v16 = [v10 objectForKeyedSubscript:v15];
        [v9 setValue:v16 forHTTPHeaderField:v15];
      }
      id v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v12);
  }

  unsigned __int8 v17 = +[TransparencySettings automatedDeviceGroup];
  if (v17) {
    [v9 setValue:v17 forHTTPHeaderField:off_100326508];
  }
  if (a4 != 0.0) {
    [v9 setTimeoutInterval:a4];
  }

  return v9;
}

void sub_100214CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100214CDC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained triggerRemoteBAACertFetch];
}

void sub_100214E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100214E5C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100214E6C(uint64_t a1)
{
}

void sub_100214E74(uint64_t a1, const void *a2, void *a3, void *a4)
{
  id v13 = a3;
  id v7 = a4;
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = +[TransparencyError errorWithDomain:kTransparencyErrorBAACertFetch code:-393 underlyingError:v7 description:@"Error fetching BAA cert"];
  }
  else
  {
    uint64_t v9 = 0;
  }
  id v10 = [[KTBAAKey alloc] initWithKey:a2 certificates:v13 failure:v9];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = 0;

  if (a2) {
    CFRelease(a2);
  }
}

void sub_100215360(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100215380(id a1)
{
  qword_10032F410 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

id sub_1002153C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchCacheOnly:1 completion:*(void *)(a1 + 40)];
}

void sub_1002153D4(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (!*(unsigned char *)(a1 + 48))
  {
    id v3 = [*(id *)(a1 + 32) issuanceGroup];
    objc_sync_enter(v3);
    id v4 = [*(id *)(a1 + 32) issuanceGroup];
    dispatch_group_leave(v4);

    [*(id *)(a1 + 32) setOutstandingRemoteFetchSignal:0];
    objc_sync_exit(v3);
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100215484(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100215508(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 error];

  if (v4)
  {
    if (qword_10032F408 != -1) {
      dispatch_once(&qword_10032F408, &stru_1002CA748);
    }
    id v5 = (void *)qword_10032F410;
    if (os_log_type_enabled((os_log_t)qword_10032F410, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v5;
      id v7 = [v3 error];
      int v9 = 138543362;
      id v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error fetching BAA cert, starting exponential backoff to request a new cert. %{public}@", (uint8_t *)&v9, 0xCu);
    }
    id v8 = [*(id *)(a1 + 32) BAACertFetcher];
    [v8 trigger];
  }
}

void sub_100215630(id a1)
{
  qword_10032F410 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_10021571C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 error];

  if (v4)
  {
    if (qword_10032F408 != -1) {
      dispatch_once(&qword_10032F408, &stru_1002CA790);
    }
    id v5 = (void *)qword_10032F410;
    if (os_log_type_enabled((os_log_t)qword_10032F410, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = v5;
      id v7 = [v3 error];
      int v9 = 138412290;
      id v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Error fetching BAA cert, starting exponential backoff to request a new cert. %@", (uint8_t *)&v9, 0xCu);
    }
    id v8 = [*(id *)(a1 + 32) BAACertFetcher];
    [v8 trigger];
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100215858(id a1)
{
  qword_10032F410 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100215D08(id a1)
{
  qword_10032F420 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100216914(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100216A34(id a1)
{
  qword_10032F430 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100216B84(id a1)
{
  qword_10032F430 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100216D00(id a1)
{
  qword_10032F430 = (uint64_t)os_log_create("com.apple.Transparency", "default");

  _objc_release_x1();
}

void sub_100216EBC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100216ED8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 serialize];
  [v2 addObject:v3];
}

void sub_100217AF0(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v14 = a1;
  id v3 = [*(id *)(a1 + 32) stateInit];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        int v9 = [v8 objectAtIndexedSubscript:0];
        id v10 = [v8 objectAtIndexedSubscript:1];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v11 = +[NSAssertionHandler currentHandler];
          [v11 handleFailureInMethod:*(void *)(v14 + 40) object:*(void *)(v14 + 32) file:@"KTStates.m" lineNumber:178 description:@"stateName should be string"];
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          id v12 = +[NSAssertionHandler currentHandler];
          [v12 handleFailureInMethod:*(void *)(v14 + 40) object:*(void *)(v14 + 32) file:@"KTStates.m" lineNumber:179 description:@"stateNum should be number"];
        }
        [v2 setObject:v10 forKeyedSubscript:v9];
      }
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }
  id v13 = (void *)qword_10032F438;
  qword_10032F438 = (uint64_t)v2;
}

void sub_100217DA8(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v14 = a1;
  id v3 = [*(id *)(a1 + 32) stateInit];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (unint64_t i = 0; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        int v9 = [v8 objectAtIndexedSubscript:0];
        id v10 = [v8 objectAtIndexedSubscript:1];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v11 = +[NSAssertionHandler currentHandler];
          [v11 handleFailureInMethod:*(void *)(v14 + 40) object:*(void *)(v14 + 32) file:@"KTStates.m" lineNumber:197 description:@"stateName should be string"];
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          id v12 = +[NSAssertionHandler currentHandler];
          [v12 handleFailureInMethod:*(void *)(v14 + 40) object:*(void *)(v14 + 32) file:@"KTStates.m" lineNumber:198 description:@"stateNum should be number"];
        }
        [v2 setObject:v9 forKeyedSubscript:v10];
      }
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }
  id v13 = (void *)qword_10032F448;
  qword_10032F448 = (uint64_t)v2;
}

void sub_100218014(id a1)
{
  uint64_t v1 = +[NSMutableSet set];
  [v1 addObject:@"Unlocked"];
  [v1 addObject:@"AccountChanged"];
  [v1 addObject:@"CKAccountChanged"];
  [v1 addObject:@"RepairIDSFlag"];
  [v1 addObject:@"ConfigBagFetch"];
  [v1 addObject:@"ManateeViewChanged"];
  [v1 addObject:@"FetchIDMS"];
  [v1 addObject:@"ValidateSelf"];
  [v1 addObject:@"CheckAccountSignatures"];
  [v1 addObject:@"FetchSelf"];
  [v1 addObject:@"FetchPublicKeys"];
  [v1 addObject:@"CheckIDSRegistration"];
  [v1 addObject:@"ValidateSelfOptIn"];
  [v1 addObject:@"ChangeOptInState"];
  [v1 addObject:@"EnsureIdentity"];
  [v1 addObject:@"CloudKitOutgoing"];
  [v1 addObject:@"CloudKitIncoming"];
  [v1 addObject:@"CloudKitZoneRecreate"];
  [v1 addObject:@"OctagonTrustChanged"];
  [v1 addObject:@"CheckKTAccountKey"];
  [v1 addObject:@"StatusUpdate"];
  [v1 addObject:@"CheckKTAccountKeyChanged"];
  [v1 addObject:@"IDSStatusChanged"];
  [v1 addObject:@"CheckServerOptIn"];
  [v1 addObject:@"PokeIDS"];
  id v2 = (void *)qword_10032F458;
  qword_10032F458 = (uint64_t)v1;
}

void sub_100218800()
{
  sub_100037844();
  sub_100037828((void *)&_mh_execute_header, v0, v1, "import request failed: %@", v2, v3, v4, v5, v6);
}

void sub_100218868()
{
  sub_100037844();
  sub_100037828((void *)&_mh_execute_header, v0, v1, "export request failed: %@", v2, v3, v4, v5, v6);
}

void sub_1002188D0()
{
  sub_100037884();
  sub_100037850((void *)&_mh_execute_header, v0, v1, "cloudContainer not enabled failed", v2, v3, v4, v5, v6);
}

void sub_100218904()
{
  sub_100037844();
  sub_100037828((void *)&_mh_execute_header, v0, v1, "initializeCloudKitSchemaWithOptions failed: %@", v2, v3, v4, v5, v6);
}

void sub_10021896C()
{
  sub_100037844();
  sub_100037828((void *)&_mh_execute_header, v0, v1, "reset request failed: %@", v2, v3, v4, v5, v6);
}

void sub_1002189D4()
{
  sub_100037884();
  sub_100037850((void *)&_mh_execute_header, v0, v1, "idsDelegate missing", v2, v3, v4, v5, v6);
}

void sub_100218A08()
{
  sub_100037844();
  sub_100037828((void *)&_mh_execute_header, v0, v1, "updateContact fetch error: %@", v2, v3, v4, v5, v6);
}

void sub_100218A70()
{
  sub_100037844();
  sub_100037828((void *)&_mh_execute_header, v0, v1, "updateContact deleteStaticKey failed: %@", v2, v3, v4, v5, v6);
}

void sub_100218AD8()
{
  sub_100037844();
  sub_100037828((void *)&_mh_execute_header, v0, v1, "updateContact storeStaticKey failed: %@", v2, v3, v4, v5, v6);
}

void sub_100218B40()
{
  sub_10003786C();
  sub_100037890((void *)&_mh_execute_header, v0, v1, "deleteStaticKeyByContactIdentifier %@ failed: %@");
}

void sub_100218BA8()
{
  sub_10003786C();
  sub_100037890((void *)&_mh_execute_header, v0, v1, "deleteStaticKeyByContactExternalURI %@ failed: %@");
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t URLQueryItem.init(name:value:)()
{
  return URLQueryItem.init(name:value:)();
}

uint64_t type metadata accessor for URLQueryItem()
{
  return type metadata accessor for URLQueryItem();
}

uint64_t CustomNSError.errorUserInfo.getter()
{
  return CustomNSError.errorUserInfo.getter();
}

uint64_t URLComponents.queryItems.modify()
{
  return URLComponents.queryItems.modify();
}

uint64_t URLComponents.url.getter()
{
  return URLComponents.url.getter();
}

uint64_t URLComponents.init(string:)()
{
  return URLComponents.init(string:)();
}

uint64_t type metadata accessor for URLComponents()
{
  return type metadata accessor for URLComponents();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t LocalizedError.failureReason.getter()
{
  return LocalizedError.failureReason.getter();
}

uint64_t LocalizedError.errorDescription.getter()
{
  return LocalizedError.errorDescription.getter();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.description.getter()
{
  return Data.description.getter();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.hash(into:)()
{
  return Data.hash(into:)();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return type metadata accessor for Data.Iterator();
}

uint64_t Data.Iterator.init(_:at:)()
{
  return Data.Iterator.init(_:at:)();
}

uint64_t Date.init(timeIntervalSinceReferenceDate:)()
{
  return Date.init(timeIntervalSinceReferenceDate:)();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return Date.timeIntervalSinceReferenceDate.getter();
}

uint64_t Date.description.getter()
{
  return Date.description.getter();
}

uint64_t static Date.distantPast.getter()
{
  return static Date.distantPast.getter();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return Date.timeIntervalSince(_:)();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return Date.addingTimeInterval(_:)();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.> infix(_:_:)()
{
  return static Date.> infix(_:_:)();
}

uint64_t static Date.< infix(_:_:)()
{
  return static Date.< infix(_:_:)();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Date._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.compare(_:)()
{
  return Date.compare(_:)();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t isFeatureEnabled(_:)()
{
  return isFeatureEnabled(_:)();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t UnknownStorage.init()()
{
  return UnknownStorage.init()();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t BinaryDecodingOptions.init()()
{
  return BinaryDecodingOptions.init()();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return type metadata accessor for BinaryDecodingOptions();
}

uint64_t BinaryEncodingOptions.init()()
{
  return BinaryEncodingOptions.init()();
}

uint64_t type metadata accessor for BinaryEncodingOptions()
{
  return type metadata accessor for BinaryEncodingOptions();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t dispatch thunk of Decoder.handleConflictingOneOf()()
{
  return dispatch thunk of Decoder.handleConflictingOneOf()();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedEnumField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularBoolField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularBoolField(value:)();
}

{
  return dispatch thunk of Decoder.decodeSingularBoolField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
}

{
  return dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedStringField(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedStringField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularDoubleField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t Message.isInitialized.getter()
{
  return Message.isInitialized.getter();
}

uint64_t Message.init<A>(serializedBytes:extensions:partial:options:)()
{
  return Message.init<A>(serializedBytes:extensions:partial:options:)();
}

uint64_t Message.serializedBytes<A>(partial:options:)()
{
  return Message.serializedBytes<A>(partial:options:)();
}

uint64_t Message.hash(into:)()
{
  return Message.hash(into:)();
}

uint64_t dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitPackedEnumField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedStringField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return type metadata accessor for _NameMap.NameDescription();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t type metadata accessor for _NameMap()
{
  return type metadata accessor for _NameMap();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.init()()
{
  return Logger.init()();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t Scheduler.schedule(after:_:)()
{
  return Scheduler.schedule(after:_:)();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return dispatch thunk of HashFunction.finalize()();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return dispatch thunk of HashFunction.init()();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return type metadata accessor for SHA256Digest();
}

uint64_t type metadata accessor for SHA256()
{
  return type metadata accessor for SHA256();
}

uint64_t related decl 'e' for CKErrorCode.serverRecord.getter()
{
  return related decl 'e' for CKErrorCode.serverRecord.getter();
}

uint64_t related decl 'e' for CKErrorCode.ancestorRecord.getter()
{
  return related decl 'e' for CKErrorCode.ancestorRecord.getter();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.Keys.description.getter()
{
  return Dictionary.Keys.description.getter();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(data:encoding:)()
{
  return String.init(data:encoding:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t dispatch thunk of Sequence.makeIterator()()
{
  return dispatch thunk of Sequence.makeIterator()();
}

uint64_t Sequence<>.joined(separator:)()
{
  return Sequence<>.joined(separator:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t Double.description.getter()
{
  return Double.description.getter();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t Set.contains(_:)()
{
  return Set.contains(_:)();
}

uint64_t type metadata accessor for Set()
{
  return type metadata accessor for Set();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

CKRecordID __swiftcall CKRecordID.init(recordName:zoneID:)(Swift::String recordName, CKRecordZoneID zoneID)
{
  return (CKRecordID)CKRecordID.init(recordName:zoneID:)(recordName._countAndFlagsBits, recordName._object, zoneID.super.isa);
}

uint64_t NSPredicate.init(format:_:)()
{
  return NSPredicate.init(format:_:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.SchedulerTimeType()
{
  return type metadata accessor for OS_dispatch_queue.SchedulerTimeType();
}

uint64_t OS_dispatch_queue.SchedulerTimeType.init(_:)()
{
  return OS_dispatch_queue.SchedulerTimeType.init(_:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return type metadata accessor for OS_dispatch_source.TimerFlags();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return static OS_dispatch_source.makeTimerSource(flags:queue:)();
}

uint64_t OS_dispatch_source.isCancelled.getter()
{
  return OS_dispatch_source.isCancelled.getter();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return OS_dispatch_source.setEventHandler(qos:flags:handler:)();
}

Swift::Void __swiftcall OS_dispatch_source.cancel()()
{
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t NSManagedObjectContext.performAndWait<A>(_:)()
{
  return NSManagedObjectContext.performAndWait<A>(_:)();
}

uint64_t NSManagedObjectContext.count<A>(for:)()
{
  return NSManagedObjectContext.count<A>(for:)();
}

uint64_t CKRecordKeyValueSetting.subscript.setter()
{
  return CKRecordKeyValueSetting.subscript.setter();
}

uint64_t CKModifyRecordsOperation.modifyRecordsResultBlock.setter()
{
  return CKModifyRecordsOperation.modifyRecordsResultBlock.setter();
}

CKModifyRecordsOperation __swiftcall CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(Swift::OpaquePointer_optional recordsToSave, Swift::OpaquePointer_optional recordIDsToDelete)
{
  return (CKModifyRecordsOperation)CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(recordsToSave.value._rawValue, *(void *)&recordsToSave.is_nil, recordIDsToDelete.value._rawValue, *(void *)&recordIDsToDelete.is_nil);
}

uint64_t CKModifyRecordsOperation.perRecordSaveBlock.setter()
{
  return CKModifyRecordsOperation.perRecordSaveBlock.setter();
}

uint64_t CKModifyRecordsOperation.perRecordDeleteBlock.setter()
{
  return CKModifyRecordsOperation.perRecordDeleteBlock.setter();
}

CKRecordZoneSubscription __swiftcall CKRecordZoneSubscription.init(zoneID:subscriptionID:)(CKRecordZoneID zoneID, Swift::String subscriptionID)
{
  return (CKRecordZoneSubscription)CKRecordZoneSubscription.init(zoneID:subscriptionID:)(zoneID.super.isa, subscriptionID._countAndFlagsBits, subscriptionID._object);
}

uint64_t type metadata accessor for OS_dispatch_queue_serial.Attributes()
{
  return type metadata accessor for OS_dispatch_queue_serial.Attributes();
}

uint64_t OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue_serial.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
}

uint64_t CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter()
{
  return CKModifyRecordZonesOperation.perRecordZoneSaveBlock.setter();
}

uint64_t CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter()
{
  return CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter();
}

CKModifyRecordZonesOperation __swiftcall CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(Swift::OpaquePointer_optional recordZonesToSave, Swift::OpaquePointer_optional recordZoneIDsToDelete)
{
  return (CKModifyRecordZonesOperation)CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(recordZonesToSave.value._rawValue, *(void *)&recordZonesToSave.is_nil, recordZoneIDsToDelete.value._rawValue, *(void *)&recordZoneIDsToDelete.is_nil);
}

uint64_t CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter()
{
  return CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter();
}

CKModifySubscriptionsOperation __swiftcall CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(Swift::OpaquePointer_optional subscriptionsToSave, Swift::OpaquePointer_optional subscriptionIDsToDelete)
{
  return (CKModifySubscriptionsOperation)CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(subscriptionsToSave.value._rawValue, *(void *)&subscriptionsToSave.is_nil, subscriptionIDsToDelete.value._rawValue, *(void *)&subscriptionIDsToDelete.is_nil);
}

uint64_t CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter()
{
  return CKModifySubscriptionsOperation.perSubscriptionSaveBlock.setter();
}

uint64_t CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter();
}

uint64_t CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter();
}

uint64_t CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter();
}

uint64_t CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter()
{
  return CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter();
}

CKRecord __swiftcall CKRecord.init(recordType:recordID:)(Swift::String recordType, CKRecordID recordID)
{
  return (CKRecord)CKRecord.init(recordType:recordID:)(recordType._countAndFlagsBits, recordType._object, recordID.super.isa);
}

uint64_t CKRecord.recordType.getter()
{
  return CKRecord.recordType.getter();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return _bridgeCocoaArray<A>(_:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t print(_:separator:terminator:)()
{
  return print(_:separator:terminator:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t CCRandomCopyBytes()
{
  return _CCRandomCopyBytes();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return _CFDataGetBytePtr(theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return _CFDataGetTypeID();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return _CFDictionaryCreateMutable(allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return _CFDictionaryCreateMutableCopy(allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return _CFDictionaryGetCount(theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return _CFDictionaryGetValue(theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return _CFDictionaryGetValueIfPresent(theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return _CFEqual(cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFHashCode CFHash(CFTypeRef cf)
{
  return _CFHash(cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return _CFNumberCreate(allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return _CFNumberGetTypeID();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return _CFNumberGetValue(number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return _CFPreferencesCopyValue(key, applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return _CFRetain(cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return _CFStringCreateWithCString(alloc, cStr, encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return _CFStringGetCStringPtr(theString, encoding);
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return _CFUserNotificationCreate(allocator, timeout, flags, error, dictionary);
}

SInt32 CFUserNotificationReceiveResponse(CFUserNotificationRef userNotification, CFTimeInterval timeout, CFOptionFlags *responseFlags)
{
  return _CFUserNotificationReceiveResponse(userNotification, timeout, responseFlags);
}

uint64_t CKRetryAfterSecondsForError()
{
  return _CKRetryAfterSecondsForError();
}

uint64_t CPPhoneNumberCopyHomeCountryCode()
{
  return _CPPhoneNumberCopyHomeCountryCode();
}

uint64_t DeviceIdentityIssueClientCertificateWithCompletion()
{
  return _DeviceIdentityIssueClientCertificateWithCompletion();
}

uint64_t IDSCopyIDForEmailAddress()
{
  return _IDSCopyIDForEmailAddress();
}

uint64_t IDSCopyIDForPhoneNumberWithOptions()
{
  return _IDSCopyIDForPhoneNumberWithOptions();
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallMethod(connection, selector, input, inputCnt, inputStruct, inputStructCnt, output, outputCnt, outputStruct, outputStructCnt);
}

kern_return_t IOConnectSetNotificationPort(io_connect_t connect, uint32_t type, mach_port_t port, uintptr_t reference)
{
  return _IOConnectSetNotificationPort(connect, type, port, reference);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return _IORegistryEntryCreateCFProperty(entry, key, allocator, options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return _IORegistryEntryFromPath(mainPort, path);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

uint64_t KTOptInGetString()
{
  return _KTOptInGetString();
}

uint64_t KTResultGetString()
{
  return _KTResultGetString();
}

uint64_t KTStaticKeyPeerValidateResultGetString()
{
  return _KTStaticKeyPeerValidateResultGetString();
}

uint64_t KTUIStatusGetString()
{
  return _KTUIStatusGetString();
}

uint64_t MGCopyAnswerWithError()
{
  return _MGCopyAnswerWithError();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MKBGetDeviceLockState()
{
  return _MKBGetDeviceLockState();
}

id NSAllocateObject(Class aClass, NSUInteger extraBytes, NSZone *zone)
{
  return _NSAllocateObject(aClass, extraBytes, zone);
}

void NSLog(NSString *format, ...)
{
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

NSZone *__cdecl NSZoneFromPointer(void *ptr)
{
  return _NSZoneFromPointer(ptr);
}

uint64_t PCSIdentityCopyPublicKeyInfo()
{
  return _PCSIdentityCopyPublicKeyInfo();
}

uint64_t PCSIdentityCreateSignature()
{
  return _PCSIdentityCreateSignature();
}

uint64_t PCSIdentityGetPublicKey()
{
  return _PCSIdentityGetPublicKey();
}

uint64_t PCSIdentitySetCopyCurrentIdentityPointer()
{
  return _PCSIdentitySetCopyCurrentIdentityPointer();
}

uint64_t PCSIdentitySetCopyIdentityWithError()
{
  return _PCSIdentitySetCopyIdentityWithError();
}

uint64_t PCSIdentitySetCreate()
{
  return _PCSIdentitySetCreate();
}

uint64_t PCSIdentitySetCreateManatee()
{
  return _PCSIdentitySetCreateManatee();
}

uint64_t PCSPublicIdentityCreateWithPublicKeyInfo()
{
  return _PCSPublicIdentityCreateWithPublicKeyInfo();
}

uint64_t PCSPublicIdentityGetPublicID()
{
  return _PCSPublicIdentityGetPublicID();
}

uint64_t PCSReportManateeStatus()
{
  return _PCSReportManateeStatus();
}

uint64_t PCSValidateSignature()
{
  return _PCSValidateSignature();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return _SecCertificateCopyData(certificate);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return _SecCertificateCopyKey(certificate);
}

uint64_t SecCertificateCopySubjectPublicKeyInfoSHA256Digest()
{
  return _SecCertificateCopySubjectPublicKeyInfoSHA256Digest();
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return _SecCertificateCreateWithData(allocator, data);
}

uint64_t SecCertificateCreateWithPEM()
{
  return _SecCertificateCreateWithPEM();
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return _SecKeyCreateSignature(key, algorithm, dataToSign, error);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return _SecKeyVerifySignature(key, algorithm, signedData, signature, error);
}

uint64_t SecPolicyCreateAppleIDSService()
{
  return _SecPolicyCreateAppleIDSService();
}

uint64_t SecPolicyCreateAppleKeyTransparency()
{
  return _SecPolicyCreateAppleKeyTransparency();
}

uint64_t SecSHA256DigestCreateFromData()
{
  return _SecSHA256DigestCreateFromData();
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return _SecTrustCreateWithCertificates(certificates, policies, trust);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return _SecTrustEvaluateWithError(trust, error);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _IDSIDProtocolVersionNumber()
{
  return __IDSIDProtocolVersionNumber();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int *__error(void)
{
  return ___error();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return ___maskrune(a1, a2);
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return ___tolower(a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return ___toupper(a1);
}

uint64_t _os_feature_enabled_impl()
{
  return __os_feature_enabled_impl();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint64_t _swift_stdlib_strtod_clocale()
{
  return __swift_stdlib_strtod_clocale();
}

void abort(void)
{
}

uint64_t abort_with_payload()
{
  return _abort_with_payload();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl calloc(size_t __count, size_t __size)
{
  return _calloc(__count, __size);
}

uint64_t cc_clear()
{
  return _cc_clear();
}

uint64_t ccaes_cbc_decrypt_mode()
{
  return _ccaes_cbc_decrypt_mode();
}

uint64_t ccaes_cbc_encrypt_mode()
{
  return _ccaes_cbc_encrypt_mode();
}

uint64_t cccbc_clear_iv()
{
  return _cccbc_clear_iv();
}

uint64_t cccbc_init()
{
  return _cccbc_init();
}

uint64_t cccurve25519()
{
  return _cccurve25519();
}

uint64_t cccurve25519_make_pub()
{
  return _cccurve25519_make_pub();
}

uint64_t ccder_blob_decode_len()
{
  return _ccder_blob_decode_len();
}

uint64_t ccder_blob_decode_range()
{
  return _ccder_blob_decode_range();
}

uint64_t ccder_blob_decode_sequence_tl()
{
  return _ccder_blob_decode_sequence_tl();
}

uint64_t ccder_blob_decode_tag()
{
  return _ccder_blob_decode_tag();
}

uint64_t ccder_blob_decode_tl()
{
  return _ccder_blob_decode_tl();
}

uint64_t ccder_blob_encode_body()
{
  return _ccder_blob_encode_body();
}

uint64_t ccder_blob_encode_body_tl()
{
  return _ccder_blob_encode_body_tl();
}

uint64_t ccder_blob_encode_implicit_raw_octet_string()
{
  return _ccder_blob_encode_implicit_raw_octet_string();
}

uint64_t ccder_blob_encode_implicit_uint64()
{
  return _ccder_blob_encode_implicit_uint64();
}

uint64_t ccder_blob_encode_tl()
{
  return _ccder_blob_encode_tl();
}

uint64_t ccder_decode_sequence_tl()
{
  return _ccder_decode_sequence_tl();
}

uint64_t ccder_decode_tl()
{
  return _ccder_decode_tl();
}

uint64_t ccder_encode_constructed_tl()
{
  return _ccder_encode_constructed_tl();
}

uint64_t ccder_encode_raw_octet_string()
{
  return _ccder_encode_raw_octet_string();
}

uint64_t ccder_encode_uint64()
{
  return _ccder_encode_uint64();
}

uint64_t ccder_sizeof()
{
  return _ccder_sizeof();
}

uint64_t ccder_sizeof_implicit_uint64()
{
  return _ccder_sizeof_implicit_uint64();
}

uint64_t ccder_sizeof_raw_octet_string()
{
  return _ccder_sizeof_raw_octet_string();
}

uint64_t ccder_sizeof_uint64()
{
  return _ccder_sizeof_uint64();
}

uint64_t ccdigest()
{
  return _ccdigest();
}

uint64_t ccec_export_pub()
{
  return _ccec_export_pub();
}

uint64_t ccec_import_pub()
{
  return _ccec_import_pub();
}

uint64_t cchkdf()
{
  return _cchkdf();
}

uint64_t cchmac()
{
  return _cchmac();
}

uint64_t ccn_read_uint()
{
  return _ccn_read_uint();
}

uint64_t ccn_write_uint_padded()
{
  return _ccn_write_uint_padded();
}

uint64_t ccpbkdf2_hmac()
{
  return _ccpbkdf2_hmac();
}

uint64_t ccrng()
{
  return _ccrng();
}

uint64_t ccsha256_di()
{
  return _ccsha256_di();
}

uint64_t ccvrf_factory_irtfdraft03_default()
{
  return _ccvrf_factory_irtfdraft03_default();
}

uint64_t ccvrf_sizeof_public_key()
{
  return _ccvrf_sizeof_public_key();
}

uint64_t ccvrf_verify()
{
  return _ccvrf_verify();
}

uint64_t cczp_bitlen()
{
  return _cczp_bitlen();
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return _class_addMethod(cls, name, imp, types);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return _class_copyMethodList(cls, outCount);
}

size_t class_getInstanceSize(Class cls)
{
  return _class_getInstanceSize(cls);
}

const char *__cdecl class_getName(Class cls)
{
  return _class_getName(cls);
}

int close(int a1)
{
  return _close(a1);
}

size_t confstr(int a1, char *a2, size_t a3)
{
  return _confstr(a1, a2, a3);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return _dispatch_queue_create_with_target_V2(label, attr, target);
}

dispatch_qos_class_t dispatch_queue_get_qos_class(dispatch_queue_t queue, int *relative_priority_ptr)
{
  return _dispatch_queue_get_qos_class(queue, relative_priority_ptr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

intptr_t dispatch_source_testcancel(dispatch_source_t source)
{
  return _dispatch_source_testcancel(source);
}

void dispatch_suspend(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return _dispatch_walltime(when, delta);
}

dispatch_workloop_t dispatch_workloop_create(const char *label)
{
  return _dispatch_workloop_create(label);
}

void exit(int a1)
{
}

int fcntl(int a1, int a2, ...)
{
  return _fcntl(a1, a2);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

void free(void *a1)
{
}

int fts_close(FTS *a1)
{
  return _fts_close(a1);
}

FTS *__cdecl fts_open(char *const *a1, int a2, int (__cdecl *a3)(const FTSENT **, const FTSENT **))
{
  return _fts_open(a1, a2, a3);
}

FTSENT *__cdecl fts_read(FTS *a1)
{
  return _fts_read(a1);
}

int fts_set(FTS *a1, FTSENT *a2, int a3)
{
  return _fts_set(a1, a2, a3);
}

int gettimeofday(timeval *a1, void *a2)
{
  return _gettimeofday(a1, a2);
}

IMP imp_implementationWithBlock(id block)
{
  return _imp_implementationWithBlock(block);
}

uint64_t mach_continuous_time(void)
{
  return _mach_continuous_time();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return _mach_timebase_info(info);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return _memset_s(__s, __smax, __c, __n);
}

SEL method_getName(Method m)
{
  return _method_getName(m);
}

int mkdir(const char *a1, mode_t a2)
{
  return _mkdir(a1, a2);
}

uint64_t mobileactivationErrorHasDomainAndErrorCode()
{
  return _mobileactivationErrorHasDomainAndErrorCode();
}

long double modf(long double __x, long double *__y)
{
  return _modf(__x, __y);
}

uint32_t notify_cancel(int token)
{
  return _notify_cancel(token);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  return _nw_path_get_status(path);
}

nw_path_monitor_t nw_path_monitor_create(void)
{
  return _nw_path_monitor_create();
}

void nw_path_monitor_set_queue(nw_path_monitor_t monitor, dispatch_queue_t queue)
{
}

void nw_path_monitor_set_update_handler(nw_path_monitor_t monitor, nw_path_monitor_update_handler_t update_handler)
{
}

void nw_path_monitor_start(nw_path_monitor_t monitor)
{
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_begin_catch(void *exc_buf)
{
  return _objc_begin_catch(exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

Class objc_getMetaClass(const char *name)
{
  return _objc_getMetaClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

Protocol *__cdecl objc_getProtocol(const char *name)
{
  return _objc_getProtocol(name);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

Class objc_lookUpClass(const char *name)
{
  return _objc_lookUpClass(name);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

const char *__cdecl object_getClassName(id a1)
{
  return _object_getClassName(a1);
}

int open(const char *a1, int a2, ...)
{
  return _open(a1, a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return _open_dprotected_np(a1, a2, a3, a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_allows_internal_security_policies()
{
  return _os_variant_allows_internal_security_policies();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return _os_variant_has_internal_diagnostics();
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

objc_method_description protocol_getMethodDescription(Protocol *p, SEL aSel, BOOL isRequiredMethod, BOOL isInstanceMethod)
{
  objc_method_description MethodDescription = _protocol_getMethodDescription(p, aSel, isRequiredMethod, isInstanceMethod);
  types = MethodDescription.types;
  name = MethodDescription.name;
  result.types = types;
  result.name = name;
  return result;
}

int putchar(int a1)
{
  return _putchar(a1);
}

int puts(const char *a1)
{
  return _puts(a1);
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return _read(a1, a2, a3);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return _reallocf(__ptr, __size);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return _realpath_DARWIN_EXTSN(a1, a2);
}

const char *__cdecl sel_getName(SEL sel)
{
  return _sel_getName(sel);
}

SEL sel_getUid(const char *str)
{
  return _sel_getUid(str);
}

int setenv(const char *__name, const char *__value, int __overwrite)
{
  return _setenv(__name, __value, __overwrite);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return _snprintf(__str, __size, __format);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_blob(a1, a2, a3, n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return _sqlite3_bind_double(a1, a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return _sqlite3_bind_int(a1, a2, a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return _sqlite3_bind_int64(a1, a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return _sqlite3_bind_null(a1, a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return _sqlite3_bind_text(a1, a2, a3, a4, a5);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return _sqlite3_clear_bindings(a1);
}

int sqlite3_close(sqlite3 *a1)
{
  return _sqlite3_close(a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_blob(a1, iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_bytes(a1, iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return _sqlite3_column_count(pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_double(a1, iCol);
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int(a1, iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_int64(a1, iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return _sqlite3_column_name(a1, N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_text(a1, iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return _sqlite3_column_type(a1, iCol);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return _sqlite3_errmsg(a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return _sqlite3_exec(a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return _sqlite3_finalize(pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return _sqlite3_open_v2(filename, ppDb, flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v2(db, zSql, nByte, ppStmt, pzTail);
}

int sqlite3_prepare_v3(sqlite3 *db, const char *zSql, int nByte, unsigned int prepFlags, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return _sqlite3_prepare_v3(db, zSql, nByte, prepFlags, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return _sqlite3_reset(pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return _sqlite3_step(a1);
}

int stat(const char *a1, stat *a2)
{
  return _stat(a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return _statfs(a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return _strerror(__errnum);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return _strnstr(__big, __little, __len);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_defaultActor_deallocate()
{
  return _swift_defaultActor_deallocate();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_deletedMethodError()
{
  return _swift_deletedMethodError();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeLayout3()
{
  return _swift_getTupleTypeLayout3();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_random()
{
  return _swift_stdlib_random();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

int sysctlnametomib(const char *a1, int *a2, size_t *a3)
{
  return _sysctlnametomib(a1, a2, a3);
}

void syslog(int a1, const char *a2, ...)
{
}

time_t time(time_t *a1)
{
  return _time(a1);
}

int uname(utsname *a1)
{
  return _uname(a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return _uuid_compare(uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

ssize_t write(int __fd, const void *__buf, size_t __nbyte)
{
  return _write(__fd, __buf, __nbyte);
}

uint64_t xpc_activity_copy_dispatch_queue()
{
  return _xpc_activity_copy_dispatch_queue();
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return _xpc_activity_get_state(activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return _xpc_activity_set_state(activity, state);
}

BOOL xpc_activity_should_defer(xpc_activity_t activity)
{
  return _xpc_activity_should_defer(activity);
}

uint64_t xpc_transaction_exit_clean()
{
  return _xpc_transaction_exit_clean();
}

id objc_msgSend_AllKTFlags(void *a1, const char *a2, ...)
{
  return _[a1 AllKTFlags];
}

id objc_msgSend_BAACertFetcher(void *a1, const char *a2, ...)
{
  return _[a1 BAACertFetcher];
}

id objc_msgSend_HTTPBody(void *a1, const char *a2, ...)
{
  return _[a1 HTTPBody];
}

id objc_msgSend_HTTPMethod(void *a1, const char *a2, ...)
{
  return _[a1 HTTPMethod];
}

id objc_msgSend_ISOCountryCodes(void *a1, const char *a2, ...)
{
  return _[a1 ISOCountryCodes];
}

id objc_msgSend_ITUCountryCodeForISOCountryCode_(void *a1, const char *a2, ...)
{
  return [a1 ITUCountryCodeForISOCountryCode:];
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_KTStateMap(void *a1, const char *a2, ...)
{
  return _[a1 KTStateMap];
}

id objc_msgSend_URIWithUnprefixedURI_(void *a1, const char *a2, ...)
{
  return [a1 URIWithUnprefixedURI:];
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _[a1 URL];
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return [a1 URLByAppendingPathComponent:];
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return [a1 URLByAppendingPathComponent:x0 isDirectory:x1];
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return [a1 URLForResource:x0 withExtension:x1];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return [a1 URLWithString:];
}

id objc_msgSend_URLsForDirectory_inDomains_(void *a1, const char *a2, ...)
{
  return [a1 URLsForDirectory:inDomains:];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend___verifiedLogHeads(void *a1, const char *a2, ...)
{
  return [a1 __verifiedLogHeads];
}

id objc_msgSend__applicationKeyStores(void *a1, const char *a2, ...)
{
  return _[a1 _applicationKeyStores];
}

id objc_msgSend__contexts(void *a1, const char *a2, ...)
{
  return _[a1 _contexts];
}

id objc_msgSend__enableStrictSecureDecodingMode(void *a1, const char *a2, ...)
{
  return _[a1 _enableStrictSecureDecodingMode];
}

id objc_msgSend__events(void *a1, const char *a2, ...)
{
  return _[a1 _events];
}

id objc_msgSend__localizedKTStringForKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_localizedKTStringForKey:");
}

id objc_msgSend__onQueueClearDeviceSignatureSignatures(void *a1, const char *a2, ...)
{
  return _[a1 _onQueueClearDeviceSignatureSignatures];
}

id objc_msgSend__onQueueRunReachabilityDependency(void *a1, const char *a2, ...)
{
  return _[a1 _onQueueRunReachabilityDependency];
}

id objc_msgSend__onqueueCancelPendingFlag_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueCancelPendingFlag:");
}

id objc_msgSend__onqueueContains_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueContains:");
}

id objc_msgSend__onqueueCreateNewCKFetch(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueCreateNewCKFetch];
}

id objc_msgSend__onqueueCreateNewServerOptInFetch(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueCreateNewServerOptInFetch];
}

id objc_msgSend__onqueueDeliverCloudKitStateChanges_dispatchGroup_(void *a1, const char *a2, ...)
{
  return [_onqueueDeliverCloudKitStateChanges:dispatchGroup:];
}

id objc_msgSend__onqueueDeliverCurrentCloudKitState_listenerQueue_oldStatus_group_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueDeliverCurrentCloudKitState:listenerQueue:oldStatus:group:");
}

id objc_msgSend__onqueueHandleFlag_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueHandleFlag:");
}

id objc_msgSend__onqueueHandlePendingFlagLater_(void *a1, const char *a2, ...)
{
  return [_onqueueHandlePendingFlagLater:];
}

id objc_msgSend__onqueueNextStateMachineTransition(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueNextStateMachineTransition];
}

id objc_msgSend__onqueueNextStateMachineTransition_flags_pendingFlags_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueNextStateMachineTransition:flags:pendingFlags:");
}

id objc_msgSend__onqueuePerformTimeoutWithUnderlyingError(void *a1, const char *a2, ...)
{
  return _[a1 _onqueuePerformTimeoutWithUnderlyingError];
}

id objc_msgSend__onqueuePerformTimeoutWithUnderlyingError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueuePerformTimeoutWithUnderlyingError:");
}

id objc_msgSend__onqueuePokeStateMachine(void *a1, const char *a2, ...)
{
  return _[a1 _onqueuePokeStateMachine];
}

id objc_msgSend__onqueueRecheck(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueRecheck];
}

id objc_msgSend__onqueueRecheckConditions(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueRecheckConditions];
}

id objc_msgSend__onqueueRemoveFlag_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueRemoveFlag:");
}

id objc_msgSend__onqueueSendAnyPendingFlags(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueSendAnyPendingFlags];
}

id objc_msgSend__onqueueSetFlag_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueSetFlag:");
}

id objc_msgSend__onqueueSetNetworkReachability_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueSetNetworkReachability:");
}

id objc_msgSend__onqueueStart(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueStart];
}

id objc_msgSend__onqueueStartNextStateMachineOperation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueStartNextStateMachineOperation:");
}

id objc_msgSend__onqueueTimeoutError(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueTimeoutError];
}

id objc_msgSend__onqueueTimerTick(void *a1, const char *a2, ...)
{
  return _[a1 _onqueueTimerTick];
}

id objc_msgSend__onqueueTrigger_maximumDelay_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueTrigger:maximumDelay:");
}

id objc_msgSend__onqueueUpdateAccountState_deliveredSemaphore_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueUpdateAccountState:deliveredSemaphore:");
}

id objc_msgSend__onqueueUpdateAccountState_dispatchGroup_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_onqueueUpdateAccountState:dispatchGroup:");
}

id objc_msgSend__pcsIdentity(void *a1, const char *a2, ...)
{
  return _[a1 _pcsIdentity];
}

id objc_msgSend__pcsIdentityCachedTime(void *a1, const char *a2, ...)
{
  return _[a1 _pcsIdentityCachedTime];
}

id objc_msgSend__serviceTypeForName_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_serviceTypeForName:");
}

id objc_msgSend__setEnabledTopics_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setEnabledTopics:");
}

id objc_msgSend__setFileNameLocalizationEnabled_(void *a1, const char *a2, ...)
{
  return [a1 _setFileNameLocalizationEnabled:];
}

id objc_msgSend__setPrivacyProxyFailClosed_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setPrivacyProxyFailClosed:");
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__waitForIDSRegistration_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_waitForIDSRegistration:");
}

id objc_msgSend_aa_altDSID(void *a1, const char *a2, ...)
{
  return [a1 aa_altDSID];
}

id objc_msgSend_aa_appleAccountsWithError_(void *a1, const char *a2, ...)
{
  return [a1 aa_appleAccountsWithError:];
}

id objc_msgSend_aa_errorWithCode_underlyingError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "aa_errorWithCode:underlyingError:");
}

id objc_msgSend_aa_isAccountClass_(void *a1, const char *a2, ...)
{
  return [a1 aa_isAccountClass:];
}

id objc_msgSend_aa_personID(void *a1, const char *a2, ...)
{
  return [a1 aa_personID];
}

id objc_msgSend_aa_primaryEmail(void *a1, const char *a2, ...)
{
  return [a1 aa_primaryEmail];
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _[a1 absoluteString];
}

id objc_msgSend_absoluteURL(void *a1, const char *a2, ...)
{
  return _[a1 absoluteURL];
}

id objc_msgSend_accountChanged_to_(void *a1, const char *a2, ...)
{
  return [a1 accountChanged:to:];
}

id objc_msgSend_accountController(void *a1, const char *a2, ...)
{
  return _[a1 accountController];
}

id objc_msgSend_accountEverOptedIn_(void *a1, const char *a2, ...)
{
  return [a1 accountEverOptedIn:];
}

id objc_msgSend_accountFirstSeenDate(void *a1, const char *a2, ...)
{
  return _[a1 accountFirstSeenDate];
}

id objc_msgSend_accountForAccountKey_(void *a1, const char *a2, ...)
{
  return [a1 accountForAccountKey:];
}

id objc_msgSend_accountForAccountKeyHash_(void *a1, const char *a2, ...)
{
  return [a1 accountForAccountKeyHash:];
}

id objc_msgSend_accountInfoWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 accountInfoWithCompletionHandler:];
}

id objc_msgSend_accountKey(void *a1, const char *a2, ...)
{
  return _[a1 accountKey];
}

id objc_msgSend_accountKeyHash(void *a1, const char *a2, ...)
{
  return _[a1 accountKeyHash];
}

id objc_msgSend_accountKeyServer(void *a1, const char *a2, ...)
{
  return _[a1 accountKeyServer];
}

id objc_msgSend_accountKeyService(void *a1, const char *a2, ...)
{
  return _[a1 accountKeyService];
}

id objc_msgSend_accountKeyService_(void *a1, const char *a2, ...)
{
  return [a1 accountKeyService:];
}

id objc_msgSend_accountLevel_(void *a1, const char *a2, ...)
{
  return [a1 accountLevel:];
}

id objc_msgSend_accountLevelErrorCodeForLevel_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accountLevelErrorCodeForLevel:");
}

id objc_msgSend_accountMetricID(void *a1, const char *a2, ...)
{
  return _[a1 accountMetricID];
}

id objc_msgSend_accountMismatch(void *a1, const char *a2, ...)
{
  return _[a1 accountMismatch];
}

id objc_msgSend_accountOperations(void *a1, const char *a2, ...)
{
  return _[a1 accountOperations];
}

id objc_msgSend_accountOptInHistory_(void *a1, const char *a2, ...)
{
  return [a1 accountOptInHistory:];
}

id objc_msgSend_accountOptInRecord_(void *a1, const char *a2, ...)
{
  return [a1 accountOptInRecord:];
}

id objc_msgSend_accountOptInState_(void *a1, const char *a2, ...)
{
  return [a1 accountOptInState:];
}

id objc_msgSend_accountOverrideInfo(void *a1, const char *a2, ...)
{
  return _[a1 accountOverrideInfo];
}

id objc_msgSend_accountRecentlyOptedIn_(void *a1, const char *a2, ...)
{
  return [a1 accountRecentlyOptedIn:];
}

id objc_msgSend_accountStateHolder(void *a1, const char *a2, ...)
{
  return _[a1 accountStateHolder];
}

id objc_msgSend_accountStatus(void *a1, const char *a2, ...)
{
  return _[a1 accountStatus];
}

id objc_msgSend_accountType(void *a1, const char *a2, ...)
{
  return _[a1 accountType];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _[a1 accounts];
}

id objc_msgSend_accountsArray(void *a1, const char *a2, ...)
{
  return _[a1 accountsArray];
}

id objc_msgSend_accountsdRetryTimeout(void *a1, const char *a2, ...)
{
  return _[a1 accountsdRetryTimeout];
}

id objc_msgSend_actionWithLabel_url_(void *a1, const char *a2, ...)
{
  return [a1 actionWithLabel:url:];
}

id objc_msgSend_active(void *a1, const char *a2, ...)
{
  return _[a1 active];
}

id objc_msgSend_active_(void *a1, const char *a2, ...)
{
  return [a1 active:];
}

id objc_msgSend_addAccountAuthentication_error_(void *a1, const char *a2, ...)
{
  return [a1 addAccountAuthentication:error:];
}

id objc_msgSend_addAccountHealableError_(void *a1, const char *a2, ...)
{
  return [a1 addAccountHealableError:];
}

id objc_msgSend_addAccountsObject_(void *a1, const char *a2, ...)
{
  return [a1 addAccountsObject:];
}

id objc_msgSend_addApplication_(void *a1, const char *a2, ...)
{
  return [a1 addApplication:];
}

id objc_msgSend_addApplicationPrefixForIdentifier_uri_(void *a1, const char *a2, ...)
{
  return [a1 addApplicationPrefixForIdentifier:uri:];
}

id objc_msgSend_addClientDatasObject_(void *a1, const char *a2, ...)
{
  return [a1 addClientDatasObject:];
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return [a1 addDelegate:queue:];
}

id objc_msgSend_addDependency_(void *a1, const char *a2, ...)
{
  return [a1 addDependency:];
}

id objc_msgSend_addDevice_clientData_error_(void *a1, const char *a2, ...)
{
  return [a1 addDevice:x0 clientData:x1 error:x2];
}

id objc_msgSend_addDevice_registationData_app_(void *a1, const char *a2, ...)
{
  return [a1 addDevice:registationData:app:];
}

id objc_msgSend_addDeviceAuthentication_signature_timestamp_certs_(void *a1, const char *a2, ...)
{
  return [a1 addDeviceAuthentication:signature:timestamp:certs:];
}

id objc_msgSend_addDeviceHealableError_deviceId_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "addDeviceHealableError:deviceId:");
}

id objc_msgSend_addDevicesObject_(void *a1, const char *a2, ...)
{
  return [a1 addDevicesObject:];
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return [a1 addEntriesFromDictionary:];
}

id objc_msgSend_addErrorToBackgroundOp_smDataStore_failureDataString_type_serverHint_failure_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "addErrorToBackgroundOp:smDataStore:failureDataString:type:serverHint:failure:");
}

id objc_msgSend_addEvent_(void *a1, const char *a2, ...)
{
  return [a1 addEvent:];
}

id objc_msgSend_addExecutionBlock_(void *a1, const char *a2, ...)
{
  return [a1 addExecutionBlock:];
}

id objc_msgSend_addExtension_value_(void *a1, const char *a2, ...)
{
  return [a1 addExtension:value:];
}

id objc_msgSend_addExtensions_(void *a1, const char *a2, ...)
{
  return [a1 addExtensions:];
}

id objc_msgSend_addFailures_(void *a1, const char *a2, ...)
{
  return [a1 addFailures:];
}

id objc_msgSend_addField_(void *a1, const char *a2, ...)
{
  return [a1 addField:];
}

id objc_msgSend_addFixed32_(void *a1, const char *a2, ...)
{
  return [a1 addFixed32:];
}

id objc_msgSend_addFixed64_(void *a1, const char *a2, ...)
{
  return [a1 addFixed64:];
}

id objc_msgSend_addGroup_(void *a1, const char *a2, ...)
{
  return [a1 addGroup:];
}

id objc_msgSend_addHealableState_(void *a1, const char *a2, ...)
{
  return [a1 addHealableState:];
}

id objc_msgSend_addLengthDelimited_(void *a1, const char *a2, ...)
{
  return [a1 addLengthDelimited:];
}

id objc_msgSend_addMultiSamplerForName_withTimeInterval_block_(void *a1, const char *a2, ...)
{
  return [a1 addMultiSamplerForName:withTimeInterval:block:];
}

id objc_msgSend_addNFSReporting_(void *a1, const char *a2, ...)
{
  return [a1 addNFSReporting:];
}

id objc_msgSend_addNullableDependency_(void *a1, const char *a2, ...)
{
  return [a1 addNullableDependency:];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 addObjectsFromArray:];
}

id objc_msgSend_addObserver_selector_name_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:selector:name:];
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:x0 selector:x1 name:x2 object:x3];
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return [a1 addOperation:];
}

id objc_msgSend_addOptInStateWithURI_smtTimestamp_application_state_error_(void *a1, const char *a2, ...)
{
  return [a1 addOptInStateWithURI:x0 smtTimestamp:x1 application:x2 state:x3 error:x4];
}

id objc_msgSend_addRawEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return [a1 addRawEntriesFromDictionary:];
}

id objc_msgSend_addRawValue_(void *a1, const char *a2, ...)
{
  return [a1 addRawValue:];
}

id objc_msgSend_addRawValues_count_(void *a1, const char *a2, ...)
{
  return [a1 addRawValues:x0 count:x1];
}

id objc_msgSend_addRawValuesFromArray_(void *a1, const char *a2, ...)
{
  return [a1 addRawValuesFromArray:];
}

id objc_msgSend_addResult_failure_toLoggableDatas_(void *a1, const char *a2, ...)
{
  return [a1 addResult:failure:toLoggableDatas:];
}

id objc_msgSend_addSuccessDependency_(void *a1, const char *a2, ...)
{
  return [a1 addSuccessDependency:];
}

id objc_msgSend_addTrustedCertificate_trustedKeys_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "addTrustedCertificate:trustedKeys:error:");
}

id objc_msgSend_addUnknownMapEntry_value_(void *a1, const char *a2, ...)
{
  return [a1 addUnknownMapEntry:value:];
}

id objc_msgSend_addValidateRequest_dataStore_error_(void *a1, const char *a2, ...)
{
  return [a1 addValidateRequest:dataStore:error:];
}

id objc_msgSend_addValue_(void *a1, const char *a2, ...)
{
  return [a1 addValue:];
}

id objc_msgSend_addValues_count_(void *a1, const char *a2, ...)
{
  return [a1 addValues:count:];
}

id objc_msgSend_addValuesFromArray_(void *a1, const char *a2, ...)
{
  return [a1 addValuesFromArray:];
}

id objc_msgSend_addVarint_(void *a1, const char *a2, ...)
{
  return [a1 addVarint:];
}

id objc_msgSend_addWithNamed_watcher_(void *a1, const char *a2, ...)
{
  return [a1 addWithNamed:watcher:];
}

id objc_msgSend_addedDate(void *a1, const char *a2, ...)
{
  return _[a1 addedDate];
}

id objc_msgSend_addedMs(void *a1, const char *a2, ...)
{
  return _[a1 addedMs];
}

id objc_msgSend_additionalHeaders(void *a1, const char *a2, ...)
{
  return _[a1 additionalHeaders];
}

id objc_msgSend_afterFirstUnlock(void *a1, const char *a2, ...)
{
  return _[a1 afterFirstUnlock];
}

id objc_msgSend_afterOperation(void *a1, const char *a2, ...)
{
  return _[a1 afterOperation];
}

id objc_msgSend_aggregateResultWithSamples_element_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "aggregateResultWithSamples:element:completionHandler:");
}

id objc_msgSend_algorithm(void *a1, const char *a2, ...)
{
  return _[a1 algorithm];
}

id objc_msgSend_allDependentsSuccessful(void *a1, const char *a2, ...)
{
  return _[a1 allDependentsSuccessful];
}

id objc_msgSend_allHTTPHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHTTPHeaderFields];
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHeaderFields];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allSuccessful_(void *a1, const char *a2, ...)
{
  return [a1 allSuccessful:];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_alloc(void *a1, const char *a2, ...)
{
  return _[a1 alloc];
}

id objc_msgSend_allocDescriptorForClass_messageName_fileDescription_fields_fieldCount_storageSize_flags_(void *a1, const char *a2, ...)
{
  return [a1 allocDescriptorForClass:x0 messageName:x1 fileDescription:x2 fields:x3 fieldCount:x4 storageSize:x5 flags:x6];
}

id objc_msgSend_allocDescriptorForClass_rootClass_file_fields_fieldCount_storageSize_flags_(void *a1, const char *a2, ...)
{
  return [a1 allocDescriptorForClass:x0 rootClass:x1 file:x2 fields:x3 fieldCount:x4 storageSize:x5 flags:x6];
}

id objc_msgSend_allocDescriptorForName_valueNames_values_count_enumVerifier_flags_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "allocDescriptorForName:valueNames:values:count:enumVerifier:flags:");
}

id objc_msgSend_allocDescriptorForName_valueNames_values_count_enumVerifier_flags_extraTextFormatInfo_(void *a1, const char *a2, ...)
{
  return [a1 allocDescriptorForName:x0 valueNames:x1 values:x2 count:x3 enumVerifier:x4 flags:x5 extraTextFormatInfo:x6];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return [a1 allocWithZone:];
}

id objc_msgSend_allowEmptyData(void *a1, const char *a2, ...)
{
  return _[a1 allowEmptyData];
}

id objc_msgSend_allowOldKeys(void *a1, const char *a2, ...)
{
  return _[a1 allowOldKeys];
}

id objc_msgSend_allowPendingFlags(void *a1, const char *a2, ...)
{
  return _[a1 allowPendingFlags];
}

id objc_msgSend_allowableFlags(void *a1, const char *a2, ...)
{
  return _[a1 allowableFlags];
}

id objc_msgSend_allowableStates(void *a1, const char *a2, ...)
{
  return _[a1 allowableStates];
}

id objc_msgSend_allowsInternalSecurityPolicies(void *a1, const char *a2, ...)
{
  return _[a1 allowsInternalSecurityPolicies];
}

id objc_msgSend_altDSID(void *a1, const char *a2, ...)
{
  return _[a1 altDSID];
}

id objc_msgSend_altDSIDForAccount_(void *a1, const char *a2, ...)
{
  return [a1 altDSIDForAccount:];
}

id objc_msgSend_alternateWireType(void *a1, const char *a2, ...)
{
  return _[a1 alternateWireType];
}

id objc_msgSend_analyticsApplications(void *a1, const char *a2, ...)
{
  return _[a1 analyticsApplications];
}

id objc_msgSend_analyticsErrorData_(void *a1, const char *a2, ...)
{
  return [a1 analyticsErrorData:];
}

id objc_msgSend_analyticsForDecodeFailure_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "analyticsForDecodeFailure:error:");
}

id objc_msgSend_analyticsForParseFailure_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "analyticsForParseFailure:");
}

id objc_msgSend_analyticsForPredateLogBeginningMs_expectedLogBeginningMS_sth_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "analyticsForPredateLogBeginningMs:expectedLogBeginningMS:sth:");
}

id objc_msgSend_analyticsForResponse_type_uri_result_ktCapable_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "analyticsForResponse:type:uri:result:ktCapable:");
}

id objc_msgSend_analyticsForTooNewLogBeginningMs_expectedLogBeginningMS_sth_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "analyticsForTooNewLogBeginningMs:expectedLogBeginningMS:sth:")];
}

id objc_msgSend_analyticsForType_uri_accountKey_serverLoggableDatas_syncedLoggableDatas_transparentData_selfVerificationInfo_responseTime_result_failure_responseMetadata_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "analyticsForType:uri:accountKey:serverLoggableDatas:syncedLoggableDatas:transparentData:selfVerificationInfo:responseTime:result:failure:responseMetadata:");
}

id objc_msgSend_analyticsForUnsupportedProtocol_expected_sth_(void *a1, const char *a2, ...)
{
  return [a1 analyticsForUnsupportedProtocol:expected:sth:];
}

id objc_msgSend_analyticsLogger(void *a1, const char *a2, ...)
{
  return _[a1 analyticsLogger];
}

id objc_msgSend_analyticsSelfFlagNames(void *a1, const char *a2, ...)
{
  return _[a1 analyticsSelfFlagNames];
}

id objc_msgSend_analyticsSuccessNames(void *a1, const char *a2, ...)
{
  return _[a1 analyticsSuccessNames];
}

id objc_msgSend_anyStoreExpired(void *a1, const char *a2, ...)
{
  return _[a1 anyStoreExpired];
}

id objc_msgSend_appLeafsArray(void *a1, const char *a2, ...)
{
  return _[a1 appLeafsArray];
}

id objc_msgSend_appLeafsArray_Count(void *a1, const char *a2, ...)
{
  return [a1 appLeafsArray_Count];
}

id objc_msgSend_appSmtKeyStore(void *a1, const char *a2, ...)
{
  return _[a1 appSmtKeyStore];
}

id objc_msgSend_appSthKeyStore(void *a1, const char *a2, ...)
{
  return _[a1 appSthKeyStore];
}

id objc_msgSend_appVersion(void *a1, const char *a2, ...)
{
  return _[a1 appVersion];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 appendBytes:x0 length:x1];
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return [a1 appendData:];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return [a1 appendFormat:];
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return [a1 appendString:];
}

id objc_msgSend_application(void *a1, const char *a2, ...)
{
  return _[a1 application];
}

id objc_msgSend_applicationID(void *a1, const char *a2, ...)
{
  return _[a1 applicationID];
}

id objc_msgSend_applicationId(void *a1, const char *a2, ...)
{
  return _[a1 applicationId];
}

id objc_msgSend_applicationIdentifierForValue_(void *a1, const char *a2, ...)
{
  return [a1 applicationIdentifierForValue:];
}

id objc_msgSend_applicationKeyStore(void *a1, const char *a2, ...)
{
  return _[a1 applicationKeyStore];
}

id objc_msgSend_applicationKeyStores(void *a1, const char *a2, ...)
{
  return _[a1 applicationKeyStores];
}

id objc_msgSend_applicationPrefixForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 applicationPrefixForIdentifier:];
}

id objc_msgSend_applicationPublicKeyStore_(void *a1, const char *a2, ...)
{
  return [a1 applicationPublicKeyStore:];
}

id objc_msgSend_applicationToService_(void *a1, const char *a2, ...)
{
  return [a1 applicationToService:];
}

id objc_msgSend_applicationValueForIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 applicationValueForIdentifier:];
}

id objc_msgSend_applicationVersion(void *a1, const char *a2, ...)
{
  return _[a1 applicationVersion];
}

id objc_msgSend_applications(void *a1, const char *a2, ...)
{
  return _[a1 applications];
}

id objc_msgSend_applyPeerOverrides_peer_(void *a1, const char *a2, ...)
{
  return [a1 applyPeerOverrides:peer:];
}

id objc_msgSend_apps(void *a1, const char *a2, ...)
{
  return _[a1 apps];
}

id objc_msgSend_apsConnection(void *a1, const char *a2, ...)
{
  return _[a1 apsConnection];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:")
}

id objc_msgSend_areKeysAvailable_(void *a1, const char *a2, ...)
{
  return [a1 areKeysAvailable:];
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithArray:];
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithCapacity:];
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObject:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:];
}

id objc_msgSend_asPathStep(void *a1, const char *a2, ...)
{
  return _[a1 asPathStep];
}

id objc_msgSend_atEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 atEnvironment];
}

id objc_msgSend_auditorReportForKTRequest_(void *a1, const char *a2, ...)
{
  return [a1 auditorReportForKTRequest:];
}

id objc_msgSend_auditorReportForKTSMT_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "auditorReportForKTSMT:");
}

id objc_msgSend_auditorReportForSTH_(void *a1, const char *a2, ...)
{
  return [a1 auditorReportForSTH:];
}

id objc_msgSend_auditorReportsForFailedEvents_dataStore_completionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "auditorReportsForFailedEvents:dataStore:completionBlock:");
}

id objc_msgSend_auth(void *a1, const char *a2, ...)
{
  return _[a1 auth];
}

id objc_msgSend_authKitAccountWithAltDSID_error_(void *a1, const char *a2, ...)
{
  return [a1 authKitAccountWithAltDSID:error:];
}

id objc_msgSend_authToken_(void *a1, const char *a2, ...)
{
  return [a1 authToken:];
}

id objc_msgSend_authenticated(void *a1, const char *a2, ...)
{
  return _[a1 authenticated];
}

id objc_msgSend_autoVacuumSetting(void *a1, const char *a2, ...)
{
  return _[a1 autoVacuumSetting];
}

id objc_msgSend_automatedDeviceGroup(void *a1, const char *a2, ...)
{
  return _[a1 automatedDeviceGroup];
}

id objc_msgSend_baaKey(void *a1, const char *a2, ...)
{
  return _[a1 baaKey];
}

id objc_msgSend_backgroundContext(void *a1, const char *a2, ...)
{
  return _[a1 backgroundContext];
}

id objc_msgSend_backgroundFollowupDelayPeriod(void *a1, const char *a2, ...)
{
  return _[a1 backgroundFollowupDelayPeriod];
}

id objc_msgSend_backgroundFollowupFailureCount(void *a1, const char *a2, ...)
{
  return _[a1 backgroundFollowupFailureCount];
}

id objc_msgSend_backgroundNetworkTimeout(void *a1, const char *a2, ...)
{
  return _[a1 backgroundNetworkTimeout];
}

id objc_msgSend_backgroundOpId(void *a1, const char *a2, ...)
{
  return _[a1 backgroundOpId];
}

id objc_msgSend_backgroundSession(void *a1, const char *a2, ...)
{
  return _[a1 backgroundSession];
}

id objc_msgSend_backgroundSessionConfigurationWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 backgroundSessionConfigurationWithIdentifier:];
}

id objc_msgSend_backoff(void *a1, const char *a2, ...)
{
  return _[a1 backoff];
}

id objc_msgSend_bag(void *a1, const char *a2, ...)
{
  return _[a1 bag];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 base64EncodedStringWithOptions:];
}

id objc_msgSend_batchQueryMaxURIs(void *a1, const char *a2, ...)
{
  return _[a1 batchQueryMaxURIs];
}

id objc_msgSend_batchQueryURI(void *a1, const char *a2, ...)
{
  return _[a1 batchQueryURI];
}

id objc_msgSend_batchUpdateRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "batchUpdateRequestWithEntityName:");
}

id objc_msgSend_bestVerificationResultToUIStatusForDate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "bestVerificationResultToUIStatusForDate:");
}

id objc_msgSend_bindNullAtColumn_(void *a1, const char *a2, ...)
{
  return [a1 bindNullAtColumn:];
}

id objc_msgSend_blobAtColumn_(void *a1, const char *a2, ...)
{
  return [a1 blobAtColumn:];
}

id objc_msgSend_blockOperationWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 blockOperationWithBlock:];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_build(void *a1, const char *a2, ...)
{
  return _[a1 build];
}

id objc_msgSend_buildBatchQueryRequest_application_error_(void *a1, const char *a2, ...)
{
  return [a1 buildBatchQueryRequest:application:error:];
}

id objc_msgSend_buildBatchQueryRequests_application_maxURIsPerBatch_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "buildBatchQueryRequests:application:maxURIsPerBatch:error:");
}

id objc_msgSend_buildConsistencyProofRequest_revisions_error_(void *a1, const char *a2, ...)
{
  return [a1 buildConsistencyProofRequest:x0, x1, x2];
}

id objc_msgSend_buildNumber(void *a1, const char *a2, ...)
{
  return _[a1 buildNumber];
}

id objc_msgSend_buildPublicKeysRequest_error_(void *a1, const char *a2, ...)
{
  return [a1 buildPublicKeysRequest:error];
}

id objc_msgSend_buildQueryRequest_application_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "buildQueryRequest:application:error:");
}

id objc_msgSend_buildRevisionLogInclusionProofRequest_logType_revisions_error_(void *a1, const char *a2, ...)
{
  return [a1 buildRevisionLogInclusionProofRequest:x0 logType:x1 revisions:x2 error:x3];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleURL(void *a1, const char *a2, ...)
{
  return _[a1 bundleURL];
}

id objc_msgSend_bundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 bundleWithIdentifier:];
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return [a1 bundleWithPath:];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cacheClearRequest_(void *a1, const char *a2, ...)
{
  return [a1 cacheClearRequest:];
}

id objc_msgSend_cachePCSIdentity_(void *a1, const char *a2, ...)
{
  return [a1 cachePCSIdentity:];
}

id objc_msgSend_cachedDevices(void *a1, const char *a2, ...)
{
  return _[a1 cachedDevices];
}

id objc_msgSend_cachedGossip(void *a1, const char *a2, ...)
{
  return _[a1 cachedGossip];
}

id objc_msgSend_cachedNotification(void *a1, const char *a2, ...)
{
  return _[a1 cachedNotification];
}

id objc_msgSend_cachedTimeOfLastReportWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 cachedTimeOfLastReportWithCompletionHandler:];
}

id objc_msgSend_cachedTimes(void *a1, const char *a2, ...)
{
  return _[a1 cachedTimes];
}

id objc_msgSend_calcValueNameOffsets(void *a1, const char *a2, ...)
{
  return _[a1 calcValueNameOffsets];
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return _[a1 callStackSymbols];
}

id objc_msgSend_callbackWorkloop(void *a1, const char *a2, ...)
{
  return _[a1 callbackWorkloop];
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _[a1 cancel];
}

id objc_msgSend_cancelAllOperations(void *a1, const char *a2, ...)
{
  return _[a1 cancelAllOperations];
}

id objc_msgSend_cancelPendingFlag_(void *a1, const char *a2, ...)
{
  return [a1 cancelPendingFlag:];
}

id objc_msgSend_certFetcher(void *a1, const char *a2, ...)
{
  return _[a1 certFetcher];
}

id objc_msgSend_certificateFromData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "certificateFromData:error:");
}

id objc_msgSend_certificates(void *a1, const char *a2, ...)
{
  return _[a1 certificates];
}

id objc_msgSend_cfPrefsJson(void *a1, const char *a2, ...)
{
  return _[a1 cfPrefsJson];
}

id objc_msgSend_chain(void *a1, const char *a2, ...)
{
  return _[a1 chain];
}

id objc_msgSend_changeLogHead(void *a1, const char *a2, ...)
{
  return _[a1 changeLogHead];
}

id objc_msgSend_changeOptInState_application_logClient_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 changeOptInState:x0 application:x1 logClient:x2 completionBlock:x3];
}

id objc_msgSend_changeOptInState_application_loggableData_error_(void *a1, const char *a2, ...)
{
  return [a1 changeOptInState:x0 application:x1 loggableData:x2 error:x3];
}

id objc_msgSend_changeOptInState_dataStore_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 changeOptInState:x0 dataStore:x1 completionBlock:x2];
}

id objc_msgSend_changeType(void *a1, const char *a2, ...)
{
  return _[a1 changeType];
}

id objc_msgSend_changedObjectID(void *a1, const char *a2, ...)
{
  return _[a1 changedObjectID];
}

id objc_msgSend_changes(void *a1, const char *a2, ...)
{
  return _[a1 changes];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 characterAtIndex:];
}

id objc_msgSend_checkAccountKeyChanged(void *a1, const char *a2, ...)
{
  return _[a1 checkAccountKeyChanged];
}

id objc_msgSend_checkAccountNFS(void *a1, const char *a2, ...)
{
  return _[a1 checkAccountNFS];
}

id objc_msgSend_checkAllCKKSMonitoredViews(void *a1, const char *a2, ...)
{
  return _[a1 checkAllCKKSMonitoredViews];
}

id objc_msgSend_checkAndLogHardErrorIfNecessary_type_logger_error_applicationID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "checkAndLogHardErrorIfNecessary:type:logger:error:applicationID:");
}

id objc_msgSend_checkBagKeyClass_keys_(void *a1, const char *a2, ...)
{
  return [a1 checkBagKeyClass:keys];
}

id objc_msgSend_checkBatchQueryResponseEpochs_(void *a1, const char *a2, ...)
{
  return [a1 checkBatchQueryResponseEpochs:];
}

id objc_msgSend_checkBatchQueryResponseFreshness_receiptDate_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "checkBatchQueryResponseFreshness:receiptDate:error:");
}

id objc_msgSend_checkCKKSAvailable_(void *a1, const char *a2, ...)
{
  return [a1 checkCKKSAvailable:];
}

id objc_msgSend_checkErrorChainForLockState_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "checkErrorChainForLockState:");
}

id objc_msgSend_checkFollowupTicket_uri_checkTime_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "checkFollowupTicket:uri:checkTime:error:")];
}

id objc_msgSend_checkHeadEpoch_(void *a1, const char *a2, ...)
{
  return [a1 checkHeadEpoch:];
}

id objc_msgSend_checkIDSHealth_(void *a1, const char *a2, ...)
{
  return [a1 checkIDSHealth:];
}

id objc_msgSend_checkIDSRegistration(void *a1, const char *a2, ...)
{
  return _[a1 checkIDSRegistration];
}

id objc_msgSend_checkIDSResult(void *a1, const char *a2, ...)
{
  return _[a1 checkIDSResult];
}

id objc_msgSend_checkIDSTimeoutSeconds(void *a1, const char *a2, ...)
{
  return _[a1 checkIDSTimeoutSeconds];
}

id objc_msgSend_checkIDSTimer(void *a1, const char *a2, ...)
{
  return _[a1 checkIDSTimer];
}

id objc_msgSend_checkKTAccountKey_complete_(void *a1, const char *a2, ...)
{
  return [a1 checkKTAccountKey:complete:];
}

id objc_msgSend_checkKTAccountKeyScheduler(void *a1, const char *a2, ...)
{
  return _[a1 checkKTAccountKeyScheduler];
}

id objc_msgSend_checkKTSignatureScheduler(void *a1, const char *a2, ...)
{
  return _[a1 checkKTSignatureScheduler];
}

id objc_msgSend_checkLastTagWas_(void *a1, const char *a2, ...)
{
  return [a1 checkLastTagWas:];
}

id objc_msgSend_checkMissingBagKeys_keys_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "checkMissingBagKeys:keys:");
}

id objc_msgSend_checkNetworkError_(void *a1, const char *a2, ...)
{
  return [a1 checkNetworkError:];
}

id objc_msgSend_checkPCSKTSignature_data_signature_(void *a1, const char *a2, ...)
{
  return [a1 checkPCSKTSignature:x0 data:x1 signature:x2];
}

id objc_msgSend_checkQueryInfoFreshness_receiptDate_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "checkQueryInfoFreshness:receiptDate:error:")];
}

id objc_msgSend_checkQueryResponseEpochs_(void *a1, const char *a2, ...)
{
  return [a1 checkQueryResponseEpochs:];
}

id objc_msgSend_checkQueryResponseFreshness_receiptDate_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "checkQueryResponseFreshness:receiptDate:error:");
}

id objc_msgSend_checkReachabilityOperation(void *a1, const char *a2, ...)
{
  return _[a1 checkReachabilityOperation];
}

id objc_msgSend_checkResponseFreshness_smh_receiptDate_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend a1 checkResponseFreshness:smh:receiptDate:error:];
}

id objc_msgSend_checkServerStatus_error_(void *a1, const char *a2, ...)
{
  return [a1 checkServerStatus:error];
}

id objc_msgSend_checkServerStatus_isInsert_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "checkServerStatus:isInsert:error:");
}

id objc_msgSend_checkSplitsFor_(void *a1, const char *a2, ...)
{
  return [a1 checkSplitsFor:];
}

id objc_msgSend_checkUnlockOperation(void *a1, const char *a2, ...)
{
  return _[a1 checkUnlockOperation];
}

id objc_msgSend_childAccountsWithAccountTypeIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 childAccountsWithAccountTypeIdentifier:];
}

id objc_msgSend_chunkArray_chunkSize_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "chunkArray:chunkSize:")];
}

id objc_msgSend_ckAccountInfoInitialized(void *a1, const char *a2, ...)
{
  return _[a1 ckAccountInfoInitialized];
}

id objc_msgSend_ckChangeListeners(void *a1, const char *a2, ...)
{
  return _[a1 ckChangeListeners];
}

id objc_msgSend_ckFetchReasons(void *a1, const char *a2, ...)
{
  return _[a1 ckFetchReasons];
}

id objc_msgSend_ckFetchScheduler(void *a1, const char *a2, ...)
{
  return _[a1 ckFetchScheduler];
}

id objc_msgSend_ckdatabase(void *a1, const char *a2, ...)
{
  return _[a1 ckdatabase];
}

id objc_msgSend_ckksCheckerNFS(void *a1, const char *a2, ...)
{
  return _[a1 ckksCheckerNFS];
}

id objc_msgSend_ckksControl_(void *a1, const char *a2, ...)
{
  return [a1 ckksControl:];
}

id objc_msgSend_ckksControlInterface(void *a1, const char *a2, ...)
{
  return _[a1 ckksControlInterface];
}

id objc_msgSend_ckksGetKnownBadState_(void *a1, const char *a2, ...)
{
  return [a1 ckksGetKnownBadState:];
}

id objc_msgSend_ckksRequestViewSync_complete_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "ckksRequestViewSync:complete:")];
}

id objc_msgSend_ckksTimeout(void *a1, const char *a2, ...)
{
  return _[a1 ckksTimeout];
}

id objc_msgSend_ckksViewObserver(void *a1, const char *a2, ...)
{
  return _[a1 ckksViewObserver];
}

id objc_msgSend_ckksViewReady_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "ckksViewReady:error:");
}

id objc_msgSend_cleanseError_(void *a1, const char *a2, ...)
{
  return [a1 cleanseError:];
}

id objc_msgSend_cleanseErrorForXPC_(void *a1, const char *a2, ...)
{
  return [a1 cleanseErrorForXPC:];
}

id objc_msgSend_cleanupAccounts(void *a1, const char *a2, ...)
{
  return _[a1 cleanupAccounts];
}

id objc_msgSend_cleanupDevices(void *a1, const char *a2, ...)
{
  return _[a1 cleanupDevices];
}

id objc_msgSend_cleanupRecords(void *a1, const char *a2, ...)
{
  return _[a1 cleanupRecords];
}

id objc_msgSend_clearAccountMetadata(void *a1, const char *a2, ...)
{
  return _[a1 clearAccountMetadata];
}

id objc_msgSend_clearAccountMetrics(void *a1, const char *a2, ...)
{
  return _[a1 clearAccountMetrics];
}

id objc_msgSend_clearAllFailureEvents_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clearAllFailureEvents:error:");
}

id objc_msgSend_clearAllFollowups_(void *a1, const char *a2, ...)
{
  return [a1 clearAllFollowups:];
}

id objc_msgSend_clearApplicationState_error_(void *a1, const char *a2, ...)
{
  return [a1 clearApplicationState:error:];
}

id objc_msgSend_clearApplicationState_logClient_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 clearApplicationState:logClient:completionBlock:];
}

id objc_msgSend_clearCachedPCSIdentities(void *a1, const char *a2, ...)
{
  return _[a1 clearCachedPCSIdentities];
}

id objc_msgSend_clearCachedPCSIdentity(void *a1, const char *a2, ...)
{
  return _[a1 clearCachedPCSIdentity];
}

id objc_msgSend_clearCoreFollowUp(void *a1, const char *a2, ...)
{
  return _[a1 clearCoreFollowUp];
}

id objc_msgSend_clearDataForPAT_dataStore_(void *a1, const char *a2, ...)
{
  return [a1 clearDataForPAT:dataStore:];
}

id objc_msgSend_clearDataForTLT_dataStore_(void *a1, const char *a2, ...)
{
  return [a1 clearDataForTLT:dataStore:];
}

id objc_msgSend_clearDataStore_(void *a1, const char *a2, ...)
{
  return [a1 clearDataStore:];
}

id objc_msgSend_clearDeviceSignatures_(void *a1, const char *a2, ...)
{
  return [a1 clearDeviceSignatures:];
}

id objc_msgSend_clearDiskApplicationKeyStore_error_(void *a1, const char *a2, ...)
{
  return [a1 clearDiskApplicationKeyStore:error];
}

id objc_msgSend_clearEligibilityOverrides_(void *a1, const char *a2, ...)
{
  return [a1 clearEligibilityOverrides:];
}

id objc_msgSend_clearEligibilityOverridesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clearEligibilityOverridesWithCompletionHandler:");
}

id objc_msgSend_clearFailureEvents(void *a1, const char *a2, ...)
{
  return _[a1 clearFailureEvents];
}

id objc_msgSend_clearFollowupTicket_uri_error_(void *a1, const char *a2, ...)
{
  return [a1 clearFollowupTicket:uri:error:];
}

id objc_msgSend_clearFollowups_error_(void *a1, const char *a2, ...)
{
  return [a1 clearFollowups:error];
}

id objc_msgSend_clearFollowupsByType_type_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clearFollowupsByType:type:error:");
}

id objc_msgSend_clearForEnvironmentChange(void *a1, const char *a2, ...)
{
  return _[a1 clearForEnvironmentChange];
}

id objc_msgSend_clearGossip(void *a1, const char *a2, ...)
{
  return _[a1 clearGossip];
}

id objc_msgSend_clearIDSCacheForUri_application_(void *a1, const char *a2, ...)
{
  return [a1 clearIDSCacheForUri:application:];
}

id objc_msgSend_clearLocalCloudState(void *a1, const char *a2, ...)
{
  return _[a1 clearLocalCloudState];
}

id objc_msgSend_clearOptInStateAndPushToCloud(void *a1, const char *a2, ...)
{
  return _[a1 clearOptInStateAndPushToCloud];
}

id objc_msgSend_clearOptInStateForURI_application_complete_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clearOptInStateForURI:application:complete:");
}

id objc_msgSend_clearOptInStateForURI_application_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clearOptInStateForURI:application:error:");
}

id objc_msgSend_clearPeerOverride_application_(void *a1, const char *a2, ...)
{
  return [a1 clearPeerOverride:application:];
}

id objc_msgSend_clearPeerState_uris_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clearPeerState:uris:error:");
}

id objc_msgSend_clearPendingFollowUpItems_(void *a1, const char *a2, ...)
{
  return [a1 clearPendingFollowUpItems:];
}

id objc_msgSend_clearPendingFollowUpItemsWithUniqueIdentifiers_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clearPendingFollowUpItemsWithUniqueIdentifiers:error:");
}

id objc_msgSend_clearReportOverridesWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clearReportOverridesWithCompletionHandler:");
}

id objc_msgSend_clearSelfFailureRelatedData_uri_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clearSelfFailureRelatedData:uri:error:");
}

id objc_msgSend_clearSelfTicketState_responseTime_(void *a1, const char *a2, ...)
{
  return [a1 clearSelfTicketState:x0 responseTime:x1];
}

id objc_msgSend_clearSelfValidationFollowups_uri_error_(void *a1, const char *a2, ...)
{
  return [a1 clearSelfValidationFollowups:uri:error:];
}

id objc_msgSend_clearState_(void *a1, const char *a2, ...)
{
  return [a1 clearState:];
}

id objc_msgSend_clearStateForApplication_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "clearStateForApplication:error:")];
}

id objc_msgSend_clearTapToRadarWithUnique_(void *a1, const char *a2, ...)
{
  return [a1 clearTapToRadarWithUnique:];
}

id objc_msgSend_clientData(void *a1, const char *a2, ...)
{
  return _[a1 clientData];
}

id objc_msgSend_clientDataArray(void *a1, const char *a2, ...)
{
  return _[a1 clientDataArray];
}

id objc_msgSend_clientDataHash(void *a1, const char *a2, ...)
{
  return _[a1 clientDataHash];
}

id objc_msgSend_clientDatas(void *a1, const char *a2, ...)
{
  return _[a1 clientDatas];
}

id objc_msgSend_clientLoggableDatas(void *a1, const char *a2, ...)
{
  return _[a1 clientLoggableDatas];
}

id objc_msgSend_clientRecordForAppVersion_clientDataHash_(void *a1, const char *a2, ...)
{
  return [a1 clientRecordForAppVersion:clientDataHash:];
}

id objc_msgSend_clientRecordsForHash_(void *a1, const char *a2, ...)
{
  return [a1 clientRecordsForHash:];
}

id objc_msgSend_close(void *a1, const char *a2, ...)
{
  return _[a1 close];
}

id objc_msgSend_closeDatabaseWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 closeDatabaseWithCompletionHandler:];
}

id objc_msgSend_cloudContainer(void *a1, const char *a2, ...)
{
  return _[a1 cloudContainer];
}

id objc_msgSend_cloudDeviceNeedUpdateWithPushToken_tbsRegistrationData_(void *a1, const char *a2, ...)
{
  return [a1 cloudDeviceNeedUpdateWithPushToken:tbsRegistrationData:];
}

id objc_msgSend_cloudDevices(void *a1, const char *a2, ...)
{
  return _[a1 cloudDevices];
}

id objc_msgSend_cloudFetchOperationWithDeps_initialFetch_userInteractive_reason_context_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "cloudFetchOperationWithDeps:initialFetch:userInteractive:reason:context:");
}

id objc_msgSend_cloudKitAccount_(void *a1, const char *a2, ...)
{
  return [a1 cloudKitAccount:];
}

id objc_msgSend_cloudKitAccountInfo(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitAccountInfo];
}

id objc_msgSend_cloudKitAccountTracker(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitAccountTracker];
}

id objc_msgSend_cloudKitZones(void *a1, const char *a2, ...)
{
  return _[a1 cloudKitZones];
}

id objc_msgSend_cloudPersistentStoreDescription_(void *a1, const char *a2, ...)
{
  return [a1 cloudPersistentStoreDescription];
}

id objc_msgSend_cloudRecords(void *a1, const char *a2, ...)
{
  return _[a1 cloudRecords];
}

id objc_msgSend_cloudkitAccountStateChange_to_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "cloudkitAccountStateChange:to:");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_columnCount(void *a1, const char *a2, ...)
{
  return _[a1 columnCount];
}

id objc_msgSend_columnNameAtColumn_(void *a1, const char *a2, ...)
{
  return [a1 columnNameAtColumn:];
}

id objc_msgSend_columnTypeAtColumn_(void *a1, const char *a2, ...)
{
  return [a1 columnTypeAtColumn:];
}

id objc_msgSend_combineLoggableDatasForUI_byAdding_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "combineLoggableDatasForUI:byAdding:");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return [a1 compare:];
}

id objc_msgSend_complete(void *a1, const char *a2, ...)
{
  return _[a1 complete];
}

id objc_msgSend_completeOperation(void *a1, const char *a2, ...)
{
  return _[a1 completeOperation];
}

id objc_msgSend_completed(void *a1, const char *a2, ...)
{
  return _[a1 completed];
}

id objc_msgSend_completedCurrentTarget(void *a1, const char *a2, ...)
{
  return _[a1 completedCurrentTarget];
}

id objc_msgSend_completionHandlerDidRunCondition(void *a1, const char *a2, ...)
{
  return _[a1 completionHandlerDidRunCondition];
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return [a1 componentsJoinedByString:];
}

id objc_msgSend_computeHashesForSalt_(void *a1, const char *a2, ...)
{
  return [a1 computeHashesForSalt:];
}

id objc_msgSend_computeSerializedSizeAsField_(void *a1, const char *a2, ...)
{
  return [a1 computeSerializedSizeAsField:];
}

id objc_msgSend_conditionChecksInFlight(void *a1, const char *a2, ...)
{
  return _[a1 conditionChecksInFlight];
}

id objc_msgSend_conditions(void *a1, const char *a2, ...)
{
  return _[a1 conditions];
}

id objc_msgSend_config(void *a1, const char *a2, ...)
{
  return _[a1 config];
}

id objc_msgSend_configApp(void *a1, const char *a2, ...)
{
  return _[a1 configApp];
}

id objc_msgSend_configBag(void *a1, const char *a2, ...)
{
  return _[a1 configBag];
}

id objc_msgSend_configBagFileName(void *a1, const char *a2, ...)
{
  return _[a1 configBagFileName];
}

id objc_msgSend_configBagRequest(void *a1, const char *a2, ...)
{
  return _[a1 configBagRequest];
}

id objc_msgSend_configBagURL(void *a1, const char *a2, ...)
{
  return _[a1 configBagURL];
}

id objc_msgSend_configurationExpired(void *a1, const char *a2, ...)
{
  return _[a1 configurationExpired];
}

id objc_msgSend_configurationStore(void *a1, const char *a2, ...)
{
  return _[a1 configurationStore];
}

id objc_msgSend_configure_(void *a1, const char *a2, ...)
{
  return [a1 configure:];
}

id objc_msgSend_configureFromNetwork_(void *a1, const char *a2, ...)
{
  return [a1 configureFromNetwork:];
}

id objc_msgSend_configureFromNetworkBagData_error_(void *a1, const char *a2, ...)
{
  return [a1 configureFromNetworkBagData:error];
}

id objc_msgSend_configureFromNetworkWithFetcher_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "configureFromNetworkWithFetcher:completionHandler:");
}

id objc_msgSend_configureGroup(void *a1, const char *a2, ...)
{
  return _[a1 configureGroup];
}

id objc_msgSend_configureQueue(void *a1, const char *a2, ...)
{
  return _[a1 configureQueue];
}

id objc_msgSend_configureWithClient_applicationHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 configureWithClient:x0 applicationHandler:x1 completionHandler:x2];
}

id objc_msgSend_configureWithClient_force_applicationHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "configureWithClient:force:applicationHandler:completionHandler:");
}

id objc_msgSend_configureWithClient_ignoreCachedKeys_dataStore_contextStore_applicationHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "configureWithClient:ignoreCachedKeys:dataStore:contextStore:applicationHandler:completionHandler:");
}

id objc_msgSend_configureWithDisk_(void *a1, const char *a2, ...)
{
  return [a1 configureWithDisk:];
}

id objc_msgSend_configureWithDisk_contextStore_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "configureWithDisk:contextStore:error:");
}

id objc_msgSend_configureWithFetcher_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 configureWithFetcher:completionHandler:];
}

id objc_msgSend_configured(void *a1, const char *a2, ...)
{
  return _[a1 configured];
}

id objc_msgSend_conflictingObjects(void *a1, const char *a2, ...)
{
  return _[a1 conflictingObjects];
}

id objc_msgSend_consistencyMaxProofs(void *a1, const char *a2, ...)
{
  return _[a1 consistencyMaxProofs];
}

id objc_msgSend_consistencyProofURI(void *a1, const char *a2, ...)
{
  return _[a1 consistencyProofURI];
}

id objc_msgSend_consistencyVerified(void *a1, const char *a2, ...)
{
  return _[a1 consistencyVerified];
}

id objc_msgSend_consumeContactsChangeHistory(void *a1, const char *a2, ...)
{
  return _[a1 consumeContactsChangeHistory];
}

id objc_msgSend_contact(void *a1, const char *a2, ...)
{
  return _[a1 contact];
}

id objc_msgSend_contactExternalIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 contactExternalIdentifier];
}

id objc_msgSend_contactExternalURI(void *a1, const char *a2, ...)
{
  return _[a1 contactExternalURI];
}

id objc_msgSend_contactIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 contactIdentifier];
}

id objc_msgSend_contactStore(void *a1, const char *a2, ...)
{
  return _[a1 contactStore];
}

id objc_msgSend_contacts(void *a1, const char *a2, ...)
{
  return _[a1 contacts];
}

id objc_msgSend_container(void *a1, const char *a2, ...)
{
  return _[a1 container];
}

id objc_msgSend_containingMessageClass(void *a1, const char *a2, ...)
{
  return _[a1 containingMessageClass];
}

id objc_msgSend_containingType(void *a1, const char *a2, ...)
{
  return _[a1 containingType];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return [a1 containsObject:];
}

id objc_msgSend_contentsAsString(void *a1, const char *a2, ...)
{
  return _[a1 contentsAsString];
}

id objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(void *a1, const char *a2, ...)
{
  return [a1 contentsOfDirectoryAtURL:x0 includingPropertiesForKeys:x1 options:x2 error:x3];
}

id objc_msgSend_context(void *a1, const char *a2, ...)
{
  return _[a1 context];
}

id objc_msgSend_contextForApplication_logClient_fetchState_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 contextForApplication:logClient:fetchState:completionHandler:];
}

id objc_msgSend_contextRefCount(void *a1, const char *a2, ...)
{
  return _[a1 contextRefCount];
}

id objc_msgSend_contextShouldGossip(void *a1, const char *a2, ...)
{
  return _[a1 contextShouldGossip];
}

id objc_msgSend_contextStore(void *a1, const char *a2, ...)
{
  return _[a1 contextStore];
}

id objc_msgSend_contexts(void *a1, const char *a2, ...)
{
  return _[a1 contexts];
}

id objc_msgSend_controlObject_(void *a1, const char *a2, ...)
{
  return [a1 controlObject:];
}

id objc_msgSend_controller(void *a1, const char *a2, ...)
{
  return _[a1 controller];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyCachedPCSIdentity(void *a1, const char *a2, ...)
{
  return _[a1 copyCachedPCSIdentity];
}

id objc_msgSend_copyCachedPCSIdentityForApplication_(void *a1, const char *a2, ...)
{
  return [a1 copyCachedPCSIdentityForApplication:];
}

id objc_msgSend_copyConfigurationBag_(void *a1, const char *a2, ...)
{
  return [a1 copyConfigurationBag:];
}

id objc_msgSend_copyFieldsInto_zone_descriptor_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyFieldsInto:zone:descriptor:");
}

id objc_msgSend_copyKeyStoreState(void *a1, const char *a2, ...)
{
  return _[a1 copyKeyStoreState];
}

id objc_msgSend_copyManagedObject_(void *a1, const char *a2, ...)
{
  return [a1 copyManagedObject:];
}

id objc_msgSend_copyMetadata(void *a1, const char *a2, ...)
{
  return _[a1 copyMetadata];
}

id objc_msgSend_copyPCSIdentitySet_(void *a1, const char *a2, ...)
{
  return [a1 copyPCSIdentitySet:];
}

id objc_msgSend_copyState(void *a1, const char *a2, ...)
{
  return _[a1 copyState];
}

id objc_msgSend_copyStatistics_(void *a1, const char *a2, ...)
{
  return [a1 copyStatistics:];
}

id objc_msgSend_copyTltBag(void *a1, const char *a2, ...)
{
  return _[a1 copyTltBag];
}

id objc_msgSend_copyTrustedKeysFromDataArray_error_(void *a1, const char *a2, ...)
{
  return [a1 copyTrustedKeysFromDataArray:x0 error:x1];
}

id objc_msgSend_copyVRFKeyFromConfigProof_error_(void *a1, const char *a2, ...)
{
  return [a1 copyVRFKeyFromConfigProof:error];
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return [a1 copyWithZone:];
}

id objc_msgSend_coreDataInitialDelaySync(void *a1, const char *a2, ...)
{
  return _[a1 coreDataInitialDelaySync];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return [a1 countByEnumeratingWithState:objects:count:];
}

id objc_msgSend_countForFetchRequest_error_(void *a1, const char *a2, ...)
{
  return [a1 countForFetchRequest:error];
}

id objc_msgSend_countOfFields(void *a1, const char *a2, ...)
{
  return _[a1 countOfFields];
}

id objc_msgSend_countOutstandingRequestsForApplication_error_(void *a1, const char *a2, ...)
{
  return [a1 countOutstandingRequestsForApplication:error:];
}

id objc_msgSend_countOutstandingSMHsForApplication_error_(void *a1, const char *a2, ...)
{
  return [a1 countOutstandingSMHsForApplication:error:];
}

id objc_msgSend_countOutstandingSMTsForApplication_error_(void *a1, const char *a2, ...)
{
  return [a1 countOutstandingSMTsForApplication:error:];
}

id objc_msgSend_countOutstandingSTHsForApplication_error_(void *a1, const char *a2, ...)
{
  return [a1 countOutstandingSTHsForApplication:error];
}

id objc_msgSend_countOutstandingVerificationsForApplication_error_(void *a1, const char *a2, ...)
{
  return [a1 countOutstandingVerificationsForApplication:error:];
}

id objc_msgSend_countTotalRequestsForApplication_error_(void *a1, const char *a2, ...)
{
  return [a1 countTotalRequestsForApplication:error:];
}

id objc_msgSend_countTotalSMTsForApplication_error_(void *a1, const char *a2, ...)
{
  return [a1 countTotalSMTsForApplication:error:];
}

id objc_msgSend_countTotalSTHsForApplication_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "countTotalSTHsForApplication:error:");
}

id objc_msgSend_countTotalVerificationsForApplication_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "countTotalVerificationsForApplication:error:")];
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return _[a1 countryCode];
}

id objc_msgSend_countryCodeMap(void *a1, const char *a2, ...)
{
  return _[a1 countryCodeMap];
}

id objc_msgSend_createApplicationKeyStore_keyStoreData_dataStore_contextStore_error_(void *a1, const char *a2, ...)
{
  return [a1 createApplicationKeyStore:x0 keyStoreData:x1 dataStore:x2 contextStore:x3 error:x4];
}

id objc_msgSend_createApplicationKeyStore_keyStoreResponse_dataStore_contextStore_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createApplicationKeyStore:keyStoreResponse:dataStore:contextStore:error:");
}

id objc_msgSend_createAuthToken_authToken_(void *a1, const char *a2, ...)
{
  return [a1 createAuthToken:x0, x1];
}

id objc_msgSend_createAuthenticatedForegroundSession(void *a1, const char *a2, ...)
{
  return _[a1 createAuthenticatedForegroundSession];
}

id objc_msgSend_createAuthkitSession(void *a1, const char *a2, ...)
{
  return _[a1 createAuthkitSession];
}

id objc_msgSend_createBatchQuery(void *a1, const char *a2, ...)
{
  return _[a1 createBatchQuery];
}

id objc_msgSend_createCACertificatesArray_error_(void *a1, const char *a2, ...)
{
  return [a1 createCACertificatesArray:error];
}

id objc_msgSend_createChainOfErrorsFromRequestFailures_(void *a1, const char *a2, ...)
{
  return [a1 createChainOfErrorsFromRequestFailures:];
}

id objc_msgSend_createChainOfErrorsFromSMTFailures_(void *a1, const char *a2, ...)
{
  return [a1 createChainOfErrorsFromSMTFailures:];
}

id objc_msgSend_createChainOfErrorsFromSTHFailures_type_(void *a1, const char *a2, ...)
{
  return [a1 createChainOfErrorsFromSTHFailures:type:];
}

id objc_msgSend_createContextForApplication_dataStore_staticKeyStore_logClient_stateMachine_(void *a1, const char *a2, ...)
{
  return [a1 createContextForApplication:dataStore:staticKeyStore:logClient:stateMachine:];
}

id objc_msgSend_createContextForTLT_staticKeyStore_logClient_stateMachine_(void *a1, const char *a2, ...)
{
  return [a1 createContextForTLT:x0 staticKeyStore:x1 logClient:x2 stateMachine:x3];
}

id objc_msgSend_createContexts_(void *a1, const char *a2, ...)
{
  return [a1 createContexts:];
}

id objc_msgSend_createDataStores_followup_error_(void *a1, const char *a2, ...)
{
  return [a1 createDataStores:x0 followup:x1 error:x2];
}

id objc_msgSend_createDirectoryAtURL_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return [a1 createDirectoryAtURL:withIntermediateDirectories:attributes:error:];
}

id objc_msgSend_createDisableTransparencyFollowup_infoLink_(void *a1, const char *a2, ...)
{
  return [a1 createDisableTransparencyFollowup:infoLink:];
}

id objc_msgSend_createDownloadRecord_moc_application_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createDownloadRecord:moc:application:");
}

id objc_msgSend_createErrorFromRequestFailure_underlyingError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createErrorFromRequestFailure:underlyingError:")];
}

id objc_msgSend_createErrorFromSMTFailure_underlyingError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createErrorFromSMTFailure:underlyingError:")];
}

id objc_msgSend_createErrorFromSTHFailure_underlyingError_(void *a1, const char *a2, ...)
{
  return [a1 createErrorFromSTHFailure:x0 underlyingError:x1];
}

id objc_msgSend_createErrorFromURLResonse_data_allowEmptyData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createErrorFromURLResonse:data:allowEmptyData:error:");
}

id objc_msgSend_createFailureEvent_application_optInServer_(void *a1, const char *a2, ...)
{
  return [a1 createFailureEvent:x0 application:x1 optInServer:x2];
}

id objc_msgSend_createFetchRecord(void *a1, const char *a2, ...)
{
  return _[a1 createFetchRecord];
}

id objc_msgSend_createFetchRecordForRequestData_request_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createFetchRecordForRequestData:request:error:");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return [a1 createFileAtPath:x0 contents:x1 attributes:x2];
}

id objc_msgSend_createFollowupTicket_uri_startTime_error_(void *a1, const char *a2, ...)
{
  return [a1 createFollowupTicket:uri:startTime:error:];
}

id objc_msgSend_createGETRequestForURL_timeout_additionalHeaders_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createGETRequestForURL:timeout:additionalHeaders:error:");
}

id objc_msgSend_createGETRequestForURL_timeout_error_(void *a1, const char *a2, ...)
{
  return [a1 createGETRequestForURL:timeout:error:];
}

id objc_msgSend_createIDSKTVerification_application_accountKey_idsResponseTime_serverLoggableDatas_optedIn_type_syncedLoggableDatas_verificationId_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createIDSKTVerification:application:accountKey:idsResponseTime:serverLoggableDatas:optedIn:type:syncedLoggableDatas:verificationId:error:");
}

id objc_msgSend_createIDSKTVerification_application_verificationInfo_type_syncedLoggableDatas_verificationId_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createIDSKTVerification:application:verificationInfo:type:syncedLoggableDatas:verificationId:error:");
}

id objc_msgSend_createIDSVerificationID_verification_(void *a1, const char *a2, ...)
{
  return [a1 createIDSVerificationID:x0 verification:x1];
}

id objc_msgSend_createIdentityForSet_roll_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 createIdentityForSet:roll:completionBlock:];
}

id objc_msgSend_createKTRequestID_request_(void *a1, const char *a2, ...)
{
  return [a1 createKTRequestID:request];
}

id objc_msgSend_createManagedObject_uri_serverHint_error_(void *a1, const char *a2, ...)
{
  return [a1 createManagedObject:uri:serverHint:error:];
}

id objc_msgSend_createManagedObjectWithError_(void *a1, const char *a2, ...)
{
  return [a1 createManagedObjectWithError:];
}

id objc_msgSend_createManateeIdentity_service_complete_(void *a1, const char *a2, ...)
{
  return [a1 createManateeIdentity:service:complete:];
}

id objc_msgSend_createMapHead_application_logBeginTime_logHeadHash_logType_revision_populating_gossip_(void *a1, const char *a2, ...)
{
  return [a1 createMapHead:x0 application:x1 logBeginTime:x2 logHeadHash:x3 logType:x4 revision:x5 populating:x6 gossip:x7];
}

id objc_msgSend_createMutation_application_uri_mutationMs_spkiHash_receiptTime_(void *a1, const char *a2, ...)
{
  return [a1 createMutation:x0 application:x1 uri:x2 mutationMs:x3 spkiHash:x4 receiptTime:x5];
}

id objc_msgSend_createOperationToFinishAttempt_(void *a1, const char *a2, ...)
{
  return [a1 createOperationToFinishAttempt:];
}

id objc_msgSend_createOptOutFollowup_infoLink_(void *a1, const char *a2, ...)
{
  return [a1 createOptOutFollowup:infoLink:];
}

id objc_msgSend_createPeerIDSKTVerification_application_verificationInfo_error_(void *a1, const char *a2, ...)
{
  return [a1 createPeerIDSKTVerification:application:verificationInfo:error:];
}

id objc_msgSend_createPeerOverrides(void *a1, const char *a2, ...)
{
  return _[a1 createPeerOverrides];
}

id objc_msgSend_createPeerState_application_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createPeerState:application:error:");
}

id objc_msgSend_createQueryRequestForKTRequest_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createQueryRequestForKTRequest:error:");
}

id objc_msgSend_createRecordFromLoggableData_application_(void *a1, const char *a2, ...)
{
  return [a1 createRecordFromLoggableData:application:];
}

id objc_msgSend_createRequest(void *a1, const char *a2, ...)
{
  return _[a1 createRequest];
}

id objc_msgSend_createRequestFailure(void *a1, const char *a2, ...)
{
  return _[a1 createRequestFailure];
}

id objc_msgSend_createRequestForAuthentication_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 createRequestForAuthentication:completionHandler:];
}

id objc_msgSend_createRequestForAuthentication_fetchAuthNow_timeShift_additionalHeaders_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 createRequestForAuthentication:x0 fetchAuthNow:x1 timeShift:x2 additionalHeaders:x3 completionHandler:x4];
}

id objc_msgSend_createRequestForAuthentication_fetchAuthNow_timeShift_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 createRequestForAuthentication:x0 fetchAuthNow:x1 timeShift:x2 completionHandler:x3];
}

id objc_msgSend_createRequestForURL_timeout_contents_authentication_fetchAuthNow_timeShift_additionalHeaders_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 createRequestForURL:x0 timeout:x1 contents:x2 authentication:x3 fetchAuthNow:x4 timeShift:x5 additionalHeaders:x6 completionHandler:x7];
}

id objc_msgSend_createRequestWithUri_application_accountKey_serverData_syncedData_idsResponseTime_queryRequest_queryResponse_responseDate_type_clientId_error_(void *a1, const char *a2, ...)
{
  return [a1 createRequestWithUri:x0 application:x1 accountKey:x2 serverData:x3 syncedData:x4 idsResponseTime:x5 queryRequest:x6 queryResponse:x7 responseDate:x8 type:x9 clientId:x10 error:x11];
}

id objc_msgSend_createRequestWithUri_application_accountKey_serverData_syncedData_queryRequest_queryResponse_type_clientId_error_(void *a1, const char *a2, ...)
{
  return [a1 createRequestWithUri:x0 application:x1 accountKey:x2 serverData:x3 syncedData:x4 queryRequest:x5 queryResponse:x6 type:x7 clientId:x8 error:x9];
}

id objc_msgSend_createSMTFollowup_infoLink_(void *a1, const char *a2, ...)
{
  return [a1 createSMTFollowup:infoLink:];
}

id objc_msgSend_createSTHFollowup_infoLink_(void *a1, const char *a2, ...)
{
  return [a1 createSTHFollowup:infoLink:];
}

id objc_msgSend_createSelfFollowup_infoLink_(void *a1, const char *a2, ...)
{
  return [a1 createSelfFollowup:infoLink];
}

id objc_msgSend_createSelfValidationState_uri_error_(void *a1, const char *a2, ...)
{
  return [a1 createSelfValidationState:uri:error:];
}

id objc_msgSend_createSignedMutationTimestampsFailure(void *a1, const char *a2, ...)
{
  return _[a1 createSignedMutationTimestampsFailure];
}

id objc_msgSend_createSignedTreeHeadFailure(void *a1, const char *a2, ...)
{
  return _[a1 createSignedTreeHeadFailure];
}

id objc_msgSend_createSingleQuery(void *a1, const char *a2, ...)
{
  return _[a1 createSingleQuery];
}

id objc_msgSend_createSingleQuery_backgroundOpId_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createSingleQuery:backgroundOpId:error:");
}

id objc_msgSend_createSuccesfulCKFetchDependency(void *a1, const char *a2, ...)
{
  return _[a1 createSuccesfulCKFetchDependency];
}

id objc_msgSend_createTLTApplicationPublicKeyStore(void *a1, const char *a2, ...)
{
  return _[a1 createTLTApplicationPublicKeyStore];
}

id objc_msgSend_createTLTResetFollowup_infoLink_(void *a1, const char *a2, ...)
{
  return [a1 createTLTResetFollowup:infoLink:];
}

id objc_msgSend_createTransparentDataFromQueryInfo_error_(void *a1, const char *a2, ...)
{
  return [a1 createTransparentDataFromQueryInfo:x0 error:x1];
}

id objc_msgSend_createTreeHead(void *a1, const char *a2, ...)
{
  return _[a1 createTreeHead];
}

id objc_msgSend_createTreeHead_isMapHead_application_logBeginTime_logHeadHash_logType_revision_gossip_(void *a1, const char *a2, ...)
{
  return [a1 createTreeHead:x0 isMapHead:x1 application:x2 logBeginTime:x3 logHeadHash:x4 logType:x5 revision:x6 gossip:x7];
}

id objc_msgSend_createTreeRollFollowup_infoLink_(void *a1, const char *a2, ...)
{
  return [a1 createTreeRollFollowup:infoLink:];
}

id objc_msgSend_createTrustedSthKeyStoreFromProofSPKI_signingKeysMap_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createTrustedSthKeyStoreFromProofSPKI:signingKeysMap:error:");
}

id objc_msgSend_createdAt(void *a1, const char *a2, ...)
{
  return _[a1 createdAt];
}

id objc_msgSend_creationDate(void *a1, const char *a2, ...)
{
  return _[a1 creationDate];
}

id objc_msgSend_creationGroup(void *a1, const char *a2, ...)
{
  return _[a1 creationGroup];
}

id objc_msgSend_creationQueue(void *a1, const char *a2, ...)
{
  return _[a1 creationQueue];
}

id objc_msgSend_creationTime(void *a1, const char *a2, ...)
{
  return _[a1 creationTime];
}

id objc_msgSend_credential(void *a1, const char *a2, ...)
{
  return _[a1 credential];
}

id objc_msgSend_credentialItemForKey_(void *a1, const char *a2, ...)
{
  return [a1 credentialItemForKey:];
}

id objc_msgSend_currentAccountOptInState(void *a1, const char *a2, ...)
{
  return _[a1 currentAccountOptInState];
}

id objc_msgSend_currentCKAccountInfo(void *a1, const char *a2, ...)
{
  return _[a1 currentCKAccountInfo];
}

id objc_msgSend_currentCKFetch(void *a1, const char *a2, ...)
{
  return _[a1 currentCKFetch];
}

id objc_msgSend_currentConditions(void *a1, const char *a2, ...)
{
  return _[a1 currentConditions];
}

id objc_msgSend_currentDelay(void *a1, const char *a2, ...)
{
  return _[a1 currentDelay];
}

id objc_msgSend_currentEnvironment(void *a1, const char *a2, ...)
{
  return _[a1 currentEnvironment];
}

id objc_msgSend_currentFlags(void *a1, const char *a2, ...)
{
  return _[a1 currentFlags];
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _[a1 currentHandler];
}

id objc_msgSend_currentHistoryToken(void *a1, const char *a2, ...)
{
  return _[a1 currentHistoryToken];
}

id objc_msgSend_currentItemPointerModificationTime(void *a1, const char *a2, ...)
{
  return _[a1 currentItemPointerModificationTime];
}

id objc_msgSend_currentPublicID(void *a1, const char *a2, ...)
{
  return _[a1 currentPublicID];
}

id objc_msgSend_currentReachability(void *a1, const char *a2, ...)
{
  return _[a1 currentReachability];
}

id objc_msgSend_currentRequest(void *a1, const char *a2, ...)
{
  return _[a1 currentRequest];
}

id objc_msgSend_currentSequenceId_(void *a1, const char *a2, ...)
{
  return [a1 currentSequenceId:];
}

id objc_msgSend_currentServerOptInFetch(void *a1, const char *a2, ...)
{
  return _[a1 currentServerOptInFetch];
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _[a1 currentState];
}

id objc_msgSend_currentStates(void *a1, const char *a2, ...)
{
  return _[a1 currentStates];
}

id objc_msgSend_currentTarget(void *a1, const char *a2, ...)
{
  return _[a1 currentTarget];
}

id objc_msgSend_currentTreeEpochBeginDate(void *a1, const char *a2, ...)
{
  return _[a1 currentTreeEpochBeginDate];
}

id objc_msgSend_daemonContext(void *a1, const char *a2, ...)
{
  return _[a1 daemonContext];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataFromHistoryToken_(void *a1, const char *a2, ...)
{
  return [a1 dataFromHistoryToken:];
}

id objc_msgSend_dataStore(void *a1, const char *a2, ...)
{
  return _[a1 dataStore];
}

id objc_msgSend_dataStoreController(void *a1, const char *a2, ...)
{
  return _[a1 dataStoreController];
}

id objc_msgSend_dataStoreFailedToLoad_(void *a1, const char *a2, ...)
{
  return [a1 dataStoreFailedToLoad:];
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 dataTaskWithRequest:];
}

id objc_msgSend_dataType(void *a1, const char *a2, ...)
{
  return _[a1 dataType];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return [a1 dataUsingEncoding:];
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 dataWithBytes:];
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return [a1 dataWithContentsOfURL:];
}

id objc_msgSend_dataWithContentsOfURL_options_error_(void *a1, const char *a2, ...)
{
  return [a1 dataWithContentsOfURL:options:error:];
}

id objc_msgSend_dataWithData_(void *a1, const char *a2, ...)
{
  return [a1 dataWithData:];
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithLength_(void *a1, const char *a2, ...)
{
  return [a1 dataWithLength:];
}

id objc_msgSend_databaseObject(void *a1, const char *a2, ...)
{
  return _[a1 databaseObject];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return [a1 dateByAddingTimeInterval:];
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return [a1 dateFromString:];
}

id objc_msgSend_datePropertyForKey_(void *a1, const char *a2, ...)
{
  return [a1 datePropertyForKey:];
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeInterval:x0 sinceDate:x1];
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSince1970:];
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSinceNow:];
}

id objc_msgSend_dateWithTimeIntervalSinceReferenceDate_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSinceReferenceDate:];
}

id objc_msgSend_db(void *a1, const char *a2, ...)
{
  return _[a1 db];
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_decodeAndVerifyOptInOutResponse_optInOutState_optInOutTime_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decodeAndVerifyOptInOutResponse:optInOutState:optInOutTime:error:");
}

id objc_msgSend_decodeAndVerifySMT_optInOutState_optInOutTime_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decodeAndVerifySMT:optInOutState:optInOutTime:error:");
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeBoolForKey:];
}

id objc_msgSend_decodeDoubleForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeDoubleForKey:];
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeIntegerForKey:];
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeObjectOfClasses_forKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeObjectOfClasses:forKey:];
}

id objc_msgSend_decodePublicKeyInfo_error_(void *a1, const char *a2, ...)
{
  return [a1 decodePublicKeyInfo:error];
}

id objc_msgSend_decodeTopLevelObjectOfClasses_forKey_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decodeTopLevelObjectOfClasses:forKey:error:")
}

id objc_msgSend_deepCopyWithZone_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deepCopyWithZone:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultNetworkTimeout(void *a1, const char *a2, ...)
{
  return _[a1 defaultNetworkTimeout];
}

id objc_msgSend_defaultQueryCacheTimeout(void *a1, const char *a2, ...)
{
  return _[a1 defaultQueryCacheTimeout];
}

id objc_msgSend_defaultSelfFollowupTicketLifetime(void *a1, const char *a2, ...)
{
  return _[a1 defaultSelfFollowupTicketLifetime];
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultSessionConfiguration];
}

id objc_msgSend_defaultValue(void *a1, const char *a2, ...)
{
  return _[a1 defaultValue];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_delete_onMOC_(void *a1, const char *a2, ...)
{
  return [a1 delete:onMOC:];
}

id objc_msgSend_deleteCompletedSingleQueryForUris_application_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deleteCompletedSingleQueryForUris:application:error:");
}

id objc_msgSend_deleteContact_contactExternalURI_(void *a1, const char *a2, ...)
{
  return [a1 deleteContact:contactExternalURI:];
}

id objc_msgSend_deleteDownloadId_(void *a1, const char *a2, ...)
{
  return [a1 deleteDownloadId:];
}

id objc_msgSend_deleteDownloadRecordById_error_(void *a1, const char *a2, ...)
{
  return [a1 deleteDownloadRecordById:x0 error:&x1];
}

id objc_msgSend_deleteDownloadRecords_error_(void *a1, const char *a2, ...)
{
  return [a1 deleteDownloadRecords:error];
}

id objc_msgSend_deleteFile_inDirectory_error_(void *a1, const char *a2, ...)
{
  return [a1 deleteFile:x0 inDirectory:x1 error:x2];
}

id objc_msgSend_deleteMarkedEntries_(void *a1, const char *a2, ...)
{
  return [a1 deleteMarkedEntries:];
}

id objc_msgSend_deleteNonRecentVerificationsForApplication_error_(void *a1, const char *a2, ...)
{
  return [a1 deleteNonRecentVerificationsForApplication:error:];
}

id objc_msgSend_deleteObject_(void *a1, const char *a2, ...)
{
  return [a1 deleteObject:];
}

id objc_msgSend_deleteObjectSet_(void *a1, const char *a2, ...)
{
  return [a1 deleteObjectSet:];
}

id objc_msgSend_deleteOptInIntentForApplication_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deleteOptInIntentForApplication:error:");
}

id objc_msgSend_deleteSMT_error_(void *a1, const char *a2, ...)
{
  return [a1 deleteSMT:error];
}

id objc_msgSend_deleteSMTsWithSPKINotIn_application_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deleteSMTsWithSPKINotIn:application:error:");
}

id objc_msgSend_deleteSTHs_logBeginMsLessThan_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deleteSTHs:logBeginMsLessThan:error:");
}

id objc_msgSend_deleteServerRPCs_error_(void *a1, const char *a2, ...)
{
  return [a1 deleteServerRPCs:error];
}

id objc_msgSend_deleteStaticKey_error_(void *a1, const char *a2, ...)
{
  return [a1 deleteStaticKey:error:];
}

id objc_msgSend_deleteStaticKeyByContactExternalURI_error_(void *a1, const char *a2, ...)
{
  return [a1 deleteStaticKeyByContactExternalURI:error:];
}

id objc_msgSend_deleteStaticKeyByContactIdentifier_error_(void *a1, const char *a2, ...)
{
  return [a1 deleteStaticKeyByContactIdentifier:x0 error:x1];
}

id objc_msgSend_deliveryQueue(void *a1, const char *a2, ...)
{
  return _[a1 deliveryQueue];
}

id objc_msgSend_dependOnBeforeGroupFinished_(void *a1, const char *a2, ...)
{
  return [a1 dependOnBeforeGroupFinished:];
}

id objc_msgSend_dependencies(void *a1, const char *a2, ...)
{
  return _[a1 dependencies];
}

id objc_msgSend_dependenciesDescriptionError(void *a1, const char *a2, ...)
{
  return _[a1 dependenciesDescriptionError];
}

id objc_msgSend_deps(void *a1, const char *a2, ...)
{
  return _[a1 deps];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptionError(void *a1, const char *a2, ...)
{
  return _[a1 descriptionError];
}

id objc_msgSend_descriptionErrorCode(void *a1, const char *a2, ...)
{
  return _[a1 descriptionErrorCode];
}

id objc_msgSend_descriptionInternal_(void *a1, const char *a2, ...)
{
  return [a1 descriptionInternal:];
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return _[a1 descriptor];
}

id objc_msgSend_deserializeLoggableDatas_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deserializeLoggableDatas:error:");
}

id objc_msgSend_deserializeNSError_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deserializeNSError:error:");
}

id objc_msgSend_deserializeServerLoggableDatas_loggableDatas_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deserializeServerLoggableDatas:loggableDatas:error:");
}

id objc_msgSend_deserializeSyncedLoggableDatas_loggableDatas_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deserializeSyncedLoggableDatas:loggableDatas:error:");
}

id objc_msgSend_destroyPersistentStoreAtURL_withType_options_error_(void *a1, const char *a2, ...)
{
  return [a1 destroyPersistentStoreAtURL:withType:options:error:];
}

id objc_msgSend_detailsAction_eventId_infoLink_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "detailsAction:eventId:infoLink:");
}

id objc_msgSend_detectEpochChangeAndResetData_patLogBeginningMs_mapStillPopulating_dataStore_(void *a1, const char *a2, ...)
{
  return [a1 detectEpochChangeAndResetData:x0, x1, x2, x3];
}

id objc_msgSend_detectResetForPAT_(void *a1, const char *a2, ...)
{
  return [a1 detectResetForPAT:];
}

id objc_msgSend_detectResetForTLT_(void *a1, const char *a2, ...)
{
  return [a1 detectResetForTLT:];
}

id objc_msgSend_deviceForDeviceIdHash_(void *a1, const char *a2, ...)
{
  return [a1 deviceForDeviceIdHash:];
}

id objc_msgSend_deviceID(void *a1, const char *a2, ...)
{
  return _[a1 deviceID];
}

id objc_msgSend_deviceIDHash(void *a1, const char *a2, ...)
{
  return _[a1 deviceIDHash];
}

id objc_msgSend_deviceIdHash(void *a1, const char *a2, ...)
{
  return _[a1 deviceIdHash];
}

id objc_msgSend_deviceIdentityIssuerCert_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deviceIdentityIssuerCert:completionHandler:")];
}

id objc_msgSend_deviceInformation(void *a1, const char *a2, ...)
{
  return _[a1 deviceInformation];
}

id objc_msgSend_deviceList(void *a1, const char *a2, ...)
{
  return _[a1 deviceList];
}

id objc_msgSend_deviceListWithContext_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deviceListWithContext:completion:");
}

id objc_msgSend_devicePlatform(void *a1, const char *a2, ...)
{
  return _[a1 devicePlatform];
}

id objc_msgSend_deviceToDeviceEncryptionAvailability(void *a1, const char *a2, ...)
{
  return _[a1 deviceToDeviceEncryptionAvailability];
}

id objc_msgSend_deviceUserAgent(void *a1, const char *a2, ...)
{
  return _[a1 deviceUserAgent];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _[a1 devices];
}

id objc_msgSend_devicesArray(void *a1, const char *a2, ...)
{
  return _[a1 devicesArray];
}

id objc_msgSend_dew(void *a1, const char *a2, ...)
{
  return _[a1 dew];
}

id objc_msgSend_dewConfig(void *a1, const char *a2, ...)
{
  return _[a1 dewConfig];
}

id objc_msgSend_diagnosticError_depth_(void *a1, const char *a2, ...)
{
  return [a1 diagnosticError:x0 depth:x1];
}

id objc_msgSend_diagnosticsJsonDictionary(void *a1, const char *a2, ...)
{
  return _[a1 diagnosticsJsonDictionary];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithCapacity:];
}

id objc_msgSend_dictionaryWithContentsOfURL_error_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithContentsOfURL:error:];
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObject:forKey:];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjects:forKeys:count:];
}

id objc_msgSend_didChangeValueForKey_(void *a1, const char *a2, ...)
{
  return [a1 didChangeValueForKey:];
}

id objc_msgSend_didUpdateStaticKeyStore_application_(void *a1, const char *a2, ...)
{
  return [a1 didUpdateStaticKeyStore:application:];
}

id objc_msgSend_digits(void *a1, const char *a2, ...)
{
  return _[a1 digits];
}

id objc_msgSend_directory(void *a1, const char *a2, ...)
{
  return _[a1 directory];
}

id objc_msgSend_directorySizeInKB_(void *a1, const char *a2, ...)
{
  return [a1 directorySizeInKB:];
}

id objc_msgSend_disableCacheHitsForUris_application_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "disableCacheHitsForUris:application:error:");
}

id objc_msgSend_disableKTSyncabledKVSStore(void *a1, const char *a2, ...)
{
  return _[a1 disableKTSyncabledKVSStore];
}

id objc_msgSend_diskStoreDictionary(void *a1, const char *a2, ...)
{
  return _[a1 diskStoreDictionary];
}

id objc_msgSend_dismissFailureAfterSeenPeriod(void *a1, const char *a2, ...)
{
  return _[a1 dismissFailureAfterSeenPeriod];
}

id objc_msgSend_dispatchToQueue_block_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "dispatchToQueue:block:");
}

id objc_msgSend_dnc(void *a1, const char *a2, ...)
{
  return _[a1 dnc];
}

id objc_msgSend_doFixupOperation(void *a1, const char *a2, ...)
{
  return _[a1 doFixupOperation];
}

id objc_msgSend_doKTResultWithAnalyticsForEventName_error_block_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "doKTResultWithAnalyticsForEventName:error:block:");
}

id objc_msgSend_doKTResultWithAnalyticsForEventName_validateType_error_block_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "doKTResultWithAnalyticsForEventName:validateType:error:block:");
}

id objc_msgSend_doSimpleStateMachineRPC_op_sourceStates_reply_(void *a1, const char *a2, ...)
{
  return [a1 doSimpleStateMachineRPC:op:sourceStates:reply:];
}

id objc_msgSend_doWatchedStateMachineRPC_sourceStates_path_reply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "doWatchedStateMachineRPC:sourceStates:path:reply:");
}

id objc_msgSend_doWatchedStateMachineRPC_sourceStates_path_transitionOp_reply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "doWatchedStateMachineRPC:sourceStates:path:transitionOp:reply:");
}

id objc_msgSend_doWithAnalyticsForEventName_error_block_(void *a1, const char *a2, ...)
{
  return [a1 doWithAnalyticsForEventName:error:block:];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_doubleAtColumn_(void *a1, const char *a2, ...)
{
  return [a1 doubleAtColumn:];
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return [a1 doubleForKey:];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadConsistencyProofRequest_lastVerifiedRevision_application_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "downloadConsistencyProofRequest:lastVerifiedRevision:application:error:");
}

id objc_msgSend_downloadId(void *a1, const char *a2, ...)
{
  return _[a1 downloadId];
}

id objc_msgSend_downloadInclusionProofChunk_application_downloadType_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "downloadInclusionProofChunk:application:downloadType:error:");
}

id objc_msgSend_downloadInclusionProofsForRevisions_application_downloadType_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "downloadInclusionProofsForRevisions:application:downloadType:error:");
}

id objc_msgSend_downloadType(void *a1, const char *a2, ...)
{
  return _[a1 downloadType];
}

id objc_msgSend_drainContactsSyncing(void *a1, const char *a2, ...)
{
  return _[a1 drainContactsSyncing];
}

id objc_msgSend_drainDataStore(void *a1, const char *a2, ...)
{
  return _[a1 drainDataStore];
}

id objc_msgSend_dsid(void *a1, const char *a2, ...)
{
  return _[a1 dsid];
}

id objc_msgSend_dumpFlags(void *a1, const char *a2, ...)
{
  return _[a1 dumpFlags];
}

id objc_msgSend_dumpPendingFlags(void *a1, const char *a2, ...)
{
  return _[a1 dumpPendingFlags];
}

id objc_msgSend_earlierDate_(void *a1, const char *a2, ...)
{
  return [a1 earlierDate:];
}

id objc_msgSend_earliestAddedDate_(void *a1, const char *a2, ...)
{
  return [a1 earliestAddedDate:];
}

id objc_msgSend_earliestCurrentTreeVersionWithError_(void *a1, const char *a2, ...)
{
  return [a1 earliestCurrentTreeVersionWithError:];
}

id objc_msgSend_earliestNextTreeVersionWithError_(void *a1, const char *a2, ...)
{
  return [a1 earliestNextTreeVersionWithError:];
}

id objc_msgSend_eligibilityContainerPathAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 eligibilityContainerPathAndReturnError:];
}

id objc_msgSend_eligibilityQueue(void *a1, const char *a2, ...)
{
  return _[a1 eligibilityQueue];
}

id objc_msgSend_eligibilityStatusReporter(void *a1, const char *a2, ...)
{
  return _[a1 eligibilityStatusReporter];
}

id objc_msgSend_eligibilitySupport(void *a1, const char *a2, ...)
{
  return _[a1 eligibilitySupport];
}

id objc_msgSend_eligibleForOptIn_(void *a1, const char *a2, ...)
{
  return [a1 eligibleForOptIn:];
}

id objc_msgSend_emailAddresses(void *a1, const char *a2, ...)
{
  return _[a1 emailAddresses];
}

id objc_msgSend_emailPrefix(void *a1, const char *a2, ...)
{
  return _[a1 emailPrefix];
}

id objc_msgSend_emptyAtDepth_leafIndex_treeId_(void *a1, const char *a2, ...)
{
  return [a1 emptyAtDepth:leafIndex:treeId:];
}

id objc_msgSend_enablePinning(void *a1, const char *a2, ...)
{
  return _[a1 enablePinning];
}

id objc_msgSend_enableSelfValidationXPCActivity(void *a1, const char *a2, ...)
{
  return _[a1 enableSelfValidationXPCActivity];
}

id objc_msgSend_encodeBool_buffer_(void *a1, const char *a2, ...)
{
  return [a1 encodeBool:x0 buffer:x1];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeBool:forKey:];
}

id objc_msgSend_encodeByte_buffer_(void *a1, const char *a2, ...)
{
  return [a1 encodeByte:x0 buffer:x1];
}

id objc_msgSend_encodeByteArray_minLength_maxLength_buffer_(void *a1, const char *a2, ...)
{
  return [a1 encodeByteArray:minLength:maxLength:buffer:];
}

id objc_msgSend_encodeDouble_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeDouble:x0 forKey:x1];
}

id objc_msgSend_encodeExtensions_buffer_(void *a1, const char *a2, ...)
{
  return [a1 encodeExtensions:buffer:];
}

id objc_msgSend_encodeHashValue_buffer_(void *a1, const char *a2, ...)
{
  return [a1 encodeHashValue:x0 buffer:x1];
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeInteger:forKey:];
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeObject:forKey:];
}

id objc_msgSend_encodeUint64_buffer_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "encodeUint64:buffer:");
}

id objc_msgSend_encodeVRFOutput_buffer_(void *a1, const char *a2, ...)
{
  return [a1 encodeVRFOutput:buffer:];
}

id objc_msgSend_encodedData(void *a1, const char *a2, ...)
{
  return _[a1 encodedData];
}

id objc_msgSend_encodedError(void *a1, const char *a2, ...)
{
  return _[a1 encodedError];
}

id objc_msgSend_endSlh(void *a1, const char *a2, ...)
{
  return _[a1 endSlh];
}

id objc_msgSend_enforceCKOptInRecords(void *a1, const char *a2, ...)
{
  return _[a1 enforceCKOptInRecords];
}

id objc_msgSend_enrollementLoggingKeys_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "enrollementLoggingKeys:");
}

id objc_msgSend_ensureContactFieldsPresent_error_(void *a1, const char *a2, ...)
{
  return [a1 ensureContactFieldsPresent:error:];
}

id objc_msgSend_entities(void *a1, const char *a2, ...)
{
  return _[a1 entities];
}

id objc_msgSend_entity(void *a1, const char *a2, ...)
{
  return _[a1 entity];
}

id objc_msgSend_entityName(void *a1, const char *a2, ...)
{
  return _[a1 entityName];
}

id objc_msgSend_entryPosition(void *a1, const char *a2, ...)
{
  return _[a1 entryPosition];
}

id objc_msgSend_enumDescriptor(void *a1, const char *a2, ...)
{
  return _[a1 enumDescriptor];
}

id objc_msgSend_enumVerifier(void *a1, const char *a2, ...)
{
  return _[a1 enumVerifier];
}

id objc_msgSend_enumerateColumnsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateColumnsUsingBlock:];
}

id objc_msgSend_enumerateContactsWithFetchRequest_error_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateContactsWithFetchRequest:error:usingBlock:];
}

id objc_msgSend_enumerateForTextFormat_(void *a1, const char *a2, ...)
{
  return [a1 enumerateForTextFormat:];
}

id objc_msgSend_enumerateKeysAndBoolsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndBoolsUsingBlock:];
}

id objc_msgSend_enumerateKeysAndDoublesUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndDoublesUsingBlock:];
}

id objc_msgSend_enumerateKeysAndFloatsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndFloatsUsingBlock:];
}

id objc_msgSend_enumerateKeysAndInt32sUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndInt32sUsingBlock:];
}

id objc_msgSend_enumerateKeysAndInt64sUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndInt64sUsingBlock:];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndObjectsUsingBlock:];
}

id objc_msgSend_enumerateKeysAndRawValuesUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndRawValuesUsingBlock:];
}

id objc_msgSend_enumerateKeysAndUInt32sUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndUInt32sUsingBlock:];
}

id objc_msgSend_enumerateKeysAndUInt64sUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndUInt64sUsingBlock:];
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateObjectsUsingBlock:];
}

id objc_msgSend_enumerateRawValuesWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateRawValuesWithBlock:];
}

id objc_msgSend_enumerateValuesWithBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateValuesWithBlock:];
}

id objc_msgSend_enumeratorForChangeHistoryFetchRequest_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "enumeratorForChangeHistoryFetchRequest:error:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _[a1 environment];
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorCode(void *a1, const char *a2, ...)
{
  return _[a1 errorCode];
}

id objc_msgSend_errorDomain(void *a1, const char *a2, ...)
{
  return _[a1 errorDomain];
}

id objc_msgSend_errorFromData_(void *a1, const char *a2, ...)
{
  return [a1 errorFromData:];
}

id objc_msgSend_errorFromJson_(void *a1, const char *a2, ...)
{
  return [a1 errorFromJson:];
}

id objc_msgSend_errorState(void *a1, const char *a2, ...)
{
  return _[a1 errorState];
}

id objc_msgSend_errorWithDomain_code_description_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:x0 code:x1 description:x2];
}

id objc_msgSend_errorWithDomain_code_description_underlying_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:x0 code:x1 description:x2 underlying:x3];
}

id objc_msgSend_errorWithDomain_code_errorLevel_underlyingError_description_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:x0 code:x1 errorLevel:x2 underlyingError:x3 description:x4];
}

id objc_msgSend_errorWithDomain_code_errorLevel_underlyingError_userinfo_description_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "errorWithDomain:code:errorLevel:underlyingError:userinfo:description:");
}

id objc_msgSend_errorWithDomain_code_underlyingError_description_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:x0 code:x1 underlyingError:x2 description:x3];
}

id objc_msgSend_errorWithDomain_code_underlyingError_userinfo_description_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "errorWithDomain:code:underlyingError:userinfo:description:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:x0 code:x1 userInfo:x2];
}

id objc_msgSend_errorWithDomain_code_userInfo_description_underlying_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:code:userInfo:description:underlying:];
}

id objc_msgSend_errorWithError_underlyingError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "errorWithError:underlyingError:");
}

id objc_msgSend_errors(void *a1, const char *a2, ...)
{
  return _[a1 errors];
}

id objc_msgSend_errorsForFailedEvents_dataStore_completionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "errorsForFailedEvents:dataStore:completionBlock:");
}

id objc_msgSend_escrowExpiry(void *a1, const char *a2, ...)
{
  return _[a1 escrowExpiry];
}

id objc_msgSend_escrowExpiryMs(void *a1, const char *a2, ...)
{
  return _[a1 escrowExpiryMs];
}

id objc_msgSend_evalCurrentOptInState_optInStateError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "evalCurrentOptInState:optInStateError:");
}

id objc_msgSend_evaluateCloudDataWithApplication_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "evaluateCloudDataWithApplication:error:")];
}

id objc_msgSend_evaluateKTLogData_application_error_(void *a1, const char *a2, ...)
{
  return [a1 evaluateKTLogData:application:error:];
}

id objc_msgSend_evaluateWithObject_(void *a1, const char *a2, ...)
{
  return [a1 evaluateWithObject:];
}

id objc_msgSend_eventId(void *a1, const char *a2, ...)
{
  return _[a1 eventId];
}

id objc_msgSend_eventsByTime(void *a1, const char *a2, ...)
{
  return _[a1 eventsByTime];
}

id objc_msgSend_everCompletedVerification(void *a1, const char *a2, ...)
{
  return _[a1 everCompletedVerification];
}

id objc_msgSend_everOptIn(void *a1, const char *a2, ...)
{
  return _[a1 everOptIn];
}

id objc_msgSend_everOptedIn(void *a1, const char *a2, ...)
{
  return _[a1 everOptedIn];
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 exceptionWithName:reason:userInfo:];
}

id objc_msgSend_execute_(void *a1, const char *a2, ...)
{
  return [a1 execute:];
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return [a1 executeFetchRequest:error];
}

id objc_msgSend_executeRequest_error_(void *a1, const char *a2, ...)
{
  return [a1 executeRequest:error];
}

id objc_msgSend_executeSQL_(void *a1, const char *a2, ...)
{
  return [a1 executeSQL:];
}

id objc_msgSend_executeSQL_arguments_(void *a1, const char *a2, ...)
{
  return [a1 executeSQL:];
}

id objc_msgSend_existingObjectWithID_error_(void *a1, const char *a2, ...)
{
  return [a1 existingObjectWithID:error:];
}

id objc_msgSend_expectedFailure(void *a1, const char *a2, ...)
{
  return _[a1 expectedFailure];
}

id objc_msgSend_expectedSelfResolutionDate_requestDate_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "expectedSelfResolutionDate:requestDate:")];
}

id objc_msgSend_expirationTime(void *a1, const char *a2, ...)
{
  return _[a1 expirationTime];
}

id objc_msgSend_expired_(void *a1, const char *a2, ...)
{
  return [a1 expired:];
}

id objc_msgSend_expiry(void *a1, const char *a2, ...)
{
  return _[a1 expiry];
}

id objc_msgSend_expiryMs(void *a1, const char *a2, ...)
{
  return _[a1 expiryMs];
}

id objc_msgSend_exportToCloud(void *a1, const char *a2, ...)
{
  return _[a1 exportToCloud];
}

id objc_msgSend_extensionData(void *a1, const char *a2, ...)
{
  return _[a1 extensionData];
}

id objc_msgSend_extensionForDescriptor_fieldNumber_(void *a1, const char *a2, ...)
{
  return [a1 extensionForDescriptor:fieldNumber:];
}

id objc_msgSend_extensionRanges(void *a1, const char *a2, ...)
{
  return _[a1 extensionRanges];
}

id objc_msgSend_extensionRangesCount(void *a1, const char *a2, ...)
{
  return _[a1 extensionRangesCount];
}

id objc_msgSend_extensionRegistry(void *a1, const char *a2, ...)
{
  return _[a1 extensionRegistry];
}

id objc_msgSend_extensionType(void *a1, const char *a2, ...)
{
  return _[a1 extensionType];
}

id objc_msgSend_extensions(void *a1, const char *a2, ...)
{
  return _[a1 extensions];
}

id objc_msgSend_extensionsCurrentlySet(void *a1, const char *a2, ...)
{
  return _[a1 extensionsCurrentlySet];
}

id objc_msgSend_externalURI(void *a1, const char *a2, ...)
{
  return _[a1 externalURI];
}

id objc_msgSend_failExpiredRequest_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failExpiredRequest:error:");
}

id objc_msgSend_failExpiredSTHsForType_error_(void *a1, const char *a2, ...)
{
  return [a1 failExpiredSTHsForType:error];
}

id objc_msgSend_failHeadDownload_application_failure_retry_logClient_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failHeadDownload:application:failure:retry:logClient:");
}

id objc_msgSend_failHeadDownload_failure_logClient_(void *a1, const char *a2, ...)
{
  return [a1 failHeadDownload:failure:logClient:];
}

id objc_msgSend_failHeadDownloadRecord_failure_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failHeadDownloadRecord:failure:error:");
}

id objc_msgSend_failRpcId_failure_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failRpcId:failure:error:");
}

id objc_msgSend_failSMTsIfOverMMD_proof_underlyingError_errorCode_analyticsData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failSMTsIfOverMMD:proof:underlyingError:errorCode:analyticsData:")];
}

id objc_msgSend_failSMTsIfOverMMD_skipOptInOut_proof_underlyingError_errorCode_analyticsData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failSMTsIfOverMMD:skipOptInOut:proof:underlyingError:errorCode:analyticsData:")];
}

id objc_msgSend_failStates(void *a1, const char *a2, ...)
{
  return _[a1 failStates];
}

id objc_msgSend_failedHeadSignaturesWithRevisions_application_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failedHeadSignaturesWithRevisions:application:")];
}

id objc_msgSend_failedRecordsForSyncedLoggableDatas_accountKey_cloudDevices_requestDate_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failedRecordsForSyncedLoggableDatas:accountKey:cloudDevices:requestDate:error:");
}

id objc_msgSend_failedRevs(void *a1, const char *a2, ...)
{
  return _[a1 failedRevs];
}

id objc_msgSend_failedSMHs(void *a1, const char *a2, ...)
{
  return _[a1 failedSMHs];
}

id objc_msgSend_failedServerLoggableDatas_accountKey_idsResponseTime_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "failedServerLoggableDatas:accountKey:idsResponseTime:error:")];
}

id objc_msgSend_failedSigs(void *a1, const char *a2, ...)
{
  return _[a1 failedSigs];
}

id objc_msgSend_failure(void *a1, const char *a2, ...)
{
  return _[a1 failure];
}

id objc_msgSend_failureEvent(void *a1, const char *a2, ...)
{
  return _[a1 failureEvent];
}

id objc_msgSend_failureIgnorePeriod(void *a1, const char *a2, ...)
{
  return _[a1 failureIgnorePeriod];
}

id objc_msgSend_failureResult_loggableData_(void *a1, const char *a2, ...)
{
  return [a1 failureResult:loggableData];
}

id objc_msgSend_failures(void *a1, const char *a2, ...)
{
  return _[a1 failures];
}

id objc_msgSend_fastWatchdogExit(void *a1, const char *a2, ...)
{
  return _[a1 fastWatchdogExit];
}

id objc_msgSend_fetch_allowEmptyData_useReversePush_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetch:x0 allowEmptyData:x1 useReversePush:x2 completionHandler:x3];
}

id objc_msgSend_fetch_shouldRetry_allowEmptyData_useReversePush_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetch:x0 shouldRetry:x1 allowEmptyData:x2 useReversePush:x3 completionHandler:x4];
}

id objc_msgSend_fetchAccountsRetryingWithTimeout_error_(void *a1, const char *a2, ...)
{
  return [a1 fetchAccountsRetryingWithTimeout:error:];
}

id objc_msgSend_fetchAndStoreContactsSyncTokenWithConfigStore_(void *a1, const char *a2, ...)
{
  return [a1 fetchAndStoreContactsSyncTokenWithConfigStore:];
}

id objc_msgSend_fetchAndValidateEnrollKTRequest_transparentData_loggableDatas_cloudOptIn_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAndValidateEnrollKTRequest:transparentData:loggableDatas:cloudOptIn:error:");
}

id objc_msgSend_fetchAndValidatePeerKTRequest_fetchNow_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchAndValidatePeerKTRequest:fetchNow:completionHandler:");
}

id objc_msgSend_fetchBatchQueries_userInitiated_responseHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchBatchQueries:x0 userInitiated:x1 responseHandler:x2 completionHandler:x3];
}

id objc_msgSend_fetchBatchQuery_uuid_userInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchBatchQuery:uuid:userInitiated:completionHandler:");
}

id objc_msgSend_fetchBatchQueryDiagnostics_application_userInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchBatchQueryDiagnostics:application:userInitiated:completionHandler:");
}

id objc_msgSend_fetchCKAccountStatusScheduler(void *a1, const char *a2, ...)
{
  return _[a1 fetchCKAccountStatusScheduler];
}

id objc_msgSend_fetchCacheOnly_completion_(void *a1, const char *a2, ...)
{
  return [a1 fetchCacheOnly:x0 completion:x1];
}

id objc_msgSend_fetchCliqueStatus_error_(void *a1, const char *a2, ...)
{
  return [a1 fetchCliqueStatus:error];
}

id objc_msgSend_fetchCloudData_updateField_complete_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchCloudData:updateField:complete:");
}

id objc_msgSend_fetchCloudKit(void *a1, const char *a2, ...)
{
  return _[a1 fetchCloudKit];
}

id objc_msgSend_fetchCloudStorage(void *a1, const char *a2, ...)
{
  return _[a1 fetchCloudStorage];
}

id objc_msgSend_fetchConfigBag_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchConfigBag:completionHandler:");
}

id objc_msgSend_fetchConsistencyProof_uuid_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchConsistencyProof:uuid completionHandler:];
}

id objc_msgSend_fetchContactsSyncToken(void *a1, const char *a2, ...)
{
  return _[a1 fetchContactsSyncToken];
}

id objc_msgSend_fetchCount(void *a1, const char *a2, ...)
{
  return _[a1 fetchCount];
}

id objc_msgSend_fetchDeviceSignature_complete_(void *a1, const char *a2, ...)
{
  return [a1 fetchDeviceSignature:complete:];
}

id objc_msgSend_fetchDownloadRecord_application_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchDownloadRecord:application:error:");
}

id objc_msgSend_fetchDownloadRecordById_error_(void *a1, const char *a2, ...)
{
  return [a1 fetchDownloadRecordById:error:];
}

id objc_msgSend_fetchFetchRecordById_error_(void *a1, const char *a2, ...)
{
  return [a1 fetchFetchRecordById:error];
}

id objc_msgSend_fetchGroup(void *a1, const char *a2, ...)
{
  return _[a1 fetchGroup];
}

id objc_msgSend_fetchHandles_moc_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchHandles:moc:error:");
}

id objc_msgSend_fetchHistoryAfterToken_(void *a1, const char *a2, ...)
{
  return [a1 fetchHistoryAfterToken:];
}

id objc_msgSend_fetchIDMSDeviceList_(void *a1, const char *a2, ...)
{
  return [a1 fetchIDMSDeviceList:];
}

id objc_msgSend_fetchId(void *a1, const char *a2, ...)
{
  return _[a1 fetchId];
}

id objc_msgSend_fetchKTInfoForApplication_uri_complete_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchKTInfoForApplication:uri:complete:");
}

id objc_msgSend_fetchKTRegistrationStatus_(void *a1, const char *a2, ...)
{
  return [a1 fetchKTRegistrationStatus:];
}

id objc_msgSend_fetchKTRegistrationStatusWithCompletion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchKTRegistrationStatusWithCompletion:");
}

id objc_msgSend_fetchKeyStore_application_contextStore_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchKeyStore:x0 application:x1 contextStore:x2 completionHandler:x3];
}

id objc_msgSend_fetchMessage_uri_uuid_application_userInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchMessage:x0 uri:x1 uuid:x2 application:x3 userInitiated:x4 completionHandler:x5];
}

id objc_msgSend_fetchNumericPropertyOnMostRecentMapHead_logBeginMs_propertyName_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchNumericPropertyOnMostRecentMapHead:logBeginMs:propertyName:error:");
}

id objc_msgSend_fetchOrCreateVerification_application_verificationInfo_fetchNow_error_(void *a1, const char *a2, ...)
{
  return [a1 fetchOrCreateVerification:x0 application:x1 verificationInfo:x2 fetchNow:x3 error:x4];
}

id objc_msgSend_fetchPeer_application_error_(void *a1, const char *a2, ...)
{
  return [a1 fetchPeer:application:error:];
}

id objc_msgSend_fetchPeerHandles_application_complete_(void *a1, const char *a2, ...)
{
  return [a1 fetchPeerHandles:application:complete:];
}

id objc_msgSend_fetchPeerVerificationInfos_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 fetchPeerVerificationInfos:x0 completionBlock:x1];
}

id objc_msgSend_fetchPublicKeys_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchPublicKeys:x0 completionHandler:x1];
}

id objc_msgSend_fetchQuery_uuid_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchQuery:uuid:completionHandler:");
}

id objc_msgSend_fetchQuery_uuid_userInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchQuery:uuid userInitiated:completionHandler];
}

id objc_msgSend_fetchQueryForKTRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchQueryForKTRequest:completionHandler:");
}

id objc_msgSend_fetchQueryForKTRequest_userInitiated_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 fetchQueryForKTRequest:userInitiated:completionHandler:];
}

id objc_msgSend_fetchQueue(void *a1, const char *a2, ...)
{
  return _[a1 fetchQueue];
}

id objc_msgSend_fetchRPCSingleQuery_userInitiated_cachedYoungerThan_backgroundOpId_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchRPCSingleQuery:userInitiated:cachedYoungerThan:backgroundOpId:completionHandler:");
}

id objc_msgSend_fetchRequest(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequest];
}

id objc_msgSend_fetchRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchRequest:completionHandler:");
}

id objc_msgSend_fetchRequestForUUID_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchRequestForUUID:error:");
}

id objc_msgSend_fetchRequestWithEntityName_(void *a1, const char *a2, ...)
{
  return [a1 fetchRequestWithEntityName:];
}

id objc_msgSend_fetchRequestWithUri_application_accountKey_loggableDatas_youngerThan_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchRequestWithUri:application:accountKey:loggableDatas:youngerThan:error:");
}

id objc_msgSend_fetchRevisionLogInclusionProof_uuid_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchRevisionLogInclusionProof:uuid:completionHandler:")];
}

id objc_msgSend_fetchSelfValidationState_uri_error_(void *a1, const char *a2, ...)
{
  return [a1 fetchSelfValidationState:uri:error:];
}

id objc_msgSend_fetchSelfVerificationInfo_(void *a1, const char *a2, ...)
{
  return [a1 fetchSelfVerificationInfo:];
}

id objc_msgSend_fetchSelfVerificationInfo_completionBlock_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchSelfVerificationInfo:completionBlock:");
}

id objc_msgSend_fetchSelfVerificationInfoForApplication_complete_(void *a1, const char *a2, ...)
{
  return [a1 fetchSelfVerificationInfoForApplication:complete:];
}

id objc_msgSend_fetchServerRpcById_error_(void *a1, const char *a2, ...)
{
  return [a1 fetchServerRpcById:error:];
}

id objc_msgSend_fetchSettings_force_(void *a1, const char *a2, ...)
{
  return [a1 fetchSettings:force:];
}

id objc_msgSend_fetchSyncedLoggableDataByDeviceIdHash_(void *a1, const char *a2, ...)
{
  return [a1 fetchSyncedLoggableDataByDeviceIdHash:];
}

id objc_msgSend_fetchSyncedLoggableDataByPushToken_registrationData_(void *a1, const char *a2, ...)
{
  return [a1 fetchSyncedLoggableDataByPushToken:registrationData];
}

id objc_msgSend_fetchTreeHead_isMapHead_application_logBeginTime_logType_revision_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchTreeHead:isMapHead:application:logBeginTime:logType:revision:error:");
}

id objc_msgSend_fetchTreeHeadsWithoutHash_isMapHead_application_logBeginTime_logType_revision_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchTreeHeadsWithoutHash:isMapHead:application:logBeginTime:logType:revision:error:");
}

id objc_msgSend_fieldNumber(void *a1, const char *a2, ...)
{
  return _[a1 fieldNumber];
}

id objc_msgSend_fieldType(void *a1, const char *a2, ...)
{
  return _[a1 fieldType];
}

id objc_msgSend_fieldWithNumber_(void *a1, const char *a2, ...)
{
  return [a1 fieldWithNumber:];
}

id objc_msgSend_file(void *a1, const char *a2, ...)
{
  return _[a1 file];
}

id objc_msgSend_fileSystemRepresentation(void *a1, const char *a2, ...)
{
  return _[a1 fileSystemRepresentation];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:];
}

id objc_msgSend_fillBackgroundStatus(void *a1, const char *a2, ...)
{
  return _[a1 fillBackgroundStatus];
}

id objc_msgSend_fillInError(void *a1, const char *a2, ...)
{
  return _[a1 fillInError];
}

id objc_msgSend_fillOptInState(void *a1, const char *a2, ...)
{
  return _[a1 fillOptInState];
}

id objc_msgSend_fillSelfStatus(void *a1, const char *a2, ...)
{
  return _[a1 fillSelfStatus];
}

id objc_msgSend_fillStatus(void *a1, const char *a2, ...)
{
  return _[a1 fillStatus];
}

id objc_msgSend_fillSystemStatus(void *a1, const char *a2, ...)
{
  return _[a1 fillSystemStatus];
}

id objc_msgSend_filterLoggableDatas_clientDataHash_(void *a1, const char *a2, ...)
{
  return [a1 filterLoggableDatas:clientDataHash:];
}

id objc_msgSend_filterLoggableDatas_deviceIdHash_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "filterLoggableDatas:deviceIdHash:");
}

id objc_msgSend_findStaticKeyByContact_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "findStaticKeyByContact:error:");
}

id objc_msgSend_findStaticKeyByContactExternalURI_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "findStaticKeyByContactExternalURI:error:");
}

id objc_msgSend_findStaticKeyByContactIdentifier_error_(void *a1, const char *a2, ...)
{
  return [a1 findStaticKeyByContactIdentifier:x0 error:x1];
}

id objc_msgSend_findStaticKeyByHandle_error_(void *a1, const char *a2, ...)
{
  return [a1 findStaticKeyByHandle:error];
}

id objc_msgSend_findStaticKeyByKey_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "findStaticKeyByKey:error:");
}

id objc_msgSend_findStaticKeyStoreMappingByKey_complete_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "findStaticKeyStoreMappingByKey:complete:");
}

id objc_msgSend_finishDate(void *a1, const char *a2, ...)
{
  return _[a1 finishDate];
}

id objc_msgSend_finishOperation(void *a1, const char *a2, ...)
{
  return _[a1 finishOperation];
}

id objc_msgSend_finishedInitialDispatches(void *a1, const char *a2, ...)
{
  return _[a1 finishedInitialDispatches];
}

id objc_msgSend_finishedOp(void *a1, const char *a2, ...)
{
  return _[a1 finishedOp];
}

id objc_msgSend_finishingBlock(void *a1, const char *a2, ...)
{
  return _[a1 finishingBlock];
}

id objc_msgSend_fireTime(void *a1, const char *a2, ...)
{
  return _[a1 fireTime];
}

id objc_msgSend_firstCKAccountFetch(void *a1, const char *a2, ...)
{
  return _[a1 firstCKAccountFetch];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_fixed32List(void *a1, const char *a2, ...)
{
  return _[a1 fixed32List];
}

id objc_msgSend_fixed64List(void *a1, const char *a2, ...)
{
  return _[a1 fixed64List];
}

id objc_msgSend_fixupName(void *a1, const char *a2, ...)
{
  return _[a1 fixupName];
}

id objc_msgSend_flag(void *a1, const char *a2, ...)
{
  return _[a1 flag];
}

id objc_msgSend_flagConditions(void *a1, const char *a2, ...)
{
  return _[a1 flagConditions];
}

id objc_msgSend_flagHandler(void *a1, const char *a2, ...)
{
  return _[a1 flagHandler];
}

id objc_msgSend_flags(void *a1, const char *a2, ...)
{
  return _[a1 flags];
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _[a1 flush];
}

id objc_msgSend_followStates(void *a1, const char *a2, ...)
{
  return _[a1 followStates];
}

id objc_msgSend_followUp(void *a1, const char *a2, ...)
{
  return _[a1 followUp];
}

id objc_msgSend_followUpItems(void *a1, const char *a2, ...)
{
  return _[a1 followUpItems];
}

id objc_msgSend_followup(void *a1, const char *a2, ...)
{
  return _[a1 followup];
}

id objc_msgSend_followupTicket(void *a1, const char *a2, ...)
{
  return _[a1 followupTicket];
}

id objc_msgSend_forceRefresh(void *a1, const char *a2, ...)
{
  return _[a1 forceRefresh];
}

id objc_msgSend_forceReload(void *a1, const char *a2, ...)
{
  return _[a1 forceReload];
}

id objc_msgSend_forceSync_(void *a1, const char *a2, ...)
{
  return [a1 forceSync:];
}

id objc_msgSend_forceUpdate(void *a1, const char *a2, ...)
{
  return _[a1 forceUpdate];
}

id objc_msgSend_forceValidateUUID_uri_completionBlock_(void *a1, const char *a2, ...)
{
  return [a1 forceValidateUUID:uri:completionBlock:];
}

id objc_msgSend_forcedConfigure_logClient_applicationHandler_completionHandler_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "forcedConfigure:logClient:applicationHandler:completionHandler:");
}

id objc_msgSend_foregroundSession(void *a1, const char *a2, ...)
{
  return _[a1 foregroundSession];
}

id objc_msgSend_formatEventName_application_(void *a1, const char *a2, ...)
{
  return [a1 formatEventName:application:];
}

id objc_msgSend_formatEventName_application_state_(void *a1, const char *a2, ...)
{
  return [a1 formatEventName:x0 application:x1 state:x2];
}

id objc_msgSend_forwards(void *a1, const char *a2, ...)
{
  return _[a1 forwards];
}

id objc_msgSend_fulfill(void *a1, const char *a2, ...)
{
  return _[a1 fulfill];
}

id objc_msgSend_fullName(void *a1, const char *a2, ...)
{
  return _[a1 fullName];
}

id objc_msgSend_futureBlock(void *a1, const char *a2, ...)
{
  return _[a1 futureBlock];
}

id objc_msgSend_fuzzyDaysSinceDate_(void *a1, const char *a2, ...)
{
  return [a1 fuzzyDaysSinceDate:];
}

id objc_msgSend_fuzzyInteger_(void *a1, const char *a2, ...)
{
  return [a1 fuzzyInteger:];
}

id objc_msgSend_fuzzyNumber_(void *a1, const char *a2, ...)
{
  return [a1 fuzzyNumber:];
}

id objc_msgSend_fuzzyTimeSinceDateKey_(void *a1, const char *a2, ...)
{
  return [a1 fuzzyTimeSinceDateKey:];
}

id objc_msgSend_fuzzyTimeSinceLastSuccess_(void *a1, const char *a2, ...)
{
  return [a1 fuzzyTimeSinceLastSuccess:];
}

id objc_msgSend_garbageCollectEntity_predicate_error_(void *a1, const char *a2, ...)
{
  return [a1 garbageCollectEntity:predicate:error:];
}

id objc_msgSend_garbageCollectHeads_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "garbageCollectHeads:error:")];
}

id objc_msgSend_garbageCollectRequests_olderThan_error_(void *a1, const char *a2, ...)
{
  return [a1 garbageCollectRequests:olderThan:error:];
}

id objc_msgSend_garbageCollectSMHs_logBeginMs_olderThanRevision_olderThanDate_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "garbageCollectSMHs:logBeginMs:olderThanRevision:olderThanDate:error:");
}

id objc_msgSend_garbageCollectSMTs_(void *a1, const char *a2, ...)
{
  return [a1 garbageCollectSMTs:];
}

id objc_msgSend_garbageCollectSTHs_logBeginMs_olderThanDate_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "garbageCollectSTHs:logBeginMs:olderThanDate:error:");
}

id objc_msgSend_garbageCollectServerRPCs_(void *a1, const char *a2, ...)
{
  return [a1 garbageCollectServerRPCs:];
}

id objc_msgSend_garbageCollectVerifications_(void *a1, const char *a2, ...)
{
  return [a1 garbageCollectVerifications:];
}

id objc_msgSend_generateDone(void *a1, const char *a2, ...)
{
  return _[a1 generateDone];
}

id objc_msgSend_generateError_method_(void *a1, const char *a2, ...)
{
  return [a1 generateError:method:];
}

id objc_msgSend_getAggregateOptInState_(void *a1, const char *a2, ...)
{
  return [a1 getAggregateOptInState:];
}

id objc_msgSend_getAggregateOptInStateForApplication_error_(void *a1, const char *a2, ...)
{
  return [a1 getAggregateOptInStateForApplication:error];
}

id objc_msgSend_getAggregateResult_element_complete_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getAggregateResult:element:complete:");
}

id objc_msgSend_getAllOptInStates_(void *a1, const char *a2, ...)
{
  return [a1 getAllOptInStates:];
}

id objc_msgSend_getAllOptInStatesAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 getAllOptInStatesAndReturnError:];
}

id objc_msgSend_getBAAValidity(void *a1, const char *a2, ...)
{
  return _[a1 getBAAValidity];
}

id objc_msgSend_getBool_(void *a1, const char *a2, ...)
{
  return [a1 getBool:];
}